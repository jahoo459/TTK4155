
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000033c  00800100  000021d0  00002264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  0080043c  0080043c  000025a0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000025a0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000308  00000000  00000000  000025fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003db6  00000000  00000000  00002904  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011f8  00000000  00000000  000066ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001848  00000000  00000000  000078b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000790  00000000  00000000  000090fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e65  00000000  00000000  0000988c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000207d  00000000  00000000  0000a6f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003f0  00000000  00000000  0000c76e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	fa c1       	rjmp	.+1012   	; 0x402 <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <JOY_calibrate+0x21e>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	14 e0       	ldi	r17, 0x04	; 4
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e0 ed       	ldi	r30, 0xD0	; 208
     37c:	f1 e2       	ldi	r31, 0x21	; 33
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ac 33       	cpi	r26, 0x3C	; 60
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	24 e0       	ldi	r18, 0x04	; 4
     38c:	ac e3       	ldi	r26, 0x3C	; 60
     38e:	b4 e0       	ldi	r27, 0x04	; 4
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a5 36       	cpi	r26, 0x65	; 101
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	88 d0       	rcall	.+272    	; 0x4ac <main>
     39c:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 55 04 	sts	0x0455, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 40 04 	sts	0x0440, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 3f 04 	sts	0x043F, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 3d 04 	sts	0x043D, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_3>:
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	8f 93       	push	r24
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 3c 04 	sts	0x043C, r24
     414:	8f 91       	pop	r24
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <init>:
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	1f e1       	ldi	r17, 0x1F	; 31
     42a:	e1 2e       	mov	r14, r17
     42c:	f1 2c       	mov	r15, r1
     42e:	00 e0       	ldi	r16, 0x00	; 0
     430:	10 e0       	ldi	r17, 0x00	; 0
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	4b e4       	ldi	r20, 0x4B	; 75
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e8       	ldi	r22, 0x80	; 128
     43c:	75 e2       	ldi	r23, 0x25	; 37
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 0b 0c 	call	0x1816	; 0x1816 <uartInit>
     446:	82 eb       	ldi	r24, 0xB2	; 178
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <puts>
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	44 d2       	rcall	.+1160   	; 0x8da <enableXMEM>
     452:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <SLI_init>
     456:	53 d2       	rcall	.+1190   	; 0x8fe <JOY_init>
     458:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <OLED_init>
     45c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <SPI_init>
     460:	4e d4       	rcall	.+2204   	; 0xcfe <MCP2515_init>
     462:	98 d0       	rcall	.+304    	; 0x594 <CAN_init>
     464:	8b b7       	in	r24, 0x3b	; 59
     466:	80 64       	ori	r24, 0x40	; 64
     468:	8b bf       	out	0x3b, r24	; 59
     46a:	85 b7       	in	r24, 0x35	; 53
     46c:	82 60       	ori	r24, 0x02	; 2
     46e:	85 bf       	out	0x35, r24	; 53
     470:	85 b7       	in	r24, 0x35	; 53
     472:	8e 7f       	andi	r24, 0xFE	; 254
     474:	85 bf       	out	0x35, r24	; 53
     476:	8b 98       	cbi	0x11, 3	; 17
     478:	93 9a       	sbi	0x12, 3	; 18
     47a:	8b b7       	in	r24, 0x3b	; 59
     47c:	80 68       	ori	r24, 0x80	; 128
     47e:	8b bf       	out	0x3b, r24	; 59
     480:	85 b7       	in	r24, 0x35	; 53
     482:	88 60       	ori	r24, 0x08	; 8
     484:	85 bf       	out	0x35, r24	; 53
     486:	85 b7       	in	r24, 0x35	; 53
     488:	8b 7f       	andi	r24, 0xFB	; 251
     48a:	85 bf       	out	0x35, r24	; 53
     48c:	8b b7       	in	r24, 0x3b	; 59
     48e:	80 62       	ori	r24, 0x20	; 32
     490:	8b bf       	out	0x3b, r24	; 59
     492:	86 b7       	in	r24, 0x36	; 54
     494:	8e 7f       	andi	r24, 0xFE	; 254
     496:	86 bf       	out	0x36, r24	; 54
     498:	32 98       	cbi	0x06, 2	; 6
     49a:	3a 98       	cbi	0x07, 2	; 7
     49c:	b8 98       	cbi	0x17, 0	; 23
     49e:	c0 98       	cbi	0x18, 0	; 24
     4a0:	78 94       	sei
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	ff 90       	pop	r15
     4a8:	ef 90       	pop	r14
     4aa:	08 95       	ret

000004ac <main>:
/*
=======================MAIN FUNCTION=========================
*/

int main(void)
{
     4ac:	cf 93       	push	r28
     4ae:	df 93       	push	r29
     4b0:	cd b7       	in	r28, 0x3d	; 61
     4b2:	de b7       	in	r29, 0x3e	; 62
     4b4:	ac 97       	sbiw	r28, 0x2c	; 44
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
	
	init();
     4c0:	af df       	rcall	.-162    	; 0x420 <init>

// 	MCP2515_init();
// 	CAN_init();
	
	struct can_message message2send;
	message2send.id = 23;
     4c2:	87 e1       	ldi	r24, 0x17	; 23
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	9a 83       	std	Y+2, r25	; 0x02
     4c8:	89 83       	std	Y+1, r24	; 0x01
	message2send.length = 8;
     4ca:	88 e0       	ldi	r24, 0x08	; 8
     4cc:	8b 83       	std	Y+3, r24	; 0x03
	message2send.data[0] = '@';
     4ce:	80 e4       	ldi	r24, 0x40	; 64
     4d0:	8c 83       	std	Y+4, r24	; 0x04
	message2send.data[1] = '~';
     4d2:	8e e7       	ldi	r24, 0x7E	; 126
     4d4:	8d 83       	std	Y+5, r24	; 0x05
	message2send.data[2] = 'H';
     4d6:	88 e4       	ldi	r24, 0x48	; 72
     4d8:	8e 83       	std	Y+6, r24	; 0x06
	message2send.data[3] = 'l';
     4da:	8c e6       	ldi	r24, 0x6C	; 108
     4dc:	8f 83       	std	Y+7, r24	; 0x07
	message2send.data[4] = '1';
     4de:	81 e3       	ldi	r24, 0x31	; 49
     4e0:	88 87       	std	Y+8, r24	; 0x08
	message2send.data[5] = '.';
     4e2:	8e e2       	ldi	r24, 0x2E	; 46
     4e4:	89 87       	std	Y+9, r24	; 0x09
	message2send.data[6] = '/';
     4e6:	8f e2       	ldi	r24, 0x2F	; 47
     4e8:	8a 87       	std	Y+10, r24	; 0x0a
	message2send.data[7] = '5';
     4ea:	85 e3       	ldi	r24, 0x35	; 53
     4ec:	8b 87       	std	Y+11, r24	; 0x0b
	CAN_sendMessage(&message2send, 0);
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	ce 01       	movw	r24, r28
     4f2:	01 96       	adiw	r24, 0x01	; 1
     4f4:	66 d0       	rcall	.+204    	; 0x5c2 <CAN_sendMessage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4f6:	2f ef       	ldi	r18, 0xFF	; 255
     4f8:	8f e7       	ldi	r24, 0x7F	; 127
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	80 40       	sbci	r24, 0x00	; 0
     500:	90 40       	sbci	r25, 0x00	; 0
     502:	e1 f7       	brne	.-8      	; 0x4fc <main+0x50>
     504:	00 c0       	rjmp	.+0      	; 0x506 <__stack+0x7>
     506:	00 c0       	rjmp	.+0      	; 0x508 <__stack+0x9>
	_delay_ms(100);
	
	struct can_message message3send;
	message3send.id = 12;
     508:	8c e0       	ldi	r24, 0x0C	; 12
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	9d 87       	std	Y+13, r25	; 0x0d
     50e:	8c 87       	std	Y+12, r24	; 0x0c
	message3send.length = 2;
     510:	82 e0       	ldi	r24, 0x02	; 2
     512:	8e 87       	std	Y+14, r24	; 0x0e
	message3send.data[0] = 'a';
     514:	81 e6       	ldi	r24, 0x61	; 97
     516:	8f 87       	std	Y+15, r24	; 0x0f
	message3send.data[1] = '+';
     518:	8b e2       	ldi	r24, 0x2B	; 43
     51a:	88 8b       	std	Y+16, r24	; 0x10
	
	uint8_t SPIcount = 0;
     51c:	10 e0       	ldi	r17, 0x00	; 0
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     51e:	0b e0       	ldi	r16, 0x0B	; 11
			
				if(SPIcount == 0)
				{
					CAN_sendMessage(&message3send, 0);
					_delay_ms(100);
					SPIcount = 1;
     520:	ff 24       	eor	r15, r15
     522:	f3 94       	inc	r15
	uint8_t SPIcount = 0;
	
    while(1)
    {
		// statusMultifunctionBoard();
		JOY_getDirection();
     524:	b2 d3       	rcall	.+1892   	; 0xc8a <JOY_getDirection>

		// todo: remove! will be included in the menu driver later
		if(JOYcalibFlag)
     526:	80 91 3e 04 	lds	r24, 0x043E
     52a:	88 23       	and	r24, r24
     52c:	19 f0       	breq	.+6      	; 0x534 <__stack+0x35>
		{
			//run joystick calibration
			JOY_calibrate();
     52e:	fa d1       	rcall	.+1012   	; 0x924 <JOY_calibrate>
			JOYcalibFlag = 0;
     530:	10 92 3e 04 	sts	0x043E, r1
		}

		if(activateMenuFlag)
     534:	80 91 3d 04 	lds	r24, 0x043D
     538:	81 11       	cpse	r24, r1
		{
			MENU_activate();
     53a:	59 d6       	rcall	.+3250   	; 0x11ee <MENU_activate>
		}

		if(SPIreceivedFlag)
     53c:	80 91 3c 04 	lds	r24, 0x043C
     540:	88 23       	and	r24, r24
     542:	81 f3       	breq	.-32     	; 0x524 <__stack+0x25>
		{
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
     544:	6c e2       	ldi	r22, 0x2C	; 44
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	c9 d3       	rcall	.+1938   	; 0xcdc <MCP2515_read>
     54a:	83 70       	andi	r24, 0x03	; 3
     54c:	59 f3       	breq	.-42     	; 0x524 <__stack+0x25>
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     54e:	68 2f       	mov	r22, r24
     550:	ce 01       	movw	r24, r28
     552:	82 96       	adiw	r24, 0x22	; 34
     554:	9f d0       	rcall	.+318    	; 0x694 <CAN_receiveMessage>
     556:	fe 01       	movw	r30, r28
     558:	b2 96       	adiw	r30, 0x22	; 34
     55a:	de 01       	movw	r26, r28
     55c:	57 96       	adiw	r26, 0x17	; 23
     55e:	80 2f       	mov	r24, r16
     560:	01 90       	ld	r0, Z+
     562:	0d 92       	st	X+, r0
     564:	8a 95       	dec	r24
     566:	e1 f7       	brne	.-8      	; 0x560 <__stack+0x61>
	// 			{
	// 				printf(" %c", receivedMessage.data[i]);
	// 			}
	// 			printf("\n");

				CAN_printMessage(&receivedMessage);
     568:	ce 01       	movw	r24, r28
     56a:	47 96       	adiw	r24, 0x17	; 23
     56c:	5c d1       	rcall	.+696    	; 0x826 <CAN_printMessage>
			
				SPIreceivedFlag = 0;
     56e:	10 92 3c 04 	sts	0x043C, r1
			
				if(SPIcount == 0)
     572:	11 11       	cpse	r17, r1
     574:	d7 cf       	rjmp	.-82     	; 0x524 <__stack+0x25>
				{
					CAN_sendMessage(&message3send, 0);
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	ce 01       	movw	r24, r28
     57a:	0c 96       	adiw	r24, 0x0c	; 12
     57c:	22 d0       	rcall	.+68     	; 0x5c2 <CAN_sendMessage>
     57e:	2f ef       	ldi	r18, 0xFF	; 255
     580:	8f e7       	ldi	r24, 0x7F	; 127
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	21 50       	subi	r18, 0x01	; 1
     586:	80 40       	sbci	r24, 0x00	; 0
     588:	90 40       	sbci	r25, 0x00	; 0
     58a:	e1 f7       	brne	.-8      	; 0x584 <__stack+0x85>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <__stack+0x8f>
     58e:	00 c0       	rjmp	.+0      	; 0x590 <__stack+0x91>
					_delay_ms(100);
					SPIcount = 1;
     590:	1f 2d       	mov	r17, r15
     592:	c8 cf       	rjmp	.-112    	; 0x524 <__stack+0x25>

00000594 <CAN_init>:
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
     59c:	43 e0       	ldi	r20, 0x03	; 3
     59e:	6b e2       	ldi	r22, 0x2B	; 43
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	c4 d3       	rcall	.+1928   	; 0xd2e <MCP2515_write>
     5a6:	40 e6       	ldi	r20, 0x60	; 96
     5a8:	60 e6       	ldi	r22, 0x60	; 96
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	bf d3       	rcall	.+1918   	; 0xd2e <MCP2515_write>
     5b0:	20 e4       	ldi	r18, 0x40	; 64
     5b2:	40 ec       	ldi	r20, 0xC0	; 192
     5b4:	6f e0       	ldi	r22, 0x0F	; 15
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	cc d3       	rcall	.+1944   	; 0xd54 <MCP2515_bitModify>
     5bc:	df 91       	pop	r29
     5be:	cf 91       	pop	r28
     5c0:	08 95       	ret

000005c2 <CAN_sendMessage>:
     5c2:	cf 93       	push	r28
     5c4:	df 93       	push	r29
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
     5ca:	27 97       	sbiw	r28, 0x07	; 7
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	de bf       	out	0x3e, r29	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	cd bf       	out	0x3d, r28	; 61
     5d6:	9e 83       	std	Y+6, r25	; 0x06
     5d8:	8d 83       	std	Y+5, r24	; 0x05
     5da:	6f 83       	std	Y+7, r22	; 0x07
     5dc:	8f 81       	ldd	r24, Y+7	; 0x07
     5de:	88 2f       	mov	r24, r24
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	00 97       	sbiw	r24, 0x00	; 0
     5e4:	09 f0       	breq	.+2      	; 0x5e8 <CAN_sendMessage+0x26>
     5e6:	4d c0       	rjmp	.+154    	; 0x682 <CAN_sendMessage+0xc0>
     5e8:	8d 81       	ldd	r24, Y+5	; 0x05
     5ea:	9e 81       	ldd	r25, Y+6	; 0x06
     5ec:	fc 01       	movw	r30, r24
     5ee:	80 81       	ld	r24, Z
     5f0:	91 81       	ldd	r25, Z+1	; 0x01
     5f2:	9c 83       	std	Y+4, r25	; 0x04
     5f4:	8b 83       	std	Y+3, r24	; 0x03
     5f6:	8b 81       	ldd	r24, Y+3	; 0x03
     5f8:	82 95       	swap	r24
     5fa:	88 0f       	add	r24, r24
     5fc:	80 7e       	andi	r24, 0xE0	; 224
     5fe:	48 2f       	mov	r20, r24
     600:	62 e3       	ldi	r22, 0x32	; 50
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	93 d3       	rcall	.+1830   	; 0xd2e <MCP2515_write>
     608:	8b 81       	ldd	r24, Y+3	; 0x03
     60a:	9c 81       	ldd	r25, Y+4	; 0x04
     60c:	96 95       	lsr	r25
     60e:	87 95       	ror	r24
     610:	96 95       	lsr	r25
     612:	87 95       	ror	r24
     614:	96 95       	lsr	r25
     616:	87 95       	ror	r24
     618:	48 2f       	mov	r20, r24
     61a:	61 e3       	ldi	r22, 0x31	; 49
     61c:	80 e0       	ldi	r24, 0x00	; 0
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	86 d3       	rcall	.+1804   	; 0xd2e <MCP2515_write>
     622:	8d 81       	ldd	r24, Y+5	; 0x05
     624:	9e 81       	ldd	r25, Y+6	; 0x06
     626:	fc 01       	movw	r30, r24
     628:	82 81       	ldd	r24, Z+2	; 0x02
     62a:	48 2f       	mov	r20, r24
     62c:	65 e3       	ldi	r22, 0x35	; 53
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	7d d3       	rcall	.+1786   	; 0xd2e <MCP2515_write>
     634:	86 e3       	ldi	r24, 0x36	; 54
     636:	89 83       	std	Y+1, r24	; 0x01
     638:	1a 82       	std	Y+2, r1	; 0x02
     63a:	15 c0       	rjmp	.+42     	; 0x666 <CAN_sendMessage+0xa4>
     63c:	8a 81       	ldd	r24, Y+2	; 0x02
     63e:	88 2f       	mov	r24, r24
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	2d 81       	ldd	r18, Y+5	; 0x05
     644:	3e 81       	ldd	r19, Y+6	; 0x06
     646:	82 0f       	add	r24, r18
     648:	93 1f       	adc	r25, r19
     64a:	03 96       	adiw	r24, 0x03	; 3
     64c:	fc 01       	movw	r30, r24
     64e:	80 81       	ld	r24, Z
     650:	48 2f       	mov	r20, r24
     652:	69 81       	ldd	r22, Y+1	; 0x01
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	6a d3       	rcall	.+1748   	; 0xd2e <MCP2515_write>
     65a:	89 81       	ldd	r24, Y+1	; 0x01
     65c:	8f 5f       	subi	r24, 0xFF	; 255
     65e:	89 83       	std	Y+1, r24	; 0x01
     660:	8a 81       	ldd	r24, Y+2	; 0x02
     662:	8f 5f       	subi	r24, 0xFF	; 255
     664:	8a 83       	std	Y+2, r24	; 0x02
     666:	8d 81       	ldd	r24, Y+5	; 0x05
     668:	9e 81       	ldd	r25, Y+6	; 0x06
     66a:	fc 01       	movw	r30, r24
     66c:	92 81       	ldd	r25, Z+2	; 0x02
     66e:	8a 81       	ldd	r24, Y+2	; 0x02
     670:	89 17       	cp	r24, r25
     672:	20 f3       	brcs	.-56     	; 0x63c <CAN_sendMessage+0x7a>
     674:	2f ef       	ldi	r18, 0xFF	; 255
     676:	48 e0       	ldi	r20, 0x08	; 8
     678:	60 e3       	ldi	r22, 0x30	; 48
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	6a d3       	rcall	.+1748   	; 0xd54 <MCP2515_bitModify>
     680:	00 00       	nop
     682:	27 96       	adiw	r28, 0x07	; 7
     684:	0f b6       	in	r0, 0x3f	; 63
     686:	f8 94       	cli
     688:	de bf       	out	0x3e, r29	; 62
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	cd bf       	out	0x3d, r28	; 61
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <CAN_receiveMessage>:
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	cd b7       	in	r28, 0x3d	; 61
     69e:	de b7       	in	r29, 0x3e	; 62
     6a0:	61 97       	sbiw	r28, 0x11	; 17
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	98 8b       	std	Y+16, r25	; 0x10
     6ae:	8f 87       	std	Y+15, r24	; 0x0f
     6b0:	69 8b       	std	Y+17, r22	; 0x11
     6b2:	89 89       	ldd	r24, Y+17	; 0x11
     6b4:	88 2f       	mov	r24, r24
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	82 30       	cpi	r24, 0x02	; 2
     6ba:	91 05       	cpc	r25, r1
     6bc:	09 f4       	brne	.+2      	; 0x6c0 <CAN_receiveMessage+0x2c>
     6be:	57 c0       	rjmp	.+174    	; 0x76e <CAN_receiveMessage+0xda>
     6c0:	83 30       	cpi	r24, 0x03	; 3
     6c2:	91 05       	cpc	r25, r1
     6c4:	21 f0       	breq	.+8      	; 0x6ce <CAN_receiveMessage+0x3a>
     6c6:	81 30       	cpi	r24, 0x01	; 1
     6c8:	91 05       	cpc	r25, r1
     6ca:	09 f0       	breq	.+2      	; 0x6ce <CAN_receiveMessage+0x3a>
     6cc:	9f c0       	rjmp	.+318    	; 0x80c <CAN_receiveMessage+0x178>
     6ce:	61 e6       	ldi	r22, 0x61	; 97
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	03 d3       	rcall	.+1542   	; 0xcdc <MCP2515_read>
     6d6:	88 2f       	mov	r24, r24
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	9d 83       	std	Y+5, r25	; 0x05
     6dc:	8c 83       	std	Y+4, r24	; 0x04
     6de:	8c 81       	ldd	r24, Y+4	; 0x04
     6e0:	9d 81       	ldd	r25, Y+5	; 0x05
     6e2:	8c 01       	movw	r16, r24
     6e4:	00 0f       	add	r16, r16
     6e6:	11 1f       	adc	r17, r17
     6e8:	00 0f       	add	r16, r16
     6ea:	11 1f       	adc	r17, r17
     6ec:	00 0f       	add	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	62 e6       	ldi	r22, 0x62	; 98
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	f2 d2       	rcall	.+1508   	; 0xcdc <MCP2515_read>
     6f8:	82 95       	swap	r24
     6fa:	86 95       	lsr	r24
     6fc:	87 70       	andi	r24, 0x07	; 7
     6fe:	88 2f       	mov	r24, r24
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	80 2b       	or	r24, r16
     704:	91 2b       	or	r25, r17
     706:	9d 83       	std	Y+5, r25	; 0x05
     708:	8c 83       	std	Y+4, r24	; 0x04
     70a:	65 e6       	ldi	r22, 0x65	; 101
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	e5 d2       	rcall	.+1482   	; 0xcdc <MCP2515_read>
     712:	8e 83       	std	Y+6, r24	; 0x06
     714:	86 e6       	ldi	r24, 0x66	; 102
     716:	89 83       	std	Y+1, r24	; 0x01
     718:	1a 82       	std	Y+2, r1	; 0x02
     71a:	14 c0       	rjmp	.+40     	; 0x744 <CAN_receiveMessage+0xb0>
     71c:	8a 81       	ldd	r24, Y+2	; 0x02
     71e:	08 2f       	mov	r16, r24
     720:	10 e0       	ldi	r17, 0x00	; 0
     722:	69 81       	ldd	r22, Y+1	; 0x01
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	d9 d2       	rcall	.+1458   	; 0xcdc <MCP2515_read>
     72a:	28 2f       	mov	r18, r24
     72c:	ce 01       	movw	r24, r28
     72e:	07 96       	adiw	r24, 0x07	; 7
     730:	80 0f       	add	r24, r16
     732:	91 1f       	adc	r25, r17
     734:	fc 01       	movw	r30, r24
     736:	20 83       	st	Z, r18
     738:	89 81       	ldd	r24, Y+1	; 0x01
     73a:	8f 5f       	subi	r24, 0xFF	; 255
     73c:	89 83       	std	Y+1, r24	; 0x01
     73e:	8a 81       	ldd	r24, Y+2	; 0x02
     740:	8f 5f       	subi	r24, 0xFF	; 255
     742:	8a 83       	std	Y+2, r24	; 0x02
     744:	9e 81       	ldd	r25, Y+6	; 0x06
     746:	8a 81       	ldd	r24, Y+2	; 0x02
     748:	89 17       	cp	r24, r25
     74a:	40 f3       	brcs	.-48     	; 0x71c <CAN_receiveMessage+0x88>
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	41 e0       	ldi	r20, 0x01	; 1
     750:	6c e2       	ldi	r22, 0x2C	; 44
     752:	80 e0       	ldi	r24, 0x00	; 0
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	fe d2       	rcall	.+1532   	; 0xd54 <MCP2515_bitModify>
     758:	8f 85       	ldd	r24, Y+15	; 0x0f
     75a:	98 89       	ldd	r25, Y+16	; 0x10
     75c:	2b e0       	ldi	r18, 0x0B	; 11
     75e:	fe 01       	movw	r30, r28
     760:	34 96       	adiw	r30, 0x04	; 4
     762:	dc 01       	movw	r26, r24
     764:	01 90       	ld	r0, Z+
     766:	0d 92       	st	X+, r0
     768:	2a 95       	dec	r18
     76a:	e1 f7       	brne	.-8      	; 0x764 <CAN_receiveMessage+0xd0>
     76c:	4f c0       	rjmp	.+158    	; 0x80c <CAN_receiveMessage+0x178>
     76e:	61 e7       	ldi	r22, 0x71	; 113
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	b3 d2       	rcall	.+1382   	; 0xcdc <MCP2515_read>
     776:	88 2f       	mov	r24, r24
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	9d 83       	std	Y+5, r25	; 0x05
     77c:	8c 83       	std	Y+4, r24	; 0x04
     77e:	8c 81       	ldd	r24, Y+4	; 0x04
     780:	9d 81       	ldd	r25, Y+5	; 0x05
     782:	8c 01       	movw	r16, r24
     784:	00 0f       	add	r16, r16
     786:	11 1f       	adc	r17, r17
     788:	00 0f       	add	r16, r16
     78a:	11 1f       	adc	r17, r17
     78c:	00 0f       	add	r16, r16
     78e:	11 1f       	adc	r17, r17
     790:	62 e7       	ldi	r22, 0x72	; 114
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	a2 d2       	rcall	.+1348   	; 0xcdc <MCP2515_read>
     798:	82 95       	swap	r24
     79a:	86 95       	lsr	r24
     79c:	87 70       	andi	r24, 0x07	; 7
     79e:	88 2f       	mov	r24, r24
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	80 2b       	or	r24, r16
     7a4:	91 2b       	or	r25, r17
     7a6:	9d 83       	std	Y+5, r25	; 0x05
     7a8:	8c 83       	std	Y+4, r24	; 0x04
     7aa:	65 e7       	ldi	r22, 0x75	; 117
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	95 d2       	rcall	.+1322   	; 0xcdc <MCP2515_read>
     7b2:	8e 83       	std	Y+6, r24	; 0x06
     7b4:	86 e7       	ldi	r24, 0x76	; 118
     7b6:	89 83       	std	Y+1, r24	; 0x01
     7b8:	1b 82       	std	Y+3, r1	; 0x03
     7ba:	14 c0       	rjmp	.+40     	; 0x7e4 <CAN_receiveMessage+0x150>
     7bc:	8b 81       	ldd	r24, Y+3	; 0x03
     7be:	08 2f       	mov	r16, r24
     7c0:	10 e0       	ldi	r17, 0x00	; 0
     7c2:	69 81       	ldd	r22, Y+1	; 0x01
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	89 d2       	rcall	.+1298   	; 0xcdc <MCP2515_read>
     7ca:	28 2f       	mov	r18, r24
     7cc:	ce 01       	movw	r24, r28
     7ce:	07 96       	adiw	r24, 0x07	; 7
     7d0:	80 0f       	add	r24, r16
     7d2:	91 1f       	adc	r25, r17
     7d4:	fc 01       	movw	r30, r24
     7d6:	20 83       	st	Z, r18
     7d8:	89 81       	ldd	r24, Y+1	; 0x01
     7da:	8f 5f       	subi	r24, 0xFF	; 255
     7dc:	89 83       	std	Y+1, r24	; 0x01
     7de:	8b 81       	ldd	r24, Y+3	; 0x03
     7e0:	8f 5f       	subi	r24, 0xFF	; 255
     7e2:	8b 83       	std	Y+3, r24	; 0x03
     7e4:	9e 81       	ldd	r25, Y+6	; 0x06
     7e6:	8b 81       	ldd	r24, Y+3	; 0x03
     7e8:	89 17       	cp	r24, r25
     7ea:	40 f3       	brcs	.-48     	; 0x7bc <CAN_receiveMessage+0x128>
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	42 e0       	ldi	r20, 0x02	; 2
     7f0:	6c e2       	ldi	r22, 0x2C	; 44
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	ae d2       	rcall	.+1372   	; 0xd54 <MCP2515_bitModify>
     7f8:	8f 85       	ldd	r24, Y+15	; 0x0f
     7fa:	98 89       	ldd	r25, Y+16	; 0x10
     7fc:	2b e0       	ldi	r18, 0x0B	; 11
     7fe:	fe 01       	movw	r30, r28
     800:	34 96       	adiw	r30, 0x04	; 4
     802:	dc 01       	movw	r26, r24
     804:	01 90       	ld	r0, Z+
     806:	0d 92       	st	X+, r0
     808:	2a 95       	dec	r18
     80a:	e1 f7       	brne	.-8      	; 0x804 <CAN_receiveMessage+0x170>
     80c:	8f 85       	ldd	r24, Y+15	; 0x0f
     80e:	98 89       	ldd	r25, Y+16	; 0x10
     810:	61 96       	adiw	r28, 0x11	; 17
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	de bf       	out	0x3e, r29	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	cd bf       	out	0x3d, r28	; 61
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	1f 91       	pop	r17
     822:	0f 91       	pop	r16
     824:	08 95       	ret

00000826 <CAN_printMessage>:
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	00 d0       	rcall	.+0      	; 0x82c <CAN_printMessage+0x6>
     82c:	1f 92       	push	r1
     82e:	cd b7       	in	r28, 0x3d	; 61
     830:	de b7       	in	r29, 0x3e	; 62
     832:	9b 83       	std	Y+3, r25	; 0x03
     834:	8a 83       	std	Y+2, r24	; 0x02
     836:	8a 81       	ldd	r24, Y+2	; 0x02
     838:	9b 81       	ldd	r25, Y+3	; 0x03
     83a:	fc 01       	movw	r30, r24
     83c:	82 81       	ldd	r24, Z+2	; 0x02
     83e:	28 2f       	mov	r18, r24
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	8a 81       	ldd	r24, Y+2	; 0x02
     844:	9b 81       	ldd	r25, Y+3	; 0x03
     846:	fc 01       	movw	r30, r24
     848:	80 81       	ld	r24, Z
     84a:	91 81       	ldd	r25, Z+1	; 0x01
     84c:	43 2f       	mov	r20, r19
     84e:	4f 93       	push	r20
     850:	2f 93       	push	r18
     852:	29 2f       	mov	r18, r25
     854:	2f 93       	push	r18
     856:	8f 93       	push	r24
     858:	84 e1       	ldi	r24, 0x14	; 20
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	89 2f       	mov	r24, r25
     85e:	8f 93       	push	r24
     860:	84 e1       	ldi	r24, 0x14	; 20
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	8f 93       	push	r24
     866:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <printf>
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	0f 90       	pop	r0
     876:	19 82       	std	Y+1, r1	; 0x01
     878:	1f c0       	rjmp	.+62     	; 0x8b8 <CAN_printMessage+0x92>
     87a:	89 81       	ldd	r24, Y+1	; 0x01
     87c:	88 2f       	mov	r24, r24
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	2a 81       	ldd	r18, Y+2	; 0x02
     882:	3b 81       	ldd	r19, Y+3	; 0x03
     884:	82 0f       	add	r24, r18
     886:	93 1f       	adc	r25, r19
     888:	03 96       	adiw	r24, 0x03	; 3
     88a:	fc 01       	movw	r30, r24
     88c:	80 81       	ld	r24, Z
     88e:	88 2f       	mov	r24, r24
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	29 2f       	mov	r18, r25
     894:	2f 93       	push	r18
     896:	8f 93       	push	r24
     898:	80 e4       	ldi	r24, 0x40	; 64
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	89 2f       	mov	r24, r25
     89e:	8f 93       	push	r24
     8a0:	80 e4       	ldi	r24, 0x40	; 64
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	8f 93       	push	r24
     8a6:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <printf>
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	89 81       	ldd	r24, Y+1	; 0x01
     8b4:	8f 5f       	subi	r24, 0xFF	; 255
     8b6:	89 83       	std	Y+1, r24	; 0x01
     8b8:	8a 81       	ldd	r24, Y+2	; 0x02
     8ba:	9b 81       	ldd	r25, Y+3	; 0x03
     8bc:	fc 01       	movw	r30, r24
     8be:	92 81       	ldd	r25, Z+2	; 0x02
     8c0:	89 81       	ldd	r24, Y+1	; 0x01
     8c2:	89 17       	cp	r24, r25
     8c4:	d0 f2       	brcs	.-76     	; 0x87a <CAN_printMessage+0x54>
     8c6:	8a e0       	ldi	r24, 0x0A	; 10
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <putchar>
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
     8d8:	08 95       	ret

000008da <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     8da:	95 b7       	in	r25, 0x35	; 53
     8dc:	90 68       	ori	r25, 0x80	; 128
     8de:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     8e0:	96 b7       	in	r25, 0x36	; 54
     8e2:	98 60       	ori	r25, 0x08	; 8
     8e4:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     8e6:	88 23       	and	r24, r24
     8e8:	19 f0       	breq	.+6      	; 0x8f0 <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     8ea:	80 b7       	in	r24, 0x30	; 48
     8ec:	80 62       	ori	r24, 0x20	; 32
     8ee:	80 bf       	out	0x30, r24	; 48
     8f0:	08 95       	ret

000008f2 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     8f2:	fc 01       	movw	r30, r24
     8f4:	80 81       	ld	r24, Z
	return val;
}
     8f6:	08 95       	ret

000008f8 <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     8f8:	fc 01       	movw	r30, r24
     8fa:	60 83       	st	Z, r22
     8fc:	08 95       	ret

000008fe <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     8fe:	10 92 43 04 	sts	0x0443, r1
     902:	10 92 42 04 	sts	0x0442, r1
	currentPosition.Y_abs = 0;
     906:	10 92 45 04 	sts	0x0445, r1
     90a:	10 92 44 04 	sts	0x0444, r1
	currentPosition.X_per = 0;
     90e:	10 92 47 04 	sts	0x0447, r1
     912:	10 92 46 04 	sts	0x0446, r1
	currentPosition.Y_per = 0;
     916:	10 92 49 04 	sts	0x0449, r1
     91a:	10 92 48 04 	sts	0x0448, r1
	currentDirection = CENTRE;
     91e:	10 92 41 04 	sts	0x0441, r1
     922:	08 95       	ret

00000924 <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     928:	8d d4       	rcall	.+2330   	; 0x1244 <OLED_clear>
     92a:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	6b d4       	rcall	.+2262   	; 0x120a <OLED_goto>
     934:	88 e0       	ldi	r24, 0x08	; 8
     936:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("JOY RIGHT");
     938:	be d4       	rcall	.+2428   	; 0x12b6 <OLED_printString>
     93a:	82 e1       	ldi	r24, 0x12	; 18
     93c:	92 e0       	ldi	r25, 0x02	; 2
     93e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <puts>
	printf("Move JOY to the right\n");
     942:	2f ef       	ldi	r18, 0xFF	; 255
     944:	4f ef       	ldi	r20, 0xFF	; 255
     946:	52 e0       	ldi	r21, 0x02	; 2
     948:	21 50       	subi	r18, 0x01	; 1
     94a:	40 40       	sbci	r20, 0x00	; 0
     94c:	50 40       	sbci	r21, 0x00	; 0
     94e:	e1 f7       	brne	.-8      	; 0x948 <JOY_calibrate+0x24>
     950:	00 c0       	rjmp	.+0      	; 0x952 <JOY_calibrate+0x2e>
     952:	00 c0       	rjmp	.+0      	; 0x954 <JOY_calibrate+0x30>
     954:	c4 e1       	ldi	r28, 0x14	; 20
     956:	d0 e0       	ldi	r29, 0x00	; 0
     958:	60 91 06 01 	lds	r22, 0x0106
     95c:	70 91 07 01 	lds	r23, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     960:	82 e0       	ldi	r24, 0x02	; 2
     962:	72 d7       	rcall	.+3812   	; 0x1848 <ADC_request>
     964:	8f ef       	ldi	r24, 0xFF	; 255
     966:	9f e1       	ldi	r25, 0x1F	; 31
     968:	21 e0       	ldi	r18, 0x01	; 1
     96a:	81 50       	subi	r24, 0x01	; 1
     96c:	90 40       	sbci	r25, 0x00	; 0
     96e:	20 40       	sbci	r18, 0x00	; 0
     970:	e1 f7       	brne	.-8      	; 0x96a <JOY_calibrate+0x46>
     972:	00 c0       	rjmp	.+0      	; 0x974 <JOY_calibrate+0x50>
     974:	00 00       	nop
     976:	80 91 06 01 	lds	r24, 0x0106
     97a:	90 91 07 01 	lds	r25, 0x0107
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     97e:	88 d7       	rcall	.+3856   	; 0x1890 <ADC_read>
     980:	90 91 0d 01 	lds	r25, 0x010D
     984:	98 17       	cp	r25, r24
     986:	10 f4       	brcc	.+4      	; 0x98c <JOY_calibrate+0x68>
     988:	80 93 0d 01 	sts	0x010D, r24
		
		if(temp > calR) {calR = temp;}
     98c:	21 97       	sbiw	r28, 0x01	; 1
     98e:	20 97       	sbiw	r28, 0x00	; 0
     990:	19 f7       	brne	.-58     	; 0x958 <JOY_calibrate+0x34>
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	81 e0       	ldi	r24, 0x01	; 1
	OLED_goto(0,0);
	OLED_printString("JOY RIGHT");
	printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	37 d4       	rcall	.+2158   	; 0x120a <OLED_goto>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_goto(1,0);
     99c:	88 e2       	ldi	r24, 0x28	; 40
     99e:	92 e0       	ldi	r25, 0x02	; 2
     9a0:	8a d4       	rcall	.+2324   	; 0x12b6 <OLED_printString>
     9a2:	81 e3       	ldi	r24, 0x31	; 49
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <puts>
	OLED_printString("JOY LEFT");
     9aa:	4f ef       	ldi	r20, 0xFF	; 255
     9ac:	5f ef       	ldi	r21, 0xFF	; 255
     9ae:	82 e0       	ldi	r24, 0x02	; 2
	printf("Move JOY to the left\n");
     9b0:	41 50       	subi	r20, 0x01	; 1
     9b2:	50 40       	sbci	r21, 0x00	; 0
     9b4:	80 40       	sbci	r24, 0x00	; 0
     9b6:	e1 f7       	brne	.-8      	; 0x9b0 <JOY_calibrate+0x8c>
     9b8:	00 c0       	rjmp	.+0      	; 0x9ba <JOY_calibrate+0x96>
     9ba:	00 c0       	rjmp	.+0      	; 0x9bc <JOY_calibrate+0x98>
     9bc:	c4 e1       	ldi	r28, 0x14	; 20
     9be:	d0 e0       	ldi	r29, 0x00	; 0
     9c0:	60 91 06 01 	lds	r22, 0x0106
     9c4:	70 91 07 01 	lds	r23, 0x0107
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	3e d7       	rcall	.+3708   	; 0x1848 <ADC_request>
     9cc:	9f ef       	ldi	r25, 0xFF	; 255
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     9ce:	2f e1       	ldi	r18, 0x1F	; 31
     9d0:	41 e0       	ldi	r20, 0x01	; 1
     9d2:	91 50       	subi	r25, 0x01	; 1
     9d4:	20 40       	sbci	r18, 0x00	; 0
     9d6:	40 40       	sbci	r20, 0x00	; 0
     9d8:	e1 f7       	brne	.-8      	; 0x9d2 <JOY_calibrate+0xae>
     9da:	00 c0       	rjmp	.+0      	; 0x9dc <JOY_calibrate+0xb8>
     9dc:	00 00       	nop
     9de:	80 91 06 01 	lds	r24, 0x0106
     9e2:	90 91 07 01 	lds	r25, 0x0107
     9e6:	54 d7       	rcall	.+3752   	; 0x1890 <ADC_read>
     9e8:	90 91 0c 01 	lds	r25, 0x010C
     9ec:	89 17       	cp	r24, r25
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     9ee:	10 f4       	brcc	.+4      	; 0x9f4 <JOY_calibrate+0xd0>
     9f0:	80 93 0c 01 	sts	0x010C, r24
     9f4:	21 97       	sbiw	r28, 0x01	; 1
     9f6:	20 97       	sbiw	r28, 0x00	; 0
     9f8:	19 f7       	brne	.-58     	; 0x9c0 <JOY_calibrate+0x9c>
		
		if(temp < calL) {calL = temp;}
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	82 e0       	ldi	r24, 0x02	; 2
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	03 d4       	rcall	.+2054   	; 0x120a <OLED_goto>
     a04:	86 e4       	ldi	r24, 0x46	; 70
     a06:	92 e0       	ldi	r25, 0x02	; 2
	OLED_goto(1,0);
	OLED_printString("JOY LEFT");
	printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     a08:	56 d4       	rcall	.+2220   	; 0x12b6 <OLED_printString>
     a0a:	8d e4       	ldi	r24, 0x4D	; 77
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_goto(2,0);
     a0c:	92 e0       	ldi	r25, 0x02	; 2
     a0e:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <puts>
     a12:	5f ef       	ldi	r21, 0xFF	; 255
     a14:	8f ef       	ldi	r24, 0xFF	; 255
     a16:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("JOY UP");
     a18:	51 50       	subi	r21, 0x01	; 1
     a1a:	80 40       	sbci	r24, 0x00	; 0
     a1c:	90 40       	sbci	r25, 0x00	; 0
     a1e:	e1 f7       	brne	.-8      	; 0xa18 <JOY_calibrate+0xf4>
	printf("Move JOY up\n");
     a20:	00 c0       	rjmp	.+0      	; 0xa22 <JOY_calibrate+0xfe>
     a22:	00 c0       	rjmp	.+0      	; 0xa24 <JOY_calibrate+0x100>
     a24:	c4 e1       	ldi	r28, 0x14	; 20
     a26:	d0 e0       	ldi	r29, 0x00	; 0
     a28:	60 91 06 01 	lds	r22, 0x0106
     a2c:	70 91 07 01 	lds	r23, 0x0107
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	0a d7       	rcall	.+3604   	; 0x1848 <ADC_request>
     a34:	2f ef       	ldi	r18, 0xFF	; 255
     a36:	4f e1       	ldi	r20, 0x1F	; 31
     a38:	51 e0       	ldi	r21, 0x01	; 1
     a3a:	21 50       	subi	r18, 0x01	; 1
     a3c:	40 40       	sbci	r20, 0x00	; 0
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     a3e:	50 40       	sbci	r21, 0x00	; 0
     a40:	e1 f7       	brne	.-8      	; 0xa3a <JOY_calibrate+0x116>
     a42:	00 c0       	rjmp	.+0      	; 0xa44 <JOY_calibrate+0x120>
     a44:	00 00       	nop
     a46:	80 91 06 01 	lds	r24, 0x0106
     a4a:	90 91 07 01 	lds	r25, 0x0107
     a4e:	20 d7       	rcall	.+3648   	; 0x1890 <ADC_read>
     a50:	90 91 0b 01 	lds	r25, 0x010B
     a54:	98 17       	cp	r25, r24
     a56:	10 f4       	brcc	.+4      	; 0xa5c <JOY_calibrate+0x138>
     a58:	80 93 0b 01 	sts	0x010B, r24
     a5c:	21 97       	sbiw	r28, 0x01	; 1
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     a5e:	20 97       	sbiw	r28, 0x00	; 0
     a60:	19 f7       	brne	.-58     	; 0xa28 <JOY_calibrate+0x104>
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	83 e0       	ldi	r24, 0x03	; 3
     a68:	90 e0       	ldi	r25, 0x00	; 0
		
		if(temp > calUp) {calUp = temp;}
     a6a:	cf d3       	rcall	.+1950   	; 0x120a <OLED_goto>
     a6c:	89 e5       	ldi	r24, 0x59	; 89
     a6e:	92 e0       	ldi	r25, 0x02	; 2
     a70:	22 d4       	rcall	.+2116   	; 0x12b6 <OLED_printString>
     a72:	82 e6       	ldi	r24, 0x62	; 98
     a74:	92 e0       	ldi	r25, 0x02	; 2
     a76:	0e 94 f8 0d 	call	0x1bf0	; 0x1bf0 <puts>
	OLED_goto(2,0);
	OLED_printString("JOY UP");
	printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     a7a:	8f ef       	ldi	r24, 0xFF	; 255
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_goto(3,0);
     a7c:	9f ef       	ldi	r25, 0xFF	; 255
     a7e:	22 e0       	ldi	r18, 0x02	; 2
     a80:	81 50       	subi	r24, 0x01	; 1
     a82:	90 40       	sbci	r25, 0x00	; 0
     a84:	20 40       	sbci	r18, 0x00	; 0
     a86:	e1 f7       	brne	.-8      	; 0xa80 <JOY_calibrate+0x15c>
	OLED_printString("JOY DOWN");
     a88:	00 c0       	rjmp	.+0      	; 0xa8a <JOY_calibrate+0x166>
     a8a:	00 c0       	rjmp	.+0      	; 0xa8c <JOY_calibrate+0x168>
     a8c:	c4 e1       	ldi	r28, 0x14	; 20
     a8e:	d0 e0       	ldi	r29, 0x00	; 0
	printf("Move JOY down\n");
     a90:	60 91 06 01 	lds	r22, 0x0106
     a94:	70 91 07 01 	lds	r23, 0x0107
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	d6 d6       	rcall	.+3500   	; 0x1848 <ADC_request>
     a9c:	4f ef       	ldi	r20, 0xFF	; 255
     a9e:	5f e1       	ldi	r21, 0x1F	; 31
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	41 50       	subi	r20, 0x01	; 1
     aa4:	50 40       	sbci	r21, 0x00	; 0
     aa6:	80 40       	sbci	r24, 0x00	; 0
     aa8:	e1 f7       	brne	.-8      	; 0xaa2 <JOY_calibrate+0x17e>
     aaa:	00 c0       	rjmp	.+0      	; 0xaac <JOY_calibrate+0x188>
     aac:	00 00       	nop
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     aae:	80 91 06 01 	lds	r24, 0x0106
     ab2:	90 91 07 01 	lds	r25, 0x0107
     ab6:	ec d6       	rcall	.+3544   	; 0x1890 <ADC_read>
     ab8:	90 91 0a 01 	lds	r25, 0x010A
     abc:	89 17       	cp	r24, r25
     abe:	10 f4       	brcc	.+4      	; 0xac4 <JOY_calibrate+0x1a0>
     ac0:	80 93 0a 01 	sts	0x010A, r24
     ac4:	21 97       	sbiw	r28, 0x01	; 1
     ac6:	20 97       	sbiw	r28, 0x00	; 0
     ac8:	19 f7       	brne	.-58     	; 0xa90 <JOY_calibrate+0x16c>
     aca:	30 91 0a 01 	lds	r19, 0x010A
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     ace:	20 91 0b 01 	lds	r18, 0x010B
     ad2:	90 91 0c 01 	lds	r25, 0x010C
     ad6:	80 91 0d 01 	lds	r24, 0x010D
		
		if(temp < calDown) {calDown = temp;}
     ada:	1f 92       	push	r1
     adc:	3f 93       	push	r19
     ade:	1f 92       	push	r1
     ae0:	2f 93       	push	r18
     ae2:	1f 92       	push	r1
     ae4:	9f 93       	push	r25
     ae6:	1f 92       	push	r1
	OLED_goto(3,0);
	OLED_printString("JOY DOWN");
	printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     ae8:	8f 93       	push	r24
     aea:	80 e7       	ldi	r24, 0x70	; 112
		
		if(temp < calDown) {calDown = temp;}
	}
	
	
	printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
     aec:	92 e0       	ldi	r25, 0x02	; 2
     aee:	9f 93       	push	r25
     af0:	8f 93       	push	r24
     af2:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <printf>
     af6:	20 91 0b 01 	lds	r18, 0x010B
     afa:	80 91 0a 01 	lds	r24, 0x010A
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	28 1b       	sub	r18, r24
     b02:	31 09       	sbc	r19, r1
     b04:	c9 01       	movw	r24, r18
     b06:	4d b7       	in	r20, 0x3d	; 61
     b08:	5e b7       	in	r21, 0x3e	; 62
     b0a:	46 5f       	subi	r20, 0xF6	; 246
     b0c:	5f 4f       	sbci	r21, 0xFF	; 255
     b0e:	0f b6       	in	r0, 0x3f	; 63
     b10:	f8 94       	cli
     b12:	5e bf       	out	0x3e, r21	; 62
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	4d bf       	out	0x3d, r20	; 61
	
	meanVert = (calUp - calDown)/2;
     b18:	99 23       	and	r25, r25
     b1a:	0c f4       	brge	.+2      	; 0xb1e <JOY_calibrate+0x1fa>
     b1c:	01 96       	adiw	r24, 0x01	; 1
     b1e:	95 95       	asr	r25
     b20:	87 95       	ror	r24
     b22:	80 93 09 01 	sts	0x0109, r24
     b26:	20 91 0d 01 	lds	r18, 0x010D
     b2a:	80 91 0c 01 	lds	r24, 0x010C
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	28 1b       	sub	r18, r24
     b32:	31 09       	sbc	r19, r1
     b34:	c9 01       	movw	r24, r18
     b36:	99 23       	and	r25, r25
     b38:	0c f4       	brge	.+2      	; 0xb3c <JOY_calibrate+0x218>
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	95 95       	asr	r25
     b3e:	87 95       	ror	r24
     b40:	80 93 08 01 	sts	0x0108, r24
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	70 e0       	ldi	r23, 0x00	; 0
	meanHor = (calR - calL)/2;
     b48:	84 e0       	ldi	r24, 0x04	; 4
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	5e d3       	rcall	.+1724   	; 0x120a <OLED_goto>
     b4e:	8a e9       	ldi	r24, 0x9A	; 154
     b50:	92 e0       	ldi	r25, 0x02	; 2
     b52:	b1 d3       	rcall	.+1890   	; 0x12b6 <OLED_printString>
     b54:	90 91 08 01 	lds	r25, 0x0108
     b58:	80 91 09 01 	lds	r24, 0x0109
     b5c:	1f 92       	push	r1
     b5e:	9f 93       	push	r25
     b60:	1f 92       	push	r1
     b62:	8f 93       	push	r24
     b64:	85 ea       	ldi	r24, 0xA5	; 165
	
	OLED_goto(4,0);
     b66:	92 e0       	ldi	r25, 0x02	; 2
     b68:	9f 93       	push	r25
     b6a:	8f 93       	push	r24
     b6c:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <printf>
     b70:	5f ef       	ldi	r21, 0xFF	; 255
	OLED_printString("CALIB DONE");
     b72:	8f ef       	ldi	r24, 0xFF	; 255
     b74:	9e e0       	ldi	r25, 0x0E	; 14
     b76:	51 50       	subi	r21, 0x01	; 1
     b78:	80 40       	sbci	r24, 0x00	; 0
	printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
     b7a:	90 40       	sbci	r25, 0x00	; 0
     b7c:	e1 f7       	brne	.-8      	; 0xb76 <JOY_calibrate+0x252>
     b7e:	00 c0       	rjmp	.+0      	; 0xb80 <JOY_calibrate+0x25c>
     b80:	00 00       	nop
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	08 95       	ret

00000b94 <JOY_requestCurrentPosition>:
     b94:	88 37       	cpi	r24, 0x78	; 120
     b96:	39 f4       	brne	.+14     	; 0xba6 <JOY_requestCurrentPosition+0x12>
     b98:	60 91 06 01 	lds	r22, 0x0106
     b9c:	70 91 07 01 	lds	r23, 0x0107
     ba0:	82 e0       	ldi	r24, 0x02	; 2
     ba2:	52 c6       	rjmp	.+3236   	; 0x1848 <ADC_request>
     ba4:	08 95       	ret
     ba6:	89 37       	cpi	r24, 0x79	; 121
     ba8:	31 f4       	brne	.+12     	; 0xbb6 <JOY_requestCurrentPosition+0x22>
     baa:	60 91 06 01 	lds	r22, 0x0106
     bae:	70 91 07 01 	lds	r23, 0x0107
     bb2:	81 e0       	ldi	r24, 0x01	; 1
	_delay_ms(1000);
}
     bb4:	49 c6       	rjmp	.+3218   	; 0x1848 <ADC_request>
     bb6:	08 95       	ret

00000bb8 <JOY_updatePosition>:
     bb8:	88 37       	cpi	r24, 0x78	; 120
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
	{
		ADC_request(Y_channel, adc_ext_ram);
     bba:	f9 f4       	brne	.+62     	; 0xbfa <JOY_updatePosition+0x42>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     bbc:	80 91 06 01 	lds	r24, 0x0106
     bc0:	90 91 07 01 	lds	r25, 0x0107
     bc4:	65 d6       	rcall	.+3274   	; 0x1890 <ADC_read>
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	90 93 43 04 	sts	0x0443, r25
     bcc:	80 93 42 04 	sts	0x0442, r24
     bd0:	20 91 08 01 	lds	r18, 0x0108
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     bd4:	60 91 08 01 	lds	r22, 0x0108
     bd8:	ac 01       	movw	r20, r24
     bda:	42 1b       	sub	r20, r18
     bdc:	51 09       	sbc	r21, r1
     bde:	9a 01       	movw	r18, r20
     be0:	44 e6       	ldi	r20, 0x64	; 100
     be2:	42 9f       	mul	r20, r18
     be4:	c0 01       	movw	r24, r0
     be6:	43 9f       	mul	r20, r19
     be8:	90 0d       	add	r25, r0
     bea:	11 24       	eor	r1, r1
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	52 d6       	rcall	.+3236   	; 0x1894 <__divmodhi4>
     bf0:	70 93 47 04 	sts	0x0447, r23
     bf4:	60 93 46 04 	sts	0x0446, r22
     bf8:	08 95       	ret
     bfa:	89 37       	cpi	r24, 0x79	; 121
     bfc:	f1 f4       	brne	.+60     	; 0xc3a <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     bfe:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     c02:	90 91 07 01 	lds	r25, 0x0107
     c06:	44 d6       	rcall	.+3208   	; 0x1890 <ADC_read>
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	90 93 45 04 	sts	0x0445, r25
     c0e:	80 93 44 04 	sts	0x0444, r24
     c12:	20 91 09 01 	lds	r18, 0x0109
     c16:	60 91 09 01 	lds	r22, 0x0109
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     c1a:	ac 01       	movw	r20, r24
     c1c:	42 1b       	sub	r20, r18
     c1e:	51 09       	sbc	r21, r1
     c20:	9a 01       	movw	r18, r20
     c22:	44 e6       	ldi	r20, 0x64	; 100
     c24:	42 9f       	mul	r20, r18
     c26:	c0 01       	movw	r24, r0
     c28:	43 9f       	mul	r20, r19
     c2a:	90 0d       	add	r25, r0
     c2c:	11 24       	eor	r1, r1
     c2e:	70 e0       	ldi	r23, 0x00	; 0
     c30:	31 d6       	rcall	.+3170   	; 0x1894 <__divmodhi4>
     c32:	70 93 49 04 	sts	0x0449, r23
     c36:	60 93 48 04 	sts	0x0448, r22
     c3a:	08 95       	ret

00000c3c <JOY_calculateDirection>:
     c3c:	80 91 46 04 	lds	r24, 0x0446
     c40:	90 91 47 04 	lds	r25, 0x0447
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     c44:	8b 35       	cpi	r24, 0x5B	; 91
     c46:	91 05       	cpc	r25, r1
     c48:	24 f0       	brlt	.+8      	; 0xc52 <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     c4a:	83 e0       	ldi	r24, 0x03	; 3
     c4c:	80 93 41 04 	sts	0x0441, r24
     c50:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     c52:	86 3a       	cpi	r24, 0xA6	; 166
     c54:	9f 4f       	sbci	r25, 0xFF	; 255
     c56:	24 f4       	brge	.+8      	; 0xc60 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     c58:	84 e0       	ldi	r24, 0x04	; 4
     c5a:	80 93 41 04 	sts	0x0441, r24
     c5e:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     c60:	80 91 48 04 	lds	r24, 0x0448
     c64:	90 91 49 04 	lds	r25, 0x0449
     c68:	8b 35       	cpi	r24, 0x5B	; 91
     c6a:	91 05       	cpc	r25, r1
     c6c:	24 f0       	brlt	.+8      	; 0xc76 <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	80 93 41 04 	sts	0x0441, r24
     c74:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     c76:	86 3a       	cpi	r24, 0xA6	; 166
     c78:	9f 4f       	sbci	r25, 0xFF	; 255
     c7a:	24 f4       	brge	.+8      	; 0xc84 <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     c7c:	82 e0       	ldi	r24, 0x02	; 2
     c7e:	80 93 41 04 	sts	0x0441, r24
     c82:	08 95       	ret
	else{currentDirection = CENTRE;}
     c84:	10 92 41 04 	sts	0x0441, r1
     c88:	08 95       	ret

00000c8a <JOY_getDirection>:
// Before the value is returned, the values of position in x and y direction are 
// requested from the ADC and written to the currentPosition and 
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
     c8a:	88 e7       	ldi	r24, 0x78	; 120
     c8c:	83 df       	rcall	.-250    	; 0xb94 <JOY_requestCurrentPosition>
     c8e:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c90:	8a 95       	dec	r24
     c92:	f1 f7       	brne	.-4      	; 0xc90 <JOY_getDirection+0x6>
     c94:	00 00       	nop
     c96:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     c98:	8f df       	rcall	.-226    	; 0xbb8 <JOY_updatePosition>
     c9a:	89 e7       	ldi	r24, 0x79	; 121
     c9c:	7b df       	rcall	.-266    	; 0xb94 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     c9e:	82 e6       	ldi	r24, 0x62	; 98
     ca0:	8a 95       	dec	r24
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <JOY_getDirection+0x16>
     ca4:	00 00       	nop
     ca6:	89 e7       	ldi	r24, 0x79	; 121
     ca8:	87 df       	rcall	.-242    	; 0xbb8 <JOY_updatePosition>
     caa:	c8 df       	rcall	.-112    	; 0xc3c <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     cac:	80 91 41 04 	lds	r24, 0x0441
     cb0:	08 95       	ret

00000cb2 <MCP2515_reset>:
	//printf("finished MCP2515_init\n");
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
     cb2:	cf 93       	push	r28
     cb4:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
     cb6:	9f d5       	rcall	.+2878   	; 0x17f6 <SPI_activateSlave>
     cb8:	80 ec       	ldi	r24, 0xC0	; 192
	SPI_send(MCP_RESET);
     cba:	93 d5       	rcall	.+2854   	; 0x17e2 <SPI_send>
     cbc:	8c ec       	ldi	r24, 0xCC	; 204
     cbe:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <MCP2515_reset+0xe>
     cc4:	00 c0       	rjmp	.+0      	; 0xcc6 <MCP2515_reset+0x14>
     cc6:	00 00       	nop
     cc8:	8c 2f       	mov	r24, r28
     cca:	99 d5       	rcall	.+2866   	; 0x17fe <SPI_deactivateSlave>
	_delay_ms(1);
	SPI_deactivateSlave(slave);
     ccc:	8f ef       	ldi	r24, 0xFF	; 255
     cce:	9f e2       	ldi	r25, 0x2F	; 47
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <MCP2515_reset+0x1e>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <MCP2515_reset+0x24>
     cd6:	00 00       	nop
     cd8:	cf 91       	pop	r28
     cda:	08 95       	ret

00000cdc <MCP2515_read>:
     cdc:	cf 93       	push	r28
	_delay_ms(10);
}
     cde:	df 93       	push	r29
     ce0:	c8 2f       	mov	r28, r24

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
     ce2:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
     ce4:	88 d5       	rcall	.+2832   	; 0x17f6 <SPI_activateSlave>
     ce6:	83 e0       	ldi	r24, 0x03	; 3
	SPI_send(MCP_READ);
     ce8:	7c d5       	rcall	.+2808   	; 0x17e2 <SPI_send>
     cea:	8d 2f       	mov	r24, r29
     cec:	7a d5       	rcall	.+2804   	; 0x17e2 <SPI_send>
	SPI_send(address);
     cee:	7d d5       	rcall	.+2810   	; 0x17ea <SPI_receive>
     cf0:	d8 2f       	mov	r29, r24
     cf2:	8c 2f       	mov	r24, r28
	
	uint8_t result;
	result = SPI_receive();
     cf4:	84 d5       	rcall	.+2824   	; 0x17fe <SPI_deactivateSlave>
     cf6:	8d 2f       	mov	r24, r29
     cf8:	df 91       	pop	r29
	
	SPI_deactivateSlave(slave);
     cfa:	cf 91       	pop	r28
     cfc:	08 95       	ret

00000cfe <MCP2515_init>:
     cfe:	80 e0       	ldi	r24, 0x00	; 0
	return result;
}
     d00:	d8 df       	rcall	.-80     	; 0xcb2 <MCP2515_reset>
     d02:	6e e0       	ldi	r22, 0x0E	; 14
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	ea df       	rcall	.-44     	; 0xcdc <MCP2515_read>
{
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
	
	// Self-test
	uint8_t value;
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
     d08:	98 2f       	mov	r25, r24
     d0a:	90 7e       	andi	r25, 0xE0	; 224
	//printf("CANSTAT: %#x\n", value);
	if((value & MODE_MASK) != MODE_CONFIG) 
     d0c:	90 38       	cpi	r25, 0x80	; 128
     d0e:	69 f0       	breq	.+26     	; 0xd2a <MCP2515_init+0x2c>
     d10:	1f 92       	push	r1
     d12:	8f 93       	push	r24
	{
		printf("MCP2515 is NOT in configuration mode after reset! Value: %d\n", value);
     d14:	8a ec       	ldi	r24, 0xCA	; 202
     d16:	92 e0       	ldi	r25, 0x02	; 2
     d18:	9f 93       	push	r25
     d1a:	8f 93       	push	r24
     d1c:	53 d7       	rcall	.+3750   	; 0x1bc4 <printf>
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
		return 1;
     d24:	0f 90       	pop	r0
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	08 95       	ret
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	08 95       	ret

00000d2e <MCP2515_write>:
     d2e:	1f 93       	push	r17
	}
	
	//printf("finished MCP2515_init\n");
	return 0;
     d30:	cf 93       	push	r28
}
     d32:	df 93       	push	r29
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_write(SPI_SLAVES slave, uint8_t address, uint8_t data)
{
     d34:	c8 2f       	mov	r28, r24
     d36:	16 2f       	mov	r17, r22
     d38:	d4 2f       	mov	r29, r20
	SPI_activateSlave(slave);
     d3a:	5d d5       	rcall	.+2746   	; 0x17f6 <SPI_activateSlave>
     d3c:	82 e0       	ldi	r24, 0x02	; 2
	SPI_send(MCP_WRITE);
     d3e:	51 d5       	rcall	.+2722   	; 0x17e2 <SPI_send>
     d40:	81 2f       	mov	r24, r17
     d42:	4f d5       	rcall	.+2718   	; 0x17e2 <SPI_send>
	SPI_send(address);
     d44:	8d 2f       	mov	r24, r29
     d46:	4d d5       	rcall	.+2714   	; 0x17e2 <SPI_send>
     d48:	8c 2f       	mov	r24, r28
	SPI_send(data);
     d4a:	59 d5       	rcall	.+2738   	; 0x17fe <SPI_deactivateSlave>
     d4c:	df 91       	pop	r29
     d4e:	cf 91       	pop	r28
	SPI_deactivateSlave(slave);
     d50:	1f 91       	pop	r17
     d52:	08 95       	ret

00000d54 <MCP2515_bitModify>:
     d54:	0f 93       	push	r16
}
     d56:	1f 93       	push	r17
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	c8 2f       	mov	r28, r24
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_bitModify(SPI_SLAVES slave, uint8_t register2change, uint8_t mask, uint8_t newValue)
{
     d5e:	06 2f       	mov	r16, r22
     d60:	14 2f       	mov	r17, r20
     d62:	d2 2f       	mov	r29, r18
	SPI_activateSlave(slave);
     d64:	48 d5       	rcall	.+2704   	; 0x17f6 <SPI_activateSlave>
     d66:	85 e0       	ldi	r24, 0x05	; 5
	
	SPI_send(MCP_BITMOD);
     d68:	3c d5       	rcall	.+2680   	; 0x17e2 <SPI_send>
     d6a:	80 2f       	mov	r24, r16
     d6c:	3a d5       	rcall	.+2676   	; 0x17e2 <SPI_send>
	SPI_send(register2change);
     d6e:	81 2f       	mov	r24, r17
     d70:	38 d5       	rcall	.+2672   	; 0x17e2 <SPI_send>
     d72:	8d 2f       	mov	r24, r29
	SPI_send(mask);
     d74:	36 d5       	rcall	.+2668   	; 0x17e2 <SPI_send>
     d76:	8c 2f       	mov	r24, r28
     d78:	42 d5       	rcall	.+2692   	; 0x17fe <SPI_deactivateSlave>
	SPI_send(newValue);
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
	
	SPI_deactivateSlave(slave);
     d80:	0f 91       	pop	r16
     d82:	08 95       	ret

00000d84 <startGame>:

int menuFrameOffset = 10; //Columns from left frame border
//******************************************************************************************

void startGame()
{
     d84:	cf 93       	push	r28
     d86:	df 93       	push	r29
	OLED_clear();
     d88:	5d d2       	rcall	.+1210   	; 0x1244 <OLED_clear>
     d8a:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	3b d2       	rcall	.+1142   	; 0x120a <OLED_goto>
     d94:	8d e1       	ldi	r24, 0x1D	; 29
     d96:	93 e0       	ldi	r25, 0x03	; 3
	OLED_printString("START");
     d98:	8e d2       	rcall	.+1308   	; 0x12b6 <OLED_printString>
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_goto(3,0);
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	33 d2       	rcall	.+1126   	; 0x120a <OLED_goto>
     da4:	ce e0       	ldi	r28, 0x0E	; 14
     da6:	d0 e0       	ldi	r29, 0x00	; 0
     da8:	83 e2       	ldi	r24, 0x23	; 35
     daa:	93 e0       	ldi	r25, 0x03	; 3
     dac:	84 d2       	rcall	.+1288   	; 0x12b6 <OLED_printString>
     dae:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     db0:	8f e7       	ldi	r24, 0x7F	; 127
     db2:	97 e0       	ldi	r25, 0x07	; 7
     db4:	21 50       	subi	r18, 0x01	; 1
     db6:	80 40       	sbci	r24, 0x00	; 0
     db8:	90 40       	sbci	r25, 0x00	; 0
     dba:	e1 f7       	brne	.-8      	; 0xdb4 <startGame+0x30>
     dbc:	00 c0       	rjmp	.+0      	; 0xdbe <startGame+0x3a>
     dbe:	00 00       	nop
     dc0:	21 97       	sbiw	r28, 0x01	; 1
     dc2:	20 97       	sbiw	r28, 0x00	; 0
     dc4:	89 f7       	brne	.-30     	; 0xda8 <startGame+0x24>
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	70 e0       	ldi	r23, 0x00	; 0
     dca:	85 e0       	ldi	r24, 0x05	; 5
	OLED_goto(0,0);
	OLED_printString("START");
	
	OLED_goto(3,0);
	
	for(int i = 14; i > 0; i--)
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	1d d2       	rcall	.+1082   	; 0x120a <OLED_goto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_goto(5,0);
     dd0:	85 e2       	ldi	r24, 0x25	; 37
     dd2:	93 e0       	ldi	r25, 0x03	; 3
     dd4:	70 d2       	rcall	.+1248   	; 0x12b6 <OLED_printString>
     dd6:	2f ef       	ldi	r18, 0xFF	; 255
     dd8:	8f ef       	ldi	r24, 0xFF	; 255
     dda:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     ddc:	21 50       	subi	r18, 0x01	; 1
     dde:	80 40       	sbci	r24, 0x00	; 0
     de0:	90 40       	sbci	r25, 0x00	; 0
     de2:	e1 f7       	brne	.-8      	; 0xddc <startGame+0x58>
     de4:	00 c0       	rjmp	.+0      	; 0xde6 <startGame+0x62>
     de6:	00 c0       	rjmp	.+0      	; 0xde8 <startGame+0x64>
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	08 95       	ret

00000dee <MENU_addMenuItem>:
     dee:	cf 92       	push	r12
     df0:	df 92       	push	r13
     df2:	ef 92       	push	r14
     df4:	ff 92       	push	r15
	_delay_ms(3000);
}
     df6:	0f 93       	push	r16
     df8:	1f 93       	push	r17
     dfa:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     dfc:	df 93       	push	r29
     dfe:	8c 01       	movw	r16, r24
     e00:	7b 01       	movw	r14, r22
     e02:	6a 01       	movw	r12, r20
     e04:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     e06:	80 91 4d 04 	lds	r24, 0x044D
     e0a:	90 91 4e 04 	lds	r25, 0x044E
     e0e:	89 2b       	or	r24, r25
     e10:	19 f0       	breq	.+6      	; 0xe18 <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     e12:	8e e2       	ldi	r24, 0x2E	; 46
     e14:	93 e0       	ldi	r25, 0x03	; 3
     e16:	ec d6       	rcall	.+3544   	; 0x1bf0 <puts>
     e18:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	62 d5       	rcall	.+2756   	; 0x18e2 <malloc>
     e1e:	fc 01       	movw	r30, r24
     e20:	90 93 4e 04 	sts	0x044E, r25
     e24:	80 93 4d 04 	sts	0x044D, r24
     e28:	f3 82       	std	Z+3, r15	; 0x03
     e2a:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     e2c:	11 83       	std	Z+1, r17	; 0x01
     e2e:	00 83       	st	Z, r16
	currItem->name = name;
     e30:	cd 2b       	or	r28, r29
     e32:	39 f0       	breq	.+14     	; 0xe42 <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     e34:	d5 82       	std	Z+5, r13	; 0x05
     e36:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     e3c:	97 83       	std	Z+7, r25	; 0x07
     e3e:	86 83       	std	Z+6, r24	; 0x06
     e40:	04 c0       	rjmp	.+8      	; 0xe4a <MENU_addMenuItem+0x5c>
     e42:	15 82       	std	Z+5, r1	; 0x05
     e44:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     e46:	17 82       	std	Z+7, r1	; 0x07
     e48:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
	}
}
     e4e:	1f 91       	pop	r17
     e50:	0f 91       	pop	r16
     e52:	ff 90       	pop	r15
     e54:	ef 90       	pop	r14
     e56:	df 90       	pop	r13
     e58:	cf 90       	pop	r12
     e5a:	08 95       	ret

00000e5c <MENU_buildMenus>:
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     e60:	86 e1       	ldi	r24, 0x16	; 22
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	3e d5       	rcall	.+2684   	; 0x18e2 <malloc>
     e66:	ec 01       	movw	r28, r24
     e68:	90 93 54 04 	sts	0x0454, r25
     e6c:	80 93 53 04 	sts	0x0453, r24
     e70:	84 e4       	ldi	r24, 0x44	; 68
	mainMenu->menuName = "MainMenu";
     e72:	93 e0       	ldi	r25, 0x03	; 3
     e74:	99 83       	std	Y+1, r25	; 0x01
     e76:	88 83       	st	Y, r24
     e78:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     e7a:	1c 8a       	std	Y+20, r1	; 0x14
     e7c:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	9b 83       	std	Y+3, r25	; 0x03
     e82:	8a 83       	std	Y+2, r24	; 0x02
     e84:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	2c d5       	rcall	.+2648   	; 0x18e2 <malloc>
     e8a:	fc 01       	movw	r30, r24
     e8c:	90 93 52 04 	sts	0x0452, r25
     e90:	80 93 51 04 	sts	0x0451, r24
     e94:	8d e4       	ldi	r24, 0x4D	; 77
     e96:	93 e0       	ldi	r25, 0x03	; 3
	difficultyMenu->menuName = "DifficultyMenu";
     e98:	91 83       	std	Z+1, r25	; 0x01
     e9a:	80 83       	st	Z, r24
     e9c:	d5 8b       	std	Z+21, r29	; 0x15
     e9e:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     ea0:	83 e0       	ldi	r24, 0x03	; 3
     ea2:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     ea4:	93 83       	std	Z+3, r25	; 0x03
     ea6:	82 83       	std	Z+2, r24	; 0x02
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	be 01       	movw	r22, r28
     eb2:	8c e5       	ldi	r24, 0x5C	; 92
     eb4:	93 e0       	ldi	r25, 0x03	; 3
     eb6:	9b df       	rcall	.-202    	; 0xdee <MENU_addMenuItem>
     eb8:	60 91 53 04 	lds	r22, 0x0453
     ebc:	70 91 54 04 	lds	r23, 0x0454
	mainMenu->children[0] = currItem;
     ec0:	e0 91 4d 04 	lds	r30, 0x044D
     ec4:	f0 91 4e 04 	lds	r31, 0x044E
     ec8:	db 01       	movw	r26, r22
     eca:	15 96       	adiw	r26, 0x05	; 5
     ecc:	fc 93       	st	X, r31
     ece:	ee 93       	st	-X, r30
     ed0:	14 97       	sbiw	r26, 0x04	; 4
     ed2:	82 ec       	ldi	r24, 0xC2	; 194
     ed4:	96 e0       	ldi	r25, 0x06	; 6
     ed6:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
     ed8:	82 87       	std	Z+10, r24	; 0x0a
     eda:	40 91 51 04 	lds	r20, 0x0451
     ede:	50 91 52 04 	lds	r21, 0x0452
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     ee2:	21 e0       	ldi	r18, 0x01	; 1
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	85 e6       	ldi	r24, 0x65	; 101
     ee8:	93 e0       	ldi	r25, 0x03	; 3
     eea:	81 df       	rcall	.-254    	; 0xdee <MENU_addMenuItem>
     eec:	60 91 53 04 	lds	r22, 0x0453
     ef0:	70 91 54 04 	lds	r23, 0x0454
	mainMenu->children[1] = currItem;
     ef4:	80 91 4d 04 	lds	r24, 0x044D
     ef8:	90 91 4e 04 	lds	r25, 0x044E
     efc:	fb 01       	movw	r30, r22
     efe:	97 83       	std	Z+7, r25	; 0x07
     f00:	86 83       	std	Z+6, r24	; 0x06
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	40 e0       	ldi	r20, 0x00	; 0
     f08:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     f0a:	80 e7       	ldi	r24, 0x70	; 112
     f0c:	93 e0       	ldi	r25, 0x03	; 3
     f0e:	6f df       	rcall	.-290    	; 0xdee <MENU_addMenuItem>
     f10:	60 91 53 04 	lds	r22, 0x0453
     f14:	70 91 54 04 	lds	r23, 0x0454
     f18:	80 91 4d 04 	lds	r24, 0x044D
	mainMenu->children[2] = currItem;
     f1c:	90 91 4e 04 	lds	r25, 0x044E
     f20:	db 01       	movw	r26, r22
     f22:	19 96       	adiw	r26, 0x09	; 9
     f24:	9c 93       	st	X, r25
     f26:	8e 93       	st	-X, r24
     f28:	18 97       	sbiw	r26, 0x08	; 8
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	40 e0       	ldi	r20, 0x00	; 0
     f30:	50 e0       	ldi	r21, 0x00	; 0
     f32:	8b e7       	ldi	r24, 0x7B	; 123
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
     f34:	93 e0       	ldi	r25, 0x03	; 3
     f36:	5b df       	rcall	.-330    	; 0xdee <MENU_addMenuItem>
     f38:	60 91 53 04 	lds	r22, 0x0453
     f3c:	70 91 54 04 	lds	r23, 0x0454
     f40:	e0 91 4d 04 	lds	r30, 0x044D
	mainMenu->children[3] = currItem;
     f44:	f0 91 4e 04 	lds	r31, 0x044E
     f48:	db 01       	movw	r26, r22
     f4a:	1b 96       	adiw	r26, 0x0b	; 11
     f4c:	fc 93       	st	X, r31
     f4e:	ee 93       	st	-X, r30
     f50:	1a 97       	sbiw	r26, 0x0a	; 10
     f52:	82 e9       	ldi	r24, 0x92	; 146
     f54:	94 e0       	ldi	r25, 0x04	; 4
     f56:	93 87       	std	Z+11, r25	; 0x0b
     f58:	82 87       	std	Z+10, r24	; 0x0a
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	85 e8       	ldi	r24, 0x85	; 133
     f64:	93 e0       	ldi	r25, 0x03	; 3
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
     f66:	43 df       	rcall	.-378    	; 0xdee <MENU_addMenuItem>
     f68:	e0 91 53 04 	lds	r30, 0x0453
     f6c:	f0 91 54 04 	lds	r31, 0x0454
     f70:	80 91 4d 04 	lds	r24, 0x044D
     f74:	90 91 4e 04 	lds	r25, 0x044E
	mainMenu->children[4] = currItem;
     f78:	95 87       	std	Z+13, r25	; 0x0d
     f7a:	84 87       	std	Z+12, r24	; 0x0c
     f7c:	10 92 4e 04 	sts	0x044E, r1
     f80:	10 92 4d 04 	sts	0x044D, r1
     f84:	60 91 51 04 	lds	r22, 0x0451
     f88:	70 91 52 04 	lds	r23, 0x0452
	
	currItem = NULL;
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	8a e8       	ldi	r24, 0x8A	; 138
     f96:	93 e0       	ldi	r25, 0x03	; 3
     f98:	2a df       	rcall	.-428    	; 0xdee <MENU_addMenuItem>
     f9a:	60 91 51 04 	lds	r22, 0x0451
     f9e:	70 91 52 04 	lds	r23, 0x0452
     fa2:	80 91 4d 04 	lds	r24, 0x044D
     fa6:	90 91 4e 04 	lds	r25, 0x044E
	difficultyMenu->children[0] = currItem;
     faa:	fb 01       	movw	r30, r22
     fac:	95 83       	std	Z+5, r25	; 0x05
     fae:	84 83       	std	Z+4, r24	; 0x04
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e0       	ldi	r20, 0x00	; 0
     fb6:	50 e0       	ldi	r21, 0x00	; 0
     fb8:	8f e8       	ldi	r24, 0x8F	; 143
     fba:	93 e0       	ldi	r25, 0x03	; 3
     fbc:	18 df       	rcall	.-464    	; 0xdee <MENU_addMenuItem>
     fbe:	60 91 51 04 	lds	r22, 0x0451
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
     fc2:	70 91 52 04 	lds	r23, 0x0452
     fc6:	80 91 4d 04 	lds	r24, 0x044D
     fca:	90 91 4e 04 	lds	r25, 0x044E
     fce:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
     fd0:	17 96       	adiw	r26, 0x07	; 7
     fd2:	9c 93       	st	X, r25
     fd4:	8e 93       	st	-X, r24
     fd6:	16 97       	sbiw	r26, 0x06	; 6
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	50 e0       	ldi	r21, 0x00	; 0
     fe0:	86 e9       	ldi	r24, 0x96	; 150
     fe2:	93 e0       	ldi	r25, 0x03	; 3
     fe4:	04 df       	rcall	.-504    	; 0xdee <MENU_addMenuItem>
     fe6:	e0 91 51 04 	lds	r30, 0x0451
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
     fea:	f0 91 52 04 	lds	r31, 0x0452
     fee:	80 91 4d 04 	lds	r24, 0x044D
     ff2:	90 91 4e 04 	lds	r25, 0x044E
     ff6:	91 87       	std	Z+9, r25	; 0x09
     ff8:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	08 95       	ret

00001000 <MENU_printMenuItem>:
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	ec 01       	movw	r28, r24
    1006:	cb 01       	movw	r24, r22
    1008:	20 97       	sbiw	r28, 0x00	; 0
    100a:	49 f0       	breq	.+18     	; 0x101e <MENU_printMenuItem+0x1e>
    100c:	60 91 0e 01 	lds	r22, 0x010E
}
    1010:	70 91 0f 01 	lds	r23, 0x010F

void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
    1014:	fa d0       	rcall	.+500    	; 0x120a <OLED_goto>
    1016:	88 81       	ld	r24, Y
		OLED_printString(item->name);
    1018:	99 81       	ldd	r25, Y+1	; 0x01
    101a:	4d d1       	rcall	.+666    	; 0x12b6 <OLED_printString>
    101c:	07 c0       	rjmp	.+14     	; 0x102c <MENU_printMenuItem+0x2c>
    101e:	8b e9       	ldi	r24, 0x9B	; 155
    1020:	93 e0       	ldi	r25, 0x03	; 3
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
    1022:	9f 93       	push	r25
    1024:	8f 93       	push	r24
    1026:	ce d5       	rcall	.+2972   	; 0x1bc4 <printf>
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	08 95       	ret

00001032 <MENU_printMenu>:
	}
}
    1032:	cf 92       	push	r12
    1034:	df 92       	push	r13
    1036:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	cf 93       	push	r28
    1040:	df 93       	push	r29
    1042:	6c 01       	movw	r12, r24
    1044:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
    1046:	fe d0       	rcall	.+508    	; 0x1244 <OLED_clear>
    1048:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	8b d1       	rcall	.+790    	; 0x1364 <OLED_moveArrow>
    104e:	1e 14       	cp	r1, r14
    1050:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
    1052:	7c f4       	brge	.+30     	; 0x1072 <MENU_printMenu+0x40>
    1054:	86 01       	movw	r16, r12
    1056:	0c 5f       	subi	r16, 0xFC	; 252
    1058:	1f 4f       	sbci	r17, 0xFF	; 255
    105a:	c0 e0       	ldi	r28, 0x00	; 0
    105c:	d0 e0       	ldi	r29, 0x00	; 0
    105e:	be 01       	movw	r22, r28
    1060:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
    1062:	81 91       	ld	r24, Z+
    1064:	91 91       	ld	r25, Z+
    1066:	8f 01       	movw	r16, r30
    1068:	cb df       	rcall	.-106    	; 0x1000 <MENU_printMenuItem>
    106a:	21 96       	adiw	r28, 0x01	; 1
    106c:	ce 15       	cp	r28, r14
    106e:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
    1070:	b1 f7       	brne	.-20     	; 0x105e <MENU_printMenu+0x2c>
    1072:	d0 92 50 04 	sts	0x0450, r13
    1076:	c0 92 4f 04 	sts	0x044F, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
    107a:	10 92 4b 04 	sts	0x044B, r1
    107e:	10 92 4a 04 	sts	0x044A, r1
	
	currentPosition = 0;
    1082:	f6 01       	movw	r30, r12
    1084:	84 81       	ldd	r24, Z+4	; 0x04
    1086:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
    1088:	90 93 4e 04 	sts	0x044E, r25
    108c:	80 93 4d 04 	sts	0x044D, r24
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
}
    1096:	0f 91       	pop	r16
    1098:	ff 90       	pop	r15
    109a:	ef 90       	pop	r14
    109c:	df 90       	pop	r13
    109e:	cf 90       	pop	r12
    10a0:	08 95       	ret

000010a2 <MENU_moveUp>:
    10a2:	20 91 4a 04 	lds	r18, 0x044A
    10a6:	30 91 4b 04 	lds	r19, 0x044B
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
    10aa:	12 16       	cp	r1, r18
    10ac:	13 06       	cpc	r1, r19
    10ae:	bc f4       	brge	.+46     	; 0x10de <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
    10b0:	c9 01       	movw	r24, r18
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	90 93 4b 04 	sts	0x044B, r25
    10b8:	80 93 4a 04 	sts	0x044A, r24
		currItem = currentMenu->children[currentPosition];
    10bc:	e0 91 4f 04 	lds	r30, 0x044F
    10c0:	f0 91 50 04 	lds	r31, 0x0450
    10c4:	2f 5f       	subi	r18, 0xFF	; 255
    10c6:	3f 4f       	sbci	r19, 0xFF	; 255
    10c8:	22 0f       	add	r18, r18
    10ca:	33 1f       	adc	r19, r19
    10cc:	e2 0f       	add	r30, r18
    10ce:	f3 1f       	adc	r31, r19
    10d0:	20 81       	ld	r18, Z
    10d2:	31 81       	ldd	r19, Z+1	; 0x01
    10d4:	30 93 4e 04 	sts	0x044E, r19
    10d8:	20 93 4d 04 	sts	0x044D, r18
		OLED_moveArrow(currentPosition);
    10dc:	43 c1       	rjmp	.+646    	; 0x1364 <OLED_moveArrow>
    10de:	08 95       	ret

000010e0 <MENU_moveDown>:
    10e0:	e0 91 4f 04 	lds	r30, 0x044F
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
    10e4:	f0 91 50 04 	lds	r31, 0x0450
    10e8:	20 91 4a 04 	lds	r18, 0x044A
    10ec:	30 91 4b 04 	lds	r19, 0x044B
    10f0:	82 81       	ldd	r24, Z+2	; 0x02
    10f2:	93 81       	ldd	r25, Z+3	; 0x03
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	28 17       	cp	r18, r24
    10f8:	39 07       	cpc	r19, r25
    10fa:	a4 f4       	brge	.+40     	; 0x1124 <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
    10fc:	c9 01       	movw	r24, r18
    10fe:	01 96       	adiw	r24, 0x01	; 1
    1100:	90 93 4b 04 	sts	0x044B, r25
    1104:	80 93 4a 04 	sts	0x044A, r24
		currItem = currentMenu->children[currentPosition];
    1108:	2d 5f       	subi	r18, 0xFD	; 253
    110a:	3f 4f       	sbci	r19, 0xFF	; 255
    110c:	22 0f       	add	r18, r18
    110e:	33 1f       	adc	r19, r19
    1110:	e2 0f       	add	r30, r18
    1112:	f3 1f       	adc	r31, r19
    1114:	20 81       	ld	r18, Z
    1116:	31 81       	ldd	r19, Z+1	; 0x01
    1118:	30 93 4e 04 	sts	0x044E, r19
    111c:	20 93 4d 04 	sts	0x044D, r18
		OLED_moveArrow(currentPosition);
    1120:	21 c1       	rjmp	.+578    	; 0x1364 <OLED_moveArrow>
    1122:	08 95       	ret
    1124:	10 92 4b 04 	sts	0x044B, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
    1128:	10 92 4a 04 	sts	0x044A, r1
    112c:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
    112e:	95 81       	ldd	r25, Z+5	; 0x05
    1130:	90 93 4e 04 	sts	0x044E, r25
    1134:	80 93 4d 04 	sts	0x044D, r24
    1138:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	13 c1       	rjmp	.+550    	; 0x1364 <OLED_moveArrow>
    113e:	08 95       	ret

00001140 <MENU_moveLeft>:
    1140:	e0 91 4f 04 	lds	r30, 0x044F
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
    1144:	f0 91 50 04 	lds	r31, 0x0450
    1148:	84 89       	ldd	r24, Z+20	; 0x14
    114a:	95 89       	ldd	r25, Z+21	; 0x15
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	21 f0       	breq	.+8      	; 0x1158 <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
    1150:	fc 01       	movw	r30, r24
    1152:	62 81       	ldd	r22, Z+2	; 0x02
    1154:	73 81       	ldd	r23, Z+3	; 0x03
    1156:	6d cf       	rjmp	.-294    	; 0x1032 <MENU_printMenu>
    1158:	08 95       	ret

0000115a <MENU_reactivate>:
    115a:	80 91 4f 04 	lds	r24, 0x044F
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
    115e:	90 91 50 04 	lds	r25, 0x0450
    1162:	fc 01       	movw	r30, r24
    1164:	62 81       	ldd	r22, Z+2	; 0x02
    1166:	73 81       	ldd	r23, Z+3	; 0x03
    1168:	64 df       	rcall	.-312    	; 0x1032 <MENU_printMenu>
    116a:	18 c0       	rjmp	.+48     	; 0x119c <MENU_waitForInput>
	MENU_waitForInput();
    116c:	08 95       	ret

0000116e <MENU_moveRight>:
    116e:	e0 91 4d 04 	lds	r30, 0x044D
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
    1172:	f0 91 4e 04 	lds	r31, 0x044E
    1176:	86 81       	ldd	r24, Z+6	; 0x06
    1178:	97 81       	ldd	r25, Z+7	; 0x07
    117a:	89 2b       	or	r24, r25
    117c:	39 f0       	breq	.+14     	; 0x118c <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
    117e:	84 81       	ldd	r24, Z+4	; 0x04
    1180:	95 81       	ldd	r25, Z+5	; 0x05
    1182:	fc 01       	movw	r30, r24
    1184:	62 81       	ldd	r22, Z+2	; 0x02
    1186:	73 81       	ldd	r23, Z+3	; 0x03
    1188:	54 cf       	rjmp	.-344    	; 0x1032 <MENU_printMenu>
    118a:	08 95       	ret
    118c:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
    118e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1190:	e0 2d       	mov	r30, r0
    1192:	30 97       	sbiw	r30, 0x00	; 0
    1194:	11 f0       	breq	.+4      	; 0x119a <MENU_moveRight+0x2c>
    1196:	09 95       	icall
	{
		currItem->functionPtr();
    1198:	e0 cf       	rjmp	.-64     	; 0x115a <MENU_reactivate>
		MENU_reactivate();
    119a:	08 95       	ret

0000119c <MENU_waitForInput>:
    119c:	80 91 4a 04 	lds	r24, 0x044A
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
    11a0:	90 91 4b 04 	lds	r25, 0x044B
    11a4:	df d0       	rcall	.+446    	; 0x1364 <OLED_moveArrow>
    11a6:	80 91 4c 04 	lds	r24, 0x044C
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    11aa:	88 23       	and	r24, r24
    11ac:	f9 f0       	breq	.+62     	; 0x11ec <MENU_waitForInput+0x50>
    11ae:	6d dd       	rcall	.-1318   	; 0xc8a <JOY_getDirection>
	{
		currDir = JOY_getDirection();
    11b0:	82 30       	cpi	r24, 0x02	; 2
    11b2:	71 f0       	breq	.+28     	; 0x11d0 <MENU_waitForInput+0x34>
		switch(currDir){
    11b4:	18 f4       	brcc	.+6      	; 0x11bc <MENU_waitForInput+0x20>
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	49 f0       	breq	.+18     	; 0x11cc <MENU_waitForInput+0x30>
    11ba:	0b c0       	rjmp	.+22     	; 0x11d2 <MENU_waitForInput+0x36>
    11bc:	83 30       	cpi	r24, 0x03	; 3
    11be:	21 f0       	breq	.+8      	; 0x11c8 <MENU_waitForInput+0x2c>
    11c0:	84 30       	cpi	r24, 0x04	; 4
    11c2:	39 f4       	brne	.+14     	; 0x11d2 <MENU_waitForInput+0x36>
    11c4:	bd df       	rcall	.-134    	; 0x1140 <MENU_moveLeft>
    11c6:	05 c0       	rjmp	.+10     	; 0x11d2 <MENU_waitForInput+0x36>
			case LEFT:
			MENU_moveLeft();
    11c8:	d2 df       	rcall	.-92     	; 0x116e <MENU_moveRight>
    11ca:	03 c0       	rjmp	.+6      	; 0x11d2 <MENU_waitForInput+0x36>
			break;
    11cc:	6a df       	rcall	.-300    	; 0x10a2 <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
    11ce:	01 c0       	rjmp	.+2      	; 0x11d2 <MENU_waitForInput+0x36>
    11d0:	87 df       	rcall	.-242    	; 0x10e0 <MENU_moveDown>
			break;
    11d2:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
    11d4:	8f e7       	ldi	r24, 0x7F	; 127
    11d6:	94 e0       	ldi	r25, 0x04	; 4
			break;
    11d8:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
    11da:	80 40       	sbci	r24, 0x00	; 0
    11dc:	90 40       	sbci	r25, 0x00	; 0
    11de:	e1 f7       	brne	.-8      	; 0x11d8 <MENU_waitForInput+0x3c>
    11e0:	00 c0       	rjmp	.+0      	; 0x11e2 <MENU_waitForInput+0x46>
    11e2:	00 00       	nop
    11e4:	80 91 4c 04 	lds	r24, 0x044C
    11e8:	81 11       	cpse	r24, r1
    11ea:	e1 cf       	rjmp	.-62     	; 0x11ae <MENU_waitForInput+0x12>
    11ec:	08 95       	ret

000011ee <MENU_activate>:
    11ee:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    11f0:	80 93 4c 04 	sts	0x044C, r24
    11f4:	33 de       	rcall	.-922    	; 0xe5c <MENU_buildMenus>
    11f6:	80 91 53 04 	lds	r24, 0x0453
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
    11fa:	90 91 54 04 	lds	r25, 0x0454
    11fe:	fc 01       	movw	r30, r24
    1200:	62 81       	ldd	r22, Z+2	; 0x02
    1202:	73 81       	ldd	r23, Z+3	; 0x03
    1204:	16 df       	rcall	.-468    	; 0x1032 <MENU_printMenu>
    1206:	ca cf       	rjmp	.-108    	; 0x119c <MENU_waitForInput>
    1208:	08 95       	ret

0000120a <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
    120a:	26 2f       	mov	r18, r22
    120c:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
    120e:	75 95       	asr	r23
    1210:	67 95       	ror	r22
    1212:	75 95       	asr	r23
    1214:	67 95       	ror	r22
    1216:	75 95       	asr	r23
    1218:	67 95       	ror	r22
    121a:	75 95       	asr	r23
    121c:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
    121e:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
    1220:	80 55       	subi	r24, 0x50	; 80
    1222:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
    1224:	e0 91 12 01 	lds	r30, 0x0112
    1228:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    122c:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
    122e:	e0 91 12 01 	lds	r30, 0x0112
    1232:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1236:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
    1238:	e0 91 12 01 	lds	r30, 0x0112
    123c:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1240:	60 83       	st	Z, r22
    1242:	08 95       	ret

00001244 <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
    1244:	1f 93       	push	r17
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	c1 e0       	ldi	r28, 0x01	; 1
    124c:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1252:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
    1254:	60 e0       	ldi	r22, 0x00	; 0
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	d8 df       	rcall	.-80     	; 0x120a <OLED_goto>
    125a:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
    125c:	e0 91 10 01 	lds	r30, 0x0110
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    1260:	f0 91 11 01 	lds	r31, 0x0111
    1264:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1266:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1268:	80 38       	cpi	r24, 0x80	; 128
    126a:	c1 f7       	brne	.-16     	; 0x125c <OLED_clear+0x18>
    126c:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
    126e:	9d 2f       	mov	r25, r29
    1270:	21 96       	adiw	r28, 0x01	; 1
    1272:	c9 30       	cpi	r28, 0x09	; 9
    1274:	d1 05       	cpc	r29, r1
    1276:	71 f7       	brne	.-36     	; 0x1254 <OLED_clear+0x10>
    1278:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    127a:	cf 91       	pop	r28
    127c:	1f 91       	pop	r17
    127e:	08 95       	ret

00001280 <OLED_printCharacter>:
    1280:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	22 0f       	add	r18, r18
    1288:	33 1f       	adc	r19, r19
    128a:	22 0f       	add	r18, r18
    128c:	33 1f       	adc	r19, r19
    128e:	22 0f       	add	r18, r18
    1290:	33 1f       	adc	r19, r19
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	20 59       	subi	r18, 0x90	; 144
    1298:	3f 4f       	sbci	r19, 0xFF	; 255
    129a:	f9 01       	movw	r30, r18
    129c:	e8 0f       	add	r30, r24
    129e:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
    12a0:	e4 91       	lpm	r30, Z
    12a2:	a0 91 10 01 	lds	r26, 0x0110
    12a6:	b0 91 11 01 	lds	r27, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12aa:	ec 93       	st	X, r30
    12ac:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
    12ae:	88 30       	cpi	r24, 0x08	; 8
    12b0:	91 05       	cpc	r25, r1
    12b2:	99 f7       	brne	.-26     	; 0x129a <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
    12b4:	08 95       	ret

000012b6 <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
    12b6:	1f 93       	push	r17
    12b8:	cf 93       	push	r28
    12ba:	df 93       	push	r29
    12bc:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
    12be:	10 e0       	ldi	r17, 0x00	; 0
    12c0:	06 c0       	rjmp	.+12     	; 0x12ce <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
    12c2:	fe 01       	movw	r30, r28
    12c4:	e8 0f       	add	r30, r24
    12c6:	f9 1f       	adc	r31, r25
    12c8:	80 81       	ld	r24, Z
    12ca:	da df       	rcall	.-76     	; 0x1280 <OLED_printCharacter>
    12cc:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
    12ce:	81 2f       	mov	r24, r17
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	fe 01       	movw	r30, r28
    12d4:	01 90       	ld	r0, Z+
    12d6:	00 20       	and	r0, r0
    12d8:	e9 f7       	brne	.-6      	; 0x12d4 <OLED_printString+0x1e>
    12da:	31 97       	sbiw	r30, 0x01	; 1
    12dc:	ec 1b       	sub	r30, r28
    12de:	fd 0b       	sbc	r31, r29
    12e0:	8e 17       	cp	r24, r30
    12e2:	9f 07       	cpc	r25, r31
    12e4:	70 f3       	brcs	.-36     	; 0x12c2 <OLED_printString+0xc>
    12e6:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	08 95       	ret

000012ee <OLED_printArrow>:
    12ee:	e0 91 10 01 	lds	r30, 0x0110
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
    12f2:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12f6:	88 e1       	ldi	r24, 0x18	; 24
    12f8:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    12fa:	e0 91 10 01 	lds	r30, 0x0110
    12fe:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1302:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
    1304:	e0 91 10 01 	lds	r30, 0x0110
    1308:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    130c:	9e e7       	ldi	r25, 0x7E	; 126
    130e:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
    1310:	e0 91 10 01 	lds	r30, 0x0110
    1314:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1318:	9c e3       	ldi	r25, 0x3C	; 60
    131a:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    131c:	e0 91 10 01 	lds	r30, 0x0110
    1320:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1324:	80 83       	st	Z, r24
    1326:	08 95       	ret

00001328 <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    1328:	1f 93       	push	r17
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	c1 e0       	ldi	r28, 0x01	; 1
    1330:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1336:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	66 df       	rcall	.-308    	; 0x120a <OLED_goto>
    133e:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1340:	e0 91 10 01 	lds	r30, 0x0110
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    1344:	f0 91 11 01 	lds	r31, 0x0111
    1348:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    134a:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    134c:	85 30       	cpi	r24, 0x05	; 5
    134e:	c1 f7       	brne	.-16     	; 0x1340 <OLED_clearArrow+0x18>
    1350:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1352:	9d 2f       	mov	r25, r29
    1354:	21 96       	adiw	r28, 0x01	; 1
    1356:	c9 30       	cpi	r28, 0x09	; 9
    1358:	d1 05       	cpc	r29, r1
    135a:	71 f7       	brne	.-36     	; 0x1338 <OLED_clearArrow+0x10>
    135c:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    135e:	cf 91       	pop	r28
    1360:	1f 91       	pop	r17
    1362:	08 95       	ret

00001364 <OLED_moveArrow>:
    1364:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    1366:	df 93       	push	r29
    1368:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
    136a:	de df       	rcall	.-68     	; 0x1328 <OLED_clearArrow>
    136c:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
    136e:	70 e0       	ldi	r23, 0x00	; 0
    1370:	ce 01       	movw	r24, r28
    1372:	4b df       	rcall	.-362    	; 0x120a <OLED_goto>
    1374:	bc df       	rcall	.-136    	; 0x12ee <OLED_printArrow>
    1376:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
    1378:	cf 91       	pop	r28
    137a:	08 95       	ret

0000137c <OLED_setContrast>:
}
    137c:	e0 91 12 01 	lds	r30, 0x0112
    1380:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1384:	91 e8       	ldi	r25, 0x81	; 129
    1386:	90 83       	st	Z, r25
void OLED_setContrast(uint8_t contrast)
{
	// activate contrast contol
	OLED_writeByteToOLED(oled_cmd, 0x81);
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
    1388:	e0 91 12 01 	lds	r30, 0x0112
    138c:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1390:	80 83       	st	Z, r24
    1392:	08 95       	ret

00001394 <OLED_fadeIn>:
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
}

void OLED_fadeIn(void)
{
    1394:	cf 93       	push	r28
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    1396:	c0 e0       	ldi	r28, 0x00	; 0
	{
		OLED_setContrast(i);
    1398:	8c 2f       	mov	r24, r28
    139a:	f0 df       	rcall	.-32     	; 0x137c <OLED_setContrast>
    139c:	83 e3       	ldi	r24, 0x33	; 51
    139e:	93 e1       	ldi	r25, 0x13	; 19
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <OLED_fadeIn+0xc>
    13a4:	cf 5f       	subi	r28, 0xFF	; 255
}

void OLED_fadeIn(void)
{
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    13a6:	cf 3f       	cpi	r28, 0xFF	; 255
    13a8:	b9 f7       	brne	.-18     	; 0x1398 <OLED_fadeIn+0x4>
    13aa:	cf 91       	pop	r28
	{
		OLED_setContrast(i);
		_delay_ms(4);
	}
}
    13ac:	08 95       	ret

000013ae <OLED_splashScreen>:
    13ae:	8b ea       	ldi	r24, 0xAB	; 171
	}
}

void OLED_splashScreen(void)
{
	printf("run splash screen...\n");
    13b0:	93 e0       	ldi	r25, 0x03	; 3
    13b2:	1e d4       	rcall	.+2108   	; 0x1bf0 <puts>
    13b4:	80 e0       	ldi	r24, 0x00	; 0
	
	OLED_setContrast(0);
    13b6:	e2 df       	rcall	.-60     	; 0x137c <OLED_setContrast>
    13b8:	2f ef       	ldi	r18, 0xFF	; 255
    13ba:	8f e7       	ldi	r24, 0x7F	; 127
    13bc:	97 e0       	ldi	r25, 0x07	; 7
    13be:	21 50       	subi	r18, 0x01	; 1
    13c0:	80 40       	sbci	r24, 0x00	; 0
    13c2:	90 40       	sbci	r25, 0x00	; 0
    13c4:	e1 f7       	brne	.-8      	; 0x13be <OLED_splashScreen+0x10>
    13c6:	00 c0       	rjmp	.+0      	; 0x13c8 <OLED_splashScreen+0x1a>
    13c8:	00 00       	nop
    13ca:	64 e0       	ldi	r22, 0x04	; 4
    13cc:	70 e0       	ldi	r23, 0x00	; 0
	
	_delay_ms(500);
	OLED_goto(2,4);
    13ce:	82 e0       	ldi	r24, 0x02	; 2
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	1b df       	rcall	.-458    	; 0x120a <OLED_goto>
    13d4:	80 ec       	ldi	r24, 0xC0	; 192
    13d6:	93 e0       	ldi	r25, 0x03	; 3
    13d8:	6e df       	rcall	.-292    	; 0x12b6 <OLED_printString>
	OLED_printString("Group 46 Soft");
    13da:	dc df       	rcall	.-72     	; 0x1394 <OLED_fadeIn>
    13dc:	2f ef       	ldi	r18, 0xFF	; 255
    13de:	8f e7       	ldi	r24, 0x7F	; 127
    13e0:	97 e0       	ldi	r25, 0x07	; 7
	OLED_fadeIn();
    13e2:	21 50       	subi	r18, 0x01	; 1
    13e4:	80 40       	sbci	r24, 0x00	; 0
    13e6:	90 40       	sbci	r25, 0x00	; 0
    13e8:	e1 f7       	brne	.-8      	; 0x13e2 <OLED_splashScreen+0x34>
    13ea:	00 c0       	rjmp	.+0      	; 0x13ec <OLED_splashScreen+0x3e>
    13ec:	00 00       	nop
    13ee:	2a df       	rcall	.-428    	; 0x1244 <OLED_clear>
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	c4 df       	rcall	.-120    	; 0x137c <OLED_setContrast>
    13f4:	2f ef       	ldi	r18, 0xFF	; 255
    13f6:	8f ef       	ldi	r24, 0xFF	; 255
	_delay_ms(500);
	
	OLED_clear();
    13f8:	92 e0       	ldi	r25, 0x02	; 2
    13fa:	21 50       	subi	r18, 0x01	; 1
	OLED_setContrast(0);
    13fc:	80 40       	sbci	r24, 0x00	; 0
    13fe:	90 40       	sbci	r25, 0x00	; 0
    1400:	e1 f7       	brne	.-8      	; 0x13fa <OLED_splashScreen+0x4c>
    1402:	00 c0       	rjmp	.+0      	; 0x1404 <OLED_splashScreen+0x56>
    1404:	00 c0       	rjmp	.+0      	; 0x1406 <OLED_splashScreen+0x58>
    1406:	6c e1       	ldi	r22, 0x1C	; 28
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	83 e0       	ldi	r24, 0x03	; 3
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	fd de       	rcall	.-518    	; 0x120a <OLED_goto>
    1410:	8e ec       	ldi	r24, 0xCE	; 206
    1412:	93 e0       	ldi	r25, 0x03	; 3
	
	_delay_ms(200);
	OLED_goto(3,28);
    1414:	50 df       	rcall	.-352    	; 0x12b6 <OLED_printString>
    1416:	68 e1       	ldi	r22, 0x18	; 24
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	84 e0       	ldi	r24, 0x04	; 4
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	f5 de       	rcall	.-534    	; 0x120a <OLED_goto>
	OLED_printString("proudly");
    1420:	86 ed       	ldi	r24, 0xD6	; 214
    1422:	93 e0       	ldi	r25, 0x03	; 3
    1424:	48 df       	rcall	.-368    	; 0x12b6 <OLED_printString>
    1426:	b6 df       	rcall	.-148    	; 0x1394 <OLED_fadeIn>
	OLED_goto(4,24);	
    1428:	2f ef       	ldi	r18, 0xFF	; 255
    142a:	8f e7       	ldi	r24, 0x7F	; 127
    142c:	97 e0       	ldi	r25, 0x07	; 7
    142e:	21 50       	subi	r18, 0x01	; 1
    1430:	80 40       	sbci	r24, 0x00	; 0
    1432:	90 40       	sbci	r25, 0x00	; 0
	OLED_printString("presents");
    1434:	e1 f7       	brne	.-8      	; 0x142e <OLED_splashScreen+0x80>
    1436:	00 c0       	rjmp	.+0      	; 0x1438 <OLED_splashScreen+0x8a>
    1438:	00 00       	nop
    143a:	04 df       	rcall	.-504    	; 0x1244 <OLED_clear>
	OLED_fadeIn();
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	9e df       	rcall	.-196    	; 0x137c <OLED_setContrast>
    1440:	2f ef       	ldi	r18, 0xFF	; 255
    1442:	8f ef       	ldi	r24, 0xFF	; 255
    1444:	92 e0       	ldi	r25, 0x02	; 2
    1446:	21 50       	subi	r18, 0x01	; 1
    1448:	80 40       	sbci	r24, 0x00	; 0
    144a:	90 40       	sbci	r25, 0x00	; 0
    144c:	e1 f7       	brne	.-8      	; 0x1446 <OLED_splashScreen+0x98>
    144e:	00 c0       	rjmp	.+0      	; 0x1450 <OLED_splashScreen+0xa2>
    1450:	00 c0       	rjmp	.+0      	; 0x1452 <OLED_splashScreen+0xa4>
	_delay_ms(500);
	
	OLED_clear();
    1452:	6c e1       	ldi	r22, 0x1C	; 28
    1454:	70 e0       	ldi	r23, 0x00	; 0
	OLED_setContrast(0);
    1456:	83 e0       	ldi	r24, 0x03	; 3
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	d7 de       	rcall	.-594    	; 0x120a <OLED_goto>
    145c:	8f ed       	ldi	r24, 0xDF	; 223
    145e:	93 e0       	ldi	r25, 0x03	; 3
    1460:	2a df       	rcall	.-428    	; 0x12b6 <OLED_printString>
    1462:	98 df       	rcall	.-208    	; 0x1394 <OLED_fadeIn>
    1464:	2f ef       	ldi	r18, 0xFF	; 255
    1466:	8f ef       	ldi	r24, 0xFF	; 255
    1468:	9e e0       	ldi	r25, 0x0E	; 14
    146a:	21 50       	subi	r18, 0x01	; 1
    146c:	80 40       	sbci	r24, 0x00	; 0
	
	_delay_ms(200);
	OLED_goto(3, 28);
    146e:	90 40       	sbci	r25, 0x00	; 0
    1470:	e1 f7       	brne	.-8      	; 0x146a <OLED_splashScreen+0xbc>
    1472:	00 c0       	rjmp	.+0      	; 0x1474 <OLED_splashScreen+0xc6>
    1474:	00 00       	nop
    1476:	80 e5       	ldi	r24, 0x50	; 80
    1478:	81 df       	rcall	.-254    	; 0x137c <OLED_setContrast>
	OLED_printString("FIFA 18");
    147a:	87 ee       	ldi	r24, 0xE7	; 231
    147c:	93 e0       	ldi	r25, 0x03	; 3
    147e:	b8 c3       	rjmp	.+1904   	; 0x1bf0 <puts>
    1480:	08 95       	ret

00001482 <OLED_flyingArrows>:
	OLED_fadeIn();
    1482:	af 92       	push	r10
    1484:	bf 92       	push	r11
    1486:	cf 92       	push	r12
    1488:	df 92       	push	r13
    148a:	ef 92       	push	r14
    148c:	ff 92       	push	r15
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	8d ef       	ldi	r24, 0xFD	; 253
	_delay_ms(1000);
	
	// clean up
	OLED_setContrast(0x50); // back to standard contrast
    1498:	93 e0       	ldi	r25, 0x03	; 3
    149a:	aa d3       	rcall	.+1876   	; 0x1bf0 <puts>
    149c:	e0 91 12 01 	lds	r30, 0x0112
	
	printf("splash screen done...\n");
    14a0:	f0 91 13 01 	lds	r31, 0x0113
    14a4:	85 ed       	ldi	r24, 0xD5	; 213
    14a6:	80 83       	st	Z, r24
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14a8:	e0 91 12 01 	lds	r30, 0x0112
{
	printf("let the arrows fly...\n");
	
	// setup fosc
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0xf0); // default value is 0x80
    14ac:	f0 91 13 01 	lds	r31, 0x0113
    14b0:	80 ef       	ldi	r24, 0xF0	; 240
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14b2:	80 83       	st	Z, r24
    14b4:	e0 91 12 01 	lds	r30, 0x0112
	// setup fosc
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0xf0); // default value is 0x80
	
	// setup scrolling
	OLED_writeByteToOLED(oled_cmd, 0x26); // set right horizontal scroll
    14b8:	f0 91 13 01 	lds	r31, 0x0113
    14bc:	86 e2       	ldi	r24, 0x26	; 38
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14be:	80 83       	st	Z, r24
    14c0:	e0 91 12 01 	lds	r30, 0x0112
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0xf0); // default value is 0x80
	
	// setup scrolling
	OLED_writeByteToOLED(oled_cmd, 0x26); // set right horizontal scroll
	OLED_writeByteToOLED(oled_cmd, 0x00); // dummy byte 0x00
    14c4:	f0 91 13 01 	lds	r31, 0x0113
    14c8:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14ca:	e0 91 12 01 	lds	r30, 0x0112
	OLED_writeByteToOLED(oled_cmd, 0xf0); // default value is 0x80
	
	// setup scrolling
	OLED_writeByteToOLED(oled_cmd, 0x26); // set right horizontal scroll
	OLED_writeByteToOLED(oled_cmd, 0x00); // dummy byte 0x00
	OLED_writeByteToOLED(oled_cmd, 0x00); // start page address
    14ce:	f0 91 13 01 	lds	r31, 0x0113
    14d2:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14d4:	e0 91 12 01 	lds	r30, 0x0112
	
	// setup scrolling
	OLED_writeByteToOLED(oled_cmd, 0x26); // set right horizontal scroll
	OLED_writeByteToOLED(oled_cmd, 0x00); // dummy byte 0x00
	OLED_writeByteToOLED(oled_cmd, 0x00); // start page address
	OLED_writeByteToOLED(oled_cmd, 0x07); // time interval between scroll steps (2 frames)
    14d8:	f0 91 13 01 	lds	r31, 0x0113
    14dc:	87 e0       	ldi	r24, 0x07	; 7
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14de:	80 83       	st	Z, r24
    14e0:	e0 91 12 01 	lds	r30, 0x0112
	// setup scrolling
	OLED_writeByteToOLED(oled_cmd, 0x26); // set right horizontal scroll
	OLED_writeByteToOLED(oled_cmd, 0x00); // dummy byte 0x00
	OLED_writeByteToOLED(oled_cmd, 0x00); // start page address
	OLED_writeByteToOLED(oled_cmd, 0x07); // time interval between scroll steps (2 frames)
	OLED_writeByteToOLED(oled_cmd, 0x07); // end page address
    14e4:	f0 91 13 01 	lds	r31, 0x0113
    14e8:	80 83       	st	Z, r24
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14ea:	e0 91 12 01 	lds	r30, 0x0112
	OLED_writeByteToOLED(oled_cmd, 0x26); // set right horizontal scroll
	OLED_writeByteToOLED(oled_cmd, 0x00); // dummy byte 0x00
	OLED_writeByteToOLED(oled_cmd, 0x00); // start page address
	OLED_writeByteToOLED(oled_cmd, 0x07); // time interval between scroll steps (2 frames)
	OLED_writeByteToOLED(oled_cmd, 0x07); // end page address
	OLED_writeByteToOLED(oled_cmd, 0x00); // dummy byte 0x00
    14ee:	f0 91 13 01 	lds	r31, 0x0113
    14f2:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14f4:	e0 91 12 01 	lds	r30, 0x0112
	OLED_writeByteToOLED(oled_cmd, 0x00); // dummy byte 0x00
	OLED_writeByteToOLED(oled_cmd, 0x00); // start page address
	OLED_writeByteToOLED(oled_cmd, 0x07); // time interval between scroll steps (2 frames)
	OLED_writeByteToOLED(oled_cmd, 0x07); // end page address
	OLED_writeByteToOLED(oled_cmd, 0x00); // dummy byte 0x00
	OLED_writeByteToOLED(oled_cmd, 0xff); // dummy byte 0xff
    14f8:	f0 91 13 01 	lds	r31, 0x0113
    14fc:	8f ef       	ldi	r24, 0xFF	; 255
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14fe:	80 83       	st	Z, r24
    1500:	0f 2e       	mov	r0, r31
    1502:	f9 e0       	ldi	r31, 0x09	; 9
    1504:	ef 2e       	mov	r14, r31
    1506:	f0 2d       	mov	r31, r0
    1508:	aa 24       	eor	r10, r10
	
	printf("splash screen done...\n");
}

void OLED_flyingArrows()
{
    150a:	a3 94       	inc	r10
    150c:	b1 2c       	mov	r11, r1
    150e:	f1 2c       	mov	r15, r1
	OLED_writeByteToOLED(oled_cmd, 0x00); // dummy byte 0x00
	OLED_writeByteToOLED(oled_cmd, 0xff); // dummy byte 0xff
	
	for(uint8_t i = 0; i < 9; i++)
	{
		for(uint8_t count_row = 0; count_row < height; count_row++)
    1510:	00 e0       	ldi	r16, 0x00	; 0
    1512:	15 e7       	ldi	r17, 0x75	; 117
		{
			OLED_goto(count_row,117); // move to first column in row
			
			// the inner loop iterates the columns of each row
			for(uint8_t count_column = 117; count_column < width; count_column++)
    1514:	0f 2e       	mov	r0, r31
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1516:	ff e2       	ldi	r31, 0x2F	; 47
    1518:	cf 2e       	mov	r12, r31
    151a:	f0 2d       	mov	r31, r0
    151c:	0f 2e       	mov	r0, r31
    151e:	fe e2       	ldi	r31, 0x2E	; 46
    1520:	df 2e       	mov	r13, r31
    1522:	f0 2d       	mov	r31, r0
    1524:	7a c0       	rjmp	.+244    	; 0x161a <OLED_flyingArrows+0x198>
    1526:	65 e7       	ldi	r22, 0x75	; 117
	
	for(uint8_t i = 0; i < 9; i++)
	{
		for(uint8_t count_row = 0; count_row < height; count_row++)
		{
			OLED_goto(count_row,117); // move to first column in row
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	6f de       	rcall	.-802    	; 0x120a <OLED_goto>
    152c:	81 2f       	mov	r24, r17
    152e:	e0 91 10 01 	lds	r30, 0x0110
			
			// the inner loop iterates the columns of each row
			for(uint8_t count_column = 117; count_column < width; count_column++)
			{
				OLED_writeByteToOLED(oled_data, 0x00);
    1532:	f0 91 11 01 	lds	r31, 0x0111
    1536:	10 82       	st	Z, r1
    1538:	8f 5f       	subi	r24, 0xFF	; 255
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    153a:	80 38       	cpi	r24, 0x80	; 128
		for(uint8_t count_row = 0; count_row < height; count_row++)
		{
			OLED_goto(count_row,117); // move to first column in row
			
			// the inner loop iterates the columns of each row
			for(uint8_t count_column = 117; count_column < width; count_column++)
    153c:	c1 f7       	brne	.-16     	; 0x152e <OLED_flyingArrows+0xac>
    153e:	8c 2f       	mov	r24, r28
    1540:	9d 2f       	mov	r25, r29
	OLED_writeByteToOLED(oled_cmd, 0x00); // dummy byte 0x00
	OLED_writeByteToOLED(oled_cmd, 0xff); // dummy byte 0xff
	
	for(uint8_t i = 0; i < 9; i++)
	{
		for(uint8_t count_row = 0; count_row < height; count_row++)
    1542:	21 96       	adiw	r28, 0x01	; 1
    1544:	c9 30       	cpi	r28, 0x09	; 9
    1546:	d1 05       	cpc	r29, r1
    1548:	71 f7       	brne	.-36     	; 0x1526 <OLED_flyingArrows+0xa4>
    154a:	6f 2d       	mov	r22, r15
    154c:	70 2f       	mov	r23, r16
			{
				OLED_writeByteToOLED(oled_data, 0x00);
			}
		}
		
		OLED_goto(0,0);
    154e:	8f 2d       	mov	r24, r15
    1550:	90 2f       	mov	r25, r16
    1552:	5b de       	rcall	.-842    	; 0x120a <OLED_goto>
    1554:	cc de       	rcall	.-616    	; 0x12ee <OLED_printArrow>
    1556:	6f 2d       	mov	r22, r15
    1558:	70 2f       	mov	r23, r16
		OLED_printArrow();
    155a:	82 e0       	ldi	r24, 0x02	; 2
    155c:	90 e0       	ldi	r25, 0x00	; 0
		OLED_goto(2,0);
    155e:	55 de       	rcall	.-854    	; 0x120a <OLED_goto>
    1560:	c6 de       	rcall	.-628    	; 0x12ee <OLED_printArrow>
    1562:	6f 2d       	mov	r22, r15
    1564:	70 2f       	mov	r23, r16
    1566:	84 e0       	ldi	r24, 0x04	; 4
    1568:	90 e0       	ldi	r25, 0x00	; 0
		OLED_printArrow();
    156a:	4f de       	rcall	.-866    	; 0x120a <OLED_goto>
    156c:	c0 de       	rcall	.-640    	; 0x12ee <OLED_printArrow>
		OLED_goto(4,0);
    156e:	6f 2d       	mov	r22, r15
    1570:	70 2f       	mov	r23, r16
    1572:	86 e0       	ldi	r24, 0x06	; 6
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	49 de       	rcall	.-878    	; 0x120a <OLED_goto>
    1578:	ba de       	rcall	.-652    	; 0x12ee <OLED_printArrow>
		OLED_printArrow();
    157a:	e0 91 12 01 	lds	r30, 0x0112
		OLED_goto(6,0);
    157e:	f0 91 13 01 	lds	r31, 0x0113
    1582:	c0 82       	st	Z, r12
    1584:	2f ef       	ldi	r18, 0xFF	; 255
    1586:	8f e1       	ldi	r24, 0x1F	; 31
    1588:	91 e0       	ldi	r25, 0x01	; 1
		OLED_printArrow();
    158a:	21 50       	subi	r18, 0x01	; 1
    158c:	80 40       	sbci	r24, 0x00	; 0
	
 		OLED_writeByteToOLED(oled_cmd, 0x2f); // activate scrolling 
    158e:	90 40       	sbci	r25, 0x00	; 0
    1590:	e1 f7       	brne	.-8      	; 0x158a <OLED_flyingArrows+0x108>
    1592:	00 c0       	rjmp	.+0      	; 0x1594 <OLED_flyingArrows+0x112>
    1594:	00 00       	nop
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1596:	e0 91 12 01 	lds	r30, 0x0112
    159a:	f0 91 13 01 	lds	r31, 0x0113
    159e:	d0 82       	st	Z, r13
    15a0:	6f 2d       	mov	r22, r15
    15a2:	70 2f       	mov	r23, r16
    15a4:	8a 2d       	mov	r24, r10
    15a6:	9b 2d       	mov	r25, r11
    15a8:	30 de       	rcall	.-928    	; 0x120a <OLED_goto>
		OLED_goto(6,0);
		OLED_printArrow();
	
 		OLED_writeByteToOLED(oled_cmd, 0x2f); // activate scrolling 
 		_delay_ms(75);
 		OLED_writeByteToOLED(oled_cmd, 0x2e); // deactivate scrolling 
    15aa:	a1 de       	rcall	.-702    	; 0x12ee <OLED_printArrow>
    15ac:	6f 2d       	mov	r22, r15
    15ae:	70 2f       	mov	r23, r16
    15b0:	83 e0       	ldi	r24, 0x03	; 3
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15b2:	90 e0       	ldi	r25, 0x00	; 0
	
 		OLED_writeByteToOLED(oled_cmd, 0x2f); // activate scrolling 
 		_delay_ms(75);
 		OLED_writeByteToOLED(oled_cmd, 0x2e); // deactivate scrolling 
 	
 		OLED_goto(1,0);
    15b4:	2a de       	rcall	.-940    	; 0x120a <OLED_goto>
    15b6:	9b de       	rcall	.-714    	; 0x12ee <OLED_printArrow>
    15b8:	6f 2d       	mov	r22, r15
    15ba:	70 2f       	mov	r23, r16
    15bc:	85 e0       	ldi	r24, 0x05	; 5
    15be:	90 e0       	ldi	r25, 0x00	; 0
 		OLED_printArrow();
    15c0:	24 de       	rcall	.-952    	; 0x120a <OLED_goto>
    15c2:	95 de       	rcall	.-726    	; 0x12ee <OLED_printArrow>
 		OLED_goto(3,0);
    15c4:	6f 2d       	mov	r22, r15
    15c6:	70 2f       	mov	r23, r16
    15c8:	87 e0       	ldi	r24, 0x07	; 7
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	1e de       	rcall	.-964    	; 0x120a <OLED_goto>
    15ce:	8f de       	rcall	.-738    	; 0x12ee <OLED_printArrow>
 		OLED_printArrow();
    15d0:	e0 91 12 01 	lds	r30, 0x0112
 		OLED_goto(5,0);
    15d4:	f0 91 13 01 	lds	r31, 0x0113
    15d8:	c0 82       	st	Z, r12
    15da:	2f ef       	ldi	r18, 0xFF	; 255
    15dc:	8f e1       	ldi	r24, 0x1F	; 31
    15de:	91 e0       	ldi	r25, 0x01	; 1
 		OLED_printArrow();
    15e0:	21 50       	subi	r18, 0x01	; 1
    15e2:	80 40       	sbci	r24, 0x00	; 0
 		OLED_goto(7,0);
    15e4:	90 40       	sbci	r25, 0x00	; 0
    15e6:	e1 f7       	brne	.-8      	; 0x15e0 <OLED_flyingArrows+0x15e>
    15e8:	00 c0       	rjmp	.+0      	; 0x15ea <OLED_flyingArrows+0x168>
    15ea:	00 00       	nop
    15ec:	e0 91 12 01 	lds	r30, 0x0112
 		OLED_printArrow();
    15f0:	f0 91 13 01 	lds	r31, 0x0113
 	
 		OLED_writeByteToOLED(oled_cmd, 0x2f); // activate scrolling
    15f4:	d0 82       	st	Z, r13
    15f6:	ea 94       	dec	r14
    15f8:	81 f4       	brne	.+32     	; 0x161a <OLED_flyingArrows+0x198>
    15fa:	02 e1       	ldi	r16, 0x12	; 18
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15fc:	aa 24       	eor	r10, r10
    15fe:	a3 94       	inc	r10
    1600:	b1 2c       	mov	r11, r1
    1602:	c1 2c       	mov	r12, r1
    1604:	d1 2c       	mov	r13, r1
    1606:	1a e7       	ldi	r17, 0x7A	; 122
    1608:	0f 2e       	mov	r0, r31
    160a:	ff e2       	ldi	r31, 0x2F	; 47
    160c:	ef 2e       	mov	r14, r31
    160e:	f0 2d       	mov	r31, r0
 		OLED_goto(7,0);
 		OLED_printArrow();
 	
 		OLED_writeByteToOLED(oled_cmd, 0x2f); // activate scrolling
 		_delay_ms(75);
 		OLED_writeByteToOLED(oled_cmd, 0x2e); // deactivate scrolling
    1610:	0f 2e       	mov	r0, r31
    1612:	fe e2       	ldi	r31, 0x2E	; 46
    1614:	ff 2e       	mov	r15, r31
    1616:	f0 2d       	mov	r31, r0
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1618:	2c c0       	rjmp	.+88     	; 0x1672 <OLED_flyingArrows+0x1f0>
    161a:	ca 2d       	mov	r28, r10
	OLED_writeByteToOLED(oled_cmd, 0x07); // time interval between scroll steps (2 frames)
	OLED_writeByteToOLED(oled_cmd, 0x07); // end page address
	OLED_writeByteToOLED(oled_cmd, 0x00); // dummy byte 0x00
	OLED_writeByteToOLED(oled_cmd, 0xff); // dummy byte 0xff
	
	for(uint8_t i = 0; i < 9; i++)
    161c:	db 2d       	mov	r29, r11
    161e:	8f 2d       	mov	r24, r15
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1620:	90 2f       	mov	r25, r16
    1622:	81 cf       	rjmp	.-254    	; 0x1526 <OLED_flyingArrows+0xa4>
    1624:	6a e7       	ldi	r22, 0x7A	; 122
 		OLED_writeByteToOLED(oled_cmd, 0x2e); // deactivate scrolling
	}
	
  	for(uint8_t i = 0; i < 18; i++)
  	{
  		for(uint8_t count_row = 0; count_row < height; count_row++)
    1626:	70 e0       	ldi	r23, 0x00	; 0
    1628:	f0 dd       	rcall	.-1056   	; 0x120a <OLED_goto>
  		{
  			OLED_goto(count_row,122); // move to first column in row
  
  			// the inner loop iterates the columns of each row
  			for(uint8_t count_column = 122; count_column < width; count_column++)
    162a:	81 2f       	mov	r24, r17
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    162c:	e0 91 10 01 	lds	r30, 0x0110
    1630:	f0 91 11 01 	lds	r31, 0x0111
    1634:	10 82       	st	Z, r1
    1636:	8f 5f       	subi	r24, 0xFF	; 255
    1638:	80 38       	cpi	r24, 0x80	; 128
    163a:	c1 f7       	brne	.-16     	; 0x162c <OLED_flyingArrows+0x1aa>
    163c:	8c 2f       	mov	r24, r28
	
	printf("splash screen done...\n");
}

void OLED_flyingArrows()
{
    163e:	9d 2f       	mov	r25, r29
    1640:	21 96       	adiw	r28, 0x01	; 1
	OLED_writeByteToOLED(oled_cmd, 0x00); // dummy byte 0x00
	OLED_writeByteToOLED(oled_cmd, 0xff); // dummy byte 0xff
	
	for(uint8_t i = 0; i < 9; i++)
	{
		for(uint8_t count_row = 0; count_row < height; count_row++)
    1642:	c9 30       	cpi	r28, 0x09	; 9
    1644:	d1 05       	cpc	r29, r1
    1646:	71 f7       	brne	.-36     	; 0x1624 <OLED_flyingArrows+0x1a2>
	
  	for(uint8_t i = 0; i < 18; i++)
  	{
  		for(uint8_t count_row = 0; count_row < height; count_row++)
  		{
  			OLED_goto(count_row,122); // move to first column in row
    1648:	e0 91 12 01 	lds	r30, 0x0112
    164c:	f0 91 13 01 	lds	r31, 0x0113
  
  			// the inner loop iterates the columns of each row
  			for(uint8_t count_column = 122; count_column < width; count_column++)
    1650:	e0 82       	st	Z, r14
  			{
  				OLED_writeByteToOLED(oled_data, 0x00);
    1652:	9f ef       	ldi	r25, 0xFF	; 255
    1654:	2f e1       	ldi	r18, 0x1F	; 31
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	91 50       	subi	r25, 0x01	; 1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    165a:	20 40       	sbci	r18, 0x00	; 0
  		for(uint8_t count_row = 0; count_row < height; count_row++)
  		{
  			OLED_goto(count_row,122); // move to first column in row
  
  			// the inner loop iterates the columns of each row
  			for(uint8_t count_column = 122; count_column < width; count_column++)
    165c:	80 40       	sbci	r24, 0x00	; 0
    165e:	e1 f7       	brne	.-8      	; 0x1658 <OLED_flyingArrows+0x1d6>
    1660:	00 c0       	rjmp	.+0      	; 0x1662 <OLED_flyingArrows+0x1e0>
 		OLED_writeByteToOLED(oled_cmd, 0x2e); // deactivate scrolling
	}
	
  	for(uint8_t i = 0; i < 18; i++)
  	{
  		for(uint8_t count_row = 0; count_row < height; count_row++)
    1662:	00 00       	nop
    1664:	e0 91 12 01 	lds	r30, 0x0112
    1668:	f0 91 13 01 	lds	r31, 0x0113
    166c:	f0 82       	st	Z, r15
  			for(uint8_t count_column = 122; count_column < width; count_column++)
  			{
  				OLED_writeByteToOLED(oled_data, 0x00);
  			}
  		}
  		OLED_writeByteToOLED(oled_cmd, 0x2f); // activate scrolling
    166e:	01 50       	subi	r16, 0x01	; 1
    1670:	29 f0       	breq	.+10     	; 0x167c <OLED_flyingArrows+0x1fa>
    1672:	ca 2d       	mov	r28, r10
    1674:	db 2d       	mov	r29, r11
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1676:	8c 2d       	mov	r24, r12
    1678:	9d 2d       	mov	r25, r13
    167a:	d4 cf       	rjmp	.-88     	; 0x1624 <OLED_flyingArrows+0x1a2>
    167c:	83 e1       	ldi	r24, 0x13	; 19
    167e:	94 e0       	ldi	r25, 0x04	; 4
    1680:	b7 d2       	rcall	.+1390   	; 0x1bf0 <puts>
    1682:	e0 dd       	rcall	.-1088   	; 0x1244 <OLED_clear>
    1684:	e0 91 12 01 	lds	r30, 0x0112
    1688:	f0 91 13 01 	lds	r31, 0x0113
  				OLED_writeByteToOLED(oled_data, 0x00);
  			}
  		}
  		OLED_writeByteToOLED(oled_cmd, 0x2f); // activate scrolling
  		_delay_ms(75);
  		OLED_writeByteToOLED(oled_cmd, 0x2e); // deactivate scrolling
    168c:	85 ed       	ldi	r24, 0xD5	; 213
    168e:	80 83       	st	Z, r24
    1690:	e0 91 12 01 	lds	r30, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1694:	f0 91 13 01 	lds	r31, 0x0113
    1698:	80 e8       	ldi	r24, 0x80	; 128
    169a:	80 83       	st	Z, r24
 		OLED_writeByteToOLED(oled_cmd, 0x2e); // deactivate scrolling
	}
	
  	for(uint8_t i = 0; i < 18; i++)
  	{
  		for(uint8_t count_row = 0; count_row < height; count_row++)
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
  		OLED_writeByteToOLED(oled_cmd, 0x2f); // activate scrolling
  		_delay_ms(75);
  		OLED_writeByteToOLED(oled_cmd, 0x2e); // deactivate scrolling
  	}

	printf("arrows are done...\n");
    16a2:	0f 91       	pop	r16
    16a4:	ff 90       	pop	r15
    16a6:	ef 90       	pop	r14
    16a8:	df 90       	pop	r13
	OLED_clear();
    16aa:	cf 90       	pop	r12
    16ac:	bf 90       	pop	r11
	
	// reset fosc
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    16ae:	af 90       	pop	r10
    16b0:	08 95       	ret

000016b2 <OLED_init>:
    16b2:	e0 91 12 01 	lds	r30, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16b6:	f0 91 13 01 	lds	r31, 0x0113
	printf("arrows are done...\n");
	OLED_clear();
	
	// reset fosc
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
    16ba:	8e ea       	ldi	r24, 0xAE	; 174
    16bc:	80 83       	st	Z, r24
    16be:	e0 91 12 01 	lds	r30, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16c2:	f0 91 13 01 	lds	r31, 0x0113
	OLED_clear();
	
	// reset fosc
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
    16c6:	81 ea       	ldi	r24, 0xA1	; 161
    16c8:	80 83       	st	Z, r24
    16ca:	e0 91 12 01 	lds	r30, 0x0112
    16ce:	f0 91 13 01 	lds	r31, 0x0113
    16d2:	8a ed       	ldi	r24, 0xDA	; 218
    16d4:	80 83       	st	Z, r24
    16d6:	e0 91 12 01 	lds	r30, 0x0112
    16da:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16de:	82 e1       	ldi	r24, 0x12	; 18
    16e0:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    16e2:	e0 91 12 01 	lds	r30, 0x0112
    16e6:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16ea:	88 ec       	ldi	r24, 0xC8	; 200
    16ec:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    16ee:	e0 91 12 01 	lds	r30, 0x0112
    16f2:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16f6:	88 ea       	ldi	r24, 0xA8	; 168
    16f8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    16fa:	e0 91 12 01 	lds	r30, 0x0112
    16fe:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1702:	8f e3       	ldi	r24, 0x3F	; 63
    1704:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    1706:	e0 91 12 01 	lds	r30, 0x0112
    170a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    170e:	85 ed       	ldi	r24, 0xD5	; 213
    1710:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
    1712:	e0 91 12 01 	lds	r30, 0x0112
    1716:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    171a:	80 e8       	ldi	r24, 0x80	; 128
    171c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    171e:	e0 91 12 01 	lds	r30, 0x0112
    1722:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1726:	81 e8       	ldi	r24, 0x81	; 129
    1728:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    172a:	e0 91 12 01 	lds	r30, 0x0112
    172e:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1732:	80 e5       	ldi	r24, 0x50	; 80
    1734:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    1736:	e0 91 12 01 	lds	r30, 0x0112
    173a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    173e:	89 ed       	ldi	r24, 0xD9	; 217
    1740:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
    1742:	e0 91 12 01 	lds	r30, 0x0112
    1746:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    174a:	81 e2       	ldi	r24, 0x21	; 33
    174c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    174e:	e0 91 12 01 	lds	r30, 0x0112
    1752:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1756:	80 e2       	ldi	r24, 0x20	; 32
    1758:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    175a:	e0 91 12 01 	lds	r30, 0x0112
    175e:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1762:	82 e0       	ldi	r24, 0x02	; 2
    1764:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    1766:	e0 91 12 01 	lds	r30, 0x0112
    176a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    176e:	8b ed       	ldi	r24, 0xDB	; 219
    1770:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    1772:	e0 91 12 01 	lds	r30, 0x0112
    1776:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    177a:	80 e3       	ldi	r24, 0x30	; 48
    177c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    177e:	e0 91 12 01 	lds	r30, 0x0112
    1782:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1786:	8d ea       	ldi	r24, 0xAD	; 173
    1788:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    178a:	e0 91 12 01 	lds	r30, 0x0112
    178e:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1792:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    1794:	e0 91 12 01 	lds	r30, 0x0112
    1798:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    179c:	84 ea       	ldi	r24, 0xA4	; 164
    179e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    17a0:	e0 91 12 01 	lds	r30, 0x0112
    17a4:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    17a8:	86 ea       	ldi	r24, 0xA6	; 166
    17aa:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    17ac:	e0 91 12 01 	lds	r30, 0x0112
    17b0:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    17b4:	8f ea       	ldi	r24, 0xAF	; 175
    17b6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    17b8:	45 dd       	rcall	.-1398   	; 0x1244 <OLED_clear>
    17ba:	f9 dd       	rcall	.-1038   	; 0x13ae <OLED_splashScreen>
	OLED_splashScreen();
    17bc:	62 ce       	rjmp	.-828    	; 0x1482 <OLED_flyingArrows>
    17be:	08 95       	ret

000017c0 <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    17c0:	10 92 57 04 	sts	0x0457, r1
	currentSliPosition.L_abs = 0;
    17c4:	10 92 58 04 	sts	0x0458, r1
	currentSliPosition.R_per = 0;
    17c8:	10 92 59 04 	sts	0x0459, r1
	currentSliPosition.L_per = 0;
    17cc:	10 92 5a 04 	sts	0x045A, r1
    17d0:	08 95       	ret

000017d2 <SPI_init>:


void SPI_init()
{
	// Set _SS, MOSI and SCK output, all others input
	DDR_SPI = (1<<SS_CAN_CONTROLLER_PIN_MODE) | (1<<MOSI_PIN) | (1<<SCK_PIN);
    17d2:	80 eb       	ldi	r24, 0xB0	; 176
    17d4:	87 bb       	out	0x17, r24	; 23

	// Enable SPI, Master, set clock rate fck/4
	SPCR = (1<<SPE) | (1<<MSTR);
    17d6:	80 e5       	ldi	r24, 0x50	; 80
    17d8:	8d b9       	out	0x0d, r24	; 13

	// clock rate fck/2
	SPSR = (1<<SPI2X);
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	8e b9       	out	0x0e, r24	; 14

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORT_SPI, SS_CAN_CONTROLLER_PIN);
    17de:	c4 9a       	sbi	0x18, 4	; 24
    17e0:	08 95       	ret

000017e2 <SPI_send>:
}

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    17e2:	8f b9       	out	0x0f, r24	; 15

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    17e4:	77 9b       	sbis	0x0e, 7	; 14
    17e6:	fe cf       	rjmp	.-4      	; 0x17e4 <SPI_send+0x2>
}
    17e8:	08 95       	ret

000017ea <SPI_receive>:

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    17ea:	8f ef       	ldi	r24, 0xFF	; 255
    17ec:	fa df       	rcall	.-12     	; 0x17e2 <SPI_send>
    17ee:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    17f0:	fe cf       	rjmp	.-4      	; 0x17ee <SPI_receive+0x4>
    17f2:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    17f4:	08 95       	ret

000017f6 <SPI_activateSlave>:

	return data;
}
    17f6:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    17f8:	01 c0       	rjmp	.+2      	; 0x17fc <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    17fa:	c4 98       	cbi	0x18, 4	; 24
    17fc:	08 95       	ret

000017fe <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    17fe:	81 11       	cpse	r24, r1
    1800:	01 c0       	rjmp	.+2      	; 0x1804 <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    1802:	c4 9a       	sbi	0x18, 4	; 24
    1804:	08 95       	ret

00001806 <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1806:	5d 9b       	sbis	0x0b, 5	; 11
    1808:	fe cf       	rjmp	.-4      	; 0x1806 <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    180a:	8c b9       	out	0x0c, r24	; 12
    180c:	08 95       	ret

0000180e <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    180e:	5f 9b       	sbis	0x0b, 7	; 11
    1810:	fe cf       	rjmp	.-4      	; 0x180e <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    1812:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
    1814:	08 95       	ret

00001816 <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    1816:	ef 92       	push	r14
    1818:	ff 92       	push	r15
    181a:	0f 93       	push	r16
    181c:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    181e:	bb 27       	eor	r27, r27
    1820:	a1 2f       	mov	r26, r17
    1822:	90 2f       	mov	r25, r16
    1824:	8f 2d       	mov	r24, r15
    1826:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    1828:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    182a:	88 e1       	ldi	r24, 0x18	; 24
    182c:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    182e:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    1830:	8e e8       	ldi	r24, 0x8E	; 142
    1832:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    1834:	67 e0       	ldi	r22, 0x07	; 7
    1836:	7c e0       	ldi	r23, 0x0C	; 12
    1838:	83 e0       	ldi	r24, 0x03	; 3
    183a:	9c e0       	ldi	r25, 0x0C	; 12
    183c:	79 d1       	rcall	.+754    	; 0x1b30 <fdevopen>
    183e:	1f 91       	pop	r17
    1840:	0f 91       	pop	r16
    1842:	ff 90       	pop	r15
    1844:	ef 90       	pop	r14
    1846:	08 95       	ret

00001848 <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    1848:	9b 01       	movw	r18, r22
	
	switch(channel){
    184a:	82 30       	cpi	r24, 0x02	; 2
    184c:	69 f0       	breq	.+26     	; 0x1868 <ADC_request+0x20>
    184e:	18 f4       	brcc	.+6      	; 0x1856 <ADC_request+0xe>
    1850:	81 30       	cpi	r24, 0x01	; 1
    1852:	31 f0       	breq	.+12     	; 0x1860 <ADC_request+0x18>
    1854:	15 c0       	rjmp	.+42     	; 0x1880 <ADC_request+0x38>
    1856:	83 30       	cpi	r24, 0x03	; 3
    1858:	59 f0       	breq	.+22     	; 0x1870 <ADC_request+0x28>
    185a:	84 30       	cpi	r24, 0x04	; 4
    185c:	69 f0       	breq	.+26     	; 0x1878 <ADC_request+0x30>
    185e:	10 c0       	rjmp	.+32     	; 0x1880 <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    1860:	64 e0       	ldi	r22, 0x04	; 4
    1862:	c9 01       	movw	r24, r18
    1864:	49 c8       	rjmp	.-3950   	; 0x8f8 <saveToAddress>
    1866:	08 95       	ret
			break;
    1868:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    186a:	c9 01       	movw	r24, r18
    186c:	45 c8       	rjmp	.-3958   	; 0x8f8 <saveToAddress>
    186e:	08 95       	ret
    1870:	66 e0       	ldi	r22, 0x06	; 6
			break;
    1872:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    1874:	41 c8       	rjmp	.-3966   	; 0x8f8 <saveToAddress>
    1876:	08 95       	ret
    1878:	67 e0       	ldi	r22, 0x07	; 7
    187a:	c9 01       	movw	r24, r18
			break;
    187c:	3d c8       	rjmp	.-3974   	; 0x8f8 <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    187e:	08 95       	ret
    1880:	86 e2       	ldi	r24, 0x26	; 38
    1882:	94 e0       	ldi	r25, 0x04	; 4
    1884:	9f 93       	push	r25
			break;
    1886:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    1888:	9d d1       	rcall	.+826    	; 0x1bc4 <printf>
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	08 95       	ret

00001890 <ADC_read>:
    1890:	30 c8       	rjmp	.-4000   	; 0x8f2 <readFromAddress>
    1892:	08 95       	ret

00001894 <__divmodhi4>:
			break;
    1894:	97 fb       	bst	r25, 7
    1896:	07 2e       	mov	r0, r23
    1898:	16 f4       	brtc	.+4      	; 0x189e <__divmodhi4+0xa>
    189a:	00 94       	com	r0
    189c:	06 d0       	rcall	.+12     	; 0x18aa <__divmodhi4_neg1>
    189e:	77 fd       	sbrc	r23, 7
    18a0:	08 d0       	rcall	.+16     	; 0x18b2 <__divmodhi4_neg2>
    18a2:	0b d0       	rcall	.+22     	; 0x18ba <__udivmodhi4>
    18a4:	07 fc       	sbrc	r0, 7
    18a6:	05 d0       	rcall	.+10     	; 0x18b2 <__divmodhi4_neg2>
    18a8:	3e f4       	brtc	.+14     	; 0x18b8 <__divmodhi4_exit>

000018aa <__divmodhi4_neg1>:
    18aa:	90 95       	com	r25
    18ac:	81 95       	neg	r24
    18ae:	9f 4f       	sbci	r25, 0xFF	; 255
    18b0:	08 95       	ret

000018b2 <__divmodhi4_neg2>:
    18b2:	70 95       	com	r23
    18b4:	61 95       	neg	r22
    18b6:	7f 4f       	sbci	r23, 0xFF	; 255

000018b8 <__divmodhi4_exit>:
    18b8:	08 95       	ret

000018ba <__udivmodhi4>:
    18ba:	aa 1b       	sub	r26, r26
    18bc:	bb 1b       	sub	r27, r27
    18be:	51 e1       	ldi	r21, 0x11	; 17
    18c0:	07 c0       	rjmp	.+14     	; 0x18d0 <__udivmodhi4_ep>

000018c2 <__udivmodhi4_loop>:
    18c2:	aa 1f       	adc	r26, r26
    18c4:	bb 1f       	adc	r27, r27
    18c6:	a6 17       	cp	r26, r22
    18c8:	b7 07       	cpc	r27, r23
    18ca:	10 f0       	brcs	.+4      	; 0x18d0 <__udivmodhi4_ep>
    18cc:	a6 1b       	sub	r26, r22
    18ce:	b7 0b       	sbc	r27, r23

000018d0 <__udivmodhi4_ep>:
    18d0:	88 1f       	adc	r24, r24
    18d2:	99 1f       	adc	r25, r25
    18d4:	5a 95       	dec	r21
    18d6:	a9 f7       	brne	.-22     	; 0x18c2 <__udivmodhi4_loop>
    18d8:	80 95       	com	r24
    18da:	90 95       	com	r25
    18dc:	bc 01       	movw	r22, r24
    18de:	cd 01       	movw	r24, r26
    18e0:	08 95       	ret

000018e2 <malloc>:
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	82 30       	cpi	r24, 0x02	; 2
    18e8:	91 05       	cpc	r25, r1
    18ea:	10 f4       	brcc	.+4      	; 0x18f0 <malloc+0xe>
    18ec:	82 e0       	ldi	r24, 0x02	; 2
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	e0 91 5d 04 	lds	r30, 0x045D
    18f4:	f0 91 5e 04 	lds	r31, 0x045E
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	a0 e0       	ldi	r26, 0x00	; 0
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	30 97       	sbiw	r30, 0x00	; 0
    1902:	39 f1       	breq	.+78     	; 0x1952 <malloc+0x70>
    1904:	40 81       	ld	r20, Z
    1906:	51 81       	ldd	r21, Z+1	; 0x01
    1908:	48 17       	cp	r20, r24
    190a:	59 07       	cpc	r21, r25
    190c:	b8 f0       	brcs	.+46     	; 0x193c <malloc+0x5a>
    190e:	48 17       	cp	r20, r24
    1910:	59 07       	cpc	r21, r25
    1912:	71 f4       	brne	.+28     	; 0x1930 <malloc+0x4e>
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	10 97       	sbiw	r26, 0x00	; 0
    191a:	29 f0       	breq	.+10     	; 0x1926 <malloc+0x44>
    191c:	13 96       	adiw	r26, 0x03	; 3
    191e:	9c 93       	st	X, r25
    1920:	8e 93       	st	-X, r24
    1922:	12 97       	sbiw	r26, 0x02	; 2
    1924:	2c c0       	rjmp	.+88     	; 0x197e <malloc+0x9c>
    1926:	90 93 5e 04 	sts	0x045E, r25
    192a:	80 93 5d 04 	sts	0x045D, r24
    192e:	27 c0       	rjmp	.+78     	; 0x197e <malloc+0x9c>
    1930:	21 15       	cp	r18, r1
    1932:	31 05       	cpc	r19, r1
    1934:	31 f0       	breq	.+12     	; 0x1942 <malloc+0x60>
    1936:	42 17       	cp	r20, r18
    1938:	53 07       	cpc	r21, r19
    193a:	18 f0       	brcs	.+6      	; 0x1942 <malloc+0x60>
    193c:	a9 01       	movw	r20, r18
    193e:	db 01       	movw	r26, r22
    1940:	01 c0       	rjmp	.+2      	; 0x1944 <malloc+0x62>
    1942:	ef 01       	movw	r28, r30
    1944:	9a 01       	movw	r18, r20
    1946:	bd 01       	movw	r22, r26
    1948:	df 01       	movw	r26, r30
    194a:	02 80       	ldd	r0, Z+2	; 0x02
    194c:	f3 81       	ldd	r31, Z+3	; 0x03
    194e:	e0 2d       	mov	r30, r0
    1950:	d7 cf       	rjmp	.-82     	; 0x1900 <malloc+0x1e>
    1952:	21 15       	cp	r18, r1
    1954:	31 05       	cpc	r19, r1
    1956:	f9 f0       	breq	.+62     	; 0x1996 <malloc+0xb4>
    1958:	28 1b       	sub	r18, r24
    195a:	39 0b       	sbc	r19, r25
    195c:	24 30       	cpi	r18, 0x04	; 4
    195e:	31 05       	cpc	r19, r1
    1960:	80 f4       	brcc	.+32     	; 0x1982 <malloc+0xa0>
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	9b 81       	ldd	r25, Y+3	; 0x03
    1966:	61 15       	cp	r22, r1
    1968:	71 05       	cpc	r23, r1
    196a:	21 f0       	breq	.+8      	; 0x1974 <malloc+0x92>
    196c:	fb 01       	movw	r30, r22
    196e:	93 83       	std	Z+3, r25	; 0x03
    1970:	82 83       	std	Z+2, r24	; 0x02
    1972:	04 c0       	rjmp	.+8      	; 0x197c <malloc+0x9a>
    1974:	90 93 5e 04 	sts	0x045E, r25
    1978:	80 93 5d 04 	sts	0x045D, r24
    197c:	fe 01       	movw	r30, r28
    197e:	32 96       	adiw	r30, 0x02	; 2
    1980:	44 c0       	rjmp	.+136    	; 0x1a0a <malloc+0x128>
    1982:	fe 01       	movw	r30, r28
    1984:	e2 0f       	add	r30, r18
    1986:	f3 1f       	adc	r31, r19
    1988:	81 93       	st	Z+, r24
    198a:	91 93       	st	Z+, r25
    198c:	22 50       	subi	r18, 0x02	; 2
    198e:	31 09       	sbc	r19, r1
    1990:	39 83       	std	Y+1, r19	; 0x01
    1992:	28 83       	st	Y, r18
    1994:	3a c0       	rjmp	.+116    	; 0x1a0a <malloc+0x128>
    1996:	20 91 5b 04 	lds	r18, 0x045B
    199a:	30 91 5c 04 	lds	r19, 0x045C
    199e:	23 2b       	or	r18, r19
    19a0:	41 f4       	brne	.+16     	; 0x19b2 <malloc+0xd0>
    19a2:	20 91 02 01 	lds	r18, 0x0102
    19a6:	30 91 03 01 	lds	r19, 0x0103
    19aa:	30 93 5c 04 	sts	0x045C, r19
    19ae:	20 93 5b 04 	sts	0x045B, r18
    19b2:	20 91 00 01 	lds	r18, 0x0100
    19b6:	30 91 01 01 	lds	r19, 0x0101
    19ba:	21 15       	cp	r18, r1
    19bc:	31 05       	cpc	r19, r1
    19be:	41 f4       	brne	.+16     	; 0x19d0 <malloc+0xee>
    19c0:	2d b7       	in	r18, 0x3d	; 61
    19c2:	3e b7       	in	r19, 0x3e	; 62
    19c4:	40 91 04 01 	lds	r20, 0x0104
    19c8:	50 91 05 01 	lds	r21, 0x0105
    19cc:	24 1b       	sub	r18, r20
    19ce:	35 0b       	sbc	r19, r21
    19d0:	e0 91 5b 04 	lds	r30, 0x045B
    19d4:	f0 91 5c 04 	lds	r31, 0x045C
    19d8:	e2 17       	cp	r30, r18
    19da:	f3 07       	cpc	r31, r19
    19dc:	a0 f4       	brcc	.+40     	; 0x1a06 <malloc+0x124>
    19de:	2e 1b       	sub	r18, r30
    19e0:	3f 0b       	sbc	r19, r31
    19e2:	28 17       	cp	r18, r24
    19e4:	39 07       	cpc	r19, r25
    19e6:	78 f0       	brcs	.+30     	; 0x1a06 <malloc+0x124>
    19e8:	ac 01       	movw	r20, r24
    19ea:	4e 5f       	subi	r20, 0xFE	; 254
    19ec:	5f 4f       	sbci	r21, 0xFF	; 255
    19ee:	24 17       	cp	r18, r20
    19f0:	35 07       	cpc	r19, r21
    19f2:	48 f0       	brcs	.+18     	; 0x1a06 <malloc+0x124>
    19f4:	4e 0f       	add	r20, r30
    19f6:	5f 1f       	adc	r21, r31
    19f8:	50 93 5c 04 	sts	0x045C, r21
    19fc:	40 93 5b 04 	sts	0x045B, r20
    1a00:	81 93       	st	Z+, r24
    1a02:	91 93       	st	Z+, r25
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <malloc+0x128>
    1a06:	e0 e0       	ldi	r30, 0x00	; 0
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	cf 01       	movw	r24, r30
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	08 95       	ret

00001a12 <free>:
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <free+0xa>
    1a1a:	87 c0       	rjmp	.+270    	; 0x1b2a <free+0x118>
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	32 97       	sbiw	r30, 0x02	; 2
    1a20:	13 82       	std	Z+3, r1	; 0x03
    1a22:	12 82       	std	Z+2, r1	; 0x02
    1a24:	c0 91 5d 04 	lds	r28, 0x045D
    1a28:	d0 91 5e 04 	lds	r29, 0x045E
    1a2c:	20 97       	sbiw	r28, 0x00	; 0
    1a2e:	81 f4       	brne	.+32     	; 0x1a50 <free+0x3e>
    1a30:	20 81       	ld	r18, Z
    1a32:	31 81       	ldd	r19, Z+1	; 0x01
    1a34:	28 0f       	add	r18, r24
    1a36:	39 1f       	adc	r19, r25
    1a38:	80 91 5b 04 	lds	r24, 0x045B
    1a3c:	90 91 5c 04 	lds	r25, 0x045C
    1a40:	82 17       	cp	r24, r18
    1a42:	93 07       	cpc	r25, r19
    1a44:	79 f5       	brne	.+94     	; 0x1aa4 <free+0x92>
    1a46:	f0 93 5c 04 	sts	0x045C, r31
    1a4a:	e0 93 5b 04 	sts	0x045B, r30
    1a4e:	6d c0       	rjmp	.+218    	; 0x1b2a <free+0x118>
    1a50:	de 01       	movw	r26, r28
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	ae 17       	cp	r26, r30
    1a58:	bf 07       	cpc	r27, r31
    1a5a:	50 f4       	brcc	.+20     	; 0x1a70 <free+0x5e>
    1a5c:	12 96       	adiw	r26, 0x02	; 2
    1a5e:	4d 91       	ld	r20, X+
    1a60:	5c 91       	ld	r21, X
    1a62:	13 97       	sbiw	r26, 0x03	; 3
    1a64:	9d 01       	movw	r18, r26
    1a66:	41 15       	cp	r20, r1
    1a68:	51 05       	cpc	r21, r1
    1a6a:	09 f1       	breq	.+66     	; 0x1aae <free+0x9c>
    1a6c:	da 01       	movw	r26, r20
    1a6e:	f3 cf       	rjmp	.-26     	; 0x1a56 <free+0x44>
    1a70:	b3 83       	std	Z+3, r27	; 0x03
    1a72:	a2 83       	std	Z+2, r26	; 0x02
    1a74:	40 81       	ld	r20, Z
    1a76:	51 81       	ldd	r21, Z+1	; 0x01
    1a78:	84 0f       	add	r24, r20
    1a7a:	95 1f       	adc	r25, r21
    1a7c:	8a 17       	cp	r24, r26
    1a7e:	9b 07       	cpc	r25, r27
    1a80:	71 f4       	brne	.+28     	; 0x1a9e <free+0x8c>
    1a82:	8d 91       	ld	r24, X+
    1a84:	9c 91       	ld	r25, X
    1a86:	11 97       	sbiw	r26, 0x01	; 1
    1a88:	84 0f       	add	r24, r20
    1a8a:	95 1f       	adc	r25, r21
    1a8c:	02 96       	adiw	r24, 0x02	; 2
    1a8e:	91 83       	std	Z+1, r25	; 0x01
    1a90:	80 83       	st	Z, r24
    1a92:	12 96       	adiw	r26, 0x02	; 2
    1a94:	8d 91       	ld	r24, X+
    1a96:	9c 91       	ld	r25, X
    1a98:	13 97       	sbiw	r26, 0x03	; 3
    1a9a:	93 83       	std	Z+3, r25	; 0x03
    1a9c:	82 83       	std	Z+2, r24	; 0x02
    1a9e:	21 15       	cp	r18, r1
    1aa0:	31 05       	cpc	r19, r1
    1aa2:	29 f4       	brne	.+10     	; 0x1aae <free+0x9c>
    1aa4:	f0 93 5e 04 	sts	0x045E, r31
    1aa8:	e0 93 5d 04 	sts	0x045D, r30
    1aac:	3e c0       	rjmp	.+124    	; 0x1b2a <free+0x118>
    1aae:	d9 01       	movw	r26, r18
    1ab0:	13 96       	adiw	r26, 0x03	; 3
    1ab2:	fc 93       	st	X, r31
    1ab4:	ee 93       	st	-X, r30
    1ab6:	12 97       	sbiw	r26, 0x02	; 2
    1ab8:	4d 91       	ld	r20, X+
    1aba:	5d 91       	ld	r21, X+
    1abc:	a4 0f       	add	r26, r20
    1abe:	b5 1f       	adc	r27, r21
    1ac0:	ea 17       	cp	r30, r26
    1ac2:	fb 07       	cpc	r31, r27
    1ac4:	79 f4       	brne	.+30     	; 0x1ae4 <free+0xd2>
    1ac6:	80 81       	ld	r24, Z
    1ac8:	91 81       	ldd	r25, Z+1	; 0x01
    1aca:	84 0f       	add	r24, r20
    1acc:	95 1f       	adc	r25, r21
    1ace:	02 96       	adiw	r24, 0x02	; 2
    1ad0:	d9 01       	movw	r26, r18
    1ad2:	11 96       	adiw	r26, 0x01	; 1
    1ad4:	9c 93       	st	X, r25
    1ad6:	8e 93       	st	-X, r24
    1ad8:	82 81       	ldd	r24, Z+2	; 0x02
    1ada:	93 81       	ldd	r25, Z+3	; 0x03
    1adc:	13 96       	adiw	r26, 0x03	; 3
    1ade:	9c 93       	st	X, r25
    1ae0:	8e 93       	st	-X, r24
    1ae2:	12 97       	sbiw	r26, 0x02	; 2
    1ae4:	e0 e0       	ldi	r30, 0x00	; 0
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	9b 81       	ldd	r25, Y+3	; 0x03
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	19 f0       	breq	.+6      	; 0x1af6 <free+0xe4>
    1af0:	fe 01       	movw	r30, r28
    1af2:	ec 01       	movw	r28, r24
    1af4:	f9 cf       	rjmp	.-14     	; 0x1ae8 <free+0xd6>
    1af6:	ce 01       	movw	r24, r28
    1af8:	02 96       	adiw	r24, 0x02	; 2
    1afa:	28 81       	ld	r18, Y
    1afc:	39 81       	ldd	r19, Y+1	; 0x01
    1afe:	82 0f       	add	r24, r18
    1b00:	93 1f       	adc	r25, r19
    1b02:	20 91 5b 04 	lds	r18, 0x045B
    1b06:	30 91 5c 04 	lds	r19, 0x045C
    1b0a:	28 17       	cp	r18, r24
    1b0c:	39 07       	cpc	r19, r25
    1b0e:	69 f4       	brne	.+26     	; 0x1b2a <free+0x118>
    1b10:	30 97       	sbiw	r30, 0x00	; 0
    1b12:	29 f4       	brne	.+10     	; 0x1b1e <free+0x10c>
    1b14:	10 92 5e 04 	sts	0x045E, r1
    1b18:	10 92 5d 04 	sts	0x045D, r1
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <free+0x110>
    1b1e:	13 82       	std	Z+3, r1	; 0x03
    1b20:	12 82       	std	Z+2, r1	; 0x02
    1b22:	d0 93 5c 04 	sts	0x045C, r29
    1b26:	c0 93 5b 04 	sts	0x045B, r28
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	08 95       	ret

00001b30 <fdevopen>:
    1b30:	0f 93       	push	r16
    1b32:	1f 93       	push	r17
    1b34:	cf 93       	push	r28
    1b36:	df 93       	push	r29
    1b38:	ec 01       	movw	r28, r24
    1b3a:	8b 01       	movw	r16, r22
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	31 f4       	brne	.+12     	; 0x1b4c <fdevopen+0x1c>
    1b40:	61 15       	cp	r22, r1
    1b42:	71 05       	cpc	r23, r1
    1b44:	19 f4       	brne	.+6      	; 0x1b4c <fdevopen+0x1c>
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	37 c0       	rjmp	.+110    	; 0x1bba <fdevopen+0x8a>
    1b4c:	6e e0       	ldi	r22, 0x0E	; 14
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	3d d2       	rcall	.+1146   	; 0x1fd0 <calloc>
    1b56:	fc 01       	movw	r30, r24
    1b58:	00 97       	sbiw	r24, 0x00	; 0
    1b5a:	a9 f3       	breq	.-22     	; 0x1b46 <fdevopen+0x16>
    1b5c:	80 e8       	ldi	r24, 0x80	; 128
    1b5e:	83 83       	std	Z+3, r24	; 0x03
    1b60:	01 15       	cp	r16, r1
    1b62:	11 05       	cpc	r17, r1
    1b64:	71 f0       	breq	.+28     	; 0x1b82 <fdevopen+0x52>
    1b66:	13 87       	std	Z+11, r17	; 0x0b
    1b68:	02 87       	std	Z+10, r16	; 0x0a
    1b6a:	81 e8       	ldi	r24, 0x81	; 129
    1b6c:	83 83       	std	Z+3, r24	; 0x03
    1b6e:	80 91 5f 04 	lds	r24, 0x045F
    1b72:	90 91 60 04 	lds	r25, 0x0460
    1b76:	89 2b       	or	r24, r25
    1b78:	21 f4       	brne	.+8      	; 0x1b82 <fdevopen+0x52>
    1b7a:	f0 93 60 04 	sts	0x0460, r31
    1b7e:	e0 93 5f 04 	sts	0x045F, r30
    1b82:	20 97       	sbiw	r28, 0x00	; 0
    1b84:	c9 f0       	breq	.+50     	; 0x1bb8 <fdevopen+0x88>
    1b86:	d1 87       	std	Z+9, r29	; 0x09
    1b88:	c0 87       	std	Z+8, r28	; 0x08
    1b8a:	83 81       	ldd	r24, Z+3	; 0x03
    1b8c:	82 60       	ori	r24, 0x02	; 2
    1b8e:	83 83       	std	Z+3, r24	; 0x03
    1b90:	80 91 61 04 	lds	r24, 0x0461
    1b94:	90 91 62 04 	lds	r25, 0x0462
    1b98:	89 2b       	or	r24, r25
    1b9a:	71 f4       	brne	.+28     	; 0x1bb8 <fdevopen+0x88>
    1b9c:	f0 93 62 04 	sts	0x0462, r31
    1ba0:	e0 93 61 04 	sts	0x0461, r30
    1ba4:	80 91 63 04 	lds	r24, 0x0463
    1ba8:	90 91 64 04 	lds	r25, 0x0464
    1bac:	89 2b       	or	r24, r25
    1bae:	21 f4       	brne	.+8      	; 0x1bb8 <fdevopen+0x88>
    1bb0:	f0 93 64 04 	sts	0x0464, r31
    1bb4:	e0 93 63 04 	sts	0x0463, r30
    1bb8:	cf 01       	movw	r24, r30
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	1f 91       	pop	r17
    1bc0:	0f 91       	pop	r16
    1bc2:	08 95       	ret

00001bc4 <printf>:
    1bc4:	a0 e0       	ldi	r26, 0x00	; 0
    1bc6:	b0 e0       	ldi	r27, 0x00	; 0
    1bc8:	e7 ee       	ldi	r30, 0xE7	; 231
    1bca:	fd e0       	ldi	r31, 0x0D	; 13
    1bcc:	d8 c2       	rjmp	.+1456   	; 0x217e <__prologue_saves__+0x20>
    1bce:	fe 01       	movw	r30, r28
    1bd0:	35 96       	adiw	r30, 0x05	; 5
    1bd2:	61 91       	ld	r22, Z+
    1bd4:	71 91       	ld	r23, Z+
    1bd6:	af 01       	movw	r20, r30
    1bd8:	80 91 61 04 	lds	r24, 0x0461
    1bdc:	90 91 62 04 	lds	r25, 0x0462
    1be0:	34 d0       	rcall	.+104    	; 0x1c4a <vfprintf>
    1be2:	e2 e0       	ldi	r30, 0x02	; 2
    1be4:	e8 c2       	rjmp	.+1488   	; 0x21b6 <__epilogue_restores__+0x20>

00001be6 <putchar>:
    1be6:	60 91 61 04 	lds	r22, 0x0461
    1bea:	70 91 62 04 	lds	r23, 0x0462
    1bee:	27 c2       	rjmp	.+1102   	; 0x203e <fputc>

00001bf0 <puts>:
    1bf0:	0f 93       	push	r16
    1bf2:	1f 93       	push	r17
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
    1bf8:	e0 91 61 04 	lds	r30, 0x0461
    1bfc:	f0 91 62 04 	lds	r31, 0x0462
    1c00:	23 81       	ldd	r18, Z+3	; 0x03
    1c02:	21 ff       	sbrs	r18, 1
    1c04:	1b c0       	rjmp	.+54     	; 0x1c3c <puts+0x4c>
    1c06:	ec 01       	movw	r28, r24
    1c08:	00 e0       	ldi	r16, 0x00	; 0
    1c0a:	10 e0       	ldi	r17, 0x00	; 0
    1c0c:	89 91       	ld	r24, Y+
    1c0e:	60 91 61 04 	lds	r22, 0x0461
    1c12:	70 91 62 04 	lds	r23, 0x0462
    1c16:	db 01       	movw	r26, r22
    1c18:	18 96       	adiw	r26, 0x08	; 8
    1c1a:	ed 91       	ld	r30, X+
    1c1c:	fc 91       	ld	r31, X
    1c1e:	19 97       	sbiw	r26, 0x09	; 9
    1c20:	88 23       	and	r24, r24
    1c22:	31 f0       	breq	.+12     	; 0x1c30 <puts+0x40>
    1c24:	09 95       	icall
    1c26:	89 2b       	or	r24, r25
    1c28:	89 f3       	breq	.-30     	; 0x1c0c <puts+0x1c>
    1c2a:	0f ef       	ldi	r16, 0xFF	; 255
    1c2c:	1f ef       	ldi	r17, 0xFF	; 255
    1c2e:	ee cf       	rjmp	.-36     	; 0x1c0c <puts+0x1c>
    1c30:	8a e0       	ldi	r24, 0x0A	; 10
    1c32:	09 95       	icall
    1c34:	89 2b       	or	r24, r25
    1c36:	11 f4       	brne	.+4      	; 0x1c3c <puts+0x4c>
    1c38:	c8 01       	movw	r24, r16
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <puts+0x50>
    1c3c:	8f ef       	ldi	r24, 0xFF	; 255
    1c3e:	9f ef       	ldi	r25, 0xFF	; 255
    1c40:	df 91       	pop	r29
    1c42:	cf 91       	pop	r28
    1c44:	1f 91       	pop	r17
    1c46:	0f 91       	pop	r16
    1c48:	08 95       	ret

00001c4a <vfprintf>:
    1c4a:	ac e0       	ldi	r26, 0x0C	; 12
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	ea e2       	ldi	r30, 0x2A	; 42
    1c50:	fe e0       	ldi	r31, 0x0E	; 14
    1c52:	85 c2       	rjmp	.+1290   	; 0x215e <__prologue_saves__>
    1c54:	7c 01       	movw	r14, r24
    1c56:	6b 01       	movw	r12, r22
    1c58:	8a 01       	movw	r16, r20
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	17 82       	std	Z+7, r1	; 0x07
    1c5e:	16 82       	std	Z+6, r1	; 0x06
    1c60:	83 81       	ldd	r24, Z+3	; 0x03
    1c62:	81 ff       	sbrs	r24, 1
    1c64:	b0 c1       	rjmp	.+864    	; 0x1fc6 <vfprintf+0x37c>
    1c66:	ce 01       	movw	r24, r28
    1c68:	01 96       	adiw	r24, 0x01	; 1
    1c6a:	4c 01       	movw	r8, r24
    1c6c:	f7 01       	movw	r30, r14
    1c6e:	93 81       	ldd	r25, Z+3	; 0x03
    1c70:	f6 01       	movw	r30, r12
    1c72:	93 fd       	sbrc	r25, 3
    1c74:	85 91       	lpm	r24, Z+
    1c76:	93 ff       	sbrs	r25, 3
    1c78:	81 91       	ld	r24, Z+
    1c7a:	6f 01       	movw	r12, r30
    1c7c:	88 23       	and	r24, r24
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <vfprintf+0x38>
    1c80:	9e c1       	rjmp	.+828    	; 0x1fbe <vfprintf+0x374>
    1c82:	85 32       	cpi	r24, 0x25	; 37
    1c84:	39 f4       	brne	.+14     	; 0x1c94 <vfprintf+0x4a>
    1c86:	93 fd       	sbrc	r25, 3
    1c88:	85 91       	lpm	r24, Z+
    1c8a:	93 ff       	sbrs	r25, 3
    1c8c:	81 91       	ld	r24, Z+
    1c8e:	6f 01       	movw	r12, r30
    1c90:	85 32       	cpi	r24, 0x25	; 37
    1c92:	21 f4       	brne	.+8      	; 0x1c9c <vfprintf+0x52>
    1c94:	b7 01       	movw	r22, r14
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	d2 d1       	rcall	.+932    	; 0x203e <fputc>
    1c9a:	e8 cf       	rjmp	.-48     	; 0x1c6c <vfprintf+0x22>
    1c9c:	51 2c       	mov	r5, r1
    1c9e:	31 2c       	mov	r3, r1
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	20 32       	cpi	r18, 0x20	; 32
    1ca4:	a0 f4       	brcc	.+40     	; 0x1cce <vfprintf+0x84>
    1ca6:	8b 32       	cpi	r24, 0x2B	; 43
    1ca8:	69 f0       	breq	.+26     	; 0x1cc4 <vfprintf+0x7a>
    1caa:	30 f4       	brcc	.+12     	; 0x1cb8 <vfprintf+0x6e>
    1cac:	80 32       	cpi	r24, 0x20	; 32
    1cae:	59 f0       	breq	.+22     	; 0x1cc6 <vfprintf+0x7c>
    1cb0:	83 32       	cpi	r24, 0x23	; 35
    1cb2:	69 f4       	brne	.+26     	; 0x1cce <vfprintf+0x84>
    1cb4:	20 61       	ori	r18, 0x10	; 16
    1cb6:	2c c0       	rjmp	.+88     	; 0x1d10 <vfprintf+0xc6>
    1cb8:	8d 32       	cpi	r24, 0x2D	; 45
    1cba:	39 f0       	breq	.+14     	; 0x1cca <vfprintf+0x80>
    1cbc:	80 33       	cpi	r24, 0x30	; 48
    1cbe:	39 f4       	brne	.+14     	; 0x1cce <vfprintf+0x84>
    1cc0:	21 60       	ori	r18, 0x01	; 1
    1cc2:	26 c0       	rjmp	.+76     	; 0x1d10 <vfprintf+0xc6>
    1cc4:	22 60       	ori	r18, 0x02	; 2
    1cc6:	24 60       	ori	r18, 0x04	; 4
    1cc8:	23 c0       	rjmp	.+70     	; 0x1d10 <vfprintf+0xc6>
    1cca:	28 60       	ori	r18, 0x08	; 8
    1ccc:	21 c0       	rjmp	.+66     	; 0x1d10 <vfprintf+0xc6>
    1cce:	27 fd       	sbrc	r18, 7
    1cd0:	27 c0       	rjmp	.+78     	; 0x1d20 <vfprintf+0xd6>
    1cd2:	30 ed       	ldi	r19, 0xD0	; 208
    1cd4:	38 0f       	add	r19, r24
    1cd6:	3a 30       	cpi	r19, 0x0A	; 10
    1cd8:	78 f4       	brcc	.+30     	; 0x1cf8 <vfprintf+0xae>
    1cda:	26 ff       	sbrs	r18, 6
    1cdc:	06 c0       	rjmp	.+12     	; 0x1cea <vfprintf+0xa0>
    1cde:	fa e0       	ldi	r31, 0x0A	; 10
    1ce0:	5f 9e       	mul	r5, r31
    1ce2:	30 0d       	add	r19, r0
    1ce4:	11 24       	eor	r1, r1
    1ce6:	53 2e       	mov	r5, r19
    1ce8:	13 c0       	rjmp	.+38     	; 0x1d10 <vfprintf+0xc6>
    1cea:	8a e0       	ldi	r24, 0x0A	; 10
    1cec:	38 9e       	mul	r3, r24
    1cee:	30 0d       	add	r19, r0
    1cf0:	11 24       	eor	r1, r1
    1cf2:	33 2e       	mov	r3, r19
    1cf4:	20 62       	ori	r18, 0x20	; 32
    1cf6:	0c c0       	rjmp	.+24     	; 0x1d10 <vfprintf+0xc6>
    1cf8:	8e 32       	cpi	r24, 0x2E	; 46
    1cfa:	21 f4       	brne	.+8      	; 0x1d04 <vfprintf+0xba>
    1cfc:	26 fd       	sbrc	r18, 6
    1cfe:	5f c1       	rjmp	.+702    	; 0x1fbe <vfprintf+0x374>
    1d00:	20 64       	ori	r18, 0x40	; 64
    1d02:	06 c0       	rjmp	.+12     	; 0x1d10 <vfprintf+0xc6>
    1d04:	8c 36       	cpi	r24, 0x6C	; 108
    1d06:	11 f4       	brne	.+4      	; 0x1d0c <vfprintf+0xc2>
    1d08:	20 68       	ori	r18, 0x80	; 128
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <vfprintf+0xc6>
    1d0c:	88 36       	cpi	r24, 0x68	; 104
    1d0e:	41 f4       	brne	.+16     	; 0x1d20 <vfprintf+0xd6>
    1d10:	f6 01       	movw	r30, r12
    1d12:	93 fd       	sbrc	r25, 3
    1d14:	85 91       	lpm	r24, Z+
    1d16:	93 ff       	sbrs	r25, 3
    1d18:	81 91       	ld	r24, Z+
    1d1a:	6f 01       	movw	r12, r30
    1d1c:	81 11       	cpse	r24, r1
    1d1e:	c1 cf       	rjmp	.-126    	; 0x1ca2 <vfprintf+0x58>
    1d20:	98 2f       	mov	r25, r24
    1d22:	9f 7d       	andi	r25, 0xDF	; 223
    1d24:	95 54       	subi	r25, 0x45	; 69
    1d26:	93 30       	cpi	r25, 0x03	; 3
    1d28:	28 f4       	brcc	.+10     	; 0x1d34 <vfprintf+0xea>
    1d2a:	0c 5f       	subi	r16, 0xFC	; 252
    1d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2e:	ff e3       	ldi	r31, 0x3F	; 63
    1d30:	f9 83       	std	Y+1, r31	; 0x01
    1d32:	0d c0       	rjmp	.+26     	; 0x1d4e <vfprintf+0x104>
    1d34:	83 36       	cpi	r24, 0x63	; 99
    1d36:	31 f0       	breq	.+12     	; 0x1d44 <vfprintf+0xfa>
    1d38:	83 37       	cpi	r24, 0x73	; 115
    1d3a:	71 f0       	breq	.+28     	; 0x1d58 <vfprintf+0x10e>
    1d3c:	83 35       	cpi	r24, 0x53	; 83
    1d3e:	09 f0       	breq	.+2      	; 0x1d42 <vfprintf+0xf8>
    1d40:	57 c0       	rjmp	.+174    	; 0x1df0 <vfprintf+0x1a6>
    1d42:	21 c0       	rjmp	.+66     	; 0x1d86 <vfprintf+0x13c>
    1d44:	f8 01       	movw	r30, r16
    1d46:	80 81       	ld	r24, Z
    1d48:	89 83       	std	Y+1, r24	; 0x01
    1d4a:	0e 5f       	subi	r16, 0xFE	; 254
    1d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4e:	44 24       	eor	r4, r4
    1d50:	43 94       	inc	r4
    1d52:	51 2c       	mov	r5, r1
    1d54:	54 01       	movw	r10, r8
    1d56:	14 c0       	rjmp	.+40     	; 0x1d80 <vfprintf+0x136>
    1d58:	38 01       	movw	r6, r16
    1d5a:	f2 e0       	ldi	r31, 0x02	; 2
    1d5c:	6f 0e       	add	r6, r31
    1d5e:	71 1c       	adc	r7, r1
    1d60:	f8 01       	movw	r30, r16
    1d62:	a0 80       	ld	r10, Z
    1d64:	b1 80       	ldd	r11, Z+1	; 0x01
    1d66:	26 ff       	sbrs	r18, 6
    1d68:	03 c0       	rjmp	.+6      	; 0x1d70 <vfprintf+0x126>
    1d6a:	65 2d       	mov	r22, r5
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <vfprintf+0x12a>
    1d70:	6f ef       	ldi	r22, 0xFF	; 255
    1d72:	7f ef       	ldi	r23, 0xFF	; 255
    1d74:	c5 01       	movw	r24, r10
    1d76:	2c 87       	std	Y+12, r18	; 0x0c
    1d78:	57 d1       	rcall	.+686    	; 0x2028 <strnlen>
    1d7a:	2c 01       	movw	r4, r24
    1d7c:	83 01       	movw	r16, r6
    1d7e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d80:	2f 77       	andi	r18, 0x7F	; 127
    1d82:	22 2e       	mov	r2, r18
    1d84:	16 c0       	rjmp	.+44     	; 0x1db2 <vfprintf+0x168>
    1d86:	38 01       	movw	r6, r16
    1d88:	f2 e0       	ldi	r31, 0x02	; 2
    1d8a:	6f 0e       	add	r6, r31
    1d8c:	71 1c       	adc	r7, r1
    1d8e:	f8 01       	movw	r30, r16
    1d90:	a0 80       	ld	r10, Z
    1d92:	b1 80       	ldd	r11, Z+1	; 0x01
    1d94:	26 ff       	sbrs	r18, 6
    1d96:	03 c0       	rjmp	.+6      	; 0x1d9e <vfprintf+0x154>
    1d98:	65 2d       	mov	r22, r5
    1d9a:	70 e0       	ldi	r23, 0x00	; 0
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <vfprintf+0x158>
    1d9e:	6f ef       	ldi	r22, 0xFF	; 255
    1da0:	7f ef       	ldi	r23, 0xFF	; 255
    1da2:	c5 01       	movw	r24, r10
    1da4:	2c 87       	std	Y+12, r18	; 0x0c
    1da6:	2e d1       	rcall	.+604    	; 0x2004 <strnlen_P>
    1da8:	2c 01       	movw	r4, r24
    1daa:	2c 85       	ldd	r18, Y+12	; 0x0c
    1dac:	20 68       	ori	r18, 0x80	; 128
    1dae:	22 2e       	mov	r2, r18
    1db0:	83 01       	movw	r16, r6
    1db2:	23 fc       	sbrc	r2, 3
    1db4:	19 c0       	rjmp	.+50     	; 0x1de8 <vfprintf+0x19e>
    1db6:	83 2d       	mov	r24, r3
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	48 16       	cp	r4, r24
    1dbc:	59 06       	cpc	r5, r25
    1dbe:	a0 f4       	brcc	.+40     	; 0x1de8 <vfprintf+0x19e>
    1dc0:	b7 01       	movw	r22, r14
    1dc2:	80 e2       	ldi	r24, 0x20	; 32
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	3b d1       	rcall	.+630    	; 0x203e <fputc>
    1dc8:	3a 94       	dec	r3
    1dca:	f5 cf       	rjmp	.-22     	; 0x1db6 <vfprintf+0x16c>
    1dcc:	f5 01       	movw	r30, r10
    1dce:	27 fc       	sbrc	r2, 7
    1dd0:	85 91       	lpm	r24, Z+
    1dd2:	27 fe       	sbrs	r2, 7
    1dd4:	81 91       	ld	r24, Z+
    1dd6:	5f 01       	movw	r10, r30
    1dd8:	b7 01       	movw	r22, r14
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	30 d1       	rcall	.+608    	; 0x203e <fputc>
    1dde:	31 10       	cpse	r3, r1
    1de0:	3a 94       	dec	r3
    1de2:	f1 e0       	ldi	r31, 0x01	; 1
    1de4:	4f 1a       	sub	r4, r31
    1de6:	51 08       	sbc	r5, r1
    1de8:	41 14       	cp	r4, r1
    1dea:	51 04       	cpc	r5, r1
    1dec:	79 f7       	brne	.-34     	; 0x1dcc <vfprintf+0x182>
    1dee:	de c0       	rjmp	.+444    	; 0x1fac <vfprintf+0x362>
    1df0:	84 36       	cpi	r24, 0x64	; 100
    1df2:	11 f0       	breq	.+4      	; 0x1df8 <vfprintf+0x1ae>
    1df4:	89 36       	cpi	r24, 0x69	; 105
    1df6:	31 f5       	brne	.+76     	; 0x1e44 <vfprintf+0x1fa>
    1df8:	f8 01       	movw	r30, r16
    1dfa:	27 ff       	sbrs	r18, 7
    1dfc:	07 c0       	rjmp	.+14     	; 0x1e0c <vfprintf+0x1c2>
    1dfe:	60 81       	ld	r22, Z
    1e00:	71 81       	ldd	r23, Z+1	; 0x01
    1e02:	82 81       	ldd	r24, Z+2	; 0x02
    1e04:	93 81       	ldd	r25, Z+3	; 0x03
    1e06:	0c 5f       	subi	r16, 0xFC	; 252
    1e08:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0a:	08 c0       	rjmp	.+16     	; 0x1e1c <vfprintf+0x1d2>
    1e0c:	60 81       	ld	r22, Z
    1e0e:	71 81       	ldd	r23, Z+1	; 0x01
    1e10:	88 27       	eor	r24, r24
    1e12:	77 fd       	sbrc	r23, 7
    1e14:	80 95       	com	r24
    1e16:	98 2f       	mov	r25, r24
    1e18:	0e 5f       	subi	r16, 0xFE	; 254
    1e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1c:	2f 76       	andi	r18, 0x6F	; 111
    1e1e:	b2 2e       	mov	r11, r18
    1e20:	97 ff       	sbrs	r25, 7
    1e22:	09 c0       	rjmp	.+18     	; 0x1e36 <vfprintf+0x1ec>
    1e24:	90 95       	com	r25
    1e26:	80 95       	com	r24
    1e28:	70 95       	com	r23
    1e2a:	61 95       	neg	r22
    1e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e30:	9f 4f       	sbci	r25, 0xFF	; 255
    1e32:	20 68       	ori	r18, 0x80	; 128
    1e34:	b2 2e       	mov	r11, r18
    1e36:	2a e0       	ldi	r18, 0x0A	; 10
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	a4 01       	movw	r20, r8
    1e3c:	32 d1       	rcall	.+612    	; 0x20a2 <__ultoa_invert>
    1e3e:	a8 2e       	mov	r10, r24
    1e40:	a8 18       	sub	r10, r8
    1e42:	43 c0       	rjmp	.+134    	; 0x1eca <vfprintf+0x280>
    1e44:	85 37       	cpi	r24, 0x75	; 117
    1e46:	29 f4       	brne	.+10     	; 0x1e52 <vfprintf+0x208>
    1e48:	2f 7e       	andi	r18, 0xEF	; 239
    1e4a:	b2 2e       	mov	r11, r18
    1e4c:	2a e0       	ldi	r18, 0x0A	; 10
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	25 c0       	rjmp	.+74     	; 0x1e9c <vfprintf+0x252>
    1e52:	f2 2f       	mov	r31, r18
    1e54:	f9 7f       	andi	r31, 0xF9	; 249
    1e56:	bf 2e       	mov	r11, r31
    1e58:	8f 36       	cpi	r24, 0x6F	; 111
    1e5a:	c1 f0       	breq	.+48     	; 0x1e8c <vfprintf+0x242>
    1e5c:	18 f4       	brcc	.+6      	; 0x1e64 <vfprintf+0x21a>
    1e5e:	88 35       	cpi	r24, 0x58	; 88
    1e60:	79 f0       	breq	.+30     	; 0x1e80 <vfprintf+0x236>
    1e62:	ad c0       	rjmp	.+346    	; 0x1fbe <vfprintf+0x374>
    1e64:	80 37       	cpi	r24, 0x70	; 112
    1e66:	19 f0       	breq	.+6      	; 0x1e6e <vfprintf+0x224>
    1e68:	88 37       	cpi	r24, 0x78	; 120
    1e6a:	21 f0       	breq	.+8      	; 0x1e74 <vfprintf+0x22a>
    1e6c:	a8 c0       	rjmp	.+336    	; 0x1fbe <vfprintf+0x374>
    1e6e:	2f 2f       	mov	r18, r31
    1e70:	20 61       	ori	r18, 0x10	; 16
    1e72:	b2 2e       	mov	r11, r18
    1e74:	b4 fe       	sbrs	r11, 4
    1e76:	0d c0       	rjmp	.+26     	; 0x1e92 <vfprintf+0x248>
    1e78:	8b 2d       	mov	r24, r11
    1e7a:	84 60       	ori	r24, 0x04	; 4
    1e7c:	b8 2e       	mov	r11, r24
    1e7e:	09 c0       	rjmp	.+18     	; 0x1e92 <vfprintf+0x248>
    1e80:	24 ff       	sbrs	r18, 4
    1e82:	0a c0       	rjmp	.+20     	; 0x1e98 <vfprintf+0x24e>
    1e84:	9f 2f       	mov	r25, r31
    1e86:	96 60       	ori	r25, 0x06	; 6
    1e88:	b9 2e       	mov	r11, r25
    1e8a:	06 c0       	rjmp	.+12     	; 0x1e98 <vfprintf+0x24e>
    1e8c:	28 e0       	ldi	r18, 0x08	; 8
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	05 c0       	rjmp	.+10     	; 0x1e9c <vfprintf+0x252>
    1e92:	20 e1       	ldi	r18, 0x10	; 16
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <vfprintf+0x252>
    1e98:	20 e1       	ldi	r18, 0x10	; 16
    1e9a:	32 e0       	ldi	r19, 0x02	; 2
    1e9c:	f8 01       	movw	r30, r16
    1e9e:	b7 fe       	sbrs	r11, 7
    1ea0:	07 c0       	rjmp	.+14     	; 0x1eb0 <vfprintf+0x266>
    1ea2:	60 81       	ld	r22, Z
    1ea4:	71 81       	ldd	r23, Z+1	; 0x01
    1ea6:	82 81       	ldd	r24, Z+2	; 0x02
    1ea8:	93 81       	ldd	r25, Z+3	; 0x03
    1eaa:	0c 5f       	subi	r16, 0xFC	; 252
    1eac:	1f 4f       	sbci	r17, 0xFF	; 255
    1eae:	06 c0       	rjmp	.+12     	; 0x1ebc <vfprintf+0x272>
    1eb0:	60 81       	ld	r22, Z
    1eb2:	71 81       	ldd	r23, Z+1	; 0x01
    1eb4:	80 e0       	ldi	r24, 0x00	; 0
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	0e 5f       	subi	r16, 0xFE	; 254
    1eba:	1f 4f       	sbci	r17, 0xFF	; 255
    1ebc:	a4 01       	movw	r20, r8
    1ebe:	f1 d0       	rcall	.+482    	; 0x20a2 <__ultoa_invert>
    1ec0:	a8 2e       	mov	r10, r24
    1ec2:	a8 18       	sub	r10, r8
    1ec4:	fb 2d       	mov	r31, r11
    1ec6:	ff 77       	andi	r31, 0x7F	; 127
    1ec8:	bf 2e       	mov	r11, r31
    1eca:	b6 fe       	sbrs	r11, 6
    1ecc:	0b c0       	rjmp	.+22     	; 0x1ee4 <vfprintf+0x29a>
    1ece:	2b 2d       	mov	r18, r11
    1ed0:	2e 7f       	andi	r18, 0xFE	; 254
    1ed2:	a5 14       	cp	r10, r5
    1ed4:	50 f4       	brcc	.+20     	; 0x1eea <vfprintf+0x2a0>
    1ed6:	b4 fe       	sbrs	r11, 4
    1ed8:	0a c0       	rjmp	.+20     	; 0x1eee <vfprintf+0x2a4>
    1eda:	b2 fc       	sbrc	r11, 2
    1edc:	08 c0       	rjmp	.+16     	; 0x1eee <vfprintf+0x2a4>
    1ede:	2b 2d       	mov	r18, r11
    1ee0:	2e 7e       	andi	r18, 0xEE	; 238
    1ee2:	05 c0       	rjmp	.+10     	; 0x1eee <vfprintf+0x2a4>
    1ee4:	7a 2c       	mov	r7, r10
    1ee6:	2b 2d       	mov	r18, r11
    1ee8:	03 c0       	rjmp	.+6      	; 0x1ef0 <vfprintf+0x2a6>
    1eea:	7a 2c       	mov	r7, r10
    1eec:	01 c0       	rjmp	.+2      	; 0x1ef0 <vfprintf+0x2a6>
    1eee:	75 2c       	mov	r7, r5
    1ef0:	24 ff       	sbrs	r18, 4
    1ef2:	0d c0       	rjmp	.+26     	; 0x1f0e <vfprintf+0x2c4>
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	ea 0d       	add	r30, r10
    1ef8:	f1 1d       	adc	r31, r1
    1efa:	80 81       	ld	r24, Z
    1efc:	80 33       	cpi	r24, 0x30	; 48
    1efe:	11 f4       	brne	.+4      	; 0x1f04 <vfprintf+0x2ba>
    1f00:	29 7e       	andi	r18, 0xE9	; 233
    1f02:	09 c0       	rjmp	.+18     	; 0x1f16 <vfprintf+0x2cc>
    1f04:	22 ff       	sbrs	r18, 2
    1f06:	06 c0       	rjmp	.+12     	; 0x1f14 <vfprintf+0x2ca>
    1f08:	73 94       	inc	r7
    1f0a:	73 94       	inc	r7
    1f0c:	04 c0       	rjmp	.+8      	; 0x1f16 <vfprintf+0x2cc>
    1f0e:	82 2f       	mov	r24, r18
    1f10:	86 78       	andi	r24, 0x86	; 134
    1f12:	09 f0       	breq	.+2      	; 0x1f16 <vfprintf+0x2cc>
    1f14:	73 94       	inc	r7
    1f16:	23 fd       	sbrc	r18, 3
    1f18:	12 c0       	rjmp	.+36     	; 0x1f3e <vfprintf+0x2f4>
    1f1a:	20 ff       	sbrs	r18, 0
    1f1c:	06 c0       	rjmp	.+12     	; 0x1f2a <vfprintf+0x2e0>
    1f1e:	5a 2c       	mov	r5, r10
    1f20:	73 14       	cp	r7, r3
    1f22:	18 f4       	brcc	.+6      	; 0x1f2a <vfprintf+0x2e0>
    1f24:	53 0c       	add	r5, r3
    1f26:	57 18       	sub	r5, r7
    1f28:	73 2c       	mov	r7, r3
    1f2a:	73 14       	cp	r7, r3
    1f2c:	60 f4       	brcc	.+24     	; 0x1f46 <vfprintf+0x2fc>
    1f2e:	b7 01       	movw	r22, r14
    1f30:	80 e2       	ldi	r24, 0x20	; 32
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	2c 87       	std	Y+12, r18	; 0x0c
    1f36:	83 d0       	rcall	.+262    	; 0x203e <fputc>
    1f38:	73 94       	inc	r7
    1f3a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f3c:	f6 cf       	rjmp	.-20     	; 0x1f2a <vfprintf+0x2e0>
    1f3e:	73 14       	cp	r7, r3
    1f40:	10 f4       	brcc	.+4      	; 0x1f46 <vfprintf+0x2fc>
    1f42:	37 18       	sub	r3, r7
    1f44:	01 c0       	rjmp	.+2      	; 0x1f48 <vfprintf+0x2fe>
    1f46:	31 2c       	mov	r3, r1
    1f48:	24 ff       	sbrs	r18, 4
    1f4a:	11 c0       	rjmp	.+34     	; 0x1f6e <vfprintf+0x324>
    1f4c:	b7 01       	movw	r22, r14
    1f4e:	80 e3       	ldi	r24, 0x30	; 48
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	2c 87       	std	Y+12, r18	; 0x0c
    1f54:	74 d0       	rcall	.+232    	; 0x203e <fputc>
    1f56:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f58:	22 ff       	sbrs	r18, 2
    1f5a:	16 c0       	rjmp	.+44     	; 0x1f88 <vfprintf+0x33e>
    1f5c:	21 ff       	sbrs	r18, 1
    1f5e:	03 c0       	rjmp	.+6      	; 0x1f66 <vfprintf+0x31c>
    1f60:	88 e5       	ldi	r24, 0x58	; 88
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <vfprintf+0x320>
    1f66:	88 e7       	ldi	r24, 0x78	; 120
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	b7 01       	movw	r22, r14
    1f6c:	0c c0       	rjmp	.+24     	; 0x1f86 <vfprintf+0x33c>
    1f6e:	82 2f       	mov	r24, r18
    1f70:	86 78       	andi	r24, 0x86	; 134
    1f72:	51 f0       	breq	.+20     	; 0x1f88 <vfprintf+0x33e>
    1f74:	21 fd       	sbrc	r18, 1
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <vfprintf+0x332>
    1f78:	80 e2       	ldi	r24, 0x20	; 32
    1f7a:	01 c0       	rjmp	.+2      	; 0x1f7e <vfprintf+0x334>
    1f7c:	8b e2       	ldi	r24, 0x2B	; 43
    1f7e:	27 fd       	sbrc	r18, 7
    1f80:	8d e2       	ldi	r24, 0x2D	; 45
    1f82:	b7 01       	movw	r22, r14
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	5b d0       	rcall	.+182    	; 0x203e <fputc>
    1f88:	a5 14       	cp	r10, r5
    1f8a:	30 f4       	brcc	.+12     	; 0x1f98 <vfprintf+0x34e>
    1f8c:	b7 01       	movw	r22, r14
    1f8e:	80 e3       	ldi	r24, 0x30	; 48
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	55 d0       	rcall	.+170    	; 0x203e <fputc>
    1f94:	5a 94       	dec	r5
    1f96:	f8 cf       	rjmp	.-16     	; 0x1f88 <vfprintf+0x33e>
    1f98:	aa 94       	dec	r10
    1f9a:	f4 01       	movw	r30, r8
    1f9c:	ea 0d       	add	r30, r10
    1f9e:	f1 1d       	adc	r31, r1
    1fa0:	80 81       	ld	r24, Z
    1fa2:	b7 01       	movw	r22, r14
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	4b d0       	rcall	.+150    	; 0x203e <fputc>
    1fa8:	a1 10       	cpse	r10, r1
    1faa:	f6 cf       	rjmp	.-20     	; 0x1f98 <vfprintf+0x34e>
    1fac:	33 20       	and	r3, r3
    1fae:	09 f4       	brne	.+2      	; 0x1fb2 <vfprintf+0x368>
    1fb0:	5d ce       	rjmp	.-838    	; 0x1c6c <vfprintf+0x22>
    1fb2:	b7 01       	movw	r22, r14
    1fb4:	80 e2       	ldi	r24, 0x20	; 32
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	42 d0       	rcall	.+132    	; 0x203e <fputc>
    1fba:	3a 94       	dec	r3
    1fbc:	f7 cf       	rjmp	.-18     	; 0x1fac <vfprintf+0x362>
    1fbe:	f7 01       	movw	r30, r14
    1fc0:	86 81       	ldd	r24, Z+6	; 0x06
    1fc2:	97 81       	ldd	r25, Z+7	; 0x07
    1fc4:	02 c0       	rjmp	.+4      	; 0x1fca <vfprintf+0x380>
    1fc6:	8f ef       	ldi	r24, 0xFF	; 255
    1fc8:	9f ef       	ldi	r25, 0xFF	; 255
    1fca:	2c 96       	adiw	r28, 0x0c	; 12
    1fcc:	e2 e1       	ldi	r30, 0x12	; 18
    1fce:	e3 c0       	rjmp	.+454    	; 0x2196 <__epilogue_restores__>

00001fd0 <calloc>:
    1fd0:	0f 93       	push	r16
    1fd2:	1f 93       	push	r17
    1fd4:	cf 93       	push	r28
    1fd6:	df 93       	push	r29
    1fd8:	86 9f       	mul	r24, r22
    1fda:	80 01       	movw	r16, r0
    1fdc:	87 9f       	mul	r24, r23
    1fde:	10 0d       	add	r17, r0
    1fe0:	96 9f       	mul	r25, r22
    1fe2:	10 0d       	add	r17, r0
    1fe4:	11 24       	eor	r1, r1
    1fe6:	c8 01       	movw	r24, r16
    1fe8:	7c dc       	rcall	.-1800   	; 0x18e2 <malloc>
    1fea:	ec 01       	movw	r28, r24
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	21 f0       	breq	.+8      	; 0x1ff8 <calloc+0x28>
    1ff0:	a8 01       	movw	r20, r16
    1ff2:	60 e0       	ldi	r22, 0x00	; 0
    1ff4:	70 e0       	ldi	r23, 0x00	; 0
    1ff6:	11 d0       	rcall	.+34     	; 0x201a <memset>
    1ff8:	ce 01       	movw	r24, r28
    1ffa:	df 91       	pop	r29
    1ffc:	cf 91       	pop	r28
    1ffe:	1f 91       	pop	r17
    2000:	0f 91       	pop	r16
    2002:	08 95       	ret

00002004 <strnlen_P>:
    2004:	fc 01       	movw	r30, r24
    2006:	05 90       	lpm	r0, Z+
    2008:	61 50       	subi	r22, 0x01	; 1
    200a:	70 40       	sbci	r23, 0x00	; 0
    200c:	01 10       	cpse	r0, r1
    200e:	d8 f7       	brcc	.-10     	; 0x2006 <strnlen_P+0x2>
    2010:	80 95       	com	r24
    2012:	90 95       	com	r25
    2014:	8e 0f       	add	r24, r30
    2016:	9f 1f       	adc	r25, r31
    2018:	08 95       	ret

0000201a <memset>:
    201a:	dc 01       	movw	r26, r24
    201c:	01 c0       	rjmp	.+2      	; 0x2020 <memset+0x6>
    201e:	6d 93       	st	X+, r22
    2020:	41 50       	subi	r20, 0x01	; 1
    2022:	50 40       	sbci	r21, 0x00	; 0
    2024:	e0 f7       	brcc	.-8      	; 0x201e <memset+0x4>
    2026:	08 95       	ret

00002028 <strnlen>:
    2028:	fc 01       	movw	r30, r24
    202a:	61 50       	subi	r22, 0x01	; 1
    202c:	70 40       	sbci	r23, 0x00	; 0
    202e:	01 90       	ld	r0, Z+
    2030:	01 10       	cpse	r0, r1
    2032:	d8 f7       	brcc	.-10     	; 0x202a <strnlen+0x2>
    2034:	80 95       	com	r24
    2036:	90 95       	com	r25
    2038:	8e 0f       	add	r24, r30
    203a:	9f 1f       	adc	r25, r31
    203c:	08 95       	ret

0000203e <fputc>:
    203e:	0f 93       	push	r16
    2040:	1f 93       	push	r17
    2042:	cf 93       	push	r28
    2044:	df 93       	push	r29
    2046:	18 2f       	mov	r17, r24
    2048:	09 2f       	mov	r16, r25
    204a:	eb 01       	movw	r28, r22
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	81 fd       	sbrc	r24, 1
    2050:	03 c0       	rjmp	.+6      	; 0x2058 <fputc+0x1a>
    2052:	8f ef       	ldi	r24, 0xFF	; 255
    2054:	9f ef       	ldi	r25, 0xFF	; 255
    2056:	20 c0       	rjmp	.+64     	; 0x2098 <fputc+0x5a>
    2058:	82 ff       	sbrs	r24, 2
    205a:	10 c0       	rjmp	.+32     	; 0x207c <fputc+0x3e>
    205c:	4e 81       	ldd	r20, Y+6	; 0x06
    205e:	5f 81       	ldd	r21, Y+7	; 0x07
    2060:	2c 81       	ldd	r18, Y+4	; 0x04
    2062:	3d 81       	ldd	r19, Y+5	; 0x05
    2064:	42 17       	cp	r20, r18
    2066:	53 07       	cpc	r21, r19
    2068:	7c f4       	brge	.+30     	; 0x2088 <fputc+0x4a>
    206a:	e8 81       	ld	r30, Y
    206c:	f9 81       	ldd	r31, Y+1	; 0x01
    206e:	9f 01       	movw	r18, r30
    2070:	2f 5f       	subi	r18, 0xFF	; 255
    2072:	3f 4f       	sbci	r19, 0xFF	; 255
    2074:	39 83       	std	Y+1, r19	; 0x01
    2076:	28 83       	st	Y, r18
    2078:	10 83       	st	Z, r17
    207a:	06 c0       	rjmp	.+12     	; 0x2088 <fputc+0x4a>
    207c:	e8 85       	ldd	r30, Y+8	; 0x08
    207e:	f9 85       	ldd	r31, Y+9	; 0x09
    2080:	81 2f       	mov	r24, r17
    2082:	09 95       	icall
    2084:	89 2b       	or	r24, r25
    2086:	29 f7       	brne	.-54     	; 0x2052 <fputc+0x14>
    2088:	2e 81       	ldd	r18, Y+6	; 0x06
    208a:	3f 81       	ldd	r19, Y+7	; 0x07
    208c:	2f 5f       	subi	r18, 0xFF	; 255
    208e:	3f 4f       	sbci	r19, 0xFF	; 255
    2090:	3f 83       	std	Y+7, r19	; 0x07
    2092:	2e 83       	std	Y+6, r18	; 0x06
    2094:	81 2f       	mov	r24, r17
    2096:	90 2f       	mov	r25, r16
    2098:	df 91       	pop	r29
    209a:	cf 91       	pop	r28
    209c:	1f 91       	pop	r17
    209e:	0f 91       	pop	r16
    20a0:	08 95       	ret

000020a2 <__ultoa_invert>:
    20a2:	fa 01       	movw	r30, r20
    20a4:	aa 27       	eor	r26, r26
    20a6:	28 30       	cpi	r18, 0x08	; 8
    20a8:	51 f1       	breq	.+84     	; 0x20fe <__ultoa_invert+0x5c>
    20aa:	20 31       	cpi	r18, 0x10	; 16
    20ac:	81 f1       	breq	.+96     	; 0x210e <__ultoa_invert+0x6c>
    20ae:	e8 94       	clt
    20b0:	6f 93       	push	r22
    20b2:	6e 7f       	andi	r22, 0xFE	; 254
    20b4:	6e 5f       	subi	r22, 0xFE	; 254
    20b6:	7f 4f       	sbci	r23, 0xFF	; 255
    20b8:	8f 4f       	sbci	r24, 0xFF	; 255
    20ba:	9f 4f       	sbci	r25, 0xFF	; 255
    20bc:	af 4f       	sbci	r26, 0xFF	; 255
    20be:	b1 e0       	ldi	r27, 0x01	; 1
    20c0:	3e d0       	rcall	.+124    	; 0x213e <__ultoa_invert+0x9c>
    20c2:	b4 e0       	ldi	r27, 0x04	; 4
    20c4:	3c d0       	rcall	.+120    	; 0x213e <__ultoa_invert+0x9c>
    20c6:	67 0f       	add	r22, r23
    20c8:	78 1f       	adc	r23, r24
    20ca:	89 1f       	adc	r24, r25
    20cc:	9a 1f       	adc	r25, r26
    20ce:	a1 1d       	adc	r26, r1
    20d0:	68 0f       	add	r22, r24
    20d2:	79 1f       	adc	r23, r25
    20d4:	8a 1f       	adc	r24, r26
    20d6:	91 1d       	adc	r25, r1
    20d8:	a1 1d       	adc	r26, r1
    20da:	6a 0f       	add	r22, r26
    20dc:	71 1d       	adc	r23, r1
    20de:	81 1d       	adc	r24, r1
    20e0:	91 1d       	adc	r25, r1
    20e2:	a1 1d       	adc	r26, r1
    20e4:	20 d0       	rcall	.+64     	; 0x2126 <__ultoa_invert+0x84>
    20e6:	09 f4       	brne	.+2      	; 0x20ea <__ultoa_invert+0x48>
    20e8:	68 94       	set
    20ea:	3f 91       	pop	r19
    20ec:	2a e0       	ldi	r18, 0x0A	; 10
    20ee:	26 9f       	mul	r18, r22
    20f0:	11 24       	eor	r1, r1
    20f2:	30 19       	sub	r19, r0
    20f4:	30 5d       	subi	r19, 0xD0	; 208
    20f6:	31 93       	st	Z+, r19
    20f8:	de f6       	brtc	.-74     	; 0x20b0 <__ultoa_invert+0xe>
    20fa:	cf 01       	movw	r24, r30
    20fc:	08 95       	ret
    20fe:	46 2f       	mov	r20, r22
    2100:	47 70       	andi	r20, 0x07	; 7
    2102:	40 5d       	subi	r20, 0xD0	; 208
    2104:	41 93       	st	Z+, r20
    2106:	b3 e0       	ldi	r27, 0x03	; 3
    2108:	0f d0       	rcall	.+30     	; 0x2128 <__ultoa_invert+0x86>
    210a:	c9 f7       	brne	.-14     	; 0x20fe <__ultoa_invert+0x5c>
    210c:	f6 cf       	rjmp	.-20     	; 0x20fa <__ultoa_invert+0x58>
    210e:	46 2f       	mov	r20, r22
    2110:	4f 70       	andi	r20, 0x0F	; 15
    2112:	40 5d       	subi	r20, 0xD0	; 208
    2114:	4a 33       	cpi	r20, 0x3A	; 58
    2116:	18 f0       	brcs	.+6      	; 0x211e <__ultoa_invert+0x7c>
    2118:	49 5d       	subi	r20, 0xD9	; 217
    211a:	31 fd       	sbrc	r19, 1
    211c:	40 52       	subi	r20, 0x20	; 32
    211e:	41 93       	st	Z+, r20
    2120:	02 d0       	rcall	.+4      	; 0x2126 <__ultoa_invert+0x84>
    2122:	a9 f7       	brne	.-22     	; 0x210e <__ultoa_invert+0x6c>
    2124:	ea cf       	rjmp	.-44     	; 0x20fa <__ultoa_invert+0x58>
    2126:	b4 e0       	ldi	r27, 0x04	; 4
    2128:	a6 95       	lsr	r26
    212a:	97 95       	ror	r25
    212c:	87 95       	ror	r24
    212e:	77 95       	ror	r23
    2130:	67 95       	ror	r22
    2132:	ba 95       	dec	r27
    2134:	c9 f7       	brne	.-14     	; 0x2128 <__ultoa_invert+0x86>
    2136:	00 97       	sbiw	r24, 0x00	; 0
    2138:	61 05       	cpc	r22, r1
    213a:	71 05       	cpc	r23, r1
    213c:	08 95       	ret
    213e:	9b 01       	movw	r18, r22
    2140:	ac 01       	movw	r20, r24
    2142:	0a 2e       	mov	r0, r26
    2144:	06 94       	lsr	r0
    2146:	57 95       	ror	r21
    2148:	47 95       	ror	r20
    214a:	37 95       	ror	r19
    214c:	27 95       	ror	r18
    214e:	ba 95       	dec	r27
    2150:	c9 f7       	brne	.-14     	; 0x2144 <__ultoa_invert+0xa2>
    2152:	62 0f       	add	r22, r18
    2154:	73 1f       	adc	r23, r19
    2156:	84 1f       	adc	r24, r20
    2158:	95 1f       	adc	r25, r21
    215a:	a0 1d       	adc	r26, r0
    215c:	08 95       	ret

0000215e <__prologue_saves__>:
    215e:	2f 92       	push	r2
    2160:	3f 92       	push	r3
    2162:	4f 92       	push	r4
    2164:	5f 92       	push	r5
    2166:	6f 92       	push	r6
    2168:	7f 92       	push	r7
    216a:	8f 92       	push	r8
    216c:	9f 92       	push	r9
    216e:	af 92       	push	r10
    2170:	bf 92       	push	r11
    2172:	cf 92       	push	r12
    2174:	df 92       	push	r13
    2176:	ef 92       	push	r14
    2178:	ff 92       	push	r15
    217a:	0f 93       	push	r16
    217c:	1f 93       	push	r17
    217e:	cf 93       	push	r28
    2180:	df 93       	push	r29
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    2186:	ca 1b       	sub	r28, r26
    2188:	db 0b       	sbc	r29, r27
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	de bf       	out	0x3e, r29	; 62
    2190:	0f be       	out	0x3f, r0	; 63
    2192:	cd bf       	out	0x3d, r28	; 61
    2194:	09 94       	ijmp

00002196 <__epilogue_restores__>:
    2196:	2a 88       	ldd	r2, Y+18	; 0x12
    2198:	39 88       	ldd	r3, Y+17	; 0x11
    219a:	48 88       	ldd	r4, Y+16	; 0x10
    219c:	5f 84       	ldd	r5, Y+15	; 0x0f
    219e:	6e 84       	ldd	r6, Y+14	; 0x0e
    21a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    21a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    21a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    21a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    21a8:	b9 84       	ldd	r11, Y+9	; 0x09
    21aa:	c8 84       	ldd	r12, Y+8	; 0x08
    21ac:	df 80       	ldd	r13, Y+7	; 0x07
    21ae:	ee 80       	ldd	r14, Y+6	; 0x06
    21b0:	fd 80       	ldd	r15, Y+5	; 0x05
    21b2:	0c 81       	ldd	r16, Y+4	; 0x04
    21b4:	1b 81       	ldd	r17, Y+3	; 0x03
    21b6:	aa 81       	ldd	r26, Y+2	; 0x02
    21b8:	b9 81       	ldd	r27, Y+1	; 0x01
    21ba:	ce 0f       	add	r28, r30
    21bc:	d1 1d       	adc	r29, r1
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	cd bf       	out	0x3d, r28	; 61
    21c8:	ed 01       	movw	r28, r26
    21ca:	08 95       	ret

000021cc <_exit>:
    21cc:	f8 94       	cli

000021ce <__stop_program>:
    21ce:	ff cf       	rjmp	.-2      	; 0x21ce <__stop_program>
