
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002e8  00800100  00001f62  00001ff6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  008003e8  008003e8  000022de  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000022de  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000300  00000000  00000000  0000233a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003763  00000000  00000000  0000263a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001178  00000000  00000000  00005d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000016eb  00000000  00000000  00006f15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000074c  00000000  00000000  00008600  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e53  00000000  00000000  00008d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001a74  00000000  00000000  00009b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002c0  00000000  00000000  0000b613  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	fa c1       	rjmp	.+1012   	; 0x402 <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <JOY_calibrate+0x220>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e2 e6       	ldi	r30, 0x62	; 98
     37c:	ff e1       	ldi	r31, 0x1F	; 31
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a8 3e       	cpi	r26, 0xE8	; 232
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	24 e0       	ldi	r18, 0x04	; 4
     38c:	a8 ee       	ldi	r26, 0xE8	; 232
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a1 31       	cpi	r26, 0x11	; 17
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	87 d0       	rcall	.+270    	; 0x4aa <main>
     39c:	0c 94 af 0f 	jmp	0x1f5e	; 0x1f5e <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 01 04 	sts	0x0401, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 ec 03 	sts	0x03EC, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 eb 03 	sts	0x03EB, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 e9 03 	sts	0x03E9, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_3>:
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	8f 93       	push	r24
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 e8 03 	sts	0x03E8, r24
     414:	8f 91       	pop	r24
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <init>:
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	1f e1       	ldi	r17, 0x1F	; 31
     42a:	e1 2e       	mov	r14, r17
     42c:	f1 2c       	mov	r15, r1
     42e:	00 e0       	ldi	r16, 0x00	; 0
     430:	10 e0       	ldi	r17, 0x00	; 0
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	4b e4       	ldi	r20, 0x4B	; 75
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e8       	ldi	r22, 0x80	; 128
     43c:	75 e2       	ldi	r23, 0x25	; 37
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <uartInit>
     446:	82 eb       	ldi	r24, 0xB2	; 178
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	0e 94 c1 0c 	call	0x1982	; 0x1982 <puts>
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	43 d2       	rcall	.+1158   	; 0x8d8 <enableXMEM>
     452:	0e 94 a9 0a 	call	0x1552	; 0x1552 <SLI_init>
     456:	52 d2       	rcall	.+1188   	; 0x8fc <JOY_init>
     458:	f6 d7       	rcall	.+4076   	; 0x1446 <OLED_init>
     45a:	0e 94 b2 0a 	call	0x1564	; 0x1564 <SPI_init>
     45e:	49 d4       	rcall	.+2194   	; 0xcf2 <MCP2515_init>
     460:	98 d0       	rcall	.+304    	; 0x592 <CAN_init>
     462:	8b b7       	in	r24, 0x3b	; 59
     464:	80 64       	ori	r24, 0x40	; 64
     466:	8b bf       	out	0x3b, r24	; 59
     468:	85 b7       	in	r24, 0x35	; 53
     46a:	82 60       	ori	r24, 0x02	; 2
     46c:	85 bf       	out	0x35, r24	; 53
     46e:	85 b7       	in	r24, 0x35	; 53
     470:	8e 7f       	andi	r24, 0xFE	; 254
     472:	85 bf       	out	0x35, r24	; 53
     474:	8b 98       	cbi	0x11, 3	; 17
     476:	93 9a       	sbi	0x12, 3	; 18
     478:	8b b7       	in	r24, 0x3b	; 59
     47a:	80 68       	ori	r24, 0x80	; 128
     47c:	8b bf       	out	0x3b, r24	; 59
     47e:	85 b7       	in	r24, 0x35	; 53
     480:	88 60       	ori	r24, 0x08	; 8
     482:	85 bf       	out	0x35, r24	; 53
     484:	85 b7       	in	r24, 0x35	; 53
     486:	8b 7f       	andi	r24, 0xFB	; 251
     488:	85 bf       	out	0x35, r24	; 53
     48a:	8b b7       	in	r24, 0x3b	; 59
     48c:	80 62       	ori	r24, 0x20	; 32
     48e:	8b bf       	out	0x3b, r24	; 59
     490:	86 b7       	in	r24, 0x36	; 54
     492:	8e 7f       	andi	r24, 0xFE	; 254
     494:	86 bf       	out	0x36, r24	; 54
     496:	32 98       	cbi	0x06, 2	; 6
     498:	3a 98       	cbi	0x07, 2	; 7
     49a:	b8 98       	cbi	0x17, 0	; 23
     49c:	c0 98       	cbi	0x18, 0	; 24
     49e:	78 94       	sei
     4a0:	1f 91       	pop	r17
     4a2:	0f 91       	pop	r16
     4a4:	ff 90       	pop	r15
     4a6:	ef 90       	pop	r14
     4a8:	08 95       	ret

000004aa <main>:
/*
=======================MAIN FUNCTION=========================
*/

int main(void)
{
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	ac 97       	sbiw	r28, 0x2c	; 44
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
	
	init();
     4be:	b0 df       	rcall	.-160    	; 0x420 <init>

// 	MCP2515_init();
// 	CAN_init();
	
	struct can_message message2send;
	message2send.id = 23;
     4c0:	87 e1       	ldi	r24, 0x17	; 23
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	9a 83       	std	Y+2, r25	; 0x02
     4c6:	89 83       	std	Y+1, r24	; 0x01
	message2send.length = 8;
     4c8:	88 e0       	ldi	r24, 0x08	; 8
     4ca:	8b 83       	std	Y+3, r24	; 0x03
	message2send.data[0] = '@';
     4cc:	80 e4       	ldi	r24, 0x40	; 64
     4ce:	8c 83       	std	Y+4, r24	; 0x04
	message2send.data[1] = '~';
     4d0:	8e e7       	ldi	r24, 0x7E	; 126
     4d2:	8d 83       	std	Y+5, r24	; 0x05
	message2send.data[2] = 'H';
     4d4:	88 e4       	ldi	r24, 0x48	; 72
     4d6:	8e 83       	std	Y+6, r24	; 0x06
	message2send.data[3] = 'l';
     4d8:	8c e6       	ldi	r24, 0x6C	; 108
     4da:	8f 83       	std	Y+7, r24	; 0x07
	message2send.data[4] = '1';
     4dc:	81 e3       	ldi	r24, 0x31	; 49
     4de:	88 87       	std	Y+8, r24	; 0x08
	message2send.data[5] = '.';
     4e0:	8e e2       	ldi	r24, 0x2E	; 46
     4e2:	89 87       	std	Y+9, r24	; 0x09
	message2send.data[6] = '/';
     4e4:	8f e2       	ldi	r24, 0x2F	; 47
     4e6:	8a 87       	std	Y+10, r24	; 0x0a
	message2send.data[7] = '5';
     4e8:	85 e3       	ldi	r24, 0x35	; 53
     4ea:	8b 87       	std	Y+11, r24	; 0x0b
	CAN_sendMessage(&message2send, 0);
     4ec:	60 e0       	ldi	r22, 0x00	; 0
     4ee:	ce 01       	movw	r24, r28
     4f0:	01 96       	adiw	r24, 0x01	; 1
     4f2:	66 d0       	rcall	.+204    	; 0x5c0 <CAN_sendMessage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4f4:	2f ef       	ldi	r18, 0xFF	; 255
     4f6:	8f e7       	ldi	r24, 0x7F	; 127
     4f8:	91 e0       	ldi	r25, 0x01	; 1
     4fa:	21 50       	subi	r18, 0x01	; 1
     4fc:	80 40       	sbci	r24, 0x00	; 0
     4fe:	90 40       	sbci	r25, 0x00	; 0
     500:	e1 f7       	brne	.-8      	; 0x4fa <main+0x50>
     502:	00 c0       	rjmp	.+0      	; 0x504 <__stack+0x5>
     504:	00 c0       	rjmp	.+0      	; 0x506 <__stack+0x7>
	_delay_ms(100);
	
	struct can_message message3send;
	message3send.id = 12;
     506:	8c e0       	ldi	r24, 0x0C	; 12
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	9d 87       	std	Y+13, r25	; 0x0d
     50c:	8c 87       	std	Y+12, r24	; 0x0c
	message3send.length = 2;
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	8e 87       	std	Y+14, r24	; 0x0e
	message3send.data[0] = 'a';
     512:	81 e6       	ldi	r24, 0x61	; 97
     514:	8f 87       	std	Y+15, r24	; 0x0f
	message3send.data[1] = '+';
     516:	8b e2       	ldi	r24, 0x2B	; 43
     518:	88 8b       	std	Y+16, r24	; 0x10
	
	uint8_t SPIcount = 0;
     51a:	10 e0       	ldi	r17, 0x00	; 0
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     51c:	0b e0       	ldi	r16, 0x0B	; 11
			
				if(SPIcount == 0)
				{
					CAN_sendMessage(&message3send, 0);
					_delay_ms(100);
					SPIcount = 1;
     51e:	ff 24       	eor	r15, r15
     520:	f3 94       	inc	r15
	uint8_t SPIcount = 0;
	
    while(1)
    {
		// statusMultifunctionBoard();
		JOY_getDirection();
     522:	ad d3       	rcall	.+1882   	; 0xc7e <JOY_getDirection>

		// todo: remove! will be included in the menu driver later
		if(JOYcalibFlag)
     524:	80 91 ea 03 	lds	r24, 0x03EA
     528:	88 23       	and	r24, r24
     52a:	19 f0       	breq	.+6      	; 0x532 <__stack+0x33>
		{
			//run joystick calibration
			JOY_calibrate();
     52c:	fa d1       	rcall	.+1012   	; 0x922 <JOY_calibrate>
			JOYcalibFlag = 0;
     52e:	10 92 ea 03 	sts	0x03EA, r1
		}

		if(activateMenuFlag)
     532:	80 91 e9 03 	lds	r24, 0x03E9
     536:	81 11       	cpse	r24, r1
		{
			MENU_activate();
     538:	54 d6       	rcall	.+3240   	; 0x11e2 <MENU_activate>
		}

		if(SPIreceivedFlag)
     53a:	80 91 e8 03 	lds	r24, 0x03E8
     53e:	88 23       	and	r24, r24
     540:	81 f3       	breq	.-32     	; 0x522 <__stack+0x23>
		{
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
     542:	6c e2       	ldi	r22, 0x2C	; 44
     544:	80 e0       	ldi	r24, 0x00	; 0
     546:	c4 d3       	rcall	.+1928   	; 0xcd0 <MCP2515_read>
     548:	83 70       	andi	r24, 0x03	; 3
     54a:	59 f3       	breq	.-42     	; 0x522 <__stack+0x23>
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     54c:	68 2f       	mov	r22, r24
     54e:	ce 01       	movw	r24, r28
     550:	82 96       	adiw	r24, 0x22	; 34
     552:	9f d0       	rcall	.+318    	; 0x692 <CAN_receiveMessage>
     554:	fe 01       	movw	r30, r28
     556:	b2 96       	adiw	r30, 0x22	; 34
     558:	de 01       	movw	r26, r28
     55a:	57 96       	adiw	r26, 0x17	; 23
     55c:	80 2f       	mov	r24, r16
     55e:	01 90       	ld	r0, Z+
     560:	0d 92       	st	X+, r0
     562:	8a 95       	dec	r24
     564:	e1 f7       	brne	.-8      	; 0x55e <__stack+0x5f>
	// 			{
	// 				printf(" %c", receivedMessage.data[i]);
	// 			}
	// 			printf("\n");

				CAN_printMessage(&receivedMessage);
     566:	ce 01       	movw	r24, r28
     568:	47 96       	adiw	r24, 0x17	; 23
     56a:	5c d1       	rcall	.+696    	; 0x824 <CAN_printMessage>
			
				SPIreceivedFlag = 0;
     56c:	10 92 e8 03 	sts	0x03E8, r1
			
				if(SPIcount == 0)
     570:	11 11       	cpse	r17, r1
     572:	d7 cf       	rjmp	.-82     	; 0x522 <__stack+0x23>
				{
					CAN_sendMessage(&message3send, 0);
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	ce 01       	movw	r24, r28
     578:	0c 96       	adiw	r24, 0x0c	; 12
     57a:	22 d0       	rcall	.+68     	; 0x5c0 <CAN_sendMessage>
     57c:	2f ef       	ldi	r18, 0xFF	; 255
     57e:	8f e7       	ldi	r24, 0x7F	; 127
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	21 50       	subi	r18, 0x01	; 1
     584:	80 40       	sbci	r24, 0x00	; 0
     586:	90 40       	sbci	r25, 0x00	; 0
     588:	e1 f7       	brne	.-8      	; 0x582 <__stack+0x83>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <__stack+0x8d>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <__stack+0x8f>
					_delay_ms(100);
					SPIcount = 1;
     58e:	1f 2d       	mov	r17, r15
     590:	c8 cf       	rjmp	.-112    	; 0x522 <__stack+0x23>

00000592 <CAN_init>:
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	43 e0       	ldi	r20, 0x03	; 3
     59c:	6b e2       	ldi	r22, 0x2B	; 43
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	bf d3       	rcall	.+1918   	; 0xd22 <MCP2515_write>
     5a4:	40 e6       	ldi	r20, 0x60	; 96
     5a6:	60 e6       	ldi	r22, 0x60	; 96
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	ba d3       	rcall	.+1908   	; 0xd22 <MCP2515_write>
     5ae:	20 e4       	ldi	r18, 0x40	; 64
     5b0:	40 ec       	ldi	r20, 0xC0	; 192
     5b2:	6f e0       	ldi	r22, 0x0F	; 15
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	c7 d3       	rcall	.+1934   	; 0xd48 <MCP2515_bitModify>
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <CAN_sendMessage>:
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
     5c8:	27 97       	sbiw	r28, 0x07	; 7
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	f8 94       	cli
     5ce:	de bf       	out	0x3e, r29	; 62
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	cd bf       	out	0x3d, r28	; 61
     5d4:	9e 83       	std	Y+6, r25	; 0x06
     5d6:	8d 83       	std	Y+5, r24	; 0x05
     5d8:	6f 83       	std	Y+7, r22	; 0x07
     5da:	8f 81       	ldd	r24, Y+7	; 0x07
     5dc:	88 2f       	mov	r24, r24
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	00 97       	sbiw	r24, 0x00	; 0
     5e2:	09 f0       	breq	.+2      	; 0x5e6 <CAN_sendMessage+0x26>
     5e4:	4d c0       	rjmp	.+154    	; 0x680 <CAN_sendMessage+0xc0>
     5e6:	8d 81       	ldd	r24, Y+5	; 0x05
     5e8:	9e 81       	ldd	r25, Y+6	; 0x06
     5ea:	fc 01       	movw	r30, r24
     5ec:	80 81       	ld	r24, Z
     5ee:	91 81       	ldd	r25, Z+1	; 0x01
     5f0:	9c 83       	std	Y+4, r25	; 0x04
     5f2:	8b 83       	std	Y+3, r24	; 0x03
     5f4:	8b 81       	ldd	r24, Y+3	; 0x03
     5f6:	82 95       	swap	r24
     5f8:	88 0f       	add	r24, r24
     5fa:	80 7e       	andi	r24, 0xE0	; 224
     5fc:	48 2f       	mov	r20, r24
     5fe:	62 e3       	ldi	r22, 0x32	; 50
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	8e d3       	rcall	.+1820   	; 0xd22 <MCP2515_write>
     606:	8b 81       	ldd	r24, Y+3	; 0x03
     608:	9c 81       	ldd	r25, Y+4	; 0x04
     60a:	96 95       	lsr	r25
     60c:	87 95       	ror	r24
     60e:	96 95       	lsr	r25
     610:	87 95       	ror	r24
     612:	96 95       	lsr	r25
     614:	87 95       	ror	r24
     616:	48 2f       	mov	r20, r24
     618:	61 e3       	ldi	r22, 0x31	; 49
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	81 d3       	rcall	.+1794   	; 0xd22 <MCP2515_write>
     620:	8d 81       	ldd	r24, Y+5	; 0x05
     622:	9e 81       	ldd	r25, Y+6	; 0x06
     624:	fc 01       	movw	r30, r24
     626:	82 81       	ldd	r24, Z+2	; 0x02
     628:	48 2f       	mov	r20, r24
     62a:	65 e3       	ldi	r22, 0x35	; 53
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	78 d3       	rcall	.+1776   	; 0xd22 <MCP2515_write>
     632:	86 e3       	ldi	r24, 0x36	; 54
     634:	89 83       	std	Y+1, r24	; 0x01
     636:	1a 82       	std	Y+2, r1	; 0x02
     638:	15 c0       	rjmp	.+42     	; 0x664 <CAN_sendMessage+0xa4>
     63a:	8a 81       	ldd	r24, Y+2	; 0x02
     63c:	88 2f       	mov	r24, r24
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	2d 81       	ldd	r18, Y+5	; 0x05
     642:	3e 81       	ldd	r19, Y+6	; 0x06
     644:	82 0f       	add	r24, r18
     646:	93 1f       	adc	r25, r19
     648:	03 96       	adiw	r24, 0x03	; 3
     64a:	fc 01       	movw	r30, r24
     64c:	80 81       	ld	r24, Z
     64e:	48 2f       	mov	r20, r24
     650:	69 81       	ldd	r22, Y+1	; 0x01
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	65 d3       	rcall	.+1738   	; 0xd22 <MCP2515_write>
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	8f 5f       	subi	r24, 0xFF	; 255
     65c:	89 83       	std	Y+1, r24	; 0x01
     65e:	8a 81       	ldd	r24, Y+2	; 0x02
     660:	8f 5f       	subi	r24, 0xFF	; 255
     662:	8a 83       	std	Y+2, r24	; 0x02
     664:	8d 81       	ldd	r24, Y+5	; 0x05
     666:	9e 81       	ldd	r25, Y+6	; 0x06
     668:	fc 01       	movw	r30, r24
     66a:	92 81       	ldd	r25, Z+2	; 0x02
     66c:	8a 81       	ldd	r24, Y+2	; 0x02
     66e:	89 17       	cp	r24, r25
     670:	20 f3       	brcs	.-56     	; 0x63a <CAN_sendMessage+0x7a>
     672:	2f ef       	ldi	r18, 0xFF	; 255
     674:	48 e0       	ldi	r20, 0x08	; 8
     676:	60 e3       	ldi	r22, 0x30	; 48
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	65 d3       	rcall	.+1738   	; 0xd48 <MCP2515_bitModify>
     67e:	00 00       	nop
     680:	27 96       	adiw	r28, 0x07	; 7
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <CAN_receiveMessage>:
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	61 97       	sbiw	r28, 0x11	; 17
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
     6aa:	98 8b       	std	Y+16, r25	; 0x10
     6ac:	8f 87       	std	Y+15, r24	; 0x0f
     6ae:	69 8b       	std	Y+17, r22	; 0x11
     6b0:	89 89       	ldd	r24, Y+17	; 0x11
     6b2:	88 2f       	mov	r24, r24
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	82 30       	cpi	r24, 0x02	; 2
     6b8:	91 05       	cpc	r25, r1
     6ba:	09 f4       	brne	.+2      	; 0x6be <CAN_receiveMessage+0x2c>
     6bc:	57 c0       	rjmp	.+174    	; 0x76c <CAN_receiveMessage+0xda>
     6be:	83 30       	cpi	r24, 0x03	; 3
     6c0:	91 05       	cpc	r25, r1
     6c2:	21 f0       	breq	.+8      	; 0x6cc <CAN_receiveMessage+0x3a>
     6c4:	81 30       	cpi	r24, 0x01	; 1
     6c6:	91 05       	cpc	r25, r1
     6c8:	09 f0       	breq	.+2      	; 0x6cc <CAN_receiveMessage+0x3a>
     6ca:	9f c0       	rjmp	.+318    	; 0x80a <CAN_receiveMessage+0x178>
     6cc:	61 e6       	ldi	r22, 0x61	; 97
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	fe d2       	rcall	.+1532   	; 0xcd0 <MCP2515_read>
     6d4:	88 2f       	mov	r24, r24
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	9d 83       	std	Y+5, r25	; 0x05
     6da:	8c 83       	std	Y+4, r24	; 0x04
     6dc:	8c 81       	ldd	r24, Y+4	; 0x04
     6de:	9d 81       	ldd	r25, Y+5	; 0x05
     6e0:	8c 01       	movw	r16, r24
     6e2:	00 0f       	add	r16, r16
     6e4:	11 1f       	adc	r17, r17
     6e6:	00 0f       	add	r16, r16
     6e8:	11 1f       	adc	r17, r17
     6ea:	00 0f       	add	r16, r16
     6ec:	11 1f       	adc	r17, r17
     6ee:	62 e6       	ldi	r22, 0x62	; 98
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	ed d2       	rcall	.+1498   	; 0xcd0 <MCP2515_read>
     6f6:	82 95       	swap	r24
     6f8:	86 95       	lsr	r24
     6fa:	87 70       	andi	r24, 0x07	; 7
     6fc:	88 2f       	mov	r24, r24
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	80 2b       	or	r24, r16
     702:	91 2b       	or	r25, r17
     704:	9d 83       	std	Y+5, r25	; 0x05
     706:	8c 83       	std	Y+4, r24	; 0x04
     708:	65 e6       	ldi	r22, 0x65	; 101
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	e0 d2       	rcall	.+1472   	; 0xcd0 <MCP2515_read>
     710:	8e 83       	std	Y+6, r24	; 0x06
     712:	86 e6       	ldi	r24, 0x66	; 102
     714:	89 83       	std	Y+1, r24	; 0x01
     716:	1a 82       	std	Y+2, r1	; 0x02
     718:	14 c0       	rjmp	.+40     	; 0x742 <CAN_receiveMessage+0xb0>
     71a:	8a 81       	ldd	r24, Y+2	; 0x02
     71c:	08 2f       	mov	r16, r24
     71e:	10 e0       	ldi	r17, 0x00	; 0
     720:	69 81       	ldd	r22, Y+1	; 0x01
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	d4 d2       	rcall	.+1448   	; 0xcd0 <MCP2515_read>
     728:	28 2f       	mov	r18, r24
     72a:	ce 01       	movw	r24, r28
     72c:	07 96       	adiw	r24, 0x07	; 7
     72e:	80 0f       	add	r24, r16
     730:	91 1f       	adc	r25, r17
     732:	fc 01       	movw	r30, r24
     734:	20 83       	st	Z, r18
     736:	89 81       	ldd	r24, Y+1	; 0x01
     738:	8f 5f       	subi	r24, 0xFF	; 255
     73a:	89 83       	std	Y+1, r24	; 0x01
     73c:	8a 81       	ldd	r24, Y+2	; 0x02
     73e:	8f 5f       	subi	r24, 0xFF	; 255
     740:	8a 83       	std	Y+2, r24	; 0x02
     742:	9e 81       	ldd	r25, Y+6	; 0x06
     744:	8a 81       	ldd	r24, Y+2	; 0x02
     746:	89 17       	cp	r24, r25
     748:	40 f3       	brcs	.-48     	; 0x71a <CAN_receiveMessage+0x88>
     74a:	20 e0       	ldi	r18, 0x00	; 0
     74c:	41 e0       	ldi	r20, 0x01	; 1
     74e:	6c e2       	ldi	r22, 0x2C	; 44
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	f9 d2       	rcall	.+1522   	; 0xd48 <MCP2515_bitModify>
     756:	8f 85       	ldd	r24, Y+15	; 0x0f
     758:	98 89       	ldd	r25, Y+16	; 0x10
     75a:	2b e0       	ldi	r18, 0x0B	; 11
     75c:	fe 01       	movw	r30, r28
     75e:	34 96       	adiw	r30, 0x04	; 4
     760:	dc 01       	movw	r26, r24
     762:	01 90       	ld	r0, Z+
     764:	0d 92       	st	X+, r0
     766:	2a 95       	dec	r18
     768:	e1 f7       	brne	.-8      	; 0x762 <CAN_receiveMessage+0xd0>
     76a:	4f c0       	rjmp	.+158    	; 0x80a <CAN_receiveMessage+0x178>
     76c:	61 e7       	ldi	r22, 0x71	; 113
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	ae d2       	rcall	.+1372   	; 0xcd0 <MCP2515_read>
     774:	88 2f       	mov	r24, r24
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	9d 83       	std	Y+5, r25	; 0x05
     77a:	8c 83       	std	Y+4, r24	; 0x04
     77c:	8c 81       	ldd	r24, Y+4	; 0x04
     77e:	9d 81       	ldd	r25, Y+5	; 0x05
     780:	8c 01       	movw	r16, r24
     782:	00 0f       	add	r16, r16
     784:	11 1f       	adc	r17, r17
     786:	00 0f       	add	r16, r16
     788:	11 1f       	adc	r17, r17
     78a:	00 0f       	add	r16, r16
     78c:	11 1f       	adc	r17, r17
     78e:	62 e7       	ldi	r22, 0x72	; 114
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	9d d2       	rcall	.+1338   	; 0xcd0 <MCP2515_read>
     796:	82 95       	swap	r24
     798:	86 95       	lsr	r24
     79a:	87 70       	andi	r24, 0x07	; 7
     79c:	88 2f       	mov	r24, r24
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	80 2b       	or	r24, r16
     7a2:	91 2b       	or	r25, r17
     7a4:	9d 83       	std	Y+5, r25	; 0x05
     7a6:	8c 83       	std	Y+4, r24	; 0x04
     7a8:	65 e7       	ldi	r22, 0x75	; 117
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	90 d2       	rcall	.+1312   	; 0xcd0 <MCP2515_read>
     7b0:	8e 83       	std	Y+6, r24	; 0x06
     7b2:	86 e7       	ldi	r24, 0x76	; 118
     7b4:	89 83       	std	Y+1, r24	; 0x01
     7b6:	1b 82       	std	Y+3, r1	; 0x03
     7b8:	14 c0       	rjmp	.+40     	; 0x7e2 <CAN_receiveMessage+0x150>
     7ba:	8b 81       	ldd	r24, Y+3	; 0x03
     7bc:	08 2f       	mov	r16, r24
     7be:	10 e0       	ldi	r17, 0x00	; 0
     7c0:	69 81       	ldd	r22, Y+1	; 0x01
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	84 d2       	rcall	.+1288   	; 0xcd0 <MCP2515_read>
     7c8:	28 2f       	mov	r18, r24
     7ca:	ce 01       	movw	r24, r28
     7cc:	07 96       	adiw	r24, 0x07	; 7
     7ce:	80 0f       	add	r24, r16
     7d0:	91 1f       	adc	r25, r17
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 83       	st	Z, r18
     7d6:	89 81       	ldd	r24, Y+1	; 0x01
     7d8:	8f 5f       	subi	r24, 0xFF	; 255
     7da:	89 83       	std	Y+1, r24	; 0x01
     7dc:	8b 81       	ldd	r24, Y+3	; 0x03
     7de:	8f 5f       	subi	r24, 0xFF	; 255
     7e0:	8b 83       	std	Y+3, r24	; 0x03
     7e2:	9e 81       	ldd	r25, Y+6	; 0x06
     7e4:	8b 81       	ldd	r24, Y+3	; 0x03
     7e6:	89 17       	cp	r24, r25
     7e8:	40 f3       	brcs	.-48     	; 0x7ba <CAN_receiveMessage+0x128>
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	42 e0       	ldi	r20, 0x02	; 2
     7ee:	6c e2       	ldi	r22, 0x2C	; 44
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	a9 d2       	rcall	.+1362   	; 0xd48 <MCP2515_bitModify>
     7f6:	8f 85       	ldd	r24, Y+15	; 0x0f
     7f8:	98 89       	ldd	r25, Y+16	; 0x10
     7fa:	2b e0       	ldi	r18, 0x0B	; 11
     7fc:	fe 01       	movw	r30, r28
     7fe:	34 96       	adiw	r30, 0x04	; 4
     800:	dc 01       	movw	r26, r24
     802:	01 90       	ld	r0, Z+
     804:	0d 92       	st	X+, r0
     806:	2a 95       	dec	r18
     808:	e1 f7       	brne	.-8      	; 0x802 <CAN_receiveMessage+0x170>
     80a:	8f 85       	ldd	r24, Y+15	; 0x0f
     80c:	98 89       	ldd	r25, Y+16	; 0x10
     80e:	61 96       	adiw	r28, 0x11	; 17
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	f8 94       	cli
     814:	de bf       	out	0x3e, r29	; 62
     816:	0f be       	out	0x3f, r0	; 63
     818:	cd bf       	out	0x3d, r28	; 61
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	1f 91       	pop	r17
     820:	0f 91       	pop	r16
     822:	08 95       	ret

00000824 <CAN_printMessage>:
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	00 d0       	rcall	.+0      	; 0x82a <CAN_printMessage+0x6>
     82a:	1f 92       	push	r1
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
     830:	9b 83       	std	Y+3, r25	; 0x03
     832:	8a 83       	std	Y+2, r24	; 0x02
     834:	8a 81       	ldd	r24, Y+2	; 0x02
     836:	9b 81       	ldd	r25, Y+3	; 0x03
     838:	fc 01       	movw	r30, r24
     83a:	82 81       	ldd	r24, Z+2	; 0x02
     83c:	28 2f       	mov	r18, r24
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	8a 81       	ldd	r24, Y+2	; 0x02
     842:	9b 81       	ldd	r25, Y+3	; 0x03
     844:	fc 01       	movw	r30, r24
     846:	80 81       	ld	r24, Z
     848:	91 81       	ldd	r25, Z+1	; 0x01
     84a:	43 2f       	mov	r20, r19
     84c:	4f 93       	push	r20
     84e:	2f 93       	push	r18
     850:	29 2f       	mov	r18, r25
     852:	2f 93       	push	r18
     854:	8f 93       	push	r24
     856:	84 e1       	ldi	r24, 0x14	; 20
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	89 2f       	mov	r24, r25
     85c:	8f 93       	push	r24
     85e:	84 e1       	ldi	r24, 0x14	; 20
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	8f 93       	push	r24
     864:	0e 94 ab 0c 	call	0x1956	; 0x1956 <printf>
     868:	0f 90       	pop	r0
     86a:	0f 90       	pop	r0
     86c:	0f 90       	pop	r0
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	19 82       	std	Y+1, r1	; 0x01
     876:	1f c0       	rjmp	.+62     	; 0x8b6 <CAN_printMessage+0x92>
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	88 2f       	mov	r24, r24
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	2a 81       	ldd	r18, Y+2	; 0x02
     880:	3b 81       	ldd	r19, Y+3	; 0x03
     882:	82 0f       	add	r24, r18
     884:	93 1f       	adc	r25, r19
     886:	03 96       	adiw	r24, 0x03	; 3
     888:	fc 01       	movw	r30, r24
     88a:	80 81       	ld	r24, Z
     88c:	88 2f       	mov	r24, r24
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	29 2f       	mov	r18, r25
     892:	2f 93       	push	r18
     894:	8f 93       	push	r24
     896:	80 e4       	ldi	r24, 0x40	; 64
     898:	91 e0       	ldi	r25, 0x01	; 1
     89a:	89 2f       	mov	r24, r25
     89c:	8f 93       	push	r24
     89e:	80 e4       	ldi	r24, 0x40	; 64
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	8f 93       	push	r24
     8a4:	0e 94 ab 0c 	call	0x1956	; 0x1956 <printf>
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	0f 90       	pop	r0
     8b0:	89 81       	ldd	r24, Y+1	; 0x01
     8b2:	8f 5f       	subi	r24, 0xFF	; 255
     8b4:	89 83       	std	Y+1, r24	; 0x01
     8b6:	8a 81       	ldd	r24, Y+2	; 0x02
     8b8:	9b 81       	ldd	r25, Y+3	; 0x03
     8ba:	fc 01       	movw	r30, r24
     8bc:	92 81       	ldd	r25, Z+2	; 0x02
     8be:	89 81       	ldd	r24, Y+1	; 0x01
     8c0:	89 17       	cp	r24, r25
     8c2:	d0 f2       	brcs	.-76     	; 0x878 <CAN_printMessage+0x54>
     8c4:	8a e0       	ldi	r24, 0x0A	; 10
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 bc 0c 	call	0x1978	; 0x1978 <putchar>
     8cc:	0f 90       	pop	r0
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	08 95       	ret

000008d8 <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     8d8:	95 b7       	in	r25, 0x35	; 53
     8da:	90 68       	ori	r25, 0x80	; 128
     8dc:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     8de:	96 b7       	in	r25, 0x36	; 54
     8e0:	98 60       	ori	r25, 0x08	; 8
     8e2:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     8e4:	88 23       	and	r24, r24
     8e6:	19 f0       	breq	.+6      	; 0x8ee <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     8e8:	80 b7       	in	r24, 0x30	; 48
     8ea:	80 62       	ori	r24, 0x20	; 32
     8ec:	80 bf       	out	0x30, r24	; 48
     8ee:	08 95       	ret

000008f0 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     8f0:	fc 01       	movw	r30, r24
     8f2:	80 81       	ld	r24, Z
	return val;
}
     8f4:	08 95       	ret

000008f6 <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     8f6:	fc 01       	movw	r30, r24
     8f8:	60 83       	st	Z, r22
     8fa:	08 95       	ret

000008fc <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     8fc:	10 92 ef 03 	sts	0x03EF, r1
     900:	10 92 ee 03 	sts	0x03EE, r1
	currentPosition.Y_abs = 0;
     904:	10 92 f1 03 	sts	0x03F1, r1
     908:	10 92 f0 03 	sts	0x03F0, r1
	currentPosition.X_per = 0;
     90c:	10 92 f3 03 	sts	0x03F3, r1
     910:	10 92 f2 03 	sts	0x03F2, r1
	currentPosition.Y_per = 0;
     914:	10 92 f5 03 	sts	0x03F5, r1
     918:	10 92 f4 03 	sts	0x03F4, r1
	currentDirection = CENTRE;
     91c:	10 92 ed 03 	sts	0x03ED, r1
     920:	08 95       	ret

00000922 <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     926:	88 d4       	rcall	.+2320   	; 0x1238 <OLED_clear>
     928:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	66 d4       	rcall	.+2252   	; 0x11fe <OLED_goto>
     932:	88 e0       	ldi	r24, 0x08	; 8
     934:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("JOY RIGHT");
     936:	b9 d4       	rcall	.+2418   	; 0x12aa <OLED_printString>
     938:	82 e1       	ldi	r24, 0x12	; 18
     93a:	92 e0       	ldi	r25, 0x02	; 2
     93c:	0e 94 c1 0c 	call	0x1982	; 0x1982 <puts>
	printf("Move JOY to the right\n");
     940:	2f ef       	ldi	r18, 0xFF	; 255
     942:	4f ef       	ldi	r20, 0xFF	; 255
     944:	52 e0       	ldi	r21, 0x02	; 2
     946:	21 50       	subi	r18, 0x01	; 1
     948:	40 40       	sbci	r20, 0x00	; 0
     94a:	50 40       	sbci	r21, 0x00	; 0
     94c:	e1 f7       	brne	.-8      	; 0x946 <JOY_calibrate+0x24>
     94e:	00 c0       	rjmp	.+0      	; 0x950 <JOY_calibrate+0x2e>
     950:	00 c0       	rjmp	.+0      	; 0x952 <JOY_calibrate+0x30>
     952:	c4 e1       	ldi	r28, 0x14	; 20
     954:	d0 e0       	ldi	r29, 0x00	; 0
     956:	60 91 06 01 	lds	r22, 0x0106
     95a:	70 91 07 01 	lds	r23, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     95e:	82 e0       	ldi	r24, 0x02	; 2
     960:	3c d6       	rcall	.+3192   	; 0x15da <ADC_request>
     962:	8f ef       	ldi	r24, 0xFF	; 255
     964:	9f e1       	ldi	r25, 0x1F	; 31
     966:	21 e0       	ldi	r18, 0x01	; 1
     968:	81 50       	subi	r24, 0x01	; 1
     96a:	90 40       	sbci	r25, 0x00	; 0
     96c:	20 40       	sbci	r18, 0x00	; 0
     96e:	e1 f7       	brne	.-8      	; 0x968 <JOY_calibrate+0x46>
     970:	00 c0       	rjmp	.+0      	; 0x972 <JOY_calibrate+0x50>
     972:	00 00       	nop
     974:	80 91 06 01 	lds	r24, 0x0106
     978:	90 91 07 01 	lds	r25, 0x0107
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     97c:	52 d6       	rcall	.+3236   	; 0x1622 <ADC_read>
     97e:	90 91 0d 01 	lds	r25, 0x010D
     982:	98 17       	cp	r25, r24
     984:	10 f4       	brcc	.+4      	; 0x98a <JOY_calibrate+0x68>
     986:	80 93 0d 01 	sts	0x010D, r24
		
		if(temp > calR) {calR = temp;}
     98a:	21 97       	sbiw	r28, 0x01	; 1
     98c:	20 97       	sbiw	r28, 0x00	; 0
     98e:	19 f7       	brne	.-58     	; 0x956 <JOY_calibrate+0x34>
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	81 e0       	ldi	r24, 0x01	; 1
	OLED_goto(0,0);
	OLED_printString("JOY RIGHT");
	printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	32 d4       	rcall	.+2148   	; 0x11fe <OLED_goto>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_goto(1,0);
     99a:	88 e2       	ldi	r24, 0x28	; 40
     99c:	92 e0       	ldi	r25, 0x02	; 2
     99e:	85 d4       	rcall	.+2314   	; 0x12aa <OLED_printString>
     9a0:	81 e3       	ldi	r24, 0x31	; 49
     9a2:	92 e0       	ldi	r25, 0x02	; 2
     9a4:	ee d7       	rcall	.+4060   	; 0x1982 <puts>
	OLED_printString("JOY LEFT");
     9a6:	4f ef       	ldi	r20, 0xFF	; 255
     9a8:	5f ef       	ldi	r21, 0xFF	; 255
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	41 50       	subi	r20, 0x01	; 1
	printf("Move JOY to the left\n");
     9ae:	50 40       	sbci	r21, 0x00	; 0
     9b0:	80 40       	sbci	r24, 0x00	; 0
     9b2:	e1 f7       	brne	.-8      	; 0x9ac <JOY_calibrate+0x8a>
     9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <JOY_calibrate+0x94>
     9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <JOY_calibrate+0x96>
     9b8:	c4 e1       	ldi	r28, 0x14	; 20
     9ba:	d0 e0       	ldi	r29, 0x00	; 0
     9bc:	60 91 06 01 	lds	r22, 0x0106
     9c0:	70 91 07 01 	lds	r23, 0x0107
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	09 d6       	rcall	.+3090   	; 0x15da <ADC_request>
     9c8:	9f ef       	ldi	r25, 0xFF	; 255
     9ca:	2f e1       	ldi	r18, 0x1F	; 31
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     9cc:	41 e0       	ldi	r20, 0x01	; 1
     9ce:	91 50       	subi	r25, 0x01	; 1
     9d0:	20 40       	sbci	r18, 0x00	; 0
     9d2:	40 40       	sbci	r20, 0x00	; 0
     9d4:	e1 f7       	brne	.-8      	; 0x9ce <JOY_calibrate+0xac>
     9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <JOY_calibrate+0xb6>
     9d8:	00 00       	nop
     9da:	80 91 06 01 	lds	r24, 0x0106
     9de:	90 91 07 01 	lds	r25, 0x0107
     9e2:	1f d6       	rcall	.+3134   	; 0x1622 <ADC_read>
     9e4:	90 91 0c 01 	lds	r25, 0x010C
     9e8:	89 17       	cp	r24, r25
     9ea:	10 f4       	brcc	.+4      	; 0x9f0 <JOY_calibrate+0xce>
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     9ec:	80 93 0c 01 	sts	0x010C, r24
     9f0:	21 97       	sbiw	r28, 0x01	; 1
     9f2:	20 97       	sbiw	r28, 0x00	; 0
     9f4:	19 f7       	brne	.-58     	; 0x9bc <JOY_calibrate+0x9a>
     9f6:	60 e0       	ldi	r22, 0x00	; 0
		
		if(temp < calL) {calL = temp;}
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	82 e0       	ldi	r24, 0x02	; 2
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	ff d3       	rcall	.+2046   	; 0x11fe <OLED_goto>
     a00:	86 e4       	ldi	r24, 0x46	; 70
     a02:	92 e0       	ldi	r25, 0x02	; 2
     a04:	52 d4       	rcall	.+2212   	; 0x12aa <OLED_printString>
	OLED_goto(1,0);
	OLED_printString("JOY LEFT");
	printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     a06:	8d e4       	ldi	r24, 0x4D	; 77
     a08:	92 e0       	ldi	r25, 0x02	; 2
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_goto(2,0);
     a0a:	bb d7       	rcall	.+3958   	; 0x1982 <puts>
     a0c:	5f ef       	ldi	r21, 0xFF	; 255
     a0e:	8f ef       	ldi	r24, 0xFF	; 255
     a10:	92 e0       	ldi	r25, 0x02	; 2
     a12:	51 50       	subi	r21, 0x01	; 1
     a14:	80 40       	sbci	r24, 0x00	; 0
	OLED_printString("JOY UP");
     a16:	90 40       	sbci	r25, 0x00	; 0
     a18:	e1 f7       	brne	.-8      	; 0xa12 <JOY_calibrate+0xf0>
     a1a:	00 c0       	rjmp	.+0      	; 0xa1c <JOY_calibrate+0xfa>
     a1c:	00 c0       	rjmp	.+0      	; 0xa1e <JOY_calibrate+0xfc>
	printf("Move JOY up\n");
     a1e:	c4 e1       	ldi	r28, 0x14	; 20
     a20:	d0 e0       	ldi	r29, 0x00	; 0
     a22:	60 91 06 01 	lds	r22, 0x0106
     a26:	70 91 07 01 	lds	r23, 0x0107
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	d6 d5       	rcall	.+2988   	; 0x15da <ADC_request>
     a2e:	2f ef       	ldi	r18, 0xFF	; 255
     a30:	4f e1       	ldi	r20, 0x1F	; 31
     a32:	51 e0       	ldi	r21, 0x01	; 1
     a34:	21 50       	subi	r18, 0x01	; 1
     a36:	40 40       	sbci	r20, 0x00	; 0
     a38:	50 40       	sbci	r21, 0x00	; 0
     a3a:	e1 f7       	brne	.-8      	; 0xa34 <JOY_calibrate+0x112>
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     a3c:	00 c0       	rjmp	.+0      	; 0xa3e <JOY_calibrate+0x11c>
     a3e:	00 00       	nop
     a40:	80 91 06 01 	lds	r24, 0x0106
     a44:	90 91 07 01 	lds	r25, 0x0107
     a48:	ec d5       	rcall	.+3032   	; 0x1622 <ADC_read>
     a4a:	90 91 0b 01 	lds	r25, 0x010B
     a4e:	98 17       	cp	r25, r24
     a50:	10 f4       	brcc	.+4      	; 0xa56 <JOY_calibrate+0x134>
     a52:	80 93 0b 01 	sts	0x010B, r24
     a56:	21 97       	sbiw	r28, 0x01	; 1
     a58:	20 97       	sbiw	r28, 0x00	; 0
     a5a:	19 f7       	brne	.-58     	; 0xa22 <JOY_calibrate+0x100>
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	83 e0       	ldi	r24, 0x03	; 3
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	cc d3       	rcall	.+1944   	; 0x11fe <OLED_goto>
     a66:	89 e5       	ldi	r24, 0x59	; 89
		
		if(temp > calUp) {calUp = temp;}
     a68:	92 e0       	ldi	r25, 0x02	; 2
     a6a:	1f d4       	rcall	.+2110   	; 0x12aa <OLED_printString>
     a6c:	82 e6       	ldi	r24, 0x62	; 98
     a6e:	92 e0       	ldi	r25, 0x02	; 2
     a70:	88 d7       	rcall	.+3856   	; 0x1982 <puts>
     a72:	8f ef       	ldi	r24, 0xFF	; 255
     a74:	9f ef       	ldi	r25, 0xFF	; 255
	OLED_goto(2,0);
	OLED_printString("JOY UP");
	printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     a76:	22 e0       	ldi	r18, 0x02	; 2
     a78:	81 50       	subi	r24, 0x01	; 1
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_goto(3,0);
     a7a:	90 40       	sbci	r25, 0x00	; 0
     a7c:	20 40       	sbci	r18, 0x00	; 0
     a7e:	e1 f7       	brne	.-8      	; 0xa78 <JOY_calibrate+0x156>
     a80:	00 c0       	rjmp	.+0      	; 0xa82 <JOY_calibrate+0x160>
     a82:	00 c0       	rjmp	.+0      	; 0xa84 <JOY_calibrate+0x162>
     a84:	c4 e1       	ldi	r28, 0x14	; 20
	OLED_printString("JOY DOWN");
     a86:	d0 e0       	ldi	r29, 0x00	; 0
     a88:	60 91 06 01 	lds	r22, 0x0106
     a8c:	70 91 07 01 	lds	r23, 0x0107
	printf("Move JOY down\n");
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	a3 d5       	rcall	.+2886   	; 0x15da <ADC_request>
     a94:	4f ef       	ldi	r20, 0xFF	; 255
     a96:	5f e1       	ldi	r21, 0x1F	; 31
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	41 50       	subi	r20, 0x01	; 1
     a9c:	50 40       	sbci	r21, 0x00	; 0
     a9e:	80 40       	sbci	r24, 0x00	; 0
     aa0:	e1 f7       	brne	.-8      	; 0xa9a <JOY_calibrate+0x178>
     aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <JOY_calibrate+0x182>
     aa4:	00 00       	nop
     aa6:	80 91 06 01 	lds	r24, 0x0106
     aaa:	90 91 07 01 	lds	r25, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     aae:	b9 d5       	rcall	.+2930   	; 0x1622 <ADC_read>
     ab0:	90 91 0a 01 	lds	r25, 0x010A
     ab4:	89 17       	cp	r24, r25
     ab6:	10 f4       	brcc	.+4      	; 0xabc <JOY_calibrate+0x19a>
     ab8:	80 93 0a 01 	sts	0x010A, r24
     abc:	21 97       	sbiw	r28, 0x01	; 1
     abe:	20 97       	sbiw	r28, 0x00	; 0
     ac0:	19 f7       	brne	.-58     	; 0xa88 <JOY_calibrate+0x166>
     ac2:	30 91 0a 01 	lds	r19, 0x010A
     ac6:	20 91 0b 01 	lds	r18, 0x010B
     aca:	90 91 0c 01 	lds	r25, 0x010C
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     ace:	80 91 0d 01 	lds	r24, 0x010D
     ad2:	1f 92       	push	r1
     ad4:	3f 93       	push	r19
     ad6:	1f 92       	push	r1
		
		if(temp < calDown) {calDown = temp;}
     ad8:	2f 93       	push	r18
     ada:	1f 92       	push	r1
     adc:	9f 93       	push	r25
     ade:	1f 92       	push	r1
     ae0:	8f 93       	push	r24
     ae2:	80 e7       	ldi	r24, 0x70	; 112
     ae4:	92 e0       	ldi	r25, 0x02	; 2
	OLED_goto(3,0);
	OLED_printString("JOY DOWN");
	printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     ae6:	9f 93       	push	r25
     ae8:	8f 93       	push	r24
		
		if(temp < calDown) {calDown = temp;}
	}
	
	
	printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
     aea:	35 d7       	rcall	.+3690   	; 0x1956 <printf>
     aec:	20 91 0b 01 	lds	r18, 0x010B
     af0:	80 91 0a 01 	lds	r24, 0x010A
     af4:	30 e0       	ldi	r19, 0x00	; 0
     af6:	28 1b       	sub	r18, r24
     af8:	31 09       	sbc	r19, r1
     afa:	c9 01       	movw	r24, r18
     afc:	4d b7       	in	r20, 0x3d	; 61
     afe:	5e b7       	in	r21, 0x3e	; 62
     b00:	46 5f       	subi	r20, 0xF6	; 246
     b02:	5f 4f       	sbci	r21, 0xFF	; 255
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	5e bf       	out	0x3e, r21	; 62
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	4d bf       	out	0x3d, r20	; 61
     b0e:	99 23       	and	r25, r25
     b10:	0c f4       	brge	.+2      	; 0xb14 <JOY_calibrate+0x1f2>
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	95 95       	asr	r25
	
	meanVert = (calUp - calDown)/2;
     b16:	87 95       	ror	r24
     b18:	80 93 09 01 	sts	0x0109, r24
     b1c:	20 91 0d 01 	lds	r18, 0x010D
     b20:	80 91 0c 01 	lds	r24, 0x010C
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	28 1b       	sub	r18, r24
     b28:	31 09       	sbc	r19, r1
     b2a:	c9 01       	movw	r24, r18
     b2c:	99 23       	and	r25, r25
     b2e:	0c f4       	brge	.+2      	; 0xb32 <JOY_calibrate+0x210>
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	95 95       	asr	r25
     b34:	87 95       	ror	r24
     b36:	80 93 08 01 	sts	0x0108, r24
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	70 e0       	ldi	r23, 0x00	; 0
     b3e:	84 e0       	ldi	r24, 0x04	; 4
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	5d d3       	rcall	.+1722   	; 0x11fe <OLED_goto>
     b44:	8a e9       	ldi	r24, 0x9A	; 154
	meanHor = (calR - calL)/2;
     b46:	92 e0       	ldi	r25, 0x02	; 2
     b48:	b0 d3       	rcall	.+1888   	; 0x12aa <OLED_printString>
     b4a:	90 91 08 01 	lds	r25, 0x0108
     b4e:	80 91 09 01 	lds	r24, 0x0109
     b52:	1f 92       	push	r1
     b54:	9f 93       	push	r25
     b56:	1f 92       	push	r1
     b58:	8f 93       	push	r24
     b5a:	85 ea       	ldi	r24, 0xA5	; 165
     b5c:	92 e0       	ldi	r25, 0x02	; 2
     b5e:	9f 93       	push	r25
     b60:	8f 93       	push	r24
     b62:	f9 d6       	rcall	.+3570   	; 0x1956 <printf>
	
	OLED_goto(4,0);
     b64:	5f ef       	ldi	r21, 0xFF	; 255
     b66:	8f ef       	ldi	r24, 0xFF	; 255
     b68:	9e e0       	ldi	r25, 0x0E	; 14
     b6a:	51 50       	subi	r21, 0x01	; 1
     b6c:	80 40       	sbci	r24, 0x00	; 0
     b6e:	90 40       	sbci	r25, 0x00	; 0
	OLED_printString("CALIB DONE");
     b70:	e1 f7       	brne	.-8      	; 0xb6a <JOY_calibrate+0x248>
     b72:	00 c0       	rjmp	.+0      	; 0xb74 <JOY_calibrate+0x252>
     b74:	00 00       	nop
     b76:	0f 90       	pop	r0
	printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	08 95       	ret

00000b88 <JOY_requestCurrentPosition>:
     b88:	88 37       	cpi	r24, 0x78	; 120
     b8a:	39 f4       	brne	.+14     	; 0xb9a <JOY_requestCurrentPosition+0x12>
     b8c:	60 91 06 01 	lds	r22, 0x0106
     b90:	70 91 07 01 	lds	r23, 0x0107
     b94:	82 e0       	ldi	r24, 0x02	; 2
     b96:	21 c5       	rjmp	.+2626   	; 0x15da <ADC_request>
     b98:	08 95       	ret
     b9a:	89 37       	cpi	r24, 0x79	; 121
     b9c:	31 f4       	brne	.+12     	; 0xbaa <JOY_requestCurrentPosition+0x22>
     b9e:	60 91 06 01 	lds	r22, 0x0106
     ba2:	70 91 07 01 	lds	r23, 0x0107
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	18 c5       	rjmp	.+2608   	; 0x15da <ADC_request>
     baa:	08 95       	ret

00000bac <JOY_updatePosition>:
     bac:	88 37       	cpi	r24, 0x78	; 120
     bae:	f9 f4       	brne	.+62     	; 0xbee <JOY_updatePosition+0x42>
     bb0:	80 91 06 01 	lds	r24, 0x0106
	_delay_ms(1000);
}
     bb4:	90 91 07 01 	lds	r25, 0x0107
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     bb8:	34 d5       	rcall	.+2664   	; 0x1622 <ADC_read>
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	90 93 ef 03 	sts	0x03EF, r25
     bc0:	80 93 ee 03 	sts	0x03EE, r24
     bc4:	20 91 08 01 	lds	r18, 0x0108
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     bc8:	60 91 08 01 	lds	r22, 0x0108
     bcc:	ac 01       	movw	r20, r24
     bce:	42 1b       	sub	r20, r18
     bd0:	51 09       	sbc	r21, r1
     bd2:	9a 01       	movw	r18, r20
     bd4:	44 e6       	ldi	r20, 0x64	; 100
     bd6:	42 9f       	mul	r20, r18
     bd8:	c0 01       	movw	r24, r0
     bda:	43 9f       	mul	r20, r19
     bdc:	90 0d       	add	r25, r0
     bde:	11 24       	eor	r1, r1
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	21 d5       	rcall	.+2626   	; 0x1626 <__divmodhi4>
     be4:	70 93 f3 03 	sts	0x03F3, r23
     be8:	60 93 f2 03 	sts	0x03F2, r22
     bec:	08 95       	ret
     bee:	89 37       	cpi	r24, 0x79	; 121
     bf0:	f1 f4       	brne	.+60     	; 0xc2e <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     bf2:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     bf6:	90 91 07 01 	lds	r25, 0x0107
     bfa:	13 d5       	rcall	.+2598   	; 0x1622 <ADC_read>
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	90 93 f1 03 	sts	0x03F1, r25
     c02:	80 93 f0 03 	sts	0x03F0, r24
     c06:	20 91 09 01 	lds	r18, 0x0109
     c0a:	60 91 09 01 	lds	r22, 0x0109
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     c0e:	ac 01       	movw	r20, r24
     c10:	42 1b       	sub	r20, r18
     c12:	51 09       	sbc	r21, r1
     c14:	9a 01       	movw	r18, r20
     c16:	44 e6       	ldi	r20, 0x64	; 100
     c18:	42 9f       	mul	r20, r18
     c1a:	c0 01       	movw	r24, r0
     c1c:	43 9f       	mul	r20, r19
     c1e:	90 0d       	add	r25, r0
     c20:	11 24       	eor	r1, r1
     c22:	70 e0       	ldi	r23, 0x00	; 0
     c24:	00 d5       	rcall	.+2560   	; 0x1626 <__divmodhi4>
     c26:	70 93 f5 03 	sts	0x03F5, r23
     c2a:	60 93 f4 03 	sts	0x03F4, r22
     c2e:	08 95       	ret

00000c30 <JOY_calculateDirection>:
     c30:	80 91 f2 03 	lds	r24, 0x03F2
     c34:	90 91 f3 03 	lds	r25, 0x03F3
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     c38:	8b 35       	cpi	r24, 0x5B	; 91
     c3a:	91 05       	cpc	r25, r1
     c3c:	24 f0       	brlt	.+8      	; 0xc46 <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     c3e:	83 e0       	ldi	r24, 0x03	; 3
     c40:	80 93 ed 03 	sts	0x03ED, r24
     c44:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     c46:	86 3a       	cpi	r24, 0xA6	; 166
     c48:	9f 4f       	sbci	r25, 0xFF	; 255
     c4a:	24 f4       	brge	.+8      	; 0xc54 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     c4c:	84 e0       	ldi	r24, 0x04	; 4
     c4e:	80 93 ed 03 	sts	0x03ED, r24
     c52:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     c54:	80 91 f4 03 	lds	r24, 0x03F4
     c58:	90 91 f5 03 	lds	r25, 0x03F5
     c5c:	8b 35       	cpi	r24, 0x5B	; 91
     c5e:	91 05       	cpc	r25, r1
     c60:	24 f0       	brlt	.+8      	; 0xc6a <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     c62:	81 e0       	ldi	r24, 0x01	; 1
     c64:	80 93 ed 03 	sts	0x03ED, r24
     c68:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     c6a:	86 3a       	cpi	r24, 0xA6	; 166
     c6c:	9f 4f       	sbci	r25, 0xFF	; 255
     c6e:	24 f4       	brge	.+8      	; 0xc78 <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     c70:	82 e0       	ldi	r24, 0x02	; 2
     c72:	80 93 ed 03 	sts	0x03ED, r24
     c76:	08 95       	ret
	else{currentDirection = CENTRE;}
     c78:	10 92 ed 03 	sts	0x03ED, r1
     c7c:	08 95       	ret

00000c7e <JOY_getDirection>:
// Before the value is returned, the values of position in x and y direction are 
// requested from the ADC and written to the currentPosition and 
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
     c7e:	88 e7       	ldi	r24, 0x78	; 120
     c80:	83 df       	rcall	.-250    	; 0xb88 <JOY_requestCurrentPosition>
     c82:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c84:	8a 95       	dec	r24
     c86:	f1 f7       	brne	.-4      	; 0xc84 <JOY_getDirection+0x6>
     c88:	00 00       	nop
     c8a:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     c8c:	8f df       	rcall	.-226    	; 0xbac <JOY_updatePosition>
     c8e:	89 e7       	ldi	r24, 0x79	; 121
     c90:	7b df       	rcall	.-266    	; 0xb88 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     c92:	82 e6       	ldi	r24, 0x62	; 98
     c94:	8a 95       	dec	r24
     c96:	f1 f7       	brne	.-4      	; 0xc94 <JOY_getDirection+0x16>
     c98:	00 00       	nop
     c9a:	89 e7       	ldi	r24, 0x79	; 121
     c9c:	87 df       	rcall	.-242    	; 0xbac <JOY_updatePosition>
     c9e:	c8 df       	rcall	.-112    	; 0xc30 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     ca0:	80 91 ed 03 	lds	r24, 0x03ED
     ca4:	08 95       	ret

00000ca6 <MCP2515_reset>:
	//printf("finished MCP2515_init\n");
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
     ca6:	cf 93       	push	r28
     ca8:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
     caa:	6e d4       	rcall	.+2268   	; 0x1588 <SPI_activateSlave>
     cac:	80 ec       	ldi	r24, 0xC0	; 192
	SPI_send(MCP_RESET);
     cae:	62 d4       	rcall	.+2244   	; 0x1574 <SPI_send>
     cb0:	8c ec       	ldi	r24, 0xCC	; 204
     cb2:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cb4:	01 97       	sbiw	r24, 0x01	; 1
     cb6:	f1 f7       	brne	.-4      	; 0xcb4 <MCP2515_reset+0xe>
     cb8:	00 c0       	rjmp	.+0      	; 0xcba <MCP2515_reset+0x14>
     cba:	00 00       	nop
     cbc:	8c 2f       	mov	r24, r28
     cbe:	68 d4       	rcall	.+2256   	; 0x1590 <SPI_deactivateSlave>
	_delay_ms(1);
	SPI_deactivateSlave(slave);
     cc0:	8f ef       	ldi	r24, 0xFF	; 255
     cc2:	9f e2       	ldi	r25, 0x2F	; 47
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	f1 f7       	brne	.-4      	; 0xcc4 <MCP2515_reset+0x1e>
     cc8:	00 c0       	rjmp	.+0      	; 0xcca <MCP2515_reset+0x24>
     cca:	00 00       	nop
     ccc:	cf 91       	pop	r28
     cce:	08 95       	ret

00000cd0 <MCP2515_read>:
     cd0:	cf 93       	push	r28
	_delay_ms(10);
}
     cd2:	df 93       	push	r29
     cd4:	c8 2f       	mov	r28, r24

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
     cd6:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
     cd8:	57 d4       	rcall	.+2222   	; 0x1588 <SPI_activateSlave>
     cda:	83 e0       	ldi	r24, 0x03	; 3
	SPI_send(MCP_READ);
     cdc:	4b d4       	rcall	.+2198   	; 0x1574 <SPI_send>
     cde:	8d 2f       	mov	r24, r29
     ce0:	49 d4       	rcall	.+2194   	; 0x1574 <SPI_send>
	SPI_send(address);
     ce2:	4c d4       	rcall	.+2200   	; 0x157c <SPI_receive>
     ce4:	d8 2f       	mov	r29, r24
     ce6:	8c 2f       	mov	r24, r28
	
	uint8_t result;
	result = SPI_receive();
     ce8:	53 d4       	rcall	.+2214   	; 0x1590 <SPI_deactivateSlave>
     cea:	8d 2f       	mov	r24, r29
     cec:	df 91       	pop	r29
	
	SPI_deactivateSlave(slave);
     cee:	cf 91       	pop	r28
     cf0:	08 95       	ret

00000cf2 <MCP2515_init>:
     cf2:	80 e0       	ldi	r24, 0x00	; 0
	return result;
}
     cf4:	d8 df       	rcall	.-80     	; 0xca6 <MCP2515_reset>
     cf6:	6e e0       	ldi	r22, 0x0E	; 14
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	ea df       	rcall	.-44     	; 0xcd0 <MCP2515_read>
{
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
	
	// Self-test
	uint8_t value;
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
     cfc:	98 2f       	mov	r25, r24
     cfe:	90 7e       	andi	r25, 0xE0	; 224
	//printf("CANSTAT: %#x\n", value);
	if((value & MODE_MASK) != MODE_CONFIG) 
     d00:	90 38       	cpi	r25, 0x80	; 128
     d02:	69 f0       	breq	.+26     	; 0xd1e <MCP2515_init+0x2c>
     d04:	1f 92       	push	r1
     d06:	8f 93       	push	r24
	{
		printf("MCP2515 is NOT in configuration mode after reset! Value: %d\n", value);
     d08:	8a ec       	ldi	r24, 0xCA	; 202
     d0a:	92 e0       	ldi	r25, 0x02	; 2
     d0c:	9f 93       	push	r25
     d0e:	8f 93       	push	r24
     d10:	22 d6       	rcall	.+3140   	; 0x1956 <printf>
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
		return 1;
     d18:	0f 90       	pop	r0
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	08 95       	ret
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	08 95       	ret

00000d22 <MCP2515_write>:
     d22:	1f 93       	push	r17
	}
	
	//printf("finished MCP2515_init\n");
	return 0;
     d24:	cf 93       	push	r28
}
     d26:	df 93       	push	r29
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_write(SPI_SLAVES slave, uint8_t address, uint8_t data)
{
     d28:	c8 2f       	mov	r28, r24
     d2a:	16 2f       	mov	r17, r22
     d2c:	d4 2f       	mov	r29, r20
	SPI_activateSlave(slave);
     d2e:	2c d4       	rcall	.+2136   	; 0x1588 <SPI_activateSlave>
     d30:	82 e0       	ldi	r24, 0x02	; 2
	SPI_send(MCP_WRITE);
     d32:	20 d4       	rcall	.+2112   	; 0x1574 <SPI_send>
     d34:	81 2f       	mov	r24, r17
     d36:	1e d4       	rcall	.+2108   	; 0x1574 <SPI_send>
	SPI_send(address);
     d38:	8d 2f       	mov	r24, r29
     d3a:	1c d4       	rcall	.+2104   	; 0x1574 <SPI_send>
     d3c:	8c 2f       	mov	r24, r28
	SPI_send(data);
     d3e:	28 d4       	rcall	.+2128   	; 0x1590 <SPI_deactivateSlave>
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
	SPI_deactivateSlave(slave);
     d44:	1f 91       	pop	r17
     d46:	08 95       	ret

00000d48 <MCP2515_bitModify>:
     d48:	0f 93       	push	r16
}
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	c8 2f       	mov	r28, r24
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_bitModify(SPI_SLAVES slave, uint8_t register2change, uint8_t mask, uint8_t newValue)
{
     d52:	06 2f       	mov	r16, r22
     d54:	14 2f       	mov	r17, r20
     d56:	d2 2f       	mov	r29, r18
	SPI_activateSlave(slave);
     d58:	17 d4       	rcall	.+2094   	; 0x1588 <SPI_activateSlave>
     d5a:	85 e0       	ldi	r24, 0x05	; 5
	
	SPI_send(MCP_BITMOD);
     d5c:	0b d4       	rcall	.+2070   	; 0x1574 <SPI_send>
     d5e:	80 2f       	mov	r24, r16
     d60:	09 d4       	rcall	.+2066   	; 0x1574 <SPI_send>
	SPI_send(register2change);
     d62:	81 2f       	mov	r24, r17
     d64:	07 d4       	rcall	.+2062   	; 0x1574 <SPI_send>
     d66:	8d 2f       	mov	r24, r29
	SPI_send(mask);
     d68:	05 d4       	rcall	.+2058   	; 0x1574 <SPI_send>
     d6a:	8c 2f       	mov	r24, r28
     d6c:	11 d4       	rcall	.+2082   	; 0x1590 <SPI_deactivateSlave>
	SPI_send(newValue);
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
	
	SPI_deactivateSlave(slave);
     d74:	0f 91       	pop	r16
     d76:	08 95       	ret

00000d78 <startGame>:

int menuFrameOffset = 10; //Columns from left frame border
//******************************************************************************************

void startGame()
{
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
	OLED_clear();
     d7c:	5d d2       	rcall	.+1210   	; 0x1238 <OLED_clear>
     d7e:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	3b d2       	rcall	.+1142   	; 0x11fe <OLED_goto>
     d88:	8d e1       	ldi	r24, 0x1D	; 29
     d8a:	93 e0       	ldi	r25, 0x03	; 3
	OLED_printString("START");
     d8c:	8e d2       	rcall	.+1308   	; 0x12aa <OLED_printString>
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_goto(3,0);
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	33 d2       	rcall	.+1126   	; 0x11fe <OLED_goto>
     d98:	ce e0       	ldi	r28, 0x0E	; 14
     d9a:	d0 e0       	ldi	r29, 0x00	; 0
     d9c:	83 e2       	ldi	r24, 0x23	; 35
     d9e:	93 e0       	ldi	r25, 0x03	; 3
     da0:	84 d2       	rcall	.+1288   	; 0x12aa <OLED_printString>
     da2:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     da4:	8f e7       	ldi	r24, 0x7F	; 127
     da6:	97 e0       	ldi	r25, 0x07	; 7
     da8:	21 50       	subi	r18, 0x01	; 1
     daa:	80 40       	sbci	r24, 0x00	; 0
     dac:	90 40       	sbci	r25, 0x00	; 0
     dae:	e1 f7       	brne	.-8      	; 0xda8 <startGame+0x30>
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <startGame+0x3a>
     db2:	00 00       	nop
     db4:	21 97       	sbiw	r28, 0x01	; 1
     db6:	20 97       	sbiw	r28, 0x00	; 0
     db8:	89 f7       	brne	.-30     	; 0xd9c <startGame+0x24>
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	85 e0       	ldi	r24, 0x05	; 5
	OLED_goto(0,0);
	OLED_printString("START");
	
	OLED_goto(3,0);
	
	for(int i = 14; i > 0; i--)
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	1d d2       	rcall	.+1082   	; 0x11fe <OLED_goto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_goto(5,0);
     dc4:	85 e2       	ldi	r24, 0x25	; 37
     dc6:	93 e0       	ldi	r25, 0x03	; 3
     dc8:	70 d2       	rcall	.+1248   	; 0x12aa <OLED_printString>
     dca:	2f ef       	ldi	r18, 0xFF	; 255
     dcc:	8f ef       	ldi	r24, 0xFF	; 255
     dce:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     dd0:	21 50       	subi	r18, 0x01	; 1
     dd2:	80 40       	sbci	r24, 0x00	; 0
     dd4:	90 40       	sbci	r25, 0x00	; 0
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <startGame+0x58>
     dd8:	00 c0       	rjmp	.+0      	; 0xdda <startGame+0x62>
     dda:	00 c0       	rjmp	.+0      	; 0xddc <startGame+0x64>
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	08 95       	ret

00000de2 <MENU_addMenuItem>:
     de2:	cf 92       	push	r12
     de4:	df 92       	push	r13
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
	_delay_ms(3000);
}
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     df0:	df 93       	push	r29
     df2:	8c 01       	movw	r16, r24
     df4:	7b 01       	movw	r14, r22
     df6:	6a 01       	movw	r12, r20
     df8:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     dfa:	80 91 f9 03 	lds	r24, 0x03F9
     dfe:	90 91 fa 03 	lds	r25, 0x03FA
     e02:	89 2b       	or	r24, r25
     e04:	19 f0       	breq	.+6      	; 0xe0c <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     e06:	8e e2       	ldi	r24, 0x2E	; 46
     e08:	93 e0       	ldi	r25, 0x03	; 3
     e0a:	bb d5       	rcall	.+2934   	; 0x1982 <puts>
     e0c:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	31 d4       	rcall	.+2146   	; 0x1674 <malloc>
     e12:	fc 01       	movw	r30, r24
     e14:	90 93 fa 03 	sts	0x03FA, r25
     e18:	80 93 f9 03 	sts	0x03F9, r24
     e1c:	f3 82       	std	Z+3, r15	; 0x03
     e1e:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     e20:	11 83       	std	Z+1, r17	; 0x01
     e22:	00 83       	st	Z, r16
	currItem->name = name;
     e24:	cd 2b       	or	r28, r29
     e26:	39 f0       	breq	.+14     	; 0xe36 <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     e28:	d5 82       	std	Z+5, r13	; 0x05
     e2a:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     e30:	97 83       	std	Z+7, r25	; 0x07
     e32:	86 83       	std	Z+6, r24	; 0x06
     e34:	04 c0       	rjmp	.+8      	; 0xe3e <MENU_addMenuItem+0x5c>
     e36:	15 82       	std	Z+5, r1	; 0x05
     e38:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     e3a:	17 82       	std	Z+7, r1	; 0x07
     e3c:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
	}
}
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	ff 90       	pop	r15
     e48:	ef 90       	pop	r14
     e4a:	df 90       	pop	r13
     e4c:	cf 90       	pop	r12
     e4e:	08 95       	ret

00000e50 <MENU_buildMenus>:
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     e54:	86 e1       	ldi	r24, 0x16	; 22
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0d d4       	rcall	.+2074   	; 0x1674 <malloc>
     e5a:	ec 01       	movw	r28, r24
     e5c:	90 93 00 04 	sts	0x0400, r25
     e60:	80 93 ff 03 	sts	0x03FF, r24
     e64:	84 e4       	ldi	r24, 0x44	; 68
	mainMenu->menuName = "MainMenu";
     e66:	93 e0       	ldi	r25, 0x03	; 3
     e68:	99 83       	std	Y+1, r25	; 0x01
     e6a:	88 83       	st	Y, r24
     e6c:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     e6e:	1c 8a       	std	Y+20, r1	; 0x14
     e70:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	9b 83       	std	Y+3, r25	; 0x03
     e76:	8a 83       	std	Y+2, r24	; 0x02
     e78:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	fb d3       	rcall	.+2038   	; 0x1674 <malloc>
     e7e:	fc 01       	movw	r30, r24
     e80:	90 93 fe 03 	sts	0x03FE, r25
     e84:	80 93 fd 03 	sts	0x03FD, r24
     e88:	8d e4       	ldi	r24, 0x4D	; 77
     e8a:	93 e0       	ldi	r25, 0x03	; 3
	difficultyMenu->menuName = "DifficultyMenu";
     e8c:	91 83       	std	Z+1, r25	; 0x01
     e8e:	80 83       	st	Z, r24
     e90:	d5 8b       	std	Z+21, r29	; 0x15
     e92:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     e94:	83 e0       	ldi	r24, 0x03	; 3
     e96:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     e98:	93 83       	std	Z+3, r25	; 0x03
     e9a:	82 83       	std	Z+2, r24	; 0x02
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     ea0:	40 e0       	ldi	r20, 0x00	; 0
     ea2:	50 e0       	ldi	r21, 0x00	; 0
     ea4:	be 01       	movw	r22, r28
     ea6:	8c e5       	ldi	r24, 0x5C	; 92
     ea8:	93 e0       	ldi	r25, 0x03	; 3
     eaa:	9b df       	rcall	.-202    	; 0xde2 <MENU_addMenuItem>
     eac:	60 91 ff 03 	lds	r22, 0x03FF
     eb0:	70 91 00 04 	lds	r23, 0x0400
	mainMenu->children[0] = currItem;
     eb4:	e0 91 f9 03 	lds	r30, 0x03F9
     eb8:	f0 91 fa 03 	lds	r31, 0x03FA
     ebc:	db 01       	movw	r26, r22
     ebe:	15 96       	adiw	r26, 0x05	; 5
     ec0:	fc 93       	st	X, r31
     ec2:	ee 93       	st	-X, r30
     ec4:	14 97       	sbiw	r26, 0x04	; 4
     ec6:	8c eb       	ldi	r24, 0xBC	; 188
     ec8:	96 e0       	ldi	r25, 0x06	; 6
     eca:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
     ecc:	82 87       	std	Z+10, r24	; 0x0a
     ece:	40 91 fd 03 	lds	r20, 0x03FD
     ed2:	50 91 fe 03 	lds	r21, 0x03FE
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     ed6:	21 e0       	ldi	r18, 0x01	; 1
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	85 e6       	ldi	r24, 0x65	; 101
     edc:	93 e0       	ldi	r25, 0x03	; 3
     ede:	81 df       	rcall	.-254    	; 0xde2 <MENU_addMenuItem>
     ee0:	60 91 ff 03 	lds	r22, 0x03FF
     ee4:	70 91 00 04 	lds	r23, 0x0400
	mainMenu->children[1] = currItem;
     ee8:	80 91 f9 03 	lds	r24, 0x03F9
     eec:	90 91 fa 03 	lds	r25, 0x03FA
     ef0:	fb 01       	movw	r30, r22
     ef2:	97 83       	std	Z+7, r25	; 0x07
     ef4:	86 83       	std	Z+6, r24	; 0x06
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e0       	ldi	r20, 0x00	; 0
     efc:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     efe:	80 e7       	ldi	r24, 0x70	; 112
     f00:	93 e0       	ldi	r25, 0x03	; 3
     f02:	6f df       	rcall	.-290    	; 0xde2 <MENU_addMenuItem>
     f04:	60 91 ff 03 	lds	r22, 0x03FF
     f08:	70 91 00 04 	lds	r23, 0x0400
     f0c:	80 91 f9 03 	lds	r24, 0x03F9
	mainMenu->children[2] = currItem;
     f10:	90 91 fa 03 	lds	r25, 0x03FA
     f14:	db 01       	movw	r26, r22
     f16:	19 96       	adiw	r26, 0x09	; 9
     f18:	9c 93       	st	X, r25
     f1a:	8e 93       	st	-X, r24
     f1c:	18 97       	sbiw	r26, 0x08	; 8
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 e0       	ldi	r20, 0x00	; 0
     f24:	50 e0       	ldi	r21, 0x00	; 0
     f26:	8b e7       	ldi	r24, 0x7B	; 123
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
     f28:	93 e0       	ldi	r25, 0x03	; 3
     f2a:	5b df       	rcall	.-330    	; 0xde2 <MENU_addMenuItem>
     f2c:	60 91 ff 03 	lds	r22, 0x03FF
     f30:	70 91 00 04 	lds	r23, 0x0400
     f34:	e0 91 f9 03 	lds	r30, 0x03F9
	mainMenu->children[3] = currItem;
     f38:	f0 91 fa 03 	lds	r31, 0x03FA
     f3c:	db 01       	movw	r26, r22
     f3e:	1b 96       	adiw	r26, 0x0b	; 11
     f40:	fc 93       	st	X, r31
     f42:	ee 93       	st	-X, r30
     f44:	1a 97       	sbiw	r26, 0x0a	; 10
     f46:	81 e9       	ldi	r24, 0x91	; 145
     f48:	94 e0       	ldi	r25, 0x04	; 4
     f4a:	93 87       	std	Z+11, r25	; 0x0b
     f4c:	82 87       	std	Z+10, r24	; 0x0a
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	85 e8       	ldi	r24, 0x85	; 133
     f58:	93 e0       	ldi	r25, 0x03	; 3
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
     f5a:	43 df       	rcall	.-378    	; 0xde2 <MENU_addMenuItem>
     f5c:	e0 91 ff 03 	lds	r30, 0x03FF
     f60:	f0 91 00 04 	lds	r31, 0x0400
     f64:	80 91 f9 03 	lds	r24, 0x03F9
     f68:	90 91 fa 03 	lds	r25, 0x03FA
	mainMenu->children[4] = currItem;
     f6c:	95 87       	std	Z+13, r25	; 0x0d
     f6e:	84 87       	std	Z+12, r24	; 0x0c
     f70:	10 92 fa 03 	sts	0x03FA, r1
     f74:	10 92 f9 03 	sts	0x03F9, r1
     f78:	60 91 fd 03 	lds	r22, 0x03FD
     f7c:	70 91 fe 03 	lds	r23, 0x03FE
	
	currItem = NULL;
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	8a e8       	ldi	r24, 0x8A	; 138
     f8a:	93 e0       	ldi	r25, 0x03	; 3
     f8c:	2a df       	rcall	.-428    	; 0xde2 <MENU_addMenuItem>
     f8e:	60 91 fd 03 	lds	r22, 0x03FD
     f92:	70 91 fe 03 	lds	r23, 0x03FE
     f96:	80 91 f9 03 	lds	r24, 0x03F9
     f9a:	90 91 fa 03 	lds	r25, 0x03FA
	difficultyMenu->children[0] = currItem;
     f9e:	fb 01       	movw	r30, r22
     fa0:	95 83       	std	Z+5, r25	; 0x05
     fa2:	84 83       	std	Z+4, r24	; 0x04
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e0       	ldi	r20, 0x00	; 0
     faa:	50 e0       	ldi	r21, 0x00	; 0
     fac:	8f e8       	ldi	r24, 0x8F	; 143
     fae:	93 e0       	ldi	r25, 0x03	; 3
     fb0:	18 df       	rcall	.-464    	; 0xde2 <MENU_addMenuItem>
     fb2:	60 91 fd 03 	lds	r22, 0x03FD
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
     fb6:	70 91 fe 03 	lds	r23, 0x03FE
     fba:	80 91 f9 03 	lds	r24, 0x03F9
     fbe:	90 91 fa 03 	lds	r25, 0x03FA
     fc2:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
     fc4:	17 96       	adiw	r26, 0x07	; 7
     fc6:	9c 93       	st	X, r25
     fc8:	8e 93       	st	-X, r24
     fca:	16 97       	sbiw	r26, 0x06	; 6
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	86 e9       	ldi	r24, 0x96	; 150
     fd6:	93 e0       	ldi	r25, 0x03	; 3
     fd8:	04 df       	rcall	.-504    	; 0xde2 <MENU_addMenuItem>
     fda:	e0 91 fd 03 	lds	r30, 0x03FD
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
     fde:	f0 91 fe 03 	lds	r31, 0x03FE
     fe2:	80 91 f9 03 	lds	r24, 0x03F9
     fe6:	90 91 fa 03 	lds	r25, 0x03FA
     fea:	91 87       	std	Z+9, r25	; 0x09
     fec:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	08 95       	ret

00000ff4 <MENU_printMenuItem>:
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	ec 01       	movw	r28, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	20 97       	sbiw	r28, 0x00	; 0
     ffe:	49 f0       	breq	.+18     	; 0x1012 <MENU_printMenuItem+0x1e>
    1000:	60 91 0e 01 	lds	r22, 0x010E
}
    1004:	70 91 0f 01 	lds	r23, 0x010F

void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
    1008:	fa d0       	rcall	.+500    	; 0x11fe <OLED_goto>
    100a:	88 81       	ld	r24, Y
		OLED_printString(item->name);
    100c:	99 81       	ldd	r25, Y+1	; 0x01
    100e:	4d d1       	rcall	.+666    	; 0x12aa <OLED_printString>
    1010:	07 c0       	rjmp	.+14     	; 0x1020 <MENU_printMenuItem+0x2c>
    1012:	8b e9       	ldi	r24, 0x9B	; 155
    1014:	93 e0       	ldi	r25, 0x03	; 3
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
    1016:	9f 93       	push	r25
    1018:	8f 93       	push	r24
    101a:	9d d4       	rcall	.+2362   	; 0x1956 <printf>
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <MENU_printMenu>:
	}
}
    1026:	cf 92       	push	r12
    1028:	df 92       	push	r13
    102a:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	6c 01       	movw	r12, r24
    1038:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
    103a:	fe d0       	rcall	.+508    	; 0x1238 <OLED_clear>
    103c:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	8b d1       	rcall	.+790    	; 0x1358 <OLED_moveArrow>
    1042:	1e 14       	cp	r1, r14
    1044:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
    1046:	7c f4       	brge	.+30     	; 0x1066 <MENU_printMenu+0x40>
    1048:	86 01       	movw	r16, r12
    104a:	0c 5f       	subi	r16, 0xFC	; 252
    104c:	1f 4f       	sbci	r17, 0xFF	; 255
    104e:	c0 e0       	ldi	r28, 0x00	; 0
    1050:	d0 e0       	ldi	r29, 0x00	; 0
    1052:	be 01       	movw	r22, r28
    1054:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
    1056:	81 91       	ld	r24, Z+
    1058:	91 91       	ld	r25, Z+
    105a:	8f 01       	movw	r16, r30
    105c:	cb df       	rcall	.-106    	; 0xff4 <MENU_printMenuItem>
    105e:	21 96       	adiw	r28, 0x01	; 1
    1060:	ce 15       	cp	r28, r14
    1062:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
    1064:	b1 f7       	brne	.-20     	; 0x1052 <MENU_printMenu+0x2c>
    1066:	d0 92 fc 03 	sts	0x03FC, r13
    106a:	c0 92 fb 03 	sts	0x03FB, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
    106e:	10 92 f7 03 	sts	0x03F7, r1
    1072:	10 92 f6 03 	sts	0x03F6, r1
	
	currentPosition = 0;
    1076:	f6 01       	movw	r30, r12
    1078:	84 81       	ldd	r24, Z+4	; 0x04
    107a:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
    107c:	90 93 fa 03 	sts	0x03FA, r25
    1080:	80 93 f9 03 	sts	0x03F9, r24
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	1f 91       	pop	r17
}
    108a:	0f 91       	pop	r16
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	df 90       	pop	r13
    1092:	cf 90       	pop	r12
    1094:	08 95       	ret

00001096 <MENU_moveUp>:
    1096:	20 91 f6 03 	lds	r18, 0x03F6
    109a:	30 91 f7 03 	lds	r19, 0x03F7
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
    109e:	12 16       	cp	r1, r18
    10a0:	13 06       	cpc	r1, r19
    10a2:	bc f4       	brge	.+46     	; 0x10d2 <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
    10a4:	c9 01       	movw	r24, r18
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	90 93 f7 03 	sts	0x03F7, r25
    10ac:	80 93 f6 03 	sts	0x03F6, r24
		currItem = currentMenu->children[currentPosition];
    10b0:	e0 91 fb 03 	lds	r30, 0x03FB
    10b4:	f0 91 fc 03 	lds	r31, 0x03FC
    10b8:	2f 5f       	subi	r18, 0xFF	; 255
    10ba:	3f 4f       	sbci	r19, 0xFF	; 255
    10bc:	22 0f       	add	r18, r18
    10be:	33 1f       	adc	r19, r19
    10c0:	e2 0f       	add	r30, r18
    10c2:	f3 1f       	adc	r31, r19
    10c4:	20 81       	ld	r18, Z
    10c6:	31 81       	ldd	r19, Z+1	; 0x01
    10c8:	30 93 fa 03 	sts	0x03FA, r19
    10cc:	20 93 f9 03 	sts	0x03F9, r18
		OLED_moveArrow(currentPosition);
    10d0:	43 c1       	rjmp	.+646    	; 0x1358 <OLED_moveArrow>
    10d2:	08 95       	ret

000010d4 <MENU_moveDown>:
    10d4:	e0 91 fb 03 	lds	r30, 0x03FB
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
    10d8:	f0 91 fc 03 	lds	r31, 0x03FC
    10dc:	20 91 f6 03 	lds	r18, 0x03F6
    10e0:	30 91 f7 03 	lds	r19, 0x03F7
    10e4:	82 81       	ldd	r24, Z+2	; 0x02
    10e6:	93 81       	ldd	r25, Z+3	; 0x03
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	28 17       	cp	r18, r24
    10ec:	39 07       	cpc	r19, r25
    10ee:	a4 f4       	brge	.+40     	; 0x1118 <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
    10f0:	c9 01       	movw	r24, r18
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	90 93 f7 03 	sts	0x03F7, r25
    10f8:	80 93 f6 03 	sts	0x03F6, r24
		currItem = currentMenu->children[currentPosition];
    10fc:	2d 5f       	subi	r18, 0xFD	; 253
    10fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1100:	22 0f       	add	r18, r18
    1102:	33 1f       	adc	r19, r19
    1104:	e2 0f       	add	r30, r18
    1106:	f3 1f       	adc	r31, r19
    1108:	20 81       	ld	r18, Z
    110a:	31 81       	ldd	r19, Z+1	; 0x01
    110c:	30 93 fa 03 	sts	0x03FA, r19
    1110:	20 93 f9 03 	sts	0x03F9, r18
		OLED_moveArrow(currentPosition);
    1114:	21 c1       	rjmp	.+578    	; 0x1358 <OLED_moveArrow>
    1116:	08 95       	ret
    1118:	10 92 f7 03 	sts	0x03F7, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
    111c:	10 92 f6 03 	sts	0x03F6, r1
    1120:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
    1122:	95 81       	ldd	r25, Z+5	; 0x05
    1124:	90 93 fa 03 	sts	0x03FA, r25
    1128:	80 93 f9 03 	sts	0x03F9, r24
    112c:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	13 c1       	rjmp	.+550    	; 0x1358 <OLED_moveArrow>
    1132:	08 95       	ret

00001134 <MENU_moveLeft>:
    1134:	e0 91 fb 03 	lds	r30, 0x03FB
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
    1138:	f0 91 fc 03 	lds	r31, 0x03FC
    113c:	84 89       	ldd	r24, Z+20	; 0x14
    113e:	95 89       	ldd	r25, Z+21	; 0x15
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	21 f0       	breq	.+8      	; 0x114c <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
    1144:	fc 01       	movw	r30, r24
    1146:	62 81       	ldd	r22, Z+2	; 0x02
    1148:	73 81       	ldd	r23, Z+3	; 0x03
    114a:	6d cf       	rjmp	.-294    	; 0x1026 <MENU_printMenu>
    114c:	08 95       	ret

0000114e <MENU_reactivate>:
    114e:	80 91 fb 03 	lds	r24, 0x03FB
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
    1152:	90 91 fc 03 	lds	r25, 0x03FC
    1156:	fc 01       	movw	r30, r24
    1158:	62 81       	ldd	r22, Z+2	; 0x02
    115a:	73 81       	ldd	r23, Z+3	; 0x03
    115c:	64 df       	rcall	.-312    	; 0x1026 <MENU_printMenu>
    115e:	18 c0       	rjmp	.+48     	; 0x1190 <MENU_waitForInput>
	MENU_waitForInput();
    1160:	08 95       	ret

00001162 <MENU_moveRight>:
    1162:	e0 91 f9 03 	lds	r30, 0x03F9
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
    1166:	f0 91 fa 03 	lds	r31, 0x03FA
    116a:	86 81       	ldd	r24, Z+6	; 0x06
    116c:	97 81       	ldd	r25, Z+7	; 0x07
    116e:	89 2b       	or	r24, r25
    1170:	39 f0       	breq	.+14     	; 0x1180 <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
    1172:	84 81       	ldd	r24, Z+4	; 0x04
    1174:	95 81       	ldd	r25, Z+5	; 0x05
    1176:	fc 01       	movw	r30, r24
    1178:	62 81       	ldd	r22, Z+2	; 0x02
    117a:	73 81       	ldd	r23, Z+3	; 0x03
    117c:	54 cf       	rjmp	.-344    	; 0x1026 <MENU_printMenu>
    117e:	08 95       	ret
    1180:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
    1182:	f3 85       	ldd	r31, Z+11	; 0x0b
    1184:	e0 2d       	mov	r30, r0
    1186:	30 97       	sbiw	r30, 0x00	; 0
    1188:	11 f0       	breq	.+4      	; 0x118e <MENU_moveRight+0x2c>
    118a:	09 95       	icall
	{
		currItem->functionPtr();
    118c:	e0 cf       	rjmp	.-64     	; 0x114e <MENU_reactivate>
		MENU_reactivate();
    118e:	08 95       	ret

00001190 <MENU_waitForInput>:
    1190:	80 91 f6 03 	lds	r24, 0x03F6
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
    1194:	90 91 f7 03 	lds	r25, 0x03F7
    1198:	df d0       	rcall	.+446    	; 0x1358 <OLED_moveArrow>
    119a:	80 91 f8 03 	lds	r24, 0x03F8
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    119e:	88 23       	and	r24, r24
    11a0:	f9 f0       	breq	.+62     	; 0x11e0 <MENU_waitForInput+0x50>
    11a2:	6d dd       	rcall	.-1318   	; 0xc7e <JOY_getDirection>
	{
		currDir = JOY_getDirection();
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	71 f0       	breq	.+28     	; 0x11c4 <MENU_waitForInput+0x34>
		switch(currDir){
    11a8:	18 f4       	brcc	.+6      	; 0x11b0 <MENU_waitForInput+0x20>
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	49 f0       	breq	.+18     	; 0x11c0 <MENU_waitForInput+0x30>
    11ae:	0b c0       	rjmp	.+22     	; 0x11c6 <MENU_waitForInput+0x36>
    11b0:	83 30       	cpi	r24, 0x03	; 3
    11b2:	21 f0       	breq	.+8      	; 0x11bc <MENU_waitForInput+0x2c>
    11b4:	84 30       	cpi	r24, 0x04	; 4
    11b6:	39 f4       	brne	.+14     	; 0x11c6 <MENU_waitForInput+0x36>
    11b8:	bd df       	rcall	.-134    	; 0x1134 <MENU_moveLeft>
    11ba:	05 c0       	rjmp	.+10     	; 0x11c6 <MENU_waitForInput+0x36>
			case LEFT:
			MENU_moveLeft();
    11bc:	d2 df       	rcall	.-92     	; 0x1162 <MENU_moveRight>
    11be:	03 c0       	rjmp	.+6      	; 0x11c6 <MENU_waitForInput+0x36>
			break;
    11c0:	6a df       	rcall	.-300    	; 0x1096 <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <MENU_waitForInput+0x36>
    11c4:	87 df       	rcall	.-242    	; 0x10d4 <MENU_moveDown>
			break;
    11c6:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
    11c8:	8f e7       	ldi	r24, 0x7F	; 127
    11ca:	94 e0       	ldi	r25, 0x04	; 4
			break;
    11cc:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
    11ce:	80 40       	sbci	r24, 0x00	; 0
    11d0:	90 40       	sbci	r25, 0x00	; 0
    11d2:	e1 f7       	brne	.-8      	; 0x11cc <MENU_waitForInput+0x3c>
    11d4:	00 c0       	rjmp	.+0      	; 0x11d6 <MENU_waitForInput+0x46>
    11d6:	00 00       	nop
    11d8:	80 91 f8 03 	lds	r24, 0x03F8
    11dc:	81 11       	cpse	r24, r1
    11de:	e1 cf       	rjmp	.-62     	; 0x11a2 <MENU_waitForInput+0x12>
    11e0:	08 95       	ret

000011e2 <MENU_activate>:
    11e2:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    11e4:	80 93 f8 03 	sts	0x03F8, r24
    11e8:	33 de       	rcall	.-922    	; 0xe50 <MENU_buildMenus>
    11ea:	80 91 ff 03 	lds	r24, 0x03FF
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
    11ee:	90 91 00 04 	lds	r25, 0x0400
    11f2:	fc 01       	movw	r30, r24
    11f4:	62 81       	ldd	r22, Z+2	; 0x02
    11f6:	73 81       	ldd	r23, Z+3	; 0x03
    11f8:	16 df       	rcall	.-468    	; 0x1026 <MENU_printMenu>
    11fa:	ca cf       	rjmp	.-108    	; 0x1190 <MENU_waitForInput>
    11fc:	08 95       	ret

000011fe <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
    11fe:	26 2f       	mov	r18, r22
    1200:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
    1202:	75 95       	asr	r23
    1204:	67 95       	ror	r22
    1206:	75 95       	asr	r23
    1208:	67 95       	ror	r22
    120a:	75 95       	asr	r23
    120c:	67 95       	ror	r22
    120e:	75 95       	asr	r23
    1210:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
    1212:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
    1214:	80 55       	subi	r24, 0x50	; 80
    1216:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
    1218:	e0 91 12 01 	lds	r30, 0x0112
    121c:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1220:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
    1222:	e0 91 12 01 	lds	r30, 0x0112
    1226:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    122a:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
    122c:	e0 91 12 01 	lds	r30, 0x0112
    1230:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1234:	60 83       	st	Z, r22
    1236:	08 95       	ret

00001238 <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	c1 e0       	ldi	r28, 0x01	; 1
    1240:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1246:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	d8 df       	rcall	.-80     	; 0x11fe <OLED_goto>
    124e:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1250:	e0 91 10 01 	lds	r30, 0x0110
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    1254:	f0 91 11 01 	lds	r31, 0x0111
    1258:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    125a:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    125c:	80 38       	cpi	r24, 0x80	; 128
    125e:	c1 f7       	brne	.-16     	; 0x1250 <OLED_clear+0x18>
    1260:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1262:	9d 2f       	mov	r25, r29
    1264:	21 96       	adiw	r28, 0x01	; 1
    1266:	c9 30       	cpi	r28, 0x09	; 9
    1268:	d1 05       	cpc	r29, r1
    126a:	71 f7       	brne	.-36     	; 0x1248 <OLED_clear+0x10>
    126c:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	08 95       	ret

00001274 <OLED_printCharacter>:
    1274:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	22 0f       	add	r18, r18
    127c:	33 1f       	adc	r19, r19
    127e:	22 0f       	add	r18, r18
    1280:	33 1f       	adc	r19, r19
    1282:	22 0f       	add	r18, r18
    1284:	33 1f       	adc	r19, r19
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	20 59       	subi	r18, 0x90	; 144
    128c:	3f 4f       	sbci	r19, 0xFF	; 255
    128e:	f9 01       	movw	r30, r18
    1290:	e8 0f       	add	r30, r24
    1292:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
    1294:	e4 91       	lpm	r30, Z
    1296:	a0 91 10 01 	lds	r26, 0x0110
    129a:	b0 91 11 01 	lds	r27, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    129e:	ec 93       	st	X, r30
    12a0:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
    12a2:	88 30       	cpi	r24, 0x08	; 8
    12a4:	91 05       	cpc	r25, r1
    12a6:	99 f7       	brne	.-26     	; 0x128e <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
    12a8:	08 95       	ret

000012aa <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
    12aa:	1f 93       	push	r17
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
    12b2:	10 e0       	ldi	r17, 0x00	; 0
    12b4:	06 c0       	rjmp	.+12     	; 0x12c2 <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
    12b6:	fe 01       	movw	r30, r28
    12b8:	e8 0f       	add	r30, r24
    12ba:	f9 1f       	adc	r31, r25
    12bc:	80 81       	ld	r24, Z
    12be:	da df       	rcall	.-76     	; 0x1274 <OLED_printCharacter>
    12c0:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
    12c2:	81 2f       	mov	r24, r17
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	fe 01       	movw	r30, r28
    12c8:	01 90       	ld	r0, Z+
    12ca:	00 20       	and	r0, r0
    12cc:	e9 f7       	brne	.-6      	; 0x12c8 <OLED_printString+0x1e>
    12ce:	31 97       	sbiw	r30, 0x01	; 1
    12d0:	ec 1b       	sub	r30, r28
    12d2:	fd 0b       	sbc	r31, r29
    12d4:	8e 17       	cp	r24, r30
    12d6:	9f 07       	cpc	r25, r31
    12d8:	70 f3       	brcs	.-36     	; 0x12b6 <OLED_printString+0xc>
    12da:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	08 95       	ret

000012e2 <OLED_printArrow>:
    12e2:	e0 91 10 01 	lds	r30, 0x0110
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
    12e6:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12ea:	88 e1       	ldi	r24, 0x18	; 24
    12ec:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    12ee:	e0 91 10 01 	lds	r30, 0x0110
    12f2:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12f6:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
    12f8:	e0 91 10 01 	lds	r30, 0x0110
    12fc:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1300:	9e e7       	ldi	r25, 0x7E	; 126
    1302:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
    1304:	e0 91 10 01 	lds	r30, 0x0110
    1308:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    130c:	9c e3       	ldi	r25, 0x3C	; 60
    130e:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    1310:	e0 91 10 01 	lds	r30, 0x0110
    1314:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1318:	80 83       	st	Z, r24
    131a:	08 95       	ret

0000131c <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    131c:	1f 93       	push	r17
    131e:	cf 93       	push	r28
    1320:	df 93       	push	r29
    1322:	c1 e0       	ldi	r28, 0x01	; 1
    1324:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    132a:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	66 df       	rcall	.-308    	; 0x11fe <OLED_goto>
    1332:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1334:	e0 91 10 01 	lds	r30, 0x0110
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    1338:	f0 91 11 01 	lds	r31, 0x0111
    133c:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    133e:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1340:	85 30       	cpi	r24, 0x05	; 5
    1342:	c1 f7       	brne	.-16     	; 0x1334 <OLED_clearArrow+0x18>
    1344:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1346:	9d 2f       	mov	r25, r29
    1348:	21 96       	adiw	r28, 0x01	; 1
    134a:	c9 30       	cpi	r28, 0x09	; 9
    134c:	d1 05       	cpc	r29, r1
    134e:	71 f7       	brne	.-36     	; 0x132c <OLED_clearArrow+0x10>
    1350:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	08 95       	ret

00001358 <OLED_moveArrow>:
    1358:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    135a:	df 93       	push	r29
    135c:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
    135e:	de df       	rcall	.-68     	; 0x131c <OLED_clearArrow>
    1360:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
    1362:	70 e0       	ldi	r23, 0x00	; 0
    1364:	ce 01       	movw	r24, r28
    1366:	4b df       	rcall	.-362    	; 0x11fe <OLED_goto>
    1368:	bc df       	rcall	.-136    	; 0x12e2 <OLED_printArrow>
    136a:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
    136c:	cf 91       	pop	r28
    136e:	08 95       	ret

00001370 <OLED_setContrast>:
}
    1370:	e0 91 12 01 	lds	r30, 0x0112
    1374:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1378:	91 e8       	ldi	r25, 0x81	; 129
    137a:	90 83       	st	Z, r25
void OLED_setContrast(uint8_t contrast)
{
	// activate contrast contol
	OLED_writeByteToOLED(oled_cmd, 0x81);
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
    137c:	e0 91 12 01 	lds	r30, 0x0112
    1380:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1384:	80 83       	st	Z, r24
    1386:	08 95       	ret

00001388 <OLED_fadeIn>:
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
}

void OLED_fadeIn(void)
{
    1388:	cf 93       	push	r28
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    138a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		OLED_setContrast(i);
    138c:	8c 2f       	mov	r24, r28
    138e:	f0 df       	rcall	.-32     	; 0x1370 <OLED_setContrast>
    1390:	83 e3       	ldi	r24, 0x33	; 51
    1392:	93 e1       	ldi	r25, 0x13	; 19
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	f1 f7       	brne	.-4      	; 0x1394 <OLED_fadeIn+0xc>
    1398:	cf 5f       	subi	r28, 0xFF	; 255
}

void OLED_fadeIn(void)
{
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    139a:	cf 3f       	cpi	r28, 0xFF	; 255
    139c:	b9 f7       	brne	.-18     	; 0x138c <OLED_fadeIn+0x4>
    139e:	cf 91       	pop	r28
	{
		OLED_setContrast(i);
		_delay_ms(4);
	}
}
    13a0:	08 95       	ret

000013a2 <OLED_splashScreen>:
    13a2:	2f ef       	ldi	r18, 0xFF	; 255
    13a4:	8f ef       	ldi	r24, 0xFF	; 255
    13a6:	92 e0       	ldi	r25, 0x02	; 2
    13a8:	21 50       	subi	r18, 0x01	; 1
    13aa:	80 40       	sbci	r24, 0x00	; 0
    13ac:	90 40       	sbci	r25, 0x00	; 0
    13ae:	e1 f7       	brne	.-8      	; 0x13a8 <OLED_splashScreen+0x6>
    13b0:	00 c0       	rjmp	.+0      	; 0x13b2 <OLED_splashScreen+0x10>
    13b2:	00 c0       	rjmp	.+0      	; 0x13b4 <OLED_splashScreen+0x12>
}

void OLED_splashScreen(void)
{
	_delay_ms(200);
	OLED_setContrast(0);
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	dc df       	rcall	.-72     	; 0x1370 <OLED_setContrast>
    13b8:	64 e0       	ldi	r22, 0x04	; 4
	OLED_goto(2,4);
    13ba:	70 e0       	ldi	r23, 0x00	; 0
    13bc:	82 e0       	ldi	r24, 0x02	; 2
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	1e df       	rcall	.-452    	; 0x11fe <OLED_goto>
    13c2:	8b ea       	ldi	r24, 0xAB	; 171
    13c4:	93 e0       	ldi	r25, 0x03	; 3
	OLED_printString("Group 46 Soft");
    13c6:	71 df       	rcall	.-286    	; 0x12aa <OLED_printString>
    13c8:	df df       	rcall	.-66     	; 0x1388 <OLED_fadeIn>
    13ca:	2f ef       	ldi	r18, 0xFF	; 255
    13cc:	8f e7       	ldi	r24, 0x7F	; 127
	OLED_fadeIn();
    13ce:	97 e0       	ldi	r25, 0x07	; 7
    13d0:	21 50       	subi	r18, 0x01	; 1
    13d2:	80 40       	sbci	r24, 0x00	; 0
    13d4:	90 40       	sbci	r25, 0x00	; 0
    13d6:	e1 f7       	brne	.-8      	; 0x13d0 <OLED_splashScreen+0x2e>
    13d8:	00 c0       	rjmp	.+0      	; 0x13da <OLED_splashScreen+0x38>
    13da:	00 00       	nop
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	c8 df       	rcall	.-112    	; 0x1370 <OLED_setContrast>
    13e0:	6c e1       	ldi	r22, 0x1C	; 28
    13e2:	70 e0       	ldi	r23, 0x00	; 0
	_delay_ms(500);
	OLED_setContrast(0);
    13e4:	84 e0       	ldi	r24, 0x04	; 4
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	0a df       	rcall	.-492    	; 0x11fe <OLED_goto>
	OLED_goto(4,28);
    13ea:	89 eb       	ldi	r24, 0xB9	; 185
    13ec:	93 e0       	ldi	r25, 0x03	; 3
    13ee:	5d df       	rcall	.-326    	; 0x12aa <OLED_printString>
    13f0:	68 e1       	ldi	r22, 0x18	; 24
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	85 e0       	ldi	r24, 0x05	; 5
	OLED_printString("proudly");
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	02 df       	rcall	.-508    	; 0x11fe <OLED_goto>
    13fa:	81 ec       	ldi	r24, 0xC1	; 193
    13fc:	93 e0       	ldi	r25, 0x03	; 3
	OLED_goto(5,24);	
    13fe:	55 df       	rcall	.-342    	; 0x12aa <OLED_printString>
    1400:	c3 df       	rcall	.-122    	; 0x1388 <OLED_fadeIn>
    1402:	2f ef       	ldi	r18, 0xFF	; 255
    1404:	8f e7       	ldi	r24, 0x7F	; 127
    1406:	97 e0       	ldi	r25, 0x07	; 7
    1408:	21 50       	subi	r18, 0x01	; 1
	OLED_printString("presents");
    140a:	80 40       	sbci	r24, 0x00	; 0
    140c:	90 40       	sbci	r25, 0x00	; 0
    140e:	e1 f7       	brne	.-8      	; 0x1408 <OLED_splashScreen+0x66>
    1410:	00 c0       	rjmp	.+0      	; 0x1412 <OLED_splashScreen+0x70>
	OLED_fadeIn();
    1412:	00 00       	nop
    1414:	11 df       	rcall	.-478    	; 0x1238 <OLED_clear>
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	ab df       	rcall	.-170    	; 0x1370 <OLED_setContrast>
    141a:	6c e1       	ldi	r22, 0x1C	; 28
    141c:	70 e0       	ldi	r23, 0x00	; 0
    141e:	83 e0       	ldi	r24, 0x03	; 3
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	ed de       	rcall	.-550    	; 0x11fe <OLED_goto>
    1424:	8a ec       	ldi	r24, 0xCA	; 202
    1426:	93 e0       	ldi	r25, 0x03	; 3
	_delay_ms(500);
	
	OLED_clear();
    1428:	40 df       	rcall	.-384    	; 0x12aa <OLED_printString>
    142a:	ae df       	rcall	.-164    	; 0x1388 <OLED_fadeIn>
	OLED_setContrast(0);
    142c:	2f ef       	ldi	r18, 0xFF	; 255
    142e:	8f ef       	ldi	r24, 0xFF	; 255
    1430:	9e e0       	ldi	r25, 0x0E	; 14
	OLED_goto(3, 28);
    1432:	21 50       	subi	r18, 0x01	; 1
    1434:	80 40       	sbci	r24, 0x00	; 0
    1436:	90 40       	sbci	r25, 0x00	; 0
    1438:	e1 f7       	brne	.-8      	; 0x1432 <OLED_splashScreen+0x90>
    143a:	00 c0       	rjmp	.+0      	; 0x143c <OLED_splashScreen+0x9a>
    143c:	00 00       	nop
	OLED_printString("FIFA 18");
    143e:	fc de       	rcall	.-520    	; 0x1238 <OLED_clear>
    1440:	80 e5       	ldi	r24, 0x50	; 80
    1442:	96 cf       	rjmp	.-212    	; 0x1370 <OLED_setContrast>
    1444:	08 95       	ret

00001446 <OLED_init>:
	OLED_fadeIn();
    1446:	e0 91 12 01 	lds	r30, 0x0112
    144a:	f0 91 13 01 	lds	r31, 0x0113
    144e:	8e ea       	ldi	r24, 0xAE	; 174
    1450:	80 83       	st	Z, r24
    1452:	e0 91 12 01 	lds	r30, 0x0112
    1456:	f0 91 13 01 	lds	r31, 0x0113
    145a:	81 ea       	ldi	r24, 0xA1	; 161
	_delay_ms(1000);
	
	// clean up
	OLED_clear(); // wipe screen
    145c:	80 83       	st	Z, r24
    145e:	e0 91 12 01 	lds	r30, 0x0112
	OLED_setContrast(0x50); // back to standard contrast
    1462:	f0 91 13 01 	lds	r31, 0x0113
    1466:	8a ed       	ldi	r24, 0xDA	; 218
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1468:	80 83       	st	Z, r24
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
    146a:	e0 91 12 01 	lds	r30, 0x0112
    146e:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1472:	82 e1       	ldi	r24, 0x12	; 18
    1474:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    1476:	e0 91 12 01 	lds	r30, 0x0112
    147a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    147e:	88 ec       	ldi	r24, 0xC8	; 200
    1480:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    1482:	e0 91 12 01 	lds	r30, 0x0112
    1486:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    148a:	88 ea       	ldi	r24, 0xA8	; 168
    148c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    148e:	e0 91 12 01 	lds	r30, 0x0112
    1492:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1496:	8f e3       	ldi	r24, 0x3F	; 63
    1498:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    149a:	e0 91 12 01 	lds	r30, 0x0112
    149e:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14a2:	85 ed       	ldi	r24, 0xD5	; 213
    14a4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
    14a6:	e0 91 12 01 	lds	r30, 0x0112
    14aa:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14ae:	80 e8       	ldi	r24, 0x80	; 128
    14b0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    14b2:	e0 91 12 01 	lds	r30, 0x0112
    14b6:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14ba:	81 e8       	ldi	r24, 0x81	; 129
    14bc:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    14be:	e0 91 12 01 	lds	r30, 0x0112
    14c2:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14c6:	80 e5       	ldi	r24, 0x50	; 80
    14c8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    14ca:	e0 91 12 01 	lds	r30, 0x0112
    14ce:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14d2:	89 ed       	ldi	r24, 0xD9	; 217
    14d4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
    14d6:	e0 91 12 01 	lds	r30, 0x0112
    14da:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14de:	81 e2       	ldi	r24, 0x21	; 33
    14e0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    14e2:	e0 91 12 01 	lds	r30, 0x0112
    14e6:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14ea:	80 e2       	ldi	r24, 0x20	; 32
    14ec:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    14ee:	e0 91 12 01 	lds	r30, 0x0112
    14f2:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14f6:	82 e0       	ldi	r24, 0x02	; 2
    14f8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    14fa:	e0 91 12 01 	lds	r30, 0x0112
    14fe:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1502:	8b ed       	ldi	r24, 0xDB	; 219
    1504:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    1506:	e0 91 12 01 	lds	r30, 0x0112
    150a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    150e:	80 e3       	ldi	r24, 0x30	; 48
    1510:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    1512:	e0 91 12 01 	lds	r30, 0x0112
    1516:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    151a:	8d ea       	ldi	r24, 0xAD	; 173
    151c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    151e:	e0 91 12 01 	lds	r30, 0x0112
    1522:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1526:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    1528:	e0 91 12 01 	lds	r30, 0x0112
    152c:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1530:	84 ea       	ldi	r24, 0xA4	; 164
    1532:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    1534:	e0 91 12 01 	lds	r30, 0x0112
    1538:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    153c:	86 ea       	ldi	r24, 0xA6	; 166
    153e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    1540:	e0 91 12 01 	lds	r30, 0x0112
    1544:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1548:	8f ea       	ldi	r24, 0xAF	; 175
    154a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    154c:	75 de       	rcall	.-790    	; 0x1238 <OLED_clear>
    154e:	29 cf       	rjmp	.-430    	; 0x13a2 <OLED_splashScreen>
	OLED_splashScreen();
    1550:	08 95       	ret

00001552 <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    1552:	10 92 03 04 	sts	0x0403, r1
	currentSliPosition.L_abs = 0;
    1556:	10 92 04 04 	sts	0x0404, r1
	currentSliPosition.R_per = 0;
    155a:	10 92 05 04 	sts	0x0405, r1
	currentSliPosition.L_per = 0;
    155e:	10 92 06 04 	sts	0x0406, r1
    1562:	08 95       	ret

00001564 <SPI_init>:


void SPI_init()
{
	// Set _SS, MOSI and SCK output, all others input
	DDR_SPI = (1<<SS_CAN_CONTROLLER_PIN_MODE) | (1<<MOSI_PIN) | (1<<SCK_PIN);
    1564:	80 eb       	ldi	r24, 0xB0	; 176
    1566:	87 bb       	out	0x17, r24	; 23

	// Enable SPI, Master, set clock rate fck/4
	SPCR = (1<<SPE) | (1<<MSTR);
    1568:	80 e5       	ldi	r24, 0x50	; 80
    156a:	8d b9       	out	0x0d, r24	; 13

	// clock rate fck/2
	SPSR = (1<<SPI2X);
    156c:	81 e0       	ldi	r24, 0x01	; 1
    156e:	8e b9       	out	0x0e, r24	; 14

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORT_SPI, SS_CAN_CONTROLLER_PIN);
    1570:	c4 9a       	sbi	0x18, 4	; 24
    1572:	08 95       	ret

00001574 <SPI_send>:
}

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    1574:	8f b9       	out	0x0f, r24	; 15

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    1576:	77 9b       	sbis	0x0e, 7	; 14
    1578:	fe cf       	rjmp	.-4      	; 0x1576 <SPI_send+0x2>
}
    157a:	08 95       	ret

0000157c <SPI_receive>:

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    157c:	8f ef       	ldi	r24, 0xFF	; 255
    157e:	fa df       	rcall	.-12     	; 0x1574 <SPI_send>
    1580:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    1582:	fe cf       	rjmp	.-4      	; 0x1580 <SPI_receive+0x4>
    1584:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    1586:	08 95       	ret

00001588 <SPI_activateSlave>:

	return data;
}
    1588:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    158a:	01 c0       	rjmp	.+2      	; 0x158e <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    158c:	c4 98       	cbi	0x18, 4	; 24
    158e:	08 95       	ret

00001590 <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    1590:	81 11       	cpse	r24, r1
    1592:	01 c0       	rjmp	.+2      	; 0x1596 <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    1594:	c4 9a       	sbi	0x18, 4	; 24
    1596:	08 95       	ret

00001598 <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1598:	5d 9b       	sbis	0x0b, 5	; 11
    159a:	fe cf       	rjmp	.-4      	; 0x1598 <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    159c:	8c b9       	out	0x0c, r24	; 12
    159e:	08 95       	ret

000015a0 <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    15a0:	5f 9b       	sbis	0x0b, 7	; 11
    15a2:	fe cf       	rjmp	.-4      	; 0x15a0 <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    15a4:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
    15a6:	08 95       	ret

000015a8 <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    15a8:	ef 92       	push	r14
    15aa:	ff 92       	push	r15
    15ac:	0f 93       	push	r16
    15ae:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    15b0:	bb 27       	eor	r27, r27
    15b2:	a1 2f       	mov	r26, r17
    15b4:	90 2f       	mov	r25, r16
    15b6:	8f 2d       	mov	r24, r15
    15b8:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    15ba:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    15bc:	88 e1       	ldi	r24, 0x18	; 24
    15be:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    15c0:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    15c2:	8e e8       	ldi	r24, 0x8E	; 142
    15c4:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    15c6:	60 ed       	ldi	r22, 0xD0	; 208
    15c8:	7a e0       	ldi	r23, 0x0A	; 10
    15ca:	8c ec       	ldi	r24, 0xCC	; 204
    15cc:	9a e0       	ldi	r25, 0x0A	; 10
    15ce:	79 d1       	rcall	.+754    	; 0x18c2 <fdevopen>
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	ff 90       	pop	r15
    15d6:	ef 90       	pop	r14
    15d8:	08 95       	ret

000015da <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    15da:	9b 01       	movw	r18, r22
	
	switch(channel){
    15dc:	82 30       	cpi	r24, 0x02	; 2
    15de:	69 f0       	breq	.+26     	; 0x15fa <ADC_request+0x20>
    15e0:	18 f4       	brcc	.+6      	; 0x15e8 <ADC_request+0xe>
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	31 f0       	breq	.+12     	; 0x15f2 <ADC_request+0x18>
    15e6:	15 c0       	rjmp	.+42     	; 0x1612 <ADC_request+0x38>
    15e8:	83 30       	cpi	r24, 0x03	; 3
    15ea:	59 f0       	breq	.+22     	; 0x1602 <ADC_request+0x28>
    15ec:	84 30       	cpi	r24, 0x04	; 4
    15ee:	69 f0       	breq	.+26     	; 0x160a <ADC_request+0x30>
    15f0:	10 c0       	rjmp	.+32     	; 0x1612 <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    15f2:	64 e0       	ldi	r22, 0x04	; 4
    15f4:	c9 01       	movw	r24, r18
    15f6:	7f c9       	rjmp	.-3330   	; 0x8f6 <saveToAddress>
    15f8:	08 95       	ret
			break;
    15fa:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    15fc:	c9 01       	movw	r24, r18
    15fe:	7b c9       	rjmp	.-3338   	; 0x8f6 <saveToAddress>
    1600:	08 95       	ret
    1602:	66 e0       	ldi	r22, 0x06	; 6
			break;
    1604:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    1606:	77 c9       	rjmp	.-3346   	; 0x8f6 <saveToAddress>
    1608:	08 95       	ret
    160a:	67 e0       	ldi	r22, 0x07	; 7
    160c:	c9 01       	movw	r24, r18
			break;
    160e:	73 c9       	rjmp	.-3354   	; 0x8f6 <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    1610:	08 95       	ret
    1612:	82 ed       	ldi	r24, 0xD2	; 210
    1614:	93 e0       	ldi	r25, 0x03	; 3
    1616:	9f 93       	push	r25
			break;
    1618:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    161a:	9d d1       	rcall	.+826    	; 0x1956 <printf>
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	08 95       	ret

00001622 <ADC_read>:
    1622:	66 c9       	rjmp	.-3380   	; 0x8f0 <readFromAddress>
    1624:	08 95       	ret

00001626 <__divmodhi4>:
			break;
    1626:	97 fb       	bst	r25, 7
    1628:	07 2e       	mov	r0, r23
    162a:	16 f4       	brtc	.+4      	; 0x1630 <__divmodhi4+0xa>
    162c:	00 94       	com	r0
    162e:	06 d0       	rcall	.+12     	; 0x163c <__divmodhi4_neg1>
    1630:	77 fd       	sbrc	r23, 7
    1632:	08 d0       	rcall	.+16     	; 0x1644 <__divmodhi4_neg2>
    1634:	0b d0       	rcall	.+22     	; 0x164c <__udivmodhi4>
    1636:	07 fc       	sbrc	r0, 7
    1638:	05 d0       	rcall	.+10     	; 0x1644 <__divmodhi4_neg2>
    163a:	3e f4       	brtc	.+14     	; 0x164a <__divmodhi4_exit>

0000163c <__divmodhi4_neg1>:
    163c:	90 95       	com	r25
    163e:	81 95       	neg	r24
    1640:	9f 4f       	sbci	r25, 0xFF	; 255
    1642:	08 95       	ret

00001644 <__divmodhi4_neg2>:
    1644:	70 95       	com	r23
    1646:	61 95       	neg	r22
    1648:	7f 4f       	sbci	r23, 0xFF	; 255

0000164a <__divmodhi4_exit>:
    164a:	08 95       	ret

0000164c <__udivmodhi4>:
    164c:	aa 1b       	sub	r26, r26
    164e:	bb 1b       	sub	r27, r27
    1650:	51 e1       	ldi	r21, 0x11	; 17
    1652:	07 c0       	rjmp	.+14     	; 0x1662 <__udivmodhi4_ep>

00001654 <__udivmodhi4_loop>:
    1654:	aa 1f       	adc	r26, r26
    1656:	bb 1f       	adc	r27, r27
    1658:	a6 17       	cp	r26, r22
    165a:	b7 07       	cpc	r27, r23
    165c:	10 f0       	brcs	.+4      	; 0x1662 <__udivmodhi4_ep>
    165e:	a6 1b       	sub	r26, r22
    1660:	b7 0b       	sbc	r27, r23

00001662 <__udivmodhi4_ep>:
    1662:	88 1f       	adc	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	5a 95       	dec	r21
    1668:	a9 f7       	brne	.-22     	; 0x1654 <__udivmodhi4_loop>
    166a:	80 95       	com	r24
    166c:	90 95       	com	r25
    166e:	bc 01       	movw	r22, r24
    1670:	cd 01       	movw	r24, r26
    1672:	08 95       	ret

00001674 <malloc>:
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	82 30       	cpi	r24, 0x02	; 2
    167a:	91 05       	cpc	r25, r1
    167c:	10 f4       	brcc	.+4      	; 0x1682 <malloc+0xe>
    167e:	82 e0       	ldi	r24, 0x02	; 2
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	e0 91 09 04 	lds	r30, 0x0409
    1686:	f0 91 0a 04 	lds	r31, 0x040A
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	a0 e0       	ldi	r26, 0x00	; 0
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	30 97       	sbiw	r30, 0x00	; 0
    1694:	39 f1       	breq	.+78     	; 0x16e4 <malloc+0x70>
    1696:	40 81       	ld	r20, Z
    1698:	51 81       	ldd	r21, Z+1	; 0x01
    169a:	48 17       	cp	r20, r24
    169c:	59 07       	cpc	r21, r25
    169e:	b8 f0       	brcs	.+46     	; 0x16ce <malloc+0x5a>
    16a0:	48 17       	cp	r20, r24
    16a2:	59 07       	cpc	r21, r25
    16a4:	71 f4       	brne	.+28     	; 0x16c2 <malloc+0x4e>
    16a6:	82 81       	ldd	r24, Z+2	; 0x02
    16a8:	93 81       	ldd	r25, Z+3	; 0x03
    16aa:	10 97       	sbiw	r26, 0x00	; 0
    16ac:	29 f0       	breq	.+10     	; 0x16b8 <malloc+0x44>
    16ae:	13 96       	adiw	r26, 0x03	; 3
    16b0:	9c 93       	st	X, r25
    16b2:	8e 93       	st	-X, r24
    16b4:	12 97       	sbiw	r26, 0x02	; 2
    16b6:	2c c0       	rjmp	.+88     	; 0x1710 <malloc+0x9c>
    16b8:	90 93 0a 04 	sts	0x040A, r25
    16bc:	80 93 09 04 	sts	0x0409, r24
    16c0:	27 c0       	rjmp	.+78     	; 0x1710 <malloc+0x9c>
    16c2:	21 15       	cp	r18, r1
    16c4:	31 05       	cpc	r19, r1
    16c6:	31 f0       	breq	.+12     	; 0x16d4 <malloc+0x60>
    16c8:	42 17       	cp	r20, r18
    16ca:	53 07       	cpc	r21, r19
    16cc:	18 f0       	brcs	.+6      	; 0x16d4 <malloc+0x60>
    16ce:	a9 01       	movw	r20, r18
    16d0:	db 01       	movw	r26, r22
    16d2:	01 c0       	rjmp	.+2      	; 0x16d6 <malloc+0x62>
    16d4:	ef 01       	movw	r28, r30
    16d6:	9a 01       	movw	r18, r20
    16d8:	bd 01       	movw	r22, r26
    16da:	df 01       	movw	r26, r30
    16dc:	02 80       	ldd	r0, Z+2	; 0x02
    16de:	f3 81       	ldd	r31, Z+3	; 0x03
    16e0:	e0 2d       	mov	r30, r0
    16e2:	d7 cf       	rjmp	.-82     	; 0x1692 <malloc+0x1e>
    16e4:	21 15       	cp	r18, r1
    16e6:	31 05       	cpc	r19, r1
    16e8:	f9 f0       	breq	.+62     	; 0x1728 <malloc+0xb4>
    16ea:	28 1b       	sub	r18, r24
    16ec:	39 0b       	sbc	r19, r25
    16ee:	24 30       	cpi	r18, 0x04	; 4
    16f0:	31 05       	cpc	r19, r1
    16f2:	80 f4       	brcc	.+32     	; 0x1714 <malloc+0xa0>
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	9b 81       	ldd	r25, Y+3	; 0x03
    16f8:	61 15       	cp	r22, r1
    16fa:	71 05       	cpc	r23, r1
    16fc:	21 f0       	breq	.+8      	; 0x1706 <malloc+0x92>
    16fe:	fb 01       	movw	r30, r22
    1700:	93 83       	std	Z+3, r25	; 0x03
    1702:	82 83       	std	Z+2, r24	; 0x02
    1704:	04 c0       	rjmp	.+8      	; 0x170e <malloc+0x9a>
    1706:	90 93 0a 04 	sts	0x040A, r25
    170a:	80 93 09 04 	sts	0x0409, r24
    170e:	fe 01       	movw	r30, r28
    1710:	32 96       	adiw	r30, 0x02	; 2
    1712:	44 c0       	rjmp	.+136    	; 0x179c <malloc+0x128>
    1714:	fe 01       	movw	r30, r28
    1716:	e2 0f       	add	r30, r18
    1718:	f3 1f       	adc	r31, r19
    171a:	81 93       	st	Z+, r24
    171c:	91 93       	st	Z+, r25
    171e:	22 50       	subi	r18, 0x02	; 2
    1720:	31 09       	sbc	r19, r1
    1722:	39 83       	std	Y+1, r19	; 0x01
    1724:	28 83       	st	Y, r18
    1726:	3a c0       	rjmp	.+116    	; 0x179c <malloc+0x128>
    1728:	20 91 07 04 	lds	r18, 0x0407
    172c:	30 91 08 04 	lds	r19, 0x0408
    1730:	23 2b       	or	r18, r19
    1732:	41 f4       	brne	.+16     	; 0x1744 <malloc+0xd0>
    1734:	20 91 02 01 	lds	r18, 0x0102
    1738:	30 91 03 01 	lds	r19, 0x0103
    173c:	30 93 08 04 	sts	0x0408, r19
    1740:	20 93 07 04 	sts	0x0407, r18
    1744:	20 91 00 01 	lds	r18, 0x0100
    1748:	30 91 01 01 	lds	r19, 0x0101
    174c:	21 15       	cp	r18, r1
    174e:	31 05       	cpc	r19, r1
    1750:	41 f4       	brne	.+16     	; 0x1762 <malloc+0xee>
    1752:	2d b7       	in	r18, 0x3d	; 61
    1754:	3e b7       	in	r19, 0x3e	; 62
    1756:	40 91 04 01 	lds	r20, 0x0104
    175a:	50 91 05 01 	lds	r21, 0x0105
    175e:	24 1b       	sub	r18, r20
    1760:	35 0b       	sbc	r19, r21
    1762:	e0 91 07 04 	lds	r30, 0x0407
    1766:	f0 91 08 04 	lds	r31, 0x0408
    176a:	e2 17       	cp	r30, r18
    176c:	f3 07       	cpc	r31, r19
    176e:	a0 f4       	brcc	.+40     	; 0x1798 <malloc+0x124>
    1770:	2e 1b       	sub	r18, r30
    1772:	3f 0b       	sbc	r19, r31
    1774:	28 17       	cp	r18, r24
    1776:	39 07       	cpc	r19, r25
    1778:	78 f0       	brcs	.+30     	; 0x1798 <malloc+0x124>
    177a:	ac 01       	movw	r20, r24
    177c:	4e 5f       	subi	r20, 0xFE	; 254
    177e:	5f 4f       	sbci	r21, 0xFF	; 255
    1780:	24 17       	cp	r18, r20
    1782:	35 07       	cpc	r19, r21
    1784:	48 f0       	brcs	.+18     	; 0x1798 <malloc+0x124>
    1786:	4e 0f       	add	r20, r30
    1788:	5f 1f       	adc	r21, r31
    178a:	50 93 08 04 	sts	0x0408, r21
    178e:	40 93 07 04 	sts	0x0407, r20
    1792:	81 93       	st	Z+, r24
    1794:	91 93       	st	Z+, r25
    1796:	02 c0       	rjmp	.+4      	; 0x179c <malloc+0x128>
    1798:	e0 e0       	ldi	r30, 0x00	; 0
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	cf 01       	movw	r24, r30
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	08 95       	ret

000017a4 <free>:
    17a4:	cf 93       	push	r28
    17a6:	df 93       	push	r29
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	09 f4       	brne	.+2      	; 0x17ae <free+0xa>
    17ac:	87 c0       	rjmp	.+270    	; 0x18bc <free+0x118>
    17ae:	fc 01       	movw	r30, r24
    17b0:	32 97       	sbiw	r30, 0x02	; 2
    17b2:	13 82       	std	Z+3, r1	; 0x03
    17b4:	12 82       	std	Z+2, r1	; 0x02
    17b6:	c0 91 09 04 	lds	r28, 0x0409
    17ba:	d0 91 0a 04 	lds	r29, 0x040A
    17be:	20 97       	sbiw	r28, 0x00	; 0
    17c0:	81 f4       	brne	.+32     	; 0x17e2 <free+0x3e>
    17c2:	20 81       	ld	r18, Z
    17c4:	31 81       	ldd	r19, Z+1	; 0x01
    17c6:	28 0f       	add	r18, r24
    17c8:	39 1f       	adc	r19, r25
    17ca:	80 91 07 04 	lds	r24, 0x0407
    17ce:	90 91 08 04 	lds	r25, 0x0408
    17d2:	82 17       	cp	r24, r18
    17d4:	93 07       	cpc	r25, r19
    17d6:	79 f5       	brne	.+94     	; 0x1836 <free+0x92>
    17d8:	f0 93 08 04 	sts	0x0408, r31
    17dc:	e0 93 07 04 	sts	0x0407, r30
    17e0:	6d c0       	rjmp	.+218    	; 0x18bc <free+0x118>
    17e2:	de 01       	movw	r26, r28
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	ae 17       	cp	r26, r30
    17ea:	bf 07       	cpc	r27, r31
    17ec:	50 f4       	brcc	.+20     	; 0x1802 <free+0x5e>
    17ee:	12 96       	adiw	r26, 0x02	; 2
    17f0:	4d 91       	ld	r20, X+
    17f2:	5c 91       	ld	r21, X
    17f4:	13 97       	sbiw	r26, 0x03	; 3
    17f6:	9d 01       	movw	r18, r26
    17f8:	41 15       	cp	r20, r1
    17fa:	51 05       	cpc	r21, r1
    17fc:	09 f1       	breq	.+66     	; 0x1840 <free+0x9c>
    17fe:	da 01       	movw	r26, r20
    1800:	f3 cf       	rjmp	.-26     	; 0x17e8 <free+0x44>
    1802:	b3 83       	std	Z+3, r27	; 0x03
    1804:	a2 83       	std	Z+2, r26	; 0x02
    1806:	40 81       	ld	r20, Z
    1808:	51 81       	ldd	r21, Z+1	; 0x01
    180a:	84 0f       	add	r24, r20
    180c:	95 1f       	adc	r25, r21
    180e:	8a 17       	cp	r24, r26
    1810:	9b 07       	cpc	r25, r27
    1812:	71 f4       	brne	.+28     	; 0x1830 <free+0x8c>
    1814:	8d 91       	ld	r24, X+
    1816:	9c 91       	ld	r25, X
    1818:	11 97       	sbiw	r26, 0x01	; 1
    181a:	84 0f       	add	r24, r20
    181c:	95 1f       	adc	r25, r21
    181e:	02 96       	adiw	r24, 0x02	; 2
    1820:	91 83       	std	Z+1, r25	; 0x01
    1822:	80 83       	st	Z, r24
    1824:	12 96       	adiw	r26, 0x02	; 2
    1826:	8d 91       	ld	r24, X+
    1828:	9c 91       	ld	r25, X
    182a:	13 97       	sbiw	r26, 0x03	; 3
    182c:	93 83       	std	Z+3, r25	; 0x03
    182e:	82 83       	std	Z+2, r24	; 0x02
    1830:	21 15       	cp	r18, r1
    1832:	31 05       	cpc	r19, r1
    1834:	29 f4       	brne	.+10     	; 0x1840 <free+0x9c>
    1836:	f0 93 0a 04 	sts	0x040A, r31
    183a:	e0 93 09 04 	sts	0x0409, r30
    183e:	3e c0       	rjmp	.+124    	; 0x18bc <free+0x118>
    1840:	d9 01       	movw	r26, r18
    1842:	13 96       	adiw	r26, 0x03	; 3
    1844:	fc 93       	st	X, r31
    1846:	ee 93       	st	-X, r30
    1848:	12 97       	sbiw	r26, 0x02	; 2
    184a:	4d 91       	ld	r20, X+
    184c:	5d 91       	ld	r21, X+
    184e:	a4 0f       	add	r26, r20
    1850:	b5 1f       	adc	r27, r21
    1852:	ea 17       	cp	r30, r26
    1854:	fb 07       	cpc	r31, r27
    1856:	79 f4       	brne	.+30     	; 0x1876 <free+0xd2>
    1858:	80 81       	ld	r24, Z
    185a:	91 81       	ldd	r25, Z+1	; 0x01
    185c:	84 0f       	add	r24, r20
    185e:	95 1f       	adc	r25, r21
    1860:	02 96       	adiw	r24, 0x02	; 2
    1862:	d9 01       	movw	r26, r18
    1864:	11 96       	adiw	r26, 0x01	; 1
    1866:	9c 93       	st	X, r25
    1868:	8e 93       	st	-X, r24
    186a:	82 81       	ldd	r24, Z+2	; 0x02
    186c:	93 81       	ldd	r25, Z+3	; 0x03
    186e:	13 96       	adiw	r26, 0x03	; 3
    1870:	9c 93       	st	X, r25
    1872:	8e 93       	st	-X, r24
    1874:	12 97       	sbiw	r26, 0x02	; 2
    1876:	e0 e0       	ldi	r30, 0x00	; 0
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	9b 81       	ldd	r25, Y+3	; 0x03
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	19 f0       	breq	.+6      	; 0x1888 <free+0xe4>
    1882:	fe 01       	movw	r30, r28
    1884:	ec 01       	movw	r28, r24
    1886:	f9 cf       	rjmp	.-14     	; 0x187a <free+0xd6>
    1888:	ce 01       	movw	r24, r28
    188a:	02 96       	adiw	r24, 0x02	; 2
    188c:	28 81       	ld	r18, Y
    188e:	39 81       	ldd	r19, Y+1	; 0x01
    1890:	82 0f       	add	r24, r18
    1892:	93 1f       	adc	r25, r19
    1894:	20 91 07 04 	lds	r18, 0x0407
    1898:	30 91 08 04 	lds	r19, 0x0408
    189c:	28 17       	cp	r18, r24
    189e:	39 07       	cpc	r19, r25
    18a0:	69 f4       	brne	.+26     	; 0x18bc <free+0x118>
    18a2:	30 97       	sbiw	r30, 0x00	; 0
    18a4:	29 f4       	brne	.+10     	; 0x18b0 <free+0x10c>
    18a6:	10 92 0a 04 	sts	0x040A, r1
    18aa:	10 92 09 04 	sts	0x0409, r1
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <free+0x110>
    18b0:	13 82       	std	Z+3, r1	; 0x03
    18b2:	12 82       	std	Z+2, r1	; 0x02
    18b4:	d0 93 08 04 	sts	0x0408, r29
    18b8:	c0 93 07 04 	sts	0x0407, r28
    18bc:	df 91       	pop	r29
    18be:	cf 91       	pop	r28
    18c0:	08 95       	ret

000018c2 <fdevopen>:
    18c2:	0f 93       	push	r16
    18c4:	1f 93       	push	r17
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	ec 01       	movw	r28, r24
    18cc:	8b 01       	movw	r16, r22
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	31 f4       	brne	.+12     	; 0x18de <fdevopen+0x1c>
    18d2:	61 15       	cp	r22, r1
    18d4:	71 05       	cpc	r23, r1
    18d6:	19 f4       	brne	.+6      	; 0x18de <fdevopen+0x1c>
    18d8:	80 e0       	ldi	r24, 0x00	; 0
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	37 c0       	rjmp	.+110    	; 0x194c <fdevopen+0x8a>
    18de:	6e e0       	ldi	r22, 0x0E	; 14
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	3d d2       	rcall	.+1146   	; 0x1d62 <calloc>
    18e8:	fc 01       	movw	r30, r24
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	a9 f3       	breq	.-22     	; 0x18d8 <fdevopen+0x16>
    18ee:	80 e8       	ldi	r24, 0x80	; 128
    18f0:	83 83       	std	Z+3, r24	; 0x03
    18f2:	01 15       	cp	r16, r1
    18f4:	11 05       	cpc	r17, r1
    18f6:	71 f0       	breq	.+28     	; 0x1914 <fdevopen+0x52>
    18f8:	13 87       	std	Z+11, r17	; 0x0b
    18fa:	02 87       	std	Z+10, r16	; 0x0a
    18fc:	81 e8       	ldi	r24, 0x81	; 129
    18fe:	83 83       	std	Z+3, r24	; 0x03
    1900:	80 91 0b 04 	lds	r24, 0x040B
    1904:	90 91 0c 04 	lds	r25, 0x040C
    1908:	89 2b       	or	r24, r25
    190a:	21 f4       	brne	.+8      	; 0x1914 <fdevopen+0x52>
    190c:	f0 93 0c 04 	sts	0x040C, r31
    1910:	e0 93 0b 04 	sts	0x040B, r30
    1914:	20 97       	sbiw	r28, 0x00	; 0
    1916:	c9 f0       	breq	.+50     	; 0x194a <fdevopen+0x88>
    1918:	d1 87       	std	Z+9, r29	; 0x09
    191a:	c0 87       	std	Z+8, r28	; 0x08
    191c:	83 81       	ldd	r24, Z+3	; 0x03
    191e:	82 60       	ori	r24, 0x02	; 2
    1920:	83 83       	std	Z+3, r24	; 0x03
    1922:	80 91 0d 04 	lds	r24, 0x040D
    1926:	90 91 0e 04 	lds	r25, 0x040E
    192a:	89 2b       	or	r24, r25
    192c:	71 f4       	brne	.+28     	; 0x194a <fdevopen+0x88>
    192e:	f0 93 0e 04 	sts	0x040E, r31
    1932:	e0 93 0d 04 	sts	0x040D, r30
    1936:	80 91 0f 04 	lds	r24, 0x040F
    193a:	90 91 10 04 	lds	r25, 0x0410
    193e:	89 2b       	or	r24, r25
    1940:	21 f4       	brne	.+8      	; 0x194a <fdevopen+0x88>
    1942:	f0 93 10 04 	sts	0x0410, r31
    1946:	e0 93 0f 04 	sts	0x040F, r30
    194a:	cf 01       	movw	r24, r30
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	1f 91       	pop	r17
    1952:	0f 91       	pop	r16
    1954:	08 95       	ret

00001956 <printf>:
    1956:	a0 e0       	ldi	r26, 0x00	; 0
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e0 eb       	ldi	r30, 0xB0	; 176
    195c:	fc e0       	ldi	r31, 0x0C	; 12
    195e:	d8 c2       	rjmp	.+1456   	; 0x1f10 <__prologue_saves__+0x20>
    1960:	fe 01       	movw	r30, r28
    1962:	35 96       	adiw	r30, 0x05	; 5
    1964:	61 91       	ld	r22, Z+
    1966:	71 91       	ld	r23, Z+
    1968:	af 01       	movw	r20, r30
    196a:	80 91 0d 04 	lds	r24, 0x040D
    196e:	90 91 0e 04 	lds	r25, 0x040E
    1972:	34 d0       	rcall	.+104    	; 0x19dc <vfprintf>
    1974:	e2 e0       	ldi	r30, 0x02	; 2
    1976:	e8 c2       	rjmp	.+1488   	; 0x1f48 <__epilogue_restores__+0x20>

00001978 <putchar>:
    1978:	60 91 0d 04 	lds	r22, 0x040D
    197c:	70 91 0e 04 	lds	r23, 0x040E
    1980:	27 c2       	rjmp	.+1102   	; 0x1dd0 <fputc>

00001982 <puts>:
    1982:	0f 93       	push	r16
    1984:	1f 93       	push	r17
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	e0 91 0d 04 	lds	r30, 0x040D
    198e:	f0 91 0e 04 	lds	r31, 0x040E
    1992:	23 81       	ldd	r18, Z+3	; 0x03
    1994:	21 ff       	sbrs	r18, 1
    1996:	1b c0       	rjmp	.+54     	; 0x19ce <puts+0x4c>
    1998:	ec 01       	movw	r28, r24
    199a:	00 e0       	ldi	r16, 0x00	; 0
    199c:	10 e0       	ldi	r17, 0x00	; 0
    199e:	89 91       	ld	r24, Y+
    19a0:	60 91 0d 04 	lds	r22, 0x040D
    19a4:	70 91 0e 04 	lds	r23, 0x040E
    19a8:	db 01       	movw	r26, r22
    19aa:	18 96       	adiw	r26, 0x08	; 8
    19ac:	ed 91       	ld	r30, X+
    19ae:	fc 91       	ld	r31, X
    19b0:	19 97       	sbiw	r26, 0x09	; 9
    19b2:	88 23       	and	r24, r24
    19b4:	31 f0       	breq	.+12     	; 0x19c2 <puts+0x40>
    19b6:	09 95       	icall
    19b8:	89 2b       	or	r24, r25
    19ba:	89 f3       	breq	.-30     	; 0x199e <puts+0x1c>
    19bc:	0f ef       	ldi	r16, 0xFF	; 255
    19be:	1f ef       	ldi	r17, 0xFF	; 255
    19c0:	ee cf       	rjmp	.-36     	; 0x199e <puts+0x1c>
    19c2:	8a e0       	ldi	r24, 0x0A	; 10
    19c4:	09 95       	icall
    19c6:	89 2b       	or	r24, r25
    19c8:	11 f4       	brne	.+4      	; 0x19ce <puts+0x4c>
    19ca:	c8 01       	movw	r24, r16
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <puts+0x50>
    19ce:	8f ef       	ldi	r24, 0xFF	; 255
    19d0:	9f ef       	ldi	r25, 0xFF	; 255
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	1f 91       	pop	r17
    19d8:	0f 91       	pop	r16
    19da:	08 95       	ret

000019dc <vfprintf>:
    19dc:	ac e0       	ldi	r26, 0x0C	; 12
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e3 ef       	ldi	r30, 0xF3	; 243
    19e2:	fc e0       	ldi	r31, 0x0C	; 12
    19e4:	85 c2       	rjmp	.+1290   	; 0x1ef0 <__prologue_saves__>
    19e6:	7c 01       	movw	r14, r24
    19e8:	6b 01       	movw	r12, r22
    19ea:	8a 01       	movw	r16, r20
    19ec:	fc 01       	movw	r30, r24
    19ee:	17 82       	std	Z+7, r1	; 0x07
    19f0:	16 82       	std	Z+6, r1	; 0x06
    19f2:	83 81       	ldd	r24, Z+3	; 0x03
    19f4:	81 ff       	sbrs	r24, 1
    19f6:	b0 c1       	rjmp	.+864    	; 0x1d58 <vfprintf+0x37c>
    19f8:	ce 01       	movw	r24, r28
    19fa:	01 96       	adiw	r24, 0x01	; 1
    19fc:	4c 01       	movw	r8, r24
    19fe:	f7 01       	movw	r30, r14
    1a00:	93 81       	ldd	r25, Z+3	; 0x03
    1a02:	f6 01       	movw	r30, r12
    1a04:	93 fd       	sbrc	r25, 3
    1a06:	85 91       	lpm	r24, Z+
    1a08:	93 ff       	sbrs	r25, 3
    1a0a:	81 91       	ld	r24, Z+
    1a0c:	6f 01       	movw	r12, r30
    1a0e:	88 23       	and	r24, r24
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <vfprintf+0x38>
    1a12:	9e c1       	rjmp	.+828    	; 0x1d50 <vfprintf+0x374>
    1a14:	85 32       	cpi	r24, 0x25	; 37
    1a16:	39 f4       	brne	.+14     	; 0x1a26 <vfprintf+0x4a>
    1a18:	93 fd       	sbrc	r25, 3
    1a1a:	85 91       	lpm	r24, Z+
    1a1c:	93 ff       	sbrs	r25, 3
    1a1e:	81 91       	ld	r24, Z+
    1a20:	6f 01       	movw	r12, r30
    1a22:	85 32       	cpi	r24, 0x25	; 37
    1a24:	21 f4       	brne	.+8      	; 0x1a2e <vfprintf+0x52>
    1a26:	b7 01       	movw	r22, r14
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	d2 d1       	rcall	.+932    	; 0x1dd0 <fputc>
    1a2c:	e8 cf       	rjmp	.-48     	; 0x19fe <vfprintf+0x22>
    1a2e:	51 2c       	mov	r5, r1
    1a30:	31 2c       	mov	r3, r1
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	20 32       	cpi	r18, 0x20	; 32
    1a36:	a0 f4       	brcc	.+40     	; 0x1a60 <vfprintf+0x84>
    1a38:	8b 32       	cpi	r24, 0x2B	; 43
    1a3a:	69 f0       	breq	.+26     	; 0x1a56 <vfprintf+0x7a>
    1a3c:	30 f4       	brcc	.+12     	; 0x1a4a <vfprintf+0x6e>
    1a3e:	80 32       	cpi	r24, 0x20	; 32
    1a40:	59 f0       	breq	.+22     	; 0x1a58 <vfprintf+0x7c>
    1a42:	83 32       	cpi	r24, 0x23	; 35
    1a44:	69 f4       	brne	.+26     	; 0x1a60 <vfprintf+0x84>
    1a46:	20 61       	ori	r18, 0x10	; 16
    1a48:	2c c0       	rjmp	.+88     	; 0x1aa2 <vfprintf+0xc6>
    1a4a:	8d 32       	cpi	r24, 0x2D	; 45
    1a4c:	39 f0       	breq	.+14     	; 0x1a5c <vfprintf+0x80>
    1a4e:	80 33       	cpi	r24, 0x30	; 48
    1a50:	39 f4       	brne	.+14     	; 0x1a60 <vfprintf+0x84>
    1a52:	21 60       	ori	r18, 0x01	; 1
    1a54:	26 c0       	rjmp	.+76     	; 0x1aa2 <vfprintf+0xc6>
    1a56:	22 60       	ori	r18, 0x02	; 2
    1a58:	24 60       	ori	r18, 0x04	; 4
    1a5a:	23 c0       	rjmp	.+70     	; 0x1aa2 <vfprintf+0xc6>
    1a5c:	28 60       	ori	r18, 0x08	; 8
    1a5e:	21 c0       	rjmp	.+66     	; 0x1aa2 <vfprintf+0xc6>
    1a60:	27 fd       	sbrc	r18, 7
    1a62:	27 c0       	rjmp	.+78     	; 0x1ab2 <vfprintf+0xd6>
    1a64:	30 ed       	ldi	r19, 0xD0	; 208
    1a66:	38 0f       	add	r19, r24
    1a68:	3a 30       	cpi	r19, 0x0A	; 10
    1a6a:	78 f4       	brcc	.+30     	; 0x1a8a <vfprintf+0xae>
    1a6c:	26 ff       	sbrs	r18, 6
    1a6e:	06 c0       	rjmp	.+12     	; 0x1a7c <vfprintf+0xa0>
    1a70:	fa e0       	ldi	r31, 0x0A	; 10
    1a72:	5f 9e       	mul	r5, r31
    1a74:	30 0d       	add	r19, r0
    1a76:	11 24       	eor	r1, r1
    1a78:	53 2e       	mov	r5, r19
    1a7a:	13 c0       	rjmp	.+38     	; 0x1aa2 <vfprintf+0xc6>
    1a7c:	8a e0       	ldi	r24, 0x0A	; 10
    1a7e:	38 9e       	mul	r3, r24
    1a80:	30 0d       	add	r19, r0
    1a82:	11 24       	eor	r1, r1
    1a84:	33 2e       	mov	r3, r19
    1a86:	20 62       	ori	r18, 0x20	; 32
    1a88:	0c c0       	rjmp	.+24     	; 0x1aa2 <vfprintf+0xc6>
    1a8a:	8e 32       	cpi	r24, 0x2E	; 46
    1a8c:	21 f4       	brne	.+8      	; 0x1a96 <vfprintf+0xba>
    1a8e:	26 fd       	sbrc	r18, 6
    1a90:	5f c1       	rjmp	.+702    	; 0x1d50 <vfprintf+0x374>
    1a92:	20 64       	ori	r18, 0x40	; 64
    1a94:	06 c0       	rjmp	.+12     	; 0x1aa2 <vfprintf+0xc6>
    1a96:	8c 36       	cpi	r24, 0x6C	; 108
    1a98:	11 f4       	brne	.+4      	; 0x1a9e <vfprintf+0xc2>
    1a9a:	20 68       	ori	r18, 0x80	; 128
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <vfprintf+0xc6>
    1a9e:	88 36       	cpi	r24, 0x68	; 104
    1aa0:	41 f4       	brne	.+16     	; 0x1ab2 <vfprintf+0xd6>
    1aa2:	f6 01       	movw	r30, r12
    1aa4:	93 fd       	sbrc	r25, 3
    1aa6:	85 91       	lpm	r24, Z+
    1aa8:	93 ff       	sbrs	r25, 3
    1aaa:	81 91       	ld	r24, Z+
    1aac:	6f 01       	movw	r12, r30
    1aae:	81 11       	cpse	r24, r1
    1ab0:	c1 cf       	rjmp	.-126    	; 0x1a34 <vfprintf+0x58>
    1ab2:	98 2f       	mov	r25, r24
    1ab4:	9f 7d       	andi	r25, 0xDF	; 223
    1ab6:	95 54       	subi	r25, 0x45	; 69
    1ab8:	93 30       	cpi	r25, 0x03	; 3
    1aba:	28 f4       	brcc	.+10     	; 0x1ac6 <vfprintf+0xea>
    1abc:	0c 5f       	subi	r16, 0xFC	; 252
    1abe:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac0:	ff e3       	ldi	r31, 0x3F	; 63
    1ac2:	f9 83       	std	Y+1, r31	; 0x01
    1ac4:	0d c0       	rjmp	.+26     	; 0x1ae0 <vfprintf+0x104>
    1ac6:	83 36       	cpi	r24, 0x63	; 99
    1ac8:	31 f0       	breq	.+12     	; 0x1ad6 <vfprintf+0xfa>
    1aca:	83 37       	cpi	r24, 0x73	; 115
    1acc:	71 f0       	breq	.+28     	; 0x1aea <vfprintf+0x10e>
    1ace:	83 35       	cpi	r24, 0x53	; 83
    1ad0:	09 f0       	breq	.+2      	; 0x1ad4 <vfprintf+0xf8>
    1ad2:	57 c0       	rjmp	.+174    	; 0x1b82 <vfprintf+0x1a6>
    1ad4:	21 c0       	rjmp	.+66     	; 0x1b18 <vfprintf+0x13c>
    1ad6:	f8 01       	movw	r30, r16
    1ad8:	80 81       	ld	r24, Z
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	0e 5f       	subi	r16, 0xFE	; 254
    1ade:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae0:	44 24       	eor	r4, r4
    1ae2:	43 94       	inc	r4
    1ae4:	51 2c       	mov	r5, r1
    1ae6:	54 01       	movw	r10, r8
    1ae8:	14 c0       	rjmp	.+40     	; 0x1b12 <vfprintf+0x136>
    1aea:	38 01       	movw	r6, r16
    1aec:	f2 e0       	ldi	r31, 0x02	; 2
    1aee:	6f 0e       	add	r6, r31
    1af0:	71 1c       	adc	r7, r1
    1af2:	f8 01       	movw	r30, r16
    1af4:	a0 80       	ld	r10, Z
    1af6:	b1 80       	ldd	r11, Z+1	; 0x01
    1af8:	26 ff       	sbrs	r18, 6
    1afa:	03 c0       	rjmp	.+6      	; 0x1b02 <vfprintf+0x126>
    1afc:	65 2d       	mov	r22, r5
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <vfprintf+0x12a>
    1b02:	6f ef       	ldi	r22, 0xFF	; 255
    1b04:	7f ef       	ldi	r23, 0xFF	; 255
    1b06:	c5 01       	movw	r24, r10
    1b08:	2c 87       	std	Y+12, r18	; 0x0c
    1b0a:	57 d1       	rcall	.+686    	; 0x1dba <strnlen>
    1b0c:	2c 01       	movw	r4, r24
    1b0e:	83 01       	movw	r16, r6
    1b10:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b12:	2f 77       	andi	r18, 0x7F	; 127
    1b14:	22 2e       	mov	r2, r18
    1b16:	16 c0       	rjmp	.+44     	; 0x1b44 <vfprintf+0x168>
    1b18:	38 01       	movw	r6, r16
    1b1a:	f2 e0       	ldi	r31, 0x02	; 2
    1b1c:	6f 0e       	add	r6, r31
    1b1e:	71 1c       	adc	r7, r1
    1b20:	f8 01       	movw	r30, r16
    1b22:	a0 80       	ld	r10, Z
    1b24:	b1 80       	ldd	r11, Z+1	; 0x01
    1b26:	26 ff       	sbrs	r18, 6
    1b28:	03 c0       	rjmp	.+6      	; 0x1b30 <vfprintf+0x154>
    1b2a:	65 2d       	mov	r22, r5
    1b2c:	70 e0       	ldi	r23, 0x00	; 0
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <vfprintf+0x158>
    1b30:	6f ef       	ldi	r22, 0xFF	; 255
    1b32:	7f ef       	ldi	r23, 0xFF	; 255
    1b34:	c5 01       	movw	r24, r10
    1b36:	2c 87       	std	Y+12, r18	; 0x0c
    1b38:	2e d1       	rcall	.+604    	; 0x1d96 <strnlen_P>
    1b3a:	2c 01       	movw	r4, r24
    1b3c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b3e:	20 68       	ori	r18, 0x80	; 128
    1b40:	22 2e       	mov	r2, r18
    1b42:	83 01       	movw	r16, r6
    1b44:	23 fc       	sbrc	r2, 3
    1b46:	19 c0       	rjmp	.+50     	; 0x1b7a <vfprintf+0x19e>
    1b48:	83 2d       	mov	r24, r3
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	48 16       	cp	r4, r24
    1b4e:	59 06       	cpc	r5, r25
    1b50:	a0 f4       	brcc	.+40     	; 0x1b7a <vfprintf+0x19e>
    1b52:	b7 01       	movw	r22, r14
    1b54:	80 e2       	ldi	r24, 0x20	; 32
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	3b d1       	rcall	.+630    	; 0x1dd0 <fputc>
    1b5a:	3a 94       	dec	r3
    1b5c:	f5 cf       	rjmp	.-22     	; 0x1b48 <vfprintf+0x16c>
    1b5e:	f5 01       	movw	r30, r10
    1b60:	27 fc       	sbrc	r2, 7
    1b62:	85 91       	lpm	r24, Z+
    1b64:	27 fe       	sbrs	r2, 7
    1b66:	81 91       	ld	r24, Z+
    1b68:	5f 01       	movw	r10, r30
    1b6a:	b7 01       	movw	r22, r14
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	30 d1       	rcall	.+608    	; 0x1dd0 <fputc>
    1b70:	31 10       	cpse	r3, r1
    1b72:	3a 94       	dec	r3
    1b74:	f1 e0       	ldi	r31, 0x01	; 1
    1b76:	4f 1a       	sub	r4, r31
    1b78:	51 08       	sbc	r5, r1
    1b7a:	41 14       	cp	r4, r1
    1b7c:	51 04       	cpc	r5, r1
    1b7e:	79 f7       	brne	.-34     	; 0x1b5e <vfprintf+0x182>
    1b80:	de c0       	rjmp	.+444    	; 0x1d3e <vfprintf+0x362>
    1b82:	84 36       	cpi	r24, 0x64	; 100
    1b84:	11 f0       	breq	.+4      	; 0x1b8a <vfprintf+0x1ae>
    1b86:	89 36       	cpi	r24, 0x69	; 105
    1b88:	31 f5       	brne	.+76     	; 0x1bd6 <vfprintf+0x1fa>
    1b8a:	f8 01       	movw	r30, r16
    1b8c:	27 ff       	sbrs	r18, 7
    1b8e:	07 c0       	rjmp	.+14     	; 0x1b9e <vfprintf+0x1c2>
    1b90:	60 81       	ld	r22, Z
    1b92:	71 81       	ldd	r23, Z+1	; 0x01
    1b94:	82 81       	ldd	r24, Z+2	; 0x02
    1b96:	93 81       	ldd	r25, Z+3	; 0x03
    1b98:	0c 5f       	subi	r16, 0xFC	; 252
    1b9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9c:	08 c0       	rjmp	.+16     	; 0x1bae <vfprintf+0x1d2>
    1b9e:	60 81       	ld	r22, Z
    1ba0:	71 81       	ldd	r23, Z+1	; 0x01
    1ba2:	88 27       	eor	r24, r24
    1ba4:	77 fd       	sbrc	r23, 7
    1ba6:	80 95       	com	r24
    1ba8:	98 2f       	mov	r25, r24
    1baa:	0e 5f       	subi	r16, 0xFE	; 254
    1bac:	1f 4f       	sbci	r17, 0xFF	; 255
    1bae:	2f 76       	andi	r18, 0x6F	; 111
    1bb0:	b2 2e       	mov	r11, r18
    1bb2:	97 ff       	sbrs	r25, 7
    1bb4:	09 c0       	rjmp	.+18     	; 0x1bc8 <vfprintf+0x1ec>
    1bb6:	90 95       	com	r25
    1bb8:	80 95       	com	r24
    1bba:	70 95       	com	r23
    1bbc:	61 95       	neg	r22
    1bbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc4:	20 68       	ori	r18, 0x80	; 128
    1bc6:	b2 2e       	mov	r11, r18
    1bc8:	2a e0       	ldi	r18, 0x0A	; 10
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	a4 01       	movw	r20, r8
    1bce:	32 d1       	rcall	.+612    	; 0x1e34 <__ultoa_invert>
    1bd0:	a8 2e       	mov	r10, r24
    1bd2:	a8 18       	sub	r10, r8
    1bd4:	43 c0       	rjmp	.+134    	; 0x1c5c <vfprintf+0x280>
    1bd6:	85 37       	cpi	r24, 0x75	; 117
    1bd8:	29 f4       	brne	.+10     	; 0x1be4 <vfprintf+0x208>
    1bda:	2f 7e       	andi	r18, 0xEF	; 239
    1bdc:	b2 2e       	mov	r11, r18
    1bde:	2a e0       	ldi	r18, 0x0A	; 10
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	25 c0       	rjmp	.+74     	; 0x1c2e <vfprintf+0x252>
    1be4:	f2 2f       	mov	r31, r18
    1be6:	f9 7f       	andi	r31, 0xF9	; 249
    1be8:	bf 2e       	mov	r11, r31
    1bea:	8f 36       	cpi	r24, 0x6F	; 111
    1bec:	c1 f0       	breq	.+48     	; 0x1c1e <vfprintf+0x242>
    1bee:	18 f4       	brcc	.+6      	; 0x1bf6 <vfprintf+0x21a>
    1bf0:	88 35       	cpi	r24, 0x58	; 88
    1bf2:	79 f0       	breq	.+30     	; 0x1c12 <vfprintf+0x236>
    1bf4:	ad c0       	rjmp	.+346    	; 0x1d50 <vfprintf+0x374>
    1bf6:	80 37       	cpi	r24, 0x70	; 112
    1bf8:	19 f0       	breq	.+6      	; 0x1c00 <vfprintf+0x224>
    1bfa:	88 37       	cpi	r24, 0x78	; 120
    1bfc:	21 f0       	breq	.+8      	; 0x1c06 <vfprintf+0x22a>
    1bfe:	a8 c0       	rjmp	.+336    	; 0x1d50 <vfprintf+0x374>
    1c00:	2f 2f       	mov	r18, r31
    1c02:	20 61       	ori	r18, 0x10	; 16
    1c04:	b2 2e       	mov	r11, r18
    1c06:	b4 fe       	sbrs	r11, 4
    1c08:	0d c0       	rjmp	.+26     	; 0x1c24 <vfprintf+0x248>
    1c0a:	8b 2d       	mov	r24, r11
    1c0c:	84 60       	ori	r24, 0x04	; 4
    1c0e:	b8 2e       	mov	r11, r24
    1c10:	09 c0       	rjmp	.+18     	; 0x1c24 <vfprintf+0x248>
    1c12:	24 ff       	sbrs	r18, 4
    1c14:	0a c0       	rjmp	.+20     	; 0x1c2a <vfprintf+0x24e>
    1c16:	9f 2f       	mov	r25, r31
    1c18:	96 60       	ori	r25, 0x06	; 6
    1c1a:	b9 2e       	mov	r11, r25
    1c1c:	06 c0       	rjmp	.+12     	; 0x1c2a <vfprintf+0x24e>
    1c1e:	28 e0       	ldi	r18, 0x08	; 8
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	05 c0       	rjmp	.+10     	; 0x1c2e <vfprintf+0x252>
    1c24:	20 e1       	ldi	r18, 0x10	; 16
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <vfprintf+0x252>
    1c2a:	20 e1       	ldi	r18, 0x10	; 16
    1c2c:	32 e0       	ldi	r19, 0x02	; 2
    1c2e:	f8 01       	movw	r30, r16
    1c30:	b7 fe       	sbrs	r11, 7
    1c32:	07 c0       	rjmp	.+14     	; 0x1c42 <vfprintf+0x266>
    1c34:	60 81       	ld	r22, Z
    1c36:	71 81       	ldd	r23, Z+1	; 0x01
    1c38:	82 81       	ldd	r24, Z+2	; 0x02
    1c3a:	93 81       	ldd	r25, Z+3	; 0x03
    1c3c:	0c 5f       	subi	r16, 0xFC	; 252
    1c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c40:	06 c0       	rjmp	.+12     	; 0x1c4e <vfprintf+0x272>
    1c42:	60 81       	ld	r22, Z
    1c44:	71 81       	ldd	r23, Z+1	; 0x01
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	0e 5f       	subi	r16, 0xFE	; 254
    1c4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c4e:	a4 01       	movw	r20, r8
    1c50:	f1 d0       	rcall	.+482    	; 0x1e34 <__ultoa_invert>
    1c52:	a8 2e       	mov	r10, r24
    1c54:	a8 18       	sub	r10, r8
    1c56:	fb 2d       	mov	r31, r11
    1c58:	ff 77       	andi	r31, 0x7F	; 127
    1c5a:	bf 2e       	mov	r11, r31
    1c5c:	b6 fe       	sbrs	r11, 6
    1c5e:	0b c0       	rjmp	.+22     	; 0x1c76 <vfprintf+0x29a>
    1c60:	2b 2d       	mov	r18, r11
    1c62:	2e 7f       	andi	r18, 0xFE	; 254
    1c64:	a5 14       	cp	r10, r5
    1c66:	50 f4       	brcc	.+20     	; 0x1c7c <vfprintf+0x2a0>
    1c68:	b4 fe       	sbrs	r11, 4
    1c6a:	0a c0       	rjmp	.+20     	; 0x1c80 <vfprintf+0x2a4>
    1c6c:	b2 fc       	sbrc	r11, 2
    1c6e:	08 c0       	rjmp	.+16     	; 0x1c80 <vfprintf+0x2a4>
    1c70:	2b 2d       	mov	r18, r11
    1c72:	2e 7e       	andi	r18, 0xEE	; 238
    1c74:	05 c0       	rjmp	.+10     	; 0x1c80 <vfprintf+0x2a4>
    1c76:	7a 2c       	mov	r7, r10
    1c78:	2b 2d       	mov	r18, r11
    1c7a:	03 c0       	rjmp	.+6      	; 0x1c82 <vfprintf+0x2a6>
    1c7c:	7a 2c       	mov	r7, r10
    1c7e:	01 c0       	rjmp	.+2      	; 0x1c82 <vfprintf+0x2a6>
    1c80:	75 2c       	mov	r7, r5
    1c82:	24 ff       	sbrs	r18, 4
    1c84:	0d c0       	rjmp	.+26     	; 0x1ca0 <vfprintf+0x2c4>
    1c86:	fe 01       	movw	r30, r28
    1c88:	ea 0d       	add	r30, r10
    1c8a:	f1 1d       	adc	r31, r1
    1c8c:	80 81       	ld	r24, Z
    1c8e:	80 33       	cpi	r24, 0x30	; 48
    1c90:	11 f4       	brne	.+4      	; 0x1c96 <vfprintf+0x2ba>
    1c92:	29 7e       	andi	r18, 0xE9	; 233
    1c94:	09 c0       	rjmp	.+18     	; 0x1ca8 <vfprintf+0x2cc>
    1c96:	22 ff       	sbrs	r18, 2
    1c98:	06 c0       	rjmp	.+12     	; 0x1ca6 <vfprintf+0x2ca>
    1c9a:	73 94       	inc	r7
    1c9c:	73 94       	inc	r7
    1c9e:	04 c0       	rjmp	.+8      	; 0x1ca8 <vfprintf+0x2cc>
    1ca0:	82 2f       	mov	r24, r18
    1ca2:	86 78       	andi	r24, 0x86	; 134
    1ca4:	09 f0       	breq	.+2      	; 0x1ca8 <vfprintf+0x2cc>
    1ca6:	73 94       	inc	r7
    1ca8:	23 fd       	sbrc	r18, 3
    1caa:	12 c0       	rjmp	.+36     	; 0x1cd0 <vfprintf+0x2f4>
    1cac:	20 ff       	sbrs	r18, 0
    1cae:	06 c0       	rjmp	.+12     	; 0x1cbc <vfprintf+0x2e0>
    1cb0:	5a 2c       	mov	r5, r10
    1cb2:	73 14       	cp	r7, r3
    1cb4:	18 f4       	brcc	.+6      	; 0x1cbc <vfprintf+0x2e0>
    1cb6:	53 0c       	add	r5, r3
    1cb8:	57 18       	sub	r5, r7
    1cba:	73 2c       	mov	r7, r3
    1cbc:	73 14       	cp	r7, r3
    1cbe:	60 f4       	brcc	.+24     	; 0x1cd8 <vfprintf+0x2fc>
    1cc0:	b7 01       	movw	r22, r14
    1cc2:	80 e2       	ldi	r24, 0x20	; 32
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	2c 87       	std	Y+12, r18	; 0x0c
    1cc8:	83 d0       	rcall	.+262    	; 0x1dd0 <fputc>
    1cca:	73 94       	inc	r7
    1ccc:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cce:	f6 cf       	rjmp	.-20     	; 0x1cbc <vfprintf+0x2e0>
    1cd0:	73 14       	cp	r7, r3
    1cd2:	10 f4       	brcc	.+4      	; 0x1cd8 <vfprintf+0x2fc>
    1cd4:	37 18       	sub	r3, r7
    1cd6:	01 c0       	rjmp	.+2      	; 0x1cda <vfprintf+0x2fe>
    1cd8:	31 2c       	mov	r3, r1
    1cda:	24 ff       	sbrs	r18, 4
    1cdc:	11 c0       	rjmp	.+34     	; 0x1d00 <vfprintf+0x324>
    1cde:	b7 01       	movw	r22, r14
    1ce0:	80 e3       	ldi	r24, 0x30	; 48
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	2c 87       	std	Y+12, r18	; 0x0c
    1ce6:	74 d0       	rcall	.+232    	; 0x1dd0 <fputc>
    1ce8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cea:	22 ff       	sbrs	r18, 2
    1cec:	16 c0       	rjmp	.+44     	; 0x1d1a <vfprintf+0x33e>
    1cee:	21 ff       	sbrs	r18, 1
    1cf0:	03 c0       	rjmp	.+6      	; 0x1cf8 <vfprintf+0x31c>
    1cf2:	88 e5       	ldi	r24, 0x58	; 88
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <vfprintf+0x320>
    1cf8:	88 e7       	ldi	r24, 0x78	; 120
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	b7 01       	movw	r22, r14
    1cfe:	0c c0       	rjmp	.+24     	; 0x1d18 <vfprintf+0x33c>
    1d00:	82 2f       	mov	r24, r18
    1d02:	86 78       	andi	r24, 0x86	; 134
    1d04:	51 f0       	breq	.+20     	; 0x1d1a <vfprintf+0x33e>
    1d06:	21 fd       	sbrc	r18, 1
    1d08:	02 c0       	rjmp	.+4      	; 0x1d0e <vfprintf+0x332>
    1d0a:	80 e2       	ldi	r24, 0x20	; 32
    1d0c:	01 c0       	rjmp	.+2      	; 0x1d10 <vfprintf+0x334>
    1d0e:	8b e2       	ldi	r24, 0x2B	; 43
    1d10:	27 fd       	sbrc	r18, 7
    1d12:	8d e2       	ldi	r24, 0x2D	; 45
    1d14:	b7 01       	movw	r22, r14
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	5b d0       	rcall	.+182    	; 0x1dd0 <fputc>
    1d1a:	a5 14       	cp	r10, r5
    1d1c:	30 f4       	brcc	.+12     	; 0x1d2a <vfprintf+0x34e>
    1d1e:	b7 01       	movw	r22, r14
    1d20:	80 e3       	ldi	r24, 0x30	; 48
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	55 d0       	rcall	.+170    	; 0x1dd0 <fputc>
    1d26:	5a 94       	dec	r5
    1d28:	f8 cf       	rjmp	.-16     	; 0x1d1a <vfprintf+0x33e>
    1d2a:	aa 94       	dec	r10
    1d2c:	f4 01       	movw	r30, r8
    1d2e:	ea 0d       	add	r30, r10
    1d30:	f1 1d       	adc	r31, r1
    1d32:	80 81       	ld	r24, Z
    1d34:	b7 01       	movw	r22, r14
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	4b d0       	rcall	.+150    	; 0x1dd0 <fputc>
    1d3a:	a1 10       	cpse	r10, r1
    1d3c:	f6 cf       	rjmp	.-20     	; 0x1d2a <vfprintf+0x34e>
    1d3e:	33 20       	and	r3, r3
    1d40:	09 f4       	brne	.+2      	; 0x1d44 <vfprintf+0x368>
    1d42:	5d ce       	rjmp	.-838    	; 0x19fe <vfprintf+0x22>
    1d44:	b7 01       	movw	r22, r14
    1d46:	80 e2       	ldi	r24, 0x20	; 32
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	42 d0       	rcall	.+132    	; 0x1dd0 <fputc>
    1d4c:	3a 94       	dec	r3
    1d4e:	f7 cf       	rjmp	.-18     	; 0x1d3e <vfprintf+0x362>
    1d50:	f7 01       	movw	r30, r14
    1d52:	86 81       	ldd	r24, Z+6	; 0x06
    1d54:	97 81       	ldd	r25, Z+7	; 0x07
    1d56:	02 c0       	rjmp	.+4      	; 0x1d5c <vfprintf+0x380>
    1d58:	8f ef       	ldi	r24, 0xFF	; 255
    1d5a:	9f ef       	ldi	r25, 0xFF	; 255
    1d5c:	2c 96       	adiw	r28, 0x0c	; 12
    1d5e:	e2 e1       	ldi	r30, 0x12	; 18
    1d60:	e3 c0       	rjmp	.+454    	; 0x1f28 <__epilogue_restores__>

00001d62 <calloc>:
    1d62:	0f 93       	push	r16
    1d64:	1f 93       	push	r17
    1d66:	cf 93       	push	r28
    1d68:	df 93       	push	r29
    1d6a:	86 9f       	mul	r24, r22
    1d6c:	80 01       	movw	r16, r0
    1d6e:	87 9f       	mul	r24, r23
    1d70:	10 0d       	add	r17, r0
    1d72:	96 9f       	mul	r25, r22
    1d74:	10 0d       	add	r17, r0
    1d76:	11 24       	eor	r1, r1
    1d78:	c8 01       	movw	r24, r16
    1d7a:	7c dc       	rcall	.-1800   	; 0x1674 <malloc>
    1d7c:	ec 01       	movw	r28, r24
    1d7e:	00 97       	sbiw	r24, 0x00	; 0
    1d80:	21 f0       	breq	.+8      	; 0x1d8a <calloc+0x28>
    1d82:	a8 01       	movw	r20, r16
    1d84:	60 e0       	ldi	r22, 0x00	; 0
    1d86:	70 e0       	ldi	r23, 0x00	; 0
    1d88:	11 d0       	rcall	.+34     	; 0x1dac <memset>
    1d8a:	ce 01       	movw	r24, r28
    1d8c:	df 91       	pop	r29
    1d8e:	cf 91       	pop	r28
    1d90:	1f 91       	pop	r17
    1d92:	0f 91       	pop	r16
    1d94:	08 95       	ret

00001d96 <strnlen_P>:
    1d96:	fc 01       	movw	r30, r24
    1d98:	05 90       	lpm	r0, Z+
    1d9a:	61 50       	subi	r22, 0x01	; 1
    1d9c:	70 40       	sbci	r23, 0x00	; 0
    1d9e:	01 10       	cpse	r0, r1
    1da0:	d8 f7       	brcc	.-10     	; 0x1d98 <strnlen_P+0x2>
    1da2:	80 95       	com	r24
    1da4:	90 95       	com	r25
    1da6:	8e 0f       	add	r24, r30
    1da8:	9f 1f       	adc	r25, r31
    1daa:	08 95       	ret

00001dac <memset>:
    1dac:	dc 01       	movw	r26, r24
    1dae:	01 c0       	rjmp	.+2      	; 0x1db2 <memset+0x6>
    1db0:	6d 93       	st	X+, r22
    1db2:	41 50       	subi	r20, 0x01	; 1
    1db4:	50 40       	sbci	r21, 0x00	; 0
    1db6:	e0 f7       	brcc	.-8      	; 0x1db0 <memset+0x4>
    1db8:	08 95       	ret

00001dba <strnlen>:
    1dba:	fc 01       	movw	r30, r24
    1dbc:	61 50       	subi	r22, 0x01	; 1
    1dbe:	70 40       	sbci	r23, 0x00	; 0
    1dc0:	01 90       	ld	r0, Z+
    1dc2:	01 10       	cpse	r0, r1
    1dc4:	d8 f7       	brcc	.-10     	; 0x1dbc <strnlen+0x2>
    1dc6:	80 95       	com	r24
    1dc8:	90 95       	com	r25
    1dca:	8e 0f       	add	r24, r30
    1dcc:	9f 1f       	adc	r25, r31
    1dce:	08 95       	ret

00001dd0 <fputc>:
    1dd0:	0f 93       	push	r16
    1dd2:	1f 93       	push	r17
    1dd4:	cf 93       	push	r28
    1dd6:	df 93       	push	r29
    1dd8:	18 2f       	mov	r17, r24
    1dda:	09 2f       	mov	r16, r25
    1ddc:	eb 01       	movw	r28, r22
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	81 fd       	sbrc	r24, 1
    1de2:	03 c0       	rjmp	.+6      	; 0x1dea <fputc+0x1a>
    1de4:	8f ef       	ldi	r24, 0xFF	; 255
    1de6:	9f ef       	ldi	r25, 0xFF	; 255
    1de8:	20 c0       	rjmp	.+64     	; 0x1e2a <fputc+0x5a>
    1dea:	82 ff       	sbrs	r24, 2
    1dec:	10 c0       	rjmp	.+32     	; 0x1e0e <fputc+0x3e>
    1dee:	4e 81       	ldd	r20, Y+6	; 0x06
    1df0:	5f 81       	ldd	r21, Y+7	; 0x07
    1df2:	2c 81       	ldd	r18, Y+4	; 0x04
    1df4:	3d 81       	ldd	r19, Y+5	; 0x05
    1df6:	42 17       	cp	r20, r18
    1df8:	53 07       	cpc	r21, r19
    1dfa:	7c f4       	brge	.+30     	; 0x1e1a <fputc+0x4a>
    1dfc:	e8 81       	ld	r30, Y
    1dfe:	f9 81       	ldd	r31, Y+1	; 0x01
    1e00:	9f 01       	movw	r18, r30
    1e02:	2f 5f       	subi	r18, 0xFF	; 255
    1e04:	3f 4f       	sbci	r19, 0xFF	; 255
    1e06:	39 83       	std	Y+1, r19	; 0x01
    1e08:	28 83       	st	Y, r18
    1e0a:	10 83       	st	Z, r17
    1e0c:	06 c0       	rjmp	.+12     	; 0x1e1a <fputc+0x4a>
    1e0e:	e8 85       	ldd	r30, Y+8	; 0x08
    1e10:	f9 85       	ldd	r31, Y+9	; 0x09
    1e12:	81 2f       	mov	r24, r17
    1e14:	09 95       	icall
    1e16:	89 2b       	or	r24, r25
    1e18:	29 f7       	brne	.-54     	; 0x1de4 <fputc+0x14>
    1e1a:	2e 81       	ldd	r18, Y+6	; 0x06
    1e1c:	3f 81       	ldd	r19, Y+7	; 0x07
    1e1e:	2f 5f       	subi	r18, 0xFF	; 255
    1e20:	3f 4f       	sbci	r19, 0xFF	; 255
    1e22:	3f 83       	std	Y+7, r19	; 0x07
    1e24:	2e 83       	std	Y+6, r18	; 0x06
    1e26:	81 2f       	mov	r24, r17
    1e28:	90 2f       	mov	r25, r16
    1e2a:	df 91       	pop	r29
    1e2c:	cf 91       	pop	r28
    1e2e:	1f 91       	pop	r17
    1e30:	0f 91       	pop	r16
    1e32:	08 95       	ret

00001e34 <__ultoa_invert>:
    1e34:	fa 01       	movw	r30, r20
    1e36:	aa 27       	eor	r26, r26
    1e38:	28 30       	cpi	r18, 0x08	; 8
    1e3a:	51 f1       	breq	.+84     	; 0x1e90 <__ultoa_invert+0x5c>
    1e3c:	20 31       	cpi	r18, 0x10	; 16
    1e3e:	81 f1       	breq	.+96     	; 0x1ea0 <__ultoa_invert+0x6c>
    1e40:	e8 94       	clt
    1e42:	6f 93       	push	r22
    1e44:	6e 7f       	andi	r22, 0xFE	; 254
    1e46:	6e 5f       	subi	r22, 0xFE	; 254
    1e48:	7f 4f       	sbci	r23, 0xFF	; 255
    1e4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4e:	af 4f       	sbci	r26, 0xFF	; 255
    1e50:	b1 e0       	ldi	r27, 0x01	; 1
    1e52:	3e d0       	rcall	.+124    	; 0x1ed0 <__ultoa_invert+0x9c>
    1e54:	b4 e0       	ldi	r27, 0x04	; 4
    1e56:	3c d0       	rcall	.+120    	; 0x1ed0 <__ultoa_invert+0x9c>
    1e58:	67 0f       	add	r22, r23
    1e5a:	78 1f       	adc	r23, r24
    1e5c:	89 1f       	adc	r24, r25
    1e5e:	9a 1f       	adc	r25, r26
    1e60:	a1 1d       	adc	r26, r1
    1e62:	68 0f       	add	r22, r24
    1e64:	79 1f       	adc	r23, r25
    1e66:	8a 1f       	adc	r24, r26
    1e68:	91 1d       	adc	r25, r1
    1e6a:	a1 1d       	adc	r26, r1
    1e6c:	6a 0f       	add	r22, r26
    1e6e:	71 1d       	adc	r23, r1
    1e70:	81 1d       	adc	r24, r1
    1e72:	91 1d       	adc	r25, r1
    1e74:	a1 1d       	adc	r26, r1
    1e76:	20 d0       	rcall	.+64     	; 0x1eb8 <__ultoa_invert+0x84>
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <__ultoa_invert+0x48>
    1e7a:	68 94       	set
    1e7c:	3f 91       	pop	r19
    1e7e:	2a e0       	ldi	r18, 0x0A	; 10
    1e80:	26 9f       	mul	r18, r22
    1e82:	11 24       	eor	r1, r1
    1e84:	30 19       	sub	r19, r0
    1e86:	30 5d       	subi	r19, 0xD0	; 208
    1e88:	31 93       	st	Z+, r19
    1e8a:	de f6       	brtc	.-74     	; 0x1e42 <__ultoa_invert+0xe>
    1e8c:	cf 01       	movw	r24, r30
    1e8e:	08 95       	ret
    1e90:	46 2f       	mov	r20, r22
    1e92:	47 70       	andi	r20, 0x07	; 7
    1e94:	40 5d       	subi	r20, 0xD0	; 208
    1e96:	41 93       	st	Z+, r20
    1e98:	b3 e0       	ldi	r27, 0x03	; 3
    1e9a:	0f d0       	rcall	.+30     	; 0x1eba <__ultoa_invert+0x86>
    1e9c:	c9 f7       	brne	.-14     	; 0x1e90 <__ultoa_invert+0x5c>
    1e9e:	f6 cf       	rjmp	.-20     	; 0x1e8c <__ultoa_invert+0x58>
    1ea0:	46 2f       	mov	r20, r22
    1ea2:	4f 70       	andi	r20, 0x0F	; 15
    1ea4:	40 5d       	subi	r20, 0xD0	; 208
    1ea6:	4a 33       	cpi	r20, 0x3A	; 58
    1ea8:	18 f0       	brcs	.+6      	; 0x1eb0 <__ultoa_invert+0x7c>
    1eaa:	49 5d       	subi	r20, 0xD9	; 217
    1eac:	31 fd       	sbrc	r19, 1
    1eae:	40 52       	subi	r20, 0x20	; 32
    1eb0:	41 93       	st	Z+, r20
    1eb2:	02 d0       	rcall	.+4      	; 0x1eb8 <__ultoa_invert+0x84>
    1eb4:	a9 f7       	brne	.-22     	; 0x1ea0 <__ultoa_invert+0x6c>
    1eb6:	ea cf       	rjmp	.-44     	; 0x1e8c <__ultoa_invert+0x58>
    1eb8:	b4 e0       	ldi	r27, 0x04	; 4
    1eba:	a6 95       	lsr	r26
    1ebc:	97 95       	ror	r25
    1ebe:	87 95       	ror	r24
    1ec0:	77 95       	ror	r23
    1ec2:	67 95       	ror	r22
    1ec4:	ba 95       	dec	r27
    1ec6:	c9 f7       	brne	.-14     	; 0x1eba <__ultoa_invert+0x86>
    1ec8:	00 97       	sbiw	r24, 0x00	; 0
    1eca:	61 05       	cpc	r22, r1
    1ecc:	71 05       	cpc	r23, r1
    1ece:	08 95       	ret
    1ed0:	9b 01       	movw	r18, r22
    1ed2:	ac 01       	movw	r20, r24
    1ed4:	0a 2e       	mov	r0, r26
    1ed6:	06 94       	lsr	r0
    1ed8:	57 95       	ror	r21
    1eda:	47 95       	ror	r20
    1edc:	37 95       	ror	r19
    1ede:	27 95       	ror	r18
    1ee0:	ba 95       	dec	r27
    1ee2:	c9 f7       	brne	.-14     	; 0x1ed6 <__ultoa_invert+0xa2>
    1ee4:	62 0f       	add	r22, r18
    1ee6:	73 1f       	adc	r23, r19
    1ee8:	84 1f       	adc	r24, r20
    1eea:	95 1f       	adc	r25, r21
    1eec:	a0 1d       	adc	r26, r0
    1eee:	08 95       	ret

00001ef0 <__prologue_saves__>:
    1ef0:	2f 92       	push	r2
    1ef2:	3f 92       	push	r3
    1ef4:	4f 92       	push	r4
    1ef6:	5f 92       	push	r5
    1ef8:	6f 92       	push	r6
    1efa:	7f 92       	push	r7
    1efc:	8f 92       	push	r8
    1efe:	9f 92       	push	r9
    1f00:	af 92       	push	r10
    1f02:	bf 92       	push	r11
    1f04:	cf 92       	push	r12
    1f06:	df 92       	push	r13
    1f08:	ef 92       	push	r14
    1f0a:	ff 92       	push	r15
    1f0c:	0f 93       	push	r16
    1f0e:	1f 93       	push	r17
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	ca 1b       	sub	r28, r26
    1f1a:	db 0b       	sbc	r29, r27
    1f1c:	0f b6       	in	r0, 0x3f	; 63
    1f1e:	f8 94       	cli
    1f20:	de bf       	out	0x3e, r29	; 62
    1f22:	0f be       	out	0x3f, r0	; 63
    1f24:	cd bf       	out	0x3d, r28	; 61
    1f26:	09 94       	ijmp

00001f28 <__epilogue_restores__>:
    1f28:	2a 88       	ldd	r2, Y+18	; 0x12
    1f2a:	39 88       	ldd	r3, Y+17	; 0x11
    1f2c:	48 88       	ldd	r4, Y+16	; 0x10
    1f2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f30:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f32:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f34:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f36:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f38:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f3a:	b9 84       	ldd	r11, Y+9	; 0x09
    1f3c:	c8 84       	ldd	r12, Y+8	; 0x08
    1f3e:	df 80       	ldd	r13, Y+7	; 0x07
    1f40:	ee 80       	ldd	r14, Y+6	; 0x06
    1f42:	fd 80       	ldd	r15, Y+5	; 0x05
    1f44:	0c 81       	ldd	r16, Y+4	; 0x04
    1f46:	1b 81       	ldd	r17, Y+3	; 0x03
    1f48:	aa 81       	ldd	r26, Y+2	; 0x02
    1f4a:	b9 81       	ldd	r27, Y+1	; 0x01
    1f4c:	ce 0f       	add	r28, r30
    1f4e:	d1 1d       	adc	r29, r1
    1f50:	0f b6       	in	r0, 0x3f	; 63
    1f52:	f8 94       	cli
    1f54:	de bf       	out	0x3e, r29	; 62
    1f56:	0f be       	out	0x3f, r0	; 63
    1f58:	cd bf       	out	0x3d, r28	; 61
    1f5a:	ed 01       	movw	r28, r26
    1f5c:	08 95       	ret

00001f5e <_exit>:
    1f5e:	f8 94       	cli

00001f60 <__stop_program>:
    1f60:	ff cf       	rjmp	.-2      	; 0x1f60 <__stop_program>
