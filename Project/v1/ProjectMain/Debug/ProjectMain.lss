
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015e  00800100  00001682  00001716  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001682  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  0080025e  0080025e  00001874  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001874  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d0  00000000  00000000  000018d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001da6  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000af6  00000000  00000000  00003846  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d18  00000000  00000000  0000433c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000424  00000000  00000000  00005054  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000095b  00000000  00000000  00005478  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f95  00000000  00000000  00005dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000190  00000000  00000000  00006d68  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	c9 c1       	rjmp	.+914    	; 0x3a0 <__bad_interrupt>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <SLI_init+0xc>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e2 e8       	ldi	r30, 0x82	; 130
     37c:	f6 e1       	ldi	r31, 0x16	; 22
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ae 35       	cpi	r26, 0x5E	; 94
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	ae e5       	ldi	r26, 0x5E	; 94
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a9 37       	cpi	r26, 0x79	; 121
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	08 d1       	rcall	.+528    	; 0x5ac <main>
     39c:	0c 94 3f 0b 	jmp	0x167e	; 0x167e <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
/*
=======================INTERRUPTS=========================
*/

ISR(USART0_RXC_vect)		
{
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
	//interrupt generated after receiving a byte over UART 
	receivedByte = UDR0;		//received byte
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 6a 02 	sts	0x026A, r24
	USARTreceivedFlag = 1;		//set the flag to 1
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 60 02 	sts	0x0260, r24
}
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:

ISR(INT0_vect)
{
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
	//interrupt generated on pin PD2 after the conversion in the ADC is completed
	ADCconversionCompletedFlag = 1;
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 5f 02 	sts	0x025F, r24
}
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:

ISR(INT1_vect)
{
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
	//interrupt generated on pin PD3 to start the joystick calibration
	JOYcalibFlag = 1;
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 5e 02 	sts	0x025E, r24
}
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <SRAM_test>:
/*
=======================FUNCTION DEFINITIONS=========================
*/

void SRAM_test(void)
{
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors= 0;
	uint16_t retrieval_errors= 0;
	
	printf("Starting SRAM test...\n");
     40e:	86 e1       	ldi	r24, 0x16	; 22
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	c3 d4       	rcall	.+2438   	; 0xd9a <puts>
	
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before thisfunction)
	
	uint16_t seed = rand();
     414:	59 d4       	rcall	.+2226   	; 0xcc8 <rand>
     416:	7c 01       	movw	r14, r24
	
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     418:	5a d4       	rcall	.+2228   	; 0xcce <srand>
     41a:	c0 e0       	ldi	r28, 0x00	; 0
     41c:	d8 e1       	ldi	r29, 0x18	; 24

void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors= 0;
     41e:	00 e0       	ldi	r16, 0x00	; 0
     420:	10 e0       	ldi	r17, 0x00	; 0
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	
	for (uint16_t i = 0; i < ext_ram_size; i++) 
	{
		uint8_t some_value = rand();
     422:	52 d4       	rcall	.+2212   	; 0xcc8 <rand>
		ext_ram[i] = some_value;
     424:	88 83       	st	Y, r24
		uint8_t retreived_value = ext_ram[i];
     426:	98 81       	ld	r25, Y
		
		if (retreived_value != some_value) 
     428:	98 17       	cp	r25, r24
     42a:	11 f0       	breq	.+4      	; 0x430 <SRAM_test+0x2e>
		{
			//printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			write_errors++;
     42c:	0f 5f       	subi	r16, 0xFF	; 255
     42e:	1f 4f       	sbci	r17, 0xFF	; 255
     430:	21 96       	adiw	r28, 0x01	; 1
	uint16_t seed = rand();
	
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	
	for (uint16_t i = 0; i < ext_ram_size; i++) 
     432:	c1 15       	cp	r28, r1
     434:	80 e2       	ldi	r24, 0x20	; 32
     436:	d8 07       	cpc	r29, r24
     438:	a1 f7       	brne	.-24     	; 0x422 <SRAM_test+0x20>
		}

	}
	
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
     43a:	c7 01       	movw	r24, r14
     43c:	48 d4       	rcall	.+2192   	; 0xcce <srand>
     43e:	c0 e0       	ldi	r28, 0x00	; 0
     440:	d8 e1       	ldi	r29, 0x18	; 24
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors= 0;
	uint16_t retrieval_errors= 0;
     442:	e1 2c       	mov	r14, r1
     444:	f1 2c       	mov	r15, r1
	srand(seed);
	
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) 
	{
		uint8_t some_value = rand();
     446:	40 d4       	rcall	.+2176   	; 0xcc8 <rand>
		uint8_t retreived_value = ext_ram[i];
     448:	98 81       	ld	r25, Y
		
		if (retreived_value != some_value) 
     44a:	98 17       	cp	r25, r24
     44c:	19 f0       	breq	.+6      	; 0x454 <SRAM_test+0x52>
		{
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
     44e:	8f ef       	ldi	r24, 0xFF	; 255
     450:	e8 1a       	sub	r14, r24
     452:	f8 0a       	sbc	r15, r24
     454:	21 96       	adiw	r28, 0x01	; 1
	
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) 
     456:	c1 15       	cp	r28, r1
     458:	80 e2       	ldi	r24, 0x20	; 32
     45a:	d8 07       	cpc	r29, r24
     45c:	a1 f7       	brne	.-24     	; 0x446 <SRAM_test+0x44>
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	
	printf("SRAM test completed with\n %4d errors in write phase and\n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
     45e:	ff 92       	push	r15
     460:	ef 92       	push	r14
     462:	1f 93       	push	r17
     464:	0f 93       	push	r16
     466:	8c e2       	ldi	r24, 0x2C	; 44
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	9f 93       	push	r25
     46c:	8f 93       	push	r24
     46e:	84 d4       	rcall	.+2312   	; 0xd78 <printf>
     470:	0f 90       	pop	r0
     472:	0f 90       	pop	r0
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
}
     47c:	df 91       	pop	r29
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	0f 91       	pop	r16
     484:	ff 90       	pop	r15
     486:	ef 90       	pop	r14
     488:	08 95       	ret

0000048a <init>:

void init(void)
{
     48a:	ef 92       	push	r14
     48c:	ff 92       	push	r15
     48e:	0f 93       	push	r16
     490:	1f 93       	push	r17
	// call initialization subroutines
	uartInit(BAUDRATE, FOSC, UBRR);
     492:	1f e1       	ldi	r17, 0x1F	; 31
     494:	e1 2e       	mov	r14, r17
     496:	f1 2c       	mov	r15, r1
     498:	00 e0       	ldi	r16, 0x00	; 0
     49a:	10 e0       	ldi	r17, 0x00	; 0
     49c:	20 e0       	ldi	r18, 0x00	; 0
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	4b e4       	ldi	r20, 0x4B	; 75
     4a2:	50 e0       	ldi	r21, 0x00	; 0
     4a4:	60 e8       	ldi	r22, 0x80	; 128
     4a6:	75 e2       	ldi	r23, 0x25	; 37
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	5e d3       	rcall	.+1724   	; 0xb6a <uartInit>
	enableXMEM(1);
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	88 d0       	rcall	.+272    	; 0x5c2 <enableXMEM>
	SLI_init();
     4b2:	41 d3       	rcall	.+1666   	; 0xb36 <SLI_init>
	JOY_init();
     4b4:	98 d0       	rcall	.+304    	; 0x5e6 <JOY_init>
	OLED_init();
     4b6:	b3 d2       	rcall	.+1382   	; 0xa1e <OLED_init>
	//MENU_activate();
	
	// setup interrupts
	// init external interrupt INT0 on falling edge
	set_bit(GICR, INT0);
     4b8:	8b b7       	in	r24, 0x3b	; 59
     4ba:	80 64       	ori	r24, 0x40	; 64
     4bc:	8b bf       	out	0x3b, r24	; 59
	set_bit(MCUCR, ISC01);
     4be:	85 b7       	in	r24, 0x35	; 53
     4c0:	82 60       	ori	r24, 0x02	; 2
     4c2:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     4c4:	85 b7       	in	r24, 0x35	; 53
     4c6:	8e 7f       	andi	r24, 0xFE	; 254
     4c8:	85 bf       	out	0x35, r24	; 53
	// Pull-up on PD3
	clear_bit(DDRD, PD3);
     4ca:	8b 98       	cbi	0x11, 3	; 17
	set_bit(PORTD, PD3);
     4cc:	93 9a       	sbi	0x12, 3	; 18
	// init external interrupt INT1 on falling edge
	set_bit(GICR, INT1);
     4ce:	8b b7       	in	r24, 0x3b	; 59
     4d0:	80 68       	ori	r24, 0x80	; 128
     4d2:	8b bf       	out	0x3b, r24	; 59
	set_bit(MCUCR, ISC11);
     4d4:	85 b7       	in	r24, 0x35	; 53
     4d6:	88 60       	ori	r24, 0x08	; 8
     4d8:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC10);
     4da:	85 b7       	in	r24, 0x35	; 53
     4dc:	8b 7f       	andi	r24, 0xFB	; 251
     4de:	85 bf       	out	0x35, r24	; 53
	// PE2
	clear_bit(DDRE, PE2);
     4e0:	32 98       	cbi	0x06, 2	; 6
	clear_bit(PORTE, PE2);
     4e2:	3a 98       	cbi	0x07, 2	; 7
	// PB0
	clear_bit(DDRB, PB0);
     4e4:	b8 98       	cbi	0x17, 0	; 23
	clear_bit(PORTB, PB0);
     4e6:	c0 98       	cbi	0x18, 0	; 24
	// activate interrupts
	sei();
     4e8:	78 94       	sei

	// call SRAM Test
	SRAM_test();
     4ea:	8b df       	rcall	.-234    	; 0x402 <SRAM_test>
}
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	ff 90       	pop	r15
     4f2:	ef 90       	pop	r14
     4f4:	08 95       	ret

000004f6 <statusMultifunctionBoard>:

// print status variables of Multifunction Board
void statusMultifunctionBoard(){
     4f6:	ff 92       	push	r15
     4f8:	0f 93       	push	r16
     4fa:	1f 93       	push	r17
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	28 97       	sbiw	r28, 0x08	; 8
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
	JOY_position_t currentJoyPosition;
	currentJoyPosition = JOY_getPosition();
     510:	f8 d1       	rcall	.+1008   	; 0x902 <JOY_getPosition>
     512:	29 83       	std	Y+1, r18	; 0x01
     514:	3a 83       	std	Y+2, r19	; 0x02
     516:	4b 83       	std	Y+3, r20	; 0x03
     518:	5c 83       	std	Y+4, r21	; 0x04
     51a:	6d 83       	std	Y+5, r22	; 0x05
     51c:	7e 83       	std	Y+6, r23	; 0x06
     51e:	8f 83       	std	Y+7, r24	; 0x07
     520:	98 87       	std	Y+8, r25	; 0x08

	JOY_direction_t currentJoyDirection;
	currentJoyDirection = JOY_getDirection();
     522:	13 d2       	rcall	.+1062   	; 0x94a <JOY_getDirection>
     524:	f8 2e       	mov	r15, r24

	SLI_position_t currentSliPosition;
	currentSliPosition = SLI_getPosition();
     526:	10 d3       	rcall	.+1568   	; 0xb48 <SLI_getPosition>
	uint8_t rightButton = 0;

	char directions[] = {'C', 'U', 'D', 'R', 'L'};
	char* dir;
	
	if((PINB & (1<<PB0)))
     528:	b0 9b       	sbis	0x16, 0	; 22
		{
			//printf("Left button clicked ");
			leftButton = 1;
		}
		else if((PINE & (1<<PE2)))
     52a:	85 b1       	in	r24, 0x05	; 5
		{
			//printf("Right button clicked ");
			rightButton = 1;
		}
		
	switch(currentJoyDirection)
     52c:	82 e0       	ldi	r24, 0x02	; 2
     52e:	f8 16       	cp	r15, r24
     530:	91 f0       	breq	.+36     	; 0x556 <__stack+0x57>
     532:	8f 15       	cp	r24, r15
     534:	30 f0       	brcs	.+12     	; 0x542 <__stack+0x43>
     536:	ff 20       	and	r15, r15
     538:	b9 f0       	breq	.+46     	; 0x568 <__stack+0x69>
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	f9 16       	cp	r15, r25
     53e:	41 f0       	breq	.+16     	; 0x550 <__stack+0x51>
     540:	15 c0       	rjmp	.+42     	; 0x56c <__stack+0x6d>
     542:	83 e0       	ldi	r24, 0x03	; 3
     544:	f8 16       	cp	r15, r24
     546:	51 f0       	breq	.+20     	; 0x55c <__stack+0x5d>
     548:	94 e0       	ldi	r25, 0x04	; 4
     54a:	f9 16       	cp	r15, r25
     54c:	51 f0       	breq	.+20     	; 0x562 <__stack+0x63>
     54e:	0e c0       	rjmp	.+28     	; 0x56c <__stack+0x6d>

		dir = "CENTER";
		break;

		case 1:
		dir = "UP";
     550:	0b e8       	ldi	r16, 0x8B	; 139
     552:	11 e0       	ldi	r17, 0x01	; 1
		break;
     554:	0b c0       	rjmp	.+22     	; 0x56c <__stack+0x6d>

		case 2:
		dir = "DOWN";
     556:	0e e8       	ldi	r16, 0x8E	; 142
     558:	11 e0       	ldi	r17, 0x01	; 1
		break;
     55a:	08 c0       	rjmp	.+16     	; 0x56c <__stack+0x6d>

		case 3:
		dir = "RIGHT";
     55c:	03 e9       	ldi	r16, 0x93	; 147
     55e:	11 e0       	ldi	r17, 0x01	; 1
		break;
     560:	05 c0       	rjmp	.+10     	; 0x56c <__stack+0x6d>

		case 4:
		dir = "LEFT";
     562:	09 e9       	ldi	r16, 0x99	; 153
     564:	11 e0       	ldi	r17, 0x01	; 1
		break;
     566:	02 c0       	rjmp	.+4      	; 0x56c <__stack+0x6d>
		
	switch(currentJoyDirection)
	{
		case 0:

		dir = "CENTER";
     568:	04 e8       	ldi	r16, 0x84	; 132
     56a:	11 e0       	ldi	r17, 0x01	; 1
		dir = "LEFT";
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
     56c:	88 85       	ldd	r24, Y+8	; 0x08
     56e:	8f 93       	push	r24
     570:	8f 81       	ldd	r24, Y+7	; 0x07
     572:	8f 93       	push	r24
     574:	8e 81       	ldd	r24, Y+6	; 0x06
     576:	8f 93       	push	r24
     578:	8d 81       	ldd	r24, Y+5	; 0x05
     57a:	8f 93       	push	r24
     57c:	1f 93       	push	r17
     57e:	0f 93       	push	r16
     580:	8e e9       	ldi	r24, 0x9E	; 158
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	9f 93       	push	r25
     586:	8f 93       	push	r24
     588:	f7 d3       	rcall	.+2030   	; 0xd78 <printf>
     58a:	0f b6       	in	r0, 0x3f	; 63
     58c:	f8 94       	cli
     58e:	de bf       	out	0x3e, r29	; 62
     590:	0f be       	out	0x3f, r0	; 63
     592:	cd bf       	out	0x3d, r28	; 61
}
     594:	28 96       	adiw	r28, 0x08	; 8
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
     5a0:	df 91       	pop	r29
     5a2:	cf 91       	pop	r28
     5a4:	1f 91       	pop	r17
     5a6:	0f 91       	pop	r16
     5a8:	ff 90       	pop	r15
     5aa:	08 95       	ret

000005ac <main>:
=======================MAIN FUNCTION=========================
*/

int main(void)
{	
	init();
     5ac:	6e df       	rcall	.-292    	; 0x48a <init>
	
    while(1)
    {	
		statusMultifunctionBoard();
     5ae:	a3 df       	rcall	.-186    	; 0x4f6 <statusMultifunctionBoard>
		JOY_getDirection();
     5b0:	cc d1       	rcall	.+920    	; 0x94a <JOY_getDirection>

		// todo: remove! will be included in the menu driver later
		if(JOYcalibFlag)
     5b2:	80 91 5e 02 	lds	r24, 0x025E
     5b6:	88 23       	and	r24, r24
     5b8:	d1 f3       	breq	.-12     	; 0x5ae <main+0x2>
		{
			//run joystick calibration
			JOY_calibrate();
     5ba:	28 d0       	rcall	.+80     	; 0x60c <JOY_calibrate>
			JOYcalibFlag = 0;
     5bc:	10 92 5e 02 	sts	0x025E, r1
     5c0:	f6 cf       	rjmp	.-20     	; 0x5ae <main+0x2>

000005c2 <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     5c2:	95 b7       	in	r25, 0x35	; 53
     5c4:	90 68       	ori	r25, 0x80	; 128
     5c6:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     5c8:	96 b7       	in	r25, 0x36	; 54
     5ca:	98 60       	ori	r25, 0x08	; 8
     5cc:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     5ce:	88 23       	and	r24, r24
     5d0:	19 f0       	breq	.+6      	; 0x5d8 <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     5d2:	80 b7       	in	r24, 0x30	; 48
     5d4:	80 62       	ori	r24, 0x20	; 32
     5d6:	80 bf       	out	0x30, r24	; 48
     5d8:	08 95       	ret

000005da <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     5da:	fc 01       	movw	r30, r24
     5dc:	80 81       	ld	r24, Z
	return val;
}
     5de:	08 95       	ret

000005e0 <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     5e0:	fc 01       	movw	r30, r24
     5e2:	60 83       	st	Z, r22
     5e4:	08 95       	ret

000005e6 <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     5e6:	10 92 63 02 	sts	0x0263, r1
     5ea:	10 92 62 02 	sts	0x0262, r1
	currentPosition.Y_abs = 0;
     5ee:	10 92 65 02 	sts	0x0265, r1
     5f2:	10 92 64 02 	sts	0x0264, r1
	currentPosition.X_per = 0;
     5f6:	10 92 67 02 	sts	0x0267, r1
     5fa:	10 92 66 02 	sts	0x0266, r1
	currentPosition.Y_per = 0;
     5fe:	10 92 69 02 	sts	0x0269, r1
     602:	10 92 68 02 	sts	0x0268, r1
	currentDirection = CENTRE;
     606:	10 92 61 02 	sts	0x0261, r1
     60a:	08 95       	ret

0000060c <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
	uint8_t temp = 0;
	
	printf("Move JOY to the right\n");
     610:	84 eb       	ldi	r24, 0xB4	; 180
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	c2 d3       	rcall	.+1924   	; 0xd9a <puts>
     616:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     618:	4f ef       	ldi	r20, 0xFF	; 255
     61a:	52 e0       	ldi	r21, 0x02	; 2
     61c:	21 50       	subi	r18, 0x01	; 1
     61e:	40 40       	sbci	r20, 0x00	; 0
     620:	50 40       	sbci	r21, 0x00	; 0
     622:	e1 f7       	brne	.-8      	; 0x61c <JOY_calibrate+0x10>
     624:	00 c0       	rjmp	.+0      	; 0x626 <JOY_calibrate+0x1a>
     626:	00 c0       	rjmp	.+0      	; 0x628 <JOY_calibrate+0x1c>
     628:	c4 e1       	ldi	r28, 0x14	; 20
     62a:	d0 e0       	ldi	r29, 0x00	; 0
     62c:	60 91 0a 01 	lds	r22, 0x010A
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     630:	70 91 0b 01 	lds	r23, 0x010B
     634:	82 e0       	ldi	r24, 0x02	; 2
     636:	b2 d2       	rcall	.+1380   	; 0xb9c <ADC_request>
     638:	8f ef       	ldi	r24, 0xFF	; 255
     63a:	9f e1       	ldi	r25, 0x1F	; 31
     63c:	21 e0       	ldi	r18, 0x01	; 1
     63e:	81 50       	subi	r24, 0x01	; 1
     640:	90 40       	sbci	r25, 0x00	; 0
     642:	20 40       	sbci	r18, 0x00	; 0
     644:	e1 f7       	brne	.-8      	; 0x63e <JOY_calibrate+0x32>
     646:	00 c0       	rjmp	.+0      	; 0x648 <JOY_calibrate+0x3c>
     648:	00 00       	nop
     64a:	80 91 0a 01 	lds	r24, 0x010A
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     64e:	90 91 0b 01 	lds	r25, 0x010B
     652:	c8 d2       	rcall	.+1424   	; 0xbe4 <ADC_read>
     654:	90 91 11 01 	lds	r25, 0x0111
     658:	98 17       	cp	r25, r24
		
		if(temp > calR) {calR = temp;}
     65a:	10 f4       	brcc	.+4      	; 0x660 <JOY_calibrate+0x54>
     65c:	80 93 11 01 	sts	0x0111, r24
     660:	21 97       	sbiw	r28, 0x01	; 1
     662:	20 97       	sbiw	r28, 0x00	; 0
     664:	19 f7       	brne	.-58     	; 0x62c <JOY_calibrate+0x20>
     666:	8a ec       	ldi	r24, 0xCA	; 202
	uint8_t temp = 0;
	
	printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     668:	91 e0       	ldi	r25, 0x01	; 1
     66a:	97 d3       	rcall	.+1838   	; 0xd9a <puts>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	printf("Move JOY to the left\n");
     66c:	4f ef       	ldi	r20, 0xFF	; 255
     66e:	5f ef       	ldi	r21, 0xFF	; 255
     670:	82 e0       	ldi	r24, 0x02	; 2
     672:	41 50       	subi	r20, 0x01	; 1
     674:	50 40       	sbci	r21, 0x00	; 0
     676:	80 40       	sbci	r24, 0x00	; 0
     678:	e1 f7       	brne	.-8      	; 0x672 <JOY_calibrate+0x66>
     67a:	00 c0       	rjmp	.+0      	; 0x67c <JOY_calibrate+0x70>
     67c:	00 c0       	rjmp	.+0      	; 0x67e <JOY_calibrate+0x72>
     67e:	c4 e1       	ldi	r28, 0x14	; 20
     680:	d0 e0       	ldi	r29, 0x00	; 0
     682:	60 91 0a 01 	lds	r22, 0x010A
     686:	70 91 0b 01 	lds	r23, 0x010B
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	87 d2       	rcall	.+1294   	; 0xb9c <ADC_request>
     68e:	9f ef       	ldi	r25, 0xFF	; 255
     690:	2f e1       	ldi	r18, 0x1F	; 31
     692:	41 e0       	ldi	r20, 0x01	; 1
     694:	91 50       	subi	r25, 0x01	; 1
     696:	20 40       	sbci	r18, 0x00	; 0
     698:	40 40       	sbci	r20, 0x00	; 0
     69a:	e1 f7       	brne	.-8      	; 0x694 <JOY_calibrate+0x88>
     69c:	00 c0       	rjmp	.+0      	; 0x69e <JOY_calibrate+0x92>
     69e:	00 00       	nop
     6a0:	80 91 0a 01 	lds	r24, 0x010A
     6a4:	90 91 0b 01 	lds	r25, 0x010B
     6a8:	9d d2       	rcall	.+1338   	; 0xbe4 <ADC_read>
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     6aa:	90 91 10 01 	lds	r25, 0x0110
     6ae:	89 17       	cp	r24, r25
     6b0:	10 f4       	brcc	.+4      	; 0x6b6 <JOY_calibrate+0xaa>
     6b2:	80 93 10 01 	sts	0x0110, r24
		
		if(temp < calL) {calL = temp;}
     6b6:	21 97       	sbiw	r28, 0x01	; 1
     6b8:	20 97       	sbiw	r28, 0x00	; 0
     6ba:	19 f7       	brne	.-58     	; 0x682 <JOY_calibrate+0x76>
     6bc:	8f ed       	ldi	r24, 0xDF	; 223
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	6c d3       	rcall	.+1752   	; 0xd9a <puts>
     6c2:	5f ef       	ldi	r21, 0xFF	; 255
	}
	
	printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     6c4:	8f ef       	ldi	r24, 0xFF	; 255
     6c6:	92 e0       	ldi	r25, 0x02	; 2
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	printf("Move JOY up\n");
     6c8:	51 50       	subi	r21, 0x01	; 1
     6ca:	80 40       	sbci	r24, 0x00	; 0
     6cc:	90 40       	sbci	r25, 0x00	; 0
     6ce:	e1 f7       	brne	.-8      	; 0x6c8 <JOY_calibrate+0xbc>
     6d0:	00 c0       	rjmp	.+0      	; 0x6d2 <JOY_calibrate+0xc6>
     6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <JOY_calibrate+0xc8>
     6d4:	c4 e1       	ldi	r28, 0x14	; 20
     6d6:	d0 e0       	ldi	r29, 0x00	; 0
     6d8:	60 91 0a 01 	lds	r22, 0x010A
     6dc:	70 91 0b 01 	lds	r23, 0x010B
     6e0:	81 e0       	ldi	r24, 0x01	; 1
     6e2:	5c d2       	rcall	.+1208   	; 0xb9c <ADC_request>
     6e4:	2f ef       	ldi	r18, 0xFF	; 255
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     6e6:	4f e1       	ldi	r20, 0x1F	; 31
     6e8:	51 e0       	ldi	r21, 0x01	; 1
     6ea:	21 50       	subi	r18, 0x01	; 1
     6ec:	40 40       	sbci	r20, 0x00	; 0
     6ee:	50 40       	sbci	r21, 0x00	; 0
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <JOY_calibrate+0xde>
     6f2:	00 c0       	rjmp	.+0      	; 0x6f4 <JOY_calibrate+0xe8>
     6f4:	00 00       	nop
     6f6:	80 91 0a 01 	lds	r24, 0x010A
     6fa:	90 91 0b 01 	lds	r25, 0x010B
     6fe:	72 d2       	rcall	.+1252   	; 0xbe4 <ADC_read>
     700:	90 91 0f 01 	lds	r25, 0x010F
     704:	98 17       	cp	r25, r24
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     706:	10 f4       	brcc	.+4      	; 0x70c <JOY_calibrate+0x100>
     708:	80 93 0f 01 	sts	0x010F, r24
     70c:	21 97       	sbiw	r28, 0x01	; 1
     70e:	20 97       	sbiw	r28, 0x00	; 0
     710:	19 f7       	brne	.-58     	; 0x6d8 <JOY_calibrate+0xcc>
		
		if(temp > calUp) {calUp = temp;}
     712:	8b ee       	ldi	r24, 0xEB	; 235
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	41 d3       	rcall	.+1666   	; 0xd9a <puts>
     718:	8f ef       	ldi	r24, 0xFF	; 255
     71a:	9f ef       	ldi	r25, 0xFF	; 255
     71c:	22 e0       	ldi	r18, 0x02	; 2
     71e:	81 50       	subi	r24, 0x01	; 1
	}
	
	printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     720:	90 40       	sbci	r25, 0x00	; 0
     722:	20 40       	sbci	r18, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	printf("Move JOY down\n");
     724:	e1 f7       	brne	.-8      	; 0x71e <JOY_calibrate+0x112>
     726:	00 c0       	rjmp	.+0      	; 0x728 <JOY_calibrate+0x11c>
     728:	00 c0       	rjmp	.+0      	; 0x72a <JOY_calibrate+0x11e>
     72a:	c4 e1       	ldi	r28, 0x14	; 20
     72c:	d0 e0       	ldi	r29, 0x00	; 0
     72e:	60 91 0a 01 	lds	r22, 0x010A
     732:	70 91 0b 01 	lds	r23, 0x010B
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	31 d2       	rcall	.+1122   	; 0xb9c <ADC_request>
     73a:	4f ef       	ldi	r20, 0xFF	; 255
     73c:	5f e1       	ldi	r21, 0x1F	; 31
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	41 50       	subi	r20, 0x01	; 1
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     742:	50 40       	sbci	r21, 0x00	; 0
     744:	80 40       	sbci	r24, 0x00	; 0
     746:	e1 f7       	brne	.-8      	; 0x740 <JOY_calibrate+0x134>
     748:	00 c0       	rjmp	.+0      	; 0x74a <JOY_calibrate+0x13e>
     74a:	00 00       	nop
     74c:	80 91 0a 01 	lds	r24, 0x010A
     750:	90 91 0b 01 	lds	r25, 0x010B
     754:	47 d2       	rcall	.+1166   	; 0xbe4 <ADC_read>
     756:	90 91 0e 01 	lds	r25, 0x010E
     75a:	89 17       	cp	r24, r25
     75c:	10 f4       	brcc	.+4      	; 0x762 <JOY_calibrate+0x156>
     75e:	80 93 0e 01 	sts	0x010E, r24
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     762:	21 97       	sbiw	r28, 0x01	; 1
     764:	20 97       	sbiw	r28, 0x00	; 0
     766:	19 f7       	brne	.-58     	; 0x72e <JOY_calibrate+0x122>
     768:	30 91 0e 01 	lds	r19, 0x010E
     76c:	20 91 0f 01 	lds	r18, 0x010F
		
		if(temp < calDown) {calDown = temp;}
     770:	90 91 10 01 	lds	r25, 0x0110
     774:	80 91 11 01 	lds	r24, 0x0111
     778:	1f 92       	push	r1
     77a:	3f 93       	push	r19
	}
	
	printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     77c:	1f 92       	push	r1
     77e:	2f 93       	push	r18
		
		if(temp < calDown) {calDown = temp;}
	}
	
	
	printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
     780:	1f 92       	push	r1
     782:	9f 93       	push	r25
     784:	1f 92       	push	r1
     786:	8f 93       	push	r24
     788:	89 ef       	ldi	r24, 0xF9	; 249
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	9f 93       	push	r25
     78e:	8f 93       	push	r24
     790:	f3 d2       	rcall	.+1510   	; 0xd78 <printf>
     792:	20 91 0f 01 	lds	r18, 0x010F
     796:	80 91 0e 01 	lds	r24, 0x010E
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	28 1b       	sub	r18, r24
     79e:	31 09       	sbc	r19, r1
     7a0:	c9 01       	movw	r24, r18
     7a2:	4d b7       	in	r20, 0x3d	; 61
     7a4:	5e b7       	in	r21, 0x3e	; 62
     7a6:	46 5f       	subi	r20, 0xF6	; 246
     7a8:	5f 4f       	sbci	r21, 0xFF	; 255
     7aa:	0f b6       	in	r0, 0x3f	; 63
	
	meanVert = (calUp - calDown)/2;
     7ac:	f8 94       	cli
     7ae:	5e bf       	out	0x3e, r21	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	4d bf       	out	0x3d, r20	; 61
     7b4:	99 23       	and	r25, r25
     7b6:	0c f4       	brge	.+2      	; 0x7ba <JOY_calibrate+0x1ae>
     7b8:	01 96       	adiw	r24, 0x01	; 1
     7ba:	95 95       	asr	r25
     7bc:	87 95       	ror	r24
     7be:	80 93 0d 01 	sts	0x010D, r24
     7c2:	20 91 11 01 	lds	r18, 0x0111
     7c6:	80 91 10 01 	lds	r24, 0x0110
     7ca:	30 e0       	ldi	r19, 0x00	; 0
     7cc:	28 1b       	sub	r18, r24
     7ce:	31 09       	sbc	r19, r1
     7d0:	c9 01       	movw	r24, r18
     7d2:	99 23       	and	r25, r25
     7d4:	0c f4       	brge	.+2      	; 0x7d8 <JOY_calibrate+0x1cc>
     7d6:	01 96       	adiw	r24, 0x01	; 1
     7d8:	95 95       	asr	r25
     7da:	87 95       	ror	r24
	meanHor = (calR - calL)/2;
     7dc:	80 93 0c 01 	sts	0x010C, r24
     7e0:	90 91 0c 01 	lds	r25, 0x010C
     7e4:	80 91 0d 01 	lds	r24, 0x010D
     7e8:	1f 92       	push	r1
     7ea:	9f 93       	push	r25
     7ec:	1f 92       	push	r1
     7ee:	8f 93       	push	r24
     7f0:	83 e2       	ldi	r24, 0x23	; 35
     7f2:	92 e0       	ldi	r25, 0x02	; 2
     7f4:	9f 93       	push	r25
     7f6:	8f 93       	push	r24
     7f8:	bf d2       	rcall	.+1406   	; 0xd78 <printf>
	
	printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
     806:	df 91       	pop	r29
     808:	cf 91       	pop	r28
     80a:	08 95       	ret

0000080c <JOY_requestCurrentPosition>:
     80c:	88 37       	cpi	r24, 0x78	; 120
     80e:	39 f4       	brne	.+14     	; 0x81e <JOY_requestCurrentPosition+0x12>
     810:	60 91 0a 01 	lds	r22, 0x010A
     814:	70 91 0b 01 	lds	r23, 0x010B
     818:	82 e0       	ldi	r24, 0x02	; 2
     81a:	c0 c1       	rjmp	.+896    	; 0xb9c <ADC_request>
     81c:	08 95       	ret
     81e:	89 37       	cpi	r24, 0x79	; 121
     820:	31 f4       	brne	.+12     	; 0x82e <JOY_requestCurrentPosition+0x22>
}
     822:	60 91 0a 01 	lds	r22, 0x010A
     826:	70 91 0b 01 	lds	r23, 0x010B
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
	{
		ADC_request(Y_channel, adc_ext_ram);
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	b7 c1       	rjmp	.+878    	; 0xb9c <ADC_request>
     82e:	08 95       	ret

00000830 <JOY_updatePosition>:
     830:	88 37       	cpi	r24, 0x78	; 120
     832:	f9 f4       	brne	.+62     	; 0x872 <JOY_updatePosition+0x42>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     834:	80 91 0a 01 	lds	r24, 0x010A
     838:	90 91 0b 01 	lds	r25, 0x010B
     83c:	d3 d1       	rcall	.+934    	; 0xbe4 <ADC_read>
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	90 93 63 02 	sts	0x0263, r25
     844:	80 93 62 02 	sts	0x0262, r24
     848:	20 91 0c 01 	lds	r18, 0x010C
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     84c:	60 91 0c 01 	lds	r22, 0x010C
     850:	ac 01       	movw	r20, r24
     852:	42 1b       	sub	r20, r18
     854:	51 09       	sbc	r21, r1
     856:	9a 01       	movw	r18, r20
     858:	44 e6       	ldi	r20, 0x64	; 100
     85a:	42 9f       	mul	r20, r18
     85c:	c0 01       	movw	r24, r0
     85e:	43 9f       	mul	r20, r19
     860:	90 0d       	add	r25, r0
     862:	11 24       	eor	r1, r1
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	c0 d1       	rcall	.+896    	; 0xbe8 <__divmodhi4>
     868:	70 93 67 02 	sts	0x0267, r23
     86c:	60 93 66 02 	sts	0x0266, r22
     870:	08 95       	ret
     872:	89 37       	cpi	r24, 0x79	; 121
     874:	f1 f4       	brne	.+60     	; 0x8b2 <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     876:	80 91 0a 01 	lds	r24, 0x010A
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     87a:	90 91 0b 01 	lds	r25, 0x010B
     87e:	b2 d1       	rcall	.+868    	; 0xbe4 <ADC_read>
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	90 93 65 02 	sts	0x0265, r25
     886:	80 93 64 02 	sts	0x0264, r24
     88a:	20 91 0d 01 	lds	r18, 0x010D
     88e:	60 91 0d 01 	lds	r22, 0x010D
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     892:	ac 01       	movw	r20, r24
     894:	42 1b       	sub	r20, r18
     896:	51 09       	sbc	r21, r1
     898:	9a 01       	movw	r18, r20
     89a:	44 e6       	ldi	r20, 0x64	; 100
     89c:	42 9f       	mul	r20, r18
     89e:	c0 01       	movw	r24, r0
     8a0:	43 9f       	mul	r20, r19
     8a2:	90 0d       	add	r25, r0
     8a4:	11 24       	eor	r1, r1
     8a6:	70 e0       	ldi	r23, 0x00	; 0
     8a8:	9f d1       	rcall	.+830    	; 0xbe8 <__divmodhi4>
     8aa:	70 93 69 02 	sts	0x0269, r23
     8ae:	60 93 68 02 	sts	0x0268, r22
     8b2:	08 95       	ret

000008b4 <JOY_calculateDirection>:
     8b4:	80 91 66 02 	lds	r24, 0x0266
     8b8:	90 91 67 02 	lds	r25, 0x0267
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     8bc:	8b 35       	cpi	r24, 0x5B	; 91
     8be:	91 05       	cpc	r25, r1
     8c0:	24 f0       	brlt	.+8      	; 0x8ca <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     8c2:	83 e0       	ldi	r24, 0x03	; 3
     8c4:	80 93 61 02 	sts	0x0261, r24
     8c8:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     8ca:	86 3a       	cpi	r24, 0xA6	; 166
     8cc:	9f 4f       	sbci	r25, 0xFF	; 255
     8ce:	24 f4       	brge	.+8      	; 0x8d8 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     8d0:	84 e0       	ldi	r24, 0x04	; 4
     8d2:	80 93 61 02 	sts	0x0261, r24
     8d6:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     8d8:	80 91 68 02 	lds	r24, 0x0268
     8dc:	90 91 69 02 	lds	r25, 0x0269
     8e0:	8b 35       	cpi	r24, 0x5B	; 91
     8e2:	91 05       	cpc	r25, r1
     8e4:	24 f0       	brlt	.+8      	; 0x8ee <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     8e6:	81 e0       	ldi	r24, 0x01	; 1
     8e8:	80 93 61 02 	sts	0x0261, r24
     8ec:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     8ee:	86 3a       	cpi	r24, 0xA6	; 166
     8f0:	9f 4f       	sbci	r25, 0xFF	; 255
     8f2:	24 f4       	brge	.+8      	; 0x8fc <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     8f4:	82 e0       	ldi	r24, 0x02	; 2
     8f6:	80 93 61 02 	sts	0x0261, r24
     8fa:	08 95       	ret
	else{currentDirection = CENTRE;}
     8fc:	10 92 61 02 	sts	0x0261, r1
     900:	08 95       	ret

00000902 <JOY_getPosition>:

//------------------------------------------------------------------------------
// This function returns the current position of the Joystick.
// It is a struct with the four parameters X_abs, Y_abs, X_per and Y_per
JOY_position_t JOY_getPosition()
{
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	cd b7       	in	r28, 0x3d	; 61
     908:	de b7       	in	r29, 0x3e	; 62
     90a:	28 97       	sbiw	r28, 0x08	; 8
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	f8 94       	cli
     910:	de bf       	out	0x3e, r29	; 62
     912:	0f be       	out	0x3f, r0	; 63
     914:	cd bf       	out	0x3d, r28	; 61
	return currentPosition;
     916:	88 e0       	ldi	r24, 0x08	; 8
     918:	e2 e6       	ldi	r30, 0x62	; 98
     91a:	f2 e0       	ldi	r31, 0x02	; 2
     91c:	de 01       	movw	r26, r28
     91e:	11 96       	adiw	r26, 0x01	; 1
     920:	01 90       	ld	r0, Z+
     922:	0d 92       	st	X+, r0
     924:	8a 95       	dec	r24
     926:	e1 f7       	brne	.-8      	; 0x920 <JOY_getPosition+0x1e>
     928:	29 81       	ldd	r18, Y+1	; 0x01
     92a:	3a 81       	ldd	r19, Y+2	; 0x02
     92c:	4b 81       	ldd	r20, Y+3	; 0x03
     92e:	5c 81       	ldd	r21, Y+4	; 0x04
     930:	6d 81       	ldd	r22, Y+5	; 0x05
     932:	7e 81       	ldd	r23, Y+6	; 0x06
}
     934:	8f 81       	ldd	r24, Y+7	; 0x07
     936:	98 85       	ldd	r25, Y+8	; 0x08
     938:	28 96       	adiw	r28, 0x08	; 8
     93a:	0f b6       	in	r0, 0x3f	; 63
     93c:	f8 94       	cli
     93e:	de bf       	out	0x3e, r29	; 62
     940:	0f be       	out	0x3f, r0	; 63
     942:	cd bf       	out	0x3d, r28	; 61
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	08 95       	ret

0000094a <JOY_getDirection>:
// Before the value is returned, the values of position in x and y direction are 
// requested from the ADC and written to the currentPosition and 
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
     94a:	88 e7       	ldi	r24, 0x78	; 120
     94c:	5f df       	rcall	.-322    	; 0x80c <JOY_requestCurrentPosition>
     94e:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     950:	8a 95       	dec	r24
     952:	f1 f7       	brne	.-4      	; 0x950 <JOY_getDirection+0x6>
     954:	00 00       	nop
     956:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     958:	6b df       	rcall	.-298    	; 0x830 <JOY_updatePosition>
     95a:	89 e7       	ldi	r24, 0x79	; 121
     95c:	57 df       	rcall	.-338    	; 0x80c <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     95e:	82 e6       	ldi	r24, 0x62	; 98
     960:	8a 95       	dec	r24
     962:	f1 f7       	brne	.-4      	; 0x960 <JOY_getDirection+0x16>
     964:	00 00       	nop
     966:	89 e7       	ldi	r24, 0x79	; 121
     968:	63 df       	rcall	.-314    	; 0x830 <JOY_updatePosition>
     96a:	a4 df       	rcall	.-184    	; 0x8b4 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     96c:	80 91 61 02 	lds	r24, 0x0261
     970:	08 95       	ret

00000972 <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
     972:	26 2f       	mov	r18, r22
     974:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
     976:	75 95       	asr	r23
     978:	67 95       	ror	r22
     97a:	75 95       	asr	r23
     97c:	67 95       	ror	r22
     97e:	75 95       	asr	r23
     980:	67 95       	ror	r22
     982:	75 95       	asr	r23
     984:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
     986:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
     988:	80 55       	subi	r24, 0x50	; 80
     98a:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
     98c:	e0 91 14 01 	lds	r30, 0x0114
     990:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     994:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
     996:	e0 91 14 01 	lds	r30, 0x0114
     99a:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     99e:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
     9a0:	e0 91 14 01 	lds	r30, 0x0114
     9a4:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     9a8:	60 83       	st	Z, r22
     9aa:	08 95       	ret

000009ac <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
     9ac:	1f 93       	push	r17
     9ae:	cf 93       	push	r28
     9b0:	df 93       	push	r29
     9b2:	c1 e0       	ldi	r28, 0x01	; 1
     9b4:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
     9ba:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
     9bc:	60 e0       	ldi	r22, 0x00	; 0
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	d8 df       	rcall	.-80     	; 0x972 <OLED_goto>
     9c2:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
     9c4:	e0 91 12 01 	lds	r30, 0x0112
		{
			OLED_writeByteToOLED(oled_data, 0x00);
     9c8:	f0 91 13 01 	lds	r31, 0x0113
     9cc:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     9ce:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
     9d0:	80 38       	cpi	r24, 0x80	; 128
     9d2:	c1 f7       	brne	.-16     	; 0x9c4 <OLED_clear+0x18>
     9d4:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
     9d6:	9d 2f       	mov	r25, r29
     9d8:	21 96       	adiw	r28, 0x01	; 1
     9da:	c9 30       	cpi	r28, 0x09	; 9
     9dc:	d1 05       	cpc	r29, r1
     9de:	71 f7       	brne	.-36     	; 0x9bc <OLED_clear+0x10>
     9e0:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	08 95       	ret

000009e8 <OLED_printCharacter>:
     9e8:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
     9ea:	28 2f       	mov	r18, r24
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	22 0f       	add	r18, r18
     9f0:	33 1f       	adc	r19, r19
     9f2:	22 0f       	add	r18, r18
     9f4:	33 1f       	adc	r19, r19
     9f6:	22 0f       	add	r18, r18
     9f8:	33 1f       	adc	r19, r19
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	20 59       	subi	r18, 0x90	; 144
     a00:	3f 4f       	sbci	r19, 0xFF	; 255
     a02:	f9 01       	movw	r30, r18
     a04:	e8 0f       	add	r30, r24
     a06:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
     a08:	e4 91       	lpm	r30, Z
     a0a:	a0 91 12 01 	lds	r26, 0x0112
     a0e:	b0 91 13 01 	lds	r27, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a12:	ec 93       	st	X, r30
     a14:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
     a16:	88 30       	cpi	r24, 0x08	; 8
     a18:	91 05       	cpc	r25, r1
     a1a:	99 f7       	brne	.-26     	; 0xa02 <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
     a1c:	08 95       	ret

00000a1e <OLED_init>:
//------------------------------------------------------------------------------
// Default initialization routine of the OLED display.

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
     a1e:	e0 91 14 01 	lds	r30, 0x0114
     a22:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a26:	8e ea       	ldi	r24, 0xAE	; 174
     a28:	80 83       	st	Z, r24
// Default initialization routine of the OLED display.

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
     a2a:	e0 91 14 01 	lds	r30, 0x0114
     a2e:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a32:	81 ea       	ldi	r24, 0xA1	; 161
     a34:	80 83       	st	Z, r24

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
     a36:	e0 91 14 01 	lds	r30, 0x0114
     a3a:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a3e:	8a ed       	ldi	r24, 0xDA	; 218
     a40:	80 83       	st	Z, r24
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
     a42:	e0 91 14 01 	lds	r30, 0x0114
     a46:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a4a:	82 e1       	ldi	r24, 0x12	; 18
     a4c:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
     a4e:	e0 91 14 01 	lds	r30, 0x0114
     a52:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a56:	88 ec       	ldi	r24, 0xC8	; 200
     a58:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
     a5a:	e0 91 14 01 	lds	r30, 0x0114
     a5e:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a62:	88 ea       	ldi	r24, 0xA8	; 168
     a64:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
     a66:	e0 91 14 01 	lds	r30, 0x0114
     a6a:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a6e:	8f e3       	ldi	r24, 0x3F	; 63
     a70:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
     a72:	e0 91 14 01 	lds	r30, 0x0114
     a76:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a7a:	85 ed       	ldi	r24, 0xD5	; 213
     a7c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
     a7e:	e0 91 14 01 	lds	r30, 0x0114
     a82:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a86:	80 e8       	ldi	r24, 0x80	; 128
     a88:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
     a8a:	e0 91 14 01 	lds	r30, 0x0114
     a8e:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a92:	81 e8       	ldi	r24, 0x81	; 129
     a94:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
     a96:	e0 91 14 01 	lds	r30, 0x0114
     a9a:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a9e:	80 e5       	ldi	r24, 0x50	; 80
     aa0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
     aa2:	e0 91 14 01 	lds	r30, 0x0114
     aa6:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     aaa:	89 ed       	ldi	r24, 0xD9	; 217
     aac:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
     aae:	e0 91 14 01 	lds	r30, 0x0114
     ab2:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ab6:	81 e2       	ldi	r24, 0x21	; 33
     ab8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
     aba:	e0 91 14 01 	lds	r30, 0x0114
     abe:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ac2:	80 e2       	ldi	r24, 0x20	; 32
     ac4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
     ac6:	e0 91 14 01 	lds	r30, 0x0114
     aca:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
     ad2:	e0 91 14 01 	lds	r30, 0x0114
     ad6:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ada:	8b ed       	ldi	r24, 0xDB	; 219
     adc:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
     ade:	e0 91 14 01 	lds	r30, 0x0114
     ae2:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ae6:	80 e3       	ldi	r24, 0x30	; 48
     ae8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
     aea:	e0 91 14 01 	lds	r30, 0x0114
     aee:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     af2:	8d ea       	ldi	r24, 0xAD	; 173
     af4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
     af6:	e0 91 14 01 	lds	r30, 0x0114
     afa:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     afe:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
     b00:	e0 91 14 01 	lds	r30, 0x0114
     b04:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b08:	84 ea       	ldi	r24, 0xA4	; 164
     b0a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
     b0c:	e0 91 14 01 	lds	r30, 0x0114
     b10:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b14:	86 ea       	ldi	r24, 0xA6	; 166
     b16:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
     b18:	e0 91 14 01 	lds	r30, 0x0114
     b1c:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b20:	8f ea       	ldi	r24, 0xAF	; 175
     b22:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
     b24:	43 df       	rcall	.-378    	; 0x9ac <OLED_clear>
     b26:	67 e7       	ldi	r22, 0x77	; 119
	OLED_goto(7, 119);
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	87 e0       	ldi	r24, 0x07	; 7
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	21 df       	rcall	.-446    	; 0x972 <OLED_goto>
     b30:	8a e2       	ldi	r24, 0x2A	; 42
     b32:	5a cf       	rjmp	.-332    	; 0x9e8 <OLED_printCharacter>
	OLED_printCharacter('*');
     b34:	08 95       	ret

00000b36 <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
     b36:	10 92 6b 02 	sts	0x026B, r1
	currentSliPosition.L_abs = 0;
     b3a:	10 92 6c 02 	sts	0x026C, r1
	currentSliPosition.R_per = 0;
     b3e:	10 92 6d 02 	sts	0x026D, r1
	currentSliPosition.L_per = 0;
     b42:	10 92 6e 02 	sts	0x026E, r1
     b46:	08 95       	ret

00000b48 <SLI_getPosition>:
}

//
SLI_position_t SLI_getPosition()
{
	return currentSliPosition;
     b48:	60 91 6b 02 	lds	r22, 0x026B
     b4c:	70 91 6c 02 	lds	r23, 0x026C
     b50:	80 91 6d 02 	lds	r24, 0x026D
     b54:	90 91 6e 02 	lds	r25, 0x026E
     b58:	08 95       	ret

00000b5a <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     b5a:	5d 9b       	sbis	0x0b, 5	; 11
     b5c:	fe cf       	rjmp	.-4      	; 0xb5a <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
     b5e:	8c b9       	out	0x0c, r24	; 12
     b60:	08 95       	ret

00000b62 <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
     b62:	5f 9b       	sbis	0x0b, 7	; 11
     b64:	fe cf       	rjmp	.-4      	; 0xb62 <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
     b66:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
     b68:	08 95       	ret

00000b6a <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
     b6a:	ef 92       	push	r14
     b6c:	ff 92       	push	r15
     b6e:	0f 93       	push	r16
     b70:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
     b72:	bb 27       	eor	r27, r27
     b74:	a1 2f       	mov	r26, r17
     b76:	90 2f       	mov	r25, r16
     b78:	8f 2d       	mov	r24, r15
     b7a:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
     b7c:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     b7e:	88 e1       	ldi	r24, 0x18	; 24
     b80:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
     b82:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     b84:	8e e8       	ldi	r24, 0x8E	; 142
     b86:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
     b88:	61 eb       	ldi	r22, 0xB1	; 177
     b8a:	75 e0       	ldi	r23, 0x05	; 5
     b8c:	8d ea       	ldi	r24, 0xAD	; 173
     b8e:	95 e0       	ldi	r25, 0x05	; 5
     b90:	a9 d0       	rcall	.+338    	; 0xce4 <fdevopen>
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	08 95       	ret

00000b9c <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
     b9c:	9b 01       	movw	r18, r22
	
	switch(channel){
     b9e:	82 30       	cpi	r24, 0x02	; 2
     ba0:	69 f0       	breq	.+26     	; 0xbbc <ADC_request+0x20>
     ba2:	18 f4       	brcc	.+6      	; 0xbaa <ADC_request+0xe>
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	31 f0       	breq	.+12     	; 0xbb4 <ADC_request+0x18>
     ba8:	15 c0       	rjmp	.+42     	; 0xbd4 <ADC_request+0x38>
     baa:	83 30       	cpi	r24, 0x03	; 3
     bac:	59 f0       	breq	.+22     	; 0xbc4 <ADC_request+0x28>
     bae:	84 30       	cpi	r24, 0x04	; 4
     bb0:	69 f0       	breq	.+26     	; 0xbcc <ADC_request+0x30>
     bb2:	10 c0       	rjmp	.+32     	; 0xbd4 <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
     bb4:	64 e0       	ldi	r22, 0x04	; 4
     bb6:	c9 01       	movw	r24, r18
     bb8:	13 cd       	rjmp	.-1498   	; 0x5e0 <saveToAddress>
     bba:	08 95       	ret
			break;
     bbc:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
     bbe:	c9 01       	movw	r24, r18
     bc0:	0f cd       	rjmp	.-1506   	; 0x5e0 <saveToAddress>
     bc2:	08 95       	ret
     bc4:	66 e0       	ldi	r22, 0x06	; 6
			break;
     bc6:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
     bc8:	0b cd       	rjmp	.-1514   	; 0x5e0 <saveToAddress>
     bca:	08 95       	ret
     bcc:	67 e0       	ldi	r22, 0x07	; 7
     bce:	c9 01       	movw	r24, r18
			break;
     bd0:	07 cd       	rjmp	.-1522   	; 0x5e0 <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
     bd2:	08 95       	ret
     bd4:	88 e4       	ldi	r24, 0x48	; 72
     bd6:	92 e0       	ldi	r25, 0x02	; 2
     bd8:	9f 93       	push	r25
			break;
     bda:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
     bdc:	cd d0       	rcall	.+410    	; 0xd78 <printf>
     bde:	0f 90       	pop	r0
     be0:	0f 90       	pop	r0
     be2:	08 95       	ret

00000be4 <ADC_read>:
     be4:	fa cc       	rjmp	.-1548   	; 0x5da <readFromAddress>
     be6:	08 95       	ret

00000be8 <__divmodhi4>:
			break;
     be8:	97 fb       	bst	r25, 7
     bea:	07 2e       	mov	r0, r23
     bec:	16 f4       	brtc	.+4      	; 0xbf2 <__divmodhi4+0xa>
     bee:	00 94       	com	r0
     bf0:	06 d0       	rcall	.+12     	; 0xbfe <__divmodhi4_neg1>
     bf2:	77 fd       	sbrc	r23, 7
     bf4:	08 d0       	rcall	.+16     	; 0xc06 <__divmodhi4_neg2>
     bf6:	0b d0       	rcall	.+22     	; 0xc0e <__udivmodhi4>
     bf8:	07 fc       	sbrc	r0, 7
     bfa:	05 d0       	rcall	.+10     	; 0xc06 <__divmodhi4_neg2>
     bfc:	3e f4       	brtc	.+14     	; 0xc0c <__divmodhi4_exit>

00000bfe <__divmodhi4_neg1>:
     bfe:	90 95       	com	r25
     c00:	81 95       	neg	r24
     c02:	9f 4f       	sbci	r25, 0xFF	; 255
     c04:	08 95       	ret

00000c06 <__divmodhi4_neg2>:
     c06:	70 95       	com	r23
     c08:	61 95       	neg	r22
     c0a:	7f 4f       	sbci	r23, 0xFF	; 255

00000c0c <__divmodhi4_exit>:
     c0c:	08 95       	ret

00000c0e <__udivmodhi4>:
     c0e:	aa 1b       	sub	r26, r26
     c10:	bb 1b       	sub	r27, r27
     c12:	51 e1       	ldi	r21, 0x11	; 17
     c14:	07 c0       	rjmp	.+14     	; 0xc24 <__udivmodhi4_ep>

00000c16 <__udivmodhi4_loop>:
     c16:	aa 1f       	adc	r26, r26
     c18:	bb 1f       	adc	r27, r27
     c1a:	a6 17       	cp	r26, r22
     c1c:	b7 07       	cpc	r27, r23
     c1e:	10 f0       	brcs	.+4      	; 0xc24 <__udivmodhi4_ep>
     c20:	a6 1b       	sub	r26, r22
     c22:	b7 0b       	sbc	r27, r23

00000c24 <__udivmodhi4_ep>:
     c24:	88 1f       	adc	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	5a 95       	dec	r21
     c2a:	a9 f7       	brne	.-22     	; 0xc16 <__udivmodhi4_loop>
     c2c:	80 95       	com	r24
     c2e:	90 95       	com	r25
     c30:	bc 01       	movw	r22, r24
     c32:	cd 01       	movw	r24, r26
     c34:	08 95       	ret

00000c36 <do_rand>:
     c36:	8f 92       	push	r8
     c38:	9f 92       	push	r9
     c3a:	af 92       	push	r10
     c3c:	bf 92       	push	r11
     c3e:	cf 92       	push	r12
     c40:	df 92       	push	r13
     c42:	ef 92       	push	r14
     c44:	ff 92       	push	r15
     c46:	cf 93       	push	r28
     c48:	df 93       	push	r29
     c4a:	ec 01       	movw	r28, r24
     c4c:	68 81       	ld	r22, Y
     c4e:	79 81       	ldd	r23, Y+1	; 0x01
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	9b 81       	ldd	r25, Y+3	; 0x03
     c54:	61 15       	cp	r22, r1
     c56:	71 05       	cpc	r23, r1
     c58:	81 05       	cpc	r24, r1
     c5a:	91 05       	cpc	r25, r1
     c5c:	21 f4       	brne	.+8      	; 0xc66 <do_rand+0x30>
     c5e:	64 e2       	ldi	r22, 0x24	; 36
     c60:	79 ed       	ldi	r23, 0xD9	; 217
     c62:	8b e5       	ldi	r24, 0x5B	; 91
     c64:	97 e0       	ldi	r25, 0x07	; 7
     c66:	2d e1       	ldi	r18, 0x1D	; 29
     c68:	33 ef       	ldi	r19, 0xF3	; 243
     c6a:	41 e0       	ldi	r20, 0x01	; 1
     c6c:	50 e0       	ldi	r21, 0x00	; 0
     c6e:	73 d4       	rcall	.+2278   	; 0x1556 <__divmodsi4>
     c70:	49 01       	movw	r8, r18
     c72:	5a 01       	movw	r10, r20
     c74:	9b 01       	movw	r18, r22
     c76:	ac 01       	movw	r20, r24
     c78:	a7 ea       	ldi	r26, 0xA7	; 167
     c7a:	b1 e4       	ldi	r27, 0x41	; 65
     c7c:	88 d4       	rcall	.+2320   	; 0x158e <__muluhisi3>
     c7e:	6b 01       	movw	r12, r22
     c80:	7c 01       	movw	r14, r24
     c82:	ac ee       	ldi	r26, 0xEC	; 236
     c84:	b4 ef       	ldi	r27, 0xF4	; 244
     c86:	a5 01       	movw	r20, r10
     c88:	94 01       	movw	r18, r8
     c8a:	8d d4       	rcall	.+2330   	; 0x15a6 <__mulohisi3>
     c8c:	c6 0e       	add	r12, r22
     c8e:	d7 1e       	adc	r13, r23
     c90:	e8 1e       	adc	r14, r24
     c92:	f9 1e       	adc	r15, r25
     c94:	f7 fe       	sbrs	r15, 7
     c96:	06 c0       	rjmp	.+12     	; 0xca4 <do_rand+0x6e>
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	c8 1a       	sub	r12, r24
     c9c:	d1 08       	sbc	r13, r1
     c9e:	e1 08       	sbc	r14, r1
     ca0:	80 e8       	ldi	r24, 0x80	; 128
     ca2:	f8 0a       	sbc	r15, r24
     ca4:	c8 82       	st	Y, r12
     ca6:	d9 82       	std	Y+1, r13	; 0x01
     ca8:	ea 82       	std	Y+2, r14	; 0x02
     caa:	fb 82       	std	Y+3, r15	; 0x03
     cac:	c6 01       	movw	r24, r12
     cae:	9f 77       	andi	r25, 0x7F	; 127
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	ff 90       	pop	r15
     cb6:	ef 90       	pop	r14
     cb8:	df 90       	pop	r13
     cba:	cf 90       	pop	r12
     cbc:	bf 90       	pop	r11
     cbe:	af 90       	pop	r10
     cc0:	9f 90       	pop	r9
     cc2:	8f 90       	pop	r8
     cc4:	08 95       	ret

00000cc6 <rand_r>:
     cc6:	b7 cf       	rjmp	.-146    	; 0xc36 <do_rand>

00000cc8 <rand>:
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	b4 cf       	rjmp	.-152    	; 0xc36 <do_rand>

00000cce <srand>:
     cce:	a0 e0       	ldi	r26, 0x00	; 0
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	80 93 00 01 	sts	0x0100, r24
     cd6:	90 93 01 01 	sts	0x0101, r25
     cda:	a0 93 02 01 	sts	0x0102, r26
     cde:	b0 93 03 01 	sts	0x0103, r27
     ce2:	08 95       	ret

00000ce4 <fdevopen>:
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	ec 01       	movw	r28, r24
     cee:	8b 01       	movw	r16, r22
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	31 f4       	brne	.+12     	; 0xd00 <fdevopen+0x1c>
     cf4:	61 15       	cp	r22, r1
     cf6:	71 05       	cpc	r23, r1
     cf8:	19 f4       	brne	.+6      	; 0xd00 <fdevopen+0x1c>
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	37 c0       	rjmp	.+110    	; 0xd6e <fdevopen+0x8a>
     d00:	6e e0       	ldi	r22, 0x0E	; 14
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	38 d2       	rcall	.+1136   	; 0x117a <calloc>
     d0a:	fc 01       	movw	r30, r24
     d0c:	00 97       	sbiw	r24, 0x00	; 0
     d0e:	a9 f3       	breq	.-22     	; 0xcfa <fdevopen+0x16>
     d10:	80 e8       	ldi	r24, 0x80	; 128
     d12:	83 83       	std	Z+3, r24	; 0x03
     d14:	01 15       	cp	r16, r1
     d16:	11 05       	cpc	r17, r1
     d18:	71 f0       	breq	.+28     	; 0xd36 <fdevopen+0x52>
     d1a:	13 87       	std	Z+11, r17	; 0x0b
     d1c:	02 87       	std	Z+10, r16	; 0x0a
     d1e:	81 e8       	ldi	r24, 0x81	; 129
     d20:	83 83       	std	Z+3, r24	; 0x03
     d22:	80 91 6f 02 	lds	r24, 0x026F
     d26:	90 91 70 02 	lds	r25, 0x0270
     d2a:	89 2b       	or	r24, r25
     d2c:	21 f4       	brne	.+8      	; 0xd36 <fdevopen+0x52>
     d2e:	f0 93 70 02 	sts	0x0270, r31
     d32:	e0 93 6f 02 	sts	0x026F, r30
     d36:	20 97       	sbiw	r28, 0x00	; 0
     d38:	c9 f0       	breq	.+50     	; 0xd6c <fdevopen+0x88>
     d3a:	d1 87       	std	Z+9, r29	; 0x09
     d3c:	c0 87       	std	Z+8, r28	; 0x08
     d3e:	83 81       	ldd	r24, Z+3	; 0x03
     d40:	82 60       	ori	r24, 0x02	; 2
     d42:	83 83       	std	Z+3, r24	; 0x03
     d44:	80 91 71 02 	lds	r24, 0x0271
     d48:	90 91 72 02 	lds	r25, 0x0272
     d4c:	89 2b       	or	r24, r25
     d4e:	71 f4       	brne	.+28     	; 0xd6c <fdevopen+0x88>
     d50:	f0 93 72 02 	sts	0x0272, r31
     d54:	e0 93 71 02 	sts	0x0271, r30
     d58:	80 91 73 02 	lds	r24, 0x0273
     d5c:	90 91 74 02 	lds	r25, 0x0274
     d60:	89 2b       	or	r24, r25
     d62:	21 f4       	brne	.+8      	; 0xd6c <fdevopen+0x88>
     d64:	f0 93 74 02 	sts	0x0274, r31
     d68:	e0 93 73 02 	sts	0x0273, r30
     d6c:	cf 01       	movw	r24, r30
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
     d74:	0f 91       	pop	r16
     d76:	08 95       	ret

00000d78 <printf>:
     d78:	a0 e0       	ldi	r26, 0x00	; 0
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e1 ec       	ldi	r30, 0xC1	; 193
     d7e:	f6 e0       	ldi	r31, 0x06	; 6
     d80:	26 c4       	rjmp	.+2124   	; 0x15ce <__prologue_saves__+0x20>
     d82:	fe 01       	movw	r30, r28
     d84:	35 96       	adiw	r30, 0x05	; 5
     d86:	61 91       	ld	r22, Z+
     d88:	71 91       	ld	r23, Z+
     d8a:	af 01       	movw	r20, r30
     d8c:	80 91 71 02 	lds	r24, 0x0271
     d90:	90 91 72 02 	lds	r25, 0x0272
     d94:	2f d0       	rcall	.+94     	; 0xdf4 <vfprintf>
     d96:	e2 e0       	ldi	r30, 0x02	; 2
     d98:	36 c4       	rjmp	.+2156   	; 0x1606 <__epilogue_restores__+0x20>

00000d9a <puts>:
     d9a:	0f 93       	push	r16
     d9c:	1f 93       	push	r17
     d9e:	cf 93       	push	r28
     da0:	df 93       	push	r29
     da2:	e0 91 71 02 	lds	r30, 0x0271
     da6:	f0 91 72 02 	lds	r31, 0x0272
     daa:	23 81       	ldd	r18, Z+3	; 0x03
     dac:	21 ff       	sbrs	r18, 1
     dae:	1b c0       	rjmp	.+54     	; 0xde6 <puts+0x4c>
     db0:	ec 01       	movw	r28, r24
     db2:	00 e0       	ldi	r16, 0x00	; 0
     db4:	10 e0       	ldi	r17, 0x00	; 0
     db6:	89 91       	ld	r24, Y+
     db8:	60 91 71 02 	lds	r22, 0x0271
     dbc:	70 91 72 02 	lds	r23, 0x0272
     dc0:	db 01       	movw	r26, r22
     dc2:	18 96       	adiw	r26, 0x08	; 8
     dc4:	ed 91       	ld	r30, X+
     dc6:	fc 91       	ld	r31, X
     dc8:	19 97       	sbiw	r26, 0x09	; 9
     dca:	88 23       	and	r24, r24
     dcc:	31 f0       	breq	.+12     	; 0xdda <puts+0x40>
     dce:	09 95       	icall
     dd0:	89 2b       	or	r24, r25
     dd2:	89 f3       	breq	.-30     	; 0xdb6 <puts+0x1c>
     dd4:	0f ef       	ldi	r16, 0xFF	; 255
     dd6:	1f ef       	ldi	r17, 0xFF	; 255
     dd8:	ee cf       	rjmp	.-36     	; 0xdb6 <puts+0x1c>
     dda:	8a e0       	ldi	r24, 0x0A	; 10
     ddc:	09 95       	icall
     dde:	89 2b       	or	r24, r25
     de0:	11 f4       	brne	.+4      	; 0xde6 <puts+0x4c>
     de2:	c8 01       	movw	r24, r16
     de4:	02 c0       	rjmp	.+4      	; 0xdea <puts+0x50>
     de6:	8f ef       	ldi	r24, 0xFF	; 255
     de8:	9f ef       	ldi	r25, 0xFF	; 255
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	08 95       	ret

00000df4 <vfprintf>:
     df4:	ac e0       	ldi	r26, 0x0C	; 12
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	ef ef       	ldi	r30, 0xFF	; 255
     dfa:	f6 e0       	ldi	r31, 0x06	; 6
     dfc:	d8 c3       	rjmp	.+1968   	; 0x15ae <__prologue_saves__>
     dfe:	7c 01       	movw	r14, r24
     e00:	6b 01       	movw	r12, r22
     e02:	8a 01       	movw	r16, r20
     e04:	fc 01       	movw	r30, r24
     e06:	17 82       	std	Z+7, r1	; 0x07
     e08:	16 82       	std	Z+6, r1	; 0x06
     e0a:	83 81       	ldd	r24, Z+3	; 0x03
     e0c:	81 ff       	sbrs	r24, 1
     e0e:	b0 c1       	rjmp	.+864    	; 0x1170 <vfprintf+0x37c>
     e10:	ce 01       	movw	r24, r28
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	4c 01       	movw	r8, r24
     e16:	f7 01       	movw	r30, r14
     e18:	93 81       	ldd	r25, Z+3	; 0x03
     e1a:	f6 01       	movw	r30, r12
     e1c:	93 fd       	sbrc	r25, 3
     e1e:	85 91       	lpm	r24, Z+
     e20:	93 ff       	sbrs	r25, 3
     e22:	81 91       	ld	r24, Z+
     e24:	6f 01       	movw	r12, r30
     e26:	88 23       	and	r24, r24
     e28:	09 f4       	brne	.+2      	; 0xe2c <vfprintf+0x38>
     e2a:	9e c1       	rjmp	.+828    	; 0x1168 <vfprintf+0x374>
     e2c:	85 32       	cpi	r24, 0x25	; 37
     e2e:	39 f4       	brne	.+14     	; 0xe3e <vfprintf+0x4a>
     e30:	93 fd       	sbrc	r25, 3
     e32:	85 91       	lpm	r24, Z+
     e34:	93 ff       	sbrs	r25, 3
     e36:	81 91       	ld	r24, Z+
     e38:	6f 01       	movw	r12, r30
     e3a:	85 32       	cpi	r24, 0x25	; 37
     e3c:	21 f4       	brne	.+8      	; 0xe46 <vfprintf+0x52>
     e3e:	b7 01       	movw	r22, r14
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	f9 d2       	rcall	.+1522   	; 0x1436 <fputc>
     e44:	e8 cf       	rjmp	.-48     	; 0xe16 <vfprintf+0x22>
     e46:	51 2c       	mov	r5, r1
     e48:	31 2c       	mov	r3, r1
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	20 32       	cpi	r18, 0x20	; 32
     e4e:	a0 f4       	brcc	.+40     	; 0xe78 <vfprintf+0x84>
     e50:	8b 32       	cpi	r24, 0x2B	; 43
     e52:	69 f0       	breq	.+26     	; 0xe6e <vfprintf+0x7a>
     e54:	30 f4       	brcc	.+12     	; 0xe62 <vfprintf+0x6e>
     e56:	80 32       	cpi	r24, 0x20	; 32
     e58:	59 f0       	breq	.+22     	; 0xe70 <vfprintf+0x7c>
     e5a:	83 32       	cpi	r24, 0x23	; 35
     e5c:	69 f4       	brne	.+26     	; 0xe78 <vfprintf+0x84>
     e5e:	20 61       	ori	r18, 0x10	; 16
     e60:	2c c0       	rjmp	.+88     	; 0xeba <vfprintf+0xc6>
     e62:	8d 32       	cpi	r24, 0x2D	; 45
     e64:	39 f0       	breq	.+14     	; 0xe74 <vfprintf+0x80>
     e66:	80 33       	cpi	r24, 0x30	; 48
     e68:	39 f4       	brne	.+14     	; 0xe78 <vfprintf+0x84>
     e6a:	21 60       	ori	r18, 0x01	; 1
     e6c:	26 c0       	rjmp	.+76     	; 0xeba <vfprintf+0xc6>
     e6e:	22 60       	ori	r18, 0x02	; 2
     e70:	24 60       	ori	r18, 0x04	; 4
     e72:	23 c0       	rjmp	.+70     	; 0xeba <vfprintf+0xc6>
     e74:	28 60       	ori	r18, 0x08	; 8
     e76:	21 c0       	rjmp	.+66     	; 0xeba <vfprintf+0xc6>
     e78:	27 fd       	sbrc	r18, 7
     e7a:	27 c0       	rjmp	.+78     	; 0xeca <vfprintf+0xd6>
     e7c:	30 ed       	ldi	r19, 0xD0	; 208
     e7e:	38 0f       	add	r19, r24
     e80:	3a 30       	cpi	r19, 0x0A	; 10
     e82:	78 f4       	brcc	.+30     	; 0xea2 <vfprintf+0xae>
     e84:	26 ff       	sbrs	r18, 6
     e86:	06 c0       	rjmp	.+12     	; 0xe94 <vfprintf+0xa0>
     e88:	fa e0       	ldi	r31, 0x0A	; 10
     e8a:	5f 9e       	mul	r5, r31
     e8c:	30 0d       	add	r19, r0
     e8e:	11 24       	eor	r1, r1
     e90:	53 2e       	mov	r5, r19
     e92:	13 c0       	rjmp	.+38     	; 0xeba <vfprintf+0xc6>
     e94:	8a e0       	ldi	r24, 0x0A	; 10
     e96:	38 9e       	mul	r3, r24
     e98:	30 0d       	add	r19, r0
     e9a:	11 24       	eor	r1, r1
     e9c:	33 2e       	mov	r3, r19
     e9e:	20 62       	ori	r18, 0x20	; 32
     ea0:	0c c0       	rjmp	.+24     	; 0xeba <vfprintf+0xc6>
     ea2:	8e 32       	cpi	r24, 0x2E	; 46
     ea4:	21 f4       	brne	.+8      	; 0xeae <vfprintf+0xba>
     ea6:	26 fd       	sbrc	r18, 6
     ea8:	5f c1       	rjmp	.+702    	; 0x1168 <vfprintf+0x374>
     eaa:	20 64       	ori	r18, 0x40	; 64
     eac:	06 c0       	rjmp	.+12     	; 0xeba <vfprintf+0xc6>
     eae:	8c 36       	cpi	r24, 0x6C	; 108
     eb0:	11 f4       	brne	.+4      	; 0xeb6 <vfprintf+0xc2>
     eb2:	20 68       	ori	r18, 0x80	; 128
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <vfprintf+0xc6>
     eb6:	88 36       	cpi	r24, 0x68	; 104
     eb8:	41 f4       	brne	.+16     	; 0xeca <vfprintf+0xd6>
     eba:	f6 01       	movw	r30, r12
     ebc:	93 fd       	sbrc	r25, 3
     ebe:	85 91       	lpm	r24, Z+
     ec0:	93 ff       	sbrs	r25, 3
     ec2:	81 91       	ld	r24, Z+
     ec4:	6f 01       	movw	r12, r30
     ec6:	81 11       	cpse	r24, r1
     ec8:	c1 cf       	rjmp	.-126    	; 0xe4c <vfprintf+0x58>
     eca:	98 2f       	mov	r25, r24
     ecc:	9f 7d       	andi	r25, 0xDF	; 223
     ece:	95 54       	subi	r25, 0x45	; 69
     ed0:	93 30       	cpi	r25, 0x03	; 3
     ed2:	28 f4       	brcc	.+10     	; 0xede <vfprintf+0xea>
     ed4:	0c 5f       	subi	r16, 0xFC	; 252
     ed6:	1f 4f       	sbci	r17, 0xFF	; 255
     ed8:	ff e3       	ldi	r31, 0x3F	; 63
     eda:	f9 83       	std	Y+1, r31	; 0x01
     edc:	0d c0       	rjmp	.+26     	; 0xef8 <vfprintf+0x104>
     ede:	83 36       	cpi	r24, 0x63	; 99
     ee0:	31 f0       	breq	.+12     	; 0xeee <vfprintf+0xfa>
     ee2:	83 37       	cpi	r24, 0x73	; 115
     ee4:	71 f0       	breq	.+28     	; 0xf02 <vfprintf+0x10e>
     ee6:	83 35       	cpi	r24, 0x53	; 83
     ee8:	09 f0       	breq	.+2      	; 0xeec <vfprintf+0xf8>
     eea:	57 c0       	rjmp	.+174    	; 0xf9a <vfprintf+0x1a6>
     eec:	21 c0       	rjmp	.+66     	; 0xf30 <vfprintf+0x13c>
     eee:	f8 01       	movw	r30, r16
     ef0:	80 81       	ld	r24, Z
     ef2:	89 83       	std	Y+1, r24	; 0x01
     ef4:	0e 5f       	subi	r16, 0xFE	; 254
     ef6:	1f 4f       	sbci	r17, 0xFF	; 255
     ef8:	44 24       	eor	r4, r4
     efa:	43 94       	inc	r4
     efc:	51 2c       	mov	r5, r1
     efe:	54 01       	movw	r10, r8
     f00:	14 c0       	rjmp	.+40     	; 0xf2a <vfprintf+0x136>
     f02:	38 01       	movw	r6, r16
     f04:	f2 e0       	ldi	r31, 0x02	; 2
     f06:	6f 0e       	add	r6, r31
     f08:	71 1c       	adc	r7, r1
     f0a:	f8 01       	movw	r30, r16
     f0c:	a0 80       	ld	r10, Z
     f0e:	b1 80       	ldd	r11, Z+1	; 0x01
     f10:	26 ff       	sbrs	r18, 6
     f12:	03 c0       	rjmp	.+6      	; 0xf1a <vfprintf+0x126>
     f14:	65 2d       	mov	r22, r5
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <vfprintf+0x12a>
     f1a:	6f ef       	ldi	r22, 0xFF	; 255
     f1c:	7f ef       	ldi	r23, 0xFF	; 255
     f1e:	c5 01       	movw	r24, r10
     f20:	2c 87       	std	Y+12, r18	; 0x0c
     f22:	7e d2       	rcall	.+1276   	; 0x1420 <strnlen>
     f24:	2c 01       	movw	r4, r24
     f26:	83 01       	movw	r16, r6
     f28:	2c 85       	ldd	r18, Y+12	; 0x0c
     f2a:	2f 77       	andi	r18, 0x7F	; 127
     f2c:	22 2e       	mov	r2, r18
     f2e:	16 c0       	rjmp	.+44     	; 0xf5c <vfprintf+0x168>
     f30:	38 01       	movw	r6, r16
     f32:	f2 e0       	ldi	r31, 0x02	; 2
     f34:	6f 0e       	add	r6, r31
     f36:	71 1c       	adc	r7, r1
     f38:	f8 01       	movw	r30, r16
     f3a:	a0 80       	ld	r10, Z
     f3c:	b1 80       	ldd	r11, Z+1	; 0x01
     f3e:	26 ff       	sbrs	r18, 6
     f40:	03 c0       	rjmp	.+6      	; 0xf48 <vfprintf+0x154>
     f42:	65 2d       	mov	r22, r5
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <vfprintf+0x158>
     f48:	6f ef       	ldi	r22, 0xFF	; 255
     f4a:	7f ef       	ldi	r23, 0xFF	; 255
     f4c:	c5 01       	movw	r24, r10
     f4e:	2c 87       	std	Y+12, r18	; 0x0c
     f50:	55 d2       	rcall	.+1194   	; 0x13fc <strnlen_P>
     f52:	2c 01       	movw	r4, r24
     f54:	2c 85       	ldd	r18, Y+12	; 0x0c
     f56:	20 68       	ori	r18, 0x80	; 128
     f58:	22 2e       	mov	r2, r18
     f5a:	83 01       	movw	r16, r6
     f5c:	23 fc       	sbrc	r2, 3
     f5e:	19 c0       	rjmp	.+50     	; 0xf92 <vfprintf+0x19e>
     f60:	83 2d       	mov	r24, r3
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	48 16       	cp	r4, r24
     f66:	59 06       	cpc	r5, r25
     f68:	a0 f4       	brcc	.+40     	; 0xf92 <vfprintf+0x19e>
     f6a:	b7 01       	movw	r22, r14
     f6c:	80 e2       	ldi	r24, 0x20	; 32
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	62 d2       	rcall	.+1220   	; 0x1436 <fputc>
     f72:	3a 94       	dec	r3
     f74:	f5 cf       	rjmp	.-22     	; 0xf60 <vfprintf+0x16c>
     f76:	f5 01       	movw	r30, r10
     f78:	27 fc       	sbrc	r2, 7
     f7a:	85 91       	lpm	r24, Z+
     f7c:	27 fe       	sbrs	r2, 7
     f7e:	81 91       	ld	r24, Z+
     f80:	5f 01       	movw	r10, r30
     f82:	b7 01       	movw	r22, r14
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	57 d2       	rcall	.+1198   	; 0x1436 <fputc>
     f88:	31 10       	cpse	r3, r1
     f8a:	3a 94       	dec	r3
     f8c:	f1 e0       	ldi	r31, 0x01	; 1
     f8e:	4f 1a       	sub	r4, r31
     f90:	51 08       	sbc	r5, r1
     f92:	41 14       	cp	r4, r1
     f94:	51 04       	cpc	r5, r1
     f96:	79 f7       	brne	.-34     	; 0xf76 <vfprintf+0x182>
     f98:	de c0       	rjmp	.+444    	; 0x1156 <vfprintf+0x362>
     f9a:	84 36       	cpi	r24, 0x64	; 100
     f9c:	11 f0       	breq	.+4      	; 0xfa2 <vfprintf+0x1ae>
     f9e:	89 36       	cpi	r24, 0x69	; 105
     fa0:	31 f5       	brne	.+76     	; 0xfee <vfprintf+0x1fa>
     fa2:	f8 01       	movw	r30, r16
     fa4:	27 ff       	sbrs	r18, 7
     fa6:	07 c0       	rjmp	.+14     	; 0xfb6 <vfprintf+0x1c2>
     fa8:	60 81       	ld	r22, Z
     faa:	71 81       	ldd	r23, Z+1	; 0x01
     fac:	82 81       	ldd	r24, Z+2	; 0x02
     fae:	93 81       	ldd	r25, Z+3	; 0x03
     fb0:	0c 5f       	subi	r16, 0xFC	; 252
     fb2:	1f 4f       	sbci	r17, 0xFF	; 255
     fb4:	08 c0       	rjmp	.+16     	; 0xfc6 <vfprintf+0x1d2>
     fb6:	60 81       	ld	r22, Z
     fb8:	71 81       	ldd	r23, Z+1	; 0x01
     fba:	88 27       	eor	r24, r24
     fbc:	77 fd       	sbrc	r23, 7
     fbe:	80 95       	com	r24
     fc0:	98 2f       	mov	r25, r24
     fc2:	0e 5f       	subi	r16, 0xFE	; 254
     fc4:	1f 4f       	sbci	r17, 0xFF	; 255
     fc6:	2f 76       	andi	r18, 0x6F	; 111
     fc8:	b2 2e       	mov	r11, r18
     fca:	97 ff       	sbrs	r25, 7
     fcc:	09 c0       	rjmp	.+18     	; 0xfe0 <vfprintf+0x1ec>
     fce:	90 95       	com	r25
     fd0:	80 95       	com	r24
     fd2:	70 95       	com	r23
     fd4:	61 95       	neg	r22
     fd6:	7f 4f       	sbci	r23, 0xFF	; 255
     fd8:	8f 4f       	sbci	r24, 0xFF	; 255
     fda:	9f 4f       	sbci	r25, 0xFF	; 255
     fdc:	20 68       	ori	r18, 0x80	; 128
     fde:	b2 2e       	mov	r11, r18
     fe0:	2a e0       	ldi	r18, 0x0A	; 10
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	a4 01       	movw	r20, r8
     fe6:	59 d2       	rcall	.+1202   	; 0x149a <__ultoa_invert>
     fe8:	a8 2e       	mov	r10, r24
     fea:	a8 18       	sub	r10, r8
     fec:	43 c0       	rjmp	.+134    	; 0x1074 <vfprintf+0x280>
     fee:	85 37       	cpi	r24, 0x75	; 117
     ff0:	29 f4       	brne	.+10     	; 0xffc <vfprintf+0x208>
     ff2:	2f 7e       	andi	r18, 0xEF	; 239
     ff4:	b2 2e       	mov	r11, r18
     ff6:	2a e0       	ldi	r18, 0x0A	; 10
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	25 c0       	rjmp	.+74     	; 0x1046 <vfprintf+0x252>
     ffc:	f2 2f       	mov	r31, r18
     ffe:	f9 7f       	andi	r31, 0xF9	; 249
    1000:	bf 2e       	mov	r11, r31
    1002:	8f 36       	cpi	r24, 0x6F	; 111
    1004:	c1 f0       	breq	.+48     	; 0x1036 <vfprintf+0x242>
    1006:	18 f4       	brcc	.+6      	; 0x100e <vfprintf+0x21a>
    1008:	88 35       	cpi	r24, 0x58	; 88
    100a:	79 f0       	breq	.+30     	; 0x102a <vfprintf+0x236>
    100c:	ad c0       	rjmp	.+346    	; 0x1168 <vfprintf+0x374>
    100e:	80 37       	cpi	r24, 0x70	; 112
    1010:	19 f0       	breq	.+6      	; 0x1018 <vfprintf+0x224>
    1012:	88 37       	cpi	r24, 0x78	; 120
    1014:	21 f0       	breq	.+8      	; 0x101e <vfprintf+0x22a>
    1016:	a8 c0       	rjmp	.+336    	; 0x1168 <vfprintf+0x374>
    1018:	2f 2f       	mov	r18, r31
    101a:	20 61       	ori	r18, 0x10	; 16
    101c:	b2 2e       	mov	r11, r18
    101e:	b4 fe       	sbrs	r11, 4
    1020:	0d c0       	rjmp	.+26     	; 0x103c <vfprintf+0x248>
    1022:	8b 2d       	mov	r24, r11
    1024:	84 60       	ori	r24, 0x04	; 4
    1026:	b8 2e       	mov	r11, r24
    1028:	09 c0       	rjmp	.+18     	; 0x103c <vfprintf+0x248>
    102a:	24 ff       	sbrs	r18, 4
    102c:	0a c0       	rjmp	.+20     	; 0x1042 <vfprintf+0x24e>
    102e:	9f 2f       	mov	r25, r31
    1030:	96 60       	ori	r25, 0x06	; 6
    1032:	b9 2e       	mov	r11, r25
    1034:	06 c0       	rjmp	.+12     	; 0x1042 <vfprintf+0x24e>
    1036:	28 e0       	ldi	r18, 0x08	; 8
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	05 c0       	rjmp	.+10     	; 0x1046 <vfprintf+0x252>
    103c:	20 e1       	ldi	r18, 0x10	; 16
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	02 c0       	rjmp	.+4      	; 0x1046 <vfprintf+0x252>
    1042:	20 e1       	ldi	r18, 0x10	; 16
    1044:	32 e0       	ldi	r19, 0x02	; 2
    1046:	f8 01       	movw	r30, r16
    1048:	b7 fe       	sbrs	r11, 7
    104a:	07 c0       	rjmp	.+14     	; 0x105a <vfprintf+0x266>
    104c:	60 81       	ld	r22, Z
    104e:	71 81       	ldd	r23, Z+1	; 0x01
    1050:	82 81       	ldd	r24, Z+2	; 0x02
    1052:	93 81       	ldd	r25, Z+3	; 0x03
    1054:	0c 5f       	subi	r16, 0xFC	; 252
    1056:	1f 4f       	sbci	r17, 0xFF	; 255
    1058:	06 c0       	rjmp	.+12     	; 0x1066 <vfprintf+0x272>
    105a:	60 81       	ld	r22, Z
    105c:	71 81       	ldd	r23, Z+1	; 0x01
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 5f       	subi	r16, 0xFE	; 254
    1064:	1f 4f       	sbci	r17, 0xFF	; 255
    1066:	a4 01       	movw	r20, r8
    1068:	18 d2       	rcall	.+1072   	; 0x149a <__ultoa_invert>
    106a:	a8 2e       	mov	r10, r24
    106c:	a8 18       	sub	r10, r8
    106e:	fb 2d       	mov	r31, r11
    1070:	ff 77       	andi	r31, 0x7F	; 127
    1072:	bf 2e       	mov	r11, r31
    1074:	b6 fe       	sbrs	r11, 6
    1076:	0b c0       	rjmp	.+22     	; 0x108e <vfprintf+0x29a>
    1078:	2b 2d       	mov	r18, r11
    107a:	2e 7f       	andi	r18, 0xFE	; 254
    107c:	a5 14       	cp	r10, r5
    107e:	50 f4       	brcc	.+20     	; 0x1094 <vfprintf+0x2a0>
    1080:	b4 fe       	sbrs	r11, 4
    1082:	0a c0       	rjmp	.+20     	; 0x1098 <vfprintf+0x2a4>
    1084:	b2 fc       	sbrc	r11, 2
    1086:	08 c0       	rjmp	.+16     	; 0x1098 <vfprintf+0x2a4>
    1088:	2b 2d       	mov	r18, r11
    108a:	2e 7e       	andi	r18, 0xEE	; 238
    108c:	05 c0       	rjmp	.+10     	; 0x1098 <vfprintf+0x2a4>
    108e:	7a 2c       	mov	r7, r10
    1090:	2b 2d       	mov	r18, r11
    1092:	03 c0       	rjmp	.+6      	; 0x109a <vfprintf+0x2a6>
    1094:	7a 2c       	mov	r7, r10
    1096:	01 c0       	rjmp	.+2      	; 0x109a <vfprintf+0x2a6>
    1098:	75 2c       	mov	r7, r5
    109a:	24 ff       	sbrs	r18, 4
    109c:	0d c0       	rjmp	.+26     	; 0x10b8 <vfprintf+0x2c4>
    109e:	fe 01       	movw	r30, r28
    10a0:	ea 0d       	add	r30, r10
    10a2:	f1 1d       	adc	r31, r1
    10a4:	80 81       	ld	r24, Z
    10a6:	80 33       	cpi	r24, 0x30	; 48
    10a8:	11 f4       	brne	.+4      	; 0x10ae <vfprintf+0x2ba>
    10aa:	29 7e       	andi	r18, 0xE9	; 233
    10ac:	09 c0       	rjmp	.+18     	; 0x10c0 <vfprintf+0x2cc>
    10ae:	22 ff       	sbrs	r18, 2
    10b0:	06 c0       	rjmp	.+12     	; 0x10be <vfprintf+0x2ca>
    10b2:	73 94       	inc	r7
    10b4:	73 94       	inc	r7
    10b6:	04 c0       	rjmp	.+8      	; 0x10c0 <vfprintf+0x2cc>
    10b8:	82 2f       	mov	r24, r18
    10ba:	86 78       	andi	r24, 0x86	; 134
    10bc:	09 f0       	breq	.+2      	; 0x10c0 <vfprintf+0x2cc>
    10be:	73 94       	inc	r7
    10c0:	23 fd       	sbrc	r18, 3
    10c2:	12 c0       	rjmp	.+36     	; 0x10e8 <vfprintf+0x2f4>
    10c4:	20 ff       	sbrs	r18, 0
    10c6:	06 c0       	rjmp	.+12     	; 0x10d4 <vfprintf+0x2e0>
    10c8:	5a 2c       	mov	r5, r10
    10ca:	73 14       	cp	r7, r3
    10cc:	18 f4       	brcc	.+6      	; 0x10d4 <vfprintf+0x2e0>
    10ce:	53 0c       	add	r5, r3
    10d0:	57 18       	sub	r5, r7
    10d2:	73 2c       	mov	r7, r3
    10d4:	73 14       	cp	r7, r3
    10d6:	60 f4       	brcc	.+24     	; 0x10f0 <vfprintf+0x2fc>
    10d8:	b7 01       	movw	r22, r14
    10da:	80 e2       	ldi	r24, 0x20	; 32
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	2c 87       	std	Y+12, r18	; 0x0c
    10e0:	aa d1       	rcall	.+852    	; 0x1436 <fputc>
    10e2:	73 94       	inc	r7
    10e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    10e6:	f6 cf       	rjmp	.-20     	; 0x10d4 <vfprintf+0x2e0>
    10e8:	73 14       	cp	r7, r3
    10ea:	10 f4       	brcc	.+4      	; 0x10f0 <vfprintf+0x2fc>
    10ec:	37 18       	sub	r3, r7
    10ee:	01 c0       	rjmp	.+2      	; 0x10f2 <vfprintf+0x2fe>
    10f0:	31 2c       	mov	r3, r1
    10f2:	24 ff       	sbrs	r18, 4
    10f4:	11 c0       	rjmp	.+34     	; 0x1118 <vfprintf+0x324>
    10f6:	b7 01       	movw	r22, r14
    10f8:	80 e3       	ldi	r24, 0x30	; 48
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	2c 87       	std	Y+12, r18	; 0x0c
    10fe:	9b d1       	rcall	.+822    	; 0x1436 <fputc>
    1100:	2c 85       	ldd	r18, Y+12	; 0x0c
    1102:	22 ff       	sbrs	r18, 2
    1104:	16 c0       	rjmp	.+44     	; 0x1132 <vfprintf+0x33e>
    1106:	21 ff       	sbrs	r18, 1
    1108:	03 c0       	rjmp	.+6      	; 0x1110 <vfprintf+0x31c>
    110a:	88 e5       	ldi	r24, 0x58	; 88
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <vfprintf+0x320>
    1110:	88 e7       	ldi	r24, 0x78	; 120
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	b7 01       	movw	r22, r14
    1116:	0c c0       	rjmp	.+24     	; 0x1130 <vfprintf+0x33c>
    1118:	82 2f       	mov	r24, r18
    111a:	86 78       	andi	r24, 0x86	; 134
    111c:	51 f0       	breq	.+20     	; 0x1132 <vfprintf+0x33e>
    111e:	21 fd       	sbrc	r18, 1
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <vfprintf+0x332>
    1122:	80 e2       	ldi	r24, 0x20	; 32
    1124:	01 c0       	rjmp	.+2      	; 0x1128 <vfprintf+0x334>
    1126:	8b e2       	ldi	r24, 0x2B	; 43
    1128:	27 fd       	sbrc	r18, 7
    112a:	8d e2       	ldi	r24, 0x2D	; 45
    112c:	b7 01       	movw	r22, r14
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	82 d1       	rcall	.+772    	; 0x1436 <fputc>
    1132:	a5 14       	cp	r10, r5
    1134:	30 f4       	brcc	.+12     	; 0x1142 <vfprintf+0x34e>
    1136:	b7 01       	movw	r22, r14
    1138:	80 e3       	ldi	r24, 0x30	; 48
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	7c d1       	rcall	.+760    	; 0x1436 <fputc>
    113e:	5a 94       	dec	r5
    1140:	f8 cf       	rjmp	.-16     	; 0x1132 <vfprintf+0x33e>
    1142:	aa 94       	dec	r10
    1144:	f4 01       	movw	r30, r8
    1146:	ea 0d       	add	r30, r10
    1148:	f1 1d       	adc	r31, r1
    114a:	80 81       	ld	r24, Z
    114c:	b7 01       	movw	r22, r14
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	72 d1       	rcall	.+740    	; 0x1436 <fputc>
    1152:	a1 10       	cpse	r10, r1
    1154:	f6 cf       	rjmp	.-20     	; 0x1142 <vfprintf+0x34e>
    1156:	33 20       	and	r3, r3
    1158:	09 f4       	brne	.+2      	; 0x115c <vfprintf+0x368>
    115a:	5d ce       	rjmp	.-838    	; 0xe16 <vfprintf+0x22>
    115c:	b7 01       	movw	r22, r14
    115e:	80 e2       	ldi	r24, 0x20	; 32
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	69 d1       	rcall	.+722    	; 0x1436 <fputc>
    1164:	3a 94       	dec	r3
    1166:	f7 cf       	rjmp	.-18     	; 0x1156 <vfprintf+0x362>
    1168:	f7 01       	movw	r30, r14
    116a:	86 81       	ldd	r24, Z+6	; 0x06
    116c:	97 81       	ldd	r25, Z+7	; 0x07
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <vfprintf+0x380>
    1170:	8f ef       	ldi	r24, 0xFF	; 255
    1172:	9f ef       	ldi	r25, 0xFF	; 255
    1174:	2c 96       	adiw	r28, 0x0c	; 12
    1176:	e2 e1       	ldi	r30, 0x12	; 18
    1178:	36 c2       	rjmp	.+1132   	; 0x15e6 <__epilogue_restores__>

0000117a <calloc>:
    117a:	0f 93       	push	r16
    117c:	1f 93       	push	r17
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	86 9f       	mul	r24, r22
    1184:	80 01       	movw	r16, r0
    1186:	87 9f       	mul	r24, r23
    1188:	10 0d       	add	r17, r0
    118a:	96 9f       	mul	r25, r22
    118c:	10 0d       	add	r17, r0
    118e:	11 24       	eor	r1, r1
    1190:	c8 01       	movw	r24, r16
    1192:	0d d0       	rcall	.+26     	; 0x11ae <malloc>
    1194:	ec 01       	movw	r28, r24
    1196:	00 97       	sbiw	r24, 0x00	; 0
    1198:	21 f0       	breq	.+8      	; 0x11a2 <calloc+0x28>
    119a:	a8 01       	movw	r20, r16
    119c:	60 e0       	ldi	r22, 0x00	; 0
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	38 d1       	rcall	.+624    	; 0x1412 <memset>
    11a2:	ce 01       	movw	r24, r28
    11a4:	df 91       	pop	r29
    11a6:	cf 91       	pop	r28
    11a8:	1f 91       	pop	r17
    11aa:	0f 91       	pop	r16
    11ac:	08 95       	ret

000011ae <malloc>:
    11ae:	cf 93       	push	r28
    11b0:	df 93       	push	r29
    11b2:	82 30       	cpi	r24, 0x02	; 2
    11b4:	91 05       	cpc	r25, r1
    11b6:	10 f4       	brcc	.+4      	; 0x11bc <malloc+0xe>
    11b8:	82 e0       	ldi	r24, 0x02	; 2
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	e0 91 77 02 	lds	r30, 0x0277
    11c0:	f0 91 78 02 	lds	r31, 0x0278
    11c4:	20 e0       	ldi	r18, 0x00	; 0
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	a0 e0       	ldi	r26, 0x00	; 0
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	30 97       	sbiw	r30, 0x00	; 0
    11ce:	39 f1       	breq	.+78     	; 0x121e <malloc+0x70>
    11d0:	40 81       	ld	r20, Z
    11d2:	51 81       	ldd	r21, Z+1	; 0x01
    11d4:	48 17       	cp	r20, r24
    11d6:	59 07       	cpc	r21, r25
    11d8:	b8 f0       	brcs	.+46     	; 0x1208 <malloc+0x5a>
    11da:	48 17       	cp	r20, r24
    11dc:	59 07       	cpc	r21, r25
    11de:	71 f4       	brne	.+28     	; 0x11fc <malloc+0x4e>
    11e0:	82 81       	ldd	r24, Z+2	; 0x02
    11e2:	93 81       	ldd	r25, Z+3	; 0x03
    11e4:	10 97       	sbiw	r26, 0x00	; 0
    11e6:	29 f0       	breq	.+10     	; 0x11f2 <malloc+0x44>
    11e8:	13 96       	adiw	r26, 0x03	; 3
    11ea:	9c 93       	st	X, r25
    11ec:	8e 93       	st	-X, r24
    11ee:	12 97       	sbiw	r26, 0x02	; 2
    11f0:	2c c0       	rjmp	.+88     	; 0x124a <malloc+0x9c>
    11f2:	90 93 78 02 	sts	0x0278, r25
    11f6:	80 93 77 02 	sts	0x0277, r24
    11fa:	27 c0       	rjmp	.+78     	; 0x124a <malloc+0x9c>
    11fc:	21 15       	cp	r18, r1
    11fe:	31 05       	cpc	r19, r1
    1200:	31 f0       	breq	.+12     	; 0x120e <malloc+0x60>
    1202:	42 17       	cp	r20, r18
    1204:	53 07       	cpc	r21, r19
    1206:	18 f0       	brcs	.+6      	; 0x120e <malloc+0x60>
    1208:	a9 01       	movw	r20, r18
    120a:	db 01       	movw	r26, r22
    120c:	01 c0       	rjmp	.+2      	; 0x1210 <malloc+0x62>
    120e:	ef 01       	movw	r28, r30
    1210:	9a 01       	movw	r18, r20
    1212:	bd 01       	movw	r22, r26
    1214:	df 01       	movw	r26, r30
    1216:	02 80       	ldd	r0, Z+2	; 0x02
    1218:	f3 81       	ldd	r31, Z+3	; 0x03
    121a:	e0 2d       	mov	r30, r0
    121c:	d7 cf       	rjmp	.-82     	; 0x11cc <malloc+0x1e>
    121e:	21 15       	cp	r18, r1
    1220:	31 05       	cpc	r19, r1
    1222:	f9 f0       	breq	.+62     	; 0x1262 <malloc+0xb4>
    1224:	28 1b       	sub	r18, r24
    1226:	39 0b       	sbc	r19, r25
    1228:	24 30       	cpi	r18, 0x04	; 4
    122a:	31 05       	cpc	r19, r1
    122c:	80 f4       	brcc	.+32     	; 0x124e <malloc+0xa0>
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	9b 81       	ldd	r25, Y+3	; 0x03
    1232:	61 15       	cp	r22, r1
    1234:	71 05       	cpc	r23, r1
    1236:	21 f0       	breq	.+8      	; 0x1240 <malloc+0x92>
    1238:	fb 01       	movw	r30, r22
    123a:	93 83       	std	Z+3, r25	; 0x03
    123c:	82 83       	std	Z+2, r24	; 0x02
    123e:	04 c0       	rjmp	.+8      	; 0x1248 <malloc+0x9a>
    1240:	90 93 78 02 	sts	0x0278, r25
    1244:	80 93 77 02 	sts	0x0277, r24
    1248:	fe 01       	movw	r30, r28
    124a:	32 96       	adiw	r30, 0x02	; 2
    124c:	44 c0       	rjmp	.+136    	; 0x12d6 <malloc+0x128>
    124e:	fe 01       	movw	r30, r28
    1250:	e2 0f       	add	r30, r18
    1252:	f3 1f       	adc	r31, r19
    1254:	81 93       	st	Z+, r24
    1256:	91 93       	st	Z+, r25
    1258:	22 50       	subi	r18, 0x02	; 2
    125a:	31 09       	sbc	r19, r1
    125c:	39 83       	std	Y+1, r19	; 0x01
    125e:	28 83       	st	Y, r18
    1260:	3a c0       	rjmp	.+116    	; 0x12d6 <malloc+0x128>
    1262:	20 91 75 02 	lds	r18, 0x0275
    1266:	30 91 76 02 	lds	r19, 0x0276
    126a:	23 2b       	or	r18, r19
    126c:	41 f4       	brne	.+16     	; 0x127e <malloc+0xd0>
    126e:	20 91 06 01 	lds	r18, 0x0106
    1272:	30 91 07 01 	lds	r19, 0x0107
    1276:	30 93 76 02 	sts	0x0276, r19
    127a:	20 93 75 02 	sts	0x0275, r18
    127e:	20 91 04 01 	lds	r18, 0x0104
    1282:	30 91 05 01 	lds	r19, 0x0105
    1286:	21 15       	cp	r18, r1
    1288:	31 05       	cpc	r19, r1
    128a:	41 f4       	brne	.+16     	; 0x129c <malloc+0xee>
    128c:	2d b7       	in	r18, 0x3d	; 61
    128e:	3e b7       	in	r19, 0x3e	; 62
    1290:	40 91 08 01 	lds	r20, 0x0108
    1294:	50 91 09 01 	lds	r21, 0x0109
    1298:	24 1b       	sub	r18, r20
    129a:	35 0b       	sbc	r19, r21
    129c:	e0 91 75 02 	lds	r30, 0x0275
    12a0:	f0 91 76 02 	lds	r31, 0x0276
    12a4:	e2 17       	cp	r30, r18
    12a6:	f3 07       	cpc	r31, r19
    12a8:	a0 f4       	brcc	.+40     	; 0x12d2 <malloc+0x124>
    12aa:	2e 1b       	sub	r18, r30
    12ac:	3f 0b       	sbc	r19, r31
    12ae:	28 17       	cp	r18, r24
    12b0:	39 07       	cpc	r19, r25
    12b2:	78 f0       	brcs	.+30     	; 0x12d2 <malloc+0x124>
    12b4:	ac 01       	movw	r20, r24
    12b6:	4e 5f       	subi	r20, 0xFE	; 254
    12b8:	5f 4f       	sbci	r21, 0xFF	; 255
    12ba:	24 17       	cp	r18, r20
    12bc:	35 07       	cpc	r19, r21
    12be:	48 f0       	brcs	.+18     	; 0x12d2 <malloc+0x124>
    12c0:	4e 0f       	add	r20, r30
    12c2:	5f 1f       	adc	r21, r31
    12c4:	50 93 76 02 	sts	0x0276, r21
    12c8:	40 93 75 02 	sts	0x0275, r20
    12cc:	81 93       	st	Z+, r24
    12ce:	91 93       	st	Z+, r25
    12d0:	02 c0       	rjmp	.+4      	; 0x12d6 <malloc+0x128>
    12d2:	e0 e0       	ldi	r30, 0x00	; 0
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	cf 01       	movw	r24, r30
    12d8:	df 91       	pop	r29
    12da:	cf 91       	pop	r28
    12dc:	08 95       	ret

000012de <free>:
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	00 97       	sbiw	r24, 0x00	; 0
    12e4:	09 f4       	brne	.+2      	; 0x12e8 <free+0xa>
    12e6:	87 c0       	rjmp	.+270    	; 0x13f6 <free+0x118>
    12e8:	fc 01       	movw	r30, r24
    12ea:	32 97       	sbiw	r30, 0x02	; 2
    12ec:	13 82       	std	Z+3, r1	; 0x03
    12ee:	12 82       	std	Z+2, r1	; 0x02
    12f0:	c0 91 77 02 	lds	r28, 0x0277
    12f4:	d0 91 78 02 	lds	r29, 0x0278
    12f8:	20 97       	sbiw	r28, 0x00	; 0
    12fa:	81 f4       	brne	.+32     	; 0x131c <free+0x3e>
    12fc:	20 81       	ld	r18, Z
    12fe:	31 81       	ldd	r19, Z+1	; 0x01
    1300:	28 0f       	add	r18, r24
    1302:	39 1f       	adc	r19, r25
    1304:	80 91 75 02 	lds	r24, 0x0275
    1308:	90 91 76 02 	lds	r25, 0x0276
    130c:	82 17       	cp	r24, r18
    130e:	93 07       	cpc	r25, r19
    1310:	79 f5       	brne	.+94     	; 0x1370 <free+0x92>
    1312:	f0 93 76 02 	sts	0x0276, r31
    1316:	e0 93 75 02 	sts	0x0275, r30
    131a:	6d c0       	rjmp	.+218    	; 0x13f6 <free+0x118>
    131c:	de 01       	movw	r26, r28
    131e:	20 e0       	ldi	r18, 0x00	; 0
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	ae 17       	cp	r26, r30
    1324:	bf 07       	cpc	r27, r31
    1326:	50 f4       	brcc	.+20     	; 0x133c <free+0x5e>
    1328:	12 96       	adiw	r26, 0x02	; 2
    132a:	4d 91       	ld	r20, X+
    132c:	5c 91       	ld	r21, X
    132e:	13 97       	sbiw	r26, 0x03	; 3
    1330:	9d 01       	movw	r18, r26
    1332:	41 15       	cp	r20, r1
    1334:	51 05       	cpc	r21, r1
    1336:	09 f1       	breq	.+66     	; 0x137a <free+0x9c>
    1338:	da 01       	movw	r26, r20
    133a:	f3 cf       	rjmp	.-26     	; 0x1322 <free+0x44>
    133c:	b3 83       	std	Z+3, r27	; 0x03
    133e:	a2 83       	std	Z+2, r26	; 0x02
    1340:	40 81       	ld	r20, Z
    1342:	51 81       	ldd	r21, Z+1	; 0x01
    1344:	84 0f       	add	r24, r20
    1346:	95 1f       	adc	r25, r21
    1348:	8a 17       	cp	r24, r26
    134a:	9b 07       	cpc	r25, r27
    134c:	71 f4       	brne	.+28     	; 0x136a <free+0x8c>
    134e:	8d 91       	ld	r24, X+
    1350:	9c 91       	ld	r25, X
    1352:	11 97       	sbiw	r26, 0x01	; 1
    1354:	84 0f       	add	r24, r20
    1356:	95 1f       	adc	r25, r21
    1358:	02 96       	adiw	r24, 0x02	; 2
    135a:	91 83       	std	Z+1, r25	; 0x01
    135c:	80 83       	st	Z, r24
    135e:	12 96       	adiw	r26, 0x02	; 2
    1360:	8d 91       	ld	r24, X+
    1362:	9c 91       	ld	r25, X
    1364:	13 97       	sbiw	r26, 0x03	; 3
    1366:	93 83       	std	Z+3, r25	; 0x03
    1368:	82 83       	std	Z+2, r24	; 0x02
    136a:	21 15       	cp	r18, r1
    136c:	31 05       	cpc	r19, r1
    136e:	29 f4       	brne	.+10     	; 0x137a <free+0x9c>
    1370:	f0 93 78 02 	sts	0x0278, r31
    1374:	e0 93 77 02 	sts	0x0277, r30
    1378:	3e c0       	rjmp	.+124    	; 0x13f6 <free+0x118>
    137a:	d9 01       	movw	r26, r18
    137c:	13 96       	adiw	r26, 0x03	; 3
    137e:	fc 93       	st	X, r31
    1380:	ee 93       	st	-X, r30
    1382:	12 97       	sbiw	r26, 0x02	; 2
    1384:	4d 91       	ld	r20, X+
    1386:	5d 91       	ld	r21, X+
    1388:	a4 0f       	add	r26, r20
    138a:	b5 1f       	adc	r27, r21
    138c:	ea 17       	cp	r30, r26
    138e:	fb 07       	cpc	r31, r27
    1390:	79 f4       	brne	.+30     	; 0x13b0 <free+0xd2>
    1392:	80 81       	ld	r24, Z
    1394:	91 81       	ldd	r25, Z+1	; 0x01
    1396:	84 0f       	add	r24, r20
    1398:	95 1f       	adc	r25, r21
    139a:	02 96       	adiw	r24, 0x02	; 2
    139c:	d9 01       	movw	r26, r18
    139e:	11 96       	adiw	r26, 0x01	; 1
    13a0:	9c 93       	st	X, r25
    13a2:	8e 93       	st	-X, r24
    13a4:	82 81       	ldd	r24, Z+2	; 0x02
    13a6:	93 81       	ldd	r25, Z+3	; 0x03
    13a8:	13 96       	adiw	r26, 0x03	; 3
    13aa:	9c 93       	st	X, r25
    13ac:	8e 93       	st	-X, r24
    13ae:	12 97       	sbiw	r26, 0x02	; 2
    13b0:	e0 e0       	ldi	r30, 0x00	; 0
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	9b 81       	ldd	r25, Y+3	; 0x03
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	19 f0       	breq	.+6      	; 0x13c2 <free+0xe4>
    13bc:	fe 01       	movw	r30, r28
    13be:	ec 01       	movw	r28, r24
    13c0:	f9 cf       	rjmp	.-14     	; 0x13b4 <free+0xd6>
    13c2:	ce 01       	movw	r24, r28
    13c4:	02 96       	adiw	r24, 0x02	; 2
    13c6:	28 81       	ld	r18, Y
    13c8:	39 81       	ldd	r19, Y+1	; 0x01
    13ca:	82 0f       	add	r24, r18
    13cc:	93 1f       	adc	r25, r19
    13ce:	20 91 75 02 	lds	r18, 0x0275
    13d2:	30 91 76 02 	lds	r19, 0x0276
    13d6:	28 17       	cp	r18, r24
    13d8:	39 07       	cpc	r19, r25
    13da:	69 f4       	brne	.+26     	; 0x13f6 <free+0x118>
    13dc:	30 97       	sbiw	r30, 0x00	; 0
    13de:	29 f4       	brne	.+10     	; 0x13ea <free+0x10c>
    13e0:	10 92 78 02 	sts	0x0278, r1
    13e4:	10 92 77 02 	sts	0x0277, r1
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <free+0x110>
    13ea:	13 82       	std	Z+3, r1	; 0x03
    13ec:	12 82       	std	Z+2, r1	; 0x02
    13ee:	d0 93 76 02 	sts	0x0276, r29
    13f2:	c0 93 75 02 	sts	0x0275, r28
    13f6:	df 91       	pop	r29
    13f8:	cf 91       	pop	r28
    13fa:	08 95       	ret

000013fc <strnlen_P>:
    13fc:	fc 01       	movw	r30, r24
    13fe:	05 90       	lpm	r0, Z+
    1400:	61 50       	subi	r22, 0x01	; 1
    1402:	70 40       	sbci	r23, 0x00	; 0
    1404:	01 10       	cpse	r0, r1
    1406:	d8 f7       	brcc	.-10     	; 0x13fe <strnlen_P+0x2>
    1408:	80 95       	com	r24
    140a:	90 95       	com	r25
    140c:	8e 0f       	add	r24, r30
    140e:	9f 1f       	adc	r25, r31
    1410:	08 95       	ret

00001412 <memset>:
    1412:	dc 01       	movw	r26, r24
    1414:	01 c0       	rjmp	.+2      	; 0x1418 <memset+0x6>
    1416:	6d 93       	st	X+, r22
    1418:	41 50       	subi	r20, 0x01	; 1
    141a:	50 40       	sbci	r21, 0x00	; 0
    141c:	e0 f7       	brcc	.-8      	; 0x1416 <memset+0x4>
    141e:	08 95       	ret

00001420 <strnlen>:
    1420:	fc 01       	movw	r30, r24
    1422:	61 50       	subi	r22, 0x01	; 1
    1424:	70 40       	sbci	r23, 0x00	; 0
    1426:	01 90       	ld	r0, Z+
    1428:	01 10       	cpse	r0, r1
    142a:	d8 f7       	brcc	.-10     	; 0x1422 <strnlen+0x2>
    142c:	80 95       	com	r24
    142e:	90 95       	com	r25
    1430:	8e 0f       	add	r24, r30
    1432:	9f 1f       	adc	r25, r31
    1434:	08 95       	ret

00001436 <fputc>:
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	18 2f       	mov	r17, r24
    1440:	09 2f       	mov	r16, r25
    1442:	eb 01       	movw	r28, r22
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	81 fd       	sbrc	r24, 1
    1448:	03 c0       	rjmp	.+6      	; 0x1450 <fputc+0x1a>
    144a:	8f ef       	ldi	r24, 0xFF	; 255
    144c:	9f ef       	ldi	r25, 0xFF	; 255
    144e:	20 c0       	rjmp	.+64     	; 0x1490 <fputc+0x5a>
    1450:	82 ff       	sbrs	r24, 2
    1452:	10 c0       	rjmp	.+32     	; 0x1474 <fputc+0x3e>
    1454:	4e 81       	ldd	r20, Y+6	; 0x06
    1456:	5f 81       	ldd	r21, Y+7	; 0x07
    1458:	2c 81       	ldd	r18, Y+4	; 0x04
    145a:	3d 81       	ldd	r19, Y+5	; 0x05
    145c:	42 17       	cp	r20, r18
    145e:	53 07       	cpc	r21, r19
    1460:	7c f4       	brge	.+30     	; 0x1480 <fputc+0x4a>
    1462:	e8 81       	ld	r30, Y
    1464:	f9 81       	ldd	r31, Y+1	; 0x01
    1466:	9f 01       	movw	r18, r30
    1468:	2f 5f       	subi	r18, 0xFF	; 255
    146a:	3f 4f       	sbci	r19, 0xFF	; 255
    146c:	39 83       	std	Y+1, r19	; 0x01
    146e:	28 83       	st	Y, r18
    1470:	10 83       	st	Z, r17
    1472:	06 c0       	rjmp	.+12     	; 0x1480 <fputc+0x4a>
    1474:	e8 85       	ldd	r30, Y+8	; 0x08
    1476:	f9 85       	ldd	r31, Y+9	; 0x09
    1478:	81 2f       	mov	r24, r17
    147a:	09 95       	icall
    147c:	89 2b       	or	r24, r25
    147e:	29 f7       	brne	.-54     	; 0x144a <fputc+0x14>
    1480:	2e 81       	ldd	r18, Y+6	; 0x06
    1482:	3f 81       	ldd	r19, Y+7	; 0x07
    1484:	2f 5f       	subi	r18, 0xFF	; 255
    1486:	3f 4f       	sbci	r19, 0xFF	; 255
    1488:	3f 83       	std	Y+7, r19	; 0x07
    148a:	2e 83       	std	Y+6, r18	; 0x06
    148c:	81 2f       	mov	r24, r17
    148e:	90 2f       	mov	r25, r16
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	1f 91       	pop	r17
    1496:	0f 91       	pop	r16
    1498:	08 95       	ret

0000149a <__ultoa_invert>:
    149a:	fa 01       	movw	r30, r20
    149c:	aa 27       	eor	r26, r26
    149e:	28 30       	cpi	r18, 0x08	; 8
    14a0:	51 f1       	breq	.+84     	; 0x14f6 <__ultoa_invert+0x5c>
    14a2:	20 31       	cpi	r18, 0x10	; 16
    14a4:	81 f1       	breq	.+96     	; 0x1506 <__ultoa_invert+0x6c>
    14a6:	e8 94       	clt
    14a8:	6f 93       	push	r22
    14aa:	6e 7f       	andi	r22, 0xFE	; 254
    14ac:	6e 5f       	subi	r22, 0xFE	; 254
    14ae:	7f 4f       	sbci	r23, 0xFF	; 255
    14b0:	8f 4f       	sbci	r24, 0xFF	; 255
    14b2:	9f 4f       	sbci	r25, 0xFF	; 255
    14b4:	af 4f       	sbci	r26, 0xFF	; 255
    14b6:	b1 e0       	ldi	r27, 0x01	; 1
    14b8:	3e d0       	rcall	.+124    	; 0x1536 <__ultoa_invert+0x9c>
    14ba:	b4 e0       	ldi	r27, 0x04	; 4
    14bc:	3c d0       	rcall	.+120    	; 0x1536 <__ultoa_invert+0x9c>
    14be:	67 0f       	add	r22, r23
    14c0:	78 1f       	adc	r23, r24
    14c2:	89 1f       	adc	r24, r25
    14c4:	9a 1f       	adc	r25, r26
    14c6:	a1 1d       	adc	r26, r1
    14c8:	68 0f       	add	r22, r24
    14ca:	79 1f       	adc	r23, r25
    14cc:	8a 1f       	adc	r24, r26
    14ce:	91 1d       	adc	r25, r1
    14d0:	a1 1d       	adc	r26, r1
    14d2:	6a 0f       	add	r22, r26
    14d4:	71 1d       	adc	r23, r1
    14d6:	81 1d       	adc	r24, r1
    14d8:	91 1d       	adc	r25, r1
    14da:	a1 1d       	adc	r26, r1
    14dc:	20 d0       	rcall	.+64     	; 0x151e <__ultoa_invert+0x84>
    14de:	09 f4       	brne	.+2      	; 0x14e2 <__ultoa_invert+0x48>
    14e0:	68 94       	set
    14e2:	3f 91       	pop	r19
    14e4:	2a e0       	ldi	r18, 0x0A	; 10
    14e6:	26 9f       	mul	r18, r22
    14e8:	11 24       	eor	r1, r1
    14ea:	30 19       	sub	r19, r0
    14ec:	30 5d       	subi	r19, 0xD0	; 208
    14ee:	31 93       	st	Z+, r19
    14f0:	de f6       	brtc	.-74     	; 0x14a8 <__ultoa_invert+0xe>
    14f2:	cf 01       	movw	r24, r30
    14f4:	08 95       	ret
    14f6:	46 2f       	mov	r20, r22
    14f8:	47 70       	andi	r20, 0x07	; 7
    14fa:	40 5d       	subi	r20, 0xD0	; 208
    14fc:	41 93       	st	Z+, r20
    14fe:	b3 e0       	ldi	r27, 0x03	; 3
    1500:	0f d0       	rcall	.+30     	; 0x1520 <__ultoa_invert+0x86>
    1502:	c9 f7       	brne	.-14     	; 0x14f6 <__ultoa_invert+0x5c>
    1504:	f6 cf       	rjmp	.-20     	; 0x14f2 <__ultoa_invert+0x58>
    1506:	46 2f       	mov	r20, r22
    1508:	4f 70       	andi	r20, 0x0F	; 15
    150a:	40 5d       	subi	r20, 0xD0	; 208
    150c:	4a 33       	cpi	r20, 0x3A	; 58
    150e:	18 f0       	brcs	.+6      	; 0x1516 <__ultoa_invert+0x7c>
    1510:	49 5d       	subi	r20, 0xD9	; 217
    1512:	31 fd       	sbrc	r19, 1
    1514:	40 52       	subi	r20, 0x20	; 32
    1516:	41 93       	st	Z+, r20
    1518:	02 d0       	rcall	.+4      	; 0x151e <__ultoa_invert+0x84>
    151a:	a9 f7       	brne	.-22     	; 0x1506 <__ultoa_invert+0x6c>
    151c:	ea cf       	rjmp	.-44     	; 0x14f2 <__ultoa_invert+0x58>
    151e:	b4 e0       	ldi	r27, 0x04	; 4
    1520:	a6 95       	lsr	r26
    1522:	97 95       	ror	r25
    1524:	87 95       	ror	r24
    1526:	77 95       	ror	r23
    1528:	67 95       	ror	r22
    152a:	ba 95       	dec	r27
    152c:	c9 f7       	brne	.-14     	; 0x1520 <__ultoa_invert+0x86>
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	61 05       	cpc	r22, r1
    1532:	71 05       	cpc	r23, r1
    1534:	08 95       	ret
    1536:	9b 01       	movw	r18, r22
    1538:	ac 01       	movw	r20, r24
    153a:	0a 2e       	mov	r0, r26
    153c:	06 94       	lsr	r0
    153e:	57 95       	ror	r21
    1540:	47 95       	ror	r20
    1542:	37 95       	ror	r19
    1544:	27 95       	ror	r18
    1546:	ba 95       	dec	r27
    1548:	c9 f7       	brne	.-14     	; 0x153c <__ultoa_invert+0xa2>
    154a:	62 0f       	add	r22, r18
    154c:	73 1f       	adc	r23, r19
    154e:	84 1f       	adc	r24, r20
    1550:	95 1f       	adc	r25, r21
    1552:	a0 1d       	adc	r26, r0
    1554:	08 95       	ret

00001556 <__divmodsi4>:
    1556:	05 2e       	mov	r0, r21
    1558:	97 fb       	bst	r25, 7
    155a:	16 f4       	brtc	.+4      	; 0x1560 <__divmodsi4+0xa>
    155c:	00 94       	com	r0
    155e:	0f d0       	rcall	.+30     	; 0x157e <__negsi2>
    1560:	57 fd       	sbrc	r21, 7
    1562:	05 d0       	rcall	.+10     	; 0x156e <__divmodsi4_neg2>
    1564:	5b d0       	rcall	.+182    	; 0x161c <__udivmodsi4>
    1566:	07 fc       	sbrc	r0, 7
    1568:	02 d0       	rcall	.+4      	; 0x156e <__divmodsi4_neg2>
    156a:	46 f4       	brtc	.+16     	; 0x157c <__divmodsi4_exit>
    156c:	08 c0       	rjmp	.+16     	; 0x157e <__negsi2>

0000156e <__divmodsi4_neg2>:
    156e:	50 95       	com	r21
    1570:	40 95       	com	r20
    1572:	30 95       	com	r19
    1574:	21 95       	neg	r18
    1576:	3f 4f       	sbci	r19, 0xFF	; 255
    1578:	4f 4f       	sbci	r20, 0xFF	; 255
    157a:	5f 4f       	sbci	r21, 0xFF	; 255

0000157c <__divmodsi4_exit>:
    157c:	08 95       	ret

0000157e <__negsi2>:
    157e:	90 95       	com	r25
    1580:	80 95       	com	r24
    1582:	70 95       	com	r23
    1584:	61 95       	neg	r22
    1586:	7f 4f       	sbci	r23, 0xFF	; 255
    1588:	8f 4f       	sbci	r24, 0xFF	; 255
    158a:	9f 4f       	sbci	r25, 0xFF	; 255
    158c:	08 95       	ret

0000158e <__muluhisi3>:
    158e:	68 d0       	rcall	.+208    	; 0x1660 <__umulhisi3>
    1590:	a5 9f       	mul	r26, r21
    1592:	90 0d       	add	r25, r0
    1594:	b4 9f       	mul	r27, r20
    1596:	90 0d       	add	r25, r0
    1598:	a4 9f       	mul	r26, r20
    159a:	80 0d       	add	r24, r0
    159c:	91 1d       	adc	r25, r1
    159e:	11 24       	eor	r1, r1
    15a0:	08 95       	ret

000015a2 <__mulshisi3>:
    15a2:	b7 ff       	sbrs	r27, 7
    15a4:	f4 cf       	rjmp	.-24     	; 0x158e <__muluhisi3>

000015a6 <__mulohisi3>:
    15a6:	f3 df       	rcall	.-26     	; 0x158e <__muluhisi3>
    15a8:	82 1b       	sub	r24, r18
    15aa:	93 0b       	sbc	r25, r19
    15ac:	08 95       	ret

000015ae <__prologue_saves__>:
    15ae:	2f 92       	push	r2
    15b0:	3f 92       	push	r3
    15b2:	4f 92       	push	r4
    15b4:	5f 92       	push	r5
    15b6:	6f 92       	push	r6
    15b8:	7f 92       	push	r7
    15ba:	8f 92       	push	r8
    15bc:	9f 92       	push	r9
    15be:	af 92       	push	r10
    15c0:	bf 92       	push	r11
    15c2:	cf 92       	push	r12
    15c4:	df 92       	push	r13
    15c6:	ef 92       	push	r14
    15c8:	ff 92       	push	r15
    15ca:	0f 93       	push	r16
    15cc:	1f 93       	push	r17
    15ce:	cf 93       	push	r28
    15d0:	df 93       	push	r29
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
    15d6:	ca 1b       	sub	r28, r26
    15d8:	db 0b       	sbc	r29, r27
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	f8 94       	cli
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	0f be       	out	0x3f, r0	; 63
    15e2:	cd bf       	out	0x3d, r28	; 61
    15e4:	09 94       	ijmp

000015e6 <__epilogue_restores__>:
    15e6:	2a 88       	ldd	r2, Y+18	; 0x12
    15e8:	39 88       	ldd	r3, Y+17	; 0x11
    15ea:	48 88       	ldd	r4, Y+16	; 0x10
    15ec:	5f 84       	ldd	r5, Y+15	; 0x0f
    15ee:	6e 84       	ldd	r6, Y+14	; 0x0e
    15f0:	7d 84       	ldd	r7, Y+13	; 0x0d
    15f2:	8c 84       	ldd	r8, Y+12	; 0x0c
    15f4:	9b 84       	ldd	r9, Y+11	; 0x0b
    15f6:	aa 84       	ldd	r10, Y+10	; 0x0a
    15f8:	b9 84       	ldd	r11, Y+9	; 0x09
    15fa:	c8 84       	ldd	r12, Y+8	; 0x08
    15fc:	df 80       	ldd	r13, Y+7	; 0x07
    15fe:	ee 80       	ldd	r14, Y+6	; 0x06
    1600:	fd 80       	ldd	r15, Y+5	; 0x05
    1602:	0c 81       	ldd	r16, Y+4	; 0x04
    1604:	1b 81       	ldd	r17, Y+3	; 0x03
    1606:	aa 81       	ldd	r26, Y+2	; 0x02
    1608:	b9 81       	ldd	r27, Y+1	; 0x01
    160a:	ce 0f       	add	r28, r30
    160c:	d1 1d       	adc	r29, r1
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	ed 01       	movw	r28, r26
    161a:	08 95       	ret

0000161c <__udivmodsi4>:
    161c:	a1 e2       	ldi	r26, 0x21	; 33
    161e:	1a 2e       	mov	r1, r26
    1620:	aa 1b       	sub	r26, r26
    1622:	bb 1b       	sub	r27, r27
    1624:	fd 01       	movw	r30, r26
    1626:	0d c0       	rjmp	.+26     	; 0x1642 <__udivmodsi4_ep>

00001628 <__udivmodsi4_loop>:
    1628:	aa 1f       	adc	r26, r26
    162a:	bb 1f       	adc	r27, r27
    162c:	ee 1f       	adc	r30, r30
    162e:	ff 1f       	adc	r31, r31
    1630:	a2 17       	cp	r26, r18
    1632:	b3 07       	cpc	r27, r19
    1634:	e4 07       	cpc	r30, r20
    1636:	f5 07       	cpc	r31, r21
    1638:	20 f0       	brcs	.+8      	; 0x1642 <__udivmodsi4_ep>
    163a:	a2 1b       	sub	r26, r18
    163c:	b3 0b       	sbc	r27, r19
    163e:	e4 0b       	sbc	r30, r20
    1640:	f5 0b       	sbc	r31, r21

00001642 <__udivmodsi4_ep>:
    1642:	66 1f       	adc	r22, r22
    1644:	77 1f       	adc	r23, r23
    1646:	88 1f       	adc	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	1a 94       	dec	r1
    164c:	69 f7       	brne	.-38     	; 0x1628 <__udivmodsi4_loop>
    164e:	60 95       	com	r22
    1650:	70 95       	com	r23
    1652:	80 95       	com	r24
    1654:	90 95       	com	r25
    1656:	9b 01       	movw	r18, r22
    1658:	ac 01       	movw	r20, r24
    165a:	bd 01       	movw	r22, r26
    165c:	cf 01       	movw	r24, r30
    165e:	08 95       	ret

00001660 <__umulhisi3>:
    1660:	a2 9f       	mul	r26, r18
    1662:	b0 01       	movw	r22, r0
    1664:	b3 9f       	mul	r27, r19
    1666:	c0 01       	movw	r24, r0
    1668:	a3 9f       	mul	r26, r19
    166a:	70 0d       	add	r23, r0
    166c:	81 1d       	adc	r24, r1
    166e:	11 24       	eor	r1, r1
    1670:	91 1d       	adc	r25, r1
    1672:	b2 9f       	mul	r27, r18
    1674:	70 0d       	add	r23, r0
    1676:	81 1d       	adc	r24, r1
    1678:	11 24       	eor	r1, r1
    167a:	91 1d       	adc	r25, r1
    167c:	08 95       	ret

0000167e <_exit>:
    167e:	f8 94       	cli

00001680 <__stop_program>:
    1680:	ff cf       	rjmp	.-2      	; 0x1680 <__stop_program>
