
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d4  00800100  00001e1c  00001eb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  008003d4  008003d4  00002184  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002184  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000300  00000000  00000000  000021e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003714  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000118b  00000000  00000000  00005bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000016e9  00000000  00000000  00006d7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000760  00000000  00000000  00008468  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e2a  00000000  00000000  00008bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001a66  00000000  00000000  000099f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002c0  00000000  00000000  0000b458  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	fa c1       	rjmp	.+1012   	; 0x402 <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <MCP2515_reset+0xa>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ec e1       	ldi	r30, 0x1C	; 28
     37c:	fe e1       	ldi	r31, 0x1E	; 30
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a4 3d       	cpi	r26, 0xD4	; 212
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a4 ed       	ldi	r26, 0xD4	; 212
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ad 3f       	cpi	r26, 0xFD	; 253
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	7f d0       	rcall	.+254    	; 0x49a <main>
     39c:	0c 94 0c 0f 	jmp	0x1e18	; 0x1e18 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 ed 03 	sts	0x03ED, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 d8 03 	sts	0x03D8, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 d7 03 	sts	0x03D7, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 d5 03 	sts	0x03D5, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_3>:
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	8f 93       	push	r24
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 d4 03 	sts	0x03D4, r24
     414:	8f 91       	pop	r24
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <init>:
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	1f e1       	ldi	r17, 0x1F	; 31
     42a:	e1 2e       	mov	r14, r17
     42c:	f1 2c       	mov	r15, r1
     42e:	00 e0       	ldi	r16, 0x00	; 0
     430:	10 e0       	ldi	r17, 0x00	; 0
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	4b e4       	ldi	r20, 0x4B	; 75
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e8       	ldi	r22, 0x80	; 128
     43c:	75 e2       	ldi	r23, 0x25	; 37
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 31 0a 	call	0x1462	; 0x1462 <uartInit>
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	8f d1       	rcall	.+798    	; 0x768 <enableXMEM>
     44a:	dd d7       	rcall	.+4026   	; 0x1406 <SLI_init>
     44c:	9f d1       	rcall	.+830    	; 0x78c <JOY_init>
     44e:	55 d7       	rcall	.+3754   	; 0x12fa <OLED_init>
     450:	e3 d7       	rcall	.+4038   	; 0x1418 <SPI_init>
     452:	8b b7       	in	r24, 0x3b	; 59
     454:	80 64       	ori	r24, 0x40	; 64
     456:	8b bf       	out	0x3b, r24	; 59
     458:	85 b7       	in	r24, 0x35	; 53
     45a:	82 60       	ori	r24, 0x02	; 2
     45c:	85 bf       	out	0x35, r24	; 53
     45e:	85 b7       	in	r24, 0x35	; 53
     460:	8e 7f       	andi	r24, 0xFE	; 254
     462:	85 bf       	out	0x35, r24	; 53
     464:	8b 98       	cbi	0x11, 3	; 17
     466:	93 9a       	sbi	0x12, 3	; 18
     468:	8b b7       	in	r24, 0x3b	; 59
     46a:	80 68       	ori	r24, 0x80	; 128
     46c:	8b bf       	out	0x3b, r24	; 59
     46e:	85 b7       	in	r24, 0x35	; 53
     470:	88 60       	ori	r24, 0x08	; 8
     472:	85 bf       	out	0x35, r24	; 53
     474:	85 b7       	in	r24, 0x35	; 53
     476:	8b 7f       	andi	r24, 0xFB	; 251
     478:	85 bf       	out	0x35, r24	; 53
     47a:	8b b7       	in	r24, 0x3b	; 59
     47c:	80 62       	ori	r24, 0x20	; 32
     47e:	8b bf       	out	0x3b, r24	; 59
     480:	86 b7       	in	r24, 0x36	; 54
     482:	8e 7f       	andi	r24, 0xFE	; 254
     484:	86 bf       	out	0x36, r24	; 54
     486:	32 98       	cbi	0x06, 2	; 6
     488:	3a 98       	cbi	0x07, 2	; 7
     48a:	b8 98       	cbi	0x17, 0	; 23
     48c:	c0 98       	cbi	0x18, 0	; 24
     48e:	78 94       	sei
     490:	1f 91       	pop	r17
     492:	0f 91       	pop	r16
     494:	ff 90       	pop	r15
     496:	ef 90       	pop	r14
     498:	08 95       	ret

0000049a <main>:
/*
=======================MAIN FUNCTION=========================
*/

int main(void)
{
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	66 97       	sbiw	r28, 0x16	; 22
     4a4:	0f b6       	in	r0, 0x3f	; 63
     4a6:	f8 94       	cli
     4a8:	de bf       	out	0x3e, r29	; 62
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	cd bf       	out	0x3d, r28	; 61
	init();
     4ae:	b8 df       	rcall	.-144    	; 0x420 <init>

	MCP2515_init();
     4b0:	69 d3       	rcall	.+1746   	; 0xb84 <MCP2515_init>
	CAN_init();
     4b2:	70 d0       	rcall	.+224    	; 0x594 <CAN_init>
	
	struct can_message message2send;
	message2send.id = 23;
     4b4:	87 e1       	ldi	r24, 0x17	; 23
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	9a 83       	std	Y+2, r25	; 0x02
     4ba:	89 83       	std	Y+1, r24	; 0x01
	message2send.length = 8;
     4bc:	88 e0       	ldi	r24, 0x08	; 8
     4be:	8b 83       	std	Y+3, r24	; 0x03
	message2send.data[0] = '@';
     4c0:	80 e4       	ldi	r24, 0x40	; 64
     4c2:	8c 83       	std	Y+4, r24	; 0x04
	message2send.data[1] = '~';
     4c4:	8e e7       	ldi	r24, 0x7E	; 126
     4c6:	8d 83       	std	Y+5, r24	; 0x05
	message2send.data[2] = 'H';
     4c8:	88 e4       	ldi	r24, 0x48	; 72
     4ca:	8e 83       	std	Y+6, r24	; 0x06
	message2send.data[3] = 'l';
     4cc:	8c e6       	ldi	r24, 0x6C	; 108
     4ce:	8f 83       	std	Y+7, r24	; 0x07
	message2send.data[4] = '1';
     4d0:	81 e3       	ldi	r24, 0x31	; 49
     4d2:	88 87       	std	Y+8, r24	; 0x08
	message2send.data[5] = '.';
     4d4:	8e e2       	ldi	r24, 0x2E	; 46
     4d6:	89 87       	std	Y+9, r24	; 0x09
	message2send.data[6] = '/';
     4d8:	8f e2       	ldi	r24, 0x2F	; 47
     4da:	8a 87       	std	Y+10, r24	; 0x0a
	message2send.data[7] = '|';
     4dc:	8c e7       	ldi	r24, 0x7C	; 124
     4de:	8b 87       	std	Y+11, r24	; 0x0b
	
	CAN_sendMessage(&message2send, 0);
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	ce 01       	movw	r24, r28
     4e4:	01 96       	adiw	r24, 0x01	; 1
     4e6:	73 d0       	rcall	.+230    	; 0x5ce <CAN_sendMessage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e8:	2f ef       	ldi	r18, 0xFF	; 255
     4ea:	8f e7       	ldi	r24, 0x7F	; 127
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	21 50       	subi	r18, 0x01	; 1
     4f0:	80 40       	sbci	r24, 0x00	; 0
     4f2:	90 40       	sbci	r25, 0x00	; 0
     4f4:	e1 f7       	brne	.-8      	; 0x4ee <main+0x54>
     4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <main+0x5e>
     4f8:	00 c0       	rjmp	.+0      	; 0x4fa <main+0x60>
			
			struct can_message receivedMessage;

			receivedMessage = CAN_receiveMessage();

			printf("id: %d, length: %d, data:", receivedMessage.id, receivedMessage.length);
     4fa:	0f 2e       	mov	r0, r31
     4fc:	ff e9       	ldi	r31, 0x9F	; 159
     4fe:	cf 2e       	mov	r12, r31
     500:	f1 e0       	ldi	r31, 0x01	; 1
     502:	df 2e       	mov	r13, r31
     504:	f0 2d       	mov	r31, r0
			for(uint8_t i = 0; i < receivedMessage.length; i++)
			{
				printf(" %c", receivedMessage.data[i]);
     506:	0f 2e       	mov	r0, r31
     508:	f9 eb       	ldi	r31, 0xB9	; 185
     50a:	ef 2e       	mov	r14, r31
     50c:	f1 e0       	ldi	r31, 0x01	; 1
     50e:	ff 2e       	mov	r15, r31
     510:	f0 2d       	mov	r31, r0
	_delay_ms(100);
	
    while(1)
    {
		// statusMultifunctionBoard();
		JOY_getDirection();
     512:	fe d2       	rcall	.+1532   	; 0xb10 <JOY_getDirection>

		// todo: remove! will be included in the menu driver later
		if(JOYcalibFlag)
     514:	80 91 d6 03 	lds	r24, 0x03D6
     518:	88 23       	and	r24, r24
     51a:	19 f0       	breq	.+6      	; 0x522 <__stack+0x23>
		{
			//run joystick calibration
			JOY_calibrate();
     51c:	4a d1       	rcall	.+660    	; 0x7b2 <JOY_calibrate>
			JOYcalibFlag = 0;
     51e:	10 92 d6 03 	sts	0x03D6, r1
		}

		if(activateMenuFlag)
     522:	80 91 d5 03 	lds	r24, 0x03D5
     526:	81 11       	cpse	r24, r1
		{
			MENU_activate();
     528:	b6 d5       	rcall	.+2924   	; 0x1096 <MENU_activate>
		}

		if(SPIreceivedFlag)
     52a:	80 91 d4 03 	lds	r24, 0x03D4
     52e:	88 23       	and	r24, r24
     530:	81 f3       	breq	.-32     	; 0x512 <__stack+0x13>
			//SPI_ReceivedByte = SPI_receive(SS_CAN_CONTROLLER);
			//printf("SPI received byte: %d\n", SPI_ReceivedByte);
			
			struct can_message receivedMessage;

			receivedMessage = CAN_receiveMessage();
     532:	ce 01       	movw	r24, r28
     534:	0c 96       	adiw	r24, 0x0c	; 12
     536:	b4 d0       	rcall	.+360    	; 0x6a0 <CAN_receiveMessage>
     538:	ae 84       	ldd	r10, Y+14	; 0x0e

			printf("id: %d, length: %d, data:", receivedMessage.id, receivedMessage.length);
     53a:	1f 92       	push	r1
     53c:	af 92       	push	r10
     53e:	8d 85       	ldd	r24, Y+13	; 0x0d
     540:	8f 93       	push	r24
     542:	8c 85       	ldd	r24, Y+12	; 0x0c
     544:	8f 93       	push	r24
     546:	df 92       	push	r13
     548:	cf 92       	push	r12
     54a:	0e 94 08 0c 	call	0x1810	; 0x1810 <printf>
			for(uint8_t i = 0; i < receivedMessage.length; i++)
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	0f 90       	pop	r0
     554:	0f 90       	pop	r0
     556:	0f 90       	pop	r0
     558:	0f 90       	pop	r0
     55a:	aa 20       	and	r10, r10
     55c:	a1 f0       	breq	.+40     	; 0x586 <__stack+0x87>
     55e:	8e 01       	movw	r16, r28
     560:	01 5f       	subi	r16, 0xF1	; 241
     562:	1f 4f       	sbci	r17, 0xFF	; 255
     564:	b1 2c       	mov	r11, r1
			{
				printf(" %c", receivedMessage.data[i]);
     566:	f8 01       	movw	r30, r16
     568:	81 91       	ld	r24, Z+
     56a:	8f 01       	movw	r16, r30
     56c:	1f 92       	push	r1
     56e:	8f 93       	push	r24
     570:	ff 92       	push	r15
     572:	ef 92       	push	r14
     574:	0e 94 08 0c 	call	0x1810	; 0x1810 <printf>
			struct can_message receivedMessage;

			receivedMessage = CAN_receiveMessage();

			printf("id: %d, length: %d, data:", receivedMessage.id, receivedMessage.length);
			for(uint8_t i = 0; i < receivedMessage.length; i++)
     578:	b3 94       	inc	r11
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	ba 10       	cpse	r11, r10
     584:	f0 cf       	rjmp	.-32     	; 0x566 <__stack+0x67>
			{
				printf(" %c", receivedMessage.data[i]);
			}
			printf("\n");
     586:	8a e0       	ldi	r24, 0x0A	; 10
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 19 0c 	call	0x1832	; 0x1832 <putchar>
			
			SPIreceivedFlag = 0;
     58e:	10 92 d4 03 	sts	0x03D4, r1
     592:	bf cf       	rjmp	.-130    	; 0x512 <__stack+0x13>

00000594 <CAN_init>:
     594:	cf 93       	push	r28
     596:	df 93       	push	r29
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
     59c:	43 e0       	ldi	r20, 0x03	; 3
     59e:	6b e2       	ldi	r22, 0x2B	; 43
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	18 d3       	rcall	.+1584   	; 0xbd6 <MCP2515_write>
     5a6:	40 e6       	ldi	r20, 0x60	; 96
     5a8:	60 e6       	ldi	r22, 0x60	; 96
     5aa:	80 e0       	ldi	r24, 0x00	; 0
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	13 d3       	rcall	.+1574   	; 0xbd6 <MCP2515_write>
     5b0:	20 e4       	ldi	r18, 0x40	; 64
     5b2:	40 ec       	ldi	r20, 0xC0	; 192
     5b4:	6f e0       	ldi	r22, 0x0F	; 15
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	20 d3       	rcall	.+1600   	; 0xbfc <MCP2515_bitModify>
     5bc:	21 e0       	ldi	r18, 0x01	; 1
     5be:	41 e0       	ldi	r20, 0x01	; 1
     5c0:	6b e2       	ldi	r22, 0x2B	; 43
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	1a d3       	rcall	.+1588   	; 0xbfc <MCP2515_bitModify>
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	08 95       	ret

000005ce <CAN_sendMessage>:
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	cd b7       	in	r28, 0x3d	; 61
     5d4:	de b7       	in	r29, 0x3e	; 62
     5d6:	27 97       	sbiw	r28, 0x07	; 7
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	9e 83       	std	Y+6, r25	; 0x06
     5e4:	8d 83       	std	Y+5, r24	; 0x05
     5e6:	6f 83       	std	Y+7, r22	; 0x07
     5e8:	8f 81       	ldd	r24, Y+7	; 0x07
     5ea:	88 2f       	mov	r24, r24
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	00 97       	sbiw	r24, 0x00	; 0
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <CAN_sendMessage+0x26>
     5f2:	4d c0       	rjmp	.+154    	; 0x68e <CAN_sendMessage+0xc0>
     5f4:	8d 81       	ldd	r24, Y+5	; 0x05
     5f6:	9e 81       	ldd	r25, Y+6	; 0x06
     5f8:	fc 01       	movw	r30, r24
     5fa:	80 81       	ld	r24, Z
     5fc:	91 81       	ldd	r25, Z+1	; 0x01
     5fe:	9c 83       	std	Y+4, r25	; 0x04
     600:	8b 83       	std	Y+3, r24	; 0x03
     602:	8b 81       	ldd	r24, Y+3	; 0x03
     604:	82 95       	swap	r24
     606:	88 0f       	add	r24, r24
     608:	80 7e       	andi	r24, 0xE0	; 224
     60a:	48 2f       	mov	r20, r24
     60c:	62 e3       	ldi	r22, 0x32	; 50
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	e1 d2       	rcall	.+1474   	; 0xbd6 <MCP2515_write>
     614:	8b 81       	ldd	r24, Y+3	; 0x03
     616:	9c 81       	ldd	r25, Y+4	; 0x04
     618:	96 95       	lsr	r25
     61a:	87 95       	ror	r24
     61c:	96 95       	lsr	r25
     61e:	87 95       	ror	r24
     620:	96 95       	lsr	r25
     622:	87 95       	ror	r24
     624:	48 2f       	mov	r20, r24
     626:	61 e3       	ldi	r22, 0x31	; 49
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	d4 d2       	rcall	.+1448   	; 0xbd6 <MCP2515_write>
     62e:	8d 81       	ldd	r24, Y+5	; 0x05
     630:	9e 81       	ldd	r25, Y+6	; 0x06
     632:	fc 01       	movw	r30, r24
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	48 2f       	mov	r20, r24
     638:	65 e3       	ldi	r22, 0x35	; 53
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	cb d2       	rcall	.+1430   	; 0xbd6 <MCP2515_write>
     640:	86 e3       	ldi	r24, 0x36	; 54
     642:	89 83       	std	Y+1, r24	; 0x01
     644:	1a 82       	std	Y+2, r1	; 0x02
     646:	15 c0       	rjmp	.+42     	; 0x672 <CAN_sendMessage+0xa4>
     648:	8a 81       	ldd	r24, Y+2	; 0x02
     64a:	88 2f       	mov	r24, r24
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	2d 81       	ldd	r18, Y+5	; 0x05
     650:	3e 81       	ldd	r19, Y+6	; 0x06
     652:	82 0f       	add	r24, r18
     654:	93 1f       	adc	r25, r19
     656:	03 96       	adiw	r24, 0x03	; 3
     658:	fc 01       	movw	r30, r24
     65a:	80 81       	ld	r24, Z
     65c:	48 2f       	mov	r20, r24
     65e:	69 81       	ldd	r22, Y+1	; 0x01
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	b8 d2       	rcall	.+1392   	; 0xbd6 <MCP2515_write>
     666:	89 81       	ldd	r24, Y+1	; 0x01
     668:	8f 5f       	subi	r24, 0xFF	; 255
     66a:	89 83       	std	Y+1, r24	; 0x01
     66c:	8a 81       	ldd	r24, Y+2	; 0x02
     66e:	8f 5f       	subi	r24, 0xFF	; 255
     670:	8a 83       	std	Y+2, r24	; 0x02
     672:	8d 81       	ldd	r24, Y+5	; 0x05
     674:	9e 81       	ldd	r25, Y+6	; 0x06
     676:	fc 01       	movw	r30, r24
     678:	92 81       	ldd	r25, Z+2	; 0x02
     67a:	8a 81       	ldd	r24, Y+2	; 0x02
     67c:	89 17       	cp	r24, r25
     67e:	20 f3       	brcs	.-56     	; 0x648 <CAN_sendMessage+0x7a>
     680:	28 e0       	ldi	r18, 0x08	; 8
     682:	48 e0       	ldi	r20, 0x08	; 8
     684:	60 e3       	ldi	r22, 0x30	; 48
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	b8 d2       	rcall	.+1392   	; 0xbfc <MCP2515_bitModify>
     68c:	00 00       	nop
     68e:	27 96       	adiw	r28, 0x07	; 7
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	f8 94       	cli
     694:	de bf       	out	0x3e, r29	; 62
     696:	0f be       	out	0x3f, r0	; 63
     698:	cd bf       	out	0x3d, r28	; 61
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	08 95       	ret

000006a0 <CAN_receiveMessage>:
     6a0:	0f 93       	push	r16
     6a2:	1f 93       	push	r17
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	2f 97       	sbiw	r28, 0x0f	; 15
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	f8 94       	cli
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	cd bf       	out	0x3d, r28	; 61
     6b8:	9f 87       	std	Y+15, r25	; 0x0f
     6ba:	8e 87       	std	Y+14, r24	; 0x0e
     6bc:	61 e6       	ldi	r22, 0x61	; 97
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	4f d2       	rcall	.+1182   	; 0xb62 <MCP2515_read>
     6c4:	88 2f       	mov	r24, r24
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	9c 83       	std	Y+4, r25	; 0x04
     6ca:	8b 83       	std	Y+3, r24	; 0x03
     6cc:	8b 81       	ldd	r24, Y+3	; 0x03
     6ce:	9c 81       	ldd	r25, Y+4	; 0x04
     6d0:	8c 01       	movw	r16, r24
     6d2:	00 0f       	add	r16, r16
     6d4:	11 1f       	adc	r17, r17
     6d6:	00 0f       	add	r16, r16
     6d8:	11 1f       	adc	r17, r17
     6da:	00 0f       	add	r16, r16
     6dc:	11 1f       	adc	r17, r17
     6de:	62 e6       	ldi	r22, 0x62	; 98
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	3e d2       	rcall	.+1148   	; 0xb62 <MCP2515_read>
     6e6:	82 95       	swap	r24
     6e8:	86 95       	lsr	r24
     6ea:	87 70       	andi	r24, 0x07	; 7
     6ec:	88 2f       	mov	r24, r24
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	80 2b       	or	r24, r16
     6f2:	91 2b       	or	r25, r17
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	8b 83       	std	Y+3, r24	; 0x03
     6f8:	65 e6       	ldi	r22, 0x65	; 101
     6fa:	80 e0       	ldi	r24, 0x00	; 0
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	31 d2       	rcall	.+1122   	; 0xb62 <MCP2515_read>
     700:	8d 83       	std	Y+5, r24	; 0x05
     702:	86 e6       	ldi	r24, 0x66	; 102
     704:	89 83       	std	Y+1, r24	; 0x01
     706:	1a 82       	std	Y+2, r1	; 0x02
     708:	14 c0       	rjmp	.+40     	; 0x732 <CAN_receiveMessage+0x92>
     70a:	8a 81       	ldd	r24, Y+2	; 0x02
     70c:	08 2f       	mov	r16, r24
     70e:	10 e0       	ldi	r17, 0x00	; 0
     710:	69 81       	ldd	r22, Y+1	; 0x01
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	25 d2       	rcall	.+1098   	; 0xb62 <MCP2515_read>
     718:	28 2f       	mov	r18, r24
     71a:	ce 01       	movw	r24, r28
     71c:	06 96       	adiw	r24, 0x06	; 6
     71e:	80 0f       	add	r24, r16
     720:	91 1f       	adc	r25, r17
     722:	fc 01       	movw	r30, r24
     724:	20 83       	st	Z, r18
     726:	89 81       	ldd	r24, Y+1	; 0x01
     728:	8f 5f       	subi	r24, 0xFF	; 255
     72a:	89 83       	std	Y+1, r24	; 0x01
     72c:	8a 81       	ldd	r24, Y+2	; 0x02
     72e:	8f 5f       	subi	r24, 0xFF	; 255
     730:	8a 83       	std	Y+2, r24	; 0x02
     732:	9d 81       	ldd	r25, Y+5	; 0x05
     734:	8a 81       	ldd	r24, Y+2	; 0x02
     736:	89 17       	cp	r24, r25
     738:	40 f3       	brcs	.-48     	; 0x70a <CAN_receiveMessage+0x6a>
     73a:	8e 85       	ldd	r24, Y+14	; 0x0e
     73c:	9f 85       	ldd	r25, Y+15	; 0x0f
     73e:	2b e0       	ldi	r18, 0x0B	; 11
     740:	fe 01       	movw	r30, r28
     742:	33 96       	adiw	r30, 0x03	; 3
     744:	dc 01       	movw	r26, r24
     746:	01 90       	ld	r0, Z+
     748:	0d 92       	st	X+, r0
     74a:	2a 95       	dec	r18
     74c:	e1 f7       	brne	.-8      	; 0x746 <CAN_receiveMessage+0xa6>
     74e:	8e 85       	ldd	r24, Y+14	; 0x0e
     750:	9f 85       	ldd	r25, Y+15	; 0x0f
     752:	2f 96       	adiw	r28, 0x0f	; 15
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	de bf       	out	0x3e, r29	; 62
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	cd bf       	out	0x3d, r28	; 61
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	08 95       	ret

00000768 <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     768:	95 b7       	in	r25, 0x35	; 53
     76a:	90 68       	ori	r25, 0x80	; 128
     76c:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     76e:	96 b7       	in	r25, 0x36	; 54
     770:	98 60       	ori	r25, 0x08	; 8
     772:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     774:	88 23       	and	r24, r24
     776:	19 f0       	breq	.+6      	; 0x77e <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     778:	80 b7       	in	r24, 0x30	; 48
     77a:	80 62       	ori	r24, 0x20	; 32
     77c:	80 bf       	out	0x30, r24	; 48
     77e:	08 95       	ret

00000780 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     780:	fc 01       	movw	r30, r24
     782:	80 81       	ld	r24, Z
	return val;
}
     784:	08 95       	ret

00000786 <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     786:	fc 01       	movw	r30, r24
     788:	60 83       	st	Z, r22
     78a:	08 95       	ret

0000078c <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     78c:	10 92 db 03 	sts	0x03DB, r1
     790:	10 92 da 03 	sts	0x03DA, r1
	currentPosition.Y_abs = 0;
     794:	10 92 dd 03 	sts	0x03DD, r1
     798:	10 92 dc 03 	sts	0x03DC, r1
	currentPosition.X_per = 0;
     79c:	10 92 df 03 	sts	0x03DF, r1
     7a0:	10 92 de 03 	sts	0x03DE, r1
	currentPosition.Y_per = 0;
     7a4:	10 92 e1 03 	sts	0x03E1, r1
     7a8:	10 92 e0 03 	sts	0x03E0, r1
	currentDirection = CENTRE;
     7ac:	10 92 d9 03 	sts	0x03D9, r1
     7b0:	08 95       	ret

000007b2 <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     7b2:	cf 93       	push	r28
     7b4:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     7b6:	9a d4       	rcall	.+2356   	; 0x10ec <OLED_clear>
     7b8:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	78 d4       	rcall	.+2288   	; 0x10b2 <OLED_goto>
     7c2:	8d eb       	ldi	r24, 0xBD	; 189
     7c4:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     7c6:	cb d4       	rcall	.+2454   	; 0x115e <OLED_printString>
     7c8:	87 ec       	ldi	r24, 0xC7	; 199
     7ca:	91 e0       	ldi	r25, 0x01	; 1
     7cc:	0e 94 1e 0c 	call	0x183c	; 0x183c <puts>
	printf("Move JOY to the right\n");
     7d0:	2f ef       	ldi	r18, 0xFF	; 255
     7d2:	4f ef       	ldi	r20, 0xFF	; 255
     7d4:	52 e0       	ldi	r21, 0x02	; 2
     7d6:	21 50       	subi	r18, 0x01	; 1
     7d8:	40 40       	sbci	r20, 0x00	; 0
     7da:	50 40       	sbci	r21, 0x00	; 0
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <JOY_calibrate+0x24>
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <JOY_calibrate+0x2e>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <JOY_calibrate+0x30>
     7e2:	c4 e1       	ldi	r28, 0x14	; 20
     7e4:	d0 e0       	ldi	r29, 0x00	; 0
     7e6:	60 91 06 01 	lds	r22, 0x0106
     7ea:	70 91 07 01 	lds	r23, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     7ee:	82 e0       	ldi	r24, 0x02	; 2
     7f0:	51 d6       	rcall	.+3234   	; 0x1494 <ADC_request>
     7f2:	8f ef       	ldi	r24, 0xFF	; 255
     7f4:	9f e1       	ldi	r25, 0x1F	; 31
     7f6:	21 e0       	ldi	r18, 0x01	; 1
     7f8:	81 50       	subi	r24, 0x01	; 1
     7fa:	90 40       	sbci	r25, 0x00	; 0
     7fc:	20 40       	sbci	r18, 0x00	; 0
     7fe:	e1 f7       	brne	.-8      	; 0x7f8 <JOY_calibrate+0x46>
     800:	00 c0       	rjmp	.+0      	; 0x802 <JOY_calibrate+0x50>
     802:	00 00       	nop
     804:	80 91 06 01 	lds	r24, 0x0106
     808:	90 91 07 01 	lds	r25, 0x0107
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     80c:	67 d6       	rcall	.+3278   	; 0x14dc <ADC_read>
     80e:	90 91 0d 01 	lds	r25, 0x010D
     812:	98 17       	cp	r25, r24
     814:	10 f4       	brcc	.+4      	; 0x81a <JOY_calibrate+0x68>
     816:	80 93 0d 01 	sts	0x010D, r24
		
		if(temp > calR) {calR = temp;}
     81a:	21 97       	sbiw	r28, 0x01	; 1
     81c:	20 97       	sbiw	r28, 0x00	; 0
     81e:	19 f7       	brne	.-58     	; 0x7e6 <JOY_calibrate+0x34>
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	81 e0       	ldi	r24, 0x01	; 1
	OLED_goto(0,0);
	OLED_printString("JOY RIGHT");
	printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	44 d4       	rcall	.+2184   	; 0x10b2 <OLED_goto>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_goto(1,0);
     82a:	8d ed       	ldi	r24, 0xDD	; 221
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	97 d4       	rcall	.+2350   	; 0x115e <OLED_printString>
     830:	86 ee       	ldi	r24, 0xE6	; 230
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	0e 94 1e 0c 	call	0x183c	; 0x183c <puts>
	OLED_printString("JOY LEFT");
     838:	4f ef       	ldi	r20, 0xFF	; 255
     83a:	5f ef       	ldi	r21, 0xFF	; 255
     83c:	82 e0       	ldi	r24, 0x02	; 2
	printf("Move JOY to the left\n");
     83e:	41 50       	subi	r20, 0x01	; 1
     840:	50 40       	sbci	r21, 0x00	; 0
     842:	80 40       	sbci	r24, 0x00	; 0
     844:	e1 f7       	brne	.-8      	; 0x83e <JOY_calibrate+0x8c>
     846:	00 c0       	rjmp	.+0      	; 0x848 <JOY_calibrate+0x96>
     848:	00 c0       	rjmp	.+0      	; 0x84a <JOY_calibrate+0x98>
     84a:	c4 e1       	ldi	r28, 0x14	; 20
     84c:	d0 e0       	ldi	r29, 0x00	; 0
     84e:	60 91 06 01 	lds	r22, 0x0106
     852:	70 91 07 01 	lds	r23, 0x0107
     856:	82 e0       	ldi	r24, 0x02	; 2
     858:	1d d6       	rcall	.+3130   	; 0x1494 <ADC_request>
     85a:	9f ef       	ldi	r25, 0xFF	; 255
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     85c:	2f e1       	ldi	r18, 0x1F	; 31
     85e:	41 e0       	ldi	r20, 0x01	; 1
     860:	91 50       	subi	r25, 0x01	; 1
     862:	20 40       	sbci	r18, 0x00	; 0
     864:	40 40       	sbci	r20, 0x00	; 0
     866:	e1 f7       	brne	.-8      	; 0x860 <JOY_calibrate+0xae>
     868:	00 c0       	rjmp	.+0      	; 0x86a <JOY_calibrate+0xb8>
     86a:	00 00       	nop
     86c:	80 91 06 01 	lds	r24, 0x0106
     870:	90 91 07 01 	lds	r25, 0x0107
     874:	33 d6       	rcall	.+3174   	; 0x14dc <ADC_read>
     876:	90 91 0c 01 	lds	r25, 0x010C
     87a:	89 17       	cp	r24, r25
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     87c:	10 f4       	brcc	.+4      	; 0x882 <JOY_calibrate+0xd0>
     87e:	80 93 0c 01 	sts	0x010C, r24
     882:	21 97       	sbiw	r28, 0x01	; 1
     884:	20 97       	sbiw	r28, 0x00	; 0
     886:	19 f7       	brne	.-58     	; 0x84e <JOY_calibrate+0x9c>
		
		if(temp < calL) {calL = temp;}
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	70 e0       	ldi	r23, 0x00	; 0
     88c:	82 e0       	ldi	r24, 0x02	; 2
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	10 d4       	rcall	.+2080   	; 0x10b2 <OLED_goto>
     892:	8b ef       	ldi	r24, 0xFB	; 251
     894:	91 e0       	ldi	r25, 0x01	; 1
	OLED_goto(1,0);
	OLED_printString("JOY LEFT");
	printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     896:	63 d4       	rcall	.+2246   	; 0x115e <OLED_printString>
     898:	82 e0       	ldi	r24, 0x02	; 2
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_goto(2,0);
     89a:	92 e0       	ldi	r25, 0x02	; 2
     89c:	cf d7       	rcall	.+3998   	; 0x183c <puts>
     89e:	5f ef       	ldi	r21, 0xFF	; 255
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	92 e0       	ldi	r25, 0x02	; 2
     8a4:	51 50       	subi	r21, 0x01	; 1
	OLED_printString("JOY UP");
     8a6:	80 40       	sbci	r24, 0x00	; 0
     8a8:	90 40       	sbci	r25, 0x00	; 0
     8aa:	e1 f7       	brne	.-8      	; 0x8a4 <JOY_calibrate+0xf2>
     8ac:	00 c0       	rjmp	.+0      	; 0x8ae <JOY_calibrate+0xfc>
	printf("Move JOY up\n");
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <JOY_calibrate+0xfe>
     8b0:	c4 e1       	ldi	r28, 0x14	; 20
     8b2:	d0 e0       	ldi	r29, 0x00	; 0
     8b4:	60 91 06 01 	lds	r22, 0x0106
     8b8:	70 91 07 01 	lds	r23, 0x0107
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	ea d5       	rcall	.+3028   	; 0x1494 <ADC_request>
     8c0:	2f ef       	ldi	r18, 0xFF	; 255
     8c2:	4f e1       	ldi	r20, 0x1F	; 31
     8c4:	51 e0       	ldi	r21, 0x01	; 1
     8c6:	21 50       	subi	r18, 0x01	; 1
     8c8:	40 40       	sbci	r20, 0x00	; 0
     8ca:	50 40       	sbci	r21, 0x00	; 0
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     8cc:	e1 f7       	brne	.-8      	; 0x8c6 <JOY_calibrate+0x114>
     8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <JOY_calibrate+0x11e>
     8d0:	00 00       	nop
     8d2:	80 91 06 01 	lds	r24, 0x0106
     8d6:	90 91 07 01 	lds	r25, 0x0107
     8da:	00 d6       	rcall	.+3072   	; 0x14dc <ADC_read>
     8dc:	90 91 0b 01 	lds	r25, 0x010B
     8e0:	98 17       	cp	r25, r24
     8e2:	10 f4       	brcc	.+4      	; 0x8e8 <JOY_calibrate+0x136>
     8e4:	80 93 0b 01 	sts	0x010B, r24
     8e8:	21 97       	sbiw	r28, 0x01	; 1
     8ea:	20 97       	sbiw	r28, 0x00	; 0
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     8ec:	19 f7       	brne	.-58     	; 0x8b4 <JOY_calibrate+0x102>
     8ee:	60 e0       	ldi	r22, 0x00	; 0
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	83 e0       	ldi	r24, 0x03	; 3
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	dd d3       	rcall	.+1978   	; 0x10b2 <OLED_goto>
		
		if(temp > calUp) {calUp = temp;}
     8f8:	8e e0       	ldi	r24, 0x0E	; 14
     8fa:	92 e0       	ldi	r25, 0x02	; 2
     8fc:	30 d4       	rcall	.+2144   	; 0x115e <OLED_printString>
     8fe:	87 e1       	ldi	r24, 0x17	; 23
     900:	92 e0       	ldi	r25, 0x02	; 2
     902:	9c d7       	rcall	.+3896   	; 0x183c <puts>
     904:	8f ef       	ldi	r24, 0xFF	; 255
	OLED_goto(2,0);
	OLED_printString("JOY UP");
	printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     906:	9f ef       	ldi	r25, 0xFF	; 255
     908:	22 e0       	ldi	r18, 0x02	; 2
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_goto(3,0);
     90a:	81 50       	subi	r24, 0x01	; 1
     90c:	90 40       	sbci	r25, 0x00	; 0
     90e:	20 40       	sbci	r18, 0x00	; 0
     910:	e1 f7       	brne	.-8      	; 0x90a <JOY_calibrate+0x158>
     912:	00 c0       	rjmp	.+0      	; 0x914 <JOY_calibrate+0x162>
     914:	00 c0       	rjmp	.+0      	; 0x916 <JOY_calibrate+0x164>
	OLED_printString("JOY DOWN");
     916:	c4 e1       	ldi	r28, 0x14	; 20
     918:	d0 e0       	ldi	r29, 0x00	; 0
     91a:	60 91 06 01 	lds	r22, 0x0106
	printf("Move JOY down\n");
     91e:	70 91 07 01 	lds	r23, 0x0107
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	b7 d5       	rcall	.+2926   	; 0x1494 <ADC_request>
     926:	4f ef       	ldi	r20, 0xFF	; 255
     928:	5f e1       	ldi	r21, 0x1F	; 31
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	41 50       	subi	r20, 0x01	; 1
     92e:	50 40       	sbci	r21, 0x00	; 0
     930:	80 40       	sbci	r24, 0x00	; 0
     932:	e1 f7       	brne	.-8      	; 0x92c <JOY_calibrate+0x17a>
     934:	00 c0       	rjmp	.+0      	; 0x936 <JOY_calibrate+0x184>
     936:	00 00       	nop
     938:	80 91 06 01 	lds	r24, 0x0106
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     93c:	90 91 07 01 	lds	r25, 0x0107
     940:	cd d5       	rcall	.+2970   	; 0x14dc <ADC_read>
     942:	90 91 0a 01 	lds	r25, 0x010A
     946:	89 17       	cp	r24, r25
     948:	10 f4       	brcc	.+4      	; 0x94e <JOY_calibrate+0x19c>
     94a:	80 93 0a 01 	sts	0x010A, r24
     94e:	21 97       	sbiw	r28, 0x01	; 1
     950:	20 97       	sbiw	r28, 0x00	; 0
     952:	19 f7       	brne	.-58     	; 0x91a <JOY_calibrate+0x168>
     954:	30 91 0a 01 	lds	r19, 0x010A
     958:	20 91 0b 01 	lds	r18, 0x010B
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     95c:	90 91 0c 01 	lds	r25, 0x010C
     960:	80 91 0d 01 	lds	r24, 0x010D
     964:	1f 92       	push	r1
     966:	3f 93       	push	r19
		
		if(temp < calDown) {calDown = temp;}
     968:	1f 92       	push	r1
     96a:	2f 93       	push	r18
     96c:	1f 92       	push	r1
     96e:	9f 93       	push	r25
     970:	1f 92       	push	r1
     972:	8f 93       	push	r24
     974:	85 e2       	ldi	r24, 0x25	; 37
	OLED_goto(3,0);
	OLED_printString("JOY DOWN");
	printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     976:	92 e0       	ldi	r25, 0x02	; 2
     978:	9f 93       	push	r25
		
		if(temp < calDown) {calDown = temp;}
	}
	
	
	printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
     97a:	8f 93       	push	r24
     97c:	49 d7       	rcall	.+3730   	; 0x1810 <printf>
     97e:	20 91 0b 01 	lds	r18, 0x010B
     982:	80 91 0a 01 	lds	r24, 0x010A
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	28 1b       	sub	r18, r24
     98a:	31 09       	sbc	r19, r1
     98c:	c9 01       	movw	r24, r18
     98e:	4d b7       	in	r20, 0x3d	; 61
     990:	5e b7       	in	r21, 0x3e	; 62
     992:	46 5f       	subi	r20, 0xF6	; 246
     994:	5f 4f       	sbci	r21, 0xFF	; 255
     996:	0f b6       	in	r0, 0x3f	; 63
     998:	f8 94       	cli
     99a:	5e bf       	out	0x3e, r21	; 62
     99c:	0f be       	out	0x3f, r0	; 63
     99e:	4d bf       	out	0x3d, r20	; 61
     9a0:	99 23       	and	r25, r25
     9a2:	0c f4       	brge	.+2      	; 0x9a6 <JOY_calibrate+0x1f4>
     9a4:	01 96       	adiw	r24, 0x01	; 1
	
	meanVert = (calUp - calDown)/2;
     9a6:	95 95       	asr	r25
     9a8:	87 95       	ror	r24
     9aa:	80 93 09 01 	sts	0x0109, r24
     9ae:	20 91 0d 01 	lds	r18, 0x010D
     9b2:	80 91 0c 01 	lds	r24, 0x010C
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	28 1b       	sub	r18, r24
     9ba:	31 09       	sbc	r19, r1
     9bc:	c9 01       	movw	r24, r18
     9be:	99 23       	and	r25, r25
     9c0:	0c f4       	brge	.+2      	; 0x9c4 <JOY_calibrate+0x212>
     9c2:	01 96       	adiw	r24, 0x01	; 1
     9c4:	95 95       	asr	r25
     9c6:	87 95       	ror	r24
     9c8:	80 93 08 01 	sts	0x0108, r24
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	84 e0       	ldi	r24, 0x04	; 4
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	6e d3       	rcall	.+1756   	; 0x10b2 <OLED_goto>
	meanHor = (calR - calL)/2;
     9d6:	8f e4       	ldi	r24, 0x4F	; 79
     9d8:	92 e0       	ldi	r25, 0x02	; 2
     9da:	c1 d3       	rcall	.+1922   	; 0x115e <OLED_printString>
     9dc:	90 91 08 01 	lds	r25, 0x0108
     9e0:	80 91 09 01 	lds	r24, 0x0109
     9e4:	1f 92       	push	r1
     9e6:	9f 93       	push	r25
     9e8:	1f 92       	push	r1
     9ea:	8f 93       	push	r24
     9ec:	8a e5       	ldi	r24, 0x5A	; 90
     9ee:	92 e0       	ldi	r25, 0x02	; 2
     9f0:	9f 93       	push	r25
     9f2:	8f 93       	push	r24
	
	OLED_goto(4,0);
     9f4:	0d d7       	rcall	.+3610   	; 0x1810 <printf>
     9f6:	5f ef       	ldi	r21, 0xFF	; 255
     9f8:	8f ef       	ldi	r24, 0xFF	; 255
     9fa:	9e e0       	ldi	r25, 0x0E	; 14
     9fc:	51 50       	subi	r21, 0x01	; 1
     9fe:	80 40       	sbci	r24, 0x00	; 0
	OLED_printString("CALIB DONE");
     a00:	90 40       	sbci	r25, 0x00	; 0
     a02:	e1 f7       	brne	.-8      	; 0x9fc <JOY_calibrate+0x24a>
     a04:	00 c0       	rjmp	.+0      	; 0xa06 <JOY_calibrate+0x254>
     a06:	00 00       	nop
	printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	df 91       	pop	r29
     a16:	cf 91       	pop	r28
     a18:	08 95       	ret

00000a1a <JOY_requestCurrentPosition>:
     a1a:	88 37       	cpi	r24, 0x78	; 120
     a1c:	39 f4       	brne	.+14     	; 0xa2c <JOY_requestCurrentPosition+0x12>
     a1e:	60 91 06 01 	lds	r22, 0x0106
     a22:	70 91 07 01 	lds	r23, 0x0107
     a26:	82 e0       	ldi	r24, 0x02	; 2
     a28:	35 c5       	rjmp	.+2666   	; 0x1494 <ADC_request>
     a2a:	08 95       	ret
     a2c:	89 37       	cpi	r24, 0x79	; 121
     a2e:	31 f4       	brne	.+12     	; 0xa3c <JOY_requestCurrentPosition+0x22>
     a30:	60 91 06 01 	lds	r22, 0x0106
     a34:	70 91 07 01 	lds	r23, 0x0107
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	2c c5       	rjmp	.+2648   	; 0x1494 <ADC_request>
     a3c:	08 95       	ret

00000a3e <JOY_updatePosition>:
     a3e:	88 37       	cpi	r24, 0x78	; 120
     a40:	f9 f4       	brne	.+62     	; 0xa80 <JOY_updatePosition+0x42>
	_delay_ms(1000);
}
     a42:	80 91 06 01 	lds	r24, 0x0106
     a46:	90 91 07 01 	lds	r25, 0x0107
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     a4a:	48 d5       	rcall	.+2704   	; 0x14dc <ADC_read>
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	90 93 db 03 	sts	0x03DB, r25
     a52:	80 93 da 03 	sts	0x03DA, r24
     a56:	20 91 08 01 	lds	r18, 0x0108
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     a5a:	60 91 08 01 	lds	r22, 0x0108
     a5e:	ac 01       	movw	r20, r24
     a60:	42 1b       	sub	r20, r18
     a62:	51 09       	sbc	r21, r1
     a64:	9a 01       	movw	r18, r20
     a66:	44 e6       	ldi	r20, 0x64	; 100
     a68:	42 9f       	mul	r20, r18
     a6a:	c0 01       	movw	r24, r0
     a6c:	43 9f       	mul	r20, r19
     a6e:	90 0d       	add	r25, r0
     a70:	11 24       	eor	r1, r1
     a72:	70 e0       	ldi	r23, 0x00	; 0
     a74:	35 d5       	rcall	.+2666   	; 0x14e0 <__divmodhi4>
     a76:	70 93 df 03 	sts	0x03DF, r23
     a7a:	60 93 de 03 	sts	0x03DE, r22
     a7e:	08 95       	ret
     a80:	89 37       	cpi	r24, 0x79	; 121
     a82:	f1 f4       	brne	.+60     	; 0xac0 <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     a84:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     a88:	90 91 07 01 	lds	r25, 0x0107
     a8c:	27 d5       	rcall	.+2638   	; 0x14dc <ADC_read>
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	90 93 dd 03 	sts	0x03DD, r25
     a94:	80 93 dc 03 	sts	0x03DC, r24
     a98:	20 91 09 01 	lds	r18, 0x0109
     a9c:	60 91 09 01 	lds	r22, 0x0109
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     aa0:	ac 01       	movw	r20, r24
     aa2:	42 1b       	sub	r20, r18
     aa4:	51 09       	sbc	r21, r1
     aa6:	9a 01       	movw	r18, r20
     aa8:	44 e6       	ldi	r20, 0x64	; 100
     aaa:	42 9f       	mul	r20, r18
     aac:	c0 01       	movw	r24, r0
     aae:	43 9f       	mul	r20, r19
     ab0:	90 0d       	add	r25, r0
     ab2:	11 24       	eor	r1, r1
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	14 d5       	rcall	.+2600   	; 0x14e0 <__divmodhi4>
     ab8:	70 93 e1 03 	sts	0x03E1, r23
     abc:	60 93 e0 03 	sts	0x03E0, r22
     ac0:	08 95       	ret

00000ac2 <JOY_calculateDirection>:
     ac2:	80 91 de 03 	lds	r24, 0x03DE
     ac6:	90 91 df 03 	lds	r25, 0x03DF
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     aca:	8b 35       	cpi	r24, 0x5B	; 91
     acc:	91 05       	cpc	r25, r1
     ace:	24 f0       	brlt	.+8      	; 0xad8 <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     ad0:	83 e0       	ldi	r24, 0x03	; 3
     ad2:	80 93 d9 03 	sts	0x03D9, r24
     ad6:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     ad8:	86 3a       	cpi	r24, 0xA6	; 166
     ada:	9f 4f       	sbci	r25, 0xFF	; 255
     adc:	24 f4       	brge	.+8      	; 0xae6 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     ade:	84 e0       	ldi	r24, 0x04	; 4
     ae0:	80 93 d9 03 	sts	0x03D9, r24
     ae4:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     ae6:	80 91 e0 03 	lds	r24, 0x03E0
     aea:	90 91 e1 03 	lds	r25, 0x03E1
     aee:	8b 35       	cpi	r24, 0x5B	; 91
     af0:	91 05       	cpc	r25, r1
     af2:	24 f0       	brlt	.+8      	; 0xafc <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	80 93 d9 03 	sts	0x03D9, r24
     afa:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     afc:	86 3a       	cpi	r24, 0xA6	; 166
     afe:	9f 4f       	sbci	r25, 0xFF	; 255
     b00:	24 f4       	brge	.+8      	; 0xb0a <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     b02:	82 e0       	ldi	r24, 0x02	; 2
     b04:	80 93 d9 03 	sts	0x03D9, r24
     b08:	08 95       	ret
	else{currentDirection = CENTRE;}
     b0a:	10 92 d9 03 	sts	0x03D9, r1
     b0e:	08 95       	ret

00000b10 <JOY_getDirection>:
// Before the value is returned, the values of position in x and y direction are 
// requested from the ADC and written to the currentPosition and 
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
     b10:	88 e7       	ldi	r24, 0x78	; 120
     b12:	83 df       	rcall	.-250    	; 0xa1a <JOY_requestCurrentPosition>
     b14:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b16:	8a 95       	dec	r24
     b18:	f1 f7       	brne	.-4      	; 0xb16 <JOY_getDirection+0x6>
     b1a:	00 00       	nop
     b1c:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     b1e:	8f df       	rcall	.-226    	; 0xa3e <JOY_updatePosition>
     b20:	89 e7       	ldi	r24, 0x79	; 121
     b22:	7b df       	rcall	.-266    	; 0xa1a <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     b24:	82 e6       	ldi	r24, 0x62	; 98
     b26:	8a 95       	dec	r24
     b28:	f1 f7       	brne	.-4      	; 0xb26 <JOY_getDirection+0x16>
     b2a:	00 00       	nop
     b2c:	89 e7       	ldi	r24, 0x79	; 121
     b2e:	87 df       	rcall	.-242    	; 0xa3e <JOY_updatePosition>
     b30:	c8 df       	rcall	.-112    	; 0xac2 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     b32:	80 91 d9 03 	lds	r24, 0x03D9
     b36:	08 95       	ret

00000b38 <MCP2515_reset>:
	printf("finished MCP2515_init\n");
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
     b38:	cf 93       	push	r28
     b3a:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
     b3c:	82 d4       	rcall	.+2308   	; 0x1442 <SPI_activateSlave>
     b3e:	80 ec       	ldi	r24, 0xC0	; 192
	SPI_send(MCP_RESET);
     b40:	76 d4       	rcall	.+2284   	; 0x142e <SPI_send>
     b42:	8c ec       	ldi	r24, 0xCC	; 204
     b44:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	f1 f7       	brne	.-4      	; 0xb46 <MCP2515_reset+0xe>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <MCP2515_reset+0x14>
     b4c:	00 00       	nop
     b4e:	8c 2f       	mov	r24, r28
     b50:	7c d4       	rcall	.+2296   	; 0x144a <SPI_deactivateSlave>
	_delay_ms(1);
	SPI_deactivateSlave(slave);
     b52:	8f ef       	ldi	r24, 0xFF	; 255
     b54:	9f e2       	ldi	r25, 0x2F	; 47
     b56:	01 97       	sbiw	r24, 0x01	; 1
     b58:	f1 f7       	brne	.-4      	; 0xb56 <MCP2515_reset+0x1e>
     b5a:	00 c0       	rjmp	.+0      	; 0xb5c <MCP2515_reset+0x24>
     b5c:	00 00       	nop
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <MCP2515_read>:
     b62:	cf 93       	push	r28
	_delay_ms(10);
}
     b64:	df 93       	push	r29
     b66:	c8 2f       	mov	r28, r24

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
     b68:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
     b6a:	6b d4       	rcall	.+2262   	; 0x1442 <SPI_activateSlave>
     b6c:	83 e0       	ldi	r24, 0x03	; 3
	SPI_send(MCP_READ);
     b6e:	5f d4       	rcall	.+2238   	; 0x142e <SPI_send>
     b70:	8d 2f       	mov	r24, r29
     b72:	5d d4       	rcall	.+2234   	; 0x142e <SPI_send>
	SPI_send(address);
     b74:	60 d4       	rcall	.+2240   	; 0x1436 <SPI_receive>
     b76:	d8 2f       	mov	r29, r24
     b78:	8c 2f       	mov	r24, r28
	
	uint8_t result;
	result = SPI_receive();
     b7a:	67 d4       	rcall	.+2254   	; 0x144a <SPI_deactivateSlave>
     b7c:	8d 2f       	mov	r24, r29
     b7e:	df 91       	pop	r29
	
	SPI_deactivateSlave(slave);
     b80:	cf 91       	pop	r28
     b82:	08 95       	ret

00000b84 <MCP2515_init>:
     b84:	cf 93       	push	r28
	return result;
}
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	d7 df       	rcall	.-82     	; 0xb38 <MCP2515_reset>
     b8a:	6e e0       	ldi	r22, 0x0E	; 14
     b8c:	80 e0       	ldi	r24, 0x00	; 0
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
	
	//printf("MCP_CANSTAT: %d\n", MCP2515_read(MCP_CANSTAT, SS_CAN_CONTROLLER));
	
	// Self-test
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
     b8e:	e9 df       	rcall	.-46     	; 0xb62 <MCP2515_read>
     b90:	c8 2f       	mov	r28, r24
     b92:	1f 92       	push	r1
     b94:	8f 93       	push	r24
	printf("CANSTAT: %#x\n", value);
     b96:	2f e7       	ldi	r18, 0x7F	; 127
     b98:	32 e0       	ldi	r19, 0x02	; 2
     b9a:	3f 93       	push	r19
     b9c:	2f 93       	push	r18
     b9e:	38 d6       	rcall	.+3184   	; 0x1810 <printf>
     ba0:	8c 2f       	mov	r24, r28
     ba2:	80 7e       	andi	r24, 0xE0	; 224
     ba4:	0f 90       	pop	r0
	if((value & MODE_MASK) != MODE_CONFIG) 
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	80 38       	cpi	r24, 0x80	; 128
     bae:	69 f0       	breq	.+26     	; 0xbca <MCP2515_init+0x46>
     bb0:	1f 92       	push	r1
     bb2:	cf 93       	push	r28
     bb4:	8d e8       	ldi	r24, 0x8D	; 141
	{
		printf("MCP2515 is NOT in configuration mode after reset! Value: %d\n", value);
     bb6:	92 e0       	ldi	r25, 0x02	; 2
     bb8:	9f 93       	push	r25
     bba:	8f 93       	push	r24
     bbc:	29 d6       	rcall	.+3154   	; 0x1810 <printf>
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
		return 1;
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	04 c0       	rjmp	.+8      	; 0xbd2 <MCP2515_init+0x4e>
     bca:	8a ec       	ldi	r24, 0xCA	; 202
     bcc:	92 e0       	ldi	r25, 0x02	; 2
     bce:	36 d6       	rcall	.+3180   	; 0x183c <puts>
     bd0:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	printf("finished MCP2515_init\n");
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <MCP2515_write>:
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
	return 0;
     bda:	df 93       	push	r29
}
     bdc:	c8 2f       	mov	r28, r24
     bde:	16 2f       	mov	r17, r22
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_write(SPI_SLAVES slave, uint8_t address, uint8_t data)
{
     be0:	d4 2f       	mov	r29, r20
	SPI_activateSlave(slave);
     be2:	2f d4       	rcall	.+2142   	; 0x1442 <SPI_activateSlave>
     be4:	82 e0       	ldi	r24, 0x02	; 2
	SPI_send(MCP_WRITE);
     be6:	23 d4       	rcall	.+2118   	; 0x142e <SPI_send>
     be8:	81 2f       	mov	r24, r17
     bea:	21 d4       	rcall	.+2114   	; 0x142e <SPI_send>
	SPI_send(address);
     bec:	8d 2f       	mov	r24, r29
     bee:	1f d4       	rcall	.+2110   	; 0x142e <SPI_send>
     bf0:	8c 2f       	mov	r24, r28
	SPI_send(data);
     bf2:	2b d4       	rcall	.+2134   	; 0x144a <SPI_deactivateSlave>
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
	SPI_deactivateSlave(slave);
     bf8:	1f 91       	pop	r17
     bfa:	08 95       	ret

00000bfc <MCP2515_bitModify>:
     bfc:	0f 93       	push	r16
}
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	c8 2f       	mov	r28, r24
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_bitModify(SPI_SLAVES slave, uint8_t register2change, uint8_t mask, uint8_t newValue)
{
     c06:	06 2f       	mov	r16, r22
     c08:	14 2f       	mov	r17, r20
     c0a:	d2 2f       	mov	r29, r18
	SPI_activateSlave(slave);
     c0c:	1a d4       	rcall	.+2100   	; 0x1442 <SPI_activateSlave>
     c0e:	85 e0       	ldi	r24, 0x05	; 5
	
	SPI_send(MCP_BITMOD);
     c10:	0e d4       	rcall	.+2076   	; 0x142e <SPI_send>
     c12:	80 2f       	mov	r24, r16
     c14:	0c d4       	rcall	.+2072   	; 0x142e <SPI_send>
	SPI_send(register2change);
     c16:	81 2f       	mov	r24, r17
     c18:	0a d4       	rcall	.+2068   	; 0x142e <SPI_send>
     c1a:	8d 2f       	mov	r24, r29
	SPI_send(mask);
     c1c:	08 d4       	rcall	.+2064   	; 0x142e <SPI_send>
     c1e:	8c 2f       	mov	r24, r28
     c20:	14 d4       	rcall	.+2088   	; 0x144a <SPI_deactivateSlave>
	SPI_send(newValue);
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
	
	SPI_deactivateSlave(slave);
     c28:	0f 91       	pop	r16
     c2a:	08 95       	ret

00000c2c <startGame>:

int menuFrameOffset = 10; //Columns from left frame border
//******************************************************************************************

void startGame()
{
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
	OLED_clear();
     c30:	5d d2       	rcall	.+1210   	; 0x10ec <OLED_clear>
     c32:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	80 e0       	ldi	r24, 0x00	; 0
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	3b d2       	rcall	.+1142   	; 0x10b2 <OLED_goto>
     c3c:	86 ef       	ldi	r24, 0xF6	; 246
     c3e:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("START");
     c40:	8e d2       	rcall	.+1308   	; 0x115e <OLED_printString>
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_goto(3,0);
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	33 d2       	rcall	.+1126   	; 0x10b2 <OLED_goto>
     c4c:	ce e0       	ldi	r28, 0x0E	; 14
     c4e:	d0 e0       	ldi	r29, 0x00	; 0
     c50:	8c ef       	ldi	r24, 0xFC	; 252
     c52:	92 e0       	ldi	r25, 0x02	; 2
     c54:	84 d2       	rcall	.+1288   	; 0x115e <OLED_printString>
     c56:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     c58:	8f e7       	ldi	r24, 0x7F	; 127
     c5a:	97 e0       	ldi	r25, 0x07	; 7
     c5c:	21 50       	subi	r18, 0x01	; 1
     c5e:	80 40       	sbci	r24, 0x00	; 0
     c60:	90 40       	sbci	r25, 0x00	; 0
     c62:	e1 f7       	brne	.-8      	; 0xc5c <startGame+0x30>
     c64:	00 c0       	rjmp	.+0      	; 0xc66 <startGame+0x3a>
     c66:	00 00       	nop
     c68:	21 97       	sbiw	r28, 0x01	; 1
     c6a:	20 97       	sbiw	r28, 0x00	; 0
     c6c:	89 f7       	brne	.-30     	; 0xc50 <startGame+0x24>
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	70 e0       	ldi	r23, 0x00	; 0
     c72:	85 e0       	ldi	r24, 0x05	; 5
	OLED_goto(0,0);
	OLED_printString("START");
	
	OLED_goto(3,0);
	
	for(int i = 14; i > 0; i--)
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	1d d2       	rcall	.+1082   	; 0x10b2 <OLED_goto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_goto(5,0);
     c78:	8e ef       	ldi	r24, 0xFE	; 254
     c7a:	92 e0       	ldi	r25, 0x02	; 2
     c7c:	70 d2       	rcall	.+1248   	; 0x115e <OLED_printString>
     c7e:	2f ef       	ldi	r18, 0xFF	; 255
     c80:	8f ef       	ldi	r24, 0xFF	; 255
     c82:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     c84:	21 50       	subi	r18, 0x01	; 1
     c86:	80 40       	sbci	r24, 0x00	; 0
     c88:	90 40       	sbci	r25, 0x00	; 0
     c8a:	e1 f7       	brne	.-8      	; 0xc84 <startGame+0x58>
     c8c:	00 c0       	rjmp	.+0      	; 0xc8e <startGame+0x62>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <startGame+0x64>
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	08 95       	ret

00000c96 <MENU_addMenuItem>:
     c96:	cf 92       	push	r12
     c98:	df 92       	push	r13
     c9a:	ef 92       	push	r14
     c9c:	ff 92       	push	r15
	_delay_ms(3000);
}
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     ca4:	df 93       	push	r29
     ca6:	8c 01       	movw	r16, r24
     ca8:	7b 01       	movw	r14, r22
     caa:	6a 01       	movw	r12, r20
     cac:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     cae:	80 91 e5 03 	lds	r24, 0x03E5
     cb2:	90 91 e6 03 	lds	r25, 0x03E6
     cb6:	89 2b       	or	r24, r25
     cb8:	19 f0       	breq	.+6      	; 0xcc0 <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     cba:	87 e0       	ldi	r24, 0x07	; 7
     cbc:	93 e0       	ldi	r25, 0x03	; 3
     cbe:	be d5       	rcall	.+2940   	; 0x183c <puts>
     cc0:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	34 d4       	rcall	.+2152   	; 0x152e <malloc>
     cc6:	fc 01       	movw	r30, r24
     cc8:	90 93 e6 03 	sts	0x03E6, r25
     ccc:	80 93 e5 03 	sts	0x03E5, r24
     cd0:	f3 82       	std	Z+3, r15	; 0x03
     cd2:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     cd4:	11 83       	std	Z+1, r17	; 0x01
     cd6:	00 83       	st	Z, r16
	currItem->name = name;
     cd8:	cd 2b       	or	r28, r29
     cda:	39 f0       	breq	.+14     	; 0xcea <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     cdc:	d5 82       	std	Z+5, r13	; 0x05
     cde:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     ce4:	97 83       	std	Z+7, r25	; 0x07
     ce6:	86 83       	std	Z+6, r24	; 0x06
     ce8:	04 c0       	rjmp	.+8      	; 0xcf2 <MENU_addMenuItem+0x5c>
     cea:	15 82       	std	Z+5, r1	; 0x05
     cec:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     cee:	17 82       	std	Z+7, r1	; 0x07
     cf0:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     cf2:	df 91       	pop	r29
     cf4:	cf 91       	pop	r28
	}
}
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	ff 90       	pop	r15
     cfc:	ef 90       	pop	r14
     cfe:	df 90       	pop	r13
     d00:	cf 90       	pop	r12
     d02:	08 95       	ret

00000d04 <MENU_buildMenus>:
     d04:	cf 93       	push	r28
     d06:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     d08:	86 e1       	ldi	r24, 0x16	; 22
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	10 d4       	rcall	.+2080   	; 0x152e <malloc>
     d0e:	ec 01       	movw	r28, r24
     d10:	90 93 ec 03 	sts	0x03EC, r25
     d14:	80 93 eb 03 	sts	0x03EB, r24
     d18:	8d e1       	ldi	r24, 0x1D	; 29
	mainMenu->menuName = "MainMenu";
     d1a:	93 e0       	ldi	r25, 0x03	; 3
     d1c:	99 83       	std	Y+1, r25	; 0x01
     d1e:	88 83       	st	Y, r24
     d20:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     d22:	1c 8a       	std	Y+20, r1	; 0x14
     d24:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	9b 83       	std	Y+3, r25	; 0x03
     d2a:	8a 83       	std	Y+2, r24	; 0x02
     d2c:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	fe d3       	rcall	.+2044   	; 0x152e <malloc>
     d32:	fc 01       	movw	r30, r24
     d34:	90 93 ea 03 	sts	0x03EA, r25
     d38:	80 93 e9 03 	sts	0x03E9, r24
     d3c:	86 e2       	ldi	r24, 0x26	; 38
     d3e:	93 e0       	ldi	r25, 0x03	; 3
	difficultyMenu->menuName = "DifficultyMenu";
     d40:	91 83       	std	Z+1, r25	; 0x01
     d42:	80 83       	st	Z, r24
     d44:	d5 8b       	std	Z+21, r29	; 0x15
     d46:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     d48:	83 e0       	ldi	r24, 0x03	; 3
     d4a:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     d4c:	93 83       	std	Z+3, r25	; 0x03
     d4e:	82 83       	std	Z+2, r24	; 0x02
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     d54:	40 e0       	ldi	r20, 0x00	; 0
     d56:	50 e0       	ldi	r21, 0x00	; 0
     d58:	be 01       	movw	r22, r28
     d5a:	85 e3       	ldi	r24, 0x35	; 53
     d5c:	93 e0       	ldi	r25, 0x03	; 3
     d5e:	9b df       	rcall	.-202    	; 0xc96 <MENU_addMenuItem>
     d60:	60 91 eb 03 	lds	r22, 0x03EB
     d64:	70 91 ec 03 	lds	r23, 0x03EC
	mainMenu->children[0] = currItem;
     d68:	e0 91 e5 03 	lds	r30, 0x03E5
     d6c:	f0 91 e6 03 	lds	r31, 0x03E6
     d70:	db 01       	movw	r26, r22
     d72:	15 96       	adiw	r26, 0x05	; 5
     d74:	fc 93       	st	X, r31
     d76:	ee 93       	st	-X, r30
     d78:	14 97       	sbiw	r26, 0x04	; 4
     d7a:	86 e1       	ldi	r24, 0x16	; 22
     d7c:	96 e0       	ldi	r25, 0x06	; 6
     d7e:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
     d80:	82 87       	std	Z+10, r24	; 0x0a
     d82:	40 91 e9 03 	lds	r20, 0x03E9
     d86:	50 91 ea 03 	lds	r21, 0x03EA
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     d8a:	21 e0       	ldi	r18, 0x01	; 1
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	8e e3       	ldi	r24, 0x3E	; 62
     d90:	93 e0       	ldi	r25, 0x03	; 3
     d92:	81 df       	rcall	.-254    	; 0xc96 <MENU_addMenuItem>
     d94:	60 91 eb 03 	lds	r22, 0x03EB
     d98:	70 91 ec 03 	lds	r23, 0x03EC
	mainMenu->children[1] = currItem;
     d9c:	80 91 e5 03 	lds	r24, 0x03E5
     da0:	90 91 e6 03 	lds	r25, 0x03E6
     da4:	fb 01       	movw	r30, r22
     da6:	97 83       	std	Z+7, r25	; 0x07
     da8:	86 83       	std	Z+6, r24	; 0x06
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	40 e0       	ldi	r20, 0x00	; 0
     db0:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     db2:	89 e4       	ldi	r24, 0x49	; 73
     db4:	93 e0       	ldi	r25, 0x03	; 3
     db6:	6f df       	rcall	.-290    	; 0xc96 <MENU_addMenuItem>
     db8:	60 91 eb 03 	lds	r22, 0x03EB
     dbc:	70 91 ec 03 	lds	r23, 0x03EC
     dc0:	80 91 e5 03 	lds	r24, 0x03E5
	mainMenu->children[2] = currItem;
     dc4:	90 91 e6 03 	lds	r25, 0x03E6
     dc8:	db 01       	movw	r26, r22
     dca:	19 96       	adiw	r26, 0x09	; 9
     dcc:	9c 93       	st	X, r25
     dce:	8e 93       	st	-X, r24
     dd0:	18 97       	sbiw	r26, 0x08	; 8
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	40 e0       	ldi	r20, 0x00	; 0
     dd8:	50 e0       	ldi	r21, 0x00	; 0
     dda:	84 e5       	ldi	r24, 0x54	; 84
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
     ddc:	93 e0       	ldi	r25, 0x03	; 3
     dde:	5b df       	rcall	.-330    	; 0xc96 <MENU_addMenuItem>
     de0:	60 91 eb 03 	lds	r22, 0x03EB
     de4:	70 91 ec 03 	lds	r23, 0x03EC
     de8:	e0 91 e5 03 	lds	r30, 0x03E5
	mainMenu->children[3] = currItem;
     dec:	f0 91 e6 03 	lds	r31, 0x03E6
     df0:	db 01       	movw	r26, r22
     df2:	1b 96       	adiw	r26, 0x0b	; 11
     df4:	fc 93       	st	X, r31
     df6:	ee 93       	st	-X, r30
     df8:	1a 97       	sbiw	r26, 0x0a	; 10
     dfa:	89 ed       	ldi	r24, 0xD9	; 217
     dfc:	93 e0       	ldi	r25, 0x03	; 3
     dfe:	93 87       	std	Z+11, r25	; 0x0b
     e00:	82 87       	std	Z+10, r24	; 0x0a
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	50 e0       	ldi	r21, 0x00	; 0
     e0a:	8e e5       	ldi	r24, 0x5E	; 94
     e0c:	93 e0       	ldi	r25, 0x03	; 3
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
     e0e:	43 df       	rcall	.-378    	; 0xc96 <MENU_addMenuItem>
     e10:	e0 91 eb 03 	lds	r30, 0x03EB
     e14:	f0 91 ec 03 	lds	r31, 0x03EC
     e18:	80 91 e5 03 	lds	r24, 0x03E5
     e1c:	90 91 e6 03 	lds	r25, 0x03E6
	mainMenu->children[4] = currItem;
     e20:	95 87       	std	Z+13, r25	; 0x0d
     e22:	84 87       	std	Z+12, r24	; 0x0c
     e24:	10 92 e6 03 	sts	0x03E6, r1
     e28:	10 92 e5 03 	sts	0x03E5, r1
     e2c:	60 91 e9 03 	lds	r22, 0x03E9
     e30:	70 91 ea 03 	lds	r23, 0x03EA
	
	currItem = NULL;
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
     e3a:	50 e0       	ldi	r21, 0x00	; 0
     e3c:	83 e6       	ldi	r24, 0x63	; 99
     e3e:	93 e0       	ldi	r25, 0x03	; 3
     e40:	2a df       	rcall	.-428    	; 0xc96 <MENU_addMenuItem>
     e42:	60 91 e9 03 	lds	r22, 0x03E9
     e46:	70 91 ea 03 	lds	r23, 0x03EA
     e4a:	80 91 e5 03 	lds	r24, 0x03E5
     e4e:	90 91 e6 03 	lds	r25, 0x03E6
	difficultyMenu->children[0] = currItem;
     e52:	fb 01       	movw	r30, r22
     e54:	95 83       	std	Z+5, r25	; 0x05
     e56:	84 83       	std	Z+4, r24	; 0x04
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e0       	ldi	r20, 0x00	; 0
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	88 e6       	ldi	r24, 0x68	; 104
     e62:	93 e0       	ldi	r25, 0x03	; 3
     e64:	18 df       	rcall	.-464    	; 0xc96 <MENU_addMenuItem>
     e66:	60 91 e9 03 	lds	r22, 0x03E9
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
     e6a:	70 91 ea 03 	lds	r23, 0x03EA
     e6e:	80 91 e5 03 	lds	r24, 0x03E5
     e72:	90 91 e6 03 	lds	r25, 0x03E6
     e76:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
     e78:	17 96       	adiw	r26, 0x07	; 7
     e7a:	9c 93       	st	X, r25
     e7c:	8e 93       	st	-X, r24
     e7e:	16 97       	sbiw	r26, 0x06	; 6
     e80:	20 e0       	ldi	r18, 0x00	; 0
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	40 e0       	ldi	r20, 0x00	; 0
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	8f e6       	ldi	r24, 0x6F	; 111
     e8a:	93 e0       	ldi	r25, 0x03	; 3
     e8c:	04 df       	rcall	.-504    	; 0xc96 <MENU_addMenuItem>
     e8e:	e0 91 e9 03 	lds	r30, 0x03E9
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
     e92:	f0 91 ea 03 	lds	r31, 0x03EA
     e96:	80 91 e5 03 	lds	r24, 0x03E5
     e9a:	90 91 e6 03 	lds	r25, 0x03E6
     e9e:	91 87       	std	Z+9, r25	; 0x09
     ea0:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	08 95       	ret

00000ea8 <MENU_printMenuItem>:
     ea8:	cf 93       	push	r28
     eaa:	df 93       	push	r29
     eac:	ec 01       	movw	r28, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	20 97       	sbiw	r28, 0x00	; 0
     eb2:	49 f0       	breq	.+18     	; 0xec6 <MENU_printMenuItem+0x1e>
     eb4:	60 91 0e 01 	lds	r22, 0x010E
}
     eb8:	70 91 0f 01 	lds	r23, 0x010F

void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
     ebc:	fa d0       	rcall	.+500    	; 0x10b2 <OLED_goto>
     ebe:	88 81       	ld	r24, Y
		OLED_printString(item->name);
     ec0:	99 81       	ldd	r25, Y+1	; 0x01
     ec2:	4d d1       	rcall	.+666    	; 0x115e <OLED_printString>
     ec4:	07 c0       	rjmp	.+14     	; 0xed4 <MENU_printMenuItem+0x2c>
     ec6:	84 e7       	ldi	r24, 0x74	; 116
     ec8:	93 e0       	ldi	r25, 0x03	; 3
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
     eca:	9f 93       	push	r25
     ecc:	8f 93       	push	r24
     ece:	a0 d4       	rcall	.+2368   	; 0x1810 <printf>
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	08 95       	ret

00000eda <MENU_printMenu>:
	}
}
     eda:	cf 92       	push	r12
     edc:	df 92       	push	r13
     ede:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
     ee0:	ff 92       	push	r15
     ee2:	0f 93       	push	r16
     ee4:	1f 93       	push	r17
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	6c 01       	movw	r12, r24
     eec:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
     eee:	fe d0       	rcall	.+508    	; 0x10ec <OLED_clear>
     ef0:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	8b d1       	rcall	.+790    	; 0x120c <OLED_moveArrow>
     ef6:	1e 14       	cp	r1, r14
     ef8:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
     efa:	7c f4       	brge	.+30     	; 0xf1a <MENU_printMenu+0x40>
     efc:	86 01       	movw	r16, r12
     efe:	0c 5f       	subi	r16, 0xFC	; 252
     f00:	1f 4f       	sbci	r17, 0xFF	; 255
     f02:	c0 e0       	ldi	r28, 0x00	; 0
     f04:	d0 e0       	ldi	r29, 0x00	; 0
     f06:	be 01       	movw	r22, r28
     f08:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
     f0a:	81 91       	ld	r24, Z+
     f0c:	91 91       	ld	r25, Z+
     f0e:	8f 01       	movw	r16, r30
     f10:	cb df       	rcall	.-106    	; 0xea8 <MENU_printMenuItem>
     f12:	21 96       	adiw	r28, 0x01	; 1
     f14:	ce 15       	cp	r28, r14
     f16:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
     f18:	b1 f7       	brne	.-20     	; 0xf06 <MENU_printMenu+0x2c>
     f1a:	d0 92 e8 03 	sts	0x03E8, r13
     f1e:	c0 92 e7 03 	sts	0x03E7, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
     f22:	10 92 e3 03 	sts	0x03E3, r1
     f26:	10 92 e2 03 	sts	0x03E2, r1
	
	currentPosition = 0;
     f2a:	f6 01       	movw	r30, r12
     f2c:	84 81       	ldd	r24, Z+4	; 0x04
     f2e:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
     f30:	90 93 e6 03 	sts	0x03E6, r25
     f34:	80 93 e5 03 	sts	0x03E5, r24
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	1f 91       	pop	r17
}
     f3e:	0f 91       	pop	r16
     f40:	ff 90       	pop	r15
     f42:	ef 90       	pop	r14
     f44:	df 90       	pop	r13
     f46:	cf 90       	pop	r12
     f48:	08 95       	ret

00000f4a <MENU_moveUp>:
     f4a:	20 91 e2 03 	lds	r18, 0x03E2
     f4e:	30 91 e3 03 	lds	r19, 0x03E3
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
     f52:	12 16       	cp	r1, r18
     f54:	13 06       	cpc	r1, r19
     f56:	bc f4       	brge	.+46     	; 0xf86 <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
     f58:	c9 01       	movw	r24, r18
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	90 93 e3 03 	sts	0x03E3, r25
     f60:	80 93 e2 03 	sts	0x03E2, r24
		currItem = currentMenu->children[currentPosition];
     f64:	e0 91 e7 03 	lds	r30, 0x03E7
     f68:	f0 91 e8 03 	lds	r31, 0x03E8
     f6c:	2f 5f       	subi	r18, 0xFF	; 255
     f6e:	3f 4f       	sbci	r19, 0xFF	; 255
     f70:	22 0f       	add	r18, r18
     f72:	33 1f       	adc	r19, r19
     f74:	e2 0f       	add	r30, r18
     f76:	f3 1f       	adc	r31, r19
     f78:	20 81       	ld	r18, Z
     f7a:	31 81       	ldd	r19, Z+1	; 0x01
     f7c:	30 93 e6 03 	sts	0x03E6, r19
     f80:	20 93 e5 03 	sts	0x03E5, r18
		OLED_moveArrow(currentPosition);
     f84:	43 c1       	rjmp	.+646    	; 0x120c <OLED_moveArrow>
     f86:	08 95       	ret

00000f88 <MENU_moveDown>:
     f88:	e0 91 e7 03 	lds	r30, 0x03E7
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
     f8c:	f0 91 e8 03 	lds	r31, 0x03E8
     f90:	20 91 e2 03 	lds	r18, 0x03E2
     f94:	30 91 e3 03 	lds	r19, 0x03E3
     f98:	82 81       	ldd	r24, Z+2	; 0x02
     f9a:	93 81       	ldd	r25, Z+3	; 0x03
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	28 17       	cp	r18, r24
     fa0:	39 07       	cpc	r19, r25
     fa2:	a4 f4       	brge	.+40     	; 0xfcc <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
     fa4:	c9 01       	movw	r24, r18
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	90 93 e3 03 	sts	0x03E3, r25
     fac:	80 93 e2 03 	sts	0x03E2, r24
		currItem = currentMenu->children[currentPosition];
     fb0:	2d 5f       	subi	r18, 0xFD	; 253
     fb2:	3f 4f       	sbci	r19, 0xFF	; 255
     fb4:	22 0f       	add	r18, r18
     fb6:	33 1f       	adc	r19, r19
     fb8:	e2 0f       	add	r30, r18
     fba:	f3 1f       	adc	r31, r19
     fbc:	20 81       	ld	r18, Z
     fbe:	31 81       	ldd	r19, Z+1	; 0x01
     fc0:	30 93 e6 03 	sts	0x03E6, r19
     fc4:	20 93 e5 03 	sts	0x03E5, r18
		OLED_moveArrow(currentPosition);
     fc8:	21 c1       	rjmp	.+578    	; 0x120c <OLED_moveArrow>
     fca:	08 95       	ret
     fcc:	10 92 e3 03 	sts	0x03E3, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
     fd0:	10 92 e2 03 	sts	0x03E2, r1
     fd4:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
     fd6:	95 81       	ldd	r25, Z+5	; 0x05
     fd8:	90 93 e6 03 	sts	0x03E6, r25
     fdc:	80 93 e5 03 	sts	0x03E5, r24
     fe0:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	13 c1       	rjmp	.+550    	; 0x120c <OLED_moveArrow>
     fe6:	08 95       	ret

00000fe8 <MENU_moveLeft>:
     fe8:	e0 91 e7 03 	lds	r30, 0x03E7
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
     fec:	f0 91 e8 03 	lds	r31, 0x03E8
     ff0:	84 89       	ldd	r24, Z+20	; 0x14
     ff2:	95 89       	ldd	r25, Z+21	; 0x15
     ff4:	00 97       	sbiw	r24, 0x00	; 0
     ff6:	21 f0       	breq	.+8      	; 0x1000 <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
     ff8:	fc 01       	movw	r30, r24
     ffa:	62 81       	ldd	r22, Z+2	; 0x02
     ffc:	73 81       	ldd	r23, Z+3	; 0x03
     ffe:	6d cf       	rjmp	.-294    	; 0xeda <MENU_printMenu>
    1000:	08 95       	ret

00001002 <MENU_reactivate>:
    1002:	80 91 e7 03 	lds	r24, 0x03E7
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
    1006:	90 91 e8 03 	lds	r25, 0x03E8
    100a:	fc 01       	movw	r30, r24
    100c:	62 81       	ldd	r22, Z+2	; 0x02
    100e:	73 81       	ldd	r23, Z+3	; 0x03
    1010:	64 df       	rcall	.-312    	; 0xeda <MENU_printMenu>
    1012:	18 c0       	rjmp	.+48     	; 0x1044 <MENU_waitForInput>
	MENU_waitForInput();
    1014:	08 95       	ret

00001016 <MENU_moveRight>:
    1016:	e0 91 e5 03 	lds	r30, 0x03E5
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
    101a:	f0 91 e6 03 	lds	r31, 0x03E6
    101e:	86 81       	ldd	r24, Z+6	; 0x06
    1020:	97 81       	ldd	r25, Z+7	; 0x07
    1022:	89 2b       	or	r24, r25
    1024:	39 f0       	breq	.+14     	; 0x1034 <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
    1026:	84 81       	ldd	r24, Z+4	; 0x04
    1028:	95 81       	ldd	r25, Z+5	; 0x05
    102a:	fc 01       	movw	r30, r24
    102c:	62 81       	ldd	r22, Z+2	; 0x02
    102e:	73 81       	ldd	r23, Z+3	; 0x03
    1030:	54 cf       	rjmp	.-344    	; 0xeda <MENU_printMenu>
    1032:	08 95       	ret
    1034:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
    1036:	f3 85       	ldd	r31, Z+11	; 0x0b
    1038:	e0 2d       	mov	r30, r0
    103a:	30 97       	sbiw	r30, 0x00	; 0
    103c:	11 f0       	breq	.+4      	; 0x1042 <MENU_moveRight+0x2c>
    103e:	09 95       	icall
	{
		currItem->functionPtr();
    1040:	e0 cf       	rjmp	.-64     	; 0x1002 <MENU_reactivate>
		MENU_reactivate();
    1042:	08 95       	ret

00001044 <MENU_waitForInput>:
    1044:	80 91 e2 03 	lds	r24, 0x03E2
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
    1048:	90 91 e3 03 	lds	r25, 0x03E3
    104c:	df d0       	rcall	.+446    	; 0x120c <OLED_moveArrow>
    104e:	80 91 e4 03 	lds	r24, 0x03E4
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    1052:	88 23       	and	r24, r24
    1054:	f9 f0       	breq	.+62     	; 0x1094 <MENU_waitForInput+0x50>
    1056:	5c dd       	rcall	.-1352   	; 0xb10 <JOY_getDirection>
	{
		currDir = JOY_getDirection();
    1058:	82 30       	cpi	r24, 0x02	; 2
    105a:	71 f0       	breq	.+28     	; 0x1078 <MENU_waitForInput+0x34>
		switch(currDir){
    105c:	18 f4       	brcc	.+6      	; 0x1064 <MENU_waitForInput+0x20>
    105e:	81 30       	cpi	r24, 0x01	; 1
    1060:	49 f0       	breq	.+18     	; 0x1074 <MENU_waitForInput+0x30>
    1062:	0b c0       	rjmp	.+22     	; 0x107a <MENU_waitForInput+0x36>
    1064:	83 30       	cpi	r24, 0x03	; 3
    1066:	21 f0       	breq	.+8      	; 0x1070 <MENU_waitForInput+0x2c>
    1068:	84 30       	cpi	r24, 0x04	; 4
    106a:	39 f4       	brne	.+14     	; 0x107a <MENU_waitForInput+0x36>
    106c:	bd df       	rcall	.-134    	; 0xfe8 <MENU_moveLeft>
    106e:	05 c0       	rjmp	.+10     	; 0x107a <MENU_waitForInput+0x36>
			case LEFT:
			MENU_moveLeft();
    1070:	d2 df       	rcall	.-92     	; 0x1016 <MENU_moveRight>
    1072:	03 c0       	rjmp	.+6      	; 0x107a <MENU_waitForInput+0x36>
			break;
    1074:	6a df       	rcall	.-300    	; 0xf4a <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
    1076:	01 c0       	rjmp	.+2      	; 0x107a <MENU_waitForInput+0x36>
    1078:	87 df       	rcall	.-242    	; 0xf88 <MENU_moveDown>
			break;
    107a:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
    107c:	8f e7       	ldi	r24, 0x7F	; 127
    107e:	94 e0       	ldi	r25, 0x04	; 4
			break;
    1080:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
    1082:	80 40       	sbci	r24, 0x00	; 0
    1084:	90 40       	sbci	r25, 0x00	; 0
    1086:	e1 f7       	brne	.-8      	; 0x1080 <MENU_waitForInput+0x3c>
    1088:	00 c0       	rjmp	.+0      	; 0x108a <MENU_waitForInput+0x46>
    108a:	00 00       	nop
    108c:	80 91 e4 03 	lds	r24, 0x03E4
    1090:	81 11       	cpse	r24, r1
    1092:	e1 cf       	rjmp	.-62     	; 0x1056 <MENU_waitForInput+0x12>
    1094:	08 95       	ret

00001096 <MENU_activate>:
    1096:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    1098:	80 93 e4 03 	sts	0x03E4, r24
    109c:	33 de       	rcall	.-922    	; 0xd04 <MENU_buildMenus>
    109e:	80 91 eb 03 	lds	r24, 0x03EB
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
    10a2:	90 91 ec 03 	lds	r25, 0x03EC
    10a6:	fc 01       	movw	r30, r24
    10a8:	62 81       	ldd	r22, Z+2	; 0x02
    10aa:	73 81       	ldd	r23, Z+3	; 0x03
    10ac:	16 df       	rcall	.-468    	; 0xeda <MENU_printMenu>
    10ae:	ca cf       	rjmp	.-108    	; 0x1044 <MENU_waitForInput>
    10b0:	08 95       	ret

000010b2 <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
    10b2:	26 2f       	mov	r18, r22
    10b4:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
    10b6:	75 95       	asr	r23
    10b8:	67 95       	ror	r22
    10ba:	75 95       	asr	r23
    10bc:	67 95       	ror	r22
    10be:	75 95       	asr	r23
    10c0:	67 95       	ror	r22
    10c2:	75 95       	asr	r23
    10c4:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
    10c6:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
    10c8:	80 55       	subi	r24, 0x50	; 80
    10ca:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
    10cc:	e0 91 12 01 	lds	r30, 0x0112
    10d0:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10d4:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
    10d6:	e0 91 12 01 	lds	r30, 0x0112
    10da:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10de:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
    10e0:	e0 91 12 01 	lds	r30, 0x0112
    10e4:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10e8:	60 83       	st	Z, r22
    10ea:	08 95       	ret

000010ec <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
    10ec:	1f 93       	push	r17
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	c1 e0       	ldi	r28, 0x01	; 1
    10f4:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    10fa:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
    10fc:	60 e0       	ldi	r22, 0x00	; 0
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	d8 df       	rcall	.-80     	; 0x10b2 <OLED_goto>
    1102:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1104:	e0 91 10 01 	lds	r30, 0x0110
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    1108:	f0 91 11 01 	lds	r31, 0x0111
    110c:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    110e:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1110:	80 38       	cpi	r24, 0x80	; 128
    1112:	c1 f7       	brne	.-16     	; 0x1104 <OLED_clear+0x18>
    1114:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1116:	9d 2f       	mov	r25, r29
    1118:	21 96       	adiw	r28, 0x01	; 1
    111a:	c9 30       	cpi	r28, 0x09	; 9
    111c:	d1 05       	cpc	r29, r1
    111e:	71 f7       	brne	.-36     	; 0x10fc <OLED_clear+0x10>
    1120:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    1122:	cf 91       	pop	r28
    1124:	1f 91       	pop	r17
    1126:	08 95       	ret

00001128 <OLED_printCharacter>:
    1128:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	22 0f       	add	r18, r18
    1130:	33 1f       	adc	r19, r19
    1132:	22 0f       	add	r18, r18
    1134:	33 1f       	adc	r19, r19
    1136:	22 0f       	add	r18, r18
    1138:	33 1f       	adc	r19, r19
    113a:	80 e0       	ldi	r24, 0x00	; 0
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	20 59       	subi	r18, 0x90	; 144
    1140:	3f 4f       	sbci	r19, 0xFF	; 255
    1142:	f9 01       	movw	r30, r18
    1144:	e8 0f       	add	r30, r24
    1146:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
    1148:	e4 91       	lpm	r30, Z
    114a:	a0 91 10 01 	lds	r26, 0x0110
    114e:	b0 91 11 01 	lds	r27, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1152:	ec 93       	st	X, r30
    1154:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
    1156:	88 30       	cpi	r24, 0x08	; 8
    1158:	91 05       	cpc	r25, r1
    115a:	99 f7       	brne	.-26     	; 0x1142 <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
    115c:	08 95       	ret

0000115e <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
    1166:	10 e0       	ldi	r17, 0x00	; 0
    1168:	06 c0       	rjmp	.+12     	; 0x1176 <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
    116a:	fe 01       	movw	r30, r28
    116c:	e8 0f       	add	r30, r24
    116e:	f9 1f       	adc	r31, r25
    1170:	80 81       	ld	r24, Z
    1172:	da df       	rcall	.-76     	; 0x1128 <OLED_printCharacter>
    1174:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
    1176:	81 2f       	mov	r24, r17
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	fe 01       	movw	r30, r28
    117c:	01 90       	ld	r0, Z+
    117e:	00 20       	and	r0, r0
    1180:	e9 f7       	brne	.-6      	; 0x117c <OLED_printString+0x1e>
    1182:	31 97       	sbiw	r30, 0x01	; 1
    1184:	ec 1b       	sub	r30, r28
    1186:	fd 0b       	sbc	r31, r29
    1188:	8e 17       	cp	r24, r30
    118a:	9f 07       	cpc	r25, r31
    118c:	70 f3       	brcs	.-36     	; 0x116a <OLED_printString+0xc>
    118e:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
    1190:	cf 91       	pop	r28
    1192:	1f 91       	pop	r17
    1194:	08 95       	ret

00001196 <OLED_printArrow>:
    1196:	e0 91 10 01 	lds	r30, 0x0110
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
    119a:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    119e:	88 e1       	ldi	r24, 0x18	; 24
    11a0:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    11a2:	e0 91 10 01 	lds	r30, 0x0110
    11a6:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    11aa:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
    11ac:	e0 91 10 01 	lds	r30, 0x0110
    11b0:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    11b4:	9e e7       	ldi	r25, 0x7E	; 126
    11b6:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
    11b8:	e0 91 10 01 	lds	r30, 0x0110
    11bc:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    11c0:	9c e3       	ldi	r25, 0x3C	; 60
    11c2:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    11c4:	e0 91 10 01 	lds	r30, 0x0110
    11c8:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    11cc:	80 83       	st	Z, r24
    11ce:	08 95       	ret

000011d0 <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    11d0:	1f 93       	push	r17
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	c1 e0       	ldi	r28, 0x01	; 1
    11d8:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    11de:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	66 df       	rcall	.-308    	; 0x10b2 <OLED_goto>
    11e6:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    11e8:	e0 91 10 01 	lds	r30, 0x0110
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    11ec:	f0 91 11 01 	lds	r31, 0x0111
    11f0:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    11f2:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    11f4:	85 30       	cpi	r24, 0x05	; 5
    11f6:	c1 f7       	brne	.-16     	; 0x11e8 <OLED_clearArrow+0x18>
    11f8:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    11fa:	9d 2f       	mov	r25, r29
    11fc:	21 96       	adiw	r28, 0x01	; 1
    11fe:	c9 30       	cpi	r28, 0x09	; 9
    1200:	d1 05       	cpc	r29, r1
    1202:	71 f7       	brne	.-36     	; 0x11e0 <OLED_clearArrow+0x10>
    1204:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    1206:	cf 91       	pop	r28
    1208:	1f 91       	pop	r17
    120a:	08 95       	ret

0000120c <OLED_moveArrow>:
    120c:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    120e:	df 93       	push	r29
    1210:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
    1212:	de df       	rcall	.-68     	; 0x11d0 <OLED_clearArrow>
    1214:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
    1216:	70 e0       	ldi	r23, 0x00	; 0
    1218:	ce 01       	movw	r24, r28
    121a:	4b df       	rcall	.-362    	; 0x10b2 <OLED_goto>
    121c:	bc df       	rcall	.-136    	; 0x1196 <OLED_printArrow>
    121e:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
    1220:	cf 91       	pop	r28
    1222:	08 95       	ret

00001224 <OLED_setContrast>:
}
    1224:	e0 91 12 01 	lds	r30, 0x0112
    1228:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    122c:	91 e8       	ldi	r25, 0x81	; 129
    122e:	90 83       	st	Z, r25
void OLED_setContrast(uint8_t contrast)
{
	// activate contrast contol
	OLED_writeByteToOLED(oled_cmd, 0x81);
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
    1230:	e0 91 12 01 	lds	r30, 0x0112
    1234:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1238:	80 83       	st	Z, r24
    123a:	08 95       	ret

0000123c <OLED_fadeIn>:
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
}

void OLED_fadeIn(void)
{
    123c:	cf 93       	push	r28
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    123e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		OLED_setContrast(i);
    1240:	8c 2f       	mov	r24, r28
    1242:	f0 df       	rcall	.-32     	; 0x1224 <OLED_setContrast>
    1244:	83 e3       	ldi	r24, 0x33	; 51
    1246:	93 e1       	ldi	r25, 0x13	; 19
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	f1 f7       	brne	.-4      	; 0x1248 <OLED_fadeIn+0xc>
    124c:	cf 5f       	subi	r28, 0xFF	; 255
}

void OLED_fadeIn(void)
{
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    124e:	cf 3f       	cpi	r28, 0xFF	; 255
    1250:	b9 f7       	brne	.-18     	; 0x1240 <OLED_fadeIn+0x4>
    1252:	cf 91       	pop	r28
	{
		OLED_setContrast(i);
		_delay_ms(4);
	}
}
    1254:	08 95       	ret

00001256 <OLED_splashScreen>:
    1256:	2f ef       	ldi	r18, 0xFF	; 255
    1258:	8f ef       	ldi	r24, 0xFF	; 255
    125a:	92 e0       	ldi	r25, 0x02	; 2
    125c:	21 50       	subi	r18, 0x01	; 1
    125e:	80 40       	sbci	r24, 0x00	; 0
    1260:	90 40       	sbci	r25, 0x00	; 0
    1262:	e1 f7       	brne	.-8      	; 0x125c <OLED_splashScreen+0x6>
    1264:	00 c0       	rjmp	.+0      	; 0x1266 <OLED_splashScreen+0x10>
    1266:	00 c0       	rjmp	.+0      	; 0x1268 <OLED_splashScreen+0x12>
}

void OLED_splashScreen(void)
{
	_delay_ms(200);
	OLED_setContrast(0);
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	dc df       	rcall	.-72     	; 0x1224 <OLED_setContrast>
    126c:	64 e0       	ldi	r22, 0x04	; 4
	OLED_goto(2,4);
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	82 e0       	ldi	r24, 0x02	; 2
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	1e df       	rcall	.-452    	; 0x10b2 <OLED_goto>
    1276:	84 e8       	ldi	r24, 0x84	; 132
    1278:	93 e0       	ldi	r25, 0x03	; 3
	OLED_printString("Group 46 Soft");
    127a:	71 df       	rcall	.-286    	; 0x115e <OLED_printString>
    127c:	df df       	rcall	.-66     	; 0x123c <OLED_fadeIn>
    127e:	2f ef       	ldi	r18, 0xFF	; 255
    1280:	8f e7       	ldi	r24, 0x7F	; 127
	OLED_fadeIn();
    1282:	97 e0       	ldi	r25, 0x07	; 7
    1284:	21 50       	subi	r18, 0x01	; 1
    1286:	80 40       	sbci	r24, 0x00	; 0
    1288:	90 40       	sbci	r25, 0x00	; 0
    128a:	e1 f7       	brne	.-8      	; 0x1284 <OLED_splashScreen+0x2e>
    128c:	00 c0       	rjmp	.+0      	; 0x128e <OLED_splashScreen+0x38>
    128e:	00 00       	nop
    1290:	80 e0       	ldi	r24, 0x00	; 0
    1292:	c8 df       	rcall	.-112    	; 0x1224 <OLED_setContrast>
    1294:	6c e1       	ldi	r22, 0x1C	; 28
    1296:	70 e0       	ldi	r23, 0x00	; 0
	_delay_ms(500);
	OLED_setContrast(0);
    1298:	84 e0       	ldi	r24, 0x04	; 4
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	0a df       	rcall	.-492    	; 0x10b2 <OLED_goto>
	OLED_goto(4,28);
    129e:	82 e9       	ldi	r24, 0x92	; 146
    12a0:	93 e0       	ldi	r25, 0x03	; 3
    12a2:	5d df       	rcall	.-326    	; 0x115e <OLED_printString>
    12a4:	68 e1       	ldi	r22, 0x18	; 24
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	85 e0       	ldi	r24, 0x05	; 5
	OLED_printString("proudly");
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	02 df       	rcall	.-508    	; 0x10b2 <OLED_goto>
    12ae:	8a e9       	ldi	r24, 0x9A	; 154
    12b0:	93 e0       	ldi	r25, 0x03	; 3
	OLED_goto(5,24);	
    12b2:	55 df       	rcall	.-342    	; 0x115e <OLED_printString>
    12b4:	c3 df       	rcall	.-122    	; 0x123c <OLED_fadeIn>
    12b6:	2f ef       	ldi	r18, 0xFF	; 255
    12b8:	8f e7       	ldi	r24, 0x7F	; 127
    12ba:	97 e0       	ldi	r25, 0x07	; 7
    12bc:	21 50       	subi	r18, 0x01	; 1
	OLED_printString("presents");
    12be:	80 40       	sbci	r24, 0x00	; 0
    12c0:	90 40       	sbci	r25, 0x00	; 0
    12c2:	e1 f7       	brne	.-8      	; 0x12bc <OLED_splashScreen+0x66>
    12c4:	00 c0       	rjmp	.+0      	; 0x12c6 <OLED_splashScreen+0x70>
	OLED_fadeIn();
    12c6:	00 00       	nop
    12c8:	11 df       	rcall	.-478    	; 0x10ec <OLED_clear>
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	ab df       	rcall	.-170    	; 0x1224 <OLED_setContrast>
    12ce:	6c e1       	ldi	r22, 0x1C	; 28
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	83 e0       	ldi	r24, 0x03	; 3
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	ed de       	rcall	.-550    	; 0x10b2 <OLED_goto>
    12d8:	83 ea       	ldi	r24, 0xA3	; 163
    12da:	93 e0       	ldi	r25, 0x03	; 3
	_delay_ms(500);
	
	OLED_clear();
    12dc:	40 df       	rcall	.-384    	; 0x115e <OLED_printString>
    12de:	ae df       	rcall	.-164    	; 0x123c <OLED_fadeIn>
	OLED_setContrast(0);
    12e0:	2f ef       	ldi	r18, 0xFF	; 255
    12e2:	8f ef       	ldi	r24, 0xFF	; 255
    12e4:	9e e0       	ldi	r25, 0x0E	; 14
	OLED_goto(3, 28);
    12e6:	21 50       	subi	r18, 0x01	; 1
    12e8:	80 40       	sbci	r24, 0x00	; 0
    12ea:	90 40       	sbci	r25, 0x00	; 0
    12ec:	e1 f7       	brne	.-8      	; 0x12e6 <OLED_splashScreen+0x90>
    12ee:	00 c0       	rjmp	.+0      	; 0x12f0 <OLED_splashScreen+0x9a>
    12f0:	00 00       	nop
	OLED_printString("FIFA 18");
    12f2:	fc de       	rcall	.-520    	; 0x10ec <OLED_clear>
    12f4:	80 e5       	ldi	r24, 0x50	; 80
    12f6:	96 cf       	rjmp	.-212    	; 0x1224 <OLED_setContrast>
    12f8:	08 95       	ret

000012fa <OLED_init>:
	OLED_fadeIn();
    12fa:	e0 91 12 01 	lds	r30, 0x0112
    12fe:	f0 91 13 01 	lds	r31, 0x0113
    1302:	8e ea       	ldi	r24, 0xAE	; 174
    1304:	80 83       	st	Z, r24
    1306:	e0 91 12 01 	lds	r30, 0x0112
    130a:	f0 91 13 01 	lds	r31, 0x0113
    130e:	81 ea       	ldi	r24, 0xA1	; 161
	_delay_ms(1000);
	
	// clean up
	OLED_clear(); // wipe screen
    1310:	80 83       	st	Z, r24
    1312:	e0 91 12 01 	lds	r30, 0x0112
	OLED_setContrast(0x50); // back to standard contrast
    1316:	f0 91 13 01 	lds	r31, 0x0113
    131a:	8a ed       	ldi	r24, 0xDA	; 218
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    131c:	80 83       	st	Z, r24
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
    131e:	e0 91 12 01 	lds	r30, 0x0112
    1322:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1326:	82 e1       	ldi	r24, 0x12	; 18
    1328:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    132a:	e0 91 12 01 	lds	r30, 0x0112
    132e:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1332:	88 ec       	ldi	r24, 0xC8	; 200
    1334:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    1336:	e0 91 12 01 	lds	r30, 0x0112
    133a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    133e:	88 ea       	ldi	r24, 0xA8	; 168
    1340:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    1342:	e0 91 12 01 	lds	r30, 0x0112
    1346:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    134a:	8f e3       	ldi	r24, 0x3F	; 63
    134c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    134e:	e0 91 12 01 	lds	r30, 0x0112
    1352:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1356:	85 ed       	ldi	r24, 0xD5	; 213
    1358:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
    135a:	e0 91 12 01 	lds	r30, 0x0112
    135e:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1362:	80 e8       	ldi	r24, 0x80	; 128
    1364:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    1366:	e0 91 12 01 	lds	r30, 0x0112
    136a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    136e:	81 e8       	ldi	r24, 0x81	; 129
    1370:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    1372:	e0 91 12 01 	lds	r30, 0x0112
    1376:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    137a:	80 e5       	ldi	r24, 0x50	; 80
    137c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    137e:	e0 91 12 01 	lds	r30, 0x0112
    1382:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1386:	89 ed       	ldi	r24, 0xD9	; 217
    1388:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
    138a:	e0 91 12 01 	lds	r30, 0x0112
    138e:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1392:	81 e2       	ldi	r24, 0x21	; 33
    1394:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    1396:	e0 91 12 01 	lds	r30, 0x0112
    139a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    139e:	80 e2       	ldi	r24, 0x20	; 32
    13a0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    13a2:	e0 91 12 01 	lds	r30, 0x0112
    13a6:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13aa:	82 e0       	ldi	r24, 0x02	; 2
    13ac:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    13ae:	e0 91 12 01 	lds	r30, 0x0112
    13b2:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13b6:	8b ed       	ldi	r24, 0xDB	; 219
    13b8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    13ba:	e0 91 12 01 	lds	r30, 0x0112
    13be:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13c2:	80 e3       	ldi	r24, 0x30	; 48
    13c4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    13c6:	e0 91 12 01 	lds	r30, 0x0112
    13ca:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13ce:	8d ea       	ldi	r24, 0xAD	; 173
    13d0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    13d2:	e0 91 12 01 	lds	r30, 0x0112
    13d6:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13da:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    13dc:	e0 91 12 01 	lds	r30, 0x0112
    13e0:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13e4:	84 ea       	ldi	r24, 0xA4	; 164
    13e6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    13e8:	e0 91 12 01 	lds	r30, 0x0112
    13ec:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13f0:	86 ea       	ldi	r24, 0xA6	; 166
    13f2:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    13f4:	e0 91 12 01 	lds	r30, 0x0112
    13f8:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13fc:	8f ea       	ldi	r24, 0xAF	; 175
    13fe:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    1400:	75 de       	rcall	.-790    	; 0x10ec <OLED_clear>
    1402:	29 cf       	rjmp	.-430    	; 0x1256 <OLED_splashScreen>
	OLED_splashScreen();
    1404:	08 95       	ret

00001406 <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    1406:	10 92 ef 03 	sts	0x03EF, r1
	currentSliPosition.L_abs = 0;
    140a:	10 92 f0 03 	sts	0x03F0, r1
	currentSliPosition.R_per = 0;
    140e:	10 92 f1 03 	sts	0x03F1, r1
	currentSliPosition.L_per = 0;
    1412:	10 92 f2 03 	sts	0x03F2, r1
    1416:	08 95       	ret

00001418 <SPI_init>:
#define UNSELECT_CAN_CONTROLLER_SLAVE set_bit(PORTB, SS_CAN_CONTROLLER_PIN)


void SPI_init()
{
	printf("\n\nInitializing SPI\n");
    1418:	8b ea       	ldi	r24, 0xAB	; 171
    141a:	93 e0       	ldi	r25, 0x03	; 3
    141c:	0f d2       	rcall	.+1054   	; 0x183c <puts>
    141e:	80 eb       	ldi	r24, 0xB0	; 176
	// Set _SS, MOSI and SCK output, all others input
	//DDRB = (1<<SS_CAN_CONTROLLER_PIN) | (1<<DDB5) | (1<<DDB7);
	DDR_SPI = (1<<SS_CAN_CONTROLLER_PIN_MODE) | (1<<MOSI_PIN) | (1<<SCK_PIN);
    1420:	87 bb       	out	0x17, r24	; 23
    1422:	80 e5       	ldi	r24, 0x50	; 80

 	//Enable SPI, Master, set clock rate fck/16
 	//SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);

	// Enable SPI, Master, set clock rate fck/4
	SPCR = (1<<SPE) | (1<<MSTR);
    1424:	8d b9       	out	0x0d, r24	; 13
    1426:	81 e0       	ldi	r24, 0x01	; 1

	// clock rate fck/2
	SPSR = (1<<SPI2X);
    1428:	8e b9       	out	0x0e, r24	; 14
    142a:	c4 9a       	sbi	0x18, 4	; 24

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORT_SPI, SS_CAN_CONTROLLER_PIN);
    142c:	08 95       	ret

0000142e <SPI_send>:
    142e:	8f b9       	out	0x0f, r24	; 15
{
	// Start transmission
	SPDR = cData;

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    1430:	77 9b       	sbis	0x0e, 7	; 14
    1432:	fe cf       	rjmp	.-4      	; 0x1430 <SPI_send+0x2>
}
    1434:	08 95       	ret

00001436 <SPI_receive>:

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    1436:	8f ef       	ldi	r24, 0xFF	; 255
    1438:	fa df       	rcall	.-12     	; 0x142e <SPI_send>
    143a:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    143c:	fe cf       	rjmp	.-4      	; 0x143a <SPI_receive+0x4>
    143e:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    1440:	08 95       	ret

00001442 <SPI_activateSlave>:

	return data;
}
    1442:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    1446:	c4 98       	cbi	0x18, 4	; 24
    1448:	08 95       	ret

0000144a <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    144a:	81 11       	cpse	r24, r1
    144c:	01 c0       	rjmp	.+2      	; 0x1450 <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    144e:	c4 9a       	sbi	0x18, 4	; 24
    1450:	08 95       	ret

00001452 <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1452:	5d 9b       	sbis	0x0b, 5	; 11
    1454:	fe cf       	rjmp	.-4      	; 0x1452 <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    1456:	8c b9       	out	0x0c, r24	; 12
    1458:	08 95       	ret

0000145a <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    145a:	5f 9b       	sbis	0x0b, 7	; 11
    145c:	fe cf       	rjmp	.-4      	; 0x145a <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    145e:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
    1460:	08 95       	ret

00001462 <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    1462:	ef 92       	push	r14
    1464:	ff 92       	push	r15
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    146a:	bb 27       	eor	r27, r27
    146c:	a1 2f       	mov	r26, r17
    146e:	90 2f       	mov	r25, r16
    1470:	8f 2d       	mov	r24, r15
    1472:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    1474:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1476:	88 e1       	ldi	r24, 0x18	; 24
    1478:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    147a:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    147c:	8e e8       	ldi	r24, 0x8E	; 142
    147e:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    1480:	6d e2       	ldi	r22, 0x2D	; 45
    1482:	7a e0       	ldi	r23, 0x0A	; 10
    1484:	89 e2       	ldi	r24, 0x29	; 41
    1486:	9a e0       	ldi	r25, 0x0A	; 10
    1488:	79 d1       	rcall	.+754    	; 0x177c <fdevopen>
    148a:	1f 91       	pop	r17
    148c:	0f 91       	pop	r16
    148e:	ff 90       	pop	r15
    1490:	ef 90       	pop	r14
    1492:	08 95       	ret

00001494 <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    1494:	9b 01       	movw	r18, r22
	
	switch(channel){
    1496:	82 30       	cpi	r24, 0x02	; 2
    1498:	69 f0       	breq	.+26     	; 0x14b4 <ADC_request+0x20>
    149a:	18 f4       	brcc	.+6      	; 0x14a2 <ADC_request+0xe>
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	31 f0       	breq	.+12     	; 0x14ac <ADC_request+0x18>
    14a0:	15 c0       	rjmp	.+42     	; 0x14cc <ADC_request+0x38>
    14a2:	83 30       	cpi	r24, 0x03	; 3
    14a4:	59 f0       	breq	.+22     	; 0x14bc <ADC_request+0x28>
    14a6:	84 30       	cpi	r24, 0x04	; 4
    14a8:	69 f0       	breq	.+26     	; 0x14c4 <ADC_request+0x30>
    14aa:	10 c0       	rjmp	.+32     	; 0x14cc <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    14ac:	64 e0       	ldi	r22, 0x04	; 4
    14ae:	c9 01       	movw	r24, r18
    14b0:	6a c9       	rjmp	.-3372   	; 0x786 <saveToAddress>
    14b2:	08 95       	ret
			break;
    14b4:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    14b6:	c9 01       	movw	r24, r18
    14b8:	66 c9       	rjmp	.-3380   	; 0x786 <saveToAddress>
    14ba:	08 95       	ret
    14bc:	66 e0       	ldi	r22, 0x06	; 6
			break;
    14be:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    14c0:	62 c9       	rjmp	.-3388   	; 0x786 <saveToAddress>
    14c2:	08 95       	ret
    14c4:	67 e0       	ldi	r22, 0x07	; 7
    14c6:	c9 01       	movw	r24, r18
			break;
    14c8:	5e c9       	rjmp	.-3396   	; 0x786 <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    14ca:	08 95       	ret
    14cc:	8e eb       	ldi	r24, 0xBE	; 190
    14ce:	93 e0       	ldi	r25, 0x03	; 3
    14d0:	9f 93       	push	r25
			break;
    14d2:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    14d4:	9d d1       	rcall	.+826    	; 0x1810 <printf>
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	08 95       	ret

000014dc <ADC_read>:
    14dc:	51 c9       	rjmp	.-3422   	; 0x780 <readFromAddress>
    14de:	08 95       	ret

000014e0 <__divmodhi4>:
			break;
    14e0:	97 fb       	bst	r25, 7
    14e2:	07 2e       	mov	r0, r23
    14e4:	16 f4       	brtc	.+4      	; 0x14ea <__divmodhi4+0xa>
    14e6:	00 94       	com	r0
    14e8:	06 d0       	rcall	.+12     	; 0x14f6 <__divmodhi4_neg1>
    14ea:	77 fd       	sbrc	r23, 7
    14ec:	08 d0       	rcall	.+16     	; 0x14fe <__divmodhi4_neg2>
    14ee:	0b d0       	rcall	.+22     	; 0x1506 <__udivmodhi4>
    14f0:	07 fc       	sbrc	r0, 7
    14f2:	05 d0       	rcall	.+10     	; 0x14fe <__divmodhi4_neg2>
    14f4:	3e f4       	brtc	.+14     	; 0x1504 <__divmodhi4_exit>

000014f6 <__divmodhi4_neg1>:
    14f6:	90 95       	com	r25
    14f8:	81 95       	neg	r24
    14fa:	9f 4f       	sbci	r25, 0xFF	; 255
    14fc:	08 95       	ret

000014fe <__divmodhi4_neg2>:
    14fe:	70 95       	com	r23
    1500:	61 95       	neg	r22
    1502:	7f 4f       	sbci	r23, 0xFF	; 255

00001504 <__divmodhi4_exit>:
    1504:	08 95       	ret

00001506 <__udivmodhi4>:
    1506:	aa 1b       	sub	r26, r26
    1508:	bb 1b       	sub	r27, r27
    150a:	51 e1       	ldi	r21, 0x11	; 17
    150c:	07 c0       	rjmp	.+14     	; 0x151c <__udivmodhi4_ep>

0000150e <__udivmodhi4_loop>:
    150e:	aa 1f       	adc	r26, r26
    1510:	bb 1f       	adc	r27, r27
    1512:	a6 17       	cp	r26, r22
    1514:	b7 07       	cpc	r27, r23
    1516:	10 f0       	brcs	.+4      	; 0x151c <__udivmodhi4_ep>
    1518:	a6 1b       	sub	r26, r22
    151a:	b7 0b       	sbc	r27, r23

0000151c <__udivmodhi4_ep>:
    151c:	88 1f       	adc	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	5a 95       	dec	r21
    1522:	a9 f7       	brne	.-22     	; 0x150e <__udivmodhi4_loop>
    1524:	80 95       	com	r24
    1526:	90 95       	com	r25
    1528:	bc 01       	movw	r22, r24
    152a:	cd 01       	movw	r24, r26
    152c:	08 95       	ret

0000152e <malloc>:
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	82 30       	cpi	r24, 0x02	; 2
    1534:	91 05       	cpc	r25, r1
    1536:	10 f4       	brcc	.+4      	; 0x153c <malloc+0xe>
    1538:	82 e0       	ldi	r24, 0x02	; 2
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	e0 91 f5 03 	lds	r30, 0x03F5
    1540:	f0 91 f6 03 	lds	r31, 0x03F6
    1544:	20 e0       	ldi	r18, 0x00	; 0
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	a0 e0       	ldi	r26, 0x00	; 0
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	30 97       	sbiw	r30, 0x00	; 0
    154e:	39 f1       	breq	.+78     	; 0x159e <malloc+0x70>
    1550:	40 81       	ld	r20, Z
    1552:	51 81       	ldd	r21, Z+1	; 0x01
    1554:	48 17       	cp	r20, r24
    1556:	59 07       	cpc	r21, r25
    1558:	b8 f0       	brcs	.+46     	; 0x1588 <malloc+0x5a>
    155a:	48 17       	cp	r20, r24
    155c:	59 07       	cpc	r21, r25
    155e:	71 f4       	brne	.+28     	; 0x157c <malloc+0x4e>
    1560:	82 81       	ldd	r24, Z+2	; 0x02
    1562:	93 81       	ldd	r25, Z+3	; 0x03
    1564:	10 97       	sbiw	r26, 0x00	; 0
    1566:	29 f0       	breq	.+10     	; 0x1572 <malloc+0x44>
    1568:	13 96       	adiw	r26, 0x03	; 3
    156a:	9c 93       	st	X, r25
    156c:	8e 93       	st	-X, r24
    156e:	12 97       	sbiw	r26, 0x02	; 2
    1570:	2c c0       	rjmp	.+88     	; 0x15ca <malloc+0x9c>
    1572:	90 93 f6 03 	sts	0x03F6, r25
    1576:	80 93 f5 03 	sts	0x03F5, r24
    157a:	27 c0       	rjmp	.+78     	; 0x15ca <malloc+0x9c>
    157c:	21 15       	cp	r18, r1
    157e:	31 05       	cpc	r19, r1
    1580:	31 f0       	breq	.+12     	; 0x158e <malloc+0x60>
    1582:	42 17       	cp	r20, r18
    1584:	53 07       	cpc	r21, r19
    1586:	18 f0       	brcs	.+6      	; 0x158e <malloc+0x60>
    1588:	a9 01       	movw	r20, r18
    158a:	db 01       	movw	r26, r22
    158c:	01 c0       	rjmp	.+2      	; 0x1590 <malloc+0x62>
    158e:	ef 01       	movw	r28, r30
    1590:	9a 01       	movw	r18, r20
    1592:	bd 01       	movw	r22, r26
    1594:	df 01       	movw	r26, r30
    1596:	02 80       	ldd	r0, Z+2	; 0x02
    1598:	f3 81       	ldd	r31, Z+3	; 0x03
    159a:	e0 2d       	mov	r30, r0
    159c:	d7 cf       	rjmp	.-82     	; 0x154c <malloc+0x1e>
    159e:	21 15       	cp	r18, r1
    15a0:	31 05       	cpc	r19, r1
    15a2:	f9 f0       	breq	.+62     	; 0x15e2 <malloc+0xb4>
    15a4:	28 1b       	sub	r18, r24
    15a6:	39 0b       	sbc	r19, r25
    15a8:	24 30       	cpi	r18, 0x04	; 4
    15aa:	31 05       	cpc	r19, r1
    15ac:	80 f4       	brcc	.+32     	; 0x15ce <malloc+0xa0>
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	9b 81       	ldd	r25, Y+3	; 0x03
    15b2:	61 15       	cp	r22, r1
    15b4:	71 05       	cpc	r23, r1
    15b6:	21 f0       	breq	.+8      	; 0x15c0 <malloc+0x92>
    15b8:	fb 01       	movw	r30, r22
    15ba:	93 83       	std	Z+3, r25	; 0x03
    15bc:	82 83       	std	Z+2, r24	; 0x02
    15be:	04 c0       	rjmp	.+8      	; 0x15c8 <malloc+0x9a>
    15c0:	90 93 f6 03 	sts	0x03F6, r25
    15c4:	80 93 f5 03 	sts	0x03F5, r24
    15c8:	fe 01       	movw	r30, r28
    15ca:	32 96       	adiw	r30, 0x02	; 2
    15cc:	44 c0       	rjmp	.+136    	; 0x1656 <malloc+0x128>
    15ce:	fe 01       	movw	r30, r28
    15d0:	e2 0f       	add	r30, r18
    15d2:	f3 1f       	adc	r31, r19
    15d4:	81 93       	st	Z+, r24
    15d6:	91 93       	st	Z+, r25
    15d8:	22 50       	subi	r18, 0x02	; 2
    15da:	31 09       	sbc	r19, r1
    15dc:	39 83       	std	Y+1, r19	; 0x01
    15de:	28 83       	st	Y, r18
    15e0:	3a c0       	rjmp	.+116    	; 0x1656 <malloc+0x128>
    15e2:	20 91 f3 03 	lds	r18, 0x03F3
    15e6:	30 91 f4 03 	lds	r19, 0x03F4
    15ea:	23 2b       	or	r18, r19
    15ec:	41 f4       	brne	.+16     	; 0x15fe <malloc+0xd0>
    15ee:	20 91 02 01 	lds	r18, 0x0102
    15f2:	30 91 03 01 	lds	r19, 0x0103
    15f6:	30 93 f4 03 	sts	0x03F4, r19
    15fa:	20 93 f3 03 	sts	0x03F3, r18
    15fe:	20 91 00 01 	lds	r18, 0x0100
    1602:	30 91 01 01 	lds	r19, 0x0101
    1606:	21 15       	cp	r18, r1
    1608:	31 05       	cpc	r19, r1
    160a:	41 f4       	brne	.+16     	; 0x161c <malloc+0xee>
    160c:	2d b7       	in	r18, 0x3d	; 61
    160e:	3e b7       	in	r19, 0x3e	; 62
    1610:	40 91 04 01 	lds	r20, 0x0104
    1614:	50 91 05 01 	lds	r21, 0x0105
    1618:	24 1b       	sub	r18, r20
    161a:	35 0b       	sbc	r19, r21
    161c:	e0 91 f3 03 	lds	r30, 0x03F3
    1620:	f0 91 f4 03 	lds	r31, 0x03F4
    1624:	e2 17       	cp	r30, r18
    1626:	f3 07       	cpc	r31, r19
    1628:	a0 f4       	brcc	.+40     	; 0x1652 <malloc+0x124>
    162a:	2e 1b       	sub	r18, r30
    162c:	3f 0b       	sbc	r19, r31
    162e:	28 17       	cp	r18, r24
    1630:	39 07       	cpc	r19, r25
    1632:	78 f0       	brcs	.+30     	; 0x1652 <malloc+0x124>
    1634:	ac 01       	movw	r20, r24
    1636:	4e 5f       	subi	r20, 0xFE	; 254
    1638:	5f 4f       	sbci	r21, 0xFF	; 255
    163a:	24 17       	cp	r18, r20
    163c:	35 07       	cpc	r19, r21
    163e:	48 f0       	brcs	.+18     	; 0x1652 <malloc+0x124>
    1640:	4e 0f       	add	r20, r30
    1642:	5f 1f       	adc	r21, r31
    1644:	50 93 f4 03 	sts	0x03F4, r21
    1648:	40 93 f3 03 	sts	0x03F3, r20
    164c:	81 93       	st	Z+, r24
    164e:	91 93       	st	Z+, r25
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <malloc+0x128>
    1652:	e0 e0       	ldi	r30, 0x00	; 0
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	cf 01       	movw	r24, r30
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	08 95       	ret

0000165e <free>:
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	00 97       	sbiw	r24, 0x00	; 0
    1664:	09 f4       	brne	.+2      	; 0x1668 <free+0xa>
    1666:	87 c0       	rjmp	.+270    	; 0x1776 <free+0x118>
    1668:	fc 01       	movw	r30, r24
    166a:	32 97       	sbiw	r30, 0x02	; 2
    166c:	13 82       	std	Z+3, r1	; 0x03
    166e:	12 82       	std	Z+2, r1	; 0x02
    1670:	c0 91 f5 03 	lds	r28, 0x03F5
    1674:	d0 91 f6 03 	lds	r29, 0x03F6
    1678:	20 97       	sbiw	r28, 0x00	; 0
    167a:	81 f4       	brne	.+32     	; 0x169c <free+0x3e>
    167c:	20 81       	ld	r18, Z
    167e:	31 81       	ldd	r19, Z+1	; 0x01
    1680:	28 0f       	add	r18, r24
    1682:	39 1f       	adc	r19, r25
    1684:	80 91 f3 03 	lds	r24, 0x03F3
    1688:	90 91 f4 03 	lds	r25, 0x03F4
    168c:	82 17       	cp	r24, r18
    168e:	93 07       	cpc	r25, r19
    1690:	79 f5       	brne	.+94     	; 0x16f0 <free+0x92>
    1692:	f0 93 f4 03 	sts	0x03F4, r31
    1696:	e0 93 f3 03 	sts	0x03F3, r30
    169a:	6d c0       	rjmp	.+218    	; 0x1776 <free+0x118>
    169c:	de 01       	movw	r26, r28
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	ae 17       	cp	r26, r30
    16a4:	bf 07       	cpc	r27, r31
    16a6:	50 f4       	brcc	.+20     	; 0x16bc <free+0x5e>
    16a8:	12 96       	adiw	r26, 0x02	; 2
    16aa:	4d 91       	ld	r20, X+
    16ac:	5c 91       	ld	r21, X
    16ae:	13 97       	sbiw	r26, 0x03	; 3
    16b0:	9d 01       	movw	r18, r26
    16b2:	41 15       	cp	r20, r1
    16b4:	51 05       	cpc	r21, r1
    16b6:	09 f1       	breq	.+66     	; 0x16fa <free+0x9c>
    16b8:	da 01       	movw	r26, r20
    16ba:	f3 cf       	rjmp	.-26     	; 0x16a2 <free+0x44>
    16bc:	b3 83       	std	Z+3, r27	; 0x03
    16be:	a2 83       	std	Z+2, r26	; 0x02
    16c0:	40 81       	ld	r20, Z
    16c2:	51 81       	ldd	r21, Z+1	; 0x01
    16c4:	84 0f       	add	r24, r20
    16c6:	95 1f       	adc	r25, r21
    16c8:	8a 17       	cp	r24, r26
    16ca:	9b 07       	cpc	r25, r27
    16cc:	71 f4       	brne	.+28     	; 0x16ea <free+0x8c>
    16ce:	8d 91       	ld	r24, X+
    16d0:	9c 91       	ld	r25, X
    16d2:	11 97       	sbiw	r26, 0x01	; 1
    16d4:	84 0f       	add	r24, r20
    16d6:	95 1f       	adc	r25, r21
    16d8:	02 96       	adiw	r24, 0x02	; 2
    16da:	91 83       	std	Z+1, r25	; 0x01
    16dc:	80 83       	st	Z, r24
    16de:	12 96       	adiw	r26, 0x02	; 2
    16e0:	8d 91       	ld	r24, X+
    16e2:	9c 91       	ld	r25, X
    16e4:	13 97       	sbiw	r26, 0x03	; 3
    16e6:	93 83       	std	Z+3, r25	; 0x03
    16e8:	82 83       	std	Z+2, r24	; 0x02
    16ea:	21 15       	cp	r18, r1
    16ec:	31 05       	cpc	r19, r1
    16ee:	29 f4       	brne	.+10     	; 0x16fa <free+0x9c>
    16f0:	f0 93 f6 03 	sts	0x03F6, r31
    16f4:	e0 93 f5 03 	sts	0x03F5, r30
    16f8:	3e c0       	rjmp	.+124    	; 0x1776 <free+0x118>
    16fa:	d9 01       	movw	r26, r18
    16fc:	13 96       	adiw	r26, 0x03	; 3
    16fe:	fc 93       	st	X, r31
    1700:	ee 93       	st	-X, r30
    1702:	12 97       	sbiw	r26, 0x02	; 2
    1704:	4d 91       	ld	r20, X+
    1706:	5d 91       	ld	r21, X+
    1708:	a4 0f       	add	r26, r20
    170a:	b5 1f       	adc	r27, r21
    170c:	ea 17       	cp	r30, r26
    170e:	fb 07       	cpc	r31, r27
    1710:	79 f4       	brne	.+30     	; 0x1730 <free+0xd2>
    1712:	80 81       	ld	r24, Z
    1714:	91 81       	ldd	r25, Z+1	; 0x01
    1716:	84 0f       	add	r24, r20
    1718:	95 1f       	adc	r25, r21
    171a:	02 96       	adiw	r24, 0x02	; 2
    171c:	d9 01       	movw	r26, r18
    171e:	11 96       	adiw	r26, 0x01	; 1
    1720:	9c 93       	st	X, r25
    1722:	8e 93       	st	-X, r24
    1724:	82 81       	ldd	r24, Z+2	; 0x02
    1726:	93 81       	ldd	r25, Z+3	; 0x03
    1728:	13 96       	adiw	r26, 0x03	; 3
    172a:	9c 93       	st	X, r25
    172c:	8e 93       	st	-X, r24
    172e:	12 97       	sbiw	r26, 0x02	; 2
    1730:	e0 e0       	ldi	r30, 0x00	; 0
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	9b 81       	ldd	r25, Y+3	; 0x03
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	19 f0       	breq	.+6      	; 0x1742 <free+0xe4>
    173c:	fe 01       	movw	r30, r28
    173e:	ec 01       	movw	r28, r24
    1740:	f9 cf       	rjmp	.-14     	; 0x1734 <free+0xd6>
    1742:	ce 01       	movw	r24, r28
    1744:	02 96       	adiw	r24, 0x02	; 2
    1746:	28 81       	ld	r18, Y
    1748:	39 81       	ldd	r19, Y+1	; 0x01
    174a:	82 0f       	add	r24, r18
    174c:	93 1f       	adc	r25, r19
    174e:	20 91 f3 03 	lds	r18, 0x03F3
    1752:	30 91 f4 03 	lds	r19, 0x03F4
    1756:	28 17       	cp	r18, r24
    1758:	39 07       	cpc	r19, r25
    175a:	69 f4       	brne	.+26     	; 0x1776 <free+0x118>
    175c:	30 97       	sbiw	r30, 0x00	; 0
    175e:	29 f4       	brne	.+10     	; 0x176a <free+0x10c>
    1760:	10 92 f6 03 	sts	0x03F6, r1
    1764:	10 92 f5 03 	sts	0x03F5, r1
    1768:	02 c0       	rjmp	.+4      	; 0x176e <free+0x110>
    176a:	13 82       	std	Z+3, r1	; 0x03
    176c:	12 82       	std	Z+2, r1	; 0x02
    176e:	d0 93 f4 03 	sts	0x03F4, r29
    1772:	c0 93 f3 03 	sts	0x03F3, r28
    1776:	df 91       	pop	r29
    1778:	cf 91       	pop	r28
    177a:	08 95       	ret

0000177c <fdevopen>:
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	ec 01       	movw	r28, r24
    1786:	8b 01       	movw	r16, r22
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	31 f4       	brne	.+12     	; 0x1798 <fdevopen+0x1c>
    178c:	61 15       	cp	r22, r1
    178e:	71 05       	cpc	r23, r1
    1790:	19 f4       	brne	.+6      	; 0x1798 <fdevopen+0x1c>
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	37 c0       	rjmp	.+110    	; 0x1806 <fdevopen+0x8a>
    1798:	6e e0       	ldi	r22, 0x0E	; 14
    179a:	70 e0       	ldi	r23, 0x00	; 0
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	3d d2       	rcall	.+1146   	; 0x1c1c <calloc>
    17a2:	fc 01       	movw	r30, r24
    17a4:	00 97       	sbiw	r24, 0x00	; 0
    17a6:	a9 f3       	breq	.-22     	; 0x1792 <fdevopen+0x16>
    17a8:	80 e8       	ldi	r24, 0x80	; 128
    17aa:	83 83       	std	Z+3, r24	; 0x03
    17ac:	01 15       	cp	r16, r1
    17ae:	11 05       	cpc	r17, r1
    17b0:	71 f0       	breq	.+28     	; 0x17ce <fdevopen+0x52>
    17b2:	13 87       	std	Z+11, r17	; 0x0b
    17b4:	02 87       	std	Z+10, r16	; 0x0a
    17b6:	81 e8       	ldi	r24, 0x81	; 129
    17b8:	83 83       	std	Z+3, r24	; 0x03
    17ba:	80 91 f7 03 	lds	r24, 0x03F7
    17be:	90 91 f8 03 	lds	r25, 0x03F8
    17c2:	89 2b       	or	r24, r25
    17c4:	21 f4       	brne	.+8      	; 0x17ce <fdevopen+0x52>
    17c6:	f0 93 f8 03 	sts	0x03F8, r31
    17ca:	e0 93 f7 03 	sts	0x03F7, r30
    17ce:	20 97       	sbiw	r28, 0x00	; 0
    17d0:	c9 f0       	breq	.+50     	; 0x1804 <fdevopen+0x88>
    17d2:	d1 87       	std	Z+9, r29	; 0x09
    17d4:	c0 87       	std	Z+8, r28	; 0x08
    17d6:	83 81       	ldd	r24, Z+3	; 0x03
    17d8:	82 60       	ori	r24, 0x02	; 2
    17da:	83 83       	std	Z+3, r24	; 0x03
    17dc:	80 91 f9 03 	lds	r24, 0x03F9
    17e0:	90 91 fa 03 	lds	r25, 0x03FA
    17e4:	89 2b       	or	r24, r25
    17e6:	71 f4       	brne	.+28     	; 0x1804 <fdevopen+0x88>
    17e8:	f0 93 fa 03 	sts	0x03FA, r31
    17ec:	e0 93 f9 03 	sts	0x03F9, r30
    17f0:	80 91 fb 03 	lds	r24, 0x03FB
    17f4:	90 91 fc 03 	lds	r25, 0x03FC
    17f8:	89 2b       	or	r24, r25
    17fa:	21 f4       	brne	.+8      	; 0x1804 <fdevopen+0x88>
    17fc:	f0 93 fc 03 	sts	0x03FC, r31
    1800:	e0 93 fb 03 	sts	0x03FB, r30
    1804:	cf 01       	movw	r24, r30
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	1f 91       	pop	r17
    180c:	0f 91       	pop	r16
    180e:	08 95       	ret

00001810 <printf>:
    1810:	a0 e0       	ldi	r26, 0x00	; 0
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	ed e0       	ldi	r30, 0x0D	; 13
    1816:	fc e0       	ldi	r31, 0x0C	; 12
    1818:	d8 c2       	rjmp	.+1456   	; 0x1dca <__prologue_saves__+0x20>
    181a:	fe 01       	movw	r30, r28
    181c:	35 96       	adiw	r30, 0x05	; 5
    181e:	61 91       	ld	r22, Z+
    1820:	71 91       	ld	r23, Z+
    1822:	af 01       	movw	r20, r30
    1824:	80 91 f9 03 	lds	r24, 0x03F9
    1828:	90 91 fa 03 	lds	r25, 0x03FA
    182c:	34 d0       	rcall	.+104    	; 0x1896 <vfprintf>
    182e:	e2 e0       	ldi	r30, 0x02	; 2
    1830:	e8 c2       	rjmp	.+1488   	; 0x1e02 <__epilogue_restores__+0x20>

00001832 <putchar>:
    1832:	60 91 f9 03 	lds	r22, 0x03F9
    1836:	70 91 fa 03 	lds	r23, 0x03FA
    183a:	27 c2       	rjmp	.+1102   	; 0x1c8a <fputc>

0000183c <puts>:
    183c:	0f 93       	push	r16
    183e:	1f 93       	push	r17
    1840:	cf 93       	push	r28
    1842:	df 93       	push	r29
    1844:	e0 91 f9 03 	lds	r30, 0x03F9
    1848:	f0 91 fa 03 	lds	r31, 0x03FA
    184c:	23 81       	ldd	r18, Z+3	; 0x03
    184e:	21 ff       	sbrs	r18, 1
    1850:	1b c0       	rjmp	.+54     	; 0x1888 <puts+0x4c>
    1852:	ec 01       	movw	r28, r24
    1854:	00 e0       	ldi	r16, 0x00	; 0
    1856:	10 e0       	ldi	r17, 0x00	; 0
    1858:	89 91       	ld	r24, Y+
    185a:	60 91 f9 03 	lds	r22, 0x03F9
    185e:	70 91 fa 03 	lds	r23, 0x03FA
    1862:	db 01       	movw	r26, r22
    1864:	18 96       	adiw	r26, 0x08	; 8
    1866:	ed 91       	ld	r30, X+
    1868:	fc 91       	ld	r31, X
    186a:	19 97       	sbiw	r26, 0x09	; 9
    186c:	88 23       	and	r24, r24
    186e:	31 f0       	breq	.+12     	; 0x187c <puts+0x40>
    1870:	09 95       	icall
    1872:	89 2b       	or	r24, r25
    1874:	89 f3       	breq	.-30     	; 0x1858 <puts+0x1c>
    1876:	0f ef       	ldi	r16, 0xFF	; 255
    1878:	1f ef       	ldi	r17, 0xFF	; 255
    187a:	ee cf       	rjmp	.-36     	; 0x1858 <puts+0x1c>
    187c:	8a e0       	ldi	r24, 0x0A	; 10
    187e:	09 95       	icall
    1880:	89 2b       	or	r24, r25
    1882:	11 f4       	brne	.+4      	; 0x1888 <puts+0x4c>
    1884:	c8 01       	movw	r24, r16
    1886:	02 c0       	rjmp	.+4      	; 0x188c <puts+0x50>
    1888:	8f ef       	ldi	r24, 0xFF	; 255
    188a:	9f ef       	ldi	r25, 0xFF	; 255
    188c:	df 91       	pop	r29
    188e:	cf 91       	pop	r28
    1890:	1f 91       	pop	r17
    1892:	0f 91       	pop	r16
    1894:	08 95       	ret

00001896 <vfprintf>:
    1896:	ac e0       	ldi	r26, 0x0C	; 12
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	e0 e5       	ldi	r30, 0x50	; 80
    189c:	fc e0       	ldi	r31, 0x0C	; 12
    189e:	85 c2       	rjmp	.+1290   	; 0x1daa <__prologue_saves__>
    18a0:	7c 01       	movw	r14, r24
    18a2:	6b 01       	movw	r12, r22
    18a4:	8a 01       	movw	r16, r20
    18a6:	fc 01       	movw	r30, r24
    18a8:	17 82       	std	Z+7, r1	; 0x07
    18aa:	16 82       	std	Z+6, r1	; 0x06
    18ac:	83 81       	ldd	r24, Z+3	; 0x03
    18ae:	81 ff       	sbrs	r24, 1
    18b0:	b0 c1       	rjmp	.+864    	; 0x1c12 <vfprintf+0x37c>
    18b2:	ce 01       	movw	r24, r28
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	4c 01       	movw	r8, r24
    18b8:	f7 01       	movw	r30, r14
    18ba:	93 81       	ldd	r25, Z+3	; 0x03
    18bc:	f6 01       	movw	r30, r12
    18be:	93 fd       	sbrc	r25, 3
    18c0:	85 91       	lpm	r24, Z+
    18c2:	93 ff       	sbrs	r25, 3
    18c4:	81 91       	ld	r24, Z+
    18c6:	6f 01       	movw	r12, r30
    18c8:	88 23       	and	r24, r24
    18ca:	09 f4       	brne	.+2      	; 0x18ce <vfprintf+0x38>
    18cc:	9e c1       	rjmp	.+828    	; 0x1c0a <vfprintf+0x374>
    18ce:	85 32       	cpi	r24, 0x25	; 37
    18d0:	39 f4       	brne	.+14     	; 0x18e0 <vfprintf+0x4a>
    18d2:	93 fd       	sbrc	r25, 3
    18d4:	85 91       	lpm	r24, Z+
    18d6:	93 ff       	sbrs	r25, 3
    18d8:	81 91       	ld	r24, Z+
    18da:	6f 01       	movw	r12, r30
    18dc:	85 32       	cpi	r24, 0x25	; 37
    18de:	21 f4       	brne	.+8      	; 0x18e8 <vfprintf+0x52>
    18e0:	b7 01       	movw	r22, r14
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	d2 d1       	rcall	.+932    	; 0x1c8a <fputc>
    18e6:	e8 cf       	rjmp	.-48     	; 0x18b8 <vfprintf+0x22>
    18e8:	51 2c       	mov	r5, r1
    18ea:	31 2c       	mov	r3, r1
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	20 32       	cpi	r18, 0x20	; 32
    18f0:	a0 f4       	brcc	.+40     	; 0x191a <vfprintf+0x84>
    18f2:	8b 32       	cpi	r24, 0x2B	; 43
    18f4:	69 f0       	breq	.+26     	; 0x1910 <vfprintf+0x7a>
    18f6:	30 f4       	brcc	.+12     	; 0x1904 <vfprintf+0x6e>
    18f8:	80 32       	cpi	r24, 0x20	; 32
    18fa:	59 f0       	breq	.+22     	; 0x1912 <vfprintf+0x7c>
    18fc:	83 32       	cpi	r24, 0x23	; 35
    18fe:	69 f4       	brne	.+26     	; 0x191a <vfprintf+0x84>
    1900:	20 61       	ori	r18, 0x10	; 16
    1902:	2c c0       	rjmp	.+88     	; 0x195c <vfprintf+0xc6>
    1904:	8d 32       	cpi	r24, 0x2D	; 45
    1906:	39 f0       	breq	.+14     	; 0x1916 <vfprintf+0x80>
    1908:	80 33       	cpi	r24, 0x30	; 48
    190a:	39 f4       	brne	.+14     	; 0x191a <vfprintf+0x84>
    190c:	21 60       	ori	r18, 0x01	; 1
    190e:	26 c0       	rjmp	.+76     	; 0x195c <vfprintf+0xc6>
    1910:	22 60       	ori	r18, 0x02	; 2
    1912:	24 60       	ori	r18, 0x04	; 4
    1914:	23 c0       	rjmp	.+70     	; 0x195c <vfprintf+0xc6>
    1916:	28 60       	ori	r18, 0x08	; 8
    1918:	21 c0       	rjmp	.+66     	; 0x195c <vfprintf+0xc6>
    191a:	27 fd       	sbrc	r18, 7
    191c:	27 c0       	rjmp	.+78     	; 0x196c <vfprintf+0xd6>
    191e:	30 ed       	ldi	r19, 0xD0	; 208
    1920:	38 0f       	add	r19, r24
    1922:	3a 30       	cpi	r19, 0x0A	; 10
    1924:	78 f4       	brcc	.+30     	; 0x1944 <vfprintf+0xae>
    1926:	26 ff       	sbrs	r18, 6
    1928:	06 c0       	rjmp	.+12     	; 0x1936 <vfprintf+0xa0>
    192a:	fa e0       	ldi	r31, 0x0A	; 10
    192c:	5f 9e       	mul	r5, r31
    192e:	30 0d       	add	r19, r0
    1930:	11 24       	eor	r1, r1
    1932:	53 2e       	mov	r5, r19
    1934:	13 c0       	rjmp	.+38     	; 0x195c <vfprintf+0xc6>
    1936:	8a e0       	ldi	r24, 0x0A	; 10
    1938:	38 9e       	mul	r3, r24
    193a:	30 0d       	add	r19, r0
    193c:	11 24       	eor	r1, r1
    193e:	33 2e       	mov	r3, r19
    1940:	20 62       	ori	r18, 0x20	; 32
    1942:	0c c0       	rjmp	.+24     	; 0x195c <vfprintf+0xc6>
    1944:	8e 32       	cpi	r24, 0x2E	; 46
    1946:	21 f4       	brne	.+8      	; 0x1950 <vfprintf+0xba>
    1948:	26 fd       	sbrc	r18, 6
    194a:	5f c1       	rjmp	.+702    	; 0x1c0a <vfprintf+0x374>
    194c:	20 64       	ori	r18, 0x40	; 64
    194e:	06 c0       	rjmp	.+12     	; 0x195c <vfprintf+0xc6>
    1950:	8c 36       	cpi	r24, 0x6C	; 108
    1952:	11 f4       	brne	.+4      	; 0x1958 <vfprintf+0xc2>
    1954:	20 68       	ori	r18, 0x80	; 128
    1956:	02 c0       	rjmp	.+4      	; 0x195c <vfprintf+0xc6>
    1958:	88 36       	cpi	r24, 0x68	; 104
    195a:	41 f4       	brne	.+16     	; 0x196c <vfprintf+0xd6>
    195c:	f6 01       	movw	r30, r12
    195e:	93 fd       	sbrc	r25, 3
    1960:	85 91       	lpm	r24, Z+
    1962:	93 ff       	sbrs	r25, 3
    1964:	81 91       	ld	r24, Z+
    1966:	6f 01       	movw	r12, r30
    1968:	81 11       	cpse	r24, r1
    196a:	c1 cf       	rjmp	.-126    	; 0x18ee <vfprintf+0x58>
    196c:	98 2f       	mov	r25, r24
    196e:	9f 7d       	andi	r25, 0xDF	; 223
    1970:	95 54       	subi	r25, 0x45	; 69
    1972:	93 30       	cpi	r25, 0x03	; 3
    1974:	28 f4       	brcc	.+10     	; 0x1980 <vfprintf+0xea>
    1976:	0c 5f       	subi	r16, 0xFC	; 252
    1978:	1f 4f       	sbci	r17, 0xFF	; 255
    197a:	ff e3       	ldi	r31, 0x3F	; 63
    197c:	f9 83       	std	Y+1, r31	; 0x01
    197e:	0d c0       	rjmp	.+26     	; 0x199a <vfprintf+0x104>
    1980:	83 36       	cpi	r24, 0x63	; 99
    1982:	31 f0       	breq	.+12     	; 0x1990 <vfprintf+0xfa>
    1984:	83 37       	cpi	r24, 0x73	; 115
    1986:	71 f0       	breq	.+28     	; 0x19a4 <vfprintf+0x10e>
    1988:	83 35       	cpi	r24, 0x53	; 83
    198a:	09 f0       	breq	.+2      	; 0x198e <vfprintf+0xf8>
    198c:	57 c0       	rjmp	.+174    	; 0x1a3c <vfprintf+0x1a6>
    198e:	21 c0       	rjmp	.+66     	; 0x19d2 <vfprintf+0x13c>
    1990:	f8 01       	movw	r30, r16
    1992:	80 81       	ld	r24, Z
    1994:	89 83       	std	Y+1, r24	; 0x01
    1996:	0e 5f       	subi	r16, 0xFE	; 254
    1998:	1f 4f       	sbci	r17, 0xFF	; 255
    199a:	44 24       	eor	r4, r4
    199c:	43 94       	inc	r4
    199e:	51 2c       	mov	r5, r1
    19a0:	54 01       	movw	r10, r8
    19a2:	14 c0       	rjmp	.+40     	; 0x19cc <vfprintf+0x136>
    19a4:	38 01       	movw	r6, r16
    19a6:	f2 e0       	ldi	r31, 0x02	; 2
    19a8:	6f 0e       	add	r6, r31
    19aa:	71 1c       	adc	r7, r1
    19ac:	f8 01       	movw	r30, r16
    19ae:	a0 80       	ld	r10, Z
    19b0:	b1 80       	ldd	r11, Z+1	; 0x01
    19b2:	26 ff       	sbrs	r18, 6
    19b4:	03 c0       	rjmp	.+6      	; 0x19bc <vfprintf+0x126>
    19b6:	65 2d       	mov	r22, r5
    19b8:	70 e0       	ldi	r23, 0x00	; 0
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <vfprintf+0x12a>
    19bc:	6f ef       	ldi	r22, 0xFF	; 255
    19be:	7f ef       	ldi	r23, 0xFF	; 255
    19c0:	c5 01       	movw	r24, r10
    19c2:	2c 87       	std	Y+12, r18	; 0x0c
    19c4:	57 d1       	rcall	.+686    	; 0x1c74 <strnlen>
    19c6:	2c 01       	movw	r4, r24
    19c8:	83 01       	movw	r16, r6
    19ca:	2c 85       	ldd	r18, Y+12	; 0x0c
    19cc:	2f 77       	andi	r18, 0x7F	; 127
    19ce:	22 2e       	mov	r2, r18
    19d0:	16 c0       	rjmp	.+44     	; 0x19fe <vfprintf+0x168>
    19d2:	38 01       	movw	r6, r16
    19d4:	f2 e0       	ldi	r31, 0x02	; 2
    19d6:	6f 0e       	add	r6, r31
    19d8:	71 1c       	adc	r7, r1
    19da:	f8 01       	movw	r30, r16
    19dc:	a0 80       	ld	r10, Z
    19de:	b1 80       	ldd	r11, Z+1	; 0x01
    19e0:	26 ff       	sbrs	r18, 6
    19e2:	03 c0       	rjmp	.+6      	; 0x19ea <vfprintf+0x154>
    19e4:	65 2d       	mov	r22, r5
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	02 c0       	rjmp	.+4      	; 0x19ee <vfprintf+0x158>
    19ea:	6f ef       	ldi	r22, 0xFF	; 255
    19ec:	7f ef       	ldi	r23, 0xFF	; 255
    19ee:	c5 01       	movw	r24, r10
    19f0:	2c 87       	std	Y+12, r18	; 0x0c
    19f2:	2e d1       	rcall	.+604    	; 0x1c50 <strnlen_P>
    19f4:	2c 01       	movw	r4, r24
    19f6:	2c 85       	ldd	r18, Y+12	; 0x0c
    19f8:	20 68       	ori	r18, 0x80	; 128
    19fa:	22 2e       	mov	r2, r18
    19fc:	83 01       	movw	r16, r6
    19fe:	23 fc       	sbrc	r2, 3
    1a00:	19 c0       	rjmp	.+50     	; 0x1a34 <vfprintf+0x19e>
    1a02:	83 2d       	mov	r24, r3
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	48 16       	cp	r4, r24
    1a08:	59 06       	cpc	r5, r25
    1a0a:	a0 f4       	brcc	.+40     	; 0x1a34 <vfprintf+0x19e>
    1a0c:	b7 01       	movw	r22, r14
    1a0e:	80 e2       	ldi	r24, 0x20	; 32
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	3b d1       	rcall	.+630    	; 0x1c8a <fputc>
    1a14:	3a 94       	dec	r3
    1a16:	f5 cf       	rjmp	.-22     	; 0x1a02 <vfprintf+0x16c>
    1a18:	f5 01       	movw	r30, r10
    1a1a:	27 fc       	sbrc	r2, 7
    1a1c:	85 91       	lpm	r24, Z+
    1a1e:	27 fe       	sbrs	r2, 7
    1a20:	81 91       	ld	r24, Z+
    1a22:	5f 01       	movw	r10, r30
    1a24:	b7 01       	movw	r22, r14
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	30 d1       	rcall	.+608    	; 0x1c8a <fputc>
    1a2a:	31 10       	cpse	r3, r1
    1a2c:	3a 94       	dec	r3
    1a2e:	f1 e0       	ldi	r31, 0x01	; 1
    1a30:	4f 1a       	sub	r4, r31
    1a32:	51 08       	sbc	r5, r1
    1a34:	41 14       	cp	r4, r1
    1a36:	51 04       	cpc	r5, r1
    1a38:	79 f7       	brne	.-34     	; 0x1a18 <vfprintf+0x182>
    1a3a:	de c0       	rjmp	.+444    	; 0x1bf8 <vfprintf+0x362>
    1a3c:	84 36       	cpi	r24, 0x64	; 100
    1a3e:	11 f0       	breq	.+4      	; 0x1a44 <vfprintf+0x1ae>
    1a40:	89 36       	cpi	r24, 0x69	; 105
    1a42:	31 f5       	brne	.+76     	; 0x1a90 <vfprintf+0x1fa>
    1a44:	f8 01       	movw	r30, r16
    1a46:	27 ff       	sbrs	r18, 7
    1a48:	07 c0       	rjmp	.+14     	; 0x1a58 <vfprintf+0x1c2>
    1a4a:	60 81       	ld	r22, Z
    1a4c:	71 81       	ldd	r23, Z+1	; 0x01
    1a4e:	82 81       	ldd	r24, Z+2	; 0x02
    1a50:	93 81       	ldd	r25, Z+3	; 0x03
    1a52:	0c 5f       	subi	r16, 0xFC	; 252
    1a54:	1f 4f       	sbci	r17, 0xFF	; 255
    1a56:	08 c0       	rjmp	.+16     	; 0x1a68 <vfprintf+0x1d2>
    1a58:	60 81       	ld	r22, Z
    1a5a:	71 81       	ldd	r23, Z+1	; 0x01
    1a5c:	88 27       	eor	r24, r24
    1a5e:	77 fd       	sbrc	r23, 7
    1a60:	80 95       	com	r24
    1a62:	98 2f       	mov	r25, r24
    1a64:	0e 5f       	subi	r16, 0xFE	; 254
    1a66:	1f 4f       	sbci	r17, 0xFF	; 255
    1a68:	2f 76       	andi	r18, 0x6F	; 111
    1a6a:	b2 2e       	mov	r11, r18
    1a6c:	97 ff       	sbrs	r25, 7
    1a6e:	09 c0       	rjmp	.+18     	; 0x1a82 <vfprintf+0x1ec>
    1a70:	90 95       	com	r25
    1a72:	80 95       	com	r24
    1a74:	70 95       	com	r23
    1a76:	61 95       	neg	r22
    1a78:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a7c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7e:	20 68       	ori	r18, 0x80	; 128
    1a80:	b2 2e       	mov	r11, r18
    1a82:	2a e0       	ldi	r18, 0x0A	; 10
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	a4 01       	movw	r20, r8
    1a88:	32 d1       	rcall	.+612    	; 0x1cee <__ultoa_invert>
    1a8a:	a8 2e       	mov	r10, r24
    1a8c:	a8 18       	sub	r10, r8
    1a8e:	43 c0       	rjmp	.+134    	; 0x1b16 <vfprintf+0x280>
    1a90:	85 37       	cpi	r24, 0x75	; 117
    1a92:	29 f4       	brne	.+10     	; 0x1a9e <vfprintf+0x208>
    1a94:	2f 7e       	andi	r18, 0xEF	; 239
    1a96:	b2 2e       	mov	r11, r18
    1a98:	2a e0       	ldi	r18, 0x0A	; 10
    1a9a:	30 e0       	ldi	r19, 0x00	; 0
    1a9c:	25 c0       	rjmp	.+74     	; 0x1ae8 <vfprintf+0x252>
    1a9e:	f2 2f       	mov	r31, r18
    1aa0:	f9 7f       	andi	r31, 0xF9	; 249
    1aa2:	bf 2e       	mov	r11, r31
    1aa4:	8f 36       	cpi	r24, 0x6F	; 111
    1aa6:	c1 f0       	breq	.+48     	; 0x1ad8 <vfprintf+0x242>
    1aa8:	18 f4       	brcc	.+6      	; 0x1ab0 <vfprintf+0x21a>
    1aaa:	88 35       	cpi	r24, 0x58	; 88
    1aac:	79 f0       	breq	.+30     	; 0x1acc <vfprintf+0x236>
    1aae:	ad c0       	rjmp	.+346    	; 0x1c0a <vfprintf+0x374>
    1ab0:	80 37       	cpi	r24, 0x70	; 112
    1ab2:	19 f0       	breq	.+6      	; 0x1aba <vfprintf+0x224>
    1ab4:	88 37       	cpi	r24, 0x78	; 120
    1ab6:	21 f0       	breq	.+8      	; 0x1ac0 <vfprintf+0x22a>
    1ab8:	a8 c0       	rjmp	.+336    	; 0x1c0a <vfprintf+0x374>
    1aba:	2f 2f       	mov	r18, r31
    1abc:	20 61       	ori	r18, 0x10	; 16
    1abe:	b2 2e       	mov	r11, r18
    1ac0:	b4 fe       	sbrs	r11, 4
    1ac2:	0d c0       	rjmp	.+26     	; 0x1ade <vfprintf+0x248>
    1ac4:	8b 2d       	mov	r24, r11
    1ac6:	84 60       	ori	r24, 0x04	; 4
    1ac8:	b8 2e       	mov	r11, r24
    1aca:	09 c0       	rjmp	.+18     	; 0x1ade <vfprintf+0x248>
    1acc:	24 ff       	sbrs	r18, 4
    1ace:	0a c0       	rjmp	.+20     	; 0x1ae4 <vfprintf+0x24e>
    1ad0:	9f 2f       	mov	r25, r31
    1ad2:	96 60       	ori	r25, 0x06	; 6
    1ad4:	b9 2e       	mov	r11, r25
    1ad6:	06 c0       	rjmp	.+12     	; 0x1ae4 <vfprintf+0x24e>
    1ad8:	28 e0       	ldi	r18, 0x08	; 8
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	05 c0       	rjmp	.+10     	; 0x1ae8 <vfprintf+0x252>
    1ade:	20 e1       	ldi	r18, 0x10	; 16
    1ae0:	30 e0       	ldi	r19, 0x00	; 0
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <vfprintf+0x252>
    1ae4:	20 e1       	ldi	r18, 0x10	; 16
    1ae6:	32 e0       	ldi	r19, 0x02	; 2
    1ae8:	f8 01       	movw	r30, r16
    1aea:	b7 fe       	sbrs	r11, 7
    1aec:	07 c0       	rjmp	.+14     	; 0x1afc <vfprintf+0x266>
    1aee:	60 81       	ld	r22, Z
    1af0:	71 81       	ldd	r23, Z+1	; 0x01
    1af2:	82 81       	ldd	r24, Z+2	; 0x02
    1af4:	93 81       	ldd	r25, Z+3	; 0x03
    1af6:	0c 5f       	subi	r16, 0xFC	; 252
    1af8:	1f 4f       	sbci	r17, 0xFF	; 255
    1afa:	06 c0       	rjmp	.+12     	; 0x1b08 <vfprintf+0x272>
    1afc:	60 81       	ld	r22, Z
    1afe:	71 81       	ldd	r23, Z+1	; 0x01
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	0e 5f       	subi	r16, 0xFE	; 254
    1b06:	1f 4f       	sbci	r17, 0xFF	; 255
    1b08:	a4 01       	movw	r20, r8
    1b0a:	f1 d0       	rcall	.+482    	; 0x1cee <__ultoa_invert>
    1b0c:	a8 2e       	mov	r10, r24
    1b0e:	a8 18       	sub	r10, r8
    1b10:	fb 2d       	mov	r31, r11
    1b12:	ff 77       	andi	r31, 0x7F	; 127
    1b14:	bf 2e       	mov	r11, r31
    1b16:	b6 fe       	sbrs	r11, 6
    1b18:	0b c0       	rjmp	.+22     	; 0x1b30 <vfprintf+0x29a>
    1b1a:	2b 2d       	mov	r18, r11
    1b1c:	2e 7f       	andi	r18, 0xFE	; 254
    1b1e:	a5 14       	cp	r10, r5
    1b20:	50 f4       	brcc	.+20     	; 0x1b36 <vfprintf+0x2a0>
    1b22:	b4 fe       	sbrs	r11, 4
    1b24:	0a c0       	rjmp	.+20     	; 0x1b3a <vfprintf+0x2a4>
    1b26:	b2 fc       	sbrc	r11, 2
    1b28:	08 c0       	rjmp	.+16     	; 0x1b3a <vfprintf+0x2a4>
    1b2a:	2b 2d       	mov	r18, r11
    1b2c:	2e 7e       	andi	r18, 0xEE	; 238
    1b2e:	05 c0       	rjmp	.+10     	; 0x1b3a <vfprintf+0x2a4>
    1b30:	7a 2c       	mov	r7, r10
    1b32:	2b 2d       	mov	r18, r11
    1b34:	03 c0       	rjmp	.+6      	; 0x1b3c <vfprintf+0x2a6>
    1b36:	7a 2c       	mov	r7, r10
    1b38:	01 c0       	rjmp	.+2      	; 0x1b3c <vfprintf+0x2a6>
    1b3a:	75 2c       	mov	r7, r5
    1b3c:	24 ff       	sbrs	r18, 4
    1b3e:	0d c0       	rjmp	.+26     	; 0x1b5a <vfprintf+0x2c4>
    1b40:	fe 01       	movw	r30, r28
    1b42:	ea 0d       	add	r30, r10
    1b44:	f1 1d       	adc	r31, r1
    1b46:	80 81       	ld	r24, Z
    1b48:	80 33       	cpi	r24, 0x30	; 48
    1b4a:	11 f4       	brne	.+4      	; 0x1b50 <vfprintf+0x2ba>
    1b4c:	29 7e       	andi	r18, 0xE9	; 233
    1b4e:	09 c0       	rjmp	.+18     	; 0x1b62 <vfprintf+0x2cc>
    1b50:	22 ff       	sbrs	r18, 2
    1b52:	06 c0       	rjmp	.+12     	; 0x1b60 <vfprintf+0x2ca>
    1b54:	73 94       	inc	r7
    1b56:	73 94       	inc	r7
    1b58:	04 c0       	rjmp	.+8      	; 0x1b62 <vfprintf+0x2cc>
    1b5a:	82 2f       	mov	r24, r18
    1b5c:	86 78       	andi	r24, 0x86	; 134
    1b5e:	09 f0       	breq	.+2      	; 0x1b62 <vfprintf+0x2cc>
    1b60:	73 94       	inc	r7
    1b62:	23 fd       	sbrc	r18, 3
    1b64:	12 c0       	rjmp	.+36     	; 0x1b8a <vfprintf+0x2f4>
    1b66:	20 ff       	sbrs	r18, 0
    1b68:	06 c0       	rjmp	.+12     	; 0x1b76 <vfprintf+0x2e0>
    1b6a:	5a 2c       	mov	r5, r10
    1b6c:	73 14       	cp	r7, r3
    1b6e:	18 f4       	brcc	.+6      	; 0x1b76 <vfprintf+0x2e0>
    1b70:	53 0c       	add	r5, r3
    1b72:	57 18       	sub	r5, r7
    1b74:	73 2c       	mov	r7, r3
    1b76:	73 14       	cp	r7, r3
    1b78:	60 f4       	brcc	.+24     	; 0x1b92 <vfprintf+0x2fc>
    1b7a:	b7 01       	movw	r22, r14
    1b7c:	80 e2       	ldi	r24, 0x20	; 32
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	2c 87       	std	Y+12, r18	; 0x0c
    1b82:	83 d0       	rcall	.+262    	; 0x1c8a <fputc>
    1b84:	73 94       	inc	r7
    1b86:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b88:	f6 cf       	rjmp	.-20     	; 0x1b76 <vfprintf+0x2e0>
    1b8a:	73 14       	cp	r7, r3
    1b8c:	10 f4       	brcc	.+4      	; 0x1b92 <vfprintf+0x2fc>
    1b8e:	37 18       	sub	r3, r7
    1b90:	01 c0       	rjmp	.+2      	; 0x1b94 <vfprintf+0x2fe>
    1b92:	31 2c       	mov	r3, r1
    1b94:	24 ff       	sbrs	r18, 4
    1b96:	11 c0       	rjmp	.+34     	; 0x1bba <vfprintf+0x324>
    1b98:	b7 01       	movw	r22, r14
    1b9a:	80 e3       	ldi	r24, 0x30	; 48
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	2c 87       	std	Y+12, r18	; 0x0c
    1ba0:	74 d0       	rcall	.+232    	; 0x1c8a <fputc>
    1ba2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ba4:	22 ff       	sbrs	r18, 2
    1ba6:	16 c0       	rjmp	.+44     	; 0x1bd4 <vfprintf+0x33e>
    1ba8:	21 ff       	sbrs	r18, 1
    1baa:	03 c0       	rjmp	.+6      	; 0x1bb2 <vfprintf+0x31c>
    1bac:	88 e5       	ldi	r24, 0x58	; 88
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	02 c0       	rjmp	.+4      	; 0x1bb6 <vfprintf+0x320>
    1bb2:	88 e7       	ldi	r24, 0x78	; 120
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	b7 01       	movw	r22, r14
    1bb8:	0c c0       	rjmp	.+24     	; 0x1bd2 <vfprintf+0x33c>
    1bba:	82 2f       	mov	r24, r18
    1bbc:	86 78       	andi	r24, 0x86	; 134
    1bbe:	51 f0       	breq	.+20     	; 0x1bd4 <vfprintf+0x33e>
    1bc0:	21 fd       	sbrc	r18, 1
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <vfprintf+0x332>
    1bc4:	80 e2       	ldi	r24, 0x20	; 32
    1bc6:	01 c0       	rjmp	.+2      	; 0x1bca <vfprintf+0x334>
    1bc8:	8b e2       	ldi	r24, 0x2B	; 43
    1bca:	27 fd       	sbrc	r18, 7
    1bcc:	8d e2       	ldi	r24, 0x2D	; 45
    1bce:	b7 01       	movw	r22, r14
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	5b d0       	rcall	.+182    	; 0x1c8a <fputc>
    1bd4:	a5 14       	cp	r10, r5
    1bd6:	30 f4       	brcc	.+12     	; 0x1be4 <vfprintf+0x34e>
    1bd8:	b7 01       	movw	r22, r14
    1bda:	80 e3       	ldi	r24, 0x30	; 48
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	55 d0       	rcall	.+170    	; 0x1c8a <fputc>
    1be0:	5a 94       	dec	r5
    1be2:	f8 cf       	rjmp	.-16     	; 0x1bd4 <vfprintf+0x33e>
    1be4:	aa 94       	dec	r10
    1be6:	f4 01       	movw	r30, r8
    1be8:	ea 0d       	add	r30, r10
    1bea:	f1 1d       	adc	r31, r1
    1bec:	80 81       	ld	r24, Z
    1bee:	b7 01       	movw	r22, r14
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	4b d0       	rcall	.+150    	; 0x1c8a <fputc>
    1bf4:	a1 10       	cpse	r10, r1
    1bf6:	f6 cf       	rjmp	.-20     	; 0x1be4 <vfprintf+0x34e>
    1bf8:	33 20       	and	r3, r3
    1bfa:	09 f4       	brne	.+2      	; 0x1bfe <vfprintf+0x368>
    1bfc:	5d ce       	rjmp	.-838    	; 0x18b8 <vfprintf+0x22>
    1bfe:	b7 01       	movw	r22, r14
    1c00:	80 e2       	ldi	r24, 0x20	; 32
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	42 d0       	rcall	.+132    	; 0x1c8a <fputc>
    1c06:	3a 94       	dec	r3
    1c08:	f7 cf       	rjmp	.-18     	; 0x1bf8 <vfprintf+0x362>
    1c0a:	f7 01       	movw	r30, r14
    1c0c:	86 81       	ldd	r24, Z+6	; 0x06
    1c0e:	97 81       	ldd	r25, Z+7	; 0x07
    1c10:	02 c0       	rjmp	.+4      	; 0x1c16 <vfprintf+0x380>
    1c12:	8f ef       	ldi	r24, 0xFF	; 255
    1c14:	9f ef       	ldi	r25, 0xFF	; 255
    1c16:	2c 96       	adiw	r28, 0x0c	; 12
    1c18:	e2 e1       	ldi	r30, 0x12	; 18
    1c1a:	e3 c0       	rjmp	.+454    	; 0x1de2 <__epilogue_restores__>

00001c1c <calloc>:
    1c1c:	0f 93       	push	r16
    1c1e:	1f 93       	push	r17
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	86 9f       	mul	r24, r22
    1c26:	80 01       	movw	r16, r0
    1c28:	87 9f       	mul	r24, r23
    1c2a:	10 0d       	add	r17, r0
    1c2c:	96 9f       	mul	r25, r22
    1c2e:	10 0d       	add	r17, r0
    1c30:	11 24       	eor	r1, r1
    1c32:	c8 01       	movw	r24, r16
    1c34:	7c dc       	rcall	.-1800   	; 0x152e <malloc>
    1c36:	ec 01       	movw	r28, r24
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	21 f0       	breq	.+8      	; 0x1c44 <calloc+0x28>
    1c3c:	a8 01       	movw	r20, r16
    1c3e:	60 e0       	ldi	r22, 0x00	; 0
    1c40:	70 e0       	ldi	r23, 0x00	; 0
    1c42:	11 d0       	rcall	.+34     	; 0x1c66 <memset>
    1c44:	ce 01       	movw	r24, r28
    1c46:	df 91       	pop	r29
    1c48:	cf 91       	pop	r28
    1c4a:	1f 91       	pop	r17
    1c4c:	0f 91       	pop	r16
    1c4e:	08 95       	ret

00001c50 <strnlen_P>:
    1c50:	fc 01       	movw	r30, r24
    1c52:	05 90       	lpm	r0, Z+
    1c54:	61 50       	subi	r22, 0x01	; 1
    1c56:	70 40       	sbci	r23, 0x00	; 0
    1c58:	01 10       	cpse	r0, r1
    1c5a:	d8 f7       	brcc	.-10     	; 0x1c52 <strnlen_P+0x2>
    1c5c:	80 95       	com	r24
    1c5e:	90 95       	com	r25
    1c60:	8e 0f       	add	r24, r30
    1c62:	9f 1f       	adc	r25, r31
    1c64:	08 95       	ret

00001c66 <memset>:
    1c66:	dc 01       	movw	r26, r24
    1c68:	01 c0       	rjmp	.+2      	; 0x1c6c <memset+0x6>
    1c6a:	6d 93       	st	X+, r22
    1c6c:	41 50       	subi	r20, 0x01	; 1
    1c6e:	50 40       	sbci	r21, 0x00	; 0
    1c70:	e0 f7       	brcc	.-8      	; 0x1c6a <memset+0x4>
    1c72:	08 95       	ret

00001c74 <strnlen>:
    1c74:	fc 01       	movw	r30, r24
    1c76:	61 50       	subi	r22, 0x01	; 1
    1c78:	70 40       	sbci	r23, 0x00	; 0
    1c7a:	01 90       	ld	r0, Z+
    1c7c:	01 10       	cpse	r0, r1
    1c7e:	d8 f7       	brcc	.-10     	; 0x1c76 <strnlen+0x2>
    1c80:	80 95       	com	r24
    1c82:	90 95       	com	r25
    1c84:	8e 0f       	add	r24, r30
    1c86:	9f 1f       	adc	r25, r31
    1c88:	08 95       	ret

00001c8a <fputc>:
    1c8a:	0f 93       	push	r16
    1c8c:	1f 93       	push	r17
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	18 2f       	mov	r17, r24
    1c94:	09 2f       	mov	r16, r25
    1c96:	eb 01       	movw	r28, r22
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	81 fd       	sbrc	r24, 1
    1c9c:	03 c0       	rjmp	.+6      	; 0x1ca4 <fputc+0x1a>
    1c9e:	8f ef       	ldi	r24, 0xFF	; 255
    1ca0:	9f ef       	ldi	r25, 0xFF	; 255
    1ca2:	20 c0       	rjmp	.+64     	; 0x1ce4 <fputc+0x5a>
    1ca4:	82 ff       	sbrs	r24, 2
    1ca6:	10 c0       	rjmp	.+32     	; 0x1cc8 <fputc+0x3e>
    1ca8:	4e 81       	ldd	r20, Y+6	; 0x06
    1caa:	5f 81       	ldd	r21, Y+7	; 0x07
    1cac:	2c 81       	ldd	r18, Y+4	; 0x04
    1cae:	3d 81       	ldd	r19, Y+5	; 0x05
    1cb0:	42 17       	cp	r20, r18
    1cb2:	53 07       	cpc	r21, r19
    1cb4:	7c f4       	brge	.+30     	; 0x1cd4 <fputc+0x4a>
    1cb6:	e8 81       	ld	r30, Y
    1cb8:	f9 81       	ldd	r31, Y+1	; 0x01
    1cba:	9f 01       	movw	r18, r30
    1cbc:	2f 5f       	subi	r18, 0xFF	; 255
    1cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc0:	39 83       	std	Y+1, r19	; 0x01
    1cc2:	28 83       	st	Y, r18
    1cc4:	10 83       	st	Z, r17
    1cc6:	06 c0       	rjmp	.+12     	; 0x1cd4 <fputc+0x4a>
    1cc8:	e8 85       	ldd	r30, Y+8	; 0x08
    1cca:	f9 85       	ldd	r31, Y+9	; 0x09
    1ccc:	81 2f       	mov	r24, r17
    1cce:	09 95       	icall
    1cd0:	89 2b       	or	r24, r25
    1cd2:	29 f7       	brne	.-54     	; 0x1c9e <fputc+0x14>
    1cd4:	2e 81       	ldd	r18, Y+6	; 0x06
    1cd6:	3f 81       	ldd	r19, Y+7	; 0x07
    1cd8:	2f 5f       	subi	r18, 0xFF	; 255
    1cda:	3f 4f       	sbci	r19, 0xFF	; 255
    1cdc:	3f 83       	std	Y+7, r19	; 0x07
    1cde:	2e 83       	std	Y+6, r18	; 0x06
    1ce0:	81 2f       	mov	r24, r17
    1ce2:	90 2f       	mov	r25, r16
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	1f 91       	pop	r17
    1cea:	0f 91       	pop	r16
    1cec:	08 95       	ret

00001cee <__ultoa_invert>:
    1cee:	fa 01       	movw	r30, r20
    1cf0:	aa 27       	eor	r26, r26
    1cf2:	28 30       	cpi	r18, 0x08	; 8
    1cf4:	51 f1       	breq	.+84     	; 0x1d4a <__ultoa_invert+0x5c>
    1cf6:	20 31       	cpi	r18, 0x10	; 16
    1cf8:	81 f1       	breq	.+96     	; 0x1d5a <__ultoa_invert+0x6c>
    1cfa:	e8 94       	clt
    1cfc:	6f 93       	push	r22
    1cfe:	6e 7f       	andi	r22, 0xFE	; 254
    1d00:	6e 5f       	subi	r22, 0xFE	; 254
    1d02:	7f 4f       	sbci	r23, 0xFF	; 255
    1d04:	8f 4f       	sbci	r24, 0xFF	; 255
    1d06:	9f 4f       	sbci	r25, 0xFF	; 255
    1d08:	af 4f       	sbci	r26, 0xFF	; 255
    1d0a:	b1 e0       	ldi	r27, 0x01	; 1
    1d0c:	3e d0       	rcall	.+124    	; 0x1d8a <__ultoa_invert+0x9c>
    1d0e:	b4 e0       	ldi	r27, 0x04	; 4
    1d10:	3c d0       	rcall	.+120    	; 0x1d8a <__ultoa_invert+0x9c>
    1d12:	67 0f       	add	r22, r23
    1d14:	78 1f       	adc	r23, r24
    1d16:	89 1f       	adc	r24, r25
    1d18:	9a 1f       	adc	r25, r26
    1d1a:	a1 1d       	adc	r26, r1
    1d1c:	68 0f       	add	r22, r24
    1d1e:	79 1f       	adc	r23, r25
    1d20:	8a 1f       	adc	r24, r26
    1d22:	91 1d       	adc	r25, r1
    1d24:	a1 1d       	adc	r26, r1
    1d26:	6a 0f       	add	r22, r26
    1d28:	71 1d       	adc	r23, r1
    1d2a:	81 1d       	adc	r24, r1
    1d2c:	91 1d       	adc	r25, r1
    1d2e:	a1 1d       	adc	r26, r1
    1d30:	20 d0       	rcall	.+64     	; 0x1d72 <__ultoa_invert+0x84>
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <__ultoa_invert+0x48>
    1d34:	68 94       	set
    1d36:	3f 91       	pop	r19
    1d38:	2a e0       	ldi	r18, 0x0A	; 10
    1d3a:	26 9f       	mul	r18, r22
    1d3c:	11 24       	eor	r1, r1
    1d3e:	30 19       	sub	r19, r0
    1d40:	30 5d       	subi	r19, 0xD0	; 208
    1d42:	31 93       	st	Z+, r19
    1d44:	de f6       	brtc	.-74     	; 0x1cfc <__ultoa_invert+0xe>
    1d46:	cf 01       	movw	r24, r30
    1d48:	08 95       	ret
    1d4a:	46 2f       	mov	r20, r22
    1d4c:	47 70       	andi	r20, 0x07	; 7
    1d4e:	40 5d       	subi	r20, 0xD0	; 208
    1d50:	41 93       	st	Z+, r20
    1d52:	b3 e0       	ldi	r27, 0x03	; 3
    1d54:	0f d0       	rcall	.+30     	; 0x1d74 <__ultoa_invert+0x86>
    1d56:	c9 f7       	brne	.-14     	; 0x1d4a <__ultoa_invert+0x5c>
    1d58:	f6 cf       	rjmp	.-20     	; 0x1d46 <__ultoa_invert+0x58>
    1d5a:	46 2f       	mov	r20, r22
    1d5c:	4f 70       	andi	r20, 0x0F	; 15
    1d5e:	40 5d       	subi	r20, 0xD0	; 208
    1d60:	4a 33       	cpi	r20, 0x3A	; 58
    1d62:	18 f0       	brcs	.+6      	; 0x1d6a <__ultoa_invert+0x7c>
    1d64:	49 5d       	subi	r20, 0xD9	; 217
    1d66:	31 fd       	sbrc	r19, 1
    1d68:	40 52       	subi	r20, 0x20	; 32
    1d6a:	41 93       	st	Z+, r20
    1d6c:	02 d0       	rcall	.+4      	; 0x1d72 <__ultoa_invert+0x84>
    1d6e:	a9 f7       	brne	.-22     	; 0x1d5a <__ultoa_invert+0x6c>
    1d70:	ea cf       	rjmp	.-44     	; 0x1d46 <__ultoa_invert+0x58>
    1d72:	b4 e0       	ldi	r27, 0x04	; 4
    1d74:	a6 95       	lsr	r26
    1d76:	97 95       	ror	r25
    1d78:	87 95       	ror	r24
    1d7a:	77 95       	ror	r23
    1d7c:	67 95       	ror	r22
    1d7e:	ba 95       	dec	r27
    1d80:	c9 f7       	brne	.-14     	; 0x1d74 <__ultoa_invert+0x86>
    1d82:	00 97       	sbiw	r24, 0x00	; 0
    1d84:	61 05       	cpc	r22, r1
    1d86:	71 05       	cpc	r23, r1
    1d88:	08 95       	ret
    1d8a:	9b 01       	movw	r18, r22
    1d8c:	ac 01       	movw	r20, r24
    1d8e:	0a 2e       	mov	r0, r26
    1d90:	06 94       	lsr	r0
    1d92:	57 95       	ror	r21
    1d94:	47 95       	ror	r20
    1d96:	37 95       	ror	r19
    1d98:	27 95       	ror	r18
    1d9a:	ba 95       	dec	r27
    1d9c:	c9 f7       	brne	.-14     	; 0x1d90 <__ultoa_invert+0xa2>
    1d9e:	62 0f       	add	r22, r18
    1da0:	73 1f       	adc	r23, r19
    1da2:	84 1f       	adc	r24, r20
    1da4:	95 1f       	adc	r25, r21
    1da6:	a0 1d       	adc	r26, r0
    1da8:	08 95       	ret

00001daa <__prologue_saves__>:
    1daa:	2f 92       	push	r2
    1dac:	3f 92       	push	r3
    1dae:	4f 92       	push	r4
    1db0:	5f 92       	push	r5
    1db2:	6f 92       	push	r6
    1db4:	7f 92       	push	r7
    1db6:	8f 92       	push	r8
    1db8:	9f 92       	push	r9
    1dba:	af 92       	push	r10
    1dbc:	bf 92       	push	r11
    1dbe:	cf 92       	push	r12
    1dc0:	df 92       	push	r13
    1dc2:	ef 92       	push	r14
    1dc4:	ff 92       	push	r15
    1dc6:	0f 93       	push	r16
    1dc8:	1f 93       	push	r17
    1dca:	cf 93       	push	r28
    1dcc:	df 93       	push	r29
    1dce:	cd b7       	in	r28, 0x3d	; 61
    1dd0:	de b7       	in	r29, 0x3e	; 62
    1dd2:	ca 1b       	sub	r28, r26
    1dd4:	db 0b       	sbc	r29, r27
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	09 94       	ijmp

00001de2 <__epilogue_restores__>:
    1de2:	2a 88       	ldd	r2, Y+18	; 0x12
    1de4:	39 88       	ldd	r3, Y+17	; 0x11
    1de6:	48 88       	ldd	r4, Y+16	; 0x10
    1de8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1dea:	6e 84       	ldd	r6, Y+14	; 0x0e
    1dec:	7d 84       	ldd	r7, Y+13	; 0x0d
    1dee:	8c 84       	ldd	r8, Y+12	; 0x0c
    1df0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1df2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1df4:	b9 84       	ldd	r11, Y+9	; 0x09
    1df6:	c8 84       	ldd	r12, Y+8	; 0x08
    1df8:	df 80       	ldd	r13, Y+7	; 0x07
    1dfa:	ee 80       	ldd	r14, Y+6	; 0x06
    1dfc:	fd 80       	ldd	r15, Y+5	; 0x05
    1dfe:	0c 81       	ldd	r16, Y+4	; 0x04
    1e00:	1b 81       	ldd	r17, Y+3	; 0x03
    1e02:	aa 81       	ldd	r26, Y+2	; 0x02
    1e04:	b9 81       	ldd	r27, Y+1	; 0x01
    1e06:	ce 0f       	add	r28, r30
    1e08:	d1 1d       	adc	r29, r1
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	ed 01       	movw	r28, r26
    1e16:	08 95       	ret

00001e18 <_exit>:
    1e18:	f8 94       	cli

00001e1a <__stop_program>:
    1e1a:	ff cf       	rjmp	.-2      	; 0x1e1a <__stop_program>
