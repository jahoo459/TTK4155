
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015a  00800100  00001fdc  00002070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fdc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  0080025a  0080025a  000021ca  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000021ca  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000328  00000000  00000000  00002226  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000413e  00000000  00000000  0000254e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001221  00000000  00000000  0000668c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000185e  00000000  00000000  000078ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007cc  00000000  00000000  0000910c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ee7  00000000  00000000  000098d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002099  00000000  00000000  0000a7bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000410  00000000  00000000  0000c858  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	fa c1       	rjmp	.+1012   	; 0x402 <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ef c1       	rjmp	.+990    	; 0x420 <__vector_16>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <JOY_calibrate+0x1aa>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ec ed       	ldi	r30, 0xDC	; 220
     37c:	ff e1       	ldi	r31, 0x1F	; 31
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 35       	cpi	r26, 0x5A	; 90
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	aa e5       	ldi	r26, 0x5A	; 90
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ab 38       	cpi	r26, 0x8B	; 139
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	a4 d0       	rcall	.+328    	; 0x4e4 <main>
     39c:	0c 94 ec 0f 	jmp	0x1fd8	; 0x1fd8 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	//printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 7b 02 	sts	0x027B, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 66 02 	sts	0x0266, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 65 02 	sts	0x0265, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 63 02 	sts	0x0263, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_3>:
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	8f 93       	push	r24
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 62 02 	sts	0x0262, r24
     414:	8f 91       	pop	r24
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <__vector_16>:
     420:	1f 92       	push	r1
     422:	0f 92       	push	r0
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	0f 92       	push	r0
     428:	11 24       	eor	r1, r1
     42a:	2f 93       	push	r18
     42c:	3f 93       	push	r19
     42e:	4f 93       	push	r20
     430:	5f 93       	push	r21
     432:	6f 93       	push	r22
     434:	7f 93       	push	r23
     436:	8f 93       	push	r24
     438:	9f 93       	push	r25
     43a:	af 93       	push	r26
     43c:	bf 93       	push	r27
     43e:	ef 93       	push	r30
     440:	ff 93       	push	r31
     442:	c8 d7       	rcall	.+3984   	; 0x13d4 <OLED_updateScreen>
     444:	ff 91       	pop	r31
     446:	ef 91       	pop	r30
     448:	bf 91       	pop	r27
     44a:	af 91       	pop	r26
     44c:	9f 91       	pop	r25
     44e:	8f 91       	pop	r24
     450:	7f 91       	pop	r23
     452:	6f 91       	pop	r22
     454:	5f 91       	pop	r21
     456:	4f 91       	pop	r20
     458:	3f 91       	pop	r19
     45a:	2f 91       	pop	r18
     45c:	0f 90       	pop	r0
     45e:	0f be       	out	0x3f, r0	; 63
     460:	0f 90       	pop	r0
     462:	1f 90       	pop	r1
     464:	18 95       	reti

00000466 <init>:
     466:	ef 92       	push	r14
     468:	ff 92       	push	r15
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
     46e:	1f e1       	ldi	r17, 0x1F	; 31
     470:	e1 2e       	mov	r14, r17
     472:	f1 2c       	mov	r15, r1
     474:	00 e0       	ldi	r16, 0x00	; 0
     476:	10 e0       	ldi	r17, 0x00	; 0
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	4b e4       	ldi	r20, 0x4B	; 75
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	60 e8       	ldi	r22, 0x80	; 128
     482:	75 e2       	ldi	r23, 0x25	; 37
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 11 0b 	call	0x1622	; 0x1622 <uartInit>
     48c:	88 e4       	ldi	r24, 0x48	; 72
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <puts>
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	5b d2       	rcall	.+1206   	; 0x94e <enableXMEM>
     498:	0e 94 df 0a 	call	0x15be	; 0x15be <SLI_init>
     49c:	6a d2       	rcall	.+1236   	; 0x972 <JOY_init>
     49e:	f0 d6       	rcall	.+3552   	; 0x1280 <OLED_init>
     4a0:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <SPI_init>
     4a4:	5d d4       	rcall	.+2234   	; 0xd60 <MCP2515_init>
     4a6:	b0 d0       	rcall	.+352    	; 0x608 <CAN_init>
     4a8:	8b b7       	in	r24, 0x3b	; 59
     4aa:	80 64       	ori	r24, 0x40	; 64
     4ac:	8b bf       	out	0x3b, r24	; 59
     4ae:	85 b7       	in	r24, 0x35	; 53
     4b0:	82 60       	ori	r24, 0x02	; 2
     4b2:	85 bf       	out	0x35, r24	; 53
     4b4:	85 b7       	in	r24, 0x35	; 53
     4b6:	8e 7f       	andi	r24, 0xFE	; 254
     4b8:	85 bf       	out	0x35, r24	; 53
     4ba:	8b 98       	cbi	0x11, 3	; 17
     4bc:	93 9a       	sbi	0x12, 3	; 18
     4be:	8b b7       	in	r24, 0x3b	; 59
     4c0:	80 68       	ori	r24, 0x80	; 128
     4c2:	8b bf       	out	0x3b, r24	; 59
     4c4:	85 b7       	in	r24, 0x35	; 53
     4c6:	88 60       	ori	r24, 0x08	; 8
     4c8:	85 bf       	out	0x35, r24	; 53
     4ca:	85 b7       	in	r24, 0x35	; 53
     4cc:	8b 7f       	andi	r24, 0xFB	; 251
     4ce:	85 bf       	out	0x35, r24	; 53
     4d0:	32 98       	cbi	0x06, 2	; 6
     4d2:	3a 98       	cbi	0x07, 2	; 7
     4d4:	b8 98       	cbi	0x17, 0	; 23
     4d6:	c0 98       	cbi	0x18, 0	; 24
     4d8:	78 94       	sei
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	ff 90       	pop	r15
     4e0:	ef 90       	pop	r14
     4e2:	08 95       	ret

000004e4 <main>:
/*
=======================MAIN FUNCTION=========================
*/

int main(void)
{
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	a1 97       	sbiw	r28, 0x21	; 33
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	cd bf       	out	0x3d, r28	; 61
	
	init();
     4f8:	b6 df       	rcall	.-148    	; 0x466 <init>
	
	OLED_bufferGoto(0,0);
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	8a d7       	rcall	.+3860   	; 0x1418 <OLED_bufferGoto>
	OLED_printString("I'm alive");
     504:	8e e7       	ldi	r24, 0x7E	; 126
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	c6 d7       	rcall	.+3980   	; 0x1496 <OLED_printString>
	OLED_bufferGoto(1,0);
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	82 d7       	rcall	.+3844   	; 0x1418 <OLED_bufferGoto>
	OLED_printString("I'm alive");
     514:	8e e7       	ldi	r24, 0x7E	; 126
     516:	91 e0       	ldi	r25, 0x01	; 1
     518:	be d7       	rcall	.+3964   	; 0x1496 <OLED_printString>
	OLED_bufferGoto(2,0);
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	7a d7       	rcall	.+3828   	; 0x1418 <OLED_bufferGoto>
	OLED_printString("I'm alive");
     524:	8e e7       	ldi	r24, 0x7E	; 126
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	b6 d7       	rcall	.+3948   	; 0x1496 <OLED_printString>
	OLED_bufferGoto(3,0);
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	83 e0       	ldi	r24, 0x03	; 3
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	72 d7       	rcall	.+3812   	; 0x1418 <OLED_bufferGoto>
	OLED_printString("I'm alive");
     534:	8e e7       	ldi	r24, 0x7E	; 126
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	ae d7       	rcall	.+3932   	; 0x1496 <OLED_printString>
	OLED_bufferGoto(4,0);
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	84 e0       	ldi	r24, 0x04	; 4
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	6a d7       	rcall	.+3796   	; 0x1418 <OLED_bufferGoto>
	OLED_printString("I'm alive");
     544:	8e e7       	ldi	r24, 0x7E	; 126
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	a6 d7       	rcall	.+3916   	; 0x1496 <OLED_printString>
	OLED_bufferGoto(5,0);
     54a:	60 e0       	ldi	r22, 0x00	; 0
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	85 e0       	ldi	r24, 0x05	; 5
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	62 d7       	rcall	.+3780   	; 0x1418 <OLED_bufferGoto>
	OLED_printString("I'm alive");
     554:	8e e7       	ldi	r24, 0x7E	; 126
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	9e d7       	rcall	.+3900   	; 0x1496 <OLED_printString>
	OLED_bufferGoto(6,20);
     55a:	64 e1       	ldi	r22, 0x14	; 20
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	86 e0       	ldi	r24, 0x06	; 6
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	5a d7       	rcall	.+3764   	; 0x1418 <OLED_bufferGoto>
	OLED_printString("I'm alive");
     564:	8e e7       	ldi	r24, 0x7E	; 126
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	96 d7       	rcall	.+3884   	; 0x1496 <OLED_printString>
	OLED_bufferGoto(7,30);
     56a:	6e e1       	ldi	r22, 0x1E	; 30
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	87 e0       	ldi	r24, 0x07	; 7
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	52 d7       	rcall	.+3748   	; 0x1418 <OLED_bufferGoto>
	OLED_printString("I'm alive");
     574:	8e e7       	ldi	r24, 0x7E	; 126
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	8e d7       	rcall	.+3868   	; 0x1496 <OLED_printString>
	
	
	
    while(1)
    {
		currPos = JOY_getPosition();
     57a:	0a e5       	ldi	r16, 0x5A	; 90
     57c:	12 e0       	ldi	r17, 0x02	; 2
		
		message2send.id = 23;
     57e:	0f 2e       	mov	r0, r31
     580:	f7 e1       	ldi	r31, 0x17	; 23
     582:	ef 2e       	mov	r14, r31
     584:	f1 2c       	mov	r15, r1
     586:	f0 2d       	mov	r31, r0
		message2send.length = 1;
     588:	dd 24       	eor	r13, r13
     58a:	d3 94       	inc	r13
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     58c:	0f 2e       	mov	r0, r31
     58e:	fb e0       	ldi	r31, 0x0B	; 11
     590:	cf 2e       	mov	r12, r31
     592:	f0 2d       	mov	r31, r0
	
	
	
    while(1)
    {
		currPos = JOY_getPosition();
     594:	71 d3       	rcall	.+1762   	; 0xc78 <JOY_getPosition>
     596:	f8 01       	movw	r30, r16
     598:	20 83       	st	Z, r18
     59a:	31 83       	std	Z+1, r19	; 0x01
     59c:	42 83       	std	Z+2, r20	; 0x02
     59e:	53 83       	std	Z+3, r21	; 0x03
     5a0:	64 83       	std	Z+4, r22	; 0x04
     5a2:	75 83       	std	Z+5, r23	; 0x05
     5a4:	86 83       	std	Z+6, r24	; 0x06
     5a6:	97 83       	std	Z+7, r25	; 0x07
		
		message2send.id = 23;
     5a8:	fa 82       	std	Y+2, r15	; 0x02
     5aa:	e9 82       	std	Y+1, r14	; 0x01
		message2send.length = 1;
     5ac:	db 82       	std	Y+3, r13	; 0x03
		message2send.data[0] = currPos.X_abs;
     5ae:	2c 83       	std	Y+4, r18	; 0x04
		
		CAN_sendMessage(&message2send, 0);
     5b0:	60 e0       	ldi	r22, 0x00	; 0
     5b2:	ce 01       	movw	r24, r28
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	3f d0       	rcall	.+126    	; 0x636 <CAN_sendMessage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 ef       	ldi	r25, 0xF0	; 240
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	f1 f7       	brne	.-4      	; 0x5bc <__stack+0xbd>
		_delay_ms(50);

		if(refreshOLEDFlag)
     5c0:	80 91 64 02 	lds	r24, 0x0264
     5c4:	81 11       	cpse	r24, r1
		{	
			OLED_updateScreen();
     5c6:	06 d7       	rcall	.+3596   	; 0x13d4 <OLED_updateScreen>
		}

		if(activateMenuFlag)
     5c8:	80 91 63 02 	lds	r24, 0x0263
     5cc:	81 11       	cpse	r24, r1
		{
			MENU_activate();
     5ce:	32 d6       	rcall	.+3172   	; 0x1234 <MENU_activate>
		}

		if(SPIreceivedFlag)
     5d0:	80 91 62 02 	lds	r24, 0x0262
     5d4:	88 23       	and	r24, r24
     5d6:	f1 f2       	breq	.-68     	; 0x594 <__stack+0x95>
		{
			
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
     5d8:	6c e2       	ldi	r22, 0x2C	; 44
     5da:	80 e0       	ldi	r24, 0x00	; 0
     5dc:	aa d3       	rcall	.+1876   	; 0xd32 <MCP2515_read>
     5de:	83 70       	andi	r24, 0x03	; 3
     5e0:	c9 f2       	breq	.-78     	; 0x594 <__stack+0x95>
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     5e2:	68 2f       	mov	r22, r24
     5e4:	ce 01       	movw	r24, r28
     5e6:	47 96       	adiw	r24, 0x17	; 23
     5e8:	8f d0       	rcall	.+286    	; 0x708 <CAN_receiveMessage>
     5ea:	fe 01       	movw	r30, r28
     5ec:	77 96       	adiw	r30, 0x17	; 23
     5ee:	de 01       	movw	r26, r28
     5f0:	1c 96       	adiw	r26, 0x0c	; 12
     5f2:	8c 2d       	mov	r24, r12
     5f4:	01 90       	ld	r0, Z+
     5f6:	0d 92       	st	X+, r0
     5f8:	8a 95       	dec	r24
     5fa:	e1 f7       	brne	.-8      	; 0x5f4 <__stack+0xf5>

				CAN_printMessage(&receivedMessage);
     5fc:	ce 01       	movw	r24, r28
     5fe:	0c 96       	adiw	r24, 0x0c	; 12
     600:	4c d1       	rcall	.+664    	; 0x89a <CAN_printMessage>
			
				SPIreceivedFlag = 0;
     602:	10 92 62 02 	sts	0x0262, r1
     606:	c6 cf       	rjmp	.-116    	; 0x594 <__stack+0x95>

00000608 <CAN_init>:
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	43 e0       	ldi	r20, 0x03	; 3
     612:	6b e2       	ldi	r22, 0x2B	; 43
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	af d3       	rcall	.+1886   	; 0xd78 <MCP2515_write>
     61a:	40 e6       	ldi	r20, 0x60	; 96
     61c:	60 e6       	ldi	r22, 0x60	; 96
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	aa d3       	rcall	.+1876   	; 0xd78 <MCP2515_write>
     624:	20 e0       	ldi	r18, 0x00	; 0
     626:	40 e8       	ldi	r20, 0x80	; 128
     628:	6f e0       	ldi	r22, 0x0F	; 15
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	b7 d3       	rcall	.+1902   	; 0xd9e <MCP2515_bitModify>
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	08 95       	ret

00000636 <CAN_sendMessage>:
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	cd b7       	in	r28, 0x3d	; 61
     63c:	de b7       	in	r29, 0x3e	; 62
     63e:	27 97       	sbiw	r28, 0x07	; 7
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
     64a:	9e 83       	std	Y+6, r25	; 0x06
     64c:	8d 83       	std	Y+5, r24	; 0x05
     64e:	6f 83       	std	Y+7, r22	; 0x07
     650:	8f 81       	ldd	r24, Y+7	; 0x07
     652:	88 2f       	mov	r24, r24
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	00 97       	sbiw	r24, 0x00	; 0
     658:	09 f0       	breq	.+2      	; 0x65c <CAN_sendMessage+0x26>
     65a:	4d c0       	rjmp	.+154    	; 0x6f6 <CAN_sendMessage+0xc0>
     65c:	8d 81       	ldd	r24, Y+5	; 0x05
     65e:	9e 81       	ldd	r25, Y+6	; 0x06
     660:	fc 01       	movw	r30, r24
     662:	80 81       	ld	r24, Z
     664:	91 81       	ldd	r25, Z+1	; 0x01
     666:	9c 83       	std	Y+4, r25	; 0x04
     668:	8b 83       	std	Y+3, r24	; 0x03
     66a:	8b 81       	ldd	r24, Y+3	; 0x03
     66c:	82 95       	swap	r24
     66e:	88 0f       	add	r24, r24
     670:	80 7e       	andi	r24, 0xE0	; 224
     672:	48 2f       	mov	r20, r24
     674:	62 e3       	ldi	r22, 0x32	; 50
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	7e d3       	rcall	.+1788   	; 0xd78 <MCP2515_write>
     67c:	8b 81       	ldd	r24, Y+3	; 0x03
     67e:	9c 81       	ldd	r25, Y+4	; 0x04
     680:	96 95       	lsr	r25
     682:	87 95       	ror	r24
     684:	96 95       	lsr	r25
     686:	87 95       	ror	r24
     688:	96 95       	lsr	r25
     68a:	87 95       	ror	r24
     68c:	48 2f       	mov	r20, r24
     68e:	61 e3       	ldi	r22, 0x31	; 49
     690:	80 e0       	ldi	r24, 0x00	; 0
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	71 d3       	rcall	.+1762   	; 0xd78 <MCP2515_write>
     696:	8d 81       	ldd	r24, Y+5	; 0x05
     698:	9e 81       	ldd	r25, Y+6	; 0x06
     69a:	fc 01       	movw	r30, r24
     69c:	82 81       	ldd	r24, Z+2	; 0x02
     69e:	48 2f       	mov	r20, r24
     6a0:	65 e3       	ldi	r22, 0x35	; 53
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	68 d3       	rcall	.+1744   	; 0xd78 <MCP2515_write>
     6a8:	86 e3       	ldi	r24, 0x36	; 54
     6aa:	89 83       	std	Y+1, r24	; 0x01
     6ac:	1a 82       	std	Y+2, r1	; 0x02
     6ae:	15 c0       	rjmp	.+42     	; 0x6da <CAN_sendMessage+0xa4>
     6b0:	8a 81       	ldd	r24, Y+2	; 0x02
     6b2:	88 2f       	mov	r24, r24
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	2d 81       	ldd	r18, Y+5	; 0x05
     6b8:	3e 81       	ldd	r19, Y+6	; 0x06
     6ba:	82 0f       	add	r24, r18
     6bc:	93 1f       	adc	r25, r19
     6be:	03 96       	adiw	r24, 0x03	; 3
     6c0:	fc 01       	movw	r30, r24
     6c2:	80 81       	ld	r24, Z
     6c4:	48 2f       	mov	r20, r24
     6c6:	69 81       	ldd	r22, Y+1	; 0x01
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	55 d3       	rcall	.+1706   	; 0xd78 <MCP2515_write>
     6ce:	89 81       	ldd	r24, Y+1	; 0x01
     6d0:	8f 5f       	subi	r24, 0xFF	; 255
     6d2:	89 83       	std	Y+1, r24	; 0x01
     6d4:	8a 81       	ldd	r24, Y+2	; 0x02
     6d6:	8f 5f       	subi	r24, 0xFF	; 255
     6d8:	8a 83       	std	Y+2, r24	; 0x02
     6da:	8d 81       	ldd	r24, Y+5	; 0x05
     6dc:	9e 81       	ldd	r25, Y+6	; 0x06
     6de:	fc 01       	movw	r30, r24
     6e0:	92 81       	ldd	r25, Z+2	; 0x02
     6e2:	8a 81       	ldd	r24, Y+2	; 0x02
     6e4:	89 17       	cp	r24, r25
     6e6:	20 f3       	brcs	.-56     	; 0x6b0 <CAN_sendMessage+0x7a>
     6e8:	2f ef       	ldi	r18, 0xFF	; 255
     6ea:	48 e0       	ldi	r20, 0x08	; 8
     6ec:	60 e3       	ldi	r22, 0x30	; 48
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	55 d3       	rcall	.+1706   	; 0xd9e <MCP2515_bitModify>
     6f4:	00 00       	nop
     6f6:	27 96       	adiw	r28, 0x07	; 7
     6f8:	0f b6       	in	r0, 0x3f	; 63
     6fa:	f8 94       	cli
     6fc:	de bf       	out	0x3e, r29	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	cd bf       	out	0x3d, r28	; 61
     702:	df 91       	pop	r29
     704:	cf 91       	pop	r28
     706:	08 95       	ret

00000708 <CAN_receiveMessage>:
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	cd b7       	in	r28, 0x3d	; 61
     712:	de b7       	in	r29, 0x3e	; 62
     714:	61 97       	sbiw	r28, 0x11	; 17
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	de bf       	out	0x3e, r29	; 62
     71c:	0f be       	out	0x3f, r0	; 63
     71e:	cd bf       	out	0x3d, r28	; 61
     720:	98 8b       	std	Y+16, r25	; 0x10
     722:	8f 87       	std	Y+15, r24	; 0x0f
     724:	69 8b       	std	Y+17, r22	; 0x11
     726:	89 89       	ldd	r24, Y+17	; 0x11
     728:	88 2f       	mov	r24, r24
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	82 30       	cpi	r24, 0x02	; 2
     72e:	91 05       	cpc	r25, r1
     730:	09 f4       	brne	.+2      	; 0x734 <CAN_receiveMessage+0x2c>
     732:	57 c0       	rjmp	.+174    	; 0x7e2 <CAN_receiveMessage+0xda>
     734:	83 30       	cpi	r24, 0x03	; 3
     736:	91 05       	cpc	r25, r1
     738:	21 f0       	breq	.+8      	; 0x742 <CAN_receiveMessage+0x3a>
     73a:	81 30       	cpi	r24, 0x01	; 1
     73c:	91 05       	cpc	r25, r1
     73e:	09 f0       	breq	.+2      	; 0x742 <CAN_receiveMessage+0x3a>
     740:	9f c0       	rjmp	.+318    	; 0x880 <CAN_receiveMessage+0x178>
     742:	61 e6       	ldi	r22, 0x61	; 97
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	f4 d2       	rcall	.+1512   	; 0xd32 <MCP2515_read>
     74a:	88 2f       	mov	r24, r24
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	9d 83       	std	Y+5, r25	; 0x05
     750:	8c 83       	std	Y+4, r24	; 0x04
     752:	8c 81       	ldd	r24, Y+4	; 0x04
     754:	9d 81       	ldd	r25, Y+5	; 0x05
     756:	8c 01       	movw	r16, r24
     758:	00 0f       	add	r16, r16
     75a:	11 1f       	adc	r17, r17
     75c:	00 0f       	add	r16, r16
     75e:	11 1f       	adc	r17, r17
     760:	00 0f       	add	r16, r16
     762:	11 1f       	adc	r17, r17
     764:	62 e6       	ldi	r22, 0x62	; 98
     766:	80 e0       	ldi	r24, 0x00	; 0
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	e3 d2       	rcall	.+1478   	; 0xd32 <MCP2515_read>
     76c:	82 95       	swap	r24
     76e:	86 95       	lsr	r24
     770:	87 70       	andi	r24, 0x07	; 7
     772:	88 2f       	mov	r24, r24
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	80 2b       	or	r24, r16
     778:	91 2b       	or	r25, r17
     77a:	9d 83       	std	Y+5, r25	; 0x05
     77c:	8c 83       	std	Y+4, r24	; 0x04
     77e:	65 e6       	ldi	r22, 0x65	; 101
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	d6 d2       	rcall	.+1452   	; 0xd32 <MCP2515_read>
     786:	8e 83       	std	Y+6, r24	; 0x06
     788:	86 e6       	ldi	r24, 0x66	; 102
     78a:	89 83       	std	Y+1, r24	; 0x01
     78c:	1a 82       	std	Y+2, r1	; 0x02
     78e:	14 c0       	rjmp	.+40     	; 0x7b8 <CAN_receiveMessage+0xb0>
     790:	8a 81       	ldd	r24, Y+2	; 0x02
     792:	08 2f       	mov	r16, r24
     794:	10 e0       	ldi	r17, 0x00	; 0
     796:	69 81       	ldd	r22, Y+1	; 0x01
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	ca d2       	rcall	.+1428   	; 0xd32 <MCP2515_read>
     79e:	28 2f       	mov	r18, r24
     7a0:	ce 01       	movw	r24, r28
     7a2:	07 96       	adiw	r24, 0x07	; 7
     7a4:	80 0f       	add	r24, r16
     7a6:	91 1f       	adc	r25, r17
     7a8:	fc 01       	movw	r30, r24
     7aa:	20 83       	st	Z, r18
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	8f 5f       	subi	r24, 0xFF	; 255
     7b0:	89 83       	std	Y+1, r24	; 0x01
     7b2:	8a 81       	ldd	r24, Y+2	; 0x02
     7b4:	8f 5f       	subi	r24, 0xFF	; 255
     7b6:	8a 83       	std	Y+2, r24	; 0x02
     7b8:	9e 81       	ldd	r25, Y+6	; 0x06
     7ba:	8a 81       	ldd	r24, Y+2	; 0x02
     7bc:	89 17       	cp	r24, r25
     7be:	40 f3       	brcs	.-48     	; 0x790 <CAN_receiveMessage+0x88>
     7c0:	20 e0       	ldi	r18, 0x00	; 0
     7c2:	41 e0       	ldi	r20, 0x01	; 1
     7c4:	6c e2       	ldi	r22, 0x2C	; 44
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	e9 d2       	rcall	.+1490   	; 0xd9e <MCP2515_bitModify>
     7cc:	8f 85       	ldd	r24, Y+15	; 0x0f
     7ce:	98 89       	ldd	r25, Y+16	; 0x10
     7d0:	2b e0       	ldi	r18, 0x0B	; 11
     7d2:	fe 01       	movw	r30, r28
     7d4:	34 96       	adiw	r30, 0x04	; 4
     7d6:	dc 01       	movw	r26, r24
     7d8:	01 90       	ld	r0, Z+
     7da:	0d 92       	st	X+, r0
     7dc:	2a 95       	dec	r18
     7de:	e1 f7       	brne	.-8      	; 0x7d8 <CAN_receiveMessage+0xd0>
     7e0:	4f c0       	rjmp	.+158    	; 0x880 <CAN_receiveMessage+0x178>
     7e2:	61 e7       	ldi	r22, 0x71	; 113
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	a4 d2       	rcall	.+1352   	; 0xd32 <MCP2515_read>
     7ea:	88 2f       	mov	r24, r24
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	9d 83       	std	Y+5, r25	; 0x05
     7f0:	8c 83       	std	Y+4, r24	; 0x04
     7f2:	8c 81       	ldd	r24, Y+4	; 0x04
     7f4:	9d 81       	ldd	r25, Y+5	; 0x05
     7f6:	8c 01       	movw	r16, r24
     7f8:	00 0f       	add	r16, r16
     7fa:	11 1f       	adc	r17, r17
     7fc:	00 0f       	add	r16, r16
     7fe:	11 1f       	adc	r17, r17
     800:	00 0f       	add	r16, r16
     802:	11 1f       	adc	r17, r17
     804:	62 e7       	ldi	r22, 0x72	; 114
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	93 d2       	rcall	.+1318   	; 0xd32 <MCP2515_read>
     80c:	82 95       	swap	r24
     80e:	86 95       	lsr	r24
     810:	87 70       	andi	r24, 0x07	; 7
     812:	88 2f       	mov	r24, r24
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	80 2b       	or	r24, r16
     818:	91 2b       	or	r25, r17
     81a:	9d 83       	std	Y+5, r25	; 0x05
     81c:	8c 83       	std	Y+4, r24	; 0x04
     81e:	65 e7       	ldi	r22, 0x75	; 117
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	86 d2       	rcall	.+1292   	; 0xd32 <MCP2515_read>
     826:	8e 83       	std	Y+6, r24	; 0x06
     828:	86 e7       	ldi	r24, 0x76	; 118
     82a:	89 83       	std	Y+1, r24	; 0x01
     82c:	1b 82       	std	Y+3, r1	; 0x03
     82e:	14 c0       	rjmp	.+40     	; 0x858 <CAN_receiveMessage+0x150>
     830:	8b 81       	ldd	r24, Y+3	; 0x03
     832:	08 2f       	mov	r16, r24
     834:	10 e0       	ldi	r17, 0x00	; 0
     836:	69 81       	ldd	r22, Y+1	; 0x01
     838:	80 e0       	ldi	r24, 0x00	; 0
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	7a d2       	rcall	.+1268   	; 0xd32 <MCP2515_read>
     83e:	28 2f       	mov	r18, r24
     840:	ce 01       	movw	r24, r28
     842:	07 96       	adiw	r24, 0x07	; 7
     844:	80 0f       	add	r24, r16
     846:	91 1f       	adc	r25, r17
     848:	fc 01       	movw	r30, r24
     84a:	20 83       	st	Z, r18
     84c:	89 81       	ldd	r24, Y+1	; 0x01
     84e:	8f 5f       	subi	r24, 0xFF	; 255
     850:	89 83       	std	Y+1, r24	; 0x01
     852:	8b 81       	ldd	r24, Y+3	; 0x03
     854:	8f 5f       	subi	r24, 0xFF	; 255
     856:	8b 83       	std	Y+3, r24	; 0x03
     858:	9e 81       	ldd	r25, Y+6	; 0x06
     85a:	8b 81       	ldd	r24, Y+3	; 0x03
     85c:	89 17       	cp	r24, r25
     85e:	40 f3       	brcs	.-48     	; 0x830 <CAN_receiveMessage+0x128>
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	42 e0       	ldi	r20, 0x02	; 2
     864:	6c e2       	ldi	r22, 0x2C	; 44
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	99 d2       	rcall	.+1330   	; 0xd9e <MCP2515_bitModify>
     86c:	8f 85       	ldd	r24, Y+15	; 0x0f
     86e:	98 89       	ldd	r25, Y+16	; 0x10
     870:	2b e0       	ldi	r18, 0x0B	; 11
     872:	fe 01       	movw	r30, r28
     874:	34 96       	adiw	r30, 0x04	; 4
     876:	dc 01       	movw	r26, r24
     878:	01 90       	ld	r0, Z+
     87a:	0d 92       	st	X+, r0
     87c:	2a 95       	dec	r18
     87e:	e1 f7       	brne	.-8      	; 0x878 <CAN_receiveMessage+0x170>
     880:	8f 85       	ldd	r24, Y+15	; 0x0f
     882:	98 89       	ldd	r25, Y+16	; 0x10
     884:	61 96       	adiw	r28, 0x11	; 17
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	de bf       	out	0x3e, r29	; 62
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	cd bf       	out	0x3d, r28	; 61
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	1f 91       	pop	r17
     896:	0f 91       	pop	r16
     898:	08 95       	ret

0000089a <CAN_printMessage>:
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	00 d0       	rcall	.+0      	; 0x8a0 <CAN_printMessage+0x6>
     8a0:	1f 92       	push	r1
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
     8a6:	9b 83       	std	Y+3, r25	; 0x03
     8a8:	8a 83       	std	Y+2, r24	; 0x02
     8aa:	8a 81       	ldd	r24, Y+2	; 0x02
     8ac:	9b 81       	ldd	r25, Y+3	; 0x03
     8ae:	fc 01       	movw	r30, r24
     8b0:	82 81       	ldd	r24, Z+2	; 0x02
     8b2:	28 2f       	mov	r18, r24
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	8a 81       	ldd	r24, Y+2	; 0x02
     8b8:	9b 81       	ldd	r25, Y+3	; 0x03
     8ba:	fc 01       	movw	r30, r24
     8bc:	80 81       	ld	r24, Z
     8be:	91 81       	ldd	r25, Z+1	; 0x01
     8c0:	43 2f       	mov	r20, r19
     8c2:	4f 93       	push	r20
     8c4:	2f 93       	push	r18
     8c6:	29 2f       	mov	r18, r25
     8c8:	2f 93       	push	r18
     8ca:	8f 93       	push	r24
     8cc:	88 e1       	ldi	r24, 0x18	; 24
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	89 2f       	mov	r24, r25
     8d2:	8f 93       	push	r24
     8d4:	88 e1       	ldi	r24, 0x18	; 24
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	8f 93       	push	r24
     8da:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <printf>
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	19 82       	std	Y+1, r1	; 0x01
     8ec:	1f c0       	rjmp	.+62     	; 0x92c <CAN_printMessage+0x92>
     8ee:	89 81       	ldd	r24, Y+1	; 0x01
     8f0:	88 2f       	mov	r24, r24
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	2a 81       	ldd	r18, Y+2	; 0x02
     8f6:	3b 81       	ldd	r19, Y+3	; 0x03
     8f8:	82 0f       	add	r24, r18
     8fa:	93 1f       	adc	r25, r19
     8fc:	03 96       	adiw	r24, 0x03	; 3
     8fe:	fc 01       	movw	r30, r24
     900:	80 81       	ld	r24, Z
     902:	88 2f       	mov	r24, r24
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	29 2f       	mov	r18, r25
     908:	2f 93       	push	r18
     90a:	8f 93       	push	r24
     90c:	84 e4       	ldi	r24, 0x44	; 68
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	89 2f       	mov	r24, r25
     912:	8f 93       	push	r24
     914:	84 e4       	ldi	r24, 0x44	; 68
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	8f 93       	push	r24
     91a:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <printf>
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	89 81       	ldd	r24, Y+1	; 0x01
     928:	8f 5f       	subi	r24, 0xFF	; 255
     92a:	89 83       	std	Y+1, r24	; 0x01
     92c:	8a 81       	ldd	r24, Y+2	; 0x02
     92e:	9b 81       	ldd	r25, Y+3	; 0x03
     930:	fc 01       	movw	r30, r24
     932:	92 81       	ldd	r25, Z+2	; 0x02
     934:	89 81       	ldd	r24, Y+1	; 0x01
     936:	89 17       	cp	r24, r25
     938:	d0 f2       	brcs	.-76     	; 0x8ee <CAN_printMessage+0x54>
     93a:	8a e0       	ldi	r24, 0x0A	; 10
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <putchar>
     942:	0f 90       	pop	r0
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	df 91       	pop	r29
     94a:	cf 91       	pop	r28
     94c:	08 95       	ret

0000094e <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     94e:	95 b7       	in	r25, 0x35	; 53
     950:	90 68       	ori	r25, 0x80	; 128
     952:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     954:	96 b7       	in	r25, 0x36	; 54
     956:	98 60       	ori	r25, 0x08	; 8
     958:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     95a:	88 23       	and	r24, r24
     95c:	19 f0       	breq	.+6      	; 0x964 <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     95e:	80 b7       	in	r24, 0x30	; 48
     960:	80 62       	ori	r24, 0x20	; 32
     962:	80 bf       	out	0x30, r24	; 48
     964:	08 95       	ret

00000966 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     966:	fc 01       	movw	r30, r24
     968:	80 81       	ld	r24, Z
	return val;
}
     96a:	08 95       	ret

0000096c <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     96c:	fc 01       	movw	r30, r24
     96e:	60 83       	st	Z, r22
     970:	08 95       	ret

00000972 <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     972:	10 92 69 02 	sts	0x0269, r1
     976:	10 92 68 02 	sts	0x0268, r1
	currentPosition.Y_abs = 0;
     97a:	10 92 6b 02 	sts	0x026B, r1
     97e:	10 92 6a 02 	sts	0x026A, r1
	currentPosition.X_per = 0;
     982:	10 92 6d 02 	sts	0x026D, r1
     986:	10 92 6c 02 	sts	0x026C, r1
	currentPosition.Y_per = 0;
     98a:	10 92 6f 02 	sts	0x026F, r1
     98e:	10 92 6e 02 	sts	0x026E, r1
	currentDirection = CENTRE;
     992:	10 92 67 02 	sts	0x0267, r1
     996:	08 95       	ret

00000998 <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     99c:	59 d4       	rcall	.+2226   	; 0x1250 <OLED_clear>
     99e:	60 e0       	ldi	r22, 0x00	; 0
	OLED_bufferGoto(0,0);
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	38 d5       	rcall	.+2672   	; 0x1418 <OLED_bufferGoto>
     9a8:	88 e8       	ldi	r24, 0x88	; 136
     9aa:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     9ac:	74 d5       	rcall	.+2792   	; 0x1496 <OLED_printString>
     9ae:	2f ef       	ldi	r18, 0xFF	; 255
     9b0:	8f ef       	ldi	r24, 0xFF	; 255
     9b2:	92 e0       	ldi	r25, 0x02	; 2
     9b4:	21 50       	subi	r18, 0x01	; 1
     9b6:	80 40       	sbci	r24, 0x00	; 0
     9b8:	90 40       	sbci	r25, 0x00	; 0
     9ba:	e1 f7       	brne	.-8      	; 0x9b4 <JOY_calibrate+0x1c>
     9bc:	00 c0       	rjmp	.+0      	; 0x9be <JOY_calibrate+0x26>
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <JOY_calibrate+0x28>
     9c0:	c4 e1       	ldi	r28, 0x14	; 20
     9c2:	d0 e0       	ldi	r29, 0x00	; 0
     9c4:	60 91 06 01 	lds	r22, 0x0106
     9c8:	70 91 07 01 	lds	r23, 0x0107
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	42 d6       	rcall	.+3204   	; 0x1654 <ADC_request>
     9d0:	2f ef       	ldi	r18, 0xFF	; 255
     9d2:	8f e1       	ldi	r24, 0x1F	; 31
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	21 50       	subi	r18, 0x01	; 1
     9d8:	80 40       	sbci	r24, 0x00	; 0
     9da:	90 40       	sbci	r25, 0x00	; 0
     9dc:	e1 f7       	brne	.-8      	; 0x9d6 <JOY_calibrate+0x3e>
     9de:	00 c0       	rjmp	.+0      	; 0x9e0 <JOY_calibrate+0x48>
     9e0:	00 00       	nop
     9e2:	80 91 06 01 	lds	r24, 0x0106
     9e6:	90 91 07 01 	lds	r25, 0x0107
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     9ea:	58 d6       	rcall	.+3248   	; 0x169c <ADC_read>
     9ec:	90 91 0d 01 	lds	r25, 0x010D
     9f0:	98 17       	cp	r25, r24
     9f2:	10 f4       	brcc	.+4      	; 0x9f8 <JOY_calibrate+0x60>
     9f4:	80 93 0d 01 	sts	0x010D, r24
		
		if(temp > calR) {calR = temp;}
     9f8:	21 97       	sbiw	r28, 0x01	; 1
     9fa:	20 97       	sbiw	r28, 0x00	; 0
     9fc:	19 f7       	brne	.-58     	; 0x9c4 <JOY_calibrate+0x2c>
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	81 e0       	ldi	r24, 0x01	; 1
	OLED_bufferGoto(0,0);
	OLED_printString("JOY RIGHT");
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	08 d5       	rcall	.+2576   	; 0x1418 <OLED_bufferGoto>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_bufferGoto(1,0);
     a08:	82 e9       	ldi	r24, 0x92	; 146
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	44 d5       	rcall	.+2696   	; 0x1496 <OLED_printString>
     a0e:	2f ef       	ldi	r18, 0xFF	; 255
     a10:	8f ef       	ldi	r24, 0xFF	; 255
     a12:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("JOY LEFT");
     a14:	21 50       	subi	r18, 0x01	; 1
     a16:	80 40       	sbci	r24, 0x00	; 0
     a18:	90 40       	sbci	r25, 0x00	; 0
     a1a:	e1 f7       	brne	.-8      	; 0xa14 <JOY_calibrate+0x7c>
     a1c:	00 c0       	rjmp	.+0      	; 0xa1e <JOY_calibrate+0x86>
     a1e:	00 c0       	rjmp	.+0      	; 0xa20 <JOY_calibrate+0x88>
     a20:	c4 e1       	ldi	r28, 0x14	; 20
     a22:	d0 e0       	ldi	r29, 0x00	; 0
     a24:	60 91 06 01 	lds	r22, 0x0106
     a28:	70 91 07 01 	lds	r23, 0x0107
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	12 d6       	rcall	.+3108   	; 0x1654 <ADC_request>
     a30:	2f ef       	ldi	r18, 0xFF	; 255
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     a32:	8f e1       	ldi	r24, 0x1F	; 31
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	21 50       	subi	r18, 0x01	; 1
     a38:	80 40       	sbci	r24, 0x00	; 0
     a3a:	90 40       	sbci	r25, 0x00	; 0
     a3c:	e1 f7       	brne	.-8      	; 0xa36 <JOY_calibrate+0x9e>
     a3e:	00 c0       	rjmp	.+0      	; 0xa40 <JOY_calibrate+0xa8>
     a40:	00 00       	nop
     a42:	80 91 06 01 	lds	r24, 0x0106
     a46:	90 91 07 01 	lds	r25, 0x0107
     a4a:	28 d6       	rcall	.+3152   	; 0x169c <ADC_read>
     a4c:	90 91 0c 01 	lds	r25, 0x010C
     a50:	89 17       	cp	r24, r25
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     a52:	10 f4       	brcc	.+4      	; 0xa58 <JOY_calibrate+0xc0>
     a54:	80 93 0c 01 	sts	0x010C, r24
     a58:	21 97       	sbiw	r28, 0x01	; 1
     a5a:	20 97       	sbiw	r28, 0x00	; 0
     a5c:	19 f7       	brne	.-58     	; 0xa24 <JOY_calibrate+0x8c>
		
		if(temp < calL) {calL = temp;}
     a5e:	60 e0       	ldi	r22, 0x00	; 0
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	82 e0       	ldi	r24, 0x02	; 2
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	d8 d4       	rcall	.+2480   	; 0x1418 <OLED_bufferGoto>
     a68:	8b e9       	ldi	r24, 0x9B	; 155
     a6a:	91 e0       	ldi	r25, 0x01	; 1
	OLED_bufferGoto(1,0);
	OLED_printString("JOY LEFT");
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     a6c:	14 d5       	rcall	.+2600   	; 0x1496 <OLED_printString>
     a6e:	2f ef       	ldi	r18, 0xFF	; 255
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_bufferGoto(2,0);
     a70:	8f ef       	ldi	r24, 0xFF	; 255
     a72:	92 e0       	ldi	r25, 0x02	; 2
     a74:	21 50       	subi	r18, 0x01	; 1
     a76:	80 40       	sbci	r24, 0x00	; 0
     a78:	90 40       	sbci	r25, 0x00	; 0
     a7a:	e1 f7       	brne	.-8      	; 0xa74 <JOY_calibrate+0xdc>
	OLED_printString("JOY UP");
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <JOY_calibrate+0xe6>
     a7e:	00 c0       	rjmp	.+0      	; 0xa80 <JOY_calibrate+0xe8>
     a80:	c4 e1       	ldi	r28, 0x14	; 20
     a82:	d0 e0       	ldi	r29, 0x00	; 0
     a84:	60 91 06 01 	lds	r22, 0x0106
     a88:	70 91 07 01 	lds	r23, 0x0107
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	e2 d5       	rcall	.+3012   	; 0x1654 <ADC_request>
     a90:	2f ef       	ldi	r18, 0xFF	; 255
     a92:	8f e1       	ldi	r24, 0x1F	; 31
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	21 50       	subi	r18, 0x01	; 1
     a98:	80 40       	sbci	r24, 0x00	; 0
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     a9a:	90 40       	sbci	r25, 0x00	; 0
     a9c:	e1 f7       	brne	.-8      	; 0xa96 <JOY_calibrate+0xfe>
     a9e:	00 c0       	rjmp	.+0      	; 0xaa0 <JOY_calibrate+0x108>
     aa0:	00 00       	nop
     aa2:	80 91 06 01 	lds	r24, 0x0106
     aa6:	90 91 07 01 	lds	r25, 0x0107
     aaa:	f8 d5       	rcall	.+3056   	; 0x169c <ADC_read>
     aac:	90 91 0b 01 	lds	r25, 0x010B
     ab0:	98 17       	cp	r25, r24
     ab2:	10 f4       	brcc	.+4      	; 0xab8 <JOY_calibrate+0x120>
     ab4:	80 93 0b 01 	sts	0x010B, r24
     ab8:	21 97       	sbiw	r28, 0x01	; 1
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     aba:	20 97       	sbiw	r28, 0x00	; 0
     abc:	19 f7       	brne	.-58     	; 0xa84 <JOY_calibrate+0xec>
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	83 e0       	ldi	r24, 0x03	; 3
     ac4:	90 e0       	ldi	r25, 0x00	; 0
		
		if(temp > calUp) {calUp = temp;}
     ac6:	a8 d4       	rcall	.+2384   	; 0x1418 <OLED_bufferGoto>
     ac8:	82 ea       	ldi	r24, 0xA2	; 162
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	e4 d4       	rcall	.+2504   	; 0x1496 <OLED_printString>
     ace:	2f ef       	ldi	r18, 0xFF	; 255
     ad0:	8f ef       	ldi	r24, 0xFF	; 255
     ad2:	92 e0       	ldi	r25, 0x02	; 2
	OLED_bufferGoto(2,0);
	OLED_printString("JOY UP");
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     ad4:	21 50       	subi	r18, 0x01	; 1
     ad6:	80 40       	sbci	r24, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_bufferGoto(3,0);
     ad8:	90 40       	sbci	r25, 0x00	; 0
     ada:	e1 f7       	brne	.-8      	; 0xad4 <JOY_calibrate+0x13c>
     adc:	00 c0       	rjmp	.+0      	; 0xade <JOY_calibrate+0x146>
     ade:	00 c0       	rjmp	.+0      	; 0xae0 <JOY_calibrate+0x148>
     ae0:	c4 e1       	ldi	r28, 0x14	; 20
     ae2:	d0 e0       	ldi	r29, 0x00	; 0
	OLED_printString("JOY DOWN");
     ae4:	60 91 06 01 	lds	r22, 0x0106
     ae8:	70 91 07 01 	lds	r23, 0x0107
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	b2 d5       	rcall	.+2916   	; 0x1654 <ADC_request>
     af0:	2f ef       	ldi	r18, 0xFF	; 255
     af2:	8f e1       	ldi	r24, 0x1F	; 31
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	21 50       	subi	r18, 0x01	; 1
     af8:	80 40       	sbci	r24, 0x00	; 0
     afa:	90 40       	sbci	r25, 0x00	; 0
     afc:	e1 f7       	brne	.-8      	; 0xaf6 <JOY_calibrate+0x15e>
     afe:	00 c0       	rjmp	.+0      	; 0xb00 <JOY_calibrate+0x168>
     b00:	00 00       	nop
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     b02:	80 91 06 01 	lds	r24, 0x0106
     b06:	90 91 07 01 	lds	r25, 0x0107
     b0a:	c8 d5       	rcall	.+2960   	; 0x169c <ADC_read>
     b0c:	90 91 0a 01 	lds	r25, 0x010A
     b10:	89 17       	cp	r24, r25
     b12:	10 f4       	brcc	.+4      	; 0xb18 <JOY_calibrate+0x180>
     b14:	80 93 0a 01 	sts	0x010A, r24
     b18:	21 97       	sbiw	r28, 0x01	; 1
     b1a:	20 97       	sbiw	r28, 0x00	; 0
     b1c:	19 f7       	brne	.-58     	; 0xae4 <JOY_calibrate+0x14c>
     b1e:	20 91 0b 01 	lds	r18, 0x010B
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     b22:	80 91 0a 01 	lds	r24, 0x010A
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	28 1b       	sub	r18, r24
     b2a:	31 09       	sbc	r19, r1
     b2c:	c9 01       	movw	r24, r18
		
		if(temp < calDown) {calDown = temp;}
     b2e:	99 23       	and	r25, r25
     b30:	0c f4       	brge	.+2      	; 0xb34 <JOY_calibrate+0x19c>
     b32:	01 96       	adiw	r24, 0x01	; 1
     b34:	95 95       	asr	r25
     b36:	87 95       	ror	r24
     b38:	80 93 09 01 	sts	0x0109, r24
	OLED_bufferGoto(3,0);
	OLED_printString("JOY DOWN");
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     b3c:	20 91 0d 01 	lds	r18, 0x010D
	}
	
	
	//printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
	
	meanVert = (calUp - calDown)/2;
     b40:	80 91 0c 01 	lds	r24, 0x010C
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	28 1b       	sub	r18, r24
     b48:	31 09       	sbc	r19, r1
     b4a:	c9 01       	movw	r24, r18
     b4c:	99 23       	and	r25, r25
     b4e:	0c f4       	brge	.+2      	; 0xb52 <JOY_calibrate+0x1ba>
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	95 95       	asr	r25
     b54:	87 95       	ror	r24
     b56:	80 93 08 01 	sts	0x0108, r24
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	70 e0       	ldi	r23, 0x00	; 0
	meanHor = (calR - calL)/2;
     b5e:	84 e0       	ldi	r24, 0x04	; 4
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	5a d4       	rcall	.+2228   	; 0x1418 <OLED_bufferGoto>
     b64:	8b ea       	ldi	r24, 0xAB	; 171
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	96 d4       	rcall	.+2348   	; 0x1496 <OLED_printString>
     b6a:	2f ef       	ldi	r18, 0xFF	; 255
     b6c:	8f ef       	ldi	r24, 0xFF	; 255
     b6e:	9e e0       	ldi	r25, 0x0E	; 14
     b70:	21 50       	subi	r18, 0x01	; 1
     b72:	80 40       	sbci	r24, 0x00	; 0
     b74:	90 40       	sbci	r25, 0x00	; 0
     b76:	e1 f7       	brne	.-8      	; 0xb70 <JOY_calibrate+0x1d8>
     b78:	00 c0       	rjmp	.+0      	; 0xb7a <JOY_calibrate+0x1e2>
     b7a:	00 00       	nop
	
	OLED_bufferGoto(4,0);
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	08 95       	ret

00000b82 <JOY_requestCurrentPosition>:
     b82:	88 37       	cpi	r24, 0x78	; 120
     b84:	39 f4       	brne	.+14     	; 0xb94 <JOY_requestCurrentPosition+0x12>
     b86:	60 91 06 01 	lds	r22, 0x0106
	OLED_printString("CALIB DONE");
     b8a:	70 91 07 01 	lds	r23, 0x0107
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	61 c5       	rjmp	.+2754   	; 0x1654 <ADC_request>
     b92:	08 95       	ret
     b94:	89 37       	cpi	r24, 0x79	; 121
     b96:	31 f4       	brne	.+12     	; 0xba4 <JOY_requestCurrentPosition+0x22>
     b98:	60 91 06 01 	lds	r22, 0x0106
     b9c:	70 91 07 01 	lds	r23, 0x0107
     ba0:	81 e0       	ldi	r24, 0x01	; 1
	//printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
	_delay_ms(1000);
}
     ba2:	58 c5       	rjmp	.+2736   	; 0x1654 <ADC_request>
     ba4:	08 95       	ret

00000ba6 <JOY_updatePosition>:
     ba6:	88 37       	cpi	r24, 0x78	; 120
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
	{
		ADC_request(Y_channel, adc_ext_ram);
     ba8:	f9 f4       	brne	.+62     	; 0xbe8 <JOY_updatePosition+0x42>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     baa:	80 91 06 01 	lds	r24, 0x0106
     bae:	90 91 07 01 	lds	r25, 0x0107
     bb2:	74 d5       	rcall	.+2792   	; 0x169c <ADC_read>
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	90 93 69 02 	sts	0x0269, r25
     bba:	80 93 68 02 	sts	0x0268, r24
     bbe:	20 91 08 01 	lds	r18, 0x0108
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     bc2:	60 91 08 01 	lds	r22, 0x0108
     bc6:	ac 01       	movw	r20, r24
     bc8:	42 1b       	sub	r20, r18
     bca:	51 09       	sbc	r21, r1
     bcc:	9a 01       	movw	r18, r20
     bce:	44 e6       	ldi	r20, 0x64	; 100
     bd0:	42 9f       	mul	r20, r18
     bd2:	c0 01       	movw	r24, r0
     bd4:	43 9f       	mul	r20, r19
     bd6:	90 0d       	add	r25, r0
     bd8:	11 24       	eor	r1, r1
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	61 d5       	rcall	.+2754   	; 0x16a0 <__divmodhi4>
     bde:	70 93 6d 02 	sts	0x026D, r23
     be2:	60 93 6c 02 	sts	0x026C, r22
     be6:	08 95       	ret
     be8:	89 37       	cpi	r24, 0x79	; 121
     bea:	f1 f4       	brne	.+60     	; 0xc28 <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     bec:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     bf0:	90 91 07 01 	lds	r25, 0x0107
     bf4:	53 d5       	rcall	.+2726   	; 0x169c <ADC_read>
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	90 93 6b 02 	sts	0x026B, r25
     bfc:	80 93 6a 02 	sts	0x026A, r24
     c00:	20 91 09 01 	lds	r18, 0x0109
     c04:	60 91 09 01 	lds	r22, 0x0109
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     c08:	ac 01       	movw	r20, r24
     c0a:	42 1b       	sub	r20, r18
     c0c:	51 09       	sbc	r21, r1
     c0e:	9a 01       	movw	r18, r20
     c10:	44 e6       	ldi	r20, 0x64	; 100
     c12:	42 9f       	mul	r20, r18
     c14:	c0 01       	movw	r24, r0
     c16:	43 9f       	mul	r20, r19
     c18:	90 0d       	add	r25, r0
     c1a:	11 24       	eor	r1, r1
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	40 d5       	rcall	.+2688   	; 0x16a0 <__divmodhi4>
     c20:	70 93 6f 02 	sts	0x026F, r23
     c24:	60 93 6e 02 	sts	0x026E, r22
     c28:	08 95       	ret

00000c2a <JOY_calculateDirection>:
     c2a:	80 91 6c 02 	lds	r24, 0x026C
     c2e:	90 91 6d 02 	lds	r25, 0x026D
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     c32:	8b 35       	cpi	r24, 0x5B	; 91
     c34:	91 05       	cpc	r25, r1
     c36:	24 f0       	brlt	.+8      	; 0xc40 <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     c38:	83 e0       	ldi	r24, 0x03	; 3
     c3a:	80 93 67 02 	sts	0x0267, r24
     c3e:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     c40:	86 3a       	cpi	r24, 0xA6	; 166
     c42:	9f 4f       	sbci	r25, 0xFF	; 255
     c44:	24 f4       	brge	.+8      	; 0xc4e <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     c46:	84 e0       	ldi	r24, 0x04	; 4
     c48:	80 93 67 02 	sts	0x0267, r24
     c4c:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     c4e:	80 91 6e 02 	lds	r24, 0x026E
     c52:	90 91 6f 02 	lds	r25, 0x026F
     c56:	8b 35       	cpi	r24, 0x5B	; 91
     c58:	91 05       	cpc	r25, r1
     c5a:	24 f0       	brlt	.+8      	; 0xc64 <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	80 93 67 02 	sts	0x0267, r24
     c62:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     c64:	86 3a       	cpi	r24, 0xA6	; 166
     c66:	9f 4f       	sbci	r25, 0xFF	; 255
     c68:	24 f4       	brge	.+8      	; 0xc72 <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	80 93 67 02 	sts	0x0267, r24
     c70:	08 95       	ret
	else{currentDirection = CENTRE;}
     c72:	10 92 67 02 	sts	0x0267, r1
     c76:	08 95       	ret

00000c78 <JOY_getPosition>:

//------------------------------------------------------------------------------
// This function returns the current position of the Joystick.
// It is a struct with the four parameters X_abs, Y_abs, X_per and Y_per
JOY_position_t JOY_getPosition()
{
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
     c80:	28 97       	sbiw	r28, 0x08	; 8
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	f8 94       	cli
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	0f be       	out	0x3f, r0	; 63
     c8a:	cd bf       	out	0x3d, r28	; 61
	JOY_requestCurrentPosition('x');
     c8c:	88 e7       	ldi	r24, 0x78	; 120
     c8e:	79 df       	rcall	.-270    	; 0xb82 <JOY_requestCurrentPosition>
     c90:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c92:	8a 95       	dec	r24
     c94:	f1 f7       	brne	.-4      	; 0xc92 <JOY_getPosition+0x1a>
     c96:	00 00       	nop
     c98:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     c9a:	85 df       	rcall	.-246    	; 0xba6 <JOY_updatePosition>
     c9c:	89 e7       	ldi	r24, 0x79	; 121
     c9e:	71 df       	rcall	.-286    	; 0xb82 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     ca0:	82 e6       	ldi	r24, 0x62	; 98
     ca2:	8a 95       	dec	r24
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <JOY_getPosition+0x2a>
     ca6:	00 00       	nop
     ca8:	89 e7       	ldi	r24, 0x79	; 121
     caa:	7d df       	rcall	.-262    	; 0xba6 <JOY_updatePosition>
     cac:	88 e0       	ldi	r24, 0x08	; 8
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     cae:	e8 e6       	ldi	r30, 0x68	; 104
     cb0:	f2 e0       	ldi	r31, 0x02	; 2
     cb2:	de 01       	movw	r26, r28
	return currentPosition;
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	01 90       	ld	r0, Z+
     cb8:	0d 92       	st	X+, r0
     cba:	8a 95       	dec	r24
     cbc:	e1 f7       	brne	.-8      	; 0xcb6 <JOY_getPosition+0x3e>
     cbe:	29 81       	ldd	r18, Y+1	; 0x01
     cc0:	3a 81       	ldd	r19, Y+2	; 0x02
     cc2:	4b 81       	ldd	r20, Y+3	; 0x03
     cc4:	5c 81       	ldd	r21, Y+4	; 0x04
     cc6:	6d 81       	ldd	r22, Y+5	; 0x05
     cc8:	7e 81       	ldd	r23, Y+6	; 0x06
     cca:	8f 81       	ldd	r24, Y+7	; 0x07
     ccc:	98 85       	ldd	r25, Y+8	; 0x08
     cce:	28 96       	adiw	r28, 0x08	; 8
     cd0:	0f b6       	in	r0, 0x3f	; 63
}
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	08 95       	ret

00000ce0 <JOY_getDirection>:
     ce0:	88 e7       	ldi	r24, 0x78	; 120
     ce2:	4f df       	rcall	.-354    	; 0xb82 <JOY_requestCurrentPosition>
     ce4:	82 e6       	ldi	r24, 0x62	; 98
     ce6:	8a 95       	dec	r24
     ce8:	f1 f7       	brne	.-4      	; 0xce6 <JOY_getDirection+0x6>
     cea:	00 00       	nop
     cec:	88 e7       	ldi	r24, 0x78	; 120
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     cee:	5b df       	rcall	.-330    	; 0xba6 <JOY_updatePosition>
     cf0:	89 e7       	ldi	r24, 0x79	; 121
     cf2:	47 df       	rcall	.-370    	; 0xb82 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     cf4:	82 e6       	ldi	r24, 0x62	; 98
     cf6:	8a 95       	dec	r24
     cf8:	f1 f7       	brne	.-4      	; 0xcf6 <JOY_getDirection+0x16>
     cfa:	00 00       	nop
     cfc:	89 e7       	ldi	r24, 0x79	; 121
     cfe:	53 df       	rcall	.-346    	; 0xba6 <JOY_updatePosition>
     d00:	94 df       	rcall	.-216    	; 0xc2a <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     d02:	80 91 67 02 	lds	r24, 0x0267
     d06:	08 95       	ret

00000d08 <MCP2515_reset>:
	//printf("finished MCP2515_init\n");
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
     d08:	cf 93       	push	r28
     d0a:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
     d0c:	7a d4       	rcall	.+2292   	; 0x1602 <SPI_activateSlave>
     d0e:	80 ec       	ldi	r24, 0xC0	; 192
	SPI_send(MCP_RESET);
     d10:	6e d4       	rcall	.+2268   	; 0x15ee <SPI_send>
     d12:	8c ec       	ldi	r24, 0xCC	; 204
     d14:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d16:	01 97       	sbiw	r24, 0x01	; 1
     d18:	f1 f7       	brne	.-4      	; 0xd16 <MCP2515_reset+0xe>
     d1a:	00 c0       	rjmp	.+0      	; 0xd1c <MCP2515_reset+0x14>
     d1c:	00 00       	nop
     d1e:	8c 2f       	mov	r24, r28
     d20:	74 d4       	rcall	.+2280   	; 0x160a <SPI_deactivateSlave>
	_delay_ms(1);
	SPI_deactivateSlave(slave);
     d22:	8f ef       	ldi	r24, 0xFF	; 255
     d24:	9f e2       	ldi	r25, 0x2F	; 47
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	f1 f7       	brne	.-4      	; 0xd26 <MCP2515_reset+0x1e>
     d2a:	00 c0       	rjmp	.+0      	; 0xd2c <MCP2515_reset+0x24>
     d2c:	00 00       	nop
     d2e:	cf 91       	pop	r28
     d30:	08 95       	ret

00000d32 <MCP2515_read>:
     d32:	cf 93       	push	r28
	_delay_ms(10);
}
     d34:	df 93       	push	r29
     d36:	c8 2f       	mov	r28, r24

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
     d38:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
     d3a:	63 d4       	rcall	.+2246   	; 0x1602 <SPI_activateSlave>
     d3c:	83 e0       	ldi	r24, 0x03	; 3
	SPI_send(MCP_READ);
     d3e:	57 d4       	rcall	.+2222   	; 0x15ee <SPI_send>
     d40:	8c ec       	ldi	r24, 0xCC	; 204
     d42:	94 e0       	ldi	r25, 0x04	; 4
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	f1 f7       	brne	.-4      	; 0xd44 <MCP2515_read+0x12>
     d48:	00 c0       	rjmp	.+0      	; 0xd4a <MCP2515_read+0x18>
     d4a:	00 00       	nop
     d4c:	8d 2f       	mov	r24, r29
     d4e:	4f d4       	rcall	.+2206   	; 0x15ee <SPI_send>
	_delay_ms(1);
	SPI_send(address);
     d50:	52 d4       	rcall	.+2212   	; 0x15f6 <SPI_receive>
     d52:	d8 2f       	mov	r29, r24
     d54:	8c 2f       	mov	r24, r28
	
	uint8_t result;
	result = SPI_receive();
     d56:	59 d4       	rcall	.+2226   	; 0x160a <SPI_deactivateSlave>
     d58:	8d 2f       	mov	r24, r29
     d5a:	df 91       	pop	r29
	
	SPI_deactivateSlave(slave);
     d5c:	cf 91       	pop	r28
     d5e:	08 95       	ret

00000d60 <MCP2515_init>:
     d60:	80 e0       	ldi	r24, 0x00	; 0
	return result;
}
     d62:	d2 df       	rcall	.-92     	; 0xd08 <MCP2515_reset>
     d64:	6e e0       	ldi	r22, 0x0E	; 14
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	e4 df       	rcall	.-56     	; 0xd32 <MCP2515_read>
uint8_t MCP2515_init()
{
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
	// Self-test
	uint8_t value;
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
     d6a:	98 2f       	mov	r25, r24
     d6c:	90 7e       	andi	r25, 0xE0	; 224
	//printf("CANSTAT: %#x\n", value);
	if((value & MODE_MASK) != MODE_CONFIG) 
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 38       	cpi	r25, 0x80	; 128
     d72:	09 f4       	brne	.+2      	; 0xd76 <MCP2515_init+0x16>
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	08 95       	ret

00000d78 <MCP2515_write>:
     d78:	1f 93       	push	r17
		return 1;
	}
	//
	//printf("finished MCP2515_init\n");
	return 0;
}
     d7a:	cf 93       	push	r28
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_write(SPI_SLAVES slave, uint8_t address, uint8_t data)
{
     d7c:	df 93       	push	r29
     d7e:	c8 2f       	mov	r28, r24
     d80:	16 2f       	mov	r17, r22
     d82:	d4 2f       	mov	r29, r20
	SPI_activateSlave(slave);
     d84:	3e d4       	rcall	.+2172   	; 0x1602 <SPI_activateSlave>
     d86:	82 e0       	ldi	r24, 0x02	; 2
	SPI_send(MCP_WRITE);
     d88:	32 d4       	rcall	.+2148   	; 0x15ee <SPI_send>
     d8a:	81 2f       	mov	r24, r17
     d8c:	30 d4       	rcall	.+2144   	; 0x15ee <SPI_send>
	SPI_send(address);
     d8e:	8d 2f       	mov	r24, r29
     d90:	2e d4       	rcall	.+2140   	; 0x15ee <SPI_send>
     d92:	8c 2f       	mov	r24, r28
	SPI_send(data);
     d94:	3a d4       	rcall	.+2164   	; 0x160a <SPI_deactivateSlave>
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
	SPI_deactivateSlave(slave);
     d9a:	1f 91       	pop	r17
     d9c:	08 95       	ret

00000d9e <MCP2515_bitModify>:
     d9e:	0f 93       	push	r16
}
     da0:	1f 93       	push	r17
     da2:	cf 93       	push	r28
     da4:	df 93       	push	r29
     da6:	c8 2f       	mov	r28, r24
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_bitModify(SPI_SLAVES slave, uint8_t register2change, uint8_t mask, uint8_t newValue)
{
     da8:	06 2f       	mov	r16, r22
     daa:	14 2f       	mov	r17, r20
     dac:	d2 2f       	mov	r29, r18
	SPI_activateSlave(slave);
     dae:	29 d4       	rcall	.+2130   	; 0x1602 <SPI_activateSlave>
     db0:	85 e0       	ldi	r24, 0x05	; 5
	
	SPI_send(MCP_BITMOD);
     db2:	1d d4       	rcall	.+2106   	; 0x15ee <SPI_send>
     db4:	80 2f       	mov	r24, r16
     db6:	1b d4       	rcall	.+2102   	; 0x15ee <SPI_send>
	SPI_send(register2change);
     db8:	81 2f       	mov	r24, r17
     dba:	19 d4       	rcall	.+2098   	; 0x15ee <SPI_send>
     dbc:	8d 2f       	mov	r24, r29
	SPI_send(mask);
     dbe:	17 d4       	rcall	.+2094   	; 0x15ee <SPI_send>
     dc0:	8c 2f       	mov	r24, r28
     dc2:	23 d4       	rcall	.+2118   	; 0x160a <SPI_deactivateSlave>
	SPI_send(newValue);
     dc4:	df 91       	pop	r29
     dc6:	cf 91       	pop	r28
     dc8:	1f 91       	pop	r17
	
	SPI_deactivateSlave(slave);
     dca:	0f 91       	pop	r16
     dcc:	08 95       	ret

00000dce <startGame>:

static int menuFrameOffset = 10; //Columns from left frame border
//******************************************************************************************

void startGame()
{
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
	OLED_clear();
     dd2:	3e d2       	rcall	.+1148   	; 0x1250 <OLED_clear>
     dd4:	60 e0       	ldi	r22, 0x00	; 0
	OLED_bufferGoto(0,0);
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	1d d3       	rcall	.+1594   	; 0x1418 <OLED_bufferGoto>
     dde:	86 eb       	ldi	r24, 0xB6	; 182
     de0:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("START");
     de2:	59 d3       	rcall	.+1714   	; 0x1496 <OLED_printString>
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_bufferGoto(3,0);
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	15 d3       	rcall	.+1578   	; 0x1418 <OLED_bufferGoto>
     dee:	ce e0       	ldi	r28, 0x0E	; 14
     df0:	d0 e0       	ldi	r29, 0x00	; 0
     df2:	8c eb       	ldi	r24, 0xBC	; 188
     df4:	91 e0       	ldi	r25, 0x01	; 1
     df6:	4f d3       	rcall	.+1694   	; 0x1496 <OLED_printString>
     df8:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     dfa:	8f e7       	ldi	r24, 0x7F	; 127
     dfc:	97 e0       	ldi	r25, 0x07	; 7
     dfe:	21 50       	subi	r18, 0x01	; 1
     e00:	80 40       	sbci	r24, 0x00	; 0
     e02:	90 40       	sbci	r25, 0x00	; 0
     e04:	e1 f7       	brne	.-8      	; 0xdfe <startGame+0x30>
     e06:	00 c0       	rjmp	.+0      	; 0xe08 <startGame+0x3a>
     e08:	00 00       	nop
     e0a:	21 97       	sbiw	r28, 0x01	; 1
     e0c:	20 97       	sbiw	r28, 0x00	; 0
     e0e:	89 f7       	brne	.-30     	; 0xdf2 <startGame+0x24>
     e10:	60 e0       	ldi	r22, 0x00	; 0
     e12:	70 e0       	ldi	r23, 0x00	; 0
     e14:	85 e0       	ldi	r24, 0x05	; 5
	OLED_bufferGoto(0,0);
	OLED_printString("START");
	
	OLED_bufferGoto(3,0);
	
	for(int i = 14; i > 0; i--)
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	ff d2       	rcall	.+1534   	; 0x1418 <OLED_bufferGoto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_bufferGoto(5,0);
     e1a:	8e eb       	ldi	r24, 0xBE	; 190
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	3b d3       	rcall	.+1654   	; 0x1496 <OLED_printString>
     e20:	2f ef       	ldi	r18, 0xFF	; 255
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     e26:	21 50       	subi	r18, 0x01	; 1
     e28:	80 40       	sbci	r24, 0x00	; 0
     e2a:	90 40       	sbci	r25, 0x00	; 0
     e2c:	e1 f7       	brne	.-8      	; 0xe26 <startGame+0x58>
     e2e:	00 c0       	rjmp	.+0      	; 0xe30 <startGame+0x62>
     e30:	00 c0       	rjmp	.+0      	; 0xe32 <startGame+0x64>
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	08 95       	ret

00000e38 <MENU_addMenuItem>:
     e38:	cf 92       	push	r12
     e3a:	df 92       	push	r13
     e3c:	ef 92       	push	r14
     e3e:	ff 92       	push	r15
	_delay_ms(3000);
}
     e40:	0f 93       	push	r16
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     e46:	df 93       	push	r29
     e48:	8c 01       	movw	r16, r24
     e4a:	7b 01       	movw	r14, r22
     e4c:	6a 01       	movw	r12, r20
     e4e:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     e50:	80 91 73 02 	lds	r24, 0x0273
     e54:	90 91 74 02 	lds	r25, 0x0274
     e58:	89 2b       	or	r24, r25
     e5a:	19 f0       	breq	.+6      	; 0xe62 <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     e5c:	87 ec       	ldi	r24, 0xC7	; 199
     e5e:	91 e0       	ldi	r25, 0x01	; 1
     e60:	cd d5       	rcall	.+2970   	; 0x19fc <puts>
     e62:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	43 d4       	rcall	.+2182   	; 0x16ee <malloc>
     e68:	fc 01       	movw	r30, r24
     e6a:	90 93 74 02 	sts	0x0274, r25
     e6e:	80 93 73 02 	sts	0x0273, r24
     e72:	f3 82       	std	Z+3, r15	; 0x03
     e74:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     e76:	11 83       	std	Z+1, r17	; 0x01
     e78:	00 83       	st	Z, r16
	currItem->name = name;
     e7a:	cd 2b       	or	r28, r29
     e7c:	39 f0       	breq	.+14     	; 0xe8c <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     e7e:	d5 82       	std	Z+5, r13	; 0x05
     e80:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     e86:	97 83       	std	Z+7, r25	; 0x07
     e88:	86 83       	std	Z+6, r24	; 0x06
     e8a:	04 c0       	rjmp	.+8      	; 0xe94 <MENU_addMenuItem+0x5c>
     e8c:	15 82       	std	Z+5, r1	; 0x05
     e8e:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     e90:	17 82       	std	Z+7, r1	; 0x07
     e92:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
	}
}
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	ff 90       	pop	r15
     e9e:	ef 90       	pop	r14
     ea0:	df 90       	pop	r13
     ea2:	cf 90       	pop	r12
     ea4:	08 95       	ret

00000ea6 <MENU_buildMenus>:
     ea6:	cf 93       	push	r28
     ea8:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     eaa:	86 e1       	ldi	r24, 0x16	; 22
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	1f d4       	rcall	.+2110   	; 0x16ee <malloc>
     eb0:	ec 01       	movw	r28, r24
     eb2:	90 93 7a 02 	sts	0x027A, r25
     eb6:	80 93 79 02 	sts	0x0279, r24
     eba:	8d ed       	ldi	r24, 0xDD	; 221
	mainMenu->menuName = "MainMenu";
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	99 83       	std	Y+1, r25	; 0x01
     ec0:	88 83       	st	Y, r24
     ec2:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     ec4:	1c 8a       	std	Y+20, r1	; 0x14
     ec6:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	9b 83       	std	Y+3, r25	; 0x03
     ecc:	8a 83       	std	Y+2, r24	; 0x02
     ece:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	0d d4       	rcall	.+2074   	; 0x16ee <malloc>
     ed4:	fc 01       	movw	r30, r24
     ed6:	90 93 78 02 	sts	0x0278, r25
     eda:	80 93 77 02 	sts	0x0277, r24
     ede:	86 ee       	ldi	r24, 0xE6	; 230
     ee0:	91 e0       	ldi	r25, 0x01	; 1
	difficultyMenu->menuName = "DifficultyMenu";
     ee2:	91 83       	std	Z+1, r25	; 0x01
     ee4:	80 83       	st	Z, r24
     ee6:	d5 8b       	std	Z+21, r29	; 0x15
     ee8:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     eea:	83 e0       	ldi	r24, 0x03	; 3
     eec:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     eee:	93 83       	std	Z+3, r25	; 0x03
     ef0:	82 83       	std	Z+2, r24	; 0x02
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     ef6:	40 e0       	ldi	r20, 0x00	; 0
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	be 01       	movw	r22, r28
     efc:	85 ef       	ldi	r24, 0xF5	; 245
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	9b df       	rcall	.-202    	; 0xe38 <MENU_addMenuItem>
     f02:	60 91 79 02 	lds	r22, 0x0279
     f06:	70 91 7a 02 	lds	r23, 0x027A
	mainMenu->children[0] = currItem;
     f0a:	e0 91 73 02 	lds	r30, 0x0273
     f0e:	f0 91 74 02 	lds	r31, 0x0274
     f12:	db 01       	movw	r26, r22
     f14:	15 96       	adiw	r26, 0x05	; 5
     f16:	fc 93       	st	X, r31
     f18:	ee 93       	st	-X, r30
     f1a:	14 97       	sbiw	r26, 0x04	; 4
     f1c:	87 ee       	ldi	r24, 0xE7	; 231
     f1e:	96 e0       	ldi	r25, 0x06	; 6
     f20:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
     f22:	82 87       	std	Z+10, r24	; 0x0a
     f24:	40 91 77 02 	lds	r20, 0x0277
     f28:	50 91 78 02 	lds	r21, 0x0278
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     f2c:	21 e0       	ldi	r18, 0x01	; 1
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	8e ef       	ldi	r24, 0xFE	; 254
     f32:	91 e0       	ldi	r25, 0x01	; 1
     f34:	81 df       	rcall	.-254    	; 0xe38 <MENU_addMenuItem>
     f36:	60 91 79 02 	lds	r22, 0x0279
     f3a:	70 91 7a 02 	lds	r23, 0x027A
	mainMenu->children[1] = currItem;
     f3e:	80 91 73 02 	lds	r24, 0x0273
     f42:	90 91 74 02 	lds	r25, 0x0274
     f46:	fb 01       	movw	r30, r22
     f48:	97 83       	std	Z+7, r25	; 0x07
     f4a:	86 83       	std	Z+6, r24	; 0x06
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	40 e0       	ldi	r20, 0x00	; 0
     f52:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     f54:	89 e0       	ldi	r24, 0x09	; 9
     f56:	92 e0       	ldi	r25, 0x02	; 2
     f58:	6f df       	rcall	.-290    	; 0xe38 <MENU_addMenuItem>
     f5a:	60 91 79 02 	lds	r22, 0x0279
     f5e:	70 91 7a 02 	lds	r23, 0x027A
     f62:	80 91 73 02 	lds	r24, 0x0273
	mainMenu->children[2] = currItem;
     f66:	90 91 74 02 	lds	r25, 0x0274
     f6a:	db 01       	movw	r26, r22
     f6c:	19 96       	adiw	r26, 0x09	; 9
     f6e:	9c 93       	st	X, r25
     f70:	8e 93       	st	-X, r24
     f72:	18 97       	sbiw	r26, 0x08	; 8
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	40 e0       	ldi	r20, 0x00	; 0
     f7a:	50 e0       	ldi	r21, 0x00	; 0
     f7c:	84 e1       	ldi	r24, 0x14	; 20
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
     f7e:	92 e0       	ldi	r25, 0x02	; 2
     f80:	5b df       	rcall	.-330    	; 0xe38 <MENU_addMenuItem>
     f82:	60 91 79 02 	lds	r22, 0x0279
     f86:	70 91 7a 02 	lds	r23, 0x027A
     f8a:	e0 91 73 02 	lds	r30, 0x0273
	mainMenu->children[3] = currItem;
     f8e:	f0 91 74 02 	lds	r31, 0x0274
     f92:	db 01       	movw	r26, r22
     f94:	1b 96       	adiw	r26, 0x0b	; 11
     f96:	fc 93       	st	X, r31
     f98:	ee 93       	st	-X, r30
     f9a:	1a 97       	sbiw	r26, 0x0a	; 10
     f9c:	8c ec       	ldi	r24, 0xCC	; 204
     f9e:	94 e0       	ldi	r25, 0x04	; 4
     fa0:	93 87       	std	Z+11, r25	; 0x0b
     fa2:	82 87       	std	Z+10, r24	; 0x0a
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
     fa8:	40 e0       	ldi	r20, 0x00	; 0
     faa:	50 e0       	ldi	r21, 0x00	; 0
     fac:	8e e1       	ldi	r24, 0x1E	; 30
     fae:	92 e0       	ldi	r25, 0x02	; 2
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
     fb0:	43 df       	rcall	.-378    	; 0xe38 <MENU_addMenuItem>
     fb2:	e0 91 79 02 	lds	r30, 0x0279
     fb6:	f0 91 7a 02 	lds	r31, 0x027A
     fba:	80 91 73 02 	lds	r24, 0x0273
     fbe:	90 91 74 02 	lds	r25, 0x0274
	mainMenu->children[4] = currItem;
     fc2:	95 87       	std	Z+13, r25	; 0x0d
     fc4:	84 87       	std	Z+12, r24	; 0x0c
     fc6:	10 92 74 02 	sts	0x0274, r1
     fca:	10 92 73 02 	sts	0x0273, r1
     fce:	60 91 77 02 	lds	r22, 0x0277
     fd2:	70 91 78 02 	lds	r23, 0x0278
	
	currItem = NULL;
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	83 e2       	ldi	r24, 0x23	; 35
     fe0:	92 e0       	ldi	r25, 0x02	; 2
     fe2:	2a df       	rcall	.-428    	; 0xe38 <MENU_addMenuItem>
     fe4:	60 91 77 02 	lds	r22, 0x0277
     fe8:	70 91 78 02 	lds	r23, 0x0278
     fec:	80 91 73 02 	lds	r24, 0x0273
     ff0:	90 91 74 02 	lds	r25, 0x0274
	difficultyMenu->children[0] = currItem;
     ff4:	fb 01       	movw	r30, r22
     ff6:	95 83       	std	Z+5, r25	; 0x05
     ff8:	84 83       	std	Z+4, r24	; 0x04
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e0       	ldi	r20, 0x00	; 0
    1000:	50 e0       	ldi	r21, 0x00	; 0
    1002:	88 e2       	ldi	r24, 0x28	; 40
    1004:	92 e0       	ldi	r25, 0x02	; 2
    1006:	18 df       	rcall	.-464    	; 0xe38 <MENU_addMenuItem>
    1008:	60 91 77 02 	lds	r22, 0x0277
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
    100c:	70 91 78 02 	lds	r23, 0x0278
    1010:	80 91 73 02 	lds	r24, 0x0273
    1014:	90 91 74 02 	lds	r25, 0x0274
    1018:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
    101a:	17 96       	adiw	r26, 0x07	; 7
    101c:	9c 93       	st	X, r25
    101e:	8e 93       	st	-X, r24
    1020:	16 97       	sbiw	r26, 0x06	; 6
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	40 e0       	ldi	r20, 0x00	; 0
    1028:	50 e0       	ldi	r21, 0x00	; 0
    102a:	8f e2       	ldi	r24, 0x2F	; 47
    102c:	92 e0       	ldi	r25, 0x02	; 2
    102e:	04 df       	rcall	.-504    	; 0xe38 <MENU_addMenuItem>
    1030:	e0 91 77 02 	lds	r30, 0x0277
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
    1034:	f0 91 78 02 	lds	r31, 0x0278
    1038:	80 91 73 02 	lds	r24, 0x0273
    103c:	90 91 74 02 	lds	r25, 0x0274
    1040:	91 87       	std	Z+9, r25	; 0x09
    1042:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
    1044:	df 91       	pop	r29
    1046:	cf 91       	pop	r28
    1048:	08 95       	ret

0000104a <MENU_printMenuItem>:
    104a:	cf 93       	push	r28
    104c:	df 93       	push	r29
    104e:	ec 01       	movw	r28, r24
    1050:	cb 01       	movw	r24, r22
    1052:	20 97       	sbiw	r28, 0x00	; 0
    1054:	39 f0       	breq	.+14     	; 0x1064 <MENU_printMenuItem+0x1a>
    1056:	6a e0       	ldi	r22, 0x0A	; 10
}
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	de d1       	rcall	.+956    	; 0x1418 <OLED_bufferGoto>
    105c:	88 81       	ld	r24, Y
void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_bufferGoto(lineNumber, menuFrameOffset);
		OLED_printString(item->name);
    105e:	99 81       	ldd	r25, Y+1	; 0x01
    1060:	1a d2       	rcall	.+1076   	; 0x1496 <OLED_printString>
    1062:	07 c0       	rjmp	.+14     	; 0x1072 <MENU_printMenuItem+0x28>
    1064:	84 e3       	ldi	r24, 0x34	; 52
    1066:	92 e0       	ldi	r25, 0x02	; 2
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
    1068:	9f 93       	push	r25
    106a:	8f 93       	push	r24
    106c:	b1 d4       	rcall	.+2402   	; 0x19d0 <printf>
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	08 95       	ret

00001078 <MENU_printMenu>:
	}
}
    1078:	cf 92       	push	r12
    107a:	df 92       	push	r13
    107c:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
    107e:	ff 92       	push	r15
    1080:	0f 93       	push	r16
    1082:	1f 93       	push	r17
    1084:	cf 93       	push	r28
    1086:	df 93       	push	r29
    1088:	6c 01       	movw	r12, r24
    108a:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
    108c:	e1 d0       	rcall	.+450    	; 0x1250 <OLED_clear>
    108e:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	89 d2       	rcall	.+1298   	; 0x15a6 <OLED_moveArrow>
    1094:	1e 14       	cp	r1, r14
    1096:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
    1098:	7c f4       	brge	.+30     	; 0x10b8 <MENU_printMenu+0x40>
    109a:	86 01       	movw	r16, r12
    109c:	0c 5f       	subi	r16, 0xFC	; 252
    109e:	1f 4f       	sbci	r17, 0xFF	; 255
    10a0:	c0 e0       	ldi	r28, 0x00	; 0
    10a2:	d0 e0       	ldi	r29, 0x00	; 0
    10a4:	be 01       	movw	r22, r28
    10a6:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
    10a8:	81 91       	ld	r24, Z+
    10aa:	91 91       	ld	r25, Z+
    10ac:	8f 01       	movw	r16, r30
    10ae:	cd df       	rcall	.-102    	; 0x104a <MENU_printMenuItem>
    10b0:	21 96       	adiw	r28, 0x01	; 1
    10b2:	ce 15       	cp	r28, r14
    10b4:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
    10b6:	b1 f7       	brne	.-20     	; 0x10a4 <MENU_printMenu+0x2c>
    10b8:	d0 92 76 02 	sts	0x0276, r13
    10bc:	c0 92 75 02 	sts	0x0275, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
    10c0:	10 92 71 02 	sts	0x0271, r1
    10c4:	10 92 70 02 	sts	0x0270, r1
	
	currentPosition = 0;
    10c8:	f6 01       	movw	r30, r12
    10ca:	84 81       	ldd	r24, Z+4	; 0x04
    10cc:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
    10ce:	90 93 74 02 	sts	0x0274, r25
    10d2:	80 93 73 02 	sts	0x0273, r24
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	1f 91       	pop	r17
}
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	ef 90       	pop	r14
    10e2:	df 90       	pop	r13
    10e4:	cf 90       	pop	r12
    10e6:	08 95       	ret

000010e8 <MENU_moveUp>:
    10e8:	20 91 70 02 	lds	r18, 0x0270
    10ec:	30 91 71 02 	lds	r19, 0x0271
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
    10f0:	12 16       	cp	r1, r18
    10f2:	13 06       	cpc	r1, r19
    10f4:	bc f4       	brge	.+46     	; 0x1124 <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
    10f6:	c9 01       	movw	r24, r18
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	90 93 71 02 	sts	0x0271, r25
    10fe:	80 93 70 02 	sts	0x0270, r24
		currItem = currentMenu->children[currentPosition];
    1102:	e0 91 75 02 	lds	r30, 0x0275
    1106:	f0 91 76 02 	lds	r31, 0x0276
    110a:	2f 5f       	subi	r18, 0xFF	; 255
    110c:	3f 4f       	sbci	r19, 0xFF	; 255
    110e:	22 0f       	add	r18, r18
    1110:	33 1f       	adc	r19, r19
    1112:	e2 0f       	add	r30, r18
    1114:	f3 1f       	adc	r31, r19
    1116:	20 81       	ld	r18, Z
    1118:	31 81       	ldd	r19, Z+1	; 0x01
    111a:	30 93 74 02 	sts	0x0274, r19
    111e:	20 93 73 02 	sts	0x0273, r18
		OLED_moveArrow(currentPosition);
    1122:	41 c2       	rjmp	.+1154   	; 0x15a6 <OLED_moveArrow>
    1124:	08 95       	ret

00001126 <MENU_moveDown>:
    1126:	e0 91 75 02 	lds	r30, 0x0275
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
    112a:	f0 91 76 02 	lds	r31, 0x0276
    112e:	20 91 70 02 	lds	r18, 0x0270
    1132:	30 91 71 02 	lds	r19, 0x0271
    1136:	82 81       	ldd	r24, Z+2	; 0x02
    1138:	93 81       	ldd	r25, Z+3	; 0x03
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	28 17       	cp	r18, r24
    113e:	39 07       	cpc	r19, r25
    1140:	a4 f4       	brge	.+40     	; 0x116a <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
    1142:	c9 01       	movw	r24, r18
    1144:	01 96       	adiw	r24, 0x01	; 1
    1146:	90 93 71 02 	sts	0x0271, r25
    114a:	80 93 70 02 	sts	0x0270, r24
		currItem = currentMenu->children[currentPosition];
    114e:	2d 5f       	subi	r18, 0xFD	; 253
    1150:	3f 4f       	sbci	r19, 0xFF	; 255
    1152:	22 0f       	add	r18, r18
    1154:	33 1f       	adc	r19, r19
    1156:	e2 0f       	add	r30, r18
    1158:	f3 1f       	adc	r31, r19
    115a:	20 81       	ld	r18, Z
    115c:	31 81       	ldd	r19, Z+1	; 0x01
    115e:	30 93 74 02 	sts	0x0274, r19
    1162:	20 93 73 02 	sts	0x0273, r18
		OLED_moveArrow(currentPosition);
    1166:	1f c2       	rjmp	.+1086   	; 0x15a6 <OLED_moveArrow>
    1168:	08 95       	ret
    116a:	10 92 71 02 	sts	0x0271, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
    116e:	10 92 70 02 	sts	0x0270, r1
    1172:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
    1174:	95 81       	ldd	r25, Z+5	; 0x05
    1176:	90 93 74 02 	sts	0x0274, r25
    117a:	80 93 73 02 	sts	0x0273, r24
    117e:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	11 c2       	rjmp	.+1058   	; 0x15a6 <OLED_moveArrow>
    1184:	08 95       	ret

00001186 <MENU_moveLeft>:
    1186:	e0 91 75 02 	lds	r30, 0x0275
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
    118a:	f0 91 76 02 	lds	r31, 0x0276
    118e:	84 89       	ldd	r24, Z+20	; 0x14
    1190:	95 89       	ldd	r25, Z+21	; 0x15
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	21 f0       	breq	.+8      	; 0x119e <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
    1196:	fc 01       	movw	r30, r24
    1198:	62 81       	ldd	r22, Z+2	; 0x02
    119a:	73 81       	ldd	r23, Z+3	; 0x03
    119c:	6d cf       	rjmp	.-294    	; 0x1078 <MENU_printMenu>
    119e:	08 95       	ret

000011a0 <MENU_reactivate>:
    11a0:	80 91 75 02 	lds	r24, 0x0275
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
    11a4:	90 91 76 02 	lds	r25, 0x0276
    11a8:	fc 01       	movw	r30, r24
    11aa:	62 81       	ldd	r22, Z+2	; 0x02
    11ac:	73 81       	ldd	r23, Z+3	; 0x03
    11ae:	64 df       	rcall	.-312    	; 0x1078 <MENU_printMenu>
    11b0:	18 c0       	rjmp	.+48     	; 0x11e2 <MENU_waitForInput>
	MENU_waitForInput();
    11b2:	08 95       	ret

000011b4 <MENU_moveRight>:
    11b4:	e0 91 73 02 	lds	r30, 0x0273
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
    11b8:	f0 91 74 02 	lds	r31, 0x0274
    11bc:	86 81       	ldd	r24, Z+6	; 0x06
    11be:	97 81       	ldd	r25, Z+7	; 0x07
    11c0:	89 2b       	or	r24, r25
    11c2:	39 f0       	breq	.+14     	; 0x11d2 <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
    11c4:	84 81       	ldd	r24, Z+4	; 0x04
    11c6:	95 81       	ldd	r25, Z+5	; 0x05
    11c8:	fc 01       	movw	r30, r24
    11ca:	62 81       	ldd	r22, Z+2	; 0x02
    11cc:	73 81       	ldd	r23, Z+3	; 0x03
    11ce:	54 cf       	rjmp	.-344    	; 0x1078 <MENU_printMenu>
    11d0:	08 95       	ret
    11d2:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
    11d4:	f3 85       	ldd	r31, Z+11	; 0x0b
    11d6:	e0 2d       	mov	r30, r0
    11d8:	30 97       	sbiw	r30, 0x00	; 0
    11da:	11 f0       	breq	.+4      	; 0x11e0 <MENU_moveRight+0x2c>
    11dc:	09 95       	icall
	{
		currItem->functionPtr();
    11de:	e0 cf       	rjmp	.-64     	; 0x11a0 <MENU_reactivate>
		MENU_reactivate();
    11e0:	08 95       	ret

000011e2 <MENU_waitForInput>:
    11e2:	80 91 70 02 	lds	r24, 0x0270
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
    11e6:	90 91 71 02 	lds	r25, 0x0271
    11ea:	dd d1       	rcall	.+954    	; 0x15a6 <OLED_moveArrow>
    11ec:	80 91 72 02 	lds	r24, 0x0272
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    11f0:	88 23       	and	r24, r24
    11f2:	f9 f0       	breq	.+62     	; 0x1232 <MENU_waitForInput+0x50>
    11f4:	75 dd       	rcall	.-1302   	; 0xce0 <JOY_getDirection>
	{
		currDir = JOY_getDirection();
    11f6:	82 30       	cpi	r24, 0x02	; 2
    11f8:	71 f0       	breq	.+28     	; 0x1216 <MENU_waitForInput+0x34>
		switch(currDir){
    11fa:	18 f4       	brcc	.+6      	; 0x1202 <MENU_waitForInput+0x20>
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	49 f0       	breq	.+18     	; 0x1212 <MENU_waitForInput+0x30>
    1200:	0b c0       	rjmp	.+22     	; 0x1218 <MENU_waitForInput+0x36>
    1202:	83 30       	cpi	r24, 0x03	; 3
    1204:	21 f0       	breq	.+8      	; 0x120e <MENU_waitForInput+0x2c>
    1206:	84 30       	cpi	r24, 0x04	; 4
    1208:	39 f4       	brne	.+14     	; 0x1218 <MENU_waitForInput+0x36>
    120a:	bd df       	rcall	.-134    	; 0x1186 <MENU_moveLeft>
    120c:	05 c0       	rjmp	.+10     	; 0x1218 <MENU_waitForInput+0x36>
			case LEFT:
			MENU_moveLeft();
    120e:	d2 df       	rcall	.-92     	; 0x11b4 <MENU_moveRight>
    1210:	03 c0       	rjmp	.+6      	; 0x1218 <MENU_waitForInput+0x36>
			break;
    1212:	6a df       	rcall	.-300    	; 0x10e8 <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
    1214:	01 c0       	rjmp	.+2      	; 0x1218 <MENU_waitForInput+0x36>
    1216:	87 df       	rcall	.-242    	; 0x1126 <MENU_moveDown>
			break;
    1218:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
    121a:	8f e7       	ldi	r24, 0x7F	; 127
    121c:	94 e0       	ldi	r25, 0x04	; 4
			break;
    121e:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
    1220:	80 40       	sbci	r24, 0x00	; 0
    1222:	90 40       	sbci	r25, 0x00	; 0
    1224:	e1 f7       	brne	.-8      	; 0x121e <MENU_waitForInput+0x3c>
    1226:	00 c0       	rjmp	.+0      	; 0x1228 <MENU_waitForInput+0x46>
    1228:	00 00       	nop
    122a:	80 91 72 02 	lds	r24, 0x0272
    122e:	81 11       	cpse	r24, r1
    1230:	e1 cf       	rjmp	.-62     	; 0x11f4 <MENU_waitForInput+0x12>
    1232:	08 95       	ret

00001234 <MENU_activate>:
    1234:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    1236:	80 93 72 02 	sts	0x0272, r24
    123a:	35 de       	rcall	.-918    	; 0xea6 <MENU_buildMenus>
    123c:	80 91 79 02 	lds	r24, 0x0279
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
    1240:	90 91 7a 02 	lds	r25, 0x027A
    1244:	fc 01       	movw	r30, r24
    1246:	62 81       	ldd	r22, Z+2	; 0x02
    1248:	73 81       	ldd	r23, Z+3	; 0x03
    124a:	16 df       	rcall	.-468    	; 0x1078 <MENU_printMenu>
    124c:	ca cf       	rjmp	.-108    	; 0x11e2 <MENU_waitForInput>
    124e:	08 95       	ret

00001250 <OLED_clear>:
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	// clear OLED buffer
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    1250:	80 91 10 01 	lds	r24, 0x0110
    1254:	90 91 11 01 	lds	r25, 0x0111
    1258:	89 2b       	or	r24, r25
    125a:	89 f0       	breq	.+34     	; 0x127e <OLED_clear+0x2e>
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	90 e0       	ldi	r25, 0x00	; 0
	{
		oled_buffer[i] = 0x00;
    1260:	e0 91 12 01 	lds	r30, 0x0112
    1264:	f0 91 13 01 	lds	r31, 0x0113
    1268:	e8 0f       	add	r30, r24
    126a:	f9 1f       	adc	r31, r25
    126c:	10 82       	st	Z, r1
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	// clear OLED buffer
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    126e:	01 96       	adiw	r24, 0x01	; 1
    1270:	20 91 10 01 	lds	r18, 0x0110
    1274:	30 91 11 01 	lds	r19, 0x0111
    1278:	82 17       	cp	r24, r18
    127a:	93 07       	cpc	r25, r19
    127c:	88 f3       	brcs	.-30     	; 0x1260 <OLED_clear+0x10>
    127e:	08 95       	ret

00001280 <OLED_init>:

//------------------------------------------------------------------------------
// Default initialization routine of the OLED display.

void OLED_init(void)
{
    1280:	cf 93       	push	r28
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
    1282:	e0 91 16 01 	lds	r30, 0x0116
    1286:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    128a:	8e ea       	ldi	r24, 0xAE	; 174
    128c:	80 83       	st	Z, r24
// Default initialization routine of the OLED display.

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
    128e:	e0 91 16 01 	lds	r30, 0x0116
    1292:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1296:	81 ea       	ldi	r24, 0xA1	; 161
    1298:	80 83       	st	Z, r24

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
    129a:	e0 91 16 01 	lds	r30, 0x0116
    129e:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12a2:	8a ed       	ldi	r24, 0xDA	; 218
    12a4:	80 83       	st	Z, r24
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
    12a6:	e0 91 16 01 	lds	r30, 0x0116
    12aa:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12ae:	82 e1       	ldi	r24, 0x12	; 18
    12b0:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    12b2:	e0 91 16 01 	lds	r30, 0x0116
    12b6:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12ba:	88 ec       	ldi	r24, 0xC8	; 200
    12bc:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    12be:	e0 91 16 01 	lds	r30, 0x0116
    12c2:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12c6:	88 ea       	ldi	r24, 0xA8	; 168
    12c8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    12ca:	e0 91 16 01 	lds	r30, 0x0116
    12ce:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12d2:	8f e3       	ldi	r24, 0x3F	; 63
    12d4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    12d6:	e0 91 16 01 	lds	r30, 0x0116
    12da:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12de:	85 ed       	ldi	r24, 0xD5	; 213
    12e0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
    12e2:	e0 91 16 01 	lds	r30, 0x0116
    12e6:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12ea:	80 e8       	ldi	r24, 0x80	; 128
    12ec:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    12ee:	e0 91 16 01 	lds	r30, 0x0116
    12f2:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12f6:	81 e8       	ldi	r24, 0x81	; 129
    12f8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    12fa:	e0 91 16 01 	lds	r30, 0x0116
    12fe:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1302:	c0 e5       	ldi	r28, 0x50	; 80
    1304:	c0 83       	st	Z, r28
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    1306:	e0 91 16 01 	lds	r30, 0x0116
    130a:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    130e:	89 ed       	ldi	r24, 0xD9	; 217
    1310:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
    1312:	e0 91 16 01 	lds	r30, 0x0116
    1316:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    131a:	81 e2       	ldi	r24, 0x21	; 33
    131c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    131e:	e0 91 16 01 	lds	r30, 0x0116
    1322:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1326:	80 e2       	ldi	r24, 0x20	; 32
    1328:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
    132a:	e0 91 16 01 	lds	r30, 0x0116
    132e:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1332:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    1334:	e0 91 16 01 	lds	r30, 0x0116
    1338:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    133c:	8b ed       	ldi	r24, 0xDB	; 219
    133e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    1340:	e0 91 16 01 	lds	r30, 0x0116
    1344:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1348:	80 e3       	ldi	r24, 0x30	; 48
    134a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    134c:	e0 91 16 01 	lds	r30, 0x0116
    1350:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1354:	8d ea       	ldi	r24, 0xAD	; 173
    1356:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    1358:	e0 91 16 01 	lds	r30, 0x0116
    135c:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1360:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    1362:	e0 91 16 01 	lds	r30, 0x0116
    1366:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    136a:	84 ea       	ldi	r24, 0xA4	; 164
    136c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    136e:	e0 91 16 01 	lds	r30, 0x0116
    1372:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1376:	86 ea       	ldi	r24, 0xA6	; 166
    1378:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    137a:	e0 91 16 01 	lds	r30, 0x0116
    137e:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1382:	8f ea       	ldi	r24, 0xAF	; 175
    1384:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    1386:	64 df       	rcall	.-312    	; 0x1250 <OLED_clear>
    1388:	83 b7       	in	r24, 0x33	; 51
	//OLED_splashScreen();
	//OLED_flyingArrows();
	
	// setup 8-bit counter0 without PWM
	// setting Mode of Operation to CTC and Prescaler to div/1024
	TCCR0 |= (1<<WGM01) | (1<<CS02) | (1<<CS00);
    138a:	8d 60       	ori	r24, 0x0D	; 13
    138c:	83 bf       	out	0x33, r24	; 51
    138e:	89 b7       	in	r24, 0x39	; 57
	// Output Compare Interrupt Enable
	TIMSK |= (1<<OCIE0);
    1390:	81 60       	ori	r24, 0x01	; 1
    1392:	89 bf       	out	0x39, r24	; 57
    1394:	c1 bf       	out	0x31, r28	; 49
	// 17ms Counter cycle (4800Hz -> 80 cycles)
	OCR0 = 80;
    1396:	cf 91       	pop	r28
	
}
    1398:	08 95       	ret

0000139a <OLED_goto>:
    139a:	26 2f       	mov	r18, r22

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
    139c:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
    139e:	75 95       	asr	r23
    13a0:	67 95       	ror	r22
    13a2:	75 95       	asr	r23
    13a4:	67 95       	ror	r22
    13a6:	75 95       	asr	r23
    13a8:	67 95       	ror	r22
    13aa:	75 95       	asr	r23
    13ac:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
    13ae:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
    13b0:	80 55       	subi	r24, 0x50	; 80
    13b2:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
    13b4:	e0 91 16 01 	lds	r30, 0x0116
    13b8:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13bc:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
    13be:	e0 91 16 01 	lds	r30, 0x0116
    13c2:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13c6:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
    13c8:	e0 91 16 01 	lds	r30, 0x0116
    13cc:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13d0:	60 83       	st	Z, r22
    13d2:	08 95       	ret

000013d4 <OLED_updateScreen>:
	// set horizontal addressing mode
// 	OLED_writeByteToOLED(oled_cmd, 0x20); // set memory addressing mode
// 	OLED_writeByteToOLED(oled_cmd, 0x00); // set horizontal addressing mode ~ 0d
// 	
	// write OLED buffer to OLED Memory
	OLED_goto(0,0); // todo: start writing in top left corner (maybe not further needed)
    13d4:	60 e0       	ldi	r22, 0x00	; 0
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	de df       	rcall	.-68     	; 0x139a <OLED_goto>
    13de:	80 91 10 01 	lds	r24, 0x0110
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    13e2:	90 91 11 01 	lds	r25, 0x0111
    13e6:	89 2b       	or	r24, r25
    13e8:	b1 f0       	breq	.+44     	; 0x1416 <OLED_updateScreen+0x42>
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	e0 91 12 01 	lds	r30, 0x0112
	{
		OLED_writeByteToOLED(oled_data, oled_buffer[i]);
    13f2:	f0 91 13 01 	lds	r31, 0x0113
    13f6:	e8 0f       	add	r30, r24
    13f8:	f9 1f       	adc	r31, r25
    13fa:	20 81       	ld	r18, Z
    13fc:	e0 91 14 01 	lds	r30, 0x0114
    1400:	f0 91 15 01 	lds	r31, 0x0115
    1404:	20 83       	st	Z, r18
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1406:	01 96       	adiw	r24, 0x01	; 1
// 	OLED_writeByteToOLED(oled_cmd, 0x20); // set memory addressing mode
// 	OLED_writeByteToOLED(oled_cmd, 0x00); // set horizontal addressing mode ~ 0d
// 	
	// write OLED buffer to OLED Memory
	OLED_goto(0,0); // todo: start writing in top left corner (maybe not further needed)
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    1408:	20 91 10 01 	lds	r18, 0x0110
    140c:	30 91 11 01 	lds	r19, 0x0111
    1410:	82 17       	cp	r24, r18
    1412:	93 07       	cpc	r25, r19
    1414:	60 f3       	brcs	.-40     	; 0x13ee <OLED_updateScreen+0x1a>
    1416:	08 95       	ret

00001418 <OLED_bufferGoto>:
    1418:	96 95       	lsr	r25
}

void OLED_bufferGoto(int row, int column)
{
	// change pointer in OLED SRAM buffer
	oled_buffer_position = oled_buffer + (row * 0x80) + column;
    141a:	98 2f       	mov	r25, r24
    141c:	88 27       	eor	r24, r24
    141e:	97 95       	ror	r25
    1420:	87 95       	ror	r24
    1422:	68 0f       	add	r22, r24
    1424:	79 1f       	adc	r23, r25
    1426:	80 91 12 01 	lds	r24, 0x0112
    142a:	90 91 13 01 	lds	r25, 0x0113
    142e:	68 0f       	add	r22, r24
    1430:	79 1f       	adc	r23, r25
    1432:	70 93 0f 01 	sts	0x010F, r23
    1436:	60 93 0e 01 	sts	0x010E, r22
    143a:	08 95       	ret

0000143c <OLED_printCharacter>:
// SPACE (' '). As SPACE corresponds to position 32 in the ASCII table, this 
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
    143c:	0f 93       	push	r16
    143e:	1f 93       	push	r17
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
	character = character-32; // map character to font table
    1444:	80 52       	subi	r24, 0x20	; 32
    1446:	08 2f       	mov	r16, r24
    1448:	10 e0       	ldi	r17, 0x00	; 0
    144a:	00 0f       	add	r16, r16
    144c:	11 1f       	adc	r17, r17
    144e:	00 0f       	add	r16, r16
    1450:	11 1f       	adc	r17, r17
    1452:	00 0f       	add	r16, r16
    1454:	11 1f       	adc	r17, r17
    1456:	c0 e0       	ldi	r28, 0x00	; 0
    1458:	d0 e0       	ldi	r29, 0x00	; 0
    145a:	00 59       	subi	r16, 0x90	; 144
    145c:	1f 4f       	sbci	r17, 0xFF	; 255
    145e:	f8 01       	movw	r30, r16
    1460:	ec 0f       	add	r30, r28
    1462:	fd 1f       	adc	r31, r29
	
	// print 8 columns into OLED Buffer in SRAM
	for(uint8_t i = 0; i < 8; i++)
	{
		saveToAddress(oled_buffer_position, pgm_read_byte(&font8[character][i]));
    1464:	64 91       	lpm	r22, Z
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	80 91 0e 01 	lds	r24, 0x010E
    146c:	90 91 0f 01 	lds	r25, 0x010F
    1470:	7d da       	rcall	.-2822   	; 0x96c <saveToAddress>
    1472:	80 91 0e 01 	lds	r24, 0x010E
		oled_buffer_position++;
    1476:	90 91 0f 01 	lds	r25, 0x010F
    147a:	01 96       	adiw	r24, 0x01	; 1
    147c:	90 93 0f 01 	sts	0x010F, r25
    1480:	80 93 0e 01 	sts	0x010E, r24
    1484:	21 96       	adiw	r28, 0x01	; 1
    1486:	c8 30       	cpi	r28, 0x08	; 8
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED Buffer in SRAM
	for(uint8_t i = 0; i < 8; i++)
    1488:	d1 05       	cpc	r29, r1
    148a:	49 f7       	brne	.-46     	; 0x145e <OLED_printCharacter+0x22>
    148c:	df 91       	pop	r29
	// print 8 columns into OLED RAM
// 	for(uint8_t i = 0; i < 8; i++)
// 	{
// 		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
// 	}
}
    148e:	cf 91       	pop	r28
    1490:	1f 91       	pop	r17
    1492:	0f 91       	pop	r16
    1494:	08 95       	ret

00001496 <OLED_printString>:
    1496:	1f 93       	push	r17

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
    149e:	10 e0       	ldi	r17, 0x00	; 0
    14a0:	06 c0       	rjmp	.+12     	; 0x14ae <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
    14a2:	fe 01       	movw	r30, r28
    14a4:	e8 0f       	add	r30, r24
    14a6:	f9 1f       	adc	r31, r25
    14a8:	80 81       	ld	r24, Z
    14aa:	c8 df       	rcall	.-112    	; 0x143c <OLED_printCharacter>
    14ac:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
    14ae:	81 2f       	mov	r24, r17
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	fe 01       	movw	r30, r28
    14b4:	01 90       	ld	r0, Z+
    14b6:	00 20       	and	r0, r0
    14b8:	e9 f7       	brne	.-6      	; 0x14b4 <OLED_printString+0x1e>
    14ba:	31 97       	sbiw	r30, 0x01	; 1
    14bc:	ec 1b       	sub	r30, r28
    14be:	fd 0b       	sbc	r31, r29
    14c0:	8e 17       	cp	r24, r30
    14c2:	9f 07       	cpc	r25, r31
    14c4:	70 f3       	brcs	.-36     	; 0x14a2 <OLED_printString+0xc>
    14c6:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
    14c8:	cf 91       	pop	r28
    14ca:	1f 91       	pop	r17
    14cc:	08 95       	ret

000014ce <OLED_printArrow>:
    14ce:	68 e1       	ldi	r22, 0x18	; 24
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	// write arrow to oled sram buffer
	saveToAddress(oled_buffer_position, 0b00011000);
    14d0:	70 e0       	ldi	r23, 0x00	; 0
    14d2:	80 91 0e 01 	lds	r24, 0x010E
    14d6:	90 91 0f 01 	lds	r25, 0x010F
    14da:	48 da       	rcall	.-2928   	; 0x96c <saveToAddress>
    14dc:	80 91 0e 01 	lds	r24, 0x010E
	oled_buffer_position++;
    14e0:	90 91 0f 01 	lds	r25, 0x010F
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	90 93 0f 01 	sts	0x010F, r25
    14ea:	80 93 0e 01 	sts	0x010E, r24
    14ee:	68 e1       	ldi	r22, 0x18	; 24
	saveToAddress(oled_buffer_position, 0b00011000);
    14f0:	70 e0       	ldi	r23, 0x00	; 0
    14f2:	3c da       	rcall	.-2952   	; 0x96c <saveToAddress>
    14f4:	80 91 0e 01 	lds	r24, 0x010E
	oled_buffer_position++;
    14f8:	90 91 0f 01 	lds	r25, 0x010F
    14fc:	01 96       	adiw	r24, 0x01	; 1
    14fe:	90 93 0f 01 	sts	0x010F, r25
    1502:	80 93 0e 01 	sts	0x010E, r24
    1506:	6e e7       	ldi	r22, 0x7E	; 126
    1508:	70 e0       	ldi	r23, 0x00	; 0
	saveToAddress(oled_buffer_position, 0b01111110);
    150a:	30 da       	rcall	.-2976   	; 0x96c <saveToAddress>
    150c:	80 91 0e 01 	lds	r24, 0x010E
    1510:	90 91 0f 01 	lds	r25, 0x010F
	oled_buffer_position++;
    1514:	01 96       	adiw	r24, 0x01	; 1
    1516:	90 93 0f 01 	sts	0x010F, r25
    151a:	80 93 0e 01 	sts	0x010E, r24
    151e:	6c e3       	ldi	r22, 0x3C	; 60
    1520:	70 e0       	ldi	r23, 0x00	; 0
    1522:	24 da       	rcall	.-3000   	; 0x96c <saveToAddress>
	saveToAddress(oled_buffer_position, 0b00111100);
    1524:	80 91 0e 01 	lds	r24, 0x010E
    1528:	90 91 0f 01 	lds	r25, 0x010F
	oled_buffer_position++;
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	90 93 0f 01 	sts	0x010F, r25
    1532:	80 93 0e 01 	sts	0x010E, r24
    1536:	68 e1       	ldi	r22, 0x18	; 24
    1538:	70 e0       	ldi	r23, 0x00	; 0
    153a:	18 da       	rcall	.-3024   	; 0x96c <saveToAddress>
    153c:	80 91 0e 01 	lds	r24, 0x010E
	saveToAddress(oled_buffer_position, 0b00011000);
    1540:	90 91 0f 01 	lds	r25, 0x010F
    1544:	01 96       	adiw	r24, 0x01	; 1
	oled_buffer_position++;
    1546:	90 93 0f 01 	sts	0x010F, r25
    154a:	80 93 0e 01 	sts	0x010E, r24
    154e:	08 95       	ret

00001550 <OLED_clearArrow>:
    1550:	0f 93       	push	r16
    1552:	1f 93       	push	r17
    1554:	cf 93       	push	r28
    1556:	df 93       	push	r29
    1558:	c1 e0       	ldi	r28, 0x01	; 1
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    155a:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
    155c:	80 e0       	ldi	r24, 0x00	; 0
    155e:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_bufferGoto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1560:	00 e0       	ldi	r16, 0x00	; 0

void OLED_clearArrow(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_bufferGoto(count_row,0); // move to first column in row
    1562:	60 e0       	ldi	r22, 0x00	; 0
    1564:	70 e0       	ldi	r23, 0x00	; 0
    1566:	58 df       	rcall	.-336    	; 0x1418 <OLED_bufferGoto>
    1568:	10 2f       	mov	r17, r16

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    156a:	60 e0       	ldi	r22, 0x00	; 0
		{
			saveToAddress(oled_buffer_position, 0x00);
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	80 91 0e 01 	lds	r24, 0x010E
    1572:	90 91 0f 01 	lds	r25, 0x010F
    1576:	fa d9       	rcall	.-3084   	; 0x96c <saveToAddress>
    1578:	80 91 0e 01 	lds	r24, 0x010E
			oled_buffer_position++;
    157c:	90 91 0f 01 	lds	r25, 0x010F
    1580:	01 96       	adiw	r24, 0x01	; 1
    1582:	90 93 0f 01 	sts	0x010F, r25
    1586:	80 93 0e 01 	sts	0x010E, r24
    158a:	1f 5f       	subi	r17, 0xFF	; 255
    158c:	15 30       	cpi	r17, 0x05	; 5
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_bufferGoto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    158e:	69 f7       	brne	.-38     	; 0x156a <OLED_clearArrow+0x1a>
    1590:	8c 2f       	mov	r24, r28
    1592:	9d 2f       	mov	r25, r29
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1594:	21 96       	adiw	r28, 0x01	; 1
    1596:	c9 30       	cpi	r28, 0x09	; 9
    1598:	d1 05       	cpc	r29, r1
    159a:	19 f7       	brne	.-58     	; 0x1562 <OLED_clearArrow+0x12>
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
// 		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
// 		{
// 			OLED_writeByteToOLED(oled_data, 0x00);
// 		}
// 	}
}
    15a0:	1f 91       	pop	r17
    15a2:	0f 91       	pop	r16
    15a4:	08 95       	ret

000015a6 <OLED_moveArrow>:
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    15aa:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
    15ac:	d1 df       	rcall	.-94     	; 0x1550 <OLED_clearArrow>
    15ae:	60 e0       	ldi	r22, 0x00	; 0
	//OLED_goto(joy_counter,0); // move cursor to specified row
	OLED_bufferGoto(joy_counter, 0);
    15b0:	70 e0       	ldi	r23, 0x00	; 0
    15b2:	ce 01       	movw	r24, r28
    15b4:	31 df       	rcall	.-414    	; 0x1418 <OLED_bufferGoto>
    15b6:	8b df       	rcall	.-234    	; 0x14ce <OLED_printArrow>
    15b8:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
    15ba:	cf 91       	pop	r28
    15bc:	08 95       	ret

000015be <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    15be:	10 92 7d 02 	sts	0x027D, r1
	currentSliPosition.L_abs = 0;
    15c2:	10 92 7e 02 	sts	0x027E, r1
	currentSliPosition.R_per = 0;
    15c6:	10 92 7f 02 	sts	0x027F, r1
	currentSliPosition.L_per = 0;
    15ca:	10 92 80 02 	sts	0x0280, r1
    15ce:	08 95       	ret

000015d0 <SPI_init>:

void SPI_init()
{
	//init external interrupt INT2 on falling edge
	#if defined(__AVR_ATmega162__)
		set_bit(GICR, INT2);
    15d0:	8b b7       	in	r24, 0x3b	; 59
    15d2:	80 62       	ori	r24, 0x20	; 32
    15d4:	8b bf       	out	0x3b, r24	; 59
		clear_bit(EMCUCR, ISC2);
    15d6:	86 b7       	in	r24, 0x36	; 54
    15d8:	8e 7f       	andi	r24, 0xFE	; 254
    15da:	86 bf       	out	0x36, r24	; 54
		
		// Set _SS, MOSI and SCK output, all others input
		DDR_SPI |= (1<<SS_CAN_CONTROLLER_PIN_MODE) | (1<<MOSI_PIN) | (1<<SCK_PIN);
    15dc:	87 b3       	in	r24, 0x17	; 23
    15de:	80 6b       	ori	r24, 0xB0	; 176
    15e0:	87 bb       	out	0x17, r24	; 23
	#endif
	
	

	// Enable SPI, Master, set clock rate fck/4
	SPCR = (1<<SPE) | (1<<MSTR);
    15e2:	80 e5       	ldi	r24, 0x50	; 80
    15e4:	8d b9       	out	0x0d, r24	; 13
	
	// clock rate fck/2
	SPSR = (1<<SPI2X);
    15e6:	81 e0       	ldi	r24, 0x01	; 1
    15e8:	8e b9       	out	0x0e, r24	; 14

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORT_SPI, SS_CAN_CONTROLLER_PIN);
    15ea:	c4 9a       	sbi	0x18, 4	; 24
    15ec:	08 95       	ret

000015ee <SPI_send>:
}

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    15ee:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    15f0:	77 9b       	sbis	0x0e, 7	; 14
    15f2:	fe cf       	rjmp	.-4      	; 0x15f0 <SPI_send+0x2>
}
    15f4:	08 95       	ret

000015f6 <SPI_receive>:

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    15f6:	8f ef       	ldi	r24, 0xFF	; 255
    15f8:	fa df       	rcall	.-12     	; 0x15ee <SPI_send>
    15fa:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    15fc:	fe cf       	rjmp	.-4      	; 0x15fa <SPI_receive+0x4>
    15fe:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    1600:	08 95       	ret

00001602 <SPI_activateSlave>:

	return data;
}
    1602:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    1604:	01 c0       	rjmp	.+2      	; 0x1608 <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    1606:	c4 98       	cbi	0x18, 4	; 24
    1608:	08 95       	ret

0000160a <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    160a:	81 11       	cpse	r24, r1
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    160e:	c4 9a       	sbi	0x18, 4	; 24
    1610:	08 95       	ret

00001612 <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1612:	5d 9b       	sbis	0x0b, 5	; 11
    1614:	fe cf       	rjmp	.-4      	; 0x1612 <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    1616:	8c b9       	out	0x0c, r24	; 12
    1618:	08 95       	ret

0000161a <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    161a:	5f 9b       	sbis	0x0b, 7	; 11
    161c:	fe cf       	rjmp	.-4      	; 0x161a <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    161e:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
    1620:	08 95       	ret

00001622 <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    1622:	ef 92       	push	r14
    1624:	ff 92       	push	r15
    1626:	0f 93       	push	r16
    1628:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    162a:	bb 27       	eor	r27, r27
    162c:	a1 2f       	mov	r26, r17
    162e:	90 2f       	mov	r25, r16
    1630:	8f 2d       	mov	r24, r15
    1632:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    1634:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1636:	88 e1       	ldi	r24, 0x18	; 24
    1638:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    163a:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	#if defined(__AVR_ATmega162__)
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    163c:	8e e8       	ldi	r24, 0x8E	; 142
    163e:	80 bd       	out	0x20, r24	; 32
	
	#if defined(__AVR_ATmega2560__)
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	#endif
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    1640:	6d e0       	ldi	r22, 0x0D	; 13
    1642:	7b e0       	ldi	r23, 0x0B	; 11
    1644:	89 e0       	ldi	r24, 0x09	; 9
    1646:	9b e0       	ldi	r25, 0x0B	; 11
    1648:	79 d1       	rcall	.+754    	; 0x193c <fdevopen>
    164a:	1f 91       	pop	r17
    164c:	0f 91       	pop	r16
    164e:	ff 90       	pop	r15
    1650:	ef 90       	pop	r14
    1652:	08 95       	ret

00001654 <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    1654:	9b 01       	movw	r18, r22
	
	switch(channel){
    1656:	82 30       	cpi	r24, 0x02	; 2
    1658:	69 f0       	breq	.+26     	; 0x1674 <ADC_request+0x20>
    165a:	18 f4       	brcc	.+6      	; 0x1662 <ADC_request+0xe>
    165c:	81 30       	cpi	r24, 0x01	; 1
    165e:	31 f0       	breq	.+12     	; 0x166c <ADC_request+0x18>
    1660:	15 c0       	rjmp	.+42     	; 0x168c <ADC_request+0x38>
    1662:	83 30       	cpi	r24, 0x03	; 3
    1664:	59 f0       	breq	.+22     	; 0x167c <ADC_request+0x28>
    1666:	84 30       	cpi	r24, 0x04	; 4
    1668:	69 f0       	breq	.+26     	; 0x1684 <ADC_request+0x30>
    166a:	10 c0       	rjmp	.+32     	; 0x168c <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    166c:	64 e0       	ldi	r22, 0x04	; 4
    166e:	c9 01       	movw	r24, r18
    1670:	7d c9       	rjmp	.-3334   	; 0x96c <saveToAddress>
    1672:	08 95       	ret
			break;
    1674:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    1676:	c9 01       	movw	r24, r18
    1678:	79 c9       	rjmp	.-3342   	; 0x96c <saveToAddress>
    167a:	08 95       	ret
    167c:	66 e0       	ldi	r22, 0x06	; 6
			break;
    167e:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    1680:	75 c9       	rjmp	.-3350   	; 0x96c <saveToAddress>
    1682:	08 95       	ret
    1684:	67 e0       	ldi	r22, 0x07	; 7
    1686:	c9 01       	movw	r24, r18
			break;
    1688:	71 c9       	rjmp	.-3358   	; 0x96c <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    168a:	08 95       	ret
    168c:	84 e4       	ldi	r24, 0x44	; 68
    168e:	92 e0       	ldi	r25, 0x02	; 2
    1690:	9f 93       	push	r25
			break;
    1692:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    1694:	9d d1       	rcall	.+826    	; 0x19d0 <printf>
    1696:	0f 90       	pop	r0
    1698:	0f 90       	pop	r0
    169a:	08 95       	ret

0000169c <ADC_read>:
    169c:	64 c9       	rjmp	.-3384   	; 0x966 <readFromAddress>
    169e:	08 95       	ret

000016a0 <__divmodhi4>:
			break;
    16a0:	97 fb       	bst	r25, 7
    16a2:	07 2e       	mov	r0, r23
    16a4:	16 f4       	brtc	.+4      	; 0x16aa <__divmodhi4+0xa>
    16a6:	00 94       	com	r0
    16a8:	06 d0       	rcall	.+12     	; 0x16b6 <__divmodhi4_neg1>
    16aa:	77 fd       	sbrc	r23, 7
    16ac:	08 d0       	rcall	.+16     	; 0x16be <__divmodhi4_neg2>
    16ae:	0b d0       	rcall	.+22     	; 0x16c6 <__udivmodhi4>
    16b0:	07 fc       	sbrc	r0, 7
    16b2:	05 d0       	rcall	.+10     	; 0x16be <__divmodhi4_neg2>
    16b4:	3e f4       	brtc	.+14     	; 0x16c4 <__divmodhi4_exit>

000016b6 <__divmodhi4_neg1>:
    16b6:	90 95       	com	r25
    16b8:	81 95       	neg	r24
    16ba:	9f 4f       	sbci	r25, 0xFF	; 255
    16bc:	08 95       	ret

000016be <__divmodhi4_neg2>:
    16be:	70 95       	com	r23
    16c0:	61 95       	neg	r22
    16c2:	7f 4f       	sbci	r23, 0xFF	; 255

000016c4 <__divmodhi4_exit>:
    16c4:	08 95       	ret

000016c6 <__udivmodhi4>:
    16c6:	aa 1b       	sub	r26, r26
    16c8:	bb 1b       	sub	r27, r27
    16ca:	51 e1       	ldi	r21, 0x11	; 17
    16cc:	07 c0       	rjmp	.+14     	; 0x16dc <__udivmodhi4_ep>

000016ce <__udivmodhi4_loop>:
    16ce:	aa 1f       	adc	r26, r26
    16d0:	bb 1f       	adc	r27, r27
    16d2:	a6 17       	cp	r26, r22
    16d4:	b7 07       	cpc	r27, r23
    16d6:	10 f0       	brcs	.+4      	; 0x16dc <__udivmodhi4_ep>
    16d8:	a6 1b       	sub	r26, r22
    16da:	b7 0b       	sbc	r27, r23

000016dc <__udivmodhi4_ep>:
    16dc:	88 1f       	adc	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	5a 95       	dec	r21
    16e2:	a9 f7       	brne	.-22     	; 0x16ce <__udivmodhi4_loop>
    16e4:	80 95       	com	r24
    16e6:	90 95       	com	r25
    16e8:	bc 01       	movw	r22, r24
    16ea:	cd 01       	movw	r24, r26
    16ec:	08 95       	ret

000016ee <malloc>:
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	82 30       	cpi	r24, 0x02	; 2
    16f4:	91 05       	cpc	r25, r1
    16f6:	10 f4       	brcc	.+4      	; 0x16fc <malloc+0xe>
    16f8:	82 e0       	ldi	r24, 0x02	; 2
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	e0 91 83 02 	lds	r30, 0x0283
    1700:	f0 91 84 02 	lds	r31, 0x0284
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	a0 e0       	ldi	r26, 0x00	; 0
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	30 97       	sbiw	r30, 0x00	; 0
    170e:	39 f1       	breq	.+78     	; 0x175e <malloc+0x70>
    1710:	40 81       	ld	r20, Z
    1712:	51 81       	ldd	r21, Z+1	; 0x01
    1714:	48 17       	cp	r20, r24
    1716:	59 07       	cpc	r21, r25
    1718:	b8 f0       	brcs	.+46     	; 0x1748 <malloc+0x5a>
    171a:	48 17       	cp	r20, r24
    171c:	59 07       	cpc	r21, r25
    171e:	71 f4       	brne	.+28     	; 0x173c <malloc+0x4e>
    1720:	82 81       	ldd	r24, Z+2	; 0x02
    1722:	93 81       	ldd	r25, Z+3	; 0x03
    1724:	10 97       	sbiw	r26, 0x00	; 0
    1726:	29 f0       	breq	.+10     	; 0x1732 <malloc+0x44>
    1728:	13 96       	adiw	r26, 0x03	; 3
    172a:	9c 93       	st	X, r25
    172c:	8e 93       	st	-X, r24
    172e:	12 97       	sbiw	r26, 0x02	; 2
    1730:	2c c0       	rjmp	.+88     	; 0x178a <malloc+0x9c>
    1732:	90 93 84 02 	sts	0x0284, r25
    1736:	80 93 83 02 	sts	0x0283, r24
    173a:	27 c0       	rjmp	.+78     	; 0x178a <malloc+0x9c>
    173c:	21 15       	cp	r18, r1
    173e:	31 05       	cpc	r19, r1
    1740:	31 f0       	breq	.+12     	; 0x174e <malloc+0x60>
    1742:	42 17       	cp	r20, r18
    1744:	53 07       	cpc	r21, r19
    1746:	18 f0       	brcs	.+6      	; 0x174e <malloc+0x60>
    1748:	a9 01       	movw	r20, r18
    174a:	db 01       	movw	r26, r22
    174c:	01 c0       	rjmp	.+2      	; 0x1750 <malloc+0x62>
    174e:	ef 01       	movw	r28, r30
    1750:	9a 01       	movw	r18, r20
    1752:	bd 01       	movw	r22, r26
    1754:	df 01       	movw	r26, r30
    1756:	02 80       	ldd	r0, Z+2	; 0x02
    1758:	f3 81       	ldd	r31, Z+3	; 0x03
    175a:	e0 2d       	mov	r30, r0
    175c:	d7 cf       	rjmp	.-82     	; 0x170c <malloc+0x1e>
    175e:	21 15       	cp	r18, r1
    1760:	31 05       	cpc	r19, r1
    1762:	f9 f0       	breq	.+62     	; 0x17a2 <malloc+0xb4>
    1764:	28 1b       	sub	r18, r24
    1766:	39 0b       	sbc	r19, r25
    1768:	24 30       	cpi	r18, 0x04	; 4
    176a:	31 05       	cpc	r19, r1
    176c:	80 f4       	brcc	.+32     	; 0x178e <malloc+0xa0>
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	9b 81       	ldd	r25, Y+3	; 0x03
    1772:	61 15       	cp	r22, r1
    1774:	71 05       	cpc	r23, r1
    1776:	21 f0       	breq	.+8      	; 0x1780 <malloc+0x92>
    1778:	fb 01       	movw	r30, r22
    177a:	93 83       	std	Z+3, r25	; 0x03
    177c:	82 83       	std	Z+2, r24	; 0x02
    177e:	04 c0       	rjmp	.+8      	; 0x1788 <malloc+0x9a>
    1780:	90 93 84 02 	sts	0x0284, r25
    1784:	80 93 83 02 	sts	0x0283, r24
    1788:	fe 01       	movw	r30, r28
    178a:	32 96       	adiw	r30, 0x02	; 2
    178c:	44 c0       	rjmp	.+136    	; 0x1816 <malloc+0x128>
    178e:	fe 01       	movw	r30, r28
    1790:	e2 0f       	add	r30, r18
    1792:	f3 1f       	adc	r31, r19
    1794:	81 93       	st	Z+, r24
    1796:	91 93       	st	Z+, r25
    1798:	22 50       	subi	r18, 0x02	; 2
    179a:	31 09       	sbc	r19, r1
    179c:	39 83       	std	Y+1, r19	; 0x01
    179e:	28 83       	st	Y, r18
    17a0:	3a c0       	rjmp	.+116    	; 0x1816 <malloc+0x128>
    17a2:	20 91 81 02 	lds	r18, 0x0281
    17a6:	30 91 82 02 	lds	r19, 0x0282
    17aa:	23 2b       	or	r18, r19
    17ac:	41 f4       	brne	.+16     	; 0x17be <malloc+0xd0>
    17ae:	20 91 02 01 	lds	r18, 0x0102
    17b2:	30 91 03 01 	lds	r19, 0x0103
    17b6:	30 93 82 02 	sts	0x0282, r19
    17ba:	20 93 81 02 	sts	0x0281, r18
    17be:	20 91 00 01 	lds	r18, 0x0100
    17c2:	30 91 01 01 	lds	r19, 0x0101
    17c6:	21 15       	cp	r18, r1
    17c8:	31 05       	cpc	r19, r1
    17ca:	41 f4       	brne	.+16     	; 0x17dc <malloc+0xee>
    17cc:	2d b7       	in	r18, 0x3d	; 61
    17ce:	3e b7       	in	r19, 0x3e	; 62
    17d0:	40 91 04 01 	lds	r20, 0x0104
    17d4:	50 91 05 01 	lds	r21, 0x0105
    17d8:	24 1b       	sub	r18, r20
    17da:	35 0b       	sbc	r19, r21
    17dc:	e0 91 81 02 	lds	r30, 0x0281
    17e0:	f0 91 82 02 	lds	r31, 0x0282
    17e4:	e2 17       	cp	r30, r18
    17e6:	f3 07       	cpc	r31, r19
    17e8:	a0 f4       	brcc	.+40     	; 0x1812 <malloc+0x124>
    17ea:	2e 1b       	sub	r18, r30
    17ec:	3f 0b       	sbc	r19, r31
    17ee:	28 17       	cp	r18, r24
    17f0:	39 07       	cpc	r19, r25
    17f2:	78 f0       	brcs	.+30     	; 0x1812 <malloc+0x124>
    17f4:	ac 01       	movw	r20, r24
    17f6:	4e 5f       	subi	r20, 0xFE	; 254
    17f8:	5f 4f       	sbci	r21, 0xFF	; 255
    17fa:	24 17       	cp	r18, r20
    17fc:	35 07       	cpc	r19, r21
    17fe:	48 f0       	brcs	.+18     	; 0x1812 <malloc+0x124>
    1800:	4e 0f       	add	r20, r30
    1802:	5f 1f       	adc	r21, r31
    1804:	50 93 82 02 	sts	0x0282, r21
    1808:	40 93 81 02 	sts	0x0281, r20
    180c:	81 93       	st	Z+, r24
    180e:	91 93       	st	Z+, r25
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <malloc+0x128>
    1812:	e0 e0       	ldi	r30, 0x00	; 0
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	cf 01       	movw	r24, r30
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	08 95       	ret

0000181e <free>:
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	00 97       	sbiw	r24, 0x00	; 0
    1824:	09 f4       	brne	.+2      	; 0x1828 <free+0xa>
    1826:	87 c0       	rjmp	.+270    	; 0x1936 <free+0x118>
    1828:	fc 01       	movw	r30, r24
    182a:	32 97       	sbiw	r30, 0x02	; 2
    182c:	13 82       	std	Z+3, r1	; 0x03
    182e:	12 82       	std	Z+2, r1	; 0x02
    1830:	c0 91 83 02 	lds	r28, 0x0283
    1834:	d0 91 84 02 	lds	r29, 0x0284
    1838:	20 97       	sbiw	r28, 0x00	; 0
    183a:	81 f4       	brne	.+32     	; 0x185c <free+0x3e>
    183c:	20 81       	ld	r18, Z
    183e:	31 81       	ldd	r19, Z+1	; 0x01
    1840:	28 0f       	add	r18, r24
    1842:	39 1f       	adc	r19, r25
    1844:	80 91 81 02 	lds	r24, 0x0281
    1848:	90 91 82 02 	lds	r25, 0x0282
    184c:	82 17       	cp	r24, r18
    184e:	93 07       	cpc	r25, r19
    1850:	79 f5       	brne	.+94     	; 0x18b0 <free+0x92>
    1852:	f0 93 82 02 	sts	0x0282, r31
    1856:	e0 93 81 02 	sts	0x0281, r30
    185a:	6d c0       	rjmp	.+218    	; 0x1936 <free+0x118>
    185c:	de 01       	movw	r26, r28
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	ae 17       	cp	r26, r30
    1864:	bf 07       	cpc	r27, r31
    1866:	50 f4       	brcc	.+20     	; 0x187c <free+0x5e>
    1868:	12 96       	adiw	r26, 0x02	; 2
    186a:	4d 91       	ld	r20, X+
    186c:	5c 91       	ld	r21, X
    186e:	13 97       	sbiw	r26, 0x03	; 3
    1870:	9d 01       	movw	r18, r26
    1872:	41 15       	cp	r20, r1
    1874:	51 05       	cpc	r21, r1
    1876:	09 f1       	breq	.+66     	; 0x18ba <free+0x9c>
    1878:	da 01       	movw	r26, r20
    187a:	f3 cf       	rjmp	.-26     	; 0x1862 <free+0x44>
    187c:	b3 83       	std	Z+3, r27	; 0x03
    187e:	a2 83       	std	Z+2, r26	; 0x02
    1880:	40 81       	ld	r20, Z
    1882:	51 81       	ldd	r21, Z+1	; 0x01
    1884:	84 0f       	add	r24, r20
    1886:	95 1f       	adc	r25, r21
    1888:	8a 17       	cp	r24, r26
    188a:	9b 07       	cpc	r25, r27
    188c:	71 f4       	brne	.+28     	; 0x18aa <free+0x8c>
    188e:	8d 91       	ld	r24, X+
    1890:	9c 91       	ld	r25, X
    1892:	11 97       	sbiw	r26, 0x01	; 1
    1894:	84 0f       	add	r24, r20
    1896:	95 1f       	adc	r25, r21
    1898:	02 96       	adiw	r24, 0x02	; 2
    189a:	91 83       	std	Z+1, r25	; 0x01
    189c:	80 83       	st	Z, r24
    189e:	12 96       	adiw	r26, 0x02	; 2
    18a0:	8d 91       	ld	r24, X+
    18a2:	9c 91       	ld	r25, X
    18a4:	13 97       	sbiw	r26, 0x03	; 3
    18a6:	93 83       	std	Z+3, r25	; 0x03
    18a8:	82 83       	std	Z+2, r24	; 0x02
    18aa:	21 15       	cp	r18, r1
    18ac:	31 05       	cpc	r19, r1
    18ae:	29 f4       	brne	.+10     	; 0x18ba <free+0x9c>
    18b0:	f0 93 84 02 	sts	0x0284, r31
    18b4:	e0 93 83 02 	sts	0x0283, r30
    18b8:	3e c0       	rjmp	.+124    	; 0x1936 <free+0x118>
    18ba:	d9 01       	movw	r26, r18
    18bc:	13 96       	adiw	r26, 0x03	; 3
    18be:	fc 93       	st	X, r31
    18c0:	ee 93       	st	-X, r30
    18c2:	12 97       	sbiw	r26, 0x02	; 2
    18c4:	4d 91       	ld	r20, X+
    18c6:	5d 91       	ld	r21, X+
    18c8:	a4 0f       	add	r26, r20
    18ca:	b5 1f       	adc	r27, r21
    18cc:	ea 17       	cp	r30, r26
    18ce:	fb 07       	cpc	r31, r27
    18d0:	79 f4       	brne	.+30     	; 0x18f0 <free+0xd2>
    18d2:	80 81       	ld	r24, Z
    18d4:	91 81       	ldd	r25, Z+1	; 0x01
    18d6:	84 0f       	add	r24, r20
    18d8:	95 1f       	adc	r25, r21
    18da:	02 96       	adiw	r24, 0x02	; 2
    18dc:	d9 01       	movw	r26, r18
    18de:	11 96       	adiw	r26, 0x01	; 1
    18e0:	9c 93       	st	X, r25
    18e2:	8e 93       	st	-X, r24
    18e4:	82 81       	ldd	r24, Z+2	; 0x02
    18e6:	93 81       	ldd	r25, Z+3	; 0x03
    18e8:	13 96       	adiw	r26, 0x03	; 3
    18ea:	9c 93       	st	X, r25
    18ec:	8e 93       	st	-X, r24
    18ee:	12 97       	sbiw	r26, 0x02	; 2
    18f0:	e0 e0       	ldi	r30, 0x00	; 0
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	9b 81       	ldd	r25, Y+3	; 0x03
    18f8:	00 97       	sbiw	r24, 0x00	; 0
    18fa:	19 f0       	breq	.+6      	; 0x1902 <free+0xe4>
    18fc:	fe 01       	movw	r30, r28
    18fe:	ec 01       	movw	r28, r24
    1900:	f9 cf       	rjmp	.-14     	; 0x18f4 <free+0xd6>
    1902:	ce 01       	movw	r24, r28
    1904:	02 96       	adiw	r24, 0x02	; 2
    1906:	28 81       	ld	r18, Y
    1908:	39 81       	ldd	r19, Y+1	; 0x01
    190a:	82 0f       	add	r24, r18
    190c:	93 1f       	adc	r25, r19
    190e:	20 91 81 02 	lds	r18, 0x0281
    1912:	30 91 82 02 	lds	r19, 0x0282
    1916:	28 17       	cp	r18, r24
    1918:	39 07       	cpc	r19, r25
    191a:	69 f4       	brne	.+26     	; 0x1936 <free+0x118>
    191c:	30 97       	sbiw	r30, 0x00	; 0
    191e:	29 f4       	brne	.+10     	; 0x192a <free+0x10c>
    1920:	10 92 84 02 	sts	0x0284, r1
    1924:	10 92 83 02 	sts	0x0283, r1
    1928:	02 c0       	rjmp	.+4      	; 0x192e <free+0x110>
    192a:	13 82       	std	Z+3, r1	; 0x03
    192c:	12 82       	std	Z+2, r1	; 0x02
    192e:	d0 93 82 02 	sts	0x0282, r29
    1932:	c0 93 81 02 	sts	0x0281, r28
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	08 95       	ret

0000193c <fdevopen>:
    193c:	0f 93       	push	r16
    193e:	1f 93       	push	r17
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	ec 01       	movw	r28, r24
    1946:	8b 01       	movw	r16, r22
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	31 f4       	brne	.+12     	; 0x1958 <fdevopen+0x1c>
    194c:	61 15       	cp	r22, r1
    194e:	71 05       	cpc	r23, r1
    1950:	19 f4       	brne	.+6      	; 0x1958 <fdevopen+0x1c>
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	37 c0       	rjmp	.+110    	; 0x19c6 <fdevopen+0x8a>
    1958:	6e e0       	ldi	r22, 0x0E	; 14
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	3d d2       	rcall	.+1146   	; 0x1ddc <calloc>
    1962:	fc 01       	movw	r30, r24
    1964:	00 97       	sbiw	r24, 0x00	; 0
    1966:	a9 f3       	breq	.-22     	; 0x1952 <fdevopen+0x16>
    1968:	80 e8       	ldi	r24, 0x80	; 128
    196a:	83 83       	std	Z+3, r24	; 0x03
    196c:	01 15       	cp	r16, r1
    196e:	11 05       	cpc	r17, r1
    1970:	71 f0       	breq	.+28     	; 0x198e <fdevopen+0x52>
    1972:	13 87       	std	Z+11, r17	; 0x0b
    1974:	02 87       	std	Z+10, r16	; 0x0a
    1976:	81 e8       	ldi	r24, 0x81	; 129
    1978:	83 83       	std	Z+3, r24	; 0x03
    197a:	80 91 85 02 	lds	r24, 0x0285
    197e:	90 91 86 02 	lds	r25, 0x0286
    1982:	89 2b       	or	r24, r25
    1984:	21 f4       	brne	.+8      	; 0x198e <fdevopen+0x52>
    1986:	f0 93 86 02 	sts	0x0286, r31
    198a:	e0 93 85 02 	sts	0x0285, r30
    198e:	20 97       	sbiw	r28, 0x00	; 0
    1990:	c9 f0       	breq	.+50     	; 0x19c4 <fdevopen+0x88>
    1992:	d1 87       	std	Z+9, r29	; 0x09
    1994:	c0 87       	std	Z+8, r28	; 0x08
    1996:	83 81       	ldd	r24, Z+3	; 0x03
    1998:	82 60       	ori	r24, 0x02	; 2
    199a:	83 83       	std	Z+3, r24	; 0x03
    199c:	80 91 87 02 	lds	r24, 0x0287
    19a0:	90 91 88 02 	lds	r25, 0x0288
    19a4:	89 2b       	or	r24, r25
    19a6:	71 f4       	brne	.+28     	; 0x19c4 <fdevopen+0x88>
    19a8:	f0 93 88 02 	sts	0x0288, r31
    19ac:	e0 93 87 02 	sts	0x0287, r30
    19b0:	80 91 89 02 	lds	r24, 0x0289
    19b4:	90 91 8a 02 	lds	r25, 0x028A
    19b8:	89 2b       	or	r24, r25
    19ba:	21 f4       	brne	.+8      	; 0x19c4 <fdevopen+0x88>
    19bc:	f0 93 8a 02 	sts	0x028A, r31
    19c0:	e0 93 89 02 	sts	0x0289, r30
    19c4:	cf 01       	movw	r24, r30
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	1f 91       	pop	r17
    19cc:	0f 91       	pop	r16
    19ce:	08 95       	ret

000019d0 <printf>:
    19d0:	a0 e0       	ldi	r26, 0x00	; 0
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	ed ee       	ldi	r30, 0xED	; 237
    19d6:	fc e0       	ldi	r31, 0x0C	; 12
    19d8:	d8 c2       	rjmp	.+1456   	; 0x1f8a <__prologue_saves__+0x20>
    19da:	fe 01       	movw	r30, r28
    19dc:	35 96       	adiw	r30, 0x05	; 5
    19de:	61 91       	ld	r22, Z+
    19e0:	71 91       	ld	r23, Z+
    19e2:	af 01       	movw	r20, r30
    19e4:	80 91 87 02 	lds	r24, 0x0287
    19e8:	90 91 88 02 	lds	r25, 0x0288
    19ec:	34 d0       	rcall	.+104    	; 0x1a56 <vfprintf>
    19ee:	e2 e0       	ldi	r30, 0x02	; 2
    19f0:	e8 c2       	rjmp	.+1488   	; 0x1fc2 <__epilogue_restores__+0x20>

000019f2 <putchar>:
    19f2:	60 91 87 02 	lds	r22, 0x0287
    19f6:	70 91 88 02 	lds	r23, 0x0288
    19fa:	27 c2       	rjmp	.+1102   	; 0x1e4a <fputc>

000019fc <puts>:
    19fc:	0f 93       	push	r16
    19fe:	1f 93       	push	r17
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	e0 91 87 02 	lds	r30, 0x0287
    1a08:	f0 91 88 02 	lds	r31, 0x0288
    1a0c:	23 81       	ldd	r18, Z+3	; 0x03
    1a0e:	21 ff       	sbrs	r18, 1
    1a10:	1b c0       	rjmp	.+54     	; 0x1a48 <puts+0x4c>
    1a12:	ec 01       	movw	r28, r24
    1a14:	00 e0       	ldi	r16, 0x00	; 0
    1a16:	10 e0       	ldi	r17, 0x00	; 0
    1a18:	89 91       	ld	r24, Y+
    1a1a:	60 91 87 02 	lds	r22, 0x0287
    1a1e:	70 91 88 02 	lds	r23, 0x0288
    1a22:	db 01       	movw	r26, r22
    1a24:	18 96       	adiw	r26, 0x08	; 8
    1a26:	ed 91       	ld	r30, X+
    1a28:	fc 91       	ld	r31, X
    1a2a:	19 97       	sbiw	r26, 0x09	; 9
    1a2c:	88 23       	and	r24, r24
    1a2e:	31 f0       	breq	.+12     	; 0x1a3c <puts+0x40>
    1a30:	09 95       	icall
    1a32:	89 2b       	or	r24, r25
    1a34:	89 f3       	breq	.-30     	; 0x1a18 <puts+0x1c>
    1a36:	0f ef       	ldi	r16, 0xFF	; 255
    1a38:	1f ef       	ldi	r17, 0xFF	; 255
    1a3a:	ee cf       	rjmp	.-36     	; 0x1a18 <puts+0x1c>
    1a3c:	8a e0       	ldi	r24, 0x0A	; 10
    1a3e:	09 95       	icall
    1a40:	89 2b       	or	r24, r25
    1a42:	11 f4       	brne	.+4      	; 0x1a48 <puts+0x4c>
    1a44:	c8 01       	movw	r24, r16
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <puts+0x50>
    1a48:	8f ef       	ldi	r24, 0xFF	; 255
    1a4a:	9f ef       	ldi	r25, 0xFF	; 255
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	1f 91       	pop	r17
    1a52:	0f 91       	pop	r16
    1a54:	08 95       	ret

00001a56 <vfprintf>:
    1a56:	ac e0       	ldi	r26, 0x0C	; 12
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e0 e3       	ldi	r30, 0x30	; 48
    1a5c:	fd e0       	ldi	r31, 0x0D	; 13
    1a5e:	85 c2       	rjmp	.+1290   	; 0x1f6a <__prologue_saves__>
    1a60:	7c 01       	movw	r14, r24
    1a62:	6b 01       	movw	r12, r22
    1a64:	8a 01       	movw	r16, r20
    1a66:	fc 01       	movw	r30, r24
    1a68:	17 82       	std	Z+7, r1	; 0x07
    1a6a:	16 82       	std	Z+6, r1	; 0x06
    1a6c:	83 81       	ldd	r24, Z+3	; 0x03
    1a6e:	81 ff       	sbrs	r24, 1
    1a70:	b0 c1       	rjmp	.+864    	; 0x1dd2 <vfprintf+0x37c>
    1a72:	ce 01       	movw	r24, r28
    1a74:	01 96       	adiw	r24, 0x01	; 1
    1a76:	4c 01       	movw	r8, r24
    1a78:	f7 01       	movw	r30, r14
    1a7a:	93 81       	ldd	r25, Z+3	; 0x03
    1a7c:	f6 01       	movw	r30, r12
    1a7e:	93 fd       	sbrc	r25, 3
    1a80:	85 91       	lpm	r24, Z+
    1a82:	93 ff       	sbrs	r25, 3
    1a84:	81 91       	ld	r24, Z+
    1a86:	6f 01       	movw	r12, r30
    1a88:	88 23       	and	r24, r24
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <vfprintf+0x38>
    1a8c:	9e c1       	rjmp	.+828    	; 0x1dca <vfprintf+0x374>
    1a8e:	85 32       	cpi	r24, 0x25	; 37
    1a90:	39 f4       	brne	.+14     	; 0x1aa0 <vfprintf+0x4a>
    1a92:	93 fd       	sbrc	r25, 3
    1a94:	85 91       	lpm	r24, Z+
    1a96:	93 ff       	sbrs	r25, 3
    1a98:	81 91       	ld	r24, Z+
    1a9a:	6f 01       	movw	r12, r30
    1a9c:	85 32       	cpi	r24, 0x25	; 37
    1a9e:	21 f4       	brne	.+8      	; 0x1aa8 <vfprintf+0x52>
    1aa0:	b7 01       	movw	r22, r14
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	d2 d1       	rcall	.+932    	; 0x1e4a <fputc>
    1aa6:	e8 cf       	rjmp	.-48     	; 0x1a78 <vfprintf+0x22>
    1aa8:	51 2c       	mov	r5, r1
    1aaa:	31 2c       	mov	r3, r1
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	20 32       	cpi	r18, 0x20	; 32
    1ab0:	a0 f4       	brcc	.+40     	; 0x1ada <vfprintf+0x84>
    1ab2:	8b 32       	cpi	r24, 0x2B	; 43
    1ab4:	69 f0       	breq	.+26     	; 0x1ad0 <vfprintf+0x7a>
    1ab6:	30 f4       	brcc	.+12     	; 0x1ac4 <vfprintf+0x6e>
    1ab8:	80 32       	cpi	r24, 0x20	; 32
    1aba:	59 f0       	breq	.+22     	; 0x1ad2 <vfprintf+0x7c>
    1abc:	83 32       	cpi	r24, 0x23	; 35
    1abe:	69 f4       	brne	.+26     	; 0x1ada <vfprintf+0x84>
    1ac0:	20 61       	ori	r18, 0x10	; 16
    1ac2:	2c c0       	rjmp	.+88     	; 0x1b1c <vfprintf+0xc6>
    1ac4:	8d 32       	cpi	r24, 0x2D	; 45
    1ac6:	39 f0       	breq	.+14     	; 0x1ad6 <vfprintf+0x80>
    1ac8:	80 33       	cpi	r24, 0x30	; 48
    1aca:	39 f4       	brne	.+14     	; 0x1ada <vfprintf+0x84>
    1acc:	21 60       	ori	r18, 0x01	; 1
    1ace:	26 c0       	rjmp	.+76     	; 0x1b1c <vfprintf+0xc6>
    1ad0:	22 60       	ori	r18, 0x02	; 2
    1ad2:	24 60       	ori	r18, 0x04	; 4
    1ad4:	23 c0       	rjmp	.+70     	; 0x1b1c <vfprintf+0xc6>
    1ad6:	28 60       	ori	r18, 0x08	; 8
    1ad8:	21 c0       	rjmp	.+66     	; 0x1b1c <vfprintf+0xc6>
    1ada:	27 fd       	sbrc	r18, 7
    1adc:	27 c0       	rjmp	.+78     	; 0x1b2c <vfprintf+0xd6>
    1ade:	30 ed       	ldi	r19, 0xD0	; 208
    1ae0:	38 0f       	add	r19, r24
    1ae2:	3a 30       	cpi	r19, 0x0A	; 10
    1ae4:	78 f4       	brcc	.+30     	; 0x1b04 <vfprintf+0xae>
    1ae6:	26 ff       	sbrs	r18, 6
    1ae8:	06 c0       	rjmp	.+12     	; 0x1af6 <vfprintf+0xa0>
    1aea:	fa e0       	ldi	r31, 0x0A	; 10
    1aec:	5f 9e       	mul	r5, r31
    1aee:	30 0d       	add	r19, r0
    1af0:	11 24       	eor	r1, r1
    1af2:	53 2e       	mov	r5, r19
    1af4:	13 c0       	rjmp	.+38     	; 0x1b1c <vfprintf+0xc6>
    1af6:	8a e0       	ldi	r24, 0x0A	; 10
    1af8:	38 9e       	mul	r3, r24
    1afa:	30 0d       	add	r19, r0
    1afc:	11 24       	eor	r1, r1
    1afe:	33 2e       	mov	r3, r19
    1b00:	20 62       	ori	r18, 0x20	; 32
    1b02:	0c c0       	rjmp	.+24     	; 0x1b1c <vfprintf+0xc6>
    1b04:	8e 32       	cpi	r24, 0x2E	; 46
    1b06:	21 f4       	brne	.+8      	; 0x1b10 <vfprintf+0xba>
    1b08:	26 fd       	sbrc	r18, 6
    1b0a:	5f c1       	rjmp	.+702    	; 0x1dca <vfprintf+0x374>
    1b0c:	20 64       	ori	r18, 0x40	; 64
    1b0e:	06 c0       	rjmp	.+12     	; 0x1b1c <vfprintf+0xc6>
    1b10:	8c 36       	cpi	r24, 0x6C	; 108
    1b12:	11 f4       	brne	.+4      	; 0x1b18 <vfprintf+0xc2>
    1b14:	20 68       	ori	r18, 0x80	; 128
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <vfprintf+0xc6>
    1b18:	88 36       	cpi	r24, 0x68	; 104
    1b1a:	41 f4       	brne	.+16     	; 0x1b2c <vfprintf+0xd6>
    1b1c:	f6 01       	movw	r30, r12
    1b1e:	93 fd       	sbrc	r25, 3
    1b20:	85 91       	lpm	r24, Z+
    1b22:	93 ff       	sbrs	r25, 3
    1b24:	81 91       	ld	r24, Z+
    1b26:	6f 01       	movw	r12, r30
    1b28:	81 11       	cpse	r24, r1
    1b2a:	c1 cf       	rjmp	.-126    	; 0x1aae <vfprintf+0x58>
    1b2c:	98 2f       	mov	r25, r24
    1b2e:	9f 7d       	andi	r25, 0xDF	; 223
    1b30:	95 54       	subi	r25, 0x45	; 69
    1b32:	93 30       	cpi	r25, 0x03	; 3
    1b34:	28 f4       	brcc	.+10     	; 0x1b40 <vfprintf+0xea>
    1b36:	0c 5f       	subi	r16, 0xFC	; 252
    1b38:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3a:	ff e3       	ldi	r31, 0x3F	; 63
    1b3c:	f9 83       	std	Y+1, r31	; 0x01
    1b3e:	0d c0       	rjmp	.+26     	; 0x1b5a <vfprintf+0x104>
    1b40:	83 36       	cpi	r24, 0x63	; 99
    1b42:	31 f0       	breq	.+12     	; 0x1b50 <vfprintf+0xfa>
    1b44:	83 37       	cpi	r24, 0x73	; 115
    1b46:	71 f0       	breq	.+28     	; 0x1b64 <vfprintf+0x10e>
    1b48:	83 35       	cpi	r24, 0x53	; 83
    1b4a:	09 f0       	breq	.+2      	; 0x1b4e <vfprintf+0xf8>
    1b4c:	57 c0       	rjmp	.+174    	; 0x1bfc <vfprintf+0x1a6>
    1b4e:	21 c0       	rjmp	.+66     	; 0x1b92 <vfprintf+0x13c>
    1b50:	f8 01       	movw	r30, r16
    1b52:	80 81       	ld	r24, Z
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	0e 5f       	subi	r16, 0xFE	; 254
    1b58:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5a:	44 24       	eor	r4, r4
    1b5c:	43 94       	inc	r4
    1b5e:	51 2c       	mov	r5, r1
    1b60:	54 01       	movw	r10, r8
    1b62:	14 c0       	rjmp	.+40     	; 0x1b8c <vfprintf+0x136>
    1b64:	38 01       	movw	r6, r16
    1b66:	f2 e0       	ldi	r31, 0x02	; 2
    1b68:	6f 0e       	add	r6, r31
    1b6a:	71 1c       	adc	r7, r1
    1b6c:	f8 01       	movw	r30, r16
    1b6e:	a0 80       	ld	r10, Z
    1b70:	b1 80       	ldd	r11, Z+1	; 0x01
    1b72:	26 ff       	sbrs	r18, 6
    1b74:	03 c0       	rjmp	.+6      	; 0x1b7c <vfprintf+0x126>
    1b76:	65 2d       	mov	r22, r5
    1b78:	70 e0       	ldi	r23, 0x00	; 0
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <vfprintf+0x12a>
    1b7c:	6f ef       	ldi	r22, 0xFF	; 255
    1b7e:	7f ef       	ldi	r23, 0xFF	; 255
    1b80:	c5 01       	movw	r24, r10
    1b82:	2c 87       	std	Y+12, r18	; 0x0c
    1b84:	57 d1       	rcall	.+686    	; 0x1e34 <strnlen>
    1b86:	2c 01       	movw	r4, r24
    1b88:	83 01       	movw	r16, r6
    1b8a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b8c:	2f 77       	andi	r18, 0x7F	; 127
    1b8e:	22 2e       	mov	r2, r18
    1b90:	16 c0       	rjmp	.+44     	; 0x1bbe <vfprintf+0x168>
    1b92:	38 01       	movw	r6, r16
    1b94:	f2 e0       	ldi	r31, 0x02	; 2
    1b96:	6f 0e       	add	r6, r31
    1b98:	71 1c       	adc	r7, r1
    1b9a:	f8 01       	movw	r30, r16
    1b9c:	a0 80       	ld	r10, Z
    1b9e:	b1 80       	ldd	r11, Z+1	; 0x01
    1ba0:	26 ff       	sbrs	r18, 6
    1ba2:	03 c0       	rjmp	.+6      	; 0x1baa <vfprintf+0x154>
    1ba4:	65 2d       	mov	r22, r5
    1ba6:	70 e0       	ldi	r23, 0x00	; 0
    1ba8:	02 c0       	rjmp	.+4      	; 0x1bae <vfprintf+0x158>
    1baa:	6f ef       	ldi	r22, 0xFF	; 255
    1bac:	7f ef       	ldi	r23, 0xFF	; 255
    1bae:	c5 01       	movw	r24, r10
    1bb0:	2c 87       	std	Y+12, r18	; 0x0c
    1bb2:	2e d1       	rcall	.+604    	; 0x1e10 <strnlen_P>
    1bb4:	2c 01       	movw	r4, r24
    1bb6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bb8:	20 68       	ori	r18, 0x80	; 128
    1bba:	22 2e       	mov	r2, r18
    1bbc:	83 01       	movw	r16, r6
    1bbe:	23 fc       	sbrc	r2, 3
    1bc0:	19 c0       	rjmp	.+50     	; 0x1bf4 <vfprintf+0x19e>
    1bc2:	83 2d       	mov	r24, r3
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	48 16       	cp	r4, r24
    1bc8:	59 06       	cpc	r5, r25
    1bca:	a0 f4       	brcc	.+40     	; 0x1bf4 <vfprintf+0x19e>
    1bcc:	b7 01       	movw	r22, r14
    1bce:	80 e2       	ldi	r24, 0x20	; 32
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	3b d1       	rcall	.+630    	; 0x1e4a <fputc>
    1bd4:	3a 94       	dec	r3
    1bd6:	f5 cf       	rjmp	.-22     	; 0x1bc2 <vfprintf+0x16c>
    1bd8:	f5 01       	movw	r30, r10
    1bda:	27 fc       	sbrc	r2, 7
    1bdc:	85 91       	lpm	r24, Z+
    1bde:	27 fe       	sbrs	r2, 7
    1be0:	81 91       	ld	r24, Z+
    1be2:	5f 01       	movw	r10, r30
    1be4:	b7 01       	movw	r22, r14
    1be6:	90 e0       	ldi	r25, 0x00	; 0
    1be8:	30 d1       	rcall	.+608    	; 0x1e4a <fputc>
    1bea:	31 10       	cpse	r3, r1
    1bec:	3a 94       	dec	r3
    1bee:	f1 e0       	ldi	r31, 0x01	; 1
    1bf0:	4f 1a       	sub	r4, r31
    1bf2:	51 08       	sbc	r5, r1
    1bf4:	41 14       	cp	r4, r1
    1bf6:	51 04       	cpc	r5, r1
    1bf8:	79 f7       	brne	.-34     	; 0x1bd8 <vfprintf+0x182>
    1bfa:	de c0       	rjmp	.+444    	; 0x1db8 <vfprintf+0x362>
    1bfc:	84 36       	cpi	r24, 0x64	; 100
    1bfe:	11 f0       	breq	.+4      	; 0x1c04 <vfprintf+0x1ae>
    1c00:	89 36       	cpi	r24, 0x69	; 105
    1c02:	31 f5       	brne	.+76     	; 0x1c50 <vfprintf+0x1fa>
    1c04:	f8 01       	movw	r30, r16
    1c06:	27 ff       	sbrs	r18, 7
    1c08:	07 c0       	rjmp	.+14     	; 0x1c18 <vfprintf+0x1c2>
    1c0a:	60 81       	ld	r22, Z
    1c0c:	71 81       	ldd	r23, Z+1	; 0x01
    1c0e:	82 81       	ldd	r24, Z+2	; 0x02
    1c10:	93 81       	ldd	r25, Z+3	; 0x03
    1c12:	0c 5f       	subi	r16, 0xFC	; 252
    1c14:	1f 4f       	sbci	r17, 0xFF	; 255
    1c16:	08 c0       	rjmp	.+16     	; 0x1c28 <vfprintf+0x1d2>
    1c18:	60 81       	ld	r22, Z
    1c1a:	71 81       	ldd	r23, Z+1	; 0x01
    1c1c:	88 27       	eor	r24, r24
    1c1e:	77 fd       	sbrc	r23, 7
    1c20:	80 95       	com	r24
    1c22:	98 2f       	mov	r25, r24
    1c24:	0e 5f       	subi	r16, 0xFE	; 254
    1c26:	1f 4f       	sbci	r17, 0xFF	; 255
    1c28:	2f 76       	andi	r18, 0x6F	; 111
    1c2a:	b2 2e       	mov	r11, r18
    1c2c:	97 ff       	sbrs	r25, 7
    1c2e:	09 c0       	rjmp	.+18     	; 0x1c42 <vfprintf+0x1ec>
    1c30:	90 95       	com	r25
    1c32:	80 95       	com	r24
    1c34:	70 95       	com	r23
    1c36:	61 95       	neg	r22
    1c38:	7f 4f       	sbci	r23, 0xFF	; 255
    1c3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c3e:	20 68       	ori	r18, 0x80	; 128
    1c40:	b2 2e       	mov	r11, r18
    1c42:	2a e0       	ldi	r18, 0x0A	; 10
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	a4 01       	movw	r20, r8
    1c48:	32 d1       	rcall	.+612    	; 0x1eae <__ultoa_invert>
    1c4a:	a8 2e       	mov	r10, r24
    1c4c:	a8 18       	sub	r10, r8
    1c4e:	43 c0       	rjmp	.+134    	; 0x1cd6 <vfprintf+0x280>
    1c50:	85 37       	cpi	r24, 0x75	; 117
    1c52:	29 f4       	brne	.+10     	; 0x1c5e <vfprintf+0x208>
    1c54:	2f 7e       	andi	r18, 0xEF	; 239
    1c56:	b2 2e       	mov	r11, r18
    1c58:	2a e0       	ldi	r18, 0x0A	; 10
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	25 c0       	rjmp	.+74     	; 0x1ca8 <vfprintf+0x252>
    1c5e:	f2 2f       	mov	r31, r18
    1c60:	f9 7f       	andi	r31, 0xF9	; 249
    1c62:	bf 2e       	mov	r11, r31
    1c64:	8f 36       	cpi	r24, 0x6F	; 111
    1c66:	c1 f0       	breq	.+48     	; 0x1c98 <vfprintf+0x242>
    1c68:	18 f4       	brcc	.+6      	; 0x1c70 <vfprintf+0x21a>
    1c6a:	88 35       	cpi	r24, 0x58	; 88
    1c6c:	79 f0       	breq	.+30     	; 0x1c8c <vfprintf+0x236>
    1c6e:	ad c0       	rjmp	.+346    	; 0x1dca <vfprintf+0x374>
    1c70:	80 37       	cpi	r24, 0x70	; 112
    1c72:	19 f0       	breq	.+6      	; 0x1c7a <vfprintf+0x224>
    1c74:	88 37       	cpi	r24, 0x78	; 120
    1c76:	21 f0       	breq	.+8      	; 0x1c80 <vfprintf+0x22a>
    1c78:	a8 c0       	rjmp	.+336    	; 0x1dca <vfprintf+0x374>
    1c7a:	2f 2f       	mov	r18, r31
    1c7c:	20 61       	ori	r18, 0x10	; 16
    1c7e:	b2 2e       	mov	r11, r18
    1c80:	b4 fe       	sbrs	r11, 4
    1c82:	0d c0       	rjmp	.+26     	; 0x1c9e <vfprintf+0x248>
    1c84:	8b 2d       	mov	r24, r11
    1c86:	84 60       	ori	r24, 0x04	; 4
    1c88:	b8 2e       	mov	r11, r24
    1c8a:	09 c0       	rjmp	.+18     	; 0x1c9e <vfprintf+0x248>
    1c8c:	24 ff       	sbrs	r18, 4
    1c8e:	0a c0       	rjmp	.+20     	; 0x1ca4 <vfprintf+0x24e>
    1c90:	9f 2f       	mov	r25, r31
    1c92:	96 60       	ori	r25, 0x06	; 6
    1c94:	b9 2e       	mov	r11, r25
    1c96:	06 c0       	rjmp	.+12     	; 0x1ca4 <vfprintf+0x24e>
    1c98:	28 e0       	ldi	r18, 0x08	; 8
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	05 c0       	rjmp	.+10     	; 0x1ca8 <vfprintf+0x252>
    1c9e:	20 e1       	ldi	r18, 0x10	; 16
    1ca0:	30 e0       	ldi	r19, 0x00	; 0
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <vfprintf+0x252>
    1ca4:	20 e1       	ldi	r18, 0x10	; 16
    1ca6:	32 e0       	ldi	r19, 0x02	; 2
    1ca8:	f8 01       	movw	r30, r16
    1caa:	b7 fe       	sbrs	r11, 7
    1cac:	07 c0       	rjmp	.+14     	; 0x1cbc <vfprintf+0x266>
    1cae:	60 81       	ld	r22, Z
    1cb0:	71 81       	ldd	r23, Z+1	; 0x01
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	0c 5f       	subi	r16, 0xFC	; 252
    1cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1cba:	06 c0       	rjmp	.+12     	; 0x1cc8 <vfprintf+0x272>
    1cbc:	60 81       	ld	r22, Z
    1cbe:	71 81       	ldd	r23, Z+1	; 0x01
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	0e 5f       	subi	r16, 0xFE	; 254
    1cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc8:	a4 01       	movw	r20, r8
    1cca:	f1 d0       	rcall	.+482    	; 0x1eae <__ultoa_invert>
    1ccc:	a8 2e       	mov	r10, r24
    1cce:	a8 18       	sub	r10, r8
    1cd0:	fb 2d       	mov	r31, r11
    1cd2:	ff 77       	andi	r31, 0x7F	; 127
    1cd4:	bf 2e       	mov	r11, r31
    1cd6:	b6 fe       	sbrs	r11, 6
    1cd8:	0b c0       	rjmp	.+22     	; 0x1cf0 <vfprintf+0x29a>
    1cda:	2b 2d       	mov	r18, r11
    1cdc:	2e 7f       	andi	r18, 0xFE	; 254
    1cde:	a5 14       	cp	r10, r5
    1ce0:	50 f4       	brcc	.+20     	; 0x1cf6 <vfprintf+0x2a0>
    1ce2:	b4 fe       	sbrs	r11, 4
    1ce4:	0a c0       	rjmp	.+20     	; 0x1cfa <vfprintf+0x2a4>
    1ce6:	b2 fc       	sbrc	r11, 2
    1ce8:	08 c0       	rjmp	.+16     	; 0x1cfa <vfprintf+0x2a4>
    1cea:	2b 2d       	mov	r18, r11
    1cec:	2e 7e       	andi	r18, 0xEE	; 238
    1cee:	05 c0       	rjmp	.+10     	; 0x1cfa <vfprintf+0x2a4>
    1cf0:	7a 2c       	mov	r7, r10
    1cf2:	2b 2d       	mov	r18, r11
    1cf4:	03 c0       	rjmp	.+6      	; 0x1cfc <vfprintf+0x2a6>
    1cf6:	7a 2c       	mov	r7, r10
    1cf8:	01 c0       	rjmp	.+2      	; 0x1cfc <vfprintf+0x2a6>
    1cfa:	75 2c       	mov	r7, r5
    1cfc:	24 ff       	sbrs	r18, 4
    1cfe:	0d c0       	rjmp	.+26     	; 0x1d1a <vfprintf+0x2c4>
    1d00:	fe 01       	movw	r30, r28
    1d02:	ea 0d       	add	r30, r10
    1d04:	f1 1d       	adc	r31, r1
    1d06:	80 81       	ld	r24, Z
    1d08:	80 33       	cpi	r24, 0x30	; 48
    1d0a:	11 f4       	brne	.+4      	; 0x1d10 <vfprintf+0x2ba>
    1d0c:	29 7e       	andi	r18, 0xE9	; 233
    1d0e:	09 c0       	rjmp	.+18     	; 0x1d22 <vfprintf+0x2cc>
    1d10:	22 ff       	sbrs	r18, 2
    1d12:	06 c0       	rjmp	.+12     	; 0x1d20 <vfprintf+0x2ca>
    1d14:	73 94       	inc	r7
    1d16:	73 94       	inc	r7
    1d18:	04 c0       	rjmp	.+8      	; 0x1d22 <vfprintf+0x2cc>
    1d1a:	82 2f       	mov	r24, r18
    1d1c:	86 78       	andi	r24, 0x86	; 134
    1d1e:	09 f0       	breq	.+2      	; 0x1d22 <vfprintf+0x2cc>
    1d20:	73 94       	inc	r7
    1d22:	23 fd       	sbrc	r18, 3
    1d24:	12 c0       	rjmp	.+36     	; 0x1d4a <vfprintf+0x2f4>
    1d26:	20 ff       	sbrs	r18, 0
    1d28:	06 c0       	rjmp	.+12     	; 0x1d36 <vfprintf+0x2e0>
    1d2a:	5a 2c       	mov	r5, r10
    1d2c:	73 14       	cp	r7, r3
    1d2e:	18 f4       	brcc	.+6      	; 0x1d36 <vfprintf+0x2e0>
    1d30:	53 0c       	add	r5, r3
    1d32:	57 18       	sub	r5, r7
    1d34:	73 2c       	mov	r7, r3
    1d36:	73 14       	cp	r7, r3
    1d38:	60 f4       	brcc	.+24     	; 0x1d52 <vfprintf+0x2fc>
    1d3a:	b7 01       	movw	r22, r14
    1d3c:	80 e2       	ldi	r24, 0x20	; 32
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	2c 87       	std	Y+12, r18	; 0x0c
    1d42:	83 d0       	rcall	.+262    	; 0x1e4a <fputc>
    1d44:	73 94       	inc	r7
    1d46:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d48:	f6 cf       	rjmp	.-20     	; 0x1d36 <vfprintf+0x2e0>
    1d4a:	73 14       	cp	r7, r3
    1d4c:	10 f4       	brcc	.+4      	; 0x1d52 <vfprintf+0x2fc>
    1d4e:	37 18       	sub	r3, r7
    1d50:	01 c0       	rjmp	.+2      	; 0x1d54 <vfprintf+0x2fe>
    1d52:	31 2c       	mov	r3, r1
    1d54:	24 ff       	sbrs	r18, 4
    1d56:	11 c0       	rjmp	.+34     	; 0x1d7a <vfprintf+0x324>
    1d58:	b7 01       	movw	r22, r14
    1d5a:	80 e3       	ldi	r24, 0x30	; 48
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	2c 87       	std	Y+12, r18	; 0x0c
    1d60:	74 d0       	rcall	.+232    	; 0x1e4a <fputc>
    1d62:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d64:	22 ff       	sbrs	r18, 2
    1d66:	16 c0       	rjmp	.+44     	; 0x1d94 <vfprintf+0x33e>
    1d68:	21 ff       	sbrs	r18, 1
    1d6a:	03 c0       	rjmp	.+6      	; 0x1d72 <vfprintf+0x31c>
    1d6c:	88 e5       	ldi	r24, 0x58	; 88
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <vfprintf+0x320>
    1d72:	88 e7       	ldi	r24, 0x78	; 120
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	b7 01       	movw	r22, r14
    1d78:	0c c0       	rjmp	.+24     	; 0x1d92 <vfprintf+0x33c>
    1d7a:	82 2f       	mov	r24, r18
    1d7c:	86 78       	andi	r24, 0x86	; 134
    1d7e:	51 f0       	breq	.+20     	; 0x1d94 <vfprintf+0x33e>
    1d80:	21 fd       	sbrc	r18, 1
    1d82:	02 c0       	rjmp	.+4      	; 0x1d88 <vfprintf+0x332>
    1d84:	80 e2       	ldi	r24, 0x20	; 32
    1d86:	01 c0       	rjmp	.+2      	; 0x1d8a <vfprintf+0x334>
    1d88:	8b e2       	ldi	r24, 0x2B	; 43
    1d8a:	27 fd       	sbrc	r18, 7
    1d8c:	8d e2       	ldi	r24, 0x2D	; 45
    1d8e:	b7 01       	movw	r22, r14
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	5b d0       	rcall	.+182    	; 0x1e4a <fputc>
    1d94:	a5 14       	cp	r10, r5
    1d96:	30 f4       	brcc	.+12     	; 0x1da4 <vfprintf+0x34e>
    1d98:	b7 01       	movw	r22, r14
    1d9a:	80 e3       	ldi	r24, 0x30	; 48
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	55 d0       	rcall	.+170    	; 0x1e4a <fputc>
    1da0:	5a 94       	dec	r5
    1da2:	f8 cf       	rjmp	.-16     	; 0x1d94 <vfprintf+0x33e>
    1da4:	aa 94       	dec	r10
    1da6:	f4 01       	movw	r30, r8
    1da8:	ea 0d       	add	r30, r10
    1daa:	f1 1d       	adc	r31, r1
    1dac:	80 81       	ld	r24, Z
    1dae:	b7 01       	movw	r22, r14
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	4b d0       	rcall	.+150    	; 0x1e4a <fputc>
    1db4:	a1 10       	cpse	r10, r1
    1db6:	f6 cf       	rjmp	.-20     	; 0x1da4 <vfprintf+0x34e>
    1db8:	33 20       	and	r3, r3
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <vfprintf+0x368>
    1dbc:	5d ce       	rjmp	.-838    	; 0x1a78 <vfprintf+0x22>
    1dbe:	b7 01       	movw	r22, r14
    1dc0:	80 e2       	ldi	r24, 0x20	; 32
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	42 d0       	rcall	.+132    	; 0x1e4a <fputc>
    1dc6:	3a 94       	dec	r3
    1dc8:	f7 cf       	rjmp	.-18     	; 0x1db8 <vfprintf+0x362>
    1dca:	f7 01       	movw	r30, r14
    1dcc:	86 81       	ldd	r24, Z+6	; 0x06
    1dce:	97 81       	ldd	r25, Z+7	; 0x07
    1dd0:	02 c0       	rjmp	.+4      	; 0x1dd6 <vfprintf+0x380>
    1dd2:	8f ef       	ldi	r24, 0xFF	; 255
    1dd4:	9f ef       	ldi	r25, 0xFF	; 255
    1dd6:	2c 96       	adiw	r28, 0x0c	; 12
    1dd8:	e2 e1       	ldi	r30, 0x12	; 18
    1dda:	e3 c0       	rjmp	.+454    	; 0x1fa2 <__epilogue_restores__>

00001ddc <calloc>:
    1ddc:	0f 93       	push	r16
    1dde:	1f 93       	push	r17
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	86 9f       	mul	r24, r22
    1de6:	80 01       	movw	r16, r0
    1de8:	87 9f       	mul	r24, r23
    1dea:	10 0d       	add	r17, r0
    1dec:	96 9f       	mul	r25, r22
    1dee:	10 0d       	add	r17, r0
    1df0:	11 24       	eor	r1, r1
    1df2:	c8 01       	movw	r24, r16
    1df4:	7c dc       	rcall	.-1800   	; 0x16ee <malloc>
    1df6:	ec 01       	movw	r28, r24
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	21 f0       	breq	.+8      	; 0x1e04 <calloc+0x28>
    1dfc:	a8 01       	movw	r20, r16
    1dfe:	60 e0       	ldi	r22, 0x00	; 0
    1e00:	70 e0       	ldi	r23, 0x00	; 0
    1e02:	11 d0       	rcall	.+34     	; 0x1e26 <memset>
    1e04:	ce 01       	movw	r24, r28
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	1f 91       	pop	r17
    1e0c:	0f 91       	pop	r16
    1e0e:	08 95       	ret

00001e10 <strnlen_P>:
    1e10:	fc 01       	movw	r30, r24
    1e12:	05 90       	lpm	r0, Z+
    1e14:	61 50       	subi	r22, 0x01	; 1
    1e16:	70 40       	sbci	r23, 0x00	; 0
    1e18:	01 10       	cpse	r0, r1
    1e1a:	d8 f7       	brcc	.-10     	; 0x1e12 <strnlen_P+0x2>
    1e1c:	80 95       	com	r24
    1e1e:	90 95       	com	r25
    1e20:	8e 0f       	add	r24, r30
    1e22:	9f 1f       	adc	r25, r31
    1e24:	08 95       	ret

00001e26 <memset>:
    1e26:	dc 01       	movw	r26, r24
    1e28:	01 c0       	rjmp	.+2      	; 0x1e2c <memset+0x6>
    1e2a:	6d 93       	st	X+, r22
    1e2c:	41 50       	subi	r20, 0x01	; 1
    1e2e:	50 40       	sbci	r21, 0x00	; 0
    1e30:	e0 f7       	brcc	.-8      	; 0x1e2a <memset+0x4>
    1e32:	08 95       	ret

00001e34 <strnlen>:
    1e34:	fc 01       	movw	r30, r24
    1e36:	61 50       	subi	r22, 0x01	; 1
    1e38:	70 40       	sbci	r23, 0x00	; 0
    1e3a:	01 90       	ld	r0, Z+
    1e3c:	01 10       	cpse	r0, r1
    1e3e:	d8 f7       	brcc	.-10     	; 0x1e36 <strnlen+0x2>
    1e40:	80 95       	com	r24
    1e42:	90 95       	com	r25
    1e44:	8e 0f       	add	r24, r30
    1e46:	9f 1f       	adc	r25, r31
    1e48:	08 95       	ret

00001e4a <fputc>:
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	18 2f       	mov	r17, r24
    1e54:	09 2f       	mov	r16, r25
    1e56:	eb 01       	movw	r28, r22
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	81 fd       	sbrc	r24, 1
    1e5c:	03 c0       	rjmp	.+6      	; 0x1e64 <fputc+0x1a>
    1e5e:	8f ef       	ldi	r24, 0xFF	; 255
    1e60:	9f ef       	ldi	r25, 0xFF	; 255
    1e62:	20 c0       	rjmp	.+64     	; 0x1ea4 <fputc+0x5a>
    1e64:	82 ff       	sbrs	r24, 2
    1e66:	10 c0       	rjmp	.+32     	; 0x1e88 <fputc+0x3e>
    1e68:	4e 81       	ldd	r20, Y+6	; 0x06
    1e6a:	5f 81       	ldd	r21, Y+7	; 0x07
    1e6c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e6e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e70:	42 17       	cp	r20, r18
    1e72:	53 07       	cpc	r21, r19
    1e74:	7c f4       	brge	.+30     	; 0x1e94 <fputc+0x4a>
    1e76:	e8 81       	ld	r30, Y
    1e78:	f9 81       	ldd	r31, Y+1	; 0x01
    1e7a:	9f 01       	movw	r18, r30
    1e7c:	2f 5f       	subi	r18, 0xFF	; 255
    1e7e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e80:	39 83       	std	Y+1, r19	; 0x01
    1e82:	28 83       	st	Y, r18
    1e84:	10 83       	st	Z, r17
    1e86:	06 c0       	rjmp	.+12     	; 0x1e94 <fputc+0x4a>
    1e88:	e8 85       	ldd	r30, Y+8	; 0x08
    1e8a:	f9 85       	ldd	r31, Y+9	; 0x09
    1e8c:	81 2f       	mov	r24, r17
    1e8e:	09 95       	icall
    1e90:	89 2b       	or	r24, r25
    1e92:	29 f7       	brne	.-54     	; 0x1e5e <fputc+0x14>
    1e94:	2e 81       	ldd	r18, Y+6	; 0x06
    1e96:	3f 81       	ldd	r19, Y+7	; 0x07
    1e98:	2f 5f       	subi	r18, 0xFF	; 255
    1e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e9c:	3f 83       	std	Y+7, r19	; 0x07
    1e9e:	2e 83       	std	Y+6, r18	; 0x06
    1ea0:	81 2f       	mov	r24, r17
    1ea2:	90 2f       	mov	r25, r16
    1ea4:	df 91       	pop	r29
    1ea6:	cf 91       	pop	r28
    1ea8:	1f 91       	pop	r17
    1eaa:	0f 91       	pop	r16
    1eac:	08 95       	ret

00001eae <__ultoa_invert>:
    1eae:	fa 01       	movw	r30, r20
    1eb0:	aa 27       	eor	r26, r26
    1eb2:	28 30       	cpi	r18, 0x08	; 8
    1eb4:	51 f1       	breq	.+84     	; 0x1f0a <__ultoa_invert+0x5c>
    1eb6:	20 31       	cpi	r18, 0x10	; 16
    1eb8:	81 f1       	breq	.+96     	; 0x1f1a <__ultoa_invert+0x6c>
    1eba:	e8 94       	clt
    1ebc:	6f 93       	push	r22
    1ebe:	6e 7f       	andi	r22, 0xFE	; 254
    1ec0:	6e 5f       	subi	r22, 0xFE	; 254
    1ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec8:	af 4f       	sbci	r26, 0xFF	; 255
    1eca:	b1 e0       	ldi	r27, 0x01	; 1
    1ecc:	3e d0       	rcall	.+124    	; 0x1f4a <__ultoa_invert+0x9c>
    1ece:	b4 e0       	ldi	r27, 0x04	; 4
    1ed0:	3c d0       	rcall	.+120    	; 0x1f4a <__ultoa_invert+0x9c>
    1ed2:	67 0f       	add	r22, r23
    1ed4:	78 1f       	adc	r23, r24
    1ed6:	89 1f       	adc	r24, r25
    1ed8:	9a 1f       	adc	r25, r26
    1eda:	a1 1d       	adc	r26, r1
    1edc:	68 0f       	add	r22, r24
    1ede:	79 1f       	adc	r23, r25
    1ee0:	8a 1f       	adc	r24, r26
    1ee2:	91 1d       	adc	r25, r1
    1ee4:	a1 1d       	adc	r26, r1
    1ee6:	6a 0f       	add	r22, r26
    1ee8:	71 1d       	adc	r23, r1
    1eea:	81 1d       	adc	r24, r1
    1eec:	91 1d       	adc	r25, r1
    1eee:	a1 1d       	adc	r26, r1
    1ef0:	20 d0       	rcall	.+64     	; 0x1f32 <__ultoa_invert+0x84>
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <__ultoa_invert+0x48>
    1ef4:	68 94       	set
    1ef6:	3f 91       	pop	r19
    1ef8:	2a e0       	ldi	r18, 0x0A	; 10
    1efa:	26 9f       	mul	r18, r22
    1efc:	11 24       	eor	r1, r1
    1efe:	30 19       	sub	r19, r0
    1f00:	30 5d       	subi	r19, 0xD0	; 208
    1f02:	31 93       	st	Z+, r19
    1f04:	de f6       	brtc	.-74     	; 0x1ebc <__ultoa_invert+0xe>
    1f06:	cf 01       	movw	r24, r30
    1f08:	08 95       	ret
    1f0a:	46 2f       	mov	r20, r22
    1f0c:	47 70       	andi	r20, 0x07	; 7
    1f0e:	40 5d       	subi	r20, 0xD0	; 208
    1f10:	41 93       	st	Z+, r20
    1f12:	b3 e0       	ldi	r27, 0x03	; 3
    1f14:	0f d0       	rcall	.+30     	; 0x1f34 <__ultoa_invert+0x86>
    1f16:	c9 f7       	brne	.-14     	; 0x1f0a <__ultoa_invert+0x5c>
    1f18:	f6 cf       	rjmp	.-20     	; 0x1f06 <__ultoa_invert+0x58>
    1f1a:	46 2f       	mov	r20, r22
    1f1c:	4f 70       	andi	r20, 0x0F	; 15
    1f1e:	40 5d       	subi	r20, 0xD0	; 208
    1f20:	4a 33       	cpi	r20, 0x3A	; 58
    1f22:	18 f0       	brcs	.+6      	; 0x1f2a <__ultoa_invert+0x7c>
    1f24:	49 5d       	subi	r20, 0xD9	; 217
    1f26:	31 fd       	sbrc	r19, 1
    1f28:	40 52       	subi	r20, 0x20	; 32
    1f2a:	41 93       	st	Z+, r20
    1f2c:	02 d0       	rcall	.+4      	; 0x1f32 <__ultoa_invert+0x84>
    1f2e:	a9 f7       	brne	.-22     	; 0x1f1a <__ultoa_invert+0x6c>
    1f30:	ea cf       	rjmp	.-44     	; 0x1f06 <__ultoa_invert+0x58>
    1f32:	b4 e0       	ldi	r27, 0x04	; 4
    1f34:	a6 95       	lsr	r26
    1f36:	97 95       	ror	r25
    1f38:	87 95       	ror	r24
    1f3a:	77 95       	ror	r23
    1f3c:	67 95       	ror	r22
    1f3e:	ba 95       	dec	r27
    1f40:	c9 f7       	brne	.-14     	; 0x1f34 <__ultoa_invert+0x86>
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	61 05       	cpc	r22, r1
    1f46:	71 05       	cpc	r23, r1
    1f48:	08 95       	ret
    1f4a:	9b 01       	movw	r18, r22
    1f4c:	ac 01       	movw	r20, r24
    1f4e:	0a 2e       	mov	r0, r26
    1f50:	06 94       	lsr	r0
    1f52:	57 95       	ror	r21
    1f54:	47 95       	ror	r20
    1f56:	37 95       	ror	r19
    1f58:	27 95       	ror	r18
    1f5a:	ba 95       	dec	r27
    1f5c:	c9 f7       	brne	.-14     	; 0x1f50 <__ultoa_invert+0xa2>
    1f5e:	62 0f       	add	r22, r18
    1f60:	73 1f       	adc	r23, r19
    1f62:	84 1f       	adc	r24, r20
    1f64:	95 1f       	adc	r25, r21
    1f66:	a0 1d       	adc	r26, r0
    1f68:	08 95       	ret

00001f6a <__prologue_saves__>:
    1f6a:	2f 92       	push	r2
    1f6c:	3f 92       	push	r3
    1f6e:	4f 92       	push	r4
    1f70:	5f 92       	push	r5
    1f72:	6f 92       	push	r6
    1f74:	7f 92       	push	r7
    1f76:	8f 92       	push	r8
    1f78:	9f 92       	push	r9
    1f7a:	af 92       	push	r10
    1f7c:	bf 92       	push	r11
    1f7e:	cf 92       	push	r12
    1f80:	df 92       	push	r13
    1f82:	ef 92       	push	r14
    1f84:	ff 92       	push	r15
    1f86:	0f 93       	push	r16
    1f88:	1f 93       	push	r17
    1f8a:	cf 93       	push	r28
    1f8c:	df 93       	push	r29
    1f8e:	cd b7       	in	r28, 0x3d	; 61
    1f90:	de b7       	in	r29, 0x3e	; 62
    1f92:	ca 1b       	sub	r28, r26
    1f94:	db 0b       	sbc	r29, r27
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	f8 94       	cli
    1f9a:	de bf       	out	0x3e, r29	; 62
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	cd bf       	out	0x3d, r28	; 61
    1fa0:	09 94       	ijmp

00001fa2 <__epilogue_restores__>:
    1fa2:	2a 88       	ldd	r2, Y+18	; 0x12
    1fa4:	39 88       	ldd	r3, Y+17	; 0x11
    1fa6:	48 88       	ldd	r4, Y+16	; 0x10
    1fa8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1faa:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fac:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fae:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fb0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fb2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fb4:	b9 84       	ldd	r11, Y+9	; 0x09
    1fb6:	c8 84       	ldd	r12, Y+8	; 0x08
    1fb8:	df 80       	ldd	r13, Y+7	; 0x07
    1fba:	ee 80       	ldd	r14, Y+6	; 0x06
    1fbc:	fd 80       	ldd	r15, Y+5	; 0x05
    1fbe:	0c 81       	ldd	r16, Y+4	; 0x04
    1fc0:	1b 81       	ldd	r17, Y+3	; 0x03
    1fc2:	aa 81       	ldd	r26, Y+2	; 0x02
    1fc4:	b9 81       	ldd	r27, Y+1	; 0x01
    1fc6:	ce 0f       	add	r28, r30
    1fc8:	d1 1d       	adc	r29, r1
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	f8 94       	cli
    1fce:	de bf       	out	0x3e, r29	; 62
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	cd bf       	out	0x3d, r28	; 61
    1fd4:	ed 01       	movw	r28, r26
    1fd6:	08 95       	ret

00001fd8 <_exit>:
    1fd8:	f8 94       	cli

00001fda <__stop_program>:
    1fda:	ff cf       	rjmp	.-2      	; 0x1fda <__stop_program>
