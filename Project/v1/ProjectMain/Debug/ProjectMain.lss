
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ea  00800100  00002234  000022c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002234  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003a  008002ea  008002ea  000024b2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000024b2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000330  00000000  00000000  0000250e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000432a  00000000  00000000  0000283e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000136e  00000000  00000000  00006b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a58  00000000  00000000  00007ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007c8  00000000  00000000  00009930  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000fb0  00000000  00000000  0000a0f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000020ee  00000000  00000000  0000b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003f0  00000000  00000000  0000d196  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	1c c2       	rjmp	.+1080   	; 0x43e <__vector_1>
       6:	00 00       	nop
       8:	29 c2       	rjmp	.+1106   	; 0x45c <__vector_2>
       a:	00 00       	nop
       c:	36 c2       	rjmp	.+1132   	; 0x47a <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <JOY_calibrate+0x5c>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e4 e3       	ldi	r30, 0x34	; 52
     37c:	f2 e2       	ldi	r31, 0x22	; 34
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 3e       	cpi	r26, 0xEA	; 234
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	aa ee       	ldi	r26, 0xEA	; 234
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a4 32       	cpi	r26, 0x24	; 36
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	be d0       	rcall	.+380    	; 0x518 <main>
     39c:	0c 94 18 11 	jmp	0x2230	; 0x2230 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	//printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	2f 93       	push	r18
     3ae:	3f 93       	push	r19
     3b0:	4f 93       	push	r20
     3b2:	5f 93       	push	r21
     3b4:	6f 93       	push	r22
     3b6:	7f 93       	push	r23
     3b8:	8f 93       	push	r24
     3ba:	9f 93       	push	r25
     3bc:	af 93       	push	r26
     3be:	bf 93       	push	r27
     3c0:	ef 93       	push	r30
     3c2:	ff 93       	push	r31
     3c4:	0e 94 1a 0c 	call	0x1834	; 0x1834 <uartReceive>
     3c8:	80 93 15 03 	sts	0x0315, r24
     3cc:	90 91 f5 02 	lds	r25, 0x02F5
     3d0:	99 23       	and	r25, r25
     3d2:	d1 f0       	breq	.+52     	; 0x408 <__vector_19+0x66>
     3d4:	90 91 f4 02 	lds	r25, 0x02F4
     3d8:	91 30       	cpi	r25, 0x01	; 1
     3da:	39 f0       	breq	.+14     	; 0x3ea <__vector_19+0x48>
     3dc:	18 f0       	brcs	.+6      	; 0x3e4 <__vector_19+0x42>
     3de:	92 30       	cpi	r25, 0x02	; 2
     3e0:	39 f0       	breq	.+14     	; 0x3f0 <__vector_19+0x4e>
     3e2:	0d c0       	rjmp	.+26     	; 0x3fe <__vector_19+0x5c>
     3e4:	80 93 12 03 	sts	0x0312, r24
     3e8:	0a c0       	rjmp	.+20     	; 0x3fe <__vector_19+0x5c>
     3ea:	80 93 13 03 	sts	0x0313, r24
     3ee:	07 c0       	rjmp	.+14     	; 0x3fe <__vector_19+0x5c>
     3f0:	80 93 14 03 	sts	0x0314, r24
     3f4:	10 92 f5 02 	sts	0x02F5, r1
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	90 93 f0 02 	sts	0x02F0, r25
     3fe:	90 91 f4 02 	lds	r25, 0x02F4
     402:	9f 5f       	subi	r25, 0xFF	; 255
     404:	90 93 f4 02 	sts	0x02F4, r25
     408:	8f 3f       	cpi	r24, 0xFF	; 255
     40a:	29 f4       	brne	.+10     	; 0x416 <__vector_19+0x74>
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	80 93 f5 02 	sts	0x02F5, r24
     412:	10 92 f4 02 	sts	0x02F4, r1
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	80 93 f6 02 	sts	0x02F6, r24
     41c:	ff 91       	pop	r31
     41e:	ef 91       	pop	r30
     420:	bf 91       	pop	r27
     422:	af 91       	pop	r26
     424:	9f 91       	pop	r25
     426:	8f 91       	pop	r24
     428:	7f 91       	pop	r23
     42a:	6f 91       	pop	r22
     42c:	5f 91       	pop	r21
     42e:	4f 91       	pop	r20
     430:	3f 91       	pop	r19
     432:	2f 91       	pop	r18
     434:	0f 90       	pop	r0
     436:	0f be       	out	0x3f, r0	; 63
     438:	0f 90       	pop	r0
     43a:	1f 90       	pop	r1
     43c:	18 95       	reti

0000043e <__vector_1>:
     43e:	1f 92       	push	r1
     440:	0f 92       	push	r0
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	0f 92       	push	r0
     446:	11 24       	eor	r1, r1
     448:	8f 93       	push	r24
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	80 93 ef 02 	sts	0x02EF, r24
     450:	8f 91       	pop	r24
     452:	0f 90       	pop	r0
     454:	0f be       	out	0x3f, r0	; 63
     456:	0f 90       	pop	r0
     458:	1f 90       	pop	r1
     45a:	18 95       	reti

0000045c <__vector_2>:
     45c:	1f 92       	push	r1
     45e:	0f 92       	push	r0
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	0f 92       	push	r0
     464:	11 24       	eor	r1, r1
     466:	8f 93       	push	r24
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	80 93 ee 02 	sts	0x02EE, r24
     46e:	8f 91       	pop	r24
     470:	0f 90       	pop	r0
     472:	0f be       	out	0x3f, r0	; 63
     474:	0f 90       	pop	r0
     476:	1f 90       	pop	r1
     478:	18 95       	reti

0000047a <__vector_3>:
     47a:	1f 92       	push	r1
     47c:	0f 92       	push	r0
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	0f 92       	push	r0
     482:	11 24       	eor	r1, r1
     484:	8f 93       	push	r24
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	80 93 ed 02 	sts	0x02ED, r24
     48c:	8f 91       	pop	r24
     48e:	0f 90       	pop	r0
     490:	0f be       	out	0x3f, r0	; 63
     492:	0f 90       	pop	r0
     494:	1f 90       	pop	r1
     496:	18 95       	reti

00000498 <init>:
     498:	ef 92       	push	r14
     49a:	ff 92       	push	r15
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	1f e1       	ldi	r17, 0x1F	; 31
     4a2:	e1 2e       	mov	r14, r17
     4a4:	f1 2c       	mov	r15, r1
     4a6:	00 e0       	ldi	r16, 0x00	; 0
     4a8:	10 e0       	ldi	r17, 0x00	; 0
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	4b e4       	ldi	r20, 0x4B	; 75
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	60 e8       	ldi	r22, 0x80	; 128
     4b4:	75 e2       	ldi	r23, 0x25	; 37
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 1e 0c 	call	0x183c	; 0x183c <uartInit>
     4be:	83 e4       	ldi	r24, 0x43	; 67
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <puts>
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	a2 d2       	rcall	.+1348   	; 0xa0e <enableXMEM>
     4ca:	0e 94 a9 0b 	call	0x1752	; 0x1752 <SLI_init>
     4ce:	f8 d2       	rcall	.+1520   	; 0xac0 <JOY_init>
     4d0:	0e 94 23 0b 	call	0x1646	; 0x1646 <OLED_init>
     4d4:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <SPI_init>
     4d8:	ea d4       	rcall	.+2516   	; 0xeae <MCP2515_init>
     4da:	f6 d0       	rcall	.+492    	; 0x6c8 <CAN_init>
     4dc:	8b b7       	in	r24, 0x3b	; 59
     4de:	80 64       	ori	r24, 0x40	; 64
     4e0:	8b bf       	out	0x3b, r24	; 59
     4e2:	85 b7       	in	r24, 0x35	; 53
     4e4:	82 60       	ori	r24, 0x02	; 2
     4e6:	85 bf       	out	0x35, r24	; 53
     4e8:	85 b7       	in	r24, 0x35	; 53
     4ea:	8e 7f       	andi	r24, 0xFE	; 254
     4ec:	85 bf       	out	0x35, r24	; 53
     4ee:	8b 98       	cbi	0x11, 3	; 17
     4f0:	93 9a       	sbi	0x12, 3	; 18
     4f2:	8b b7       	in	r24, 0x3b	; 59
     4f4:	80 68       	ori	r24, 0x80	; 128
     4f6:	8b bf       	out	0x3b, r24	; 59
     4f8:	85 b7       	in	r24, 0x35	; 53
     4fa:	88 60       	ori	r24, 0x08	; 8
     4fc:	85 bf       	out	0x35, r24	; 53
     4fe:	85 b7       	in	r24, 0x35	; 53
     500:	8b 7f       	andi	r24, 0xFB	; 251
     502:	85 bf       	out	0x35, r24	; 53
     504:	32 98       	cbi	0x06, 2	; 6
     506:	3a 98       	cbi	0x07, 2	; 7
     508:	b8 98       	cbi	0x17, 0	; 23
     50a:	c0 98       	cbi	0x18, 0	; 24
     50c:	78 94       	sei
     50e:	1f 91       	pop	r17
     510:	0f 91       	pop	r16
     512:	ff 90       	pop	r15
     514:	ef 90       	pop	r14
     516:	08 95       	ret

00000518 <main>:
/*
=======================MAIN FUNCTION=========================
*/

int main(void)
{
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	a9 97       	sbiw	r28, 0x29	; 41
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
	
	init();
     52c:	b5 df       	rcall	.-150    	; 0x498 <init>
	static uint8_t ButtonRight;
	
	//activateMenuFlag = 1; // display the main menu
		
	
	Game_runGame();
     52e:	81 d2       	rcall	.+1282   	; 0xa32 <Game_runGame>

	uartMsg = 0;
     530:	10 92 15 03 	sts	0x0315, r1
	uartMouseSteeringMessage.Motor = 0;
     534:	10 92 12 03 	sts	0x0312, r1
	uartMouseSteeringMessage.Servo = 0;
     538:	10 92 13 03 	sts	0x0313, r1
	uartMouseSteeringMessage.Button = 0;
     53c:	10 92 14 03 	sts	0x0314, r1
		}
		
		if(updateCmdDispFlag)
		{
			OLED_clear();
			sprintf(str, "%d", uartMouseSteeringMessage.Motor);
     540:	0f 2e       	mov	r0, r31
     542:	f2 e1       	ldi	r31, 0x12	; 18
     544:	6f 2e       	mov	r6, r31
     546:	f3 e0       	ldi	r31, 0x03	; 3
     548:	7f 2e       	mov	r7, r31
     54a:	f0 2d       	mov	r31, r0
     54c:	0f 2e       	mov	r0, r31
     54e:	fc e7       	ldi	r31, 0x7C	; 124
     550:	ef 2e       	mov	r14, r31
     552:	f1 e0       	ldi	r31, 0x01	; 1
     554:	ff 2e       	mov	r15, r31
     556:	f0 2d       	mov	r31, r0
     558:	01 ef       	ldi	r16, 0xF1	; 241
     55a:	12 e0       	ldi	r17, 0x02	; 2
		{
			ButtonRight = 0;
		}
		//printf("%d\n", SliPos);
		
		message2send.id = 23;
     55c:	0f 2e       	mov	r0, r31
     55e:	f7 e1       	ldi	r31, 0x17	; 23
     560:	cf 2e       	mov	r12, r31
     562:	d1 2c       	mov	r13, r1
     564:	f0 2d       	mov	r31, r0
		}
		
		if(updateCmdDispFlag)
		{
			OLED_clear();
			sprintf(str, "%d", uartMouseSteeringMessage.Motor);
     566:	20 2e       	mov	r2, r16
     568:	31 2e       	mov	r3, r17

		JoyPos = JOY_getPosition().X_abs;
		SliPos = SLI_getPosition().R_per;
		if((PINE & (1<<PE2)))
		{
			ButtonRight = 1;
     56a:	44 24       	eor	r4, r4
     56c:	43 94       	inc	r4
			ButtonRight = 0;
		}
		//printf("%d\n", SliPos);
		
		message2send.id = 23;
		message2send.length = 3;
     56e:	0f 2e       	mov	r0, r31
     570:	f3 e0       	ldi	r31, 0x03	; 3
     572:	5f 2e       	mov	r5, r31
     574:	f0 2d       	mov	r31, r0
			OLED_clear();
			sprintf(str, "%d", uartMouseSteeringMessage.Motor);
			OLED_goto(0,0);
			OLED_printString(str);
			
			sprintf(str, "%d", uartMouseSteeringMessage.Servo);
     576:	0f 2e       	mov	r0, r31
     578:	f3 e1       	ldi	r31, 0x13	; 19
     57a:	8f 2e       	mov	r8, r31
     57c:	f3 e0       	ldi	r31, 0x03	; 3
     57e:	9f 2e       	mov	r9, r31
     580:	f0 2d       	mov	r31, r0
			OLED_goto(1,0);
			OLED_printString(str);
			
			sprintf(str, "%d", uartMouseSteeringMessage.Button);
     582:	0f 2e       	mov	r0, r31
     584:	f4 e1       	ldi	r31, 0x14	; 20
     586:	af 2e       	mov	r10, r31
     588:	f3 e0       	ldi	r31, 0x03	; 3
     58a:	bf 2e       	mov	r11, r31
     58c:	f0 2d       	mov	r31, r0
	uartMouseSteeringMessage.Button = 0;
	
    while(1)
    {

		JoyPos = JOY_getPosition().X_abs;
     58e:	1b d4       	rcall	.+2102   	; 0xdc6 <JOY_getPosition>
     590:	29 83       	std	Y+1, r18	; 0x01
     592:	3a 83       	std	Y+2, r19	; 0x02
     594:	4b 83       	std	Y+3, r20	; 0x03
     596:	5c 83       	std	Y+4, r21	; 0x04
     598:	6d 83       	std	Y+5, r22	; 0x05
     59a:	7e 83       	std	Y+6, r23	; 0x06
     59c:	8f 83       	std	Y+7, r24	; 0x07
     59e:	98 87       	std	Y+8, r25	; 0x08
     5a0:	20 93 ec 02 	sts	0x02EC, r18
		SliPos = SLI_getPosition().R_per;
     5a4:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <SLI_getPosition>
     5a8:	80 93 eb 02 	sts	0x02EB, r24
		if((PINE & (1<<PE2)))
     5ac:	2a 9b       	sbis	0x05, 2	; 5
     5ae:	03 c0       	rjmp	.+6      	; 0x5b6 <main+0x9e>
		{
			ButtonRight = 1;
     5b0:	40 92 ea 02 	sts	0x02EA, r4
     5b4:	02 c0       	rjmp	.+4      	; 0x5ba <main+0xa2>
		}
		else
		{
			ButtonRight = 0;
     5b6:	10 92 ea 02 	sts	0x02EA, r1
		}
		//printf("%d\n", SliPos);
		
		message2send.id = 23;
     5ba:	da 86       	std	Y+10, r13	; 0x0a
     5bc:	c9 86       	std	Y+9, r12	; 0x09
		message2send.length = 3;
     5be:	5b 86       	std	Y+11, r5	; 0x0b
		message2send.data[0] = JoyPos;
     5c0:	90 91 ec 02 	lds	r25, 0x02EC
     5c4:	9c 87       	std	Y+12, r25	; 0x0c
		message2send.data[1] = SliPos;
     5c6:	8d 87       	std	Y+13, r24	; 0x0d
		message2send.data[2] = ButtonRight;
     5c8:	80 91 ea 02 	lds	r24, 0x02EA
     5cc:	8e 87       	std	Y+14, r24	; 0x0e
		
		CAN_sendMessage(&message2send, 0);
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	ce 01       	movw	r24, r28
     5d2:	09 96       	adiw	r24, 0x09	; 9
     5d4:	90 d0       	rcall	.+288    	; 0x6f6 <CAN_sendMessage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	90 ef       	ldi	r25, 0xF0	; 240
     5da:	01 97       	sbiw	r24, 0x01	; 1
     5dc:	f1 f7       	brne	.-4      	; 0x5da <main+0xc2>
		_delay_ms(50);

		if(activateMenuFlag)
     5de:	80 91 ee 02 	lds	r24, 0x02EE
     5e2:	88 23       	and	r24, r24
     5e4:	29 f0       	breq	.+10     	; 0x5f0 <main+0xd8>
		{
			activeState = MENU;
     5e6:	40 92 08 01 	sts	0x0108, r4
			MENU_activate(&activeState);
     5ea:	88 e0       	ldi	r24, 0x08	; 8
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	dc d6       	rcall	.+3512   	; 0x13a8 <MENU_activate>
		}

		if(SPIreceivedFlag)
     5f0:	80 91 ed 02 	lds	r24, 0x02ED
     5f4:	88 23       	and	r24, r24
     5f6:	b9 f0       	breq	.+46     	; 0x626 <main+0x10e>
		{
			
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
     5f8:	6c e2       	ldi	r22, 0x2C	; 44
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	41 d4       	rcall	.+2178   	; 0xe80 <MCP2515_read>
     5fe:	83 70       	andi	r24, 0x03	; 3
     600:	91 f0       	breq	.+36     	; 0x626 <main+0x10e>
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     602:	68 2f       	mov	r22, r24
     604:	ce 01       	movw	r24, r28
     606:	4f 96       	adiw	r24, 0x1f	; 31
     608:	df d0       	rcall	.+446    	; 0x7c8 <CAN_receiveMessage>
     60a:	fe 01       	movw	r30, r28
     60c:	7f 96       	adiw	r30, 0x1f	; 31
     60e:	de 01       	movw	r26, r28
     610:	54 96       	adiw	r26, 0x14	; 20
     612:	8b e0       	ldi	r24, 0x0B	; 11
     614:	01 90       	ld	r0, Z+
     616:	0d 92       	st	X+, r0
     618:	8a 95       	dec	r24
     61a:	e1 f7       	brne	.-8      	; 0x614 <main+0xfc>

				CAN_printMessage(&receivedMessage);
     61c:	ce 01       	movw	r24, r28
     61e:	44 96       	adiw	r24, 0x14	; 20
     620:	9c d1       	rcall	.+824    	; 0x95a <CAN_printMessage>
				
				
				
			
				SPIreceivedFlag = 0;
     622:	10 92 ed 02 	sts	0x02ED, r1
			
			}
		}
		
		if(updateCmdDispFlag)
     626:	80 91 f0 02 	lds	r24, 0x02F0
     62a:	88 23       	and	r24, r24
     62c:	09 f4       	brne	.+2      	; 0x630 <main+0x118>
     62e:	3e c0       	rjmp	.+124    	; 0x6ac <main+0x194>
		{
			OLED_clear();
     630:	ea d6       	rcall	.+3540   	; 0x1406 <OLED_clear>
			sprintf(str, "%d", uartMouseSteeringMessage.Motor);
     632:	f3 01       	movw	r30, r6
     634:	80 81       	ld	r24, Z
     636:	1f 92       	push	r1
     638:	8f 93       	push	r24
     63a:	ff 92       	push	r15
     63c:	ef 92       	push	r14
     63e:	1f 93       	push	r17
     640:	0f 93       	push	r16
     642:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <sprintf>
			OLED_goto(0,0);
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	be d6       	rcall	.+3452   	; 0x13cc <OLED_goto>
			OLED_printString(str);
     650:	82 2d       	mov	r24, r2
     652:	93 2d       	mov	r25, r3
     654:	11 d7       	rcall	.+3618   	; 0x1478 <OLED_printString>
			
			sprintf(str, "%d", uartMouseSteeringMessage.Servo);
     656:	f4 01       	movw	r30, r8
     658:	80 81       	ld	r24, Z
     65a:	1f 92       	push	r1
     65c:	8f 93       	push	r24
     65e:	ff 92       	push	r15
     660:	ef 92       	push	r14
     662:	1f 93       	push	r17
     664:	0f 93       	push	r16
     666:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <sprintf>
			OLED_goto(1,0);
     66a:	60 e0       	ldi	r22, 0x00	; 0
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	ac d6       	rcall	.+3416   	; 0x13cc <OLED_goto>
			OLED_printString(str);
     674:	82 2d       	mov	r24, r2
     676:	93 2d       	mov	r25, r3
     678:	ff d6       	rcall	.+3582   	; 0x1478 <OLED_printString>
			
			sprintf(str, "%d", uartMouseSteeringMessage.Button);
     67a:	f5 01       	movw	r30, r10
     67c:	80 81       	ld	r24, Z
     67e:	1f 92       	push	r1
     680:	8f 93       	push	r24
     682:	ff 92       	push	r15
     684:	ef 92       	push	r14
     686:	1f 93       	push	r17
     688:	0f 93       	push	r16
     68a:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <sprintf>
			OLED_goto(2,0);
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	82 e0       	ldi	r24, 0x02	; 2
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	9a d6       	rcall	.+3380   	; 0x13cc <OLED_goto>
			OLED_printString(str);
     698:	82 2d       	mov	r24, r2
     69a:	93 2d       	mov	r25, r3
     69c:	ed d6       	rcall	.+3546   	; 0x1478 <OLED_printString>
				
			updateCmdDispFlag = 0;
     69e:	10 92 f0 02 	sts	0x02F0, r1
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	cd bf       	out	0x3d, r28	; 61
		}
		
		if(activeState == GAME)
     6ac:	80 91 08 01 	lds	r24, 0x0108
     6b0:	81 11       	cpse	r24, r1
     6b2:	6d cf       	rjmp	.-294    	; 0x58e <main+0x76>
		{
			OLED_clear();
     6b4:	a8 d6       	rcall	.+3408   	; 0x1406 <OLED_clear>
			OLED_goto(0,0);
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	86 d6       	rcall	.+3340   	; 0x13cc <OLED_goto>
			OLED_printString("Hui");
     6c0:	8f e7       	ldi	r24, 0x7F	; 127
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	d9 d6       	rcall	.+3506   	; 0x1478 <OLED_printString>
     6c6:	51 cf       	rjmp	.-350    	; 0x56a <main+0x52>

000006c8 <CAN_init>:
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	cd b7       	in	r28, 0x3d	; 61
     6ce:	de b7       	in	r29, 0x3e	; 62
     6d0:	43 e0       	ldi	r20, 0x03	; 3
     6d2:	6b e2       	ldi	r22, 0x2B	; 43
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	f6 d3       	rcall	.+2028   	; 0xec6 <MCP2515_write>
     6da:	40 e6       	ldi	r20, 0x60	; 96
     6dc:	60 e6       	ldi	r22, 0x60	; 96
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	f1 d3       	rcall	.+2018   	; 0xec6 <MCP2515_write>
     6e4:	20 e0       	ldi	r18, 0x00	; 0
     6e6:	40 e8       	ldi	r20, 0x80	; 128
     6e8:	6f e0       	ldi	r22, 0x0F	; 15
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	fe d3       	rcall	.+2044   	; 0xeec <MCP2515_bitModify>
     6f0:	df 91       	pop	r29
     6f2:	cf 91       	pop	r28
     6f4:	08 95       	ret

000006f6 <CAN_sendMessage>:
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
     6fe:	27 97       	sbiw	r28, 0x07	; 7
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	f8 94       	cli
     704:	de bf       	out	0x3e, r29	; 62
     706:	0f be       	out	0x3f, r0	; 63
     708:	cd bf       	out	0x3d, r28	; 61
     70a:	9e 83       	std	Y+6, r25	; 0x06
     70c:	8d 83       	std	Y+5, r24	; 0x05
     70e:	6f 83       	std	Y+7, r22	; 0x07
     710:	8f 81       	ldd	r24, Y+7	; 0x07
     712:	88 2f       	mov	r24, r24
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	00 97       	sbiw	r24, 0x00	; 0
     718:	09 f0       	breq	.+2      	; 0x71c <CAN_sendMessage+0x26>
     71a:	4d c0       	rjmp	.+154    	; 0x7b6 <CAN_sendMessage+0xc0>
     71c:	8d 81       	ldd	r24, Y+5	; 0x05
     71e:	9e 81       	ldd	r25, Y+6	; 0x06
     720:	fc 01       	movw	r30, r24
     722:	80 81       	ld	r24, Z
     724:	91 81       	ldd	r25, Z+1	; 0x01
     726:	9c 83       	std	Y+4, r25	; 0x04
     728:	8b 83       	std	Y+3, r24	; 0x03
     72a:	8b 81       	ldd	r24, Y+3	; 0x03
     72c:	82 95       	swap	r24
     72e:	88 0f       	add	r24, r24
     730:	80 7e       	andi	r24, 0xE0	; 224
     732:	48 2f       	mov	r20, r24
     734:	62 e3       	ldi	r22, 0x32	; 50
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	c5 d3       	rcall	.+1930   	; 0xec6 <MCP2515_write>
     73c:	8b 81       	ldd	r24, Y+3	; 0x03
     73e:	9c 81       	ldd	r25, Y+4	; 0x04
     740:	96 95       	lsr	r25
     742:	87 95       	ror	r24
     744:	96 95       	lsr	r25
     746:	87 95       	ror	r24
     748:	96 95       	lsr	r25
     74a:	87 95       	ror	r24
     74c:	48 2f       	mov	r20, r24
     74e:	61 e3       	ldi	r22, 0x31	; 49
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	b8 d3       	rcall	.+1904   	; 0xec6 <MCP2515_write>
     756:	8d 81       	ldd	r24, Y+5	; 0x05
     758:	9e 81       	ldd	r25, Y+6	; 0x06
     75a:	fc 01       	movw	r30, r24
     75c:	82 81       	ldd	r24, Z+2	; 0x02
     75e:	48 2f       	mov	r20, r24
     760:	65 e3       	ldi	r22, 0x35	; 53
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	af d3       	rcall	.+1886   	; 0xec6 <MCP2515_write>
     768:	86 e3       	ldi	r24, 0x36	; 54
     76a:	89 83       	std	Y+1, r24	; 0x01
     76c:	1a 82       	std	Y+2, r1	; 0x02
     76e:	15 c0       	rjmp	.+42     	; 0x79a <CAN_sendMessage+0xa4>
     770:	8a 81       	ldd	r24, Y+2	; 0x02
     772:	88 2f       	mov	r24, r24
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	2d 81       	ldd	r18, Y+5	; 0x05
     778:	3e 81       	ldd	r19, Y+6	; 0x06
     77a:	82 0f       	add	r24, r18
     77c:	93 1f       	adc	r25, r19
     77e:	03 96       	adiw	r24, 0x03	; 3
     780:	fc 01       	movw	r30, r24
     782:	80 81       	ld	r24, Z
     784:	48 2f       	mov	r20, r24
     786:	69 81       	ldd	r22, Y+1	; 0x01
     788:	80 e0       	ldi	r24, 0x00	; 0
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	9c d3       	rcall	.+1848   	; 0xec6 <MCP2515_write>
     78e:	89 81       	ldd	r24, Y+1	; 0x01
     790:	8f 5f       	subi	r24, 0xFF	; 255
     792:	89 83       	std	Y+1, r24	; 0x01
     794:	8a 81       	ldd	r24, Y+2	; 0x02
     796:	8f 5f       	subi	r24, 0xFF	; 255
     798:	8a 83       	std	Y+2, r24	; 0x02
     79a:	8d 81       	ldd	r24, Y+5	; 0x05
     79c:	9e 81       	ldd	r25, Y+6	; 0x06
     79e:	fc 01       	movw	r30, r24
     7a0:	92 81       	ldd	r25, Z+2	; 0x02
     7a2:	8a 81       	ldd	r24, Y+2	; 0x02
     7a4:	89 17       	cp	r24, r25
     7a6:	20 f3       	brcs	.-56     	; 0x770 <CAN_sendMessage+0x7a>
     7a8:	2f ef       	ldi	r18, 0xFF	; 255
     7aa:	48 e0       	ldi	r20, 0x08	; 8
     7ac:	60 e3       	ldi	r22, 0x30	; 48
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	9c d3       	rcall	.+1848   	; 0xeec <MCP2515_bitModify>
     7b4:	00 00       	nop
     7b6:	27 96       	adiw	r28, 0x07	; 7
     7b8:	0f b6       	in	r0, 0x3f	; 63
     7ba:	f8 94       	cli
     7bc:	de bf       	out	0x3e, r29	; 62
     7be:	0f be       	out	0x3f, r0	; 63
     7c0:	cd bf       	out	0x3d, r28	; 61
     7c2:	df 91       	pop	r29
     7c4:	cf 91       	pop	r28
     7c6:	08 95       	ret

000007c8 <CAN_receiveMessage>:
     7c8:	0f 93       	push	r16
     7ca:	1f 93       	push	r17
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	cd b7       	in	r28, 0x3d	; 61
     7d2:	de b7       	in	r29, 0x3e	; 62
     7d4:	61 97       	sbiw	r28, 0x11	; 17
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	cd bf       	out	0x3d, r28	; 61
     7e0:	98 8b       	std	Y+16, r25	; 0x10
     7e2:	8f 87       	std	Y+15, r24	; 0x0f
     7e4:	69 8b       	std	Y+17, r22	; 0x11
     7e6:	89 89       	ldd	r24, Y+17	; 0x11
     7e8:	88 2f       	mov	r24, r24
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	82 30       	cpi	r24, 0x02	; 2
     7ee:	91 05       	cpc	r25, r1
     7f0:	09 f4       	brne	.+2      	; 0x7f4 <CAN_receiveMessage+0x2c>
     7f2:	57 c0       	rjmp	.+174    	; 0x8a2 <CAN_receiveMessage+0xda>
     7f4:	83 30       	cpi	r24, 0x03	; 3
     7f6:	91 05       	cpc	r25, r1
     7f8:	21 f0       	breq	.+8      	; 0x802 <CAN_receiveMessage+0x3a>
     7fa:	81 30       	cpi	r24, 0x01	; 1
     7fc:	91 05       	cpc	r25, r1
     7fe:	09 f0       	breq	.+2      	; 0x802 <CAN_receiveMessage+0x3a>
     800:	9f c0       	rjmp	.+318    	; 0x940 <CAN_receiveMessage+0x178>
     802:	61 e6       	ldi	r22, 0x61	; 97
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	3b d3       	rcall	.+1654   	; 0xe80 <MCP2515_read>
     80a:	88 2f       	mov	r24, r24
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	9d 83       	std	Y+5, r25	; 0x05
     810:	8c 83       	std	Y+4, r24	; 0x04
     812:	8c 81       	ldd	r24, Y+4	; 0x04
     814:	9d 81       	ldd	r25, Y+5	; 0x05
     816:	8c 01       	movw	r16, r24
     818:	00 0f       	add	r16, r16
     81a:	11 1f       	adc	r17, r17
     81c:	00 0f       	add	r16, r16
     81e:	11 1f       	adc	r17, r17
     820:	00 0f       	add	r16, r16
     822:	11 1f       	adc	r17, r17
     824:	62 e6       	ldi	r22, 0x62	; 98
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	2a d3       	rcall	.+1620   	; 0xe80 <MCP2515_read>
     82c:	82 95       	swap	r24
     82e:	86 95       	lsr	r24
     830:	87 70       	andi	r24, 0x07	; 7
     832:	88 2f       	mov	r24, r24
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	80 2b       	or	r24, r16
     838:	91 2b       	or	r25, r17
     83a:	9d 83       	std	Y+5, r25	; 0x05
     83c:	8c 83       	std	Y+4, r24	; 0x04
     83e:	65 e6       	ldi	r22, 0x65	; 101
     840:	80 e0       	ldi	r24, 0x00	; 0
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	1d d3       	rcall	.+1594   	; 0xe80 <MCP2515_read>
     846:	8e 83       	std	Y+6, r24	; 0x06
     848:	86 e6       	ldi	r24, 0x66	; 102
     84a:	89 83       	std	Y+1, r24	; 0x01
     84c:	1a 82       	std	Y+2, r1	; 0x02
     84e:	14 c0       	rjmp	.+40     	; 0x878 <CAN_receiveMessage+0xb0>
     850:	8a 81       	ldd	r24, Y+2	; 0x02
     852:	08 2f       	mov	r16, r24
     854:	10 e0       	ldi	r17, 0x00	; 0
     856:	69 81       	ldd	r22, Y+1	; 0x01
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	11 d3       	rcall	.+1570   	; 0xe80 <MCP2515_read>
     85e:	28 2f       	mov	r18, r24
     860:	ce 01       	movw	r24, r28
     862:	07 96       	adiw	r24, 0x07	; 7
     864:	80 0f       	add	r24, r16
     866:	91 1f       	adc	r25, r17
     868:	fc 01       	movw	r30, r24
     86a:	20 83       	st	Z, r18
     86c:	89 81       	ldd	r24, Y+1	; 0x01
     86e:	8f 5f       	subi	r24, 0xFF	; 255
     870:	89 83       	std	Y+1, r24	; 0x01
     872:	8a 81       	ldd	r24, Y+2	; 0x02
     874:	8f 5f       	subi	r24, 0xFF	; 255
     876:	8a 83       	std	Y+2, r24	; 0x02
     878:	9e 81       	ldd	r25, Y+6	; 0x06
     87a:	8a 81       	ldd	r24, Y+2	; 0x02
     87c:	89 17       	cp	r24, r25
     87e:	40 f3       	brcs	.-48     	; 0x850 <CAN_receiveMessage+0x88>
     880:	20 e0       	ldi	r18, 0x00	; 0
     882:	41 e0       	ldi	r20, 0x01	; 1
     884:	6c e2       	ldi	r22, 0x2C	; 44
     886:	80 e0       	ldi	r24, 0x00	; 0
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	30 d3       	rcall	.+1632   	; 0xeec <MCP2515_bitModify>
     88c:	8f 85       	ldd	r24, Y+15	; 0x0f
     88e:	98 89       	ldd	r25, Y+16	; 0x10
     890:	2b e0       	ldi	r18, 0x0B	; 11
     892:	fe 01       	movw	r30, r28
     894:	34 96       	adiw	r30, 0x04	; 4
     896:	dc 01       	movw	r26, r24
     898:	01 90       	ld	r0, Z+
     89a:	0d 92       	st	X+, r0
     89c:	2a 95       	dec	r18
     89e:	e1 f7       	brne	.-8      	; 0x898 <CAN_receiveMessage+0xd0>
     8a0:	4f c0       	rjmp	.+158    	; 0x940 <CAN_receiveMessage+0x178>
     8a2:	61 e7       	ldi	r22, 0x71	; 113
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	eb d2       	rcall	.+1494   	; 0xe80 <MCP2515_read>
     8aa:	88 2f       	mov	r24, r24
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	9d 83       	std	Y+5, r25	; 0x05
     8b0:	8c 83       	std	Y+4, r24	; 0x04
     8b2:	8c 81       	ldd	r24, Y+4	; 0x04
     8b4:	9d 81       	ldd	r25, Y+5	; 0x05
     8b6:	8c 01       	movw	r16, r24
     8b8:	00 0f       	add	r16, r16
     8ba:	11 1f       	adc	r17, r17
     8bc:	00 0f       	add	r16, r16
     8be:	11 1f       	adc	r17, r17
     8c0:	00 0f       	add	r16, r16
     8c2:	11 1f       	adc	r17, r17
     8c4:	62 e7       	ldi	r22, 0x72	; 114
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	da d2       	rcall	.+1460   	; 0xe80 <MCP2515_read>
     8cc:	82 95       	swap	r24
     8ce:	86 95       	lsr	r24
     8d0:	87 70       	andi	r24, 0x07	; 7
     8d2:	88 2f       	mov	r24, r24
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	80 2b       	or	r24, r16
     8d8:	91 2b       	or	r25, r17
     8da:	9d 83       	std	Y+5, r25	; 0x05
     8dc:	8c 83       	std	Y+4, r24	; 0x04
     8de:	65 e7       	ldi	r22, 0x75	; 117
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	cd d2       	rcall	.+1434   	; 0xe80 <MCP2515_read>
     8e6:	8e 83       	std	Y+6, r24	; 0x06
     8e8:	86 e7       	ldi	r24, 0x76	; 118
     8ea:	89 83       	std	Y+1, r24	; 0x01
     8ec:	1b 82       	std	Y+3, r1	; 0x03
     8ee:	14 c0       	rjmp	.+40     	; 0x918 <CAN_receiveMessage+0x150>
     8f0:	8b 81       	ldd	r24, Y+3	; 0x03
     8f2:	08 2f       	mov	r16, r24
     8f4:	10 e0       	ldi	r17, 0x00	; 0
     8f6:	69 81       	ldd	r22, Y+1	; 0x01
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	c1 d2       	rcall	.+1410   	; 0xe80 <MCP2515_read>
     8fe:	28 2f       	mov	r18, r24
     900:	ce 01       	movw	r24, r28
     902:	07 96       	adiw	r24, 0x07	; 7
     904:	80 0f       	add	r24, r16
     906:	91 1f       	adc	r25, r17
     908:	fc 01       	movw	r30, r24
     90a:	20 83       	st	Z, r18
     90c:	89 81       	ldd	r24, Y+1	; 0x01
     90e:	8f 5f       	subi	r24, 0xFF	; 255
     910:	89 83       	std	Y+1, r24	; 0x01
     912:	8b 81       	ldd	r24, Y+3	; 0x03
     914:	8f 5f       	subi	r24, 0xFF	; 255
     916:	8b 83       	std	Y+3, r24	; 0x03
     918:	9e 81       	ldd	r25, Y+6	; 0x06
     91a:	8b 81       	ldd	r24, Y+3	; 0x03
     91c:	89 17       	cp	r24, r25
     91e:	40 f3       	brcs	.-48     	; 0x8f0 <CAN_receiveMessage+0x128>
     920:	20 e0       	ldi	r18, 0x00	; 0
     922:	42 e0       	ldi	r20, 0x02	; 2
     924:	6c e2       	ldi	r22, 0x2C	; 44
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	e0 d2       	rcall	.+1472   	; 0xeec <MCP2515_bitModify>
     92c:	8f 85       	ldd	r24, Y+15	; 0x0f
     92e:	98 89       	ldd	r25, Y+16	; 0x10
     930:	2b e0       	ldi	r18, 0x0B	; 11
     932:	fe 01       	movw	r30, r28
     934:	34 96       	adiw	r30, 0x04	; 4
     936:	dc 01       	movw	r26, r24
     938:	01 90       	ld	r0, Z+
     93a:	0d 92       	st	X+, r0
     93c:	2a 95       	dec	r18
     93e:	e1 f7       	brne	.-8      	; 0x938 <CAN_receiveMessage+0x170>
     940:	8f 85       	ldd	r24, Y+15	; 0x0f
     942:	98 89       	ldd	r25, Y+16	; 0x10
     944:	61 96       	adiw	r28, 0x11	; 17
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	f8 94       	cli
     94a:	de bf       	out	0x3e, r29	; 62
     94c:	0f be       	out	0x3f, r0	; 63
     94e:	cd bf       	out	0x3d, r28	; 61
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	1f 91       	pop	r17
     956:	0f 91       	pop	r16
     958:	08 95       	ret

0000095a <CAN_printMessage>:
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	00 d0       	rcall	.+0      	; 0x960 <CAN_printMessage+0x6>
     960:	1f 92       	push	r1
     962:	cd b7       	in	r28, 0x3d	; 61
     964:	de b7       	in	r29, 0x3e	; 62
     966:	9b 83       	std	Y+3, r25	; 0x03
     968:	8a 83       	std	Y+2, r24	; 0x02
     96a:	8a 81       	ldd	r24, Y+2	; 0x02
     96c:	9b 81       	ldd	r25, Y+3	; 0x03
     96e:	fc 01       	movw	r30, r24
     970:	82 81       	ldd	r24, Z+2	; 0x02
     972:	28 2f       	mov	r18, r24
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	8a 81       	ldd	r24, Y+2	; 0x02
     978:	9b 81       	ldd	r25, Y+3	; 0x03
     97a:	fc 01       	movw	r30, r24
     97c:	80 81       	ld	r24, Z
     97e:	91 81       	ldd	r25, Z+1	; 0x01
     980:	43 2f       	mov	r20, r19
     982:	4f 93       	push	r20
     984:	2f 93       	push	r18
     986:	29 2f       	mov	r18, r25
     988:	2f 93       	push	r18
     98a:	8f 93       	push	r24
     98c:	83 e1       	ldi	r24, 0x13	; 19
     98e:	91 e0       	ldi	r25, 0x01	; 1
     990:	89 2f       	mov	r24, r25
     992:	8f 93       	push	r24
     994:	83 e1       	ldi	r24, 0x13	; 19
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	8f 93       	push	r24
     99a:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <printf>
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	19 82       	std	Y+1, r1	; 0x01
     9ac:	1f c0       	rjmp	.+62     	; 0x9ec <CAN_printMessage+0x92>
     9ae:	89 81       	ldd	r24, Y+1	; 0x01
     9b0:	88 2f       	mov	r24, r24
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	2a 81       	ldd	r18, Y+2	; 0x02
     9b6:	3b 81       	ldd	r19, Y+3	; 0x03
     9b8:	82 0f       	add	r24, r18
     9ba:	93 1f       	adc	r25, r19
     9bc:	03 96       	adiw	r24, 0x03	; 3
     9be:	fc 01       	movw	r30, r24
     9c0:	80 81       	ld	r24, Z
     9c2:	88 2f       	mov	r24, r24
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	29 2f       	mov	r18, r25
     9c8:	2f 93       	push	r18
     9ca:	8f 93       	push	r24
     9cc:	8f e3       	ldi	r24, 0x3F	; 63
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	89 2f       	mov	r24, r25
     9d2:	8f 93       	push	r24
     9d4:	8f e3       	ldi	r24, 0x3F	; 63
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	8f 93       	push	r24
     9da:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <printf>
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	0f 90       	pop	r0
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	8f 5f       	subi	r24, 0xFF	; 255
     9ea:	89 83       	std	Y+1, r24	; 0x01
     9ec:	8a 81       	ldd	r24, Y+2	; 0x02
     9ee:	9b 81       	ldd	r25, Y+3	; 0x03
     9f0:	fc 01       	movw	r30, r24
     9f2:	92 81       	ldd	r25, Z+2	; 0x02
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	89 17       	cp	r24, r25
     9f8:	d0 f2       	brcs	.-76     	; 0x9ae <CAN_printMessage+0x54>
     9fa:	8a e0       	ldi	r24, 0x0A	; 10
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <putchar>
     a02:	0f 90       	pop	r0
     a04:	0f 90       	pop	r0
     a06:	0f 90       	pop	r0
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	08 95       	ret

00000a0e <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     a0e:	95 b7       	in	r25, 0x35	; 53
     a10:	90 68       	ori	r25, 0x80	; 128
     a12:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     a14:	96 b7       	in	r25, 0x36	; 54
     a16:	98 60       	ori	r25, 0x08	; 8
     a18:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     a1a:	88 23       	and	r24, r24
     a1c:	19 f0       	breq	.+6      	; 0xa24 <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     a1e:	80 b7       	in	r24, 0x30	; 48
     a20:	80 62       	ori	r24, 0x20	; 32
     a22:	80 bf       	out	0x30, r24	; 48
     a24:	08 95       	ret

00000a26 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     a26:	fc 01       	movw	r30, r24
     a28:	80 81       	ld	r24, Z
	return val;
}
     a2a:	08 95       	ret

00000a2c <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     a2c:	fc 01       	movw	r30, r24
     a2e:	60 83       	st	Z, r22
     a30:	08 95       	ret

00000a32 <Game_runGame>:
		OLED_goto(3,63);
		OLED_printString("Score");
		
		// write Numbers
		OLED_goto(4, 40);
		sprintf(str, "%d", lives);
     a32:	0f 2e       	mov	r0, r31
     a34:	f3 e0       	ldi	r31, 0x03	; 3
     a36:	ff 2e       	mov	r15, r31
     a38:	f0 2d       	mov	r31, r0
     a3a:	0c e7       	ldi	r16, 0x7C	; 124
     a3c:	11 e0       	ldi	r17, 0x01	; 1
     a3e:	c7 ef       	ldi	r28, 0xF7	; 247
     a40:	d2 e0       	ldi	r29, 0x02	; 2
	uint8_t lives = 3;
	
	while(lives > 0)
	{
		// write Title to Screen
		OLED_goto(0,4);
     a42:	64 e0       	ldi	r22, 0x04	; 4
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	80 e0       	ldi	r24, 0x00	; 0
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	c0 d4       	rcall	.+2432   	; 0x13cc <OLED_goto>
     a4c:	83 e8       	ldi	r24, 0x83	; 131
		OLED_printString("** Ping-Pong **");
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	13 d5       	rcall	.+2598   	; 0x1478 <OLED_printString>
     a52:	68 e1       	ldi	r22, 0x18	; 24
     a54:	70 e0       	ldi	r23, 0x00	; 0
		
		// write to Screen
		OLED_goto(3,24);
     a56:	83 e0       	ldi	r24, 0x03	; 3
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	b8 d4       	rcall	.+2416   	; 0x13cc <OLED_goto>
     a5c:	83 e9       	ldi	r24, 0x93	; 147
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	0b d5       	rcall	.+2582   	; 0x1478 <OLED_printString>
		OLED_printString("Lives");
     a62:	6f e3       	ldi	r22, 0x3F	; 63
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	83 e0       	ldi	r24, 0x03	; 3
     a68:	90 e0       	ldi	r25, 0x00	; 0
		OLED_goto(3,63);
     a6a:	b0 d4       	rcall	.+2400   	; 0x13cc <OLED_goto>
     a6c:	89 e9       	ldi	r24, 0x99	; 153
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	03 d5       	rcall	.+2566   	; 0x1478 <OLED_printString>
     a72:	68 e2       	ldi	r22, 0x28	; 40
     a74:	70 e0       	ldi	r23, 0x00	; 0
		OLED_printString("Score");
     a76:	84 e0       	ldi	r24, 0x04	; 4
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	a8 d4       	rcall	.+2384   	; 0x13cc <OLED_goto>
     a7c:	1f 92       	push	r1
		
		// write Numbers
		OLED_goto(4, 40);
     a7e:	ff 92       	push	r15
     a80:	1f 93       	push	r17
     a82:	0f 93       	push	r16
     a84:	df 93       	push	r29
     a86:	cf 93       	push	r28
     a88:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <sprintf>
		sprintf(str, "%d", lives);
     a8c:	ce 01       	movw	r24, r28
     a8e:	f4 d4       	rcall	.+2536   	; 0x1478 <OLED_printString>
     a90:	6f e4       	ldi	r22, 0x4F	; 79
     a92:	70 e0       	ldi	r23, 0x00	; 0
     a94:	84 e0       	ldi	r24, 0x04	; 4
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	99 d4       	rcall	.+2354   	; 0x13cc <OLED_goto>
		OLED_printString(str);
     a9a:	1f 92       	push	r1
     a9c:	1f 92       	push	r1
     a9e:	1f 93       	push	r17
		OLED_goto(4, 79);
     aa0:	0f 93       	push	r16
     aa2:	df 93       	push	r29
     aa4:	cf 93       	push	r28
     aa6:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <sprintf>
     aaa:	ce 01       	movw	r24, r28
		sprintf(str, "%d", score);
     aac:	e5 d4       	rcall	.+2506   	; 0x1478 <OLED_printString>
     aae:	8d b7       	in	r24, 0x3d	; 61
     ab0:	9e b7       	in	r25, 0x3e	; 62
     ab2:	0c 96       	adiw	r24, 0x0c	; 12
     ab4:	0f b6       	in	r0, 0x3f	; 63
     ab6:	f8 94       	cli
     ab8:	9e bf       	out	0x3e, r25	; 62
     aba:	0f be       	out	0x3f, r0	; 63
		OLED_printString(str);	
     abc:	8d bf       	out	0x3d, r24	; 61
     abe:	c1 cf       	rjmp	.-126    	; 0xa42 <Game_runGame+0x10>

00000ac0 <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     ac0:	10 92 fc 02 	sts	0x02FC, r1
     ac4:	10 92 fb 02 	sts	0x02FB, r1
	currentPosition.Y_abs = 0;
     ac8:	10 92 fe 02 	sts	0x02FE, r1
     acc:	10 92 fd 02 	sts	0x02FD, r1
	currentPosition.X_per = 0;
     ad0:	10 92 00 03 	sts	0x0300, r1
     ad4:	10 92 ff 02 	sts	0x02FF, r1
	currentPosition.Y_per = 0;
     ad8:	10 92 02 03 	sts	0x0302, r1
     adc:	10 92 01 03 	sts	0x0301, r1
	currentDirection = CENTRE;
     ae0:	10 92 fa 02 	sts	0x02FA, r1
     ae4:	08 95       	ret

00000ae6 <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     ae6:	cf 93       	push	r28
     ae8:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     aea:	8d d4       	rcall	.+2330   	; 0x1406 <OLED_clear>
     aec:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	6b d4       	rcall	.+2262   	; 0x13cc <OLED_goto>
     af6:	8f e9       	ldi	r24, 0x9F	; 159
     af8:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     afa:	be d4       	rcall	.+2428   	; 0x1478 <OLED_printString>
     afc:	2f ef       	ldi	r18, 0xFF	; 255
     afe:	8f ef       	ldi	r24, 0xFF	; 255
     b00:	92 e0       	ldi	r25, 0x02	; 2
     b02:	21 50       	subi	r18, 0x01	; 1
     b04:	80 40       	sbci	r24, 0x00	; 0
     b06:	90 40       	sbci	r25, 0x00	; 0
     b08:	e1 f7       	brne	.-8      	; 0xb02 <JOY_calibrate+0x1c>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <JOY_calibrate+0x26>
     b0c:	00 c0       	rjmp	.+0      	; 0xb0e <JOY_calibrate+0x28>
     b0e:	c4 e1       	ldi	r28, 0x14	; 20
     b10:	d0 e0       	ldi	r29, 0x00	; 0
     b12:	60 91 06 01 	lds	r22, 0x0106
     b16:	70 91 07 01 	lds	r23, 0x0107
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     b1a:	82 e0       	ldi	r24, 0x02	; 2
     b1c:	a8 d6       	rcall	.+3408   	; 0x186e <ADC_request>
     b1e:	2f ef       	ldi	r18, 0xFF	; 255
     b20:	8f e1       	ldi	r24, 0x1F	; 31
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	21 50       	subi	r18, 0x01	; 1
     b26:	80 40       	sbci	r24, 0x00	; 0
     b28:	90 40       	sbci	r25, 0x00	; 0
     b2a:	e1 f7       	brne	.-8      	; 0xb24 <JOY_calibrate+0x3e>
     b2c:	00 c0       	rjmp	.+0      	; 0xb2e <JOY_calibrate+0x48>
     b2e:	00 00       	nop
     b30:	80 91 06 01 	lds	r24, 0x0106
     b34:	90 91 07 01 	lds	r25, 0x0107
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     b38:	be d6       	rcall	.+3452   	; 0x18b6 <ADC_read>
     b3a:	90 91 0e 01 	lds	r25, 0x010E
     b3e:	98 17       	cp	r25, r24
     b40:	10 f4       	brcc	.+4      	; 0xb46 <JOY_calibrate+0x60>
     b42:	80 93 0e 01 	sts	0x010E, r24
		
		if(temp > calR) {calR = temp;}
     b46:	21 97       	sbiw	r28, 0x01	; 1
     b48:	20 97       	sbiw	r28, 0x00	; 0
     b4a:	19 f7       	brne	.-58     	; 0xb12 <JOY_calibrate+0x2c>
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	70 e0       	ldi	r23, 0x00	; 0
     b50:	81 e0       	ldi	r24, 0x01	; 1
	OLED_goto(0,0);
	OLED_printString("JOY RIGHT");
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	3b d4       	rcall	.+2166   	; 0x13cc <OLED_goto>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_goto(1,0);
     b56:	89 ea       	ldi	r24, 0xA9	; 169
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	8e d4       	rcall	.+2332   	; 0x1478 <OLED_printString>
     b5c:	2f ef       	ldi	r18, 0xFF	; 255
     b5e:	8f ef       	ldi	r24, 0xFF	; 255
     b60:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("JOY LEFT");
     b62:	21 50       	subi	r18, 0x01	; 1
     b64:	80 40       	sbci	r24, 0x00	; 0
     b66:	90 40       	sbci	r25, 0x00	; 0
     b68:	e1 f7       	brne	.-8      	; 0xb62 <JOY_calibrate+0x7c>
     b6a:	00 c0       	rjmp	.+0      	; 0xb6c <JOY_calibrate+0x86>
     b6c:	00 c0       	rjmp	.+0      	; 0xb6e <JOY_calibrate+0x88>
     b6e:	c4 e1       	ldi	r28, 0x14	; 20
     b70:	d0 e0       	ldi	r29, 0x00	; 0
     b72:	60 91 06 01 	lds	r22, 0x0106
     b76:	70 91 07 01 	lds	r23, 0x0107
     b7a:	82 e0       	ldi	r24, 0x02	; 2
     b7c:	78 d6       	rcall	.+3312   	; 0x186e <ADC_request>
     b7e:	2f ef       	ldi	r18, 0xFF	; 255
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     b80:	8f e1       	ldi	r24, 0x1F	; 31
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	21 50       	subi	r18, 0x01	; 1
     b86:	80 40       	sbci	r24, 0x00	; 0
     b88:	90 40       	sbci	r25, 0x00	; 0
     b8a:	e1 f7       	brne	.-8      	; 0xb84 <JOY_calibrate+0x9e>
     b8c:	00 c0       	rjmp	.+0      	; 0xb8e <JOY_calibrate+0xa8>
     b8e:	00 00       	nop
     b90:	80 91 06 01 	lds	r24, 0x0106
     b94:	90 91 07 01 	lds	r25, 0x0107
     b98:	8e d6       	rcall	.+3356   	; 0x18b6 <ADC_read>
     b9a:	90 91 0d 01 	lds	r25, 0x010D
     b9e:	89 17       	cp	r24, r25
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     ba0:	10 f4       	brcc	.+4      	; 0xba6 <JOY_calibrate+0xc0>
     ba2:	80 93 0d 01 	sts	0x010D, r24
     ba6:	21 97       	sbiw	r28, 0x01	; 1
     ba8:	20 97       	sbiw	r28, 0x00	; 0
     baa:	19 f7       	brne	.-58     	; 0xb72 <JOY_calibrate+0x8c>
		
		if(temp < calL) {calL = temp;}
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	0b d4       	rcall	.+2070   	; 0x13cc <OLED_goto>
     bb6:	82 eb       	ldi	r24, 0xB2	; 178
     bb8:	91 e0       	ldi	r25, 0x01	; 1
	OLED_goto(1,0);
	OLED_printString("JOY LEFT");
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     bba:	5e d4       	rcall	.+2236   	; 0x1478 <OLED_printString>
     bbc:	2f ef       	ldi	r18, 0xFF	; 255
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_goto(2,0);
     bbe:	8f ef       	ldi	r24, 0xFF	; 255
     bc0:	92 e0       	ldi	r25, 0x02	; 2
     bc2:	21 50       	subi	r18, 0x01	; 1
     bc4:	80 40       	sbci	r24, 0x00	; 0
     bc6:	90 40       	sbci	r25, 0x00	; 0
     bc8:	e1 f7       	brne	.-8      	; 0xbc2 <JOY_calibrate+0xdc>
	OLED_printString("JOY UP");
     bca:	00 c0       	rjmp	.+0      	; 0xbcc <JOY_calibrate+0xe6>
     bcc:	00 c0       	rjmp	.+0      	; 0xbce <JOY_calibrate+0xe8>
     bce:	c4 e1       	ldi	r28, 0x14	; 20
     bd0:	d0 e0       	ldi	r29, 0x00	; 0
     bd2:	60 91 06 01 	lds	r22, 0x0106
     bd6:	70 91 07 01 	lds	r23, 0x0107
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	48 d6       	rcall	.+3216   	; 0x186e <ADC_request>
     bde:	2f ef       	ldi	r18, 0xFF	; 255
     be0:	8f e1       	ldi	r24, 0x1F	; 31
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	21 50       	subi	r18, 0x01	; 1
     be6:	80 40       	sbci	r24, 0x00	; 0
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     be8:	90 40       	sbci	r25, 0x00	; 0
     bea:	e1 f7       	brne	.-8      	; 0xbe4 <JOY_calibrate+0xfe>
     bec:	00 c0       	rjmp	.+0      	; 0xbee <JOY_calibrate+0x108>
     bee:	00 00       	nop
     bf0:	80 91 06 01 	lds	r24, 0x0106
     bf4:	90 91 07 01 	lds	r25, 0x0107
     bf8:	5e d6       	rcall	.+3260   	; 0x18b6 <ADC_read>
     bfa:	90 91 0c 01 	lds	r25, 0x010C
     bfe:	98 17       	cp	r25, r24
     c00:	10 f4       	brcc	.+4      	; 0xc06 <JOY_calibrate+0x120>
     c02:	80 93 0c 01 	sts	0x010C, r24
     c06:	21 97       	sbiw	r28, 0x01	; 1
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     c08:	20 97       	sbiw	r28, 0x00	; 0
     c0a:	19 f7       	brne	.-58     	; 0xbd2 <JOY_calibrate+0xec>
     c0c:	60 e0       	ldi	r22, 0x00	; 0
     c0e:	70 e0       	ldi	r23, 0x00	; 0
     c10:	83 e0       	ldi	r24, 0x03	; 3
     c12:	90 e0       	ldi	r25, 0x00	; 0
		
		if(temp > calUp) {calUp = temp;}
     c14:	db d3       	rcall	.+1974   	; 0x13cc <OLED_goto>
     c16:	89 eb       	ldi	r24, 0xB9	; 185
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	2e d4       	rcall	.+2140   	; 0x1478 <OLED_printString>
     c1c:	2f ef       	ldi	r18, 0xFF	; 255
     c1e:	8f ef       	ldi	r24, 0xFF	; 255
     c20:	92 e0       	ldi	r25, 0x02	; 2
	OLED_goto(2,0);
	OLED_printString("JOY UP");
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     c22:	21 50       	subi	r18, 0x01	; 1
     c24:	80 40       	sbci	r24, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_goto(3,0);
     c26:	90 40       	sbci	r25, 0x00	; 0
     c28:	e1 f7       	brne	.-8      	; 0xc22 <JOY_calibrate+0x13c>
     c2a:	00 c0       	rjmp	.+0      	; 0xc2c <JOY_calibrate+0x146>
     c2c:	00 c0       	rjmp	.+0      	; 0xc2e <JOY_calibrate+0x148>
     c2e:	c4 e1       	ldi	r28, 0x14	; 20
     c30:	d0 e0       	ldi	r29, 0x00	; 0
	OLED_printString("JOY DOWN");
     c32:	60 91 06 01 	lds	r22, 0x0106
     c36:	70 91 07 01 	lds	r23, 0x0107
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	18 d6       	rcall	.+3120   	; 0x186e <ADC_request>
     c3e:	2f ef       	ldi	r18, 0xFF	; 255
     c40:	8f e1       	ldi	r24, 0x1F	; 31
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	21 50       	subi	r18, 0x01	; 1
     c46:	80 40       	sbci	r24, 0x00	; 0
     c48:	90 40       	sbci	r25, 0x00	; 0
     c4a:	e1 f7       	brne	.-8      	; 0xc44 <JOY_calibrate+0x15e>
     c4c:	00 c0       	rjmp	.+0      	; 0xc4e <JOY_calibrate+0x168>
     c4e:	00 00       	nop
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     c50:	80 91 06 01 	lds	r24, 0x0106
     c54:	90 91 07 01 	lds	r25, 0x0107
     c58:	2e d6       	rcall	.+3164   	; 0x18b6 <ADC_read>
     c5a:	90 91 0b 01 	lds	r25, 0x010B
     c5e:	89 17       	cp	r24, r25
     c60:	10 f4       	brcc	.+4      	; 0xc66 <JOY_calibrate+0x180>
     c62:	80 93 0b 01 	sts	0x010B, r24
     c66:	21 97       	sbiw	r28, 0x01	; 1
     c68:	20 97       	sbiw	r28, 0x00	; 0
     c6a:	19 f7       	brne	.-58     	; 0xc32 <JOY_calibrate+0x14c>
     c6c:	20 91 0c 01 	lds	r18, 0x010C
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     c70:	80 91 0b 01 	lds	r24, 0x010B
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	28 1b       	sub	r18, r24
     c78:	31 09       	sbc	r19, r1
     c7a:	c9 01       	movw	r24, r18
		
		if(temp < calDown) {calDown = temp;}
     c7c:	99 23       	and	r25, r25
     c7e:	0c f4       	brge	.+2      	; 0xc82 <JOY_calibrate+0x19c>
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	95 95       	asr	r25
     c84:	87 95       	ror	r24
     c86:	80 93 0a 01 	sts	0x010A, r24
	OLED_goto(3,0);
	OLED_printString("JOY DOWN");
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     c8a:	20 91 0e 01 	lds	r18, 0x010E
	}
	
	
	//printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
	
	meanVert = (calUp - calDown)/2;
     c8e:	80 91 0d 01 	lds	r24, 0x010D
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	28 1b       	sub	r18, r24
     c96:	31 09       	sbc	r19, r1
     c98:	c9 01       	movw	r24, r18
     c9a:	99 23       	and	r25, r25
     c9c:	0c f4       	brge	.+2      	; 0xca0 <JOY_calibrate+0x1ba>
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	95 95       	asr	r25
     ca2:	87 95       	ror	r24
     ca4:	80 93 09 01 	sts	0x0109, r24
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
	meanHor = (calR - calL)/2;
     cac:	84 e0       	ldi	r24, 0x04	; 4
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	8d d3       	rcall	.+1818   	; 0x13cc <OLED_goto>
     cb2:	82 ec       	ldi	r24, 0xC2	; 194
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	e0 d3       	rcall	.+1984   	; 0x1478 <OLED_printString>
     cb8:	2f ef       	ldi	r18, 0xFF	; 255
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	9e e0       	ldi	r25, 0x0E	; 14
     cbe:	21 50       	subi	r18, 0x01	; 1
     cc0:	80 40       	sbci	r24, 0x00	; 0
     cc2:	90 40       	sbci	r25, 0x00	; 0
     cc4:	e1 f7       	brne	.-8      	; 0xcbe <JOY_calibrate+0x1d8>
     cc6:	00 c0       	rjmp	.+0      	; 0xcc8 <JOY_calibrate+0x1e2>
     cc8:	00 00       	nop
	
	OLED_goto(4,0);
     cca:	df 91       	pop	r29
     ccc:	cf 91       	pop	r28
     cce:	08 95       	ret

00000cd0 <JOY_requestCurrentPosition>:
     cd0:	88 37       	cpi	r24, 0x78	; 120
     cd2:	39 f4       	brne	.+14     	; 0xce2 <JOY_requestCurrentPosition+0x12>
     cd4:	60 91 06 01 	lds	r22, 0x0106
	OLED_printString("CALIB DONE");
     cd8:	70 91 07 01 	lds	r23, 0x0107
     cdc:	82 e0       	ldi	r24, 0x02	; 2
     cde:	c7 c5       	rjmp	.+2958   	; 0x186e <ADC_request>
     ce0:	08 95       	ret
     ce2:	89 37       	cpi	r24, 0x79	; 121
     ce4:	31 f4       	brne	.+12     	; 0xcf2 <JOY_requestCurrentPosition+0x22>
     ce6:	60 91 06 01 	lds	r22, 0x0106
     cea:	70 91 07 01 	lds	r23, 0x0107
     cee:	81 e0       	ldi	r24, 0x01	; 1
	//printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
	_delay_ms(1000);
}
     cf0:	be c5       	rjmp	.+2940   	; 0x186e <ADC_request>
     cf2:	08 95       	ret

00000cf4 <JOY_updatePosition>:
     cf4:	88 37       	cpi	r24, 0x78	; 120
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
	{
		ADC_request(Y_channel, adc_ext_ram);
     cf6:	f9 f4       	brne	.+62     	; 0xd36 <JOY_updatePosition+0x42>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     cf8:	80 91 06 01 	lds	r24, 0x0106
     cfc:	90 91 07 01 	lds	r25, 0x0107
     d00:	da d5       	rcall	.+2996   	; 0x18b6 <ADC_read>
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	90 93 fc 02 	sts	0x02FC, r25
     d08:	80 93 fb 02 	sts	0x02FB, r24
     d0c:	20 91 09 01 	lds	r18, 0x0109
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     d10:	60 91 09 01 	lds	r22, 0x0109
     d14:	ac 01       	movw	r20, r24
     d16:	42 1b       	sub	r20, r18
     d18:	51 09       	sbc	r21, r1
     d1a:	9a 01       	movw	r18, r20
     d1c:	44 e6       	ldi	r20, 0x64	; 100
     d1e:	42 9f       	mul	r20, r18
     d20:	c0 01       	movw	r24, r0
     d22:	43 9f       	mul	r20, r19
     d24:	90 0d       	add	r25, r0
     d26:	11 24       	eor	r1, r1
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	c7 d5       	rcall	.+2958   	; 0x18ba <__divmodhi4>
     d2c:	70 93 00 03 	sts	0x0300, r23
     d30:	60 93 ff 02 	sts	0x02FF, r22
     d34:	08 95       	ret
     d36:	89 37       	cpi	r24, 0x79	; 121
     d38:	f1 f4       	brne	.+60     	; 0xd76 <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     d3a:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     d3e:	90 91 07 01 	lds	r25, 0x0107
     d42:	b9 d5       	rcall	.+2930   	; 0x18b6 <ADC_read>
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	90 93 fe 02 	sts	0x02FE, r25
     d4a:	80 93 fd 02 	sts	0x02FD, r24
     d4e:	20 91 0a 01 	lds	r18, 0x010A
     d52:	60 91 0a 01 	lds	r22, 0x010A
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     d56:	ac 01       	movw	r20, r24
     d58:	42 1b       	sub	r20, r18
     d5a:	51 09       	sbc	r21, r1
     d5c:	9a 01       	movw	r18, r20
     d5e:	44 e6       	ldi	r20, 0x64	; 100
     d60:	42 9f       	mul	r20, r18
     d62:	c0 01       	movw	r24, r0
     d64:	43 9f       	mul	r20, r19
     d66:	90 0d       	add	r25, r0
     d68:	11 24       	eor	r1, r1
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	a6 d5       	rcall	.+2892   	; 0x18ba <__divmodhi4>
     d6e:	70 93 02 03 	sts	0x0302, r23
     d72:	60 93 01 03 	sts	0x0301, r22
     d76:	08 95       	ret

00000d78 <JOY_calculateDirection>:
     d78:	80 91 ff 02 	lds	r24, 0x02FF
     d7c:	90 91 00 03 	lds	r25, 0x0300
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     d80:	8b 35       	cpi	r24, 0x5B	; 91
     d82:	91 05       	cpc	r25, r1
     d84:	24 f0       	brlt	.+8      	; 0xd8e <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     d86:	83 e0       	ldi	r24, 0x03	; 3
     d88:	80 93 fa 02 	sts	0x02FA, r24
     d8c:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     d8e:	86 3a       	cpi	r24, 0xA6	; 166
     d90:	9f 4f       	sbci	r25, 0xFF	; 255
     d92:	24 f4       	brge	.+8      	; 0xd9c <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     d94:	84 e0       	ldi	r24, 0x04	; 4
     d96:	80 93 fa 02 	sts	0x02FA, r24
     d9a:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     d9c:	80 91 01 03 	lds	r24, 0x0301
     da0:	90 91 02 03 	lds	r25, 0x0302
     da4:	8b 35       	cpi	r24, 0x5B	; 91
     da6:	91 05       	cpc	r25, r1
     da8:	24 f0       	brlt	.+8      	; 0xdb2 <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	80 93 fa 02 	sts	0x02FA, r24
     db0:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     db2:	86 3a       	cpi	r24, 0xA6	; 166
     db4:	9f 4f       	sbci	r25, 0xFF	; 255
     db6:	24 f4       	brge	.+8      	; 0xdc0 <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     db8:	82 e0       	ldi	r24, 0x02	; 2
     dba:	80 93 fa 02 	sts	0x02FA, r24
     dbe:	08 95       	ret
	else{currentDirection = CENTRE;}
     dc0:	10 92 fa 02 	sts	0x02FA, r1
     dc4:	08 95       	ret

00000dc6 <JOY_getPosition>:

//------------------------------------------------------------------------------
// This function returns the current position of the Joystick.
// It is a struct with the four parameters X_abs, Y_abs, X_per and Y_per
JOY_position_t JOY_getPosition()
{
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	cd b7       	in	r28, 0x3d	; 61
     dcc:	de b7       	in	r29, 0x3e	; 62
     dce:	28 97       	sbiw	r28, 0x08	; 8
     dd0:	0f b6       	in	r0, 0x3f	; 63
     dd2:	f8 94       	cli
     dd4:	de bf       	out	0x3e, r29	; 62
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	cd bf       	out	0x3d, r28	; 61
	JOY_requestCurrentPosition('x');
     dda:	88 e7       	ldi	r24, 0x78	; 120
     ddc:	79 df       	rcall	.-270    	; 0xcd0 <JOY_requestCurrentPosition>
     dde:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     de0:	8a 95       	dec	r24
     de2:	f1 f7       	brne	.-4      	; 0xde0 <JOY_getPosition+0x1a>
     de4:	00 00       	nop
     de6:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     de8:	85 df       	rcall	.-246    	; 0xcf4 <JOY_updatePosition>
     dea:	89 e7       	ldi	r24, 0x79	; 121
     dec:	71 df       	rcall	.-286    	; 0xcd0 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     dee:	82 e6       	ldi	r24, 0x62	; 98
     df0:	8a 95       	dec	r24
     df2:	f1 f7       	brne	.-4      	; 0xdf0 <JOY_getPosition+0x2a>
     df4:	00 00       	nop
     df6:	89 e7       	ldi	r24, 0x79	; 121
     df8:	7d df       	rcall	.-262    	; 0xcf4 <JOY_updatePosition>
     dfa:	88 e0       	ldi	r24, 0x08	; 8
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     dfc:	eb ef       	ldi	r30, 0xFB	; 251
     dfe:	f2 e0       	ldi	r31, 0x02	; 2
     e00:	de 01       	movw	r26, r28
	return currentPosition;
     e02:	11 96       	adiw	r26, 0x01	; 1
     e04:	01 90       	ld	r0, Z+
     e06:	0d 92       	st	X+, r0
     e08:	8a 95       	dec	r24
     e0a:	e1 f7       	brne	.-8      	; 0xe04 <JOY_getPosition+0x3e>
     e0c:	29 81       	ldd	r18, Y+1	; 0x01
     e0e:	3a 81       	ldd	r19, Y+2	; 0x02
     e10:	4b 81       	ldd	r20, Y+3	; 0x03
     e12:	5c 81       	ldd	r21, Y+4	; 0x04
     e14:	6d 81       	ldd	r22, Y+5	; 0x05
     e16:	7e 81       	ldd	r23, Y+6	; 0x06
     e18:	8f 81       	ldd	r24, Y+7	; 0x07
     e1a:	98 85       	ldd	r25, Y+8	; 0x08
     e1c:	28 96       	adiw	r28, 0x08	; 8
     e1e:	0f b6       	in	r0, 0x3f	; 63
}
     e20:	f8 94       	cli
     e22:	de bf       	out	0x3e, r29	; 62
     e24:	0f be       	out	0x3f, r0	; 63
     e26:	cd bf       	out	0x3d, r28	; 61
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	08 95       	ret

00000e2e <JOY_getDirection>:
     e2e:	88 e7       	ldi	r24, 0x78	; 120
     e30:	4f df       	rcall	.-354    	; 0xcd0 <JOY_requestCurrentPosition>
     e32:	82 e6       	ldi	r24, 0x62	; 98
     e34:	8a 95       	dec	r24
     e36:	f1 f7       	brne	.-4      	; 0xe34 <JOY_getDirection+0x6>
     e38:	00 00       	nop
     e3a:	88 e7       	ldi	r24, 0x78	; 120
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     e3c:	5b df       	rcall	.-330    	; 0xcf4 <JOY_updatePosition>
     e3e:	89 e7       	ldi	r24, 0x79	; 121
     e40:	47 df       	rcall	.-370    	; 0xcd0 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     e42:	82 e6       	ldi	r24, 0x62	; 98
     e44:	8a 95       	dec	r24
     e46:	f1 f7       	brne	.-4      	; 0xe44 <JOY_getDirection+0x16>
     e48:	00 00       	nop
     e4a:	89 e7       	ldi	r24, 0x79	; 121
     e4c:	53 df       	rcall	.-346    	; 0xcf4 <JOY_updatePosition>
     e4e:	94 df       	rcall	.-216    	; 0xd78 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     e50:	80 91 fa 02 	lds	r24, 0x02FA
     e54:	08 95       	ret

00000e56 <MCP2515_reset>:
	//printf("finished MCP2515_init\n");
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
     e56:	cf 93       	push	r28
     e58:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
     e5a:	e0 d4       	rcall	.+2496   	; 0x181c <SPI_activateSlave>
     e5c:	80 ec       	ldi	r24, 0xC0	; 192
	SPI_send(MCP_RESET);
     e5e:	d4 d4       	rcall	.+2472   	; 0x1808 <SPI_send>
     e60:	8c ec       	ldi	r24, 0xCC	; 204
     e62:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e64:	01 97       	sbiw	r24, 0x01	; 1
     e66:	f1 f7       	brne	.-4      	; 0xe64 <MCP2515_reset+0xe>
     e68:	00 c0       	rjmp	.+0      	; 0xe6a <MCP2515_reset+0x14>
     e6a:	00 00       	nop
     e6c:	8c 2f       	mov	r24, r28
     e6e:	da d4       	rcall	.+2484   	; 0x1824 <SPI_deactivateSlave>
	_delay_ms(1);
	SPI_deactivateSlave(slave);
     e70:	8f ef       	ldi	r24, 0xFF	; 255
     e72:	9f e2       	ldi	r25, 0x2F	; 47
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	f1 f7       	brne	.-4      	; 0xe74 <MCP2515_reset+0x1e>
     e78:	00 c0       	rjmp	.+0      	; 0xe7a <MCP2515_reset+0x24>
     e7a:	00 00       	nop
     e7c:	cf 91       	pop	r28
     e7e:	08 95       	ret

00000e80 <MCP2515_read>:
     e80:	cf 93       	push	r28
	_delay_ms(10);
}
     e82:	df 93       	push	r29
     e84:	c8 2f       	mov	r28, r24

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
     e86:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
     e88:	c9 d4       	rcall	.+2450   	; 0x181c <SPI_activateSlave>
     e8a:	83 e0       	ldi	r24, 0x03	; 3
	SPI_send(MCP_READ);
     e8c:	bd d4       	rcall	.+2426   	; 0x1808 <SPI_send>
     e8e:	8c ec       	ldi	r24, 0xCC	; 204
     e90:	94 e0       	ldi	r25, 0x04	; 4
     e92:	01 97       	sbiw	r24, 0x01	; 1
     e94:	f1 f7       	brne	.-4      	; 0xe92 <MCP2515_read+0x12>
     e96:	00 c0       	rjmp	.+0      	; 0xe98 <MCP2515_read+0x18>
     e98:	00 00       	nop
     e9a:	8d 2f       	mov	r24, r29
     e9c:	b5 d4       	rcall	.+2410   	; 0x1808 <SPI_send>
	_delay_ms(1);
	SPI_send(address);
     e9e:	b8 d4       	rcall	.+2416   	; 0x1810 <SPI_receive>
     ea0:	d8 2f       	mov	r29, r24
     ea2:	8c 2f       	mov	r24, r28
	
	uint8_t result;
	result = SPI_receive();
     ea4:	bf d4       	rcall	.+2430   	; 0x1824 <SPI_deactivateSlave>
     ea6:	8d 2f       	mov	r24, r29
     ea8:	df 91       	pop	r29
	
	SPI_deactivateSlave(slave);
     eaa:	cf 91       	pop	r28
     eac:	08 95       	ret

00000eae <MCP2515_init>:
     eae:	80 e0       	ldi	r24, 0x00	; 0
	return result;
}
     eb0:	d2 df       	rcall	.-92     	; 0xe56 <MCP2515_reset>
     eb2:	6e e0       	ldi	r22, 0x0E	; 14
     eb4:	80 e0       	ldi	r24, 0x00	; 0
     eb6:	e4 df       	rcall	.-56     	; 0xe80 <MCP2515_read>
uint8_t MCP2515_init()
{
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
	// Self-test
	uint8_t value;
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
     eb8:	98 2f       	mov	r25, r24
     eba:	90 7e       	andi	r25, 0xE0	; 224
	//printf("CANSTAT: %#x\n", value);
	if((value & MODE_MASK) != MODE_CONFIG) 
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 38       	cpi	r25, 0x80	; 128
     ec0:	09 f4       	brne	.+2      	; 0xec4 <MCP2515_init+0x16>
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	08 95       	ret

00000ec6 <MCP2515_write>:
     ec6:	1f 93       	push	r17
		return 1;
	}
	//
	//printf("finished MCP2515_init\n");
	return 0;
}
     ec8:	cf 93       	push	r28
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_write(SPI_SLAVES slave, uint8_t address, uint8_t data)
{
     eca:	df 93       	push	r29
     ecc:	c8 2f       	mov	r28, r24
     ece:	16 2f       	mov	r17, r22
     ed0:	d4 2f       	mov	r29, r20
	SPI_activateSlave(slave);
     ed2:	a4 d4       	rcall	.+2376   	; 0x181c <SPI_activateSlave>
     ed4:	82 e0       	ldi	r24, 0x02	; 2
	SPI_send(MCP_WRITE);
     ed6:	98 d4       	rcall	.+2352   	; 0x1808 <SPI_send>
     ed8:	81 2f       	mov	r24, r17
     eda:	96 d4       	rcall	.+2348   	; 0x1808 <SPI_send>
	SPI_send(address);
     edc:	8d 2f       	mov	r24, r29
     ede:	94 d4       	rcall	.+2344   	; 0x1808 <SPI_send>
     ee0:	8c 2f       	mov	r24, r28
	SPI_send(data);
     ee2:	a0 d4       	rcall	.+2368   	; 0x1824 <SPI_deactivateSlave>
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
	SPI_deactivateSlave(slave);
     ee8:	1f 91       	pop	r17
     eea:	08 95       	ret

00000eec <MCP2515_bitModify>:
     eec:	0f 93       	push	r16
}
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	c8 2f       	mov	r28, r24
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_bitModify(SPI_SLAVES slave, uint8_t register2change, uint8_t mask, uint8_t newValue)
{
     ef6:	06 2f       	mov	r16, r22
     ef8:	14 2f       	mov	r17, r20
     efa:	d2 2f       	mov	r29, r18
	SPI_activateSlave(slave);
     efc:	8f d4       	rcall	.+2334   	; 0x181c <SPI_activateSlave>
     efe:	85 e0       	ldi	r24, 0x05	; 5
	
	SPI_send(MCP_BITMOD);
     f00:	83 d4       	rcall	.+2310   	; 0x1808 <SPI_send>
     f02:	80 2f       	mov	r24, r16
     f04:	81 d4       	rcall	.+2306   	; 0x1808 <SPI_send>
	SPI_send(register2change);
     f06:	81 2f       	mov	r24, r17
     f08:	7f d4       	rcall	.+2302   	; 0x1808 <SPI_send>
     f0a:	8d 2f       	mov	r24, r29
	SPI_send(mask);
     f0c:	7d d4       	rcall	.+2298   	; 0x1808 <SPI_send>
     f0e:	8c 2f       	mov	r24, r28
     f10:	89 d4       	rcall	.+2322   	; 0x1824 <SPI_deactivateSlave>
	SPI_send(newValue);
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	1f 91       	pop	r17
	
	SPI_deactivateSlave(slave);
     f18:	0f 91       	pop	r16
     f1a:	08 95       	ret

00000f1c <startGame>:

static OP_STATE* actualState;
//******************************************************************************************

void startGame()
{
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
	*actualState = GAME;
     f20:	e0 91 03 03 	lds	r30, 0x0303
     f24:	f0 91 04 03 	lds	r31, 0x0304
     f28:	10 82       	st	Z, r1
	OLED_clear();
     f2a:	6d d2       	rcall	.+1242   	; 0x1406 <OLED_clear>
     f2c:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     f2e:	70 e0       	ldi	r23, 0x00	; 0
     f30:	80 e0       	ldi	r24, 0x00	; 0
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	4b d2       	rcall	.+1174   	; 0x13cc <OLED_goto>
     f36:	8d ec       	ldi	r24, 0xCD	; 205
     f38:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("START");
     f3a:	9e d2       	rcall	.+1340   	; 0x1478 <OLED_printString>
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_goto(3,0);
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	43 d2       	rcall	.+1158   	; 0x13cc <OLED_goto>
     f46:	ce e0       	ldi	r28, 0x0E	; 14
     f48:	d0 e0       	ldi	r29, 0x00	; 0
     f4a:	81 e9       	ldi	r24, 0x91	; 145
     f4c:	91 e0       	ldi	r25, 0x01	; 1
     f4e:	94 d2       	rcall	.+1320   	; 0x1478 <OLED_printString>
     f50:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     f52:	8f e7       	ldi	r24, 0x7F	; 127
     f54:	97 e0       	ldi	r25, 0x07	; 7
     f56:	21 50       	subi	r18, 0x01	; 1
     f58:	80 40       	sbci	r24, 0x00	; 0
     f5a:	90 40       	sbci	r25, 0x00	; 0
     f5c:	e1 f7       	brne	.-8      	; 0xf56 <startGame+0x3a>
     f5e:	00 c0       	rjmp	.+0      	; 0xf60 <startGame+0x44>
     f60:	00 00       	nop
     f62:	21 97       	sbiw	r28, 0x01	; 1
     f64:	20 97       	sbiw	r28, 0x00	; 0
     f66:	89 f7       	brne	.-30     	; 0xf4a <startGame+0x2e>
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	70 e0       	ldi	r23, 0x00	; 0
     f6c:	85 e0       	ldi	r24, 0x05	; 5
	OLED_goto(0,0);
	OLED_printString("START");
	
	OLED_goto(3,0);
	
	for(int i = 14; i > 0; i--)
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	2d d2       	rcall	.+1114   	; 0x13cc <OLED_goto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_goto(5,0);
     f72:	83 ed       	ldi	r24, 0xD3	; 211
     f74:	91 e0       	ldi	r25, 0x01	; 1
     f76:	80 d2       	rcall	.+1280   	; 0x1478 <OLED_printString>
     f78:	2f ef       	ldi	r18, 0xFF	; 255
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     f7e:	21 50       	subi	r18, 0x01	; 1
     f80:	80 40       	sbci	r24, 0x00	; 0
     f82:	90 40       	sbci	r25, 0x00	; 0
     f84:	e1 f7       	brne	.-8      	; 0xf7e <startGame+0x62>
     f86:	00 c0       	rjmp	.+0      	; 0xf88 <startGame+0x6c>
     f88:	00 c0       	rjmp	.+0      	; 0xf8a <startGame+0x6e>
     f8a:	df 91       	pop	r29
     f8c:	cf 91       	pop	r28
     f8e:	08 95       	ret

00000f90 <MENU_addMenuItem>:
     f90:	cf 92       	push	r12
     f92:	df 92       	push	r13
     f94:	ef 92       	push	r14
     f96:	ff 92       	push	r15
	_delay_ms(3000);
}
     f98:	0f 93       	push	r16
     f9a:	1f 93       	push	r17
     f9c:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     f9e:	df 93       	push	r29
     fa0:	8c 01       	movw	r16, r24
     fa2:	7b 01       	movw	r14, r22
     fa4:	6a 01       	movw	r12, r20
     fa6:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     fa8:	80 91 08 03 	lds	r24, 0x0308
     fac:	90 91 09 03 	lds	r25, 0x0309
     fb0:	89 2b       	or	r24, r25
     fb2:	19 f0       	breq	.+6      	; 0xfba <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     fb4:	8c ed       	ldi	r24, 0xDC	; 220
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	2e d6       	rcall	.+3164   	; 0x1c16 <puts>
     fba:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	a4 d4       	rcall	.+2376   	; 0x1908 <malloc>
     fc0:	fc 01       	movw	r30, r24
     fc2:	90 93 09 03 	sts	0x0309, r25
     fc6:	80 93 08 03 	sts	0x0308, r24
     fca:	f3 82       	std	Z+3, r15	; 0x03
     fcc:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     fce:	11 83       	std	Z+1, r17	; 0x01
     fd0:	00 83       	st	Z, r16
	currItem->name = name;
     fd2:	cd 2b       	or	r28, r29
     fd4:	39 f0       	breq	.+14     	; 0xfe4 <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     fd6:	d5 82       	std	Z+5, r13	; 0x05
     fd8:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     fde:	97 83       	std	Z+7, r25	; 0x07
     fe0:	86 83       	std	Z+6, r24	; 0x06
     fe2:	04 c0       	rjmp	.+8      	; 0xfec <MENU_addMenuItem+0x5c>
     fe4:	15 82       	std	Z+5, r1	; 0x05
     fe6:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     fe8:	17 82       	std	Z+7, r1	; 0x07
     fea:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     fec:	df 91       	pop	r29
     fee:	cf 91       	pop	r28
	}
}
     ff0:	1f 91       	pop	r17
     ff2:	0f 91       	pop	r16
     ff4:	ff 90       	pop	r15
     ff6:	ef 90       	pop	r14
     ff8:	df 90       	pop	r13
     ffa:	cf 90       	pop	r12
     ffc:	08 95       	ret

00000ffe <MENU_buildMenus>:
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
    1002:	86 e1       	ldi	r24, 0x16	; 22
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	80 d4       	rcall	.+2304   	; 0x1908 <malloc>
    1008:	ec 01       	movw	r28, r24
    100a:	90 93 0f 03 	sts	0x030F, r25
    100e:	80 93 0e 03 	sts	0x030E, r24
    1012:	82 ef       	ldi	r24, 0xF2	; 242
	mainMenu->menuName = "MainMenu";
    1014:	91 e0       	ldi	r25, 0x01	; 1
    1016:	99 83       	std	Y+1, r25	; 0x01
    1018:	88 83       	st	Y, r24
    101a:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
    101c:	1c 8a       	std	Y+20, r1	; 0x14
    101e:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	9b 83       	std	Y+3, r25	; 0x03
    1024:	8a 83       	std	Y+2, r24	; 0x02
    1026:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	6e d4       	rcall	.+2268   	; 0x1908 <malloc>
    102c:	fc 01       	movw	r30, r24
    102e:	90 93 0d 03 	sts	0x030D, r25
    1032:	80 93 0c 03 	sts	0x030C, r24
    1036:	8b ef       	ldi	r24, 0xFB	; 251
    1038:	91 e0       	ldi	r25, 0x01	; 1
	difficultyMenu->menuName = "DifficultyMenu";
    103a:	91 83       	std	Z+1, r25	; 0x01
    103c:	80 83       	st	Z, r24
    103e:	d5 8b       	std	Z+21, r29	; 0x15
    1040:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
    1042:	83 e0       	ldi	r24, 0x03	; 3
    1044:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
    1046:	93 83       	std	Z+3, r25	; 0x03
    1048:	82 83       	std	Z+2, r24	; 0x02
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
    104e:	40 e0       	ldi	r20, 0x00	; 0
    1050:	50 e0       	ldi	r21, 0x00	; 0
    1052:	be 01       	movw	r22, r28
    1054:	8a e0       	ldi	r24, 0x0A	; 10
    1056:	92 e0       	ldi	r25, 0x02	; 2
    1058:	9b df       	rcall	.-202    	; 0xf90 <MENU_addMenuItem>
    105a:	60 91 0e 03 	lds	r22, 0x030E
    105e:	70 91 0f 03 	lds	r23, 0x030F
	mainMenu->children[0] = currItem;
    1062:	e0 91 08 03 	lds	r30, 0x0308
    1066:	f0 91 09 03 	lds	r31, 0x0309
    106a:	db 01       	movw	r26, r22
    106c:	15 96       	adiw	r26, 0x05	; 5
    106e:	fc 93       	st	X, r31
    1070:	ee 93       	st	-X, r30
    1072:	14 97       	sbiw	r26, 0x04	; 4
    1074:	8e e8       	ldi	r24, 0x8E	; 142
    1076:	97 e0       	ldi	r25, 0x07	; 7
    1078:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
    107a:	82 87       	std	Z+10, r24	; 0x0a
    107c:	40 91 0c 03 	lds	r20, 0x030C
    1080:	50 91 0d 03 	lds	r21, 0x030D
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
    1084:	21 e0       	ldi	r18, 0x01	; 1
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	83 e1       	ldi	r24, 0x13	; 19
    108a:	92 e0       	ldi	r25, 0x02	; 2
    108c:	81 df       	rcall	.-254    	; 0xf90 <MENU_addMenuItem>
    108e:	60 91 0e 03 	lds	r22, 0x030E
    1092:	70 91 0f 03 	lds	r23, 0x030F
	mainMenu->children[1] = currItem;
    1096:	80 91 08 03 	lds	r24, 0x0308
    109a:	90 91 09 03 	lds	r25, 0x0309
    109e:	fb 01       	movw	r30, r22
    10a0:	97 83       	std	Z+7, r25	; 0x07
    10a2:	86 83       	std	Z+6, r24	; 0x06
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e0       	ldi	r20, 0x00	; 0
    10aa:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
    10ac:	8e e1       	ldi	r24, 0x1E	; 30
    10ae:	92 e0       	ldi	r25, 0x02	; 2
    10b0:	6f df       	rcall	.-290    	; 0xf90 <MENU_addMenuItem>
    10b2:	60 91 0e 03 	lds	r22, 0x030E
    10b6:	70 91 0f 03 	lds	r23, 0x030F
    10ba:	80 91 08 03 	lds	r24, 0x0308
	mainMenu->children[2] = currItem;
    10be:	90 91 09 03 	lds	r25, 0x0309
    10c2:	db 01       	movw	r26, r22
    10c4:	19 96       	adiw	r26, 0x09	; 9
    10c6:	9c 93       	st	X, r25
    10c8:	8e 93       	st	-X, r24
    10ca:	18 97       	sbiw	r26, 0x08	; 8
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e0       	ldi	r20, 0x00	; 0
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	89 e2       	ldi	r24, 0x29	; 41
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
    10d6:	92 e0       	ldi	r25, 0x02	; 2
    10d8:	5b df       	rcall	.-330    	; 0xf90 <MENU_addMenuItem>
    10da:	60 91 0e 03 	lds	r22, 0x030E
    10de:	70 91 0f 03 	lds	r23, 0x030F
    10e2:	e0 91 08 03 	lds	r30, 0x0308
	mainMenu->children[3] = currItem;
    10e6:	f0 91 09 03 	lds	r31, 0x0309
    10ea:	db 01       	movw	r26, r22
    10ec:	1b 96       	adiw	r26, 0x0b	; 11
    10ee:	fc 93       	st	X, r31
    10f0:	ee 93       	st	-X, r30
    10f2:	1a 97       	sbiw	r26, 0x0a	; 10
    10f4:	83 e7       	ldi	r24, 0x73	; 115
    10f6:	95 e0       	ldi	r25, 0x05	; 5
    10f8:	93 87       	std	Z+11, r25	; 0x0b
    10fa:	82 87       	std	Z+10, r24	; 0x0a
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	50 e0       	ldi	r21, 0x00	; 0
    1104:	83 e3       	ldi	r24, 0x33	; 51
    1106:	92 e0       	ldi	r25, 0x02	; 2
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
    1108:	43 df       	rcall	.-378    	; 0xf90 <MENU_addMenuItem>
    110a:	e0 91 0e 03 	lds	r30, 0x030E
    110e:	f0 91 0f 03 	lds	r31, 0x030F
    1112:	80 91 08 03 	lds	r24, 0x0308
    1116:	90 91 09 03 	lds	r25, 0x0309
	mainMenu->children[4] = currItem;
    111a:	95 87       	std	Z+13, r25	; 0x0d
    111c:	84 87       	std	Z+12, r24	; 0x0c
    111e:	10 92 09 03 	sts	0x0309, r1
    1122:	10 92 08 03 	sts	0x0308, r1
    1126:	60 91 0c 03 	lds	r22, 0x030C
    112a:	70 91 0d 03 	lds	r23, 0x030D
	
	currItem = NULL;
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
    1134:	50 e0       	ldi	r21, 0x00	; 0
    1136:	88 e3       	ldi	r24, 0x38	; 56
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	2a df       	rcall	.-428    	; 0xf90 <MENU_addMenuItem>
    113c:	60 91 0c 03 	lds	r22, 0x030C
    1140:	70 91 0d 03 	lds	r23, 0x030D
    1144:	80 91 08 03 	lds	r24, 0x0308
    1148:	90 91 09 03 	lds	r25, 0x0309
	difficultyMenu->children[0] = currItem;
    114c:	fb 01       	movw	r30, r22
    114e:	95 83       	std	Z+5, r25	; 0x05
    1150:	84 83       	std	Z+4, r24	; 0x04
    1152:	20 e0       	ldi	r18, 0x00	; 0
    1154:	30 e0       	ldi	r19, 0x00	; 0
    1156:	40 e0       	ldi	r20, 0x00	; 0
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	8d e3       	ldi	r24, 0x3D	; 61
    115c:	92 e0       	ldi	r25, 0x02	; 2
    115e:	18 df       	rcall	.-464    	; 0xf90 <MENU_addMenuItem>
    1160:	60 91 0c 03 	lds	r22, 0x030C
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
    1164:	70 91 0d 03 	lds	r23, 0x030D
    1168:	80 91 08 03 	lds	r24, 0x0308
    116c:	90 91 09 03 	lds	r25, 0x0309
    1170:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
    1172:	17 96       	adiw	r26, 0x07	; 7
    1174:	9c 93       	st	X, r25
    1176:	8e 93       	st	-X, r24
    1178:	16 97       	sbiw	r26, 0x06	; 6
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e0       	ldi	r20, 0x00	; 0
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	84 e4       	ldi	r24, 0x44	; 68
    1184:	92 e0       	ldi	r25, 0x02	; 2
    1186:	04 df       	rcall	.-504    	; 0xf90 <MENU_addMenuItem>
    1188:	e0 91 0c 03 	lds	r30, 0x030C
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
    118c:	f0 91 0d 03 	lds	r31, 0x030D
    1190:	80 91 08 03 	lds	r24, 0x0308
    1194:	90 91 09 03 	lds	r25, 0x0309
    1198:	91 87       	std	Z+9, r25	; 0x09
    119a:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	08 95       	ret

000011a2 <MENU_printMenuItem>:
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	ec 01       	movw	r28, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	20 97       	sbiw	r28, 0x00	; 0
    11ac:	39 f0       	breq	.+14     	; 0x11bc <MENU_printMenuItem+0x1a>
    11ae:	6a e0       	ldi	r22, 0x0A	; 10
}
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	0c d1       	rcall	.+536    	; 0x13cc <OLED_goto>
    11b4:	88 81       	ld	r24, Y
void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
		OLED_printString(item->name);
    11b6:	99 81       	ldd	r25, Y+1	; 0x01
    11b8:	5f d1       	rcall	.+702    	; 0x1478 <OLED_printString>
    11ba:	07 c0       	rjmp	.+14     	; 0x11ca <MENU_printMenuItem+0x28>
    11bc:	89 e4       	ldi	r24, 0x49	; 73
    11be:	92 e0       	ldi	r25, 0x02	; 2
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
    11c0:	9f 93       	push	r25
    11c2:	8f 93       	push	r24
    11c4:	12 d5       	rcall	.+2596   	; 0x1bea <printf>
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	08 95       	ret

000011d0 <MENU_printMenu>:
	}
}
    11d0:	cf 92       	push	r12
    11d2:	df 92       	push	r13
    11d4:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
    11d6:	ff 92       	push	r15
    11d8:	0f 93       	push	r16
    11da:	1f 93       	push	r17
    11dc:	cf 93       	push	r28
    11de:	df 93       	push	r29
    11e0:	6c 01       	movw	r12, r24
    11e2:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
    11e4:	10 d1       	rcall	.+544    	; 0x1406 <OLED_clear>
    11e6:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	9d d1       	rcall	.+826    	; 0x1526 <OLED_moveArrow>
    11ec:	1e 14       	cp	r1, r14
    11ee:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
    11f0:	7c f4       	brge	.+30     	; 0x1210 <MENU_printMenu+0x40>
    11f2:	86 01       	movw	r16, r12
    11f4:	0c 5f       	subi	r16, 0xFC	; 252
    11f6:	1f 4f       	sbci	r17, 0xFF	; 255
    11f8:	c0 e0       	ldi	r28, 0x00	; 0
    11fa:	d0 e0       	ldi	r29, 0x00	; 0
    11fc:	be 01       	movw	r22, r28
    11fe:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
    1200:	81 91       	ld	r24, Z+
    1202:	91 91       	ld	r25, Z+
    1204:	8f 01       	movw	r16, r30
    1206:	cd df       	rcall	.-102    	; 0x11a2 <MENU_printMenuItem>
    1208:	21 96       	adiw	r28, 0x01	; 1
    120a:	ce 15       	cp	r28, r14
    120c:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
    120e:	b1 f7       	brne	.-20     	; 0x11fc <MENU_printMenu+0x2c>
    1210:	d0 92 0b 03 	sts	0x030B, r13
    1214:	c0 92 0a 03 	sts	0x030A, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
    1218:	10 92 06 03 	sts	0x0306, r1
    121c:	10 92 05 03 	sts	0x0305, r1
	
	currentPosition = 0;
    1220:	f6 01       	movw	r30, r12
    1222:	84 81       	ldd	r24, Z+4	; 0x04
    1224:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
    1226:	90 93 09 03 	sts	0x0309, r25
    122a:	80 93 08 03 	sts	0x0308, r24
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
}
    1234:	0f 91       	pop	r16
    1236:	ff 90       	pop	r15
    1238:	ef 90       	pop	r14
    123a:	df 90       	pop	r13
    123c:	cf 90       	pop	r12
    123e:	08 95       	ret

00001240 <MENU_moveUp>:
    1240:	20 91 05 03 	lds	r18, 0x0305
    1244:	30 91 06 03 	lds	r19, 0x0306
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
    1248:	12 16       	cp	r1, r18
    124a:	13 06       	cpc	r1, r19
    124c:	bc f4       	brge	.+46     	; 0x127c <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
    124e:	c9 01       	movw	r24, r18
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	90 93 06 03 	sts	0x0306, r25
    1256:	80 93 05 03 	sts	0x0305, r24
		currItem = currentMenu->children[currentPosition];
    125a:	e0 91 0a 03 	lds	r30, 0x030A
    125e:	f0 91 0b 03 	lds	r31, 0x030B
    1262:	2f 5f       	subi	r18, 0xFF	; 255
    1264:	3f 4f       	sbci	r19, 0xFF	; 255
    1266:	22 0f       	add	r18, r18
    1268:	33 1f       	adc	r19, r19
    126a:	e2 0f       	add	r30, r18
    126c:	f3 1f       	adc	r31, r19
    126e:	20 81       	ld	r18, Z
    1270:	31 81       	ldd	r19, Z+1	; 0x01
    1272:	30 93 09 03 	sts	0x0309, r19
    1276:	20 93 08 03 	sts	0x0308, r18
		OLED_moveArrow(currentPosition);
    127a:	55 c1       	rjmp	.+682    	; 0x1526 <OLED_moveArrow>
    127c:	08 95       	ret

0000127e <MENU_moveDown>:
    127e:	e0 91 0a 03 	lds	r30, 0x030A
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
    1282:	f0 91 0b 03 	lds	r31, 0x030B
    1286:	20 91 05 03 	lds	r18, 0x0305
    128a:	30 91 06 03 	lds	r19, 0x0306
    128e:	82 81       	ldd	r24, Z+2	; 0x02
    1290:	93 81       	ldd	r25, Z+3	; 0x03
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	28 17       	cp	r18, r24
    1296:	39 07       	cpc	r19, r25
    1298:	a4 f4       	brge	.+40     	; 0x12c2 <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
    129a:	c9 01       	movw	r24, r18
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	90 93 06 03 	sts	0x0306, r25
    12a2:	80 93 05 03 	sts	0x0305, r24
		currItem = currentMenu->children[currentPosition];
    12a6:	2d 5f       	subi	r18, 0xFD	; 253
    12a8:	3f 4f       	sbci	r19, 0xFF	; 255
    12aa:	22 0f       	add	r18, r18
    12ac:	33 1f       	adc	r19, r19
    12ae:	e2 0f       	add	r30, r18
    12b0:	f3 1f       	adc	r31, r19
    12b2:	20 81       	ld	r18, Z
    12b4:	31 81       	ldd	r19, Z+1	; 0x01
    12b6:	30 93 09 03 	sts	0x0309, r19
    12ba:	20 93 08 03 	sts	0x0308, r18
		OLED_moveArrow(currentPosition);
    12be:	33 c1       	rjmp	.+614    	; 0x1526 <OLED_moveArrow>
    12c0:	08 95       	ret
    12c2:	10 92 06 03 	sts	0x0306, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
    12c6:	10 92 05 03 	sts	0x0305, r1
    12ca:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
    12cc:	95 81       	ldd	r25, Z+5	; 0x05
    12ce:	90 93 09 03 	sts	0x0309, r25
    12d2:	80 93 08 03 	sts	0x0308, r24
    12d6:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	25 c1       	rjmp	.+586    	; 0x1526 <OLED_moveArrow>
    12dc:	08 95       	ret

000012de <MENU_moveLeft>:
    12de:	e0 91 0a 03 	lds	r30, 0x030A
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
    12e2:	f0 91 0b 03 	lds	r31, 0x030B
    12e6:	84 89       	ldd	r24, Z+20	; 0x14
    12e8:	95 89       	ldd	r25, Z+21	; 0x15
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	21 f0       	breq	.+8      	; 0x12f6 <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
    12ee:	fc 01       	movw	r30, r24
    12f0:	62 81       	ldd	r22, Z+2	; 0x02
    12f2:	73 81       	ldd	r23, Z+3	; 0x03
    12f4:	6d cf       	rjmp	.-294    	; 0x11d0 <MENU_printMenu>
    12f6:	08 95       	ret

000012f8 <MENU_reactivate>:
    12f8:	80 91 0a 03 	lds	r24, 0x030A
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
    12fc:	90 91 0b 03 	lds	r25, 0x030B
    1300:	fc 01       	movw	r30, r24
    1302:	62 81       	ldd	r22, Z+2	; 0x02
    1304:	73 81       	ldd	r23, Z+3	; 0x03
    1306:	64 df       	rcall	.-312    	; 0x11d0 <MENU_printMenu>
    1308:	18 c0       	rjmp	.+48     	; 0x133a <MENU_waitForInput>
	MENU_waitForInput();
    130a:	08 95       	ret

0000130c <MENU_moveRight>:
    130c:	e0 91 08 03 	lds	r30, 0x0308
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
    1310:	f0 91 09 03 	lds	r31, 0x0309
    1314:	86 81       	ldd	r24, Z+6	; 0x06
    1316:	97 81       	ldd	r25, Z+7	; 0x07
    1318:	89 2b       	or	r24, r25
    131a:	39 f0       	breq	.+14     	; 0x132a <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
    131c:	84 81       	ldd	r24, Z+4	; 0x04
    131e:	95 81       	ldd	r25, Z+5	; 0x05
    1320:	fc 01       	movw	r30, r24
    1322:	62 81       	ldd	r22, Z+2	; 0x02
    1324:	73 81       	ldd	r23, Z+3	; 0x03
    1326:	54 cf       	rjmp	.-344    	; 0x11d0 <MENU_printMenu>
    1328:	08 95       	ret
    132a:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
    132c:	f3 85       	ldd	r31, Z+11	; 0x0b
    132e:	e0 2d       	mov	r30, r0
    1330:	30 97       	sbiw	r30, 0x00	; 0
    1332:	11 f0       	breq	.+4      	; 0x1338 <MENU_moveRight+0x2c>
    1334:	09 95       	icall
	{
		currItem->functionPtr();
    1336:	e0 cf       	rjmp	.-64     	; 0x12f8 <MENU_reactivate>
		MENU_reactivate();
    1338:	08 95       	ret

0000133a <MENU_waitForInput>:
    133a:	80 91 05 03 	lds	r24, 0x0305
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
    133e:	90 91 06 03 	lds	r25, 0x0306
    1342:	f1 d0       	rcall	.+482    	; 0x1526 <OLED_moveArrow>
    1344:	80 91 07 03 	lds	r24, 0x0307
	JOY_direction_t currDir;
	
	while(menuActiveFlag && *actualState == MENU)
    1348:	88 23       	and	r24, r24
    134a:	69 f1       	breq	.+90     	; 0x13a6 <MENU_waitForInput+0x6c>
    134c:	e0 91 03 03 	lds	r30, 0x0303
    1350:	f0 91 04 03 	lds	r31, 0x0304
    1354:	80 81       	ld	r24, Z
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	31 f5       	brne	.+76     	; 0x13a6 <MENU_waitForInput+0x6c>
    135a:	69 dd       	rcall	.-1326   	; 0xe2e <JOY_getDirection>
	{
		currDir = JOY_getDirection();
    135c:	82 30       	cpi	r24, 0x02	; 2
    135e:	71 f0       	breq	.+28     	; 0x137c <MENU_waitForInput+0x42>
		switch(currDir){
    1360:	18 f4       	brcc	.+6      	; 0x1368 <MENU_waitForInput+0x2e>
    1362:	81 30       	cpi	r24, 0x01	; 1
    1364:	49 f0       	breq	.+18     	; 0x1378 <MENU_waitForInput+0x3e>
    1366:	0b c0       	rjmp	.+22     	; 0x137e <MENU_waitForInput+0x44>
    1368:	83 30       	cpi	r24, 0x03	; 3
    136a:	21 f0       	breq	.+8      	; 0x1374 <MENU_waitForInput+0x3a>
    136c:	84 30       	cpi	r24, 0x04	; 4
    136e:	39 f4       	brne	.+14     	; 0x137e <MENU_waitForInput+0x44>
    1370:	b6 df       	rcall	.-148    	; 0x12de <MENU_moveLeft>
    1372:	05 c0       	rjmp	.+10     	; 0x137e <MENU_waitForInput+0x44>
			case LEFT:
			MENU_moveLeft();
    1374:	cb df       	rcall	.-106    	; 0x130c <MENU_moveRight>
    1376:	03 c0       	rjmp	.+6      	; 0x137e <MENU_waitForInput+0x44>
			break;
    1378:	63 df       	rcall	.-314    	; 0x1240 <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
    137a:	01 c0       	rjmp	.+2      	; 0x137e <MENU_waitForInput+0x44>
    137c:	80 df       	rcall	.-256    	; 0x127e <MENU_moveDown>
			break;
    137e:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
    1380:	8f e7       	ldi	r24, 0x7F	; 127
    1382:	94 e0       	ldi	r25, 0x04	; 4
			break;
    1384:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
    1386:	80 40       	sbci	r24, 0x00	; 0
    1388:	90 40       	sbci	r25, 0x00	; 0
    138a:	e1 f7       	brne	.-8      	; 0x1384 <MENU_waitForInput+0x4a>
    138c:	00 c0       	rjmp	.+0      	; 0x138e <MENU_waitForInput+0x54>
    138e:	00 00       	nop
    1390:	80 91 07 03 	lds	r24, 0x0307
    1394:	88 23       	and	r24, r24
    1396:	39 f0       	breq	.+14     	; 0x13a6 <MENU_waitForInput+0x6c>
    1398:	e0 91 03 03 	lds	r30, 0x0303
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag && *actualState == MENU)
    139c:	f0 91 04 03 	lds	r31, 0x0304
    13a0:	80 81       	ld	r24, Z
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	d1 f2       	breq	.-76     	; 0x135a <MENU_waitForInput+0x20>
    13a6:	08 95       	ret

000013a8 <MENU_activate>:
    13a8:	90 93 04 03 	sts	0x0304, r25
    13ac:	80 93 03 03 	sts	0x0303, r24
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	80 93 07 03 	sts	0x0307, r24
void MENU_activate(OP_STATE* state)
{
	actualState = state;
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
    13b6:	23 de       	rcall	.-954    	; 0xffe <MENU_buildMenus>
    13b8:	80 91 0e 03 	lds	r24, 0x030E
	MENU_printMenu(mainMenu, mainMenu->noChilds);
    13bc:	90 91 0f 03 	lds	r25, 0x030F
    13c0:	fc 01       	movw	r30, r24
    13c2:	62 81       	ldd	r22, Z+2	; 0x02
    13c4:	73 81       	ldd	r23, Z+3	; 0x03
    13c6:	04 df       	rcall	.-504    	; 0x11d0 <MENU_printMenu>
    13c8:	b8 cf       	rjmp	.-144    	; 0x133a <MENU_waitForInput>
    13ca:	08 95       	ret

000013cc <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
    13cc:	26 2f       	mov	r18, r22
    13ce:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
    13d0:	75 95       	asr	r23
    13d2:	67 95       	ror	r22
    13d4:	75 95       	asr	r23
    13d6:	67 95       	ror	r22
    13d8:	75 95       	asr	r23
    13da:	67 95       	ror	r22
    13dc:	75 95       	asr	r23
    13de:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
    13e0:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
    13e2:	80 55       	subi	r24, 0x50	; 80
    13e4:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
    13e6:	e0 91 11 01 	lds	r30, 0x0111
    13ea:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13ee:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
    13f0:	e0 91 11 01 	lds	r30, 0x0111
    13f4:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13f8:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
    13fa:	e0 91 11 01 	lds	r30, 0x0111
    13fe:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1402:	60 83       	st	Z, r22
    1404:	08 95       	ret

00001406 <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
    1406:	1f 93       	push	r17
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	c1 e0       	ldi	r28, 0x01	; 1
    140e:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1414:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
    1416:	60 e0       	ldi	r22, 0x00	; 0
    1418:	70 e0       	ldi	r23, 0x00	; 0
    141a:	d8 df       	rcall	.-80     	; 0x13cc <OLED_goto>
    141c:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
    141e:	e0 91 0f 01 	lds	r30, 0x010F
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    1422:	f0 91 10 01 	lds	r31, 0x0110
    1426:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1428:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    142a:	80 38       	cpi	r24, 0x80	; 128
    142c:	c1 f7       	brne	.-16     	; 0x141e <OLED_clear+0x18>
    142e:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1430:	9d 2f       	mov	r25, r29
    1432:	21 96       	adiw	r28, 0x01	; 1
    1434:	c9 30       	cpi	r28, 0x09	; 9
    1436:	d1 05       	cpc	r29, r1
    1438:	71 f7       	brne	.-36     	; 0x1416 <OLED_clear+0x10>
    143a:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	08 95       	ret

00001442 <OLED_printCharacter>:
    1442:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	22 0f       	add	r18, r18
    144a:	33 1f       	adc	r19, r19
    144c:	22 0f       	add	r18, r18
    144e:	33 1f       	adc	r19, r19
    1450:	22 0f       	add	r18, r18
    1452:	33 1f       	adc	r19, r19
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	20 59       	subi	r18, 0x90	; 144
    145a:	3f 4f       	sbci	r19, 0xFF	; 255
    145c:	f9 01       	movw	r30, r18
    145e:	e8 0f       	add	r30, r24
    1460:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
    1462:	e4 91       	lpm	r30, Z
    1464:	a0 91 0f 01 	lds	r26, 0x010F
    1468:	b0 91 10 01 	lds	r27, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    146c:	ec 93       	st	X, r30
    146e:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
    1470:	88 30       	cpi	r24, 0x08	; 8
    1472:	91 05       	cpc	r25, r1
    1474:	99 f7       	brne	.-26     	; 0x145c <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
    1476:	08 95       	ret

00001478 <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
    1478:	1f 93       	push	r17
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
    1480:	10 e0       	ldi	r17, 0x00	; 0
    1482:	06 c0       	rjmp	.+12     	; 0x1490 <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
    1484:	fe 01       	movw	r30, r28
    1486:	e8 0f       	add	r30, r24
    1488:	f9 1f       	adc	r31, r25
    148a:	80 81       	ld	r24, Z
    148c:	da df       	rcall	.-76     	; 0x1442 <OLED_printCharacter>
    148e:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
    1490:	81 2f       	mov	r24, r17
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	fe 01       	movw	r30, r28
    1496:	01 90       	ld	r0, Z+
    1498:	00 20       	and	r0, r0
    149a:	e9 f7       	brne	.-6      	; 0x1496 <OLED_printString+0x1e>
    149c:	31 97       	sbiw	r30, 0x01	; 1
    149e:	ec 1b       	sub	r30, r28
    14a0:	fd 0b       	sbc	r31, r29
    14a2:	8e 17       	cp	r24, r30
    14a4:	9f 07       	cpc	r25, r31
    14a6:	70 f3       	brcs	.-36     	; 0x1484 <OLED_printString+0xc>
    14a8:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	08 95       	ret

000014b0 <OLED_printArrow>:
    14b0:	e0 91 0f 01 	lds	r30, 0x010F
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
    14b4:	f0 91 10 01 	lds	r31, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14b8:	88 e1       	ldi	r24, 0x18	; 24
    14ba:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    14bc:	e0 91 0f 01 	lds	r30, 0x010F
    14c0:	f0 91 10 01 	lds	r31, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14c4:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
    14c6:	e0 91 0f 01 	lds	r30, 0x010F
    14ca:	f0 91 10 01 	lds	r31, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14ce:	9e e7       	ldi	r25, 0x7E	; 126
    14d0:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
    14d2:	e0 91 0f 01 	lds	r30, 0x010F
    14d6:	f0 91 10 01 	lds	r31, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14da:	9c e3       	ldi	r25, 0x3C	; 60
    14dc:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    14de:	e0 91 0f 01 	lds	r30, 0x010F
    14e2:	f0 91 10 01 	lds	r31, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14e6:	80 83       	st	Z, r24
    14e8:	08 95       	ret

000014ea <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	c1 e0       	ldi	r28, 0x01	; 1
    14f2:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    14f8:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
    14fa:	60 e0       	ldi	r22, 0x00	; 0
    14fc:	70 e0       	ldi	r23, 0x00	; 0
    14fe:	66 df       	rcall	.-308    	; 0x13cc <OLED_goto>
    1500:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1502:	e0 91 0f 01 	lds	r30, 0x010F
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    1506:	f0 91 10 01 	lds	r31, 0x0110
    150a:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    150c:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    150e:	85 30       	cpi	r24, 0x05	; 5
    1510:	c1 f7       	brne	.-16     	; 0x1502 <OLED_clearArrow+0x18>
    1512:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1514:	9d 2f       	mov	r25, r29
    1516:	21 96       	adiw	r28, 0x01	; 1
    1518:	c9 30       	cpi	r28, 0x09	; 9
    151a:	d1 05       	cpc	r29, r1
    151c:	71 f7       	brne	.-36     	; 0x14fa <OLED_clearArrow+0x10>
    151e:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    1520:	cf 91       	pop	r28
    1522:	1f 91       	pop	r17
    1524:	08 95       	ret

00001526 <OLED_moveArrow>:
    1526:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    1528:	df 93       	push	r29
    152a:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
    152c:	de df       	rcall	.-68     	; 0x14ea <OLED_clearArrow>
    152e:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	ce 01       	movw	r24, r28
    1534:	4b df       	rcall	.-362    	; 0x13cc <OLED_goto>
    1536:	bc df       	rcall	.-136    	; 0x14b0 <OLED_printArrow>
    1538:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
    153a:	cf 91       	pop	r28
    153c:	08 95       	ret

0000153e <OLED_setContrast>:
}
    153e:	e0 91 11 01 	lds	r30, 0x0111
    1542:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1546:	91 e8       	ldi	r25, 0x81	; 129
    1548:	90 83       	st	Z, r25
void OLED_setContrast(uint8_t contrast)
{
	// activate contrast contol
	OLED_writeByteToOLED(oled_cmd, 0x81);
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
    154a:	e0 91 11 01 	lds	r30, 0x0111
    154e:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1552:	80 83       	st	Z, r24
    1554:	08 95       	ret

00001556 <OLED_fadeIn>:
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
}

void OLED_fadeIn(void)
{
    1556:	cf 93       	push	r28
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    1558:	c0 e0       	ldi	r28, 0x00	; 0
	{
		OLED_setContrast(i);
    155a:	8c 2f       	mov	r24, r28
    155c:	f0 df       	rcall	.-32     	; 0x153e <OLED_setContrast>
    155e:	83 e3       	ldi	r24, 0x33	; 51
    1560:	93 e1       	ldi	r25, 0x13	; 19
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	f1 f7       	brne	.-4      	; 0x1562 <OLED_fadeIn+0xc>
    1566:	cf 5f       	subi	r28, 0xFF	; 255
}

void OLED_fadeIn(void)
{
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    1568:	cf 3f       	cpi	r28, 0xFF	; 255
    156a:	b9 f7       	brne	.-18     	; 0x155a <OLED_fadeIn+0x4>
    156c:	cf 91       	pop	r28
	{
		OLED_setContrast(i);
		_delay_ms(4);
	}
}
    156e:	08 95       	ret

00001570 <OLED_splashScreen>:
    1570:	89 e5       	ldi	r24, 0x59	; 89
	}
}

void OLED_splashScreen(void)
{
	printf("run splash screen...\n");
    1572:	92 e0       	ldi	r25, 0x02	; 2
    1574:	50 d3       	rcall	.+1696   	; 0x1c16 <puts>
    1576:	80 e0       	ldi	r24, 0x00	; 0
	
	OLED_setContrast(0);
    1578:	e2 df       	rcall	.-60     	; 0x153e <OLED_setContrast>
    157a:	2f ef       	ldi	r18, 0xFF	; 255
    157c:	8f e7       	ldi	r24, 0x7F	; 127
    157e:	97 e0       	ldi	r25, 0x07	; 7
    1580:	21 50       	subi	r18, 0x01	; 1
    1582:	80 40       	sbci	r24, 0x00	; 0
    1584:	90 40       	sbci	r25, 0x00	; 0
    1586:	e1 f7       	brne	.-8      	; 0x1580 <OLED_splashScreen+0x10>
    1588:	00 c0       	rjmp	.+0      	; 0x158a <OLED_splashScreen+0x1a>
    158a:	00 00       	nop
    158c:	64 e0       	ldi	r22, 0x04	; 4
    158e:	70 e0       	ldi	r23, 0x00	; 0
	
	_delay_ms(500);
	OLED_goto(2,4);
    1590:	82 e0       	ldi	r24, 0x02	; 2
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	1b df       	rcall	.-458    	; 0x13cc <OLED_goto>
    1596:	8e e6       	ldi	r24, 0x6E	; 110
    1598:	92 e0       	ldi	r25, 0x02	; 2
    159a:	6e df       	rcall	.-292    	; 0x1478 <OLED_printString>
	OLED_printString("Group 46 Soft");
    159c:	dc df       	rcall	.-72     	; 0x1556 <OLED_fadeIn>
    159e:	2f ef       	ldi	r18, 0xFF	; 255
    15a0:	8f e7       	ldi	r24, 0x7F	; 127
    15a2:	97 e0       	ldi	r25, 0x07	; 7
	OLED_fadeIn();
    15a4:	21 50       	subi	r18, 0x01	; 1
    15a6:	80 40       	sbci	r24, 0x00	; 0
    15a8:	90 40       	sbci	r25, 0x00	; 0
    15aa:	e1 f7       	brne	.-8      	; 0x15a4 <OLED_splashScreen+0x34>
    15ac:	00 c0       	rjmp	.+0      	; 0x15ae <OLED_splashScreen+0x3e>
    15ae:	00 00       	nop
    15b0:	2a df       	rcall	.-428    	; 0x1406 <OLED_clear>
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	c4 df       	rcall	.-120    	; 0x153e <OLED_setContrast>
    15b6:	2f ef       	ldi	r18, 0xFF	; 255
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
	_delay_ms(500);
	
 	OLED_clear();
    15ba:	92 e0       	ldi	r25, 0x02	; 2
    15bc:	21 50       	subi	r18, 0x01	; 1
 	OLED_setContrast(0);
    15be:	80 40       	sbci	r24, 0x00	; 0
    15c0:	90 40       	sbci	r25, 0x00	; 0
    15c2:	e1 f7       	brne	.-8      	; 0x15bc <OLED_splashScreen+0x4c>
    15c4:	00 c0       	rjmp	.+0      	; 0x15c6 <OLED_splashScreen+0x56>
    15c6:	00 c0       	rjmp	.+0      	; 0x15c8 <OLED_splashScreen+0x58>
    15c8:	6c e1       	ldi	r22, 0x1C	; 28
    15ca:	70 e0       	ldi	r23, 0x00	; 0
    15cc:	83 e0       	ldi	r24, 0x03	; 3
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	fd de       	rcall	.-518    	; 0x13cc <OLED_goto>
    15d2:	8c e7       	ldi	r24, 0x7C	; 124
    15d4:	92 e0       	ldi	r25, 0x02	; 2
 	
 	_delay_ms(200);
 	OLED_goto(3,28);
    15d6:	50 df       	rcall	.-352    	; 0x1478 <OLED_printString>
    15d8:	68 e1       	ldi	r22, 0x18	; 24
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	84 e0       	ldi	r24, 0x04	; 4
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	f5 de       	rcall	.-534    	; 0x13cc <OLED_goto>
 	OLED_printString("proudly");
    15e2:	84 e8       	ldi	r24, 0x84	; 132
    15e4:	92 e0       	ldi	r25, 0x02	; 2
    15e6:	48 df       	rcall	.-368    	; 0x1478 <OLED_printString>
    15e8:	b6 df       	rcall	.-148    	; 0x1556 <OLED_fadeIn>
 	OLED_goto(4,24);	
    15ea:	2f ef       	ldi	r18, 0xFF	; 255
    15ec:	8f e7       	ldi	r24, 0x7F	; 127
    15ee:	97 e0       	ldi	r25, 0x07	; 7
    15f0:	21 50       	subi	r18, 0x01	; 1
    15f2:	80 40       	sbci	r24, 0x00	; 0
    15f4:	90 40       	sbci	r25, 0x00	; 0
 	OLED_printString("presents");
    15f6:	e1 f7       	brne	.-8      	; 0x15f0 <OLED_splashScreen+0x80>
    15f8:	00 c0       	rjmp	.+0      	; 0x15fa <OLED_splashScreen+0x8a>
    15fa:	00 00       	nop
    15fc:	04 df       	rcall	.-504    	; 0x1406 <OLED_clear>
 	OLED_fadeIn();
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	9e df       	rcall	.-196    	; 0x153e <OLED_setContrast>
    1602:	2f ef       	ldi	r18, 0xFF	; 255
    1604:	8f ef       	ldi	r24, 0xFF	; 255
    1606:	92 e0       	ldi	r25, 0x02	; 2
    1608:	21 50       	subi	r18, 0x01	; 1
    160a:	80 40       	sbci	r24, 0x00	; 0
    160c:	90 40       	sbci	r25, 0x00	; 0
    160e:	e1 f7       	brne	.-8      	; 0x1608 <OLED_splashScreen+0x98>
    1610:	00 c0       	rjmp	.+0      	; 0x1612 <OLED_splashScreen+0xa2>
    1612:	00 c0       	rjmp	.+0      	; 0x1614 <OLED_splashScreen+0xa4>
 	_delay_ms(500);
 	
 	OLED_clear();
    1614:	6c e1       	ldi	r22, 0x1C	; 28
    1616:	70 e0       	ldi	r23, 0x00	; 0
 	OLED_setContrast(0);
    1618:	83 e0       	ldi	r24, 0x03	; 3
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	d7 de       	rcall	.-594    	; 0x13cc <OLED_goto>
    161e:	8d e8       	ldi	r24, 0x8D	; 141
    1620:	92 e0       	ldi	r25, 0x02	; 2
    1622:	2a df       	rcall	.-428    	; 0x1478 <OLED_printString>
    1624:	98 df       	rcall	.-208    	; 0x1556 <OLED_fadeIn>
    1626:	2f ef       	ldi	r18, 0xFF	; 255
    1628:	8f ef       	ldi	r24, 0xFF	; 255
    162a:	9e e0       	ldi	r25, 0x0E	; 14
    162c:	21 50       	subi	r18, 0x01	; 1
    162e:	80 40       	sbci	r24, 0x00	; 0
 	
 	_delay_ms(200);
 	OLED_goto(3, 28);
    1630:	90 40       	sbci	r25, 0x00	; 0
    1632:	e1 f7       	brne	.-8      	; 0x162c <OLED_splashScreen+0xbc>
    1634:	00 c0       	rjmp	.+0      	; 0x1636 <OLED_splashScreen+0xc6>
    1636:	00 00       	nop
    1638:	e6 de       	rcall	.-564    	; 0x1406 <OLED_clear>
    163a:	80 e5       	ldi	r24, 0x50	; 80
 	OLED_printString("FIFA 18");
    163c:	80 df       	rcall	.-256    	; 0x153e <OLED_setContrast>
    163e:	85 e9       	ldi	r24, 0x95	; 149
    1640:	92 e0       	ldi	r25, 0x02	; 2
    1642:	e9 c2       	rjmp	.+1490   	; 0x1c16 <puts>
 	OLED_fadeIn();
    1644:	08 95       	ret

00001646 <OLED_init>:
    1646:	e0 91 11 01 	lds	r30, 0x0111
    164a:	f0 91 12 01 	lds	r31, 0x0112
    164e:	8e ea       	ldi	r24, 0xAE	; 174
    1650:	80 83       	st	Z, r24
    1652:	e0 91 11 01 	lds	r30, 0x0111
    1656:	f0 91 12 01 	lds	r31, 0x0112
 	_delay_ms(1000);
	
	// clean up
	OLED_clear();
    165a:	81 ea       	ldi	r24, 0xA1	; 161
    165c:	80 83       	st	Z, r24
	OLED_setContrast(0x50); // back to standard contrast
    165e:	e0 91 11 01 	lds	r30, 0x0111
    1662:	f0 91 12 01 	lds	r31, 0x0112
	
	printf("splash screen done...\n");
    1666:	8a ed       	ldi	r24, 0xDA	; 218
    1668:	80 83       	st	Z, r24
    166a:	e0 91 11 01 	lds	r30, 0x0111
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
    166e:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1672:	82 e1       	ldi	r24, 0x12	; 18
    1674:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    1676:	e0 91 11 01 	lds	r30, 0x0111
    167a:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    167e:	88 ec       	ldi	r24, 0xC8	; 200
    1680:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    1682:	e0 91 11 01 	lds	r30, 0x0111
    1686:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    168a:	88 ea       	ldi	r24, 0xA8	; 168
    168c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    168e:	e0 91 11 01 	lds	r30, 0x0111
    1692:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1696:	8f e3       	ldi	r24, 0x3F	; 63
    1698:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    169a:	e0 91 11 01 	lds	r30, 0x0111
    169e:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16a2:	85 ed       	ldi	r24, 0xD5	; 213
    16a4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
    16a6:	e0 91 11 01 	lds	r30, 0x0111
    16aa:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16ae:	80 e8       	ldi	r24, 0x80	; 128
    16b0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    16b2:	e0 91 11 01 	lds	r30, 0x0111
    16b6:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16ba:	81 e8       	ldi	r24, 0x81	; 129
    16bc:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    16be:	e0 91 11 01 	lds	r30, 0x0111
    16c2:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16c6:	80 e5       	ldi	r24, 0x50	; 80
    16c8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    16ca:	e0 91 11 01 	lds	r30, 0x0111
    16ce:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16d2:	89 ed       	ldi	r24, 0xD9	; 217
    16d4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
    16d6:	e0 91 11 01 	lds	r30, 0x0111
    16da:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16de:	81 e2       	ldi	r24, 0x21	; 33
    16e0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    16e2:	e0 91 11 01 	lds	r30, 0x0111
    16e6:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16ea:	80 e2       	ldi	r24, 0x20	; 32
    16ec:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    16ee:	e0 91 11 01 	lds	r30, 0x0111
    16f2:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16f6:	82 e0       	ldi	r24, 0x02	; 2
    16f8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    16fa:	e0 91 11 01 	lds	r30, 0x0111
    16fe:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1702:	8b ed       	ldi	r24, 0xDB	; 219
    1704:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    1706:	e0 91 11 01 	lds	r30, 0x0111
    170a:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    170e:	80 e3       	ldi	r24, 0x30	; 48
    1710:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    1712:	e0 91 11 01 	lds	r30, 0x0111
    1716:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    171a:	8d ea       	ldi	r24, 0xAD	; 173
    171c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    171e:	e0 91 11 01 	lds	r30, 0x0111
    1722:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1726:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    1728:	e0 91 11 01 	lds	r30, 0x0111
    172c:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1730:	84 ea       	ldi	r24, 0xA4	; 164
    1732:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    1734:	e0 91 11 01 	lds	r30, 0x0111
    1738:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    173c:	86 ea       	ldi	r24, 0xA6	; 166
    173e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    1740:	e0 91 11 01 	lds	r30, 0x0111
    1744:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1748:	8f ea       	ldi	r24, 0xAF	; 175
    174a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    174c:	5c de       	rcall	.-840    	; 0x1406 <OLED_clear>
    174e:	10 cf       	rjmp	.-480    	; 0x1570 <OLED_splashScreen>
	OLED_splashScreen();
    1750:	08 95       	ret

00001752 <SLI_init>:
uint8_t SLI_startup = 1; 

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    1752:	10 92 16 03 	sts	0x0316, r1
	currentSliPosition.L_abs = 0;
    1756:	10 92 17 03 	sts	0x0317, r1
	currentSliPosition.R_per = 0;
    175a:	10 92 18 03 	sts	0x0318, r1
	currentSliPosition.L_per = 0;
    175e:	10 92 19 03 	sts	0x0319, r1
    1762:	08 95       	ret

00001764 <SLI_requestCurrentPosition>:

//------------------------------------------------------------------------------
// This function requests an AD conversion for the specified slider.
void SLI_requestCurrentPosition(uint8_t side)
{
	if(side == 'l')
    1764:	8c 36       	cpi	r24, 0x6C	; 108
    1766:	39 f4       	brne	.+14     	; 0x1776 <SLI_requestCurrentPosition+0x12>
	{
		ADC_request(L_channel, adc_ext_ram);
    1768:	60 91 06 01 	lds	r22, 0x0106
    176c:	70 91 07 01 	lds	r23, 0x0107
    1770:	83 e0       	ldi	r24, 0x03	; 3
    1772:	7d c0       	rjmp	.+250    	; 0x186e <ADC_request>
    1774:	08 95       	ret
    1776:	82 37       	cpi	r24, 0x72	; 114
	}

	else if(side == 'r')
    1778:	31 f4       	brne	.+12     	; 0x1786 <SLI_requestCurrentPosition+0x22>
    177a:	60 91 06 01 	lds	r22, 0x0106
	{
		ADC_request(R_channel, adc_ext_ram);
    177e:	70 91 07 01 	lds	r23, 0x0107
    1782:	84 e0       	ldi	r24, 0x04	; 4
    1784:	74 c0       	rjmp	.+232    	; 0x186e <ADC_request>
    1786:	08 95       	ret

00001788 <SLI_updatePosition>:
    1788:	8c 36       	cpi	r24, 0x6C	; 108
    178a:	71 f4       	brne	.+28     	; 0x17a8 <SLI_updatePosition+0x20>
// received.
void SLI_updatePosition(uint8_t side)
{
	if(side == 'l')
	{
		currentSliPosition.L_abs = ADC_read(adc_ext_ram);
    178c:	80 91 06 01 	lds	r24, 0x0106
    1790:	90 91 07 01 	lds	r25, 0x0107
    1794:	90 d0       	rcall	.+288    	; 0x18b6 <ADC_read>
    1796:	80 93 17 03 	sts	0x0317, r24
    179a:	24 e6       	ldi	r18, 0x64	; 100
		currentSliPosition.L_per = currentSliPosition.L_abs * 100 / 256;
    179c:	82 9f       	mul	r24, r18
    179e:	c0 01       	movw	r24, r0
    17a0:	11 24       	eor	r1, r1
    17a2:	90 93 19 03 	sts	0x0319, r25
    17a6:	08 95       	ret
    17a8:	82 37       	cpi	r24, 0x72	; 114
		//printf("CurrSliPos_L: %d, CurrSliPos_R: %d\n", currentSliPosition.L_per, currentSliPosition.R_per);
	}

	else if(side == 'r')
    17aa:	69 f4       	brne	.+26     	; 0x17c6 <SLI_updatePosition+0x3e>
    17ac:	80 91 06 01 	lds	r24, 0x0106
	{
		currentSliPosition.R_abs = ADC_read(adc_ext_ram);
    17b0:	90 91 07 01 	lds	r25, 0x0107
    17b4:	80 d0       	rcall	.+256    	; 0x18b6 <ADC_read>
    17b6:	80 93 16 03 	sts	0x0316, r24
    17ba:	24 e6       	ldi	r18, 0x64	; 100
    17bc:	82 9f       	mul	r24, r18
		currentSliPosition.R_per = currentSliPosition.R_abs * 100 / 256;
    17be:	c0 01       	movw	r24, r0
    17c0:	11 24       	eor	r1, r1
    17c2:	90 93 18 03 	sts	0x0318, r25
    17c6:	08 95       	ret

000017c8 <SLI_getPosition>:
    17c8:	82 e7       	ldi	r24, 0x72	; 114
    17ca:	cc df       	rcall	.-104    	; 0x1764 <SLI_requestCurrentPosition>
}

//
SLI_position_t SLI_getPosition()
{
	SLI_requestCurrentPosition('r');
    17cc:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17ce:	8a 95       	dec	r24
    17d0:	f1 f7       	brne	.-4      	; 0x17ce <SLI_getPosition+0x6>
    17d2:	00 00       	nop
    17d4:	82 e7       	ldi	r24, 0x72	; 114
	_delay_us(60);
	SLI_updatePosition('r');
    17d6:	d8 df       	rcall	.-80     	; 0x1788 <SLI_updatePosition>
    17d8:	60 91 16 03 	lds	r22, 0x0316
	
	return currentSliPosition;
    17dc:	70 91 17 03 	lds	r23, 0x0317
    17e0:	80 91 18 03 	lds	r24, 0x0318
    17e4:	90 91 19 03 	lds	r25, 0x0319
    17e8:	08 95       	ret

000017ea <SPI_init>:

void SPI_init()
{
	//init external interrupt INT2 on falling edge
	#if defined(__AVR_ATmega162__)
		set_bit(GICR, INT2);
    17ea:	8b b7       	in	r24, 0x3b	; 59
    17ec:	80 62       	ori	r24, 0x20	; 32
    17ee:	8b bf       	out	0x3b, r24	; 59
		clear_bit(EMCUCR, ISC2);
    17f0:	86 b7       	in	r24, 0x36	; 54
    17f2:	8e 7f       	andi	r24, 0xFE	; 254
    17f4:	86 bf       	out	0x36, r24	; 54
		
		// Set _SS, MOSI and SCK output, all others input
		DDR_SPI |= (1<<SS_CAN_CONTROLLER_PIN_MODE) | (1<<MOSI_PIN) | (1<<SCK_PIN);
    17f6:	87 b3       	in	r24, 0x17	; 23
    17f8:	80 6b       	ori	r24, 0xB0	; 176
    17fa:	87 bb       	out	0x17, r24	; 23
	#endif
	
	

	// Enable SPI, Master, set clock rate fck/4
	SPCR = (1<<SPE) | (1<<MSTR);
    17fc:	80 e5       	ldi	r24, 0x50	; 80
    17fe:	8d b9       	out	0x0d, r24	; 13
	
	// clock rate fck/2
	SPSR = (1<<SPI2X);
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	8e b9       	out	0x0e, r24	; 14

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORT_SPI, SS_CAN_CONTROLLER_PIN);
    1804:	c4 9a       	sbi	0x18, 4	; 24
    1806:	08 95       	ret

00001808 <SPI_send>:
}

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    1808:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    180a:	77 9b       	sbis	0x0e, 7	; 14
    180c:	fe cf       	rjmp	.-4      	; 0x180a <SPI_send+0x2>
}
    180e:	08 95       	ret

00001810 <SPI_receive>:

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    1810:	8f ef       	ldi	r24, 0xFF	; 255
    1812:	fa df       	rcall	.-12     	; 0x1808 <SPI_send>
    1814:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    1816:	fe cf       	rjmp	.-4      	; 0x1814 <SPI_receive+0x4>
    1818:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    181a:	08 95       	ret

0000181c <SPI_activateSlave>:

	return data;
}
    181c:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    181e:	01 c0       	rjmp	.+2      	; 0x1822 <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    1820:	c4 98       	cbi	0x18, 4	; 24
    1822:	08 95       	ret

00001824 <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    1824:	81 11       	cpse	r24, r1
    1826:	01 c0       	rjmp	.+2      	; 0x182a <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    1828:	c4 9a       	sbi	0x18, 4	; 24
    182a:	08 95       	ret

0000182c <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    182c:	5d 9b       	sbis	0x0b, 5	; 11
    182e:	fe cf       	rjmp	.-4      	; 0x182c <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    1830:	8c b9       	out	0x0c, r24	; 12
    1832:	08 95       	ret

00001834 <uartReceive>:
//UART_Message_t uartReceive()
uint8_t uartReceive()
{

	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    1834:	5f 9b       	sbis	0x0b, 7	; 11
    1836:	fe cf       	rjmp	.-4      	; 0x1834 <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    1838:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;

}
    183a:	08 95       	ret

0000183c <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    183c:	ef 92       	push	r14
    183e:	ff 92       	push	r15
    1840:	0f 93       	push	r16
    1842:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    1844:	bb 27       	eor	r27, r27
    1846:	a1 2f       	mov	r26, r17
    1848:	90 2f       	mov	r25, r16
    184a:	8f 2d       	mov	r24, r15
    184c:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    184e:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1850:	88 e1       	ldi	r24, 0x18	; 24
    1852:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    1854:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	#if defined(__AVR_ATmega162__)
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    1856:	8e e8       	ldi	r24, 0x8E	; 142
    1858:	80 bd       	out	0x20, r24	; 32
	
	#if defined(__AVR_ATmega2560__)
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	#endif
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    185a:	6a e1       	ldi	r22, 0x1A	; 26
    185c:	7c e0       	ldi	r23, 0x0C	; 12
    185e:	86 e1       	ldi	r24, 0x16	; 22
    1860:	9c e0       	ldi	r25, 0x0C	; 12
    1862:	79 d1       	rcall	.+754    	; 0x1b56 <fdevopen>
    1864:	1f 91       	pop	r17
    1866:	0f 91       	pop	r16
    1868:	ff 90       	pop	r15
    186a:	ef 90       	pop	r14
    186c:	08 95       	ret

0000186e <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    186e:	9b 01       	movw	r18, r22
	
	switch(channel){
    1870:	82 30       	cpi	r24, 0x02	; 2
    1872:	69 f0       	breq	.+26     	; 0x188e <ADC_request+0x20>
    1874:	18 f4       	brcc	.+6      	; 0x187c <ADC_request+0xe>
    1876:	81 30       	cpi	r24, 0x01	; 1
    1878:	31 f0       	breq	.+12     	; 0x1886 <ADC_request+0x18>
    187a:	15 c0       	rjmp	.+42     	; 0x18a6 <ADC_request+0x38>
    187c:	83 30       	cpi	r24, 0x03	; 3
    187e:	59 f0       	breq	.+22     	; 0x1896 <ADC_request+0x28>
    1880:	84 30       	cpi	r24, 0x04	; 4
    1882:	69 f0       	breq	.+26     	; 0x189e <ADC_request+0x30>
    1884:	10 c0       	rjmp	.+32     	; 0x18a6 <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    1886:	64 e0       	ldi	r22, 0x04	; 4
    1888:	c9 01       	movw	r24, r18
    188a:	d0 c8       	rjmp	.-3680   	; 0xa2c <saveToAddress>
    188c:	08 95       	ret
			break;
    188e:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    1890:	c9 01       	movw	r24, r18
    1892:	cc c8       	rjmp	.-3688   	; 0xa2c <saveToAddress>
    1894:	08 95       	ret
    1896:	66 e0       	ldi	r22, 0x06	; 6
			break;
    1898:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    189a:	c8 c8       	rjmp	.-3696   	; 0xa2c <saveToAddress>
    189c:	08 95       	ret
    189e:	67 e0       	ldi	r22, 0x07	; 7
    18a0:	c9 01       	movw	r24, r18
			break;
    18a2:	c4 c8       	rjmp	.-3704   	; 0xa2c <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    18a4:	08 95       	ret
    18a6:	84 ed       	ldi	r24, 0xD4	; 212
    18a8:	92 e0       	ldi	r25, 0x02	; 2
    18aa:	9f 93       	push	r25
			break;
    18ac:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    18ae:	9d d1       	rcall	.+826    	; 0x1bea <printf>
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	08 95       	ret

000018b6 <ADC_read>:
    18b6:	b7 c8       	rjmp	.-3730   	; 0xa26 <readFromAddress>
    18b8:	08 95       	ret

000018ba <__divmodhi4>:
			break;
    18ba:	97 fb       	bst	r25, 7
    18bc:	07 2e       	mov	r0, r23
    18be:	16 f4       	brtc	.+4      	; 0x18c4 <__divmodhi4+0xa>
    18c0:	00 94       	com	r0
    18c2:	06 d0       	rcall	.+12     	; 0x18d0 <__divmodhi4_neg1>
    18c4:	77 fd       	sbrc	r23, 7
    18c6:	08 d0       	rcall	.+16     	; 0x18d8 <__divmodhi4_neg2>
    18c8:	0b d0       	rcall	.+22     	; 0x18e0 <__udivmodhi4>
    18ca:	07 fc       	sbrc	r0, 7
    18cc:	05 d0       	rcall	.+10     	; 0x18d8 <__divmodhi4_neg2>
    18ce:	3e f4       	brtc	.+14     	; 0x18de <__divmodhi4_exit>

000018d0 <__divmodhi4_neg1>:
    18d0:	90 95       	com	r25
    18d2:	81 95       	neg	r24
    18d4:	9f 4f       	sbci	r25, 0xFF	; 255
    18d6:	08 95       	ret

000018d8 <__divmodhi4_neg2>:
    18d8:	70 95       	com	r23
    18da:	61 95       	neg	r22
    18dc:	7f 4f       	sbci	r23, 0xFF	; 255

000018de <__divmodhi4_exit>:
    18de:	08 95       	ret

000018e0 <__udivmodhi4>:
    18e0:	aa 1b       	sub	r26, r26
    18e2:	bb 1b       	sub	r27, r27
    18e4:	51 e1       	ldi	r21, 0x11	; 17
    18e6:	07 c0       	rjmp	.+14     	; 0x18f6 <__udivmodhi4_ep>

000018e8 <__udivmodhi4_loop>:
    18e8:	aa 1f       	adc	r26, r26
    18ea:	bb 1f       	adc	r27, r27
    18ec:	a6 17       	cp	r26, r22
    18ee:	b7 07       	cpc	r27, r23
    18f0:	10 f0       	brcs	.+4      	; 0x18f6 <__udivmodhi4_ep>
    18f2:	a6 1b       	sub	r26, r22
    18f4:	b7 0b       	sbc	r27, r23

000018f6 <__udivmodhi4_ep>:
    18f6:	88 1f       	adc	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	5a 95       	dec	r21
    18fc:	a9 f7       	brne	.-22     	; 0x18e8 <__udivmodhi4_loop>
    18fe:	80 95       	com	r24
    1900:	90 95       	com	r25
    1902:	bc 01       	movw	r22, r24
    1904:	cd 01       	movw	r24, r26
    1906:	08 95       	ret

00001908 <malloc>:
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
    190c:	82 30       	cpi	r24, 0x02	; 2
    190e:	91 05       	cpc	r25, r1
    1910:	10 f4       	brcc	.+4      	; 0x1916 <malloc+0xe>
    1912:	82 e0       	ldi	r24, 0x02	; 2
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	e0 91 1c 03 	lds	r30, 0x031C
    191a:	f0 91 1d 03 	lds	r31, 0x031D
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	a0 e0       	ldi	r26, 0x00	; 0
    1924:	b0 e0       	ldi	r27, 0x00	; 0
    1926:	30 97       	sbiw	r30, 0x00	; 0
    1928:	39 f1       	breq	.+78     	; 0x1978 <malloc+0x70>
    192a:	40 81       	ld	r20, Z
    192c:	51 81       	ldd	r21, Z+1	; 0x01
    192e:	48 17       	cp	r20, r24
    1930:	59 07       	cpc	r21, r25
    1932:	b8 f0       	brcs	.+46     	; 0x1962 <malloc+0x5a>
    1934:	48 17       	cp	r20, r24
    1936:	59 07       	cpc	r21, r25
    1938:	71 f4       	brne	.+28     	; 0x1956 <malloc+0x4e>
    193a:	82 81       	ldd	r24, Z+2	; 0x02
    193c:	93 81       	ldd	r25, Z+3	; 0x03
    193e:	10 97       	sbiw	r26, 0x00	; 0
    1940:	29 f0       	breq	.+10     	; 0x194c <malloc+0x44>
    1942:	13 96       	adiw	r26, 0x03	; 3
    1944:	9c 93       	st	X, r25
    1946:	8e 93       	st	-X, r24
    1948:	12 97       	sbiw	r26, 0x02	; 2
    194a:	2c c0       	rjmp	.+88     	; 0x19a4 <malloc+0x9c>
    194c:	90 93 1d 03 	sts	0x031D, r25
    1950:	80 93 1c 03 	sts	0x031C, r24
    1954:	27 c0       	rjmp	.+78     	; 0x19a4 <malloc+0x9c>
    1956:	21 15       	cp	r18, r1
    1958:	31 05       	cpc	r19, r1
    195a:	31 f0       	breq	.+12     	; 0x1968 <malloc+0x60>
    195c:	42 17       	cp	r20, r18
    195e:	53 07       	cpc	r21, r19
    1960:	18 f0       	brcs	.+6      	; 0x1968 <malloc+0x60>
    1962:	a9 01       	movw	r20, r18
    1964:	db 01       	movw	r26, r22
    1966:	01 c0       	rjmp	.+2      	; 0x196a <malloc+0x62>
    1968:	ef 01       	movw	r28, r30
    196a:	9a 01       	movw	r18, r20
    196c:	bd 01       	movw	r22, r26
    196e:	df 01       	movw	r26, r30
    1970:	02 80       	ldd	r0, Z+2	; 0x02
    1972:	f3 81       	ldd	r31, Z+3	; 0x03
    1974:	e0 2d       	mov	r30, r0
    1976:	d7 cf       	rjmp	.-82     	; 0x1926 <malloc+0x1e>
    1978:	21 15       	cp	r18, r1
    197a:	31 05       	cpc	r19, r1
    197c:	f9 f0       	breq	.+62     	; 0x19bc <malloc+0xb4>
    197e:	28 1b       	sub	r18, r24
    1980:	39 0b       	sbc	r19, r25
    1982:	24 30       	cpi	r18, 0x04	; 4
    1984:	31 05       	cpc	r19, r1
    1986:	80 f4       	brcc	.+32     	; 0x19a8 <malloc+0xa0>
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	9b 81       	ldd	r25, Y+3	; 0x03
    198c:	61 15       	cp	r22, r1
    198e:	71 05       	cpc	r23, r1
    1990:	21 f0       	breq	.+8      	; 0x199a <malloc+0x92>
    1992:	fb 01       	movw	r30, r22
    1994:	93 83       	std	Z+3, r25	; 0x03
    1996:	82 83       	std	Z+2, r24	; 0x02
    1998:	04 c0       	rjmp	.+8      	; 0x19a2 <malloc+0x9a>
    199a:	90 93 1d 03 	sts	0x031D, r25
    199e:	80 93 1c 03 	sts	0x031C, r24
    19a2:	fe 01       	movw	r30, r28
    19a4:	32 96       	adiw	r30, 0x02	; 2
    19a6:	44 c0       	rjmp	.+136    	; 0x1a30 <malloc+0x128>
    19a8:	fe 01       	movw	r30, r28
    19aa:	e2 0f       	add	r30, r18
    19ac:	f3 1f       	adc	r31, r19
    19ae:	81 93       	st	Z+, r24
    19b0:	91 93       	st	Z+, r25
    19b2:	22 50       	subi	r18, 0x02	; 2
    19b4:	31 09       	sbc	r19, r1
    19b6:	39 83       	std	Y+1, r19	; 0x01
    19b8:	28 83       	st	Y, r18
    19ba:	3a c0       	rjmp	.+116    	; 0x1a30 <malloc+0x128>
    19bc:	20 91 1a 03 	lds	r18, 0x031A
    19c0:	30 91 1b 03 	lds	r19, 0x031B
    19c4:	23 2b       	or	r18, r19
    19c6:	41 f4       	brne	.+16     	; 0x19d8 <malloc+0xd0>
    19c8:	20 91 02 01 	lds	r18, 0x0102
    19cc:	30 91 03 01 	lds	r19, 0x0103
    19d0:	30 93 1b 03 	sts	0x031B, r19
    19d4:	20 93 1a 03 	sts	0x031A, r18
    19d8:	20 91 00 01 	lds	r18, 0x0100
    19dc:	30 91 01 01 	lds	r19, 0x0101
    19e0:	21 15       	cp	r18, r1
    19e2:	31 05       	cpc	r19, r1
    19e4:	41 f4       	brne	.+16     	; 0x19f6 <malloc+0xee>
    19e6:	2d b7       	in	r18, 0x3d	; 61
    19e8:	3e b7       	in	r19, 0x3e	; 62
    19ea:	40 91 04 01 	lds	r20, 0x0104
    19ee:	50 91 05 01 	lds	r21, 0x0105
    19f2:	24 1b       	sub	r18, r20
    19f4:	35 0b       	sbc	r19, r21
    19f6:	e0 91 1a 03 	lds	r30, 0x031A
    19fa:	f0 91 1b 03 	lds	r31, 0x031B
    19fe:	e2 17       	cp	r30, r18
    1a00:	f3 07       	cpc	r31, r19
    1a02:	a0 f4       	brcc	.+40     	; 0x1a2c <malloc+0x124>
    1a04:	2e 1b       	sub	r18, r30
    1a06:	3f 0b       	sbc	r19, r31
    1a08:	28 17       	cp	r18, r24
    1a0a:	39 07       	cpc	r19, r25
    1a0c:	78 f0       	brcs	.+30     	; 0x1a2c <malloc+0x124>
    1a0e:	ac 01       	movw	r20, r24
    1a10:	4e 5f       	subi	r20, 0xFE	; 254
    1a12:	5f 4f       	sbci	r21, 0xFF	; 255
    1a14:	24 17       	cp	r18, r20
    1a16:	35 07       	cpc	r19, r21
    1a18:	48 f0       	brcs	.+18     	; 0x1a2c <malloc+0x124>
    1a1a:	4e 0f       	add	r20, r30
    1a1c:	5f 1f       	adc	r21, r31
    1a1e:	50 93 1b 03 	sts	0x031B, r21
    1a22:	40 93 1a 03 	sts	0x031A, r20
    1a26:	81 93       	st	Z+, r24
    1a28:	91 93       	st	Z+, r25
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <malloc+0x128>
    1a2c:	e0 e0       	ldi	r30, 0x00	; 0
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	cf 01       	movw	r24, r30
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	08 95       	ret

00001a38 <free>:
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	09 f4       	brne	.+2      	; 0x1a42 <free+0xa>
    1a40:	87 c0       	rjmp	.+270    	; 0x1b50 <free+0x118>
    1a42:	fc 01       	movw	r30, r24
    1a44:	32 97       	sbiw	r30, 0x02	; 2
    1a46:	13 82       	std	Z+3, r1	; 0x03
    1a48:	12 82       	std	Z+2, r1	; 0x02
    1a4a:	c0 91 1c 03 	lds	r28, 0x031C
    1a4e:	d0 91 1d 03 	lds	r29, 0x031D
    1a52:	20 97       	sbiw	r28, 0x00	; 0
    1a54:	81 f4       	brne	.+32     	; 0x1a76 <free+0x3e>
    1a56:	20 81       	ld	r18, Z
    1a58:	31 81       	ldd	r19, Z+1	; 0x01
    1a5a:	28 0f       	add	r18, r24
    1a5c:	39 1f       	adc	r19, r25
    1a5e:	80 91 1a 03 	lds	r24, 0x031A
    1a62:	90 91 1b 03 	lds	r25, 0x031B
    1a66:	82 17       	cp	r24, r18
    1a68:	93 07       	cpc	r25, r19
    1a6a:	79 f5       	brne	.+94     	; 0x1aca <free+0x92>
    1a6c:	f0 93 1b 03 	sts	0x031B, r31
    1a70:	e0 93 1a 03 	sts	0x031A, r30
    1a74:	6d c0       	rjmp	.+218    	; 0x1b50 <free+0x118>
    1a76:	de 01       	movw	r26, r28
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	ae 17       	cp	r26, r30
    1a7e:	bf 07       	cpc	r27, r31
    1a80:	50 f4       	brcc	.+20     	; 0x1a96 <free+0x5e>
    1a82:	12 96       	adiw	r26, 0x02	; 2
    1a84:	4d 91       	ld	r20, X+
    1a86:	5c 91       	ld	r21, X
    1a88:	13 97       	sbiw	r26, 0x03	; 3
    1a8a:	9d 01       	movw	r18, r26
    1a8c:	41 15       	cp	r20, r1
    1a8e:	51 05       	cpc	r21, r1
    1a90:	09 f1       	breq	.+66     	; 0x1ad4 <free+0x9c>
    1a92:	da 01       	movw	r26, r20
    1a94:	f3 cf       	rjmp	.-26     	; 0x1a7c <free+0x44>
    1a96:	b3 83       	std	Z+3, r27	; 0x03
    1a98:	a2 83       	std	Z+2, r26	; 0x02
    1a9a:	40 81       	ld	r20, Z
    1a9c:	51 81       	ldd	r21, Z+1	; 0x01
    1a9e:	84 0f       	add	r24, r20
    1aa0:	95 1f       	adc	r25, r21
    1aa2:	8a 17       	cp	r24, r26
    1aa4:	9b 07       	cpc	r25, r27
    1aa6:	71 f4       	brne	.+28     	; 0x1ac4 <free+0x8c>
    1aa8:	8d 91       	ld	r24, X+
    1aaa:	9c 91       	ld	r25, X
    1aac:	11 97       	sbiw	r26, 0x01	; 1
    1aae:	84 0f       	add	r24, r20
    1ab0:	95 1f       	adc	r25, r21
    1ab2:	02 96       	adiw	r24, 0x02	; 2
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	80 83       	st	Z, r24
    1ab8:	12 96       	adiw	r26, 0x02	; 2
    1aba:	8d 91       	ld	r24, X+
    1abc:	9c 91       	ld	r25, X
    1abe:	13 97       	sbiw	r26, 0x03	; 3
    1ac0:	93 83       	std	Z+3, r25	; 0x03
    1ac2:	82 83       	std	Z+2, r24	; 0x02
    1ac4:	21 15       	cp	r18, r1
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	29 f4       	brne	.+10     	; 0x1ad4 <free+0x9c>
    1aca:	f0 93 1d 03 	sts	0x031D, r31
    1ace:	e0 93 1c 03 	sts	0x031C, r30
    1ad2:	3e c0       	rjmp	.+124    	; 0x1b50 <free+0x118>
    1ad4:	d9 01       	movw	r26, r18
    1ad6:	13 96       	adiw	r26, 0x03	; 3
    1ad8:	fc 93       	st	X, r31
    1ada:	ee 93       	st	-X, r30
    1adc:	12 97       	sbiw	r26, 0x02	; 2
    1ade:	4d 91       	ld	r20, X+
    1ae0:	5d 91       	ld	r21, X+
    1ae2:	a4 0f       	add	r26, r20
    1ae4:	b5 1f       	adc	r27, r21
    1ae6:	ea 17       	cp	r30, r26
    1ae8:	fb 07       	cpc	r31, r27
    1aea:	79 f4       	brne	.+30     	; 0x1b0a <free+0xd2>
    1aec:	80 81       	ld	r24, Z
    1aee:	91 81       	ldd	r25, Z+1	; 0x01
    1af0:	84 0f       	add	r24, r20
    1af2:	95 1f       	adc	r25, r21
    1af4:	02 96       	adiw	r24, 0x02	; 2
    1af6:	d9 01       	movw	r26, r18
    1af8:	11 96       	adiw	r26, 0x01	; 1
    1afa:	9c 93       	st	X, r25
    1afc:	8e 93       	st	-X, r24
    1afe:	82 81       	ldd	r24, Z+2	; 0x02
    1b00:	93 81       	ldd	r25, Z+3	; 0x03
    1b02:	13 96       	adiw	r26, 0x03	; 3
    1b04:	9c 93       	st	X, r25
    1b06:	8e 93       	st	-X, r24
    1b08:	12 97       	sbiw	r26, 0x02	; 2
    1b0a:	e0 e0       	ldi	r30, 0x00	; 0
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b10:	9b 81       	ldd	r25, Y+3	; 0x03
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	19 f0       	breq	.+6      	; 0x1b1c <free+0xe4>
    1b16:	fe 01       	movw	r30, r28
    1b18:	ec 01       	movw	r28, r24
    1b1a:	f9 cf       	rjmp	.-14     	; 0x1b0e <free+0xd6>
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	02 96       	adiw	r24, 0x02	; 2
    1b20:	28 81       	ld	r18, Y
    1b22:	39 81       	ldd	r19, Y+1	; 0x01
    1b24:	82 0f       	add	r24, r18
    1b26:	93 1f       	adc	r25, r19
    1b28:	20 91 1a 03 	lds	r18, 0x031A
    1b2c:	30 91 1b 03 	lds	r19, 0x031B
    1b30:	28 17       	cp	r18, r24
    1b32:	39 07       	cpc	r19, r25
    1b34:	69 f4       	brne	.+26     	; 0x1b50 <free+0x118>
    1b36:	30 97       	sbiw	r30, 0x00	; 0
    1b38:	29 f4       	brne	.+10     	; 0x1b44 <free+0x10c>
    1b3a:	10 92 1d 03 	sts	0x031D, r1
    1b3e:	10 92 1c 03 	sts	0x031C, r1
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <free+0x110>
    1b44:	13 82       	std	Z+3, r1	; 0x03
    1b46:	12 82       	std	Z+2, r1	; 0x02
    1b48:	d0 93 1b 03 	sts	0x031B, r29
    1b4c:	c0 93 1a 03 	sts	0x031A, r28
    1b50:	df 91       	pop	r29
    1b52:	cf 91       	pop	r28
    1b54:	08 95       	ret

00001b56 <fdevopen>:
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	ec 01       	movw	r28, r24
    1b60:	8b 01       	movw	r16, r22
    1b62:	00 97       	sbiw	r24, 0x00	; 0
    1b64:	31 f4       	brne	.+12     	; 0x1b72 <fdevopen+0x1c>
    1b66:	61 15       	cp	r22, r1
    1b68:	71 05       	cpc	r23, r1
    1b6a:	19 f4       	brne	.+6      	; 0x1b72 <fdevopen+0x1c>
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	37 c0       	rjmp	.+110    	; 0x1be0 <fdevopen+0x8a>
    1b72:	6e e0       	ldi	r22, 0x0E	; 14
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	5c d2       	rcall	.+1208   	; 0x2034 <calloc>
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	00 97       	sbiw	r24, 0x00	; 0
    1b80:	a9 f3       	breq	.-22     	; 0x1b6c <fdevopen+0x16>
    1b82:	80 e8       	ldi	r24, 0x80	; 128
    1b84:	83 83       	std	Z+3, r24	; 0x03
    1b86:	01 15       	cp	r16, r1
    1b88:	11 05       	cpc	r17, r1
    1b8a:	71 f0       	breq	.+28     	; 0x1ba8 <fdevopen+0x52>
    1b8c:	13 87       	std	Z+11, r17	; 0x0b
    1b8e:	02 87       	std	Z+10, r16	; 0x0a
    1b90:	81 e8       	ldi	r24, 0x81	; 129
    1b92:	83 83       	std	Z+3, r24	; 0x03
    1b94:	80 91 1e 03 	lds	r24, 0x031E
    1b98:	90 91 1f 03 	lds	r25, 0x031F
    1b9c:	89 2b       	or	r24, r25
    1b9e:	21 f4       	brne	.+8      	; 0x1ba8 <fdevopen+0x52>
    1ba0:	f0 93 1f 03 	sts	0x031F, r31
    1ba4:	e0 93 1e 03 	sts	0x031E, r30
    1ba8:	20 97       	sbiw	r28, 0x00	; 0
    1baa:	c9 f0       	breq	.+50     	; 0x1bde <fdevopen+0x88>
    1bac:	d1 87       	std	Z+9, r29	; 0x09
    1bae:	c0 87       	std	Z+8, r28	; 0x08
    1bb0:	83 81       	ldd	r24, Z+3	; 0x03
    1bb2:	82 60       	ori	r24, 0x02	; 2
    1bb4:	83 83       	std	Z+3, r24	; 0x03
    1bb6:	80 91 20 03 	lds	r24, 0x0320
    1bba:	90 91 21 03 	lds	r25, 0x0321
    1bbe:	89 2b       	or	r24, r25
    1bc0:	71 f4       	brne	.+28     	; 0x1bde <fdevopen+0x88>
    1bc2:	f0 93 21 03 	sts	0x0321, r31
    1bc6:	e0 93 20 03 	sts	0x0320, r30
    1bca:	80 91 22 03 	lds	r24, 0x0322
    1bce:	90 91 23 03 	lds	r25, 0x0323
    1bd2:	89 2b       	or	r24, r25
    1bd4:	21 f4       	brne	.+8      	; 0x1bde <fdevopen+0x88>
    1bd6:	f0 93 23 03 	sts	0x0323, r31
    1bda:	e0 93 22 03 	sts	0x0322, r30
    1bde:	cf 01       	movw	r24, r30
    1be0:	df 91       	pop	r29
    1be2:	cf 91       	pop	r28
    1be4:	1f 91       	pop	r17
    1be6:	0f 91       	pop	r16
    1be8:	08 95       	ret

00001bea <printf>:
    1bea:	a0 e0       	ldi	r26, 0x00	; 0
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	ea ef       	ldi	r30, 0xFA	; 250
    1bf0:	fd e0       	ldi	r31, 0x0D	; 13
    1bf2:	f7 c2       	rjmp	.+1518   	; 0x21e2 <__prologue_saves__+0x20>
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	35 96       	adiw	r30, 0x05	; 5
    1bf8:	61 91       	ld	r22, Z+
    1bfa:	71 91       	ld	r23, Z+
    1bfc:	af 01       	movw	r20, r30
    1bfe:	80 91 20 03 	lds	r24, 0x0320
    1c02:	90 91 21 03 	lds	r25, 0x0321
    1c06:	53 d0       	rcall	.+166    	; 0x1cae <vfprintf>
    1c08:	e2 e0       	ldi	r30, 0x02	; 2
    1c0a:	07 c3       	rjmp	.+1550   	; 0x221a <__epilogue_restores__+0x20>

00001c0c <putchar>:
    1c0c:	60 91 20 03 	lds	r22, 0x0320
    1c10:	70 91 21 03 	lds	r23, 0x0321
    1c14:	46 c2       	rjmp	.+1164   	; 0x20a2 <fputc>

00001c16 <puts>:
    1c16:	0f 93       	push	r16
    1c18:	1f 93       	push	r17
    1c1a:	cf 93       	push	r28
    1c1c:	df 93       	push	r29
    1c1e:	e0 91 20 03 	lds	r30, 0x0320
    1c22:	f0 91 21 03 	lds	r31, 0x0321
    1c26:	23 81       	ldd	r18, Z+3	; 0x03
    1c28:	21 ff       	sbrs	r18, 1
    1c2a:	1b c0       	rjmp	.+54     	; 0x1c62 <puts+0x4c>
    1c2c:	ec 01       	movw	r28, r24
    1c2e:	00 e0       	ldi	r16, 0x00	; 0
    1c30:	10 e0       	ldi	r17, 0x00	; 0
    1c32:	89 91       	ld	r24, Y+
    1c34:	60 91 20 03 	lds	r22, 0x0320
    1c38:	70 91 21 03 	lds	r23, 0x0321
    1c3c:	db 01       	movw	r26, r22
    1c3e:	18 96       	adiw	r26, 0x08	; 8
    1c40:	ed 91       	ld	r30, X+
    1c42:	fc 91       	ld	r31, X
    1c44:	19 97       	sbiw	r26, 0x09	; 9
    1c46:	88 23       	and	r24, r24
    1c48:	31 f0       	breq	.+12     	; 0x1c56 <puts+0x40>
    1c4a:	09 95       	icall
    1c4c:	89 2b       	or	r24, r25
    1c4e:	89 f3       	breq	.-30     	; 0x1c32 <puts+0x1c>
    1c50:	0f ef       	ldi	r16, 0xFF	; 255
    1c52:	1f ef       	ldi	r17, 0xFF	; 255
    1c54:	ee cf       	rjmp	.-36     	; 0x1c32 <puts+0x1c>
    1c56:	8a e0       	ldi	r24, 0x0A	; 10
    1c58:	09 95       	icall
    1c5a:	89 2b       	or	r24, r25
    1c5c:	11 f4       	brne	.+4      	; 0x1c62 <puts+0x4c>
    1c5e:	c8 01       	movw	r24, r16
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <puts+0x50>
    1c62:	8f ef       	ldi	r24, 0xFF	; 255
    1c64:	9f ef       	ldi	r25, 0xFF	; 255
    1c66:	df 91       	pop	r29
    1c68:	cf 91       	pop	r28
    1c6a:	1f 91       	pop	r17
    1c6c:	0f 91       	pop	r16
    1c6e:	08 95       	ret

00001c70 <sprintf>:
    1c70:	ae e0       	ldi	r26, 0x0E	; 14
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	ed e3       	ldi	r30, 0x3D	; 61
    1c76:	fe e0       	ldi	r31, 0x0E	; 14
    1c78:	b2 c2       	rjmp	.+1380   	; 0x21de <__prologue_saves__+0x1c>
    1c7a:	0d 89       	ldd	r16, Y+21	; 0x15
    1c7c:	1e 89       	ldd	r17, Y+22	; 0x16
    1c7e:	86 e0       	ldi	r24, 0x06	; 6
    1c80:	8c 83       	std	Y+4, r24	; 0x04
    1c82:	1a 83       	std	Y+2, r17	; 0x02
    1c84:	09 83       	std	Y+1, r16	; 0x01
    1c86:	8f ef       	ldi	r24, 0xFF	; 255
    1c88:	9f e7       	ldi	r25, 0x7F	; 127
    1c8a:	9e 83       	std	Y+6, r25	; 0x06
    1c8c:	8d 83       	std	Y+5, r24	; 0x05
    1c8e:	ae 01       	movw	r20, r28
    1c90:	47 5e       	subi	r20, 0xE7	; 231
    1c92:	5f 4f       	sbci	r21, 0xFF	; 255
    1c94:	6f 89       	ldd	r22, Y+23	; 0x17
    1c96:	78 8d       	ldd	r23, Y+24	; 0x18
    1c98:	ce 01       	movw	r24, r28
    1c9a:	01 96       	adiw	r24, 0x01	; 1
    1c9c:	08 d0       	rcall	.+16     	; 0x1cae <vfprintf>
    1c9e:	ef 81       	ldd	r30, Y+7	; 0x07
    1ca0:	f8 85       	ldd	r31, Y+8	; 0x08
    1ca2:	e0 0f       	add	r30, r16
    1ca4:	f1 1f       	adc	r31, r17
    1ca6:	10 82       	st	Z, r1
    1ca8:	2e 96       	adiw	r28, 0x0e	; 14
    1caa:	e4 e0       	ldi	r30, 0x04	; 4
    1cac:	b4 c2       	rjmp	.+1384   	; 0x2216 <__epilogue_restores__+0x1c>

00001cae <vfprintf>:
    1cae:	ac e0       	ldi	r26, 0x0C	; 12
    1cb0:	b0 e0       	ldi	r27, 0x00	; 0
    1cb2:	ec e5       	ldi	r30, 0x5C	; 92
    1cb4:	fe e0       	ldi	r31, 0x0E	; 14
    1cb6:	85 c2       	rjmp	.+1290   	; 0x21c2 <__prologue_saves__>
    1cb8:	7c 01       	movw	r14, r24
    1cba:	6b 01       	movw	r12, r22
    1cbc:	8a 01       	movw	r16, r20
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	17 82       	std	Z+7, r1	; 0x07
    1cc2:	16 82       	std	Z+6, r1	; 0x06
    1cc4:	83 81       	ldd	r24, Z+3	; 0x03
    1cc6:	81 ff       	sbrs	r24, 1
    1cc8:	b0 c1       	rjmp	.+864    	; 0x202a <vfprintf+0x37c>
    1cca:	ce 01       	movw	r24, r28
    1ccc:	01 96       	adiw	r24, 0x01	; 1
    1cce:	4c 01       	movw	r8, r24
    1cd0:	f7 01       	movw	r30, r14
    1cd2:	93 81       	ldd	r25, Z+3	; 0x03
    1cd4:	f6 01       	movw	r30, r12
    1cd6:	93 fd       	sbrc	r25, 3
    1cd8:	85 91       	lpm	r24, Z+
    1cda:	93 ff       	sbrs	r25, 3
    1cdc:	81 91       	ld	r24, Z+
    1cde:	6f 01       	movw	r12, r30
    1ce0:	88 23       	and	r24, r24
    1ce2:	09 f4       	brne	.+2      	; 0x1ce6 <vfprintf+0x38>
    1ce4:	9e c1       	rjmp	.+828    	; 0x2022 <vfprintf+0x374>
    1ce6:	85 32       	cpi	r24, 0x25	; 37
    1ce8:	39 f4       	brne	.+14     	; 0x1cf8 <vfprintf+0x4a>
    1cea:	93 fd       	sbrc	r25, 3
    1cec:	85 91       	lpm	r24, Z+
    1cee:	93 ff       	sbrs	r25, 3
    1cf0:	81 91       	ld	r24, Z+
    1cf2:	6f 01       	movw	r12, r30
    1cf4:	85 32       	cpi	r24, 0x25	; 37
    1cf6:	21 f4       	brne	.+8      	; 0x1d00 <vfprintf+0x52>
    1cf8:	b7 01       	movw	r22, r14
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	d2 d1       	rcall	.+932    	; 0x20a2 <fputc>
    1cfe:	e8 cf       	rjmp	.-48     	; 0x1cd0 <vfprintf+0x22>
    1d00:	51 2c       	mov	r5, r1
    1d02:	31 2c       	mov	r3, r1
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	20 32       	cpi	r18, 0x20	; 32
    1d08:	a0 f4       	brcc	.+40     	; 0x1d32 <vfprintf+0x84>
    1d0a:	8b 32       	cpi	r24, 0x2B	; 43
    1d0c:	69 f0       	breq	.+26     	; 0x1d28 <vfprintf+0x7a>
    1d0e:	30 f4       	brcc	.+12     	; 0x1d1c <vfprintf+0x6e>
    1d10:	80 32       	cpi	r24, 0x20	; 32
    1d12:	59 f0       	breq	.+22     	; 0x1d2a <vfprintf+0x7c>
    1d14:	83 32       	cpi	r24, 0x23	; 35
    1d16:	69 f4       	brne	.+26     	; 0x1d32 <vfprintf+0x84>
    1d18:	20 61       	ori	r18, 0x10	; 16
    1d1a:	2c c0       	rjmp	.+88     	; 0x1d74 <vfprintf+0xc6>
    1d1c:	8d 32       	cpi	r24, 0x2D	; 45
    1d1e:	39 f0       	breq	.+14     	; 0x1d2e <vfprintf+0x80>
    1d20:	80 33       	cpi	r24, 0x30	; 48
    1d22:	39 f4       	brne	.+14     	; 0x1d32 <vfprintf+0x84>
    1d24:	21 60       	ori	r18, 0x01	; 1
    1d26:	26 c0       	rjmp	.+76     	; 0x1d74 <vfprintf+0xc6>
    1d28:	22 60       	ori	r18, 0x02	; 2
    1d2a:	24 60       	ori	r18, 0x04	; 4
    1d2c:	23 c0       	rjmp	.+70     	; 0x1d74 <vfprintf+0xc6>
    1d2e:	28 60       	ori	r18, 0x08	; 8
    1d30:	21 c0       	rjmp	.+66     	; 0x1d74 <vfprintf+0xc6>
    1d32:	27 fd       	sbrc	r18, 7
    1d34:	27 c0       	rjmp	.+78     	; 0x1d84 <vfprintf+0xd6>
    1d36:	30 ed       	ldi	r19, 0xD0	; 208
    1d38:	38 0f       	add	r19, r24
    1d3a:	3a 30       	cpi	r19, 0x0A	; 10
    1d3c:	78 f4       	brcc	.+30     	; 0x1d5c <vfprintf+0xae>
    1d3e:	26 ff       	sbrs	r18, 6
    1d40:	06 c0       	rjmp	.+12     	; 0x1d4e <vfprintf+0xa0>
    1d42:	fa e0       	ldi	r31, 0x0A	; 10
    1d44:	5f 9e       	mul	r5, r31
    1d46:	30 0d       	add	r19, r0
    1d48:	11 24       	eor	r1, r1
    1d4a:	53 2e       	mov	r5, r19
    1d4c:	13 c0       	rjmp	.+38     	; 0x1d74 <vfprintf+0xc6>
    1d4e:	8a e0       	ldi	r24, 0x0A	; 10
    1d50:	38 9e       	mul	r3, r24
    1d52:	30 0d       	add	r19, r0
    1d54:	11 24       	eor	r1, r1
    1d56:	33 2e       	mov	r3, r19
    1d58:	20 62       	ori	r18, 0x20	; 32
    1d5a:	0c c0       	rjmp	.+24     	; 0x1d74 <vfprintf+0xc6>
    1d5c:	8e 32       	cpi	r24, 0x2E	; 46
    1d5e:	21 f4       	brne	.+8      	; 0x1d68 <vfprintf+0xba>
    1d60:	26 fd       	sbrc	r18, 6
    1d62:	5f c1       	rjmp	.+702    	; 0x2022 <vfprintf+0x374>
    1d64:	20 64       	ori	r18, 0x40	; 64
    1d66:	06 c0       	rjmp	.+12     	; 0x1d74 <vfprintf+0xc6>
    1d68:	8c 36       	cpi	r24, 0x6C	; 108
    1d6a:	11 f4       	brne	.+4      	; 0x1d70 <vfprintf+0xc2>
    1d6c:	20 68       	ori	r18, 0x80	; 128
    1d6e:	02 c0       	rjmp	.+4      	; 0x1d74 <vfprintf+0xc6>
    1d70:	88 36       	cpi	r24, 0x68	; 104
    1d72:	41 f4       	brne	.+16     	; 0x1d84 <vfprintf+0xd6>
    1d74:	f6 01       	movw	r30, r12
    1d76:	93 fd       	sbrc	r25, 3
    1d78:	85 91       	lpm	r24, Z+
    1d7a:	93 ff       	sbrs	r25, 3
    1d7c:	81 91       	ld	r24, Z+
    1d7e:	6f 01       	movw	r12, r30
    1d80:	81 11       	cpse	r24, r1
    1d82:	c1 cf       	rjmp	.-126    	; 0x1d06 <vfprintf+0x58>
    1d84:	98 2f       	mov	r25, r24
    1d86:	9f 7d       	andi	r25, 0xDF	; 223
    1d88:	95 54       	subi	r25, 0x45	; 69
    1d8a:	93 30       	cpi	r25, 0x03	; 3
    1d8c:	28 f4       	brcc	.+10     	; 0x1d98 <vfprintf+0xea>
    1d8e:	0c 5f       	subi	r16, 0xFC	; 252
    1d90:	1f 4f       	sbci	r17, 0xFF	; 255
    1d92:	ff e3       	ldi	r31, 0x3F	; 63
    1d94:	f9 83       	std	Y+1, r31	; 0x01
    1d96:	0d c0       	rjmp	.+26     	; 0x1db2 <vfprintf+0x104>
    1d98:	83 36       	cpi	r24, 0x63	; 99
    1d9a:	31 f0       	breq	.+12     	; 0x1da8 <vfprintf+0xfa>
    1d9c:	83 37       	cpi	r24, 0x73	; 115
    1d9e:	71 f0       	breq	.+28     	; 0x1dbc <vfprintf+0x10e>
    1da0:	83 35       	cpi	r24, 0x53	; 83
    1da2:	09 f0       	breq	.+2      	; 0x1da6 <vfprintf+0xf8>
    1da4:	57 c0       	rjmp	.+174    	; 0x1e54 <vfprintf+0x1a6>
    1da6:	21 c0       	rjmp	.+66     	; 0x1dea <vfprintf+0x13c>
    1da8:	f8 01       	movw	r30, r16
    1daa:	80 81       	ld	r24, Z
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	0e 5f       	subi	r16, 0xFE	; 254
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	44 24       	eor	r4, r4
    1db4:	43 94       	inc	r4
    1db6:	51 2c       	mov	r5, r1
    1db8:	54 01       	movw	r10, r8
    1dba:	14 c0       	rjmp	.+40     	; 0x1de4 <vfprintf+0x136>
    1dbc:	38 01       	movw	r6, r16
    1dbe:	f2 e0       	ldi	r31, 0x02	; 2
    1dc0:	6f 0e       	add	r6, r31
    1dc2:	71 1c       	adc	r7, r1
    1dc4:	f8 01       	movw	r30, r16
    1dc6:	a0 80       	ld	r10, Z
    1dc8:	b1 80       	ldd	r11, Z+1	; 0x01
    1dca:	26 ff       	sbrs	r18, 6
    1dcc:	03 c0       	rjmp	.+6      	; 0x1dd4 <vfprintf+0x126>
    1dce:	65 2d       	mov	r22, r5
    1dd0:	70 e0       	ldi	r23, 0x00	; 0
    1dd2:	02 c0       	rjmp	.+4      	; 0x1dd8 <vfprintf+0x12a>
    1dd4:	6f ef       	ldi	r22, 0xFF	; 255
    1dd6:	7f ef       	ldi	r23, 0xFF	; 255
    1dd8:	c5 01       	movw	r24, r10
    1dda:	2c 87       	std	Y+12, r18	; 0x0c
    1ddc:	57 d1       	rcall	.+686    	; 0x208c <strnlen>
    1dde:	2c 01       	movw	r4, r24
    1de0:	83 01       	movw	r16, r6
    1de2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1de4:	2f 77       	andi	r18, 0x7F	; 127
    1de6:	22 2e       	mov	r2, r18
    1de8:	16 c0       	rjmp	.+44     	; 0x1e16 <vfprintf+0x168>
    1dea:	38 01       	movw	r6, r16
    1dec:	f2 e0       	ldi	r31, 0x02	; 2
    1dee:	6f 0e       	add	r6, r31
    1df0:	71 1c       	adc	r7, r1
    1df2:	f8 01       	movw	r30, r16
    1df4:	a0 80       	ld	r10, Z
    1df6:	b1 80       	ldd	r11, Z+1	; 0x01
    1df8:	26 ff       	sbrs	r18, 6
    1dfa:	03 c0       	rjmp	.+6      	; 0x1e02 <vfprintf+0x154>
    1dfc:	65 2d       	mov	r22, r5
    1dfe:	70 e0       	ldi	r23, 0x00	; 0
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <vfprintf+0x158>
    1e02:	6f ef       	ldi	r22, 0xFF	; 255
    1e04:	7f ef       	ldi	r23, 0xFF	; 255
    1e06:	c5 01       	movw	r24, r10
    1e08:	2c 87       	std	Y+12, r18	; 0x0c
    1e0a:	2e d1       	rcall	.+604    	; 0x2068 <strnlen_P>
    1e0c:	2c 01       	movw	r4, r24
    1e0e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e10:	20 68       	ori	r18, 0x80	; 128
    1e12:	22 2e       	mov	r2, r18
    1e14:	83 01       	movw	r16, r6
    1e16:	23 fc       	sbrc	r2, 3
    1e18:	19 c0       	rjmp	.+50     	; 0x1e4c <vfprintf+0x19e>
    1e1a:	83 2d       	mov	r24, r3
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	48 16       	cp	r4, r24
    1e20:	59 06       	cpc	r5, r25
    1e22:	a0 f4       	brcc	.+40     	; 0x1e4c <vfprintf+0x19e>
    1e24:	b7 01       	movw	r22, r14
    1e26:	80 e2       	ldi	r24, 0x20	; 32
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	3b d1       	rcall	.+630    	; 0x20a2 <fputc>
    1e2c:	3a 94       	dec	r3
    1e2e:	f5 cf       	rjmp	.-22     	; 0x1e1a <vfprintf+0x16c>
    1e30:	f5 01       	movw	r30, r10
    1e32:	27 fc       	sbrc	r2, 7
    1e34:	85 91       	lpm	r24, Z+
    1e36:	27 fe       	sbrs	r2, 7
    1e38:	81 91       	ld	r24, Z+
    1e3a:	5f 01       	movw	r10, r30
    1e3c:	b7 01       	movw	r22, r14
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	30 d1       	rcall	.+608    	; 0x20a2 <fputc>
    1e42:	31 10       	cpse	r3, r1
    1e44:	3a 94       	dec	r3
    1e46:	f1 e0       	ldi	r31, 0x01	; 1
    1e48:	4f 1a       	sub	r4, r31
    1e4a:	51 08       	sbc	r5, r1
    1e4c:	41 14       	cp	r4, r1
    1e4e:	51 04       	cpc	r5, r1
    1e50:	79 f7       	brne	.-34     	; 0x1e30 <vfprintf+0x182>
    1e52:	de c0       	rjmp	.+444    	; 0x2010 <vfprintf+0x362>
    1e54:	84 36       	cpi	r24, 0x64	; 100
    1e56:	11 f0       	breq	.+4      	; 0x1e5c <vfprintf+0x1ae>
    1e58:	89 36       	cpi	r24, 0x69	; 105
    1e5a:	31 f5       	brne	.+76     	; 0x1ea8 <vfprintf+0x1fa>
    1e5c:	f8 01       	movw	r30, r16
    1e5e:	27 ff       	sbrs	r18, 7
    1e60:	07 c0       	rjmp	.+14     	; 0x1e70 <vfprintf+0x1c2>
    1e62:	60 81       	ld	r22, Z
    1e64:	71 81       	ldd	r23, Z+1	; 0x01
    1e66:	82 81       	ldd	r24, Z+2	; 0x02
    1e68:	93 81       	ldd	r25, Z+3	; 0x03
    1e6a:	0c 5f       	subi	r16, 0xFC	; 252
    1e6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6e:	08 c0       	rjmp	.+16     	; 0x1e80 <vfprintf+0x1d2>
    1e70:	60 81       	ld	r22, Z
    1e72:	71 81       	ldd	r23, Z+1	; 0x01
    1e74:	88 27       	eor	r24, r24
    1e76:	77 fd       	sbrc	r23, 7
    1e78:	80 95       	com	r24
    1e7a:	98 2f       	mov	r25, r24
    1e7c:	0e 5f       	subi	r16, 0xFE	; 254
    1e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e80:	2f 76       	andi	r18, 0x6F	; 111
    1e82:	b2 2e       	mov	r11, r18
    1e84:	97 ff       	sbrs	r25, 7
    1e86:	09 c0       	rjmp	.+18     	; 0x1e9a <vfprintf+0x1ec>
    1e88:	90 95       	com	r25
    1e8a:	80 95       	com	r24
    1e8c:	70 95       	com	r23
    1e8e:	61 95       	neg	r22
    1e90:	7f 4f       	sbci	r23, 0xFF	; 255
    1e92:	8f 4f       	sbci	r24, 0xFF	; 255
    1e94:	9f 4f       	sbci	r25, 0xFF	; 255
    1e96:	20 68       	ori	r18, 0x80	; 128
    1e98:	b2 2e       	mov	r11, r18
    1e9a:	2a e0       	ldi	r18, 0x0A	; 10
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	a4 01       	movw	r20, r8
    1ea0:	32 d1       	rcall	.+612    	; 0x2106 <__ultoa_invert>
    1ea2:	a8 2e       	mov	r10, r24
    1ea4:	a8 18       	sub	r10, r8
    1ea6:	43 c0       	rjmp	.+134    	; 0x1f2e <vfprintf+0x280>
    1ea8:	85 37       	cpi	r24, 0x75	; 117
    1eaa:	29 f4       	brne	.+10     	; 0x1eb6 <vfprintf+0x208>
    1eac:	2f 7e       	andi	r18, 0xEF	; 239
    1eae:	b2 2e       	mov	r11, r18
    1eb0:	2a e0       	ldi	r18, 0x0A	; 10
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	25 c0       	rjmp	.+74     	; 0x1f00 <vfprintf+0x252>
    1eb6:	f2 2f       	mov	r31, r18
    1eb8:	f9 7f       	andi	r31, 0xF9	; 249
    1eba:	bf 2e       	mov	r11, r31
    1ebc:	8f 36       	cpi	r24, 0x6F	; 111
    1ebe:	c1 f0       	breq	.+48     	; 0x1ef0 <vfprintf+0x242>
    1ec0:	18 f4       	brcc	.+6      	; 0x1ec8 <vfprintf+0x21a>
    1ec2:	88 35       	cpi	r24, 0x58	; 88
    1ec4:	79 f0       	breq	.+30     	; 0x1ee4 <vfprintf+0x236>
    1ec6:	ad c0       	rjmp	.+346    	; 0x2022 <vfprintf+0x374>
    1ec8:	80 37       	cpi	r24, 0x70	; 112
    1eca:	19 f0       	breq	.+6      	; 0x1ed2 <vfprintf+0x224>
    1ecc:	88 37       	cpi	r24, 0x78	; 120
    1ece:	21 f0       	breq	.+8      	; 0x1ed8 <vfprintf+0x22a>
    1ed0:	a8 c0       	rjmp	.+336    	; 0x2022 <vfprintf+0x374>
    1ed2:	2f 2f       	mov	r18, r31
    1ed4:	20 61       	ori	r18, 0x10	; 16
    1ed6:	b2 2e       	mov	r11, r18
    1ed8:	b4 fe       	sbrs	r11, 4
    1eda:	0d c0       	rjmp	.+26     	; 0x1ef6 <vfprintf+0x248>
    1edc:	8b 2d       	mov	r24, r11
    1ede:	84 60       	ori	r24, 0x04	; 4
    1ee0:	b8 2e       	mov	r11, r24
    1ee2:	09 c0       	rjmp	.+18     	; 0x1ef6 <vfprintf+0x248>
    1ee4:	24 ff       	sbrs	r18, 4
    1ee6:	0a c0       	rjmp	.+20     	; 0x1efc <vfprintf+0x24e>
    1ee8:	9f 2f       	mov	r25, r31
    1eea:	96 60       	ori	r25, 0x06	; 6
    1eec:	b9 2e       	mov	r11, r25
    1eee:	06 c0       	rjmp	.+12     	; 0x1efc <vfprintf+0x24e>
    1ef0:	28 e0       	ldi	r18, 0x08	; 8
    1ef2:	30 e0       	ldi	r19, 0x00	; 0
    1ef4:	05 c0       	rjmp	.+10     	; 0x1f00 <vfprintf+0x252>
    1ef6:	20 e1       	ldi	r18, 0x10	; 16
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	02 c0       	rjmp	.+4      	; 0x1f00 <vfprintf+0x252>
    1efc:	20 e1       	ldi	r18, 0x10	; 16
    1efe:	32 e0       	ldi	r19, 0x02	; 2
    1f00:	f8 01       	movw	r30, r16
    1f02:	b7 fe       	sbrs	r11, 7
    1f04:	07 c0       	rjmp	.+14     	; 0x1f14 <vfprintf+0x266>
    1f06:	60 81       	ld	r22, Z
    1f08:	71 81       	ldd	r23, Z+1	; 0x01
    1f0a:	82 81       	ldd	r24, Z+2	; 0x02
    1f0c:	93 81       	ldd	r25, Z+3	; 0x03
    1f0e:	0c 5f       	subi	r16, 0xFC	; 252
    1f10:	1f 4f       	sbci	r17, 0xFF	; 255
    1f12:	06 c0       	rjmp	.+12     	; 0x1f20 <vfprintf+0x272>
    1f14:	60 81       	ld	r22, Z
    1f16:	71 81       	ldd	r23, Z+1	; 0x01
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	0e 5f       	subi	r16, 0xFE	; 254
    1f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f20:	a4 01       	movw	r20, r8
    1f22:	f1 d0       	rcall	.+482    	; 0x2106 <__ultoa_invert>
    1f24:	a8 2e       	mov	r10, r24
    1f26:	a8 18       	sub	r10, r8
    1f28:	fb 2d       	mov	r31, r11
    1f2a:	ff 77       	andi	r31, 0x7F	; 127
    1f2c:	bf 2e       	mov	r11, r31
    1f2e:	b6 fe       	sbrs	r11, 6
    1f30:	0b c0       	rjmp	.+22     	; 0x1f48 <vfprintf+0x29a>
    1f32:	2b 2d       	mov	r18, r11
    1f34:	2e 7f       	andi	r18, 0xFE	; 254
    1f36:	a5 14       	cp	r10, r5
    1f38:	50 f4       	brcc	.+20     	; 0x1f4e <vfprintf+0x2a0>
    1f3a:	b4 fe       	sbrs	r11, 4
    1f3c:	0a c0       	rjmp	.+20     	; 0x1f52 <vfprintf+0x2a4>
    1f3e:	b2 fc       	sbrc	r11, 2
    1f40:	08 c0       	rjmp	.+16     	; 0x1f52 <vfprintf+0x2a4>
    1f42:	2b 2d       	mov	r18, r11
    1f44:	2e 7e       	andi	r18, 0xEE	; 238
    1f46:	05 c0       	rjmp	.+10     	; 0x1f52 <vfprintf+0x2a4>
    1f48:	7a 2c       	mov	r7, r10
    1f4a:	2b 2d       	mov	r18, r11
    1f4c:	03 c0       	rjmp	.+6      	; 0x1f54 <vfprintf+0x2a6>
    1f4e:	7a 2c       	mov	r7, r10
    1f50:	01 c0       	rjmp	.+2      	; 0x1f54 <vfprintf+0x2a6>
    1f52:	75 2c       	mov	r7, r5
    1f54:	24 ff       	sbrs	r18, 4
    1f56:	0d c0       	rjmp	.+26     	; 0x1f72 <vfprintf+0x2c4>
    1f58:	fe 01       	movw	r30, r28
    1f5a:	ea 0d       	add	r30, r10
    1f5c:	f1 1d       	adc	r31, r1
    1f5e:	80 81       	ld	r24, Z
    1f60:	80 33       	cpi	r24, 0x30	; 48
    1f62:	11 f4       	brne	.+4      	; 0x1f68 <vfprintf+0x2ba>
    1f64:	29 7e       	andi	r18, 0xE9	; 233
    1f66:	09 c0       	rjmp	.+18     	; 0x1f7a <vfprintf+0x2cc>
    1f68:	22 ff       	sbrs	r18, 2
    1f6a:	06 c0       	rjmp	.+12     	; 0x1f78 <vfprintf+0x2ca>
    1f6c:	73 94       	inc	r7
    1f6e:	73 94       	inc	r7
    1f70:	04 c0       	rjmp	.+8      	; 0x1f7a <vfprintf+0x2cc>
    1f72:	82 2f       	mov	r24, r18
    1f74:	86 78       	andi	r24, 0x86	; 134
    1f76:	09 f0       	breq	.+2      	; 0x1f7a <vfprintf+0x2cc>
    1f78:	73 94       	inc	r7
    1f7a:	23 fd       	sbrc	r18, 3
    1f7c:	12 c0       	rjmp	.+36     	; 0x1fa2 <vfprintf+0x2f4>
    1f7e:	20 ff       	sbrs	r18, 0
    1f80:	06 c0       	rjmp	.+12     	; 0x1f8e <vfprintf+0x2e0>
    1f82:	5a 2c       	mov	r5, r10
    1f84:	73 14       	cp	r7, r3
    1f86:	18 f4       	brcc	.+6      	; 0x1f8e <vfprintf+0x2e0>
    1f88:	53 0c       	add	r5, r3
    1f8a:	57 18       	sub	r5, r7
    1f8c:	73 2c       	mov	r7, r3
    1f8e:	73 14       	cp	r7, r3
    1f90:	60 f4       	brcc	.+24     	; 0x1faa <vfprintf+0x2fc>
    1f92:	b7 01       	movw	r22, r14
    1f94:	80 e2       	ldi	r24, 0x20	; 32
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	2c 87       	std	Y+12, r18	; 0x0c
    1f9a:	83 d0       	rcall	.+262    	; 0x20a2 <fputc>
    1f9c:	73 94       	inc	r7
    1f9e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fa0:	f6 cf       	rjmp	.-20     	; 0x1f8e <vfprintf+0x2e0>
    1fa2:	73 14       	cp	r7, r3
    1fa4:	10 f4       	brcc	.+4      	; 0x1faa <vfprintf+0x2fc>
    1fa6:	37 18       	sub	r3, r7
    1fa8:	01 c0       	rjmp	.+2      	; 0x1fac <vfprintf+0x2fe>
    1faa:	31 2c       	mov	r3, r1
    1fac:	24 ff       	sbrs	r18, 4
    1fae:	11 c0       	rjmp	.+34     	; 0x1fd2 <vfprintf+0x324>
    1fb0:	b7 01       	movw	r22, r14
    1fb2:	80 e3       	ldi	r24, 0x30	; 48
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	2c 87       	std	Y+12, r18	; 0x0c
    1fb8:	74 d0       	rcall	.+232    	; 0x20a2 <fputc>
    1fba:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fbc:	22 ff       	sbrs	r18, 2
    1fbe:	16 c0       	rjmp	.+44     	; 0x1fec <vfprintf+0x33e>
    1fc0:	21 ff       	sbrs	r18, 1
    1fc2:	03 c0       	rjmp	.+6      	; 0x1fca <vfprintf+0x31c>
    1fc4:	88 e5       	ldi	r24, 0x58	; 88
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	02 c0       	rjmp	.+4      	; 0x1fce <vfprintf+0x320>
    1fca:	88 e7       	ldi	r24, 0x78	; 120
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	b7 01       	movw	r22, r14
    1fd0:	0c c0       	rjmp	.+24     	; 0x1fea <vfprintf+0x33c>
    1fd2:	82 2f       	mov	r24, r18
    1fd4:	86 78       	andi	r24, 0x86	; 134
    1fd6:	51 f0       	breq	.+20     	; 0x1fec <vfprintf+0x33e>
    1fd8:	21 fd       	sbrc	r18, 1
    1fda:	02 c0       	rjmp	.+4      	; 0x1fe0 <vfprintf+0x332>
    1fdc:	80 e2       	ldi	r24, 0x20	; 32
    1fde:	01 c0       	rjmp	.+2      	; 0x1fe2 <vfprintf+0x334>
    1fe0:	8b e2       	ldi	r24, 0x2B	; 43
    1fe2:	27 fd       	sbrc	r18, 7
    1fe4:	8d e2       	ldi	r24, 0x2D	; 45
    1fe6:	b7 01       	movw	r22, r14
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	5b d0       	rcall	.+182    	; 0x20a2 <fputc>
    1fec:	a5 14       	cp	r10, r5
    1fee:	30 f4       	brcc	.+12     	; 0x1ffc <vfprintf+0x34e>
    1ff0:	b7 01       	movw	r22, r14
    1ff2:	80 e3       	ldi	r24, 0x30	; 48
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	55 d0       	rcall	.+170    	; 0x20a2 <fputc>
    1ff8:	5a 94       	dec	r5
    1ffa:	f8 cf       	rjmp	.-16     	; 0x1fec <vfprintf+0x33e>
    1ffc:	aa 94       	dec	r10
    1ffe:	f4 01       	movw	r30, r8
    2000:	ea 0d       	add	r30, r10
    2002:	f1 1d       	adc	r31, r1
    2004:	80 81       	ld	r24, Z
    2006:	b7 01       	movw	r22, r14
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	4b d0       	rcall	.+150    	; 0x20a2 <fputc>
    200c:	a1 10       	cpse	r10, r1
    200e:	f6 cf       	rjmp	.-20     	; 0x1ffc <vfprintf+0x34e>
    2010:	33 20       	and	r3, r3
    2012:	09 f4       	brne	.+2      	; 0x2016 <vfprintf+0x368>
    2014:	5d ce       	rjmp	.-838    	; 0x1cd0 <vfprintf+0x22>
    2016:	b7 01       	movw	r22, r14
    2018:	80 e2       	ldi	r24, 0x20	; 32
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	42 d0       	rcall	.+132    	; 0x20a2 <fputc>
    201e:	3a 94       	dec	r3
    2020:	f7 cf       	rjmp	.-18     	; 0x2010 <vfprintf+0x362>
    2022:	f7 01       	movw	r30, r14
    2024:	86 81       	ldd	r24, Z+6	; 0x06
    2026:	97 81       	ldd	r25, Z+7	; 0x07
    2028:	02 c0       	rjmp	.+4      	; 0x202e <vfprintf+0x380>
    202a:	8f ef       	ldi	r24, 0xFF	; 255
    202c:	9f ef       	ldi	r25, 0xFF	; 255
    202e:	2c 96       	adiw	r28, 0x0c	; 12
    2030:	e2 e1       	ldi	r30, 0x12	; 18
    2032:	e3 c0       	rjmp	.+454    	; 0x21fa <__epilogue_restores__>

00002034 <calloc>:
    2034:	0f 93       	push	r16
    2036:	1f 93       	push	r17
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	86 9f       	mul	r24, r22
    203e:	80 01       	movw	r16, r0
    2040:	87 9f       	mul	r24, r23
    2042:	10 0d       	add	r17, r0
    2044:	96 9f       	mul	r25, r22
    2046:	10 0d       	add	r17, r0
    2048:	11 24       	eor	r1, r1
    204a:	c8 01       	movw	r24, r16
    204c:	5d dc       	rcall	.-1862   	; 0x1908 <malloc>
    204e:	ec 01       	movw	r28, r24
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	21 f0       	breq	.+8      	; 0x205c <calloc+0x28>
    2054:	a8 01       	movw	r20, r16
    2056:	60 e0       	ldi	r22, 0x00	; 0
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	11 d0       	rcall	.+34     	; 0x207e <memset>
    205c:	ce 01       	movw	r24, r28
    205e:	df 91       	pop	r29
    2060:	cf 91       	pop	r28
    2062:	1f 91       	pop	r17
    2064:	0f 91       	pop	r16
    2066:	08 95       	ret

00002068 <strnlen_P>:
    2068:	fc 01       	movw	r30, r24
    206a:	05 90       	lpm	r0, Z+
    206c:	61 50       	subi	r22, 0x01	; 1
    206e:	70 40       	sbci	r23, 0x00	; 0
    2070:	01 10       	cpse	r0, r1
    2072:	d8 f7       	brcc	.-10     	; 0x206a <strnlen_P+0x2>
    2074:	80 95       	com	r24
    2076:	90 95       	com	r25
    2078:	8e 0f       	add	r24, r30
    207a:	9f 1f       	adc	r25, r31
    207c:	08 95       	ret

0000207e <memset>:
    207e:	dc 01       	movw	r26, r24
    2080:	01 c0       	rjmp	.+2      	; 0x2084 <memset+0x6>
    2082:	6d 93       	st	X+, r22
    2084:	41 50       	subi	r20, 0x01	; 1
    2086:	50 40       	sbci	r21, 0x00	; 0
    2088:	e0 f7       	brcc	.-8      	; 0x2082 <memset+0x4>
    208a:	08 95       	ret

0000208c <strnlen>:
    208c:	fc 01       	movw	r30, r24
    208e:	61 50       	subi	r22, 0x01	; 1
    2090:	70 40       	sbci	r23, 0x00	; 0
    2092:	01 90       	ld	r0, Z+
    2094:	01 10       	cpse	r0, r1
    2096:	d8 f7       	brcc	.-10     	; 0x208e <strnlen+0x2>
    2098:	80 95       	com	r24
    209a:	90 95       	com	r25
    209c:	8e 0f       	add	r24, r30
    209e:	9f 1f       	adc	r25, r31
    20a0:	08 95       	ret

000020a2 <fputc>:
    20a2:	0f 93       	push	r16
    20a4:	1f 93       	push	r17
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	18 2f       	mov	r17, r24
    20ac:	09 2f       	mov	r16, r25
    20ae:	eb 01       	movw	r28, r22
    20b0:	8b 81       	ldd	r24, Y+3	; 0x03
    20b2:	81 fd       	sbrc	r24, 1
    20b4:	03 c0       	rjmp	.+6      	; 0x20bc <fputc+0x1a>
    20b6:	8f ef       	ldi	r24, 0xFF	; 255
    20b8:	9f ef       	ldi	r25, 0xFF	; 255
    20ba:	20 c0       	rjmp	.+64     	; 0x20fc <fputc+0x5a>
    20bc:	82 ff       	sbrs	r24, 2
    20be:	10 c0       	rjmp	.+32     	; 0x20e0 <fputc+0x3e>
    20c0:	4e 81       	ldd	r20, Y+6	; 0x06
    20c2:	5f 81       	ldd	r21, Y+7	; 0x07
    20c4:	2c 81       	ldd	r18, Y+4	; 0x04
    20c6:	3d 81       	ldd	r19, Y+5	; 0x05
    20c8:	42 17       	cp	r20, r18
    20ca:	53 07       	cpc	r21, r19
    20cc:	7c f4       	brge	.+30     	; 0x20ec <fputc+0x4a>
    20ce:	e8 81       	ld	r30, Y
    20d0:	f9 81       	ldd	r31, Y+1	; 0x01
    20d2:	9f 01       	movw	r18, r30
    20d4:	2f 5f       	subi	r18, 0xFF	; 255
    20d6:	3f 4f       	sbci	r19, 0xFF	; 255
    20d8:	39 83       	std	Y+1, r19	; 0x01
    20da:	28 83       	st	Y, r18
    20dc:	10 83       	st	Z, r17
    20de:	06 c0       	rjmp	.+12     	; 0x20ec <fputc+0x4a>
    20e0:	e8 85       	ldd	r30, Y+8	; 0x08
    20e2:	f9 85       	ldd	r31, Y+9	; 0x09
    20e4:	81 2f       	mov	r24, r17
    20e6:	09 95       	icall
    20e8:	89 2b       	or	r24, r25
    20ea:	29 f7       	brne	.-54     	; 0x20b6 <fputc+0x14>
    20ec:	2e 81       	ldd	r18, Y+6	; 0x06
    20ee:	3f 81       	ldd	r19, Y+7	; 0x07
    20f0:	2f 5f       	subi	r18, 0xFF	; 255
    20f2:	3f 4f       	sbci	r19, 0xFF	; 255
    20f4:	3f 83       	std	Y+7, r19	; 0x07
    20f6:	2e 83       	std	Y+6, r18	; 0x06
    20f8:	81 2f       	mov	r24, r17
    20fa:	90 2f       	mov	r25, r16
    20fc:	df 91       	pop	r29
    20fe:	cf 91       	pop	r28
    2100:	1f 91       	pop	r17
    2102:	0f 91       	pop	r16
    2104:	08 95       	ret

00002106 <__ultoa_invert>:
    2106:	fa 01       	movw	r30, r20
    2108:	aa 27       	eor	r26, r26
    210a:	28 30       	cpi	r18, 0x08	; 8
    210c:	51 f1       	breq	.+84     	; 0x2162 <__ultoa_invert+0x5c>
    210e:	20 31       	cpi	r18, 0x10	; 16
    2110:	81 f1       	breq	.+96     	; 0x2172 <__ultoa_invert+0x6c>
    2112:	e8 94       	clt
    2114:	6f 93       	push	r22
    2116:	6e 7f       	andi	r22, 0xFE	; 254
    2118:	6e 5f       	subi	r22, 0xFE	; 254
    211a:	7f 4f       	sbci	r23, 0xFF	; 255
    211c:	8f 4f       	sbci	r24, 0xFF	; 255
    211e:	9f 4f       	sbci	r25, 0xFF	; 255
    2120:	af 4f       	sbci	r26, 0xFF	; 255
    2122:	b1 e0       	ldi	r27, 0x01	; 1
    2124:	3e d0       	rcall	.+124    	; 0x21a2 <__ultoa_invert+0x9c>
    2126:	b4 e0       	ldi	r27, 0x04	; 4
    2128:	3c d0       	rcall	.+120    	; 0x21a2 <__ultoa_invert+0x9c>
    212a:	67 0f       	add	r22, r23
    212c:	78 1f       	adc	r23, r24
    212e:	89 1f       	adc	r24, r25
    2130:	9a 1f       	adc	r25, r26
    2132:	a1 1d       	adc	r26, r1
    2134:	68 0f       	add	r22, r24
    2136:	79 1f       	adc	r23, r25
    2138:	8a 1f       	adc	r24, r26
    213a:	91 1d       	adc	r25, r1
    213c:	a1 1d       	adc	r26, r1
    213e:	6a 0f       	add	r22, r26
    2140:	71 1d       	adc	r23, r1
    2142:	81 1d       	adc	r24, r1
    2144:	91 1d       	adc	r25, r1
    2146:	a1 1d       	adc	r26, r1
    2148:	20 d0       	rcall	.+64     	; 0x218a <__ultoa_invert+0x84>
    214a:	09 f4       	brne	.+2      	; 0x214e <__ultoa_invert+0x48>
    214c:	68 94       	set
    214e:	3f 91       	pop	r19
    2150:	2a e0       	ldi	r18, 0x0A	; 10
    2152:	26 9f       	mul	r18, r22
    2154:	11 24       	eor	r1, r1
    2156:	30 19       	sub	r19, r0
    2158:	30 5d       	subi	r19, 0xD0	; 208
    215a:	31 93       	st	Z+, r19
    215c:	de f6       	brtc	.-74     	; 0x2114 <__ultoa_invert+0xe>
    215e:	cf 01       	movw	r24, r30
    2160:	08 95       	ret
    2162:	46 2f       	mov	r20, r22
    2164:	47 70       	andi	r20, 0x07	; 7
    2166:	40 5d       	subi	r20, 0xD0	; 208
    2168:	41 93       	st	Z+, r20
    216a:	b3 e0       	ldi	r27, 0x03	; 3
    216c:	0f d0       	rcall	.+30     	; 0x218c <__ultoa_invert+0x86>
    216e:	c9 f7       	brne	.-14     	; 0x2162 <__ultoa_invert+0x5c>
    2170:	f6 cf       	rjmp	.-20     	; 0x215e <__ultoa_invert+0x58>
    2172:	46 2f       	mov	r20, r22
    2174:	4f 70       	andi	r20, 0x0F	; 15
    2176:	40 5d       	subi	r20, 0xD0	; 208
    2178:	4a 33       	cpi	r20, 0x3A	; 58
    217a:	18 f0       	brcs	.+6      	; 0x2182 <__ultoa_invert+0x7c>
    217c:	49 5d       	subi	r20, 0xD9	; 217
    217e:	31 fd       	sbrc	r19, 1
    2180:	40 52       	subi	r20, 0x20	; 32
    2182:	41 93       	st	Z+, r20
    2184:	02 d0       	rcall	.+4      	; 0x218a <__ultoa_invert+0x84>
    2186:	a9 f7       	brne	.-22     	; 0x2172 <__ultoa_invert+0x6c>
    2188:	ea cf       	rjmp	.-44     	; 0x215e <__ultoa_invert+0x58>
    218a:	b4 e0       	ldi	r27, 0x04	; 4
    218c:	a6 95       	lsr	r26
    218e:	97 95       	ror	r25
    2190:	87 95       	ror	r24
    2192:	77 95       	ror	r23
    2194:	67 95       	ror	r22
    2196:	ba 95       	dec	r27
    2198:	c9 f7       	brne	.-14     	; 0x218c <__ultoa_invert+0x86>
    219a:	00 97       	sbiw	r24, 0x00	; 0
    219c:	61 05       	cpc	r22, r1
    219e:	71 05       	cpc	r23, r1
    21a0:	08 95       	ret
    21a2:	9b 01       	movw	r18, r22
    21a4:	ac 01       	movw	r20, r24
    21a6:	0a 2e       	mov	r0, r26
    21a8:	06 94       	lsr	r0
    21aa:	57 95       	ror	r21
    21ac:	47 95       	ror	r20
    21ae:	37 95       	ror	r19
    21b0:	27 95       	ror	r18
    21b2:	ba 95       	dec	r27
    21b4:	c9 f7       	brne	.-14     	; 0x21a8 <__ultoa_invert+0xa2>
    21b6:	62 0f       	add	r22, r18
    21b8:	73 1f       	adc	r23, r19
    21ba:	84 1f       	adc	r24, r20
    21bc:	95 1f       	adc	r25, r21
    21be:	a0 1d       	adc	r26, r0
    21c0:	08 95       	ret

000021c2 <__prologue_saves__>:
    21c2:	2f 92       	push	r2
    21c4:	3f 92       	push	r3
    21c6:	4f 92       	push	r4
    21c8:	5f 92       	push	r5
    21ca:	6f 92       	push	r6
    21cc:	7f 92       	push	r7
    21ce:	8f 92       	push	r8
    21d0:	9f 92       	push	r9
    21d2:	af 92       	push	r10
    21d4:	bf 92       	push	r11
    21d6:	cf 92       	push	r12
    21d8:	df 92       	push	r13
    21da:	ef 92       	push	r14
    21dc:	ff 92       	push	r15
    21de:	0f 93       	push	r16
    21e0:	1f 93       	push	r17
    21e2:	cf 93       	push	r28
    21e4:	df 93       	push	r29
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	ca 1b       	sub	r28, r26
    21ec:	db 0b       	sbc	r29, r27
    21ee:	0f b6       	in	r0, 0x3f	; 63
    21f0:	f8 94       	cli
    21f2:	de bf       	out	0x3e, r29	; 62
    21f4:	0f be       	out	0x3f, r0	; 63
    21f6:	cd bf       	out	0x3d, r28	; 61
    21f8:	09 94       	ijmp

000021fa <__epilogue_restores__>:
    21fa:	2a 88       	ldd	r2, Y+18	; 0x12
    21fc:	39 88       	ldd	r3, Y+17	; 0x11
    21fe:	48 88       	ldd	r4, Y+16	; 0x10
    2200:	5f 84       	ldd	r5, Y+15	; 0x0f
    2202:	6e 84       	ldd	r6, Y+14	; 0x0e
    2204:	7d 84       	ldd	r7, Y+13	; 0x0d
    2206:	8c 84       	ldd	r8, Y+12	; 0x0c
    2208:	9b 84       	ldd	r9, Y+11	; 0x0b
    220a:	aa 84       	ldd	r10, Y+10	; 0x0a
    220c:	b9 84       	ldd	r11, Y+9	; 0x09
    220e:	c8 84       	ldd	r12, Y+8	; 0x08
    2210:	df 80       	ldd	r13, Y+7	; 0x07
    2212:	ee 80       	ldd	r14, Y+6	; 0x06
    2214:	fd 80       	ldd	r15, Y+5	; 0x05
    2216:	0c 81       	ldd	r16, Y+4	; 0x04
    2218:	1b 81       	ldd	r17, Y+3	; 0x03
    221a:	aa 81       	ldd	r26, Y+2	; 0x02
    221c:	b9 81       	ldd	r27, Y+1	; 0x01
    221e:	ce 0f       	add	r28, r30
    2220:	d1 1d       	adc	r29, r1
    2222:	0f b6       	in	r0, 0x3f	; 63
    2224:	f8 94       	cli
    2226:	de bf       	out	0x3e, r29	; 62
    2228:	0f be       	out	0x3f, r0	; 63
    222a:	cd bf       	out	0x3d, r28	; 61
    222c:	ed 01       	movw	r28, r26
    222e:	08 95       	ret

00002230 <_exit>:
    2230:	f8 94       	cli

00002232 <__stop_program>:
    2232:	ff cf       	rjmp	.-2      	; 0x2232 <__stop_program>
