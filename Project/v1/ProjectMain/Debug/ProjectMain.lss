
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015a  00800100  00001fa4  00002038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  0080025a  0080025a  00002192  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002192  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000328  00000000  00000000  000021ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004059  00000000  00000000  00002516  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001221  00000000  00000000  0000656f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000181d  00000000  00000000  00007790  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007cc  00000000  00000000  00008fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ed7  00000000  00000000  0000977c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000020e1  00000000  00000000  0000a653  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000410  00000000  00000000  0000c734  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	fa c1       	rjmp	.+1012   	; 0x402 <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ef c1       	rjmp	.+990    	; 0x420 <__vector_16>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <JOY_updatePosition+0x4>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e4 ea       	ldi	r30, 0xA4	; 164
     37c:	ff e1       	ldi	r31, 0x1F	; 31
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 35       	cpi	r26, 0x5A	; 90
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	aa e5       	ldi	r26, 0x5A	; 90
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	aa 38       	cpi	r26, 0x8A	; 138
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	a4 d0       	rcall	.+328    	; 0x4e4 <main>
     39c:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	//printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 7a 02 	sts	0x027A, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 65 02 	sts	0x0265, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 64 02 	sts	0x0264, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 63 02 	sts	0x0263, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_3>:
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	8f 93       	push	r24
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 62 02 	sts	0x0262, r24
     414:	8f 91       	pop	r24
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <__vector_16>:
     420:	1f 92       	push	r1
     422:	0f 92       	push	r0
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	0f 92       	push	r0
     428:	11 24       	eor	r1, r1
     42a:	2f 93       	push	r18
     42c:	3f 93       	push	r19
     42e:	4f 93       	push	r20
     430:	5f 93       	push	r21
     432:	6f 93       	push	r22
     434:	7f 93       	push	r23
     436:	8f 93       	push	r24
     438:	9f 93       	push	r25
     43a:	af 93       	push	r26
     43c:	bf 93       	push	r27
     43e:	ef 93       	push	r30
     440:	ff 93       	push	r31
     442:	95 d7       	rcall	.+3882   	; 0x136e <OLED_updateScreen>
     444:	ff 91       	pop	r31
     446:	ef 91       	pop	r30
     448:	bf 91       	pop	r27
     44a:	af 91       	pop	r26
     44c:	9f 91       	pop	r25
     44e:	8f 91       	pop	r24
     450:	7f 91       	pop	r23
     452:	6f 91       	pop	r22
     454:	5f 91       	pop	r21
     456:	4f 91       	pop	r20
     458:	3f 91       	pop	r19
     45a:	2f 91       	pop	r18
     45c:	0f 90       	pop	r0
     45e:	0f be       	out	0x3f, r0	; 63
     460:	0f 90       	pop	r0
     462:	1f 90       	pop	r1
     464:	18 95       	reti

00000466 <init>:
     466:	ef 92       	push	r14
     468:	ff 92       	push	r15
     46a:	0f 93       	push	r16
     46c:	1f 93       	push	r17
     46e:	1f e1       	ldi	r17, 0x1F	; 31
     470:	e1 2e       	mov	r14, r17
     472:	f1 2c       	mov	r15, r1
     474:	00 e0       	ldi	r16, 0x00	; 0
     476:	10 e0       	ldi	r17, 0x00	; 0
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	30 e0       	ldi	r19, 0x00	; 0
     47c:	4b e4       	ldi	r20, 0x4B	; 75
     47e:	50 e0       	ldi	r21, 0x00	; 0
     480:	60 e8       	ldi	r22, 0x80	; 128
     482:	75 e2       	ldi	r23, 0x25	; 37
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <uartInit>
     48c:	88 e4       	ldi	r24, 0x48	; 72
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <puts>
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	27 d2       	rcall	.+1102   	; 0x8e6 <enableXMEM>
     498:	0e 94 c3 0a 	call	0x1586	; 0x1586 <SLI_init>
     49c:	36 d2       	rcall	.+1132   	; 0x90a <JOY_init>
     49e:	bc d6       	rcall	.+3448   	; 0x1218 <OLED_init>
     4a0:	0e 94 cc 0a 	call	0x1598	; 0x1598 <SPI_init>
     4a4:	29 d4       	rcall	.+2130   	; 0xcf8 <MCP2515_init>
     4a6:	7c d0       	rcall	.+248    	; 0x5a0 <CAN_init>
     4a8:	8b b7       	in	r24, 0x3b	; 59
     4aa:	80 64       	ori	r24, 0x40	; 64
     4ac:	8b bf       	out	0x3b, r24	; 59
     4ae:	85 b7       	in	r24, 0x35	; 53
     4b0:	82 60       	ori	r24, 0x02	; 2
     4b2:	85 bf       	out	0x35, r24	; 53
     4b4:	85 b7       	in	r24, 0x35	; 53
     4b6:	8e 7f       	andi	r24, 0xFE	; 254
     4b8:	85 bf       	out	0x35, r24	; 53
     4ba:	8b 98       	cbi	0x11, 3	; 17
     4bc:	93 9a       	sbi	0x12, 3	; 18
     4be:	8b b7       	in	r24, 0x3b	; 59
     4c0:	80 68       	ori	r24, 0x80	; 128
     4c2:	8b bf       	out	0x3b, r24	; 59
     4c4:	85 b7       	in	r24, 0x35	; 53
     4c6:	88 60       	ori	r24, 0x08	; 8
     4c8:	85 bf       	out	0x35, r24	; 53
     4ca:	85 b7       	in	r24, 0x35	; 53
     4cc:	8b 7f       	andi	r24, 0xFB	; 251
     4ce:	85 bf       	out	0x35, r24	; 53
     4d0:	32 98       	cbi	0x06, 2	; 6
     4d2:	3a 98       	cbi	0x07, 2	; 7
     4d4:	b8 98       	cbi	0x17, 0	; 23
     4d6:	c0 98       	cbi	0x18, 0	; 24
     4d8:	78 94       	sei
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	ff 90       	pop	r15
     4e0:	ef 90       	pop	r14
     4e2:	08 95       	ret

000004e4 <main>:
/*
=======================MAIN FUNCTION=========================
*/

int main(void)
{
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
     4ec:	a1 97       	sbiw	r28, 0x21	; 33
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	de bf       	out	0x3e, r29	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	cd bf       	out	0x3d, r28	; 61
	
	init();
     4f8:	b6 df       	rcall	.-148    	; 0x466 <init>
	
	OLED_bufferGoto(0,0);
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	6e d7       	rcall	.+3804   	; 0x13e0 <OLED_bufferGoto>
	OLED_printString("I'm alive");
     504:	8e e7       	ldi	r24, 0x7E	; 126
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	aa d7       	rcall	.+3924   	; 0x145e <OLED_printString>
	
	saveToAddress(0x1fc0, 0x99);
     50a:	69 e9       	ldi	r22, 0x99	; 153
     50c:	80 ec       	ldi	r24, 0xC0	; 192
     50e:	9f e1       	ldi	r25, 0x1F	; 31
     510:	f9 d1       	rcall	.+1010   	; 0x904 <saveToAddress>
	saveToAddress(0x1fff, 0x80);
     512:	60 e8       	ldi	r22, 0x80	; 128
     514:	8f ef       	ldi	r24, 0xFF	; 255
     516:	9f e1       	ldi	r25, 0x1F	; 31
     518:	f5 d1       	rcall	.+1002   	; 0x904 <saveToAddress>
	
	
	
    while(1)
    {
		currPos = JOY_getPosition();
     51a:	0a e5       	ldi	r16, 0x5A	; 90
     51c:	12 e0       	ldi	r17, 0x02	; 2
		
		message2send.id = 23;
     51e:	0f 2e       	mov	r0, r31
     520:	f7 e1       	ldi	r31, 0x17	; 23
     522:	ef 2e       	mov	r14, r31
     524:	f1 2c       	mov	r15, r1
     526:	f0 2d       	mov	r31, r0
		message2send.length = 1;
     528:	dd 24       	eor	r13, r13
     52a:	d3 94       	inc	r13
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     52c:	0f 2e       	mov	r0, r31
     52e:	fb e0       	ldi	r31, 0x0B	; 11
     530:	cf 2e       	mov	r12, r31
     532:	f0 2d       	mov	r31, r0
	
	
	
    while(1)
    {
		currPos = JOY_getPosition();
     534:	6d d3       	rcall	.+1754   	; 0xc10 <JOY_getPosition>
     536:	f8 01       	movw	r30, r16
     538:	20 83       	st	Z, r18
     53a:	31 83       	std	Z+1, r19	; 0x01
     53c:	42 83       	std	Z+2, r20	; 0x02
     53e:	53 83       	std	Z+3, r21	; 0x03
     540:	64 83       	std	Z+4, r22	; 0x04
     542:	75 83       	std	Z+5, r23	; 0x05
     544:	86 83       	std	Z+6, r24	; 0x06
     546:	97 83       	std	Z+7, r25	; 0x07
		
		message2send.id = 23;
     548:	fa 82       	std	Y+2, r15	; 0x02
     54a:	e9 82       	std	Y+1, r14	; 0x01
		message2send.length = 1;
     54c:	db 82       	std	Y+3, r13	; 0x03
		message2send.data[0] = currPos.X_abs;
     54e:	2c 83       	std	Y+4, r18	; 0x04
		
		CAN_sendMessage(&message2send, 0);
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	ce 01       	movw	r24, r28
     554:	01 96       	adiw	r24, 0x01	; 1
     556:	3b d0       	rcall	.+118    	; 0x5ce <CAN_sendMessage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	90 ef       	ldi	r25, 0xF0	; 240
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	f1 f7       	brne	.-4      	; 0x55c <__stack+0x5d>
		_delay_ms(50);

		if(activateMenuFlag)
     560:	80 91 63 02 	lds	r24, 0x0263
     564:	81 11       	cpse	r24, r1
		{
			MENU_activate();
     566:	32 d6       	rcall	.+3172   	; 0x11cc <MENU_activate>
		}

		if(SPIreceivedFlag)
     568:	80 91 62 02 	lds	r24, 0x0262
     56c:	88 23       	and	r24, r24
     56e:	11 f3       	breq	.-60     	; 0x534 <__stack+0x35>
		{
			
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
     570:	6c e2       	ldi	r22, 0x2C	; 44
     572:	80 e0       	ldi	r24, 0x00	; 0
     574:	aa d3       	rcall	.+1876   	; 0xcca <MCP2515_read>
     576:	83 70       	andi	r24, 0x03	; 3
     578:	e9 f2       	breq	.-70     	; 0x534 <__stack+0x35>
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     57a:	68 2f       	mov	r22, r24
     57c:	ce 01       	movw	r24, r28
     57e:	47 96       	adiw	r24, 0x17	; 23
     580:	8f d0       	rcall	.+286    	; 0x6a0 <CAN_receiveMessage>
     582:	fe 01       	movw	r30, r28
     584:	77 96       	adiw	r30, 0x17	; 23
     586:	de 01       	movw	r26, r28
     588:	1c 96       	adiw	r26, 0x0c	; 12
     58a:	8c 2d       	mov	r24, r12
     58c:	01 90       	ld	r0, Z+
     58e:	0d 92       	st	X+, r0
     590:	8a 95       	dec	r24
     592:	e1 f7       	brne	.-8      	; 0x58c <__stack+0x8d>

				CAN_printMessage(&receivedMessage);
     594:	ce 01       	movw	r24, r28
     596:	0c 96       	adiw	r24, 0x0c	; 12
     598:	4c d1       	rcall	.+664    	; 0x832 <CAN_printMessage>
			
				SPIreceivedFlag = 0;
     59a:	10 92 62 02 	sts	0x0262, r1
     59e:	ca cf       	rjmp	.-108    	; 0x534 <__stack+0x35>

000005a0 <CAN_init>:
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	43 e0       	ldi	r20, 0x03	; 3
     5aa:	6b e2       	ldi	r22, 0x2B	; 43
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	af d3       	rcall	.+1886   	; 0xd10 <MCP2515_write>
     5b2:	40 e6       	ldi	r20, 0x60	; 96
     5b4:	60 e6       	ldi	r22, 0x60	; 96
     5b6:	80 e0       	ldi	r24, 0x00	; 0
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	aa d3       	rcall	.+1876   	; 0xd10 <MCP2515_write>
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	40 e8       	ldi	r20, 0x80	; 128
     5c0:	6f e0       	ldi	r22, 0x0F	; 15
     5c2:	80 e0       	ldi	r24, 0x00	; 0
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	b7 d3       	rcall	.+1902   	; 0xd36 <MCP2515_bitModify>
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	08 95       	ret

000005ce <CAN_sendMessage>:
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	cd b7       	in	r28, 0x3d	; 61
     5d4:	de b7       	in	r29, 0x3e	; 62
     5d6:	27 97       	sbiw	r28, 0x07	; 7
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	9e 83       	std	Y+6, r25	; 0x06
     5e4:	8d 83       	std	Y+5, r24	; 0x05
     5e6:	6f 83       	std	Y+7, r22	; 0x07
     5e8:	8f 81       	ldd	r24, Y+7	; 0x07
     5ea:	88 2f       	mov	r24, r24
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	00 97       	sbiw	r24, 0x00	; 0
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <CAN_sendMessage+0x26>
     5f2:	4d c0       	rjmp	.+154    	; 0x68e <CAN_sendMessage+0xc0>
     5f4:	8d 81       	ldd	r24, Y+5	; 0x05
     5f6:	9e 81       	ldd	r25, Y+6	; 0x06
     5f8:	fc 01       	movw	r30, r24
     5fa:	80 81       	ld	r24, Z
     5fc:	91 81       	ldd	r25, Z+1	; 0x01
     5fe:	9c 83       	std	Y+4, r25	; 0x04
     600:	8b 83       	std	Y+3, r24	; 0x03
     602:	8b 81       	ldd	r24, Y+3	; 0x03
     604:	82 95       	swap	r24
     606:	88 0f       	add	r24, r24
     608:	80 7e       	andi	r24, 0xE0	; 224
     60a:	48 2f       	mov	r20, r24
     60c:	62 e3       	ldi	r22, 0x32	; 50
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	7e d3       	rcall	.+1788   	; 0xd10 <MCP2515_write>
     614:	8b 81       	ldd	r24, Y+3	; 0x03
     616:	9c 81       	ldd	r25, Y+4	; 0x04
     618:	96 95       	lsr	r25
     61a:	87 95       	ror	r24
     61c:	96 95       	lsr	r25
     61e:	87 95       	ror	r24
     620:	96 95       	lsr	r25
     622:	87 95       	ror	r24
     624:	48 2f       	mov	r20, r24
     626:	61 e3       	ldi	r22, 0x31	; 49
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	71 d3       	rcall	.+1762   	; 0xd10 <MCP2515_write>
     62e:	8d 81       	ldd	r24, Y+5	; 0x05
     630:	9e 81       	ldd	r25, Y+6	; 0x06
     632:	fc 01       	movw	r30, r24
     634:	82 81       	ldd	r24, Z+2	; 0x02
     636:	48 2f       	mov	r20, r24
     638:	65 e3       	ldi	r22, 0x35	; 53
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	68 d3       	rcall	.+1744   	; 0xd10 <MCP2515_write>
     640:	86 e3       	ldi	r24, 0x36	; 54
     642:	89 83       	std	Y+1, r24	; 0x01
     644:	1a 82       	std	Y+2, r1	; 0x02
     646:	15 c0       	rjmp	.+42     	; 0x672 <CAN_sendMessage+0xa4>
     648:	8a 81       	ldd	r24, Y+2	; 0x02
     64a:	88 2f       	mov	r24, r24
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	2d 81       	ldd	r18, Y+5	; 0x05
     650:	3e 81       	ldd	r19, Y+6	; 0x06
     652:	82 0f       	add	r24, r18
     654:	93 1f       	adc	r25, r19
     656:	03 96       	adiw	r24, 0x03	; 3
     658:	fc 01       	movw	r30, r24
     65a:	80 81       	ld	r24, Z
     65c:	48 2f       	mov	r20, r24
     65e:	69 81       	ldd	r22, Y+1	; 0x01
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	55 d3       	rcall	.+1706   	; 0xd10 <MCP2515_write>
     666:	89 81       	ldd	r24, Y+1	; 0x01
     668:	8f 5f       	subi	r24, 0xFF	; 255
     66a:	89 83       	std	Y+1, r24	; 0x01
     66c:	8a 81       	ldd	r24, Y+2	; 0x02
     66e:	8f 5f       	subi	r24, 0xFF	; 255
     670:	8a 83       	std	Y+2, r24	; 0x02
     672:	8d 81       	ldd	r24, Y+5	; 0x05
     674:	9e 81       	ldd	r25, Y+6	; 0x06
     676:	fc 01       	movw	r30, r24
     678:	92 81       	ldd	r25, Z+2	; 0x02
     67a:	8a 81       	ldd	r24, Y+2	; 0x02
     67c:	89 17       	cp	r24, r25
     67e:	20 f3       	brcs	.-56     	; 0x648 <CAN_sendMessage+0x7a>
     680:	2f ef       	ldi	r18, 0xFF	; 255
     682:	48 e0       	ldi	r20, 0x08	; 8
     684:	60 e3       	ldi	r22, 0x30	; 48
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	55 d3       	rcall	.+1706   	; 0xd36 <MCP2515_bitModify>
     68c:	00 00       	nop
     68e:	27 96       	adiw	r28, 0x07	; 7
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	f8 94       	cli
     694:	de bf       	out	0x3e, r29	; 62
     696:	0f be       	out	0x3f, r0	; 63
     698:	cd bf       	out	0x3d, r28	; 61
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	08 95       	ret

000006a0 <CAN_receiveMessage>:
     6a0:	0f 93       	push	r16
     6a2:	1f 93       	push	r17
     6a4:	cf 93       	push	r28
     6a6:	df 93       	push	r29
     6a8:	cd b7       	in	r28, 0x3d	; 61
     6aa:	de b7       	in	r29, 0x3e	; 62
     6ac:	61 97       	sbiw	r28, 0x11	; 17
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	f8 94       	cli
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	0f be       	out	0x3f, r0	; 63
     6b6:	cd bf       	out	0x3d, r28	; 61
     6b8:	98 8b       	std	Y+16, r25	; 0x10
     6ba:	8f 87       	std	Y+15, r24	; 0x0f
     6bc:	69 8b       	std	Y+17, r22	; 0x11
     6be:	89 89       	ldd	r24, Y+17	; 0x11
     6c0:	88 2f       	mov	r24, r24
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	91 05       	cpc	r25, r1
     6c8:	09 f4       	brne	.+2      	; 0x6cc <CAN_receiveMessage+0x2c>
     6ca:	57 c0       	rjmp	.+174    	; 0x77a <CAN_receiveMessage+0xda>
     6cc:	83 30       	cpi	r24, 0x03	; 3
     6ce:	91 05       	cpc	r25, r1
     6d0:	21 f0       	breq	.+8      	; 0x6da <CAN_receiveMessage+0x3a>
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	91 05       	cpc	r25, r1
     6d6:	09 f0       	breq	.+2      	; 0x6da <CAN_receiveMessage+0x3a>
     6d8:	9f c0       	rjmp	.+318    	; 0x818 <CAN_receiveMessage+0x178>
     6da:	61 e6       	ldi	r22, 0x61	; 97
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	f4 d2       	rcall	.+1512   	; 0xcca <MCP2515_read>
     6e2:	88 2f       	mov	r24, r24
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	9d 83       	std	Y+5, r25	; 0x05
     6e8:	8c 83       	std	Y+4, r24	; 0x04
     6ea:	8c 81       	ldd	r24, Y+4	; 0x04
     6ec:	9d 81       	ldd	r25, Y+5	; 0x05
     6ee:	8c 01       	movw	r16, r24
     6f0:	00 0f       	add	r16, r16
     6f2:	11 1f       	adc	r17, r17
     6f4:	00 0f       	add	r16, r16
     6f6:	11 1f       	adc	r17, r17
     6f8:	00 0f       	add	r16, r16
     6fa:	11 1f       	adc	r17, r17
     6fc:	62 e6       	ldi	r22, 0x62	; 98
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	e3 d2       	rcall	.+1478   	; 0xcca <MCP2515_read>
     704:	82 95       	swap	r24
     706:	86 95       	lsr	r24
     708:	87 70       	andi	r24, 0x07	; 7
     70a:	88 2f       	mov	r24, r24
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	80 2b       	or	r24, r16
     710:	91 2b       	or	r25, r17
     712:	9d 83       	std	Y+5, r25	; 0x05
     714:	8c 83       	std	Y+4, r24	; 0x04
     716:	65 e6       	ldi	r22, 0x65	; 101
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	d6 d2       	rcall	.+1452   	; 0xcca <MCP2515_read>
     71e:	8e 83       	std	Y+6, r24	; 0x06
     720:	86 e6       	ldi	r24, 0x66	; 102
     722:	89 83       	std	Y+1, r24	; 0x01
     724:	1a 82       	std	Y+2, r1	; 0x02
     726:	14 c0       	rjmp	.+40     	; 0x750 <CAN_receiveMessage+0xb0>
     728:	8a 81       	ldd	r24, Y+2	; 0x02
     72a:	08 2f       	mov	r16, r24
     72c:	10 e0       	ldi	r17, 0x00	; 0
     72e:	69 81       	ldd	r22, Y+1	; 0x01
     730:	80 e0       	ldi	r24, 0x00	; 0
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	ca d2       	rcall	.+1428   	; 0xcca <MCP2515_read>
     736:	28 2f       	mov	r18, r24
     738:	ce 01       	movw	r24, r28
     73a:	07 96       	adiw	r24, 0x07	; 7
     73c:	80 0f       	add	r24, r16
     73e:	91 1f       	adc	r25, r17
     740:	fc 01       	movw	r30, r24
     742:	20 83       	st	Z, r18
     744:	89 81       	ldd	r24, Y+1	; 0x01
     746:	8f 5f       	subi	r24, 0xFF	; 255
     748:	89 83       	std	Y+1, r24	; 0x01
     74a:	8a 81       	ldd	r24, Y+2	; 0x02
     74c:	8f 5f       	subi	r24, 0xFF	; 255
     74e:	8a 83       	std	Y+2, r24	; 0x02
     750:	9e 81       	ldd	r25, Y+6	; 0x06
     752:	8a 81       	ldd	r24, Y+2	; 0x02
     754:	89 17       	cp	r24, r25
     756:	40 f3       	brcs	.-48     	; 0x728 <CAN_receiveMessage+0x88>
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	41 e0       	ldi	r20, 0x01	; 1
     75c:	6c e2       	ldi	r22, 0x2C	; 44
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	e9 d2       	rcall	.+1490   	; 0xd36 <MCP2515_bitModify>
     764:	8f 85       	ldd	r24, Y+15	; 0x0f
     766:	98 89       	ldd	r25, Y+16	; 0x10
     768:	2b e0       	ldi	r18, 0x0B	; 11
     76a:	fe 01       	movw	r30, r28
     76c:	34 96       	adiw	r30, 0x04	; 4
     76e:	dc 01       	movw	r26, r24
     770:	01 90       	ld	r0, Z+
     772:	0d 92       	st	X+, r0
     774:	2a 95       	dec	r18
     776:	e1 f7       	brne	.-8      	; 0x770 <CAN_receiveMessage+0xd0>
     778:	4f c0       	rjmp	.+158    	; 0x818 <CAN_receiveMessage+0x178>
     77a:	61 e7       	ldi	r22, 0x71	; 113
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	a4 d2       	rcall	.+1352   	; 0xcca <MCP2515_read>
     782:	88 2f       	mov	r24, r24
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	9d 83       	std	Y+5, r25	; 0x05
     788:	8c 83       	std	Y+4, r24	; 0x04
     78a:	8c 81       	ldd	r24, Y+4	; 0x04
     78c:	9d 81       	ldd	r25, Y+5	; 0x05
     78e:	8c 01       	movw	r16, r24
     790:	00 0f       	add	r16, r16
     792:	11 1f       	adc	r17, r17
     794:	00 0f       	add	r16, r16
     796:	11 1f       	adc	r17, r17
     798:	00 0f       	add	r16, r16
     79a:	11 1f       	adc	r17, r17
     79c:	62 e7       	ldi	r22, 0x72	; 114
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	93 d2       	rcall	.+1318   	; 0xcca <MCP2515_read>
     7a4:	82 95       	swap	r24
     7a6:	86 95       	lsr	r24
     7a8:	87 70       	andi	r24, 0x07	; 7
     7aa:	88 2f       	mov	r24, r24
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	80 2b       	or	r24, r16
     7b0:	91 2b       	or	r25, r17
     7b2:	9d 83       	std	Y+5, r25	; 0x05
     7b4:	8c 83       	std	Y+4, r24	; 0x04
     7b6:	65 e7       	ldi	r22, 0x75	; 117
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	86 d2       	rcall	.+1292   	; 0xcca <MCP2515_read>
     7be:	8e 83       	std	Y+6, r24	; 0x06
     7c0:	86 e7       	ldi	r24, 0x76	; 118
     7c2:	89 83       	std	Y+1, r24	; 0x01
     7c4:	1b 82       	std	Y+3, r1	; 0x03
     7c6:	14 c0       	rjmp	.+40     	; 0x7f0 <CAN_receiveMessage+0x150>
     7c8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ca:	08 2f       	mov	r16, r24
     7cc:	10 e0       	ldi	r17, 0x00	; 0
     7ce:	69 81       	ldd	r22, Y+1	; 0x01
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	7a d2       	rcall	.+1268   	; 0xcca <MCP2515_read>
     7d6:	28 2f       	mov	r18, r24
     7d8:	ce 01       	movw	r24, r28
     7da:	07 96       	adiw	r24, 0x07	; 7
     7dc:	80 0f       	add	r24, r16
     7de:	91 1f       	adc	r25, r17
     7e0:	fc 01       	movw	r30, r24
     7e2:	20 83       	st	Z, r18
     7e4:	89 81       	ldd	r24, Y+1	; 0x01
     7e6:	8f 5f       	subi	r24, 0xFF	; 255
     7e8:	89 83       	std	Y+1, r24	; 0x01
     7ea:	8b 81       	ldd	r24, Y+3	; 0x03
     7ec:	8f 5f       	subi	r24, 0xFF	; 255
     7ee:	8b 83       	std	Y+3, r24	; 0x03
     7f0:	9e 81       	ldd	r25, Y+6	; 0x06
     7f2:	8b 81       	ldd	r24, Y+3	; 0x03
     7f4:	89 17       	cp	r24, r25
     7f6:	40 f3       	brcs	.-48     	; 0x7c8 <CAN_receiveMessage+0x128>
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	42 e0       	ldi	r20, 0x02	; 2
     7fc:	6c e2       	ldi	r22, 0x2C	; 44
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	99 d2       	rcall	.+1330   	; 0xd36 <MCP2515_bitModify>
     804:	8f 85       	ldd	r24, Y+15	; 0x0f
     806:	98 89       	ldd	r25, Y+16	; 0x10
     808:	2b e0       	ldi	r18, 0x0B	; 11
     80a:	fe 01       	movw	r30, r28
     80c:	34 96       	adiw	r30, 0x04	; 4
     80e:	dc 01       	movw	r26, r24
     810:	01 90       	ld	r0, Z+
     812:	0d 92       	st	X+, r0
     814:	2a 95       	dec	r18
     816:	e1 f7       	brne	.-8      	; 0x810 <CAN_receiveMessage+0x170>
     818:	8f 85       	ldd	r24, Y+15	; 0x0f
     81a:	98 89       	ldd	r25, Y+16	; 0x10
     81c:	61 96       	adiw	r28, 0x11	; 17
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	de bf       	out	0x3e, r29	; 62
     824:	0f be       	out	0x3f, r0	; 63
     826:	cd bf       	out	0x3d, r28	; 61
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	0f 91       	pop	r16
     830:	08 95       	ret

00000832 <CAN_printMessage>:
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	00 d0       	rcall	.+0      	; 0x838 <CAN_printMessage+0x6>
     838:	1f 92       	push	r1
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	9b 83       	std	Y+3, r25	; 0x03
     840:	8a 83       	std	Y+2, r24	; 0x02
     842:	8a 81       	ldd	r24, Y+2	; 0x02
     844:	9b 81       	ldd	r25, Y+3	; 0x03
     846:	fc 01       	movw	r30, r24
     848:	82 81       	ldd	r24, Z+2	; 0x02
     84a:	28 2f       	mov	r18, r24
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	8a 81       	ldd	r24, Y+2	; 0x02
     850:	9b 81       	ldd	r25, Y+3	; 0x03
     852:	fc 01       	movw	r30, r24
     854:	80 81       	ld	r24, Z
     856:	91 81       	ldd	r25, Z+1	; 0x01
     858:	43 2f       	mov	r20, r19
     85a:	4f 93       	push	r20
     85c:	2f 93       	push	r18
     85e:	29 2f       	mov	r18, r25
     860:	2f 93       	push	r18
     862:	8f 93       	push	r24
     864:	88 e1       	ldi	r24, 0x18	; 24
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	89 2f       	mov	r24, r25
     86a:	8f 93       	push	r24
     86c:	88 e1       	ldi	r24, 0x18	; 24
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	8f 93       	push	r24
     872:	0e 94 cc 0c 	call	0x1998	; 0x1998 <printf>
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	19 82       	std	Y+1, r1	; 0x01
     884:	1f c0       	rjmp	.+62     	; 0x8c4 <CAN_printMessage+0x92>
     886:	89 81       	ldd	r24, Y+1	; 0x01
     888:	88 2f       	mov	r24, r24
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	2a 81       	ldd	r18, Y+2	; 0x02
     88e:	3b 81       	ldd	r19, Y+3	; 0x03
     890:	82 0f       	add	r24, r18
     892:	93 1f       	adc	r25, r19
     894:	03 96       	adiw	r24, 0x03	; 3
     896:	fc 01       	movw	r30, r24
     898:	80 81       	ld	r24, Z
     89a:	88 2f       	mov	r24, r24
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	29 2f       	mov	r18, r25
     8a0:	2f 93       	push	r18
     8a2:	8f 93       	push	r24
     8a4:	84 e4       	ldi	r24, 0x44	; 68
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	89 2f       	mov	r24, r25
     8aa:	8f 93       	push	r24
     8ac:	84 e4       	ldi	r24, 0x44	; 68
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	8f 93       	push	r24
     8b2:	0e 94 cc 0c 	call	0x1998	; 0x1998 <printf>
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	89 81       	ldd	r24, Y+1	; 0x01
     8c0:	8f 5f       	subi	r24, 0xFF	; 255
     8c2:	89 83       	std	Y+1, r24	; 0x01
     8c4:	8a 81       	ldd	r24, Y+2	; 0x02
     8c6:	9b 81       	ldd	r25, Y+3	; 0x03
     8c8:	fc 01       	movw	r30, r24
     8ca:	92 81       	ldd	r25, Z+2	; 0x02
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
     8ce:	89 17       	cp	r24, r25
     8d0:	d0 f2       	brcs	.-76     	; 0x886 <CAN_printMessage+0x54>
     8d2:	8a e0       	ldi	r24, 0x0A	; 10
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <putchar>
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	08 95       	ret

000008e6 <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     8e6:	95 b7       	in	r25, 0x35	; 53
     8e8:	90 68       	ori	r25, 0x80	; 128
     8ea:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     8ec:	96 b7       	in	r25, 0x36	; 54
     8ee:	98 60       	ori	r25, 0x08	; 8
     8f0:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     8f2:	88 23       	and	r24, r24
     8f4:	19 f0       	breq	.+6      	; 0x8fc <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     8f6:	80 b7       	in	r24, 0x30	; 48
     8f8:	80 62       	ori	r24, 0x20	; 32
     8fa:	80 bf       	out	0x30, r24	; 48
     8fc:	08 95       	ret

000008fe <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     8fe:	fc 01       	movw	r30, r24
     900:	80 81       	ld	r24, Z
	return val;
}
     902:	08 95       	ret

00000904 <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     904:	fc 01       	movw	r30, r24
     906:	60 83       	st	Z, r22
     908:	08 95       	ret

0000090a <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     90a:	10 92 68 02 	sts	0x0268, r1
     90e:	10 92 67 02 	sts	0x0267, r1
	currentPosition.Y_abs = 0;
     912:	10 92 6a 02 	sts	0x026A, r1
     916:	10 92 69 02 	sts	0x0269, r1
	currentPosition.X_per = 0;
     91a:	10 92 6c 02 	sts	0x026C, r1
     91e:	10 92 6b 02 	sts	0x026B, r1
	currentPosition.Y_per = 0;
     922:	10 92 6e 02 	sts	0x026E, r1
     926:	10 92 6d 02 	sts	0x026D, r1
	currentDirection = CENTRE;
     92a:	10 92 66 02 	sts	0x0266, r1
     92e:	08 95       	ret

00000930 <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     934:	59 d4       	rcall	.+2226   	; 0x11e8 <OLED_clear>
     936:	60 e0       	ldi	r22, 0x00	; 0
	OLED_bufferGoto(0,0);
     938:	70 e0       	ldi	r23, 0x00	; 0
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	50 d5       	rcall	.+2720   	; 0x13e0 <OLED_bufferGoto>
     940:	88 e8       	ldi	r24, 0x88	; 136
     942:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     944:	8c d5       	rcall	.+2840   	; 0x145e <OLED_printString>
     946:	2f ef       	ldi	r18, 0xFF	; 255
     948:	8f ef       	ldi	r24, 0xFF	; 255
     94a:	92 e0       	ldi	r25, 0x02	; 2
     94c:	21 50       	subi	r18, 0x01	; 1
     94e:	80 40       	sbci	r24, 0x00	; 0
     950:	90 40       	sbci	r25, 0x00	; 0
     952:	e1 f7       	brne	.-8      	; 0x94c <JOY_calibrate+0x1c>
     954:	00 c0       	rjmp	.+0      	; 0x956 <JOY_calibrate+0x26>
     956:	00 c0       	rjmp	.+0      	; 0x958 <JOY_calibrate+0x28>
     958:	c4 e1       	ldi	r28, 0x14	; 20
     95a:	d0 e0       	ldi	r29, 0x00	; 0
     95c:	60 91 06 01 	lds	r22, 0x0106
     960:	70 91 07 01 	lds	r23, 0x0107
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     964:	82 e0       	ldi	r24, 0x02	; 2
     966:	5a d6       	rcall	.+3252   	; 0x161c <ADC_request>
     968:	2f ef       	ldi	r18, 0xFF	; 255
     96a:	8f e1       	ldi	r24, 0x1F	; 31
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	21 50       	subi	r18, 0x01	; 1
     970:	80 40       	sbci	r24, 0x00	; 0
     972:	90 40       	sbci	r25, 0x00	; 0
     974:	e1 f7       	brne	.-8      	; 0x96e <JOY_calibrate+0x3e>
     976:	00 c0       	rjmp	.+0      	; 0x978 <JOY_calibrate+0x48>
     978:	00 00       	nop
     97a:	80 91 06 01 	lds	r24, 0x0106
     97e:	90 91 07 01 	lds	r25, 0x0107
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     982:	70 d6       	rcall	.+3296   	; 0x1664 <ADC_read>
     984:	90 91 0d 01 	lds	r25, 0x010D
     988:	98 17       	cp	r25, r24
     98a:	10 f4       	brcc	.+4      	; 0x990 <JOY_calibrate+0x60>
     98c:	80 93 0d 01 	sts	0x010D, r24
		
		if(temp > calR) {calR = temp;}
     990:	21 97       	sbiw	r28, 0x01	; 1
     992:	20 97       	sbiw	r28, 0x00	; 0
     994:	19 f7       	brne	.-58     	; 0x95c <JOY_calibrate+0x2c>
     996:	60 e0       	ldi	r22, 0x00	; 0
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	81 e0       	ldi	r24, 0x01	; 1
	OLED_bufferGoto(0,0);
	OLED_printString("JOY RIGHT");
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	20 d5       	rcall	.+2624   	; 0x13e0 <OLED_bufferGoto>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_bufferGoto(1,0);
     9a0:	82 e9       	ldi	r24, 0x92	; 146
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	5c d5       	rcall	.+2744   	; 0x145e <OLED_printString>
     9a6:	2f ef       	ldi	r18, 0xFF	; 255
     9a8:	8f ef       	ldi	r24, 0xFF	; 255
     9aa:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("JOY LEFT");
     9ac:	21 50       	subi	r18, 0x01	; 1
     9ae:	80 40       	sbci	r24, 0x00	; 0
     9b0:	90 40       	sbci	r25, 0x00	; 0
     9b2:	e1 f7       	brne	.-8      	; 0x9ac <JOY_calibrate+0x7c>
     9b4:	00 c0       	rjmp	.+0      	; 0x9b6 <JOY_calibrate+0x86>
     9b6:	00 c0       	rjmp	.+0      	; 0x9b8 <JOY_calibrate+0x88>
     9b8:	c4 e1       	ldi	r28, 0x14	; 20
     9ba:	d0 e0       	ldi	r29, 0x00	; 0
     9bc:	60 91 06 01 	lds	r22, 0x0106
     9c0:	70 91 07 01 	lds	r23, 0x0107
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	2a d6       	rcall	.+3156   	; 0x161c <ADC_request>
     9c8:	2f ef       	ldi	r18, 0xFF	; 255
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     9ca:	8f e1       	ldi	r24, 0x1F	; 31
     9cc:	91 e0       	ldi	r25, 0x01	; 1
     9ce:	21 50       	subi	r18, 0x01	; 1
     9d0:	80 40       	sbci	r24, 0x00	; 0
     9d2:	90 40       	sbci	r25, 0x00	; 0
     9d4:	e1 f7       	brne	.-8      	; 0x9ce <JOY_calibrate+0x9e>
     9d6:	00 c0       	rjmp	.+0      	; 0x9d8 <JOY_calibrate+0xa8>
     9d8:	00 00       	nop
     9da:	80 91 06 01 	lds	r24, 0x0106
     9de:	90 91 07 01 	lds	r25, 0x0107
     9e2:	40 d6       	rcall	.+3200   	; 0x1664 <ADC_read>
     9e4:	90 91 0c 01 	lds	r25, 0x010C
     9e8:	89 17       	cp	r24, r25
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     9ea:	10 f4       	brcc	.+4      	; 0x9f0 <JOY_calibrate+0xc0>
     9ec:	80 93 0c 01 	sts	0x010C, r24
     9f0:	21 97       	sbiw	r28, 0x01	; 1
     9f2:	20 97       	sbiw	r28, 0x00	; 0
     9f4:	19 f7       	brne	.-58     	; 0x9bc <JOY_calibrate+0x8c>
		
		if(temp < calL) {calL = temp;}
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	82 e0       	ldi	r24, 0x02	; 2
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	f0 d4       	rcall	.+2528   	; 0x13e0 <OLED_bufferGoto>
     a00:	8b e9       	ldi	r24, 0x9B	; 155
     a02:	91 e0       	ldi	r25, 0x01	; 1
	OLED_bufferGoto(1,0);
	OLED_printString("JOY LEFT");
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     a04:	2c d5       	rcall	.+2648   	; 0x145e <OLED_printString>
     a06:	2f ef       	ldi	r18, 0xFF	; 255
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_bufferGoto(2,0);
     a08:	8f ef       	ldi	r24, 0xFF	; 255
     a0a:	92 e0       	ldi	r25, 0x02	; 2
     a0c:	21 50       	subi	r18, 0x01	; 1
     a0e:	80 40       	sbci	r24, 0x00	; 0
     a10:	90 40       	sbci	r25, 0x00	; 0
     a12:	e1 f7       	brne	.-8      	; 0xa0c <JOY_calibrate+0xdc>
	OLED_printString("JOY UP");
     a14:	00 c0       	rjmp	.+0      	; 0xa16 <JOY_calibrate+0xe6>
     a16:	00 c0       	rjmp	.+0      	; 0xa18 <JOY_calibrate+0xe8>
     a18:	c4 e1       	ldi	r28, 0x14	; 20
     a1a:	d0 e0       	ldi	r29, 0x00	; 0
     a1c:	60 91 06 01 	lds	r22, 0x0106
     a20:	70 91 07 01 	lds	r23, 0x0107
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	fa d5       	rcall	.+3060   	; 0x161c <ADC_request>
     a28:	2f ef       	ldi	r18, 0xFF	; 255
     a2a:	8f e1       	ldi	r24, 0x1F	; 31
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	21 50       	subi	r18, 0x01	; 1
     a30:	80 40       	sbci	r24, 0x00	; 0
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     a32:	90 40       	sbci	r25, 0x00	; 0
     a34:	e1 f7       	brne	.-8      	; 0xa2e <JOY_calibrate+0xfe>
     a36:	00 c0       	rjmp	.+0      	; 0xa38 <JOY_calibrate+0x108>
     a38:	00 00       	nop
     a3a:	80 91 06 01 	lds	r24, 0x0106
     a3e:	90 91 07 01 	lds	r25, 0x0107
     a42:	10 d6       	rcall	.+3104   	; 0x1664 <ADC_read>
     a44:	90 91 0b 01 	lds	r25, 0x010B
     a48:	98 17       	cp	r25, r24
     a4a:	10 f4       	brcc	.+4      	; 0xa50 <JOY_calibrate+0x120>
     a4c:	80 93 0b 01 	sts	0x010B, r24
     a50:	21 97       	sbiw	r28, 0x01	; 1
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     a52:	20 97       	sbiw	r28, 0x00	; 0
     a54:	19 f7       	brne	.-58     	; 0xa1c <JOY_calibrate+0xec>
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	83 e0       	ldi	r24, 0x03	; 3
     a5c:	90 e0       	ldi	r25, 0x00	; 0
		
		if(temp > calUp) {calUp = temp;}
     a5e:	c0 d4       	rcall	.+2432   	; 0x13e0 <OLED_bufferGoto>
     a60:	82 ea       	ldi	r24, 0xA2	; 162
     a62:	91 e0       	ldi	r25, 0x01	; 1
     a64:	fc d4       	rcall	.+2552   	; 0x145e <OLED_printString>
     a66:	2f ef       	ldi	r18, 0xFF	; 255
     a68:	8f ef       	ldi	r24, 0xFF	; 255
     a6a:	92 e0       	ldi	r25, 0x02	; 2
	OLED_bufferGoto(2,0);
	OLED_printString("JOY UP");
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     a6c:	21 50       	subi	r18, 0x01	; 1
     a6e:	80 40       	sbci	r24, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_bufferGoto(3,0);
     a70:	90 40       	sbci	r25, 0x00	; 0
     a72:	e1 f7       	brne	.-8      	; 0xa6c <JOY_calibrate+0x13c>
     a74:	00 c0       	rjmp	.+0      	; 0xa76 <JOY_calibrate+0x146>
     a76:	00 c0       	rjmp	.+0      	; 0xa78 <JOY_calibrate+0x148>
     a78:	c4 e1       	ldi	r28, 0x14	; 20
     a7a:	d0 e0       	ldi	r29, 0x00	; 0
	OLED_printString("JOY DOWN");
     a7c:	60 91 06 01 	lds	r22, 0x0106
     a80:	70 91 07 01 	lds	r23, 0x0107
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	ca d5       	rcall	.+2964   	; 0x161c <ADC_request>
     a88:	2f ef       	ldi	r18, 0xFF	; 255
     a8a:	8f e1       	ldi	r24, 0x1F	; 31
     a8c:	91 e0       	ldi	r25, 0x01	; 1
     a8e:	21 50       	subi	r18, 0x01	; 1
     a90:	80 40       	sbci	r24, 0x00	; 0
     a92:	90 40       	sbci	r25, 0x00	; 0
     a94:	e1 f7       	brne	.-8      	; 0xa8e <JOY_calibrate+0x15e>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <JOY_calibrate+0x168>
     a98:	00 00       	nop
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     a9a:	80 91 06 01 	lds	r24, 0x0106
     a9e:	90 91 07 01 	lds	r25, 0x0107
     aa2:	e0 d5       	rcall	.+3008   	; 0x1664 <ADC_read>
     aa4:	90 91 0a 01 	lds	r25, 0x010A
     aa8:	89 17       	cp	r24, r25
     aaa:	10 f4       	brcc	.+4      	; 0xab0 <JOY_calibrate+0x180>
     aac:	80 93 0a 01 	sts	0x010A, r24
     ab0:	21 97       	sbiw	r28, 0x01	; 1
     ab2:	20 97       	sbiw	r28, 0x00	; 0
     ab4:	19 f7       	brne	.-58     	; 0xa7c <JOY_calibrate+0x14c>
     ab6:	20 91 0b 01 	lds	r18, 0x010B
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     aba:	80 91 0a 01 	lds	r24, 0x010A
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	28 1b       	sub	r18, r24
     ac2:	31 09       	sbc	r19, r1
     ac4:	c9 01       	movw	r24, r18
		
		if(temp < calDown) {calDown = temp;}
     ac6:	99 23       	and	r25, r25
     ac8:	0c f4       	brge	.+2      	; 0xacc <JOY_calibrate+0x19c>
     aca:	01 96       	adiw	r24, 0x01	; 1
     acc:	95 95       	asr	r25
     ace:	87 95       	ror	r24
     ad0:	80 93 09 01 	sts	0x0109, r24
	OLED_bufferGoto(3,0);
	OLED_printString("JOY DOWN");
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     ad4:	20 91 0d 01 	lds	r18, 0x010D
	}
	
	
	//printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
	
	meanVert = (calUp - calDown)/2;
     ad8:	80 91 0c 01 	lds	r24, 0x010C
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	28 1b       	sub	r18, r24
     ae0:	31 09       	sbc	r19, r1
     ae2:	c9 01       	movw	r24, r18
     ae4:	99 23       	and	r25, r25
     ae6:	0c f4       	brge	.+2      	; 0xaea <JOY_calibrate+0x1ba>
     ae8:	01 96       	adiw	r24, 0x01	; 1
     aea:	95 95       	asr	r25
     aec:	87 95       	ror	r24
     aee:	80 93 08 01 	sts	0x0108, r24
     af2:	60 e0       	ldi	r22, 0x00	; 0
     af4:	70 e0       	ldi	r23, 0x00	; 0
	meanHor = (calR - calL)/2;
     af6:	84 e0       	ldi	r24, 0x04	; 4
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	72 d4       	rcall	.+2276   	; 0x13e0 <OLED_bufferGoto>
     afc:	8b ea       	ldi	r24, 0xAB	; 171
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	ae d4       	rcall	.+2396   	; 0x145e <OLED_printString>
     b02:	2f ef       	ldi	r18, 0xFF	; 255
     b04:	8f ef       	ldi	r24, 0xFF	; 255
     b06:	9e e0       	ldi	r25, 0x0E	; 14
     b08:	21 50       	subi	r18, 0x01	; 1
     b0a:	80 40       	sbci	r24, 0x00	; 0
     b0c:	90 40       	sbci	r25, 0x00	; 0
     b0e:	e1 f7       	brne	.-8      	; 0xb08 <JOY_calibrate+0x1d8>
     b10:	00 c0       	rjmp	.+0      	; 0xb12 <JOY_calibrate+0x1e2>
     b12:	00 00       	nop
	
	OLED_bufferGoto(4,0);
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	08 95       	ret

00000b1a <JOY_requestCurrentPosition>:
     b1a:	88 37       	cpi	r24, 0x78	; 120
     b1c:	39 f4       	brne	.+14     	; 0xb2c <JOY_requestCurrentPosition+0x12>
     b1e:	60 91 06 01 	lds	r22, 0x0106
	OLED_printString("CALIB DONE");
     b22:	70 91 07 01 	lds	r23, 0x0107
     b26:	82 e0       	ldi	r24, 0x02	; 2
     b28:	79 c5       	rjmp	.+2802   	; 0x161c <ADC_request>
     b2a:	08 95       	ret
     b2c:	89 37       	cpi	r24, 0x79	; 121
     b2e:	31 f4       	brne	.+12     	; 0xb3c <JOY_requestCurrentPosition+0x22>
     b30:	60 91 06 01 	lds	r22, 0x0106
     b34:	70 91 07 01 	lds	r23, 0x0107
     b38:	81 e0       	ldi	r24, 0x01	; 1
	//printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
	_delay_ms(1000);
}
     b3a:	70 c5       	rjmp	.+2784   	; 0x161c <ADC_request>
     b3c:	08 95       	ret

00000b3e <JOY_updatePosition>:
     b3e:	88 37       	cpi	r24, 0x78	; 120
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
	{
		ADC_request(Y_channel, adc_ext_ram);
     b40:	f9 f4       	brne	.+62     	; 0xb80 <JOY_updatePosition+0x42>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     b42:	80 91 06 01 	lds	r24, 0x0106
     b46:	90 91 07 01 	lds	r25, 0x0107
     b4a:	8c d5       	rcall	.+2840   	; 0x1664 <ADC_read>
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	90 93 68 02 	sts	0x0268, r25
     b52:	80 93 67 02 	sts	0x0267, r24
     b56:	20 91 08 01 	lds	r18, 0x0108
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     b5a:	60 91 08 01 	lds	r22, 0x0108
     b5e:	ac 01       	movw	r20, r24
     b60:	42 1b       	sub	r20, r18
     b62:	51 09       	sbc	r21, r1
     b64:	9a 01       	movw	r18, r20
     b66:	44 e6       	ldi	r20, 0x64	; 100
     b68:	42 9f       	mul	r20, r18
     b6a:	c0 01       	movw	r24, r0
     b6c:	43 9f       	mul	r20, r19
     b6e:	90 0d       	add	r25, r0
     b70:	11 24       	eor	r1, r1
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	79 d5       	rcall	.+2802   	; 0x1668 <__divmodhi4>
     b76:	70 93 6c 02 	sts	0x026C, r23
     b7a:	60 93 6b 02 	sts	0x026B, r22
     b7e:	08 95       	ret
     b80:	89 37       	cpi	r24, 0x79	; 121
     b82:	f1 f4       	brne	.+60     	; 0xbc0 <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     b84:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     b88:	90 91 07 01 	lds	r25, 0x0107
     b8c:	6b d5       	rcall	.+2774   	; 0x1664 <ADC_read>
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	90 93 6a 02 	sts	0x026A, r25
     b94:	80 93 69 02 	sts	0x0269, r24
     b98:	20 91 09 01 	lds	r18, 0x0109
     b9c:	60 91 09 01 	lds	r22, 0x0109
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     ba0:	ac 01       	movw	r20, r24
     ba2:	42 1b       	sub	r20, r18
     ba4:	51 09       	sbc	r21, r1
     ba6:	9a 01       	movw	r18, r20
     ba8:	44 e6       	ldi	r20, 0x64	; 100
     baa:	42 9f       	mul	r20, r18
     bac:	c0 01       	movw	r24, r0
     bae:	43 9f       	mul	r20, r19
     bb0:	90 0d       	add	r25, r0
     bb2:	11 24       	eor	r1, r1
     bb4:	70 e0       	ldi	r23, 0x00	; 0
     bb6:	58 d5       	rcall	.+2736   	; 0x1668 <__divmodhi4>
     bb8:	70 93 6e 02 	sts	0x026E, r23
     bbc:	60 93 6d 02 	sts	0x026D, r22
     bc0:	08 95       	ret

00000bc2 <JOY_calculateDirection>:
     bc2:	80 91 6b 02 	lds	r24, 0x026B
     bc6:	90 91 6c 02 	lds	r25, 0x026C
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     bca:	8b 35       	cpi	r24, 0x5B	; 91
     bcc:	91 05       	cpc	r25, r1
     bce:	24 f0       	brlt	.+8      	; 0xbd8 <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     bd0:	83 e0       	ldi	r24, 0x03	; 3
     bd2:	80 93 66 02 	sts	0x0266, r24
     bd6:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     bd8:	86 3a       	cpi	r24, 0xA6	; 166
     bda:	9f 4f       	sbci	r25, 0xFF	; 255
     bdc:	24 f4       	brge	.+8      	; 0xbe6 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     bde:	84 e0       	ldi	r24, 0x04	; 4
     be0:	80 93 66 02 	sts	0x0266, r24
     be4:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     be6:	80 91 6d 02 	lds	r24, 0x026D
     bea:	90 91 6e 02 	lds	r25, 0x026E
     bee:	8b 35       	cpi	r24, 0x5B	; 91
     bf0:	91 05       	cpc	r25, r1
     bf2:	24 f0       	brlt	.+8      	; 0xbfc <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	80 93 66 02 	sts	0x0266, r24
     bfa:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     bfc:	86 3a       	cpi	r24, 0xA6	; 166
     bfe:	9f 4f       	sbci	r25, 0xFF	; 255
     c00:	24 f4       	brge	.+8      	; 0xc0a <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     c02:	82 e0       	ldi	r24, 0x02	; 2
     c04:	80 93 66 02 	sts	0x0266, r24
     c08:	08 95       	ret
	else{currentDirection = CENTRE;}
     c0a:	10 92 66 02 	sts	0x0266, r1
     c0e:	08 95       	ret

00000c10 <JOY_getPosition>:

//------------------------------------------------------------------------------
// This function returns the current position of the Joystick.
// It is a struct with the four parameters X_abs, Y_abs, X_per and Y_per
JOY_position_t JOY_getPosition()
{
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
     c18:	28 97       	sbiw	r28, 0x08	; 8
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	f8 94       	cli
     c1e:	de bf       	out	0x3e, r29	; 62
     c20:	0f be       	out	0x3f, r0	; 63
     c22:	cd bf       	out	0x3d, r28	; 61
	JOY_requestCurrentPosition('x');
     c24:	88 e7       	ldi	r24, 0x78	; 120
     c26:	79 df       	rcall	.-270    	; 0xb1a <JOY_requestCurrentPosition>
     c28:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c2a:	8a 95       	dec	r24
     c2c:	f1 f7       	brne	.-4      	; 0xc2a <JOY_getPosition+0x1a>
     c2e:	00 00       	nop
     c30:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     c32:	85 df       	rcall	.-246    	; 0xb3e <JOY_updatePosition>
     c34:	89 e7       	ldi	r24, 0x79	; 121
     c36:	71 df       	rcall	.-286    	; 0xb1a <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     c38:	82 e6       	ldi	r24, 0x62	; 98
     c3a:	8a 95       	dec	r24
     c3c:	f1 f7       	brne	.-4      	; 0xc3a <JOY_getPosition+0x2a>
     c3e:	00 00       	nop
     c40:	89 e7       	ldi	r24, 0x79	; 121
     c42:	7d df       	rcall	.-262    	; 0xb3e <JOY_updatePosition>
     c44:	88 e0       	ldi	r24, 0x08	; 8
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     c46:	e7 e6       	ldi	r30, 0x67	; 103
     c48:	f2 e0       	ldi	r31, 0x02	; 2
     c4a:	de 01       	movw	r26, r28
	return currentPosition;
     c4c:	11 96       	adiw	r26, 0x01	; 1
     c4e:	01 90       	ld	r0, Z+
     c50:	0d 92       	st	X+, r0
     c52:	8a 95       	dec	r24
     c54:	e1 f7       	brne	.-8      	; 0xc4e <JOY_getPosition+0x3e>
     c56:	29 81       	ldd	r18, Y+1	; 0x01
     c58:	3a 81       	ldd	r19, Y+2	; 0x02
     c5a:	4b 81       	ldd	r20, Y+3	; 0x03
     c5c:	5c 81       	ldd	r21, Y+4	; 0x04
     c5e:	6d 81       	ldd	r22, Y+5	; 0x05
     c60:	7e 81       	ldd	r23, Y+6	; 0x06
     c62:	8f 81       	ldd	r24, Y+7	; 0x07
     c64:	98 85       	ldd	r25, Y+8	; 0x08
     c66:	28 96       	adiw	r28, 0x08	; 8
     c68:	0f b6       	in	r0, 0x3f	; 63
}
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	08 95       	ret

00000c78 <JOY_getDirection>:
     c78:	88 e7       	ldi	r24, 0x78	; 120
     c7a:	4f df       	rcall	.-354    	; 0xb1a <JOY_requestCurrentPosition>
     c7c:	82 e6       	ldi	r24, 0x62	; 98
     c7e:	8a 95       	dec	r24
     c80:	f1 f7       	brne	.-4      	; 0xc7e <JOY_getDirection+0x6>
     c82:	00 00       	nop
     c84:	88 e7       	ldi	r24, 0x78	; 120
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     c86:	5b df       	rcall	.-330    	; 0xb3e <JOY_updatePosition>
     c88:	89 e7       	ldi	r24, 0x79	; 121
     c8a:	47 df       	rcall	.-370    	; 0xb1a <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     c8c:	82 e6       	ldi	r24, 0x62	; 98
     c8e:	8a 95       	dec	r24
     c90:	f1 f7       	brne	.-4      	; 0xc8e <JOY_getDirection+0x16>
     c92:	00 00       	nop
     c94:	89 e7       	ldi	r24, 0x79	; 121
     c96:	53 df       	rcall	.-346    	; 0xb3e <JOY_updatePosition>
     c98:	94 df       	rcall	.-216    	; 0xbc2 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     c9a:	80 91 66 02 	lds	r24, 0x0266
     c9e:	08 95       	ret

00000ca0 <MCP2515_reset>:
	//printf("finished MCP2515_init\n");
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
     ca0:	cf 93       	push	r28
     ca2:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
     ca4:	92 d4       	rcall	.+2340   	; 0x15ca <SPI_activateSlave>
     ca6:	80 ec       	ldi	r24, 0xC0	; 192
	SPI_send(MCP_RESET);
     ca8:	86 d4       	rcall	.+2316   	; 0x15b6 <SPI_send>
     caa:	8c ec       	ldi	r24, 0xCC	; 204
     cac:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cae:	01 97       	sbiw	r24, 0x01	; 1
     cb0:	f1 f7       	brne	.-4      	; 0xcae <MCP2515_reset+0xe>
     cb2:	00 c0       	rjmp	.+0      	; 0xcb4 <MCP2515_reset+0x14>
     cb4:	00 00       	nop
     cb6:	8c 2f       	mov	r24, r28
     cb8:	8c d4       	rcall	.+2328   	; 0x15d2 <SPI_deactivateSlave>
	_delay_ms(1);
	SPI_deactivateSlave(slave);
     cba:	8f ef       	ldi	r24, 0xFF	; 255
     cbc:	9f e2       	ldi	r25, 0x2F	; 47
     cbe:	01 97       	sbiw	r24, 0x01	; 1
     cc0:	f1 f7       	brne	.-4      	; 0xcbe <MCP2515_reset+0x1e>
     cc2:	00 c0       	rjmp	.+0      	; 0xcc4 <MCP2515_reset+0x24>
     cc4:	00 00       	nop
     cc6:	cf 91       	pop	r28
     cc8:	08 95       	ret

00000cca <MCP2515_read>:
     cca:	cf 93       	push	r28
	_delay_ms(10);
}
     ccc:	df 93       	push	r29
     cce:	c8 2f       	mov	r28, r24

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
     cd0:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
     cd2:	7b d4       	rcall	.+2294   	; 0x15ca <SPI_activateSlave>
     cd4:	83 e0       	ldi	r24, 0x03	; 3
	SPI_send(MCP_READ);
     cd6:	6f d4       	rcall	.+2270   	; 0x15b6 <SPI_send>
     cd8:	8c ec       	ldi	r24, 0xCC	; 204
     cda:	94 e0       	ldi	r25, 0x04	; 4
     cdc:	01 97       	sbiw	r24, 0x01	; 1
     cde:	f1 f7       	brne	.-4      	; 0xcdc <MCP2515_read+0x12>
     ce0:	00 c0       	rjmp	.+0      	; 0xce2 <MCP2515_read+0x18>
     ce2:	00 00       	nop
     ce4:	8d 2f       	mov	r24, r29
     ce6:	67 d4       	rcall	.+2254   	; 0x15b6 <SPI_send>
	_delay_ms(1);
	SPI_send(address);
     ce8:	6a d4       	rcall	.+2260   	; 0x15be <SPI_receive>
     cea:	d8 2f       	mov	r29, r24
     cec:	8c 2f       	mov	r24, r28
	
	uint8_t result;
	result = SPI_receive();
     cee:	71 d4       	rcall	.+2274   	; 0x15d2 <SPI_deactivateSlave>
     cf0:	8d 2f       	mov	r24, r29
     cf2:	df 91       	pop	r29
	
	SPI_deactivateSlave(slave);
     cf4:	cf 91       	pop	r28
     cf6:	08 95       	ret

00000cf8 <MCP2515_init>:
     cf8:	80 e0       	ldi	r24, 0x00	; 0
	return result;
}
     cfa:	d2 df       	rcall	.-92     	; 0xca0 <MCP2515_reset>
     cfc:	6e e0       	ldi	r22, 0x0E	; 14
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	e4 df       	rcall	.-56     	; 0xcca <MCP2515_read>
uint8_t MCP2515_init()
{
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
	// Self-test
	uint8_t value;
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
     d02:	98 2f       	mov	r25, r24
     d04:	90 7e       	andi	r25, 0xE0	; 224
	//printf("CANSTAT: %#x\n", value);
	if((value & MODE_MASK) != MODE_CONFIG) 
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 38       	cpi	r25, 0x80	; 128
     d0a:	09 f4       	brne	.+2      	; 0xd0e <MCP2515_init+0x16>
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	08 95       	ret

00000d10 <MCP2515_write>:
     d10:	1f 93       	push	r17
		return 1;
	}
	//
	//printf("finished MCP2515_init\n");
	return 0;
}
     d12:	cf 93       	push	r28
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_write(SPI_SLAVES slave, uint8_t address, uint8_t data)
{
     d14:	df 93       	push	r29
     d16:	c8 2f       	mov	r28, r24
     d18:	16 2f       	mov	r17, r22
     d1a:	d4 2f       	mov	r29, r20
	SPI_activateSlave(slave);
     d1c:	56 d4       	rcall	.+2220   	; 0x15ca <SPI_activateSlave>
     d1e:	82 e0       	ldi	r24, 0x02	; 2
	SPI_send(MCP_WRITE);
     d20:	4a d4       	rcall	.+2196   	; 0x15b6 <SPI_send>
     d22:	81 2f       	mov	r24, r17
     d24:	48 d4       	rcall	.+2192   	; 0x15b6 <SPI_send>
	SPI_send(address);
     d26:	8d 2f       	mov	r24, r29
     d28:	46 d4       	rcall	.+2188   	; 0x15b6 <SPI_send>
     d2a:	8c 2f       	mov	r24, r28
	SPI_send(data);
     d2c:	52 d4       	rcall	.+2212   	; 0x15d2 <SPI_deactivateSlave>
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
	SPI_deactivateSlave(slave);
     d32:	1f 91       	pop	r17
     d34:	08 95       	ret

00000d36 <MCP2515_bitModify>:
     d36:	0f 93       	push	r16
}
     d38:	1f 93       	push	r17
     d3a:	cf 93       	push	r28
     d3c:	df 93       	push	r29
     d3e:	c8 2f       	mov	r28, r24
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_bitModify(SPI_SLAVES slave, uint8_t register2change, uint8_t mask, uint8_t newValue)
{
     d40:	06 2f       	mov	r16, r22
     d42:	14 2f       	mov	r17, r20
     d44:	d2 2f       	mov	r29, r18
	SPI_activateSlave(slave);
     d46:	41 d4       	rcall	.+2178   	; 0x15ca <SPI_activateSlave>
     d48:	85 e0       	ldi	r24, 0x05	; 5
	
	SPI_send(MCP_BITMOD);
     d4a:	35 d4       	rcall	.+2154   	; 0x15b6 <SPI_send>
     d4c:	80 2f       	mov	r24, r16
     d4e:	33 d4       	rcall	.+2150   	; 0x15b6 <SPI_send>
	SPI_send(register2change);
     d50:	81 2f       	mov	r24, r17
     d52:	31 d4       	rcall	.+2146   	; 0x15b6 <SPI_send>
     d54:	8d 2f       	mov	r24, r29
	SPI_send(mask);
     d56:	2f d4       	rcall	.+2142   	; 0x15b6 <SPI_send>
     d58:	8c 2f       	mov	r24, r28
     d5a:	3b d4       	rcall	.+2166   	; 0x15d2 <SPI_deactivateSlave>
	SPI_send(newValue);
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
	
	SPI_deactivateSlave(slave);
     d62:	0f 91       	pop	r16
     d64:	08 95       	ret

00000d66 <startGame>:

static int menuFrameOffset = 10; //Columns from left frame border
//******************************************************************************************

void startGame()
{
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
	OLED_clear();
     d6a:	3e d2       	rcall	.+1148   	; 0x11e8 <OLED_clear>
     d6c:	60 e0       	ldi	r22, 0x00	; 0
	OLED_bufferGoto(0,0);
     d6e:	70 e0       	ldi	r23, 0x00	; 0
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	35 d3       	rcall	.+1642   	; 0x13e0 <OLED_bufferGoto>
     d76:	86 eb       	ldi	r24, 0xB6	; 182
     d78:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("START");
     d7a:	71 d3       	rcall	.+1762   	; 0x145e <OLED_printString>
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_bufferGoto(3,0);
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	2d d3       	rcall	.+1626   	; 0x13e0 <OLED_bufferGoto>
     d86:	ce e0       	ldi	r28, 0x0E	; 14
     d88:	d0 e0       	ldi	r29, 0x00	; 0
     d8a:	8c eb       	ldi	r24, 0xBC	; 188
     d8c:	91 e0       	ldi	r25, 0x01	; 1
     d8e:	67 d3       	rcall	.+1742   	; 0x145e <OLED_printString>
     d90:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     d92:	8f e7       	ldi	r24, 0x7F	; 127
     d94:	97 e0       	ldi	r25, 0x07	; 7
     d96:	21 50       	subi	r18, 0x01	; 1
     d98:	80 40       	sbci	r24, 0x00	; 0
     d9a:	90 40       	sbci	r25, 0x00	; 0
     d9c:	e1 f7       	brne	.-8      	; 0xd96 <startGame+0x30>
     d9e:	00 c0       	rjmp	.+0      	; 0xda0 <startGame+0x3a>
     da0:	00 00       	nop
     da2:	21 97       	sbiw	r28, 0x01	; 1
     da4:	20 97       	sbiw	r28, 0x00	; 0
     da6:	89 f7       	brne	.-30     	; 0xd8a <startGame+0x24>
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	85 e0       	ldi	r24, 0x05	; 5
	OLED_bufferGoto(0,0);
	OLED_printString("START");
	
	OLED_bufferGoto(3,0);
	
	for(int i = 14; i > 0; i--)
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	17 d3       	rcall	.+1582   	; 0x13e0 <OLED_bufferGoto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_bufferGoto(5,0);
     db2:	8e eb       	ldi	r24, 0xBE	; 190
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	53 d3       	rcall	.+1702   	; 0x145e <OLED_printString>
     db8:	2f ef       	ldi	r18, 0xFF	; 255
     dba:	8f ef       	ldi	r24, 0xFF	; 255
     dbc:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     dbe:	21 50       	subi	r18, 0x01	; 1
     dc0:	80 40       	sbci	r24, 0x00	; 0
     dc2:	90 40       	sbci	r25, 0x00	; 0
     dc4:	e1 f7       	brne	.-8      	; 0xdbe <startGame+0x58>
     dc6:	00 c0       	rjmp	.+0      	; 0xdc8 <startGame+0x62>
     dc8:	00 c0       	rjmp	.+0      	; 0xdca <startGame+0x64>
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	08 95       	ret

00000dd0 <MENU_addMenuItem>:
     dd0:	cf 92       	push	r12
     dd2:	df 92       	push	r13
     dd4:	ef 92       	push	r14
     dd6:	ff 92       	push	r15
	_delay_ms(3000);
}
     dd8:	0f 93       	push	r16
     dda:	1f 93       	push	r17
     ddc:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     dde:	df 93       	push	r29
     de0:	8c 01       	movw	r16, r24
     de2:	7b 01       	movw	r14, r22
     de4:	6a 01       	movw	r12, r20
     de6:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     de8:	80 91 72 02 	lds	r24, 0x0272
     dec:	90 91 73 02 	lds	r25, 0x0273
     df0:	89 2b       	or	r24, r25
     df2:	19 f0       	breq	.+6      	; 0xdfa <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     df4:	87 ec       	ldi	r24, 0xC7	; 199
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	e5 d5       	rcall	.+3018   	; 0x19c4 <puts>
     dfa:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	5b d4       	rcall	.+2230   	; 0x16b6 <malloc>
     e00:	fc 01       	movw	r30, r24
     e02:	90 93 73 02 	sts	0x0273, r25
     e06:	80 93 72 02 	sts	0x0272, r24
     e0a:	f3 82       	std	Z+3, r15	; 0x03
     e0c:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     e0e:	11 83       	std	Z+1, r17	; 0x01
     e10:	00 83       	st	Z, r16
	currItem->name = name;
     e12:	cd 2b       	or	r28, r29
     e14:	39 f0       	breq	.+14     	; 0xe24 <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     e16:	d5 82       	std	Z+5, r13	; 0x05
     e18:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     e1e:	97 83       	std	Z+7, r25	; 0x07
     e20:	86 83       	std	Z+6, r24	; 0x06
     e22:	04 c0       	rjmp	.+8      	; 0xe2c <MENU_addMenuItem+0x5c>
     e24:	15 82       	std	Z+5, r1	; 0x05
     e26:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     e28:	17 82       	std	Z+7, r1	; 0x07
     e2a:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
	}
}
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	df 90       	pop	r13
     e3a:	cf 90       	pop	r12
     e3c:	08 95       	ret

00000e3e <MENU_buildMenus>:
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     e42:	86 e1       	ldi	r24, 0x16	; 22
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	37 d4       	rcall	.+2158   	; 0x16b6 <malloc>
     e48:	ec 01       	movw	r28, r24
     e4a:	90 93 79 02 	sts	0x0279, r25
     e4e:	80 93 78 02 	sts	0x0278, r24
     e52:	8d ed       	ldi	r24, 0xDD	; 221
	mainMenu->menuName = "MainMenu";
     e54:	91 e0       	ldi	r25, 0x01	; 1
     e56:	99 83       	std	Y+1, r25	; 0x01
     e58:	88 83       	st	Y, r24
     e5a:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     e5c:	1c 8a       	std	Y+20, r1	; 0x14
     e5e:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	9b 83       	std	Y+3, r25	; 0x03
     e64:	8a 83       	std	Y+2, r24	; 0x02
     e66:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	25 d4       	rcall	.+2122   	; 0x16b6 <malloc>
     e6c:	fc 01       	movw	r30, r24
     e6e:	90 93 77 02 	sts	0x0277, r25
     e72:	80 93 76 02 	sts	0x0276, r24
     e76:	86 ee       	ldi	r24, 0xE6	; 230
     e78:	91 e0       	ldi	r25, 0x01	; 1
	difficultyMenu->menuName = "DifficultyMenu";
     e7a:	91 83       	std	Z+1, r25	; 0x01
     e7c:	80 83       	st	Z, r24
     e7e:	d5 8b       	std	Z+21, r29	; 0x15
     e80:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     e82:	83 e0       	ldi	r24, 0x03	; 3
     e84:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     e86:	93 83       	std	Z+3, r25	; 0x03
     e88:	82 83       	std	Z+2, r24	; 0x02
     e8a:	20 e0       	ldi	r18, 0x00	; 0
     e8c:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     e8e:	40 e0       	ldi	r20, 0x00	; 0
     e90:	50 e0       	ldi	r21, 0x00	; 0
     e92:	be 01       	movw	r22, r28
     e94:	85 ef       	ldi	r24, 0xF5	; 245
     e96:	91 e0       	ldi	r25, 0x01	; 1
     e98:	9b df       	rcall	.-202    	; 0xdd0 <MENU_addMenuItem>
     e9a:	60 91 78 02 	lds	r22, 0x0278
     e9e:	70 91 79 02 	lds	r23, 0x0279
	mainMenu->children[0] = currItem;
     ea2:	e0 91 72 02 	lds	r30, 0x0272
     ea6:	f0 91 73 02 	lds	r31, 0x0273
     eaa:	db 01       	movw	r26, r22
     eac:	15 96       	adiw	r26, 0x05	; 5
     eae:	fc 93       	st	X, r31
     eb0:	ee 93       	st	-X, r30
     eb2:	14 97       	sbiw	r26, 0x04	; 4
     eb4:	83 eb       	ldi	r24, 0xB3	; 179
     eb6:	96 e0       	ldi	r25, 0x06	; 6
     eb8:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
     eba:	82 87       	std	Z+10, r24	; 0x0a
     ebc:	40 91 76 02 	lds	r20, 0x0276
     ec0:	50 91 77 02 	lds	r21, 0x0277
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     ec4:	21 e0       	ldi	r18, 0x01	; 1
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	8e ef       	ldi	r24, 0xFE	; 254
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	81 df       	rcall	.-254    	; 0xdd0 <MENU_addMenuItem>
     ece:	60 91 78 02 	lds	r22, 0x0278
     ed2:	70 91 79 02 	lds	r23, 0x0279
	mainMenu->children[1] = currItem;
     ed6:	80 91 72 02 	lds	r24, 0x0272
     eda:	90 91 73 02 	lds	r25, 0x0273
     ede:	fb 01       	movw	r30, r22
     ee0:	97 83       	std	Z+7, r25	; 0x07
     ee2:	86 83       	std	Z+6, r24	; 0x06
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e0       	ldi	r20, 0x00	; 0
     eea:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     eec:	89 e0       	ldi	r24, 0x09	; 9
     eee:	92 e0       	ldi	r25, 0x02	; 2
     ef0:	6f df       	rcall	.-290    	; 0xdd0 <MENU_addMenuItem>
     ef2:	60 91 78 02 	lds	r22, 0x0278
     ef6:	70 91 79 02 	lds	r23, 0x0279
     efa:	80 91 72 02 	lds	r24, 0x0272
	mainMenu->children[2] = currItem;
     efe:	90 91 73 02 	lds	r25, 0x0273
     f02:	db 01       	movw	r26, r22
     f04:	19 96       	adiw	r26, 0x09	; 9
     f06:	9c 93       	st	X, r25
     f08:	8e 93       	st	-X, r24
     f0a:	18 97       	sbiw	r26, 0x08	; 8
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	40 e0       	ldi	r20, 0x00	; 0
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	84 e1       	ldi	r24, 0x14	; 20
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
     f16:	92 e0       	ldi	r25, 0x02	; 2
     f18:	5b df       	rcall	.-330    	; 0xdd0 <MENU_addMenuItem>
     f1a:	60 91 78 02 	lds	r22, 0x0278
     f1e:	70 91 79 02 	lds	r23, 0x0279
     f22:	e0 91 72 02 	lds	r30, 0x0272
	mainMenu->children[3] = currItem;
     f26:	f0 91 73 02 	lds	r31, 0x0273
     f2a:	db 01       	movw	r26, r22
     f2c:	1b 96       	adiw	r26, 0x0b	; 11
     f2e:	fc 93       	st	X, r31
     f30:	ee 93       	st	-X, r30
     f32:	1a 97       	sbiw	r26, 0x0a	; 10
     f34:	88 e9       	ldi	r24, 0x98	; 152
     f36:	94 e0       	ldi	r25, 0x04	; 4
     f38:	93 87       	std	Z+11, r25	; 0x0b
     f3a:	82 87       	std	Z+10, r24	; 0x0a
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
     f40:	40 e0       	ldi	r20, 0x00	; 0
     f42:	50 e0       	ldi	r21, 0x00	; 0
     f44:	8e e1       	ldi	r24, 0x1E	; 30
     f46:	92 e0       	ldi	r25, 0x02	; 2
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
     f48:	43 df       	rcall	.-378    	; 0xdd0 <MENU_addMenuItem>
     f4a:	e0 91 78 02 	lds	r30, 0x0278
     f4e:	f0 91 79 02 	lds	r31, 0x0279
     f52:	80 91 72 02 	lds	r24, 0x0272
     f56:	90 91 73 02 	lds	r25, 0x0273
	mainMenu->children[4] = currItem;
     f5a:	95 87       	std	Z+13, r25	; 0x0d
     f5c:	84 87       	std	Z+12, r24	; 0x0c
     f5e:	10 92 73 02 	sts	0x0273, r1
     f62:	10 92 72 02 	sts	0x0272, r1
     f66:	60 91 76 02 	lds	r22, 0x0276
     f6a:	70 91 77 02 	lds	r23, 0x0277
	
	currItem = NULL;
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
     f74:	50 e0       	ldi	r21, 0x00	; 0
     f76:	83 e2       	ldi	r24, 0x23	; 35
     f78:	92 e0       	ldi	r25, 0x02	; 2
     f7a:	2a df       	rcall	.-428    	; 0xdd0 <MENU_addMenuItem>
     f7c:	60 91 76 02 	lds	r22, 0x0276
     f80:	70 91 77 02 	lds	r23, 0x0277
     f84:	80 91 72 02 	lds	r24, 0x0272
     f88:	90 91 73 02 	lds	r25, 0x0273
	difficultyMenu->children[0] = currItem;
     f8c:	fb 01       	movw	r30, r22
     f8e:	95 83       	std	Z+5, r25	; 0x05
     f90:	84 83       	std	Z+4, r24	; 0x04
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e0       	ldi	r20, 0x00	; 0
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	88 e2       	ldi	r24, 0x28	; 40
     f9c:	92 e0       	ldi	r25, 0x02	; 2
     f9e:	18 df       	rcall	.-464    	; 0xdd0 <MENU_addMenuItem>
     fa0:	60 91 76 02 	lds	r22, 0x0276
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
     fa4:	70 91 77 02 	lds	r23, 0x0277
     fa8:	80 91 72 02 	lds	r24, 0x0272
     fac:	90 91 73 02 	lds	r25, 0x0273
     fb0:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
     fb2:	17 96       	adiw	r26, 0x07	; 7
     fb4:	9c 93       	st	X, r25
     fb6:	8e 93       	st	-X, r24
     fb8:	16 97       	sbiw	r26, 0x06	; 6
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	40 e0       	ldi	r20, 0x00	; 0
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	8f e2       	ldi	r24, 0x2F	; 47
     fc4:	92 e0       	ldi	r25, 0x02	; 2
     fc6:	04 df       	rcall	.-504    	; 0xdd0 <MENU_addMenuItem>
     fc8:	e0 91 76 02 	lds	r30, 0x0276
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
     fcc:	f0 91 77 02 	lds	r31, 0x0277
     fd0:	80 91 72 02 	lds	r24, 0x0272
     fd4:	90 91 73 02 	lds	r25, 0x0273
     fd8:	91 87       	std	Z+9, r25	; 0x09
     fda:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	08 95       	ret

00000fe2 <MENU_printMenuItem>:
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
     fe6:	ec 01       	movw	r28, r24
     fe8:	cb 01       	movw	r24, r22
     fea:	20 97       	sbiw	r28, 0x00	; 0
     fec:	39 f0       	breq	.+14     	; 0xffc <MENU_printMenuItem+0x1a>
     fee:	6a e0       	ldi	r22, 0x0A	; 10
}
     ff0:	70 e0       	ldi	r23, 0x00	; 0
     ff2:	f6 d1       	rcall	.+1004   	; 0x13e0 <OLED_bufferGoto>
     ff4:	88 81       	ld	r24, Y
void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_bufferGoto(lineNumber, menuFrameOffset);
		OLED_printString(item->name);
     ff6:	99 81       	ldd	r25, Y+1	; 0x01
     ff8:	32 d2       	rcall	.+1124   	; 0x145e <OLED_printString>
     ffa:	07 c0       	rjmp	.+14     	; 0x100a <MENU_printMenuItem+0x28>
     ffc:	84 e3       	ldi	r24, 0x34	; 52
     ffe:	92 e0       	ldi	r25, 0x02	; 2
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
    1000:	9f 93       	push	r25
    1002:	8f 93       	push	r24
    1004:	c9 d4       	rcall	.+2450   	; 0x1998 <printf>
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	08 95       	ret

00001010 <MENU_printMenu>:
	}
}
    1010:	cf 92       	push	r12
    1012:	df 92       	push	r13
    1014:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
    1016:	ff 92       	push	r15
    1018:	0f 93       	push	r16
    101a:	1f 93       	push	r17
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	6c 01       	movw	r12, r24
    1022:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
    1024:	e1 d0       	rcall	.+450    	; 0x11e8 <OLED_clear>
    1026:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	a1 d2       	rcall	.+1346   	; 0x156e <OLED_moveArrow>
    102c:	1e 14       	cp	r1, r14
    102e:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
    1030:	7c f4       	brge	.+30     	; 0x1050 <MENU_printMenu+0x40>
    1032:	86 01       	movw	r16, r12
    1034:	0c 5f       	subi	r16, 0xFC	; 252
    1036:	1f 4f       	sbci	r17, 0xFF	; 255
    1038:	c0 e0       	ldi	r28, 0x00	; 0
    103a:	d0 e0       	ldi	r29, 0x00	; 0
    103c:	be 01       	movw	r22, r28
    103e:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
    1040:	81 91       	ld	r24, Z+
    1042:	91 91       	ld	r25, Z+
    1044:	8f 01       	movw	r16, r30
    1046:	cd df       	rcall	.-102    	; 0xfe2 <MENU_printMenuItem>
    1048:	21 96       	adiw	r28, 0x01	; 1
    104a:	ce 15       	cp	r28, r14
    104c:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
    104e:	b1 f7       	brne	.-20     	; 0x103c <MENU_printMenu+0x2c>
    1050:	d0 92 75 02 	sts	0x0275, r13
    1054:	c0 92 74 02 	sts	0x0274, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
    1058:	10 92 70 02 	sts	0x0270, r1
    105c:	10 92 6f 02 	sts	0x026F, r1
	
	currentPosition = 0;
    1060:	f6 01       	movw	r30, r12
    1062:	84 81       	ldd	r24, Z+4	; 0x04
    1064:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
    1066:	90 93 73 02 	sts	0x0273, r25
    106a:	80 93 72 02 	sts	0x0272, r24
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	1f 91       	pop	r17
}
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	df 90       	pop	r13
    107c:	cf 90       	pop	r12
    107e:	08 95       	ret

00001080 <MENU_moveUp>:
    1080:	20 91 6f 02 	lds	r18, 0x026F
    1084:	30 91 70 02 	lds	r19, 0x0270
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
    1088:	12 16       	cp	r1, r18
    108a:	13 06       	cpc	r1, r19
    108c:	bc f4       	brge	.+46     	; 0x10bc <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
    108e:	c9 01       	movw	r24, r18
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	90 93 70 02 	sts	0x0270, r25
    1096:	80 93 6f 02 	sts	0x026F, r24
		currItem = currentMenu->children[currentPosition];
    109a:	e0 91 74 02 	lds	r30, 0x0274
    109e:	f0 91 75 02 	lds	r31, 0x0275
    10a2:	2f 5f       	subi	r18, 0xFF	; 255
    10a4:	3f 4f       	sbci	r19, 0xFF	; 255
    10a6:	22 0f       	add	r18, r18
    10a8:	33 1f       	adc	r19, r19
    10aa:	e2 0f       	add	r30, r18
    10ac:	f3 1f       	adc	r31, r19
    10ae:	20 81       	ld	r18, Z
    10b0:	31 81       	ldd	r19, Z+1	; 0x01
    10b2:	30 93 73 02 	sts	0x0273, r19
    10b6:	20 93 72 02 	sts	0x0272, r18
		OLED_moveArrow(currentPosition);
    10ba:	59 c2       	rjmp	.+1202   	; 0x156e <OLED_moveArrow>
    10bc:	08 95       	ret

000010be <MENU_moveDown>:
    10be:	e0 91 74 02 	lds	r30, 0x0274
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
    10c2:	f0 91 75 02 	lds	r31, 0x0275
    10c6:	20 91 6f 02 	lds	r18, 0x026F
    10ca:	30 91 70 02 	lds	r19, 0x0270
    10ce:	82 81       	ldd	r24, Z+2	; 0x02
    10d0:	93 81       	ldd	r25, Z+3	; 0x03
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	28 17       	cp	r18, r24
    10d6:	39 07       	cpc	r19, r25
    10d8:	a4 f4       	brge	.+40     	; 0x1102 <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
    10da:	c9 01       	movw	r24, r18
    10dc:	01 96       	adiw	r24, 0x01	; 1
    10de:	90 93 70 02 	sts	0x0270, r25
    10e2:	80 93 6f 02 	sts	0x026F, r24
		currItem = currentMenu->children[currentPosition];
    10e6:	2d 5f       	subi	r18, 0xFD	; 253
    10e8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ea:	22 0f       	add	r18, r18
    10ec:	33 1f       	adc	r19, r19
    10ee:	e2 0f       	add	r30, r18
    10f0:	f3 1f       	adc	r31, r19
    10f2:	20 81       	ld	r18, Z
    10f4:	31 81       	ldd	r19, Z+1	; 0x01
    10f6:	30 93 73 02 	sts	0x0273, r19
    10fa:	20 93 72 02 	sts	0x0272, r18
		OLED_moveArrow(currentPosition);
    10fe:	37 c2       	rjmp	.+1134   	; 0x156e <OLED_moveArrow>
    1100:	08 95       	ret
    1102:	10 92 70 02 	sts	0x0270, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
    1106:	10 92 6f 02 	sts	0x026F, r1
    110a:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
    110c:	95 81       	ldd	r25, Z+5	; 0x05
    110e:	90 93 73 02 	sts	0x0273, r25
    1112:	80 93 72 02 	sts	0x0272, r24
    1116:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	29 c2       	rjmp	.+1106   	; 0x156e <OLED_moveArrow>
    111c:	08 95       	ret

0000111e <MENU_moveLeft>:
    111e:	e0 91 74 02 	lds	r30, 0x0274
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
    1122:	f0 91 75 02 	lds	r31, 0x0275
    1126:	84 89       	ldd	r24, Z+20	; 0x14
    1128:	95 89       	ldd	r25, Z+21	; 0x15
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	21 f0       	breq	.+8      	; 0x1136 <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
    112e:	fc 01       	movw	r30, r24
    1130:	62 81       	ldd	r22, Z+2	; 0x02
    1132:	73 81       	ldd	r23, Z+3	; 0x03
    1134:	6d cf       	rjmp	.-294    	; 0x1010 <MENU_printMenu>
    1136:	08 95       	ret

00001138 <MENU_reactivate>:
    1138:	80 91 74 02 	lds	r24, 0x0274
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
    113c:	90 91 75 02 	lds	r25, 0x0275
    1140:	fc 01       	movw	r30, r24
    1142:	62 81       	ldd	r22, Z+2	; 0x02
    1144:	73 81       	ldd	r23, Z+3	; 0x03
    1146:	64 df       	rcall	.-312    	; 0x1010 <MENU_printMenu>
    1148:	18 c0       	rjmp	.+48     	; 0x117a <MENU_waitForInput>
	MENU_waitForInput();
    114a:	08 95       	ret

0000114c <MENU_moveRight>:
    114c:	e0 91 72 02 	lds	r30, 0x0272
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
    1150:	f0 91 73 02 	lds	r31, 0x0273
    1154:	86 81       	ldd	r24, Z+6	; 0x06
    1156:	97 81       	ldd	r25, Z+7	; 0x07
    1158:	89 2b       	or	r24, r25
    115a:	39 f0       	breq	.+14     	; 0x116a <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
    115c:	84 81       	ldd	r24, Z+4	; 0x04
    115e:	95 81       	ldd	r25, Z+5	; 0x05
    1160:	fc 01       	movw	r30, r24
    1162:	62 81       	ldd	r22, Z+2	; 0x02
    1164:	73 81       	ldd	r23, Z+3	; 0x03
    1166:	54 cf       	rjmp	.-344    	; 0x1010 <MENU_printMenu>
    1168:	08 95       	ret
    116a:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
    116c:	f3 85       	ldd	r31, Z+11	; 0x0b
    116e:	e0 2d       	mov	r30, r0
    1170:	30 97       	sbiw	r30, 0x00	; 0
    1172:	11 f0       	breq	.+4      	; 0x1178 <MENU_moveRight+0x2c>
    1174:	09 95       	icall
	{
		currItem->functionPtr();
    1176:	e0 cf       	rjmp	.-64     	; 0x1138 <MENU_reactivate>
		MENU_reactivate();
    1178:	08 95       	ret

0000117a <MENU_waitForInput>:
    117a:	80 91 6f 02 	lds	r24, 0x026F
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
    117e:	90 91 70 02 	lds	r25, 0x0270
    1182:	f5 d1       	rcall	.+1002   	; 0x156e <OLED_moveArrow>
    1184:	80 91 71 02 	lds	r24, 0x0271
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    1188:	88 23       	and	r24, r24
    118a:	f9 f0       	breq	.+62     	; 0x11ca <MENU_waitForInput+0x50>
    118c:	75 dd       	rcall	.-1302   	; 0xc78 <JOY_getDirection>
	{
		currDir = JOY_getDirection();
    118e:	82 30       	cpi	r24, 0x02	; 2
    1190:	71 f0       	breq	.+28     	; 0x11ae <MENU_waitForInput+0x34>
		switch(currDir){
    1192:	18 f4       	brcc	.+6      	; 0x119a <MENU_waitForInput+0x20>
    1194:	81 30       	cpi	r24, 0x01	; 1
    1196:	49 f0       	breq	.+18     	; 0x11aa <MENU_waitForInput+0x30>
    1198:	0b c0       	rjmp	.+22     	; 0x11b0 <MENU_waitForInput+0x36>
    119a:	83 30       	cpi	r24, 0x03	; 3
    119c:	21 f0       	breq	.+8      	; 0x11a6 <MENU_waitForInput+0x2c>
    119e:	84 30       	cpi	r24, 0x04	; 4
    11a0:	39 f4       	brne	.+14     	; 0x11b0 <MENU_waitForInput+0x36>
    11a2:	bd df       	rcall	.-134    	; 0x111e <MENU_moveLeft>
    11a4:	05 c0       	rjmp	.+10     	; 0x11b0 <MENU_waitForInput+0x36>
			case LEFT:
			MENU_moveLeft();
    11a6:	d2 df       	rcall	.-92     	; 0x114c <MENU_moveRight>
    11a8:	03 c0       	rjmp	.+6      	; 0x11b0 <MENU_waitForInput+0x36>
			break;
    11aa:	6a df       	rcall	.-300    	; 0x1080 <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <MENU_waitForInput+0x36>
    11ae:	87 df       	rcall	.-242    	; 0x10be <MENU_moveDown>
			break;
    11b0:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
    11b2:	8f e7       	ldi	r24, 0x7F	; 127
    11b4:	94 e0       	ldi	r25, 0x04	; 4
			break;
    11b6:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
    11b8:	80 40       	sbci	r24, 0x00	; 0
    11ba:	90 40       	sbci	r25, 0x00	; 0
    11bc:	e1 f7       	brne	.-8      	; 0x11b6 <MENU_waitForInput+0x3c>
    11be:	00 c0       	rjmp	.+0      	; 0x11c0 <MENU_waitForInput+0x46>
    11c0:	00 00       	nop
    11c2:	80 91 71 02 	lds	r24, 0x0271
    11c6:	81 11       	cpse	r24, r1
    11c8:	e1 cf       	rjmp	.-62     	; 0x118c <MENU_waitForInput+0x12>
    11ca:	08 95       	ret

000011cc <MENU_activate>:
    11cc:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    11ce:	80 93 71 02 	sts	0x0271, r24
    11d2:	35 de       	rcall	.-918    	; 0xe3e <MENU_buildMenus>
    11d4:	80 91 78 02 	lds	r24, 0x0278
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
    11d8:	90 91 79 02 	lds	r25, 0x0279
    11dc:	fc 01       	movw	r30, r24
    11de:	62 81       	ldd	r22, Z+2	; 0x02
    11e0:	73 81       	ldd	r23, Z+3	; 0x03
    11e2:	16 df       	rcall	.-468    	; 0x1010 <MENU_printMenu>
    11e4:	ca cf       	rjmp	.-108    	; 0x117a <MENU_waitForInput>
    11e6:	08 95       	ret

000011e8 <OLED_clear>:
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	// clear OLED buffer
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    11e8:	80 91 10 01 	lds	r24, 0x0110
    11ec:	90 91 11 01 	lds	r25, 0x0111
    11f0:	89 2b       	or	r24, r25
    11f2:	89 f0       	breq	.+34     	; 0x1216 <OLED_clear+0x2e>
    11f4:	80 e0       	ldi	r24, 0x00	; 0
    11f6:	90 e0       	ldi	r25, 0x00	; 0
	{
		oled_buffer[i] = 0x00;
    11f8:	e0 91 12 01 	lds	r30, 0x0112
    11fc:	f0 91 13 01 	lds	r31, 0x0113
    1200:	e8 0f       	add	r30, r24
    1202:	f9 1f       	adc	r31, r25
    1204:	10 82       	st	Z, r1
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	// clear OLED buffer
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    1206:	01 96       	adiw	r24, 0x01	; 1
    1208:	20 91 10 01 	lds	r18, 0x0110
    120c:	30 91 11 01 	lds	r19, 0x0111
    1210:	82 17       	cp	r24, r18
    1212:	93 07       	cpc	r25, r19
    1214:	88 f3       	brcs	.-30     	; 0x11f8 <OLED_clear+0x10>
    1216:	08 95       	ret

00001218 <OLED_init>:

//------------------------------------------------------------------------------
// Default initialization routine of the OLED display.

void OLED_init(void)
{
    1218:	cf 93       	push	r28
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
    121a:	e0 91 16 01 	lds	r30, 0x0116
    121e:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1222:	8e ea       	ldi	r24, 0xAE	; 174
    1224:	80 83       	st	Z, r24
// Default initialization routine of the OLED display.

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
    1226:	e0 91 16 01 	lds	r30, 0x0116
    122a:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    122e:	81 ea       	ldi	r24, 0xA1	; 161
    1230:	80 83       	st	Z, r24

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
    1232:	e0 91 16 01 	lds	r30, 0x0116
    1236:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    123a:	8a ed       	ldi	r24, 0xDA	; 218
    123c:	80 83       	st	Z, r24
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
    123e:	e0 91 16 01 	lds	r30, 0x0116
    1242:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1246:	82 e1       	ldi	r24, 0x12	; 18
    1248:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    124a:	e0 91 16 01 	lds	r30, 0x0116
    124e:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1252:	88 ec       	ldi	r24, 0xC8	; 200
    1254:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    1256:	e0 91 16 01 	lds	r30, 0x0116
    125a:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    125e:	88 ea       	ldi	r24, 0xA8	; 168
    1260:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    1262:	e0 91 16 01 	lds	r30, 0x0116
    1266:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    126a:	8f e3       	ldi	r24, 0x3F	; 63
    126c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    126e:	e0 91 16 01 	lds	r30, 0x0116
    1272:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1276:	85 ed       	ldi	r24, 0xD5	; 213
    1278:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
    127a:	e0 91 16 01 	lds	r30, 0x0116
    127e:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1282:	80 e8       	ldi	r24, 0x80	; 128
    1284:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    1286:	e0 91 16 01 	lds	r30, 0x0116
    128a:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    128e:	81 e8       	ldi	r24, 0x81	; 129
    1290:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    1292:	e0 91 16 01 	lds	r30, 0x0116
    1296:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    129a:	c0 e5       	ldi	r28, 0x50	; 80
    129c:	c0 83       	st	Z, r28
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    129e:	e0 91 16 01 	lds	r30, 0x0116
    12a2:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12a6:	89 ed       	ldi	r24, 0xD9	; 217
    12a8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
    12aa:	e0 91 16 01 	lds	r30, 0x0116
    12ae:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12b2:	81 e2       	ldi	r24, 0x21	; 33
    12b4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    12b6:	e0 91 16 01 	lds	r30, 0x0116
    12ba:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12be:	80 e2       	ldi	r24, 0x20	; 32
    12c0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    12c2:	e0 91 16 01 	lds	r30, 0x0116
    12c6:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12ca:	82 e0       	ldi	r24, 0x02	; 2
    12cc:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    12ce:	e0 91 16 01 	lds	r30, 0x0116
    12d2:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12d6:	8b ed       	ldi	r24, 0xDB	; 219
    12d8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    12da:	e0 91 16 01 	lds	r30, 0x0116
    12de:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12e2:	80 e3       	ldi	r24, 0x30	; 48
    12e4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    12e6:	e0 91 16 01 	lds	r30, 0x0116
    12ea:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12ee:	8d ea       	ldi	r24, 0xAD	; 173
    12f0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    12f2:	e0 91 16 01 	lds	r30, 0x0116
    12f6:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12fa:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    12fc:	e0 91 16 01 	lds	r30, 0x0116
    1300:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1304:	84 ea       	ldi	r24, 0xA4	; 164
    1306:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    1308:	e0 91 16 01 	lds	r30, 0x0116
    130c:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1310:	86 ea       	ldi	r24, 0xA6	; 166
    1312:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    1314:	e0 91 16 01 	lds	r30, 0x0116
    1318:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    131c:	8f ea       	ldi	r24, 0xAF	; 175
    131e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    1320:	63 df       	rcall	.-314    	; 0x11e8 <OLED_clear>
    1322:	83 b7       	in	r24, 0x33	; 51
	//OLED_splashScreen();
	//OLED_flyingArrows();
	
	// setup 8-bit counter0 without PWM
	// setting Mode of Operation to CTC and Prescaler to div/1024
	TCCR0 |= (1<<WGM01) | (1<<CS02) | (1<<CS00);
    1324:	8d 60       	ori	r24, 0x0D	; 13
    1326:	83 bf       	out	0x33, r24	; 51
    1328:	89 b7       	in	r24, 0x39	; 57
	// Output Compare Interrupt Enable
	TIMSK |= (1<<OCIE0);
    132a:	81 60       	ori	r24, 0x01	; 1
    132c:	89 bf       	out	0x39, r24	; 57
    132e:	c1 bf       	out	0x31, r28	; 49
	// 17ms Counter cycle (4800Hz -> 80 cycles)
	OCR0 = 80;
    1330:	cf 91       	pop	r28
	
}
    1332:	08 95       	ret

00001334 <OLED_goto>:
    1334:	26 2f       	mov	r18, r22

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
    1336:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
    1338:	75 95       	asr	r23
    133a:	67 95       	ror	r22
    133c:	75 95       	asr	r23
    133e:	67 95       	ror	r22
    1340:	75 95       	asr	r23
    1342:	67 95       	ror	r22
    1344:	75 95       	asr	r23
    1346:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
    1348:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
    134a:	80 55       	subi	r24, 0x50	; 80
    134c:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
    134e:	e0 91 16 01 	lds	r30, 0x0116
    1352:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1356:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
    1358:	e0 91 16 01 	lds	r30, 0x0116
    135c:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1360:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
    1362:	e0 91 16 01 	lds	r30, 0x0116
    1366:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    136a:	60 83       	st	Z, r22
    136c:	08 95       	ret

0000136e <OLED_updateScreen>:
	// set column address
// 	OLED_writeByteToOLED(oled_cmd_ext_ram, 0x21); // command to set column address
// 	OLED_writeByteToOLED(oled_cmd_ext_ram, 0x00); // column start address ~ 0d
// 	OLED_writeByteToOLED(oled_cmd_ext_ram, 0x7f); // column end address ~ 127d
	// set horizontal addressing mode
	OLED_writeByteToOLED(oled_cmd, 0x20); // set memory addressing mode
    136e:	e0 91 16 01 	lds	r30, 0x0116
    1372:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1376:	80 e2       	ldi	r24, 0x20	; 32
    1378:	80 83       	st	Z, r24
// 	OLED_writeByteToOLED(oled_cmd_ext_ram, 0x21); // command to set column address
// 	OLED_writeByteToOLED(oled_cmd_ext_ram, 0x00); // column start address ~ 0d
// 	OLED_writeByteToOLED(oled_cmd_ext_ram, 0x7f); // column end address ~ 127d
	// set horizontal addressing mode
	OLED_writeByteToOLED(oled_cmd, 0x20); // set memory addressing mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // set horizontal addressing mode ~ 0d
    137a:	e0 91 16 01 	lds	r30, 0x0116
    137e:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1382:	10 82       	st	Z, r1
	// set horizontal addressing mode
	OLED_writeByteToOLED(oled_cmd, 0x20); // set memory addressing mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // set horizontal addressing mode ~ 0d
	
	// write OLED buffer to OLED Memory
	OLED_goto(0,0); // todo: start writing in top left corner (maybe not further needed)
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	70 e0       	ldi	r23, 0x00	; 0
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	d3 df       	rcall	.-90     	; 0x1334 <OLED_goto>
    138e:	80 91 10 01 	lds	r24, 0x0110
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    1392:	90 91 11 01 	lds	r25, 0x0111
    1396:	89 2b       	or	r24, r25
    1398:	b1 f0       	breq	.+44     	; 0x13c6 <OLED_updateScreen+0x58>
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	e0 91 12 01 	lds	r30, 0x0112
	{
		OLED_writeByteToOLED(oled_data, oled_buffer[i]);
    13a2:	f0 91 13 01 	lds	r31, 0x0113
    13a6:	e8 0f       	add	r30, r24
    13a8:	f9 1f       	adc	r31, r25
    13aa:	20 81       	ld	r18, Z
    13ac:	e0 91 14 01 	lds	r30, 0x0114
    13b0:	f0 91 15 01 	lds	r31, 0x0115
    13b4:	20 83       	st	Z, r18
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13b6:	01 96       	adiw	r24, 0x01	; 1
	OLED_writeByteToOLED(oled_cmd, 0x20); // set memory addressing mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // set horizontal addressing mode ~ 0d
	
	// write OLED buffer to OLED Memory
	OLED_goto(0,0); // todo: start writing in top left corner (maybe not further needed)
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    13b8:	20 91 10 01 	lds	r18, 0x0110
    13bc:	30 91 11 01 	lds	r19, 0x0111
    13c0:	82 17       	cp	r24, r18
    13c2:	93 07       	cpc	r25, r19
    13c4:	60 f3       	brcs	.-40     	; 0x139e <OLED_updateScreen+0x30>
    13c6:	e0 91 16 01 	lds	r30, 0x0116
		OLED_writeByteToOLED(oled_data, oled_buffer[i]);
	}
	
	// todo: remove later
	// go back to page adressing mode
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    13ca:	f0 91 17 01 	lds	r31, 0x0117
    13ce:	80 e2       	ldi	r24, 0x20	; 32
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13d0:	80 83       	st	Z, r24
    13d2:	e0 91 16 01 	lds	r30, 0x0116
	}
	
	// todo: remove later
	// go back to page adressing mode
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    13d6:	f0 91 17 01 	lds	r31, 0x0117
    13da:	82 e0       	ldi	r24, 0x02	; 2
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13dc:	80 83       	st	Z, r24
    13de:	08 95       	ret

000013e0 <OLED_bufferGoto>:
    13e0:	96 95       	lsr	r25
}

void OLED_bufferGoto(int row, int column)
{
	// change pointer in OLED SRAM buffer
	oled_buffer_position = oled_buffer + (row * 0x80) + column;
    13e2:	98 2f       	mov	r25, r24
    13e4:	88 27       	eor	r24, r24
    13e6:	97 95       	ror	r25
    13e8:	87 95       	ror	r24
    13ea:	68 0f       	add	r22, r24
    13ec:	79 1f       	adc	r23, r25
    13ee:	80 91 12 01 	lds	r24, 0x0112
    13f2:	90 91 13 01 	lds	r25, 0x0113
    13f6:	68 0f       	add	r22, r24
    13f8:	79 1f       	adc	r23, r25
    13fa:	70 93 0f 01 	sts	0x010F, r23
    13fe:	60 93 0e 01 	sts	0x010E, r22
    1402:	08 95       	ret

00001404 <OLED_printCharacter>:
// SPACE (' '). As SPACE corresponds to position 32 in the ASCII table, this 
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
    1404:	0f 93       	push	r16
    1406:	1f 93       	push	r17
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
	character = character-32; // map character to font table
    140c:	80 52       	subi	r24, 0x20	; 32
    140e:	08 2f       	mov	r16, r24
    1410:	10 e0       	ldi	r17, 0x00	; 0
    1412:	00 0f       	add	r16, r16
    1414:	11 1f       	adc	r17, r17
    1416:	00 0f       	add	r16, r16
    1418:	11 1f       	adc	r17, r17
    141a:	00 0f       	add	r16, r16
    141c:	11 1f       	adc	r17, r17
    141e:	c0 e0       	ldi	r28, 0x00	; 0
    1420:	d0 e0       	ldi	r29, 0x00	; 0
    1422:	00 59       	subi	r16, 0x90	; 144
    1424:	1f 4f       	sbci	r17, 0xFF	; 255
    1426:	f8 01       	movw	r30, r16
    1428:	ec 0f       	add	r30, r28
    142a:	fd 1f       	adc	r31, r29
	
	// print 8 columns into OLED Buffer in SRAM
	for(uint8_t i = 0; i < 8; i++)
	{
		saveToAddress(oled_buffer_position, pgm_read_byte(&font8[character][i]));
    142c:	64 91       	lpm	r22, Z
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	80 91 0e 01 	lds	r24, 0x010E
    1434:	90 91 0f 01 	lds	r25, 0x010F
    1438:	65 da       	rcall	.-2870   	; 0x904 <saveToAddress>
    143a:	80 91 0e 01 	lds	r24, 0x010E
		oled_buffer_position++;
    143e:	90 91 0f 01 	lds	r25, 0x010F
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	90 93 0f 01 	sts	0x010F, r25
    1448:	80 93 0e 01 	sts	0x010E, r24
    144c:	21 96       	adiw	r28, 0x01	; 1
    144e:	c8 30       	cpi	r28, 0x08	; 8
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED Buffer in SRAM
	for(uint8_t i = 0; i < 8; i++)
    1450:	d1 05       	cpc	r29, r1
    1452:	49 f7       	brne	.-46     	; 0x1426 <OLED_printCharacter+0x22>
    1454:	df 91       	pop	r29
	// print 8 columns into OLED RAM
// 	for(uint8_t i = 0; i < 8; i++)
// 	{
// 		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
// 	}
}
    1456:	cf 91       	pop	r28
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	08 95       	ret

0000145e <OLED_printString>:
    145e:	1f 93       	push	r17

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
    1466:	10 e0       	ldi	r17, 0x00	; 0
    1468:	06 c0       	rjmp	.+12     	; 0x1476 <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
    146a:	fe 01       	movw	r30, r28
    146c:	e8 0f       	add	r30, r24
    146e:	f9 1f       	adc	r31, r25
    1470:	80 81       	ld	r24, Z
    1472:	c8 df       	rcall	.-112    	; 0x1404 <OLED_printCharacter>
    1474:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
    1476:	81 2f       	mov	r24, r17
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	fe 01       	movw	r30, r28
    147c:	01 90       	ld	r0, Z+
    147e:	00 20       	and	r0, r0
    1480:	e9 f7       	brne	.-6      	; 0x147c <OLED_printString+0x1e>
    1482:	31 97       	sbiw	r30, 0x01	; 1
    1484:	ec 1b       	sub	r30, r28
    1486:	fd 0b       	sbc	r31, r29
    1488:	8e 17       	cp	r24, r30
    148a:	9f 07       	cpc	r25, r31
    148c:	70 f3       	brcs	.-36     	; 0x146a <OLED_printString+0xc>
    148e:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
    1490:	cf 91       	pop	r28
    1492:	1f 91       	pop	r17
    1494:	08 95       	ret

00001496 <OLED_printArrow>:
    1496:	68 e1       	ldi	r22, 0x18	; 24
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	// write arrow to oled sram buffer
	saveToAddress(oled_buffer_position, 0b00011000);
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	80 91 0e 01 	lds	r24, 0x010E
    149e:	90 91 0f 01 	lds	r25, 0x010F
    14a2:	30 da       	rcall	.-2976   	; 0x904 <saveToAddress>
    14a4:	80 91 0e 01 	lds	r24, 0x010E
	oled_buffer_position++;
    14a8:	90 91 0f 01 	lds	r25, 0x010F
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	90 93 0f 01 	sts	0x010F, r25
    14b2:	80 93 0e 01 	sts	0x010E, r24
    14b6:	68 e1       	ldi	r22, 0x18	; 24
	saveToAddress(oled_buffer_position, 0b00011000);
    14b8:	70 e0       	ldi	r23, 0x00	; 0
    14ba:	24 da       	rcall	.-3000   	; 0x904 <saveToAddress>
    14bc:	80 91 0e 01 	lds	r24, 0x010E
	oled_buffer_position++;
    14c0:	90 91 0f 01 	lds	r25, 0x010F
    14c4:	01 96       	adiw	r24, 0x01	; 1
    14c6:	90 93 0f 01 	sts	0x010F, r25
    14ca:	80 93 0e 01 	sts	0x010E, r24
    14ce:	6e e7       	ldi	r22, 0x7E	; 126
    14d0:	70 e0       	ldi	r23, 0x00	; 0
	saveToAddress(oled_buffer_position, 0b01111110);
    14d2:	18 da       	rcall	.-3024   	; 0x904 <saveToAddress>
    14d4:	80 91 0e 01 	lds	r24, 0x010E
    14d8:	90 91 0f 01 	lds	r25, 0x010F
	oled_buffer_position++;
    14dc:	01 96       	adiw	r24, 0x01	; 1
    14de:	90 93 0f 01 	sts	0x010F, r25
    14e2:	80 93 0e 01 	sts	0x010E, r24
    14e6:	6c e3       	ldi	r22, 0x3C	; 60
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	0c da       	rcall	.-3048   	; 0x904 <saveToAddress>
	saveToAddress(oled_buffer_position, 0b00111100);
    14ec:	80 91 0e 01 	lds	r24, 0x010E
    14f0:	90 91 0f 01 	lds	r25, 0x010F
	oled_buffer_position++;
    14f4:	01 96       	adiw	r24, 0x01	; 1
    14f6:	90 93 0f 01 	sts	0x010F, r25
    14fa:	80 93 0e 01 	sts	0x010E, r24
    14fe:	68 e1       	ldi	r22, 0x18	; 24
    1500:	70 e0       	ldi	r23, 0x00	; 0
    1502:	00 da       	rcall	.-3072   	; 0x904 <saveToAddress>
    1504:	80 91 0e 01 	lds	r24, 0x010E
	saveToAddress(oled_buffer_position, 0b00011000);
    1508:	90 91 0f 01 	lds	r25, 0x010F
    150c:	01 96       	adiw	r24, 0x01	; 1
	oled_buffer_position++;
    150e:	90 93 0f 01 	sts	0x010F, r25
    1512:	80 93 0e 01 	sts	0x010E, r24
    1516:	08 95       	ret

00001518 <OLED_clearArrow>:
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	c1 e0       	ldi	r28, 0x01	; 1
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    1522:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_bufferGoto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1528:	00 e0       	ldi	r16, 0x00	; 0

void OLED_clearArrow(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_bufferGoto(count_row,0); // move to first column in row
    152a:	60 e0       	ldi	r22, 0x00	; 0
    152c:	70 e0       	ldi	r23, 0x00	; 0
    152e:	58 df       	rcall	.-336    	; 0x13e0 <OLED_bufferGoto>
    1530:	10 2f       	mov	r17, r16

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1532:	60 e0       	ldi	r22, 0x00	; 0
		{
			saveToAddress(oled_buffer_position, 0x00);
    1534:	70 e0       	ldi	r23, 0x00	; 0
    1536:	80 91 0e 01 	lds	r24, 0x010E
    153a:	90 91 0f 01 	lds	r25, 0x010F
    153e:	e2 d9       	rcall	.-3132   	; 0x904 <saveToAddress>
    1540:	80 91 0e 01 	lds	r24, 0x010E
			oled_buffer_position++;
    1544:	90 91 0f 01 	lds	r25, 0x010F
    1548:	01 96       	adiw	r24, 0x01	; 1
    154a:	90 93 0f 01 	sts	0x010F, r25
    154e:	80 93 0e 01 	sts	0x010E, r24
    1552:	1f 5f       	subi	r17, 0xFF	; 255
    1554:	15 30       	cpi	r17, 0x05	; 5
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_bufferGoto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1556:	69 f7       	brne	.-38     	; 0x1532 <OLED_clearArrow+0x1a>
    1558:	8c 2f       	mov	r24, r28
    155a:	9d 2f       	mov	r25, r29
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
    155c:	21 96       	adiw	r28, 0x01	; 1
    155e:	c9 30       	cpi	r28, 0x09	; 9
    1560:	d1 05       	cpc	r29, r1
    1562:	19 f7       	brne	.-58     	; 0x152a <OLED_clearArrow+0x12>
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
// 		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
// 		{
// 			OLED_writeByteToOLED(oled_data, 0x00);
// 		}
// 	}
}
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	08 95       	ret

0000156e <OLED_moveArrow>:
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    1572:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
    1574:	d1 df       	rcall	.-94     	; 0x1518 <OLED_clearArrow>
    1576:	60 e0       	ldi	r22, 0x00	; 0
	//OLED_goto(joy_counter,0); // move cursor to specified row
	OLED_bufferGoto(joy_counter, 0);
    1578:	70 e0       	ldi	r23, 0x00	; 0
    157a:	ce 01       	movw	r24, r28
    157c:	31 df       	rcall	.-414    	; 0x13e0 <OLED_bufferGoto>
    157e:	8b df       	rcall	.-234    	; 0x1496 <OLED_printArrow>
    1580:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
    1582:	cf 91       	pop	r28
    1584:	08 95       	ret

00001586 <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    1586:	10 92 7c 02 	sts	0x027C, r1
	currentSliPosition.L_abs = 0;
    158a:	10 92 7d 02 	sts	0x027D, r1
	currentSliPosition.R_per = 0;
    158e:	10 92 7e 02 	sts	0x027E, r1
	currentSliPosition.L_per = 0;
    1592:	10 92 7f 02 	sts	0x027F, r1
    1596:	08 95       	ret

00001598 <SPI_init>:

void SPI_init()
{
	//init external interrupt INT2 on falling edge
	#if defined(__AVR_ATmega162__)
		set_bit(GICR, INT2);
    1598:	8b b7       	in	r24, 0x3b	; 59
    159a:	80 62       	ori	r24, 0x20	; 32
    159c:	8b bf       	out	0x3b, r24	; 59
		clear_bit(EMCUCR, ISC2);
    159e:	86 b7       	in	r24, 0x36	; 54
    15a0:	8e 7f       	andi	r24, 0xFE	; 254
    15a2:	86 bf       	out	0x36, r24	; 54
		
		// Set _SS, MOSI and SCK output, all others input
		DDR_SPI |= (1<<SS_CAN_CONTROLLER_PIN_MODE) | (1<<MOSI_PIN) | (1<<SCK_PIN);
    15a4:	87 b3       	in	r24, 0x17	; 23
    15a6:	80 6b       	ori	r24, 0xB0	; 176
    15a8:	87 bb       	out	0x17, r24	; 23
	#endif
	
	

	// Enable SPI, Master, set clock rate fck/4
	SPCR = (1<<SPE) | (1<<MSTR);
    15aa:	80 e5       	ldi	r24, 0x50	; 80
    15ac:	8d b9       	out	0x0d, r24	; 13
	
	// clock rate fck/2
	SPSR = (1<<SPI2X);
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	8e b9       	out	0x0e, r24	; 14

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORT_SPI, SS_CAN_CONTROLLER_PIN);
    15b2:	c4 9a       	sbi	0x18, 4	; 24
    15b4:	08 95       	ret

000015b6 <SPI_send>:
}

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    15b6:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    15b8:	77 9b       	sbis	0x0e, 7	; 14
    15ba:	fe cf       	rjmp	.-4      	; 0x15b8 <SPI_send+0x2>
}
    15bc:	08 95       	ret

000015be <SPI_receive>:

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    15be:	8f ef       	ldi	r24, 0xFF	; 255
    15c0:	fa df       	rcall	.-12     	; 0x15b6 <SPI_send>
    15c2:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    15c4:	fe cf       	rjmp	.-4      	; 0x15c2 <SPI_receive+0x4>
    15c6:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    15c8:	08 95       	ret

000015ca <SPI_activateSlave>:

	return data;
}
    15ca:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    15cc:	01 c0       	rjmp	.+2      	; 0x15d0 <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    15ce:	c4 98       	cbi	0x18, 4	; 24
    15d0:	08 95       	ret

000015d2 <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    15d2:	81 11       	cpse	r24, r1
    15d4:	01 c0       	rjmp	.+2      	; 0x15d8 <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    15d6:	c4 9a       	sbi	0x18, 4	; 24
    15d8:	08 95       	ret

000015da <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    15da:	5d 9b       	sbis	0x0b, 5	; 11
    15dc:	fe cf       	rjmp	.-4      	; 0x15da <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    15de:	8c b9       	out	0x0c, r24	; 12
    15e0:	08 95       	ret

000015e2 <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    15e2:	5f 9b       	sbis	0x0b, 7	; 11
    15e4:	fe cf       	rjmp	.-4      	; 0x15e2 <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    15e6:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
    15e8:	08 95       	ret

000015ea <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    15ea:	ef 92       	push	r14
    15ec:	ff 92       	push	r15
    15ee:	0f 93       	push	r16
    15f0:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    15f2:	bb 27       	eor	r27, r27
    15f4:	a1 2f       	mov	r26, r17
    15f6:	90 2f       	mov	r25, r16
    15f8:	8f 2d       	mov	r24, r15
    15fa:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    15fc:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    15fe:	88 e1       	ldi	r24, 0x18	; 24
    1600:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    1602:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	#if defined(__AVR_ATmega162__)
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    1604:	8e e8       	ldi	r24, 0x8E	; 142
    1606:	80 bd       	out	0x20, r24	; 32
	
	#if defined(__AVR_ATmega2560__)
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	#endif
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    1608:	61 ef       	ldi	r22, 0xF1	; 241
    160a:	7a e0       	ldi	r23, 0x0A	; 10
    160c:	8d ee       	ldi	r24, 0xED	; 237
    160e:	9a e0       	ldi	r25, 0x0A	; 10
    1610:	79 d1       	rcall	.+754    	; 0x1904 <fdevopen>
    1612:	1f 91       	pop	r17
    1614:	0f 91       	pop	r16
    1616:	ff 90       	pop	r15
    1618:	ef 90       	pop	r14
    161a:	08 95       	ret

0000161c <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    161c:	9b 01       	movw	r18, r22
	
	switch(channel){
    161e:	82 30       	cpi	r24, 0x02	; 2
    1620:	69 f0       	breq	.+26     	; 0x163c <ADC_request+0x20>
    1622:	18 f4       	brcc	.+6      	; 0x162a <ADC_request+0xe>
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	31 f0       	breq	.+12     	; 0x1634 <ADC_request+0x18>
    1628:	15 c0       	rjmp	.+42     	; 0x1654 <ADC_request+0x38>
    162a:	83 30       	cpi	r24, 0x03	; 3
    162c:	59 f0       	breq	.+22     	; 0x1644 <ADC_request+0x28>
    162e:	84 30       	cpi	r24, 0x04	; 4
    1630:	69 f0       	breq	.+26     	; 0x164c <ADC_request+0x30>
    1632:	10 c0       	rjmp	.+32     	; 0x1654 <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    1634:	64 e0       	ldi	r22, 0x04	; 4
    1636:	c9 01       	movw	r24, r18
    1638:	65 c9       	rjmp	.-3382   	; 0x904 <saveToAddress>
    163a:	08 95       	ret
			break;
    163c:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    163e:	c9 01       	movw	r24, r18
    1640:	61 c9       	rjmp	.-3390   	; 0x904 <saveToAddress>
    1642:	08 95       	ret
    1644:	66 e0       	ldi	r22, 0x06	; 6
			break;
    1646:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    1648:	5d c9       	rjmp	.-3398   	; 0x904 <saveToAddress>
    164a:	08 95       	ret
    164c:	67 e0       	ldi	r22, 0x07	; 7
    164e:	c9 01       	movw	r24, r18
			break;
    1650:	59 c9       	rjmp	.-3406   	; 0x904 <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    1652:	08 95       	ret
    1654:	84 e4       	ldi	r24, 0x44	; 68
    1656:	92 e0       	ldi	r25, 0x02	; 2
    1658:	9f 93       	push	r25
			break;
    165a:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    165c:	9d d1       	rcall	.+826    	; 0x1998 <printf>
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	08 95       	ret

00001664 <ADC_read>:
    1664:	4c c9       	rjmp	.-3432   	; 0x8fe <readFromAddress>
    1666:	08 95       	ret

00001668 <__divmodhi4>:
			break;
    1668:	97 fb       	bst	r25, 7
    166a:	07 2e       	mov	r0, r23
    166c:	16 f4       	brtc	.+4      	; 0x1672 <__divmodhi4+0xa>
    166e:	00 94       	com	r0
    1670:	06 d0       	rcall	.+12     	; 0x167e <__divmodhi4_neg1>
    1672:	77 fd       	sbrc	r23, 7
    1674:	08 d0       	rcall	.+16     	; 0x1686 <__divmodhi4_neg2>
    1676:	0b d0       	rcall	.+22     	; 0x168e <__udivmodhi4>
    1678:	07 fc       	sbrc	r0, 7
    167a:	05 d0       	rcall	.+10     	; 0x1686 <__divmodhi4_neg2>
    167c:	3e f4       	brtc	.+14     	; 0x168c <__divmodhi4_exit>

0000167e <__divmodhi4_neg1>:
    167e:	90 95       	com	r25
    1680:	81 95       	neg	r24
    1682:	9f 4f       	sbci	r25, 0xFF	; 255
    1684:	08 95       	ret

00001686 <__divmodhi4_neg2>:
    1686:	70 95       	com	r23
    1688:	61 95       	neg	r22
    168a:	7f 4f       	sbci	r23, 0xFF	; 255

0000168c <__divmodhi4_exit>:
    168c:	08 95       	ret

0000168e <__udivmodhi4>:
    168e:	aa 1b       	sub	r26, r26
    1690:	bb 1b       	sub	r27, r27
    1692:	51 e1       	ldi	r21, 0x11	; 17
    1694:	07 c0       	rjmp	.+14     	; 0x16a4 <__udivmodhi4_ep>

00001696 <__udivmodhi4_loop>:
    1696:	aa 1f       	adc	r26, r26
    1698:	bb 1f       	adc	r27, r27
    169a:	a6 17       	cp	r26, r22
    169c:	b7 07       	cpc	r27, r23
    169e:	10 f0       	brcs	.+4      	; 0x16a4 <__udivmodhi4_ep>
    16a0:	a6 1b       	sub	r26, r22
    16a2:	b7 0b       	sbc	r27, r23

000016a4 <__udivmodhi4_ep>:
    16a4:	88 1f       	adc	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	5a 95       	dec	r21
    16aa:	a9 f7       	brne	.-22     	; 0x1696 <__udivmodhi4_loop>
    16ac:	80 95       	com	r24
    16ae:	90 95       	com	r25
    16b0:	bc 01       	movw	r22, r24
    16b2:	cd 01       	movw	r24, r26
    16b4:	08 95       	ret

000016b6 <malloc>:
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	82 30       	cpi	r24, 0x02	; 2
    16bc:	91 05       	cpc	r25, r1
    16be:	10 f4       	brcc	.+4      	; 0x16c4 <malloc+0xe>
    16c0:	82 e0       	ldi	r24, 0x02	; 2
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	e0 91 82 02 	lds	r30, 0x0282
    16c8:	f0 91 83 02 	lds	r31, 0x0283
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	a0 e0       	ldi	r26, 0x00	; 0
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	30 97       	sbiw	r30, 0x00	; 0
    16d6:	39 f1       	breq	.+78     	; 0x1726 <malloc+0x70>
    16d8:	40 81       	ld	r20, Z
    16da:	51 81       	ldd	r21, Z+1	; 0x01
    16dc:	48 17       	cp	r20, r24
    16de:	59 07       	cpc	r21, r25
    16e0:	b8 f0       	brcs	.+46     	; 0x1710 <malloc+0x5a>
    16e2:	48 17       	cp	r20, r24
    16e4:	59 07       	cpc	r21, r25
    16e6:	71 f4       	brne	.+28     	; 0x1704 <malloc+0x4e>
    16e8:	82 81       	ldd	r24, Z+2	; 0x02
    16ea:	93 81       	ldd	r25, Z+3	; 0x03
    16ec:	10 97       	sbiw	r26, 0x00	; 0
    16ee:	29 f0       	breq	.+10     	; 0x16fa <malloc+0x44>
    16f0:	13 96       	adiw	r26, 0x03	; 3
    16f2:	9c 93       	st	X, r25
    16f4:	8e 93       	st	-X, r24
    16f6:	12 97       	sbiw	r26, 0x02	; 2
    16f8:	2c c0       	rjmp	.+88     	; 0x1752 <malloc+0x9c>
    16fa:	90 93 83 02 	sts	0x0283, r25
    16fe:	80 93 82 02 	sts	0x0282, r24
    1702:	27 c0       	rjmp	.+78     	; 0x1752 <malloc+0x9c>
    1704:	21 15       	cp	r18, r1
    1706:	31 05       	cpc	r19, r1
    1708:	31 f0       	breq	.+12     	; 0x1716 <malloc+0x60>
    170a:	42 17       	cp	r20, r18
    170c:	53 07       	cpc	r21, r19
    170e:	18 f0       	brcs	.+6      	; 0x1716 <malloc+0x60>
    1710:	a9 01       	movw	r20, r18
    1712:	db 01       	movw	r26, r22
    1714:	01 c0       	rjmp	.+2      	; 0x1718 <malloc+0x62>
    1716:	ef 01       	movw	r28, r30
    1718:	9a 01       	movw	r18, r20
    171a:	bd 01       	movw	r22, r26
    171c:	df 01       	movw	r26, r30
    171e:	02 80       	ldd	r0, Z+2	; 0x02
    1720:	f3 81       	ldd	r31, Z+3	; 0x03
    1722:	e0 2d       	mov	r30, r0
    1724:	d7 cf       	rjmp	.-82     	; 0x16d4 <malloc+0x1e>
    1726:	21 15       	cp	r18, r1
    1728:	31 05       	cpc	r19, r1
    172a:	f9 f0       	breq	.+62     	; 0x176a <malloc+0xb4>
    172c:	28 1b       	sub	r18, r24
    172e:	39 0b       	sbc	r19, r25
    1730:	24 30       	cpi	r18, 0x04	; 4
    1732:	31 05       	cpc	r19, r1
    1734:	80 f4       	brcc	.+32     	; 0x1756 <malloc+0xa0>
    1736:	8a 81       	ldd	r24, Y+2	; 0x02
    1738:	9b 81       	ldd	r25, Y+3	; 0x03
    173a:	61 15       	cp	r22, r1
    173c:	71 05       	cpc	r23, r1
    173e:	21 f0       	breq	.+8      	; 0x1748 <malloc+0x92>
    1740:	fb 01       	movw	r30, r22
    1742:	93 83       	std	Z+3, r25	; 0x03
    1744:	82 83       	std	Z+2, r24	; 0x02
    1746:	04 c0       	rjmp	.+8      	; 0x1750 <malloc+0x9a>
    1748:	90 93 83 02 	sts	0x0283, r25
    174c:	80 93 82 02 	sts	0x0282, r24
    1750:	fe 01       	movw	r30, r28
    1752:	32 96       	adiw	r30, 0x02	; 2
    1754:	44 c0       	rjmp	.+136    	; 0x17de <malloc+0x128>
    1756:	fe 01       	movw	r30, r28
    1758:	e2 0f       	add	r30, r18
    175a:	f3 1f       	adc	r31, r19
    175c:	81 93       	st	Z+, r24
    175e:	91 93       	st	Z+, r25
    1760:	22 50       	subi	r18, 0x02	; 2
    1762:	31 09       	sbc	r19, r1
    1764:	39 83       	std	Y+1, r19	; 0x01
    1766:	28 83       	st	Y, r18
    1768:	3a c0       	rjmp	.+116    	; 0x17de <malloc+0x128>
    176a:	20 91 80 02 	lds	r18, 0x0280
    176e:	30 91 81 02 	lds	r19, 0x0281
    1772:	23 2b       	or	r18, r19
    1774:	41 f4       	brne	.+16     	; 0x1786 <malloc+0xd0>
    1776:	20 91 02 01 	lds	r18, 0x0102
    177a:	30 91 03 01 	lds	r19, 0x0103
    177e:	30 93 81 02 	sts	0x0281, r19
    1782:	20 93 80 02 	sts	0x0280, r18
    1786:	20 91 00 01 	lds	r18, 0x0100
    178a:	30 91 01 01 	lds	r19, 0x0101
    178e:	21 15       	cp	r18, r1
    1790:	31 05       	cpc	r19, r1
    1792:	41 f4       	brne	.+16     	; 0x17a4 <malloc+0xee>
    1794:	2d b7       	in	r18, 0x3d	; 61
    1796:	3e b7       	in	r19, 0x3e	; 62
    1798:	40 91 04 01 	lds	r20, 0x0104
    179c:	50 91 05 01 	lds	r21, 0x0105
    17a0:	24 1b       	sub	r18, r20
    17a2:	35 0b       	sbc	r19, r21
    17a4:	e0 91 80 02 	lds	r30, 0x0280
    17a8:	f0 91 81 02 	lds	r31, 0x0281
    17ac:	e2 17       	cp	r30, r18
    17ae:	f3 07       	cpc	r31, r19
    17b0:	a0 f4       	brcc	.+40     	; 0x17da <malloc+0x124>
    17b2:	2e 1b       	sub	r18, r30
    17b4:	3f 0b       	sbc	r19, r31
    17b6:	28 17       	cp	r18, r24
    17b8:	39 07       	cpc	r19, r25
    17ba:	78 f0       	brcs	.+30     	; 0x17da <malloc+0x124>
    17bc:	ac 01       	movw	r20, r24
    17be:	4e 5f       	subi	r20, 0xFE	; 254
    17c0:	5f 4f       	sbci	r21, 0xFF	; 255
    17c2:	24 17       	cp	r18, r20
    17c4:	35 07       	cpc	r19, r21
    17c6:	48 f0       	brcs	.+18     	; 0x17da <malloc+0x124>
    17c8:	4e 0f       	add	r20, r30
    17ca:	5f 1f       	adc	r21, r31
    17cc:	50 93 81 02 	sts	0x0281, r21
    17d0:	40 93 80 02 	sts	0x0280, r20
    17d4:	81 93       	st	Z+, r24
    17d6:	91 93       	st	Z+, r25
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <malloc+0x128>
    17da:	e0 e0       	ldi	r30, 0x00	; 0
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	cf 01       	movw	r24, r30
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	08 95       	ret

000017e6 <free>:
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <free+0xa>
    17ee:	87 c0       	rjmp	.+270    	; 0x18fe <free+0x118>
    17f0:	fc 01       	movw	r30, r24
    17f2:	32 97       	sbiw	r30, 0x02	; 2
    17f4:	13 82       	std	Z+3, r1	; 0x03
    17f6:	12 82       	std	Z+2, r1	; 0x02
    17f8:	c0 91 82 02 	lds	r28, 0x0282
    17fc:	d0 91 83 02 	lds	r29, 0x0283
    1800:	20 97       	sbiw	r28, 0x00	; 0
    1802:	81 f4       	brne	.+32     	; 0x1824 <free+0x3e>
    1804:	20 81       	ld	r18, Z
    1806:	31 81       	ldd	r19, Z+1	; 0x01
    1808:	28 0f       	add	r18, r24
    180a:	39 1f       	adc	r19, r25
    180c:	80 91 80 02 	lds	r24, 0x0280
    1810:	90 91 81 02 	lds	r25, 0x0281
    1814:	82 17       	cp	r24, r18
    1816:	93 07       	cpc	r25, r19
    1818:	79 f5       	brne	.+94     	; 0x1878 <free+0x92>
    181a:	f0 93 81 02 	sts	0x0281, r31
    181e:	e0 93 80 02 	sts	0x0280, r30
    1822:	6d c0       	rjmp	.+218    	; 0x18fe <free+0x118>
    1824:	de 01       	movw	r26, r28
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	ae 17       	cp	r26, r30
    182c:	bf 07       	cpc	r27, r31
    182e:	50 f4       	brcc	.+20     	; 0x1844 <free+0x5e>
    1830:	12 96       	adiw	r26, 0x02	; 2
    1832:	4d 91       	ld	r20, X+
    1834:	5c 91       	ld	r21, X
    1836:	13 97       	sbiw	r26, 0x03	; 3
    1838:	9d 01       	movw	r18, r26
    183a:	41 15       	cp	r20, r1
    183c:	51 05       	cpc	r21, r1
    183e:	09 f1       	breq	.+66     	; 0x1882 <free+0x9c>
    1840:	da 01       	movw	r26, r20
    1842:	f3 cf       	rjmp	.-26     	; 0x182a <free+0x44>
    1844:	b3 83       	std	Z+3, r27	; 0x03
    1846:	a2 83       	std	Z+2, r26	; 0x02
    1848:	40 81       	ld	r20, Z
    184a:	51 81       	ldd	r21, Z+1	; 0x01
    184c:	84 0f       	add	r24, r20
    184e:	95 1f       	adc	r25, r21
    1850:	8a 17       	cp	r24, r26
    1852:	9b 07       	cpc	r25, r27
    1854:	71 f4       	brne	.+28     	; 0x1872 <free+0x8c>
    1856:	8d 91       	ld	r24, X+
    1858:	9c 91       	ld	r25, X
    185a:	11 97       	sbiw	r26, 0x01	; 1
    185c:	84 0f       	add	r24, r20
    185e:	95 1f       	adc	r25, r21
    1860:	02 96       	adiw	r24, 0x02	; 2
    1862:	91 83       	std	Z+1, r25	; 0x01
    1864:	80 83       	st	Z, r24
    1866:	12 96       	adiw	r26, 0x02	; 2
    1868:	8d 91       	ld	r24, X+
    186a:	9c 91       	ld	r25, X
    186c:	13 97       	sbiw	r26, 0x03	; 3
    186e:	93 83       	std	Z+3, r25	; 0x03
    1870:	82 83       	std	Z+2, r24	; 0x02
    1872:	21 15       	cp	r18, r1
    1874:	31 05       	cpc	r19, r1
    1876:	29 f4       	brne	.+10     	; 0x1882 <free+0x9c>
    1878:	f0 93 83 02 	sts	0x0283, r31
    187c:	e0 93 82 02 	sts	0x0282, r30
    1880:	3e c0       	rjmp	.+124    	; 0x18fe <free+0x118>
    1882:	d9 01       	movw	r26, r18
    1884:	13 96       	adiw	r26, 0x03	; 3
    1886:	fc 93       	st	X, r31
    1888:	ee 93       	st	-X, r30
    188a:	12 97       	sbiw	r26, 0x02	; 2
    188c:	4d 91       	ld	r20, X+
    188e:	5d 91       	ld	r21, X+
    1890:	a4 0f       	add	r26, r20
    1892:	b5 1f       	adc	r27, r21
    1894:	ea 17       	cp	r30, r26
    1896:	fb 07       	cpc	r31, r27
    1898:	79 f4       	brne	.+30     	; 0x18b8 <free+0xd2>
    189a:	80 81       	ld	r24, Z
    189c:	91 81       	ldd	r25, Z+1	; 0x01
    189e:	84 0f       	add	r24, r20
    18a0:	95 1f       	adc	r25, r21
    18a2:	02 96       	adiw	r24, 0x02	; 2
    18a4:	d9 01       	movw	r26, r18
    18a6:	11 96       	adiw	r26, 0x01	; 1
    18a8:	9c 93       	st	X, r25
    18aa:	8e 93       	st	-X, r24
    18ac:	82 81       	ldd	r24, Z+2	; 0x02
    18ae:	93 81       	ldd	r25, Z+3	; 0x03
    18b0:	13 96       	adiw	r26, 0x03	; 3
    18b2:	9c 93       	st	X, r25
    18b4:	8e 93       	st	-X, r24
    18b6:	12 97       	sbiw	r26, 0x02	; 2
    18b8:	e0 e0       	ldi	r30, 0x00	; 0
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	9b 81       	ldd	r25, Y+3	; 0x03
    18c0:	00 97       	sbiw	r24, 0x00	; 0
    18c2:	19 f0       	breq	.+6      	; 0x18ca <free+0xe4>
    18c4:	fe 01       	movw	r30, r28
    18c6:	ec 01       	movw	r28, r24
    18c8:	f9 cf       	rjmp	.-14     	; 0x18bc <free+0xd6>
    18ca:	ce 01       	movw	r24, r28
    18cc:	02 96       	adiw	r24, 0x02	; 2
    18ce:	28 81       	ld	r18, Y
    18d0:	39 81       	ldd	r19, Y+1	; 0x01
    18d2:	82 0f       	add	r24, r18
    18d4:	93 1f       	adc	r25, r19
    18d6:	20 91 80 02 	lds	r18, 0x0280
    18da:	30 91 81 02 	lds	r19, 0x0281
    18de:	28 17       	cp	r18, r24
    18e0:	39 07       	cpc	r19, r25
    18e2:	69 f4       	brne	.+26     	; 0x18fe <free+0x118>
    18e4:	30 97       	sbiw	r30, 0x00	; 0
    18e6:	29 f4       	brne	.+10     	; 0x18f2 <free+0x10c>
    18e8:	10 92 83 02 	sts	0x0283, r1
    18ec:	10 92 82 02 	sts	0x0282, r1
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <free+0x110>
    18f2:	13 82       	std	Z+3, r1	; 0x03
    18f4:	12 82       	std	Z+2, r1	; 0x02
    18f6:	d0 93 81 02 	sts	0x0281, r29
    18fa:	c0 93 80 02 	sts	0x0280, r28
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
    1902:	08 95       	ret

00001904 <fdevopen>:
    1904:	0f 93       	push	r16
    1906:	1f 93       	push	r17
    1908:	cf 93       	push	r28
    190a:	df 93       	push	r29
    190c:	ec 01       	movw	r28, r24
    190e:	8b 01       	movw	r16, r22
    1910:	00 97       	sbiw	r24, 0x00	; 0
    1912:	31 f4       	brne	.+12     	; 0x1920 <fdevopen+0x1c>
    1914:	61 15       	cp	r22, r1
    1916:	71 05       	cpc	r23, r1
    1918:	19 f4       	brne	.+6      	; 0x1920 <fdevopen+0x1c>
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	37 c0       	rjmp	.+110    	; 0x198e <fdevopen+0x8a>
    1920:	6e e0       	ldi	r22, 0x0E	; 14
    1922:	70 e0       	ldi	r23, 0x00	; 0
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	3d d2       	rcall	.+1146   	; 0x1da4 <calloc>
    192a:	fc 01       	movw	r30, r24
    192c:	00 97       	sbiw	r24, 0x00	; 0
    192e:	a9 f3       	breq	.-22     	; 0x191a <fdevopen+0x16>
    1930:	80 e8       	ldi	r24, 0x80	; 128
    1932:	83 83       	std	Z+3, r24	; 0x03
    1934:	01 15       	cp	r16, r1
    1936:	11 05       	cpc	r17, r1
    1938:	71 f0       	breq	.+28     	; 0x1956 <fdevopen+0x52>
    193a:	13 87       	std	Z+11, r17	; 0x0b
    193c:	02 87       	std	Z+10, r16	; 0x0a
    193e:	81 e8       	ldi	r24, 0x81	; 129
    1940:	83 83       	std	Z+3, r24	; 0x03
    1942:	80 91 84 02 	lds	r24, 0x0284
    1946:	90 91 85 02 	lds	r25, 0x0285
    194a:	89 2b       	or	r24, r25
    194c:	21 f4       	brne	.+8      	; 0x1956 <fdevopen+0x52>
    194e:	f0 93 85 02 	sts	0x0285, r31
    1952:	e0 93 84 02 	sts	0x0284, r30
    1956:	20 97       	sbiw	r28, 0x00	; 0
    1958:	c9 f0       	breq	.+50     	; 0x198c <fdevopen+0x88>
    195a:	d1 87       	std	Z+9, r29	; 0x09
    195c:	c0 87       	std	Z+8, r28	; 0x08
    195e:	83 81       	ldd	r24, Z+3	; 0x03
    1960:	82 60       	ori	r24, 0x02	; 2
    1962:	83 83       	std	Z+3, r24	; 0x03
    1964:	80 91 86 02 	lds	r24, 0x0286
    1968:	90 91 87 02 	lds	r25, 0x0287
    196c:	89 2b       	or	r24, r25
    196e:	71 f4       	brne	.+28     	; 0x198c <fdevopen+0x88>
    1970:	f0 93 87 02 	sts	0x0287, r31
    1974:	e0 93 86 02 	sts	0x0286, r30
    1978:	80 91 88 02 	lds	r24, 0x0288
    197c:	90 91 89 02 	lds	r25, 0x0289
    1980:	89 2b       	or	r24, r25
    1982:	21 f4       	brne	.+8      	; 0x198c <fdevopen+0x88>
    1984:	f0 93 89 02 	sts	0x0289, r31
    1988:	e0 93 88 02 	sts	0x0288, r30
    198c:	cf 01       	movw	r24, r30
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
    1992:	1f 91       	pop	r17
    1994:	0f 91       	pop	r16
    1996:	08 95       	ret

00001998 <printf>:
    1998:	a0 e0       	ldi	r26, 0x00	; 0
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e1 ed       	ldi	r30, 0xD1	; 209
    199e:	fc e0       	ldi	r31, 0x0C	; 12
    19a0:	d8 c2       	rjmp	.+1456   	; 0x1f52 <__prologue_saves__+0x20>
    19a2:	fe 01       	movw	r30, r28
    19a4:	35 96       	adiw	r30, 0x05	; 5
    19a6:	61 91       	ld	r22, Z+
    19a8:	71 91       	ld	r23, Z+
    19aa:	af 01       	movw	r20, r30
    19ac:	80 91 86 02 	lds	r24, 0x0286
    19b0:	90 91 87 02 	lds	r25, 0x0287
    19b4:	34 d0       	rcall	.+104    	; 0x1a1e <vfprintf>
    19b6:	e2 e0       	ldi	r30, 0x02	; 2
    19b8:	e8 c2       	rjmp	.+1488   	; 0x1f8a <__epilogue_restores__+0x20>

000019ba <putchar>:
    19ba:	60 91 86 02 	lds	r22, 0x0286
    19be:	70 91 87 02 	lds	r23, 0x0287
    19c2:	27 c2       	rjmp	.+1102   	; 0x1e12 <fputc>

000019c4 <puts>:
    19c4:	0f 93       	push	r16
    19c6:	1f 93       	push	r17
    19c8:	cf 93       	push	r28
    19ca:	df 93       	push	r29
    19cc:	e0 91 86 02 	lds	r30, 0x0286
    19d0:	f0 91 87 02 	lds	r31, 0x0287
    19d4:	23 81       	ldd	r18, Z+3	; 0x03
    19d6:	21 ff       	sbrs	r18, 1
    19d8:	1b c0       	rjmp	.+54     	; 0x1a10 <puts+0x4c>
    19da:	ec 01       	movw	r28, r24
    19dc:	00 e0       	ldi	r16, 0x00	; 0
    19de:	10 e0       	ldi	r17, 0x00	; 0
    19e0:	89 91       	ld	r24, Y+
    19e2:	60 91 86 02 	lds	r22, 0x0286
    19e6:	70 91 87 02 	lds	r23, 0x0287
    19ea:	db 01       	movw	r26, r22
    19ec:	18 96       	adiw	r26, 0x08	; 8
    19ee:	ed 91       	ld	r30, X+
    19f0:	fc 91       	ld	r31, X
    19f2:	19 97       	sbiw	r26, 0x09	; 9
    19f4:	88 23       	and	r24, r24
    19f6:	31 f0       	breq	.+12     	; 0x1a04 <puts+0x40>
    19f8:	09 95       	icall
    19fa:	89 2b       	or	r24, r25
    19fc:	89 f3       	breq	.-30     	; 0x19e0 <puts+0x1c>
    19fe:	0f ef       	ldi	r16, 0xFF	; 255
    1a00:	1f ef       	ldi	r17, 0xFF	; 255
    1a02:	ee cf       	rjmp	.-36     	; 0x19e0 <puts+0x1c>
    1a04:	8a e0       	ldi	r24, 0x0A	; 10
    1a06:	09 95       	icall
    1a08:	89 2b       	or	r24, r25
    1a0a:	11 f4       	brne	.+4      	; 0x1a10 <puts+0x4c>
    1a0c:	c8 01       	movw	r24, r16
    1a0e:	02 c0       	rjmp	.+4      	; 0x1a14 <puts+0x50>
    1a10:	8f ef       	ldi	r24, 0xFF	; 255
    1a12:	9f ef       	ldi	r25, 0xFF	; 255
    1a14:	df 91       	pop	r29
    1a16:	cf 91       	pop	r28
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	08 95       	ret

00001a1e <vfprintf>:
    1a1e:	ac e0       	ldi	r26, 0x0C	; 12
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e4 e1       	ldi	r30, 0x14	; 20
    1a24:	fd e0       	ldi	r31, 0x0D	; 13
    1a26:	85 c2       	rjmp	.+1290   	; 0x1f32 <__prologue_saves__>
    1a28:	7c 01       	movw	r14, r24
    1a2a:	6b 01       	movw	r12, r22
    1a2c:	8a 01       	movw	r16, r20
    1a2e:	fc 01       	movw	r30, r24
    1a30:	17 82       	std	Z+7, r1	; 0x07
    1a32:	16 82       	std	Z+6, r1	; 0x06
    1a34:	83 81       	ldd	r24, Z+3	; 0x03
    1a36:	81 ff       	sbrs	r24, 1
    1a38:	b0 c1       	rjmp	.+864    	; 0x1d9a <vfprintf+0x37c>
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	01 96       	adiw	r24, 0x01	; 1
    1a3e:	4c 01       	movw	r8, r24
    1a40:	f7 01       	movw	r30, r14
    1a42:	93 81       	ldd	r25, Z+3	; 0x03
    1a44:	f6 01       	movw	r30, r12
    1a46:	93 fd       	sbrc	r25, 3
    1a48:	85 91       	lpm	r24, Z+
    1a4a:	93 ff       	sbrs	r25, 3
    1a4c:	81 91       	ld	r24, Z+
    1a4e:	6f 01       	movw	r12, r30
    1a50:	88 23       	and	r24, r24
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <vfprintf+0x38>
    1a54:	9e c1       	rjmp	.+828    	; 0x1d92 <vfprintf+0x374>
    1a56:	85 32       	cpi	r24, 0x25	; 37
    1a58:	39 f4       	brne	.+14     	; 0x1a68 <vfprintf+0x4a>
    1a5a:	93 fd       	sbrc	r25, 3
    1a5c:	85 91       	lpm	r24, Z+
    1a5e:	93 ff       	sbrs	r25, 3
    1a60:	81 91       	ld	r24, Z+
    1a62:	6f 01       	movw	r12, r30
    1a64:	85 32       	cpi	r24, 0x25	; 37
    1a66:	21 f4       	brne	.+8      	; 0x1a70 <vfprintf+0x52>
    1a68:	b7 01       	movw	r22, r14
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	d2 d1       	rcall	.+932    	; 0x1e12 <fputc>
    1a6e:	e8 cf       	rjmp	.-48     	; 0x1a40 <vfprintf+0x22>
    1a70:	51 2c       	mov	r5, r1
    1a72:	31 2c       	mov	r3, r1
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	20 32       	cpi	r18, 0x20	; 32
    1a78:	a0 f4       	brcc	.+40     	; 0x1aa2 <vfprintf+0x84>
    1a7a:	8b 32       	cpi	r24, 0x2B	; 43
    1a7c:	69 f0       	breq	.+26     	; 0x1a98 <vfprintf+0x7a>
    1a7e:	30 f4       	brcc	.+12     	; 0x1a8c <vfprintf+0x6e>
    1a80:	80 32       	cpi	r24, 0x20	; 32
    1a82:	59 f0       	breq	.+22     	; 0x1a9a <vfprintf+0x7c>
    1a84:	83 32       	cpi	r24, 0x23	; 35
    1a86:	69 f4       	brne	.+26     	; 0x1aa2 <vfprintf+0x84>
    1a88:	20 61       	ori	r18, 0x10	; 16
    1a8a:	2c c0       	rjmp	.+88     	; 0x1ae4 <vfprintf+0xc6>
    1a8c:	8d 32       	cpi	r24, 0x2D	; 45
    1a8e:	39 f0       	breq	.+14     	; 0x1a9e <vfprintf+0x80>
    1a90:	80 33       	cpi	r24, 0x30	; 48
    1a92:	39 f4       	brne	.+14     	; 0x1aa2 <vfprintf+0x84>
    1a94:	21 60       	ori	r18, 0x01	; 1
    1a96:	26 c0       	rjmp	.+76     	; 0x1ae4 <vfprintf+0xc6>
    1a98:	22 60       	ori	r18, 0x02	; 2
    1a9a:	24 60       	ori	r18, 0x04	; 4
    1a9c:	23 c0       	rjmp	.+70     	; 0x1ae4 <vfprintf+0xc6>
    1a9e:	28 60       	ori	r18, 0x08	; 8
    1aa0:	21 c0       	rjmp	.+66     	; 0x1ae4 <vfprintf+0xc6>
    1aa2:	27 fd       	sbrc	r18, 7
    1aa4:	27 c0       	rjmp	.+78     	; 0x1af4 <vfprintf+0xd6>
    1aa6:	30 ed       	ldi	r19, 0xD0	; 208
    1aa8:	38 0f       	add	r19, r24
    1aaa:	3a 30       	cpi	r19, 0x0A	; 10
    1aac:	78 f4       	brcc	.+30     	; 0x1acc <vfprintf+0xae>
    1aae:	26 ff       	sbrs	r18, 6
    1ab0:	06 c0       	rjmp	.+12     	; 0x1abe <vfprintf+0xa0>
    1ab2:	fa e0       	ldi	r31, 0x0A	; 10
    1ab4:	5f 9e       	mul	r5, r31
    1ab6:	30 0d       	add	r19, r0
    1ab8:	11 24       	eor	r1, r1
    1aba:	53 2e       	mov	r5, r19
    1abc:	13 c0       	rjmp	.+38     	; 0x1ae4 <vfprintf+0xc6>
    1abe:	8a e0       	ldi	r24, 0x0A	; 10
    1ac0:	38 9e       	mul	r3, r24
    1ac2:	30 0d       	add	r19, r0
    1ac4:	11 24       	eor	r1, r1
    1ac6:	33 2e       	mov	r3, r19
    1ac8:	20 62       	ori	r18, 0x20	; 32
    1aca:	0c c0       	rjmp	.+24     	; 0x1ae4 <vfprintf+0xc6>
    1acc:	8e 32       	cpi	r24, 0x2E	; 46
    1ace:	21 f4       	brne	.+8      	; 0x1ad8 <vfprintf+0xba>
    1ad0:	26 fd       	sbrc	r18, 6
    1ad2:	5f c1       	rjmp	.+702    	; 0x1d92 <vfprintf+0x374>
    1ad4:	20 64       	ori	r18, 0x40	; 64
    1ad6:	06 c0       	rjmp	.+12     	; 0x1ae4 <vfprintf+0xc6>
    1ad8:	8c 36       	cpi	r24, 0x6C	; 108
    1ada:	11 f4       	brne	.+4      	; 0x1ae0 <vfprintf+0xc2>
    1adc:	20 68       	ori	r18, 0x80	; 128
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <vfprintf+0xc6>
    1ae0:	88 36       	cpi	r24, 0x68	; 104
    1ae2:	41 f4       	brne	.+16     	; 0x1af4 <vfprintf+0xd6>
    1ae4:	f6 01       	movw	r30, r12
    1ae6:	93 fd       	sbrc	r25, 3
    1ae8:	85 91       	lpm	r24, Z+
    1aea:	93 ff       	sbrs	r25, 3
    1aec:	81 91       	ld	r24, Z+
    1aee:	6f 01       	movw	r12, r30
    1af0:	81 11       	cpse	r24, r1
    1af2:	c1 cf       	rjmp	.-126    	; 0x1a76 <vfprintf+0x58>
    1af4:	98 2f       	mov	r25, r24
    1af6:	9f 7d       	andi	r25, 0xDF	; 223
    1af8:	95 54       	subi	r25, 0x45	; 69
    1afa:	93 30       	cpi	r25, 0x03	; 3
    1afc:	28 f4       	brcc	.+10     	; 0x1b08 <vfprintf+0xea>
    1afe:	0c 5f       	subi	r16, 0xFC	; 252
    1b00:	1f 4f       	sbci	r17, 0xFF	; 255
    1b02:	ff e3       	ldi	r31, 0x3F	; 63
    1b04:	f9 83       	std	Y+1, r31	; 0x01
    1b06:	0d c0       	rjmp	.+26     	; 0x1b22 <vfprintf+0x104>
    1b08:	83 36       	cpi	r24, 0x63	; 99
    1b0a:	31 f0       	breq	.+12     	; 0x1b18 <vfprintf+0xfa>
    1b0c:	83 37       	cpi	r24, 0x73	; 115
    1b0e:	71 f0       	breq	.+28     	; 0x1b2c <vfprintf+0x10e>
    1b10:	83 35       	cpi	r24, 0x53	; 83
    1b12:	09 f0       	breq	.+2      	; 0x1b16 <vfprintf+0xf8>
    1b14:	57 c0       	rjmp	.+174    	; 0x1bc4 <vfprintf+0x1a6>
    1b16:	21 c0       	rjmp	.+66     	; 0x1b5a <vfprintf+0x13c>
    1b18:	f8 01       	movw	r30, r16
    1b1a:	80 81       	ld	r24, Z
    1b1c:	89 83       	std	Y+1, r24	; 0x01
    1b1e:	0e 5f       	subi	r16, 0xFE	; 254
    1b20:	1f 4f       	sbci	r17, 0xFF	; 255
    1b22:	44 24       	eor	r4, r4
    1b24:	43 94       	inc	r4
    1b26:	51 2c       	mov	r5, r1
    1b28:	54 01       	movw	r10, r8
    1b2a:	14 c0       	rjmp	.+40     	; 0x1b54 <vfprintf+0x136>
    1b2c:	38 01       	movw	r6, r16
    1b2e:	f2 e0       	ldi	r31, 0x02	; 2
    1b30:	6f 0e       	add	r6, r31
    1b32:	71 1c       	adc	r7, r1
    1b34:	f8 01       	movw	r30, r16
    1b36:	a0 80       	ld	r10, Z
    1b38:	b1 80       	ldd	r11, Z+1	; 0x01
    1b3a:	26 ff       	sbrs	r18, 6
    1b3c:	03 c0       	rjmp	.+6      	; 0x1b44 <vfprintf+0x126>
    1b3e:	65 2d       	mov	r22, r5
    1b40:	70 e0       	ldi	r23, 0x00	; 0
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <vfprintf+0x12a>
    1b44:	6f ef       	ldi	r22, 0xFF	; 255
    1b46:	7f ef       	ldi	r23, 0xFF	; 255
    1b48:	c5 01       	movw	r24, r10
    1b4a:	2c 87       	std	Y+12, r18	; 0x0c
    1b4c:	57 d1       	rcall	.+686    	; 0x1dfc <strnlen>
    1b4e:	2c 01       	movw	r4, r24
    1b50:	83 01       	movw	r16, r6
    1b52:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b54:	2f 77       	andi	r18, 0x7F	; 127
    1b56:	22 2e       	mov	r2, r18
    1b58:	16 c0       	rjmp	.+44     	; 0x1b86 <vfprintf+0x168>
    1b5a:	38 01       	movw	r6, r16
    1b5c:	f2 e0       	ldi	r31, 0x02	; 2
    1b5e:	6f 0e       	add	r6, r31
    1b60:	71 1c       	adc	r7, r1
    1b62:	f8 01       	movw	r30, r16
    1b64:	a0 80       	ld	r10, Z
    1b66:	b1 80       	ldd	r11, Z+1	; 0x01
    1b68:	26 ff       	sbrs	r18, 6
    1b6a:	03 c0       	rjmp	.+6      	; 0x1b72 <vfprintf+0x154>
    1b6c:	65 2d       	mov	r22, r5
    1b6e:	70 e0       	ldi	r23, 0x00	; 0
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <vfprintf+0x158>
    1b72:	6f ef       	ldi	r22, 0xFF	; 255
    1b74:	7f ef       	ldi	r23, 0xFF	; 255
    1b76:	c5 01       	movw	r24, r10
    1b78:	2c 87       	std	Y+12, r18	; 0x0c
    1b7a:	2e d1       	rcall	.+604    	; 0x1dd8 <strnlen_P>
    1b7c:	2c 01       	movw	r4, r24
    1b7e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b80:	20 68       	ori	r18, 0x80	; 128
    1b82:	22 2e       	mov	r2, r18
    1b84:	83 01       	movw	r16, r6
    1b86:	23 fc       	sbrc	r2, 3
    1b88:	19 c0       	rjmp	.+50     	; 0x1bbc <vfprintf+0x19e>
    1b8a:	83 2d       	mov	r24, r3
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	48 16       	cp	r4, r24
    1b90:	59 06       	cpc	r5, r25
    1b92:	a0 f4       	brcc	.+40     	; 0x1bbc <vfprintf+0x19e>
    1b94:	b7 01       	movw	r22, r14
    1b96:	80 e2       	ldi	r24, 0x20	; 32
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	3b d1       	rcall	.+630    	; 0x1e12 <fputc>
    1b9c:	3a 94       	dec	r3
    1b9e:	f5 cf       	rjmp	.-22     	; 0x1b8a <vfprintf+0x16c>
    1ba0:	f5 01       	movw	r30, r10
    1ba2:	27 fc       	sbrc	r2, 7
    1ba4:	85 91       	lpm	r24, Z+
    1ba6:	27 fe       	sbrs	r2, 7
    1ba8:	81 91       	ld	r24, Z+
    1baa:	5f 01       	movw	r10, r30
    1bac:	b7 01       	movw	r22, r14
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	30 d1       	rcall	.+608    	; 0x1e12 <fputc>
    1bb2:	31 10       	cpse	r3, r1
    1bb4:	3a 94       	dec	r3
    1bb6:	f1 e0       	ldi	r31, 0x01	; 1
    1bb8:	4f 1a       	sub	r4, r31
    1bba:	51 08       	sbc	r5, r1
    1bbc:	41 14       	cp	r4, r1
    1bbe:	51 04       	cpc	r5, r1
    1bc0:	79 f7       	brne	.-34     	; 0x1ba0 <vfprintf+0x182>
    1bc2:	de c0       	rjmp	.+444    	; 0x1d80 <vfprintf+0x362>
    1bc4:	84 36       	cpi	r24, 0x64	; 100
    1bc6:	11 f0       	breq	.+4      	; 0x1bcc <vfprintf+0x1ae>
    1bc8:	89 36       	cpi	r24, 0x69	; 105
    1bca:	31 f5       	brne	.+76     	; 0x1c18 <vfprintf+0x1fa>
    1bcc:	f8 01       	movw	r30, r16
    1bce:	27 ff       	sbrs	r18, 7
    1bd0:	07 c0       	rjmp	.+14     	; 0x1be0 <vfprintf+0x1c2>
    1bd2:	60 81       	ld	r22, Z
    1bd4:	71 81       	ldd	r23, Z+1	; 0x01
    1bd6:	82 81       	ldd	r24, Z+2	; 0x02
    1bd8:	93 81       	ldd	r25, Z+3	; 0x03
    1bda:	0c 5f       	subi	r16, 0xFC	; 252
    1bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bde:	08 c0       	rjmp	.+16     	; 0x1bf0 <vfprintf+0x1d2>
    1be0:	60 81       	ld	r22, Z
    1be2:	71 81       	ldd	r23, Z+1	; 0x01
    1be4:	88 27       	eor	r24, r24
    1be6:	77 fd       	sbrc	r23, 7
    1be8:	80 95       	com	r24
    1bea:	98 2f       	mov	r25, r24
    1bec:	0e 5f       	subi	r16, 0xFE	; 254
    1bee:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf0:	2f 76       	andi	r18, 0x6F	; 111
    1bf2:	b2 2e       	mov	r11, r18
    1bf4:	97 ff       	sbrs	r25, 7
    1bf6:	09 c0       	rjmp	.+18     	; 0x1c0a <vfprintf+0x1ec>
    1bf8:	90 95       	com	r25
    1bfa:	80 95       	com	r24
    1bfc:	70 95       	com	r23
    1bfe:	61 95       	neg	r22
    1c00:	7f 4f       	sbci	r23, 0xFF	; 255
    1c02:	8f 4f       	sbci	r24, 0xFF	; 255
    1c04:	9f 4f       	sbci	r25, 0xFF	; 255
    1c06:	20 68       	ori	r18, 0x80	; 128
    1c08:	b2 2e       	mov	r11, r18
    1c0a:	2a e0       	ldi	r18, 0x0A	; 10
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	a4 01       	movw	r20, r8
    1c10:	32 d1       	rcall	.+612    	; 0x1e76 <__ultoa_invert>
    1c12:	a8 2e       	mov	r10, r24
    1c14:	a8 18       	sub	r10, r8
    1c16:	43 c0       	rjmp	.+134    	; 0x1c9e <vfprintf+0x280>
    1c18:	85 37       	cpi	r24, 0x75	; 117
    1c1a:	29 f4       	brne	.+10     	; 0x1c26 <vfprintf+0x208>
    1c1c:	2f 7e       	andi	r18, 0xEF	; 239
    1c1e:	b2 2e       	mov	r11, r18
    1c20:	2a e0       	ldi	r18, 0x0A	; 10
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	25 c0       	rjmp	.+74     	; 0x1c70 <vfprintf+0x252>
    1c26:	f2 2f       	mov	r31, r18
    1c28:	f9 7f       	andi	r31, 0xF9	; 249
    1c2a:	bf 2e       	mov	r11, r31
    1c2c:	8f 36       	cpi	r24, 0x6F	; 111
    1c2e:	c1 f0       	breq	.+48     	; 0x1c60 <vfprintf+0x242>
    1c30:	18 f4       	brcc	.+6      	; 0x1c38 <vfprintf+0x21a>
    1c32:	88 35       	cpi	r24, 0x58	; 88
    1c34:	79 f0       	breq	.+30     	; 0x1c54 <vfprintf+0x236>
    1c36:	ad c0       	rjmp	.+346    	; 0x1d92 <vfprintf+0x374>
    1c38:	80 37       	cpi	r24, 0x70	; 112
    1c3a:	19 f0       	breq	.+6      	; 0x1c42 <vfprintf+0x224>
    1c3c:	88 37       	cpi	r24, 0x78	; 120
    1c3e:	21 f0       	breq	.+8      	; 0x1c48 <vfprintf+0x22a>
    1c40:	a8 c0       	rjmp	.+336    	; 0x1d92 <vfprintf+0x374>
    1c42:	2f 2f       	mov	r18, r31
    1c44:	20 61       	ori	r18, 0x10	; 16
    1c46:	b2 2e       	mov	r11, r18
    1c48:	b4 fe       	sbrs	r11, 4
    1c4a:	0d c0       	rjmp	.+26     	; 0x1c66 <vfprintf+0x248>
    1c4c:	8b 2d       	mov	r24, r11
    1c4e:	84 60       	ori	r24, 0x04	; 4
    1c50:	b8 2e       	mov	r11, r24
    1c52:	09 c0       	rjmp	.+18     	; 0x1c66 <vfprintf+0x248>
    1c54:	24 ff       	sbrs	r18, 4
    1c56:	0a c0       	rjmp	.+20     	; 0x1c6c <vfprintf+0x24e>
    1c58:	9f 2f       	mov	r25, r31
    1c5a:	96 60       	ori	r25, 0x06	; 6
    1c5c:	b9 2e       	mov	r11, r25
    1c5e:	06 c0       	rjmp	.+12     	; 0x1c6c <vfprintf+0x24e>
    1c60:	28 e0       	ldi	r18, 0x08	; 8
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	05 c0       	rjmp	.+10     	; 0x1c70 <vfprintf+0x252>
    1c66:	20 e1       	ldi	r18, 0x10	; 16
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <vfprintf+0x252>
    1c6c:	20 e1       	ldi	r18, 0x10	; 16
    1c6e:	32 e0       	ldi	r19, 0x02	; 2
    1c70:	f8 01       	movw	r30, r16
    1c72:	b7 fe       	sbrs	r11, 7
    1c74:	07 c0       	rjmp	.+14     	; 0x1c84 <vfprintf+0x266>
    1c76:	60 81       	ld	r22, Z
    1c78:	71 81       	ldd	r23, Z+1	; 0x01
    1c7a:	82 81       	ldd	r24, Z+2	; 0x02
    1c7c:	93 81       	ldd	r25, Z+3	; 0x03
    1c7e:	0c 5f       	subi	r16, 0xFC	; 252
    1c80:	1f 4f       	sbci	r17, 0xFF	; 255
    1c82:	06 c0       	rjmp	.+12     	; 0x1c90 <vfprintf+0x272>
    1c84:	60 81       	ld	r22, Z
    1c86:	71 81       	ldd	r23, Z+1	; 0x01
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	0e 5f       	subi	r16, 0xFE	; 254
    1c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c90:	a4 01       	movw	r20, r8
    1c92:	f1 d0       	rcall	.+482    	; 0x1e76 <__ultoa_invert>
    1c94:	a8 2e       	mov	r10, r24
    1c96:	a8 18       	sub	r10, r8
    1c98:	fb 2d       	mov	r31, r11
    1c9a:	ff 77       	andi	r31, 0x7F	; 127
    1c9c:	bf 2e       	mov	r11, r31
    1c9e:	b6 fe       	sbrs	r11, 6
    1ca0:	0b c0       	rjmp	.+22     	; 0x1cb8 <vfprintf+0x29a>
    1ca2:	2b 2d       	mov	r18, r11
    1ca4:	2e 7f       	andi	r18, 0xFE	; 254
    1ca6:	a5 14       	cp	r10, r5
    1ca8:	50 f4       	brcc	.+20     	; 0x1cbe <vfprintf+0x2a0>
    1caa:	b4 fe       	sbrs	r11, 4
    1cac:	0a c0       	rjmp	.+20     	; 0x1cc2 <vfprintf+0x2a4>
    1cae:	b2 fc       	sbrc	r11, 2
    1cb0:	08 c0       	rjmp	.+16     	; 0x1cc2 <vfprintf+0x2a4>
    1cb2:	2b 2d       	mov	r18, r11
    1cb4:	2e 7e       	andi	r18, 0xEE	; 238
    1cb6:	05 c0       	rjmp	.+10     	; 0x1cc2 <vfprintf+0x2a4>
    1cb8:	7a 2c       	mov	r7, r10
    1cba:	2b 2d       	mov	r18, r11
    1cbc:	03 c0       	rjmp	.+6      	; 0x1cc4 <vfprintf+0x2a6>
    1cbe:	7a 2c       	mov	r7, r10
    1cc0:	01 c0       	rjmp	.+2      	; 0x1cc4 <vfprintf+0x2a6>
    1cc2:	75 2c       	mov	r7, r5
    1cc4:	24 ff       	sbrs	r18, 4
    1cc6:	0d c0       	rjmp	.+26     	; 0x1ce2 <vfprintf+0x2c4>
    1cc8:	fe 01       	movw	r30, r28
    1cca:	ea 0d       	add	r30, r10
    1ccc:	f1 1d       	adc	r31, r1
    1cce:	80 81       	ld	r24, Z
    1cd0:	80 33       	cpi	r24, 0x30	; 48
    1cd2:	11 f4       	brne	.+4      	; 0x1cd8 <vfprintf+0x2ba>
    1cd4:	29 7e       	andi	r18, 0xE9	; 233
    1cd6:	09 c0       	rjmp	.+18     	; 0x1cea <vfprintf+0x2cc>
    1cd8:	22 ff       	sbrs	r18, 2
    1cda:	06 c0       	rjmp	.+12     	; 0x1ce8 <vfprintf+0x2ca>
    1cdc:	73 94       	inc	r7
    1cde:	73 94       	inc	r7
    1ce0:	04 c0       	rjmp	.+8      	; 0x1cea <vfprintf+0x2cc>
    1ce2:	82 2f       	mov	r24, r18
    1ce4:	86 78       	andi	r24, 0x86	; 134
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <vfprintf+0x2cc>
    1ce8:	73 94       	inc	r7
    1cea:	23 fd       	sbrc	r18, 3
    1cec:	12 c0       	rjmp	.+36     	; 0x1d12 <vfprintf+0x2f4>
    1cee:	20 ff       	sbrs	r18, 0
    1cf0:	06 c0       	rjmp	.+12     	; 0x1cfe <vfprintf+0x2e0>
    1cf2:	5a 2c       	mov	r5, r10
    1cf4:	73 14       	cp	r7, r3
    1cf6:	18 f4       	brcc	.+6      	; 0x1cfe <vfprintf+0x2e0>
    1cf8:	53 0c       	add	r5, r3
    1cfa:	57 18       	sub	r5, r7
    1cfc:	73 2c       	mov	r7, r3
    1cfe:	73 14       	cp	r7, r3
    1d00:	60 f4       	brcc	.+24     	; 0x1d1a <vfprintf+0x2fc>
    1d02:	b7 01       	movw	r22, r14
    1d04:	80 e2       	ldi	r24, 0x20	; 32
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	2c 87       	std	Y+12, r18	; 0x0c
    1d0a:	83 d0       	rcall	.+262    	; 0x1e12 <fputc>
    1d0c:	73 94       	inc	r7
    1d0e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d10:	f6 cf       	rjmp	.-20     	; 0x1cfe <vfprintf+0x2e0>
    1d12:	73 14       	cp	r7, r3
    1d14:	10 f4       	brcc	.+4      	; 0x1d1a <vfprintf+0x2fc>
    1d16:	37 18       	sub	r3, r7
    1d18:	01 c0       	rjmp	.+2      	; 0x1d1c <vfprintf+0x2fe>
    1d1a:	31 2c       	mov	r3, r1
    1d1c:	24 ff       	sbrs	r18, 4
    1d1e:	11 c0       	rjmp	.+34     	; 0x1d42 <vfprintf+0x324>
    1d20:	b7 01       	movw	r22, r14
    1d22:	80 e3       	ldi	r24, 0x30	; 48
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	2c 87       	std	Y+12, r18	; 0x0c
    1d28:	74 d0       	rcall	.+232    	; 0x1e12 <fputc>
    1d2a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d2c:	22 ff       	sbrs	r18, 2
    1d2e:	16 c0       	rjmp	.+44     	; 0x1d5c <vfprintf+0x33e>
    1d30:	21 ff       	sbrs	r18, 1
    1d32:	03 c0       	rjmp	.+6      	; 0x1d3a <vfprintf+0x31c>
    1d34:	88 e5       	ldi	r24, 0x58	; 88
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	02 c0       	rjmp	.+4      	; 0x1d3e <vfprintf+0x320>
    1d3a:	88 e7       	ldi	r24, 0x78	; 120
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	b7 01       	movw	r22, r14
    1d40:	0c c0       	rjmp	.+24     	; 0x1d5a <vfprintf+0x33c>
    1d42:	82 2f       	mov	r24, r18
    1d44:	86 78       	andi	r24, 0x86	; 134
    1d46:	51 f0       	breq	.+20     	; 0x1d5c <vfprintf+0x33e>
    1d48:	21 fd       	sbrc	r18, 1
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <vfprintf+0x332>
    1d4c:	80 e2       	ldi	r24, 0x20	; 32
    1d4e:	01 c0       	rjmp	.+2      	; 0x1d52 <vfprintf+0x334>
    1d50:	8b e2       	ldi	r24, 0x2B	; 43
    1d52:	27 fd       	sbrc	r18, 7
    1d54:	8d e2       	ldi	r24, 0x2D	; 45
    1d56:	b7 01       	movw	r22, r14
    1d58:	90 e0       	ldi	r25, 0x00	; 0
    1d5a:	5b d0       	rcall	.+182    	; 0x1e12 <fputc>
    1d5c:	a5 14       	cp	r10, r5
    1d5e:	30 f4       	brcc	.+12     	; 0x1d6c <vfprintf+0x34e>
    1d60:	b7 01       	movw	r22, r14
    1d62:	80 e3       	ldi	r24, 0x30	; 48
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	55 d0       	rcall	.+170    	; 0x1e12 <fputc>
    1d68:	5a 94       	dec	r5
    1d6a:	f8 cf       	rjmp	.-16     	; 0x1d5c <vfprintf+0x33e>
    1d6c:	aa 94       	dec	r10
    1d6e:	f4 01       	movw	r30, r8
    1d70:	ea 0d       	add	r30, r10
    1d72:	f1 1d       	adc	r31, r1
    1d74:	80 81       	ld	r24, Z
    1d76:	b7 01       	movw	r22, r14
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	4b d0       	rcall	.+150    	; 0x1e12 <fputc>
    1d7c:	a1 10       	cpse	r10, r1
    1d7e:	f6 cf       	rjmp	.-20     	; 0x1d6c <vfprintf+0x34e>
    1d80:	33 20       	and	r3, r3
    1d82:	09 f4       	brne	.+2      	; 0x1d86 <vfprintf+0x368>
    1d84:	5d ce       	rjmp	.-838    	; 0x1a40 <vfprintf+0x22>
    1d86:	b7 01       	movw	r22, r14
    1d88:	80 e2       	ldi	r24, 0x20	; 32
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	42 d0       	rcall	.+132    	; 0x1e12 <fputc>
    1d8e:	3a 94       	dec	r3
    1d90:	f7 cf       	rjmp	.-18     	; 0x1d80 <vfprintf+0x362>
    1d92:	f7 01       	movw	r30, r14
    1d94:	86 81       	ldd	r24, Z+6	; 0x06
    1d96:	97 81       	ldd	r25, Z+7	; 0x07
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <vfprintf+0x380>
    1d9a:	8f ef       	ldi	r24, 0xFF	; 255
    1d9c:	9f ef       	ldi	r25, 0xFF	; 255
    1d9e:	2c 96       	adiw	r28, 0x0c	; 12
    1da0:	e2 e1       	ldi	r30, 0x12	; 18
    1da2:	e3 c0       	rjmp	.+454    	; 0x1f6a <__epilogue_restores__>

00001da4 <calloc>:
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	86 9f       	mul	r24, r22
    1dae:	80 01       	movw	r16, r0
    1db0:	87 9f       	mul	r24, r23
    1db2:	10 0d       	add	r17, r0
    1db4:	96 9f       	mul	r25, r22
    1db6:	10 0d       	add	r17, r0
    1db8:	11 24       	eor	r1, r1
    1dba:	c8 01       	movw	r24, r16
    1dbc:	7c dc       	rcall	.-1800   	; 0x16b6 <malloc>
    1dbe:	ec 01       	movw	r28, r24
    1dc0:	00 97       	sbiw	r24, 0x00	; 0
    1dc2:	21 f0       	breq	.+8      	; 0x1dcc <calloc+0x28>
    1dc4:	a8 01       	movw	r20, r16
    1dc6:	60 e0       	ldi	r22, 0x00	; 0
    1dc8:	70 e0       	ldi	r23, 0x00	; 0
    1dca:	11 d0       	rcall	.+34     	; 0x1dee <memset>
    1dcc:	ce 01       	movw	r24, r28
    1dce:	df 91       	pop	r29
    1dd0:	cf 91       	pop	r28
    1dd2:	1f 91       	pop	r17
    1dd4:	0f 91       	pop	r16
    1dd6:	08 95       	ret

00001dd8 <strnlen_P>:
    1dd8:	fc 01       	movw	r30, r24
    1dda:	05 90       	lpm	r0, Z+
    1ddc:	61 50       	subi	r22, 0x01	; 1
    1dde:	70 40       	sbci	r23, 0x00	; 0
    1de0:	01 10       	cpse	r0, r1
    1de2:	d8 f7       	brcc	.-10     	; 0x1dda <strnlen_P+0x2>
    1de4:	80 95       	com	r24
    1de6:	90 95       	com	r25
    1de8:	8e 0f       	add	r24, r30
    1dea:	9f 1f       	adc	r25, r31
    1dec:	08 95       	ret

00001dee <memset>:
    1dee:	dc 01       	movw	r26, r24
    1df0:	01 c0       	rjmp	.+2      	; 0x1df4 <memset+0x6>
    1df2:	6d 93       	st	X+, r22
    1df4:	41 50       	subi	r20, 0x01	; 1
    1df6:	50 40       	sbci	r21, 0x00	; 0
    1df8:	e0 f7       	brcc	.-8      	; 0x1df2 <memset+0x4>
    1dfa:	08 95       	ret

00001dfc <strnlen>:
    1dfc:	fc 01       	movw	r30, r24
    1dfe:	61 50       	subi	r22, 0x01	; 1
    1e00:	70 40       	sbci	r23, 0x00	; 0
    1e02:	01 90       	ld	r0, Z+
    1e04:	01 10       	cpse	r0, r1
    1e06:	d8 f7       	brcc	.-10     	; 0x1dfe <strnlen+0x2>
    1e08:	80 95       	com	r24
    1e0a:	90 95       	com	r25
    1e0c:	8e 0f       	add	r24, r30
    1e0e:	9f 1f       	adc	r25, r31
    1e10:	08 95       	ret

00001e12 <fputc>:
    1e12:	0f 93       	push	r16
    1e14:	1f 93       	push	r17
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
    1e1a:	18 2f       	mov	r17, r24
    1e1c:	09 2f       	mov	r16, r25
    1e1e:	eb 01       	movw	r28, r22
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	81 fd       	sbrc	r24, 1
    1e24:	03 c0       	rjmp	.+6      	; 0x1e2c <fputc+0x1a>
    1e26:	8f ef       	ldi	r24, 0xFF	; 255
    1e28:	9f ef       	ldi	r25, 0xFF	; 255
    1e2a:	20 c0       	rjmp	.+64     	; 0x1e6c <fputc+0x5a>
    1e2c:	82 ff       	sbrs	r24, 2
    1e2e:	10 c0       	rjmp	.+32     	; 0x1e50 <fputc+0x3e>
    1e30:	4e 81       	ldd	r20, Y+6	; 0x06
    1e32:	5f 81       	ldd	r21, Y+7	; 0x07
    1e34:	2c 81       	ldd	r18, Y+4	; 0x04
    1e36:	3d 81       	ldd	r19, Y+5	; 0x05
    1e38:	42 17       	cp	r20, r18
    1e3a:	53 07       	cpc	r21, r19
    1e3c:	7c f4       	brge	.+30     	; 0x1e5c <fputc+0x4a>
    1e3e:	e8 81       	ld	r30, Y
    1e40:	f9 81       	ldd	r31, Y+1	; 0x01
    1e42:	9f 01       	movw	r18, r30
    1e44:	2f 5f       	subi	r18, 0xFF	; 255
    1e46:	3f 4f       	sbci	r19, 0xFF	; 255
    1e48:	39 83       	std	Y+1, r19	; 0x01
    1e4a:	28 83       	st	Y, r18
    1e4c:	10 83       	st	Z, r17
    1e4e:	06 c0       	rjmp	.+12     	; 0x1e5c <fputc+0x4a>
    1e50:	e8 85       	ldd	r30, Y+8	; 0x08
    1e52:	f9 85       	ldd	r31, Y+9	; 0x09
    1e54:	81 2f       	mov	r24, r17
    1e56:	09 95       	icall
    1e58:	89 2b       	or	r24, r25
    1e5a:	29 f7       	brne	.-54     	; 0x1e26 <fputc+0x14>
    1e5c:	2e 81       	ldd	r18, Y+6	; 0x06
    1e5e:	3f 81       	ldd	r19, Y+7	; 0x07
    1e60:	2f 5f       	subi	r18, 0xFF	; 255
    1e62:	3f 4f       	sbci	r19, 0xFF	; 255
    1e64:	3f 83       	std	Y+7, r19	; 0x07
    1e66:	2e 83       	std	Y+6, r18	; 0x06
    1e68:	81 2f       	mov	r24, r17
    1e6a:	90 2f       	mov	r25, r16
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	08 95       	ret

00001e76 <__ultoa_invert>:
    1e76:	fa 01       	movw	r30, r20
    1e78:	aa 27       	eor	r26, r26
    1e7a:	28 30       	cpi	r18, 0x08	; 8
    1e7c:	51 f1       	breq	.+84     	; 0x1ed2 <__ultoa_invert+0x5c>
    1e7e:	20 31       	cpi	r18, 0x10	; 16
    1e80:	81 f1       	breq	.+96     	; 0x1ee2 <__ultoa_invert+0x6c>
    1e82:	e8 94       	clt
    1e84:	6f 93       	push	r22
    1e86:	6e 7f       	andi	r22, 0xFE	; 254
    1e88:	6e 5f       	subi	r22, 0xFE	; 254
    1e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1e8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e90:	af 4f       	sbci	r26, 0xFF	; 255
    1e92:	b1 e0       	ldi	r27, 0x01	; 1
    1e94:	3e d0       	rcall	.+124    	; 0x1f12 <__ultoa_invert+0x9c>
    1e96:	b4 e0       	ldi	r27, 0x04	; 4
    1e98:	3c d0       	rcall	.+120    	; 0x1f12 <__ultoa_invert+0x9c>
    1e9a:	67 0f       	add	r22, r23
    1e9c:	78 1f       	adc	r23, r24
    1e9e:	89 1f       	adc	r24, r25
    1ea0:	9a 1f       	adc	r25, r26
    1ea2:	a1 1d       	adc	r26, r1
    1ea4:	68 0f       	add	r22, r24
    1ea6:	79 1f       	adc	r23, r25
    1ea8:	8a 1f       	adc	r24, r26
    1eaa:	91 1d       	adc	r25, r1
    1eac:	a1 1d       	adc	r26, r1
    1eae:	6a 0f       	add	r22, r26
    1eb0:	71 1d       	adc	r23, r1
    1eb2:	81 1d       	adc	r24, r1
    1eb4:	91 1d       	adc	r25, r1
    1eb6:	a1 1d       	adc	r26, r1
    1eb8:	20 d0       	rcall	.+64     	; 0x1efa <__ultoa_invert+0x84>
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <__ultoa_invert+0x48>
    1ebc:	68 94       	set
    1ebe:	3f 91       	pop	r19
    1ec0:	2a e0       	ldi	r18, 0x0A	; 10
    1ec2:	26 9f       	mul	r18, r22
    1ec4:	11 24       	eor	r1, r1
    1ec6:	30 19       	sub	r19, r0
    1ec8:	30 5d       	subi	r19, 0xD0	; 208
    1eca:	31 93       	st	Z+, r19
    1ecc:	de f6       	brtc	.-74     	; 0x1e84 <__ultoa_invert+0xe>
    1ece:	cf 01       	movw	r24, r30
    1ed0:	08 95       	ret
    1ed2:	46 2f       	mov	r20, r22
    1ed4:	47 70       	andi	r20, 0x07	; 7
    1ed6:	40 5d       	subi	r20, 0xD0	; 208
    1ed8:	41 93       	st	Z+, r20
    1eda:	b3 e0       	ldi	r27, 0x03	; 3
    1edc:	0f d0       	rcall	.+30     	; 0x1efc <__ultoa_invert+0x86>
    1ede:	c9 f7       	brne	.-14     	; 0x1ed2 <__ultoa_invert+0x5c>
    1ee0:	f6 cf       	rjmp	.-20     	; 0x1ece <__ultoa_invert+0x58>
    1ee2:	46 2f       	mov	r20, r22
    1ee4:	4f 70       	andi	r20, 0x0F	; 15
    1ee6:	40 5d       	subi	r20, 0xD0	; 208
    1ee8:	4a 33       	cpi	r20, 0x3A	; 58
    1eea:	18 f0       	brcs	.+6      	; 0x1ef2 <__ultoa_invert+0x7c>
    1eec:	49 5d       	subi	r20, 0xD9	; 217
    1eee:	31 fd       	sbrc	r19, 1
    1ef0:	40 52       	subi	r20, 0x20	; 32
    1ef2:	41 93       	st	Z+, r20
    1ef4:	02 d0       	rcall	.+4      	; 0x1efa <__ultoa_invert+0x84>
    1ef6:	a9 f7       	brne	.-22     	; 0x1ee2 <__ultoa_invert+0x6c>
    1ef8:	ea cf       	rjmp	.-44     	; 0x1ece <__ultoa_invert+0x58>
    1efa:	b4 e0       	ldi	r27, 0x04	; 4
    1efc:	a6 95       	lsr	r26
    1efe:	97 95       	ror	r25
    1f00:	87 95       	ror	r24
    1f02:	77 95       	ror	r23
    1f04:	67 95       	ror	r22
    1f06:	ba 95       	dec	r27
    1f08:	c9 f7       	brne	.-14     	; 0x1efc <__ultoa_invert+0x86>
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	61 05       	cpc	r22, r1
    1f0e:	71 05       	cpc	r23, r1
    1f10:	08 95       	ret
    1f12:	9b 01       	movw	r18, r22
    1f14:	ac 01       	movw	r20, r24
    1f16:	0a 2e       	mov	r0, r26
    1f18:	06 94       	lsr	r0
    1f1a:	57 95       	ror	r21
    1f1c:	47 95       	ror	r20
    1f1e:	37 95       	ror	r19
    1f20:	27 95       	ror	r18
    1f22:	ba 95       	dec	r27
    1f24:	c9 f7       	brne	.-14     	; 0x1f18 <__ultoa_invert+0xa2>
    1f26:	62 0f       	add	r22, r18
    1f28:	73 1f       	adc	r23, r19
    1f2a:	84 1f       	adc	r24, r20
    1f2c:	95 1f       	adc	r25, r21
    1f2e:	a0 1d       	adc	r26, r0
    1f30:	08 95       	ret

00001f32 <__prologue_saves__>:
    1f32:	2f 92       	push	r2
    1f34:	3f 92       	push	r3
    1f36:	4f 92       	push	r4
    1f38:	5f 92       	push	r5
    1f3a:	6f 92       	push	r6
    1f3c:	7f 92       	push	r7
    1f3e:	8f 92       	push	r8
    1f40:	9f 92       	push	r9
    1f42:	af 92       	push	r10
    1f44:	bf 92       	push	r11
    1f46:	cf 92       	push	r12
    1f48:	df 92       	push	r13
    1f4a:	ef 92       	push	r14
    1f4c:	ff 92       	push	r15
    1f4e:	0f 93       	push	r16
    1f50:	1f 93       	push	r17
    1f52:	cf 93       	push	r28
    1f54:	df 93       	push	r29
    1f56:	cd b7       	in	r28, 0x3d	; 61
    1f58:	de b7       	in	r29, 0x3e	; 62
    1f5a:	ca 1b       	sub	r28, r26
    1f5c:	db 0b       	sbc	r29, r27
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	f8 94       	cli
    1f62:	de bf       	out	0x3e, r29	; 62
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	09 94       	ijmp

00001f6a <__epilogue_restores__>:
    1f6a:	2a 88       	ldd	r2, Y+18	; 0x12
    1f6c:	39 88       	ldd	r3, Y+17	; 0x11
    1f6e:	48 88       	ldd	r4, Y+16	; 0x10
    1f70:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f72:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f74:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f76:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f78:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f7a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f7c:	b9 84       	ldd	r11, Y+9	; 0x09
    1f7e:	c8 84       	ldd	r12, Y+8	; 0x08
    1f80:	df 80       	ldd	r13, Y+7	; 0x07
    1f82:	ee 80       	ldd	r14, Y+6	; 0x06
    1f84:	fd 80       	ldd	r15, Y+5	; 0x05
    1f86:	0c 81       	ldd	r16, Y+4	; 0x04
    1f88:	1b 81       	ldd	r17, Y+3	; 0x03
    1f8a:	aa 81       	ldd	r26, Y+2	; 0x02
    1f8c:	b9 81       	ldd	r27, Y+1	; 0x01
    1f8e:	ce 0f       	add	r28, r30
    1f90:	d1 1d       	adc	r29, r1
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	ed 01       	movw	r28, r26
    1f9e:	08 95       	ret

00001fa0 <_exit>:
    1fa0:	f8 94       	cli

00001fa2 <__stop_program>:
    1fa2:	ff cf       	rjmp	.-2      	; 0x1fa2 <__stop_program>
