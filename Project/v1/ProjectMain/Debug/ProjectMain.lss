
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000020c  00800100  00002428  000024bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002428  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  0080030c  0080030c  000026c8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000348  00000000  00000000  00002724  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000046a0  00000000  00000000  00002a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001446  00000000  00000000  0000710c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001ada  00000000  00000000  00008552  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000008a8  00000000  00000000  0000a02c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000fac  00000000  00000000  0000a8d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000023ee  00000000  00000000  0000b880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000408  00000000  00000000  0000dc6e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	1c c2       	rjmp	.+1080   	; 0x43e <__vector_1>
       6:	00 00       	nop
       8:	29 c2       	rjmp	.+1106   	; 0x45c <__vector_2>
       a:	00 00       	nop
       c:	36 c2       	rjmp	.+1132   	; 0x47a <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <Game_play+0x7a>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e8 e2       	ldi	r30, 0x28	; 40
     37c:	f4 e2       	ldi	r31, 0x24	; 36
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ac 30       	cpi	r26, 0x0C	; 12
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	ac e0       	ldi	r26, 0x0C	; 12
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a6 35       	cpi	r26, 0x56	; 86
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	be d0       	rcall	.+380    	; 0x518 <main>
     39c:	0c 94 12 12 	jmp	0x2424	; 0x2424 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
			retrieval_errors++;
		}
	}

	//printf("SRAM test completed with\n %4d errors in write phase and\n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	2f 93       	push	r18
     3ae:	3f 93       	push	r19
     3b0:	4f 93       	push	r20
     3b2:	5f 93       	push	r21
     3b4:	6f 93       	push	r22
     3b6:	7f 93       	push	r23
     3b8:	8f 93       	push	r24
     3ba:	9f 93       	push	r25
     3bc:	af 93       	push	r26
     3be:	bf 93       	push	r27
     3c0:	ef 93       	push	r30
     3c2:	ff 93       	push	r31
     3c4:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <uartReceive>
     3c8:	80 93 3c 03 	sts	0x033C, r24
     3cc:	90 91 16 03 	lds	r25, 0x0316
     3d0:	99 23       	and	r25, r25
     3d2:	d1 f0       	breq	.+52     	; 0x408 <__vector_19+0x66>
     3d4:	90 91 15 03 	lds	r25, 0x0315
     3d8:	91 30       	cpi	r25, 0x01	; 1
     3da:	39 f0       	breq	.+14     	; 0x3ea <__vector_19+0x48>
     3dc:	18 f0       	brcs	.+6      	; 0x3e4 <__vector_19+0x42>
     3de:	92 30       	cpi	r25, 0x02	; 2
     3e0:	39 f0       	breq	.+14     	; 0x3f0 <__vector_19+0x4e>
     3e2:	0d c0       	rjmp	.+26     	; 0x3fe <__vector_19+0x5c>
     3e4:	80 93 39 03 	sts	0x0339, r24
     3e8:	0a c0       	rjmp	.+20     	; 0x3fe <__vector_19+0x5c>
     3ea:	80 93 3a 03 	sts	0x033A, r24
     3ee:	07 c0       	rjmp	.+14     	; 0x3fe <__vector_19+0x5c>
     3f0:	80 93 3b 03 	sts	0x033B, r24
     3f4:	10 92 16 03 	sts	0x0316, r1
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	90 93 11 03 	sts	0x0311, r25
     3fe:	90 91 15 03 	lds	r25, 0x0315
     402:	9f 5f       	subi	r25, 0xFF	; 255
     404:	90 93 15 03 	sts	0x0315, r25
     408:	8f 3f       	cpi	r24, 0xFF	; 255
     40a:	29 f4       	brne	.+10     	; 0x416 <__vector_19+0x74>
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	80 93 16 03 	sts	0x0316, r24
     412:	10 92 15 03 	sts	0x0315, r1
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	80 93 17 03 	sts	0x0317, r24
     41c:	ff 91       	pop	r31
     41e:	ef 91       	pop	r30
     420:	bf 91       	pop	r27
     422:	af 91       	pop	r26
     424:	9f 91       	pop	r25
     426:	8f 91       	pop	r24
     428:	7f 91       	pop	r23
     42a:	6f 91       	pop	r22
     42c:	5f 91       	pop	r21
     42e:	4f 91       	pop	r20
     430:	3f 91       	pop	r19
     432:	2f 91       	pop	r18
     434:	0f 90       	pop	r0
     436:	0f be       	out	0x3f, r0	; 63
     438:	0f 90       	pop	r0
     43a:	1f 90       	pop	r1
     43c:	18 95       	reti

0000043e <__vector_1>:
     43e:	1f 92       	push	r1
     440:	0f 92       	push	r0
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	0f 92       	push	r0
     446:	11 24       	eor	r1, r1
     448:	8f 93       	push	r24
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	80 93 10 03 	sts	0x0310, r24
     450:	8f 91       	pop	r24
     452:	0f 90       	pop	r0
     454:	0f be       	out	0x3f, r0	; 63
     456:	0f 90       	pop	r0
     458:	1f 90       	pop	r1
     45a:	18 95       	reti

0000045c <__vector_2>:
     45c:	1f 92       	push	r1
     45e:	0f 92       	push	r0
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	0f 92       	push	r0
     464:	11 24       	eor	r1, r1
     466:	8f 93       	push	r24
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	80 93 0f 03 	sts	0x030F, r24
     46e:	8f 91       	pop	r24
     470:	0f 90       	pop	r0
     472:	0f be       	out	0x3f, r0	; 63
     474:	0f 90       	pop	r0
     476:	1f 90       	pop	r1
     478:	18 95       	reti

0000047a <__vector_3>:
     47a:	1f 92       	push	r1
     47c:	0f 92       	push	r0
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	0f 92       	push	r0
     482:	11 24       	eor	r1, r1
     484:	8f 93       	push	r24
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	80 93 0c 03 	sts	0x030C, r24
     48c:	8f 91       	pop	r24
     48e:	0f 90       	pop	r0
     490:	0f be       	out	0x3f, r0	; 63
     492:	0f 90       	pop	r0
     494:	1f 90       	pop	r1
     496:	18 95       	reti

00000498 <init>:

void init()
{
     498:	ef 92       	push	r14
     49a:	ff 92       	push	r15
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
	// call initialization subroutines
	uartInit(BAUDRATE, FOSC, UBRR); printf("\n======================STARTUP==========================\n");
     4a0:	1f e1       	ldi	r17, 0x1F	; 31
     4a2:	e1 2e       	mov	r14, r17
     4a4:	f1 2c       	mov	r15, r1
     4a6:	00 e0       	ldi	r16, 0x00	; 0
     4a8:	10 e0       	ldi	r17, 0x00	; 0
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	4b e4       	ldi	r20, 0x4B	; 75
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	60 e8       	ldi	r22, 0x80	; 128
     4b4:	75 e2       	ldi	r23, 0x25	; 37
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <uartInit>
     4be:	83 e4       	ldi	r24, 0x43	; 67
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	0e 94 05 0f 	call	0x1e0a	; 0x1e0a <puts>
	enableXMEM(1);
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	6a d2       	rcall	.+1236   	; 0x99e <enableXMEM>
	SLI_init();
     4ca:	0e 94 9e 0c 	call	0x193c	; 0x193c <SLI_init>
	JOY_init();
     4ce:	e0 d3       	rcall	.+1984   	; 0xc90 <JOY_init>
	OLED_init();
     4d0:	0e 94 18 0c 	call	0x1830	; 0x1830 <OLED_init>
	SPI_init();
     4d4:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <SPI_init>
	MCP2515_init();
     4d8:	d2 d5       	rcall	.+2980   	; 0x107e <MCP2515_init>
	CAN_init();
     4da:	be d0       	rcall	.+380    	; 0x658 <CAN_init>
	
	// setup interrupts
	// init external interrupt INT0 on falling edge
	set_bit(GICR, INT0);
     4dc:	8b b7       	in	r24, 0x3b	; 59
     4de:	80 64       	ori	r24, 0x40	; 64
     4e0:	8b bf       	out	0x3b, r24	; 59
	set_bit(MCUCR, ISC01);
     4e2:	85 b7       	in	r24, 0x35	; 53
     4e4:	82 60       	ori	r24, 0x02	; 2
     4e6:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     4e8:	85 b7       	in	r24, 0x35	; 53
     4ea:	8e 7f       	andi	r24, 0xFE	; 254
     4ec:	85 bf       	out	0x35, r24	; 53
	
	// Pull-up on PD3
	clear_bit(DDRD, PD3);
     4ee:	8b 98       	cbi	0x11, 3	; 17
	set_bit(PORTD, PD3);
     4f0:	93 9a       	sbi	0x12, 3	; 18
	
	// init external interrupt INT1 on falling edge
	set_bit(GICR, INT1);
     4f2:	8b b7       	in	r24, 0x3b	; 59
     4f4:	80 68       	ori	r24, 0x80	; 128
     4f6:	8b bf       	out	0x3b, r24	; 59
	set_bit(MCUCR, ISC11);
     4f8:	85 b7       	in	r24, 0x35	; 53
     4fa:	88 60       	ori	r24, 0x08	; 8
     4fc:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC10);
     4fe:	85 b7       	in	r24, 0x35	; 53
     500:	8b 7f       	andi	r24, 0xFB	; 251
     502:	85 bf       	out	0x35, r24	; 53
	
		
	// PE2
	clear_bit(DDRE, PE2);
     504:	32 98       	cbi	0x06, 2	; 6
	clear_bit(PORTE, PE2);
     506:	3a 98       	cbi	0x07, 2	; 7
	// PB0
	clear_bit(DDRB, PB0);
     508:	b8 98       	cbi	0x17, 0	; 23
	clear_bit(PORTB, PB0);
     50a:	c0 98       	cbi	0x18, 0	; 24

	// activate interrupts
	sei();
     50c:	78 94       	sei

	// call SRAM Test
	//SRAM_test();
}
     50e:	1f 91       	pop	r17
     510:	0f 91       	pop	r16
     512:	ff 90       	pop	r15
     514:	ef 90       	pop	r14
     516:	08 95       	ret

00000518 <main>:
*/

int main(void)
{
	
	init();
     518:	bf df       	rcall	.-130    	; 0x498 <init>
	//activateMenuFlag = 1; // display the main menu
		
	
	

	uartMsg = 0;
     51a:	10 92 3c 03 	sts	0x033C, r1
	uartMouseSteeringMessage.Motor = 0;
     51e:	10 92 39 03 	sts	0x0339, r1
	uartMouseSteeringMessage.Servo = 0;
     522:	10 92 3a 03 	sts	0x033A, r1
	uartMouseSteeringMessage.Button = 0;
     526:	10 92 3b 03 	sts	0x033B, r1
// 		CAN_sendMessage(&message2send, 0);
// 		_delay_ms(50);

		if(activateMenuFlag && menuAlreadyBuiltFlag == 0)
		{
			activeState = MENU;
     52a:	55 24       	eor	r5, r5
     52c:	53 94       	inc	r5
// 		}
		
		if(updateCmdDispFlag)
		{
			OLED_clear();
			sprintf(str, "%d", uartMouseSteeringMessage.Motor);
     52e:	0f 2e       	mov	r0, r31
     530:	f9 e3       	ldi	r31, 0x39	; 57
     532:	af 2e       	mov	r10, r31
     534:	f3 e0       	ldi	r31, 0x03	; 3
     536:	bf 2e       	mov	r11, r31
     538:	f0 2d       	mov	r31, r0
     53a:	0c e7       	ldi	r16, 0x7C	; 124
     53c:	11 e0       	ldi	r17, 0x01	; 1
     53e:	c2 e1       	ldi	r28, 0x12	; 18
     540:	d3 e0       	ldi	r29, 0x03	; 3
			OLED_goto(0,0);
			OLED_printString(str);
			
			sprintf(str, "%d", uartMouseSteeringMessage.Servo);
     542:	0f 2e       	mov	r0, r31
     544:	fa e3       	ldi	r31, 0x3A	; 58
     546:	cf 2e       	mov	r12, r31
     548:	f3 e0       	ldi	r31, 0x03	; 3
     54a:	df 2e       	mov	r13, r31
     54c:	f0 2d       	mov	r31, r0
			OLED_goto(1,0);
			OLED_printString(str);
			
			sprintf(str, "%d", uartMouseSteeringMessage.Button);
     54e:	0f 2e       	mov	r0, r31
     550:	fb e3       	ldi	r31, 0x3B	; 59
     552:	8f 2e       	mov	r8, r31
     554:	f3 e0       	ldi	r31, 0x03	; 3
     556:	9f 2e       	mov	r9, r31
     558:	f0 2d       	mov	r31, r0
		if(activateMenuFlag && menuAlreadyBuiltFlag == 0)
		{
			activeState = MENU;
			MENU_activate(&activeState);

			menuAlreadyBuiltFlag = 1;
     55a:	ee 24       	eor	r14, r14
     55c:	e3 94       	inc	r14
     55e:	f1 2c       	mov	r15, r1
// 		}
		
		if(updateCmdDispFlag)
		{
			OLED_clear();
			sprintf(str, "%d", uartMouseSteeringMessage.Motor);
     560:	6c 2e       	mov	r6, r28
     562:	7d 2e       	mov	r7, r29
// 		message2send.data[2] = ButtonRight;
// 		
// 		CAN_sendMessage(&message2send, 0);
// 		_delay_ms(50);

		if(activateMenuFlag && menuAlreadyBuiltFlag == 0)
     564:	80 91 0f 03 	lds	r24, 0x030F
     568:	88 23       	and	r24, r24
     56a:	89 f0       	breq	.+34     	; 0x58e <main+0x76>
     56c:	80 91 0d 03 	lds	r24, 0x030D
     570:	90 91 0e 03 	lds	r25, 0x030E
     574:	89 2b       	or	r24, r25
     576:	59 f4       	brne	.+22     	; 0x58e <main+0x76>
		{
			activeState = MENU;
     578:	50 92 08 01 	sts	0x0108, r5
			MENU_activate(&activeState);
     57c:	88 e0       	ldi	r24, 0x08	; 8
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	dc d7       	rcall	.+4024   	; 0x153a <MENU_activate>

			menuAlreadyBuiltFlag = 1;
     582:	f0 92 0e 03 	sts	0x030E, r15
     586:	e0 92 0d 03 	sts	0x030D, r14
			activateMenuFlag = 0;
     58a:	10 92 0f 03 	sts	0x030F, r1
		}

		if(activateMenuFlag && menuAlreadyBuiltFlag == 1)
     58e:	80 91 0f 03 	lds	r24, 0x030F
     592:	88 23       	and	r24, r24
     594:	61 f0       	breq	.+24     	; 0x5ae <main+0x96>
     596:	20 91 0d 03 	lds	r18, 0x030D
     59a:	30 91 0e 03 	lds	r19, 0x030E
     59e:	21 30       	cpi	r18, 0x01	; 1
     5a0:	31 05       	cpc	r19, r1
     5a2:	29 f4       	brne	.+10     	; 0x5ae <main+0x96>
		{
			activeState = MENU;
     5a4:	50 92 08 01 	sts	0x0108, r5
			MENU_reactivate();	
     5a8:	70 d7       	rcall	.+3808   	; 0x148a <MENU_reactivate>
			activateMenuFlag = 0;
     5aa:	10 92 0f 03 	sts	0x030F, r1
// 				SPIreceivedFlag = 0;
// 			
// 			}
// 		}
		
		if(updateCmdDispFlag)
     5ae:	80 91 11 03 	lds	r24, 0x0311
     5b2:	88 23       	and	r24, r24
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <main+0xa0>
     5b6:	44 c0       	rjmp	.+136    	; 0x640 <main+0x128>
		{
			OLED_clear();
     5b8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <OLED_clear>
			sprintf(str, "%d", uartMouseSteeringMessage.Motor);
     5bc:	f5 01       	movw	r30, r10
     5be:	80 81       	ld	r24, Z
     5c0:	1f 92       	push	r1
     5c2:	8f 93       	push	r24
     5c4:	1f 93       	push	r17
     5c6:	0f 93       	push	r16
     5c8:	df 93       	push	r29
     5ca:	cf 93       	push	r28
     5cc:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <sprintf>
			OLED_goto(0,0);
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	ee d7       	rcall	.+4060   	; 0x15b6 <OLED_goto>
			OLED_printString(str);
     5da:	86 2d       	mov	r24, r6
     5dc:	97 2d       	mov	r25, r7
     5de:	0e 94 31 0b 	call	0x1662	; 0x1662 <OLED_printString>
			
			sprintf(str, "%d", uartMouseSteeringMessage.Servo);
     5e2:	f6 01       	movw	r30, r12
     5e4:	80 81       	ld	r24, Z
     5e6:	1f 92       	push	r1
     5e8:	8f 93       	push	r24
     5ea:	1f 93       	push	r17
     5ec:	0f 93       	push	r16
     5ee:	df 93       	push	r29
     5f0:	cf 93       	push	r28
     5f2:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <sprintf>
			OLED_goto(1,0);
     5f6:	60 e0       	ldi	r22, 0x00	; 0
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	c7 01       	movw	r24, r14
     5fc:	dc d7       	rcall	.+4024   	; 0x15b6 <OLED_goto>
			OLED_printString(str);
     5fe:	86 2d       	mov	r24, r6
     600:	97 2d       	mov	r25, r7
     602:	0e 94 31 0b 	call	0x1662	; 0x1662 <OLED_printString>
			
			sprintf(str, "%d", uartMouseSteeringMessage.Button);
     606:	f4 01       	movw	r30, r8
     608:	80 81       	ld	r24, Z
     60a:	1f 92       	push	r1
     60c:	8f 93       	push	r24
     60e:	1f 93       	push	r17
     610:	0f 93       	push	r16
     612:	df 93       	push	r29
     614:	cf 93       	push	r28
     616:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <sprintf>
			OLED_goto(2,0);
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	c9 d7       	rcall	.+3986   	; 0x15b6 <OLED_goto>
			OLED_printString(str);
     624:	86 2d       	mov	r24, r6
     626:	97 2d       	mov	r25, r7
     628:	0e 94 31 0b 	call	0x1662	; 0x1662 <OLED_printString>
				
			updateCmdDispFlag = 0;
     62c:	10 92 11 03 	sts	0x0311, r1
     630:	ed b7       	in	r30, 0x3d	; 61
     632:	fe b7       	in	r31, 0x3e	; 62
     634:	72 96       	adiw	r30, 0x12	; 18
     636:	0f b6       	in	r0, 0x3f	; 63
     638:	f8 94       	cli
     63a:	fe bf       	out	0x3e, r31	; 62
     63c:	0f be       	out	0x3f, r0	; 63
     63e:	ed bf       	out	0x3d, r30	; 61
		}
		
		if(activeState == GAME)
     640:	80 91 08 01 	lds	r24, 0x0108
     644:	81 11       	cpse	r24, r1
     646:	8e cf       	rjmp	.-228    	; 0x564 <main+0x4c>
		{
			Game_init();
     648:	bc d1       	rcall	.+888    	; 0x9c2 <Game_init>
			Game_play(&SPIreceivedFlag);
     64a:	8c e0       	ldi	r24, 0x0C	; 12
     64c:	93 e0       	ldi	r25, 0x03	; 3
     64e:	3c d2       	rcall	.+1144   	; 0xac8 <Game_play>
			activeState = IDLE;
     650:	82 e0       	ldi	r24, 0x02	; 2
     652:	80 93 08 01 	sts	0x0108, r24
     656:	86 cf       	rjmp	.-244    	; 0x564 <main+0x4c>

00000658 <CAN_init>:
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	43 e0       	ldi	r20, 0x03	; 3
     662:	6b e2       	ldi	r22, 0x2B	; 43
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	16 d5       	rcall	.+2604   	; 0x1096 <MCP2515_write>
     66a:	40 e6       	ldi	r20, 0x60	; 96
     66c:	60 e6       	ldi	r22, 0x60	; 96
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	11 d5       	rcall	.+2594   	; 0x1096 <MCP2515_write>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	40 e8       	ldi	r20, 0x80	; 128
     678:	6f e0       	ldi	r22, 0x0F	; 15
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	1e d5       	rcall	.+2620   	; 0x10bc <MCP2515_bitModify>
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <CAN_sendMessage>:
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
     68e:	27 97       	sbiw	r28, 0x07	; 7
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	f8 94       	cli
     694:	de bf       	out	0x3e, r29	; 62
     696:	0f be       	out	0x3f, r0	; 63
     698:	cd bf       	out	0x3d, r28	; 61
     69a:	9e 83       	std	Y+6, r25	; 0x06
     69c:	8d 83       	std	Y+5, r24	; 0x05
     69e:	6f 83       	std	Y+7, r22	; 0x07
     6a0:	8f 81       	ldd	r24, Y+7	; 0x07
     6a2:	88 2f       	mov	r24, r24
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	00 97       	sbiw	r24, 0x00	; 0
     6a8:	09 f0       	breq	.+2      	; 0x6ac <CAN_sendMessage+0x26>
     6aa:	4d c0       	rjmp	.+154    	; 0x746 <CAN_sendMessage+0xc0>
     6ac:	8d 81       	ldd	r24, Y+5	; 0x05
     6ae:	9e 81       	ldd	r25, Y+6	; 0x06
     6b0:	fc 01       	movw	r30, r24
     6b2:	80 81       	ld	r24, Z
     6b4:	91 81       	ldd	r25, Z+1	; 0x01
     6b6:	9c 83       	std	Y+4, r25	; 0x04
     6b8:	8b 83       	std	Y+3, r24	; 0x03
     6ba:	8b 81       	ldd	r24, Y+3	; 0x03
     6bc:	82 95       	swap	r24
     6be:	88 0f       	add	r24, r24
     6c0:	80 7e       	andi	r24, 0xE0	; 224
     6c2:	48 2f       	mov	r20, r24
     6c4:	62 e3       	ldi	r22, 0x32	; 50
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	e5 d4       	rcall	.+2506   	; 0x1096 <MCP2515_write>
     6cc:	8b 81       	ldd	r24, Y+3	; 0x03
     6ce:	9c 81       	ldd	r25, Y+4	; 0x04
     6d0:	96 95       	lsr	r25
     6d2:	87 95       	ror	r24
     6d4:	96 95       	lsr	r25
     6d6:	87 95       	ror	r24
     6d8:	96 95       	lsr	r25
     6da:	87 95       	ror	r24
     6dc:	48 2f       	mov	r20, r24
     6de:	61 e3       	ldi	r22, 0x31	; 49
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	d8 d4       	rcall	.+2480   	; 0x1096 <MCP2515_write>
     6e6:	8d 81       	ldd	r24, Y+5	; 0x05
     6e8:	9e 81       	ldd	r25, Y+6	; 0x06
     6ea:	fc 01       	movw	r30, r24
     6ec:	82 81       	ldd	r24, Z+2	; 0x02
     6ee:	48 2f       	mov	r20, r24
     6f0:	65 e3       	ldi	r22, 0x35	; 53
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	cf d4       	rcall	.+2462   	; 0x1096 <MCP2515_write>
     6f8:	86 e3       	ldi	r24, 0x36	; 54
     6fa:	89 83       	std	Y+1, r24	; 0x01
     6fc:	1a 82       	std	Y+2, r1	; 0x02
     6fe:	15 c0       	rjmp	.+42     	; 0x72a <CAN_sendMessage+0xa4>
     700:	8a 81       	ldd	r24, Y+2	; 0x02
     702:	88 2f       	mov	r24, r24
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	2d 81       	ldd	r18, Y+5	; 0x05
     708:	3e 81       	ldd	r19, Y+6	; 0x06
     70a:	82 0f       	add	r24, r18
     70c:	93 1f       	adc	r25, r19
     70e:	03 96       	adiw	r24, 0x03	; 3
     710:	fc 01       	movw	r30, r24
     712:	80 81       	ld	r24, Z
     714:	48 2f       	mov	r20, r24
     716:	69 81       	ldd	r22, Y+1	; 0x01
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	bc d4       	rcall	.+2424   	; 0x1096 <MCP2515_write>
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	8f 5f       	subi	r24, 0xFF	; 255
     722:	89 83       	std	Y+1, r24	; 0x01
     724:	8a 81       	ldd	r24, Y+2	; 0x02
     726:	8f 5f       	subi	r24, 0xFF	; 255
     728:	8a 83       	std	Y+2, r24	; 0x02
     72a:	8d 81       	ldd	r24, Y+5	; 0x05
     72c:	9e 81       	ldd	r25, Y+6	; 0x06
     72e:	fc 01       	movw	r30, r24
     730:	92 81       	ldd	r25, Z+2	; 0x02
     732:	8a 81       	ldd	r24, Y+2	; 0x02
     734:	89 17       	cp	r24, r25
     736:	20 f3       	brcs	.-56     	; 0x700 <CAN_sendMessage+0x7a>
     738:	2f ef       	ldi	r18, 0xFF	; 255
     73a:	48 e0       	ldi	r20, 0x08	; 8
     73c:	60 e3       	ldi	r22, 0x30	; 48
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	bc d4       	rcall	.+2424   	; 0x10bc <MCP2515_bitModify>
     744:	00 00       	nop
     746:	27 96       	adiw	r28, 0x07	; 7
     748:	0f b6       	in	r0, 0x3f	; 63
     74a:	f8 94       	cli
     74c:	de bf       	out	0x3e, r29	; 62
     74e:	0f be       	out	0x3f, r0	; 63
     750:	cd bf       	out	0x3d, r28	; 61
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	08 95       	ret

00000758 <CAN_receiveMessage>:
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	cd b7       	in	r28, 0x3d	; 61
     762:	de b7       	in	r29, 0x3e	; 62
     764:	61 97       	sbiw	r28, 0x11	; 17
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
     770:	98 8b       	std	Y+16, r25	; 0x10
     772:	8f 87       	std	Y+15, r24	; 0x0f
     774:	69 8b       	std	Y+17, r22	; 0x11
     776:	89 89       	ldd	r24, Y+17	; 0x11
     778:	88 2f       	mov	r24, r24
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	82 30       	cpi	r24, 0x02	; 2
     77e:	91 05       	cpc	r25, r1
     780:	09 f4       	brne	.+2      	; 0x784 <CAN_receiveMessage+0x2c>
     782:	57 c0       	rjmp	.+174    	; 0x832 <CAN_receiveMessage+0xda>
     784:	83 30       	cpi	r24, 0x03	; 3
     786:	91 05       	cpc	r25, r1
     788:	21 f0       	breq	.+8      	; 0x792 <CAN_receiveMessage+0x3a>
     78a:	81 30       	cpi	r24, 0x01	; 1
     78c:	91 05       	cpc	r25, r1
     78e:	09 f0       	breq	.+2      	; 0x792 <CAN_receiveMessage+0x3a>
     790:	9f c0       	rjmp	.+318    	; 0x8d0 <CAN_receiveMessage+0x178>
     792:	61 e6       	ldi	r22, 0x61	; 97
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	5b d4       	rcall	.+2230   	; 0x1050 <MCP2515_read>
     79a:	88 2f       	mov	r24, r24
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	9d 83       	std	Y+5, r25	; 0x05
     7a0:	8c 83       	std	Y+4, r24	; 0x04
     7a2:	8c 81       	ldd	r24, Y+4	; 0x04
     7a4:	9d 81       	ldd	r25, Y+5	; 0x05
     7a6:	8c 01       	movw	r16, r24
     7a8:	00 0f       	add	r16, r16
     7aa:	11 1f       	adc	r17, r17
     7ac:	00 0f       	add	r16, r16
     7ae:	11 1f       	adc	r17, r17
     7b0:	00 0f       	add	r16, r16
     7b2:	11 1f       	adc	r17, r17
     7b4:	62 e6       	ldi	r22, 0x62	; 98
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	4a d4       	rcall	.+2196   	; 0x1050 <MCP2515_read>
     7bc:	82 95       	swap	r24
     7be:	86 95       	lsr	r24
     7c0:	87 70       	andi	r24, 0x07	; 7
     7c2:	88 2f       	mov	r24, r24
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	80 2b       	or	r24, r16
     7c8:	91 2b       	or	r25, r17
     7ca:	9d 83       	std	Y+5, r25	; 0x05
     7cc:	8c 83       	std	Y+4, r24	; 0x04
     7ce:	65 e6       	ldi	r22, 0x65	; 101
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	3d d4       	rcall	.+2170   	; 0x1050 <MCP2515_read>
     7d6:	8e 83       	std	Y+6, r24	; 0x06
     7d8:	86 e6       	ldi	r24, 0x66	; 102
     7da:	89 83       	std	Y+1, r24	; 0x01
     7dc:	1a 82       	std	Y+2, r1	; 0x02
     7de:	14 c0       	rjmp	.+40     	; 0x808 <CAN_receiveMessage+0xb0>
     7e0:	8a 81       	ldd	r24, Y+2	; 0x02
     7e2:	08 2f       	mov	r16, r24
     7e4:	10 e0       	ldi	r17, 0x00	; 0
     7e6:	69 81       	ldd	r22, Y+1	; 0x01
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	31 d4       	rcall	.+2146   	; 0x1050 <MCP2515_read>
     7ee:	28 2f       	mov	r18, r24
     7f0:	ce 01       	movw	r24, r28
     7f2:	07 96       	adiw	r24, 0x07	; 7
     7f4:	80 0f       	add	r24, r16
     7f6:	91 1f       	adc	r25, r17
     7f8:	fc 01       	movw	r30, r24
     7fa:	20 83       	st	Z, r18
     7fc:	89 81       	ldd	r24, Y+1	; 0x01
     7fe:	8f 5f       	subi	r24, 0xFF	; 255
     800:	89 83       	std	Y+1, r24	; 0x01
     802:	8a 81       	ldd	r24, Y+2	; 0x02
     804:	8f 5f       	subi	r24, 0xFF	; 255
     806:	8a 83       	std	Y+2, r24	; 0x02
     808:	9e 81       	ldd	r25, Y+6	; 0x06
     80a:	8a 81       	ldd	r24, Y+2	; 0x02
     80c:	89 17       	cp	r24, r25
     80e:	40 f3       	brcs	.-48     	; 0x7e0 <CAN_receiveMessage+0x88>
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	41 e0       	ldi	r20, 0x01	; 1
     814:	6c e2       	ldi	r22, 0x2C	; 44
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	50 d4       	rcall	.+2208   	; 0x10bc <MCP2515_bitModify>
     81c:	8f 85       	ldd	r24, Y+15	; 0x0f
     81e:	98 89       	ldd	r25, Y+16	; 0x10
     820:	2b e0       	ldi	r18, 0x0B	; 11
     822:	fe 01       	movw	r30, r28
     824:	34 96       	adiw	r30, 0x04	; 4
     826:	dc 01       	movw	r26, r24
     828:	01 90       	ld	r0, Z+
     82a:	0d 92       	st	X+, r0
     82c:	2a 95       	dec	r18
     82e:	e1 f7       	brne	.-8      	; 0x828 <CAN_receiveMessage+0xd0>
     830:	4f c0       	rjmp	.+158    	; 0x8d0 <CAN_receiveMessage+0x178>
     832:	61 e7       	ldi	r22, 0x71	; 113
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0b d4       	rcall	.+2070   	; 0x1050 <MCP2515_read>
     83a:	88 2f       	mov	r24, r24
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	9d 83       	std	Y+5, r25	; 0x05
     840:	8c 83       	std	Y+4, r24	; 0x04
     842:	8c 81       	ldd	r24, Y+4	; 0x04
     844:	9d 81       	ldd	r25, Y+5	; 0x05
     846:	8c 01       	movw	r16, r24
     848:	00 0f       	add	r16, r16
     84a:	11 1f       	adc	r17, r17
     84c:	00 0f       	add	r16, r16
     84e:	11 1f       	adc	r17, r17
     850:	00 0f       	add	r16, r16
     852:	11 1f       	adc	r17, r17
     854:	62 e7       	ldi	r22, 0x72	; 114
     856:	80 e0       	ldi	r24, 0x00	; 0
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	fa d3       	rcall	.+2036   	; 0x1050 <MCP2515_read>
     85c:	82 95       	swap	r24
     85e:	86 95       	lsr	r24
     860:	87 70       	andi	r24, 0x07	; 7
     862:	88 2f       	mov	r24, r24
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	80 2b       	or	r24, r16
     868:	91 2b       	or	r25, r17
     86a:	9d 83       	std	Y+5, r25	; 0x05
     86c:	8c 83       	std	Y+4, r24	; 0x04
     86e:	65 e7       	ldi	r22, 0x75	; 117
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	ed d3       	rcall	.+2010   	; 0x1050 <MCP2515_read>
     876:	8e 83       	std	Y+6, r24	; 0x06
     878:	86 e7       	ldi	r24, 0x76	; 118
     87a:	89 83       	std	Y+1, r24	; 0x01
     87c:	1b 82       	std	Y+3, r1	; 0x03
     87e:	14 c0       	rjmp	.+40     	; 0x8a8 <CAN_receiveMessage+0x150>
     880:	8b 81       	ldd	r24, Y+3	; 0x03
     882:	08 2f       	mov	r16, r24
     884:	10 e0       	ldi	r17, 0x00	; 0
     886:	69 81       	ldd	r22, Y+1	; 0x01
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	e1 d3       	rcall	.+1986   	; 0x1050 <MCP2515_read>
     88e:	28 2f       	mov	r18, r24
     890:	ce 01       	movw	r24, r28
     892:	07 96       	adiw	r24, 0x07	; 7
     894:	80 0f       	add	r24, r16
     896:	91 1f       	adc	r25, r17
     898:	fc 01       	movw	r30, r24
     89a:	20 83       	st	Z, r18
     89c:	89 81       	ldd	r24, Y+1	; 0x01
     89e:	8f 5f       	subi	r24, 0xFF	; 255
     8a0:	89 83       	std	Y+1, r24	; 0x01
     8a2:	8b 81       	ldd	r24, Y+3	; 0x03
     8a4:	8f 5f       	subi	r24, 0xFF	; 255
     8a6:	8b 83       	std	Y+3, r24	; 0x03
     8a8:	9e 81       	ldd	r25, Y+6	; 0x06
     8aa:	8b 81       	ldd	r24, Y+3	; 0x03
     8ac:	89 17       	cp	r24, r25
     8ae:	40 f3       	brcs	.-48     	; 0x880 <CAN_receiveMessage+0x128>
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	42 e0       	ldi	r20, 0x02	; 2
     8b4:	6c e2       	ldi	r22, 0x2C	; 44
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	00 d4       	rcall	.+2048   	; 0x10bc <MCP2515_bitModify>
     8bc:	8f 85       	ldd	r24, Y+15	; 0x0f
     8be:	98 89       	ldd	r25, Y+16	; 0x10
     8c0:	2b e0       	ldi	r18, 0x0B	; 11
     8c2:	fe 01       	movw	r30, r28
     8c4:	34 96       	adiw	r30, 0x04	; 4
     8c6:	dc 01       	movw	r26, r24
     8c8:	01 90       	ld	r0, Z+
     8ca:	0d 92       	st	X+, r0
     8cc:	2a 95       	dec	r18
     8ce:	e1 f7       	brne	.-8      	; 0x8c8 <CAN_receiveMessage+0x170>
     8d0:	8f 85       	ldd	r24, Y+15	; 0x0f
     8d2:	98 89       	ldd	r25, Y+16	; 0x10
     8d4:	61 96       	adiw	r28, 0x11	; 17
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	de bf       	out	0x3e, r29	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	cd bf       	out	0x3d, r28	; 61
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	1f 91       	pop	r17
     8e6:	0f 91       	pop	r16
     8e8:	08 95       	ret

000008ea <CAN_printMessage>:
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
     8ee:	00 d0       	rcall	.+0      	; 0x8f0 <CAN_printMessage+0x6>
     8f0:	1f 92       	push	r1
     8f2:	cd b7       	in	r28, 0x3d	; 61
     8f4:	de b7       	in	r29, 0x3e	; 62
     8f6:	9b 83       	std	Y+3, r25	; 0x03
     8f8:	8a 83       	std	Y+2, r24	; 0x02
     8fa:	8a 81       	ldd	r24, Y+2	; 0x02
     8fc:	9b 81       	ldd	r25, Y+3	; 0x03
     8fe:	fc 01       	movw	r30, r24
     900:	82 81       	ldd	r24, Z+2	; 0x02
     902:	28 2f       	mov	r18, r24
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	8a 81       	ldd	r24, Y+2	; 0x02
     908:	9b 81       	ldd	r25, Y+3	; 0x03
     90a:	fc 01       	movw	r30, r24
     90c:	80 81       	ld	r24, Z
     90e:	91 81       	ldd	r25, Z+1	; 0x01
     910:	43 2f       	mov	r20, r19
     912:	4f 93       	push	r20
     914:	2f 93       	push	r18
     916:	29 2f       	mov	r18, r25
     918:	2f 93       	push	r18
     91a:	8f 93       	push	r24
     91c:	83 e1       	ldi	r24, 0x13	; 19
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	89 2f       	mov	r24, r25
     922:	8f 93       	push	r24
     924:	83 e1       	ldi	r24, 0x13	; 19
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	8f 93       	push	r24
     92a:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <printf>
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	19 82       	std	Y+1, r1	; 0x01
     93c:	1f c0       	rjmp	.+62     	; 0x97c <CAN_printMessage+0x92>
     93e:	89 81       	ldd	r24, Y+1	; 0x01
     940:	88 2f       	mov	r24, r24
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	2a 81       	ldd	r18, Y+2	; 0x02
     946:	3b 81       	ldd	r19, Y+3	; 0x03
     948:	82 0f       	add	r24, r18
     94a:	93 1f       	adc	r25, r19
     94c:	03 96       	adiw	r24, 0x03	; 3
     94e:	fc 01       	movw	r30, r24
     950:	80 81       	ld	r24, Z
     952:	88 2f       	mov	r24, r24
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	29 2f       	mov	r18, r25
     958:	2f 93       	push	r18
     95a:	8f 93       	push	r24
     95c:	8f e3       	ldi	r24, 0x3F	; 63
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	89 2f       	mov	r24, r25
     962:	8f 93       	push	r24
     964:	8f e3       	ldi	r24, 0x3F	; 63
     966:	91 e0       	ldi	r25, 0x01	; 1
     968:	8f 93       	push	r24
     96a:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <printf>
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	8f 5f       	subi	r24, 0xFF	; 255
     97a:	89 83       	std	Y+1, r24	; 0x01
     97c:	8a 81       	ldd	r24, Y+2	; 0x02
     97e:	9b 81       	ldd	r25, Y+3	; 0x03
     980:	fc 01       	movw	r30, r24
     982:	92 81       	ldd	r25, Z+2	; 0x02
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	89 17       	cp	r24, r25
     988:	d0 f2       	brcs	.-76     	; 0x93e <CAN_printMessage+0x54>
     98a:	8a e0       	ldi	r24, 0x0A	; 10
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <putchar>
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	0f 90       	pop	r0
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     99e:	95 b7       	in	r25, 0x35	; 53
     9a0:	90 68       	ori	r25, 0x80	; 128
     9a2:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     9a4:	96 b7       	in	r25, 0x36	; 54
     9a6:	98 60       	ori	r25, 0x08	; 8
     9a8:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     9aa:	88 23       	and	r24, r24
     9ac:	19 f0       	breq	.+6      	; 0x9b4 <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     9ae:	80 b7       	in	r24, 0x30	; 48
     9b0:	80 62       	ori	r24, 0x20	; 32
     9b2:	80 bf       	out	0x30, r24	; 48
     9b4:	08 95       	ret

000009b6 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     9b6:	fc 01       	movw	r30, r24
     9b8:	80 81       	ld	r24, Z
	return val;
}
     9ba:	08 95       	ret

000009bc <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     9bc:	fc 01       	movw	r30, r24
     9be:	60 83       	st	Z, r22
     9c0:	08 95       	ret

000009c2 <Game_init>:
static uint8_t JoyPos;
static uint8_t SliPos;
static uint8_t ButtonRight;

void Game_init()
{
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
	// declare score and lives
	score = 0;
     9ca:	10 92 1d 03 	sts	0x031D, r1
     9ce:	10 92 1c 03 	sts	0x031C, r1
	lives = 3;
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	80 93 1b 03 	sts	0x031B, r24
	
	// write Title to Screen
	OLED_clear();
     9d8:	0b d6       	rcall	.+3094   	; 0x15f0 <OLED_clear>
     9da:	64 e0       	ldi	r22, 0x04	; 4
	OLED_goto(0,4);
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	e9 d5       	rcall	.+3026   	; 0x15b6 <OLED_goto>
     9e4:	8f e7       	ldi	r24, 0x7F	; 127
     9e6:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("** Ping-Pong **");
     9e8:	3c d6       	rcall	.+3192   	; 0x1662 <OLED_printString>
     9ea:	64 e1       	ldi	r22, 0x14	; 20
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	83 e0       	ldi	r24, 0x03	; 3
		
	// write to Screen
	OLED_goto(3,LIVES_POS-16);
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	e1 d5       	rcall	.+3010   	; 0x15b6 <OLED_goto>
     9f4:	8f e8       	ldi	r24, 0x8F	; 143
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	34 d6       	rcall	.+3176   	; 0x1662 <OLED_printString>
     9fa:	6b e3       	ldi	r22, 0x3B	; 59
	OLED_printString("Lives");
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	83 e0       	ldi	r24, 0x03	; 3
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	d9 d5       	rcall	.+2994   	; 0x15b6 <OLED_goto>
	OLED_goto(3,SCORE_POS-16);
     a04:	85 e9       	ldi	r24, 0x95	; 149
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	2c d6       	rcall	.+3160   	; 0x1662 <OLED_printString>
     a0a:	64 e2       	ldi	r22, 0x24	; 36
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	84 e0       	ldi	r24, 0x04	; 4
	OLED_printString("Score");
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	d1 d5       	rcall	.+2978   	; 0x15b6 <OLED_goto>
     a14:	80 91 1b 03 	lds	r24, 0x031B
		
	// write Numbers
	OLED_goto(4, LIVES_POS);
     a18:	1f 92       	push	r1
     a1a:	8f 93       	push	r24
     a1c:	0c e7       	ldi	r16, 0x7C	; 124
     a1e:	11 e0       	ldi	r17, 0x01	; 1
     a20:	1f 93       	push	r17
     a22:	0f 93       	push	r16
	sprintf(str, "%d", lives);
     a24:	ce e1       	ldi	r28, 0x1E	; 30
     a26:	d3 e0       	ldi	r29, 0x03	; 3
     a28:	df 93       	push	r29
     a2a:	cf 93       	push	r28
     a2c:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <sprintf>
     a30:	ce 01       	movw	r24, r28
     a32:	17 d6       	rcall	.+3118   	; 0x1662 <OLED_printString>
     a34:	6b e4       	ldi	r22, 0x4B	; 75
     a36:	70 e0       	ldi	r23, 0x00	; 0
     a38:	84 e0       	ldi	r24, 0x04	; 4
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	bc d5       	rcall	.+2936   	; 0x15b6 <OLED_goto>
     a3e:	80 91 1d 03 	lds	r24, 0x031D
	OLED_printString(str);
     a42:	8f 93       	push	r24
     a44:	80 91 1c 03 	lds	r24, 0x031C
	OLED_goto(4, SCORE_POS);
     a48:	8f 93       	push	r24
     a4a:	1f 93       	push	r17
     a4c:	0f 93       	push	r16
     a4e:	df 93       	push	r29
     a50:	cf 93       	push	r28
	sprintf(str, "%d", score);
     a52:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <sprintf>
     a56:	ce 01       	movw	r24, r28
     a58:	04 d6       	rcall	.+3080   	; 0x1662 <OLED_printString>
     a5a:	8d b7       	in	r24, 0x3d	; 61
     a5c:	9e b7       	in	r25, 0x3e	; 62
     a5e:	0c 96       	adiw	r24, 0x0c	; 12
     a60:	0f b6       	in	r0, 0x3f	; 63
     a62:	f8 94       	cli
     a64:	9e bf       	out	0x3e, r25	; 62
     a66:	0f be       	out	0x3f, r0	; 63
     a68:	8d bf       	out	0x3d, r24	; 61
	OLED_printString(str);	
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	08 95       	ret

00000a74 <Game_updateLives>:
     a74:	80 91 1b 03 	lds	r24, 0x031B
     a78:	81 50       	subi	r24, 0x01	; 1
     a7a:	80 93 1b 03 	sts	0x031B, r24
     a7e:	64 e2       	ldi	r22, 0x24	; 36
}
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	84 e0       	ldi	r24, 0x04	; 4
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	97 d5       	rcall	.+2862   	; 0x15b6 <OLED_goto>
     a88:	80 91 1b 03 	lds	r24, 0x031B

void Game_updateLives()
{
	lives--;
	OLED_goto(4, LIVES_POS);
	sprintf(str, "%d", lives);
     a8c:	1f 92       	push	r1
     a8e:	8f 93       	push	r24
     a90:	8c e7       	ldi	r24, 0x7C	; 124
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	9f 93       	push	r25
     a96:	8f 93       	push	r24
     a98:	8e e1       	ldi	r24, 0x1E	; 30
     a9a:	93 e0       	ldi	r25, 0x03	; 3
     a9c:	9f 93       	push	r25
     a9e:	8f 93       	push	r24
     aa0:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <sprintf>
     aa4:	8e e1       	ldi	r24, 0x1E	; 30
	OLED_printString(str);
     aa6:	93 e0       	ldi	r25, 0x03	; 3
     aa8:	dc d5       	rcall	.+3000   	; 0x1662 <OLED_printString>
     aaa:	6e e1       	ldi	r22, 0x1E	; 30
     aac:	70 e0       	ldi	r23, 0x00	; 0
	
	OLED_goto(7, 30);
     aae:	87 e0       	ldi	r24, 0x07	; 7
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	81 d5       	rcall	.+2818   	; 0x15b6 <OLED_goto>
     ab4:	8b e9       	ldi	r24, 0x9B	; 155
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	d4 d5       	rcall	.+2984   	; 0x1662 <OLED_printString>
	OLED_printString("Wait");
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	0f 90       	pop	r0
     ac4:	0f 90       	pop	r0
     ac6:	08 95       	ret

00000ac8 <Game_play>:
     ac8:	2f 92       	push	r2
     aca:	3f 92       	push	r3
     acc:	4f 92       	push	r4
     ace:	5f 92       	push	r5
}

void Game_play(uint8_t* SPIreceivedFlag)
{
     ad0:	6f 92       	push	r6
     ad2:	7f 92       	push	r7
     ad4:	8f 92       	push	r8
     ad6:	9f 92       	push	r9
     ad8:	af 92       	push	r10
     ada:	bf 92       	push	r11
     adc:	cf 92       	push	r12
     ade:	df 92       	push	r13
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	cd b7       	in	r28, 0x3d	; 61
     aee:	de b7       	in	r29, 0x3e	; 62
     af0:	6e 97       	sbiw	r28, 0x1e	; 30
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	f8 94       	cli
     af6:	de bf       	out	0x3e, r29	; 62
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	cd bf       	out	0x3d, r28	; 61
     afc:	7c 01       	movw	r14, r24
		{
			ButtonRight = 0;
		}
		
		// send Positions to Node 2
		message2send.id = 23;
     afe:	0d e3       	ldi	r16, 0x3D	; 61
     b00:	13 e0       	ldi	r17, 0x03	; 3
     b02:	0f 2e       	mov	r0, r31
     b04:	f7 e1       	ldi	r31, 0x17	; 23
     b06:	8f 2e       	mov	r8, r31
     b08:	91 2c       	mov	r9, r1
     b0a:	f0 2d       	mov	r31, r0
		message2send.length = 3;
     b0c:	0f 2e       	mov	r0, r31
     b0e:	ff e3       	ldi	r31, 0x3F	; 63
     b10:	af 2e       	mov	r10, r31
     b12:	f3 e0       	ldi	r31, 0x03	; 3
     b14:	bf 2e       	mov	r11, r31
     b16:	f0 2d       	mov	r31, r0
		message2send.data[0] = JoyPos;
     b18:	0f 2e       	mov	r0, r31
     b1a:	f0 e4       	ldi	r31, 0x40	; 64
     b1c:	cf 2e       	mov	r12, r31
     b1e:	f3 e0       	ldi	r31, 0x03	; 3
     b20:	df 2e       	mov	r13, r31
     b22:	f0 2d       	mov	r31, r0
		message2send.data[1] = SliPos;
     b24:	0f 2e       	mov	r0, r31
     b26:	f1 e4       	ldi	r31, 0x41	; 65
     b28:	6f 2e       	mov	r6, r31
     b2a:	f3 e0       	ldi	r31, 0x03	; 3
     b2c:	7f 2e       	mov	r7, r31
     b2e:	f0 2d       	mov	r31, r0
		message2send.data[2] = ButtonRight;
     b30:	0f 2e       	mov	r0, r31
     b32:	f2 e4       	ldi	r31, 0x42	; 66
     b34:	4f 2e       	mov	r4, r31
     b36:	f3 e0       	ldi	r31, 0x03	; 3
     b38:	5f 2e       	mov	r5, r31
     b3a:	f0 2d       	mov	r31, r0
		{
			ButtonRight = 0;
		}
		
		// send Positions to Node 2
		message2send.id = 23;
     b3c:	20 2e       	mov	r2, r16
     b3e:	31 2e       	mov	r3, r17
	OLED_printString("Wait");
}

void Game_play(uint8_t* SPIreceivedFlag)
{
	while(lives > 0)
     b40:	5a c0       	rjmp	.+180    	; 0xbf6 <Game_play+0x12e>
	{
		// call for Joystick and Slider positions
		JoyPos = JOY_getPosition().X_abs;
     b42:	29 d2       	rcall	.+1106   	; 0xf96 <JOY_getPosition>
     b44:	29 83       	std	Y+1, r18	; 0x01
     b46:	3a 83       	std	Y+2, r19	; 0x02
     b48:	4b 83       	std	Y+3, r20	; 0x03
     b4a:	5c 83       	std	Y+4, r21	; 0x04
     b4c:	6d 83       	std	Y+5, r22	; 0x05
     b4e:	7e 83       	std	Y+6, r23	; 0x06
     b50:	8f 83       	std	Y+7, r24	; 0x07
     b52:	98 87       	std	Y+8, r25	; 0x08
     b54:	20 93 1a 03 	sts	0x031A, r18
     b58:	2c d7       	rcall	.+3672   	; 0x19b2 <SLI_getPosition>
		SliPos = SLI_getPosition().R_per;
     b5a:	80 93 19 03 	sts	0x0319, r24
     b5e:	2a 9b       	sbis	0x05, 2	; 5
     b60:	04 c0       	rjmp	.+8      	; 0xb6a <Game_play+0xa2>
		
		// Check for pushed Button
		if((PINE & (1<<PE2)))
     b62:	21 e0       	ldi	r18, 0x01	; 1
     b64:	20 93 18 03 	sts	0x0318, r18
		{
			ButtonRight = 1;
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <Game_play+0xa6>
     b6a:	10 92 18 03 	sts	0x0318, r1
		}
		else
		{
			ButtonRight = 0;
     b6e:	f8 01       	movw	r30, r16
     b70:	91 82       	std	Z+1, r9	; 0x01
		}
		
		// send Positions to Node 2
		message2send.id = 23;
     b72:	80 82       	st	Z, r8
     b74:	23 e0       	ldi	r18, 0x03	; 3
     b76:	f5 01       	movw	r30, r10
		message2send.length = 3;
     b78:	20 83       	st	Z, r18
     b7a:	90 91 1a 03 	lds	r25, 0x031A
		message2send.data[0] = JoyPos;
     b7e:	f6 01       	movw	r30, r12
     b80:	90 83       	st	Z, r25
     b82:	f3 01       	movw	r30, r6
     b84:	80 83       	st	Z, r24
		message2send.data[1] = SliPos;
     b86:	80 91 18 03 	lds	r24, 0x0318
		message2send.data[2] = ButtonRight;
     b8a:	f2 01       	movw	r30, r4
     b8c:	80 83       	st	Z, r24
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	82 2d       	mov	r24, r2
		
		CAN_sendMessage(&message2send, 0);
     b92:	93 2d       	mov	r25, r3
     b94:	78 dd       	rcall	.-1296   	; 0x686 <CAN_sendMessage>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 ef       	ldi	r25, 0xF0	; 240
     b9a:	01 97       	sbiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b9c:	f1 f7       	brne	.-4      	; 0xb9a <Game_play+0xd2>
     b9e:	f7 01       	movw	r30, r14
     ba0:	80 81       	ld	r24, Z
     ba2:	88 23       	and	r24, r24
		_delay_ms(50);
		
		// CAN reception
		if(*SPIreceivedFlag)
     ba4:	41 f1       	breq	.+80     	; 0xbf6 <Game_play+0x12e>
     ba6:	6c e2       	ldi	r22, 0x2C	; 44
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	52 d2       	rcall	.+1188   	; 0x1050 <MCP2515_read>
		{
		
		 	uint8_t receiveBufferStatus;
		 	// check for message reception
		 	if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
     bac:	83 70       	andi	r24, 0x03	; 3
     bae:	19 f1       	breq	.+70     	; 0xbf6 <Game_play+0x12e>
     bb0:	68 2f       	mov	r22, r24
     bb2:	ce 01       	movw	r24, r28
     bb4:	44 96       	adiw	r24, 0x14	; 20
     bb6:	d0 dd       	rcall	.-1120   	; 0x758 <CAN_receiveMessage>
		 	{
		 		struct can_message receivedMessage;
		 		receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     bb8:	8b e0       	ldi	r24, 0x0B	; 11
     bba:	fe 01       	movw	r30, r28
     bbc:	74 96       	adiw	r30, 0x14	; 20
     bbe:	de 01       	movw	r26, r28
     bc0:	19 96       	adiw	r26, 0x09	; 9
     bc2:	01 90       	ld	r0, Z+
     bc4:	0d 92       	st	X+, r0
     bc6:	8a 95       	dec	r24
     bc8:	e1 f7       	brne	.-8      	; 0xbc2 <Game_play+0xfa>
     bca:	ce 01       	movw	r24, r28
     bcc:	09 96       	adiw	r24, 0x09	; 9
     bce:	8d de       	rcall	.-742    	; 0x8ea <CAN_printMessage>
     bd0:	89 85       	ldd	r24, Y+9	; 0x09
     bd2:	9a 85       	ldd	r25, Y+10	; 0x0a
		
		 		CAN_printMessage(&receivedMessage);
     bd4:	45 97       	sbiw	r24, 0x15	; 21
     bd6:	09 f4       	brne	.+2      	; 0xbda <Game_play+0x112>
     bd8:	4d df       	rcall	.-358    	; 0xa74 <Game_updateLives>
     bda:	89 85       	ldd	r24, Y+9	; 0x09
		
		 		if(receivedMessage.id == 21)
     bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
     bde:	0d 97       	sbiw	r24, 0x0d	; 13
     be0:	41 f4       	brne	.+16     	; 0xbf2 <Game_play+0x12a>
     be2:	6e e1       	ldi	r22, 0x1E	; 30
		 		{
		 			Game_updateLives();
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	87 e0       	ldi	r24, 0x07	; 7
		 		}
				 
				if(receivedMessage.id == 13)
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	e5 d4       	rcall	.+2506   	; 0x15b6 <OLED_goto>
     bec:	80 ea       	ldi	r24, 0xA0	; 160
     bee:	91 e0       	ldi	r25, 0x01	; 1
				{
					OLED_goto(7, 30);
     bf0:	38 d5       	rcall	.+2672   	; 0x1662 <OLED_printString>
     bf2:	f7 01       	movw	r30, r14
     bf4:	10 82       	st	Z, r1
     bf6:	80 91 1b 03 	lds	r24, 0x031B
     bfa:	81 11       	cpse	r24, r1
					OLED_printString("    ");
     bfc:	a2 cf       	rjmp	.-188    	; 0xb42 <Game_play+0x7a>
     bfe:	f8 d4       	rcall	.+2544   	; 0x15f0 <OLED_clear>
     c00:	65 e0       	ldi	r22, 0x05	; 5
     c02:	70 e0       	ldi	r23, 0x00	; 0
				}
		
		 		*SPIreceivedFlag = 0;
     c04:	83 e0       	ldi	r24, 0x03	; 3
     c06:	90 e0       	ldi	r25, 0x00	; 0
	OLED_printString("Wait");
}

void Game_play(uint8_t* SPIreceivedFlag)
{
	while(lives > 0)
     c08:	d6 d4       	rcall	.+2476   	; 0x15b6 <OLED_goto>
     c0a:	85 ea       	ldi	r24, 0xA5	; 165
     c0c:	91 e0       	ldi	r25, 0x01	; 1
     c0e:	29 d5       	rcall	.+2642   	; 0x1662 <OLED_printString>
		 		*SPIreceivedFlag = 0;
		 	}
		}
	}
	
	OLED_clear();
     c10:	65 e0       	ldi	r22, 0x05	; 5
     c12:	70 e0       	ldi	r23, 0x00	; 0
	OLED_goto(3,5);
     c14:	85 e0       	ldi	r24, 0x05	; 5
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	ce d4       	rcall	.+2460   	; 0x15b6 <OLED_goto>
     c1a:	80 91 1d 03 	lds	r24, 0x031D
     c1e:	8f 93       	push	r24
	OLED_printString("GAME OVER");
     c20:	80 91 1c 03 	lds	r24, 0x031C
     c24:	8f 93       	push	r24
     c26:	8c e7       	ldi	r24, 0x7C	; 124
	OLED_goto(5,5);
     c28:	91 e0       	ldi	r25, 0x01	; 1
     c2a:	9f 93       	push	r25
     c2c:	8f 93       	push	r24
     c2e:	8e e1       	ldi	r24, 0x1E	; 30
     c30:	93 e0       	ldi	r25, 0x03	; 3
     c32:	9f 93       	push	r25
	sprintf(str, "%d", score);
     c34:	8f 93       	push	r24
     c36:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <sprintf>
     c3a:	8e e1       	ldi	r24, 0x1E	; 30
     c3c:	93 e0       	ldi	r25, 0x03	; 3
     c3e:	11 d5       	rcall	.+2594   	; 0x1662 <OLED_printString>
     c40:	ff ef       	ldi	r31, 0xFF	; 255
     c42:	2f ef       	ldi	r18, 0xFF	; 255
     c44:	8d e1       	ldi	r24, 0x1D	; 29
     c46:	f1 50       	subi	r31, 0x01	; 1
     c48:	20 40       	sbci	r18, 0x00	; 0
     c4a:	80 40       	sbci	r24, 0x00	; 0
     c4c:	e1 f7       	brne	.-8      	; 0xc46 <Game_play+0x17e>
     c4e:	00 c0       	rjmp	.+0      	; 0xc50 <Game_play+0x188>
     c50:	00 00       	nop
     c52:	0f 90       	pop	r0
	OLED_printString(str);
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	6e 96       	adiw	r28, 0x1e	; 30
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	1f 91       	pop	r17
     c70:	0f 91       	pop	r16
     c72:	ff 90       	pop	r15
     c74:	ef 90       	pop	r14
     c76:	df 90       	pop	r13
     c78:	cf 90       	pop	r12
	
	_delay_ms(2000);
     c7a:	bf 90       	pop	r11
     c7c:	af 90       	pop	r10
     c7e:	9f 90       	pop	r9
     c80:	8f 90       	pop	r8
     c82:	7f 90       	pop	r7
     c84:	6f 90       	pop	r6
     c86:	5f 90       	pop	r5
     c88:	4f 90       	pop	r4
     c8a:	3f 90       	pop	r3
     c8c:	2f 90       	pop	r2
     c8e:	08 95       	ret

00000c90 <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     c90:	10 92 23 03 	sts	0x0323, r1
     c94:	10 92 22 03 	sts	0x0322, r1
	currentPosition.Y_abs = 0;
     c98:	10 92 25 03 	sts	0x0325, r1
     c9c:	10 92 24 03 	sts	0x0324, r1
	currentPosition.X_per = 0;
     ca0:	10 92 27 03 	sts	0x0327, r1
     ca4:	10 92 26 03 	sts	0x0326, r1
	currentPosition.Y_per = 0;
     ca8:	10 92 29 03 	sts	0x0329, r1
     cac:	10 92 28 03 	sts	0x0328, r1
	currentDirection = CENTRE;
     cb0:	10 92 21 03 	sts	0x0321, r1
     cb4:	08 95       	ret

00000cb6 <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     cba:	9a d4       	rcall	.+2356   	; 0x15f0 <OLED_clear>
     cbc:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     cbe:	70 e0       	ldi	r23, 0x00	; 0
     cc0:	80 e0       	ldi	r24, 0x00	; 0
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	78 d4       	rcall	.+2288   	; 0x15b6 <OLED_goto>
     cc6:	8f ea       	ldi	r24, 0xAF	; 175
     cc8:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     cca:	cb d4       	rcall	.+2454   	; 0x1662 <OLED_printString>
     ccc:	2f ef       	ldi	r18, 0xFF	; 255
     cce:	8f ef       	ldi	r24, 0xFF	; 255
     cd0:	92 e0       	ldi	r25, 0x02	; 2
     cd2:	21 50       	subi	r18, 0x01	; 1
     cd4:	80 40       	sbci	r24, 0x00	; 0
     cd6:	90 40       	sbci	r25, 0x00	; 0
     cd8:	e1 f7       	brne	.-8      	; 0xcd2 <JOY_calibrate+0x1c>
     cda:	00 c0       	rjmp	.+0      	; 0xcdc <JOY_calibrate+0x26>
     cdc:	00 c0       	rjmp	.+0      	; 0xcde <JOY_calibrate+0x28>
     cde:	c4 e1       	ldi	r28, 0x14	; 20
     ce0:	d0 e0       	ldi	r29, 0x00	; 0
     ce2:	60 91 06 01 	lds	r22, 0x0106
     ce6:	70 91 07 01 	lds	r23, 0x0107
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     cea:	82 e0       	ldi	r24, 0x02	; 2
     cec:	b5 d6       	rcall	.+3434   	; 0x1a58 <ADC_request>
     cee:	2f ef       	ldi	r18, 0xFF	; 255
     cf0:	8f e1       	ldi	r24, 0x1F	; 31
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	21 50       	subi	r18, 0x01	; 1
     cf6:	80 40       	sbci	r24, 0x00	; 0
     cf8:	90 40       	sbci	r25, 0x00	; 0
     cfa:	e1 f7       	brne	.-8      	; 0xcf4 <JOY_calibrate+0x3e>
     cfc:	00 c0       	rjmp	.+0      	; 0xcfe <JOY_calibrate+0x48>
     cfe:	00 00       	nop
     d00:	80 91 06 01 	lds	r24, 0x0106
     d04:	90 91 07 01 	lds	r25, 0x0107
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     d08:	cf d6       	rcall	.+3486   	; 0x1aa8 <ADC_read>
     d0a:	90 91 0e 01 	lds	r25, 0x010E
     d0e:	98 17       	cp	r25, r24
     d10:	10 f4       	brcc	.+4      	; 0xd16 <JOY_calibrate+0x60>
     d12:	80 93 0e 01 	sts	0x010E, r24
		
		if(temp > calR) {calR = temp;}
     d16:	21 97       	sbiw	r28, 0x01	; 1
     d18:	20 97       	sbiw	r28, 0x00	; 0
     d1a:	19 f7       	brne	.-58     	; 0xce2 <JOY_calibrate+0x2c>
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
	OLED_goto(0,0);
	OLED_printString("JOY RIGHT");
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	48 d4       	rcall	.+2192   	; 0x15b6 <OLED_goto>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_goto(1,0);
     d26:	89 eb       	ldi	r24, 0xB9	; 185
     d28:	91 e0       	ldi	r25, 0x01	; 1
     d2a:	9b d4       	rcall	.+2358   	; 0x1662 <OLED_printString>
     d2c:	2f ef       	ldi	r18, 0xFF	; 255
     d2e:	8f ef       	ldi	r24, 0xFF	; 255
     d30:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("JOY LEFT");
     d32:	21 50       	subi	r18, 0x01	; 1
     d34:	80 40       	sbci	r24, 0x00	; 0
     d36:	90 40       	sbci	r25, 0x00	; 0
     d38:	e1 f7       	brne	.-8      	; 0xd32 <JOY_calibrate+0x7c>
     d3a:	00 c0       	rjmp	.+0      	; 0xd3c <JOY_calibrate+0x86>
     d3c:	00 c0       	rjmp	.+0      	; 0xd3e <JOY_calibrate+0x88>
     d3e:	c4 e1       	ldi	r28, 0x14	; 20
     d40:	d0 e0       	ldi	r29, 0x00	; 0
     d42:	60 91 06 01 	lds	r22, 0x0106
     d46:	70 91 07 01 	lds	r23, 0x0107
     d4a:	82 e0       	ldi	r24, 0x02	; 2
     d4c:	85 d6       	rcall	.+3338   	; 0x1a58 <ADC_request>
     d4e:	2f ef       	ldi	r18, 0xFF	; 255
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     d50:	8f e1       	ldi	r24, 0x1F	; 31
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	21 50       	subi	r18, 0x01	; 1
     d56:	80 40       	sbci	r24, 0x00	; 0
     d58:	90 40       	sbci	r25, 0x00	; 0
     d5a:	e1 f7       	brne	.-8      	; 0xd54 <JOY_calibrate+0x9e>
     d5c:	00 c0       	rjmp	.+0      	; 0xd5e <JOY_calibrate+0xa8>
     d5e:	00 00       	nop
     d60:	80 91 06 01 	lds	r24, 0x0106
     d64:	90 91 07 01 	lds	r25, 0x0107
     d68:	9f d6       	rcall	.+3390   	; 0x1aa8 <ADC_read>
     d6a:	90 91 0d 01 	lds	r25, 0x010D
     d6e:	89 17       	cp	r24, r25
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     d70:	10 f4       	brcc	.+4      	; 0xd76 <JOY_calibrate+0xc0>
     d72:	80 93 0d 01 	sts	0x010D, r24
     d76:	21 97       	sbiw	r28, 0x01	; 1
     d78:	20 97       	sbiw	r28, 0x00	; 0
     d7a:	19 f7       	brne	.-58     	; 0xd42 <JOY_calibrate+0x8c>
		
		if(temp < calL) {calL = temp;}
     d7c:	60 e0       	ldi	r22, 0x00	; 0
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	82 e0       	ldi	r24, 0x02	; 2
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	18 d4       	rcall	.+2096   	; 0x15b6 <OLED_goto>
     d86:	82 ec       	ldi	r24, 0xC2	; 194
     d88:	91 e0       	ldi	r25, 0x01	; 1
	OLED_goto(1,0);
	OLED_printString("JOY LEFT");
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     d8a:	6b d4       	rcall	.+2262   	; 0x1662 <OLED_printString>
     d8c:	2f ef       	ldi	r18, 0xFF	; 255
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_goto(2,0);
     d8e:	8f ef       	ldi	r24, 0xFF	; 255
     d90:	92 e0       	ldi	r25, 0x02	; 2
     d92:	21 50       	subi	r18, 0x01	; 1
     d94:	80 40       	sbci	r24, 0x00	; 0
     d96:	90 40       	sbci	r25, 0x00	; 0
     d98:	e1 f7       	brne	.-8      	; 0xd92 <JOY_calibrate+0xdc>
	OLED_printString("JOY UP");
     d9a:	00 c0       	rjmp	.+0      	; 0xd9c <JOY_calibrate+0xe6>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <JOY_calibrate+0xe8>
     d9e:	c4 e1       	ldi	r28, 0x14	; 20
     da0:	d0 e0       	ldi	r29, 0x00	; 0
     da2:	60 91 06 01 	lds	r22, 0x0106
     da6:	70 91 07 01 	lds	r23, 0x0107
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	55 d6       	rcall	.+3242   	; 0x1a58 <ADC_request>
     dae:	2f ef       	ldi	r18, 0xFF	; 255
     db0:	8f e1       	ldi	r24, 0x1F	; 31
     db2:	91 e0       	ldi	r25, 0x01	; 1
     db4:	21 50       	subi	r18, 0x01	; 1
     db6:	80 40       	sbci	r24, 0x00	; 0
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     db8:	90 40       	sbci	r25, 0x00	; 0
     dba:	e1 f7       	brne	.-8      	; 0xdb4 <JOY_calibrate+0xfe>
     dbc:	00 c0       	rjmp	.+0      	; 0xdbe <JOY_calibrate+0x108>
     dbe:	00 00       	nop
     dc0:	80 91 06 01 	lds	r24, 0x0106
     dc4:	90 91 07 01 	lds	r25, 0x0107
     dc8:	6f d6       	rcall	.+3294   	; 0x1aa8 <ADC_read>
     dca:	90 91 0c 01 	lds	r25, 0x010C
     dce:	98 17       	cp	r25, r24
     dd0:	10 f4       	brcc	.+4      	; 0xdd6 <JOY_calibrate+0x120>
     dd2:	80 93 0c 01 	sts	0x010C, r24
     dd6:	21 97       	sbiw	r28, 0x01	; 1
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     dd8:	20 97       	sbiw	r28, 0x00	; 0
     dda:	19 f7       	brne	.-58     	; 0xda2 <JOY_calibrate+0xec>
     ddc:	60 e0       	ldi	r22, 0x00	; 0
     dde:	70 e0       	ldi	r23, 0x00	; 0
     de0:	83 e0       	ldi	r24, 0x03	; 3
     de2:	90 e0       	ldi	r25, 0x00	; 0
		
		if(temp > calUp) {calUp = temp;}
     de4:	e8 d3       	rcall	.+2000   	; 0x15b6 <OLED_goto>
     de6:	89 ec       	ldi	r24, 0xC9	; 201
     de8:	91 e0       	ldi	r25, 0x01	; 1
     dea:	3b d4       	rcall	.+2166   	; 0x1662 <OLED_printString>
     dec:	2f ef       	ldi	r18, 0xFF	; 255
     dee:	8f ef       	ldi	r24, 0xFF	; 255
     df0:	92 e0       	ldi	r25, 0x02	; 2
	OLED_goto(2,0);
	OLED_printString("JOY UP");
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     df2:	21 50       	subi	r18, 0x01	; 1
     df4:	80 40       	sbci	r24, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_goto(3,0);
     df6:	90 40       	sbci	r25, 0x00	; 0
     df8:	e1 f7       	brne	.-8      	; 0xdf2 <JOY_calibrate+0x13c>
     dfa:	00 c0       	rjmp	.+0      	; 0xdfc <JOY_calibrate+0x146>
     dfc:	00 c0       	rjmp	.+0      	; 0xdfe <JOY_calibrate+0x148>
     dfe:	c4 e1       	ldi	r28, 0x14	; 20
     e00:	d0 e0       	ldi	r29, 0x00	; 0
	OLED_printString("JOY DOWN");
     e02:	60 91 06 01 	lds	r22, 0x0106
     e06:	70 91 07 01 	lds	r23, 0x0107
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	25 d6       	rcall	.+3146   	; 0x1a58 <ADC_request>
     e0e:	2f ef       	ldi	r18, 0xFF	; 255
     e10:	8f e1       	ldi	r24, 0x1F	; 31
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	21 50       	subi	r18, 0x01	; 1
     e16:	80 40       	sbci	r24, 0x00	; 0
     e18:	90 40       	sbci	r25, 0x00	; 0
     e1a:	e1 f7       	brne	.-8      	; 0xe14 <JOY_calibrate+0x15e>
     e1c:	00 c0       	rjmp	.+0      	; 0xe1e <JOY_calibrate+0x168>
     e1e:	00 00       	nop
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     e20:	80 91 06 01 	lds	r24, 0x0106
     e24:	90 91 07 01 	lds	r25, 0x0107
     e28:	3f d6       	rcall	.+3198   	; 0x1aa8 <ADC_read>
     e2a:	90 91 0b 01 	lds	r25, 0x010B
     e2e:	89 17       	cp	r24, r25
     e30:	10 f4       	brcc	.+4      	; 0xe36 <JOY_calibrate+0x180>
     e32:	80 93 0b 01 	sts	0x010B, r24
     e36:	21 97       	sbiw	r28, 0x01	; 1
     e38:	20 97       	sbiw	r28, 0x00	; 0
     e3a:	19 f7       	brne	.-58     	; 0xe02 <JOY_calibrate+0x14c>
     e3c:	20 91 0c 01 	lds	r18, 0x010C
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     e40:	80 91 0b 01 	lds	r24, 0x010B
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	28 1b       	sub	r18, r24
     e48:	31 09       	sbc	r19, r1
     e4a:	c9 01       	movw	r24, r18
		
		if(temp < calDown) {calDown = temp;}
     e4c:	99 23       	and	r25, r25
     e4e:	0c f4       	brge	.+2      	; 0xe52 <JOY_calibrate+0x19c>
     e50:	01 96       	adiw	r24, 0x01	; 1
     e52:	95 95       	asr	r25
     e54:	87 95       	ror	r24
     e56:	80 93 0a 01 	sts	0x010A, r24
	OLED_goto(3,0);
	OLED_printString("JOY DOWN");
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     e5a:	20 91 0e 01 	lds	r18, 0x010E
	}
	
	
	//printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
	
	meanVert = (calUp - calDown)/2;
     e5e:	80 91 0d 01 	lds	r24, 0x010D
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	28 1b       	sub	r18, r24
     e66:	31 09       	sbc	r19, r1
     e68:	c9 01       	movw	r24, r18
     e6a:	99 23       	and	r25, r25
     e6c:	0c f4       	brge	.+2      	; 0xe70 <JOY_calibrate+0x1ba>
     e6e:	01 96       	adiw	r24, 0x01	; 1
     e70:	95 95       	asr	r25
     e72:	87 95       	ror	r24
     e74:	80 93 09 01 	sts	0x0109, r24
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	70 e0       	ldi	r23, 0x00	; 0
	meanHor = (calR - calL)/2;
     e7c:	84 e0       	ldi	r24, 0x04	; 4
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	9a d3       	rcall	.+1844   	; 0x15b6 <OLED_goto>
     e82:	82 ed       	ldi	r24, 0xD2	; 210
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	ed d3       	rcall	.+2010   	; 0x1662 <OLED_printString>
     e88:	2f ef       	ldi	r18, 0xFF	; 255
     e8a:	8f ef       	ldi	r24, 0xFF	; 255
     e8c:	9e e0       	ldi	r25, 0x0E	; 14
     e8e:	21 50       	subi	r18, 0x01	; 1
     e90:	80 40       	sbci	r24, 0x00	; 0
     e92:	90 40       	sbci	r25, 0x00	; 0
     e94:	e1 f7       	brne	.-8      	; 0xe8e <JOY_calibrate+0x1d8>
     e96:	00 c0       	rjmp	.+0      	; 0xe98 <JOY_calibrate+0x1e2>
     e98:	00 00       	nop
	
	OLED_goto(4,0);
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	08 95       	ret

00000ea0 <JOY_requestCurrentPosition>:
     ea0:	88 37       	cpi	r24, 0x78	; 120
     ea2:	39 f4       	brne	.+14     	; 0xeb2 <JOY_requestCurrentPosition+0x12>
     ea4:	60 91 06 01 	lds	r22, 0x0106
	OLED_printString("CALIB DONE");
     ea8:	70 91 07 01 	lds	r23, 0x0107
     eac:	82 e0       	ldi	r24, 0x02	; 2
     eae:	d4 c5       	rjmp	.+2984   	; 0x1a58 <ADC_request>
     eb0:	08 95       	ret
     eb2:	89 37       	cpi	r24, 0x79	; 121
     eb4:	31 f4       	brne	.+12     	; 0xec2 <JOY_requestCurrentPosition+0x22>
     eb6:	60 91 06 01 	lds	r22, 0x0106
     eba:	70 91 07 01 	lds	r23, 0x0107
     ebe:	81 e0       	ldi	r24, 0x01	; 1
	//printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
	_delay_ms(1000);
}
     ec0:	cb c5       	rjmp	.+2966   	; 0x1a58 <ADC_request>
     ec2:	08 95       	ret

00000ec4 <JOY_updatePosition>:
     ec4:	88 37       	cpi	r24, 0x78	; 120
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
	{
		ADC_request(Y_channel, adc_ext_ram);
     ec6:	f9 f4       	brne	.+62     	; 0xf06 <JOY_updatePosition+0x42>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     ec8:	80 91 06 01 	lds	r24, 0x0106
     ecc:	90 91 07 01 	lds	r25, 0x0107
     ed0:	eb d5       	rcall	.+3030   	; 0x1aa8 <ADC_read>
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	90 93 23 03 	sts	0x0323, r25
     ed8:	80 93 22 03 	sts	0x0322, r24
     edc:	20 91 09 01 	lds	r18, 0x0109
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     ee0:	60 91 09 01 	lds	r22, 0x0109
     ee4:	ac 01       	movw	r20, r24
     ee6:	42 1b       	sub	r20, r18
     ee8:	51 09       	sbc	r21, r1
     eea:	9a 01       	movw	r18, r20
     eec:	44 e6       	ldi	r20, 0x64	; 100
     eee:	42 9f       	mul	r20, r18
     ef0:	c0 01       	movw	r24, r0
     ef2:	43 9f       	mul	r20, r19
     ef4:	90 0d       	add	r25, r0
     ef6:	11 24       	eor	r1, r1
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	d9 d5       	rcall	.+2994   	; 0x1aae <__divmodhi4>
     efc:	70 93 27 03 	sts	0x0327, r23
     f00:	60 93 26 03 	sts	0x0326, r22
     f04:	08 95       	ret
     f06:	89 37       	cpi	r24, 0x79	; 121
     f08:	f1 f4       	brne	.+60     	; 0xf46 <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     f0a:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     f0e:	90 91 07 01 	lds	r25, 0x0107
     f12:	ca d5       	rcall	.+2964   	; 0x1aa8 <ADC_read>
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	90 93 25 03 	sts	0x0325, r25
     f1a:	80 93 24 03 	sts	0x0324, r24
     f1e:	20 91 0a 01 	lds	r18, 0x010A
     f22:	60 91 0a 01 	lds	r22, 0x010A
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     f26:	ac 01       	movw	r20, r24
     f28:	42 1b       	sub	r20, r18
     f2a:	51 09       	sbc	r21, r1
     f2c:	9a 01       	movw	r18, r20
     f2e:	44 e6       	ldi	r20, 0x64	; 100
     f30:	42 9f       	mul	r20, r18
     f32:	c0 01       	movw	r24, r0
     f34:	43 9f       	mul	r20, r19
     f36:	90 0d       	add	r25, r0
     f38:	11 24       	eor	r1, r1
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	b8 d5       	rcall	.+2928   	; 0x1aae <__divmodhi4>
     f3e:	70 93 29 03 	sts	0x0329, r23
     f42:	60 93 28 03 	sts	0x0328, r22
     f46:	08 95       	ret

00000f48 <JOY_calculateDirection>:
     f48:	80 91 26 03 	lds	r24, 0x0326
     f4c:	90 91 27 03 	lds	r25, 0x0327
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     f50:	8b 35       	cpi	r24, 0x5B	; 91
     f52:	91 05       	cpc	r25, r1
     f54:	24 f0       	brlt	.+8      	; 0xf5e <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     f56:	83 e0       	ldi	r24, 0x03	; 3
     f58:	80 93 21 03 	sts	0x0321, r24
     f5c:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     f5e:	86 3a       	cpi	r24, 0xA6	; 166
     f60:	9f 4f       	sbci	r25, 0xFF	; 255
     f62:	24 f4       	brge	.+8      	; 0xf6c <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     f64:	84 e0       	ldi	r24, 0x04	; 4
     f66:	80 93 21 03 	sts	0x0321, r24
     f6a:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     f6c:	80 91 28 03 	lds	r24, 0x0328
     f70:	90 91 29 03 	lds	r25, 0x0329
     f74:	8b 35       	cpi	r24, 0x5B	; 91
     f76:	91 05       	cpc	r25, r1
     f78:	24 f0       	brlt	.+8      	; 0xf82 <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	80 93 21 03 	sts	0x0321, r24
     f80:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     f82:	86 3a       	cpi	r24, 0xA6	; 166
     f84:	9f 4f       	sbci	r25, 0xFF	; 255
     f86:	24 f4       	brge	.+8      	; 0xf90 <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	80 93 21 03 	sts	0x0321, r24
     f8e:	08 95       	ret
	else{currentDirection = CENTRE;}
     f90:	10 92 21 03 	sts	0x0321, r1
     f94:	08 95       	ret

00000f96 <JOY_getPosition>:

//------------------------------------------------------------------------------
// This function returns the current position of the Joystick.
// It is a struct with the four parameters X_abs, Y_abs, X_per and Y_per
JOY_position_t JOY_getPosition()
{
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
     f9e:	28 97       	sbiw	r28, 0x08	; 8
     fa0:	0f b6       	in	r0, 0x3f	; 63
     fa2:	f8 94       	cli
     fa4:	de bf       	out	0x3e, r29	; 62
     fa6:	0f be       	out	0x3f, r0	; 63
     fa8:	cd bf       	out	0x3d, r28	; 61
	JOY_requestCurrentPosition('x');
     faa:	88 e7       	ldi	r24, 0x78	; 120
     fac:	79 df       	rcall	.-270    	; 0xea0 <JOY_requestCurrentPosition>
     fae:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fb0:	8a 95       	dec	r24
     fb2:	f1 f7       	brne	.-4      	; 0xfb0 <JOY_getPosition+0x1a>
     fb4:	00 00       	nop
     fb6:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     fb8:	85 df       	rcall	.-246    	; 0xec4 <JOY_updatePosition>
     fba:	89 e7       	ldi	r24, 0x79	; 121
     fbc:	71 df       	rcall	.-286    	; 0xea0 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     fbe:	82 e6       	ldi	r24, 0x62	; 98
     fc0:	8a 95       	dec	r24
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <JOY_getPosition+0x2a>
     fc4:	00 00       	nop
     fc6:	89 e7       	ldi	r24, 0x79	; 121
     fc8:	7d df       	rcall	.-262    	; 0xec4 <JOY_updatePosition>
     fca:	88 e0       	ldi	r24, 0x08	; 8
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     fcc:	e2 e2       	ldi	r30, 0x22	; 34
     fce:	f3 e0       	ldi	r31, 0x03	; 3
     fd0:	de 01       	movw	r26, r28
	return currentPosition;
     fd2:	11 96       	adiw	r26, 0x01	; 1
     fd4:	01 90       	ld	r0, Z+
     fd6:	0d 92       	st	X+, r0
     fd8:	8a 95       	dec	r24
     fda:	e1 f7       	brne	.-8      	; 0xfd4 <JOY_getPosition+0x3e>
     fdc:	29 81       	ldd	r18, Y+1	; 0x01
     fde:	3a 81       	ldd	r19, Y+2	; 0x02
     fe0:	4b 81       	ldd	r20, Y+3	; 0x03
     fe2:	5c 81       	ldd	r21, Y+4	; 0x04
     fe4:	6d 81       	ldd	r22, Y+5	; 0x05
     fe6:	7e 81       	ldd	r23, Y+6	; 0x06
     fe8:	8f 81       	ldd	r24, Y+7	; 0x07
     fea:	98 85       	ldd	r25, Y+8	; 0x08
     fec:	28 96       	adiw	r28, 0x08	; 8
     fee:	0f b6       	in	r0, 0x3f	; 63
}
     ff0:	f8 94       	cli
     ff2:	de bf       	out	0x3e, r29	; 62
     ff4:	0f be       	out	0x3f, r0	; 63
     ff6:	cd bf       	out	0x3d, r28	; 61
     ff8:	df 91       	pop	r29
     ffa:	cf 91       	pop	r28
     ffc:	08 95       	ret

00000ffe <JOY_getDirection>:
     ffe:	88 e7       	ldi	r24, 0x78	; 120
    1000:	4f df       	rcall	.-354    	; 0xea0 <JOY_requestCurrentPosition>
    1002:	82 e6       	ldi	r24, 0x62	; 98
    1004:	8a 95       	dec	r24
    1006:	f1 f7       	brne	.-4      	; 0x1004 <JOY_getDirection+0x6>
    1008:	00 00       	nop
    100a:	88 e7       	ldi	r24, 0x78	; 120
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
	_delay_us(delayConversion);
	JOY_updatePosition('x');
    100c:	5b df       	rcall	.-330    	; 0xec4 <JOY_updatePosition>
    100e:	89 e7       	ldi	r24, 0x79	; 121
    1010:	47 df       	rcall	.-370    	; 0xea0 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
    1012:	82 e6       	ldi	r24, 0x62	; 98
    1014:	8a 95       	dec	r24
    1016:	f1 f7       	brne	.-4      	; 0x1014 <JOY_getDirection+0x16>
    1018:	00 00       	nop
    101a:	89 e7       	ldi	r24, 0x79	; 121
    101c:	53 df       	rcall	.-346    	; 0xec4 <JOY_updatePosition>
    101e:	94 df       	rcall	.-216    	; 0xf48 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
    1020:	80 91 21 03 	lds	r24, 0x0321
    1024:	08 95       	ret

00001026 <MCP2515_reset>:
	//printf("finished MCP2515_init\n");
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
    1026:	cf 93       	push	r28
    1028:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
    102a:	ed d4       	rcall	.+2522   	; 0x1a06 <SPI_activateSlave>
    102c:	80 ec       	ldi	r24, 0xC0	; 192
	SPI_send(MCP_RESET);
    102e:	e1 d4       	rcall	.+2498   	; 0x19f2 <SPI_send>
    1030:	8c ec       	ldi	r24, 0xCC	; 204
    1032:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	f1 f7       	brne	.-4      	; 0x1034 <MCP2515_reset+0xe>
    1038:	00 c0       	rjmp	.+0      	; 0x103a <MCP2515_reset+0x14>
    103a:	00 00       	nop
    103c:	8c 2f       	mov	r24, r28
    103e:	e7 d4       	rcall	.+2510   	; 0x1a0e <SPI_deactivateSlave>
	_delay_ms(1);
	SPI_deactivateSlave(slave);
    1040:	8f ef       	ldi	r24, 0xFF	; 255
    1042:	9f e2       	ldi	r25, 0x2F	; 47
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	f1 f7       	brne	.-4      	; 0x1044 <MCP2515_reset+0x1e>
    1048:	00 c0       	rjmp	.+0      	; 0x104a <MCP2515_reset+0x24>
    104a:	00 00       	nop
    104c:	cf 91       	pop	r28
    104e:	08 95       	ret

00001050 <MCP2515_read>:
    1050:	cf 93       	push	r28
	_delay_ms(10);
}
    1052:	df 93       	push	r29
    1054:	c8 2f       	mov	r28, r24

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
    1056:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
    1058:	d6 d4       	rcall	.+2476   	; 0x1a06 <SPI_activateSlave>
    105a:	83 e0       	ldi	r24, 0x03	; 3
	SPI_send(MCP_READ);
    105c:	ca d4       	rcall	.+2452   	; 0x19f2 <SPI_send>
    105e:	8c ec       	ldi	r24, 0xCC	; 204
    1060:	94 e0       	ldi	r25, 0x04	; 4
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	f1 f7       	brne	.-4      	; 0x1062 <MCP2515_read+0x12>
    1066:	00 c0       	rjmp	.+0      	; 0x1068 <MCP2515_read+0x18>
    1068:	00 00       	nop
    106a:	8d 2f       	mov	r24, r29
    106c:	c2 d4       	rcall	.+2436   	; 0x19f2 <SPI_send>
	_delay_ms(1);
	SPI_send(address);
    106e:	c5 d4       	rcall	.+2442   	; 0x19fa <SPI_receive>
    1070:	d8 2f       	mov	r29, r24
    1072:	8c 2f       	mov	r24, r28
	
	uint8_t result;
	result = SPI_receive();
    1074:	cc d4       	rcall	.+2456   	; 0x1a0e <SPI_deactivateSlave>
    1076:	8d 2f       	mov	r24, r29
    1078:	df 91       	pop	r29
	
	SPI_deactivateSlave(slave);
    107a:	cf 91       	pop	r28
    107c:	08 95       	ret

0000107e <MCP2515_init>:
    107e:	80 e0       	ldi	r24, 0x00	; 0
	return result;
}
    1080:	d2 df       	rcall	.-92     	; 0x1026 <MCP2515_reset>
    1082:	6e e0       	ldi	r22, 0x0E	; 14
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	e4 df       	rcall	.-56     	; 0x1050 <MCP2515_read>
uint8_t MCP2515_init()
{
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
	// Self-test
	uint8_t value;
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
    1088:	98 2f       	mov	r25, r24
    108a:	90 7e       	andi	r25, 0xE0	; 224
	//printf("CANSTAT: %#x\n", value);
	if((value & MODE_MASK) != MODE_CONFIG) 
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	90 38       	cpi	r25, 0x80	; 128
    1090:	09 f4       	brne	.+2      	; 0x1094 <MCP2515_init+0x16>
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	08 95       	ret

00001096 <MCP2515_write>:
    1096:	1f 93       	push	r17
		return 1;
	}
	//
	//printf("finished MCP2515_init\n");
	return 0;
}
    1098:	cf 93       	push	r28
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_write(SPI_SLAVES slave, uint8_t address, uint8_t data)
{
    109a:	df 93       	push	r29
    109c:	c8 2f       	mov	r28, r24
    109e:	16 2f       	mov	r17, r22
    10a0:	d4 2f       	mov	r29, r20
	SPI_activateSlave(slave);
    10a2:	b1 d4       	rcall	.+2402   	; 0x1a06 <SPI_activateSlave>
    10a4:	82 e0       	ldi	r24, 0x02	; 2
	SPI_send(MCP_WRITE);
    10a6:	a5 d4       	rcall	.+2378   	; 0x19f2 <SPI_send>
    10a8:	81 2f       	mov	r24, r17
    10aa:	a3 d4       	rcall	.+2374   	; 0x19f2 <SPI_send>
	SPI_send(address);
    10ac:	8d 2f       	mov	r24, r29
    10ae:	a1 d4       	rcall	.+2370   	; 0x19f2 <SPI_send>
    10b0:	8c 2f       	mov	r24, r28
	SPI_send(data);
    10b2:	ad d4       	rcall	.+2394   	; 0x1a0e <SPI_deactivateSlave>
    10b4:	df 91       	pop	r29
    10b6:	cf 91       	pop	r28
	SPI_deactivateSlave(slave);
    10b8:	1f 91       	pop	r17
    10ba:	08 95       	ret

000010bc <MCP2515_bitModify>:
    10bc:	0f 93       	push	r16
}
    10be:	1f 93       	push	r17
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	c8 2f       	mov	r28, r24
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_bitModify(SPI_SLAVES slave, uint8_t register2change, uint8_t mask, uint8_t newValue)
{
    10c6:	06 2f       	mov	r16, r22
    10c8:	14 2f       	mov	r17, r20
    10ca:	d2 2f       	mov	r29, r18
	SPI_activateSlave(slave);
    10cc:	9c d4       	rcall	.+2360   	; 0x1a06 <SPI_activateSlave>
    10ce:	85 e0       	ldi	r24, 0x05	; 5
	
	SPI_send(MCP_BITMOD);
    10d0:	90 d4       	rcall	.+2336   	; 0x19f2 <SPI_send>
    10d2:	80 2f       	mov	r24, r16
    10d4:	8e d4       	rcall	.+2332   	; 0x19f2 <SPI_send>
	SPI_send(register2change);
    10d6:	81 2f       	mov	r24, r17
    10d8:	8c d4       	rcall	.+2328   	; 0x19f2 <SPI_send>
    10da:	8d 2f       	mov	r24, r29
	SPI_send(mask);
    10dc:	8a d4       	rcall	.+2324   	; 0x19f2 <SPI_send>
    10de:	8c 2f       	mov	r24, r28
    10e0:	96 d4       	rcall	.+2348   	; 0x1a0e <SPI_deactivateSlave>
	SPI_send(newValue);
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	1f 91       	pop	r17
	
	SPI_deactivateSlave(slave);
    10e8:	0f 91       	pop	r16
    10ea:	08 95       	ret

000010ec <startGame>:
static OP_STATE* actualState;
//******************************************************************************************

void startGame()
{
	*actualState = GAME;
    10ec:	e0 91 2a 03 	lds	r30, 0x032A
    10f0:	f0 91 2b 03 	lds	r31, 0x032B
    10f4:	10 82       	st	Z, r1
	OLED_clear();
    10f6:	7c d2       	rcall	.+1272   	; 0x15f0 <OLED_clear>
    10f8:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	5a d2       	rcall	.+1204   	; 0x15b6 <OLED_goto>
    1102:	8d ed       	ldi	r24, 0xDD	; 221
    1104:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("START");
    1106:	ad d2       	rcall	.+1370   	; 0x1662 <OLED_printString>
    1108:	2f ef       	ldi	r18, 0xFF	; 255
    110a:	8f e7       	ldi	r24, 0x7F	; 127
    110c:	97 e0       	ldi	r25, 0x07	; 7
    110e:	21 50       	subi	r18, 0x01	; 1
    1110:	80 40       	sbci	r24, 0x00	; 0
    1112:	90 40       	sbci	r25, 0x00	; 0
    1114:	e1 f7       	brne	.-8      	; 0x110e <startGame+0x22>
    1116:	00 c0       	rjmp	.+0      	; 0x1118 <startGame+0x2c>
    1118:	00 00       	nop
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	70 e0       	ldi	r23, 0x00	; 0
    111e:	85 e0       	ldi	r24, 0x05	; 5
// 		OLED_printString("*");
// 		_delay_ms(500);
// 	}

	_delay_ms(500);
	OLED_goto(5,0);
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	49 d2       	rcall	.+1170   	; 0x15b6 <OLED_goto>
    1124:	83 ee       	ldi	r24, 0xE3	; 227
    1126:	91 e0       	ldi	r25, 0x01	; 1
    1128:	9c d2       	rcall	.+1336   	; 0x1662 <OLED_printString>
    112a:	2f ef       	ldi	r18, 0xFF	; 255
	OLED_printString("YUPII :)");
    112c:	8f ef       	ldi	r24, 0xFF	; 255
    112e:	9c e2       	ldi	r25, 0x2C	; 44
    1130:	21 50       	subi	r18, 0x01	; 1
    1132:	80 40       	sbci	r24, 0x00	; 0
    1134:	90 40       	sbci	r25, 0x00	; 0
    1136:	e1 f7       	brne	.-8      	; 0x1130 <startGame+0x44>
    1138:	00 c0       	rjmp	.+0      	; 0x113a <startGame+0x4e>
    113a:	00 c0       	rjmp	.+0      	; 0x113c <startGame+0x50>
    113c:	08 95       	ret

0000113e <MENU_addMenuItem>:
    113e:	cf 92       	push	r12
    1140:	df 92       	push	r13
    1142:	ef 92       	push	r14
    1144:	ff 92       	push	r15
    1146:	0f 93       	push	r16
	MENU_addMenuItem("PC", modeMenu, NULL, 0);
	modeMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
    1148:	1f 93       	push	r17
    114a:	cf 93       	push	r28
    114c:	df 93       	push	r29
    114e:	8c 01       	movw	r16, r24
    1150:	7b 01       	movw	r14, r22
    1152:	6a 01       	movw	r12, r20
    1154:	e9 01       	movw	r28, r18
	if(currItem != NULL)
    1156:	80 91 2f 03 	lds	r24, 0x032F
    115a:	90 91 30 03 	lds	r25, 0x0330
    115e:	89 2b       	or	r24, r25
    1160:	19 f0       	breq	.+6      	; 0x1168 <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
    1162:	8c ee       	ldi	r24, 0xEC	; 236
    1164:	91 e0       	ldi	r25, 0x01	; 1
    1166:	51 d6       	rcall	.+3234   	; 0x1e0a <puts>
    1168:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	c7 d4       	rcall	.+2446   	; 0x1afc <malloc>
    116e:	fc 01       	movw	r30, r24
    1170:	90 93 30 03 	sts	0x0330, r25
    1174:	80 93 2f 03 	sts	0x032F, r24
    1178:	f3 82       	std	Z+3, r15	; 0x03
    117a:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
    117c:	11 83       	std	Z+1, r17	; 0x01
    117e:	00 83       	st	Z, r16
	currItem->name = name;
    1180:	cd 2b       	or	r28, r29
    1182:	39 f0       	breq	.+14     	; 0x1192 <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
    1184:	d5 82       	std	Z+5, r13	; 0x05
    1186:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
    118c:	97 83       	std	Z+7, r25	; 0x07
    118e:	86 83       	std	Z+6, r24	; 0x06
    1190:	04 c0       	rjmp	.+8      	; 0x119a <MENU_addMenuItem+0x5c>
    1192:	15 82       	std	Z+5, r1	; 0x05
    1194:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
    1196:	17 82       	std	Z+7, r1	; 0x07
    1198:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
	}
}
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	ff 90       	pop	r15
    11a4:	ef 90       	pop	r14
    11a6:	df 90       	pop	r13
    11a8:	cf 90       	pop	r12
    11aa:	08 95       	ret

000011ac <MENU_buildMenus>:
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
    11b0:	86 e1       	ldi	r24, 0x16	; 22
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	a3 d4       	rcall	.+2374   	; 0x1afc <malloc>
    11b6:	ec 01       	movw	r28, r24
    11b8:	90 93 36 03 	sts	0x0336, r25
    11bc:	80 93 35 03 	sts	0x0335, r24
    11c0:	82 e0       	ldi	r24, 0x02	; 2
	mainMenu->menuName = "MainMenu";
    11c2:	92 e0       	ldi	r25, 0x02	; 2
    11c4:	99 83       	std	Y+1, r25	; 0x01
    11c6:	88 83       	st	Y, r24
    11c8:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
    11ca:	1c 8a       	std	Y+20, r1	; 0x14
    11cc:	84 e0       	ldi	r24, 0x04	; 4
	mainMenu->noChilds = 4;
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	9b 83       	std	Y+3, r25	; 0x03
    11d2:	8a 83       	std	Y+2, r24	; 0x02
    11d4:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	modeMenu = malloc(sizeof(menuNode_t));
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	91 d4       	rcall	.+2338   	; 0x1afc <malloc>
    11da:	fc 01       	movw	r30, r24
    11dc:	90 93 34 03 	sts	0x0334, r25
    11e0:	80 93 33 03 	sts	0x0333, r24
    11e4:	8b e0       	ldi	r24, 0x0B	; 11
    11e6:	92 e0       	ldi	r25, 0x02	; 2
	modeMenu->menuName = "ModeMenu";
    11e8:	91 83       	std	Z+1, r25	; 0x01
    11ea:	80 83       	st	Z, r24
    11ec:	d5 8b       	std	Z+21, r29	; 0x15
    11ee:	c4 8b       	std	Z+20, r28	; 0x14
	modeMenu->parentMenu = mainMenu;
    11f0:	83 e0       	ldi	r24, 0x03	; 3
    11f2:	90 e0       	ldi	r25, 0x00	; 0
	modeMenu->noChilds = 3;
    11f4:	93 83       	std	Z+3, r25	; 0x03
    11f6:	82 83       	std	Z+2, r24	; 0x02
    11f8:	20 e0       	ldi	r18, 0x00	; 0
    11fa:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	50 e0       	ldi	r21, 0x00	; 0
    1200:	be 01       	movw	r22, r28
    1202:	84 e1       	ldi	r24, 0x14	; 20
    1204:	92 e0       	ldi	r25, 0x02	; 2
    1206:	9b df       	rcall	.-202    	; 0x113e <MENU_addMenuItem>
    1208:	60 91 35 03 	lds	r22, 0x0335
    120c:	70 91 36 03 	lds	r23, 0x0336
	mainMenu->children[0] = currItem;
    1210:	e0 91 2f 03 	lds	r30, 0x032F
    1214:	f0 91 30 03 	lds	r31, 0x0330
    1218:	db 01       	movw	r26, r22
    121a:	15 96       	adiw	r26, 0x05	; 5
    121c:	fc 93       	st	X, r31
    121e:	ee 93       	st	-X, r30
    1220:	14 97       	sbiw	r26, 0x04	; 4
    1222:	86 e7       	ldi	r24, 0x76	; 118
    1224:	98 e0       	ldi	r25, 0x08	; 8
    1226:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
    1228:	82 87       	std	Z+10, r24	; 0x0a
    122a:	40 91 33 03 	lds	r20, 0x0333
    122e:	50 91 34 03 	lds	r21, 0x0334
	
	MENU_addMenuItem("Mode", mainMenu, modeMenu, 1);
    1232:	21 e0       	ldi	r18, 0x01	; 1
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	8d e1       	ldi	r24, 0x1D	; 29
    1238:	92 e0       	ldi	r25, 0x02	; 2
    123a:	81 df       	rcall	.-254    	; 0x113e <MENU_addMenuItem>
    123c:	60 91 35 03 	lds	r22, 0x0335
    1240:	70 91 36 03 	lds	r23, 0x0336
	mainMenu->children[1] = currItem;
    1244:	80 91 2f 03 	lds	r24, 0x032F
    1248:	90 91 30 03 	lds	r25, 0x0330
    124c:	fb 01       	movw	r30, r22
    124e:	97 83       	std	Z+7, r25	; 0x07
    1250:	86 83       	std	Z+6, r24	; 0x06
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e0       	ldi	r20, 0x00	; 0
    1258:	50 e0       	ldi	r21, 0x00	; 0
	
	//MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
	//mainMenu->children[2] = currItem;
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
    125a:	82 e2       	ldi	r24, 0x22	; 34
    125c:	92 e0       	ldi	r25, 0x02	; 2
    125e:	6f df       	rcall	.-290    	; 0x113e <MENU_addMenuItem>
    1260:	60 91 35 03 	lds	r22, 0x0335
    1264:	70 91 36 03 	lds	r23, 0x0336
    1268:	e0 91 2f 03 	lds	r30, 0x032F
	mainMenu->children[2] = currItem;
    126c:	f0 91 30 03 	lds	r31, 0x0330
    1270:	db 01       	movw	r26, r22
    1272:	19 96       	adiw	r26, 0x09	; 9
    1274:	fc 93       	st	X, r31
    1276:	ee 93       	st	-X, r30
    1278:	18 97       	sbiw	r26, 0x08	; 8
    127a:	8b e5       	ldi	r24, 0x5B	; 91
    127c:	96 e0       	ldi	r25, 0x06	; 6
    127e:	93 87       	std	Z+11, r25	; 0x0b
    1280:	82 87       	std	Z+10, r24	; 0x0a
    1282:	20 e0       	ldi	r18, 0x00	; 0
	mainMenu->children[2]->functionPtr = &JOY_calibrate; //assign function to this item
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	40 e0       	ldi	r20, 0x00	; 0
    1288:	50 e0       	ldi	r21, 0x00	; 0
    128a:	8c e2       	ldi	r24, 0x2C	; 44
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
    128c:	92 e0       	ldi	r25, 0x02	; 2
    128e:	57 df       	rcall	.-338    	; 0x113e <MENU_addMenuItem>
    1290:	e0 91 2f 03 	lds	r30, 0x032F
    1294:	f0 91 30 03 	lds	r31, 0x0330
    1298:	a0 91 35 03 	lds	r26, 0x0335
	mainMenu->children[3] = currItem;
    129c:	b0 91 36 03 	lds	r27, 0x0336
    12a0:	1b 96       	adiw	r26, 0x0b	; 11
    12a2:	fc 93       	st	X, r31
    12a4:	ee 93       	st	-X, r30
    12a6:	1a 97       	sbiw	r26, 0x0a	; 10
    12a8:	8f ea       	ldi	r24, 0xAF	; 175
    12aa:	9a e0       	ldi	r25, 0x0A	; 10
    12ac:	93 87       	std	Z+11, r25	; 0x0b
    12ae:	82 87       	std	Z+10, r24	; 0x0a
    12b0:	10 92 30 03 	sts	0x0330, r1
	mainMenu->children[3]->functionPtr = &MENU_printInfo;
    12b4:	10 92 2f 03 	sts	0x032F, r1
    12b8:	60 91 33 03 	lds	r22, 0x0333
	
	currItem = NULL;
    12bc:	70 91 34 03 	lds	r23, 0x0334
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
	
	MENU_addMenuItem("Slider", modeMenu, NULL, 0);
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	81 e3       	ldi	r24, 0x31	; 49
    12ca:	92 e0       	ldi	r25, 0x02	; 2
    12cc:	38 df       	rcall	.-400    	; 0x113e <MENU_addMenuItem>
    12ce:	60 91 33 03 	lds	r22, 0x0333
    12d2:	70 91 34 03 	lds	r23, 0x0334
    12d6:	80 91 2f 03 	lds	r24, 0x032F
    12da:	90 91 30 03 	lds	r25, 0x0330
	modeMenu->children[0] = currItem;
    12de:	fb 01       	movw	r30, r22
    12e0:	95 83       	std	Z+5, r25	; 0x05
    12e2:	84 83       	std	Z+4, r24	; 0x04
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	40 e0       	ldi	r20, 0x00	; 0
    12ea:	50 e0       	ldi	r21, 0x00	; 0
    12ec:	88 e3       	ldi	r24, 0x38	; 56
    12ee:	92 e0       	ldi	r25, 0x02	; 2
    12f0:	26 df       	rcall	.-436    	; 0x113e <MENU_addMenuItem>
	
	MENU_addMenuItem("Joystick", modeMenu, NULL, 0);
    12f2:	60 91 33 03 	lds	r22, 0x0333
    12f6:	70 91 34 03 	lds	r23, 0x0334
    12fa:	80 91 2f 03 	lds	r24, 0x032F
    12fe:	90 91 30 03 	lds	r25, 0x0330
	modeMenu->children[1] = currItem;
    1302:	db 01       	movw	r26, r22
    1304:	17 96       	adiw	r26, 0x07	; 7
    1306:	9c 93       	st	X, r25
    1308:	8e 93       	st	-X, r24
    130a:	16 97       	sbiw	r26, 0x06	; 6
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	40 e0       	ldi	r20, 0x00	; 0
    1312:	50 e0       	ldi	r21, 0x00	; 0
    1314:	81 e4       	ldi	r24, 0x41	; 65
    1316:	92 e0       	ldi	r25, 0x02	; 2
    1318:	12 df       	rcall	.-476    	; 0x113e <MENU_addMenuItem>
    131a:	e0 91 33 03 	lds	r30, 0x0333
	
	MENU_addMenuItem("PC", modeMenu, NULL, 0);
    131e:	f0 91 34 03 	lds	r31, 0x0334
    1322:	80 91 2f 03 	lds	r24, 0x032F
    1326:	90 91 30 03 	lds	r25, 0x0330
    132a:	91 87       	std	Z+9, r25	; 0x09
	modeMenu->children[2] = currItem;
    132c:	80 87       	std	Z+8, r24	; 0x08
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	08 95       	ret

00001334 <MENU_printMenuItem>:
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
    1338:	ec 01       	movw	r28, r24
    133a:	cb 01       	movw	r24, r22
    133c:	20 97       	sbiw	r28, 0x00	; 0
    133e:	39 f0       	breq	.+14     	; 0x134e <MENU_printMenuItem+0x1a>
}
    1340:	6a e0       	ldi	r22, 0x0A	; 10
    1342:	70 e0       	ldi	r23, 0x00	; 0
    1344:	38 d1       	rcall	.+624    	; 0x15b6 <OLED_goto>

void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
    1346:	88 81       	ld	r24, Y
		OLED_printString(item->name);
    1348:	99 81       	ldd	r25, Y+1	; 0x01
    134a:	8b d1       	rcall	.+790    	; 0x1662 <OLED_printString>
    134c:	07 c0       	rjmp	.+14     	; 0x135c <MENU_printMenuItem+0x28>
    134e:	84 e4       	ldi	r24, 0x44	; 68
    1350:	92 e0       	ldi	r25, 0x02	; 2
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
    1352:	9f 93       	push	r25
    1354:	8f 93       	push	r24
    1356:	43 d5       	rcall	.+2694   	; 0x1dde <printf>
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	08 95       	ret

00001362 <MENU_printMenu>:
	}
}
    1362:	cf 92       	push	r12
    1364:	df 92       	push	r13
    1366:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
    1368:	ff 92       	push	r15
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	6c 01       	movw	r12, r24
    1374:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
    1376:	3c d1       	rcall	.+632    	; 0x15f0 <OLED_clear>
    1378:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	c9 d1       	rcall	.+914    	; 0x1710 <OLED_moveArrow>
    137e:	1e 14       	cp	r1, r14
    1380:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
    1382:	7c f4       	brge	.+30     	; 0x13a2 <MENU_printMenu+0x40>
    1384:	86 01       	movw	r16, r12
    1386:	0c 5f       	subi	r16, 0xFC	; 252
    1388:	1f 4f       	sbci	r17, 0xFF	; 255
    138a:	c0 e0       	ldi	r28, 0x00	; 0
    138c:	d0 e0       	ldi	r29, 0x00	; 0
    138e:	be 01       	movw	r22, r28
    1390:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
    1392:	81 91       	ld	r24, Z+
    1394:	91 91       	ld	r25, Z+
    1396:	8f 01       	movw	r16, r30
    1398:	cd df       	rcall	.-102    	; 0x1334 <MENU_printMenuItem>
    139a:	21 96       	adiw	r28, 0x01	; 1
    139c:	ce 15       	cp	r28, r14
    139e:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
    13a0:	b1 f7       	brne	.-20     	; 0x138e <MENU_printMenu+0x2c>
    13a2:	d0 92 32 03 	sts	0x0332, r13
    13a6:	c0 92 31 03 	sts	0x0331, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
    13aa:	10 92 2d 03 	sts	0x032D, r1
    13ae:	10 92 2c 03 	sts	0x032C, r1
	
	currentPosition = 0;
    13b2:	f6 01       	movw	r30, r12
    13b4:	84 81       	ldd	r24, Z+4	; 0x04
    13b6:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
    13b8:	90 93 30 03 	sts	0x0330, r25
    13bc:	80 93 2f 03 	sts	0x032F, r24
    13c0:	df 91       	pop	r29
    13c2:	cf 91       	pop	r28
    13c4:	1f 91       	pop	r17
}
    13c6:	0f 91       	pop	r16
    13c8:	ff 90       	pop	r15
    13ca:	ef 90       	pop	r14
    13cc:	df 90       	pop	r13
    13ce:	cf 90       	pop	r12
    13d0:	08 95       	ret

000013d2 <MENU_moveUp>:
    13d2:	20 91 2c 03 	lds	r18, 0x032C
    13d6:	30 91 2d 03 	lds	r19, 0x032D
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
    13da:	12 16       	cp	r1, r18
    13dc:	13 06       	cpc	r1, r19
    13de:	bc f4       	brge	.+46     	; 0x140e <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
    13e0:	c9 01       	movw	r24, r18
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	90 93 2d 03 	sts	0x032D, r25
    13e8:	80 93 2c 03 	sts	0x032C, r24
		currItem = currentMenu->children[currentPosition];
    13ec:	e0 91 31 03 	lds	r30, 0x0331
    13f0:	f0 91 32 03 	lds	r31, 0x0332
    13f4:	2f 5f       	subi	r18, 0xFF	; 255
    13f6:	3f 4f       	sbci	r19, 0xFF	; 255
    13f8:	22 0f       	add	r18, r18
    13fa:	33 1f       	adc	r19, r19
    13fc:	e2 0f       	add	r30, r18
    13fe:	f3 1f       	adc	r31, r19
    1400:	20 81       	ld	r18, Z
    1402:	31 81       	ldd	r19, Z+1	; 0x01
    1404:	30 93 30 03 	sts	0x0330, r19
    1408:	20 93 2f 03 	sts	0x032F, r18
		OLED_moveArrow(currentPosition);
    140c:	81 c1       	rjmp	.+770    	; 0x1710 <OLED_moveArrow>
    140e:	08 95       	ret

00001410 <MENU_moveDown>:
    1410:	e0 91 31 03 	lds	r30, 0x0331
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
    1414:	f0 91 32 03 	lds	r31, 0x0332
    1418:	20 91 2c 03 	lds	r18, 0x032C
    141c:	30 91 2d 03 	lds	r19, 0x032D
    1420:	82 81       	ldd	r24, Z+2	; 0x02
    1422:	93 81       	ldd	r25, Z+3	; 0x03
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	28 17       	cp	r18, r24
    1428:	39 07       	cpc	r19, r25
    142a:	a4 f4       	brge	.+40     	; 0x1454 <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
    142c:	c9 01       	movw	r24, r18
    142e:	01 96       	adiw	r24, 0x01	; 1
    1430:	90 93 2d 03 	sts	0x032D, r25
    1434:	80 93 2c 03 	sts	0x032C, r24
		currItem = currentMenu->children[currentPosition];
    1438:	2d 5f       	subi	r18, 0xFD	; 253
    143a:	3f 4f       	sbci	r19, 0xFF	; 255
    143c:	22 0f       	add	r18, r18
    143e:	33 1f       	adc	r19, r19
    1440:	e2 0f       	add	r30, r18
    1442:	f3 1f       	adc	r31, r19
    1444:	20 81       	ld	r18, Z
    1446:	31 81       	ldd	r19, Z+1	; 0x01
    1448:	30 93 30 03 	sts	0x0330, r19
    144c:	20 93 2f 03 	sts	0x032F, r18
		OLED_moveArrow(currentPosition);
    1450:	5f c1       	rjmp	.+702    	; 0x1710 <OLED_moveArrow>
    1452:	08 95       	ret
    1454:	10 92 2d 03 	sts	0x032D, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
    1458:	10 92 2c 03 	sts	0x032C, r1
    145c:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
    145e:	95 81       	ldd	r25, Z+5	; 0x05
    1460:	90 93 30 03 	sts	0x0330, r25
    1464:	80 93 2f 03 	sts	0x032F, r24
    1468:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	51 c1       	rjmp	.+674    	; 0x1710 <OLED_moveArrow>
    146e:	08 95       	ret

00001470 <MENU_moveLeft>:
    1470:	e0 91 31 03 	lds	r30, 0x0331
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
    1474:	f0 91 32 03 	lds	r31, 0x0332
    1478:	84 89       	ldd	r24, Z+20	; 0x14
    147a:	95 89       	ldd	r25, Z+21	; 0x15
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	21 f0       	breq	.+8      	; 0x1488 <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
    1480:	fc 01       	movw	r30, r24
    1482:	62 81       	ldd	r22, Z+2	; 0x02
    1484:	73 81       	ldd	r23, Z+3	; 0x03
    1486:	6d cf       	rjmp	.-294    	; 0x1362 <MENU_printMenu>
    1488:	08 95       	ret

0000148a <MENU_reactivate>:
    148a:	80 91 31 03 	lds	r24, 0x0331
	//MENU_clearMemory();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
    148e:	90 91 32 03 	lds	r25, 0x0332
    1492:	fc 01       	movw	r30, r24
    1494:	62 81       	ldd	r22, Z+2	; 0x02
    1496:	73 81       	ldd	r23, Z+3	; 0x03
    1498:	64 df       	rcall	.-312    	; 0x1362 <MENU_printMenu>
    149a:	18 c0       	rjmp	.+48     	; 0x14cc <MENU_waitForInput>
	MENU_waitForInput();
    149c:	08 95       	ret

0000149e <MENU_moveRight>:
    149e:	e0 91 2f 03 	lds	r30, 0x032F
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
    14a2:	f0 91 30 03 	lds	r31, 0x0330
    14a6:	86 81       	ldd	r24, Z+6	; 0x06
    14a8:	97 81       	ldd	r25, Z+7	; 0x07
    14aa:	89 2b       	or	r24, r25
    14ac:	39 f0       	breq	.+14     	; 0x14bc <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
    14ae:	84 81       	ldd	r24, Z+4	; 0x04
    14b0:	95 81       	ldd	r25, Z+5	; 0x05
    14b2:	fc 01       	movw	r30, r24
    14b4:	62 81       	ldd	r22, Z+2	; 0x02
    14b6:	73 81       	ldd	r23, Z+3	; 0x03
    14b8:	54 cf       	rjmp	.-344    	; 0x1362 <MENU_printMenu>
    14ba:	08 95       	ret
    14bc:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
    14be:	f3 85       	ldd	r31, Z+11	; 0x0b
    14c0:	e0 2d       	mov	r30, r0
    14c2:	30 97       	sbiw	r30, 0x00	; 0
    14c4:	11 f0       	breq	.+4      	; 0x14ca <MENU_moveRight+0x2c>
    14c6:	09 95       	icall
	{
		currItem->functionPtr();
    14c8:	e0 cf       	rjmp	.-64     	; 0x148a <MENU_reactivate>
		MENU_reactivate();
    14ca:	08 95       	ret

000014cc <MENU_waitForInput>:
    14cc:	80 91 2c 03 	lds	r24, 0x032C
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
    14d0:	90 91 2d 03 	lds	r25, 0x032D
    14d4:	1d d1       	rcall	.+570    	; 0x1710 <OLED_moveArrow>
    14d6:	80 91 2e 03 	lds	r24, 0x032E
	JOY_direction_t currDir;
	
	while(menuActiveFlag && *actualState == MENU)
    14da:	88 23       	and	r24, r24
    14dc:	69 f1       	breq	.+90     	; 0x1538 <MENU_waitForInput+0x6c>
    14de:	e0 91 2a 03 	lds	r30, 0x032A
    14e2:	f0 91 2b 03 	lds	r31, 0x032B
    14e6:	80 81       	ld	r24, Z
    14e8:	81 30       	cpi	r24, 0x01	; 1
    14ea:	31 f5       	brne	.+76     	; 0x1538 <MENU_waitForInput+0x6c>
    14ec:	88 dd       	rcall	.-1264   	; 0xffe <JOY_getDirection>
	{
		currDir = JOY_getDirection();
    14ee:	82 30       	cpi	r24, 0x02	; 2
    14f0:	71 f0       	breq	.+28     	; 0x150e <MENU_waitForInput+0x42>
		switch(currDir){
    14f2:	18 f4       	brcc	.+6      	; 0x14fa <MENU_waitForInput+0x2e>
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	49 f0       	breq	.+18     	; 0x150a <MENU_waitForInput+0x3e>
    14f8:	0b c0       	rjmp	.+22     	; 0x1510 <MENU_waitForInput+0x44>
    14fa:	83 30       	cpi	r24, 0x03	; 3
    14fc:	21 f0       	breq	.+8      	; 0x1506 <MENU_waitForInput+0x3a>
    14fe:	84 30       	cpi	r24, 0x04	; 4
    1500:	39 f4       	brne	.+14     	; 0x1510 <MENU_waitForInput+0x44>
    1502:	b6 df       	rcall	.-148    	; 0x1470 <MENU_moveLeft>
    1504:	05 c0       	rjmp	.+10     	; 0x1510 <MENU_waitForInput+0x44>
			case LEFT:
			MENU_moveLeft();
    1506:	cb df       	rcall	.-106    	; 0x149e <MENU_moveRight>
    1508:	03 c0       	rjmp	.+6      	; 0x1510 <MENU_waitForInput+0x44>
			break;
    150a:	63 df       	rcall	.-314    	; 0x13d2 <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
    150c:	01 c0       	rjmp	.+2      	; 0x1510 <MENU_waitForInput+0x44>
    150e:	80 df       	rcall	.-256    	; 0x1410 <MENU_moveDown>
			break;
    1510:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
    1512:	8f e7       	ldi	r24, 0x7F	; 127
    1514:	94 e0       	ldi	r25, 0x04	; 4
			break;
    1516:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
    1518:	80 40       	sbci	r24, 0x00	; 0
    151a:	90 40       	sbci	r25, 0x00	; 0
    151c:	e1 f7       	brne	.-8      	; 0x1516 <MENU_waitForInput+0x4a>
    151e:	00 c0       	rjmp	.+0      	; 0x1520 <MENU_waitForInput+0x54>
    1520:	00 00       	nop
    1522:	80 91 2e 03 	lds	r24, 0x032E
    1526:	88 23       	and	r24, r24
    1528:	39 f0       	breq	.+14     	; 0x1538 <MENU_waitForInput+0x6c>
    152a:	e0 91 2a 03 	lds	r30, 0x032A
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag && *actualState == MENU)
    152e:	f0 91 2b 03 	lds	r31, 0x032B
    1532:	80 81       	ld	r24, Z
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	d1 f2       	breq	.-76     	; 0x14ec <MENU_waitForInput+0x20>
    1538:	08 95       	ret

0000153a <MENU_activate>:
    153a:	90 93 2b 03 	sts	0x032B, r25
    153e:	80 93 2a 03 	sts	0x032A, r24
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	80 93 2e 03 	sts	0x032E, r24
void MENU_activate(OP_STATE* state)
{
	actualState = state;
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
    1548:	31 de       	rcall	.-926    	; 0x11ac <MENU_buildMenus>
    154a:	80 91 35 03 	lds	r24, 0x0335
	MENU_printMenu(mainMenu, mainMenu->noChilds);
    154e:	90 91 36 03 	lds	r25, 0x0336
    1552:	fc 01       	movw	r30, r24
    1554:	62 81       	ldd	r22, Z+2	; 0x02
    1556:	73 81       	ldd	r23, Z+3	; 0x03
    1558:	04 df       	rcall	.-504    	; 0x1362 <MENU_printMenu>
    155a:	b8 cf       	rjmp	.-144    	; 0x14cc <MENU_waitForInput>
    155c:	08 95       	ret

0000155e <MENU_printInfo>:
	MENU_waitForInput();
    155e:	48 d0       	rcall	.+144    	; 0x15f0 <OLED_clear>
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	70 e0       	ldi	r23, 0x00	; 0
}

void MENU_printInfo()
{
	OLED_clear();
	OLED_goto(0,0);
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	26 d0       	rcall	.+76     	; 0x15b6 <OLED_goto>
    156a:	84 e5       	ldi	r24, 0x54	; 84
    156c:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("GROUP 46");
    156e:	79 d0       	rcall	.+242    	; 0x1662 <OLED_printString>
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
	OLED_goto(1,0);
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	1e d0       	rcall	.+60     	; 0x15b6 <OLED_goto>
    157a:	8d e5       	ldi	r24, 0x5D	; 93
    157c:	92 e0       	ldi	r25, 0x02	; 2
    157e:	71 d0       	rcall	.+226    	; 0x1662 <OLED_printString>
    1580:	60 e0       	ldi	r22, 0x00	; 0
	OLED_printString("O.Kasperek");
    1582:	70 e0       	ldi	r23, 0x00	; 0
    1584:	82 e0       	ldi	r24, 0x02	; 2
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	16 d0       	rcall	.+44     	; 0x15b6 <OLED_goto>
	OLED_goto(2,0);
    158a:	88 e6       	ldi	r24, 0x68	; 104
    158c:	92 e0       	ldi	r25, 0x02	; 2
    158e:	69 d0       	rcall	.+210    	; 0x1662 <OLED_printString>
    1590:	60 e0       	ldi	r22, 0x00	; 0
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	83 e0       	ldi	r24, 0x03	; 3
	OLED_printString("L.Hagele");
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e d0       	rcall	.+28     	; 0x15b6 <OLED_goto>
    159a:	81 e7       	ldi	r24, 0x71	; 113
    159c:	92 e0       	ldi	r25, 0x02	; 2
	OLED_goto(3,0);
    159e:	61 d0       	rcall	.+194    	; 0x1662 <OLED_printString>
    15a0:	2f ef       	ldi	r18, 0xFF	; 255
    15a2:	8f ef       	ldi	r24, 0xFF	; 255
    15a4:	9c e2       	ldi	r25, 0x2C	; 44
    15a6:	21 50       	subi	r18, 0x01	; 1
    15a8:	80 40       	sbci	r24, 0x00	; 0
	OLED_printString("J.Haberny");
    15aa:	90 40       	sbci	r25, 0x00	; 0
    15ac:	e1 f7       	brne	.-8      	; 0x15a6 <MENU_printInfo+0x48>
    15ae:	00 c0       	rjmp	.+0      	; 0x15b0 <MENU_printInfo+0x52>
    15b0:	00 c0       	rjmp	.+0      	; 0x15b2 <MENU_printInfo+0x54>
    15b2:	6b cf       	rjmp	.-298    	; 0x148a <MENU_reactivate>
    15b4:	08 95       	ret

000015b6 <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
    15b6:	26 2f       	mov	r18, r22
    15b8:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
    15ba:	75 95       	asr	r23
    15bc:	67 95       	ror	r22
    15be:	75 95       	asr	r23
    15c0:	67 95       	ror	r22
    15c2:	75 95       	asr	r23
    15c4:	67 95       	ror	r22
    15c6:	75 95       	asr	r23
    15c8:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
    15ca:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
    15cc:	80 55       	subi	r24, 0x50	; 80
    15ce:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
    15d0:	e0 91 11 01 	lds	r30, 0x0111
    15d4:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15d8:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
    15da:	e0 91 11 01 	lds	r30, 0x0111
    15de:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15e2:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
    15e4:	e0 91 11 01 	lds	r30, 0x0111
    15e8:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15ec:	60 83       	st	Z, r22
    15ee:	08 95       	ret

000015f0 <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
    15f0:	1f 93       	push	r17
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
    15f6:	c1 e0       	ldi	r28, 0x01	; 1
    15f8:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    15fe:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	70 e0       	ldi	r23, 0x00	; 0
    1604:	d8 df       	rcall	.-80     	; 0x15b6 <OLED_goto>
    1606:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1608:	e0 91 0f 01 	lds	r30, 0x010F
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    160c:	f0 91 10 01 	lds	r31, 0x0110
    1610:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1612:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1614:	80 38       	cpi	r24, 0x80	; 128
    1616:	c1 f7       	brne	.-16     	; 0x1608 <OLED_clear+0x18>
    1618:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
    161a:	9d 2f       	mov	r25, r29
    161c:	21 96       	adiw	r28, 0x01	; 1
    161e:	c9 30       	cpi	r28, 0x09	; 9
    1620:	d1 05       	cpc	r29, r1
    1622:	71 f7       	brne	.-36     	; 0x1600 <OLED_clear+0x10>
    1624:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    1626:	cf 91       	pop	r28
    1628:	1f 91       	pop	r17
    162a:	08 95       	ret

0000162c <OLED_printCharacter>:
    162c:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	22 0f       	add	r18, r18
    1634:	33 1f       	adc	r19, r19
    1636:	22 0f       	add	r18, r18
    1638:	33 1f       	adc	r19, r19
    163a:	22 0f       	add	r18, r18
    163c:	33 1f       	adc	r19, r19
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	20 59       	subi	r18, 0x90	; 144
    1644:	3f 4f       	sbci	r19, 0xFF	; 255
    1646:	f9 01       	movw	r30, r18
    1648:	e8 0f       	add	r30, r24
    164a:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
    164c:	e4 91       	lpm	r30, Z
    164e:	a0 91 0f 01 	lds	r26, 0x010F
    1652:	b0 91 10 01 	lds	r27, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1656:	ec 93       	st	X, r30
    1658:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
    165a:	88 30       	cpi	r24, 0x08	; 8
    165c:	91 05       	cpc	r25, r1
    165e:	99 f7       	brne	.-26     	; 0x1646 <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
    1660:	08 95       	ret

00001662 <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
    166a:	10 e0       	ldi	r17, 0x00	; 0
    166c:	06 c0       	rjmp	.+12     	; 0x167a <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
    166e:	fe 01       	movw	r30, r28
    1670:	e8 0f       	add	r30, r24
    1672:	f9 1f       	adc	r31, r25
    1674:	80 81       	ld	r24, Z
    1676:	da df       	rcall	.-76     	; 0x162c <OLED_printCharacter>
    1678:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
    167a:	81 2f       	mov	r24, r17
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	fe 01       	movw	r30, r28
    1680:	01 90       	ld	r0, Z+
    1682:	00 20       	and	r0, r0
    1684:	e9 f7       	brne	.-6      	; 0x1680 <OLED_printString+0x1e>
    1686:	31 97       	sbiw	r30, 0x01	; 1
    1688:	ec 1b       	sub	r30, r28
    168a:	fd 0b       	sbc	r31, r29
    168c:	8e 17       	cp	r24, r30
    168e:	9f 07       	cpc	r25, r31
    1690:	70 f3       	brcs	.-36     	; 0x166e <OLED_printString+0xc>
    1692:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
    1694:	cf 91       	pop	r28
    1696:	1f 91       	pop	r17
    1698:	08 95       	ret

0000169a <OLED_printArrow>:
    169a:	e0 91 0f 01 	lds	r30, 0x010F
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
    169e:	f0 91 10 01 	lds	r31, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16a2:	88 e1       	ldi	r24, 0x18	; 24
    16a4:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    16a6:	e0 91 0f 01 	lds	r30, 0x010F
    16aa:	f0 91 10 01 	lds	r31, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16ae:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
    16b0:	e0 91 0f 01 	lds	r30, 0x010F
    16b4:	f0 91 10 01 	lds	r31, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16b8:	9e e7       	ldi	r25, 0x7E	; 126
    16ba:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
    16bc:	e0 91 0f 01 	lds	r30, 0x010F
    16c0:	f0 91 10 01 	lds	r31, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16c4:	9c e3       	ldi	r25, 0x3C	; 60
    16c6:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    16c8:	e0 91 0f 01 	lds	r30, 0x010F
    16cc:	f0 91 10 01 	lds	r31, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16d0:	80 83       	st	Z, r24
    16d2:	08 95       	ret

000016d4 <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    16d4:	1f 93       	push	r17
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	c1 e0       	ldi	r28, 0x01	; 1
    16dc:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    16e2:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	70 e0       	ldi	r23, 0x00	; 0
    16e8:	66 df       	rcall	.-308    	; 0x15b6 <OLED_goto>
    16ea:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    16ec:	e0 91 0f 01 	lds	r30, 0x010F
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    16f0:	f0 91 10 01 	lds	r31, 0x0110
    16f4:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16f6:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    16f8:	85 30       	cpi	r24, 0x05	; 5
    16fa:	c1 f7       	brne	.-16     	; 0x16ec <OLED_clearArrow+0x18>
    16fc:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    16fe:	9d 2f       	mov	r25, r29
    1700:	21 96       	adiw	r28, 0x01	; 1
    1702:	c9 30       	cpi	r28, 0x09	; 9
    1704:	d1 05       	cpc	r29, r1
    1706:	71 f7       	brne	.-36     	; 0x16e4 <OLED_clearArrow+0x10>
    1708:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    170a:	cf 91       	pop	r28
    170c:	1f 91       	pop	r17
    170e:	08 95       	ret

00001710 <OLED_moveArrow>:
    1710:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    1712:	df 93       	push	r29
    1714:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
    1716:	de df       	rcall	.-68     	; 0x16d4 <OLED_clearArrow>
    1718:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	ce 01       	movw	r24, r28
    171e:	4b df       	rcall	.-362    	; 0x15b6 <OLED_goto>
    1720:	bc df       	rcall	.-136    	; 0x169a <OLED_printArrow>
    1722:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret

00001728 <OLED_setContrast>:
}
    1728:	e0 91 11 01 	lds	r30, 0x0111
    172c:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1730:	91 e8       	ldi	r25, 0x81	; 129
    1732:	90 83       	st	Z, r25
void OLED_setContrast(uint8_t contrast)
{
	// activate contrast contol
	OLED_writeByteToOLED(oled_cmd, 0x81);
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
    1734:	e0 91 11 01 	lds	r30, 0x0111
    1738:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    173c:	80 83       	st	Z, r24
    173e:	08 95       	ret

00001740 <OLED_fadeIn>:
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
}

void OLED_fadeIn(void)
{
    1740:	cf 93       	push	r28
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    1742:	c0 e0       	ldi	r28, 0x00	; 0
	{
		OLED_setContrast(i);
    1744:	8c 2f       	mov	r24, r28
    1746:	f0 df       	rcall	.-32     	; 0x1728 <OLED_setContrast>
    1748:	83 e3       	ldi	r24, 0x33	; 51
    174a:	93 e1       	ldi	r25, 0x13	; 19
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <OLED_fadeIn+0xc>
    1750:	cf 5f       	subi	r28, 0xFF	; 255
}

void OLED_fadeIn(void)
{
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    1752:	cf 3f       	cpi	r28, 0xFF	; 255
    1754:	b9 f7       	brne	.-18     	; 0x1744 <OLED_fadeIn+0x4>
    1756:	cf 91       	pop	r28
	{
		OLED_setContrast(i);
		_delay_ms(4);
	}
}
    1758:	08 95       	ret

0000175a <OLED_splashScreen>:
    175a:	8b e7       	ldi	r24, 0x7B	; 123
	}
}

void OLED_splashScreen(void)
{
	printf("run splash screen...\n");
    175c:	92 e0       	ldi	r25, 0x02	; 2
    175e:	55 d3       	rcall	.+1706   	; 0x1e0a <puts>
    1760:	80 e0       	ldi	r24, 0x00	; 0
	
	OLED_setContrast(0);
    1762:	e2 df       	rcall	.-60     	; 0x1728 <OLED_setContrast>
    1764:	2f ef       	ldi	r18, 0xFF	; 255
    1766:	8f e7       	ldi	r24, 0x7F	; 127
    1768:	97 e0       	ldi	r25, 0x07	; 7
    176a:	21 50       	subi	r18, 0x01	; 1
    176c:	80 40       	sbci	r24, 0x00	; 0
    176e:	90 40       	sbci	r25, 0x00	; 0
    1770:	e1 f7       	brne	.-8      	; 0x176a <OLED_splashScreen+0x10>
    1772:	00 c0       	rjmp	.+0      	; 0x1774 <OLED_splashScreen+0x1a>
    1774:	00 00       	nop
    1776:	64 e0       	ldi	r22, 0x04	; 4
    1778:	70 e0       	ldi	r23, 0x00	; 0
	
	_delay_ms(500);
	OLED_goto(2,4);
    177a:	82 e0       	ldi	r24, 0x02	; 2
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	1b df       	rcall	.-458    	; 0x15b6 <OLED_goto>
    1780:	80 e9       	ldi	r24, 0x90	; 144
    1782:	92 e0       	ldi	r25, 0x02	; 2
    1784:	6e df       	rcall	.-292    	; 0x1662 <OLED_printString>
	OLED_printString("Group 46 Soft");
    1786:	dc df       	rcall	.-72     	; 0x1740 <OLED_fadeIn>
    1788:	2f ef       	ldi	r18, 0xFF	; 255
    178a:	8f e7       	ldi	r24, 0x7F	; 127
    178c:	97 e0       	ldi	r25, 0x07	; 7
	OLED_fadeIn();
    178e:	21 50       	subi	r18, 0x01	; 1
    1790:	80 40       	sbci	r24, 0x00	; 0
    1792:	90 40       	sbci	r25, 0x00	; 0
    1794:	e1 f7       	brne	.-8      	; 0x178e <OLED_splashScreen+0x34>
    1796:	00 c0       	rjmp	.+0      	; 0x1798 <OLED_splashScreen+0x3e>
    1798:	00 00       	nop
    179a:	2a df       	rcall	.-428    	; 0x15f0 <OLED_clear>
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	c4 df       	rcall	.-120    	; 0x1728 <OLED_setContrast>
    17a0:	2f ef       	ldi	r18, 0xFF	; 255
    17a2:	8f ef       	ldi	r24, 0xFF	; 255
	_delay_ms(500);
	
 	OLED_clear();
    17a4:	92 e0       	ldi	r25, 0x02	; 2
    17a6:	21 50       	subi	r18, 0x01	; 1
 	OLED_setContrast(0);
    17a8:	80 40       	sbci	r24, 0x00	; 0
    17aa:	90 40       	sbci	r25, 0x00	; 0
    17ac:	e1 f7       	brne	.-8      	; 0x17a6 <OLED_splashScreen+0x4c>
    17ae:	00 c0       	rjmp	.+0      	; 0x17b0 <OLED_splashScreen+0x56>
    17b0:	00 c0       	rjmp	.+0      	; 0x17b2 <OLED_splashScreen+0x58>
    17b2:	6c e1       	ldi	r22, 0x1C	; 28
    17b4:	70 e0       	ldi	r23, 0x00	; 0
    17b6:	83 e0       	ldi	r24, 0x03	; 3
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	fd de       	rcall	.-518    	; 0x15b6 <OLED_goto>
    17bc:	8e e9       	ldi	r24, 0x9E	; 158
    17be:	92 e0       	ldi	r25, 0x02	; 2
 	
 	_delay_ms(200);
 	OLED_goto(3,28);
    17c0:	50 df       	rcall	.-352    	; 0x1662 <OLED_printString>
    17c2:	68 e1       	ldi	r22, 0x18	; 24
    17c4:	70 e0       	ldi	r23, 0x00	; 0
    17c6:	84 e0       	ldi	r24, 0x04	; 4
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	f5 de       	rcall	.-534    	; 0x15b6 <OLED_goto>
 	OLED_printString("proudly");
    17cc:	86 ea       	ldi	r24, 0xA6	; 166
    17ce:	92 e0       	ldi	r25, 0x02	; 2
    17d0:	48 df       	rcall	.-368    	; 0x1662 <OLED_printString>
    17d2:	b6 df       	rcall	.-148    	; 0x1740 <OLED_fadeIn>
 	OLED_goto(4,24);	
    17d4:	2f ef       	ldi	r18, 0xFF	; 255
    17d6:	8f e7       	ldi	r24, 0x7F	; 127
    17d8:	97 e0       	ldi	r25, 0x07	; 7
    17da:	21 50       	subi	r18, 0x01	; 1
    17dc:	80 40       	sbci	r24, 0x00	; 0
    17de:	90 40       	sbci	r25, 0x00	; 0
 	OLED_printString("presents");
    17e0:	e1 f7       	brne	.-8      	; 0x17da <OLED_splashScreen+0x80>
    17e2:	00 c0       	rjmp	.+0      	; 0x17e4 <OLED_splashScreen+0x8a>
    17e4:	00 00       	nop
    17e6:	04 df       	rcall	.-504    	; 0x15f0 <OLED_clear>
 	OLED_fadeIn();
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	9e df       	rcall	.-196    	; 0x1728 <OLED_setContrast>
    17ec:	2f ef       	ldi	r18, 0xFF	; 255
    17ee:	8f ef       	ldi	r24, 0xFF	; 255
    17f0:	92 e0       	ldi	r25, 0x02	; 2
    17f2:	21 50       	subi	r18, 0x01	; 1
    17f4:	80 40       	sbci	r24, 0x00	; 0
    17f6:	90 40       	sbci	r25, 0x00	; 0
    17f8:	e1 f7       	brne	.-8      	; 0x17f2 <OLED_splashScreen+0x98>
    17fa:	00 c0       	rjmp	.+0      	; 0x17fc <OLED_splashScreen+0xa2>
    17fc:	00 c0       	rjmp	.+0      	; 0x17fe <OLED_splashScreen+0xa4>
 	_delay_ms(500);
 	
 	OLED_clear();
    17fe:	6c e1       	ldi	r22, 0x1C	; 28
    1800:	70 e0       	ldi	r23, 0x00	; 0
 	OLED_setContrast(0);
    1802:	83 e0       	ldi	r24, 0x03	; 3
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	d7 de       	rcall	.-594    	; 0x15b6 <OLED_goto>
    1808:	8f ea       	ldi	r24, 0xAF	; 175
    180a:	92 e0       	ldi	r25, 0x02	; 2
    180c:	2a df       	rcall	.-428    	; 0x1662 <OLED_printString>
    180e:	98 df       	rcall	.-208    	; 0x1740 <OLED_fadeIn>
    1810:	2f ef       	ldi	r18, 0xFF	; 255
    1812:	8f ef       	ldi	r24, 0xFF	; 255
    1814:	9e e0       	ldi	r25, 0x0E	; 14
    1816:	21 50       	subi	r18, 0x01	; 1
    1818:	80 40       	sbci	r24, 0x00	; 0
 	
 	_delay_ms(200);
 	OLED_goto(3, 28);
    181a:	90 40       	sbci	r25, 0x00	; 0
    181c:	e1 f7       	brne	.-8      	; 0x1816 <OLED_splashScreen+0xbc>
    181e:	00 c0       	rjmp	.+0      	; 0x1820 <OLED_splashScreen+0xc6>
    1820:	00 00       	nop
    1822:	e6 de       	rcall	.-564    	; 0x15f0 <OLED_clear>
    1824:	80 e5       	ldi	r24, 0x50	; 80
 	OLED_printString("FIFA 18");
    1826:	80 df       	rcall	.-256    	; 0x1728 <OLED_setContrast>
    1828:	87 eb       	ldi	r24, 0xB7	; 183
    182a:	92 e0       	ldi	r25, 0x02	; 2
    182c:	ee c2       	rjmp	.+1500   	; 0x1e0a <puts>
 	OLED_fadeIn();
    182e:	08 95       	ret

00001830 <OLED_init>:
    1830:	e0 91 11 01 	lds	r30, 0x0111
    1834:	f0 91 12 01 	lds	r31, 0x0112
    1838:	8e ea       	ldi	r24, 0xAE	; 174
    183a:	80 83       	st	Z, r24
    183c:	e0 91 11 01 	lds	r30, 0x0111
    1840:	f0 91 12 01 	lds	r31, 0x0112
 	_delay_ms(1000);
	
	// clean up
	OLED_clear();
    1844:	81 ea       	ldi	r24, 0xA1	; 161
    1846:	80 83       	st	Z, r24
	OLED_setContrast(0x50); // back to standard contrast
    1848:	e0 91 11 01 	lds	r30, 0x0111
    184c:	f0 91 12 01 	lds	r31, 0x0112
	
	printf("splash screen done...\n");
    1850:	8a ed       	ldi	r24, 0xDA	; 218
    1852:	80 83       	st	Z, r24
    1854:	e0 91 11 01 	lds	r30, 0x0111
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
    1858:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    185c:	82 e1       	ldi	r24, 0x12	; 18
    185e:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    1860:	e0 91 11 01 	lds	r30, 0x0111
    1864:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1868:	88 ec       	ldi	r24, 0xC8	; 200
    186a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    186c:	e0 91 11 01 	lds	r30, 0x0111
    1870:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1874:	88 ea       	ldi	r24, 0xA8	; 168
    1876:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    1878:	e0 91 11 01 	lds	r30, 0x0111
    187c:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1880:	8f e3       	ldi	r24, 0x3F	; 63
    1882:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    1884:	e0 91 11 01 	lds	r30, 0x0111
    1888:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    188c:	85 ed       	ldi	r24, 0xD5	; 213
    188e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
    1890:	e0 91 11 01 	lds	r30, 0x0111
    1894:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1898:	80 e8       	ldi	r24, 0x80	; 128
    189a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    189c:	e0 91 11 01 	lds	r30, 0x0111
    18a0:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18a4:	81 e8       	ldi	r24, 0x81	; 129
    18a6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    18a8:	e0 91 11 01 	lds	r30, 0x0111
    18ac:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18b0:	80 e5       	ldi	r24, 0x50	; 80
    18b2:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    18b4:	e0 91 11 01 	lds	r30, 0x0111
    18b8:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18bc:	89 ed       	ldi	r24, 0xD9	; 217
    18be:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
    18c0:	e0 91 11 01 	lds	r30, 0x0111
    18c4:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18c8:	81 e2       	ldi	r24, 0x21	; 33
    18ca:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    18cc:	e0 91 11 01 	lds	r30, 0x0111
    18d0:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18d4:	80 e2       	ldi	r24, 0x20	; 32
    18d6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    18d8:	e0 91 11 01 	lds	r30, 0x0111
    18dc:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18e0:	82 e0       	ldi	r24, 0x02	; 2
    18e2:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    18e4:	e0 91 11 01 	lds	r30, 0x0111
    18e8:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18ec:	8b ed       	ldi	r24, 0xDB	; 219
    18ee:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    18f0:	e0 91 11 01 	lds	r30, 0x0111
    18f4:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18f8:	80 e3       	ldi	r24, 0x30	; 48
    18fa:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    18fc:	e0 91 11 01 	lds	r30, 0x0111
    1900:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1904:	8d ea       	ldi	r24, 0xAD	; 173
    1906:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    1908:	e0 91 11 01 	lds	r30, 0x0111
    190c:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1910:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    1912:	e0 91 11 01 	lds	r30, 0x0111
    1916:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    191a:	84 ea       	ldi	r24, 0xA4	; 164
    191c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    191e:	e0 91 11 01 	lds	r30, 0x0111
    1922:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1926:	86 ea       	ldi	r24, 0xA6	; 166
    1928:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    192a:	e0 91 11 01 	lds	r30, 0x0111
    192e:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1932:	8f ea       	ldi	r24, 0xAF	; 175
    1934:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    1936:	5c de       	rcall	.-840    	; 0x15f0 <OLED_clear>
    1938:	10 cf       	rjmp	.-480    	; 0x175a <OLED_splashScreen>
	OLED_splashScreen();
    193a:	08 95       	ret

0000193c <SLI_init>:
uint8_t SLI_startup = 1; 

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    193c:	10 92 48 03 	sts	0x0348, r1
	currentSliPosition.L_abs = 0;
    1940:	10 92 49 03 	sts	0x0349, r1
	currentSliPosition.R_per = 0;
    1944:	10 92 4a 03 	sts	0x034A, r1
	currentSliPosition.L_per = 0;
    1948:	10 92 4b 03 	sts	0x034B, r1
    194c:	08 95       	ret

0000194e <SLI_requestCurrentPosition>:

//------------------------------------------------------------------------------
// This function requests an AD conversion for the specified slider.
void SLI_requestCurrentPosition(uint8_t side)
{
	if(side == 'l')
    194e:	8c 36       	cpi	r24, 0x6C	; 108
    1950:	39 f4       	brne	.+14     	; 0x1960 <SLI_requestCurrentPosition+0x12>
	{
		ADC_request(L_channel, adc_ext_ram);
    1952:	60 91 06 01 	lds	r22, 0x0106
    1956:	70 91 07 01 	lds	r23, 0x0107
    195a:	83 e0       	ldi	r24, 0x03	; 3
    195c:	7d c0       	rjmp	.+250    	; 0x1a58 <ADC_request>
    195e:	08 95       	ret
    1960:	82 37       	cpi	r24, 0x72	; 114
	}

	else if(side == 'r')
    1962:	31 f4       	brne	.+12     	; 0x1970 <SLI_requestCurrentPosition+0x22>
    1964:	60 91 06 01 	lds	r22, 0x0106
	{
		ADC_request(R_channel, adc_ext_ram);
    1968:	70 91 07 01 	lds	r23, 0x0107
    196c:	84 e0       	ldi	r24, 0x04	; 4
    196e:	74 c0       	rjmp	.+232    	; 0x1a58 <ADC_request>
    1970:	08 95       	ret

00001972 <SLI_updatePosition>:
    1972:	8c 36       	cpi	r24, 0x6C	; 108
    1974:	71 f4       	brne	.+28     	; 0x1992 <SLI_updatePosition+0x20>
// received.
void SLI_updatePosition(uint8_t side)
{
	if(side == 'l')
	{
		currentSliPosition.L_abs = ADC_read(adc_ext_ram);
    1976:	80 91 06 01 	lds	r24, 0x0106
    197a:	90 91 07 01 	lds	r25, 0x0107
    197e:	94 d0       	rcall	.+296    	; 0x1aa8 <ADC_read>
    1980:	80 93 49 03 	sts	0x0349, r24
    1984:	24 e6       	ldi	r18, 0x64	; 100
		currentSliPosition.L_per = currentSliPosition.L_abs * 100 / 256;
    1986:	82 9f       	mul	r24, r18
    1988:	c0 01       	movw	r24, r0
    198a:	11 24       	eor	r1, r1
    198c:	90 93 4b 03 	sts	0x034B, r25
    1990:	08 95       	ret
    1992:	82 37       	cpi	r24, 0x72	; 114
		//printf("CurrSliPos_L: %d, CurrSliPos_R: %d\n", currentSliPosition.L_per, currentSliPosition.R_per);
	}

	else if(side == 'r')
    1994:	69 f4       	brne	.+26     	; 0x19b0 <SLI_updatePosition+0x3e>
    1996:	80 91 06 01 	lds	r24, 0x0106
	{
		currentSliPosition.R_abs = ADC_read(adc_ext_ram);
    199a:	90 91 07 01 	lds	r25, 0x0107
    199e:	84 d0       	rcall	.+264    	; 0x1aa8 <ADC_read>
    19a0:	80 93 48 03 	sts	0x0348, r24
    19a4:	24 e6       	ldi	r18, 0x64	; 100
    19a6:	82 9f       	mul	r24, r18
		currentSliPosition.R_per = currentSliPosition.R_abs * 100 / 256;
    19a8:	c0 01       	movw	r24, r0
    19aa:	11 24       	eor	r1, r1
    19ac:	90 93 4a 03 	sts	0x034A, r25
    19b0:	08 95       	ret

000019b2 <SLI_getPosition>:
    19b2:	82 e7       	ldi	r24, 0x72	; 114
    19b4:	cc df       	rcall	.-104    	; 0x194e <SLI_requestCurrentPosition>
}

//
SLI_position_t SLI_getPosition()
{
	SLI_requestCurrentPosition('r');
    19b6:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    19b8:	8a 95       	dec	r24
    19ba:	f1 f7       	brne	.-4      	; 0x19b8 <SLI_getPosition+0x6>
    19bc:	00 00       	nop
    19be:	82 e7       	ldi	r24, 0x72	; 114
	_delay_us(60);
	SLI_updatePosition('r');
    19c0:	d8 df       	rcall	.-80     	; 0x1972 <SLI_updatePosition>
    19c2:	60 91 48 03 	lds	r22, 0x0348
	
	return currentSliPosition;
    19c6:	70 91 49 03 	lds	r23, 0x0349
    19ca:	80 91 4a 03 	lds	r24, 0x034A
    19ce:	90 91 4b 03 	lds	r25, 0x034B
    19d2:	08 95       	ret

000019d4 <SPI_init>:

void SPI_init()
{
	//init external interrupt INT2 on falling edge
	#if defined(__AVR_ATmega162__)
		set_bit(GICR, INT2);
    19d4:	8b b7       	in	r24, 0x3b	; 59
    19d6:	80 62       	ori	r24, 0x20	; 32
    19d8:	8b bf       	out	0x3b, r24	; 59
		clear_bit(EMCUCR, ISC2);
    19da:	86 b7       	in	r24, 0x36	; 54
    19dc:	8e 7f       	andi	r24, 0xFE	; 254
    19de:	86 bf       	out	0x36, r24	; 54
		
		// Set _SS, MOSI and SCK output, all others input
		DDR_SPI |= (1<<SS_CAN_CONTROLLER_PIN_MODE) | (1<<MOSI_PIN) | (1<<SCK_PIN);
    19e0:	87 b3       	in	r24, 0x17	; 23
    19e2:	80 6b       	ori	r24, 0xB0	; 176
    19e4:	87 bb       	out	0x17, r24	; 23
	#endif
	
	

	// Enable SPI, Master, set clock rate fck/4
	SPCR = (1<<SPE) | (1<<MSTR);
    19e6:	80 e5       	ldi	r24, 0x50	; 80
    19e8:	8d b9       	out	0x0d, r24	; 13
	
	// clock rate fck/2
	SPSR = (1<<SPI2X);
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	8e b9       	out	0x0e, r24	; 14

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORT_SPI, SS_CAN_CONTROLLER_PIN);
    19ee:	c4 9a       	sbi	0x18, 4	; 24
    19f0:	08 95       	ret

000019f2 <SPI_send>:
}

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    19f2:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    19f4:	77 9b       	sbis	0x0e, 7	; 14
    19f6:	fe cf       	rjmp	.-4      	; 0x19f4 <SPI_send+0x2>
}
    19f8:	08 95       	ret

000019fa <SPI_receive>:

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    19fa:	8f ef       	ldi	r24, 0xFF	; 255
    19fc:	fa df       	rcall	.-12     	; 0x19f2 <SPI_send>
    19fe:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    1a00:	fe cf       	rjmp	.-4      	; 0x19fe <SPI_receive+0x4>
    1a02:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    1a04:	08 95       	ret

00001a06 <SPI_activateSlave>:

	return data;
}
    1a06:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    1a08:	01 c0       	rjmp	.+2      	; 0x1a0c <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    1a0a:	c4 98       	cbi	0x18, 4	; 24
    1a0c:	08 95       	ret

00001a0e <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    1a0e:	81 11       	cpse	r24, r1
    1a10:	01 c0       	rjmp	.+2      	; 0x1a14 <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    1a12:	c4 9a       	sbi	0x18, 4	; 24
    1a14:	08 95       	ret

00001a16 <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1a16:	5d 9b       	sbis	0x0b, 5	; 11
    1a18:	fe cf       	rjmp	.-4      	; 0x1a16 <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    1a1a:	8c b9       	out	0x0c, r24	; 12
    1a1c:	08 95       	ret

00001a1e <uartReceive>:
//UART_Message_t uartReceive()
uint8_t uartReceive()
{

	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    1a1e:	5f 9b       	sbis	0x0b, 7	; 11
    1a20:	fe cf       	rjmp	.-4      	; 0x1a1e <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    1a22:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;

}
    1a24:	08 95       	ret

00001a26 <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    1a26:	ef 92       	push	r14
    1a28:	ff 92       	push	r15
    1a2a:	0f 93       	push	r16
    1a2c:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    1a2e:	bb 27       	eor	r27, r27
    1a30:	a1 2f       	mov	r26, r17
    1a32:	90 2f       	mov	r25, r16
    1a34:	8f 2d       	mov	r24, r15
    1a36:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    1a38:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1a3a:	88 e1       	ldi	r24, 0x18	; 24
    1a3c:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    1a3e:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	#if defined(__AVR_ATmega162__)
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    1a40:	8e e8       	ldi	r24, 0x8E	; 142
    1a42:	80 bd       	out	0x20, r24	; 32
	
	#if defined(__AVR_ATmega2560__)
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	#endif
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    1a44:	6f e0       	ldi	r22, 0x0F	; 15
    1a46:	7d e0       	ldi	r23, 0x0D	; 13
    1a48:	8b e0       	ldi	r24, 0x0B	; 11
    1a4a:	9d e0       	ldi	r25, 0x0D	; 13
    1a4c:	7e d1       	rcall	.+764    	; 0x1d4a <fdevopen>
    1a4e:	1f 91       	pop	r17
    1a50:	0f 91       	pop	r16
    1a52:	ff 90       	pop	r15
    1a54:	ef 90       	pop	r14
    1a56:	08 95       	ret

00001a58 <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    1a58:	9b 01       	movw	r18, r22
	
	switch(channel){
    1a5a:	82 30       	cpi	r24, 0x02	; 2
    1a5c:	71 f0       	breq	.+28     	; 0x1a7a <ADC_request+0x22>
    1a5e:	18 f4       	brcc	.+6      	; 0x1a66 <ADC_request+0xe>
    1a60:	81 30       	cpi	r24, 0x01	; 1
    1a62:	31 f0       	breq	.+12     	; 0x1a70 <ADC_request+0x18>
    1a64:	19 c0       	rjmp	.+50     	; 0x1a98 <ADC_request+0x40>
    1a66:	83 30       	cpi	r24, 0x03	; 3
    1a68:	69 f0       	breq	.+26     	; 0x1a84 <ADC_request+0x2c>
    1a6a:	84 30       	cpi	r24, 0x04	; 4
    1a6c:	81 f0       	breq	.+32     	; 0x1a8e <ADC_request+0x36>
    1a6e:	14 c0       	rjmp	.+40     	; 0x1a98 <ADC_request+0x40>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    1a70:	64 e0       	ldi	r22, 0x04	; 4
    1a72:	c9 01       	movw	r24, r18
    1a74:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <saveToAddress>
			break;
    1a78:	08 95       	ret
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    1a7a:	65 e0       	ldi	r22, 0x05	; 5
    1a7c:	c9 01       	movw	r24, r18
    1a7e:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <saveToAddress>
			break;
    1a82:	08 95       	ret
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    1a84:	66 e0       	ldi	r22, 0x06	; 6
    1a86:	c9 01       	movw	r24, r18
    1a88:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <saveToAddress>
			break;
    1a8c:	08 95       	ret
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    1a8e:	67 e0       	ldi	r22, 0x07	; 7
    1a90:	c9 01       	movw	r24, r18
    1a92:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <saveToAddress>
			break;
    1a96:	08 95       	ret
			
		default:
			printf("Problems with ADC...");
    1a98:	86 ef       	ldi	r24, 0xF6	; 246
    1a9a:	92 e0       	ldi	r25, 0x02	; 2
    1a9c:	9f 93       	push	r25
    1a9e:	8f 93       	push	r24
    1aa0:	9e d1       	rcall	.+828    	; 0x1dde <printf>
    1aa2:	0f 90       	pop	r0
			break;
    1aa4:	0f 90       	pop	r0
    1aa6:	08 95       	ret

00001aa8 <ADC_read>:
    1aa8:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <readFromAddress>
}

uint8_t ADC_read(volatile char *ADC_ADDRESS)
{
	return (uint8_t)readFromAddress(ADC_ADDRESS);
}
    1aac:	08 95       	ret

00001aae <__divmodhi4>:
    1aae:	97 fb       	bst	r25, 7
    1ab0:	07 2e       	mov	r0, r23
    1ab2:	16 f4       	brtc	.+4      	; 0x1ab8 <__divmodhi4+0xa>
    1ab4:	00 94       	com	r0
    1ab6:	06 d0       	rcall	.+12     	; 0x1ac4 <__divmodhi4_neg1>
    1ab8:	77 fd       	sbrc	r23, 7
    1aba:	08 d0       	rcall	.+16     	; 0x1acc <__divmodhi4_neg2>
    1abc:	0b d0       	rcall	.+22     	; 0x1ad4 <__udivmodhi4>
    1abe:	07 fc       	sbrc	r0, 7
    1ac0:	05 d0       	rcall	.+10     	; 0x1acc <__divmodhi4_neg2>
    1ac2:	3e f4       	brtc	.+14     	; 0x1ad2 <__divmodhi4_exit>

00001ac4 <__divmodhi4_neg1>:
    1ac4:	90 95       	com	r25
    1ac6:	81 95       	neg	r24
    1ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aca:	08 95       	ret

00001acc <__divmodhi4_neg2>:
    1acc:	70 95       	com	r23
    1ace:	61 95       	neg	r22
    1ad0:	7f 4f       	sbci	r23, 0xFF	; 255

00001ad2 <__divmodhi4_exit>:
    1ad2:	08 95       	ret

00001ad4 <__udivmodhi4>:
    1ad4:	aa 1b       	sub	r26, r26
    1ad6:	bb 1b       	sub	r27, r27
    1ad8:	51 e1       	ldi	r21, 0x11	; 17
    1ada:	07 c0       	rjmp	.+14     	; 0x1aea <__udivmodhi4_ep>

00001adc <__udivmodhi4_loop>:
    1adc:	aa 1f       	adc	r26, r26
    1ade:	bb 1f       	adc	r27, r27
    1ae0:	a6 17       	cp	r26, r22
    1ae2:	b7 07       	cpc	r27, r23
    1ae4:	10 f0       	brcs	.+4      	; 0x1aea <__udivmodhi4_ep>
    1ae6:	a6 1b       	sub	r26, r22
    1ae8:	b7 0b       	sbc	r27, r23

00001aea <__udivmodhi4_ep>:
    1aea:	88 1f       	adc	r24, r24
    1aec:	99 1f       	adc	r25, r25
    1aee:	5a 95       	dec	r21
    1af0:	a9 f7       	brne	.-22     	; 0x1adc <__udivmodhi4_loop>
    1af2:	80 95       	com	r24
    1af4:	90 95       	com	r25
    1af6:	bc 01       	movw	r22, r24
    1af8:	cd 01       	movw	r24, r26
    1afa:	08 95       	ret

00001afc <malloc>:
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
    1b00:	82 30       	cpi	r24, 0x02	; 2
    1b02:	91 05       	cpc	r25, r1
    1b04:	10 f4       	brcc	.+4      	; 0x1b0a <malloc+0xe>
    1b06:	82 e0       	ldi	r24, 0x02	; 2
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	e0 91 4e 03 	lds	r30, 0x034E
    1b0e:	f0 91 4f 03 	lds	r31, 0x034F
    1b12:	20 e0       	ldi	r18, 0x00	; 0
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	a0 e0       	ldi	r26, 0x00	; 0
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	30 97       	sbiw	r30, 0x00	; 0
    1b1c:	39 f1       	breq	.+78     	; 0x1b6c <malloc+0x70>
    1b1e:	40 81       	ld	r20, Z
    1b20:	51 81       	ldd	r21, Z+1	; 0x01
    1b22:	48 17       	cp	r20, r24
    1b24:	59 07       	cpc	r21, r25
    1b26:	b8 f0       	brcs	.+46     	; 0x1b56 <malloc+0x5a>
    1b28:	48 17       	cp	r20, r24
    1b2a:	59 07       	cpc	r21, r25
    1b2c:	71 f4       	brne	.+28     	; 0x1b4a <malloc+0x4e>
    1b2e:	82 81       	ldd	r24, Z+2	; 0x02
    1b30:	93 81       	ldd	r25, Z+3	; 0x03
    1b32:	10 97       	sbiw	r26, 0x00	; 0
    1b34:	29 f0       	breq	.+10     	; 0x1b40 <malloc+0x44>
    1b36:	13 96       	adiw	r26, 0x03	; 3
    1b38:	9c 93       	st	X, r25
    1b3a:	8e 93       	st	-X, r24
    1b3c:	12 97       	sbiw	r26, 0x02	; 2
    1b3e:	2c c0       	rjmp	.+88     	; 0x1b98 <malloc+0x9c>
    1b40:	90 93 4f 03 	sts	0x034F, r25
    1b44:	80 93 4e 03 	sts	0x034E, r24
    1b48:	27 c0       	rjmp	.+78     	; 0x1b98 <malloc+0x9c>
    1b4a:	21 15       	cp	r18, r1
    1b4c:	31 05       	cpc	r19, r1
    1b4e:	31 f0       	breq	.+12     	; 0x1b5c <malloc+0x60>
    1b50:	42 17       	cp	r20, r18
    1b52:	53 07       	cpc	r21, r19
    1b54:	18 f0       	brcs	.+6      	; 0x1b5c <malloc+0x60>
    1b56:	a9 01       	movw	r20, r18
    1b58:	db 01       	movw	r26, r22
    1b5a:	01 c0       	rjmp	.+2      	; 0x1b5e <malloc+0x62>
    1b5c:	ef 01       	movw	r28, r30
    1b5e:	9a 01       	movw	r18, r20
    1b60:	bd 01       	movw	r22, r26
    1b62:	df 01       	movw	r26, r30
    1b64:	02 80       	ldd	r0, Z+2	; 0x02
    1b66:	f3 81       	ldd	r31, Z+3	; 0x03
    1b68:	e0 2d       	mov	r30, r0
    1b6a:	d7 cf       	rjmp	.-82     	; 0x1b1a <malloc+0x1e>
    1b6c:	21 15       	cp	r18, r1
    1b6e:	31 05       	cpc	r19, r1
    1b70:	f9 f0       	breq	.+62     	; 0x1bb0 <malloc+0xb4>
    1b72:	28 1b       	sub	r18, r24
    1b74:	39 0b       	sbc	r19, r25
    1b76:	24 30       	cpi	r18, 0x04	; 4
    1b78:	31 05       	cpc	r19, r1
    1b7a:	80 f4       	brcc	.+32     	; 0x1b9c <malloc+0xa0>
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b80:	61 15       	cp	r22, r1
    1b82:	71 05       	cpc	r23, r1
    1b84:	21 f0       	breq	.+8      	; 0x1b8e <malloc+0x92>
    1b86:	fb 01       	movw	r30, r22
    1b88:	93 83       	std	Z+3, r25	; 0x03
    1b8a:	82 83       	std	Z+2, r24	; 0x02
    1b8c:	04 c0       	rjmp	.+8      	; 0x1b96 <malloc+0x9a>
    1b8e:	90 93 4f 03 	sts	0x034F, r25
    1b92:	80 93 4e 03 	sts	0x034E, r24
    1b96:	fe 01       	movw	r30, r28
    1b98:	32 96       	adiw	r30, 0x02	; 2
    1b9a:	44 c0       	rjmp	.+136    	; 0x1c24 <malloc+0x128>
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e2 0f       	add	r30, r18
    1ba0:	f3 1f       	adc	r31, r19
    1ba2:	81 93       	st	Z+, r24
    1ba4:	91 93       	st	Z+, r25
    1ba6:	22 50       	subi	r18, 0x02	; 2
    1ba8:	31 09       	sbc	r19, r1
    1baa:	39 83       	std	Y+1, r19	; 0x01
    1bac:	28 83       	st	Y, r18
    1bae:	3a c0       	rjmp	.+116    	; 0x1c24 <malloc+0x128>
    1bb0:	20 91 4c 03 	lds	r18, 0x034C
    1bb4:	30 91 4d 03 	lds	r19, 0x034D
    1bb8:	23 2b       	or	r18, r19
    1bba:	41 f4       	brne	.+16     	; 0x1bcc <malloc+0xd0>
    1bbc:	20 91 02 01 	lds	r18, 0x0102
    1bc0:	30 91 03 01 	lds	r19, 0x0103
    1bc4:	30 93 4d 03 	sts	0x034D, r19
    1bc8:	20 93 4c 03 	sts	0x034C, r18
    1bcc:	20 91 00 01 	lds	r18, 0x0100
    1bd0:	30 91 01 01 	lds	r19, 0x0101
    1bd4:	21 15       	cp	r18, r1
    1bd6:	31 05       	cpc	r19, r1
    1bd8:	41 f4       	brne	.+16     	; 0x1bea <malloc+0xee>
    1bda:	2d b7       	in	r18, 0x3d	; 61
    1bdc:	3e b7       	in	r19, 0x3e	; 62
    1bde:	40 91 04 01 	lds	r20, 0x0104
    1be2:	50 91 05 01 	lds	r21, 0x0105
    1be6:	24 1b       	sub	r18, r20
    1be8:	35 0b       	sbc	r19, r21
    1bea:	e0 91 4c 03 	lds	r30, 0x034C
    1bee:	f0 91 4d 03 	lds	r31, 0x034D
    1bf2:	e2 17       	cp	r30, r18
    1bf4:	f3 07       	cpc	r31, r19
    1bf6:	a0 f4       	brcc	.+40     	; 0x1c20 <malloc+0x124>
    1bf8:	2e 1b       	sub	r18, r30
    1bfa:	3f 0b       	sbc	r19, r31
    1bfc:	28 17       	cp	r18, r24
    1bfe:	39 07       	cpc	r19, r25
    1c00:	78 f0       	brcs	.+30     	; 0x1c20 <malloc+0x124>
    1c02:	ac 01       	movw	r20, r24
    1c04:	4e 5f       	subi	r20, 0xFE	; 254
    1c06:	5f 4f       	sbci	r21, 0xFF	; 255
    1c08:	24 17       	cp	r18, r20
    1c0a:	35 07       	cpc	r19, r21
    1c0c:	48 f0       	brcs	.+18     	; 0x1c20 <malloc+0x124>
    1c0e:	4e 0f       	add	r20, r30
    1c10:	5f 1f       	adc	r21, r31
    1c12:	50 93 4d 03 	sts	0x034D, r21
    1c16:	40 93 4c 03 	sts	0x034C, r20
    1c1a:	81 93       	st	Z+, r24
    1c1c:	91 93       	st	Z+, r25
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <malloc+0x128>
    1c20:	e0 e0       	ldi	r30, 0x00	; 0
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	cf 01       	movw	r24, r30
    1c26:	df 91       	pop	r29
    1c28:	cf 91       	pop	r28
    1c2a:	08 95       	ret

00001c2c <free>:
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	00 97       	sbiw	r24, 0x00	; 0
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <free+0xa>
    1c34:	87 c0       	rjmp	.+270    	; 0x1d44 <free+0x118>
    1c36:	fc 01       	movw	r30, r24
    1c38:	32 97       	sbiw	r30, 0x02	; 2
    1c3a:	13 82       	std	Z+3, r1	; 0x03
    1c3c:	12 82       	std	Z+2, r1	; 0x02
    1c3e:	c0 91 4e 03 	lds	r28, 0x034E
    1c42:	d0 91 4f 03 	lds	r29, 0x034F
    1c46:	20 97       	sbiw	r28, 0x00	; 0
    1c48:	81 f4       	brne	.+32     	; 0x1c6a <free+0x3e>
    1c4a:	20 81       	ld	r18, Z
    1c4c:	31 81       	ldd	r19, Z+1	; 0x01
    1c4e:	28 0f       	add	r18, r24
    1c50:	39 1f       	adc	r19, r25
    1c52:	80 91 4c 03 	lds	r24, 0x034C
    1c56:	90 91 4d 03 	lds	r25, 0x034D
    1c5a:	82 17       	cp	r24, r18
    1c5c:	93 07       	cpc	r25, r19
    1c5e:	79 f5       	brne	.+94     	; 0x1cbe <free+0x92>
    1c60:	f0 93 4d 03 	sts	0x034D, r31
    1c64:	e0 93 4c 03 	sts	0x034C, r30
    1c68:	6d c0       	rjmp	.+218    	; 0x1d44 <free+0x118>
    1c6a:	de 01       	movw	r26, r28
    1c6c:	20 e0       	ldi	r18, 0x00	; 0
    1c6e:	30 e0       	ldi	r19, 0x00	; 0
    1c70:	ae 17       	cp	r26, r30
    1c72:	bf 07       	cpc	r27, r31
    1c74:	50 f4       	brcc	.+20     	; 0x1c8a <free+0x5e>
    1c76:	12 96       	adiw	r26, 0x02	; 2
    1c78:	4d 91       	ld	r20, X+
    1c7a:	5c 91       	ld	r21, X
    1c7c:	13 97       	sbiw	r26, 0x03	; 3
    1c7e:	9d 01       	movw	r18, r26
    1c80:	41 15       	cp	r20, r1
    1c82:	51 05       	cpc	r21, r1
    1c84:	09 f1       	breq	.+66     	; 0x1cc8 <free+0x9c>
    1c86:	da 01       	movw	r26, r20
    1c88:	f3 cf       	rjmp	.-26     	; 0x1c70 <free+0x44>
    1c8a:	b3 83       	std	Z+3, r27	; 0x03
    1c8c:	a2 83       	std	Z+2, r26	; 0x02
    1c8e:	40 81       	ld	r20, Z
    1c90:	51 81       	ldd	r21, Z+1	; 0x01
    1c92:	84 0f       	add	r24, r20
    1c94:	95 1f       	adc	r25, r21
    1c96:	8a 17       	cp	r24, r26
    1c98:	9b 07       	cpc	r25, r27
    1c9a:	71 f4       	brne	.+28     	; 0x1cb8 <free+0x8c>
    1c9c:	8d 91       	ld	r24, X+
    1c9e:	9c 91       	ld	r25, X
    1ca0:	11 97       	sbiw	r26, 0x01	; 1
    1ca2:	84 0f       	add	r24, r20
    1ca4:	95 1f       	adc	r25, r21
    1ca6:	02 96       	adiw	r24, 0x02	; 2
    1ca8:	91 83       	std	Z+1, r25	; 0x01
    1caa:	80 83       	st	Z, r24
    1cac:	12 96       	adiw	r26, 0x02	; 2
    1cae:	8d 91       	ld	r24, X+
    1cb0:	9c 91       	ld	r25, X
    1cb2:	13 97       	sbiw	r26, 0x03	; 3
    1cb4:	93 83       	std	Z+3, r25	; 0x03
    1cb6:	82 83       	std	Z+2, r24	; 0x02
    1cb8:	21 15       	cp	r18, r1
    1cba:	31 05       	cpc	r19, r1
    1cbc:	29 f4       	brne	.+10     	; 0x1cc8 <free+0x9c>
    1cbe:	f0 93 4f 03 	sts	0x034F, r31
    1cc2:	e0 93 4e 03 	sts	0x034E, r30
    1cc6:	3e c0       	rjmp	.+124    	; 0x1d44 <free+0x118>
    1cc8:	d9 01       	movw	r26, r18
    1cca:	13 96       	adiw	r26, 0x03	; 3
    1ccc:	fc 93       	st	X, r31
    1cce:	ee 93       	st	-X, r30
    1cd0:	12 97       	sbiw	r26, 0x02	; 2
    1cd2:	4d 91       	ld	r20, X+
    1cd4:	5d 91       	ld	r21, X+
    1cd6:	a4 0f       	add	r26, r20
    1cd8:	b5 1f       	adc	r27, r21
    1cda:	ea 17       	cp	r30, r26
    1cdc:	fb 07       	cpc	r31, r27
    1cde:	79 f4       	brne	.+30     	; 0x1cfe <free+0xd2>
    1ce0:	80 81       	ld	r24, Z
    1ce2:	91 81       	ldd	r25, Z+1	; 0x01
    1ce4:	84 0f       	add	r24, r20
    1ce6:	95 1f       	adc	r25, r21
    1ce8:	02 96       	adiw	r24, 0x02	; 2
    1cea:	d9 01       	movw	r26, r18
    1cec:	11 96       	adiw	r26, 0x01	; 1
    1cee:	9c 93       	st	X, r25
    1cf0:	8e 93       	st	-X, r24
    1cf2:	82 81       	ldd	r24, Z+2	; 0x02
    1cf4:	93 81       	ldd	r25, Z+3	; 0x03
    1cf6:	13 96       	adiw	r26, 0x03	; 3
    1cf8:	9c 93       	st	X, r25
    1cfa:	8e 93       	st	-X, r24
    1cfc:	12 97       	sbiw	r26, 0x02	; 2
    1cfe:	e0 e0       	ldi	r30, 0x00	; 0
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	9b 81       	ldd	r25, Y+3	; 0x03
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	19 f0       	breq	.+6      	; 0x1d10 <free+0xe4>
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	ec 01       	movw	r28, r24
    1d0e:	f9 cf       	rjmp	.-14     	; 0x1d02 <free+0xd6>
    1d10:	ce 01       	movw	r24, r28
    1d12:	02 96       	adiw	r24, 0x02	; 2
    1d14:	28 81       	ld	r18, Y
    1d16:	39 81       	ldd	r19, Y+1	; 0x01
    1d18:	82 0f       	add	r24, r18
    1d1a:	93 1f       	adc	r25, r19
    1d1c:	20 91 4c 03 	lds	r18, 0x034C
    1d20:	30 91 4d 03 	lds	r19, 0x034D
    1d24:	28 17       	cp	r18, r24
    1d26:	39 07       	cpc	r19, r25
    1d28:	69 f4       	brne	.+26     	; 0x1d44 <free+0x118>
    1d2a:	30 97       	sbiw	r30, 0x00	; 0
    1d2c:	29 f4       	brne	.+10     	; 0x1d38 <free+0x10c>
    1d2e:	10 92 4f 03 	sts	0x034F, r1
    1d32:	10 92 4e 03 	sts	0x034E, r1
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <free+0x110>
    1d38:	13 82       	std	Z+3, r1	; 0x03
    1d3a:	12 82       	std	Z+2, r1	; 0x02
    1d3c:	d0 93 4d 03 	sts	0x034D, r29
    1d40:	c0 93 4c 03 	sts	0x034C, r28
    1d44:	df 91       	pop	r29
    1d46:	cf 91       	pop	r28
    1d48:	08 95       	ret

00001d4a <fdevopen>:
    1d4a:	0f 93       	push	r16
    1d4c:	1f 93       	push	r17
    1d4e:	cf 93       	push	r28
    1d50:	df 93       	push	r29
    1d52:	ec 01       	movw	r28, r24
    1d54:	8b 01       	movw	r16, r22
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	31 f4       	brne	.+12     	; 0x1d66 <fdevopen+0x1c>
    1d5a:	61 15       	cp	r22, r1
    1d5c:	71 05       	cpc	r23, r1
    1d5e:	19 f4       	brne	.+6      	; 0x1d66 <fdevopen+0x1c>
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	37 c0       	rjmp	.+110    	; 0x1dd4 <fdevopen+0x8a>
    1d66:	6e e0       	ldi	r22, 0x0E	; 14
    1d68:	70 e0       	ldi	r23, 0x00	; 0
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	5c d2       	rcall	.+1208   	; 0x2228 <calloc>
    1d70:	fc 01       	movw	r30, r24
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	a9 f3       	breq	.-22     	; 0x1d60 <fdevopen+0x16>
    1d76:	80 e8       	ldi	r24, 0x80	; 128
    1d78:	83 83       	std	Z+3, r24	; 0x03
    1d7a:	01 15       	cp	r16, r1
    1d7c:	11 05       	cpc	r17, r1
    1d7e:	71 f0       	breq	.+28     	; 0x1d9c <fdevopen+0x52>
    1d80:	13 87       	std	Z+11, r17	; 0x0b
    1d82:	02 87       	std	Z+10, r16	; 0x0a
    1d84:	81 e8       	ldi	r24, 0x81	; 129
    1d86:	83 83       	std	Z+3, r24	; 0x03
    1d88:	80 91 50 03 	lds	r24, 0x0350
    1d8c:	90 91 51 03 	lds	r25, 0x0351
    1d90:	89 2b       	or	r24, r25
    1d92:	21 f4       	brne	.+8      	; 0x1d9c <fdevopen+0x52>
    1d94:	f0 93 51 03 	sts	0x0351, r31
    1d98:	e0 93 50 03 	sts	0x0350, r30
    1d9c:	20 97       	sbiw	r28, 0x00	; 0
    1d9e:	c9 f0       	breq	.+50     	; 0x1dd2 <fdevopen+0x88>
    1da0:	d1 87       	std	Z+9, r29	; 0x09
    1da2:	c0 87       	std	Z+8, r28	; 0x08
    1da4:	83 81       	ldd	r24, Z+3	; 0x03
    1da6:	82 60       	ori	r24, 0x02	; 2
    1da8:	83 83       	std	Z+3, r24	; 0x03
    1daa:	80 91 52 03 	lds	r24, 0x0352
    1dae:	90 91 53 03 	lds	r25, 0x0353
    1db2:	89 2b       	or	r24, r25
    1db4:	71 f4       	brne	.+28     	; 0x1dd2 <fdevopen+0x88>
    1db6:	f0 93 53 03 	sts	0x0353, r31
    1dba:	e0 93 52 03 	sts	0x0352, r30
    1dbe:	80 91 54 03 	lds	r24, 0x0354
    1dc2:	90 91 55 03 	lds	r25, 0x0355
    1dc6:	89 2b       	or	r24, r25
    1dc8:	21 f4       	brne	.+8      	; 0x1dd2 <fdevopen+0x88>
    1dca:	f0 93 55 03 	sts	0x0355, r31
    1dce:	e0 93 54 03 	sts	0x0354, r30
    1dd2:	cf 01       	movw	r24, r30
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	1f 91       	pop	r17
    1dda:	0f 91       	pop	r16
    1ddc:	08 95       	ret

00001dde <printf>:
    1dde:	a0 e0       	ldi	r26, 0x00	; 0
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	e4 ef       	ldi	r30, 0xF4	; 244
    1de4:	fe e0       	ldi	r31, 0x0E	; 14
    1de6:	f7 c2       	rjmp	.+1518   	; 0x23d6 <__prologue_saves__+0x20>
    1de8:	fe 01       	movw	r30, r28
    1dea:	35 96       	adiw	r30, 0x05	; 5
    1dec:	61 91       	ld	r22, Z+
    1dee:	71 91       	ld	r23, Z+
    1df0:	af 01       	movw	r20, r30
    1df2:	80 91 52 03 	lds	r24, 0x0352
    1df6:	90 91 53 03 	lds	r25, 0x0353
    1dfa:	53 d0       	rcall	.+166    	; 0x1ea2 <vfprintf>
    1dfc:	e2 e0       	ldi	r30, 0x02	; 2
    1dfe:	07 c3       	rjmp	.+1550   	; 0x240e <__epilogue_restores__+0x20>

00001e00 <putchar>:
    1e00:	60 91 52 03 	lds	r22, 0x0352
    1e04:	70 91 53 03 	lds	r23, 0x0353
    1e08:	46 c2       	rjmp	.+1164   	; 0x2296 <fputc>

00001e0a <puts>:
    1e0a:	0f 93       	push	r16
    1e0c:	1f 93       	push	r17
    1e0e:	cf 93       	push	r28
    1e10:	df 93       	push	r29
    1e12:	e0 91 52 03 	lds	r30, 0x0352
    1e16:	f0 91 53 03 	lds	r31, 0x0353
    1e1a:	23 81       	ldd	r18, Z+3	; 0x03
    1e1c:	21 ff       	sbrs	r18, 1
    1e1e:	1b c0       	rjmp	.+54     	; 0x1e56 <puts+0x4c>
    1e20:	ec 01       	movw	r28, r24
    1e22:	00 e0       	ldi	r16, 0x00	; 0
    1e24:	10 e0       	ldi	r17, 0x00	; 0
    1e26:	89 91       	ld	r24, Y+
    1e28:	60 91 52 03 	lds	r22, 0x0352
    1e2c:	70 91 53 03 	lds	r23, 0x0353
    1e30:	db 01       	movw	r26, r22
    1e32:	18 96       	adiw	r26, 0x08	; 8
    1e34:	ed 91       	ld	r30, X+
    1e36:	fc 91       	ld	r31, X
    1e38:	19 97       	sbiw	r26, 0x09	; 9
    1e3a:	88 23       	and	r24, r24
    1e3c:	31 f0       	breq	.+12     	; 0x1e4a <puts+0x40>
    1e3e:	09 95       	icall
    1e40:	89 2b       	or	r24, r25
    1e42:	89 f3       	breq	.-30     	; 0x1e26 <puts+0x1c>
    1e44:	0f ef       	ldi	r16, 0xFF	; 255
    1e46:	1f ef       	ldi	r17, 0xFF	; 255
    1e48:	ee cf       	rjmp	.-36     	; 0x1e26 <puts+0x1c>
    1e4a:	8a e0       	ldi	r24, 0x0A	; 10
    1e4c:	09 95       	icall
    1e4e:	89 2b       	or	r24, r25
    1e50:	11 f4       	brne	.+4      	; 0x1e56 <puts+0x4c>
    1e52:	c8 01       	movw	r24, r16
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <puts+0x50>
    1e56:	8f ef       	ldi	r24, 0xFF	; 255
    1e58:	9f ef       	ldi	r25, 0xFF	; 255
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	1f 91       	pop	r17
    1e60:	0f 91       	pop	r16
    1e62:	08 95       	ret

00001e64 <sprintf>:
    1e64:	ae e0       	ldi	r26, 0x0E	; 14
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	e7 e3       	ldi	r30, 0x37	; 55
    1e6a:	ff e0       	ldi	r31, 0x0F	; 15
    1e6c:	b2 c2       	rjmp	.+1380   	; 0x23d2 <__prologue_saves__+0x1c>
    1e6e:	0d 89       	ldd	r16, Y+21	; 0x15
    1e70:	1e 89       	ldd	r17, Y+22	; 0x16
    1e72:	86 e0       	ldi	r24, 0x06	; 6
    1e74:	8c 83       	std	Y+4, r24	; 0x04
    1e76:	1a 83       	std	Y+2, r17	; 0x02
    1e78:	09 83       	std	Y+1, r16	; 0x01
    1e7a:	8f ef       	ldi	r24, 0xFF	; 255
    1e7c:	9f e7       	ldi	r25, 0x7F	; 127
    1e7e:	9e 83       	std	Y+6, r25	; 0x06
    1e80:	8d 83       	std	Y+5, r24	; 0x05
    1e82:	ae 01       	movw	r20, r28
    1e84:	47 5e       	subi	r20, 0xE7	; 231
    1e86:	5f 4f       	sbci	r21, 0xFF	; 255
    1e88:	6f 89       	ldd	r22, Y+23	; 0x17
    1e8a:	78 8d       	ldd	r23, Y+24	; 0x18
    1e8c:	ce 01       	movw	r24, r28
    1e8e:	01 96       	adiw	r24, 0x01	; 1
    1e90:	08 d0       	rcall	.+16     	; 0x1ea2 <vfprintf>
    1e92:	ef 81       	ldd	r30, Y+7	; 0x07
    1e94:	f8 85       	ldd	r31, Y+8	; 0x08
    1e96:	e0 0f       	add	r30, r16
    1e98:	f1 1f       	adc	r31, r17
    1e9a:	10 82       	st	Z, r1
    1e9c:	2e 96       	adiw	r28, 0x0e	; 14
    1e9e:	e4 e0       	ldi	r30, 0x04	; 4
    1ea0:	b4 c2       	rjmp	.+1384   	; 0x240a <__epilogue_restores__+0x1c>

00001ea2 <vfprintf>:
    1ea2:	ac e0       	ldi	r26, 0x0C	; 12
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e6 e5       	ldi	r30, 0x56	; 86
    1ea8:	ff e0       	ldi	r31, 0x0F	; 15
    1eaa:	85 c2       	rjmp	.+1290   	; 0x23b6 <__prologue_saves__>
    1eac:	7c 01       	movw	r14, r24
    1eae:	6b 01       	movw	r12, r22
    1eb0:	8a 01       	movw	r16, r20
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	17 82       	std	Z+7, r1	; 0x07
    1eb6:	16 82       	std	Z+6, r1	; 0x06
    1eb8:	83 81       	ldd	r24, Z+3	; 0x03
    1eba:	81 ff       	sbrs	r24, 1
    1ebc:	b0 c1       	rjmp	.+864    	; 0x221e <vfprintf+0x37c>
    1ebe:	ce 01       	movw	r24, r28
    1ec0:	01 96       	adiw	r24, 0x01	; 1
    1ec2:	4c 01       	movw	r8, r24
    1ec4:	f7 01       	movw	r30, r14
    1ec6:	93 81       	ldd	r25, Z+3	; 0x03
    1ec8:	f6 01       	movw	r30, r12
    1eca:	93 fd       	sbrc	r25, 3
    1ecc:	85 91       	lpm	r24, Z+
    1ece:	93 ff       	sbrs	r25, 3
    1ed0:	81 91       	ld	r24, Z+
    1ed2:	6f 01       	movw	r12, r30
    1ed4:	88 23       	and	r24, r24
    1ed6:	09 f4       	brne	.+2      	; 0x1eda <vfprintf+0x38>
    1ed8:	9e c1       	rjmp	.+828    	; 0x2216 <vfprintf+0x374>
    1eda:	85 32       	cpi	r24, 0x25	; 37
    1edc:	39 f4       	brne	.+14     	; 0x1eec <vfprintf+0x4a>
    1ede:	93 fd       	sbrc	r25, 3
    1ee0:	85 91       	lpm	r24, Z+
    1ee2:	93 ff       	sbrs	r25, 3
    1ee4:	81 91       	ld	r24, Z+
    1ee6:	6f 01       	movw	r12, r30
    1ee8:	85 32       	cpi	r24, 0x25	; 37
    1eea:	21 f4       	brne	.+8      	; 0x1ef4 <vfprintf+0x52>
    1eec:	b7 01       	movw	r22, r14
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	d2 d1       	rcall	.+932    	; 0x2296 <fputc>
    1ef2:	e8 cf       	rjmp	.-48     	; 0x1ec4 <vfprintf+0x22>
    1ef4:	51 2c       	mov	r5, r1
    1ef6:	31 2c       	mov	r3, r1
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	20 32       	cpi	r18, 0x20	; 32
    1efc:	a0 f4       	brcc	.+40     	; 0x1f26 <vfprintf+0x84>
    1efe:	8b 32       	cpi	r24, 0x2B	; 43
    1f00:	69 f0       	breq	.+26     	; 0x1f1c <vfprintf+0x7a>
    1f02:	30 f4       	brcc	.+12     	; 0x1f10 <vfprintf+0x6e>
    1f04:	80 32       	cpi	r24, 0x20	; 32
    1f06:	59 f0       	breq	.+22     	; 0x1f1e <vfprintf+0x7c>
    1f08:	83 32       	cpi	r24, 0x23	; 35
    1f0a:	69 f4       	brne	.+26     	; 0x1f26 <vfprintf+0x84>
    1f0c:	20 61       	ori	r18, 0x10	; 16
    1f0e:	2c c0       	rjmp	.+88     	; 0x1f68 <vfprintf+0xc6>
    1f10:	8d 32       	cpi	r24, 0x2D	; 45
    1f12:	39 f0       	breq	.+14     	; 0x1f22 <vfprintf+0x80>
    1f14:	80 33       	cpi	r24, 0x30	; 48
    1f16:	39 f4       	brne	.+14     	; 0x1f26 <vfprintf+0x84>
    1f18:	21 60       	ori	r18, 0x01	; 1
    1f1a:	26 c0       	rjmp	.+76     	; 0x1f68 <vfprintf+0xc6>
    1f1c:	22 60       	ori	r18, 0x02	; 2
    1f1e:	24 60       	ori	r18, 0x04	; 4
    1f20:	23 c0       	rjmp	.+70     	; 0x1f68 <vfprintf+0xc6>
    1f22:	28 60       	ori	r18, 0x08	; 8
    1f24:	21 c0       	rjmp	.+66     	; 0x1f68 <vfprintf+0xc6>
    1f26:	27 fd       	sbrc	r18, 7
    1f28:	27 c0       	rjmp	.+78     	; 0x1f78 <vfprintf+0xd6>
    1f2a:	30 ed       	ldi	r19, 0xD0	; 208
    1f2c:	38 0f       	add	r19, r24
    1f2e:	3a 30       	cpi	r19, 0x0A	; 10
    1f30:	78 f4       	brcc	.+30     	; 0x1f50 <vfprintf+0xae>
    1f32:	26 ff       	sbrs	r18, 6
    1f34:	06 c0       	rjmp	.+12     	; 0x1f42 <vfprintf+0xa0>
    1f36:	fa e0       	ldi	r31, 0x0A	; 10
    1f38:	5f 9e       	mul	r5, r31
    1f3a:	30 0d       	add	r19, r0
    1f3c:	11 24       	eor	r1, r1
    1f3e:	53 2e       	mov	r5, r19
    1f40:	13 c0       	rjmp	.+38     	; 0x1f68 <vfprintf+0xc6>
    1f42:	8a e0       	ldi	r24, 0x0A	; 10
    1f44:	38 9e       	mul	r3, r24
    1f46:	30 0d       	add	r19, r0
    1f48:	11 24       	eor	r1, r1
    1f4a:	33 2e       	mov	r3, r19
    1f4c:	20 62       	ori	r18, 0x20	; 32
    1f4e:	0c c0       	rjmp	.+24     	; 0x1f68 <vfprintf+0xc6>
    1f50:	8e 32       	cpi	r24, 0x2E	; 46
    1f52:	21 f4       	brne	.+8      	; 0x1f5c <vfprintf+0xba>
    1f54:	26 fd       	sbrc	r18, 6
    1f56:	5f c1       	rjmp	.+702    	; 0x2216 <vfprintf+0x374>
    1f58:	20 64       	ori	r18, 0x40	; 64
    1f5a:	06 c0       	rjmp	.+12     	; 0x1f68 <vfprintf+0xc6>
    1f5c:	8c 36       	cpi	r24, 0x6C	; 108
    1f5e:	11 f4       	brne	.+4      	; 0x1f64 <vfprintf+0xc2>
    1f60:	20 68       	ori	r18, 0x80	; 128
    1f62:	02 c0       	rjmp	.+4      	; 0x1f68 <vfprintf+0xc6>
    1f64:	88 36       	cpi	r24, 0x68	; 104
    1f66:	41 f4       	brne	.+16     	; 0x1f78 <vfprintf+0xd6>
    1f68:	f6 01       	movw	r30, r12
    1f6a:	93 fd       	sbrc	r25, 3
    1f6c:	85 91       	lpm	r24, Z+
    1f6e:	93 ff       	sbrs	r25, 3
    1f70:	81 91       	ld	r24, Z+
    1f72:	6f 01       	movw	r12, r30
    1f74:	81 11       	cpse	r24, r1
    1f76:	c1 cf       	rjmp	.-126    	; 0x1efa <vfprintf+0x58>
    1f78:	98 2f       	mov	r25, r24
    1f7a:	9f 7d       	andi	r25, 0xDF	; 223
    1f7c:	95 54       	subi	r25, 0x45	; 69
    1f7e:	93 30       	cpi	r25, 0x03	; 3
    1f80:	28 f4       	brcc	.+10     	; 0x1f8c <vfprintf+0xea>
    1f82:	0c 5f       	subi	r16, 0xFC	; 252
    1f84:	1f 4f       	sbci	r17, 0xFF	; 255
    1f86:	ff e3       	ldi	r31, 0x3F	; 63
    1f88:	f9 83       	std	Y+1, r31	; 0x01
    1f8a:	0d c0       	rjmp	.+26     	; 0x1fa6 <vfprintf+0x104>
    1f8c:	83 36       	cpi	r24, 0x63	; 99
    1f8e:	31 f0       	breq	.+12     	; 0x1f9c <vfprintf+0xfa>
    1f90:	83 37       	cpi	r24, 0x73	; 115
    1f92:	71 f0       	breq	.+28     	; 0x1fb0 <vfprintf+0x10e>
    1f94:	83 35       	cpi	r24, 0x53	; 83
    1f96:	09 f0       	breq	.+2      	; 0x1f9a <vfprintf+0xf8>
    1f98:	57 c0       	rjmp	.+174    	; 0x2048 <vfprintf+0x1a6>
    1f9a:	21 c0       	rjmp	.+66     	; 0x1fde <vfprintf+0x13c>
    1f9c:	f8 01       	movw	r30, r16
    1f9e:	80 81       	ld	r24, Z
    1fa0:	89 83       	std	Y+1, r24	; 0x01
    1fa2:	0e 5f       	subi	r16, 0xFE	; 254
    1fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa6:	44 24       	eor	r4, r4
    1fa8:	43 94       	inc	r4
    1faa:	51 2c       	mov	r5, r1
    1fac:	54 01       	movw	r10, r8
    1fae:	14 c0       	rjmp	.+40     	; 0x1fd8 <vfprintf+0x136>
    1fb0:	38 01       	movw	r6, r16
    1fb2:	f2 e0       	ldi	r31, 0x02	; 2
    1fb4:	6f 0e       	add	r6, r31
    1fb6:	71 1c       	adc	r7, r1
    1fb8:	f8 01       	movw	r30, r16
    1fba:	a0 80       	ld	r10, Z
    1fbc:	b1 80       	ldd	r11, Z+1	; 0x01
    1fbe:	26 ff       	sbrs	r18, 6
    1fc0:	03 c0       	rjmp	.+6      	; 0x1fc8 <vfprintf+0x126>
    1fc2:	65 2d       	mov	r22, r5
    1fc4:	70 e0       	ldi	r23, 0x00	; 0
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <vfprintf+0x12a>
    1fc8:	6f ef       	ldi	r22, 0xFF	; 255
    1fca:	7f ef       	ldi	r23, 0xFF	; 255
    1fcc:	c5 01       	movw	r24, r10
    1fce:	2c 87       	std	Y+12, r18	; 0x0c
    1fd0:	57 d1       	rcall	.+686    	; 0x2280 <strnlen>
    1fd2:	2c 01       	movw	r4, r24
    1fd4:	83 01       	movw	r16, r6
    1fd6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fd8:	2f 77       	andi	r18, 0x7F	; 127
    1fda:	22 2e       	mov	r2, r18
    1fdc:	16 c0       	rjmp	.+44     	; 0x200a <vfprintf+0x168>
    1fde:	38 01       	movw	r6, r16
    1fe0:	f2 e0       	ldi	r31, 0x02	; 2
    1fe2:	6f 0e       	add	r6, r31
    1fe4:	71 1c       	adc	r7, r1
    1fe6:	f8 01       	movw	r30, r16
    1fe8:	a0 80       	ld	r10, Z
    1fea:	b1 80       	ldd	r11, Z+1	; 0x01
    1fec:	26 ff       	sbrs	r18, 6
    1fee:	03 c0       	rjmp	.+6      	; 0x1ff6 <vfprintf+0x154>
    1ff0:	65 2d       	mov	r22, r5
    1ff2:	70 e0       	ldi	r23, 0x00	; 0
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <vfprintf+0x158>
    1ff6:	6f ef       	ldi	r22, 0xFF	; 255
    1ff8:	7f ef       	ldi	r23, 0xFF	; 255
    1ffa:	c5 01       	movw	r24, r10
    1ffc:	2c 87       	std	Y+12, r18	; 0x0c
    1ffe:	2e d1       	rcall	.+604    	; 0x225c <strnlen_P>
    2000:	2c 01       	movw	r4, r24
    2002:	2c 85       	ldd	r18, Y+12	; 0x0c
    2004:	20 68       	ori	r18, 0x80	; 128
    2006:	22 2e       	mov	r2, r18
    2008:	83 01       	movw	r16, r6
    200a:	23 fc       	sbrc	r2, 3
    200c:	19 c0       	rjmp	.+50     	; 0x2040 <vfprintf+0x19e>
    200e:	83 2d       	mov	r24, r3
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	48 16       	cp	r4, r24
    2014:	59 06       	cpc	r5, r25
    2016:	a0 f4       	brcc	.+40     	; 0x2040 <vfprintf+0x19e>
    2018:	b7 01       	movw	r22, r14
    201a:	80 e2       	ldi	r24, 0x20	; 32
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	3b d1       	rcall	.+630    	; 0x2296 <fputc>
    2020:	3a 94       	dec	r3
    2022:	f5 cf       	rjmp	.-22     	; 0x200e <vfprintf+0x16c>
    2024:	f5 01       	movw	r30, r10
    2026:	27 fc       	sbrc	r2, 7
    2028:	85 91       	lpm	r24, Z+
    202a:	27 fe       	sbrs	r2, 7
    202c:	81 91       	ld	r24, Z+
    202e:	5f 01       	movw	r10, r30
    2030:	b7 01       	movw	r22, r14
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	30 d1       	rcall	.+608    	; 0x2296 <fputc>
    2036:	31 10       	cpse	r3, r1
    2038:	3a 94       	dec	r3
    203a:	f1 e0       	ldi	r31, 0x01	; 1
    203c:	4f 1a       	sub	r4, r31
    203e:	51 08       	sbc	r5, r1
    2040:	41 14       	cp	r4, r1
    2042:	51 04       	cpc	r5, r1
    2044:	79 f7       	brne	.-34     	; 0x2024 <vfprintf+0x182>
    2046:	de c0       	rjmp	.+444    	; 0x2204 <vfprintf+0x362>
    2048:	84 36       	cpi	r24, 0x64	; 100
    204a:	11 f0       	breq	.+4      	; 0x2050 <vfprintf+0x1ae>
    204c:	89 36       	cpi	r24, 0x69	; 105
    204e:	31 f5       	brne	.+76     	; 0x209c <vfprintf+0x1fa>
    2050:	f8 01       	movw	r30, r16
    2052:	27 ff       	sbrs	r18, 7
    2054:	07 c0       	rjmp	.+14     	; 0x2064 <vfprintf+0x1c2>
    2056:	60 81       	ld	r22, Z
    2058:	71 81       	ldd	r23, Z+1	; 0x01
    205a:	82 81       	ldd	r24, Z+2	; 0x02
    205c:	93 81       	ldd	r25, Z+3	; 0x03
    205e:	0c 5f       	subi	r16, 0xFC	; 252
    2060:	1f 4f       	sbci	r17, 0xFF	; 255
    2062:	08 c0       	rjmp	.+16     	; 0x2074 <vfprintf+0x1d2>
    2064:	60 81       	ld	r22, Z
    2066:	71 81       	ldd	r23, Z+1	; 0x01
    2068:	88 27       	eor	r24, r24
    206a:	77 fd       	sbrc	r23, 7
    206c:	80 95       	com	r24
    206e:	98 2f       	mov	r25, r24
    2070:	0e 5f       	subi	r16, 0xFE	; 254
    2072:	1f 4f       	sbci	r17, 0xFF	; 255
    2074:	2f 76       	andi	r18, 0x6F	; 111
    2076:	b2 2e       	mov	r11, r18
    2078:	97 ff       	sbrs	r25, 7
    207a:	09 c0       	rjmp	.+18     	; 0x208e <vfprintf+0x1ec>
    207c:	90 95       	com	r25
    207e:	80 95       	com	r24
    2080:	70 95       	com	r23
    2082:	61 95       	neg	r22
    2084:	7f 4f       	sbci	r23, 0xFF	; 255
    2086:	8f 4f       	sbci	r24, 0xFF	; 255
    2088:	9f 4f       	sbci	r25, 0xFF	; 255
    208a:	20 68       	ori	r18, 0x80	; 128
    208c:	b2 2e       	mov	r11, r18
    208e:	2a e0       	ldi	r18, 0x0A	; 10
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	a4 01       	movw	r20, r8
    2094:	32 d1       	rcall	.+612    	; 0x22fa <__ultoa_invert>
    2096:	a8 2e       	mov	r10, r24
    2098:	a8 18       	sub	r10, r8
    209a:	43 c0       	rjmp	.+134    	; 0x2122 <vfprintf+0x280>
    209c:	85 37       	cpi	r24, 0x75	; 117
    209e:	29 f4       	brne	.+10     	; 0x20aa <vfprintf+0x208>
    20a0:	2f 7e       	andi	r18, 0xEF	; 239
    20a2:	b2 2e       	mov	r11, r18
    20a4:	2a e0       	ldi	r18, 0x0A	; 10
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	25 c0       	rjmp	.+74     	; 0x20f4 <vfprintf+0x252>
    20aa:	f2 2f       	mov	r31, r18
    20ac:	f9 7f       	andi	r31, 0xF9	; 249
    20ae:	bf 2e       	mov	r11, r31
    20b0:	8f 36       	cpi	r24, 0x6F	; 111
    20b2:	c1 f0       	breq	.+48     	; 0x20e4 <vfprintf+0x242>
    20b4:	18 f4       	brcc	.+6      	; 0x20bc <vfprintf+0x21a>
    20b6:	88 35       	cpi	r24, 0x58	; 88
    20b8:	79 f0       	breq	.+30     	; 0x20d8 <vfprintf+0x236>
    20ba:	ad c0       	rjmp	.+346    	; 0x2216 <vfprintf+0x374>
    20bc:	80 37       	cpi	r24, 0x70	; 112
    20be:	19 f0       	breq	.+6      	; 0x20c6 <vfprintf+0x224>
    20c0:	88 37       	cpi	r24, 0x78	; 120
    20c2:	21 f0       	breq	.+8      	; 0x20cc <vfprintf+0x22a>
    20c4:	a8 c0       	rjmp	.+336    	; 0x2216 <vfprintf+0x374>
    20c6:	2f 2f       	mov	r18, r31
    20c8:	20 61       	ori	r18, 0x10	; 16
    20ca:	b2 2e       	mov	r11, r18
    20cc:	b4 fe       	sbrs	r11, 4
    20ce:	0d c0       	rjmp	.+26     	; 0x20ea <vfprintf+0x248>
    20d0:	8b 2d       	mov	r24, r11
    20d2:	84 60       	ori	r24, 0x04	; 4
    20d4:	b8 2e       	mov	r11, r24
    20d6:	09 c0       	rjmp	.+18     	; 0x20ea <vfprintf+0x248>
    20d8:	24 ff       	sbrs	r18, 4
    20da:	0a c0       	rjmp	.+20     	; 0x20f0 <vfprintf+0x24e>
    20dc:	9f 2f       	mov	r25, r31
    20de:	96 60       	ori	r25, 0x06	; 6
    20e0:	b9 2e       	mov	r11, r25
    20e2:	06 c0       	rjmp	.+12     	; 0x20f0 <vfprintf+0x24e>
    20e4:	28 e0       	ldi	r18, 0x08	; 8
    20e6:	30 e0       	ldi	r19, 0x00	; 0
    20e8:	05 c0       	rjmp	.+10     	; 0x20f4 <vfprintf+0x252>
    20ea:	20 e1       	ldi	r18, 0x10	; 16
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	02 c0       	rjmp	.+4      	; 0x20f4 <vfprintf+0x252>
    20f0:	20 e1       	ldi	r18, 0x10	; 16
    20f2:	32 e0       	ldi	r19, 0x02	; 2
    20f4:	f8 01       	movw	r30, r16
    20f6:	b7 fe       	sbrs	r11, 7
    20f8:	07 c0       	rjmp	.+14     	; 0x2108 <vfprintf+0x266>
    20fa:	60 81       	ld	r22, Z
    20fc:	71 81       	ldd	r23, Z+1	; 0x01
    20fe:	82 81       	ldd	r24, Z+2	; 0x02
    2100:	93 81       	ldd	r25, Z+3	; 0x03
    2102:	0c 5f       	subi	r16, 0xFC	; 252
    2104:	1f 4f       	sbci	r17, 0xFF	; 255
    2106:	06 c0       	rjmp	.+12     	; 0x2114 <vfprintf+0x272>
    2108:	60 81       	ld	r22, Z
    210a:	71 81       	ldd	r23, Z+1	; 0x01
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	0e 5f       	subi	r16, 0xFE	; 254
    2112:	1f 4f       	sbci	r17, 0xFF	; 255
    2114:	a4 01       	movw	r20, r8
    2116:	f1 d0       	rcall	.+482    	; 0x22fa <__ultoa_invert>
    2118:	a8 2e       	mov	r10, r24
    211a:	a8 18       	sub	r10, r8
    211c:	fb 2d       	mov	r31, r11
    211e:	ff 77       	andi	r31, 0x7F	; 127
    2120:	bf 2e       	mov	r11, r31
    2122:	b6 fe       	sbrs	r11, 6
    2124:	0b c0       	rjmp	.+22     	; 0x213c <vfprintf+0x29a>
    2126:	2b 2d       	mov	r18, r11
    2128:	2e 7f       	andi	r18, 0xFE	; 254
    212a:	a5 14       	cp	r10, r5
    212c:	50 f4       	brcc	.+20     	; 0x2142 <vfprintf+0x2a0>
    212e:	b4 fe       	sbrs	r11, 4
    2130:	0a c0       	rjmp	.+20     	; 0x2146 <vfprintf+0x2a4>
    2132:	b2 fc       	sbrc	r11, 2
    2134:	08 c0       	rjmp	.+16     	; 0x2146 <vfprintf+0x2a4>
    2136:	2b 2d       	mov	r18, r11
    2138:	2e 7e       	andi	r18, 0xEE	; 238
    213a:	05 c0       	rjmp	.+10     	; 0x2146 <vfprintf+0x2a4>
    213c:	7a 2c       	mov	r7, r10
    213e:	2b 2d       	mov	r18, r11
    2140:	03 c0       	rjmp	.+6      	; 0x2148 <vfprintf+0x2a6>
    2142:	7a 2c       	mov	r7, r10
    2144:	01 c0       	rjmp	.+2      	; 0x2148 <vfprintf+0x2a6>
    2146:	75 2c       	mov	r7, r5
    2148:	24 ff       	sbrs	r18, 4
    214a:	0d c0       	rjmp	.+26     	; 0x2166 <vfprintf+0x2c4>
    214c:	fe 01       	movw	r30, r28
    214e:	ea 0d       	add	r30, r10
    2150:	f1 1d       	adc	r31, r1
    2152:	80 81       	ld	r24, Z
    2154:	80 33       	cpi	r24, 0x30	; 48
    2156:	11 f4       	brne	.+4      	; 0x215c <vfprintf+0x2ba>
    2158:	29 7e       	andi	r18, 0xE9	; 233
    215a:	09 c0       	rjmp	.+18     	; 0x216e <vfprintf+0x2cc>
    215c:	22 ff       	sbrs	r18, 2
    215e:	06 c0       	rjmp	.+12     	; 0x216c <vfprintf+0x2ca>
    2160:	73 94       	inc	r7
    2162:	73 94       	inc	r7
    2164:	04 c0       	rjmp	.+8      	; 0x216e <vfprintf+0x2cc>
    2166:	82 2f       	mov	r24, r18
    2168:	86 78       	andi	r24, 0x86	; 134
    216a:	09 f0       	breq	.+2      	; 0x216e <vfprintf+0x2cc>
    216c:	73 94       	inc	r7
    216e:	23 fd       	sbrc	r18, 3
    2170:	12 c0       	rjmp	.+36     	; 0x2196 <vfprintf+0x2f4>
    2172:	20 ff       	sbrs	r18, 0
    2174:	06 c0       	rjmp	.+12     	; 0x2182 <vfprintf+0x2e0>
    2176:	5a 2c       	mov	r5, r10
    2178:	73 14       	cp	r7, r3
    217a:	18 f4       	brcc	.+6      	; 0x2182 <vfprintf+0x2e0>
    217c:	53 0c       	add	r5, r3
    217e:	57 18       	sub	r5, r7
    2180:	73 2c       	mov	r7, r3
    2182:	73 14       	cp	r7, r3
    2184:	60 f4       	brcc	.+24     	; 0x219e <vfprintf+0x2fc>
    2186:	b7 01       	movw	r22, r14
    2188:	80 e2       	ldi	r24, 0x20	; 32
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	2c 87       	std	Y+12, r18	; 0x0c
    218e:	83 d0       	rcall	.+262    	; 0x2296 <fputc>
    2190:	73 94       	inc	r7
    2192:	2c 85       	ldd	r18, Y+12	; 0x0c
    2194:	f6 cf       	rjmp	.-20     	; 0x2182 <vfprintf+0x2e0>
    2196:	73 14       	cp	r7, r3
    2198:	10 f4       	brcc	.+4      	; 0x219e <vfprintf+0x2fc>
    219a:	37 18       	sub	r3, r7
    219c:	01 c0       	rjmp	.+2      	; 0x21a0 <vfprintf+0x2fe>
    219e:	31 2c       	mov	r3, r1
    21a0:	24 ff       	sbrs	r18, 4
    21a2:	11 c0       	rjmp	.+34     	; 0x21c6 <vfprintf+0x324>
    21a4:	b7 01       	movw	r22, r14
    21a6:	80 e3       	ldi	r24, 0x30	; 48
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	2c 87       	std	Y+12, r18	; 0x0c
    21ac:	74 d0       	rcall	.+232    	; 0x2296 <fputc>
    21ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    21b0:	22 ff       	sbrs	r18, 2
    21b2:	16 c0       	rjmp	.+44     	; 0x21e0 <vfprintf+0x33e>
    21b4:	21 ff       	sbrs	r18, 1
    21b6:	03 c0       	rjmp	.+6      	; 0x21be <vfprintf+0x31c>
    21b8:	88 e5       	ldi	r24, 0x58	; 88
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <vfprintf+0x320>
    21be:	88 e7       	ldi	r24, 0x78	; 120
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	b7 01       	movw	r22, r14
    21c4:	0c c0       	rjmp	.+24     	; 0x21de <vfprintf+0x33c>
    21c6:	82 2f       	mov	r24, r18
    21c8:	86 78       	andi	r24, 0x86	; 134
    21ca:	51 f0       	breq	.+20     	; 0x21e0 <vfprintf+0x33e>
    21cc:	21 fd       	sbrc	r18, 1
    21ce:	02 c0       	rjmp	.+4      	; 0x21d4 <vfprintf+0x332>
    21d0:	80 e2       	ldi	r24, 0x20	; 32
    21d2:	01 c0       	rjmp	.+2      	; 0x21d6 <vfprintf+0x334>
    21d4:	8b e2       	ldi	r24, 0x2B	; 43
    21d6:	27 fd       	sbrc	r18, 7
    21d8:	8d e2       	ldi	r24, 0x2D	; 45
    21da:	b7 01       	movw	r22, r14
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	5b d0       	rcall	.+182    	; 0x2296 <fputc>
    21e0:	a5 14       	cp	r10, r5
    21e2:	30 f4       	brcc	.+12     	; 0x21f0 <vfprintf+0x34e>
    21e4:	b7 01       	movw	r22, r14
    21e6:	80 e3       	ldi	r24, 0x30	; 48
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	55 d0       	rcall	.+170    	; 0x2296 <fputc>
    21ec:	5a 94       	dec	r5
    21ee:	f8 cf       	rjmp	.-16     	; 0x21e0 <vfprintf+0x33e>
    21f0:	aa 94       	dec	r10
    21f2:	f4 01       	movw	r30, r8
    21f4:	ea 0d       	add	r30, r10
    21f6:	f1 1d       	adc	r31, r1
    21f8:	80 81       	ld	r24, Z
    21fa:	b7 01       	movw	r22, r14
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	4b d0       	rcall	.+150    	; 0x2296 <fputc>
    2200:	a1 10       	cpse	r10, r1
    2202:	f6 cf       	rjmp	.-20     	; 0x21f0 <vfprintf+0x34e>
    2204:	33 20       	and	r3, r3
    2206:	09 f4       	brne	.+2      	; 0x220a <vfprintf+0x368>
    2208:	5d ce       	rjmp	.-838    	; 0x1ec4 <vfprintf+0x22>
    220a:	b7 01       	movw	r22, r14
    220c:	80 e2       	ldi	r24, 0x20	; 32
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	42 d0       	rcall	.+132    	; 0x2296 <fputc>
    2212:	3a 94       	dec	r3
    2214:	f7 cf       	rjmp	.-18     	; 0x2204 <vfprintf+0x362>
    2216:	f7 01       	movw	r30, r14
    2218:	86 81       	ldd	r24, Z+6	; 0x06
    221a:	97 81       	ldd	r25, Z+7	; 0x07
    221c:	02 c0       	rjmp	.+4      	; 0x2222 <vfprintf+0x380>
    221e:	8f ef       	ldi	r24, 0xFF	; 255
    2220:	9f ef       	ldi	r25, 0xFF	; 255
    2222:	2c 96       	adiw	r28, 0x0c	; 12
    2224:	e2 e1       	ldi	r30, 0x12	; 18
    2226:	e3 c0       	rjmp	.+454    	; 0x23ee <__epilogue_restores__>

00002228 <calloc>:
    2228:	0f 93       	push	r16
    222a:	1f 93       	push	r17
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
    2230:	86 9f       	mul	r24, r22
    2232:	80 01       	movw	r16, r0
    2234:	87 9f       	mul	r24, r23
    2236:	10 0d       	add	r17, r0
    2238:	96 9f       	mul	r25, r22
    223a:	10 0d       	add	r17, r0
    223c:	11 24       	eor	r1, r1
    223e:	c8 01       	movw	r24, r16
    2240:	5d dc       	rcall	.-1862   	; 0x1afc <malloc>
    2242:	ec 01       	movw	r28, r24
    2244:	00 97       	sbiw	r24, 0x00	; 0
    2246:	21 f0       	breq	.+8      	; 0x2250 <calloc+0x28>
    2248:	a8 01       	movw	r20, r16
    224a:	60 e0       	ldi	r22, 0x00	; 0
    224c:	70 e0       	ldi	r23, 0x00	; 0
    224e:	11 d0       	rcall	.+34     	; 0x2272 <memset>
    2250:	ce 01       	movw	r24, r28
    2252:	df 91       	pop	r29
    2254:	cf 91       	pop	r28
    2256:	1f 91       	pop	r17
    2258:	0f 91       	pop	r16
    225a:	08 95       	ret

0000225c <strnlen_P>:
    225c:	fc 01       	movw	r30, r24
    225e:	05 90       	lpm	r0, Z+
    2260:	61 50       	subi	r22, 0x01	; 1
    2262:	70 40       	sbci	r23, 0x00	; 0
    2264:	01 10       	cpse	r0, r1
    2266:	d8 f7       	brcc	.-10     	; 0x225e <strnlen_P+0x2>
    2268:	80 95       	com	r24
    226a:	90 95       	com	r25
    226c:	8e 0f       	add	r24, r30
    226e:	9f 1f       	adc	r25, r31
    2270:	08 95       	ret

00002272 <memset>:
    2272:	dc 01       	movw	r26, r24
    2274:	01 c0       	rjmp	.+2      	; 0x2278 <memset+0x6>
    2276:	6d 93       	st	X+, r22
    2278:	41 50       	subi	r20, 0x01	; 1
    227a:	50 40       	sbci	r21, 0x00	; 0
    227c:	e0 f7       	brcc	.-8      	; 0x2276 <memset+0x4>
    227e:	08 95       	ret

00002280 <strnlen>:
    2280:	fc 01       	movw	r30, r24
    2282:	61 50       	subi	r22, 0x01	; 1
    2284:	70 40       	sbci	r23, 0x00	; 0
    2286:	01 90       	ld	r0, Z+
    2288:	01 10       	cpse	r0, r1
    228a:	d8 f7       	brcc	.-10     	; 0x2282 <strnlen+0x2>
    228c:	80 95       	com	r24
    228e:	90 95       	com	r25
    2290:	8e 0f       	add	r24, r30
    2292:	9f 1f       	adc	r25, r31
    2294:	08 95       	ret

00002296 <fputc>:
    2296:	0f 93       	push	r16
    2298:	1f 93       	push	r17
    229a:	cf 93       	push	r28
    229c:	df 93       	push	r29
    229e:	18 2f       	mov	r17, r24
    22a0:	09 2f       	mov	r16, r25
    22a2:	eb 01       	movw	r28, r22
    22a4:	8b 81       	ldd	r24, Y+3	; 0x03
    22a6:	81 fd       	sbrc	r24, 1
    22a8:	03 c0       	rjmp	.+6      	; 0x22b0 <fputc+0x1a>
    22aa:	8f ef       	ldi	r24, 0xFF	; 255
    22ac:	9f ef       	ldi	r25, 0xFF	; 255
    22ae:	20 c0       	rjmp	.+64     	; 0x22f0 <fputc+0x5a>
    22b0:	82 ff       	sbrs	r24, 2
    22b2:	10 c0       	rjmp	.+32     	; 0x22d4 <fputc+0x3e>
    22b4:	4e 81       	ldd	r20, Y+6	; 0x06
    22b6:	5f 81       	ldd	r21, Y+7	; 0x07
    22b8:	2c 81       	ldd	r18, Y+4	; 0x04
    22ba:	3d 81       	ldd	r19, Y+5	; 0x05
    22bc:	42 17       	cp	r20, r18
    22be:	53 07       	cpc	r21, r19
    22c0:	7c f4       	brge	.+30     	; 0x22e0 <fputc+0x4a>
    22c2:	e8 81       	ld	r30, Y
    22c4:	f9 81       	ldd	r31, Y+1	; 0x01
    22c6:	9f 01       	movw	r18, r30
    22c8:	2f 5f       	subi	r18, 0xFF	; 255
    22ca:	3f 4f       	sbci	r19, 0xFF	; 255
    22cc:	39 83       	std	Y+1, r19	; 0x01
    22ce:	28 83       	st	Y, r18
    22d0:	10 83       	st	Z, r17
    22d2:	06 c0       	rjmp	.+12     	; 0x22e0 <fputc+0x4a>
    22d4:	e8 85       	ldd	r30, Y+8	; 0x08
    22d6:	f9 85       	ldd	r31, Y+9	; 0x09
    22d8:	81 2f       	mov	r24, r17
    22da:	09 95       	icall
    22dc:	89 2b       	or	r24, r25
    22de:	29 f7       	brne	.-54     	; 0x22aa <fputc+0x14>
    22e0:	2e 81       	ldd	r18, Y+6	; 0x06
    22e2:	3f 81       	ldd	r19, Y+7	; 0x07
    22e4:	2f 5f       	subi	r18, 0xFF	; 255
    22e6:	3f 4f       	sbci	r19, 0xFF	; 255
    22e8:	3f 83       	std	Y+7, r19	; 0x07
    22ea:	2e 83       	std	Y+6, r18	; 0x06
    22ec:	81 2f       	mov	r24, r17
    22ee:	90 2f       	mov	r25, r16
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	1f 91       	pop	r17
    22f6:	0f 91       	pop	r16
    22f8:	08 95       	ret

000022fa <__ultoa_invert>:
    22fa:	fa 01       	movw	r30, r20
    22fc:	aa 27       	eor	r26, r26
    22fe:	28 30       	cpi	r18, 0x08	; 8
    2300:	51 f1       	breq	.+84     	; 0x2356 <__ultoa_invert+0x5c>
    2302:	20 31       	cpi	r18, 0x10	; 16
    2304:	81 f1       	breq	.+96     	; 0x2366 <__ultoa_invert+0x6c>
    2306:	e8 94       	clt
    2308:	6f 93       	push	r22
    230a:	6e 7f       	andi	r22, 0xFE	; 254
    230c:	6e 5f       	subi	r22, 0xFE	; 254
    230e:	7f 4f       	sbci	r23, 0xFF	; 255
    2310:	8f 4f       	sbci	r24, 0xFF	; 255
    2312:	9f 4f       	sbci	r25, 0xFF	; 255
    2314:	af 4f       	sbci	r26, 0xFF	; 255
    2316:	b1 e0       	ldi	r27, 0x01	; 1
    2318:	3e d0       	rcall	.+124    	; 0x2396 <__ultoa_invert+0x9c>
    231a:	b4 e0       	ldi	r27, 0x04	; 4
    231c:	3c d0       	rcall	.+120    	; 0x2396 <__ultoa_invert+0x9c>
    231e:	67 0f       	add	r22, r23
    2320:	78 1f       	adc	r23, r24
    2322:	89 1f       	adc	r24, r25
    2324:	9a 1f       	adc	r25, r26
    2326:	a1 1d       	adc	r26, r1
    2328:	68 0f       	add	r22, r24
    232a:	79 1f       	adc	r23, r25
    232c:	8a 1f       	adc	r24, r26
    232e:	91 1d       	adc	r25, r1
    2330:	a1 1d       	adc	r26, r1
    2332:	6a 0f       	add	r22, r26
    2334:	71 1d       	adc	r23, r1
    2336:	81 1d       	adc	r24, r1
    2338:	91 1d       	adc	r25, r1
    233a:	a1 1d       	adc	r26, r1
    233c:	20 d0       	rcall	.+64     	; 0x237e <__ultoa_invert+0x84>
    233e:	09 f4       	brne	.+2      	; 0x2342 <__ultoa_invert+0x48>
    2340:	68 94       	set
    2342:	3f 91       	pop	r19
    2344:	2a e0       	ldi	r18, 0x0A	; 10
    2346:	26 9f       	mul	r18, r22
    2348:	11 24       	eor	r1, r1
    234a:	30 19       	sub	r19, r0
    234c:	30 5d       	subi	r19, 0xD0	; 208
    234e:	31 93       	st	Z+, r19
    2350:	de f6       	brtc	.-74     	; 0x2308 <__ultoa_invert+0xe>
    2352:	cf 01       	movw	r24, r30
    2354:	08 95       	ret
    2356:	46 2f       	mov	r20, r22
    2358:	47 70       	andi	r20, 0x07	; 7
    235a:	40 5d       	subi	r20, 0xD0	; 208
    235c:	41 93       	st	Z+, r20
    235e:	b3 e0       	ldi	r27, 0x03	; 3
    2360:	0f d0       	rcall	.+30     	; 0x2380 <__ultoa_invert+0x86>
    2362:	c9 f7       	brne	.-14     	; 0x2356 <__ultoa_invert+0x5c>
    2364:	f6 cf       	rjmp	.-20     	; 0x2352 <__ultoa_invert+0x58>
    2366:	46 2f       	mov	r20, r22
    2368:	4f 70       	andi	r20, 0x0F	; 15
    236a:	40 5d       	subi	r20, 0xD0	; 208
    236c:	4a 33       	cpi	r20, 0x3A	; 58
    236e:	18 f0       	brcs	.+6      	; 0x2376 <__ultoa_invert+0x7c>
    2370:	49 5d       	subi	r20, 0xD9	; 217
    2372:	31 fd       	sbrc	r19, 1
    2374:	40 52       	subi	r20, 0x20	; 32
    2376:	41 93       	st	Z+, r20
    2378:	02 d0       	rcall	.+4      	; 0x237e <__ultoa_invert+0x84>
    237a:	a9 f7       	brne	.-22     	; 0x2366 <__ultoa_invert+0x6c>
    237c:	ea cf       	rjmp	.-44     	; 0x2352 <__ultoa_invert+0x58>
    237e:	b4 e0       	ldi	r27, 0x04	; 4
    2380:	a6 95       	lsr	r26
    2382:	97 95       	ror	r25
    2384:	87 95       	ror	r24
    2386:	77 95       	ror	r23
    2388:	67 95       	ror	r22
    238a:	ba 95       	dec	r27
    238c:	c9 f7       	brne	.-14     	; 0x2380 <__ultoa_invert+0x86>
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	61 05       	cpc	r22, r1
    2392:	71 05       	cpc	r23, r1
    2394:	08 95       	ret
    2396:	9b 01       	movw	r18, r22
    2398:	ac 01       	movw	r20, r24
    239a:	0a 2e       	mov	r0, r26
    239c:	06 94       	lsr	r0
    239e:	57 95       	ror	r21
    23a0:	47 95       	ror	r20
    23a2:	37 95       	ror	r19
    23a4:	27 95       	ror	r18
    23a6:	ba 95       	dec	r27
    23a8:	c9 f7       	brne	.-14     	; 0x239c <__ultoa_invert+0xa2>
    23aa:	62 0f       	add	r22, r18
    23ac:	73 1f       	adc	r23, r19
    23ae:	84 1f       	adc	r24, r20
    23b0:	95 1f       	adc	r25, r21
    23b2:	a0 1d       	adc	r26, r0
    23b4:	08 95       	ret

000023b6 <__prologue_saves__>:
    23b6:	2f 92       	push	r2
    23b8:	3f 92       	push	r3
    23ba:	4f 92       	push	r4
    23bc:	5f 92       	push	r5
    23be:	6f 92       	push	r6
    23c0:	7f 92       	push	r7
    23c2:	8f 92       	push	r8
    23c4:	9f 92       	push	r9
    23c6:	af 92       	push	r10
    23c8:	bf 92       	push	r11
    23ca:	cf 92       	push	r12
    23cc:	df 92       	push	r13
    23ce:	ef 92       	push	r14
    23d0:	ff 92       	push	r15
    23d2:	0f 93       	push	r16
    23d4:	1f 93       	push	r17
    23d6:	cf 93       	push	r28
    23d8:	df 93       	push	r29
    23da:	cd b7       	in	r28, 0x3d	; 61
    23dc:	de b7       	in	r29, 0x3e	; 62
    23de:	ca 1b       	sub	r28, r26
    23e0:	db 0b       	sbc	r29, r27
    23e2:	0f b6       	in	r0, 0x3f	; 63
    23e4:	f8 94       	cli
    23e6:	de bf       	out	0x3e, r29	; 62
    23e8:	0f be       	out	0x3f, r0	; 63
    23ea:	cd bf       	out	0x3d, r28	; 61
    23ec:	09 94       	ijmp

000023ee <__epilogue_restores__>:
    23ee:	2a 88       	ldd	r2, Y+18	; 0x12
    23f0:	39 88       	ldd	r3, Y+17	; 0x11
    23f2:	48 88       	ldd	r4, Y+16	; 0x10
    23f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    23f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    23f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    23fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    23fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    23fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    2400:	b9 84       	ldd	r11, Y+9	; 0x09
    2402:	c8 84       	ldd	r12, Y+8	; 0x08
    2404:	df 80       	ldd	r13, Y+7	; 0x07
    2406:	ee 80       	ldd	r14, Y+6	; 0x06
    2408:	fd 80       	ldd	r15, Y+5	; 0x05
    240a:	0c 81       	ldd	r16, Y+4	; 0x04
    240c:	1b 81       	ldd	r17, Y+3	; 0x03
    240e:	aa 81       	ldd	r26, Y+2	; 0x02
    2410:	b9 81       	ldd	r27, Y+1	; 0x01
    2412:	ce 0f       	add	r28, r30
    2414:	d1 1d       	adc	r29, r1
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	de bf       	out	0x3e, r29	; 62
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	cd bf       	out	0x3d, r28	; 61
    2420:	ed 01       	movw	r28, r26
    2422:	08 95       	ret

00002424 <_exit>:
    2424:	f8 94       	cli

00002426 <__stop_program>:
    2426:	ff cf       	rjmp	.-2      	; 0x2426 <__stop_program>
