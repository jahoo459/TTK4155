
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d6  00800100  00001e98  00001f2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  008003d6  008003d6  00002202  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002202  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000308  00000000  00000000  0000225e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003c22  00000000  00000000  00002566  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000120e  00000000  00000000  00006188  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001822  00000000  00000000  00007396  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000790  00000000  00000000  00008bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e3d  00000000  00000000  00009348  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000207d  00000000  00000000  0000a185  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003f0  00000000  00000000  0000c202  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	fa c1       	rjmp	.+1012   	; 0x402 <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <JOY_calibrate+0x230>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e8 e9       	ldi	r30, 0x98	; 152
     37c:	fe e1       	ldi	r31, 0x1E	; 30
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a6 3d       	cpi	r26, 0xD6	; 214
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a6 ed       	ldi	r26, 0xD6	; 214
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	af 3f       	cpi	r26, 0xFF	; 255
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	81 d0       	rcall	.+258    	; 0x49e <main>
     39c:	0c 94 4a 0f 	jmp	0x1e94	; 0x1e94 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 ef 03 	sts	0x03EF, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 da 03 	sts	0x03DA, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 d9 03 	sts	0x03D9, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 d7 03 	sts	0x03D7, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_3>:
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	8f 93       	push	r24
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 d6 03 	sts	0x03D6, r24
     414:	8f 91       	pop	r24
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <init>:
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	1f e1       	ldi	r17, 0x1F	; 31
     42a:	e1 2e       	mov	r14, r17
     42c:	f1 2c       	mov	r15, r1
     42e:	00 e0       	ldi	r16, 0x00	; 0
     430:	10 e0       	ldi	r17, 0x00	; 0
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	4b e4       	ldi	r20, 0x4B	; 75
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e8       	ldi	r22, 0x80	; 128
     43c:	75 e2       	ldi	r23, 0x25	; 37
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 6f 0a 	call	0x14de	; 0x14de <uartInit>
     446:	82 eb       	ldi	r24, 0xB2	; 178
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <puts>
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	3b d2       	rcall	.+1142   	; 0x8c8 <enableXMEM>
     452:	0e 94 3d 0a 	call	0x147a	; 0x147a <SLI_init>
     456:	4a d2       	rcall	.+1172   	; 0x8ec <JOY_init>
     458:	0d d7       	rcall	.+3610   	; 0x1274 <OLED_init>
     45a:	0e 94 46 0a 	call	0x148c	; 0x148c <SPI_init>
     45e:	46 d4       	rcall	.+2188   	; 0xcec <MCP2515_init>
     460:	92 d0       	rcall	.+292    	; 0x586 <CAN_init>
     462:	8b b7       	in	r24, 0x3b	; 59
     464:	80 64       	ori	r24, 0x40	; 64
     466:	8b bf       	out	0x3b, r24	; 59
     468:	85 b7       	in	r24, 0x35	; 53
     46a:	82 60       	ori	r24, 0x02	; 2
     46c:	85 bf       	out	0x35, r24	; 53
     46e:	85 b7       	in	r24, 0x35	; 53
     470:	8e 7f       	andi	r24, 0xFE	; 254
     472:	85 bf       	out	0x35, r24	; 53
     474:	8b 98       	cbi	0x11, 3	; 17
     476:	93 9a       	sbi	0x12, 3	; 18
     478:	8b b7       	in	r24, 0x3b	; 59
     47a:	80 68       	ori	r24, 0x80	; 128
     47c:	8b bf       	out	0x3b, r24	; 59
     47e:	85 b7       	in	r24, 0x35	; 53
     480:	88 60       	ori	r24, 0x08	; 8
     482:	85 bf       	out	0x35, r24	; 53
     484:	85 b7       	in	r24, 0x35	; 53
     486:	8b 7f       	andi	r24, 0xFB	; 251
     488:	85 bf       	out	0x35, r24	; 53
     48a:	32 98       	cbi	0x06, 2	; 6
     48c:	3a 98       	cbi	0x07, 2	; 7
     48e:	b8 98       	cbi	0x17, 0	; 23
     490:	c0 98       	cbi	0x18, 0	; 24
     492:	78 94       	sei
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	ff 90       	pop	r15
     49a:	ef 90       	pop	r14
     49c:	08 95       	ret

0000049e <main>:
/*
=======================MAIN FUNCTION=========================
*/

int main(void)
{
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	ac 97       	sbiw	r28, 0x2c	; 44
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
	
	init();
     4b2:	b6 df       	rcall	.-148    	; 0x420 <init>

// 	MCP2515_init();
// 	CAN_init();
	
	struct can_message message2send;
	message2send.id = 23;
     4b4:	87 e1       	ldi	r24, 0x17	; 23
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	9a 83       	std	Y+2, r25	; 0x02
     4ba:	89 83       	std	Y+1, r24	; 0x01
	message2send.length = 8;
     4bc:	88 e0       	ldi	r24, 0x08	; 8
     4be:	8b 83       	std	Y+3, r24	; 0x03
	message2send.data[0] = '@';
     4c0:	80 e4       	ldi	r24, 0x40	; 64
     4c2:	8c 83       	std	Y+4, r24	; 0x04
	message2send.data[1] = '~';
     4c4:	8e e7       	ldi	r24, 0x7E	; 126
     4c6:	8d 83       	std	Y+5, r24	; 0x05
	message2send.data[2] = 'H';
     4c8:	88 e4       	ldi	r24, 0x48	; 72
     4ca:	8e 83       	std	Y+6, r24	; 0x06
	message2send.data[3] = 'l';
     4cc:	8c e6       	ldi	r24, 0x6C	; 108
     4ce:	8f 83       	std	Y+7, r24	; 0x07
	message2send.data[4] = '1';
     4d0:	81 e3       	ldi	r24, 0x31	; 49
     4d2:	88 87       	std	Y+8, r24	; 0x08
	message2send.data[5] = '.';
     4d4:	8e e2       	ldi	r24, 0x2E	; 46
     4d6:	89 87       	std	Y+9, r24	; 0x09
	message2send.data[6] = '/';
     4d8:	8f e2       	ldi	r24, 0x2F	; 47
     4da:	8a 87       	std	Y+10, r24	; 0x0a
	message2send.data[7] = '5';
     4dc:	85 e3       	ldi	r24, 0x35	; 53
     4de:	8b 87       	std	Y+11, r24	; 0x0b
	CAN_sendMessage(&message2send, 0);
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	ce 01       	movw	r24, r28
     4e4:	01 96       	adiw	r24, 0x01	; 1
     4e6:	66 d0       	rcall	.+204    	; 0x5b4 <CAN_sendMessage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e8:	2f ef       	ldi	r18, 0xFF	; 255
     4ea:	8f e7       	ldi	r24, 0x7F	; 127
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	21 50       	subi	r18, 0x01	; 1
     4f0:	80 40       	sbci	r24, 0x00	; 0
     4f2:	90 40       	sbci	r25, 0x00	; 0
     4f4:	e1 f7       	brne	.-8      	; 0x4ee <main+0x50>
     4f6:	00 c0       	rjmp	.+0      	; 0x4f8 <main+0x5a>
     4f8:	00 c0       	rjmp	.+0      	; 0x4fa <main+0x5c>
	_delay_ms(100);
	
	struct can_message message3send;
	message3send.id = 12;
     4fa:	8c e0       	ldi	r24, 0x0C	; 12
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	9d 87       	std	Y+13, r25	; 0x0d
     500:	8c 87       	std	Y+12, r24	; 0x0c
	message3send.length = 2;
     502:	82 e0       	ldi	r24, 0x02	; 2
     504:	8e 87       	std	Y+14, r24	; 0x0e
	message3send.data[0] = 'a';
     506:	81 e6       	ldi	r24, 0x61	; 97
     508:	8f 87       	std	Y+15, r24	; 0x0f
	message3send.data[1] = '+';
     50a:	8b e2       	ldi	r24, 0x2B	; 43
     50c:	88 8b       	std	Y+16, r24	; 0x10
	
	uint8_t SPIcount = 0;
     50e:	10 e0       	ldi	r17, 0x00	; 0
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     510:	0b e0       	ldi	r16, 0x0B	; 11
			
				if(SPIcount == 0)
				{
					CAN_sendMessage(&message3send, 0);
					_delay_ms(100);
					SPIcount = 1;
     512:	ff 24       	eor	r15, r15
     514:	f3 94       	inc	r15
	uint8_t SPIcount = 0;
	
    while(1)
    {
		// statusMultifunctionBoard();
		JOY_getDirection();
     516:	aa d3       	rcall	.+1876   	; 0xc6c <JOY_getDirection>

		// todo: remove! will be included in the menu driver later
		if(JOYcalibFlag)
     518:	80 91 d8 03 	lds	r24, 0x03D8
     51c:	88 23       	and	r24, r24
     51e:	19 f0       	breq	.+6      	; 0x526 <__stack+0x27>
		{
			//run joystick calibration
			JOY_calibrate();
     520:	f8 d1       	rcall	.+1008   	; 0x912 <JOY_calibrate>
			JOYcalibFlag = 0;
     522:	10 92 d8 03 	sts	0x03D8, r1
		}

		if(activateMenuFlag)
     526:	80 91 d7 03 	lds	r24, 0x03D7
     52a:	81 11       	cpse	r24, r1
		{
			MENU_activate();
     52c:	5a d6       	rcall	.+3252   	; 0x11e2 <MENU_activate>
		}

		if(SPIreceivedFlag)
     52e:	80 91 d6 03 	lds	r24, 0x03D6
     532:	88 23       	and	r24, r24
     534:	81 f3       	breq	.-32     	; 0x516 <__stack+0x17>
		{
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
     536:	6c e2       	ldi	r22, 0x2C	; 44
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	c1 d3       	rcall	.+1922   	; 0xcbe <MCP2515_read>
     53c:	83 70       	andi	r24, 0x03	; 3
     53e:	59 f3       	breq	.-42     	; 0x516 <__stack+0x17>
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     540:	68 2f       	mov	r22, r24
     542:	ce 01       	movw	r24, r28
     544:	82 96       	adiw	r24, 0x22	; 34
     546:	9f d0       	rcall	.+318    	; 0x686 <CAN_receiveMessage>
     548:	fe 01       	movw	r30, r28
     54a:	b2 96       	adiw	r30, 0x22	; 34
     54c:	de 01       	movw	r26, r28
     54e:	57 96       	adiw	r26, 0x17	; 23
     550:	80 2f       	mov	r24, r16
     552:	01 90       	ld	r0, Z+
     554:	0d 92       	st	X+, r0
     556:	8a 95       	dec	r24
     558:	e1 f7       	brne	.-8      	; 0x552 <__stack+0x53>
	// 			{
	// 				printf(" %c", receivedMessage.data[i]);
	// 			}
	// 			printf("\n");

				CAN_printMessage(&receivedMessage);
     55a:	ce 01       	movw	r24, r28
     55c:	47 96       	adiw	r24, 0x17	; 23
     55e:	5c d1       	rcall	.+696    	; 0x818 <CAN_printMessage>
			
				SPIreceivedFlag = 0;
     560:	10 92 d6 03 	sts	0x03D6, r1
			
				if(SPIcount == 0)
     564:	11 11       	cpse	r17, r1
     566:	d7 cf       	rjmp	.-82     	; 0x516 <__stack+0x17>
				{
					CAN_sendMessage(&message3send, 0);
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	ce 01       	movw	r24, r28
     56c:	0c 96       	adiw	r24, 0x0c	; 12
     56e:	22 d0       	rcall	.+68     	; 0x5b4 <CAN_sendMessage>
     570:	2f ef       	ldi	r18, 0xFF	; 255
     572:	8f e7       	ldi	r24, 0x7F	; 127
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	21 50       	subi	r18, 0x01	; 1
     578:	80 40       	sbci	r24, 0x00	; 0
     57a:	90 40       	sbci	r25, 0x00	; 0
     57c:	e1 f7       	brne	.-8      	; 0x576 <__stack+0x77>
     57e:	00 c0       	rjmp	.+0      	; 0x580 <__stack+0x81>
     580:	00 c0       	rjmp	.+0      	; 0x582 <__stack+0x83>
					_delay_ms(100);
					SPIcount = 1;
     582:	1f 2d       	mov	r17, r15
     584:	c8 cf       	rjmp	.-112    	; 0x516 <__stack+0x17>

00000586 <CAN_init>:
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
     58e:	43 e0       	ldi	r20, 0x03	; 3
     590:	6b e2       	ldi	r22, 0x2B	; 43
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	c5 d3       	rcall	.+1930   	; 0xd22 <MCP2515_write>
     598:	40 e6       	ldi	r20, 0x60	; 96
     59a:	60 e6       	ldi	r22, 0x60	; 96
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	c0 d3       	rcall	.+1920   	; 0xd22 <MCP2515_write>
     5a2:	20 e4       	ldi	r18, 0x40	; 64
     5a4:	40 ec       	ldi	r20, 0xC0	; 192
     5a6:	6f e0       	ldi	r22, 0x0F	; 15
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	cd d3       	rcall	.+1946   	; 0xd48 <MCP2515_bitModify>
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <CAN_sendMessage>:
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	27 97       	sbiw	r28, 0x07	; 7
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	9e 83       	std	Y+6, r25	; 0x06
     5ca:	8d 83       	std	Y+5, r24	; 0x05
     5cc:	6f 83       	std	Y+7, r22	; 0x07
     5ce:	8f 81       	ldd	r24, Y+7	; 0x07
     5d0:	88 2f       	mov	r24, r24
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	00 97       	sbiw	r24, 0x00	; 0
     5d6:	09 f0       	breq	.+2      	; 0x5da <CAN_sendMessage+0x26>
     5d8:	4d c0       	rjmp	.+154    	; 0x674 <CAN_sendMessage+0xc0>
     5da:	8d 81       	ldd	r24, Y+5	; 0x05
     5dc:	9e 81       	ldd	r25, Y+6	; 0x06
     5de:	fc 01       	movw	r30, r24
     5e0:	80 81       	ld	r24, Z
     5e2:	91 81       	ldd	r25, Z+1	; 0x01
     5e4:	9c 83       	std	Y+4, r25	; 0x04
     5e6:	8b 83       	std	Y+3, r24	; 0x03
     5e8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ea:	82 95       	swap	r24
     5ec:	88 0f       	add	r24, r24
     5ee:	80 7e       	andi	r24, 0xE0	; 224
     5f0:	48 2f       	mov	r20, r24
     5f2:	62 e3       	ldi	r22, 0x32	; 50
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	94 d3       	rcall	.+1832   	; 0xd22 <MCP2515_write>
     5fa:	8b 81       	ldd	r24, Y+3	; 0x03
     5fc:	9c 81       	ldd	r25, Y+4	; 0x04
     5fe:	96 95       	lsr	r25
     600:	87 95       	ror	r24
     602:	96 95       	lsr	r25
     604:	87 95       	ror	r24
     606:	96 95       	lsr	r25
     608:	87 95       	ror	r24
     60a:	48 2f       	mov	r20, r24
     60c:	61 e3       	ldi	r22, 0x31	; 49
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	87 d3       	rcall	.+1806   	; 0xd22 <MCP2515_write>
     614:	8d 81       	ldd	r24, Y+5	; 0x05
     616:	9e 81       	ldd	r25, Y+6	; 0x06
     618:	fc 01       	movw	r30, r24
     61a:	82 81       	ldd	r24, Z+2	; 0x02
     61c:	48 2f       	mov	r20, r24
     61e:	65 e3       	ldi	r22, 0x35	; 53
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	7e d3       	rcall	.+1788   	; 0xd22 <MCP2515_write>
     626:	86 e3       	ldi	r24, 0x36	; 54
     628:	89 83       	std	Y+1, r24	; 0x01
     62a:	1a 82       	std	Y+2, r1	; 0x02
     62c:	15 c0       	rjmp	.+42     	; 0x658 <CAN_sendMessage+0xa4>
     62e:	8a 81       	ldd	r24, Y+2	; 0x02
     630:	88 2f       	mov	r24, r24
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	2d 81       	ldd	r18, Y+5	; 0x05
     636:	3e 81       	ldd	r19, Y+6	; 0x06
     638:	82 0f       	add	r24, r18
     63a:	93 1f       	adc	r25, r19
     63c:	03 96       	adiw	r24, 0x03	; 3
     63e:	fc 01       	movw	r30, r24
     640:	80 81       	ld	r24, Z
     642:	48 2f       	mov	r20, r24
     644:	69 81       	ldd	r22, Y+1	; 0x01
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	6b d3       	rcall	.+1750   	; 0xd22 <MCP2515_write>
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	8f 5f       	subi	r24, 0xFF	; 255
     650:	89 83       	std	Y+1, r24	; 0x01
     652:	8a 81       	ldd	r24, Y+2	; 0x02
     654:	8f 5f       	subi	r24, 0xFF	; 255
     656:	8a 83       	std	Y+2, r24	; 0x02
     658:	8d 81       	ldd	r24, Y+5	; 0x05
     65a:	9e 81       	ldd	r25, Y+6	; 0x06
     65c:	fc 01       	movw	r30, r24
     65e:	92 81       	ldd	r25, Z+2	; 0x02
     660:	8a 81       	ldd	r24, Y+2	; 0x02
     662:	89 17       	cp	r24, r25
     664:	20 f3       	brcs	.-56     	; 0x62e <CAN_sendMessage+0x7a>
     666:	2f ef       	ldi	r18, 0xFF	; 255
     668:	48 e0       	ldi	r20, 0x08	; 8
     66a:	60 e3       	ldi	r22, 0x30	; 48
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	6b d3       	rcall	.+1750   	; 0xd48 <MCP2515_bitModify>
     672:	00 00       	nop
     674:	27 96       	adiw	r28, 0x07	; 7
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	f8 94       	cli
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	cd bf       	out	0x3d, r28	; 61
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <CAN_receiveMessage>:
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	cd b7       	in	r28, 0x3d	; 61
     690:	de b7       	in	r29, 0x3e	; 62
     692:	61 97       	sbiw	r28, 0x11	; 17
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	f8 94       	cli
     698:	de bf       	out	0x3e, r29	; 62
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	cd bf       	out	0x3d, r28	; 61
     69e:	98 8b       	std	Y+16, r25	; 0x10
     6a0:	8f 87       	std	Y+15, r24	; 0x0f
     6a2:	69 8b       	std	Y+17, r22	; 0x11
     6a4:	89 89       	ldd	r24, Y+17	; 0x11
     6a6:	88 2f       	mov	r24, r24
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	82 30       	cpi	r24, 0x02	; 2
     6ac:	91 05       	cpc	r25, r1
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <CAN_receiveMessage+0x2c>
     6b0:	57 c0       	rjmp	.+174    	; 0x760 <CAN_receiveMessage+0xda>
     6b2:	83 30       	cpi	r24, 0x03	; 3
     6b4:	91 05       	cpc	r25, r1
     6b6:	21 f0       	breq	.+8      	; 0x6c0 <CAN_receiveMessage+0x3a>
     6b8:	81 30       	cpi	r24, 0x01	; 1
     6ba:	91 05       	cpc	r25, r1
     6bc:	09 f0       	breq	.+2      	; 0x6c0 <CAN_receiveMessage+0x3a>
     6be:	9f c0       	rjmp	.+318    	; 0x7fe <CAN_receiveMessage+0x178>
     6c0:	61 e6       	ldi	r22, 0x61	; 97
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	fb d2       	rcall	.+1526   	; 0xcbe <MCP2515_read>
     6c8:	88 2f       	mov	r24, r24
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	9d 83       	std	Y+5, r25	; 0x05
     6ce:	8c 83       	std	Y+4, r24	; 0x04
     6d0:	8c 81       	ldd	r24, Y+4	; 0x04
     6d2:	9d 81       	ldd	r25, Y+5	; 0x05
     6d4:	8c 01       	movw	r16, r24
     6d6:	00 0f       	add	r16, r16
     6d8:	11 1f       	adc	r17, r17
     6da:	00 0f       	add	r16, r16
     6dc:	11 1f       	adc	r17, r17
     6de:	00 0f       	add	r16, r16
     6e0:	11 1f       	adc	r17, r17
     6e2:	62 e6       	ldi	r22, 0x62	; 98
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	ea d2       	rcall	.+1492   	; 0xcbe <MCP2515_read>
     6ea:	82 95       	swap	r24
     6ec:	86 95       	lsr	r24
     6ee:	87 70       	andi	r24, 0x07	; 7
     6f0:	88 2f       	mov	r24, r24
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	80 2b       	or	r24, r16
     6f6:	91 2b       	or	r25, r17
     6f8:	9d 83       	std	Y+5, r25	; 0x05
     6fa:	8c 83       	std	Y+4, r24	; 0x04
     6fc:	65 e6       	ldi	r22, 0x65	; 101
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	dd d2       	rcall	.+1466   	; 0xcbe <MCP2515_read>
     704:	8e 83       	std	Y+6, r24	; 0x06
     706:	86 e6       	ldi	r24, 0x66	; 102
     708:	89 83       	std	Y+1, r24	; 0x01
     70a:	1a 82       	std	Y+2, r1	; 0x02
     70c:	14 c0       	rjmp	.+40     	; 0x736 <CAN_receiveMessage+0xb0>
     70e:	8a 81       	ldd	r24, Y+2	; 0x02
     710:	08 2f       	mov	r16, r24
     712:	10 e0       	ldi	r17, 0x00	; 0
     714:	69 81       	ldd	r22, Y+1	; 0x01
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	d1 d2       	rcall	.+1442   	; 0xcbe <MCP2515_read>
     71c:	28 2f       	mov	r18, r24
     71e:	ce 01       	movw	r24, r28
     720:	07 96       	adiw	r24, 0x07	; 7
     722:	80 0f       	add	r24, r16
     724:	91 1f       	adc	r25, r17
     726:	fc 01       	movw	r30, r24
     728:	20 83       	st	Z, r18
     72a:	89 81       	ldd	r24, Y+1	; 0x01
     72c:	8f 5f       	subi	r24, 0xFF	; 255
     72e:	89 83       	std	Y+1, r24	; 0x01
     730:	8a 81       	ldd	r24, Y+2	; 0x02
     732:	8f 5f       	subi	r24, 0xFF	; 255
     734:	8a 83       	std	Y+2, r24	; 0x02
     736:	9e 81       	ldd	r25, Y+6	; 0x06
     738:	8a 81       	ldd	r24, Y+2	; 0x02
     73a:	89 17       	cp	r24, r25
     73c:	40 f3       	brcs	.-48     	; 0x70e <CAN_receiveMessage+0x88>
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	41 e0       	ldi	r20, 0x01	; 1
     742:	6c e2       	ldi	r22, 0x2C	; 44
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	ff d2       	rcall	.+1534   	; 0xd48 <MCP2515_bitModify>
     74a:	8f 85       	ldd	r24, Y+15	; 0x0f
     74c:	98 89       	ldd	r25, Y+16	; 0x10
     74e:	2b e0       	ldi	r18, 0x0B	; 11
     750:	fe 01       	movw	r30, r28
     752:	34 96       	adiw	r30, 0x04	; 4
     754:	dc 01       	movw	r26, r24
     756:	01 90       	ld	r0, Z+
     758:	0d 92       	st	X+, r0
     75a:	2a 95       	dec	r18
     75c:	e1 f7       	brne	.-8      	; 0x756 <CAN_receiveMessage+0xd0>
     75e:	4f c0       	rjmp	.+158    	; 0x7fe <CAN_receiveMessage+0x178>
     760:	61 e7       	ldi	r22, 0x71	; 113
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	ab d2       	rcall	.+1366   	; 0xcbe <MCP2515_read>
     768:	88 2f       	mov	r24, r24
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	9d 83       	std	Y+5, r25	; 0x05
     76e:	8c 83       	std	Y+4, r24	; 0x04
     770:	8c 81       	ldd	r24, Y+4	; 0x04
     772:	9d 81       	ldd	r25, Y+5	; 0x05
     774:	8c 01       	movw	r16, r24
     776:	00 0f       	add	r16, r16
     778:	11 1f       	adc	r17, r17
     77a:	00 0f       	add	r16, r16
     77c:	11 1f       	adc	r17, r17
     77e:	00 0f       	add	r16, r16
     780:	11 1f       	adc	r17, r17
     782:	62 e7       	ldi	r22, 0x72	; 114
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	9a d2       	rcall	.+1332   	; 0xcbe <MCP2515_read>
     78a:	82 95       	swap	r24
     78c:	86 95       	lsr	r24
     78e:	87 70       	andi	r24, 0x07	; 7
     790:	88 2f       	mov	r24, r24
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	80 2b       	or	r24, r16
     796:	91 2b       	or	r25, r17
     798:	9d 83       	std	Y+5, r25	; 0x05
     79a:	8c 83       	std	Y+4, r24	; 0x04
     79c:	65 e7       	ldi	r22, 0x75	; 117
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	8d d2       	rcall	.+1306   	; 0xcbe <MCP2515_read>
     7a4:	8e 83       	std	Y+6, r24	; 0x06
     7a6:	86 e7       	ldi	r24, 0x76	; 118
     7a8:	89 83       	std	Y+1, r24	; 0x01
     7aa:	1b 82       	std	Y+3, r1	; 0x03
     7ac:	14 c0       	rjmp	.+40     	; 0x7d6 <CAN_receiveMessage+0x150>
     7ae:	8b 81       	ldd	r24, Y+3	; 0x03
     7b0:	08 2f       	mov	r16, r24
     7b2:	10 e0       	ldi	r17, 0x00	; 0
     7b4:	69 81       	ldd	r22, Y+1	; 0x01
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	81 d2       	rcall	.+1282   	; 0xcbe <MCP2515_read>
     7bc:	28 2f       	mov	r18, r24
     7be:	ce 01       	movw	r24, r28
     7c0:	07 96       	adiw	r24, 0x07	; 7
     7c2:	80 0f       	add	r24, r16
     7c4:	91 1f       	adc	r25, r17
     7c6:	fc 01       	movw	r30, r24
     7c8:	20 83       	st	Z, r18
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	8f 5f       	subi	r24, 0xFF	; 255
     7ce:	89 83       	std	Y+1, r24	; 0x01
     7d0:	8b 81       	ldd	r24, Y+3	; 0x03
     7d2:	8f 5f       	subi	r24, 0xFF	; 255
     7d4:	8b 83       	std	Y+3, r24	; 0x03
     7d6:	9e 81       	ldd	r25, Y+6	; 0x06
     7d8:	8b 81       	ldd	r24, Y+3	; 0x03
     7da:	89 17       	cp	r24, r25
     7dc:	40 f3       	brcs	.-48     	; 0x7ae <CAN_receiveMessage+0x128>
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	42 e0       	ldi	r20, 0x02	; 2
     7e2:	6c e2       	ldi	r22, 0x2C	; 44
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	af d2       	rcall	.+1374   	; 0xd48 <MCP2515_bitModify>
     7ea:	8f 85       	ldd	r24, Y+15	; 0x0f
     7ec:	98 89       	ldd	r25, Y+16	; 0x10
     7ee:	2b e0       	ldi	r18, 0x0B	; 11
     7f0:	fe 01       	movw	r30, r28
     7f2:	34 96       	adiw	r30, 0x04	; 4
     7f4:	dc 01       	movw	r26, r24
     7f6:	01 90       	ld	r0, Z+
     7f8:	0d 92       	st	X+, r0
     7fa:	2a 95       	dec	r18
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <CAN_receiveMessage+0x170>
     7fe:	8f 85       	ldd	r24, Y+15	; 0x0f
     800:	98 89       	ldd	r25, Y+16	; 0x10
     802:	61 96       	adiw	r28, 0x11	; 17
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	de bf       	out	0x3e, r29	; 62
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	cd bf       	out	0x3d, r28	; 61
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	08 95       	ret

00000818 <CAN_printMessage>:
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	00 d0       	rcall	.+0      	; 0x81e <CAN_printMessage+0x6>
     81e:	1f 92       	push	r1
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	9b 83       	std	Y+3, r25	; 0x03
     826:	8a 83       	std	Y+2, r24	; 0x02
     828:	8a 81       	ldd	r24, Y+2	; 0x02
     82a:	9b 81       	ldd	r25, Y+3	; 0x03
     82c:	fc 01       	movw	r30, r24
     82e:	82 81       	ldd	r24, Z+2	; 0x02
     830:	28 2f       	mov	r18, r24
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	8a 81       	ldd	r24, Y+2	; 0x02
     836:	9b 81       	ldd	r25, Y+3	; 0x03
     838:	fc 01       	movw	r30, r24
     83a:	80 81       	ld	r24, Z
     83c:	91 81       	ldd	r25, Z+1	; 0x01
     83e:	43 2f       	mov	r20, r19
     840:	4f 93       	push	r20
     842:	2f 93       	push	r18
     844:	29 2f       	mov	r18, r25
     846:	2f 93       	push	r18
     848:	8f 93       	push	r24
     84a:	84 e1       	ldi	r24, 0x14	; 20
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	89 2f       	mov	r24, r25
     850:	8f 93       	push	r24
     852:	84 e1       	ldi	r24, 0x14	; 20
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	8f 93       	push	r24
     858:	0e 94 46 0c 	call	0x188c	; 0x188c <printf>
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	19 82       	std	Y+1, r1	; 0x01
     86a:	1e c0       	rjmp	.+60     	; 0x8a8 <CAN_printMessage+0x90>
     86c:	89 81       	ldd	r24, Y+1	; 0x01
     86e:	88 2f       	mov	r24, r24
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	2a 81       	ldd	r18, Y+2	; 0x02
     874:	3b 81       	ldd	r19, Y+3	; 0x03
     876:	82 0f       	add	r24, r18
     878:	93 1f       	adc	r25, r19
     87a:	03 96       	adiw	r24, 0x03	; 3
     87c:	fc 01       	movw	r30, r24
     87e:	80 81       	ld	r24, Z
     880:	88 2f       	mov	r24, r24
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	29 2f       	mov	r18, r25
     886:	2f 93       	push	r18
     888:	8f 93       	push	r24
     88a:	80 e4       	ldi	r24, 0x40	; 64
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	89 2f       	mov	r24, r25
     890:	8f 93       	push	r24
     892:	80 e4       	ldi	r24, 0x40	; 64
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	8f 93       	push	r24
     898:	f9 d7       	rcall	.+4082   	; 0x188c <printf>
     89a:	0f 90       	pop	r0
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	89 81       	ldd	r24, Y+1	; 0x01
     8a4:	8f 5f       	subi	r24, 0xFF	; 255
     8a6:	89 83       	std	Y+1, r24	; 0x01
     8a8:	8a 81       	ldd	r24, Y+2	; 0x02
     8aa:	9b 81       	ldd	r25, Y+3	; 0x03
     8ac:	fc 01       	movw	r30, r24
     8ae:	92 81       	ldd	r25, Z+2	; 0x02
     8b0:	89 81       	ldd	r24, Y+1	; 0x01
     8b2:	89 17       	cp	r24, r25
     8b4:	d8 f2       	brcs	.-74     	; 0x86c <CAN_printMessage+0x54>
     8b6:	8a e0       	ldi	r24, 0x0A	; 10
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	f9 d7       	rcall	.+4082   	; 0x18ae <putchar>
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	08 95       	ret

000008c8 <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     8c8:	95 b7       	in	r25, 0x35	; 53
     8ca:	90 68       	ori	r25, 0x80	; 128
     8cc:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     8ce:	96 b7       	in	r25, 0x36	; 54
     8d0:	98 60       	ori	r25, 0x08	; 8
     8d2:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     8d4:	88 23       	and	r24, r24
     8d6:	19 f0       	breq	.+6      	; 0x8de <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     8d8:	80 b7       	in	r24, 0x30	; 48
     8da:	80 62       	ori	r24, 0x20	; 32
     8dc:	80 bf       	out	0x30, r24	; 48
     8de:	08 95       	ret

000008e0 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     8e0:	fc 01       	movw	r30, r24
     8e2:	80 81       	ld	r24, Z
	return val;
}
     8e4:	08 95       	ret

000008e6 <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     8e6:	fc 01       	movw	r30, r24
     8e8:	60 83       	st	Z, r22
     8ea:	08 95       	ret

000008ec <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     8ec:	10 92 dd 03 	sts	0x03DD, r1
     8f0:	10 92 dc 03 	sts	0x03DC, r1
	currentPosition.Y_abs = 0;
     8f4:	10 92 df 03 	sts	0x03DF, r1
     8f8:	10 92 de 03 	sts	0x03DE, r1
	currentPosition.X_per = 0;
     8fc:	10 92 e1 03 	sts	0x03E1, r1
     900:	10 92 e0 03 	sts	0x03E0, r1
	currentPosition.Y_per = 0;
     904:	10 92 e3 03 	sts	0x03E3, r1
     908:	10 92 e2 03 	sts	0x03E2, r1
	currentDirection = CENTRE;
     90c:	10 92 db 03 	sts	0x03DB, r1
     910:	08 95       	ret

00000912 <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     916:	90 d4       	rcall	.+2336   	; 0x1238 <OLED_clear>
     918:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	6e d4       	rcall	.+2268   	; 0x11fe <OLED_goto>
     922:	88 e0       	ldi	r24, 0x08	; 8
     924:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("JOY RIGHT");
     926:	46 d5       	rcall	.+2700   	; 0x13b4 <OLED_printString>
     928:	82 e1       	ldi	r24, 0x12	; 18
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	c5 d7       	rcall	.+3978   	; 0x18b8 <puts>
	printf("Move JOY to the right\n");
     92e:	2f ef       	ldi	r18, 0xFF	; 255
     930:	4f ef       	ldi	r20, 0xFF	; 255
     932:	52 e0       	ldi	r21, 0x02	; 2
     934:	21 50       	subi	r18, 0x01	; 1
     936:	40 40       	sbci	r20, 0x00	; 0
     938:	50 40       	sbci	r21, 0x00	; 0
     93a:	e1 f7       	brne	.-8      	; 0x934 <JOY_calibrate+0x22>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <JOY_calibrate+0x2c>
     93e:	00 c0       	rjmp	.+0      	; 0x940 <JOY_calibrate+0x2e>
     940:	c4 e1       	ldi	r28, 0x14	; 20
     942:	d0 e0       	ldi	r29, 0x00	; 0
     944:	60 91 06 01 	lds	r22, 0x0106
     948:	70 91 07 01 	lds	r23, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     94c:	82 e0       	ldi	r24, 0x02	; 2
     94e:	e0 d5       	rcall	.+3008   	; 0x1510 <ADC_request>
     950:	8f ef       	ldi	r24, 0xFF	; 255
     952:	9f e1       	ldi	r25, 0x1F	; 31
     954:	21 e0       	ldi	r18, 0x01	; 1
     956:	81 50       	subi	r24, 0x01	; 1
     958:	90 40       	sbci	r25, 0x00	; 0
     95a:	20 40       	sbci	r18, 0x00	; 0
     95c:	e1 f7       	brne	.-8      	; 0x956 <JOY_calibrate+0x44>
     95e:	00 c0       	rjmp	.+0      	; 0x960 <JOY_calibrate+0x4e>
     960:	00 00       	nop
     962:	80 91 06 01 	lds	r24, 0x0106
     966:	90 91 07 01 	lds	r25, 0x0107
     96a:	f6 d5       	rcall	.+3052   	; 0x1558 <ADC_read>
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     96c:	90 91 0d 01 	lds	r25, 0x010D
     970:	98 17       	cp	r25, r24
     972:	10 f4       	brcc	.+4      	; 0x978 <JOY_calibrate+0x66>
     974:	80 93 0d 01 	sts	0x010D, r24
		
		if(temp > calR) {calR = temp;}
     978:	21 97       	sbiw	r28, 0x01	; 1
     97a:	20 97       	sbiw	r28, 0x00	; 0
     97c:	19 f7       	brne	.-58     	; 0x944 <JOY_calibrate+0x32>
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	90 e0       	ldi	r25, 0x00	; 0
	OLED_goto(0,0);
	OLED_printString("JOY RIGHT");
	printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     986:	3b d4       	rcall	.+2166   	; 0x11fe <OLED_goto>
     988:	88 e2       	ldi	r24, 0x28	; 40
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_goto(1,0);
     98a:	92 e0       	ldi	r25, 0x02	; 2
     98c:	13 d5       	rcall	.+2598   	; 0x13b4 <OLED_printString>
     98e:	81 e3       	ldi	r24, 0x31	; 49
     990:	92 e0       	ldi	r25, 0x02	; 2
     992:	92 d7       	rcall	.+3876   	; 0x18b8 <puts>
     994:	4f ef       	ldi	r20, 0xFF	; 255
	OLED_printString("JOY LEFT");
     996:	5f ef       	ldi	r21, 0xFF	; 255
     998:	82 e0       	ldi	r24, 0x02	; 2
     99a:	41 50       	subi	r20, 0x01	; 1
     99c:	50 40       	sbci	r21, 0x00	; 0
	printf("Move JOY to the left\n");
     99e:	80 40       	sbci	r24, 0x00	; 0
     9a0:	e1 f7       	brne	.-8      	; 0x99a <JOY_calibrate+0x88>
     9a2:	00 c0       	rjmp	.+0      	; 0x9a4 <JOY_calibrate+0x92>
     9a4:	00 c0       	rjmp	.+0      	; 0x9a6 <JOY_calibrate+0x94>
     9a6:	c4 e1       	ldi	r28, 0x14	; 20
     9a8:	d0 e0       	ldi	r29, 0x00	; 0
     9aa:	60 91 06 01 	lds	r22, 0x0106
     9ae:	70 91 07 01 	lds	r23, 0x0107
     9b2:	82 e0       	ldi	r24, 0x02	; 2
     9b4:	ad d5       	rcall	.+2906   	; 0x1510 <ADC_request>
     9b6:	9f ef       	ldi	r25, 0xFF	; 255
     9b8:	2f e1       	ldi	r18, 0x1F	; 31
     9ba:	41 e0       	ldi	r20, 0x01	; 1
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     9bc:	91 50       	subi	r25, 0x01	; 1
     9be:	20 40       	sbci	r18, 0x00	; 0
     9c0:	40 40       	sbci	r20, 0x00	; 0
     9c2:	e1 f7       	brne	.-8      	; 0x9bc <JOY_calibrate+0xaa>
     9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <JOY_calibrate+0xb4>
     9c6:	00 00       	nop
     9c8:	80 91 06 01 	lds	r24, 0x0106
     9cc:	90 91 07 01 	lds	r25, 0x0107
     9d0:	c3 d5       	rcall	.+2950   	; 0x1558 <ADC_read>
     9d2:	90 91 0c 01 	lds	r25, 0x010C
     9d6:	89 17       	cp	r24, r25
     9d8:	10 f4       	brcc	.+4      	; 0x9de <JOY_calibrate+0xcc>
     9da:	80 93 0c 01 	sts	0x010C, r24
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     9de:	21 97       	sbiw	r28, 0x01	; 1
     9e0:	20 97       	sbiw	r28, 0x00	; 0
     9e2:	19 f7       	brne	.-58     	; 0x9aa <JOY_calibrate+0x98>
     9e4:	60 e0       	ldi	r22, 0x00	; 0
     9e6:	70 e0       	ldi	r23, 0x00	; 0
		
		if(temp < calL) {calL = temp;}
     9e8:	82 e0       	ldi	r24, 0x02	; 2
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	08 d4       	rcall	.+2064   	; 0x11fe <OLED_goto>
     9ee:	86 e4       	ldi	r24, 0x46	; 70
     9f0:	92 e0       	ldi	r25, 0x02	; 2
     9f2:	e0 d4       	rcall	.+2496   	; 0x13b4 <OLED_printString>
     9f4:	8d e4       	ldi	r24, 0x4D	; 77
	OLED_goto(1,0);
	OLED_printString("JOY LEFT");
	printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     9f6:	92 e0       	ldi	r25, 0x02	; 2
     9f8:	5f d7       	rcall	.+3774   	; 0x18b8 <puts>
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_goto(2,0);
     9fa:	5f ef       	ldi	r21, 0xFF	; 255
     9fc:	8f ef       	ldi	r24, 0xFF	; 255
     9fe:	92 e0       	ldi	r25, 0x02	; 2
     a00:	51 50       	subi	r21, 0x01	; 1
     a02:	80 40       	sbci	r24, 0x00	; 0
     a04:	90 40       	sbci	r25, 0x00	; 0
	OLED_printString("JOY UP");
     a06:	e1 f7       	brne	.-8      	; 0xa00 <JOY_calibrate+0xee>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <JOY_calibrate+0xf8>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <JOY_calibrate+0xfa>
     a0c:	c4 e1       	ldi	r28, 0x14	; 20
	printf("Move JOY up\n");
     a0e:	d0 e0       	ldi	r29, 0x00	; 0
     a10:	60 91 06 01 	lds	r22, 0x0106
     a14:	70 91 07 01 	lds	r23, 0x0107
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	7a d5       	rcall	.+2804   	; 0x1510 <ADC_request>
     a1c:	2f ef       	ldi	r18, 0xFF	; 255
     a1e:	4f e1       	ldi	r20, 0x1F	; 31
     a20:	51 e0       	ldi	r21, 0x01	; 1
     a22:	21 50       	subi	r18, 0x01	; 1
     a24:	40 40       	sbci	r20, 0x00	; 0
     a26:	50 40       	sbci	r21, 0x00	; 0
     a28:	e1 f7       	brne	.-8      	; 0xa22 <JOY_calibrate+0x110>
     a2a:	00 c0       	rjmp	.+0      	; 0xa2c <JOY_calibrate+0x11a>
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     a2c:	00 00       	nop
     a2e:	80 91 06 01 	lds	r24, 0x0106
     a32:	90 91 07 01 	lds	r25, 0x0107
     a36:	90 d5       	rcall	.+2848   	; 0x1558 <ADC_read>
     a38:	90 91 0b 01 	lds	r25, 0x010B
     a3c:	98 17       	cp	r25, r24
     a3e:	10 f4       	brcc	.+4      	; 0xa44 <JOY_calibrate+0x132>
     a40:	80 93 0b 01 	sts	0x010B, r24
     a44:	21 97       	sbiw	r28, 0x01	; 1
     a46:	20 97       	sbiw	r28, 0x00	; 0
     a48:	19 f7       	brne	.-58     	; 0xa10 <JOY_calibrate+0xfe>
     a4a:	60 e0       	ldi	r22, 0x00	; 0
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	83 e0       	ldi	r24, 0x03	; 3
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	d5 d3       	rcall	.+1962   	; 0x11fe <OLED_goto>
     a54:	89 e5       	ldi	r24, 0x59	; 89
     a56:	92 e0       	ldi	r25, 0x02	; 2
		
		if(temp > calUp) {calUp = temp;}
     a58:	ad d4       	rcall	.+2394   	; 0x13b4 <OLED_printString>
     a5a:	82 e6       	ldi	r24, 0x62	; 98
     a5c:	92 e0       	ldi	r25, 0x02	; 2
     a5e:	2c d7       	rcall	.+3672   	; 0x18b8 <puts>
     a60:	8f ef       	ldi	r24, 0xFF	; 255
     a62:	9f ef       	ldi	r25, 0xFF	; 255
     a64:	22 e0       	ldi	r18, 0x02	; 2
	OLED_goto(2,0);
	OLED_printString("JOY UP");
	printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     a66:	81 50       	subi	r24, 0x01	; 1
     a68:	90 40       	sbci	r25, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_goto(3,0);
     a6a:	20 40       	sbci	r18, 0x00	; 0
     a6c:	e1 f7       	brne	.-8      	; 0xa66 <JOY_calibrate+0x154>
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <JOY_calibrate+0x15e>
     a70:	00 c0       	rjmp	.+0      	; 0xa72 <JOY_calibrate+0x160>
     a72:	c4 e1       	ldi	r28, 0x14	; 20
     a74:	d0 e0       	ldi	r29, 0x00	; 0
	OLED_printString("JOY DOWN");
     a76:	60 91 06 01 	lds	r22, 0x0106
     a7a:	70 91 07 01 	lds	r23, 0x0107
	printf("Move JOY down\n");
     a7e:	81 e0       	ldi	r24, 0x01	; 1
     a80:	47 d5       	rcall	.+2702   	; 0x1510 <ADC_request>
     a82:	4f ef       	ldi	r20, 0xFF	; 255
     a84:	5f e1       	ldi	r21, 0x1F	; 31
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	41 50       	subi	r20, 0x01	; 1
     a8a:	50 40       	sbci	r21, 0x00	; 0
     a8c:	80 40       	sbci	r24, 0x00	; 0
     a8e:	e1 f7       	brne	.-8      	; 0xa88 <JOY_calibrate+0x176>
     a90:	00 c0       	rjmp	.+0      	; 0xa92 <JOY_calibrate+0x180>
     a92:	00 00       	nop
     a94:	80 91 06 01 	lds	r24, 0x0106
     a98:	90 91 07 01 	lds	r25, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     a9c:	5d d5       	rcall	.+2746   	; 0x1558 <ADC_read>
     a9e:	90 91 0a 01 	lds	r25, 0x010A
     aa2:	89 17       	cp	r24, r25
     aa4:	10 f4       	brcc	.+4      	; 0xaaa <JOY_calibrate+0x198>
     aa6:	80 93 0a 01 	sts	0x010A, r24
     aaa:	21 97       	sbiw	r28, 0x01	; 1
     aac:	20 97       	sbiw	r28, 0x00	; 0
     aae:	19 f7       	brne	.-58     	; 0xa76 <JOY_calibrate+0x164>
     ab0:	30 91 0a 01 	lds	r19, 0x010A
     ab4:	20 91 0b 01 	lds	r18, 0x010B
     ab8:	90 91 0c 01 	lds	r25, 0x010C
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     abc:	80 91 0d 01 	lds	r24, 0x010D
     ac0:	1f 92       	push	r1
     ac2:	3f 93       	push	r19
     ac4:	1f 92       	push	r1
     ac6:	2f 93       	push	r18
		
		if(temp < calDown) {calDown = temp;}
     ac8:	1f 92       	push	r1
     aca:	9f 93       	push	r25
     acc:	1f 92       	push	r1
     ace:	8f 93       	push	r24
     ad0:	80 e7       	ldi	r24, 0x70	; 112
     ad2:	92 e0       	ldi	r25, 0x02	; 2
     ad4:	9f 93       	push	r25
	OLED_goto(3,0);
	OLED_printString("JOY DOWN");
	printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     ad6:	8f 93       	push	r24
     ad8:	d9 d6       	rcall	.+3506   	; 0x188c <printf>
		
		if(temp < calDown) {calDown = temp;}
	}
	
	
	printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
     ada:	20 91 0b 01 	lds	r18, 0x010B
     ade:	80 91 0a 01 	lds	r24, 0x010A
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	28 1b       	sub	r18, r24
     ae6:	31 09       	sbc	r19, r1
     ae8:	c9 01       	movw	r24, r18
     aea:	4d b7       	in	r20, 0x3d	; 61
     aec:	5e b7       	in	r21, 0x3e	; 62
     aee:	46 5f       	subi	r20, 0xF6	; 246
     af0:	5f 4f       	sbci	r21, 0xFF	; 255
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	f8 94       	cli
     af6:	5e bf       	out	0x3e, r21	; 62
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	4d bf       	out	0x3d, r20	; 61
     afc:	99 23       	and	r25, r25
     afe:	0c f4       	brge	.+2      	; 0xb02 <JOY_calibrate+0x1f0>
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	95 95       	asr	r25
     b04:	87 95       	ror	r24
	
	meanVert = (calUp - calDown)/2;
     b06:	80 93 09 01 	sts	0x0109, r24
     b0a:	20 91 0d 01 	lds	r18, 0x010D
     b0e:	80 91 0c 01 	lds	r24, 0x010C
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	28 1b       	sub	r18, r24
     b16:	31 09       	sbc	r19, r1
     b18:	c9 01       	movw	r24, r18
     b1a:	99 23       	and	r25, r25
     b1c:	0c f4       	brge	.+2      	; 0xb20 <JOY_calibrate+0x20e>
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	95 95       	asr	r25
     b22:	87 95       	ror	r24
     b24:	80 93 08 01 	sts	0x0108, r24
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	84 e0       	ldi	r24, 0x04	; 4
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	66 d3       	rcall	.+1740   	; 0x11fe <OLED_goto>
     b32:	8a e9       	ldi	r24, 0x9A	; 154
     b34:	92 e0       	ldi	r25, 0x02	; 2
	meanHor = (calR - calL)/2;
     b36:	3e d4       	rcall	.+2172   	; 0x13b4 <OLED_printString>
     b38:	90 91 08 01 	lds	r25, 0x0108
     b3c:	80 91 09 01 	lds	r24, 0x0109
     b40:	1f 92       	push	r1
     b42:	9f 93       	push	r25
     b44:	1f 92       	push	r1
     b46:	8f 93       	push	r24
     b48:	85 ea       	ldi	r24, 0xA5	; 165
     b4a:	92 e0       	ldi	r25, 0x02	; 2
     b4c:	9f 93       	push	r25
     b4e:	8f 93       	push	r24
     b50:	9d d6       	rcall	.+3386   	; 0x188c <printf>
     b52:	5f ef       	ldi	r21, 0xFF	; 255
	
	OLED_goto(4,0);
     b54:	8f ef       	ldi	r24, 0xFF	; 255
     b56:	9e e0       	ldi	r25, 0x0E	; 14
     b58:	51 50       	subi	r21, 0x01	; 1
     b5a:	80 40       	sbci	r24, 0x00	; 0
     b5c:	90 40       	sbci	r25, 0x00	; 0
     b5e:	e1 f7       	brne	.-8      	; 0xb58 <JOY_calibrate+0x246>
	OLED_printString("CALIB DONE");
     b60:	00 c0       	rjmp	.+0      	; 0xb62 <JOY_calibrate+0x250>
     b62:	00 00       	nop
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
	printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
     b6e:	0f 90       	pop	r0
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	08 95       	ret

00000b76 <JOY_requestCurrentPosition>:
     b76:	88 37       	cpi	r24, 0x78	; 120
     b78:	39 f4       	brne	.+14     	; 0xb88 <JOY_requestCurrentPosition+0x12>
     b7a:	60 91 06 01 	lds	r22, 0x0106
     b7e:	70 91 07 01 	lds	r23, 0x0107
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	c5 c4       	rjmp	.+2442   	; 0x1510 <ADC_request>
     b86:	08 95       	ret
     b88:	89 37       	cpi	r24, 0x79	; 121
     b8a:	31 f4       	brne	.+12     	; 0xb98 <JOY_requestCurrentPosition+0x22>
     b8c:	60 91 06 01 	lds	r22, 0x0106
     b90:	70 91 07 01 	lds	r23, 0x0107
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	bc c4       	rjmp	.+2424   	; 0x1510 <ADC_request>
     b98:	08 95       	ret

00000b9a <JOY_updatePosition>:
     b9a:	88 37       	cpi	r24, 0x78	; 120
     b9c:	f9 f4       	brne	.+62     	; 0xbdc <JOY_updatePosition+0x42>
     b9e:	80 91 06 01 	lds	r24, 0x0106
	_delay_ms(1000);
}
     ba2:	90 91 07 01 	lds	r25, 0x0107
     ba6:	d8 d4       	rcall	.+2480   	; 0x1558 <ADC_read>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	90 93 dd 03 	sts	0x03DD, r25
     bae:	80 93 dc 03 	sts	0x03DC, r24
     bb2:	20 91 08 01 	lds	r18, 0x0108
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     bb6:	60 91 08 01 	lds	r22, 0x0108
     bba:	ac 01       	movw	r20, r24
     bbc:	42 1b       	sub	r20, r18
     bbe:	51 09       	sbc	r21, r1
     bc0:	9a 01       	movw	r18, r20
     bc2:	44 e6       	ldi	r20, 0x64	; 100
     bc4:	42 9f       	mul	r20, r18
     bc6:	c0 01       	movw	r24, r0
     bc8:	43 9f       	mul	r20, r19
     bca:	90 0d       	add	r25, r0
     bcc:	11 24       	eor	r1, r1
     bce:	70 e0       	ldi	r23, 0x00	; 0
     bd0:	c5 d4       	rcall	.+2442   	; 0x155c <__divmodhi4>
     bd2:	70 93 e1 03 	sts	0x03E1, r23
     bd6:	60 93 e0 03 	sts	0x03E0, r22
     bda:	08 95       	ret
     bdc:	89 37       	cpi	r24, 0x79	; 121
     bde:	f1 f4       	brne	.+60     	; 0xc1c <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     be0:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     be4:	90 91 07 01 	lds	r25, 0x0107
     be8:	b7 d4       	rcall	.+2414   	; 0x1558 <ADC_read>
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	90 93 df 03 	sts	0x03DF, r25
     bf0:	80 93 de 03 	sts	0x03DE, r24
     bf4:	20 91 09 01 	lds	r18, 0x0109
     bf8:	60 91 09 01 	lds	r22, 0x0109
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     bfc:	ac 01       	movw	r20, r24
     bfe:	42 1b       	sub	r20, r18
     c00:	51 09       	sbc	r21, r1
     c02:	9a 01       	movw	r18, r20
     c04:	44 e6       	ldi	r20, 0x64	; 100
     c06:	42 9f       	mul	r20, r18
     c08:	c0 01       	movw	r24, r0
     c0a:	43 9f       	mul	r20, r19
     c0c:	90 0d       	add	r25, r0
     c0e:	11 24       	eor	r1, r1
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	a4 d4       	rcall	.+2376   	; 0x155c <__divmodhi4>
     c14:	70 93 e3 03 	sts	0x03E3, r23
     c18:	60 93 e2 03 	sts	0x03E2, r22
     c1c:	08 95       	ret

00000c1e <JOY_calculateDirection>:
     c1e:	80 91 e0 03 	lds	r24, 0x03E0
     c22:	90 91 e1 03 	lds	r25, 0x03E1
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     c26:	8b 35       	cpi	r24, 0x5B	; 91
     c28:	91 05       	cpc	r25, r1
     c2a:	24 f0       	brlt	.+8      	; 0xc34 <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     c2c:	83 e0       	ldi	r24, 0x03	; 3
     c2e:	80 93 db 03 	sts	0x03DB, r24
     c32:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     c34:	86 3a       	cpi	r24, 0xA6	; 166
     c36:	9f 4f       	sbci	r25, 0xFF	; 255
     c38:	24 f4       	brge	.+8      	; 0xc42 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     c3a:	84 e0       	ldi	r24, 0x04	; 4
     c3c:	80 93 db 03 	sts	0x03DB, r24
     c40:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     c42:	80 91 e2 03 	lds	r24, 0x03E2
     c46:	90 91 e3 03 	lds	r25, 0x03E3
     c4a:	8b 35       	cpi	r24, 0x5B	; 91
     c4c:	91 05       	cpc	r25, r1
     c4e:	24 f0       	brlt	.+8      	; 0xc58 <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	80 93 db 03 	sts	0x03DB, r24
     c56:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     c58:	86 3a       	cpi	r24, 0xA6	; 166
     c5a:	9f 4f       	sbci	r25, 0xFF	; 255
     c5c:	24 f4       	brge	.+8      	; 0xc66 <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	80 93 db 03 	sts	0x03DB, r24
     c64:	08 95       	ret
	else{currentDirection = CENTRE;}
     c66:	10 92 db 03 	sts	0x03DB, r1
     c6a:	08 95       	ret

00000c6c <JOY_getDirection>:
// Before the value is returned, the values of position in x and y direction are 
// requested from the ADC and written to the currentPosition and 
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
     c6c:	88 e7       	ldi	r24, 0x78	; 120
     c6e:	83 df       	rcall	.-250    	; 0xb76 <JOY_requestCurrentPosition>
     c70:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c72:	8a 95       	dec	r24
     c74:	f1 f7       	brne	.-4      	; 0xc72 <JOY_getDirection+0x6>
     c76:	00 00       	nop
     c78:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     c7a:	8f df       	rcall	.-226    	; 0xb9a <JOY_updatePosition>
     c7c:	89 e7       	ldi	r24, 0x79	; 121
     c7e:	7b df       	rcall	.-266    	; 0xb76 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     c80:	82 e6       	ldi	r24, 0x62	; 98
     c82:	8a 95       	dec	r24
     c84:	f1 f7       	brne	.-4      	; 0xc82 <JOY_getDirection+0x16>
     c86:	00 00       	nop
     c88:	89 e7       	ldi	r24, 0x79	; 121
     c8a:	87 df       	rcall	.-242    	; 0xb9a <JOY_updatePosition>
     c8c:	c8 df       	rcall	.-112    	; 0xc1e <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     c8e:	80 91 db 03 	lds	r24, 0x03DB
     c92:	08 95       	ret

00000c94 <MCP2515_reset>:
	printf("finished MCP2515_init\n");
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
     c94:	cf 93       	push	r28
     c96:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
     c98:	12 d4       	rcall	.+2084   	; 0x14be <SPI_activateSlave>
     c9a:	80 ec       	ldi	r24, 0xC0	; 192
	SPI_send(MCP_RESET);
     c9c:	06 d4       	rcall	.+2060   	; 0x14aa <SPI_send>
     c9e:	8c ec       	ldi	r24, 0xCC	; 204
     ca0:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	f1 f7       	brne	.-4      	; 0xca2 <MCP2515_reset+0xe>
     ca6:	00 c0       	rjmp	.+0      	; 0xca8 <MCP2515_reset+0x14>
     ca8:	00 00       	nop
     caa:	8c 2f       	mov	r24, r28
     cac:	0c d4       	rcall	.+2072   	; 0x14c6 <SPI_deactivateSlave>
	_delay_ms(1);
	SPI_deactivateSlave(slave);
     cae:	8f ef       	ldi	r24, 0xFF	; 255
     cb0:	9f e2       	ldi	r25, 0x2F	; 47
     cb2:	01 97       	sbiw	r24, 0x01	; 1
     cb4:	f1 f7       	brne	.-4      	; 0xcb2 <MCP2515_reset+0x1e>
     cb6:	00 c0       	rjmp	.+0      	; 0xcb8 <MCP2515_reset+0x24>
     cb8:	00 00       	nop
     cba:	cf 91       	pop	r28
     cbc:	08 95       	ret

00000cbe <MCP2515_read>:
     cbe:	cf 93       	push	r28
	_delay_ms(10);
}
     cc0:	df 93       	push	r29
     cc2:	c8 2f       	mov	r28, r24

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
     cc4:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
     cc6:	fb d3       	rcall	.+2038   	; 0x14be <SPI_activateSlave>
     cc8:	83 e0       	ldi	r24, 0x03	; 3
	SPI_send(MCP_READ);
     cca:	ef d3       	rcall	.+2014   	; 0x14aa <SPI_send>
     ccc:	8c ec       	ldi	r24, 0xCC	; 204
     cce:	94 e0       	ldi	r25, 0x04	; 4
     cd0:	01 97       	sbiw	r24, 0x01	; 1
     cd2:	f1 f7       	brne	.-4      	; 0xcd0 <MCP2515_read+0x12>
     cd4:	00 c0       	rjmp	.+0      	; 0xcd6 <MCP2515_read+0x18>
     cd6:	00 00       	nop
     cd8:	8d 2f       	mov	r24, r29
     cda:	e7 d3       	rcall	.+1998   	; 0x14aa <SPI_send>
	_delay_ms(1);
	SPI_send(address);
     cdc:	ea d3       	rcall	.+2004   	; 0x14b2 <SPI_receive>
     cde:	d8 2f       	mov	r29, r24
     ce0:	8c 2f       	mov	r24, r28
	
	uint8_t result;
	result = SPI_receive();
     ce2:	f1 d3       	rcall	.+2018   	; 0x14c6 <SPI_deactivateSlave>
     ce4:	8d 2f       	mov	r24, r29
     ce6:	df 91       	pop	r29
	
	SPI_deactivateSlave(slave);
     ce8:	cf 91       	pop	r28
     cea:	08 95       	ret

00000cec <MCP2515_init>:
     cec:	80 e0       	ldi	r24, 0x00	; 0
	return result;
}
     cee:	d2 df       	rcall	.-92     	; 0xc94 <MCP2515_reset>
     cf0:	6e e0       	ldi	r22, 0x0E	; 14
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	e4 df       	rcall	.-56     	; 0xcbe <MCP2515_read>
uint8_t MCP2515_init()
{
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
	// Self-test
	uint8_t value;
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
     cf6:	98 2f       	mov	r25, r24
     cf8:	90 7e       	andi	r25, 0xE0	; 224
	//printf("CANSTAT: %#x\n", value);
	if((value & MODE_MASK) != MODE_CONFIG) 
     cfa:	90 38       	cpi	r25, 0x80	; 128
     cfc:	69 f0       	breq	.+26     	; 0xd18 <MCP2515_init+0x2c>
     cfe:	1f 92       	push	r1
     d00:	8f 93       	push	r24
	{
		printf("MCP2515 is NOT in configuration mode after reset! Value: %d\n", value);
     d02:	8a ec       	ldi	r24, 0xCA	; 202
     d04:	92 e0       	ldi	r25, 0x02	; 2
     d06:	9f 93       	push	r25
     d08:	8f 93       	push	r24
     d0a:	c0 d5       	rcall	.+2944   	; 0x188c <printf>
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
		return 1;
     d12:	0f 90       	pop	r0
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	08 95       	ret
     d18:	87 e0       	ldi	r24, 0x07	; 7
     d1a:	93 e0       	ldi	r25, 0x03	; 3
     d1c:	cd d5       	rcall	.+2970   	; 0x18b8 <puts>
	}
	
	printf("finished MCP2515_init\n");
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	08 95       	ret

00000d22 <MCP2515_write>:
     d22:	1f 93       	push	r17
     d24:	cf 93       	push	r28
	return 0;
     d26:	df 93       	push	r29
}
     d28:	c8 2f       	mov	r28, r24
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_write(SPI_SLAVES slave, uint8_t address, uint8_t data)
{
     d2a:	16 2f       	mov	r17, r22
     d2c:	d4 2f       	mov	r29, r20
	SPI_activateSlave(slave);
     d2e:	c7 d3       	rcall	.+1934   	; 0x14be <SPI_activateSlave>
     d30:	82 e0       	ldi	r24, 0x02	; 2
	SPI_send(MCP_WRITE);
     d32:	bb d3       	rcall	.+1910   	; 0x14aa <SPI_send>
     d34:	81 2f       	mov	r24, r17
     d36:	b9 d3       	rcall	.+1906   	; 0x14aa <SPI_send>
	SPI_send(address);
     d38:	8d 2f       	mov	r24, r29
     d3a:	b7 d3       	rcall	.+1902   	; 0x14aa <SPI_send>
     d3c:	8c 2f       	mov	r24, r28
	SPI_send(data);
     d3e:	c3 d3       	rcall	.+1926   	; 0x14c6 <SPI_deactivateSlave>
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
	SPI_deactivateSlave(slave);
     d44:	1f 91       	pop	r17
     d46:	08 95       	ret

00000d48 <MCP2515_bitModify>:
     d48:	0f 93       	push	r16
}
     d4a:	1f 93       	push	r17
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	c8 2f       	mov	r28, r24
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_bitModify(SPI_SLAVES slave, uint8_t register2change, uint8_t mask, uint8_t newValue)
{
     d52:	06 2f       	mov	r16, r22
     d54:	14 2f       	mov	r17, r20
     d56:	d2 2f       	mov	r29, r18
	SPI_activateSlave(slave);
     d58:	b2 d3       	rcall	.+1892   	; 0x14be <SPI_activateSlave>
     d5a:	85 e0       	ldi	r24, 0x05	; 5
	
	SPI_send(MCP_BITMOD);
     d5c:	a6 d3       	rcall	.+1868   	; 0x14aa <SPI_send>
     d5e:	80 2f       	mov	r24, r16
     d60:	a4 d3       	rcall	.+1864   	; 0x14aa <SPI_send>
	SPI_send(register2change);
     d62:	81 2f       	mov	r24, r17
     d64:	a2 d3       	rcall	.+1860   	; 0x14aa <SPI_send>
     d66:	8d 2f       	mov	r24, r29
	SPI_send(mask);
     d68:	a0 d3       	rcall	.+1856   	; 0x14aa <SPI_send>
     d6a:	8c 2f       	mov	r24, r28
     d6c:	ac d3       	rcall	.+1880   	; 0x14c6 <SPI_deactivateSlave>
	SPI_send(newValue);
     d6e:	df 91       	pop	r29
     d70:	cf 91       	pop	r28
     d72:	1f 91       	pop	r17
	
	SPI_deactivateSlave(slave);
     d74:	0f 91       	pop	r16
     d76:	08 95       	ret

00000d78 <startGame>:

int menuFrameOffset = 10; //Columns from left frame border
//******************************************************************************************

void startGame()
{
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
	OLED_clear();
     d7c:	5d d2       	rcall	.+1210   	; 0x1238 <OLED_clear>
     d7e:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	3b d2       	rcall	.+1142   	; 0x11fe <OLED_goto>
     d88:	83 e3       	ldi	r24, 0x33	; 51
     d8a:	93 e0       	ldi	r25, 0x03	; 3
	OLED_printString("START");
     d8c:	13 d3       	rcall	.+1574   	; 0x13b4 <OLED_printString>
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_goto(3,0);
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	33 d2       	rcall	.+1126   	; 0x11fe <OLED_goto>
     d98:	ce e0       	ldi	r28, 0x0E	; 14
     d9a:	d0 e0       	ldi	r29, 0x00	; 0
     d9c:	89 e3       	ldi	r24, 0x39	; 57
     d9e:	93 e0       	ldi	r25, 0x03	; 3
     da0:	09 d3       	rcall	.+1554   	; 0x13b4 <OLED_printString>
     da2:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     da4:	8f e7       	ldi	r24, 0x7F	; 127
     da6:	97 e0       	ldi	r25, 0x07	; 7
     da8:	21 50       	subi	r18, 0x01	; 1
     daa:	80 40       	sbci	r24, 0x00	; 0
     dac:	90 40       	sbci	r25, 0x00	; 0
     dae:	e1 f7       	brne	.-8      	; 0xda8 <startGame+0x30>
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <startGame+0x3a>
     db2:	00 00       	nop
     db4:	21 97       	sbiw	r28, 0x01	; 1
     db6:	20 97       	sbiw	r28, 0x00	; 0
     db8:	89 f7       	brne	.-30     	; 0xd9c <startGame+0x24>
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	85 e0       	ldi	r24, 0x05	; 5
	OLED_goto(0,0);
	OLED_printString("START");
	
	OLED_goto(3,0);
	
	for(int i = 14; i > 0; i--)
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	1d d2       	rcall	.+1082   	; 0x11fe <OLED_goto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_goto(5,0);
     dc4:	8b e3       	ldi	r24, 0x3B	; 59
     dc6:	93 e0       	ldi	r25, 0x03	; 3
     dc8:	f5 d2       	rcall	.+1514   	; 0x13b4 <OLED_printString>
     dca:	2f ef       	ldi	r18, 0xFF	; 255
     dcc:	8f ef       	ldi	r24, 0xFF	; 255
     dce:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     dd0:	21 50       	subi	r18, 0x01	; 1
     dd2:	80 40       	sbci	r24, 0x00	; 0
     dd4:	90 40       	sbci	r25, 0x00	; 0
     dd6:	e1 f7       	brne	.-8      	; 0xdd0 <startGame+0x58>
     dd8:	00 c0       	rjmp	.+0      	; 0xdda <startGame+0x62>
     dda:	00 c0       	rjmp	.+0      	; 0xddc <startGame+0x64>
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	08 95       	ret

00000de2 <MENU_addMenuItem>:
     de2:	cf 92       	push	r12
     de4:	df 92       	push	r13
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
	_delay_ms(3000);
}
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     df0:	df 93       	push	r29
     df2:	8c 01       	movw	r16, r24
     df4:	7b 01       	movw	r14, r22
     df6:	6a 01       	movw	r12, r20
     df8:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     dfa:	80 91 e7 03 	lds	r24, 0x03E7
     dfe:	90 91 e8 03 	lds	r25, 0x03E8
     e02:	89 2b       	or	r24, r25
     e04:	19 f0       	breq	.+6      	; 0xe0c <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     e06:	84 e4       	ldi	r24, 0x44	; 68
     e08:	93 e0       	ldi	r25, 0x03	; 3
     e0a:	56 d5       	rcall	.+2732   	; 0x18b8 <puts>
     e0c:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	cc d3       	rcall	.+1944   	; 0x15aa <malloc>
     e12:	fc 01       	movw	r30, r24
     e14:	90 93 e8 03 	sts	0x03E8, r25
     e18:	80 93 e7 03 	sts	0x03E7, r24
     e1c:	f3 82       	std	Z+3, r15	; 0x03
     e1e:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     e20:	11 83       	std	Z+1, r17	; 0x01
     e22:	00 83       	st	Z, r16
	currItem->name = name;
     e24:	cd 2b       	or	r28, r29
     e26:	39 f0       	breq	.+14     	; 0xe36 <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     e28:	d5 82       	std	Z+5, r13	; 0x05
     e2a:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     e30:	97 83       	std	Z+7, r25	; 0x07
     e32:	86 83       	std	Z+6, r24	; 0x06
     e34:	04 c0       	rjmp	.+8      	; 0xe3e <MENU_addMenuItem+0x5c>
     e36:	15 82       	std	Z+5, r1	; 0x05
     e38:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     e3a:	17 82       	std	Z+7, r1	; 0x07
     e3c:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
	}
}
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	ff 90       	pop	r15
     e48:	ef 90       	pop	r14
     e4a:	df 90       	pop	r13
     e4c:	cf 90       	pop	r12
     e4e:	08 95       	ret

00000e50 <MENU_buildMenus>:
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     e54:	86 e1       	ldi	r24, 0x16	; 22
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	a8 d3       	rcall	.+1872   	; 0x15aa <malloc>
     e5a:	ec 01       	movw	r28, r24
     e5c:	90 93 ee 03 	sts	0x03EE, r25
     e60:	80 93 ed 03 	sts	0x03ED, r24
     e64:	8a e5       	ldi	r24, 0x5A	; 90
	mainMenu->menuName = "MainMenu";
     e66:	93 e0       	ldi	r25, 0x03	; 3
     e68:	99 83       	std	Y+1, r25	; 0x01
     e6a:	88 83       	st	Y, r24
     e6c:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     e6e:	1c 8a       	std	Y+20, r1	; 0x14
     e70:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	9b 83       	std	Y+3, r25	; 0x03
     e76:	8a 83       	std	Y+2, r24	; 0x02
     e78:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	96 d3       	rcall	.+1836   	; 0x15aa <malloc>
     e7e:	fc 01       	movw	r30, r24
     e80:	90 93 ec 03 	sts	0x03EC, r25
     e84:	80 93 eb 03 	sts	0x03EB, r24
     e88:	83 e6       	ldi	r24, 0x63	; 99
     e8a:	93 e0       	ldi	r25, 0x03	; 3
	difficultyMenu->menuName = "DifficultyMenu";
     e8c:	91 83       	std	Z+1, r25	; 0x01
     e8e:	80 83       	st	Z, r24
     e90:	d5 8b       	std	Z+21, r29	; 0x15
     e92:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     e94:	83 e0       	ldi	r24, 0x03	; 3
     e96:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     e98:	93 83       	std	Z+3, r25	; 0x03
     e9a:	82 83       	std	Z+2, r24	; 0x02
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     ea0:	40 e0       	ldi	r20, 0x00	; 0
     ea2:	50 e0       	ldi	r21, 0x00	; 0
     ea4:	be 01       	movw	r22, r28
     ea6:	82 e7       	ldi	r24, 0x72	; 114
     ea8:	93 e0       	ldi	r25, 0x03	; 3
     eaa:	9b df       	rcall	.-202    	; 0xde2 <MENU_addMenuItem>
     eac:	60 91 ed 03 	lds	r22, 0x03ED
     eb0:	70 91 ee 03 	lds	r23, 0x03EE
	mainMenu->children[0] = currItem;
     eb4:	e0 91 e7 03 	lds	r30, 0x03E7
     eb8:	f0 91 e8 03 	lds	r31, 0x03E8
     ebc:	db 01       	movw	r26, r22
     ebe:	15 96       	adiw	r26, 0x05	; 5
     ec0:	fc 93       	st	X, r31
     ec2:	ee 93       	st	-X, r30
     ec4:	14 97       	sbiw	r26, 0x04	; 4
     ec6:	8c eb       	ldi	r24, 0xBC	; 188
     ec8:	96 e0       	ldi	r25, 0x06	; 6
     eca:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
     ecc:	82 87       	std	Z+10, r24	; 0x0a
     ece:	40 91 eb 03 	lds	r20, 0x03EB
     ed2:	50 91 ec 03 	lds	r21, 0x03EC
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     ed6:	21 e0       	ldi	r18, 0x01	; 1
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	8b e7       	ldi	r24, 0x7B	; 123
     edc:	93 e0       	ldi	r25, 0x03	; 3
     ede:	81 df       	rcall	.-254    	; 0xde2 <MENU_addMenuItem>
     ee0:	60 91 ed 03 	lds	r22, 0x03ED
     ee4:	70 91 ee 03 	lds	r23, 0x03EE
	mainMenu->children[1] = currItem;
     ee8:	80 91 e7 03 	lds	r24, 0x03E7
     eec:	90 91 e8 03 	lds	r25, 0x03E8
     ef0:	fb 01       	movw	r30, r22
     ef2:	97 83       	std	Z+7, r25	; 0x07
     ef4:	86 83       	std	Z+6, r24	; 0x06
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e0       	ldi	r20, 0x00	; 0
     efc:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     efe:	86 e8       	ldi	r24, 0x86	; 134
     f00:	93 e0       	ldi	r25, 0x03	; 3
     f02:	6f df       	rcall	.-290    	; 0xde2 <MENU_addMenuItem>
     f04:	60 91 ed 03 	lds	r22, 0x03ED
     f08:	70 91 ee 03 	lds	r23, 0x03EE
     f0c:	80 91 e7 03 	lds	r24, 0x03E7
	mainMenu->children[2] = currItem;
     f10:	90 91 e8 03 	lds	r25, 0x03E8
     f14:	db 01       	movw	r26, r22
     f16:	19 96       	adiw	r26, 0x09	; 9
     f18:	9c 93       	st	X, r25
     f1a:	8e 93       	st	-X, r24
     f1c:	18 97       	sbiw	r26, 0x08	; 8
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 e0       	ldi	r20, 0x00	; 0
     f24:	50 e0       	ldi	r21, 0x00	; 0
     f26:	81 e9       	ldi	r24, 0x91	; 145
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
     f28:	93 e0       	ldi	r25, 0x03	; 3
     f2a:	5b df       	rcall	.-330    	; 0xde2 <MENU_addMenuItem>
     f2c:	60 91 ed 03 	lds	r22, 0x03ED
     f30:	70 91 ee 03 	lds	r23, 0x03EE
     f34:	e0 91 e7 03 	lds	r30, 0x03E7
	mainMenu->children[3] = currItem;
     f38:	f0 91 e8 03 	lds	r31, 0x03E8
     f3c:	db 01       	movw	r26, r22
     f3e:	1b 96       	adiw	r26, 0x0b	; 11
     f40:	fc 93       	st	X, r31
     f42:	ee 93       	st	-X, r30
     f44:	1a 97       	sbiw	r26, 0x0a	; 10
     f46:	89 e8       	ldi	r24, 0x89	; 137
     f48:	94 e0       	ldi	r25, 0x04	; 4
     f4a:	93 87       	std	Z+11, r25	; 0x0b
     f4c:	82 87       	std	Z+10, r24	; 0x0a
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
     f52:	40 e0       	ldi	r20, 0x00	; 0
     f54:	50 e0       	ldi	r21, 0x00	; 0
     f56:	8b e9       	ldi	r24, 0x9B	; 155
     f58:	93 e0       	ldi	r25, 0x03	; 3
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
     f5a:	43 df       	rcall	.-378    	; 0xde2 <MENU_addMenuItem>
     f5c:	e0 91 ed 03 	lds	r30, 0x03ED
     f60:	f0 91 ee 03 	lds	r31, 0x03EE
     f64:	80 91 e7 03 	lds	r24, 0x03E7
     f68:	90 91 e8 03 	lds	r25, 0x03E8
	mainMenu->children[4] = currItem;
     f6c:	95 87       	std	Z+13, r25	; 0x0d
     f6e:	84 87       	std	Z+12, r24	; 0x0c
     f70:	10 92 e8 03 	sts	0x03E8, r1
     f74:	10 92 e7 03 	sts	0x03E7, r1
     f78:	60 91 eb 03 	lds	r22, 0x03EB
     f7c:	70 91 ec 03 	lds	r23, 0x03EC
	
	currItem = NULL;
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
     f86:	50 e0       	ldi	r21, 0x00	; 0
     f88:	80 ea       	ldi	r24, 0xA0	; 160
     f8a:	93 e0       	ldi	r25, 0x03	; 3
     f8c:	2a df       	rcall	.-428    	; 0xde2 <MENU_addMenuItem>
     f8e:	60 91 eb 03 	lds	r22, 0x03EB
     f92:	70 91 ec 03 	lds	r23, 0x03EC
     f96:	80 91 e7 03 	lds	r24, 0x03E7
     f9a:	90 91 e8 03 	lds	r25, 0x03E8
	difficultyMenu->children[0] = currItem;
     f9e:	fb 01       	movw	r30, r22
     fa0:	95 83       	std	Z+5, r25	; 0x05
     fa2:	84 83       	std	Z+4, r24	; 0x04
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	40 e0       	ldi	r20, 0x00	; 0
     faa:	50 e0       	ldi	r21, 0x00	; 0
     fac:	85 ea       	ldi	r24, 0xA5	; 165
     fae:	93 e0       	ldi	r25, 0x03	; 3
     fb0:	18 df       	rcall	.-464    	; 0xde2 <MENU_addMenuItem>
     fb2:	60 91 eb 03 	lds	r22, 0x03EB
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
     fb6:	70 91 ec 03 	lds	r23, 0x03EC
     fba:	80 91 e7 03 	lds	r24, 0x03E7
     fbe:	90 91 e8 03 	lds	r25, 0x03E8
     fc2:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
     fc4:	17 96       	adiw	r26, 0x07	; 7
     fc6:	9c 93       	st	X, r25
     fc8:	8e 93       	st	-X, r24
     fca:	16 97       	sbiw	r26, 0x06	; 6
     fcc:	20 e0       	ldi	r18, 0x00	; 0
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	40 e0       	ldi	r20, 0x00	; 0
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	8c ea       	ldi	r24, 0xAC	; 172
     fd6:	93 e0       	ldi	r25, 0x03	; 3
     fd8:	04 df       	rcall	.-504    	; 0xde2 <MENU_addMenuItem>
     fda:	e0 91 eb 03 	lds	r30, 0x03EB
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
     fde:	f0 91 ec 03 	lds	r31, 0x03EC
     fe2:	80 91 e7 03 	lds	r24, 0x03E7
     fe6:	90 91 e8 03 	lds	r25, 0x03E8
     fea:	91 87       	std	Z+9, r25	; 0x09
     fec:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
     fee:	df 91       	pop	r29
     ff0:	cf 91       	pop	r28
     ff2:	08 95       	ret

00000ff4 <MENU_printMenuItem>:
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	ec 01       	movw	r28, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	20 97       	sbiw	r28, 0x00	; 0
     ffe:	49 f0       	breq	.+18     	; 0x1012 <MENU_printMenuItem+0x1e>
    1000:	60 91 0e 01 	lds	r22, 0x010E
}
    1004:	70 91 0f 01 	lds	r23, 0x010F

void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
    1008:	fa d0       	rcall	.+500    	; 0x11fe <OLED_goto>
    100a:	88 81       	ld	r24, Y
		OLED_printString(item->name);
    100c:	99 81       	ldd	r25, Y+1	; 0x01
    100e:	d2 d1       	rcall	.+932    	; 0x13b4 <OLED_printString>
    1010:	07 c0       	rjmp	.+14     	; 0x1020 <MENU_printMenuItem+0x2c>
    1012:	81 eb       	ldi	r24, 0xB1	; 177
    1014:	93 e0       	ldi	r25, 0x03	; 3
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
    1016:	9f 93       	push	r25
    1018:	8f 93       	push	r24
    101a:	38 d4       	rcall	.+2160   	; 0x188c <printf>
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <MENU_printMenu>:
	}
}
    1026:	cf 92       	push	r12
    1028:	df 92       	push	r13
    102a:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	6c 01       	movw	r12, r24
    1038:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
    103a:	fe d0       	rcall	.+508    	; 0x1238 <OLED_clear>
    103c:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	10 d2       	rcall	.+1056   	; 0x1462 <OLED_moveArrow>
    1042:	1e 14       	cp	r1, r14
    1044:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
    1046:	7c f4       	brge	.+30     	; 0x1066 <MENU_printMenu+0x40>
    1048:	86 01       	movw	r16, r12
    104a:	0c 5f       	subi	r16, 0xFC	; 252
    104c:	1f 4f       	sbci	r17, 0xFF	; 255
    104e:	c0 e0       	ldi	r28, 0x00	; 0
    1050:	d0 e0       	ldi	r29, 0x00	; 0
    1052:	be 01       	movw	r22, r28
    1054:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
    1056:	81 91       	ld	r24, Z+
    1058:	91 91       	ld	r25, Z+
    105a:	8f 01       	movw	r16, r30
    105c:	cb df       	rcall	.-106    	; 0xff4 <MENU_printMenuItem>
    105e:	21 96       	adiw	r28, 0x01	; 1
    1060:	ce 15       	cp	r28, r14
    1062:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
    1064:	b1 f7       	brne	.-20     	; 0x1052 <MENU_printMenu+0x2c>
    1066:	d0 92 ea 03 	sts	0x03EA, r13
    106a:	c0 92 e9 03 	sts	0x03E9, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
    106e:	10 92 e5 03 	sts	0x03E5, r1
    1072:	10 92 e4 03 	sts	0x03E4, r1
	
	currentPosition = 0;
    1076:	f6 01       	movw	r30, r12
    1078:	84 81       	ldd	r24, Z+4	; 0x04
    107a:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
    107c:	90 93 e8 03 	sts	0x03E8, r25
    1080:	80 93 e7 03 	sts	0x03E7, r24
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	1f 91       	pop	r17
}
    108a:	0f 91       	pop	r16
    108c:	ff 90       	pop	r15
    108e:	ef 90       	pop	r14
    1090:	df 90       	pop	r13
    1092:	cf 90       	pop	r12
    1094:	08 95       	ret

00001096 <MENU_moveUp>:
    1096:	20 91 e4 03 	lds	r18, 0x03E4
    109a:	30 91 e5 03 	lds	r19, 0x03E5
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
    109e:	12 16       	cp	r1, r18
    10a0:	13 06       	cpc	r1, r19
    10a2:	bc f4       	brge	.+46     	; 0x10d2 <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
    10a4:	c9 01       	movw	r24, r18
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	90 93 e5 03 	sts	0x03E5, r25
    10ac:	80 93 e4 03 	sts	0x03E4, r24
		currItem = currentMenu->children[currentPosition];
    10b0:	e0 91 e9 03 	lds	r30, 0x03E9
    10b4:	f0 91 ea 03 	lds	r31, 0x03EA
    10b8:	2f 5f       	subi	r18, 0xFF	; 255
    10ba:	3f 4f       	sbci	r19, 0xFF	; 255
    10bc:	22 0f       	add	r18, r18
    10be:	33 1f       	adc	r19, r19
    10c0:	e2 0f       	add	r30, r18
    10c2:	f3 1f       	adc	r31, r19
    10c4:	20 81       	ld	r18, Z
    10c6:	31 81       	ldd	r19, Z+1	; 0x01
    10c8:	30 93 e8 03 	sts	0x03E8, r19
    10cc:	20 93 e7 03 	sts	0x03E7, r18
		OLED_moveArrow(currentPosition);
    10d0:	c8 c1       	rjmp	.+912    	; 0x1462 <OLED_moveArrow>
    10d2:	08 95       	ret

000010d4 <MENU_moveDown>:
    10d4:	e0 91 e9 03 	lds	r30, 0x03E9
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
    10d8:	f0 91 ea 03 	lds	r31, 0x03EA
    10dc:	20 91 e4 03 	lds	r18, 0x03E4
    10e0:	30 91 e5 03 	lds	r19, 0x03E5
    10e4:	82 81       	ldd	r24, Z+2	; 0x02
    10e6:	93 81       	ldd	r25, Z+3	; 0x03
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	28 17       	cp	r18, r24
    10ec:	39 07       	cpc	r19, r25
    10ee:	a4 f4       	brge	.+40     	; 0x1118 <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
    10f0:	c9 01       	movw	r24, r18
    10f2:	01 96       	adiw	r24, 0x01	; 1
    10f4:	90 93 e5 03 	sts	0x03E5, r25
    10f8:	80 93 e4 03 	sts	0x03E4, r24
		currItem = currentMenu->children[currentPosition];
    10fc:	2d 5f       	subi	r18, 0xFD	; 253
    10fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1100:	22 0f       	add	r18, r18
    1102:	33 1f       	adc	r19, r19
    1104:	e2 0f       	add	r30, r18
    1106:	f3 1f       	adc	r31, r19
    1108:	20 81       	ld	r18, Z
    110a:	31 81       	ldd	r19, Z+1	; 0x01
    110c:	30 93 e8 03 	sts	0x03E8, r19
    1110:	20 93 e7 03 	sts	0x03E7, r18
		OLED_moveArrow(currentPosition);
    1114:	a6 c1       	rjmp	.+844    	; 0x1462 <OLED_moveArrow>
    1116:	08 95       	ret
    1118:	10 92 e5 03 	sts	0x03E5, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
    111c:	10 92 e4 03 	sts	0x03E4, r1
    1120:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
    1122:	95 81       	ldd	r25, Z+5	; 0x05
    1124:	90 93 e8 03 	sts	0x03E8, r25
    1128:	80 93 e7 03 	sts	0x03E7, r24
    112c:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	98 c1       	rjmp	.+816    	; 0x1462 <OLED_moveArrow>
    1132:	08 95       	ret

00001134 <MENU_moveLeft>:
    1134:	e0 91 e9 03 	lds	r30, 0x03E9
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
    1138:	f0 91 ea 03 	lds	r31, 0x03EA
    113c:	84 89       	ldd	r24, Z+20	; 0x14
    113e:	95 89       	ldd	r25, Z+21	; 0x15
    1140:	00 97       	sbiw	r24, 0x00	; 0
    1142:	21 f0       	breq	.+8      	; 0x114c <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
    1144:	fc 01       	movw	r30, r24
    1146:	62 81       	ldd	r22, Z+2	; 0x02
    1148:	73 81       	ldd	r23, Z+3	; 0x03
    114a:	6d cf       	rjmp	.-294    	; 0x1026 <MENU_printMenu>
    114c:	08 95       	ret

0000114e <MENU_reactivate>:
    114e:	80 91 e9 03 	lds	r24, 0x03E9
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
    1152:	90 91 ea 03 	lds	r25, 0x03EA
    1156:	fc 01       	movw	r30, r24
    1158:	62 81       	ldd	r22, Z+2	; 0x02
    115a:	73 81       	ldd	r23, Z+3	; 0x03
    115c:	64 df       	rcall	.-312    	; 0x1026 <MENU_printMenu>
    115e:	18 c0       	rjmp	.+48     	; 0x1190 <MENU_waitForInput>
	MENU_waitForInput();
    1160:	08 95       	ret

00001162 <MENU_moveRight>:
    1162:	e0 91 e7 03 	lds	r30, 0x03E7
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
    1166:	f0 91 e8 03 	lds	r31, 0x03E8
    116a:	86 81       	ldd	r24, Z+6	; 0x06
    116c:	97 81       	ldd	r25, Z+7	; 0x07
    116e:	89 2b       	or	r24, r25
    1170:	39 f0       	breq	.+14     	; 0x1180 <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
    1172:	84 81       	ldd	r24, Z+4	; 0x04
    1174:	95 81       	ldd	r25, Z+5	; 0x05
    1176:	fc 01       	movw	r30, r24
    1178:	62 81       	ldd	r22, Z+2	; 0x02
    117a:	73 81       	ldd	r23, Z+3	; 0x03
    117c:	54 cf       	rjmp	.-344    	; 0x1026 <MENU_printMenu>
    117e:	08 95       	ret
    1180:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
    1182:	f3 85       	ldd	r31, Z+11	; 0x0b
    1184:	e0 2d       	mov	r30, r0
    1186:	30 97       	sbiw	r30, 0x00	; 0
    1188:	11 f0       	breq	.+4      	; 0x118e <MENU_moveRight+0x2c>
    118a:	09 95       	icall
	{
		currItem->functionPtr();
    118c:	e0 cf       	rjmp	.-64     	; 0x114e <MENU_reactivate>
		MENU_reactivate();
    118e:	08 95       	ret

00001190 <MENU_waitForInput>:
    1190:	80 91 e4 03 	lds	r24, 0x03E4
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
    1194:	90 91 e5 03 	lds	r25, 0x03E5
    1198:	64 d1       	rcall	.+712    	; 0x1462 <OLED_moveArrow>
    119a:	80 91 e6 03 	lds	r24, 0x03E6
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    119e:	88 23       	and	r24, r24
    11a0:	f9 f0       	breq	.+62     	; 0x11e0 <MENU_waitForInput+0x50>
    11a2:	64 dd       	rcall	.-1336   	; 0xc6c <JOY_getDirection>
	{
		currDir = JOY_getDirection();
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	71 f0       	breq	.+28     	; 0x11c4 <MENU_waitForInput+0x34>
		switch(currDir){
    11a8:	18 f4       	brcc	.+6      	; 0x11b0 <MENU_waitForInput+0x20>
    11aa:	81 30       	cpi	r24, 0x01	; 1
    11ac:	49 f0       	breq	.+18     	; 0x11c0 <MENU_waitForInput+0x30>
    11ae:	0b c0       	rjmp	.+22     	; 0x11c6 <MENU_waitForInput+0x36>
    11b0:	83 30       	cpi	r24, 0x03	; 3
    11b2:	21 f0       	breq	.+8      	; 0x11bc <MENU_waitForInput+0x2c>
    11b4:	84 30       	cpi	r24, 0x04	; 4
    11b6:	39 f4       	brne	.+14     	; 0x11c6 <MENU_waitForInput+0x36>
    11b8:	bd df       	rcall	.-134    	; 0x1134 <MENU_moveLeft>
    11ba:	05 c0       	rjmp	.+10     	; 0x11c6 <MENU_waitForInput+0x36>
			case LEFT:
			MENU_moveLeft();
    11bc:	d2 df       	rcall	.-92     	; 0x1162 <MENU_moveRight>
    11be:	03 c0       	rjmp	.+6      	; 0x11c6 <MENU_waitForInput+0x36>
			break;
    11c0:	6a df       	rcall	.-300    	; 0x1096 <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
    11c2:	01 c0       	rjmp	.+2      	; 0x11c6 <MENU_waitForInput+0x36>
    11c4:	87 df       	rcall	.-242    	; 0x10d4 <MENU_moveDown>
			break;
    11c6:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
    11c8:	8f e7       	ldi	r24, 0x7F	; 127
    11ca:	94 e0       	ldi	r25, 0x04	; 4
			break;
    11cc:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
    11ce:	80 40       	sbci	r24, 0x00	; 0
    11d0:	90 40       	sbci	r25, 0x00	; 0
    11d2:	e1 f7       	brne	.-8      	; 0x11cc <MENU_waitForInput+0x3c>
    11d4:	00 c0       	rjmp	.+0      	; 0x11d6 <MENU_waitForInput+0x46>
    11d6:	00 00       	nop
    11d8:	80 91 e6 03 	lds	r24, 0x03E6
    11dc:	81 11       	cpse	r24, r1
    11de:	e1 cf       	rjmp	.-62     	; 0x11a2 <MENU_waitForInput+0x12>
    11e0:	08 95       	ret

000011e2 <MENU_activate>:
    11e2:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    11e4:	80 93 e6 03 	sts	0x03E6, r24
    11e8:	33 de       	rcall	.-922    	; 0xe50 <MENU_buildMenus>
    11ea:	80 91 ed 03 	lds	r24, 0x03ED
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
    11ee:	90 91 ee 03 	lds	r25, 0x03EE
    11f2:	fc 01       	movw	r30, r24
    11f4:	62 81       	ldd	r22, Z+2	; 0x02
    11f6:	73 81       	ldd	r23, Z+3	; 0x03
    11f8:	16 df       	rcall	.-468    	; 0x1026 <MENU_printMenu>
    11fa:	ca cf       	rjmp	.-108    	; 0x1190 <MENU_waitForInput>
    11fc:	08 95       	ret

000011fe <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
    11fe:	26 2f       	mov	r18, r22
    1200:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
    1202:	75 95       	asr	r23
    1204:	67 95       	ror	r22
    1206:	75 95       	asr	r23
    1208:	67 95       	ror	r22
    120a:	75 95       	asr	r23
    120c:	67 95       	ror	r22
    120e:	75 95       	asr	r23
    1210:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
    1212:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
    1214:	80 55       	subi	r24, 0x50	; 80
    1216:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
    1218:	e0 91 12 01 	lds	r30, 0x0112
    121c:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1220:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
    1222:	e0 91 12 01 	lds	r30, 0x0112
    1226:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    122a:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
    122c:	e0 91 12 01 	lds	r30, 0x0112
    1230:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1234:	60 83       	st	Z, r22
    1236:	08 95       	ret

00001238 <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	c1 e0       	ldi	r28, 0x01	; 1
    1240:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1242:	80 e0       	ldi	r24, 0x00	; 0
    1244:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1246:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	70 e0       	ldi	r23, 0x00	; 0
    124c:	d8 df       	rcall	.-80     	; 0x11fe <OLED_goto>
    124e:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1250:	e0 91 10 01 	lds	r30, 0x0110
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    1254:	f0 91 11 01 	lds	r31, 0x0111
    1258:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    125a:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    125c:	80 38       	cpi	r24, 0x80	; 128
    125e:	c1 f7       	brne	.-16     	; 0x1250 <OLED_clear+0x18>
    1260:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1262:	9d 2f       	mov	r25, r29
    1264:	21 96       	adiw	r28, 0x01	; 1
    1266:	c9 30       	cpi	r28, 0x09	; 9
    1268:	d1 05       	cpc	r29, r1
    126a:	71 f7       	brne	.-36     	; 0x1248 <OLED_clear+0x10>
    126c:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    126e:	cf 91       	pop	r28
    1270:	1f 91       	pop	r17
    1272:	08 95       	ret

00001274 <OLED_init>:
    1274:	e0 91 12 01 	lds	r30, 0x0112
//------------------------------------------------------------------------------
// Default initialization routine of the OLED display.

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
    1278:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    127c:	8e ea       	ldi	r24, 0xAE	; 174
    127e:	80 83       	st	Z, r24
// Default initialization routine of the OLED display.

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
    1280:	e0 91 12 01 	lds	r30, 0x0112
    1284:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1288:	81 ea       	ldi	r24, 0xA1	; 161
    128a:	80 83       	st	Z, r24

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
    128c:	e0 91 12 01 	lds	r30, 0x0112
    1290:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1294:	8a ed       	ldi	r24, 0xDA	; 218
    1296:	80 83       	st	Z, r24
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
    1298:	e0 91 12 01 	lds	r30, 0x0112
    129c:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12a0:	82 e1       	ldi	r24, 0x12	; 18
    12a2:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    12a4:	e0 91 12 01 	lds	r30, 0x0112
    12a8:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12ac:	88 ec       	ldi	r24, 0xC8	; 200
    12ae:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    12b0:	e0 91 12 01 	lds	r30, 0x0112
    12b4:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12b8:	88 ea       	ldi	r24, 0xA8	; 168
    12ba:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    12bc:	e0 91 12 01 	lds	r30, 0x0112
    12c0:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12c4:	8f e3       	ldi	r24, 0x3F	; 63
    12c6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    12c8:	e0 91 12 01 	lds	r30, 0x0112
    12cc:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12d0:	85 ed       	ldi	r24, 0xD5	; 213
    12d2:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
    12d4:	e0 91 12 01 	lds	r30, 0x0112
    12d8:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12dc:	80 e8       	ldi	r24, 0x80	; 128
    12de:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    12e0:	e0 91 12 01 	lds	r30, 0x0112
    12e4:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12e8:	81 e8       	ldi	r24, 0x81	; 129
    12ea:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    12ec:	e0 91 12 01 	lds	r30, 0x0112
    12f0:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12f4:	80 e5       	ldi	r24, 0x50	; 80
    12f6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    12f8:	e0 91 12 01 	lds	r30, 0x0112
    12fc:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1300:	89 ed       	ldi	r24, 0xD9	; 217
    1302:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
    1304:	e0 91 12 01 	lds	r30, 0x0112
    1308:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    130c:	81 e2       	ldi	r24, 0x21	; 33
    130e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    1310:	e0 91 12 01 	lds	r30, 0x0112
    1314:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1318:	80 e2       	ldi	r24, 0x20	; 32
    131a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    131c:	e0 91 12 01 	lds	r30, 0x0112
    1320:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1324:	82 e0       	ldi	r24, 0x02	; 2
    1326:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    1328:	e0 91 12 01 	lds	r30, 0x0112
    132c:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1330:	8b ed       	ldi	r24, 0xDB	; 219
    1332:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    1334:	e0 91 12 01 	lds	r30, 0x0112
    1338:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    133c:	80 e3       	ldi	r24, 0x30	; 48
    133e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    1340:	e0 91 12 01 	lds	r30, 0x0112
    1344:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1348:	8d ea       	ldi	r24, 0xAD	; 173
    134a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    134c:	e0 91 12 01 	lds	r30, 0x0112
    1350:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1354:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    1356:	e0 91 12 01 	lds	r30, 0x0112
    135a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    135e:	84 ea       	ldi	r24, 0xA4	; 164
    1360:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    1362:	e0 91 12 01 	lds	r30, 0x0112
    1366:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    136a:	86 ea       	ldi	r24, 0xA6	; 166
    136c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    136e:	e0 91 12 01 	lds	r30, 0x0112
    1372:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1376:	8f ea       	ldi	r24, 0xAF	; 175
    1378:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    137a:	5e cf       	rjmp	.-324    	; 0x1238 <OLED_clear>
    137c:	08 95       	ret

0000137e <OLED_printCharacter>:
    137e:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	22 0f       	add	r18, r18
    1386:	33 1f       	adc	r19, r19
    1388:	22 0f       	add	r18, r18
    138a:	33 1f       	adc	r19, r19
    138c:	22 0f       	add	r18, r18
    138e:	33 1f       	adc	r19, r19
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	20 59       	subi	r18, 0x90	; 144
    1396:	3f 4f       	sbci	r19, 0xFF	; 255
    1398:	f9 01       	movw	r30, r18
    139a:	e8 0f       	add	r30, r24
    139c:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
    139e:	e4 91       	lpm	r30, Z
    13a0:	a0 91 10 01 	lds	r26, 0x0110
    13a4:	b0 91 11 01 	lds	r27, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13a8:	ec 93       	st	X, r30
    13aa:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
    13ac:	88 30       	cpi	r24, 0x08	; 8
    13ae:	91 05       	cpc	r25, r1
    13b0:	99 f7       	brne	.-26     	; 0x1398 <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
    13b2:	08 95       	ret

000013b4 <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
    13b4:	1f 93       	push	r17
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
    13bc:	10 e0       	ldi	r17, 0x00	; 0
    13be:	06 c0       	rjmp	.+12     	; 0x13cc <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
    13c0:	fe 01       	movw	r30, r28
    13c2:	e8 0f       	add	r30, r24
    13c4:	f9 1f       	adc	r31, r25
    13c6:	80 81       	ld	r24, Z
    13c8:	da df       	rcall	.-76     	; 0x137e <OLED_printCharacter>
    13ca:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
    13cc:	81 2f       	mov	r24, r17
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	fe 01       	movw	r30, r28
    13d2:	01 90       	ld	r0, Z+
    13d4:	00 20       	and	r0, r0
    13d6:	e9 f7       	brne	.-6      	; 0x13d2 <OLED_printString+0x1e>
    13d8:	31 97       	sbiw	r30, 0x01	; 1
    13da:	ec 1b       	sub	r30, r28
    13dc:	fd 0b       	sbc	r31, r29
    13de:	8e 17       	cp	r24, r30
    13e0:	9f 07       	cpc	r25, r31
    13e2:	70 f3       	brcs	.-36     	; 0x13c0 <OLED_printString+0xc>
    13e4:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
    13e6:	cf 91       	pop	r28
    13e8:	1f 91       	pop	r17
    13ea:	08 95       	ret

000013ec <OLED_printArrow>:
    13ec:	e0 91 10 01 	lds	r30, 0x0110
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
    13f0:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13f4:	88 e1       	ldi	r24, 0x18	; 24
    13f6:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    13f8:	e0 91 10 01 	lds	r30, 0x0110
    13fc:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1400:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
    1402:	e0 91 10 01 	lds	r30, 0x0110
    1406:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    140a:	9e e7       	ldi	r25, 0x7E	; 126
    140c:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
    140e:	e0 91 10 01 	lds	r30, 0x0110
    1412:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1416:	9c e3       	ldi	r25, 0x3C	; 60
    1418:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    141a:	e0 91 10 01 	lds	r30, 0x0110
    141e:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1422:	80 83       	st	Z, r24
    1424:	08 95       	ret

00001426 <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    1426:	1f 93       	push	r17
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	c1 e0       	ldi	r28, 0x01	; 1
    142e:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1434:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	70 e0       	ldi	r23, 0x00	; 0
    143a:	e1 de       	rcall	.-574    	; 0x11fe <OLED_goto>
    143c:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    143e:	e0 91 10 01 	lds	r30, 0x0110
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    1442:	f0 91 11 01 	lds	r31, 0x0111
    1446:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1448:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    144a:	85 30       	cpi	r24, 0x05	; 5
    144c:	c1 f7       	brne	.-16     	; 0x143e <OLED_clearArrow+0x18>
    144e:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1450:	9d 2f       	mov	r25, r29
    1452:	21 96       	adiw	r28, 0x01	; 1
    1454:	c9 30       	cpi	r28, 0x09	; 9
    1456:	d1 05       	cpc	r29, r1
    1458:	71 f7       	brne	.-36     	; 0x1436 <OLED_clearArrow+0x10>
    145a:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    145c:	cf 91       	pop	r28
    145e:	1f 91       	pop	r17
    1460:	08 95       	ret

00001462 <OLED_moveArrow>:
    1462:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    1464:	df 93       	push	r29
    1466:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
    1468:	de df       	rcall	.-68     	; 0x1426 <OLED_clearArrow>
    146a:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
    146c:	70 e0       	ldi	r23, 0x00	; 0
    146e:	ce 01       	movw	r24, r28
    1470:	c6 de       	rcall	.-628    	; 0x11fe <OLED_goto>
    1472:	bc df       	rcall	.-136    	; 0x13ec <OLED_printArrow>
    1474:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
    1476:	cf 91       	pop	r28
    1478:	08 95       	ret

0000147a <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    147a:	10 92 f1 03 	sts	0x03F1, r1
	currentSliPosition.L_abs = 0;
    147e:	10 92 f2 03 	sts	0x03F2, r1
	currentSliPosition.R_per = 0;
    1482:	10 92 f3 03 	sts	0x03F3, r1
	currentSliPosition.L_per = 0;
    1486:	10 92 f4 03 	sts	0x03F4, r1
    148a:	08 95       	ret

0000148c <SPI_init>:

void SPI_init()
{
	//init external interrupt INT2 on falling edge
	#if defined(__AVR_ATmega162__)
		set_bit(GICR, INT2);
    148c:	8b b7       	in	r24, 0x3b	; 59
    148e:	80 62       	ori	r24, 0x20	; 32
    1490:	8b bf       	out	0x3b, r24	; 59
		clear_bit(EMCUCR, ISC2);
    1492:	86 b7       	in	r24, 0x36	; 54
    1494:	8e 7f       	andi	r24, 0xFE	; 254
    1496:	86 bf       	out	0x36, r24	; 54
		
		// Set _SS, MOSI and SCK output, all others input
		DDR_SPI |= (1<<SS_CAN_CONTROLLER_PIN_MODE) | (1<<MOSI_PIN) | (1<<SCK_PIN);
    1498:	87 b3       	in	r24, 0x17	; 23
    149a:	80 6b       	ori	r24, 0xB0	; 176
    149c:	87 bb       	out	0x17, r24	; 23
	#endif
	
	

	// Enable SPI, Master, set clock rate fck/4
	SPCR = (1<<SPE) | (1<<MSTR);
    149e:	80 e5       	ldi	r24, 0x50	; 80
    14a0:	8d b9       	out	0x0d, r24	; 13
	
	// clock rate fck/2
	SPSR = (1<<SPI2X);
    14a2:	81 e0       	ldi	r24, 0x01	; 1
    14a4:	8e b9       	out	0x0e, r24	; 14

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORT_SPI, SS_CAN_CONTROLLER_PIN);
    14a6:	c4 9a       	sbi	0x18, 4	; 24
    14a8:	08 95       	ret

000014aa <SPI_send>:
}

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    14aa:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    14ac:	77 9b       	sbis	0x0e, 7	; 14
    14ae:	fe cf       	rjmp	.-4      	; 0x14ac <SPI_send+0x2>
}
    14b0:	08 95       	ret

000014b2 <SPI_receive>:

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    14b2:	8f ef       	ldi	r24, 0xFF	; 255
    14b4:	fa df       	rcall	.-12     	; 0x14aa <SPI_send>
    14b6:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    14b8:	fe cf       	rjmp	.-4      	; 0x14b6 <SPI_receive+0x4>
    14ba:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    14bc:	08 95       	ret

000014be <SPI_activateSlave>:

	return data;
}
    14be:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    14c0:	01 c0       	rjmp	.+2      	; 0x14c4 <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    14c2:	c4 98       	cbi	0x18, 4	; 24
    14c4:	08 95       	ret

000014c6 <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    14c6:	81 11       	cpse	r24, r1
    14c8:	01 c0       	rjmp	.+2      	; 0x14cc <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    14ca:	c4 9a       	sbi	0x18, 4	; 24
    14cc:	08 95       	ret

000014ce <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    14ce:	5d 9b       	sbis	0x0b, 5	; 11
    14d0:	fe cf       	rjmp	.-4      	; 0x14ce <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    14d2:	8c b9       	out	0x0c, r24	; 12
    14d4:	08 95       	ret

000014d6 <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    14d6:	5f 9b       	sbis	0x0b, 7	; 11
    14d8:	fe cf       	rjmp	.-4      	; 0x14d6 <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    14da:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
    14dc:	08 95       	ret

000014de <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    14de:	ef 92       	push	r14
    14e0:	ff 92       	push	r15
    14e2:	0f 93       	push	r16
    14e4:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    14e6:	bb 27       	eor	r27, r27
    14e8:	a1 2f       	mov	r26, r17
    14ea:	90 2f       	mov	r25, r16
    14ec:	8f 2d       	mov	r24, r15
    14ee:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    14f0:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    14f2:	88 e1       	ldi	r24, 0x18	; 24
    14f4:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    14f6:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	#if defined(__AVR_ATmega162__)
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    14f8:	8e e8       	ldi	r24, 0x8E	; 142
    14fa:	80 bd       	out	0x20, r24	; 32
	
	#if defined(__AVR_ATmega2560__)
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	#endif
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    14fc:	6b e6       	ldi	r22, 0x6B	; 107
    14fe:	7a e0       	ldi	r23, 0x0A	; 10
    1500:	87 e6       	ldi	r24, 0x67	; 103
    1502:	9a e0       	ldi	r25, 0x0A	; 10
    1504:	79 d1       	rcall	.+754    	; 0x17f8 <fdevopen>
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	ff 90       	pop	r15
    150c:	ef 90       	pop	r14
    150e:	08 95       	ret

00001510 <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    1510:	9b 01       	movw	r18, r22
	
	switch(channel){
    1512:	82 30       	cpi	r24, 0x02	; 2
    1514:	69 f0       	breq	.+26     	; 0x1530 <ADC_request+0x20>
    1516:	18 f4       	brcc	.+6      	; 0x151e <ADC_request+0xe>
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	31 f0       	breq	.+12     	; 0x1528 <ADC_request+0x18>
    151c:	15 c0       	rjmp	.+42     	; 0x1548 <ADC_request+0x38>
    151e:	83 30       	cpi	r24, 0x03	; 3
    1520:	59 f0       	breq	.+22     	; 0x1538 <ADC_request+0x28>
    1522:	84 30       	cpi	r24, 0x04	; 4
    1524:	69 f0       	breq	.+26     	; 0x1540 <ADC_request+0x30>
    1526:	10 c0       	rjmp	.+32     	; 0x1548 <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    1528:	64 e0       	ldi	r22, 0x04	; 4
    152a:	c9 01       	movw	r24, r18
    152c:	dc c9       	rjmp	.-3144   	; 0x8e6 <saveToAddress>
    152e:	08 95       	ret
			break;
    1530:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    1532:	c9 01       	movw	r24, r18
    1534:	d8 c9       	rjmp	.-3152   	; 0x8e6 <saveToAddress>
    1536:	08 95       	ret
    1538:	66 e0       	ldi	r22, 0x06	; 6
			break;
    153a:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    153c:	d4 c9       	rjmp	.-3160   	; 0x8e6 <saveToAddress>
    153e:	08 95       	ret
    1540:	67 e0       	ldi	r22, 0x07	; 7
    1542:	c9 01       	movw	r24, r18
			break;
    1544:	d0 c9       	rjmp	.-3168   	; 0x8e6 <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    1546:	08 95       	ret
    1548:	81 ec       	ldi	r24, 0xC1	; 193
    154a:	93 e0       	ldi	r25, 0x03	; 3
    154c:	9f 93       	push	r25
			break;
    154e:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    1550:	9d d1       	rcall	.+826    	; 0x188c <printf>
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	08 95       	ret

00001558 <ADC_read>:
    1558:	c3 c9       	rjmp	.-3194   	; 0x8e0 <readFromAddress>
    155a:	08 95       	ret

0000155c <__divmodhi4>:
			break;
    155c:	97 fb       	bst	r25, 7
    155e:	07 2e       	mov	r0, r23
    1560:	16 f4       	brtc	.+4      	; 0x1566 <__divmodhi4+0xa>
    1562:	00 94       	com	r0
    1564:	06 d0       	rcall	.+12     	; 0x1572 <__divmodhi4_neg1>
    1566:	77 fd       	sbrc	r23, 7
    1568:	08 d0       	rcall	.+16     	; 0x157a <__divmodhi4_neg2>
    156a:	0b d0       	rcall	.+22     	; 0x1582 <__udivmodhi4>
    156c:	07 fc       	sbrc	r0, 7
    156e:	05 d0       	rcall	.+10     	; 0x157a <__divmodhi4_neg2>
    1570:	3e f4       	brtc	.+14     	; 0x1580 <__divmodhi4_exit>

00001572 <__divmodhi4_neg1>:
    1572:	90 95       	com	r25
    1574:	81 95       	neg	r24
    1576:	9f 4f       	sbci	r25, 0xFF	; 255
    1578:	08 95       	ret

0000157a <__divmodhi4_neg2>:
    157a:	70 95       	com	r23
    157c:	61 95       	neg	r22
    157e:	7f 4f       	sbci	r23, 0xFF	; 255

00001580 <__divmodhi4_exit>:
    1580:	08 95       	ret

00001582 <__udivmodhi4>:
    1582:	aa 1b       	sub	r26, r26
    1584:	bb 1b       	sub	r27, r27
    1586:	51 e1       	ldi	r21, 0x11	; 17
    1588:	07 c0       	rjmp	.+14     	; 0x1598 <__udivmodhi4_ep>

0000158a <__udivmodhi4_loop>:
    158a:	aa 1f       	adc	r26, r26
    158c:	bb 1f       	adc	r27, r27
    158e:	a6 17       	cp	r26, r22
    1590:	b7 07       	cpc	r27, r23
    1592:	10 f0       	brcs	.+4      	; 0x1598 <__udivmodhi4_ep>
    1594:	a6 1b       	sub	r26, r22
    1596:	b7 0b       	sbc	r27, r23

00001598 <__udivmodhi4_ep>:
    1598:	88 1f       	adc	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	5a 95       	dec	r21
    159e:	a9 f7       	brne	.-22     	; 0x158a <__udivmodhi4_loop>
    15a0:	80 95       	com	r24
    15a2:	90 95       	com	r25
    15a4:	bc 01       	movw	r22, r24
    15a6:	cd 01       	movw	r24, r26
    15a8:	08 95       	ret

000015aa <malloc>:
    15aa:	cf 93       	push	r28
    15ac:	df 93       	push	r29
    15ae:	82 30       	cpi	r24, 0x02	; 2
    15b0:	91 05       	cpc	r25, r1
    15b2:	10 f4       	brcc	.+4      	; 0x15b8 <malloc+0xe>
    15b4:	82 e0       	ldi	r24, 0x02	; 2
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	e0 91 f7 03 	lds	r30, 0x03F7
    15bc:	f0 91 f8 03 	lds	r31, 0x03F8
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	a0 e0       	ldi	r26, 0x00	; 0
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	30 97       	sbiw	r30, 0x00	; 0
    15ca:	39 f1       	breq	.+78     	; 0x161a <malloc+0x70>
    15cc:	40 81       	ld	r20, Z
    15ce:	51 81       	ldd	r21, Z+1	; 0x01
    15d0:	48 17       	cp	r20, r24
    15d2:	59 07       	cpc	r21, r25
    15d4:	b8 f0       	brcs	.+46     	; 0x1604 <malloc+0x5a>
    15d6:	48 17       	cp	r20, r24
    15d8:	59 07       	cpc	r21, r25
    15da:	71 f4       	brne	.+28     	; 0x15f8 <malloc+0x4e>
    15dc:	82 81       	ldd	r24, Z+2	; 0x02
    15de:	93 81       	ldd	r25, Z+3	; 0x03
    15e0:	10 97       	sbiw	r26, 0x00	; 0
    15e2:	29 f0       	breq	.+10     	; 0x15ee <malloc+0x44>
    15e4:	13 96       	adiw	r26, 0x03	; 3
    15e6:	9c 93       	st	X, r25
    15e8:	8e 93       	st	-X, r24
    15ea:	12 97       	sbiw	r26, 0x02	; 2
    15ec:	2c c0       	rjmp	.+88     	; 0x1646 <malloc+0x9c>
    15ee:	90 93 f8 03 	sts	0x03F8, r25
    15f2:	80 93 f7 03 	sts	0x03F7, r24
    15f6:	27 c0       	rjmp	.+78     	; 0x1646 <malloc+0x9c>
    15f8:	21 15       	cp	r18, r1
    15fa:	31 05       	cpc	r19, r1
    15fc:	31 f0       	breq	.+12     	; 0x160a <malloc+0x60>
    15fe:	42 17       	cp	r20, r18
    1600:	53 07       	cpc	r21, r19
    1602:	18 f0       	brcs	.+6      	; 0x160a <malloc+0x60>
    1604:	a9 01       	movw	r20, r18
    1606:	db 01       	movw	r26, r22
    1608:	01 c0       	rjmp	.+2      	; 0x160c <malloc+0x62>
    160a:	ef 01       	movw	r28, r30
    160c:	9a 01       	movw	r18, r20
    160e:	bd 01       	movw	r22, r26
    1610:	df 01       	movw	r26, r30
    1612:	02 80       	ldd	r0, Z+2	; 0x02
    1614:	f3 81       	ldd	r31, Z+3	; 0x03
    1616:	e0 2d       	mov	r30, r0
    1618:	d7 cf       	rjmp	.-82     	; 0x15c8 <malloc+0x1e>
    161a:	21 15       	cp	r18, r1
    161c:	31 05       	cpc	r19, r1
    161e:	f9 f0       	breq	.+62     	; 0x165e <malloc+0xb4>
    1620:	28 1b       	sub	r18, r24
    1622:	39 0b       	sbc	r19, r25
    1624:	24 30       	cpi	r18, 0x04	; 4
    1626:	31 05       	cpc	r19, r1
    1628:	80 f4       	brcc	.+32     	; 0x164a <malloc+0xa0>
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	9b 81       	ldd	r25, Y+3	; 0x03
    162e:	61 15       	cp	r22, r1
    1630:	71 05       	cpc	r23, r1
    1632:	21 f0       	breq	.+8      	; 0x163c <malloc+0x92>
    1634:	fb 01       	movw	r30, r22
    1636:	93 83       	std	Z+3, r25	; 0x03
    1638:	82 83       	std	Z+2, r24	; 0x02
    163a:	04 c0       	rjmp	.+8      	; 0x1644 <malloc+0x9a>
    163c:	90 93 f8 03 	sts	0x03F8, r25
    1640:	80 93 f7 03 	sts	0x03F7, r24
    1644:	fe 01       	movw	r30, r28
    1646:	32 96       	adiw	r30, 0x02	; 2
    1648:	44 c0       	rjmp	.+136    	; 0x16d2 <malloc+0x128>
    164a:	fe 01       	movw	r30, r28
    164c:	e2 0f       	add	r30, r18
    164e:	f3 1f       	adc	r31, r19
    1650:	81 93       	st	Z+, r24
    1652:	91 93       	st	Z+, r25
    1654:	22 50       	subi	r18, 0x02	; 2
    1656:	31 09       	sbc	r19, r1
    1658:	39 83       	std	Y+1, r19	; 0x01
    165a:	28 83       	st	Y, r18
    165c:	3a c0       	rjmp	.+116    	; 0x16d2 <malloc+0x128>
    165e:	20 91 f5 03 	lds	r18, 0x03F5
    1662:	30 91 f6 03 	lds	r19, 0x03F6
    1666:	23 2b       	or	r18, r19
    1668:	41 f4       	brne	.+16     	; 0x167a <malloc+0xd0>
    166a:	20 91 02 01 	lds	r18, 0x0102
    166e:	30 91 03 01 	lds	r19, 0x0103
    1672:	30 93 f6 03 	sts	0x03F6, r19
    1676:	20 93 f5 03 	sts	0x03F5, r18
    167a:	20 91 00 01 	lds	r18, 0x0100
    167e:	30 91 01 01 	lds	r19, 0x0101
    1682:	21 15       	cp	r18, r1
    1684:	31 05       	cpc	r19, r1
    1686:	41 f4       	brne	.+16     	; 0x1698 <malloc+0xee>
    1688:	2d b7       	in	r18, 0x3d	; 61
    168a:	3e b7       	in	r19, 0x3e	; 62
    168c:	40 91 04 01 	lds	r20, 0x0104
    1690:	50 91 05 01 	lds	r21, 0x0105
    1694:	24 1b       	sub	r18, r20
    1696:	35 0b       	sbc	r19, r21
    1698:	e0 91 f5 03 	lds	r30, 0x03F5
    169c:	f0 91 f6 03 	lds	r31, 0x03F6
    16a0:	e2 17       	cp	r30, r18
    16a2:	f3 07       	cpc	r31, r19
    16a4:	a0 f4       	brcc	.+40     	; 0x16ce <malloc+0x124>
    16a6:	2e 1b       	sub	r18, r30
    16a8:	3f 0b       	sbc	r19, r31
    16aa:	28 17       	cp	r18, r24
    16ac:	39 07       	cpc	r19, r25
    16ae:	78 f0       	brcs	.+30     	; 0x16ce <malloc+0x124>
    16b0:	ac 01       	movw	r20, r24
    16b2:	4e 5f       	subi	r20, 0xFE	; 254
    16b4:	5f 4f       	sbci	r21, 0xFF	; 255
    16b6:	24 17       	cp	r18, r20
    16b8:	35 07       	cpc	r19, r21
    16ba:	48 f0       	brcs	.+18     	; 0x16ce <malloc+0x124>
    16bc:	4e 0f       	add	r20, r30
    16be:	5f 1f       	adc	r21, r31
    16c0:	50 93 f6 03 	sts	0x03F6, r21
    16c4:	40 93 f5 03 	sts	0x03F5, r20
    16c8:	81 93       	st	Z+, r24
    16ca:	91 93       	st	Z+, r25
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <malloc+0x128>
    16ce:	e0 e0       	ldi	r30, 0x00	; 0
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	cf 01       	movw	r24, r30
    16d4:	df 91       	pop	r29
    16d6:	cf 91       	pop	r28
    16d8:	08 95       	ret

000016da <free>:
    16da:	cf 93       	push	r28
    16dc:	df 93       	push	r29
    16de:	00 97       	sbiw	r24, 0x00	; 0
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <free+0xa>
    16e2:	87 c0       	rjmp	.+270    	; 0x17f2 <free+0x118>
    16e4:	fc 01       	movw	r30, r24
    16e6:	32 97       	sbiw	r30, 0x02	; 2
    16e8:	13 82       	std	Z+3, r1	; 0x03
    16ea:	12 82       	std	Z+2, r1	; 0x02
    16ec:	c0 91 f7 03 	lds	r28, 0x03F7
    16f0:	d0 91 f8 03 	lds	r29, 0x03F8
    16f4:	20 97       	sbiw	r28, 0x00	; 0
    16f6:	81 f4       	brne	.+32     	; 0x1718 <free+0x3e>
    16f8:	20 81       	ld	r18, Z
    16fa:	31 81       	ldd	r19, Z+1	; 0x01
    16fc:	28 0f       	add	r18, r24
    16fe:	39 1f       	adc	r19, r25
    1700:	80 91 f5 03 	lds	r24, 0x03F5
    1704:	90 91 f6 03 	lds	r25, 0x03F6
    1708:	82 17       	cp	r24, r18
    170a:	93 07       	cpc	r25, r19
    170c:	79 f5       	brne	.+94     	; 0x176c <free+0x92>
    170e:	f0 93 f6 03 	sts	0x03F6, r31
    1712:	e0 93 f5 03 	sts	0x03F5, r30
    1716:	6d c0       	rjmp	.+218    	; 0x17f2 <free+0x118>
    1718:	de 01       	movw	r26, r28
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	ae 17       	cp	r26, r30
    1720:	bf 07       	cpc	r27, r31
    1722:	50 f4       	brcc	.+20     	; 0x1738 <free+0x5e>
    1724:	12 96       	adiw	r26, 0x02	; 2
    1726:	4d 91       	ld	r20, X+
    1728:	5c 91       	ld	r21, X
    172a:	13 97       	sbiw	r26, 0x03	; 3
    172c:	9d 01       	movw	r18, r26
    172e:	41 15       	cp	r20, r1
    1730:	51 05       	cpc	r21, r1
    1732:	09 f1       	breq	.+66     	; 0x1776 <free+0x9c>
    1734:	da 01       	movw	r26, r20
    1736:	f3 cf       	rjmp	.-26     	; 0x171e <free+0x44>
    1738:	b3 83       	std	Z+3, r27	; 0x03
    173a:	a2 83       	std	Z+2, r26	; 0x02
    173c:	40 81       	ld	r20, Z
    173e:	51 81       	ldd	r21, Z+1	; 0x01
    1740:	84 0f       	add	r24, r20
    1742:	95 1f       	adc	r25, r21
    1744:	8a 17       	cp	r24, r26
    1746:	9b 07       	cpc	r25, r27
    1748:	71 f4       	brne	.+28     	; 0x1766 <free+0x8c>
    174a:	8d 91       	ld	r24, X+
    174c:	9c 91       	ld	r25, X
    174e:	11 97       	sbiw	r26, 0x01	; 1
    1750:	84 0f       	add	r24, r20
    1752:	95 1f       	adc	r25, r21
    1754:	02 96       	adiw	r24, 0x02	; 2
    1756:	91 83       	std	Z+1, r25	; 0x01
    1758:	80 83       	st	Z, r24
    175a:	12 96       	adiw	r26, 0x02	; 2
    175c:	8d 91       	ld	r24, X+
    175e:	9c 91       	ld	r25, X
    1760:	13 97       	sbiw	r26, 0x03	; 3
    1762:	93 83       	std	Z+3, r25	; 0x03
    1764:	82 83       	std	Z+2, r24	; 0x02
    1766:	21 15       	cp	r18, r1
    1768:	31 05       	cpc	r19, r1
    176a:	29 f4       	brne	.+10     	; 0x1776 <free+0x9c>
    176c:	f0 93 f8 03 	sts	0x03F8, r31
    1770:	e0 93 f7 03 	sts	0x03F7, r30
    1774:	3e c0       	rjmp	.+124    	; 0x17f2 <free+0x118>
    1776:	d9 01       	movw	r26, r18
    1778:	13 96       	adiw	r26, 0x03	; 3
    177a:	fc 93       	st	X, r31
    177c:	ee 93       	st	-X, r30
    177e:	12 97       	sbiw	r26, 0x02	; 2
    1780:	4d 91       	ld	r20, X+
    1782:	5d 91       	ld	r21, X+
    1784:	a4 0f       	add	r26, r20
    1786:	b5 1f       	adc	r27, r21
    1788:	ea 17       	cp	r30, r26
    178a:	fb 07       	cpc	r31, r27
    178c:	79 f4       	brne	.+30     	; 0x17ac <free+0xd2>
    178e:	80 81       	ld	r24, Z
    1790:	91 81       	ldd	r25, Z+1	; 0x01
    1792:	84 0f       	add	r24, r20
    1794:	95 1f       	adc	r25, r21
    1796:	02 96       	adiw	r24, 0x02	; 2
    1798:	d9 01       	movw	r26, r18
    179a:	11 96       	adiw	r26, 0x01	; 1
    179c:	9c 93       	st	X, r25
    179e:	8e 93       	st	-X, r24
    17a0:	82 81       	ldd	r24, Z+2	; 0x02
    17a2:	93 81       	ldd	r25, Z+3	; 0x03
    17a4:	13 96       	adiw	r26, 0x03	; 3
    17a6:	9c 93       	st	X, r25
    17a8:	8e 93       	st	-X, r24
    17aa:	12 97       	sbiw	r26, 0x02	; 2
    17ac:	e0 e0       	ldi	r30, 0x00	; 0
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	9b 81       	ldd	r25, Y+3	; 0x03
    17b4:	00 97       	sbiw	r24, 0x00	; 0
    17b6:	19 f0       	breq	.+6      	; 0x17be <free+0xe4>
    17b8:	fe 01       	movw	r30, r28
    17ba:	ec 01       	movw	r28, r24
    17bc:	f9 cf       	rjmp	.-14     	; 0x17b0 <free+0xd6>
    17be:	ce 01       	movw	r24, r28
    17c0:	02 96       	adiw	r24, 0x02	; 2
    17c2:	28 81       	ld	r18, Y
    17c4:	39 81       	ldd	r19, Y+1	; 0x01
    17c6:	82 0f       	add	r24, r18
    17c8:	93 1f       	adc	r25, r19
    17ca:	20 91 f5 03 	lds	r18, 0x03F5
    17ce:	30 91 f6 03 	lds	r19, 0x03F6
    17d2:	28 17       	cp	r18, r24
    17d4:	39 07       	cpc	r19, r25
    17d6:	69 f4       	brne	.+26     	; 0x17f2 <free+0x118>
    17d8:	30 97       	sbiw	r30, 0x00	; 0
    17da:	29 f4       	brne	.+10     	; 0x17e6 <free+0x10c>
    17dc:	10 92 f8 03 	sts	0x03F8, r1
    17e0:	10 92 f7 03 	sts	0x03F7, r1
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <free+0x110>
    17e6:	13 82       	std	Z+3, r1	; 0x03
    17e8:	12 82       	std	Z+2, r1	; 0x02
    17ea:	d0 93 f6 03 	sts	0x03F6, r29
    17ee:	c0 93 f5 03 	sts	0x03F5, r28
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	08 95       	ret

000017f8 <fdevopen>:
    17f8:	0f 93       	push	r16
    17fa:	1f 93       	push	r17
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	ec 01       	movw	r28, r24
    1802:	8b 01       	movw	r16, r22
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	31 f4       	brne	.+12     	; 0x1814 <fdevopen+0x1c>
    1808:	61 15       	cp	r22, r1
    180a:	71 05       	cpc	r23, r1
    180c:	19 f4       	brne	.+6      	; 0x1814 <fdevopen+0x1c>
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	37 c0       	rjmp	.+110    	; 0x1882 <fdevopen+0x8a>
    1814:	6e e0       	ldi	r22, 0x0E	; 14
    1816:	70 e0       	ldi	r23, 0x00	; 0
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	3d d2       	rcall	.+1146   	; 0x1c98 <calloc>
    181e:	fc 01       	movw	r30, r24
    1820:	00 97       	sbiw	r24, 0x00	; 0
    1822:	a9 f3       	breq	.-22     	; 0x180e <fdevopen+0x16>
    1824:	80 e8       	ldi	r24, 0x80	; 128
    1826:	83 83       	std	Z+3, r24	; 0x03
    1828:	01 15       	cp	r16, r1
    182a:	11 05       	cpc	r17, r1
    182c:	71 f0       	breq	.+28     	; 0x184a <fdevopen+0x52>
    182e:	13 87       	std	Z+11, r17	; 0x0b
    1830:	02 87       	std	Z+10, r16	; 0x0a
    1832:	81 e8       	ldi	r24, 0x81	; 129
    1834:	83 83       	std	Z+3, r24	; 0x03
    1836:	80 91 f9 03 	lds	r24, 0x03F9
    183a:	90 91 fa 03 	lds	r25, 0x03FA
    183e:	89 2b       	or	r24, r25
    1840:	21 f4       	brne	.+8      	; 0x184a <fdevopen+0x52>
    1842:	f0 93 fa 03 	sts	0x03FA, r31
    1846:	e0 93 f9 03 	sts	0x03F9, r30
    184a:	20 97       	sbiw	r28, 0x00	; 0
    184c:	c9 f0       	breq	.+50     	; 0x1880 <fdevopen+0x88>
    184e:	d1 87       	std	Z+9, r29	; 0x09
    1850:	c0 87       	std	Z+8, r28	; 0x08
    1852:	83 81       	ldd	r24, Z+3	; 0x03
    1854:	82 60       	ori	r24, 0x02	; 2
    1856:	83 83       	std	Z+3, r24	; 0x03
    1858:	80 91 fb 03 	lds	r24, 0x03FB
    185c:	90 91 fc 03 	lds	r25, 0x03FC
    1860:	89 2b       	or	r24, r25
    1862:	71 f4       	brne	.+28     	; 0x1880 <fdevopen+0x88>
    1864:	f0 93 fc 03 	sts	0x03FC, r31
    1868:	e0 93 fb 03 	sts	0x03FB, r30
    186c:	80 91 fd 03 	lds	r24, 0x03FD
    1870:	90 91 fe 03 	lds	r25, 0x03FE
    1874:	89 2b       	or	r24, r25
    1876:	21 f4       	brne	.+8      	; 0x1880 <fdevopen+0x88>
    1878:	f0 93 fe 03 	sts	0x03FE, r31
    187c:	e0 93 fd 03 	sts	0x03FD, r30
    1880:	cf 01       	movw	r24, r30
    1882:	df 91       	pop	r29
    1884:	cf 91       	pop	r28
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	08 95       	ret

0000188c <printf>:
    188c:	a0 e0       	ldi	r26, 0x00	; 0
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	eb e4       	ldi	r30, 0x4B	; 75
    1892:	fc e0       	ldi	r31, 0x0C	; 12
    1894:	d8 c2       	rjmp	.+1456   	; 0x1e46 <__prologue_saves__+0x20>
    1896:	fe 01       	movw	r30, r28
    1898:	35 96       	adiw	r30, 0x05	; 5
    189a:	61 91       	ld	r22, Z+
    189c:	71 91       	ld	r23, Z+
    189e:	af 01       	movw	r20, r30
    18a0:	80 91 fb 03 	lds	r24, 0x03FB
    18a4:	90 91 fc 03 	lds	r25, 0x03FC
    18a8:	34 d0       	rcall	.+104    	; 0x1912 <vfprintf>
    18aa:	e2 e0       	ldi	r30, 0x02	; 2
    18ac:	e8 c2       	rjmp	.+1488   	; 0x1e7e <__epilogue_restores__+0x20>

000018ae <putchar>:
    18ae:	60 91 fb 03 	lds	r22, 0x03FB
    18b2:	70 91 fc 03 	lds	r23, 0x03FC
    18b6:	27 c2       	rjmp	.+1102   	; 0x1d06 <fputc>

000018b8 <puts>:
    18b8:	0f 93       	push	r16
    18ba:	1f 93       	push	r17
    18bc:	cf 93       	push	r28
    18be:	df 93       	push	r29
    18c0:	e0 91 fb 03 	lds	r30, 0x03FB
    18c4:	f0 91 fc 03 	lds	r31, 0x03FC
    18c8:	23 81       	ldd	r18, Z+3	; 0x03
    18ca:	21 ff       	sbrs	r18, 1
    18cc:	1b c0       	rjmp	.+54     	; 0x1904 <puts+0x4c>
    18ce:	ec 01       	movw	r28, r24
    18d0:	00 e0       	ldi	r16, 0x00	; 0
    18d2:	10 e0       	ldi	r17, 0x00	; 0
    18d4:	89 91       	ld	r24, Y+
    18d6:	60 91 fb 03 	lds	r22, 0x03FB
    18da:	70 91 fc 03 	lds	r23, 0x03FC
    18de:	db 01       	movw	r26, r22
    18e0:	18 96       	adiw	r26, 0x08	; 8
    18e2:	ed 91       	ld	r30, X+
    18e4:	fc 91       	ld	r31, X
    18e6:	19 97       	sbiw	r26, 0x09	; 9
    18e8:	88 23       	and	r24, r24
    18ea:	31 f0       	breq	.+12     	; 0x18f8 <puts+0x40>
    18ec:	09 95       	icall
    18ee:	89 2b       	or	r24, r25
    18f0:	89 f3       	breq	.-30     	; 0x18d4 <puts+0x1c>
    18f2:	0f ef       	ldi	r16, 0xFF	; 255
    18f4:	1f ef       	ldi	r17, 0xFF	; 255
    18f6:	ee cf       	rjmp	.-36     	; 0x18d4 <puts+0x1c>
    18f8:	8a e0       	ldi	r24, 0x0A	; 10
    18fa:	09 95       	icall
    18fc:	89 2b       	or	r24, r25
    18fe:	11 f4       	brne	.+4      	; 0x1904 <puts+0x4c>
    1900:	c8 01       	movw	r24, r16
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <puts+0x50>
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	9f ef       	ldi	r25, 0xFF	; 255
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	1f 91       	pop	r17
    190e:	0f 91       	pop	r16
    1910:	08 95       	ret

00001912 <vfprintf>:
    1912:	ac e0       	ldi	r26, 0x0C	; 12
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	ee e8       	ldi	r30, 0x8E	; 142
    1918:	fc e0       	ldi	r31, 0x0C	; 12
    191a:	85 c2       	rjmp	.+1290   	; 0x1e26 <__prologue_saves__>
    191c:	7c 01       	movw	r14, r24
    191e:	6b 01       	movw	r12, r22
    1920:	8a 01       	movw	r16, r20
    1922:	fc 01       	movw	r30, r24
    1924:	17 82       	std	Z+7, r1	; 0x07
    1926:	16 82       	std	Z+6, r1	; 0x06
    1928:	83 81       	ldd	r24, Z+3	; 0x03
    192a:	81 ff       	sbrs	r24, 1
    192c:	b0 c1       	rjmp	.+864    	; 0x1c8e <vfprintf+0x37c>
    192e:	ce 01       	movw	r24, r28
    1930:	01 96       	adiw	r24, 0x01	; 1
    1932:	4c 01       	movw	r8, r24
    1934:	f7 01       	movw	r30, r14
    1936:	93 81       	ldd	r25, Z+3	; 0x03
    1938:	f6 01       	movw	r30, r12
    193a:	93 fd       	sbrc	r25, 3
    193c:	85 91       	lpm	r24, Z+
    193e:	93 ff       	sbrs	r25, 3
    1940:	81 91       	ld	r24, Z+
    1942:	6f 01       	movw	r12, r30
    1944:	88 23       	and	r24, r24
    1946:	09 f4       	brne	.+2      	; 0x194a <vfprintf+0x38>
    1948:	9e c1       	rjmp	.+828    	; 0x1c86 <vfprintf+0x374>
    194a:	85 32       	cpi	r24, 0x25	; 37
    194c:	39 f4       	brne	.+14     	; 0x195c <vfprintf+0x4a>
    194e:	93 fd       	sbrc	r25, 3
    1950:	85 91       	lpm	r24, Z+
    1952:	93 ff       	sbrs	r25, 3
    1954:	81 91       	ld	r24, Z+
    1956:	6f 01       	movw	r12, r30
    1958:	85 32       	cpi	r24, 0x25	; 37
    195a:	21 f4       	brne	.+8      	; 0x1964 <vfprintf+0x52>
    195c:	b7 01       	movw	r22, r14
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	d2 d1       	rcall	.+932    	; 0x1d06 <fputc>
    1962:	e8 cf       	rjmp	.-48     	; 0x1934 <vfprintf+0x22>
    1964:	51 2c       	mov	r5, r1
    1966:	31 2c       	mov	r3, r1
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	20 32       	cpi	r18, 0x20	; 32
    196c:	a0 f4       	brcc	.+40     	; 0x1996 <vfprintf+0x84>
    196e:	8b 32       	cpi	r24, 0x2B	; 43
    1970:	69 f0       	breq	.+26     	; 0x198c <vfprintf+0x7a>
    1972:	30 f4       	brcc	.+12     	; 0x1980 <vfprintf+0x6e>
    1974:	80 32       	cpi	r24, 0x20	; 32
    1976:	59 f0       	breq	.+22     	; 0x198e <vfprintf+0x7c>
    1978:	83 32       	cpi	r24, 0x23	; 35
    197a:	69 f4       	brne	.+26     	; 0x1996 <vfprintf+0x84>
    197c:	20 61       	ori	r18, 0x10	; 16
    197e:	2c c0       	rjmp	.+88     	; 0x19d8 <vfprintf+0xc6>
    1980:	8d 32       	cpi	r24, 0x2D	; 45
    1982:	39 f0       	breq	.+14     	; 0x1992 <vfprintf+0x80>
    1984:	80 33       	cpi	r24, 0x30	; 48
    1986:	39 f4       	brne	.+14     	; 0x1996 <vfprintf+0x84>
    1988:	21 60       	ori	r18, 0x01	; 1
    198a:	26 c0       	rjmp	.+76     	; 0x19d8 <vfprintf+0xc6>
    198c:	22 60       	ori	r18, 0x02	; 2
    198e:	24 60       	ori	r18, 0x04	; 4
    1990:	23 c0       	rjmp	.+70     	; 0x19d8 <vfprintf+0xc6>
    1992:	28 60       	ori	r18, 0x08	; 8
    1994:	21 c0       	rjmp	.+66     	; 0x19d8 <vfprintf+0xc6>
    1996:	27 fd       	sbrc	r18, 7
    1998:	27 c0       	rjmp	.+78     	; 0x19e8 <vfprintf+0xd6>
    199a:	30 ed       	ldi	r19, 0xD0	; 208
    199c:	38 0f       	add	r19, r24
    199e:	3a 30       	cpi	r19, 0x0A	; 10
    19a0:	78 f4       	brcc	.+30     	; 0x19c0 <vfprintf+0xae>
    19a2:	26 ff       	sbrs	r18, 6
    19a4:	06 c0       	rjmp	.+12     	; 0x19b2 <vfprintf+0xa0>
    19a6:	fa e0       	ldi	r31, 0x0A	; 10
    19a8:	5f 9e       	mul	r5, r31
    19aa:	30 0d       	add	r19, r0
    19ac:	11 24       	eor	r1, r1
    19ae:	53 2e       	mov	r5, r19
    19b0:	13 c0       	rjmp	.+38     	; 0x19d8 <vfprintf+0xc6>
    19b2:	8a e0       	ldi	r24, 0x0A	; 10
    19b4:	38 9e       	mul	r3, r24
    19b6:	30 0d       	add	r19, r0
    19b8:	11 24       	eor	r1, r1
    19ba:	33 2e       	mov	r3, r19
    19bc:	20 62       	ori	r18, 0x20	; 32
    19be:	0c c0       	rjmp	.+24     	; 0x19d8 <vfprintf+0xc6>
    19c0:	8e 32       	cpi	r24, 0x2E	; 46
    19c2:	21 f4       	brne	.+8      	; 0x19cc <vfprintf+0xba>
    19c4:	26 fd       	sbrc	r18, 6
    19c6:	5f c1       	rjmp	.+702    	; 0x1c86 <vfprintf+0x374>
    19c8:	20 64       	ori	r18, 0x40	; 64
    19ca:	06 c0       	rjmp	.+12     	; 0x19d8 <vfprintf+0xc6>
    19cc:	8c 36       	cpi	r24, 0x6C	; 108
    19ce:	11 f4       	brne	.+4      	; 0x19d4 <vfprintf+0xc2>
    19d0:	20 68       	ori	r18, 0x80	; 128
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <vfprintf+0xc6>
    19d4:	88 36       	cpi	r24, 0x68	; 104
    19d6:	41 f4       	brne	.+16     	; 0x19e8 <vfprintf+0xd6>
    19d8:	f6 01       	movw	r30, r12
    19da:	93 fd       	sbrc	r25, 3
    19dc:	85 91       	lpm	r24, Z+
    19de:	93 ff       	sbrs	r25, 3
    19e0:	81 91       	ld	r24, Z+
    19e2:	6f 01       	movw	r12, r30
    19e4:	81 11       	cpse	r24, r1
    19e6:	c1 cf       	rjmp	.-126    	; 0x196a <vfprintf+0x58>
    19e8:	98 2f       	mov	r25, r24
    19ea:	9f 7d       	andi	r25, 0xDF	; 223
    19ec:	95 54       	subi	r25, 0x45	; 69
    19ee:	93 30       	cpi	r25, 0x03	; 3
    19f0:	28 f4       	brcc	.+10     	; 0x19fc <vfprintf+0xea>
    19f2:	0c 5f       	subi	r16, 0xFC	; 252
    19f4:	1f 4f       	sbci	r17, 0xFF	; 255
    19f6:	ff e3       	ldi	r31, 0x3F	; 63
    19f8:	f9 83       	std	Y+1, r31	; 0x01
    19fa:	0d c0       	rjmp	.+26     	; 0x1a16 <vfprintf+0x104>
    19fc:	83 36       	cpi	r24, 0x63	; 99
    19fe:	31 f0       	breq	.+12     	; 0x1a0c <vfprintf+0xfa>
    1a00:	83 37       	cpi	r24, 0x73	; 115
    1a02:	71 f0       	breq	.+28     	; 0x1a20 <vfprintf+0x10e>
    1a04:	83 35       	cpi	r24, 0x53	; 83
    1a06:	09 f0       	breq	.+2      	; 0x1a0a <vfprintf+0xf8>
    1a08:	57 c0       	rjmp	.+174    	; 0x1ab8 <vfprintf+0x1a6>
    1a0a:	21 c0       	rjmp	.+66     	; 0x1a4e <vfprintf+0x13c>
    1a0c:	f8 01       	movw	r30, r16
    1a0e:	80 81       	ld	r24, Z
    1a10:	89 83       	std	Y+1, r24	; 0x01
    1a12:	0e 5f       	subi	r16, 0xFE	; 254
    1a14:	1f 4f       	sbci	r17, 0xFF	; 255
    1a16:	44 24       	eor	r4, r4
    1a18:	43 94       	inc	r4
    1a1a:	51 2c       	mov	r5, r1
    1a1c:	54 01       	movw	r10, r8
    1a1e:	14 c0       	rjmp	.+40     	; 0x1a48 <vfprintf+0x136>
    1a20:	38 01       	movw	r6, r16
    1a22:	f2 e0       	ldi	r31, 0x02	; 2
    1a24:	6f 0e       	add	r6, r31
    1a26:	71 1c       	adc	r7, r1
    1a28:	f8 01       	movw	r30, r16
    1a2a:	a0 80       	ld	r10, Z
    1a2c:	b1 80       	ldd	r11, Z+1	; 0x01
    1a2e:	26 ff       	sbrs	r18, 6
    1a30:	03 c0       	rjmp	.+6      	; 0x1a38 <vfprintf+0x126>
    1a32:	65 2d       	mov	r22, r5
    1a34:	70 e0       	ldi	r23, 0x00	; 0
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <vfprintf+0x12a>
    1a38:	6f ef       	ldi	r22, 0xFF	; 255
    1a3a:	7f ef       	ldi	r23, 0xFF	; 255
    1a3c:	c5 01       	movw	r24, r10
    1a3e:	2c 87       	std	Y+12, r18	; 0x0c
    1a40:	57 d1       	rcall	.+686    	; 0x1cf0 <strnlen>
    1a42:	2c 01       	movw	r4, r24
    1a44:	83 01       	movw	r16, r6
    1a46:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a48:	2f 77       	andi	r18, 0x7F	; 127
    1a4a:	22 2e       	mov	r2, r18
    1a4c:	16 c0       	rjmp	.+44     	; 0x1a7a <vfprintf+0x168>
    1a4e:	38 01       	movw	r6, r16
    1a50:	f2 e0       	ldi	r31, 0x02	; 2
    1a52:	6f 0e       	add	r6, r31
    1a54:	71 1c       	adc	r7, r1
    1a56:	f8 01       	movw	r30, r16
    1a58:	a0 80       	ld	r10, Z
    1a5a:	b1 80       	ldd	r11, Z+1	; 0x01
    1a5c:	26 ff       	sbrs	r18, 6
    1a5e:	03 c0       	rjmp	.+6      	; 0x1a66 <vfprintf+0x154>
    1a60:	65 2d       	mov	r22, r5
    1a62:	70 e0       	ldi	r23, 0x00	; 0
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <vfprintf+0x158>
    1a66:	6f ef       	ldi	r22, 0xFF	; 255
    1a68:	7f ef       	ldi	r23, 0xFF	; 255
    1a6a:	c5 01       	movw	r24, r10
    1a6c:	2c 87       	std	Y+12, r18	; 0x0c
    1a6e:	2e d1       	rcall	.+604    	; 0x1ccc <strnlen_P>
    1a70:	2c 01       	movw	r4, r24
    1a72:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a74:	20 68       	ori	r18, 0x80	; 128
    1a76:	22 2e       	mov	r2, r18
    1a78:	83 01       	movw	r16, r6
    1a7a:	23 fc       	sbrc	r2, 3
    1a7c:	19 c0       	rjmp	.+50     	; 0x1ab0 <vfprintf+0x19e>
    1a7e:	83 2d       	mov	r24, r3
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	48 16       	cp	r4, r24
    1a84:	59 06       	cpc	r5, r25
    1a86:	a0 f4       	brcc	.+40     	; 0x1ab0 <vfprintf+0x19e>
    1a88:	b7 01       	movw	r22, r14
    1a8a:	80 e2       	ldi	r24, 0x20	; 32
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	3b d1       	rcall	.+630    	; 0x1d06 <fputc>
    1a90:	3a 94       	dec	r3
    1a92:	f5 cf       	rjmp	.-22     	; 0x1a7e <vfprintf+0x16c>
    1a94:	f5 01       	movw	r30, r10
    1a96:	27 fc       	sbrc	r2, 7
    1a98:	85 91       	lpm	r24, Z+
    1a9a:	27 fe       	sbrs	r2, 7
    1a9c:	81 91       	ld	r24, Z+
    1a9e:	5f 01       	movw	r10, r30
    1aa0:	b7 01       	movw	r22, r14
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	30 d1       	rcall	.+608    	; 0x1d06 <fputc>
    1aa6:	31 10       	cpse	r3, r1
    1aa8:	3a 94       	dec	r3
    1aaa:	f1 e0       	ldi	r31, 0x01	; 1
    1aac:	4f 1a       	sub	r4, r31
    1aae:	51 08       	sbc	r5, r1
    1ab0:	41 14       	cp	r4, r1
    1ab2:	51 04       	cpc	r5, r1
    1ab4:	79 f7       	brne	.-34     	; 0x1a94 <vfprintf+0x182>
    1ab6:	de c0       	rjmp	.+444    	; 0x1c74 <vfprintf+0x362>
    1ab8:	84 36       	cpi	r24, 0x64	; 100
    1aba:	11 f0       	breq	.+4      	; 0x1ac0 <vfprintf+0x1ae>
    1abc:	89 36       	cpi	r24, 0x69	; 105
    1abe:	31 f5       	brne	.+76     	; 0x1b0c <vfprintf+0x1fa>
    1ac0:	f8 01       	movw	r30, r16
    1ac2:	27 ff       	sbrs	r18, 7
    1ac4:	07 c0       	rjmp	.+14     	; 0x1ad4 <vfprintf+0x1c2>
    1ac6:	60 81       	ld	r22, Z
    1ac8:	71 81       	ldd	r23, Z+1	; 0x01
    1aca:	82 81       	ldd	r24, Z+2	; 0x02
    1acc:	93 81       	ldd	r25, Z+3	; 0x03
    1ace:	0c 5f       	subi	r16, 0xFC	; 252
    1ad0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad2:	08 c0       	rjmp	.+16     	; 0x1ae4 <vfprintf+0x1d2>
    1ad4:	60 81       	ld	r22, Z
    1ad6:	71 81       	ldd	r23, Z+1	; 0x01
    1ad8:	88 27       	eor	r24, r24
    1ada:	77 fd       	sbrc	r23, 7
    1adc:	80 95       	com	r24
    1ade:	98 2f       	mov	r25, r24
    1ae0:	0e 5f       	subi	r16, 0xFE	; 254
    1ae2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ae4:	2f 76       	andi	r18, 0x6F	; 111
    1ae6:	b2 2e       	mov	r11, r18
    1ae8:	97 ff       	sbrs	r25, 7
    1aea:	09 c0       	rjmp	.+18     	; 0x1afe <vfprintf+0x1ec>
    1aec:	90 95       	com	r25
    1aee:	80 95       	com	r24
    1af0:	70 95       	com	r23
    1af2:	61 95       	neg	r22
    1af4:	7f 4f       	sbci	r23, 0xFF	; 255
    1af6:	8f 4f       	sbci	r24, 0xFF	; 255
    1af8:	9f 4f       	sbci	r25, 0xFF	; 255
    1afa:	20 68       	ori	r18, 0x80	; 128
    1afc:	b2 2e       	mov	r11, r18
    1afe:	2a e0       	ldi	r18, 0x0A	; 10
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	a4 01       	movw	r20, r8
    1b04:	32 d1       	rcall	.+612    	; 0x1d6a <__ultoa_invert>
    1b06:	a8 2e       	mov	r10, r24
    1b08:	a8 18       	sub	r10, r8
    1b0a:	43 c0       	rjmp	.+134    	; 0x1b92 <vfprintf+0x280>
    1b0c:	85 37       	cpi	r24, 0x75	; 117
    1b0e:	29 f4       	brne	.+10     	; 0x1b1a <vfprintf+0x208>
    1b10:	2f 7e       	andi	r18, 0xEF	; 239
    1b12:	b2 2e       	mov	r11, r18
    1b14:	2a e0       	ldi	r18, 0x0A	; 10
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	25 c0       	rjmp	.+74     	; 0x1b64 <vfprintf+0x252>
    1b1a:	f2 2f       	mov	r31, r18
    1b1c:	f9 7f       	andi	r31, 0xF9	; 249
    1b1e:	bf 2e       	mov	r11, r31
    1b20:	8f 36       	cpi	r24, 0x6F	; 111
    1b22:	c1 f0       	breq	.+48     	; 0x1b54 <vfprintf+0x242>
    1b24:	18 f4       	brcc	.+6      	; 0x1b2c <vfprintf+0x21a>
    1b26:	88 35       	cpi	r24, 0x58	; 88
    1b28:	79 f0       	breq	.+30     	; 0x1b48 <vfprintf+0x236>
    1b2a:	ad c0       	rjmp	.+346    	; 0x1c86 <vfprintf+0x374>
    1b2c:	80 37       	cpi	r24, 0x70	; 112
    1b2e:	19 f0       	breq	.+6      	; 0x1b36 <vfprintf+0x224>
    1b30:	88 37       	cpi	r24, 0x78	; 120
    1b32:	21 f0       	breq	.+8      	; 0x1b3c <vfprintf+0x22a>
    1b34:	a8 c0       	rjmp	.+336    	; 0x1c86 <vfprintf+0x374>
    1b36:	2f 2f       	mov	r18, r31
    1b38:	20 61       	ori	r18, 0x10	; 16
    1b3a:	b2 2e       	mov	r11, r18
    1b3c:	b4 fe       	sbrs	r11, 4
    1b3e:	0d c0       	rjmp	.+26     	; 0x1b5a <vfprintf+0x248>
    1b40:	8b 2d       	mov	r24, r11
    1b42:	84 60       	ori	r24, 0x04	; 4
    1b44:	b8 2e       	mov	r11, r24
    1b46:	09 c0       	rjmp	.+18     	; 0x1b5a <vfprintf+0x248>
    1b48:	24 ff       	sbrs	r18, 4
    1b4a:	0a c0       	rjmp	.+20     	; 0x1b60 <vfprintf+0x24e>
    1b4c:	9f 2f       	mov	r25, r31
    1b4e:	96 60       	ori	r25, 0x06	; 6
    1b50:	b9 2e       	mov	r11, r25
    1b52:	06 c0       	rjmp	.+12     	; 0x1b60 <vfprintf+0x24e>
    1b54:	28 e0       	ldi	r18, 0x08	; 8
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	05 c0       	rjmp	.+10     	; 0x1b64 <vfprintf+0x252>
    1b5a:	20 e1       	ldi	r18, 0x10	; 16
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <vfprintf+0x252>
    1b60:	20 e1       	ldi	r18, 0x10	; 16
    1b62:	32 e0       	ldi	r19, 0x02	; 2
    1b64:	f8 01       	movw	r30, r16
    1b66:	b7 fe       	sbrs	r11, 7
    1b68:	07 c0       	rjmp	.+14     	; 0x1b78 <vfprintf+0x266>
    1b6a:	60 81       	ld	r22, Z
    1b6c:	71 81       	ldd	r23, Z+1	; 0x01
    1b6e:	82 81       	ldd	r24, Z+2	; 0x02
    1b70:	93 81       	ldd	r25, Z+3	; 0x03
    1b72:	0c 5f       	subi	r16, 0xFC	; 252
    1b74:	1f 4f       	sbci	r17, 0xFF	; 255
    1b76:	06 c0       	rjmp	.+12     	; 0x1b84 <vfprintf+0x272>
    1b78:	60 81       	ld	r22, Z
    1b7a:	71 81       	ldd	r23, Z+1	; 0x01
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	0e 5f       	subi	r16, 0xFE	; 254
    1b82:	1f 4f       	sbci	r17, 0xFF	; 255
    1b84:	a4 01       	movw	r20, r8
    1b86:	f1 d0       	rcall	.+482    	; 0x1d6a <__ultoa_invert>
    1b88:	a8 2e       	mov	r10, r24
    1b8a:	a8 18       	sub	r10, r8
    1b8c:	fb 2d       	mov	r31, r11
    1b8e:	ff 77       	andi	r31, 0x7F	; 127
    1b90:	bf 2e       	mov	r11, r31
    1b92:	b6 fe       	sbrs	r11, 6
    1b94:	0b c0       	rjmp	.+22     	; 0x1bac <vfprintf+0x29a>
    1b96:	2b 2d       	mov	r18, r11
    1b98:	2e 7f       	andi	r18, 0xFE	; 254
    1b9a:	a5 14       	cp	r10, r5
    1b9c:	50 f4       	brcc	.+20     	; 0x1bb2 <vfprintf+0x2a0>
    1b9e:	b4 fe       	sbrs	r11, 4
    1ba0:	0a c0       	rjmp	.+20     	; 0x1bb6 <vfprintf+0x2a4>
    1ba2:	b2 fc       	sbrc	r11, 2
    1ba4:	08 c0       	rjmp	.+16     	; 0x1bb6 <vfprintf+0x2a4>
    1ba6:	2b 2d       	mov	r18, r11
    1ba8:	2e 7e       	andi	r18, 0xEE	; 238
    1baa:	05 c0       	rjmp	.+10     	; 0x1bb6 <vfprintf+0x2a4>
    1bac:	7a 2c       	mov	r7, r10
    1bae:	2b 2d       	mov	r18, r11
    1bb0:	03 c0       	rjmp	.+6      	; 0x1bb8 <vfprintf+0x2a6>
    1bb2:	7a 2c       	mov	r7, r10
    1bb4:	01 c0       	rjmp	.+2      	; 0x1bb8 <vfprintf+0x2a6>
    1bb6:	75 2c       	mov	r7, r5
    1bb8:	24 ff       	sbrs	r18, 4
    1bba:	0d c0       	rjmp	.+26     	; 0x1bd6 <vfprintf+0x2c4>
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	ea 0d       	add	r30, r10
    1bc0:	f1 1d       	adc	r31, r1
    1bc2:	80 81       	ld	r24, Z
    1bc4:	80 33       	cpi	r24, 0x30	; 48
    1bc6:	11 f4       	brne	.+4      	; 0x1bcc <vfprintf+0x2ba>
    1bc8:	29 7e       	andi	r18, 0xE9	; 233
    1bca:	09 c0       	rjmp	.+18     	; 0x1bde <vfprintf+0x2cc>
    1bcc:	22 ff       	sbrs	r18, 2
    1bce:	06 c0       	rjmp	.+12     	; 0x1bdc <vfprintf+0x2ca>
    1bd0:	73 94       	inc	r7
    1bd2:	73 94       	inc	r7
    1bd4:	04 c0       	rjmp	.+8      	; 0x1bde <vfprintf+0x2cc>
    1bd6:	82 2f       	mov	r24, r18
    1bd8:	86 78       	andi	r24, 0x86	; 134
    1bda:	09 f0       	breq	.+2      	; 0x1bde <vfprintf+0x2cc>
    1bdc:	73 94       	inc	r7
    1bde:	23 fd       	sbrc	r18, 3
    1be0:	12 c0       	rjmp	.+36     	; 0x1c06 <vfprintf+0x2f4>
    1be2:	20 ff       	sbrs	r18, 0
    1be4:	06 c0       	rjmp	.+12     	; 0x1bf2 <vfprintf+0x2e0>
    1be6:	5a 2c       	mov	r5, r10
    1be8:	73 14       	cp	r7, r3
    1bea:	18 f4       	brcc	.+6      	; 0x1bf2 <vfprintf+0x2e0>
    1bec:	53 0c       	add	r5, r3
    1bee:	57 18       	sub	r5, r7
    1bf0:	73 2c       	mov	r7, r3
    1bf2:	73 14       	cp	r7, r3
    1bf4:	60 f4       	brcc	.+24     	; 0x1c0e <vfprintf+0x2fc>
    1bf6:	b7 01       	movw	r22, r14
    1bf8:	80 e2       	ldi	r24, 0x20	; 32
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	2c 87       	std	Y+12, r18	; 0x0c
    1bfe:	83 d0       	rcall	.+262    	; 0x1d06 <fputc>
    1c00:	73 94       	inc	r7
    1c02:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c04:	f6 cf       	rjmp	.-20     	; 0x1bf2 <vfprintf+0x2e0>
    1c06:	73 14       	cp	r7, r3
    1c08:	10 f4       	brcc	.+4      	; 0x1c0e <vfprintf+0x2fc>
    1c0a:	37 18       	sub	r3, r7
    1c0c:	01 c0       	rjmp	.+2      	; 0x1c10 <vfprintf+0x2fe>
    1c0e:	31 2c       	mov	r3, r1
    1c10:	24 ff       	sbrs	r18, 4
    1c12:	11 c0       	rjmp	.+34     	; 0x1c36 <vfprintf+0x324>
    1c14:	b7 01       	movw	r22, r14
    1c16:	80 e3       	ldi	r24, 0x30	; 48
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	2c 87       	std	Y+12, r18	; 0x0c
    1c1c:	74 d0       	rcall	.+232    	; 0x1d06 <fputc>
    1c1e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c20:	22 ff       	sbrs	r18, 2
    1c22:	16 c0       	rjmp	.+44     	; 0x1c50 <vfprintf+0x33e>
    1c24:	21 ff       	sbrs	r18, 1
    1c26:	03 c0       	rjmp	.+6      	; 0x1c2e <vfprintf+0x31c>
    1c28:	88 e5       	ldi	r24, 0x58	; 88
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <vfprintf+0x320>
    1c2e:	88 e7       	ldi	r24, 0x78	; 120
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	b7 01       	movw	r22, r14
    1c34:	0c c0       	rjmp	.+24     	; 0x1c4e <vfprintf+0x33c>
    1c36:	82 2f       	mov	r24, r18
    1c38:	86 78       	andi	r24, 0x86	; 134
    1c3a:	51 f0       	breq	.+20     	; 0x1c50 <vfprintf+0x33e>
    1c3c:	21 fd       	sbrc	r18, 1
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <vfprintf+0x332>
    1c40:	80 e2       	ldi	r24, 0x20	; 32
    1c42:	01 c0       	rjmp	.+2      	; 0x1c46 <vfprintf+0x334>
    1c44:	8b e2       	ldi	r24, 0x2B	; 43
    1c46:	27 fd       	sbrc	r18, 7
    1c48:	8d e2       	ldi	r24, 0x2D	; 45
    1c4a:	b7 01       	movw	r22, r14
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	5b d0       	rcall	.+182    	; 0x1d06 <fputc>
    1c50:	a5 14       	cp	r10, r5
    1c52:	30 f4       	brcc	.+12     	; 0x1c60 <vfprintf+0x34e>
    1c54:	b7 01       	movw	r22, r14
    1c56:	80 e3       	ldi	r24, 0x30	; 48
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	55 d0       	rcall	.+170    	; 0x1d06 <fputc>
    1c5c:	5a 94       	dec	r5
    1c5e:	f8 cf       	rjmp	.-16     	; 0x1c50 <vfprintf+0x33e>
    1c60:	aa 94       	dec	r10
    1c62:	f4 01       	movw	r30, r8
    1c64:	ea 0d       	add	r30, r10
    1c66:	f1 1d       	adc	r31, r1
    1c68:	80 81       	ld	r24, Z
    1c6a:	b7 01       	movw	r22, r14
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	4b d0       	rcall	.+150    	; 0x1d06 <fputc>
    1c70:	a1 10       	cpse	r10, r1
    1c72:	f6 cf       	rjmp	.-20     	; 0x1c60 <vfprintf+0x34e>
    1c74:	33 20       	and	r3, r3
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <vfprintf+0x368>
    1c78:	5d ce       	rjmp	.-838    	; 0x1934 <vfprintf+0x22>
    1c7a:	b7 01       	movw	r22, r14
    1c7c:	80 e2       	ldi	r24, 0x20	; 32
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	42 d0       	rcall	.+132    	; 0x1d06 <fputc>
    1c82:	3a 94       	dec	r3
    1c84:	f7 cf       	rjmp	.-18     	; 0x1c74 <vfprintf+0x362>
    1c86:	f7 01       	movw	r30, r14
    1c88:	86 81       	ldd	r24, Z+6	; 0x06
    1c8a:	97 81       	ldd	r25, Z+7	; 0x07
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <vfprintf+0x380>
    1c8e:	8f ef       	ldi	r24, 0xFF	; 255
    1c90:	9f ef       	ldi	r25, 0xFF	; 255
    1c92:	2c 96       	adiw	r28, 0x0c	; 12
    1c94:	e2 e1       	ldi	r30, 0x12	; 18
    1c96:	e3 c0       	rjmp	.+454    	; 0x1e5e <__epilogue_restores__>

00001c98 <calloc>:
    1c98:	0f 93       	push	r16
    1c9a:	1f 93       	push	r17
    1c9c:	cf 93       	push	r28
    1c9e:	df 93       	push	r29
    1ca0:	86 9f       	mul	r24, r22
    1ca2:	80 01       	movw	r16, r0
    1ca4:	87 9f       	mul	r24, r23
    1ca6:	10 0d       	add	r17, r0
    1ca8:	96 9f       	mul	r25, r22
    1caa:	10 0d       	add	r17, r0
    1cac:	11 24       	eor	r1, r1
    1cae:	c8 01       	movw	r24, r16
    1cb0:	7c dc       	rcall	.-1800   	; 0x15aa <malloc>
    1cb2:	ec 01       	movw	r28, r24
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	21 f0       	breq	.+8      	; 0x1cc0 <calloc+0x28>
    1cb8:	a8 01       	movw	r20, r16
    1cba:	60 e0       	ldi	r22, 0x00	; 0
    1cbc:	70 e0       	ldi	r23, 0x00	; 0
    1cbe:	11 d0       	rcall	.+34     	; 0x1ce2 <memset>
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	1f 91       	pop	r17
    1cc8:	0f 91       	pop	r16
    1cca:	08 95       	ret

00001ccc <strnlen_P>:
    1ccc:	fc 01       	movw	r30, r24
    1cce:	05 90       	lpm	r0, Z+
    1cd0:	61 50       	subi	r22, 0x01	; 1
    1cd2:	70 40       	sbci	r23, 0x00	; 0
    1cd4:	01 10       	cpse	r0, r1
    1cd6:	d8 f7       	brcc	.-10     	; 0x1cce <strnlen_P+0x2>
    1cd8:	80 95       	com	r24
    1cda:	90 95       	com	r25
    1cdc:	8e 0f       	add	r24, r30
    1cde:	9f 1f       	adc	r25, r31
    1ce0:	08 95       	ret

00001ce2 <memset>:
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	01 c0       	rjmp	.+2      	; 0x1ce8 <memset+0x6>
    1ce6:	6d 93       	st	X+, r22
    1ce8:	41 50       	subi	r20, 0x01	; 1
    1cea:	50 40       	sbci	r21, 0x00	; 0
    1cec:	e0 f7       	brcc	.-8      	; 0x1ce6 <memset+0x4>
    1cee:	08 95       	ret

00001cf0 <strnlen>:
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	61 50       	subi	r22, 0x01	; 1
    1cf4:	70 40       	sbci	r23, 0x00	; 0
    1cf6:	01 90       	ld	r0, Z+
    1cf8:	01 10       	cpse	r0, r1
    1cfa:	d8 f7       	brcc	.-10     	; 0x1cf2 <strnlen+0x2>
    1cfc:	80 95       	com	r24
    1cfe:	90 95       	com	r25
    1d00:	8e 0f       	add	r24, r30
    1d02:	9f 1f       	adc	r25, r31
    1d04:	08 95       	ret

00001d06 <fputc>:
    1d06:	0f 93       	push	r16
    1d08:	1f 93       	push	r17
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	18 2f       	mov	r17, r24
    1d10:	09 2f       	mov	r16, r25
    1d12:	eb 01       	movw	r28, r22
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	81 fd       	sbrc	r24, 1
    1d18:	03 c0       	rjmp	.+6      	; 0x1d20 <fputc+0x1a>
    1d1a:	8f ef       	ldi	r24, 0xFF	; 255
    1d1c:	9f ef       	ldi	r25, 0xFF	; 255
    1d1e:	20 c0       	rjmp	.+64     	; 0x1d60 <fputc+0x5a>
    1d20:	82 ff       	sbrs	r24, 2
    1d22:	10 c0       	rjmp	.+32     	; 0x1d44 <fputc+0x3e>
    1d24:	4e 81       	ldd	r20, Y+6	; 0x06
    1d26:	5f 81       	ldd	r21, Y+7	; 0x07
    1d28:	2c 81       	ldd	r18, Y+4	; 0x04
    1d2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d2c:	42 17       	cp	r20, r18
    1d2e:	53 07       	cpc	r21, r19
    1d30:	7c f4       	brge	.+30     	; 0x1d50 <fputc+0x4a>
    1d32:	e8 81       	ld	r30, Y
    1d34:	f9 81       	ldd	r31, Y+1	; 0x01
    1d36:	9f 01       	movw	r18, r30
    1d38:	2f 5f       	subi	r18, 0xFF	; 255
    1d3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3c:	39 83       	std	Y+1, r19	; 0x01
    1d3e:	28 83       	st	Y, r18
    1d40:	10 83       	st	Z, r17
    1d42:	06 c0       	rjmp	.+12     	; 0x1d50 <fputc+0x4a>
    1d44:	e8 85       	ldd	r30, Y+8	; 0x08
    1d46:	f9 85       	ldd	r31, Y+9	; 0x09
    1d48:	81 2f       	mov	r24, r17
    1d4a:	09 95       	icall
    1d4c:	89 2b       	or	r24, r25
    1d4e:	29 f7       	brne	.-54     	; 0x1d1a <fputc+0x14>
    1d50:	2e 81       	ldd	r18, Y+6	; 0x06
    1d52:	3f 81       	ldd	r19, Y+7	; 0x07
    1d54:	2f 5f       	subi	r18, 0xFF	; 255
    1d56:	3f 4f       	sbci	r19, 0xFF	; 255
    1d58:	3f 83       	std	Y+7, r19	; 0x07
    1d5a:	2e 83       	std	Y+6, r18	; 0x06
    1d5c:	81 2f       	mov	r24, r17
    1d5e:	90 2f       	mov	r25, r16
    1d60:	df 91       	pop	r29
    1d62:	cf 91       	pop	r28
    1d64:	1f 91       	pop	r17
    1d66:	0f 91       	pop	r16
    1d68:	08 95       	ret

00001d6a <__ultoa_invert>:
    1d6a:	fa 01       	movw	r30, r20
    1d6c:	aa 27       	eor	r26, r26
    1d6e:	28 30       	cpi	r18, 0x08	; 8
    1d70:	51 f1       	breq	.+84     	; 0x1dc6 <__ultoa_invert+0x5c>
    1d72:	20 31       	cpi	r18, 0x10	; 16
    1d74:	81 f1       	breq	.+96     	; 0x1dd6 <__ultoa_invert+0x6c>
    1d76:	e8 94       	clt
    1d78:	6f 93       	push	r22
    1d7a:	6e 7f       	andi	r22, 0xFE	; 254
    1d7c:	6e 5f       	subi	r22, 0xFE	; 254
    1d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d80:	8f 4f       	sbci	r24, 0xFF	; 255
    1d82:	9f 4f       	sbci	r25, 0xFF	; 255
    1d84:	af 4f       	sbci	r26, 0xFF	; 255
    1d86:	b1 e0       	ldi	r27, 0x01	; 1
    1d88:	3e d0       	rcall	.+124    	; 0x1e06 <__ultoa_invert+0x9c>
    1d8a:	b4 e0       	ldi	r27, 0x04	; 4
    1d8c:	3c d0       	rcall	.+120    	; 0x1e06 <__ultoa_invert+0x9c>
    1d8e:	67 0f       	add	r22, r23
    1d90:	78 1f       	adc	r23, r24
    1d92:	89 1f       	adc	r24, r25
    1d94:	9a 1f       	adc	r25, r26
    1d96:	a1 1d       	adc	r26, r1
    1d98:	68 0f       	add	r22, r24
    1d9a:	79 1f       	adc	r23, r25
    1d9c:	8a 1f       	adc	r24, r26
    1d9e:	91 1d       	adc	r25, r1
    1da0:	a1 1d       	adc	r26, r1
    1da2:	6a 0f       	add	r22, r26
    1da4:	71 1d       	adc	r23, r1
    1da6:	81 1d       	adc	r24, r1
    1da8:	91 1d       	adc	r25, r1
    1daa:	a1 1d       	adc	r26, r1
    1dac:	20 d0       	rcall	.+64     	; 0x1dee <__ultoa_invert+0x84>
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <__ultoa_invert+0x48>
    1db0:	68 94       	set
    1db2:	3f 91       	pop	r19
    1db4:	2a e0       	ldi	r18, 0x0A	; 10
    1db6:	26 9f       	mul	r18, r22
    1db8:	11 24       	eor	r1, r1
    1dba:	30 19       	sub	r19, r0
    1dbc:	30 5d       	subi	r19, 0xD0	; 208
    1dbe:	31 93       	st	Z+, r19
    1dc0:	de f6       	brtc	.-74     	; 0x1d78 <__ultoa_invert+0xe>
    1dc2:	cf 01       	movw	r24, r30
    1dc4:	08 95       	ret
    1dc6:	46 2f       	mov	r20, r22
    1dc8:	47 70       	andi	r20, 0x07	; 7
    1dca:	40 5d       	subi	r20, 0xD0	; 208
    1dcc:	41 93       	st	Z+, r20
    1dce:	b3 e0       	ldi	r27, 0x03	; 3
    1dd0:	0f d0       	rcall	.+30     	; 0x1df0 <__ultoa_invert+0x86>
    1dd2:	c9 f7       	brne	.-14     	; 0x1dc6 <__ultoa_invert+0x5c>
    1dd4:	f6 cf       	rjmp	.-20     	; 0x1dc2 <__ultoa_invert+0x58>
    1dd6:	46 2f       	mov	r20, r22
    1dd8:	4f 70       	andi	r20, 0x0F	; 15
    1dda:	40 5d       	subi	r20, 0xD0	; 208
    1ddc:	4a 33       	cpi	r20, 0x3A	; 58
    1dde:	18 f0       	brcs	.+6      	; 0x1de6 <__ultoa_invert+0x7c>
    1de0:	49 5d       	subi	r20, 0xD9	; 217
    1de2:	31 fd       	sbrc	r19, 1
    1de4:	40 52       	subi	r20, 0x20	; 32
    1de6:	41 93       	st	Z+, r20
    1de8:	02 d0       	rcall	.+4      	; 0x1dee <__ultoa_invert+0x84>
    1dea:	a9 f7       	brne	.-22     	; 0x1dd6 <__ultoa_invert+0x6c>
    1dec:	ea cf       	rjmp	.-44     	; 0x1dc2 <__ultoa_invert+0x58>
    1dee:	b4 e0       	ldi	r27, 0x04	; 4
    1df0:	a6 95       	lsr	r26
    1df2:	97 95       	ror	r25
    1df4:	87 95       	ror	r24
    1df6:	77 95       	ror	r23
    1df8:	67 95       	ror	r22
    1dfa:	ba 95       	dec	r27
    1dfc:	c9 f7       	brne	.-14     	; 0x1df0 <__ultoa_invert+0x86>
    1dfe:	00 97       	sbiw	r24, 0x00	; 0
    1e00:	61 05       	cpc	r22, r1
    1e02:	71 05       	cpc	r23, r1
    1e04:	08 95       	ret
    1e06:	9b 01       	movw	r18, r22
    1e08:	ac 01       	movw	r20, r24
    1e0a:	0a 2e       	mov	r0, r26
    1e0c:	06 94       	lsr	r0
    1e0e:	57 95       	ror	r21
    1e10:	47 95       	ror	r20
    1e12:	37 95       	ror	r19
    1e14:	27 95       	ror	r18
    1e16:	ba 95       	dec	r27
    1e18:	c9 f7       	brne	.-14     	; 0x1e0c <__ultoa_invert+0xa2>
    1e1a:	62 0f       	add	r22, r18
    1e1c:	73 1f       	adc	r23, r19
    1e1e:	84 1f       	adc	r24, r20
    1e20:	95 1f       	adc	r25, r21
    1e22:	a0 1d       	adc	r26, r0
    1e24:	08 95       	ret

00001e26 <__prologue_saves__>:
    1e26:	2f 92       	push	r2
    1e28:	3f 92       	push	r3
    1e2a:	4f 92       	push	r4
    1e2c:	5f 92       	push	r5
    1e2e:	6f 92       	push	r6
    1e30:	7f 92       	push	r7
    1e32:	8f 92       	push	r8
    1e34:	9f 92       	push	r9
    1e36:	af 92       	push	r10
    1e38:	bf 92       	push	r11
    1e3a:	cf 92       	push	r12
    1e3c:	df 92       	push	r13
    1e3e:	ef 92       	push	r14
    1e40:	ff 92       	push	r15
    1e42:	0f 93       	push	r16
    1e44:	1f 93       	push	r17
    1e46:	cf 93       	push	r28
    1e48:	df 93       	push	r29
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	ca 1b       	sub	r28, r26
    1e50:	db 0b       	sbc	r29, r27
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	09 94       	ijmp

00001e5e <__epilogue_restores__>:
    1e5e:	2a 88       	ldd	r2, Y+18	; 0x12
    1e60:	39 88       	ldd	r3, Y+17	; 0x11
    1e62:	48 88       	ldd	r4, Y+16	; 0x10
    1e64:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e66:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e68:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e6a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e6c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e6e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e70:	b9 84       	ldd	r11, Y+9	; 0x09
    1e72:	c8 84       	ldd	r12, Y+8	; 0x08
    1e74:	df 80       	ldd	r13, Y+7	; 0x07
    1e76:	ee 80       	ldd	r14, Y+6	; 0x06
    1e78:	fd 80       	ldd	r15, Y+5	; 0x05
    1e7a:	0c 81       	ldd	r16, Y+4	; 0x04
    1e7c:	1b 81       	ldd	r17, Y+3	; 0x03
    1e7e:	aa 81       	ldd	r26, Y+2	; 0x02
    1e80:	b9 81       	ldd	r27, Y+1	; 0x01
    1e82:	ce 0f       	add	r28, r30
    1e84:	d1 1d       	adc	r29, r1
    1e86:	0f b6       	in	r0, 0x3f	; 63
    1e88:	f8 94       	cli
    1e8a:	de bf       	out	0x3e, r29	; 62
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	cd bf       	out	0x3d, r28	; 61
    1e90:	ed 01       	movw	r28, r26
    1e92:	08 95       	ret

00001e94 <_exit>:
    1e94:	f8 94       	cli

00001e96 <__stop_program>:
    1e96:	ff cf       	rjmp	.-2      	; 0x1e96 <__stop_program>
