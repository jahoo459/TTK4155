
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000260  00800100  00001af2  00001b86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001af2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  00800360  00800360  00001de6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001de6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002b0  00000000  00000000  00001e42  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002fd7  00000000  00000000  000020f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f3a  00000000  00000000  000050c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000013b8  00000000  00000000  00006003  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000069c  00000000  00000000  000073bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000c97  00000000  00000000  00007a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000016f8  00000000  00000000  000086ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000250  00000000  00000000  00009de7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	fa c1       	rjmp	.+1012   	; 0x402 <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <MENU_buildMenus+0x1a0>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e2 ef       	ldi	r30, 0xF2	; 242
     37c:	fa e1       	ldi	r31, 0x1A	; 26
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a0 36       	cpi	r26, 0x60	; 96
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a0 e6       	ldi	r26, 0x60	; 96
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a9 38       	cpi	r26, 0x89	; 137
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	7e d0       	rcall	.+252    	; 0x498 <main>
     39c:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 79 03 	sts	0x0379, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 64 03 	sts	0x0364, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 63 03 	sts	0x0363, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 61 03 	sts	0x0361, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_3>:
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	8f 93       	push	r24
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 60 03 	sts	0x0360, r24
     414:	8f 91       	pop	r24
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <init>:
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	1f e1       	ldi	r17, 0x1F	; 31
     42a:	e1 2e       	mov	r14, r17
     42c:	f1 2c       	mov	r15, r1
     42e:	00 e0       	ldi	r16, 0x00	; 0
     430:	10 e0       	ldi	r17, 0x00	; 0
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	4b e4       	ldi	r20, 0x4B	; 75
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e8       	ldi	r22, 0x80	; 128
     43c:	75 e2       	ldi	r23, 0x25	; 37
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	7f d6       	rcall	.+3326   	; 0x1142 <uartInit>
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	5b d0       	rcall	.+182    	; 0x4fe <enableXMEM>
     448:	2d d6       	rcall	.+3162   	; 0x10a4 <SLI_init>
     44a:	6b d0       	rcall	.+214    	; 0x522 <JOY_init>
     44c:	a5 d5       	rcall	.+2890   	; 0xf98 <OLED_init>
     44e:	33 d6       	rcall	.+3174   	; 0x10b6 <SPI_init>
     450:	8b b7       	in	r24, 0x3b	; 59
     452:	80 64       	ori	r24, 0x40	; 64
     454:	8b bf       	out	0x3b, r24	; 59
     456:	85 b7       	in	r24, 0x35	; 53
     458:	82 60       	ori	r24, 0x02	; 2
     45a:	85 bf       	out	0x35, r24	; 53
     45c:	85 b7       	in	r24, 0x35	; 53
     45e:	8e 7f       	andi	r24, 0xFE	; 254
     460:	85 bf       	out	0x35, r24	; 53
     462:	8b 98       	cbi	0x11, 3	; 17
     464:	93 9a       	sbi	0x12, 3	; 18
     466:	8b b7       	in	r24, 0x3b	; 59
     468:	80 68       	ori	r24, 0x80	; 128
     46a:	8b bf       	out	0x3b, r24	; 59
     46c:	85 b7       	in	r24, 0x35	; 53
     46e:	88 60       	ori	r24, 0x08	; 8
     470:	85 bf       	out	0x35, r24	; 53
     472:	85 b7       	in	r24, 0x35	; 53
     474:	8b 7f       	andi	r24, 0xFB	; 251
     476:	85 bf       	out	0x35, r24	; 53
     478:	32 98       	cbi	0x06, 2	; 6
     47a:	3a 98       	cbi	0x07, 2	; 7
     47c:	b8 98       	cbi	0x17, 0	; 23
     47e:	c0 98       	cbi	0x18, 0	; 24
     480:	86 b7       	in	r24, 0x36	; 54
     482:	8e 7f       	andi	r24, 0xFE	; 254
     484:	86 bf       	out	0x36, r24	; 54
     486:	8b b7       	in	r24, 0x3b	; 59
     488:	81 60       	ori	r24, 0x01	; 1
     48a:	8b bf       	out	0x3b, r24	; 59
     48c:	78 94       	sei
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	ff 90       	pop	r15
     494:	ef 90       	pop	r14
     496:	08 95       	ret

00000498 <main>:
=======================MAIN FUNCTION=========================
*/

int main(void)
{	
	init();
     498:	c3 df       	rcall	.-122    	; 0x420 <init>
    while(1)
    {	
		//TEST SPI
		//SPI_send((uint8_t)19);
		SPI_ReceivedByte = SPI_receive(SS_CAN_CONTROLLER);
		printf("SPI received byte: %d\n", SPI_ReceivedByte);
     49a:	cf e9       	ldi	r28, 0x9F	; 159
     49c:	d1 e0       	ldi	r29, 0x01	; 1
	
    while(1)
    {	
		//TEST SPI
		//SPI_send((uint8_t)19);
		SPI_ReceivedByte = SPI_receive(SS_CAN_CONTROLLER);
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	38 d6       	rcall	.+3184   	; 0x1112 <SPI_receive>
     4a2:	80 93 7a 03 	sts	0x037A, r24
		printf("SPI received byte: %d\n", SPI_ReceivedByte);
     4a6:	80 91 7a 03 	lds	r24, 0x037A
     4aa:	1f 92       	push	r1
     4ac:	8f 93       	push	r24
     4ae:	df 93       	push	r29
     4b0:	cf 93       	push	r28
     4b2:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <printf>
			
		// statusMultifunctionBoard();
		JOY_getDirection();
     4b6:	f5 d1       	rcall	.+1002   	; 0x8a2 <JOY_getDirection>

		// todo: remove! will be included in the menu driver later
		if(JOYcalibFlag)
     4b8:	80 91 62 03 	lds	r24, 0x0362
     4bc:	0f 90       	pop	r0
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
     4c2:	0f 90       	pop	r0
     4c4:	88 23       	and	r24, r24
     4c6:	19 f0       	breq	.+6      	; 0x4ce <main+0x36>
		{
			//run joystick calibration
			JOY_calibrate();
     4c8:	3f d0       	rcall	.+126    	; 0x548 <JOY_calibrate>
			JOYcalibFlag = 0;
     4ca:	10 92 62 03 	sts	0x0362, r1
		}	
		
		if(activateMenuFlag)
     4ce:	80 91 61 03 	lds	r24, 0x0361
     4d2:	81 11       	cpse	r24, r1
		{
			MENU_activate();
     4d4:	2f d4       	rcall	.+2142   	; 0xd34 <MENU_activate>
		}
		
		if(SPI_ReceivedByte)
     4d6:	80 91 7a 03 	lds	r24, 0x037A
     4da:	88 23       	and	r24, r24
     4dc:	01 f3       	breq	.-64     	; 0x49e <main+0x6>
		{
			//TODO: check which slave caused teh interrupt. SS_CAN_CONTROLLER assumed now
			SPI_ReceivedByte = SPI_receive(SS_CAN_CONTROLLER);	
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	18 d6       	rcall	.+3120   	; 0x1112 <SPI_receive>
     4e2:	80 93 7a 03 	sts	0x037A, r24
			printf("SPI received byte: %d\n", SPI_ReceivedByte);
     4e6:	80 91 7a 03 	lds	r24, 0x037A
     4ea:	1f 92       	push	r1
     4ec:	8f 93       	push	r24
     4ee:	df 93       	push	r29
     4f0:	cf 93       	push	r28
     4f2:	fe d7       	rcall	.+4092   	; 0x14f0 <printf>
     4f4:	0f 90       	pop	r0
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	d0 cf       	rjmp	.-96     	; 0x49e <main+0x6>

000004fe <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     4fe:	95 b7       	in	r25, 0x35	; 53
     500:	90 68       	ori	r25, 0x80	; 128
     502:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     504:	96 b7       	in	r25, 0x36	; 54
     506:	98 60       	ori	r25, 0x08	; 8
     508:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     50a:	88 23       	and	r24, r24
     50c:	19 f0       	breq	.+6      	; 0x514 <__stack+0x15>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     50e:	80 b7       	in	r24, 0x30	; 48
     510:	80 62       	ori	r24, 0x20	; 32
     512:	80 bf       	out	0x30, r24	; 48
     514:	08 95       	ret

00000516 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     516:	fc 01       	movw	r30, r24
     518:	80 81       	ld	r24, Z
	return val;
}
     51a:	08 95       	ret

0000051c <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     51c:	fc 01       	movw	r30, r24
     51e:	60 83       	st	Z, r22
     520:	08 95       	ret

00000522 <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     522:	10 92 67 03 	sts	0x0367, r1
     526:	10 92 66 03 	sts	0x0366, r1
	currentPosition.Y_abs = 0;
     52a:	10 92 69 03 	sts	0x0369, r1
     52e:	10 92 68 03 	sts	0x0368, r1
	currentPosition.X_per = 0;
     532:	10 92 6b 03 	sts	0x036B, r1
     536:	10 92 6a 03 	sts	0x036A, r1
	currentPosition.Y_per = 0;
     53a:	10 92 6d 03 	sts	0x036D, r1
     53e:	10 92 6c 03 	sts	0x036C, r1
	currentDirection = CENTRE;
     542:	10 92 65 03 	sts	0x0365, r1
     546:	08 95       	ret

00000548 <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     54c:	1e d4       	rcall	.+2108   	; 0xd8a <OLED_clear>
     54e:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	fc d3       	rcall	.+2040   	; 0xd50 <OLED_goto>
     558:	86 eb       	ldi	r24, 0xB6	; 182
     55a:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     55c:	4f d4       	rcall	.+2206   	; 0xdfc <OLED_printString>
     55e:	80 ec       	ldi	r24, 0xC0	; 192
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	d7 d7       	rcall	.+4014   	; 0x1512 <puts>
	printf("Move JOY to the right\n");
     564:	2f ef       	ldi	r18, 0xFF	; 255
     566:	4f ef       	ldi	r20, 0xFF	; 255
     568:	52 e0       	ldi	r21, 0x02	; 2
     56a:	21 50       	subi	r18, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     56c:	40 40       	sbci	r20, 0x00	; 0
     56e:	50 40       	sbci	r21, 0x00	; 0
     570:	e1 f7       	brne	.-8      	; 0x56a <JOY_calibrate+0x22>
     572:	00 c0       	rjmp	.+0      	; 0x574 <JOY_calibrate+0x2c>
     574:	00 c0       	rjmp	.+0      	; 0x576 <JOY_calibrate+0x2e>
     576:	c4 e1       	ldi	r28, 0x14	; 20
     578:	d0 e0       	ldi	r29, 0x00	; 0
     57a:	60 91 06 01 	lds	r22, 0x0106
     57e:	70 91 07 01 	lds	r23, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     582:	82 e0       	ldi	r24, 0x02	; 2
     584:	f7 d5       	rcall	.+3054   	; 0x1174 <ADC_request>
     586:	8f ef       	ldi	r24, 0xFF	; 255
     588:	9f e1       	ldi	r25, 0x1F	; 31
     58a:	21 e0       	ldi	r18, 0x01	; 1
     58c:	81 50       	subi	r24, 0x01	; 1
     58e:	90 40       	sbci	r25, 0x00	; 0
     590:	20 40       	sbci	r18, 0x00	; 0
     592:	e1 f7       	brne	.-8      	; 0x58c <JOY_calibrate+0x44>
     594:	00 c0       	rjmp	.+0      	; 0x596 <JOY_calibrate+0x4e>
     596:	00 00       	nop
     598:	80 91 06 01 	lds	r24, 0x0106
     59c:	90 91 07 01 	lds	r25, 0x0107
     5a0:	0d d6       	rcall	.+3098   	; 0x11bc <ADC_read>
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     5a2:	90 91 0d 01 	lds	r25, 0x010D
     5a6:	98 17       	cp	r25, r24
     5a8:	10 f4       	brcc	.+4      	; 0x5ae <JOY_calibrate+0x66>
     5aa:	80 93 0d 01 	sts	0x010D, r24
		
		if(temp > calR) {calR = temp;}
     5ae:	21 97       	sbiw	r28, 0x01	; 1
     5b0:	20 97       	sbiw	r28, 0x00	; 0
     5b2:	19 f7       	brne	.-58     	; 0x57a <JOY_calibrate+0x32>
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	70 e0       	ldi	r23, 0x00	; 0
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	90 e0       	ldi	r25, 0x00	; 0
	OLED_goto(0,0);
	OLED_printString("JOY RIGHT");
	printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     5bc:	c9 d3       	rcall	.+1938   	; 0xd50 <OLED_goto>
     5be:	86 ed       	ldi	r24, 0xD6	; 214
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_goto(1,0);
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	1c d4       	rcall	.+2104   	; 0xdfc <OLED_printString>
     5c4:	8f ed       	ldi	r24, 0xDF	; 223
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	a4 d7       	rcall	.+3912   	; 0x1512 <puts>
     5ca:	4f ef       	ldi	r20, 0xFF	; 255
	OLED_printString("JOY LEFT");
     5cc:	5f ef       	ldi	r21, 0xFF	; 255
     5ce:	82 e0       	ldi	r24, 0x02	; 2
     5d0:	41 50       	subi	r20, 0x01	; 1
     5d2:	50 40       	sbci	r21, 0x00	; 0
	printf("Move JOY to the left\n");
     5d4:	80 40       	sbci	r24, 0x00	; 0
     5d6:	e1 f7       	brne	.-8      	; 0x5d0 <JOY_calibrate+0x88>
     5d8:	00 c0       	rjmp	.+0      	; 0x5da <JOY_calibrate+0x92>
     5da:	00 c0       	rjmp	.+0      	; 0x5dc <JOY_calibrate+0x94>
     5dc:	c4 e1       	ldi	r28, 0x14	; 20
     5de:	d0 e0       	ldi	r29, 0x00	; 0
     5e0:	60 91 06 01 	lds	r22, 0x0106
     5e4:	70 91 07 01 	lds	r23, 0x0107
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	c4 d5       	rcall	.+2952   	; 0x1174 <ADC_request>
     5ec:	9f ef       	ldi	r25, 0xFF	; 255
     5ee:	2f e1       	ldi	r18, 0x1F	; 31
     5f0:	41 e0       	ldi	r20, 0x01	; 1
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     5f2:	91 50       	subi	r25, 0x01	; 1
     5f4:	20 40       	sbci	r18, 0x00	; 0
     5f6:	40 40       	sbci	r20, 0x00	; 0
     5f8:	e1 f7       	brne	.-8      	; 0x5f2 <JOY_calibrate+0xaa>
     5fa:	00 c0       	rjmp	.+0      	; 0x5fc <JOY_calibrate+0xb4>
     5fc:	00 00       	nop
     5fe:	80 91 06 01 	lds	r24, 0x0106
     602:	90 91 07 01 	lds	r25, 0x0107
     606:	da d5       	rcall	.+2996   	; 0x11bc <ADC_read>
     608:	90 91 0c 01 	lds	r25, 0x010C
     60c:	89 17       	cp	r24, r25
     60e:	10 f4       	brcc	.+4      	; 0x614 <JOY_calibrate+0xcc>
     610:	80 93 0c 01 	sts	0x010C, r24
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     614:	21 97       	sbiw	r28, 0x01	; 1
     616:	20 97       	sbiw	r28, 0x00	; 0
     618:	19 f7       	brne	.-58     	; 0x5e0 <JOY_calibrate+0x98>
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	70 e0       	ldi	r23, 0x00	; 0
		
		if(temp < calL) {calL = temp;}
     61e:	82 e0       	ldi	r24, 0x02	; 2
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	96 d3       	rcall	.+1836   	; 0xd50 <OLED_goto>
     624:	84 ef       	ldi	r24, 0xF4	; 244
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	e9 d3       	rcall	.+2002   	; 0xdfc <OLED_printString>
     62a:	8b ef       	ldi	r24, 0xFB	; 251
	OLED_goto(1,0);
	OLED_printString("JOY LEFT");
	printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	71 d7       	rcall	.+3810   	; 0x1512 <puts>
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_goto(2,0);
     630:	5f ef       	ldi	r21, 0xFF	; 255
     632:	8f ef       	ldi	r24, 0xFF	; 255
     634:	92 e0       	ldi	r25, 0x02	; 2
     636:	51 50       	subi	r21, 0x01	; 1
     638:	80 40       	sbci	r24, 0x00	; 0
     63a:	90 40       	sbci	r25, 0x00	; 0
	OLED_printString("JOY UP");
     63c:	e1 f7       	brne	.-8      	; 0x636 <JOY_calibrate+0xee>
     63e:	00 c0       	rjmp	.+0      	; 0x640 <JOY_calibrate+0xf8>
     640:	00 c0       	rjmp	.+0      	; 0x642 <JOY_calibrate+0xfa>
     642:	c4 e1       	ldi	r28, 0x14	; 20
	printf("Move JOY up\n");
     644:	d0 e0       	ldi	r29, 0x00	; 0
     646:	60 91 06 01 	lds	r22, 0x0106
     64a:	70 91 07 01 	lds	r23, 0x0107
     64e:	81 e0       	ldi	r24, 0x01	; 1
     650:	91 d5       	rcall	.+2850   	; 0x1174 <ADC_request>
     652:	2f ef       	ldi	r18, 0xFF	; 255
     654:	4f e1       	ldi	r20, 0x1F	; 31
     656:	51 e0       	ldi	r21, 0x01	; 1
     658:	21 50       	subi	r18, 0x01	; 1
     65a:	40 40       	sbci	r20, 0x00	; 0
     65c:	50 40       	sbci	r21, 0x00	; 0
     65e:	e1 f7       	brne	.-8      	; 0x658 <JOY_calibrate+0x110>
     660:	00 c0       	rjmp	.+0      	; 0x662 <JOY_calibrate+0x11a>
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     662:	00 00       	nop
     664:	80 91 06 01 	lds	r24, 0x0106
     668:	90 91 07 01 	lds	r25, 0x0107
     66c:	a7 d5       	rcall	.+2894   	; 0x11bc <ADC_read>
     66e:	90 91 0b 01 	lds	r25, 0x010B
     672:	98 17       	cp	r25, r24
     674:	10 f4       	brcc	.+4      	; 0x67a <JOY_calibrate+0x132>
     676:	80 93 0b 01 	sts	0x010B, r24
     67a:	21 97       	sbiw	r28, 0x01	; 1
     67c:	20 97       	sbiw	r28, 0x00	; 0
     67e:	19 f7       	brne	.-58     	; 0x646 <JOY_calibrate+0xfe>
     680:	60 e0       	ldi	r22, 0x00	; 0
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	83 e0       	ldi	r24, 0x03	; 3
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	63 d3       	rcall	.+1734   	; 0xd50 <OLED_goto>
     68a:	87 e0       	ldi	r24, 0x07	; 7
     68c:	92 e0       	ldi	r25, 0x02	; 2
		
		if(temp > calUp) {calUp = temp;}
     68e:	b6 d3       	rcall	.+1900   	; 0xdfc <OLED_printString>
     690:	80 e1       	ldi	r24, 0x10	; 16
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	3e d7       	rcall	.+3708   	; 0x1512 <puts>
     696:	8f ef       	ldi	r24, 0xFF	; 255
     698:	9f ef       	ldi	r25, 0xFF	; 255
     69a:	22 e0       	ldi	r18, 0x02	; 2
	OLED_goto(2,0);
	OLED_printString("JOY UP");
	printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     69c:	81 50       	subi	r24, 0x01	; 1
     69e:	90 40       	sbci	r25, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_goto(3,0);
     6a0:	20 40       	sbci	r18, 0x00	; 0
     6a2:	e1 f7       	brne	.-8      	; 0x69c <JOY_calibrate+0x154>
     6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <JOY_calibrate+0x15e>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <JOY_calibrate+0x160>
     6a8:	c4 e1       	ldi	r28, 0x14	; 20
     6aa:	d0 e0       	ldi	r29, 0x00	; 0
	OLED_printString("JOY DOWN");
     6ac:	60 91 06 01 	lds	r22, 0x0106
     6b0:	70 91 07 01 	lds	r23, 0x0107
	printf("Move JOY down\n");
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	5e d5       	rcall	.+2748   	; 0x1174 <ADC_request>
     6b8:	4f ef       	ldi	r20, 0xFF	; 255
     6ba:	5f e1       	ldi	r21, 0x1F	; 31
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	41 50       	subi	r20, 0x01	; 1
     6c0:	50 40       	sbci	r21, 0x00	; 0
     6c2:	80 40       	sbci	r24, 0x00	; 0
     6c4:	e1 f7       	brne	.-8      	; 0x6be <JOY_calibrate+0x176>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <JOY_calibrate+0x180>
     6c8:	00 00       	nop
     6ca:	80 91 06 01 	lds	r24, 0x0106
     6ce:	90 91 07 01 	lds	r25, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     6d2:	74 d5       	rcall	.+2792   	; 0x11bc <ADC_read>
     6d4:	90 91 0a 01 	lds	r25, 0x010A
     6d8:	89 17       	cp	r24, r25
     6da:	10 f4       	brcc	.+4      	; 0x6e0 <JOY_calibrate+0x198>
     6dc:	80 93 0a 01 	sts	0x010A, r24
     6e0:	21 97       	sbiw	r28, 0x01	; 1
     6e2:	20 97       	sbiw	r28, 0x00	; 0
     6e4:	19 f7       	brne	.-58     	; 0x6ac <JOY_calibrate+0x164>
     6e6:	30 91 0a 01 	lds	r19, 0x010A
     6ea:	20 91 0b 01 	lds	r18, 0x010B
     6ee:	90 91 0c 01 	lds	r25, 0x010C
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     6f2:	80 91 0d 01 	lds	r24, 0x010D
     6f6:	1f 92       	push	r1
     6f8:	3f 93       	push	r19
     6fa:	1f 92       	push	r1
     6fc:	2f 93       	push	r18
		
		if(temp < calDown) {calDown = temp;}
     6fe:	1f 92       	push	r1
     700:	9f 93       	push	r25
     702:	1f 92       	push	r1
     704:	8f 93       	push	r24
     706:	8e e1       	ldi	r24, 0x1E	; 30
     708:	92 e0       	ldi	r25, 0x02	; 2
     70a:	9f 93       	push	r25
	OLED_goto(3,0);
	OLED_printString("JOY DOWN");
	printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     70c:	8f 93       	push	r24
     70e:	f0 d6       	rcall	.+3552   	; 0x14f0 <printf>
		
		if(temp < calDown) {calDown = temp;}
	}
	
	
	printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
     710:	20 91 0b 01 	lds	r18, 0x010B
     714:	80 91 0a 01 	lds	r24, 0x010A
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	28 1b       	sub	r18, r24
     71c:	31 09       	sbc	r19, r1
     71e:	c9 01       	movw	r24, r18
     720:	4d b7       	in	r20, 0x3d	; 61
     722:	5e b7       	in	r21, 0x3e	; 62
     724:	46 5f       	subi	r20, 0xF6	; 246
     726:	5f 4f       	sbci	r21, 0xFF	; 255
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	5e bf       	out	0x3e, r21	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	4d bf       	out	0x3d, r20	; 61
     732:	99 23       	and	r25, r25
     734:	0c f4       	brge	.+2      	; 0x738 <JOY_calibrate+0x1f0>
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	95 95       	asr	r25
     73a:	87 95       	ror	r24
	
	meanVert = (calUp - calDown)/2;
     73c:	80 93 09 01 	sts	0x0109, r24
     740:	20 91 0d 01 	lds	r18, 0x010D
     744:	80 91 0c 01 	lds	r24, 0x010C
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	28 1b       	sub	r18, r24
     74c:	31 09       	sbc	r19, r1
     74e:	c9 01       	movw	r24, r18
     750:	99 23       	and	r25, r25
     752:	0c f4       	brge	.+2      	; 0x756 <JOY_calibrate+0x20e>
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	95 95       	asr	r25
     758:	87 95       	ror	r24
     75a:	80 93 08 01 	sts	0x0108, r24
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	84 e0       	ldi	r24, 0x04	; 4
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	f4 d2       	rcall	.+1512   	; 0xd50 <OLED_goto>
     768:	88 e4       	ldi	r24, 0x48	; 72
     76a:	92 e0       	ldi	r25, 0x02	; 2
	meanHor = (calR - calL)/2;
     76c:	47 d3       	rcall	.+1678   	; 0xdfc <OLED_printString>
     76e:	90 91 08 01 	lds	r25, 0x0108
     772:	80 91 09 01 	lds	r24, 0x0109
     776:	1f 92       	push	r1
     778:	9f 93       	push	r25
     77a:	1f 92       	push	r1
     77c:	8f 93       	push	r24
     77e:	83 e5       	ldi	r24, 0x53	; 83
     780:	92 e0       	ldi	r25, 0x02	; 2
     782:	9f 93       	push	r25
     784:	8f 93       	push	r24
     786:	b4 d6       	rcall	.+3432   	; 0x14f0 <printf>
     788:	5f ef       	ldi	r21, 0xFF	; 255
	
	OLED_goto(4,0);
     78a:	8f ef       	ldi	r24, 0xFF	; 255
     78c:	9e e0       	ldi	r25, 0x0E	; 14
     78e:	51 50       	subi	r21, 0x01	; 1
     790:	80 40       	sbci	r24, 0x00	; 0
     792:	90 40       	sbci	r25, 0x00	; 0
     794:	e1 f7       	brne	.-8      	; 0x78e <JOY_calibrate+0x246>
	OLED_printString("CALIB DONE");
     796:	00 c0       	rjmp	.+0      	; 0x798 <JOY_calibrate+0x250>
     798:	00 00       	nop
     79a:	0f 90       	pop	r0
     79c:	0f 90       	pop	r0
	printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
     79e:	0f 90       	pop	r0
     7a0:	0f 90       	pop	r0
     7a2:	0f 90       	pop	r0
     7a4:	0f 90       	pop	r0
     7a6:	df 91       	pop	r29
     7a8:	cf 91       	pop	r28
     7aa:	08 95       	ret

000007ac <JOY_requestCurrentPosition>:
     7ac:	88 37       	cpi	r24, 0x78	; 120
     7ae:	39 f4       	brne	.+14     	; 0x7be <JOY_requestCurrentPosition+0x12>
     7b0:	60 91 06 01 	lds	r22, 0x0106
     7b4:	70 91 07 01 	lds	r23, 0x0107
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	dc c4       	rjmp	.+2488   	; 0x1174 <ADC_request>
     7bc:	08 95       	ret
     7be:	89 37       	cpi	r24, 0x79	; 121
     7c0:	31 f4       	brne	.+12     	; 0x7ce <JOY_requestCurrentPosition+0x22>
     7c2:	60 91 06 01 	lds	r22, 0x0106
     7c6:	70 91 07 01 	lds	r23, 0x0107
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	d3 c4       	rjmp	.+2470   	; 0x1174 <ADC_request>
     7ce:	08 95       	ret

000007d0 <JOY_updatePosition>:
     7d0:	88 37       	cpi	r24, 0x78	; 120
     7d2:	f9 f4       	brne	.+62     	; 0x812 <JOY_updatePosition+0x42>
     7d4:	80 91 06 01 	lds	r24, 0x0106
	_delay_ms(1000);
}
     7d8:	90 91 07 01 	lds	r25, 0x0107
     7dc:	ef d4       	rcall	.+2526   	; 0x11bc <ADC_read>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	90 93 67 03 	sts	0x0367, r25
     7e4:	80 93 66 03 	sts	0x0366, r24
     7e8:	20 91 08 01 	lds	r18, 0x0108
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     7ec:	60 91 08 01 	lds	r22, 0x0108
     7f0:	ac 01       	movw	r20, r24
     7f2:	42 1b       	sub	r20, r18
     7f4:	51 09       	sbc	r21, r1
     7f6:	9a 01       	movw	r18, r20
     7f8:	44 e6       	ldi	r20, 0x64	; 100
     7fa:	42 9f       	mul	r20, r18
     7fc:	c0 01       	movw	r24, r0
     7fe:	43 9f       	mul	r20, r19
     800:	90 0d       	add	r25, r0
     802:	11 24       	eor	r1, r1
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	dc d4       	rcall	.+2488   	; 0x11c0 <__divmodhi4>
     808:	70 93 6b 03 	sts	0x036B, r23
     80c:	60 93 6a 03 	sts	0x036A, r22
     810:	08 95       	ret
     812:	89 37       	cpi	r24, 0x79	; 121
     814:	f1 f4       	brne	.+60     	; 0x852 <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     816:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     81a:	90 91 07 01 	lds	r25, 0x0107
     81e:	ce d4       	rcall	.+2460   	; 0x11bc <ADC_read>
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	90 93 69 03 	sts	0x0369, r25
     826:	80 93 68 03 	sts	0x0368, r24
     82a:	20 91 09 01 	lds	r18, 0x0109
     82e:	60 91 09 01 	lds	r22, 0x0109
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     832:	ac 01       	movw	r20, r24
     834:	42 1b       	sub	r20, r18
     836:	51 09       	sbc	r21, r1
     838:	9a 01       	movw	r18, r20
     83a:	44 e6       	ldi	r20, 0x64	; 100
     83c:	42 9f       	mul	r20, r18
     83e:	c0 01       	movw	r24, r0
     840:	43 9f       	mul	r20, r19
     842:	90 0d       	add	r25, r0
     844:	11 24       	eor	r1, r1
     846:	70 e0       	ldi	r23, 0x00	; 0
     848:	bb d4       	rcall	.+2422   	; 0x11c0 <__divmodhi4>
     84a:	70 93 6d 03 	sts	0x036D, r23
     84e:	60 93 6c 03 	sts	0x036C, r22
     852:	08 95       	ret

00000854 <JOY_calculateDirection>:
     854:	80 91 6a 03 	lds	r24, 0x036A
     858:	90 91 6b 03 	lds	r25, 0x036B
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     85c:	8b 35       	cpi	r24, 0x5B	; 91
     85e:	91 05       	cpc	r25, r1
     860:	24 f0       	brlt	.+8      	; 0x86a <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     862:	83 e0       	ldi	r24, 0x03	; 3
     864:	80 93 65 03 	sts	0x0365, r24
     868:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     86a:	86 3a       	cpi	r24, 0xA6	; 166
     86c:	9f 4f       	sbci	r25, 0xFF	; 255
     86e:	24 f4       	brge	.+8      	; 0x878 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     870:	84 e0       	ldi	r24, 0x04	; 4
     872:	80 93 65 03 	sts	0x0365, r24
     876:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     878:	80 91 6c 03 	lds	r24, 0x036C
     87c:	90 91 6d 03 	lds	r25, 0x036D
     880:	8b 35       	cpi	r24, 0x5B	; 91
     882:	91 05       	cpc	r25, r1
     884:	24 f0       	brlt	.+8      	; 0x88e <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	80 93 65 03 	sts	0x0365, r24
     88c:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     88e:	86 3a       	cpi	r24, 0xA6	; 166
     890:	9f 4f       	sbci	r25, 0xFF	; 255
     892:	24 f4       	brge	.+8      	; 0x89c <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     894:	82 e0       	ldi	r24, 0x02	; 2
     896:	80 93 65 03 	sts	0x0365, r24
     89a:	08 95       	ret
	else{currentDirection = CENTRE;}
     89c:	10 92 65 03 	sts	0x0365, r1
     8a0:	08 95       	ret

000008a2 <JOY_getDirection>:
// Before the value is returned, the values of position in x and y direction are 
// requested from the ADC and written to the currentPosition and 
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
     8a2:	88 e7       	ldi	r24, 0x78	; 120
     8a4:	83 df       	rcall	.-250    	; 0x7ac <JOY_requestCurrentPosition>
     8a6:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8a8:	8a 95       	dec	r24
     8aa:	f1 f7       	brne	.-4      	; 0x8a8 <JOY_getDirection+0x6>
     8ac:	00 00       	nop
     8ae:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     8b0:	8f df       	rcall	.-226    	; 0x7d0 <JOY_updatePosition>
     8b2:	89 e7       	ldi	r24, 0x79	; 121
     8b4:	7b df       	rcall	.-266    	; 0x7ac <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     8b6:	82 e6       	ldi	r24, 0x62	; 98
     8b8:	8a 95       	dec	r24
     8ba:	f1 f7       	brne	.-4      	; 0x8b8 <JOY_getDirection+0x16>
     8bc:	00 00       	nop
     8be:	89 e7       	ldi	r24, 0x79	; 121
     8c0:	87 df       	rcall	.-242    	; 0x7d0 <JOY_updatePosition>
     8c2:	c8 df       	rcall	.-112    	; 0x854 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     8c4:	80 91 65 03 	lds	r24, 0x0365
     8c8:	08 95       	ret

000008ca <startGame>:

int menuFrameOffset = 10; //Columns from left frame border
//******************************************************************************************

void startGame()
{
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
	OLED_clear();
     8ce:	5d d2       	rcall	.+1210   	; 0xd8a <OLED_clear>
     8d0:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	3b d2       	rcall	.+1142   	; 0xd50 <OLED_goto>
     8da:	88 e7       	ldi	r24, 0x78	; 120
     8dc:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("START");
     8de:	8e d2       	rcall	.+1308   	; 0xdfc <OLED_printString>
     8e0:	60 e0       	ldi	r22, 0x00	; 0
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_goto(3,0);
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	33 d2       	rcall	.+1126   	; 0xd50 <OLED_goto>
     8ea:	ce e0       	ldi	r28, 0x0E	; 14
     8ec:	d0 e0       	ldi	r29, 0x00	; 0
     8ee:	8e e7       	ldi	r24, 0x7E	; 126
     8f0:	92 e0       	ldi	r25, 0x02	; 2
     8f2:	84 d2       	rcall	.+1288   	; 0xdfc <OLED_printString>
     8f4:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     8f6:	8f e7       	ldi	r24, 0x7F	; 127
     8f8:	97 e0       	ldi	r25, 0x07	; 7
     8fa:	21 50       	subi	r18, 0x01	; 1
     8fc:	80 40       	sbci	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8fe:	90 40       	sbci	r25, 0x00	; 0
     900:	e1 f7       	brne	.-8      	; 0x8fa <startGame+0x30>
     902:	00 c0       	rjmp	.+0      	; 0x904 <startGame+0x3a>
     904:	00 00       	nop
     906:	21 97       	sbiw	r28, 0x01	; 1
     908:	20 97       	sbiw	r28, 0x00	; 0
     90a:	89 f7       	brne	.-30     	; 0x8ee <startGame+0x24>
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	85 e0       	ldi	r24, 0x05	; 5
	OLED_goto(0,0);
	OLED_printString("START");
	
	OLED_goto(3,0);
	
	for(int i = 14; i > 0; i--)
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	1d d2       	rcall	.+1082   	; 0xd50 <OLED_goto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_goto(5,0);
     916:	80 e8       	ldi	r24, 0x80	; 128
     918:	92 e0       	ldi	r25, 0x02	; 2
     91a:	70 d2       	rcall	.+1248   	; 0xdfc <OLED_printString>
     91c:	2f ef       	ldi	r18, 0xFF	; 255
     91e:	8f ef       	ldi	r24, 0xFF	; 255
     920:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     922:	21 50       	subi	r18, 0x01	; 1
     924:	80 40       	sbci	r24, 0x00	; 0
     926:	90 40       	sbci	r25, 0x00	; 0
     928:	e1 f7       	brne	.-8      	; 0x922 <startGame+0x58>
     92a:	00 c0       	rjmp	.+0      	; 0x92c <startGame+0x62>
     92c:	00 c0       	rjmp	.+0      	; 0x92e <startGame+0x64>
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	08 95       	ret

00000934 <MENU_addMenuItem>:
     934:	cf 92       	push	r12
     936:	df 92       	push	r13
     938:	ef 92       	push	r14
     93a:	ff 92       	push	r15
	_delay_ms(3000);
}
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     942:	df 93       	push	r29
     944:	8c 01       	movw	r16, r24
     946:	7b 01       	movw	r14, r22
     948:	6a 01       	movw	r12, r20
     94a:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     94c:	80 91 71 03 	lds	r24, 0x0371
     950:	90 91 72 03 	lds	r25, 0x0372
     954:	89 2b       	or	r24, r25
     956:	19 f0       	breq	.+6      	; 0x95e <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     958:	89 e8       	ldi	r24, 0x89	; 137
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	da d5       	rcall	.+2996   	; 0x1512 <puts>
     95e:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	55 d4       	rcall	.+2218   	; 0x120e <malloc>
     964:	fc 01       	movw	r30, r24
     966:	90 93 72 03 	sts	0x0372, r25
     96a:	80 93 71 03 	sts	0x0371, r24
     96e:	f3 82       	std	Z+3, r15	; 0x03
     970:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     972:	11 83       	std	Z+1, r17	; 0x01
     974:	00 83       	st	Z, r16
	currItem->name = name;
     976:	cd 2b       	or	r28, r29
     978:	39 f0       	breq	.+14     	; 0x988 <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     97a:	d5 82       	std	Z+5, r13	; 0x05
     97c:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     982:	97 83       	std	Z+7, r25	; 0x07
     984:	86 83       	std	Z+6, r24	; 0x06
     986:	04 c0       	rjmp	.+8      	; 0x990 <MENU_addMenuItem+0x5c>
     988:	15 82       	std	Z+5, r1	; 0x05
     98a:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     98c:	17 82       	std	Z+7, r1	; 0x07
     98e:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
	}
}
     994:	1f 91       	pop	r17
     996:	0f 91       	pop	r16
     998:	ff 90       	pop	r15
     99a:	ef 90       	pop	r14
     99c:	df 90       	pop	r13
     99e:	cf 90       	pop	r12
     9a0:	08 95       	ret

000009a2 <MENU_buildMenus>:
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     9a6:	86 e1       	ldi	r24, 0x16	; 22
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	31 d4       	rcall	.+2146   	; 0x120e <malloc>
     9ac:	ec 01       	movw	r28, r24
     9ae:	90 93 78 03 	sts	0x0378, r25
     9b2:	80 93 77 03 	sts	0x0377, r24
     9b6:	8f e9       	ldi	r24, 0x9F	; 159
	mainMenu->menuName = "MainMenu";
     9b8:	92 e0       	ldi	r25, 0x02	; 2
     9ba:	99 83       	std	Y+1, r25	; 0x01
     9bc:	88 83       	st	Y, r24
     9be:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     9c0:	1c 8a       	std	Y+20, r1	; 0x14
     9c2:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	9b 83       	std	Y+3, r25	; 0x03
     9c8:	8a 83       	std	Y+2, r24	; 0x02
     9ca:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     9cc:	90 e0       	ldi	r25, 0x00	; 0
     9ce:	1f d4       	rcall	.+2110   	; 0x120e <malloc>
     9d0:	fc 01       	movw	r30, r24
     9d2:	90 93 76 03 	sts	0x0376, r25
     9d6:	80 93 75 03 	sts	0x0375, r24
     9da:	88 ea       	ldi	r24, 0xA8	; 168
     9dc:	92 e0       	ldi	r25, 0x02	; 2
	difficultyMenu->menuName = "DifficultyMenu";
     9de:	91 83       	std	Z+1, r25	; 0x01
     9e0:	80 83       	st	Z, r24
     9e2:	d5 8b       	std	Z+21, r29	; 0x15
     9e4:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     9e6:	83 e0       	ldi	r24, 0x03	; 3
     9e8:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     9ea:	93 83       	std	Z+3, r25	; 0x03
     9ec:	82 83       	std	Z+2, r24	; 0x02
     9ee:	20 e0       	ldi	r18, 0x00	; 0
     9f0:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     9f2:	40 e0       	ldi	r20, 0x00	; 0
     9f4:	50 e0       	ldi	r21, 0x00	; 0
     9f6:	be 01       	movw	r22, r28
     9f8:	87 eb       	ldi	r24, 0xB7	; 183
     9fa:	92 e0       	ldi	r25, 0x02	; 2
     9fc:	9b df       	rcall	.-202    	; 0x934 <MENU_addMenuItem>
     9fe:	60 91 77 03 	lds	r22, 0x0377
     a02:	70 91 78 03 	lds	r23, 0x0378
	mainMenu->children[0] = currItem;
     a06:	e0 91 71 03 	lds	r30, 0x0371
     a0a:	f0 91 72 03 	lds	r31, 0x0372
     a0e:	db 01       	movw	r26, r22
     a10:	15 96       	adiw	r26, 0x05	; 5
     a12:	fc 93       	st	X, r31
     a14:	ee 93       	st	-X, r30
     a16:	14 97       	sbiw	r26, 0x04	; 4
     a18:	85 e6       	ldi	r24, 0x65	; 101
     a1a:	94 e0       	ldi	r25, 0x04	; 4
     a1c:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
     a1e:	82 87       	std	Z+10, r24	; 0x0a
     a20:	40 91 75 03 	lds	r20, 0x0375
     a24:	50 91 76 03 	lds	r21, 0x0376
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     a28:	21 e0       	ldi	r18, 0x01	; 1
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	80 ec       	ldi	r24, 0xC0	; 192
     a2e:	92 e0       	ldi	r25, 0x02	; 2
     a30:	81 df       	rcall	.-254    	; 0x934 <MENU_addMenuItem>
     a32:	60 91 77 03 	lds	r22, 0x0377
     a36:	70 91 78 03 	lds	r23, 0x0378
	mainMenu->children[1] = currItem;
     a3a:	80 91 71 03 	lds	r24, 0x0371
     a3e:	90 91 72 03 	lds	r25, 0x0372
     a42:	fb 01       	movw	r30, r22
     a44:	97 83       	std	Z+7, r25	; 0x07
     a46:	86 83       	std	Z+6, r24	; 0x06
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     a50:	8b ec       	ldi	r24, 0xCB	; 203
     a52:	92 e0       	ldi	r25, 0x02	; 2
     a54:	6f df       	rcall	.-290    	; 0x934 <MENU_addMenuItem>
     a56:	60 91 77 03 	lds	r22, 0x0377
     a5a:	70 91 78 03 	lds	r23, 0x0378
     a5e:	80 91 71 03 	lds	r24, 0x0371
	mainMenu->children[2] = currItem;
     a62:	90 91 72 03 	lds	r25, 0x0372
     a66:	db 01       	movw	r26, r22
     a68:	19 96       	adiw	r26, 0x09	; 9
     a6a:	9c 93       	st	X, r25
     a6c:	8e 93       	st	-X, r24
     a6e:	18 97       	sbiw	r26, 0x08	; 8
     a70:	20 e0       	ldi	r18, 0x00	; 0
     a72:	30 e0       	ldi	r19, 0x00	; 0
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	86 ed       	ldi	r24, 0xD6	; 214
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
     a7a:	92 e0       	ldi	r25, 0x02	; 2
     a7c:	5b df       	rcall	.-330    	; 0x934 <MENU_addMenuItem>
     a7e:	60 91 77 03 	lds	r22, 0x0377
     a82:	70 91 78 03 	lds	r23, 0x0378
     a86:	e0 91 71 03 	lds	r30, 0x0371
	mainMenu->children[3] = currItem;
     a8a:	f0 91 72 03 	lds	r31, 0x0372
     a8e:	db 01       	movw	r26, r22
     a90:	1b 96       	adiw	r26, 0x0b	; 11
     a92:	fc 93       	st	X, r31
     a94:	ee 93       	st	-X, r30
     a96:	1a 97       	sbiw	r26, 0x0a	; 10
     a98:	84 ea       	ldi	r24, 0xA4	; 164
     a9a:	92 e0       	ldi	r25, 0x02	; 2
     a9c:	93 87       	std	Z+11, r25	; 0x0b
     a9e:	82 87       	std	Z+10, r24	; 0x0a
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
     aa4:	40 e0       	ldi	r20, 0x00	; 0
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	80 ee       	ldi	r24, 0xE0	; 224
     aaa:	92 e0       	ldi	r25, 0x02	; 2
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
     aac:	43 df       	rcall	.-378    	; 0x934 <MENU_addMenuItem>
     aae:	e0 91 77 03 	lds	r30, 0x0377
     ab2:	f0 91 78 03 	lds	r31, 0x0378
     ab6:	80 91 71 03 	lds	r24, 0x0371
     aba:	90 91 72 03 	lds	r25, 0x0372
	mainMenu->children[4] = currItem;
     abe:	95 87       	std	Z+13, r25	; 0x0d
     ac0:	84 87       	std	Z+12, r24	; 0x0c
     ac2:	10 92 72 03 	sts	0x0372, r1
     ac6:	10 92 71 03 	sts	0x0371, r1
     aca:	60 91 75 03 	lds	r22, 0x0375
     ace:	70 91 76 03 	lds	r23, 0x0376
	
	currItem = NULL;
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	85 ee       	ldi	r24, 0xE5	; 229
     adc:	92 e0       	ldi	r25, 0x02	; 2
     ade:	2a df       	rcall	.-428    	; 0x934 <MENU_addMenuItem>
     ae0:	60 91 75 03 	lds	r22, 0x0375
     ae4:	70 91 76 03 	lds	r23, 0x0376
     ae8:	80 91 71 03 	lds	r24, 0x0371
     aec:	90 91 72 03 	lds	r25, 0x0372
	difficultyMenu->children[0] = currItem;
     af0:	fb 01       	movw	r30, r22
     af2:	95 83       	std	Z+5, r25	; 0x05
     af4:	84 83       	std	Z+4, r24	; 0x04
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 e0       	ldi	r20, 0x00	; 0
     afc:	50 e0       	ldi	r21, 0x00	; 0
     afe:	8a ee       	ldi	r24, 0xEA	; 234
     b00:	92 e0       	ldi	r25, 0x02	; 2
     b02:	18 df       	rcall	.-464    	; 0x934 <MENU_addMenuItem>
     b04:	60 91 75 03 	lds	r22, 0x0375
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
     b08:	70 91 76 03 	lds	r23, 0x0376
     b0c:	80 91 71 03 	lds	r24, 0x0371
     b10:	90 91 72 03 	lds	r25, 0x0372
     b14:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
     b16:	17 96       	adiw	r26, 0x07	; 7
     b18:	9c 93       	st	X, r25
     b1a:	8e 93       	st	-X, r24
     b1c:	16 97       	sbiw	r26, 0x06	; 6
     b1e:	20 e0       	ldi	r18, 0x00	; 0
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	40 e0       	ldi	r20, 0x00	; 0
     b24:	50 e0       	ldi	r21, 0x00	; 0
     b26:	81 ef       	ldi	r24, 0xF1	; 241
     b28:	92 e0       	ldi	r25, 0x02	; 2
     b2a:	04 df       	rcall	.-504    	; 0x934 <MENU_addMenuItem>
     b2c:	e0 91 75 03 	lds	r30, 0x0375
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
     b30:	f0 91 76 03 	lds	r31, 0x0376
     b34:	80 91 71 03 	lds	r24, 0x0371
     b38:	90 91 72 03 	lds	r25, 0x0372
     b3c:	91 87       	std	Z+9, r25	; 0x09
     b3e:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	08 95       	ret

00000b46 <MENU_printMenuItem>:
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	ec 01       	movw	r28, r24
     b4c:	cb 01       	movw	r24, r22
     b4e:	20 97       	sbiw	r28, 0x00	; 0
     b50:	49 f0       	breq	.+18     	; 0xb64 <MENU_printMenuItem+0x1e>
     b52:	60 91 0e 01 	lds	r22, 0x010E
}
     b56:	70 91 0f 01 	lds	r23, 0x010F

void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
     b5a:	fa d0       	rcall	.+500    	; 0xd50 <OLED_goto>
     b5c:	88 81       	ld	r24, Y
		OLED_printString(item->name);
     b5e:	99 81       	ldd	r25, Y+1	; 0x01
     b60:	4d d1       	rcall	.+666    	; 0xdfc <OLED_printString>
     b62:	07 c0       	rjmp	.+14     	; 0xb72 <MENU_printMenuItem+0x2c>
     b64:	86 ef       	ldi	r24, 0xF6	; 246
     b66:	92 e0       	ldi	r25, 0x02	; 2
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
     b68:	9f 93       	push	r25
     b6a:	8f 93       	push	r24
     b6c:	c1 d4       	rcall	.+2434   	; 0x14f0 <printf>
     b6e:	0f 90       	pop	r0
     b70:	0f 90       	pop	r0
     b72:	df 91       	pop	r29
     b74:	cf 91       	pop	r28
     b76:	08 95       	ret

00000b78 <MENU_printMenu>:
	}
}
     b78:	cf 92       	push	r12
     b7a:	df 92       	push	r13
     b7c:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	6c 01       	movw	r12, r24
     b8a:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
     b8c:	fe d0       	rcall	.+508    	; 0xd8a <OLED_clear>
     b8e:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	8b d1       	rcall	.+790    	; 0xeaa <OLED_moveArrow>
     b94:	1e 14       	cp	r1, r14
     b96:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
     b98:	7c f4       	brge	.+30     	; 0xbb8 <MENU_printMenu+0x40>
     b9a:	86 01       	movw	r16, r12
     b9c:	0c 5f       	subi	r16, 0xFC	; 252
     b9e:	1f 4f       	sbci	r17, 0xFF	; 255
     ba0:	c0 e0       	ldi	r28, 0x00	; 0
     ba2:	d0 e0       	ldi	r29, 0x00	; 0
     ba4:	be 01       	movw	r22, r28
     ba6:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
     ba8:	81 91       	ld	r24, Z+
     baa:	91 91       	ld	r25, Z+
     bac:	8f 01       	movw	r16, r30
     bae:	cb df       	rcall	.-106    	; 0xb46 <MENU_printMenuItem>
     bb0:	21 96       	adiw	r28, 0x01	; 1
     bb2:	ce 15       	cp	r28, r14
     bb4:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
     bb6:	b1 f7       	brne	.-20     	; 0xba4 <MENU_printMenu+0x2c>
     bb8:	d0 92 74 03 	sts	0x0374, r13
     bbc:	c0 92 73 03 	sts	0x0373, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
     bc0:	10 92 6f 03 	sts	0x036F, r1
     bc4:	10 92 6e 03 	sts	0x036E, r1
	
	currentPosition = 0;
     bc8:	f6 01       	movw	r30, r12
     bca:	84 81       	ldd	r24, Z+4	; 0x04
     bcc:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
     bce:	90 93 72 03 	sts	0x0372, r25
     bd2:	80 93 71 03 	sts	0x0371, r24
     bd6:	df 91       	pop	r29
     bd8:	cf 91       	pop	r28
     bda:	1f 91       	pop	r17
}
     bdc:	0f 91       	pop	r16
     bde:	ff 90       	pop	r15
     be0:	ef 90       	pop	r14
     be2:	df 90       	pop	r13
     be4:	cf 90       	pop	r12
     be6:	08 95       	ret

00000be8 <MENU_moveUp>:
     be8:	20 91 6e 03 	lds	r18, 0x036E
     bec:	30 91 6f 03 	lds	r19, 0x036F
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
     bf0:	12 16       	cp	r1, r18
     bf2:	13 06       	cpc	r1, r19
     bf4:	bc f4       	brge	.+46     	; 0xc24 <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
     bf6:	c9 01       	movw	r24, r18
     bf8:	01 97       	sbiw	r24, 0x01	; 1
     bfa:	90 93 6f 03 	sts	0x036F, r25
     bfe:	80 93 6e 03 	sts	0x036E, r24
		currItem = currentMenu->children[currentPosition];
     c02:	e0 91 73 03 	lds	r30, 0x0373
     c06:	f0 91 74 03 	lds	r31, 0x0374
     c0a:	2f 5f       	subi	r18, 0xFF	; 255
     c0c:	3f 4f       	sbci	r19, 0xFF	; 255
     c0e:	22 0f       	add	r18, r18
     c10:	33 1f       	adc	r19, r19
     c12:	e2 0f       	add	r30, r18
     c14:	f3 1f       	adc	r31, r19
     c16:	20 81       	ld	r18, Z
     c18:	31 81       	ldd	r19, Z+1	; 0x01
     c1a:	30 93 72 03 	sts	0x0372, r19
     c1e:	20 93 71 03 	sts	0x0371, r18
		OLED_moveArrow(currentPosition);
     c22:	43 c1       	rjmp	.+646    	; 0xeaa <OLED_moveArrow>
     c24:	08 95       	ret

00000c26 <MENU_moveDown>:
     c26:	e0 91 73 03 	lds	r30, 0x0373
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
     c2a:	f0 91 74 03 	lds	r31, 0x0374
     c2e:	20 91 6e 03 	lds	r18, 0x036E
     c32:	30 91 6f 03 	lds	r19, 0x036F
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	28 17       	cp	r18, r24
     c3e:	39 07       	cpc	r19, r25
     c40:	a4 f4       	brge	.+40     	; 0xc6a <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
     c42:	c9 01       	movw	r24, r18
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	90 93 6f 03 	sts	0x036F, r25
     c4a:	80 93 6e 03 	sts	0x036E, r24
		currItem = currentMenu->children[currentPosition];
     c4e:	2d 5f       	subi	r18, 0xFD	; 253
     c50:	3f 4f       	sbci	r19, 0xFF	; 255
     c52:	22 0f       	add	r18, r18
     c54:	33 1f       	adc	r19, r19
     c56:	e2 0f       	add	r30, r18
     c58:	f3 1f       	adc	r31, r19
     c5a:	20 81       	ld	r18, Z
     c5c:	31 81       	ldd	r19, Z+1	; 0x01
     c5e:	30 93 72 03 	sts	0x0372, r19
     c62:	20 93 71 03 	sts	0x0371, r18
		OLED_moveArrow(currentPosition);
     c66:	21 c1       	rjmp	.+578    	; 0xeaa <OLED_moveArrow>
     c68:	08 95       	ret
     c6a:	10 92 6f 03 	sts	0x036F, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
     c6e:	10 92 6e 03 	sts	0x036E, r1
     c72:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
     c74:	95 81       	ldd	r25, Z+5	; 0x05
     c76:	90 93 72 03 	sts	0x0372, r25
     c7a:	80 93 71 03 	sts	0x0371, r24
     c7e:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	13 c1       	rjmp	.+550    	; 0xeaa <OLED_moveArrow>
     c84:	08 95       	ret

00000c86 <MENU_moveLeft>:
     c86:	e0 91 73 03 	lds	r30, 0x0373
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
     c8a:	f0 91 74 03 	lds	r31, 0x0374
     c8e:	84 89       	ldd	r24, Z+20	; 0x14
     c90:	95 89       	ldd	r25, Z+21	; 0x15
     c92:	00 97       	sbiw	r24, 0x00	; 0
     c94:	21 f0       	breq	.+8      	; 0xc9e <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
     c96:	fc 01       	movw	r30, r24
     c98:	62 81       	ldd	r22, Z+2	; 0x02
     c9a:	73 81       	ldd	r23, Z+3	; 0x03
     c9c:	6d cf       	rjmp	.-294    	; 0xb78 <MENU_printMenu>
     c9e:	08 95       	ret

00000ca0 <MENU_reactivate>:
     ca0:	80 91 73 03 	lds	r24, 0x0373
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
     ca4:	90 91 74 03 	lds	r25, 0x0374
     ca8:	fc 01       	movw	r30, r24
     caa:	62 81       	ldd	r22, Z+2	; 0x02
     cac:	73 81       	ldd	r23, Z+3	; 0x03
     cae:	64 df       	rcall	.-312    	; 0xb78 <MENU_printMenu>
     cb0:	18 c0       	rjmp	.+48     	; 0xce2 <MENU_waitForInput>
	MENU_waitForInput();
     cb2:	08 95       	ret

00000cb4 <MENU_moveRight>:
     cb4:	e0 91 71 03 	lds	r30, 0x0371
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
     cb8:	f0 91 72 03 	lds	r31, 0x0372
     cbc:	86 81       	ldd	r24, Z+6	; 0x06
     cbe:	97 81       	ldd	r25, Z+7	; 0x07
     cc0:	89 2b       	or	r24, r25
     cc2:	39 f0       	breq	.+14     	; 0xcd2 <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
     cc4:	84 81       	ldd	r24, Z+4	; 0x04
     cc6:	95 81       	ldd	r25, Z+5	; 0x05
     cc8:	fc 01       	movw	r30, r24
     cca:	62 81       	ldd	r22, Z+2	; 0x02
     ccc:	73 81       	ldd	r23, Z+3	; 0x03
     cce:	54 cf       	rjmp	.-344    	; 0xb78 <MENU_printMenu>
     cd0:	08 95       	ret
     cd2:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
     cd4:	f3 85       	ldd	r31, Z+11	; 0x0b
     cd6:	e0 2d       	mov	r30, r0
     cd8:	30 97       	sbiw	r30, 0x00	; 0
     cda:	11 f0       	breq	.+4      	; 0xce0 <MENU_moveRight+0x2c>
     cdc:	09 95       	icall
	{
		currItem->functionPtr();
     cde:	e0 cf       	rjmp	.-64     	; 0xca0 <MENU_reactivate>
		MENU_reactivate();
     ce0:	08 95       	ret

00000ce2 <MENU_waitForInput>:
     ce2:	80 91 6e 03 	lds	r24, 0x036E
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
     ce6:	90 91 6f 03 	lds	r25, 0x036F
     cea:	df d0       	rcall	.+446    	; 0xeaa <OLED_moveArrow>
     cec:	80 91 70 03 	lds	r24, 0x0370
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
     cf0:	88 23       	and	r24, r24
     cf2:	f9 f0       	breq	.+62     	; 0xd32 <MENU_waitForInput+0x50>
     cf4:	d6 dd       	rcall	.-1108   	; 0x8a2 <JOY_getDirection>
	{
		currDir = JOY_getDirection();
     cf6:	82 30       	cpi	r24, 0x02	; 2
     cf8:	71 f0       	breq	.+28     	; 0xd16 <MENU_waitForInput+0x34>
		switch(currDir){
     cfa:	18 f4       	brcc	.+6      	; 0xd02 <MENU_waitForInput+0x20>
     cfc:	81 30       	cpi	r24, 0x01	; 1
     cfe:	49 f0       	breq	.+18     	; 0xd12 <MENU_waitForInput+0x30>
     d00:	0b c0       	rjmp	.+22     	; 0xd18 <MENU_waitForInput+0x36>
     d02:	83 30       	cpi	r24, 0x03	; 3
     d04:	21 f0       	breq	.+8      	; 0xd0e <MENU_waitForInput+0x2c>
     d06:	84 30       	cpi	r24, 0x04	; 4
     d08:	39 f4       	brne	.+14     	; 0xd18 <MENU_waitForInput+0x36>
     d0a:	bd df       	rcall	.-134    	; 0xc86 <MENU_moveLeft>
     d0c:	05 c0       	rjmp	.+10     	; 0xd18 <MENU_waitForInput+0x36>
			case LEFT:
			MENU_moveLeft();
     d0e:	d2 df       	rcall	.-92     	; 0xcb4 <MENU_moveRight>
     d10:	03 c0       	rjmp	.+6      	; 0xd18 <MENU_waitForInput+0x36>
			break;
     d12:	6a df       	rcall	.-300    	; 0xbe8 <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
     d14:	01 c0       	rjmp	.+2      	; 0xd18 <MENU_waitForInput+0x36>
     d16:	87 df       	rcall	.-242    	; 0xc26 <MENU_moveDown>
			break;
     d18:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
     d1a:	8f e7       	ldi	r24, 0x7F	; 127
     d1c:	94 e0       	ldi	r25, 0x04	; 4
			break;
     d1e:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
     d20:	80 40       	sbci	r24, 0x00	; 0
     d22:	90 40       	sbci	r25, 0x00	; 0
     d24:	e1 f7       	brne	.-8      	; 0xd1e <MENU_waitForInput+0x3c>
     d26:	00 c0       	rjmp	.+0      	; 0xd28 <MENU_waitForInput+0x46>
     d28:	00 00       	nop
     d2a:	80 91 70 03 	lds	r24, 0x0370
     d2e:	81 11       	cpse	r24, r1
     d30:	e1 cf       	rjmp	.-62     	; 0xcf4 <MENU_waitForInput+0x12>
     d32:	08 95       	ret

00000d34 <MENU_activate>:
     d34:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
     d36:	80 93 70 03 	sts	0x0370, r24
     d3a:	33 de       	rcall	.-922    	; 0x9a2 <MENU_buildMenus>
     d3c:	80 91 77 03 	lds	r24, 0x0377
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
     d40:	90 91 78 03 	lds	r25, 0x0378
     d44:	fc 01       	movw	r30, r24
     d46:	62 81       	ldd	r22, Z+2	; 0x02
     d48:	73 81       	ldd	r23, Z+3	; 0x03
     d4a:	16 df       	rcall	.-468    	; 0xb78 <MENU_printMenu>
     d4c:	ca cf       	rjmp	.-108    	; 0xce2 <MENU_waitForInput>
     d4e:	08 95       	ret

00000d50 <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
     d50:	26 2f       	mov	r18, r22
     d52:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
     d54:	75 95       	asr	r23
     d56:	67 95       	ror	r22
     d58:	75 95       	asr	r23
     d5a:	67 95       	ror	r22
     d5c:	75 95       	asr	r23
     d5e:	67 95       	ror	r22
     d60:	75 95       	asr	r23
     d62:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
     d64:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
     d66:	80 55       	subi	r24, 0x50	; 80
     d68:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
     d6a:	e0 91 12 01 	lds	r30, 0x0112
     d6e:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     d72:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
     d74:	e0 91 12 01 	lds	r30, 0x0112
     d78:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     d7c:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
     d7e:	e0 91 12 01 	lds	r30, 0x0112
     d82:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     d86:	60 83       	st	Z, r22
     d88:	08 95       	ret

00000d8a <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
     d8a:	1f 93       	push	r17
     d8c:	cf 93       	push	r28
     d8e:	df 93       	push	r29
     d90:	c1 e0       	ldi	r28, 0x01	; 1
     d92:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
     d98:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	70 e0       	ldi	r23, 0x00	; 0
     d9e:	d8 df       	rcall	.-80     	; 0xd50 <OLED_goto>
     da0:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
     da2:	e0 91 10 01 	lds	r30, 0x0110
		{
			OLED_writeByteToOLED(oled_data, 0x00);
     da6:	f0 91 11 01 	lds	r31, 0x0111
     daa:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     dac:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
     dae:	80 38       	cpi	r24, 0x80	; 128
     db0:	c1 f7       	brne	.-16     	; 0xda2 <OLED_clear+0x18>
     db2:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
     db4:	9d 2f       	mov	r25, r29
     db6:	21 96       	adiw	r28, 0x01	; 1
     db8:	c9 30       	cpi	r28, 0x09	; 9
     dba:	d1 05       	cpc	r29, r1
     dbc:	71 f7       	brne	.-36     	; 0xd9a <OLED_clear+0x10>
     dbe:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	08 95       	ret

00000dc6 <OLED_printCharacter>:
     dc6:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	22 0f       	add	r18, r18
     dce:	33 1f       	adc	r19, r19
     dd0:	22 0f       	add	r18, r18
     dd2:	33 1f       	adc	r19, r19
     dd4:	22 0f       	add	r18, r18
     dd6:	33 1f       	adc	r19, r19
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	20 59       	subi	r18, 0x90	; 144
     dde:	3f 4f       	sbci	r19, 0xFF	; 255
     de0:	f9 01       	movw	r30, r18
     de2:	e8 0f       	add	r30, r24
     de4:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
     de6:	e4 91       	lpm	r30, Z
     de8:	a0 91 10 01 	lds	r26, 0x0110
     dec:	b0 91 11 01 	lds	r27, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     df0:	ec 93       	st	X, r30
     df2:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
     df4:	88 30       	cpi	r24, 0x08	; 8
     df6:	91 05       	cpc	r25, r1
     df8:	99 f7       	brne	.-26     	; 0xde0 <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
     dfa:	08 95       	ret

00000dfc <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
     dfc:	1f 93       	push	r17
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
     e04:	10 e0       	ldi	r17, 0x00	; 0
     e06:	06 c0       	rjmp	.+12     	; 0xe14 <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
     e08:	fe 01       	movw	r30, r28
     e0a:	e8 0f       	add	r30, r24
     e0c:	f9 1f       	adc	r31, r25
     e0e:	80 81       	ld	r24, Z
     e10:	da df       	rcall	.-76     	; 0xdc6 <OLED_printCharacter>
     e12:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
     e14:	81 2f       	mov	r24, r17
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	fe 01       	movw	r30, r28
     e1a:	01 90       	ld	r0, Z+
     e1c:	00 20       	and	r0, r0
     e1e:	e9 f7       	brne	.-6      	; 0xe1a <OLED_printString+0x1e>
     e20:	31 97       	sbiw	r30, 0x01	; 1
     e22:	ec 1b       	sub	r30, r28
     e24:	fd 0b       	sbc	r31, r29
     e26:	8e 17       	cp	r24, r30
     e28:	9f 07       	cpc	r25, r31
     e2a:	70 f3       	brcs	.-36     	; 0xe08 <OLED_printString+0xc>
     e2c:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
     e2e:	cf 91       	pop	r28
     e30:	1f 91       	pop	r17
     e32:	08 95       	ret

00000e34 <OLED_printArrow>:
     e34:	e0 91 10 01 	lds	r30, 0x0110
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
     e38:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e3c:	88 e1       	ldi	r24, 0x18	; 24
     e3e:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
     e40:	e0 91 10 01 	lds	r30, 0x0110
     e44:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e48:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
     e4a:	e0 91 10 01 	lds	r30, 0x0110
     e4e:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e52:	9e e7       	ldi	r25, 0x7E	; 126
     e54:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
     e56:	e0 91 10 01 	lds	r30, 0x0110
     e5a:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e5e:	9c e3       	ldi	r25, 0x3C	; 60
     e60:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
     e62:	e0 91 10 01 	lds	r30, 0x0110
     e66:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e6a:	80 83       	st	Z, r24
     e6c:	08 95       	ret

00000e6e <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
     e6e:	1f 93       	push	r17
     e70:	cf 93       	push	r28
     e72:	df 93       	push	r29
     e74:	c1 e0       	ldi	r28, 0x01	; 1
     e76:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
     e7c:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	66 df       	rcall	.-308    	; 0xd50 <OLED_goto>
     e84:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
     e86:	e0 91 10 01 	lds	r30, 0x0110
		{
			OLED_writeByteToOLED(oled_data, 0x00);
     e8a:	f0 91 11 01 	lds	r31, 0x0111
     e8e:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e90:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
     e92:	85 30       	cpi	r24, 0x05	; 5
     e94:	c1 f7       	brne	.-16     	; 0xe86 <OLED_clearArrow+0x18>
     e96:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
     e98:	9d 2f       	mov	r25, r29
     e9a:	21 96       	adiw	r28, 0x01	; 1
     e9c:	c9 30       	cpi	r28, 0x09	; 9
     e9e:	d1 05       	cpc	r29, r1
     ea0:	71 f7       	brne	.-36     	; 0xe7e <OLED_clearArrow+0x10>
     ea2:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	08 95       	ret

00000eaa <OLED_moveArrow>:
     eaa:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
     eac:	df 93       	push	r29
     eae:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
     eb0:	de df       	rcall	.-68     	; 0xe6e <OLED_clearArrow>
     eb2:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
     eb4:	70 e0       	ldi	r23, 0x00	; 0
     eb6:	ce 01       	movw	r24, r28
     eb8:	4b df       	rcall	.-362    	; 0xd50 <OLED_goto>
     eba:	bc df       	rcall	.-136    	; 0xe34 <OLED_printArrow>
     ebc:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
     ebe:	cf 91       	pop	r28
     ec0:	08 95       	ret

00000ec2 <OLED_setContrast>:
}
     ec2:	e0 91 12 01 	lds	r30, 0x0112
     ec6:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     eca:	91 e8       	ldi	r25, 0x81	; 129
     ecc:	90 83       	st	Z, r25
void OLED_setContrast(uint8_t contrast)
{
	// activate contrast contol
	OLED_writeByteToOLED(oled_cmd, 0x81);
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
     ece:	e0 91 12 01 	lds	r30, 0x0112
     ed2:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ed6:	80 83       	st	Z, r24
     ed8:	08 95       	ret

00000eda <OLED_fadeIn>:
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
}

void OLED_fadeIn(void)
{
     eda:	cf 93       	push	r28
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
     edc:	c0 e0       	ldi	r28, 0x00	; 0
	{
		OLED_setContrast(i);
     ede:	8c 2f       	mov	r24, r28
     ee0:	f0 df       	rcall	.-32     	; 0xec2 <OLED_setContrast>
     ee2:	83 e3       	ldi	r24, 0x33	; 51
     ee4:	93 e1       	ldi	r25, 0x13	; 19
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	f1 f7       	brne	.-4      	; 0xee6 <OLED_fadeIn+0xc>
     eea:	cf 5f       	subi	r28, 0xFF	; 255
}

void OLED_fadeIn(void)
{
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
     eec:	cf 3f       	cpi	r28, 0xFF	; 255
     eee:	b9 f7       	brne	.-18     	; 0xede <OLED_fadeIn+0x4>
     ef0:	cf 91       	pop	r28
	{
		OLED_setContrast(i);
		_delay_ms(4);
	}
}
     ef2:	08 95       	ret

00000ef4 <OLED_splashScreen>:
     ef4:	2f ef       	ldi	r18, 0xFF	; 255
     ef6:	8f ef       	ldi	r24, 0xFF	; 255
     ef8:	92 e0       	ldi	r25, 0x02	; 2
     efa:	21 50       	subi	r18, 0x01	; 1
     efc:	80 40       	sbci	r24, 0x00	; 0
     efe:	90 40       	sbci	r25, 0x00	; 0
     f00:	e1 f7       	brne	.-8      	; 0xefa <OLED_splashScreen+0x6>
     f02:	00 c0       	rjmp	.+0      	; 0xf04 <OLED_splashScreen+0x10>
     f04:	00 c0       	rjmp	.+0      	; 0xf06 <OLED_splashScreen+0x12>
}

void OLED_splashScreen(void)
{
	_delay_ms(200);
	OLED_setContrast(0);
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	dc df       	rcall	.-72     	; 0xec2 <OLED_setContrast>
     f0a:	64 e0       	ldi	r22, 0x04	; 4
	OLED_goto(2,4);
     f0c:	70 e0       	ldi	r23, 0x00	; 0
     f0e:	82 e0       	ldi	r24, 0x02	; 2
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	1e df       	rcall	.-452    	; 0xd50 <OLED_goto>
     f14:	86 e0       	ldi	r24, 0x06	; 6
     f16:	93 e0       	ldi	r25, 0x03	; 3
	OLED_printString("Group 46 Soft");
     f18:	71 df       	rcall	.-286    	; 0xdfc <OLED_printString>
     f1a:	df df       	rcall	.-66     	; 0xeda <OLED_fadeIn>
     f1c:	2f ef       	ldi	r18, 0xFF	; 255
     f1e:	8f e7       	ldi	r24, 0x7F	; 127
	OLED_fadeIn();
     f20:	97 e0       	ldi	r25, 0x07	; 7
     f22:	21 50       	subi	r18, 0x01	; 1
     f24:	80 40       	sbci	r24, 0x00	; 0
     f26:	90 40       	sbci	r25, 0x00	; 0
     f28:	e1 f7       	brne	.-8      	; 0xf22 <OLED_splashScreen+0x2e>
     f2a:	00 c0       	rjmp	.+0      	; 0xf2c <OLED_splashScreen+0x38>
     f2c:	00 00       	nop
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	c8 df       	rcall	.-112    	; 0xec2 <OLED_setContrast>
     f32:	6c e1       	ldi	r22, 0x1C	; 28
     f34:	70 e0       	ldi	r23, 0x00	; 0
	_delay_ms(500);
	OLED_setContrast(0);
     f36:	84 e0       	ldi	r24, 0x04	; 4
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	0a df       	rcall	.-492    	; 0xd50 <OLED_goto>
	OLED_goto(4,28);
     f3c:	84 e1       	ldi	r24, 0x14	; 20
     f3e:	93 e0       	ldi	r25, 0x03	; 3
     f40:	5d df       	rcall	.-326    	; 0xdfc <OLED_printString>
     f42:	68 e1       	ldi	r22, 0x18	; 24
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	85 e0       	ldi	r24, 0x05	; 5
	OLED_printString("proudly");
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 df       	rcall	.-508    	; 0xd50 <OLED_goto>
     f4c:	8c e1       	ldi	r24, 0x1C	; 28
     f4e:	93 e0       	ldi	r25, 0x03	; 3
	OLED_goto(5,24);	
     f50:	55 df       	rcall	.-342    	; 0xdfc <OLED_printString>
     f52:	c3 df       	rcall	.-122    	; 0xeda <OLED_fadeIn>
     f54:	2f ef       	ldi	r18, 0xFF	; 255
     f56:	8f e7       	ldi	r24, 0x7F	; 127
     f58:	97 e0       	ldi	r25, 0x07	; 7
     f5a:	21 50       	subi	r18, 0x01	; 1
	OLED_printString("presents");
     f5c:	80 40       	sbci	r24, 0x00	; 0
     f5e:	90 40       	sbci	r25, 0x00	; 0
     f60:	e1 f7       	brne	.-8      	; 0xf5a <OLED_splashScreen+0x66>
     f62:	00 c0       	rjmp	.+0      	; 0xf64 <OLED_splashScreen+0x70>
	OLED_fadeIn();
     f64:	00 00       	nop
     f66:	11 df       	rcall	.-478    	; 0xd8a <OLED_clear>
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	ab df       	rcall	.-170    	; 0xec2 <OLED_setContrast>
     f6c:	6c e1       	ldi	r22, 0x1C	; 28
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	83 e0       	ldi	r24, 0x03	; 3
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	ed de       	rcall	.-550    	; 0xd50 <OLED_goto>
     f76:	85 e2       	ldi	r24, 0x25	; 37
     f78:	93 e0       	ldi	r25, 0x03	; 3
	_delay_ms(500);
	
	OLED_clear();
     f7a:	40 df       	rcall	.-384    	; 0xdfc <OLED_printString>
     f7c:	ae df       	rcall	.-164    	; 0xeda <OLED_fadeIn>
	OLED_setContrast(0);
     f7e:	2f ef       	ldi	r18, 0xFF	; 255
     f80:	8f ef       	ldi	r24, 0xFF	; 255
     f82:	9e e0       	ldi	r25, 0x0E	; 14
	OLED_goto(3, 28);
     f84:	21 50       	subi	r18, 0x01	; 1
     f86:	80 40       	sbci	r24, 0x00	; 0
     f88:	90 40       	sbci	r25, 0x00	; 0
     f8a:	e1 f7       	brne	.-8      	; 0xf84 <OLED_splashScreen+0x90>
     f8c:	00 c0       	rjmp	.+0      	; 0xf8e <OLED_splashScreen+0x9a>
     f8e:	00 00       	nop
	OLED_printString("FIFA 18");
     f90:	fc de       	rcall	.-520    	; 0xd8a <OLED_clear>
     f92:	80 e5       	ldi	r24, 0x50	; 80
     f94:	96 cf       	rjmp	.-212    	; 0xec2 <OLED_setContrast>
     f96:	08 95       	ret

00000f98 <OLED_init>:
	OLED_fadeIn();
     f98:	e0 91 12 01 	lds	r30, 0x0112
     f9c:	f0 91 13 01 	lds	r31, 0x0113
     fa0:	8e ea       	ldi	r24, 0xAE	; 174
     fa2:	80 83       	st	Z, r24
     fa4:	e0 91 12 01 	lds	r30, 0x0112
     fa8:	f0 91 13 01 	lds	r31, 0x0113
     fac:	81 ea       	ldi	r24, 0xA1	; 161
	_delay_ms(1000);
	
	// clean up
	OLED_clear(); // wipe screen
     fae:	80 83       	st	Z, r24
     fb0:	e0 91 12 01 	lds	r30, 0x0112
	OLED_setContrast(0x50); // back to standard contrast
     fb4:	f0 91 13 01 	lds	r31, 0x0113
     fb8:	8a ed       	ldi	r24, 0xDA	; 218
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     fba:	80 83       	st	Z, r24
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
     fbc:	e0 91 12 01 	lds	r30, 0x0112
     fc0:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     fc4:	82 e1       	ldi	r24, 0x12	; 18
     fc6:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
     fc8:	e0 91 12 01 	lds	r30, 0x0112
     fcc:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     fd0:	88 ec       	ldi	r24, 0xC8	; 200
     fd2:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
     fd4:	e0 91 12 01 	lds	r30, 0x0112
     fd8:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     fdc:	88 ea       	ldi	r24, 0xA8	; 168
     fde:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
     fe0:	e0 91 12 01 	lds	r30, 0x0112
     fe4:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     fe8:	8f e3       	ldi	r24, 0x3F	; 63
     fea:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
     fec:	e0 91 12 01 	lds	r30, 0x0112
     ff0:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ff4:	85 ed       	ldi	r24, 0xD5	; 213
     ff6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
     ff8:	e0 91 12 01 	lds	r30, 0x0112
     ffc:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1000:	80 e8       	ldi	r24, 0x80	; 128
    1002:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    1004:	e0 91 12 01 	lds	r30, 0x0112
    1008:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    100c:	81 e8       	ldi	r24, 0x81	; 129
    100e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    1010:	e0 91 12 01 	lds	r30, 0x0112
    1014:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1018:	80 e5       	ldi	r24, 0x50	; 80
    101a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    101c:	e0 91 12 01 	lds	r30, 0x0112
    1020:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1024:	89 ed       	ldi	r24, 0xD9	; 217
    1026:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
    1028:	e0 91 12 01 	lds	r30, 0x0112
    102c:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1030:	81 e2       	ldi	r24, 0x21	; 33
    1032:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    1034:	e0 91 12 01 	lds	r30, 0x0112
    1038:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    103c:	80 e2       	ldi	r24, 0x20	; 32
    103e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    1040:	e0 91 12 01 	lds	r30, 0x0112
    1044:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1048:	82 e0       	ldi	r24, 0x02	; 2
    104a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    104c:	e0 91 12 01 	lds	r30, 0x0112
    1050:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1054:	8b ed       	ldi	r24, 0xDB	; 219
    1056:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    1058:	e0 91 12 01 	lds	r30, 0x0112
    105c:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1060:	80 e3       	ldi	r24, 0x30	; 48
    1062:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    1064:	e0 91 12 01 	lds	r30, 0x0112
    1068:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    106c:	8d ea       	ldi	r24, 0xAD	; 173
    106e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    1070:	e0 91 12 01 	lds	r30, 0x0112
    1074:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1078:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    107a:	e0 91 12 01 	lds	r30, 0x0112
    107e:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1082:	84 ea       	ldi	r24, 0xA4	; 164
    1084:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    1086:	e0 91 12 01 	lds	r30, 0x0112
    108a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    108e:	86 ea       	ldi	r24, 0xA6	; 166
    1090:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    1092:	e0 91 12 01 	lds	r30, 0x0112
    1096:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    109a:	8f ea       	ldi	r24, 0xAF	; 175
    109c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    109e:	75 de       	rcall	.-790    	; 0xd8a <OLED_clear>
    10a0:	29 cf       	rjmp	.-430    	; 0xef4 <OLED_splashScreen>
	OLED_splashScreen();
    10a2:	08 95       	ret

000010a4 <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    10a4:	10 92 7b 03 	sts	0x037B, r1
	currentSliPosition.L_abs = 0;
    10a8:	10 92 7c 03 	sts	0x037C, r1
	currentSliPosition.R_per = 0;
    10ac:	10 92 7d 03 	sts	0x037D, r1
	currentSliPosition.L_per = 0;
    10b0:	10 92 7e 03 	sts	0x037E, r1
    10b4:	08 95       	ret

000010b6 <SPI_init>:
#define UNSELECT_CAN_CONTROLLER_SLAVE set_bit(PORTB, SS_CAN_CONTROLLER_PIN)


void SPI_init()
{
	printf("Initializing SPI");
    10b6:	8d e2       	ldi	r24, 0x2D	; 45
    10b8:	93 e0       	ldi	r25, 0x03	; 3
    10ba:	9f 93       	push	r25
    10bc:	8f 93       	push	r24
    10be:	18 d2       	rcall	.+1072   	; 0x14f0 <printf>
    10c0:	80 eb       	ldi	r24, 0xB0	; 176
	// Set _SS, MOSI and SCK output, all others input
	DDRB = (1<<SS_CAN_CONTROLLER_PIN) | (1<<PB5) | (1<<PB7);
    10c2:	87 bb       	out	0x17, r24	; 23
    10c4:	81 e5       	ldi	r24, 0x51	; 81
	
	// Enable SPI, Master, set clock rate fck/16
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
    10c6:	8d b9       	out	0x0d, r24	; 13
    10c8:	c4 9a       	sbi	0x18, 4	; 24
	
	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORTB, SS_CAN_CONTROLLER_PIN);
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	08 95       	ret

000010d0 <activateSlave>:
    10d0:	81 11       	cpse	r24, r1
	return data;
}

void activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    10d2:	01 c0       	rjmp	.+2      	; 0x10d6 <activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    10d4:	c4 98       	cbi	0x18, 4	; 24
    10d6:	08 95       	ret

000010d8 <deactivateSlave>:
	}
}

void deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    10d8:	81 11       	cpse	r24, r1
    10da:	01 c0       	rjmp	.+2      	; 0x10de <deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    10dc:	c4 9a       	sbi	0x18, 4	; 24
    10de:	08 95       	ret

000010e0 <SPI_send>:
	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORTB, SS_CAN_CONTROLLER_PIN);
}

void SPI_send(uint8_t cData, SPI_SLAVES slave)
{
    10e0:	cf 93       	push	r28
    10e2:	df 93       	push	r29
    10e4:	d8 2f       	mov	r29, r24
    10e6:	c6 2f       	mov	r28, r22
	activateSlave(slave);
    10e8:	86 2f       	mov	r24, r22
    10ea:	f2 df       	rcall	.-28     	; 0x10d0 <activateSlave>
    10ec:	df b9       	out	0x0f, r29	; 15
	
	// Start transmission
	SPDR = cData;
    10ee:	1f 92       	push	r1
	printf("Sendind %d\n", cData);
    10f0:	df 93       	push	r29
    10f2:	2e e3       	ldi	r18, 0x3E	; 62
    10f4:	33 e0       	ldi	r19, 0x03	; 3
    10f6:	3f 93       	push	r19
    10f8:	2f 93       	push	r18
    10fa:	fa d1       	rcall	.+1012   	; 0x14f0 <printf>
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	77 9b       	sbis	0x0e, 7	; 14
    1106:	fe cf       	rjmp	.-4      	; 0x1104 <SPI_send+0x24>
    1108:	8c 2f       	mov	r24, r28
    110a:	e6 df       	rcall	.-52     	; 0x10d8 <deactivateSlave>
	
	deactivateSlave(slave);
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	08 95       	ret

00001112 <SPI_receive>:
}
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	c8 2f       	mov	r28, r24

uint8_t SPI_receive(SPI_SLAVES slave)
{	
	activateSlave(slave);
    1118:	db df       	rcall	.-74     	; 0x10d0 <activateSlave>
    111a:	6c 2f       	mov	r22, r28
	//To receive byte from the slave a dummy byte should be sent
	SPI_send(7, slave);
    111c:	87 e0       	ldi	r24, 0x07	; 7
    111e:	e0 df       	rcall	.-64     	; 0x10e0 <SPI_send>
    1120:	77 9b       	sbis	0x0e, 7	; 14
    1122:	fe cf       	rjmp	.-4      	; 0x1120 <SPI_receive+0xe>
	
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    1124:	df b1       	in	r29, 0x0f	; 15
    1126:	8c 2f       	mov	r24, r28
	
	//read the buffer
	uint8_t data = SPDR;
    1128:	d7 df       	rcall	.-82     	; 0x10d8 <deactivateSlave>
	
	deactivateSlave(slave);
    112a:	8d 2f       	mov	r24, r29
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
	return data;
}
    1130:	08 95       	ret

00001132 <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1132:	5d 9b       	sbis	0x0b, 5	; 11
    1134:	fe cf       	rjmp	.-4      	; 0x1132 <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    1136:	8c b9       	out	0x0c, r24	; 12
    1138:	08 95       	ret

0000113a <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    113a:	5f 9b       	sbis	0x0b, 7	; 11
    113c:	fe cf       	rjmp	.-4      	; 0x113a <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    113e:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
    1140:	08 95       	ret

00001142 <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    1142:	ef 92       	push	r14
    1144:	ff 92       	push	r15
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    114a:	bb 27       	eor	r27, r27
    114c:	a1 2f       	mov	r26, r17
    114e:	90 2f       	mov	r25, r16
    1150:	8f 2d       	mov	r24, r15
    1152:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    1154:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1156:	88 e1       	ldi	r24, 0x18	; 24
    1158:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    115a:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    115c:	8e e8       	ldi	r24, 0x8E	; 142
    115e:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    1160:	6d e9       	ldi	r22, 0x9D	; 157
    1162:	78 e0       	ldi	r23, 0x08	; 8
    1164:	89 e9       	ldi	r24, 0x99	; 153
    1166:	98 e0       	ldi	r25, 0x08	; 8
    1168:	79 d1       	rcall	.+754    	; 0x145c <fdevopen>
    116a:	1f 91       	pop	r17
    116c:	0f 91       	pop	r16
    116e:	ff 90       	pop	r15
    1170:	ef 90       	pop	r14
    1172:	08 95       	ret

00001174 <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    1174:	9b 01       	movw	r18, r22
	
	switch(channel){
    1176:	82 30       	cpi	r24, 0x02	; 2
    1178:	69 f0       	breq	.+26     	; 0x1194 <ADC_request+0x20>
    117a:	18 f4       	brcc	.+6      	; 0x1182 <ADC_request+0xe>
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	31 f0       	breq	.+12     	; 0x118c <ADC_request+0x18>
    1180:	15 c0       	rjmp	.+42     	; 0x11ac <ADC_request+0x38>
    1182:	83 30       	cpi	r24, 0x03	; 3
    1184:	59 f0       	breq	.+22     	; 0x119c <ADC_request+0x28>
    1186:	84 30       	cpi	r24, 0x04	; 4
    1188:	69 f0       	breq	.+26     	; 0x11a4 <ADC_request+0x30>
    118a:	10 c0       	rjmp	.+32     	; 0x11ac <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    118c:	64 e0       	ldi	r22, 0x04	; 4
    118e:	c9 01       	movw	r24, r18
    1190:	c5 c9       	rjmp	.-3190   	; 0x51c <saveToAddress>
    1192:	08 95       	ret
			break;
    1194:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    1196:	c9 01       	movw	r24, r18
    1198:	c1 c9       	rjmp	.-3198   	; 0x51c <saveToAddress>
    119a:	08 95       	ret
    119c:	66 e0       	ldi	r22, 0x06	; 6
			break;
    119e:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    11a0:	bd c9       	rjmp	.-3206   	; 0x51c <saveToAddress>
    11a2:	08 95       	ret
    11a4:	67 e0       	ldi	r22, 0x07	; 7
    11a6:	c9 01       	movw	r24, r18
			break;
    11a8:	b9 c9       	rjmp	.-3214   	; 0x51c <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    11aa:	08 95       	ret
    11ac:	8a e4       	ldi	r24, 0x4A	; 74
    11ae:	93 e0       	ldi	r25, 0x03	; 3
    11b0:	9f 93       	push	r25
			break;
    11b2:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    11b4:	9d d1       	rcall	.+826    	; 0x14f0 <printf>
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	08 95       	ret

000011bc <ADC_read>:
    11bc:	ac c9       	rjmp	.-3240   	; 0x516 <readFromAddress>
    11be:	08 95       	ret

000011c0 <__divmodhi4>:
			break;
    11c0:	97 fb       	bst	r25, 7
    11c2:	07 2e       	mov	r0, r23
    11c4:	16 f4       	brtc	.+4      	; 0x11ca <__divmodhi4+0xa>
    11c6:	00 94       	com	r0
    11c8:	06 d0       	rcall	.+12     	; 0x11d6 <__divmodhi4_neg1>
    11ca:	77 fd       	sbrc	r23, 7
    11cc:	08 d0       	rcall	.+16     	; 0x11de <__divmodhi4_neg2>
    11ce:	0b d0       	rcall	.+22     	; 0x11e6 <__udivmodhi4>
    11d0:	07 fc       	sbrc	r0, 7
    11d2:	05 d0       	rcall	.+10     	; 0x11de <__divmodhi4_neg2>
    11d4:	3e f4       	brtc	.+14     	; 0x11e4 <__divmodhi4_exit>

000011d6 <__divmodhi4_neg1>:
    11d6:	90 95       	com	r25
    11d8:	81 95       	neg	r24
    11da:	9f 4f       	sbci	r25, 0xFF	; 255
    11dc:	08 95       	ret

000011de <__divmodhi4_neg2>:
    11de:	70 95       	com	r23
    11e0:	61 95       	neg	r22
    11e2:	7f 4f       	sbci	r23, 0xFF	; 255

000011e4 <__divmodhi4_exit>:
    11e4:	08 95       	ret

000011e6 <__udivmodhi4>:
    11e6:	aa 1b       	sub	r26, r26
    11e8:	bb 1b       	sub	r27, r27
    11ea:	51 e1       	ldi	r21, 0x11	; 17
    11ec:	07 c0       	rjmp	.+14     	; 0x11fc <__udivmodhi4_ep>

000011ee <__udivmodhi4_loop>:
    11ee:	aa 1f       	adc	r26, r26
    11f0:	bb 1f       	adc	r27, r27
    11f2:	a6 17       	cp	r26, r22
    11f4:	b7 07       	cpc	r27, r23
    11f6:	10 f0       	brcs	.+4      	; 0x11fc <__udivmodhi4_ep>
    11f8:	a6 1b       	sub	r26, r22
    11fa:	b7 0b       	sbc	r27, r23

000011fc <__udivmodhi4_ep>:
    11fc:	88 1f       	adc	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	5a 95       	dec	r21
    1202:	a9 f7       	brne	.-22     	; 0x11ee <__udivmodhi4_loop>
    1204:	80 95       	com	r24
    1206:	90 95       	com	r25
    1208:	bc 01       	movw	r22, r24
    120a:	cd 01       	movw	r24, r26
    120c:	08 95       	ret

0000120e <malloc>:
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	82 30       	cpi	r24, 0x02	; 2
    1214:	91 05       	cpc	r25, r1
    1216:	10 f4       	brcc	.+4      	; 0x121c <malloc+0xe>
    1218:	82 e0       	ldi	r24, 0x02	; 2
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	e0 91 81 03 	lds	r30, 0x0381
    1220:	f0 91 82 03 	lds	r31, 0x0382
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	a0 e0       	ldi	r26, 0x00	; 0
    122a:	b0 e0       	ldi	r27, 0x00	; 0
    122c:	30 97       	sbiw	r30, 0x00	; 0
    122e:	39 f1       	breq	.+78     	; 0x127e <malloc+0x70>
    1230:	40 81       	ld	r20, Z
    1232:	51 81       	ldd	r21, Z+1	; 0x01
    1234:	48 17       	cp	r20, r24
    1236:	59 07       	cpc	r21, r25
    1238:	b8 f0       	brcs	.+46     	; 0x1268 <malloc+0x5a>
    123a:	48 17       	cp	r20, r24
    123c:	59 07       	cpc	r21, r25
    123e:	71 f4       	brne	.+28     	; 0x125c <malloc+0x4e>
    1240:	82 81       	ldd	r24, Z+2	; 0x02
    1242:	93 81       	ldd	r25, Z+3	; 0x03
    1244:	10 97       	sbiw	r26, 0x00	; 0
    1246:	29 f0       	breq	.+10     	; 0x1252 <malloc+0x44>
    1248:	13 96       	adiw	r26, 0x03	; 3
    124a:	9c 93       	st	X, r25
    124c:	8e 93       	st	-X, r24
    124e:	12 97       	sbiw	r26, 0x02	; 2
    1250:	2c c0       	rjmp	.+88     	; 0x12aa <malloc+0x9c>
    1252:	90 93 82 03 	sts	0x0382, r25
    1256:	80 93 81 03 	sts	0x0381, r24
    125a:	27 c0       	rjmp	.+78     	; 0x12aa <malloc+0x9c>
    125c:	21 15       	cp	r18, r1
    125e:	31 05       	cpc	r19, r1
    1260:	31 f0       	breq	.+12     	; 0x126e <malloc+0x60>
    1262:	42 17       	cp	r20, r18
    1264:	53 07       	cpc	r21, r19
    1266:	18 f0       	brcs	.+6      	; 0x126e <malloc+0x60>
    1268:	a9 01       	movw	r20, r18
    126a:	db 01       	movw	r26, r22
    126c:	01 c0       	rjmp	.+2      	; 0x1270 <malloc+0x62>
    126e:	ef 01       	movw	r28, r30
    1270:	9a 01       	movw	r18, r20
    1272:	bd 01       	movw	r22, r26
    1274:	df 01       	movw	r26, r30
    1276:	02 80       	ldd	r0, Z+2	; 0x02
    1278:	f3 81       	ldd	r31, Z+3	; 0x03
    127a:	e0 2d       	mov	r30, r0
    127c:	d7 cf       	rjmp	.-82     	; 0x122c <malloc+0x1e>
    127e:	21 15       	cp	r18, r1
    1280:	31 05       	cpc	r19, r1
    1282:	f9 f0       	breq	.+62     	; 0x12c2 <malloc+0xb4>
    1284:	28 1b       	sub	r18, r24
    1286:	39 0b       	sbc	r19, r25
    1288:	24 30       	cpi	r18, 0x04	; 4
    128a:	31 05       	cpc	r19, r1
    128c:	80 f4       	brcc	.+32     	; 0x12ae <malloc+0xa0>
    128e:	8a 81       	ldd	r24, Y+2	; 0x02
    1290:	9b 81       	ldd	r25, Y+3	; 0x03
    1292:	61 15       	cp	r22, r1
    1294:	71 05       	cpc	r23, r1
    1296:	21 f0       	breq	.+8      	; 0x12a0 <malloc+0x92>
    1298:	fb 01       	movw	r30, r22
    129a:	93 83       	std	Z+3, r25	; 0x03
    129c:	82 83       	std	Z+2, r24	; 0x02
    129e:	04 c0       	rjmp	.+8      	; 0x12a8 <malloc+0x9a>
    12a0:	90 93 82 03 	sts	0x0382, r25
    12a4:	80 93 81 03 	sts	0x0381, r24
    12a8:	fe 01       	movw	r30, r28
    12aa:	32 96       	adiw	r30, 0x02	; 2
    12ac:	44 c0       	rjmp	.+136    	; 0x1336 <malloc+0x128>
    12ae:	fe 01       	movw	r30, r28
    12b0:	e2 0f       	add	r30, r18
    12b2:	f3 1f       	adc	r31, r19
    12b4:	81 93       	st	Z+, r24
    12b6:	91 93       	st	Z+, r25
    12b8:	22 50       	subi	r18, 0x02	; 2
    12ba:	31 09       	sbc	r19, r1
    12bc:	39 83       	std	Y+1, r19	; 0x01
    12be:	28 83       	st	Y, r18
    12c0:	3a c0       	rjmp	.+116    	; 0x1336 <malloc+0x128>
    12c2:	20 91 7f 03 	lds	r18, 0x037F
    12c6:	30 91 80 03 	lds	r19, 0x0380
    12ca:	23 2b       	or	r18, r19
    12cc:	41 f4       	brne	.+16     	; 0x12de <malloc+0xd0>
    12ce:	20 91 02 01 	lds	r18, 0x0102
    12d2:	30 91 03 01 	lds	r19, 0x0103
    12d6:	30 93 80 03 	sts	0x0380, r19
    12da:	20 93 7f 03 	sts	0x037F, r18
    12de:	20 91 00 01 	lds	r18, 0x0100
    12e2:	30 91 01 01 	lds	r19, 0x0101
    12e6:	21 15       	cp	r18, r1
    12e8:	31 05       	cpc	r19, r1
    12ea:	41 f4       	brne	.+16     	; 0x12fc <malloc+0xee>
    12ec:	2d b7       	in	r18, 0x3d	; 61
    12ee:	3e b7       	in	r19, 0x3e	; 62
    12f0:	40 91 04 01 	lds	r20, 0x0104
    12f4:	50 91 05 01 	lds	r21, 0x0105
    12f8:	24 1b       	sub	r18, r20
    12fa:	35 0b       	sbc	r19, r21
    12fc:	e0 91 7f 03 	lds	r30, 0x037F
    1300:	f0 91 80 03 	lds	r31, 0x0380
    1304:	e2 17       	cp	r30, r18
    1306:	f3 07       	cpc	r31, r19
    1308:	a0 f4       	brcc	.+40     	; 0x1332 <malloc+0x124>
    130a:	2e 1b       	sub	r18, r30
    130c:	3f 0b       	sbc	r19, r31
    130e:	28 17       	cp	r18, r24
    1310:	39 07       	cpc	r19, r25
    1312:	78 f0       	brcs	.+30     	; 0x1332 <malloc+0x124>
    1314:	ac 01       	movw	r20, r24
    1316:	4e 5f       	subi	r20, 0xFE	; 254
    1318:	5f 4f       	sbci	r21, 0xFF	; 255
    131a:	24 17       	cp	r18, r20
    131c:	35 07       	cpc	r19, r21
    131e:	48 f0       	brcs	.+18     	; 0x1332 <malloc+0x124>
    1320:	4e 0f       	add	r20, r30
    1322:	5f 1f       	adc	r21, r31
    1324:	50 93 80 03 	sts	0x0380, r21
    1328:	40 93 7f 03 	sts	0x037F, r20
    132c:	81 93       	st	Z+, r24
    132e:	91 93       	st	Z+, r25
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <malloc+0x128>
    1332:	e0 e0       	ldi	r30, 0x00	; 0
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	cf 01       	movw	r24, r30
    1338:	df 91       	pop	r29
    133a:	cf 91       	pop	r28
    133c:	08 95       	ret

0000133e <free>:
    133e:	cf 93       	push	r28
    1340:	df 93       	push	r29
    1342:	00 97       	sbiw	r24, 0x00	; 0
    1344:	09 f4       	brne	.+2      	; 0x1348 <free+0xa>
    1346:	87 c0       	rjmp	.+270    	; 0x1456 <free+0x118>
    1348:	fc 01       	movw	r30, r24
    134a:	32 97       	sbiw	r30, 0x02	; 2
    134c:	13 82       	std	Z+3, r1	; 0x03
    134e:	12 82       	std	Z+2, r1	; 0x02
    1350:	c0 91 81 03 	lds	r28, 0x0381
    1354:	d0 91 82 03 	lds	r29, 0x0382
    1358:	20 97       	sbiw	r28, 0x00	; 0
    135a:	81 f4       	brne	.+32     	; 0x137c <free+0x3e>
    135c:	20 81       	ld	r18, Z
    135e:	31 81       	ldd	r19, Z+1	; 0x01
    1360:	28 0f       	add	r18, r24
    1362:	39 1f       	adc	r19, r25
    1364:	80 91 7f 03 	lds	r24, 0x037F
    1368:	90 91 80 03 	lds	r25, 0x0380
    136c:	82 17       	cp	r24, r18
    136e:	93 07       	cpc	r25, r19
    1370:	79 f5       	brne	.+94     	; 0x13d0 <free+0x92>
    1372:	f0 93 80 03 	sts	0x0380, r31
    1376:	e0 93 7f 03 	sts	0x037F, r30
    137a:	6d c0       	rjmp	.+218    	; 0x1456 <free+0x118>
    137c:	de 01       	movw	r26, r28
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	ae 17       	cp	r26, r30
    1384:	bf 07       	cpc	r27, r31
    1386:	50 f4       	brcc	.+20     	; 0x139c <free+0x5e>
    1388:	12 96       	adiw	r26, 0x02	; 2
    138a:	4d 91       	ld	r20, X+
    138c:	5c 91       	ld	r21, X
    138e:	13 97       	sbiw	r26, 0x03	; 3
    1390:	9d 01       	movw	r18, r26
    1392:	41 15       	cp	r20, r1
    1394:	51 05       	cpc	r21, r1
    1396:	09 f1       	breq	.+66     	; 0x13da <free+0x9c>
    1398:	da 01       	movw	r26, r20
    139a:	f3 cf       	rjmp	.-26     	; 0x1382 <free+0x44>
    139c:	b3 83       	std	Z+3, r27	; 0x03
    139e:	a2 83       	std	Z+2, r26	; 0x02
    13a0:	40 81       	ld	r20, Z
    13a2:	51 81       	ldd	r21, Z+1	; 0x01
    13a4:	84 0f       	add	r24, r20
    13a6:	95 1f       	adc	r25, r21
    13a8:	8a 17       	cp	r24, r26
    13aa:	9b 07       	cpc	r25, r27
    13ac:	71 f4       	brne	.+28     	; 0x13ca <free+0x8c>
    13ae:	8d 91       	ld	r24, X+
    13b0:	9c 91       	ld	r25, X
    13b2:	11 97       	sbiw	r26, 0x01	; 1
    13b4:	84 0f       	add	r24, r20
    13b6:	95 1f       	adc	r25, r21
    13b8:	02 96       	adiw	r24, 0x02	; 2
    13ba:	91 83       	std	Z+1, r25	; 0x01
    13bc:	80 83       	st	Z, r24
    13be:	12 96       	adiw	r26, 0x02	; 2
    13c0:	8d 91       	ld	r24, X+
    13c2:	9c 91       	ld	r25, X
    13c4:	13 97       	sbiw	r26, 0x03	; 3
    13c6:	93 83       	std	Z+3, r25	; 0x03
    13c8:	82 83       	std	Z+2, r24	; 0x02
    13ca:	21 15       	cp	r18, r1
    13cc:	31 05       	cpc	r19, r1
    13ce:	29 f4       	brne	.+10     	; 0x13da <free+0x9c>
    13d0:	f0 93 82 03 	sts	0x0382, r31
    13d4:	e0 93 81 03 	sts	0x0381, r30
    13d8:	3e c0       	rjmp	.+124    	; 0x1456 <free+0x118>
    13da:	d9 01       	movw	r26, r18
    13dc:	13 96       	adiw	r26, 0x03	; 3
    13de:	fc 93       	st	X, r31
    13e0:	ee 93       	st	-X, r30
    13e2:	12 97       	sbiw	r26, 0x02	; 2
    13e4:	4d 91       	ld	r20, X+
    13e6:	5d 91       	ld	r21, X+
    13e8:	a4 0f       	add	r26, r20
    13ea:	b5 1f       	adc	r27, r21
    13ec:	ea 17       	cp	r30, r26
    13ee:	fb 07       	cpc	r31, r27
    13f0:	79 f4       	brne	.+30     	; 0x1410 <free+0xd2>
    13f2:	80 81       	ld	r24, Z
    13f4:	91 81       	ldd	r25, Z+1	; 0x01
    13f6:	84 0f       	add	r24, r20
    13f8:	95 1f       	adc	r25, r21
    13fa:	02 96       	adiw	r24, 0x02	; 2
    13fc:	d9 01       	movw	r26, r18
    13fe:	11 96       	adiw	r26, 0x01	; 1
    1400:	9c 93       	st	X, r25
    1402:	8e 93       	st	-X, r24
    1404:	82 81       	ldd	r24, Z+2	; 0x02
    1406:	93 81       	ldd	r25, Z+3	; 0x03
    1408:	13 96       	adiw	r26, 0x03	; 3
    140a:	9c 93       	st	X, r25
    140c:	8e 93       	st	-X, r24
    140e:	12 97       	sbiw	r26, 0x02	; 2
    1410:	e0 e0       	ldi	r30, 0x00	; 0
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	9b 81       	ldd	r25, Y+3	; 0x03
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	19 f0       	breq	.+6      	; 0x1422 <free+0xe4>
    141c:	fe 01       	movw	r30, r28
    141e:	ec 01       	movw	r28, r24
    1420:	f9 cf       	rjmp	.-14     	; 0x1414 <free+0xd6>
    1422:	ce 01       	movw	r24, r28
    1424:	02 96       	adiw	r24, 0x02	; 2
    1426:	28 81       	ld	r18, Y
    1428:	39 81       	ldd	r19, Y+1	; 0x01
    142a:	82 0f       	add	r24, r18
    142c:	93 1f       	adc	r25, r19
    142e:	20 91 7f 03 	lds	r18, 0x037F
    1432:	30 91 80 03 	lds	r19, 0x0380
    1436:	28 17       	cp	r18, r24
    1438:	39 07       	cpc	r19, r25
    143a:	69 f4       	brne	.+26     	; 0x1456 <free+0x118>
    143c:	30 97       	sbiw	r30, 0x00	; 0
    143e:	29 f4       	brne	.+10     	; 0x144a <free+0x10c>
    1440:	10 92 82 03 	sts	0x0382, r1
    1444:	10 92 81 03 	sts	0x0381, r1
    1448:	02 c0       	rjmp	.+4      	; 0x144e <free+0x110>
    144a:	13 82       	std	Z+3, r1	; 0x03
    144c:	12 82       	std	Z+2, r1	; 0x02
    144e:	d0 93 80 03 	sts	0x0380, r29
    1452:	c0 93 7f 03 	sts	0x037F, r28
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	08 95       	ret

0000145c <fdevopen>:
    145c:	0f 93       	push	r16
    145e:	1f 93       	push	r17
    1460:	cf 93       	push	r28
    1462:	df 93       	push	r29
    1464:	ec 01       	movw	r28, r24
    1466:	8b 01       	movw	r16, r22
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	31 f4       	brne	.+12     	; 0x1478 <fdevopen+0x1c>
    146c:	61 15       	cp	r22, r1
    146e:	71 05       	cpc	r23, r1
    1470:	19 f4       	brne	.+6      	; 0x1478 <fdevopen+0x1c>
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	37 c0       	rjmp	.+110    	; 0x14e6 <fdevopen+0x8a>
    1478:	6e e0       	ldi	r22, 0x0E	; 14
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	38 d2       	rcall	.+1136   	; 0x18f2 <calloc>
    1482:	fc 01       	movw	r30, r24
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	a9 f3       	breq	.-22     	; 0x1472 <fdevopen+0x16>
    1488:	80 e8       	ldi	r24, 0x80	; 128
    148a:	83 83       	std	Z+3, r24	; 0x03
    148c:	01 15       	cp	r16, r1
    148e:	11 05       	cpc	r17, r1
    1490:	71 f0       	breq	.+28     	; 0x14ae <fdevopen+0x52>
    1492:	13 87       	std	Z+11, r17	; 0x0b
    1494:	02 87       	std	Z+10, r16	; 0x0a
    1496:	81 e8       	ldi	r24, 0x81	; 129
    1498:	83 83       	std	Z+3, r24	; 0x03
    149a:	80 91 83 03 	lds	r24, 0x0383
    149e:	90 91 84 03 	lds	r25, 0x0384
    14a2:	89 2b       	or	r24, r25
    14a4:	21 f4       	brne	.+8      	; 0x14ae <fdevopen+0x52>
    14a6:	f0 93 84 03 	sts	0x0384, r31
    14aa:	e0 93 83 03 	sts	0x0383, r30
    14ae:	20 97       	sbiw	r28, 0x00	; 0
    14b0:	c9 f0       	breq	.+50     	; 0x14e4 <fdevopen+0x88>
    14b2:	d1 87       	std	Z+9, r29	; 0x09
    14b4:	c0 87       	std	Z+8, r28	; 0x08
    14b6:	83 81       	ldd	r24, Z+3	; 0x03
    14b8:	82 60       	ori	r24, 0x02	; 2
    14ba:	83 83       	std	Z+3, r24	; 0x03
    14bc:	80 91 85 03 	lds	r24, 0x0385
    14c0:	90 91 86 03 	lds	r25, 0x0386
    14c4:	89 2b       	or	r24, r25
    14c6:	71 f4       	brne	.+28     	; 0x14e4 <fdevopen+0x88>
    14c8:	f0 93 86 03 	sts	0x0386, r31
    14cc:	e0 93 85 03 	sts	0x0385, r30
    14d0:	80 91 87 03 	lds	r24, 0x0387
    14d4:	90 91 88 03 	lds	r25, 0x0388
    14d8:	89 2b       	or	r24, r25
    14da:	21 f4       	brne	.+8      	; 0x14e4 <fdevopen+0x88>
    14dc:	f0 93 88 03 	sts	0x0388, r31
    14e0:	e0 93 87 03 	sts	0x0387, r30
    14e4:	cf 01       	movw	r24, r30
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	08 95       	ret

000014f0 <printf>:
    14f0:	a0 e0       	ldi	r26, 0x00	; 0
    14f2:	b0 e0       	ldi	r27, 0x00	; 0
    14f4:	ed e7       	ldi	r30, 0x7D	; 125
    14f6:	fa e0       	ldi	r31, 0x0A	; 10
    14f8:	d3 c2       	rjmp	.+1446   	; 0x1aa0 <__prologue_saves__+0x20>
    14fa:	fe 01       	movw	r30, r28
    14fc:	35 96       	adiw	r30, 0x05	; 5
    14fe:	61 91       	ld	r22, Z+
    1500:	71 91       	ld	r23, Z+
    1502:	af 01       	movw	r20, r30
    1504:	80 91 85 03 	lds	r24, 0x0385
    1508:	90 91 86 03 	lds	r25, 0x0386
    150c:	2f d0       	rcall	.+94     	; 0x156c <vfprintf>
    150e:	e2 e0       	ldi	r30, 0x02	; 2
    1510:	e3 c2       	rjmp	.+1478   	; 0x1ad8 <__epilogue_restores__+0x20>

00001512 <puts>:
    1512:	0f 93       	push	r16
    1514:	1f 93       	push	r17
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	e0 91 85 03 	lds	r30, 0x0385
    151e:	f0 91 86 03 	lds	r31, 0x0386
    1522:	23 81       	ldd	r18, Z+3	; 0x03
    1524:	21 ff       	sbrs	r18, 1
    1526:	1b c0       	rjmp	.+54     	; 0x155e <puts+0x4c>
    1528:	ec 01       	movw	r28, r24
    152a:	00 e0       	ldi	r16, 0x00	; 0
    152c:	10 e0       	ldi	r17, 0x00	; 0
    152e:	89 91       	ld	r24, Y+
    1530:	60 91 85 03 	lds	r22, 0x0385
    1534:	70 91 86 03 	lds	r23, 0x0386
    1538:	db 01       	movw	r26, r22
    153a:	18 96       	adiw	r26, 0x08	; 8
    153c:	ed 91       	ld	r30, X+
    153e:	fc 91       	ld	r31, X
    1540:	19 97       	sbiw	r26, 0x09	; 9
    1542:	88 23       	and	r24, r24
    1544:	31 f0       	breq	.+12     	; 0x1552 <puts+0x40>
    1546:	09 95       	icall
    1548:	89 2b       	or	r24, r25
    154a:	89 f3       	breq	.-30     	; 0x152e <puts+0x1c>
    154c:	0f ef       	ldi	r16, 0xFF	; 255
    154e:	1f ef       	ldi	r17, 0xFF	; 255
    1550:	ee cf       	rjmp	.-36     	; 0x152e <puts+0x1c>
    1552:	8a e0       	ldi	r24, 0x0A	; 10
    1554:	09 95       	icall
    1556:	89 2b       	or	r24, r25
    1558:	11 f4       	brne	.+4      	; 0x155e <puts+0x4c>
    155a:	c8 01       	movw	r24, r16
    155c:	02 c0       	rjmp	.+4      	; 0x1562 <puts+0x50>
    155e:	8f ef       	ldi	r24, 0xFF	; 255
    1560:	9f ef       	ldi	r25, 0xFF	; 255
    1562:	df 91       	pop	r29
    1564:	cf 91       	pop	r28
    1566:	1f 91       	pop	r17
    1568:	0f 91       	pop	r16
    156a:	08 95       	ret

0000156c <vfprintf>:
    156c:	ac e0       	ldi	r26, 0x0C	; 12
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	eb eb       	ldi	r30, 0xBB	; 187
    1572:	fa e0       	ldi	r31, 0x0A	; 10
    1574:	85 c2       	rjmp	.+1290   	; 0x1a80 <__prologue_saves__>
    1576:	7c 01       	movw	r14, r24
    1578:	6b 01       	movw	r12, r22
    157a:	8a 01       	movw	r16, r20
    157c:	fc 01       	movw	r30, r24
    157e:	17 82       	std	Z+7, r1	; 0x07
    1580:	16 82       	std	Z+6, r1	; 0x06
    1582:	83 81       	ldd	r24, Z+3	; 0x03
    1584:	81 ff       	sbrs	r24, 1
    1586:	b0 c1       	rjmp	.+864    	; 0x18e8 <vfprintf+0x37c>
    1588:	ce 01       	movw	r24, r28
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	4c 01       	movw	r8, r24
    158e:	f7 01       	movw	r30, r14
    1590:	93 81       	ldd	r25, Z+3	; 0x03
    1592:	f6 01       	movw	r30, r12
    1594:	93 fd       	sbrc	r25, 3
    1596:	85 91       	lpm	r24, Z+
    1598:	93 ff       	sbrs	r25, 3
    159a:	81 91       	ld	r24, Z+
    159c:	6f 01       	movw	r12, r30
    159e:	88 23       	and	r24, r24
    15a0:	09 f4       	brne	.+2      	; 0x15a4 <vfprintf+0x38>
    15a2:	9e c1       	rjmp	.+828    	; 0x18e0 <vfprintf+0x374>
    15a4:	85 32       	cpi	r24, 0x25	; 37
    15a6:	39 f4       	brne	.+14     	; 0x15b6 <vfprintf+0x4a>
    15a8:	93 fd       	sbrc	r25, 3
    15aa:	85 91       	lpm	r24, Z+
    15ac:	93 ff       	sbrs	r25, 3
    15ae:	81 91       	ld	r24, Z+
    15b0:	6f 01       	movw	r12, r30
    15b2:	85 32       	cpi	r24, 0x25	; 37
    15b4:	21 f4       	brne	.+8      	; 0x15be <vfprintf+0x52>
    15b6:	b7 01       	movw	r22, r14
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	d2 d1       	rcall	.+932    	; 0x1960 <fputc>
    15bc:	e8 cf       	rjmp	.-48     	; 0x158e <vfprintf+0x22>
    15be:	51 2c       	mov	r5, r1
    15c0:	31 2c       	mov	r3, r1
    15c2:	20 e0       	ldi	r18, 0x00	; 0
    15c4:	20 32       	cpi	r18, 0x20	; 32
    15c6:	a0 f4       	brcc	.+40     	; 0x15f0 <vfprintf+0x84>
    15c8:	8b 32       	cpi	r24, 0x2B	; 43
    15ca:	69 f0       	breq	.+26     	; 0x15e6 <vfprintf+0x7a>
    15cc:	30 f4       	brcc	.+12     	; 0x15da <vfprintf+0x6e>
    15ce:	80 32       	cpi	r24, 0x20	; 32
    15d0:	59 f0       	breq	.+22     	; 0x15e8 <vfprintf+0x7c>
    15d2:	83 32       	cpi	r24, 0x23	; 35
    15d4:	69 f4       	brne	.+26     	; 0x15f0 <vfprintf+0x84>
    15d6:	20 61       	ori	r18, 0x10	; 16
    15d8:	2c c0       	rjmp	.+88     	; 0x1632 <vfprintf+0xc6>
    15da:	8d 32       	cpi	r24, 0x2D	; 45
    15dc:	39 f0       	breq	.+14     	; 0x15ec <vfprintf+0x80>
    15de:	80 33       	cpi	r24, 0x30	; 48
    15e0:	39 f4       	brne	.+14     	; 0x15f0 <vfprintf+0x84>
    15e2:	21 60       	ori	r18, 0x01	; 1
    15e4:	26 c0       	rjmp	.+76     	; 0x1632 <vfprintf+0xc6>
    15e6:	22 60       	ori	r18, 0x02	; 2
    15e8:	24 60       	ori	r18, 0x04	; 4
    15ea:	23 c0       	rjmp	.+70     	; 0x1632 <vfprintf+0xc6>
    15ec:	28 60       	ori	r18, 0x08	; 8
    15ee:	21 c0       	rjmp	.+66     	; 0x1632 <vfprintf+0xc6>
    15f0:	27 fd       	sbrc	r18, 7
    15f2:	27 c0       	rjmp	.+78     	; 0x1642 <vfprintf+0xd6>
    15f4:	30 ed       	ldi	r19, 0xD0	; 208
    15f6:	38 0f       	add	r19, r24
    15f8:	3a 30       	cpi	r19, 0x0A	; 10
    15fa:	78 f4       	brcc	.+30     	; 0x161a <vfprintf+0xae>
    15fc:	26 ff       	sbrs	r18, 6
    15fe:	06 c0       	rjmp	.+12     	; 0x160c <vfprintf+0xa0>
    1600:	fa e0       	ldi	r31, 0x0A	; 10
    1602:	5f 9e       	mul	r5, r31
    1604:	30 0d       	add	r19, r0
    1606:	11 24       	eor	r1, r1
    1608:	53 2e       	mov	r5, r19
    160a:	13 c0       	rjmp	.+38     	; 0x1632 <vfprintf+0xc6>
    160c:	8a e0       	ldi	r24, 0x0A	; 10
    160e:	38 9e       	mul	r3, r24
    1610:	30 0d       	add	r19, r0
    1612:	11 24       	eor	r1, r1
    1614:	33 2e       	mov	r3, r19
    1616:	20 62       	ori	r18, 0x20	; 32
    1618:	0c c0       	rjmp	.+24     	; 0x1632 <vfprintf+0xc6>
    161a:	8e 32       	cpi	r24, 0x2E	; 46
    161c:	21 f4       	brne	.+8      	; 0x1626 <vfprintf+0xba>
    161e:	26 fd       	sbrc	r18, 6
    1620:	5f c1       	rjmp	.+702    	; 0x18e0 <vfprintf+0x374>
    1622:	20 64       	ori	r18, 0x40	; 64
    1624:	06 c0       	rjmp	.+12     	; 0x1632 <vfprintf+0xc6>
    1626:	8c 36       	cpi	r24, 0x6C	; 108
    1628:	11 f4       	brne	.+4      	; 0x162e <vfprintf+0xc2>
    162a:	20 68       	ori	r18, 0x80	; 128
    162c:	02 c0       	rjmp	.+4      	; 0x1632 <vfprintf+0xc6>
    162e:	88 36       	cpi	r24, 0x68	; 104
    1630:	41 f4       	brne	.+16     	; 0x1642 <vfprintf+0xd6>
    1632:	f6 01       	movw	r30, r12
    1634:	93 fd       	sbrc	r25, 3
    1636:	85 91       	lpm	r24, Z+
    1638:	93 ff       	sbrs	r25, 3
    163a:	81 91       	ld	r24, Z+
    163c:	6f 01       	movw	r12, r30
    163e:	81 11       	cpse	r24, r1
    1640:	c1 cf       	rjmp	.-126    	; 0x15c4 <vfprintf+0x58>
    1642:	98 2f       	mov	r25, r24
    1644:	9f 7d       	andi	r25, 0xDF	; 223
    1646:	95 54       	subi	r25, 0x45	; 69
    1648:	93 30       	cpi	r25, 0x03	; 3
    164a:	28 f4       	brcc	.+10     	; 0x1656 <vfprintf+0xea>
    164c:	0c 5f       	subi	r16, 0xFC	; 252
    164e:	1f 4f       	sbci	r17, 0xFF	; 255
    1650:	ff e3       	ldi	r31, 0x3F	; 63
    1652:	f9 83       	std	Y+1, r31	; 0x01
    1654:	0d c0       	rjmp	.+26     	; 0x1670 <vfprintf+0x104>
    1656:	83 36       	cpi	r24, 0x63	; 99
    1658:	31 f0       	breq	.+12     	; 0x1666 <vfprintf+0xfa>
    165a:	83 37       	cpi	r24, 0x73	; 115
    165c:	71 f0       	breq	.+28     	; 0x167a <vfprintf+0x10e>
    165e:	83 35       	cpi	r24, 0x53	; 83
    1660:	09 f0       	breq	.+2      	; 0x1664 <vfprintf+0xf8>
    1662:	57 c0       	rjmp	.+174    	; 0x1712 <vfprintf+0x1a6>
    1664:	21 c0       	rjmp	.+66     	; 0x16a8 <vfprintf+0x13c>
    1666:	f8 01       	movw	r30, r16
    1668:	80 81       	ld	r24, Z
    166a:	89 83       	std	Y+1, r24	; 0x01
    166c:	0e 5f       	subi	r16, 0xFE	; 254
    166e:	1f 4f       	sbci	r17, 0xFF	; 255
    1670:	44 24       	eor	r4, r4
    1672:	43 94       	inc	r4
    1674:	51 2c       	mov	r5, r1
    1676:	54 01       	movw	r10, r8
    1678:	14 c0       	rjmp	.+40     	; 0x16a2 <vfprintf+0x136>
    167a:	38 01       	movw	r6, r16
    167c:	f2 e0       	ldi	r31, 0x02	; 2
    167e:	6f 0e       	add	r6, r31
    1680:	71 1c       	adc	r7, r1
    1682:	f8 01       	movw	r30, r16
    1684:	a0 80       	ld	r10, Z
    1686:	b1 80       	ldd	r11, Z+1	; 0x01
    1688:	26 ff       	sbrs	r18, 6
    168a:	03 c0       	rjmp	.+6      	; 0x1692 <vfprintf+0x126>
    168c:	65 2d       	mov	r22, r5
    168e:	70 e0       	ldi	r23, 0x00	; 0
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <vfprintf+0x12a>
    1692:	6f ef       	ldi	r22, 0xFF	; 255
    1694:	7f ef       	ldi	r23, 0xFF	; 255
    1696:	c5 01       	movw	r24, r10
    1698:	2c 87       	std	Y+12, r18	; 0x0c
    169a:	57 d1       	rcall	.+686    	; 0x194a <strnlen>
    169c:	2c 01       	movw	r4, r24
    169e:	83 01       	movw	r16, r6
    16a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    16a2:	2f 77       	andi	r18, 0x7F	; 127
    16a4:	22 2e       	mov	r2, r18
    16a6:	16 c0       	rjmp	.+44     	; 0x16d4 <vfprintf+0x168>
    16a8:	38 01       	movw	r6, r16
    16aa:	f2 e0       	ldi	r31, 0x02	; 2
    16ac:	6f 0e       	add	r6, r31
    16ae:	71 1c       	adc	r7, r1
    16b0:	f8 01       	movw	r30, r16
    16b2:	a0 80       	ld	r10, Z
    16b4:	b1 80       	ldd	r11, Z+1	; 0x01
    16b6:	26 ff       	sbrs	r18, 6
    16b8:	03 c0       	rjmp	.+6      	; 0x16c0 <vfprintf+0x154>
    16ba:	65 2d       	mov	r22, r5
    16bc:	70 e0       	ldi	r23, 0x00	; 0
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <vfprintf+0x158>
    16c0:	6f ef       	ldi	r22, 0xFF	; 255
    16c2:	7f ef       	ldi	r23, 0xFF	; 255
    16c4:	c5 01       	movw	r24, r10
    16c6:	2c 87       	std	Y+12, r18	; 0x0c
    16c8:	2e d1       	rcall	.+604    	; 0x1926 <strnlen_P>
    16ca:	2c 01       	movw	r4, r24
    16cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    16ce:	20 68       	ori	r18, 0x80	; 128
    16d0:	22 2e       	mov	r2, r18
    16d2:	83 01       	movw	r16, r6
    16d4:	23 fc       	sbrc	r2, 3
    16d6:	19 c0       	rjmp	.+50     	; 0x170a <vfprintf+0x19e>
    16d8:	83 2d       	mov	r24, r3
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	48 16       	cp	r4, r24
    16de:	59 06       	cpc	r5, r25
    16e0:	a0 f4       	brcc	.+40     	; 0x170a <vfprintf+0x19e>
    16e2:	b7 01       	movw	r22, r14
    16e4:	80 e2       	ldi	r24, 0x20	; 32
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	3b d1       	rcall	.+630    	; 0x1960 <fputc>
    16ea:	3a 94       	dec	r3
    16ec:	f5 cf       	rjmp	.-22     	; 0x16d8 <vfprintf+0x16c>
    16ee:	f5 01       	movw	r30, r10
    16f0:	27 fc       	sbrc	r2, 7
    16f2:	85 91       	lpm	r24, Z+
    16f4:	27 fe       	sbrs	r2, 7
    16f6:	81 91       	ld	r24, Z+
    16f8:	5f 01       	movw	r10, r30
    16fa:	b7 01       	movw	r22, r14
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	30 d1       	rcall	.+608    	; 0x1960 <fputc>
    1700:	31 10       	cpse	r3, r1
    1702:	3a 94       	dec	r3
    1704:	f1 e0       	ldi	r31, 0x01	; 1
    1706:	4f 1a       	sub	r4, r31
    1708:	51 08       	sbc	r5, r1
    170a:	41 14       	cp	r4, r1
    170c:	51 04       	cpc	r5, r1
    170e:	79 f7       	brne	.-34     	; 0x16ee <vfprintf+0x182>
    1710:	de c0       	rjmp	.+444    	; 0x18ce <vfprintf+0x362>
    1712:	84 36       	cpi	r24, 0x64	; 100
    1714:	11 f0       	breq	.+4      	; 0x171a <vfprintf+0x1ae>
    1716:	89 36       	cpi	r24, 0x69	; 105
    1718:	31 f5       	brne	.+76     	; 0x1766 <vfprintf+0x1fa>
    171a:	f8 01       	movw	r30, r16
    171c:	27 ff       	sbrs	r18, 7
    171e:	07 c0       	rjmp	.+14     	; 0x172e <vfprintf+0x1c2>
    1720:	60 81       	ld	r22, Z
    1722:	71 81       	ldd	r23, Z+1	; 0x01
    1724:	82 81       	ldd	r24, Z+2	; 0x02
    1726:	93 81       	ldd	r25, Z+3	; 0x03
    1728:	0c 5f       	subi	r16, 0xFC	; 252
    172a:	1f 4f       	sbci	r17, 0xFF	; 255
    172c:	08 c0       	rjmp	.+16     	; 0x173e <vfprintf+0x1d2>
    172e:	60 81       	ld	r22, Z
    1730:	71 81       	ldd	r23, Z+1	; 0x01
    1732:	88 27       	eor	r24, r24
    1734:	77 fd       	sbrc	r23, 7
    1736:	80 95       	com	r24
    1738:	98 2f       	mov	r25, r24
    173a:	0e 5f       	subi	r16, 0xFE	; 254
    173c:	1f 4f       	sbci	r17, 0xFF	; 255
    173e:	2f 76       	andi	r18, 0x6F	; 111
    1740:	b2 2e       	mov	r11, r18
    1742:	97 ff       	sbrs	r25, 7
    1744:	09 c0       	rjmp	.+18     	; 0x1758 <vfprintf+0x1ec>
    1746:	90 95       	com	r25
    1748:	80 95       	com	r24
    174a:	70 95       	com	r23
    174c:	61 95       	neg	r22
    174e:	7f 4f       	sbci	r23, 0xFF	; 255
    1750:	8f 4f       	sbci	r24, 0xFF	; 255
    1752:	9f 4f       	sbci	r25, 0xFF	; 255
    1754:	20 68       	ori	r18, 0x80	; 128
    1756:	b2 2e       	mov	r11, r18
    1758:	2a e0       	ldi	r18, 0x0A	; 10
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	a4 01       	movw	r20, r8
    175e:	32 d1       	rcall	.+612    	; 0x19c4 <__ultoa_invert>
    1760:	a8 2e       	mov	r10, r24
    1762:	a8 18       	sub	r10, r8
    1764:	43 c0       	rjmp	.+134    	; 0x17ec <vfprintf+0x280>
    1766:	85 37       	cpi	r24, 0x75	; 117
    1768:	29 f4       	brne	.+10     	; 0x1774 <vfprintf+0x208>
    176a:	2f 7e       	andi	r18, 0xEF	; 239
    176c:	b2 2e       	mov	r11, r18
    176e:	2a e0       	ldi	r18, 0x0A	; 10
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	25 c0       	rjmp	.+74     	; 0x17be <vfprintf+0x252>
    1774:	f2 2f       	mov	r31, r18
    1776:	f9 7f       	andi	r31, 0xF9	; 249
    1778:	bf 2e       	mov	r11, r31
    177a:	8f 36       	cpi	r24, 0x6F	; 111
    177c:	c1 f0       	breq	.+48     	; 0x17ae <vfprintf+0x242>
    177e:	18 f4       	brcc	.+6      	; 0x1786 <vfprintf+0x21a>
    1780:	88 35       	cpi	r24, 0x58	; 88
    1782:	79 f0       	breq	.+30     	; 0x17a2 <vfprintf+0x236>
    1784:	ad c0       	rjmp	.+346    	; 0x18e0 <vfprintf+0x374>
    1786:	80 37       	cpi	r24, 0x70	; 112
    1788:	19 f0       	breq	.+6      	; 0x1790 <vfprintf+0x224>
    178a:	88 37       	cpi	r24, 0x78	; 120
    178c:	21 f0       	breq	.+8      	; 0x1796 <vfprintf+0x22a>
    178e:	a8 c0       	rjmp	.+336    	; 0x18e0 <vfprintf+0x374>
    1790:	2f 2f       	mov	r18, r31
    1792:	20 61       	ori	r18, 0x10	; 16
    1794:	b2 2e       	mov	r11, r18
    1796:	b4 fe       	sbrs	r11, 4
    1798:	0d c0       	rjmp	.+26     	; 0x17b4 <vfprintf+0x248>
    179a:	8b 2d       	mov	r24, r11
    179c:	84 60       	ori	r24, 0x04	; 4
    179e:	b8 2e       	mov	r11, r24
    17a0:	09 c0       	rjmp	.+18     	; 0x17b4 <vfprintf+0x248>
    17a2:	24 ff       	sbrs	r18, 4
    17a4:	0a c0       	rjmp	.+20     	; 0x17ba <vfprintf+0x24e>
    17a6:	9f 2f       	mov	r25, r31
    17a8:	96 60       	ori	r25, 0x06	; 6
    17aa:	b9 2e       	mov	r11, r25
    17ac:	06 c0       	rjmp	.+12     	; 0x17ba <vfprintf+0x24e>
    17ae:	28 e0       	ldi	r18, 0x08	; 8
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	05 c0       	rjmp	.+10     	; 0x17be <vfprintf+0x252>
    17b4:	20 e1       	ldi	r18, 0x10	; 16
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <vfprintf+0x252>
    17ba:	20 e1       	ldi	r18, 0x10	; 16
    17bc:	32 e0       	ldi	r19, 0x02	; 2
    17be:	f8 01       	movw	r30, r16
    17c0:	b7 fe       	sbrs	r11, 7
    17c2:	07 c0       	rjmp	.+14     	; 0x17d2 <vfprintf+0x266>
    17c4:	60 81       	ld	r22, Z
    17c6:	71 81       	ldd	r23, Z+1	; 0x01
    17c8:	82 81       	ldd	r24, Z+2	; 0x02
    17ca:	93 81       	ldd	r25, Z+3	; 0x03
    17cc:	0c 5f       	subi	r16, 0xFC	; 252
    17ce:	1f 4f       	sbci	r17, 0xFF	; 255
    17d0:	06 c0       	rjmp	.+12     	; 0x17de <vfprintf+0x272>
    17d2:	60 81       	ld	r22, Z
    17d4:	71 81       	ldd	r23, Z+1	; 0x01
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	0e 5f       	subi	r16, 0xFE	; 254
    17dc:	1f 4f       	sbci	r17, 0xFF	; 255
    17de:	a4 01       	movw	r20, r8
    17e0:	f1 d0       	rcall	.+482    	; 0x19c4 <__ultoa_invert>
    17e2:	a8 2e       	mov	r10, r24
    17e4:	a8 18       	sub	r10, r8
    17e6:	fb 2d       	mov	r31, r11
    17e8:	ff 77       	andi	r31, 0x7F	; 127
    17ea:	bf 2e       	mov	r11, r31
    17ec:	b6 fe       	sbrs	r11, 6
    17ee:	0b c0       	rjmp	.+22     	; 0x1806 <vfprintf+0x29a>
    17f0:	2b 2d       	mov	r18, r11
    17f2:	2e 7f       	andi	r18, 0xFE	; 254
    17f4:	a5 14       	cp	r10, r5
    17f6:	50 f4       	brcc	.+20     	; 0x180c <vfprintf+0x2a0>
    17f8:	b4 fe       	sbrs	r11, 4
    17fa:	0a c0       	rjmp	.+20     	; 0x1810 <vfprintf+0x2a4>
    17fc:	b2 fc       	sbrc	r11, 2
    17fe:	08 c0       	rjmp	.+16     	; 0x1810 <vfprintf+0x2a4>
    1800:	2b 2d       	mov	r18, r11
    1802:	2e 7e       	andi	r18, 0xEE	; 238
    1804:	05 c0       	rjmp	.+10     	; 0x1810 <vfprintf+0x2a4>
    1806:	7a 2c       	mov	r7, r10
    1808:	2b 2d       	mov	r18, r11
    180a:	03 c0       	rjmp	.+6      	; 0x1812 <vfprintf+0x2a6>
    180c:	7a 2c       	mov	r7, r10
    180e:	01 c0       	rjmp	.+2      	; 0x1812 <vfprintf+0x2a6>
    1810:	75 2c       	mov	r7, r5
    1812:	24 ff       	sbrs	r18, 4
    1814:	0d c0       	rjmp	.+26     	; 0x1830 <vfprintf+0x2c4>
    1816:	fe 01       	movw	r30, r28
    1818:	ea 0d       	add	r30, r10
    181a:	f1 1d       	adc	r31, r1
    181c:	80 81       	ld	r24, Z
    181e:	80 33       	cpi	r24, 0x30	; 48
    1820:	11 f4       	brne	.+4      	; 0x1826 <vfprintf+0x2ba>
    1822:	29 7e       	andi	r18, 0xE9	; 233
    1824:	09 c0       	rjmp	.+18     	; 0x1838 <vfprintf+0x2cc>
    1826:	22 ff       	sbrs	r18, 2
    1828:	06 c0       	rjmp	.+12     	; 0x1836 <vfprintf+0x2ca>
    182a:	73 94       	inc	r7
    182c:	73 94       	inc	r7
    182e:	04 c0       	rjmp	.+8      	; 0x1838 <vfprintf+0x2cc>
    1830:	82 2f       	mov	r24, r18
    1832:	86 78       	andi	r24, 0x86	; 134
    1834:	09 f0       	breq	.+2      	; 0x1838 <vfprintf+0x2cc>
    1836:	73 94       	inc	r7
    1838:	23 fd       	sbrc	r18, 3
    183a:	12 c0       	rjmp	.+36     	; 0x1860 <vfprintf+0x2f4>
    183c:	20 ff       	sbrs	r18, 0
    183e:	06 c0       	rjmp	.+12     	; 0x184c <vfprintf+0x2e0>
    1840:	5a 2c       	mov	r5, r10
    1842:	73 14       	cp	r7, r3
    1844:	18 f4       	brcc	.+6      	; 0x184c <vfprintf+0x2e0>
    1846:	53 0c       	add	r5, r3
    1848:	57 18       	sub	r5, r7
    184a:	73 2c       	mov	r7, r3
    184c:	73 14       	cp	r7, r3
    184e:	60 f4       	brcc	.+24     	; 0x1868 <vfprintf+0x2fc>
    1850:	b7 01       	movw	r22, r14
    1852:	80 e2       	ldi	r24, 0x20	; 32
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	2c 87       	std	Y+12, r18	; 0x0c
    1858:	83 d0       	rcall	.+262    	; 0x1960 <fputc>
    185a:	73 94       	inc	r7
    185c:	2c 85       	ldd	r18, Y+12	; 0x0c
    185e:	f6 cf       	rjmp	.-20     	; 0x184c <vfprintf+0x2e0>
    1860:	73 14       	cp	r7, r3
    1862:	10 f4       	brcc	.+4      	; 0x1868 <vfprintf+0x2fc>
    1864:	37 18       	sub	r3, r7
    1866:	01 c0       	rjmp	.+2      	; 0x186a <vfprintf+0x2fe>
    1868:	31 2c       	mov	r3, r1
    186a:	24 ff       	sbrs	r18, 4
    186c:	11 c0       	rjmp	.+34     	; 0x1890 <vfprintf+0x324>
    186e:	b7 01       	movw	r22, r14
    1870:	80 e3       	ldi	r24, 0x30	; 48
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	2c 87       	std	Y+12, r18	; 0x0c
    1876:	74 d0       	rcall	.+232    	; 0x1960 <fputc>
    1878:	2c 85       	ldd	r18, Y+12	; 0x0c
    187a:	22 ff       	sbrs	r18, 2
    187c:	16 c0       	rjmp	.+44     	; 0x18aa <vfprintf+0x33e>
    187e:	21 ff       	sbrs	r18, 1
    1880:	03 c0       	rjmp	.+6      	; 0x1888 <vfprintf+0x31c>
    1882:	88 e5       	ldi	r24, 0x58	; 88
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	02 c0       	rjmp	.+4      	; 0x188c <vfprintf+0x320>
    1888:	88 e7       	ldi	r24, 0x78	; 120
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	b7 01       	movw	r22, r14
    188e:	0c c0       	rjmp	.+24     	; 0x18a8 <vfprintf+0x33c>
    1890:	82 2f       	mov	r24, r18
    1892:	86 78       	andi	r24, 0x86	; 134
    1894:	51 f0       	breq	.+20     	; 0x18aa <vfprintf+0x33e>
    1896:	21 fd       	sbrc	r18, 1
    1898:	02 c0       	rjmp	.+4      	; 0x189e <vfprintf+0x332>
    189a:	80 e2       	ldi	r24, 0x20	; 32
    189c:	01 c0       	rjmp	.+2      	; 0x18a0 <vfprintf+0x334>
    189e:	8b e2       	ldi	r24, 0x2B	; 43
    18a0:	27 fd       	sbrc	r18, 7
    18a2:	8d e2       	ldi	r24, 0x2D	; 45
    18a4:	b7 01       	movw	r22, r14
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	5b d0       	rcall	.+182    	; 0x1960 <fputc>
    18aa:	a5 14       	cp	r10, r5
    18ac:	30 f4       	brcc	.+12     	; 0x18ba <vfprintf+0x34e>
    18ae:	b7 01       	movw	r22, r14
    18b0:	80 e3       	ldi	r24, 0x30	; 48
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	55 d0       	rcall	.+170    	; 0x1960 <fputc>
    18b6:	5a 94       	dec	r5
    18b8:	f8 cf       	rjmp	.-16     	; 0x18aa <vfprintf+0x33e>
    18ba:	aa 94       	dec	r10
    18bc:	f4 01       	movw	r30, r8
    18be:	ea 0d       	add	r30, r10
    18c0:	f1 1d       	adc	r31, r1
    18c2:	80 81       	ld	r24, Z
    18c4:	b7 01       	movw	r22, r14
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	4b d0       	rcall	.+150    	; 0x1960 <fputc>
    18ca:	a1 10       	cpse	r10, r1
    18cc:	f6 cf       	rjmp	.-20     	; 0x18ba <vfprintf+0x34e>
    18ce:	33 20       	and	r3, r3
    18d0:	09 f4       	brne	.+2      	; 0x18d4 <vfprintf+0x368>
    18d2:	5d ce       	rjmp	.-838    	; 0x158e <vfprintf+0x22>
    18d4:	b7 01       	movw	r22, r14
    18d6:	80 e2       	ldi	r24, 0x20	; 32
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	42 d0       	rcall	.+132    	; 0x1960 <fputc>
    18dc:	3a 94       	dec	r3
    18de:	f7 cf       	rjmp	.-18     	; 0x18ce <vfprintf+0x362>
    18e0:	f7 01       	movw	r30, r14
    18e2:	86 81       	ldd	r24, Z+6	; 0x06
    18e4:	97 81       	ldd	r25, Z+7	; 0x07
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <vfprintf+0x380>
    18e8:	8f ef       	ldi	r24, 0xFF	; 255
    18ea:	9f ef       	ldi	r25, 0xFF	; 255
    18ec:	2c 96       	adiw	r28, 0x0c	; 12
    18ee:	e2 e1       	ldi	r30, 0x12	; 18
    18f0:	e3 c0       	rjmp	.+454    	; 0x1ab8 <__epilogue_restores__>

000018f2 <calloc>:
    18f2:	0f 93       	push	r16
    18f4:	1f 93       	push	r17
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	86 9f       	mul	r24, r22
    18fc:	80 01       	movw	r16, r0
    18fe:	87 9f       	mul	r24, r23
    1900:	10 0d       	add	r17, r0
    1902:	96 9f       	mul	r25, r22
    1904:	10 0d       	add	r17, r0
    1906:	11 24       	eor	r1, r1
    1908:	c8 01       	movw	r24, r16
    190a:	81 dc       	rcall	.-1790   	; 0x120e <malloc>
    190c:	ec 01       	movw	r28, r24
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	21 f0       	breq	.+8      	; 0x191a <calloc+0x28>
    1912:	a8 01       	movw	r20, r16
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	11 d0       	rcall	.+34     	; 0x193c <memset>
    191a:	ce 01       	movw	r24, r28
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	1f 91       	pop	r17
    1922:	0f 91       	pop	r16
    1924:	08 95       	ret

00001926 <strnlen_P>:
    1926:	fc 01       	movw	r30, r24
    1928:	05 90       	lpm	r0, Z+
    192a:	61 50       	subi	r22, 0x01	; 1
    192c:	70 40       	sbci	r23, 0x00	; 0
    192e:	01 10       	cpse	r0, r1
    1930:	d8 f7       	brcc	.-10     	; 0x1928 <strnlen_P+0x2>
    1932:	80 95       	com	r24
    1934:	90 95       	com	r25
    1936:	8e 0f       	add	r24, r30
    1938:	9f 1f       	adc	r25, r31
    193a:	08 95       	ret

0000193c <memset>:
    193c:	dc 01       	movw	r26, r24
    193e:	01 c0       	rjmp	.+2      	; 0x1942 <memset+0x6>
    1940:	6d 93       	st	X+, r22
    1942:	41 50       	subi	r20, 0x01	; 1
    1944:	50 40       	sbci	r21, 0x00	; 0
    1946:	e0 f7       	brcc	.-8      	; 0x1940 <memset+0x4>
    1948:	08 95       	ret

0000194a <strnlen>:
    194a:	fc 01       	movw	r30, r24
    194c:	61 50       	subi	r22, 0x01	; 1
    194e:	70 40       	sbci	r23, 0x00	; 0
    1950:	01 90       	ld	r0, Z+
    1952:	01 10       	cpse	r0, r1
    1954:	d8 f7       	brcc	.-10     	; 0x194c <strnlen+0x2>
    1956:	80 95       	com	r24
    1958:	90 95       	com	r25
    195a:	8e 0f       	add	r24, r30
    195c:	9f 1f       	adc	r25, r31
    195e:	08 95       	ret

00001960 <fputc>:
    1960:	0f 93       	push	r16
    1962:	1f 93       	push	r17
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	18 2f       	mov	r17, r24
    196a:	09 2f       	mov	r16, r25
    196c:	eb 01       	movw	r28, r22
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	81 fd       	sbrc	r24, 1
    1972:	03 c0       	rjmp	.+6      	; 0x197a <fputc+0x1a>
    1974:	8f ef       	ldi	r24, 0xFF	; 255
    1976:	9f ef       	ldi	r25, 0xFF	; 255
    1978:	20 c0       	rjmp	.+64     	; 0x19ba <fputc+0x5a>
    197a:	82 ff       	sbrs	r24, 2
    197c:	10 c0       	rjmp	.+32     	; 0x199e <fputc+0x3e>
    197e:	4e 81       	ldd	r20, Y+6	; 0x06
    1980:	5f 81       	ldd	r21, Y+7	; 0x07
    1982:	2c 81       	ldd	r18, Y+4	; 0x04
    1984:	3d 81       	ldd	r19, Y+5	; 0x05
    1986:	42 17       	cp	r20, r18
    1988:	53 07       	cpc	r21, r19
    198a:	7c f4       	brge	.+30     	; 0x19aa <fputc+0x4a>
    198c:	e8 81       	ld	r30, Y
    198e:	f9 81       	ldd	r31, Y+1	; 0x01
    1990:	9f 01       	movw	r18, r30
    1992:	2f 5f       	subi	r18, 0xFF	; 255
    1994:	3f 4f       	sbci	r19, 0xFF	; 255
    1996:	39 83       	std	Y+1, r19	; 0x01
    1998:	28 83       	st	Y, r18
    199a:	10 83       	st	Z, r17
    199c:	06 c0       	rjmp	.+12     	; 0x19aa <fputc+0x4a>
    199e:	e8 85       	ldd	r30, Y+8	; 0x08
    19a0:	f9 85       	ldd	r31, Y+9	; 0x09
    19a2:	81 2f       	mov	r24, r17
    19a4:	09 95       	icall
    19a6:	89 2b       	or	r24, r25
    19a8:	29 f7       	brne	.-54     	; 0x1974 <fputc+0x14>
    19aa:	2e 81       	ldd	r18, Y+6	; 0x06
    19ac:	3f 81       	ldd	r19, Y+7	; 0x07
    19ae:	2f 5f       	subi	r18, 0xFF	; 255
    19b0:	3f 4f       	sbci	r19, 0xFF	; 255
    19b2:	3f 83       	std	Y+7, r19	; 0x07
    19b4:	2e 83       	std	Y+6, r18	; 0x06
    19b6:	81 2f       	mov	r24, r17
    19b8:	90 2f       	mov	r25, r16
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	1f 91       	pop	r17
    19c0:	0f 91       	pop	r16
    19c2:	08 95       	ret

000019c4 <__ultoa_invert>:
    19c4:	fa 01       	movw	r30, r20
    19c6:	aa 27       	eor	r26, r26
    19c8:	28 30       	cpi	r18, 0x08	; 8
    19ca:	51 f1       	breq	.+84     	; 0x1a20 <__ultoa_invert+0x5c>
    19cc:	20 31       	cpi	r18, 0x10	; 16
    19ce:	81 f1       	breq	.+96     	; 0x1a30 <__ultoa_invert+0x6c>
    19d0:	e8 94       	clt
    19d2:	6f 93       	push	r22
    19d4:	6e 7f       	andi	r22, 0xFE	; 254
    19d6:	6e 5f       	subi	r22, 0xFE	; 254
    19d8:	7f 4f       	sbci	r23, 0xFF	; 255
    19da:	8f 4f       	sbci	r24, 0xFF	; 255
    19dc:	9f 4f       	sbci	r25, 0xFF	; 255
    19de:	af 4f       	sbci	r26, 0xFF	; 255
    19e0:	b1 e0       	ldi	r27, 0x01	; 1
    19e2:	3e d0       	rcall	.+124    	; 0x1a60 <__ultoa_invert+0x9c>
    19e4:	b4 e0       	ldi	r27, 0x04	; 4
    19e6:	3c d0       	rcall	.+120    	; 0x1a60 <__ultoa_invert+0x9c>
    19e8:	67 0f       	add	r22, r23
    19ea:	78 1f       	adc	r23, r24
    19ec:	89 1f       	adc	r24, r25
    19ee:	9a 1f       	adc	r25, r26
    19f0:	a1 1d       	adc	r26, r1
    19f2:	68 0f       	add	r22, r24
    19f4:	79 1f       	adc	r23, r25
    19f6:	8a 1f       	adc	r24, r26
    19f8:	91 1d       	adc	r25, r1
    19fa:	a1 1d       	adc	r26, r1
    19fc:	6a 0f       	add	r22, r26
    19fe:	71 1d       	adc	r23, r1
    1a00:	81 1d       	adc	r24, r1
    1a02:	91 1d       	adc	r25, r1
    1a04:	a1 1d       	adc	r26, r1
    1a06:	20 d0       	rcall	.+64     	; 0x1a48 <__ultoa_invert+0x84>
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <__ultoa_invert+0x48>
    1a0a:	68 94       	set
    1a0c:	3f 91       	pop	r19
    1a0e:	2a e0       	ldi	r18, 0x0A	; 10
    1a10:	26 9f       	mul	r18, r22
    1a12:	11 24       	eor	r1, r1
    1a14:	30 19       	sub	r19, r0
    1a16:	30 5d       	subi	r19, 0xD0	; 208
    1a18:	31 93       	st	Z+, r19
    1a1a:	de f6       	brtc	.-74     	; 0x19d2 <__ultoa_invert+0xe>
    1a1c:	cf 01       	movw	r24, r30
    1a1e:	08 95       	ret
    1a20:	46 2f       	mov	r20, r22
    1a22:	47 70       	andi	r20, 0x07	; 7
    1a24:	40 5d       	subi	r20, 0xD0	; 208
    1a26:	41 93       	st	Z+, r20
    1a28:	b3 e0       	ldi	r27, 0x03	; 3
    1a2a:	0f d0       	rcall	.+30     	; 0x1a4a <__ultoa_invert+0x86>
    1a2c:	c9 f7       	brne	.-14     	; 0x1a20 <__ultoa_invert+0x5c>
    1a2e:	f6 cf       	rjmp	.-20     	; 0x1a1c <__ultoa_invert+0x58>
    1a30:	46 2f       	mov	r20, r22
    1a32:	4f 70       	andi	r20, 0x0F	; 15
    1a34:	40 5d       	subi	r20, 0xD0	; 208
    1a36:	4a 33       	cpi	r20, 0x3A	; 58
    1a38:	18 f0       	brcs	.+6      	; 0x1a40 <__ultoa_invert+0x7c>
    1a3a:	49 5d       	subi	r20, 0xD9	; 217
    1a3c:	31 fd       	sbrc	r19, 1
    1a3e:	40 52       	subi	r20, 0x20	; 32
    1a40:	41 93       	st	Z+, r20
    1a42:	02 d0       	rcall	.+4      	; 0x1a48 <__ultoa_invert+0x84>
    1a44:	a9 f7       	brne	.-22     	; 0x1a30 <__ultoa_invert+0x6c>
    1a46:	ea cf       	rjmp	.-44     	; 0x1a1c <__ultoa_invert+0x58>
    1a48:	b4 e0       	ldi	r27, 0x04	; 4
    1a4a:	a6 95       	lsr	r26
    1a4c:	97 95       	ror	r25
    1a4e:	87 95       	ror	r24
    1a50:	77 95       	ror	r23
    1a52:	67 95       	ror	r22
    1a54:	ba 95       	dec	r27
    1a56:	c9 f7       	brne	.-14     	; 0x1a4a <__ultoa_invert+0x86>
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	61 05       	cpc	r22, r1
    1a5c:	71 05       	cpc	r23, r1
    1a5e:	08 95       	ret
    1a60:	9b 01       	movw	r18, r22
    1a62:	ac 01       	movw	r20, r24
    1a64:	0a 2e       	mov	r0, r26
    1a66:	06 94       	lsr	r0
    1a68:	57 95       	ror	r21
    1a6a:	47 95       	ror	r20
    1a6c:	37 95       	ror	r19
    1a6e:	27 95       	ror	r18
    1a70:	ba 95       	dec	r27
    1a72:	c9 f7       	brne	.-14     	; 0x1a66 <__ultoa_invert+0xa2>
    1a74:	62 0f       	add	r22, r18
    1a76:	73 1f       	adc	r23, r19
    1a78:	84 1f       	adc	r24, r20
    1a7a:	95 1f       	adc	r25, r21
    1a7c:	a0 1d       	adc	r26, r0
    1a7e:	08 95       	ret

00001a80 <__prologue_saves__>:
    1a80:	2f 92       	push	r2
    1a82:	3f 92       	push	r3
    1a84:	4f 92       	push	r4
    1a86:	5f 92       	push	r5
    1a88:	6f 92       	push	r6
    1a8a:	7f 92       	push	r7
    1a8c:	8f 92       	push	r8
    1a8e:	9f 92       	push	r9
    1a90:	af 92       	push	r10
    1a92:	bf 92       	push	r11
    1a94:	cf 92       	push	r12
    1a96:	df 92       	push	r13
    1a98:	ef 92       	push	r14
    1a9a:	ff 92       	push	r15
    1a9c:	0f 93       	push	r16
    1a9e:	1f 93       	push	r17
    1aa0:	cf 93       	push	r28
    1aa2:	df 93       	push	r29
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	ca 1b       	sub	r28, r26
    1aaa:	db 0b       	sbc	r29, r27
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	09 94       	ijmp

00001ab8 <__epilogue_restores__>:
    1ab8:	2a 88       	ldd	r2, Y+18	; 0x12
    1aba:	39 88       	ldd	r3, Y+17	; 0x11
    1abc:	48 88       	ldd	r4, Y+16	; 0x10
    1abe:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ac0:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ac2:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ac4:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ac6:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ac8:	aa 84       	ldd	r10, Y+10	; 0x0a
    1aca:	b9 84       	ldd	r11, Y+9	; 0x09
    1acc:	c8 84       	ldd	r12, Y+8	; 0x08
    1ace:	df 80       	ldd	r13, Y+7	; 0x07
    1ad0:	ee 80       	ldd	r14, Y+6	; 0x06
    1ad2:	fd 80       	ldd	r15, Y+5	; 0x05
    1ad4:	0c 81       	ldd	r16, Y+4	; 0x04
    1ad6:	1b 81       	ldd	r17, Y+3	; 0x03
    1ad8:	aa 81       	ldd	r26, Y+2	; 0x02
    1ada:	b9 81       	ldd	r27, Y+1	; 0x01
    1adc:	ce 0f       	add	r28, r30
    1ade:	d1 1d       	adc	r29, r1
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	ed 01       	movw	r28, r26
    1aec:	08 95       	ret

00001aee <_exit>:
    1aee:	f8 94       	cli

00001af0 <__stop_program>:
    1af0:	ff cf       	rjmp	.-2      	; 0x1af0 <__stop_program>
