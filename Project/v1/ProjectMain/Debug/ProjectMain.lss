
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d8  00800100  00003060  000030f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003060  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  008002d8  008002d8  000032cc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000032cc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000380  00000000  00000000  00003328  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004c1e  00000000  00000000  000036a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014ab  00000000  00000000  000082c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b7e  00000000  00000000  00009771  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a04  00000000  00000000  0000b2f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001101  00000000  00000000  0000bcf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000263a  00000000  00000000  0000cdf5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000438  00000000  00000000  0000f42f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c1       	rjmp	.+900    	; 0x386 <__ctors_end>
       2:	00 00       	nop
       4:	41 c2       	rjmp	.+1154   	; 0x488 <__vector_1>
       6:	00 00       	nop
       8:	4e c2       	rjmp	.+1180   	; 0x4a6 <__vector_2>
       a:	00 00       	nop
       c:	5b c2       	rjmp	.+1206   	; 0x4c4 <__vector_3>
       e:	00 00       	nop
      10:	d6 c1       	rjmp	.+940    	; 0x3be <__bad_interrupt>
      12:	00 00       	nop
      14:	d4 c1       	rjmp	.+936    	; 0x3be <__bad_interrupt>
      16:	00 00       	nop
      18:	d2 c1       	rjmp	.+932    	; 0x3be <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d0 c1       	rjmp	.+928    	; 0x3be <__bad_interrupt>
      1e:	00 00       	nop
      20:	ce c1       	rjmp	.+924    	; 0x3be <__bad_interrupt>
      22:	00 00       	nop
      24:	cc c1       	rjmp	.+920    	; 0x3be <__bad_interrupt>
      26:	00 00       	nop
      28:	ca c1       	rjmp	.+916    	; 0x3be <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c8 c1       	rjmp	.+912    	; 0x3be <__bad_interrupt>
      2e:	00 00       	nop
      30:	c6 c1       	rjmp	.+908    	; 0x3be <__bad_interrupt>
      32:	00 00       	nop
      34:	c4 c1       	rjmp	.+904    	; 0x3be <__bad_interrupt>
      36:	00 00       	nop
      38:	c2 c1       	rjmp	.+900    	; 0x3be <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c0 c1       	rjmp	.+896    	; 0x3be <__bad_interrupt>
      3e:	00 00       	nop
      40:	50 c2       	rjmp	.+1184   	; 0x4e2 <__vector_16>
      42:	00 00       	nop
      44:	bc c1       	rjmp	.+888    	; 0x3be <__bad_interrupt>
      46:	00 00       	nop
      48:	ba c1       	rjmp	.+884    	; 0x3be <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b9 c1       	rjmp	.+882    	; 0x3c0 <__vector_19>
      4e:	00 00       	nop
      50:	b6 c1       	rjmp	.+876    	; 0x3be <__bad_interrupt>
      52:	00 00       	nop
      54:	b4 c1       	rjmp	.+872    	; 0x3be <__bad_interrupt>
      56:	00 00       	nop
      58:	b2 c1       	rjmp	.+868    	; 0x3be <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b0 c1       	rjmp	.+864    	; 0x3be <__bad_interrupt>
      5e:	00 00       	nop
      60:	ae c1       	rjmp	.+860    	; 0x3be <__bad_interrupt>
      62:	00 00       	nop
      64:	ac c1       	rjmp	.+856    	; 0x3be <__bad_interrupt>
      66:	00 00       	nop
      68:	aa c1       	rjmp	.+852    	; 0x3be <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a8 c1       	rjmp	.+848    	; 0x3be <__bad_interrupt>
      6e:	00 00       	nop
      70:	05 a8       	ldd	r0, Z+53	; 0x35
      72:	4c cd       	rjmp	.-1384   	; 0xfffffb0c <__eeprom_end+0xff7efb0c>
      74:	b2 d4       	rcall	.+2404   	; 0x9da <Game_init+0xe>
      76:	4e b9       	out	0x0e, r20	; 14
      78:	38 36       	cpi	r19, 0x68	; 104
      7a:	a9 02       	muls	r26, r25
      7c:	0c 50       	subi	r16, 0x0C	; 12
      7e:	b9 91       	ld	r27, Y+
      80:	86 88       	ldd	r8, Z+22	; 0x16
      82:	08 3c       	cpi	r16, 0xC8	; 200
      84:	a6 aa       	std	Z+54, r10	; 0x36
      86:	aa 2a       	or	r10, r26
      88:	be 00       	.word	0x00be	; ????
      8a:	00 00       	nop
      8c:	80 3f       	cpi	r24, 0xF0	; 240

0000008e <__trampolines_end>:
	...
      96:	00 06       	cpc	r0, r16
      98:	5f 5f       	subi	r21, 0xFF	; 255
      9a:	06 00       	.word	0x0006	; ????
      9c:	00 00       	nop
      9e:	00 07       	cpc	r16, r16
      a0:	07 00       	.word	0x0007	; ????
      a2:	07 07       	cpc	r16, r23
      a4:	00 00       	nop
      a6:	14 7f       	andi	r17, 0xF4	; 244
      a8:	7f 14       	cp	r7, r15
      aa:	7f 7f       	andi	r23, 0xFF	; 255
      ac:	14 00       	.word	0x0014	; ????
      ae:	24 2e       	mov	r2, r20
      b0:	6b 6b       	ori	r22, 0xBB	; 187
      b2:	3a 12       	cpse	r3, r26
      b4:	00 00       	nop
      b6:	46 66       	ori	r20, 0x66	; 102
      b8:	30 18       	sub	r3, r0
      ba:	0c 66       	ori	r16, 0x6C	; 108
      bc:	62 00       	.word	0x0062	; ????
      be:	30 7a       	andi	r19, 0xA0	; 160
      c0:	4f 5d       	subi	r20, 0xDF	; 223
      c2:	37 7a       	andi	r19, 0xA7	; 167
      c4:	48 00       	.word	0x0048	; ????
      c6:	04 07       	cpc	r16, r20
      c8:	03 00       	.word	0x0003	; ????
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	00 1c       	adc	r0, r0
      d0:	3e 63       	ori	r19, 0x3E	; 62
      d2:	41 00       	.word	0x0041	; ????
      d4:	00 00       	nop
      d6:	00 41       	sbci	r16, 0x10	; 16
      d8:	63 3e       	cpi	r22, 0xE3	; 227
      da:	1c 00       	.word	0x001c	; ????
      dc:	00 00       	nop
      de:	08 2a       	or	r0, r24
      e0:	3e 1c       	adc	r3, r14
      e2:	1c 3e       	cpi	r17, 0xEC	; 236
      e4:	2a 08       	sbc	r2, r10
      e6:	08 08       	sbc	r0, r8
      e8:	3e 3e       	cpi	r19, 0xEE	; 238
      ea:	08 08       	sbc	r0, r8
      ec:	00 00       	nop
      ee:	00 a0       	ldd	r0, Z+32	; 0x20
      f0:	e0 60       	ori	r30, 0x00	; 0
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	08 08       	sbc	r0, r8
      f8:	08 08       	sbc	r0, r8
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 00       	nop
     100:	60 60       	ori	r22, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	60 30       	cpi	r22, 0x00	; 0
     108:	18 0c       	add	r1, r8
     10a:	06 03       	mulsu	r16, r22
     10c:	01 00       	.word	0x0001	; ????
     10e:	3e 7f       	andi	r19, 0xFE	; 254
     110:	59 4d       	sbci	r21, 0xD9	; 217
     112:	7f 3e       	cpi	r23, 0xEF	; 239
     114:	00 00       	nop
     116:	42 42       	sbci	r20, 0x22	; 34
     118:	7f 7f       	andi	r23, 0xFF	; 255
     11a:	40 40       	sbci	r20, 0x00	; 0
     11c:	00 00       	nop
     11e:	62 73       	andi	r22, 0x32	; 50
     120:	59 49       	sbci	r21, 0x99	; 153
     122:	6f 66       	ori	r22, 0x6F	; 111
     124:	00 00       	nop
     126:	22 63       	ori	r18, 0x32	; 50
     128:	49 49       	sbci	r20, 0x99	; 153
     12a:	7f 36       	cpi	r23, 0x6F	; 111
     12c:	00 00       	nop
     12e:	18 1c       	adc	r1, r8
     130:	16 13       	cpse	r17, r22
     132:	7f 7f       	andi	r23, 0xFF	; 255
     134:	10 00       	.word	0x0010	; ????
     136:	27 67       	ori	r18, 0x77	; 119
     138:	45 45       	sbci	r20, 0x55	; 85
     13a:	7d 39       	cpi	r23, 0x9D	; 157
     13c:	00 00       	nop
     13e:	3c 7e       	andi	r19, 0xEC	; 236
     140:	4b 49       	sbci	r20, 0x9B	; 155
     142:	79 30       	cpi	r23, 0x09	; 9
     144:	00 00       	nop
     146:	03 63       	ori	r16, 0x33	; 51
     148:	71 19       	sub	r23, r1
     14a:	0f 07       	cpc	r16, r31
     14c:	00 00       	nop
     14e:	36 7f       	andi	r19, 0xF6	; 246
     150:	49 49       	sbci	r20, 0x99	; 153
     152:	7f 36       	cpi	r23, 0x6F	; 111
     154:	00 00       	nop
     156:	06 4f       	sbci	r16, 0xF6	; 246
     158:	49 69       	ori	r20, 0x99	; 153
     15a:	3f 1e       	adc	r3, r31
     15c:	00 00       	nop
     15e:	00 00       	nop
     160:	6c 6c       	ori	r22, 0xCC	; 204
     162:	00 00       	nop
     164:	00 00       	nop
     166:	00 a0       	ldd	r0, Z+32	; 0x20
     168:	ec 6c       	ori	r30, 0xCC	; 204
     16a:	00 00       	nop
     16c:	00 00       	nop
     16e:	08 1c       	adc	r0, r8
     170:	36 63       	ori	r19, 0x36	; 54
     172:	41 00       	.word	0x0041	; ????
     174:	00 00       	nop
     176:	14 14       	cp	r1, r4
     178:	14 14       	cp	r1, r4
     17a:	14 14       	cp	r1, r4
     17c:	00 00       	nop
     17e:	00 41       	sbci	r16, 0x10	; 16
     180:	63 36       	cpi	r22, 0x63	; 99
     182:	1c 08       	sbc	r1, r12
     184:	00 00       	nop
     186:	02 03       	mulsu	r16, r18
     188:	51 59       	subi	r21, 0x91	; 145
     18a:	0f 06       	cpc	r0, r31
     18c:	00 00       	nop
     18e:	3e 7f       	andi	r19, 0xFE	; 254
     190:	41 5d       	subi	r20, 0xD1	; 209
     192:	5d 1f       	adc	r21, r29
     194:	1e 00       	.word	0x001e	; ????
     196:	7c 7e       	andi	r23, 0xEC	; 236
     198:	13 13       	cpse	r17, r19
     19a:	7e 7c       	andi	r23, 0xCE	; 206
     19c:	00 00       	nop
     19e:	41 7f       	andi	r20, 0xF1	; 241
     1a0:	7f 49       	sbci	r23, 0x9F	; 159
     1a2:	49 7f       	andi	r20, 0xF9	; 249
     1a4:	36 00       	.word	0x0036	; ????
     1a6:	1c 3e       	cpi	r17, 0xEC	; 236
     1a8:	63 41       	sbci	r22, 0x13	; 19
     1aa:	41 63       	ori	r20, 0x31	; 49
     1ac:	22 00       	.word	0x0022	; ????
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 41       	sbci	r23, 0x1F	; 31
     1b2:	63 7f       	andi	r22, 0xF3	; 243
     1b4:	1c 00       	.word	0x001c	; ????
     1b6:	41 7f       	andi	r20, 0xF1	; 241
     1b8:	7f 49       	sbci	r23, 0x9F	; 159
     1ba:	5d 41       	sbci	r21, 0x1D	; 29
     1bc:	63 00       	.word	0x0063	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 49       	sbci	r23, 0x9F	; 159
     1c2:	1d 01       	movw	r2, r26
     1c4:	03 00       	.word	0x0003	; ????
     1c6:	1c 3e       	cpi	r17, 0xEC	; 236
     1c8:	63 41       	sbci	r22, 0x13	; 19
     1ca:	51 73       	andi	r21, 0x31	; 49
     1cc:	72 00       	.word	0x0072	; ????
     1ce:	7f 7f       	andi	r23, 0xFF	; 255
     1d0:	08 08       	sbc	r0, r8
     1d2:	7f 7f       	andi	r23, 0xFF	; 255
     1d4:	00 00       	nop
     1d6:	00 41       	sbci	r16, 0x10	; 16
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	41 00       	.word	0x0041	; ????
     1dc:	00 00       	nop
     1de:	30 70       	andi	r19, 0x00	; 0
     1e0:	40 41       	sbci	r20, 0x10	; 16
     1e2:	7f 3f       	cpi	r23, 0xFF	; 255
     1e4:	01 00       	.word	0x0001	; ????
     1e6:	41 7f       	andi	r20, 0xF1	; 241
     1e8:	7f 08       	sbc	r7, r15
     1ea:	1c 77       	andi	r17, 0x7C	; 124
     1ec:	63 00       	.word	0x0063	; ????
     1ee:	41 7f       	andi	r20, 0xF1	; 241
     1f0:	7f 41       	sbci	r23, 0x1F	; 31
     1f2:	40 60       	ori	r20, 0x00	; 0
     1f4:	70 00       	.word	0x0070	; ????
     1f6:	7f 7f       	andi	r23, 0xFF	; 255
     1f8:	06 0c       	add	r0, r6
     1fa:	06 7f       	andi	r16, 0xF6	; 246
     1fc:	7f 00       	.word	0x007f	; ????
     1fe:	7f 7f       	andi	r23, 0xFF	; 255
     200:	06 0c       	add	r0, r6
     202:	18 7f       	andi	r17, 0xF8	; 248
     204:	7f 00       	.word	0x007f	; ????
     206:	1c 3e       	cpi	r17, 0xEC	; 236
     208:	63 41       	sbci	r22, 0x13	; 19
     20a:	63 3e       	cpi	r22, 0xE3	; 227
     20c:	1c 00       	.word	0x001c	; ????
     20e:	41 7f       	andi	r20, 0xF1	; 241
     210:	7f 49       	sbci	r23, 0x9F	; 159
     212:	09 0f       	add	r16, r25
     214:	06 00       	.word	0x0006	; ????
     216:	1e 3f       	cpi	r17, 0xFE	; 254
     218:	21 71       	andi	r18, 0x11	; 17
     21a:	7f 5e       	subi	r23, 0xEF	; 239
     21c:	00 00       	nop
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 19       	sub	r23, r15
     222:	39 6f       	ori	r19, 0xF9	; 249
     224:	46 00       	.word	0x0046	; ????
     226:	26 67       	ori	r18, 0x76	; 118
     228:	4d 59       	subi	r20, 0x9D	; 157
     22a:	7b 32       	cpi	r23, 0x2B	; 43
     22c:	00 00       	nop
     22e:	03 41       	sbci	r16, 0x13	; 19
     230:	7f 7f       	andi	r23, 0xFF	; 255
     232:	41 03       	mulsu	r20, r17
     234:	00 00       	nop
     236:	7f 7f       	andi	r23, 0xFF	; 255
     238:	40 40       	sbci	r20, 0x00	; 0
     23a:	7f 7f       	andi	r23, 0xFF	; 255
     23c:	00 00       	nop
     23e:	1f 3f       	cpi	r17, 0xFF	; 255
     240:	60 60       	ori	r22, 0x00	; 0
     242:	3f 1f       	adc	r19, r31
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	30 18       	sub	r3, r0
     24a:	30 7f       	andi	r19, 0xF0	; 240
     24c:	7f 00       	.word	0x007f	; ????
     24e:	63 77       	andi	r22, 0x73	; 115
     250:	1c 08       	sbc	r1, r12
     252:	1c 77       	andi	r17, 0x7C	; 124
     254:	63 00       	.word	0x0063	; ????
     256:	07 4f       	sbci	r16, 0xF7	; 247
     258:	78 78       	andi	r23, 0x88	; 136
     25a:	4f 07       	cpc	r20, r31
     25c:	00 00       	nop
     25e:	67 73       	andi	r22, 0x37	; 55
     260:	59 4d       	sbci	r21, 0xD9	; 217
     262:	47 63       	ori	r20, 0x37	; 55
     264:	71 00       	.word	0x0071	; ????
     266:	00 7f       	andi	r16, 0xF0	; 240
     268:	7f 41       	sbci	r23, 0x1F	; 31
     26a:	41 00       	.word	0x0041	; ????
     26c:	00 00       	nop
     26e:	01 03       	mulsu	r16, r17
     270:	06 0c       	add	r0, r6
     272:	18 30       	cpi	r17, 0x08	; 8
     274:	60 00       	.word	0x0060	; ????
     276:	00 41       	sbci	r16, 0x10	; 16
     278:	41 7f       	andi	r20, 0xF1	; 241
     27a:	7f 00       	.word	0x007f	; ????
     27c:	00 00       	nop
     27e:	08 0c       	add	r0, r8
     280:	06 03       	mulsu	r16, r22
     282:	06 0c       	add	r0, r6
     284:	08 00       	.word	0x0008	; ????
     286:	80 80       	ld	r8, Z
     288:	80 80       	ld	r8, Z
     28a:	80 80       	ld	r8, Z
     28c:	80 80       	ld	r8, Z
     28e:	00 00       	nop
     290:	03 07       	cpc	r16, r19
     292:	04 00       	.word	0x0004	; ????
     294:	00 00       	nop
     296:	20 74       	andi	r18, 0x40	; 64
     298:	54 54       	subi	r21, 0x44	; 68
     29a:	3c 78       	andi	r19, 0x8C	; 140
     29c:	40 00       	.word	0x0040	; ????
     29e:	41 3f       	cpi	r20, 0xF1	; 241
     2a0:	7f 44       	sbci	r23, 0x4F	; 79
     2a2:	44 7c       	andi	r20, 0xC4	; 196
     2a4:	38 00       	.word	0x0038	; ????
     2a6:	38 7c       	andi	r19, 0xC8	; 200
     2a8:	44 44       	sbci	r20, 0x44	; 68
     2aa:	6c 28       	or	r6, r12
     2ac:	00 00       	nop
     2ae:	30 78       	andi	r19, 0x80	; 128
     2b0:	48 49       	sbci	r20, 0x98	; 152
     2b2:	3f 7f       	andi	r19, 0xFF	; 255
     2b4:	40 00       	.word	0x0040	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	54 54       	subi	r21, 0x44	; 68
     2ba:	5c 18       	sub	r5, r12
     2bc:	00 00       	nop
     2be:	48 7e       	andi	r20, 0xE8	; 232
     2c0:	7f 49       	sbci	r23, 0x9F	; 159
     2c2:	03 02       	muls	r16, r19
     2c4:	00 00       	nop
     2c6:	98 bc       	out	0x28, r9	; 40
     2c8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ca:	f8 7c       	andi	r31, 0xC8	; 200
     2cc:	04 00       	.word	0x0004	; ????
     2ce:	41 7f       	andi	r20, 0xF1	; 241
     2d0:	7f 08       	sbc	r7, r15
     2d2:	04 7c       	andi	r16, 0xC4	; 196
     2d4:	78 00       	.word	0x0078	; ????
     2d6:	00 44       	sbci	r16, 0x40	; 64
     2d8:	7d 7d       	andi	r23, 0xDD	; 221
     2da:	40 00       	.word	0x0040	; ????
     2dc:	00 00       	nop
     2de:	40 c4       	rjmp	.+2176   	; 0xb60 <Game_play+0x3a>
     2e0:	84 fd       	sbrc	r24, 4
     2e2:	7d 00       	.word	0x007d	; ????
     2e4:	00 00       	nop
     2e6:	41 7f       	andi	r20, 0xF1	; 241
     2e8:	7f 10       	cpse	r7, r15
     2ea:	38 6c       	ori	r19, 0xC8	; 200
     2ec:	44 00       	.word	0x0044	; ????
     2ee:	00 41       	sbci	r16, 0x10	; 16
     2f0:	7f 7f       	andi	r23, 0xFF	; 255
     2f2:	40 00       	.word	0x0040	; ????
     2f4:	00 00       	nop
     2f6:	7c 7c       	andi	r23, 0xCC	; 204
     2f8:	0c 18       	sub	r0, r12
     2fa:	0c 7c       	andi	r16, 0xCC	; 204
     2fc:	78 00       	.word	0x0078	; ????
     2fe:	7c 7c       	andi	r23, 0xCC	; 204
     300:	04 04       	cpc	r0, r4
     302:	7c 78       	andi	r23, 0x8C	; 140
     304:	00 00       	nop
     306:	38 7c       	andi	r19, 0xC8	; 200
     308:	44 44       	sbci	r20, 0x44	; 68
     30a:	7c 38       	cpi	r23, 0x8C	; 140
     30c:	00 00       	nop
     30e:	84 fc       	sbrc	r8, 4
     310:	f8 a4       	ldd	r15, Y+40	; 0x28
     312:	24 3c       	cpi	r18, 0xC4	; 196
     314:	18 00       	.word	0x0018	; ????
     316:	18 3c       	cpi	r17, 0xC8	; 200
     318:	24 a4       	ldd	r2, Z+44	; 0x2c
     31a:	f8 fc       	.word	0xfcf8	; ????
     31c:	84 00       	.word	0x0084	; ????
     31e:	44 7c       	andi	r20, 0xC4	; 196
     320:	78 44       	sbci	r23, 0x48	; 72
     322:	1c 18       	sub	r1, r12
     324:	00 00       	nop
     326:	48 5c       	subi	r20, 0xC8	; 200
     328:	54 54       	subi	r21, 0x44	; 68
     32a:	74 24       	eor	r7, r4
     32c:	00 00       	nop
     32e:	00 04       	cpc	r0, r0
     330:	3e 7f       	andi	r19, 0xFE	; 254
     332:	44 24       	eor	r4, r4
     334:	00 00       	nop
     336:	3c 7c       	andi	r19, 0xCC	; 204
     338:	40 40       	sbci	r20, 0x00	; 0
     33a:	3c 7c       	andi	r19, 0xCC	; 204
     33c:	40 00       	.word	0x0040	; ????
     33e:	1c 3c       	cpi	r17, 0xCC	; 204
     340:	60 60       	ori	r22, 0x00	; 0
     342:	3c 1c       	adc	r3, r12
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	60 30       	cpi	r22, 0x00	; 0
     34a:	60 7c       	andi	r22, 0xC0	; 192
     34c:	3c 00       	.word	0x003c	; ????
     34e:	44 6c       	ori	r20, 0xC4	; 196
     350:	38 10       	cpse	r3, r8
     352:	38 6c       	ori	r19, 0xC8	; 200
     354:	44 00       	.word	0x0044	; ????
     356:	9c bc       	out	0x2c, r9	; 44
     358:	a0 a0       	ldd	r10, Z+32	; 0x20
     35a:	fc 7c       	andi	r31, 0xCC	; 204
     35c:	00 00       	nop
     35e:	4c 64       	ori	r20, 0x4C	; 76
     360:	74 5c       	subi	r23, 0xC4	; 196
     362:	4c 64       	ori	r20, 0x4C	; 76
     364:	00 00       	nop
     366:	08 08       	sbc	r0, r8
     368:	3e 77       	andi	r19, 0x7E	; 126
     36a:	41 41       	sbci	r20, 0x11	; 17
     36c:	00 00       	nop
     36e:	00 00       	nop
     370:	00 77       	andi	r16, 0x70	; 112
     372:	77 00       	.word	0x0077	; ????
     374:	00 00       	nop
     376:	41 41       	sbci	r20, 0x11	; 17
     378:	77 3e       	cpi	r23, 0xE7	; 231
     37a:	08 08       	sbc	r0, r8
     37c:	00 00       	nop
     37e:	02 03       	mulsu	r16, r18
     380:	01 03       	mulsu	r16, r17
     382:	02 03       	mulsu	r16, r18
     384:	01 00       	.word	0x0001	; ????

00000386 <__ctors_end>:
     386:	11 24       	eor	r1, r1
     388:	1f be       	out	0x3f, r1	; 63
     38a:	cf ef       	ldi	r28, 0xFF	; 255
     38c:	d4 e0       	ldi	r29, 0x04	; 4
     38e:	de bf       	out	0x3e, r29	; 62
     390:	cd bf       	out	0x3d, r28	; 61

00000392 <__do_copy_data>:
     392:	12 e0       	ldi	r17, 0x02	; 2
     394:	a0 e0       	ldi	r26, 0x00	; 0
     396:	b1 e0       	ldi	r27, 0x01	; 1
     398:	e0 e6       	ldi	r30, 0x60	; 96
     39a:	f0 e3       	ldi	r31, 0x30	; 48
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <__do_copy_data+0x10>
     39e:	05 90       	lpm	r0, Z+
     3a0:	0d 92       	st	X+, r0
     3a2:	a8 3d       	cpi	r26, 0xD8	; 216
     3a4:	b1 07       	cpc	r27, r17
     3a6:	d9 f7       	brne	.-10     	; 0x39e <__do_copy_data+0xc>

000003a8 <__do_clear_bss>:
     3a8:	23 e0       	ldi	r18, 0x03	; 3
     3aa:	a8 ed       	ldi	r26, 0xD8	; 216
     3ac:	b2 e0       	ldi	r27, 0x02	; 2
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <.do_clear_bss_start>

000003b0 <.do_clear_bss_loop>:
     3b0:	1d 92       	st	X+, r1

000003b2 <.do_clear_bss_start>:
     3b2:	a3 33       	cpi	r26, 0x33	; 51
     3b4:	b2 07       	cpc	r27, r18
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <.do_clear_bss_loop>
     3b8:	0a d1       	rcall	.+532    	; 0x5ce <main>
     3ba:	0c 94 2e 18 	jmp	0x305c	; 0x305c <_exit>

000003be <__bad_interrupt>:
     3be:	20 ce       	rjmp	.-960    	; 0x0 <__vectors>

000003c0 <__vector_19>:
			retrieval_errors++;
		}
	}

	//printf("SRAM test completed with\n %4d errors in write phase and\n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
}
     3c0:	1f 92       	push	r1
     3c2:	0f 92       	push	r0
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	0f 92       	push	r0
     3c8:	11 24       	eor	r1, r1
     3ca:	2f 93       	push	r18
     3cc:	3f 93       	push	r19
     3ce:	4f 93       	push	r20
     3d0:	5f 93       	push	r21
     3d2:	6f 93       	push	r22
     3d4:	7f 93       	push	r23
     3d6:	8f 93       	push	r24
     3d8:	9f 93       	push	r25
     3da:	af 93       	push	r26
     3dc:	bf 93       	push	r27
     3de:	ef 93       	push	r30
     3e0:	ff 93       	push	r31
     3e2:	0e 94 f6 10 	call	0x21ec	; 0x21ec <uartReceive>
     3e6:	80 93 0e 03 	sts	0x030E, r24
     3ea:	90 91 e2 02 	lds	r25, 0x02E2
     3ee:	99 23       	and	r25, r25
     3f0:	f9 f0       	breq	.+62     	; 0x430 <__vector_19+0x70>
     3f2:	90 91 e1 02 	lds	r25, 0x02E1
     3f6:	91 30       	cpi	r25, 0x01	; 1
     3f8:	61 f0       	breq	.+24     	; 0x412 <__vector_19+0x52>
     3fa:	18 f0       	brcs	.+6      	; 0x402 <__vector_19+0x42>
     3fc:	92 30       	cpi	r25, 0x02	; 2
     3fe:	89 f0       	breq	.+34     	; 0x422 <__vector_19+0x62>
     400:	17 c0       	rjmp	.+46     	; 0x430 <__vector_19+0x70>
     402:	80 93 0b 03 	sts	0x030B, r24
     406:	10 92 e2 02 	sts	0x02E2, r1
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	90 93 e0 02 	sts	0x02E0, r25
     410:	0f c0       	rjmp	.+30     	; 0x430 <__vector_19+0x70>
     412:	80 93 0c 03 	sts	0x030C, r24
     416:	10 92 e2 02 	sts	0x02E2, r1
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	90 93 e0 02 	sts	0x02E0, r25
     420:	07 c0       	rjmp	.+14     	; 0x430 <__vector_19+0x70>
     422:	80 93 0d 03 	sts	0x030D, r24
     426:	10 92 e2 02 	sts	0x02E2, r1
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	90 93 e0 02 	sts	0x02E0, r25
     430:	8f 3f       	cpi	r24, 0xFF	; 255
     432:	31 f4       	brne	.+12     	; 0x440 <__vector_19+0x80>
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	80 93 e2 02 	sts	0x02E2, r24
     43a:	10 92 e1 02 	sts	0x02E1, r1
     43e:	10 c0       	rjmp	.+32     	; 0x460 <__vector_19+0xa0>
     440:	8e 3f       	cpi	r24, 0xFE	; 254
     442:	31 f4       	brne	.+12     	; 0x450 <__vector_19+0x90>
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	80 93 e2 02 	sts	0x02E2, r24
     44a:	80 93 e1 02 	sts	0x02E1, r24
     44e:	08 c0       	rjmp	.+16     	; 0x460 <__vector_19+0xa0>
     450:	8d 3f       	cpi	r24, 0xFD	; 253
     452:	31 f4       	brne	.+12     	; 0x460 <__vector_19+0xa0>
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	80 93 e2 02 	sts	0x02E2, r24
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	80 93 e1 02 	sts	0x02E1, r24
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	80 93 e3 02 	sts	0x02E3, r24
     466:	ff 91       	pop	r31
     468:	ef 91       	pop	r30
     46a:	bf 91       	pop	r27
     46c:	af 91       	pop	r26
     46e:	9f 91       	pop	r25
     470:	8f 91       	pop	r24
     472:	7f 91       	pop	r23
     474:	6f 91       	pop	r22
     476:	5f 91       	pop	r21
     478:	4f 91       	pop	r20
     47a:	3f 91       	pop	r19
     47c:	2f 91       	pop	r18
     47e:	0f 90       	pop	r0
     480:	0f be       	out	0x3f, r0	; 63
     482:	0f 90       	pop	r0
     484:	1f 90       	pop	r1
     486:	18 95       	reti

00000488 <__vector_1>:
     488:	1f 92       	push	r1
     48a:	0f 92       	push	r0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	0f 92       	push	r0
     490:	11 24       	eor	r1, r1
     492:	8f 93       	push	r24
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	80 93 df 02 	sts	0x02DF, r24
     49a:	8f 91       	pop	r24
     49c:	0f 90       	pop	r0
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	0f 90       	pop	r0
     4a2:	1f 90       	pop	r1
     4a4:	18 95       	reti

000004a6 <__vector_2>:
     4a6:	1f 92       	push	r1
     4a8:	0f 92       	push	r0
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	0f 92       	push	r0
     4ae:	11 24       	eor	r1, r1
     4b0:	8f 93       	push	r24
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	80 93 de 02 	sts	0x02DE, r24
     4b8:	8f 91       	pop	r24
     4ba:	0f 90       	pop	r0
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	0f 90       	pop	r0
     4c0:	1f 90       	pop	r1
     4c2:	18 95       	reti

000004c4 <__vector_3>:
     4c4:	1f 92       	push	r1
     4c6:	0f 92       	push	r0
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	0f 92       	push	r0
     4cc:	11 24       	eor	r1, r1
     4ce:	8f 93       	push	r24
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	80 93 da 02 	sts	0x02DA, r24
     4d6:	8f 91       	pop	r24
     4d8:	0f 90       	pop	r0
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	0f 90       	pop	r0
     4de:	1f 90       	pop	r1
     4e0:	18 95       	reti

000004e2 <__vector_16>:
     4e2:	1f 92       	push	r1
     4e4:	0f 92       	push	r0
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	0f 92       	push	r0
     4ea:	11 24       	eor	r1, r1
     4ec:	2f 93       	push	r18
     4ee:	3f 93       	push	r19
     4f0:	4f 93       	push	r20
     4f2:	5f 93       	push	r21
     4f4:	6f 93       	push	r22
     4f6:	7f 93       	push	r23
     4f8:	8f 93       	push	r24
     4fa:	9f 93       	push	r25
     4fc:	af 93       	push	r26
     4fe:	bf 93       	push	r27
     500:	ef 93       	push	r30
     502:	ff 93       	push	r31
     504:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <OLED_updateScreen>
     508:	80 91 d9 02 	lds	r24, 0x02D9
     50c:	8f 5f       	subi	r24, 0xFF	; 255
     50e:	80 93 d9 02 	sts	0x02D9, r24
     512:	80 91 d8 02 	lds	r24, 0x02D8
     516:	8f 5f       	subi	r24, 0xFF	; 255
     518:	80 93 d8 02 	sts	0x02D8, r24
     51c:	80 91 d9 02 	lds	r24, 0x02D9
     520:	82 30       	cpi	r24, 0x02	; 2
     522:	21 f4       	brne	.+8      	; 0x52c <__stack+0x2d>
     524:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <OLED_setAnimationTick>
     528:	10 92 d9 02 	sts	0x02D9, r1
     52c:	ff 91       	pop	r31
     52e:	ef 91       	pop	r30
     530:	bf 91       	pop	r27
     532:	af 91       	pop	r26
     534:	9f 91       	pop	r25
     536:	8f 91       	pop	r24
     538:	7f 91       	pop	r23
     53a:	6f 91       	pop	r22
     53c:	5f 91       	pop	r21
     53e:	4f 91       	pop	r20
     540:	3f 91       	pop	r19
     542:	2f 91       	pop	r18
     544:	0f 90       	pop	r0
     546:	0f be       	out	0x3f, r0	; 63
     548:	0f 90       	pop	r0
     54a:	1f 90       	pop	r1
     54c:	18 95       	reti

0000054e <init>:

void init()
{
     54e:	ef 92       	push	r14
     550:	ff 92       	push	r15
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
	// call initialization subroutines
	uartInit(BAUDRATE, FOSC, UBRR); printf("\n======================STARTUP==========================\n");
     556:	1f e1       	ldi	r17, 0x1F	; 31
     558:	e1 2e       	mov	r14, r17
     55a:	f1 2c       	mov	r15, r1
     55c:	00 e0       	ldi	r16, 0x00	; 0
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	4b e4       	ldi	r20, 0x4B	; 75
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	60 e8       	ldi	r22, 0x80	; 128
     56a:	75 e2       	ldi	r23, 0x25	; 37
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <uartInit>
     574:	8a e4       	ldi	r24, 0x4A	; 74
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	0e 94 21 15 	call	0x2a42	; 0x2a42 <puts>
	enableXMEM(1);
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	14 d2       	rcall	.+1064   	; 0x9a8 <enableXMEM>
	SLI_init();
     580:	0e 94 85 10 	call	0x210a	; 0x210a <SLI_init>
	JOY_init();
     584:	dc d3       	rcall	.+1976   	; 0xd3e <JOY_init>
	OLED_init();
     586:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <OLED_init>
	SPI_init();
     58a:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <SPI_init>
	MCP2515_init();
     58e:	e4 d5       	rcall	.+3016   	; 0x1158 <MCP2515_init>
	CAN_init();
     590:	68 d0       	rcall	.+208    	; 0x662 <CAN_init>
	
	// setup interrupts
	// init external interrupt INT0 on falling edge
	set_bit(GICR, INT0);
     592:	8b b7       	in	r24, 0x3b	; 59
     594:	80 64       	ori	r24, 0x40	; 64
     596:	8b bf       	out	0x3b, r24	; 59
	set_bit(MCUCR, ISC01);
     598:	85 b7       	in	r24, 0x35	; 53
     59a:	82 60       	ori	r24, 0x02	; 2
     59c:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     59e:	85 b7       	in	r24, 0x35	; 53
     5a0:	8e 7f       	andi	r24, 0xFE	; 254
     5a2:	85 bf       	out	0x35, r24	; 53
	
	// Pull-up on PD3
	clear_bit(DDRD, PD3);
     5a4:	8b 98       	cbi	0x11, 3	; 17
	set_bit(PORTD, PD3);
     5a6:	93 9a       	sbi	0x12, 3	; 18
	
	// init external interrupt INT1 on falling edge
	set_bit(GICR, INT1);
     5a8:	8b b7       	in	r24, 0x3b	; 59
     5aa:	80 68       	ori	r24, 0x80	; 128
     5ac:	8b bf       	out	0x3b, r24	; 59
	set_bit(MCUCR, ISC11);
     5ae:	85 b7       	in	r24, 0x35	; 53
     5b0:	88 60       	ori	r24, 0x08	; 8
     5b2:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC10);
     5b4:	85 b7       	in	r24, 0x35	; 53
     5b6:	8b 7f       	andi	r24, 0xFB	; 251
     5b8:	85 bf       	out	0x35, r24	; 53
	
		
	// PE2
	clear_bit(DDRE, PE2);
     5ba:	32 98       	cbi	0x06, 2	; 6
	clear_bit(PORTE, PE2);
     5bc:	3a 98       	cbi	0x07, 2	; 7
	// PB0
	clear_bit(DDRB, PB0);
     5be:	b8 98       	cbi	0x17, 0	; 23
	clear_bit(PORTB, PB0);
     5c0:	c0 98       	cbi	0x18, 0	; 24

	// activate interrupts
	sei();
     5c2:	78 94       	sei

	// call SRAM Test
	//SRAM_test();
}
     5c4:	1f 91       	pop	r17
     5c6:	0f 91       	pop	r16
     5c8:	ff 90       	pop	r15
     5ca:	ef 90       	pop	r14
     5cc:	08 95       	ret

000005ce <main>:
*/

int main(void)
{
	
	init();
     5ce:	bf df       	rcall	.-130    	; 0x54e <init>

	OLED_circle(63, 31, 10);
     5d0:	4a e0       	ldi	r20, 0x0A	; 10
     5d2:	6f e1       	ldi	r22, 0x1F	; 31
     5d4:	8f e3       	ldi	r24, 0x3F	; 63
     5d6:	0e 94 26 0f 	call	0x1e4c	; 0x1e4c <OLED_circle>
	//activateMenuFlag = 1; // display the main menu
		
	
	

	uartMsg = 0;
     5da:	10 92 0e 03 	sts	0x030E, r1
	uartMouseSteeringMessage.Motor = 0;
     5de:	10 92 0b 03 	sts	0x030B, r1
	uartMouseSteeringMessage.Servo = 0;
     5e2:	10 92 0c 03 	sts	0x030C, r1
	uartMouseSteeringMessage.Button = 0;
     5e6:	10 92 0d 03 	sts	0x030D, r1
// 		CAN_sendMessage(&message2send, 0);
// 		_delay_ms(50);

		if(activateMenuFlag && menuAlreadyBuiltFlag == 0)
		{
			activeState = MENU;
     5ea:	11 e0       	ldi	r17, 0x01	; 1
			MENU_activate(&activeState, &inputMode);

			menuAlreadyBuiltFlag = 1;
     5ec:	c1 e0       	ldi	r28, 0x01	; 1
     5ee:	d0 e0       	ldi	r29, 0x00	; 0
		if(activeState == GAME)
		{
			Game_init();
			
			Game_play(&SPIreceivedFlag, &updateCmdDispFlag, &uartMouseSteeringMessage, &inputMode);
			activeState = IDLE;
     5f0:	02 e0       	ldi	r16, 0x02	; 2
// 		message2send.data[2] = ButtonRight;
// 		
// 		CAN_sendMessage(&message2send, 0);
// 		_delay_ms(50);

		if(activateMenuFlag && menuAlreadyBuiltFlag == 0)
     5f2:	80 91 de 02 	lds	r24, 0x02DE
     5f6:	88 23       	and	r24, r24
     5f8:	a1 f0       	breq	.+40     	; 0x622 <main+0x54>
     5fa:	80 91 db 02 	lds	r24, 0x02DB
     5fe:	90 91 dc 02 	lds	r25, 0x02DC
     602:	89 2b       	or	r24, r25
     604:	71 f4       	brne	.+28     	; 0x622 <main+0x54>
		{
			activeState = MENU;
     606:	10 93 08 01 	sts	0x0108, r17
			MENU_activate(&activeState, &inputMode);
     60a:	6d ed       	ldi	r22, 0xDD	; 221
     60c:	72 e0       	ldi	r23, 0x02	; 2
     60e:	88 e0       	ldi	r24, 0x08	; 8
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 34 0b 	call	0x1668	; 0x1668 <MENU_activate>

			menuAlreadyBuiltFlag = 1;
     616:	d0 93 dc 02 	sts	0x02DC, r29
     61a:	c0 93 db 02 	sts	0x02DB, r28
			activateMenuFlag = 0;
     61e:	10 92 de 02 	sts	0x02DE, r1
		}

		if(activateMenuFlag && menuAlreadyBuiltFlag == 1)
     622:	80 91 de 02 	lds	r24, 0x02DE
     626:	88 23       	and	r24, r24
     628:	59 f0       	breq	.+22     	; 0x640 <main+0x72>
     62a:	80 91 db 02 	lds	r24, 0x02DB
     62e:	90 91 dc 02 	lds	r25, 0x02DC
     632:	01 97       	sbiw	r24, 0x01	; 1
     634:	29 f4       	brne	.+10     	; 0x640 <main+0x72>
		{
			activeState = MENU;
     636:	10 93 08 01 	sts	0x0108, r17
			MENU_reactivate();	
     63a:	c8 d7       	rcall	.+3984   	; 0x15cc <MENU_reactivate>
			activateMenuFlag = 0;
     63c:	10 92 de 02 	sts	0x02DE, r1
// 			OLED_printString(str);
// 				
// 			updateCmdDispFlag = 0;
// 		}
		
		if(activeState == GAME)
     640:	80 91 08 01 	lds	r24, 0x0108
     644:	81 11       	cpse	r24, r1
     646:	d5 cf       	rjmp	.-86     	; 0x5f2 <main+0x24>
		{
			Game_init();
     648:	c1 d1       	rcall	.+898    	; 0x9cc <Game_init>
			
			Game_play(&SPIreceivedFlag, &updateCmdDispFlag, &uartMouseSteeringMessage, &inputMode);
     64a:	2d ed       	ldi	r18, 0xDD	; 221
     64c:	32 e0       	ldi	r19, 0x02	; 2
     64e:	4b e0       	ldi	r20, 0x0B	; 11
     650:	53 e0       	ldi	r21, 0x03	; 3
     652:	60 ee       	ldi	r22, 0xE0	; 224
     654:	72 e0       	ldi	r23, 0x02	; 2
     656:	8a ed       	ldi	r24, 0xDA	; 218
     658:	92 e0       	ldi	r25, 0x02	; 2
     65a:	65 d2       	rcall	.+1226   	; 0xb26 <Game_play>
			activeState = IDLE;
     65c:	00 93 08 01 	sts	0x0108, r16
     660:	c8 cf       	rjmp	.-112    	; 0x5f2 <main+0x24>

00000662 <CAN_init>:
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	43 e0       	ldi	r20, 0x03	; 3
     66c:	6b e2       	ldi	r22, 0x2B	; 43
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	7e d5       	rcall	.+2812   	; 0x1170 <MCP2515_write>
     674:	40 e6       	ldi	r20, 0x60	; 96
     676:	60 e6       	ldi	r22, 0x60	; 96
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	79 d5       	rcall	.+2802   	; 0x1170 <MCP2515_write>
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	40 e8       	ldi	r20, 0x80	; 128
     682:	6f e0       	ldi	r22, 0x0F	; 15
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	8b d5       	rcall	.+2838   	; 0x11a0 <MCP2515_bitModify>
     68a:	df 91       	pop	r29
     68c:	cf 91       	pop	r28
     68e:	08 95       	ret

00000690 <CAN_sendMessage>:
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	27 97       	sbiw	r28, 0x07	; 7
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	f8 94       	cli
     69e:	de bf       	out	0x3e, r29	; 62
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	cd bf       	out	0x3d, r28	; 61
     6a4:	9e 83       	std	Y+6, r25	; 0x06
     6a6:	8d 83       	std	Y+5, r24	; 0x05
     6a8:	6f 83       	std	Y+7, r22	; 0x07
     6aa:	8f 81       	ldd	r24, Y+7	; 0x07
     6ac:	88 2f       	mov	r24, r24
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	00 97       	sbiw	r24, 0x00	; 0
     6b2:	09 f0       	breq	.+2      	; 0x6b6 <CAN_sendMessage+0x26>
     6b4:	4d c0       	rjmp	.+154    	; 0x750 <CAN_sendMessage+0xc0>
     6b6:	8d 81       	ldd	r24, Y+5	; 0x05
     6b8:	9e 81       	ldd	r25, Y+6	; 0x06
     6ba:	fc 01       	movw	r30, r24
     6bc:	80 81       	ld	r24, Z
     6be:	91 81       	ldd	r25, Z+1	; 0x01
     6c0:	9c 83       	std	Y+4, r25	; 0x04
     6c2:	8b 83       	std	Y+3, r24	; 0x03
     6c4:	8b 81       	ldd	r24, Y+3	; 0x03
     6c6:	82 95       	swap	r24
     6c8:	88 0f       	add	r24, r24
     6ca:	80 7e       	andi	r24, 0xE0	; 224
     6cc:	48 2f       	mov	r20, r24
     6ce:	62 e3       	ldi	r22, 0x32	; 50
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	4d d5       	rcall	.+2714   	; 0x1170 <MCP2515_write>
     6d6:	8b 81       	ldd	r24, Y+3	; 0x03
     6d8:	9c 81       	ldd	r25, Y+4	; 0x04
     6da:	96 95       	lsr	r25
     6dc:	87 95       	ror	r24
     6de:	96 95       	lsr	r25
     6e0:	87 95       	ror	r24
     6e2:	96 95       	lsr	r25
     6e4:	87 95       	ror	r24
     6e6:	48 2f       	mov	r20, r24
     6e8:	61 e3       	ldi	r22, 0x31	; 49
     6ea:	80 e0       	ldi	r24, 0x00	; 0
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	40 d5       	rcall	.+2688   	; 0x1170 <MCP2515_write>
     6f0:	8d 81       	ldd	r24, Y+5	; 0x05
     6f2:	9e 81       	ldd	r25, Y+6	; 0x06
     6f4:	fc 01       	movw	r30, r24
     6f6:	82 81       	ldd	r24, Z+2	; 0x02
     6f8:	48 2f       	mov	r20, r24
     6fa:	65 e3       	ldi	r22, 0x35	; 53
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	37 d5       	rcall	.+2670   	; 0x1170 <MCP2515_write>
     702:	86 e3       	ldi	r24, 0x36	; 54
     704:	89 83       	std	Y+1, r24	; 0x01
     706:	1a 82       	std	Y+2, r1	; 0x02
     708:	15 c0       	rjmp	.+42     	; 0x734 <CAN_sendMessage+0xa4>
     70a:	8a 81       	ldd	r24, Y+2	; 0x02
     70c:	88 2f       	mov	r24, r24
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	2d 81       	ldd	r18, Y+5	; 0x05
     712:	3e 81       	ldd	r19, Y+6	; 0x06
     714:	82 0f       	add	r24, r18
     716:	93 1f       	adc	r25, r19
     718:	03 96       	adiw	r24, 0x03	; 3
     71a:	fc 01       	movw	r30, r24
     71c:	80 81       	ld	r24, Z
     71e:	48 2f       	mov	r20, r24
     720:	69 81       	ldd	r22, Y+1	; 0x01
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	24 d5       	rcall	.+2632   	; 0x1170 <MCP2515_write>
     728:	89 81       	ldd	r24, Y+1	; 0x01
     72a:	8f 5f       	subi	r24, 0xFF	; 255
     72c:	89 83       	std	Y+1, r24	; 0x01
     72e:	8a 81       	ldd	r24, Y+2	; 0x02
     730:	8f 5f       	subi	r24, 0xFF	; 255
     732:	8a 83       	std	Y+2, r24	; 0x02
     734:	8d 81       	ldd	r24, Y+5	; 0x05
     736:	9e 81       	ldd	r25, Y+6	; 0x06
     738:	fc 01       	movw	r30, r24
     73a:	92 81       	ldd	r25, Z+2	; 0x02
     73c:	8a 81       	ldd	r24, Y+2	; 0x02
     73e:	89 17       	cp	r24, r25
     740:	20 f3       	brcs	.-56     	; 0x70a <CAN_sendMessage+0x7a>
     742:	2f ef       	ldi	r18, 0xFF	; 255
     744:	48 e0       	ldi	r20, 0x08	; 8
     746:	60 e3       	ldi	r22, 0x30	; 48
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	29 d5       	rcall	.+2642   	; 0x11a0 <MCP2515_bitModify>
     74e:	00 00       	nop
     750:	27 96       	adiw	r28, 0x07	; 7
     752:	0f b6       	in	r0, 0x3f	; 63
     754:	f8 94       	cli
     756:	de bf       	out	0x3e, r29	; 62
     758:	0f be       	out	0x3f, r0	; 63
     75a:	cd bf       	out	0x3d, r28	; 61
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <CAN_receiveMessage>:
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
     76e:	61 97       	sbiw	r28, 0x11	; 17
     770:	0f b6       	in	r0, 0x3f	; 63
     772:	f8 94       	cli
     774:	de bf       	out	0x3e, r29	; 62
     776:	0f be       	out	0x3f, r0	; 63
     778:	cd bf       	out	0x3d, r28	; 61
     77a:	98 8b       	std	Y+16, r25	; 0x10
     77c:	8f 87       	std	Y+15, r24	; 0x0f
     77e:	69 8b       	std	Y+17, r22	; 0x11
     780:	89 89       	ldd	r24, Y+17	; 0x11
     782:	88 2f       	mov	r24, r24
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	82 30       	cpi	r24, 0x02	; 2
     788:	91 05       	cpc	r25, r1
     78a:	09 f4       	brne	.+2      	; 0x78e <CAN_receiveMessage+0x2c>
     78c:	57 c0       	rjmp	.+174    	; 0x83c <CAN_receiveMessage+0xda>
     78e:	83 30       	cpi	r24, 0x03	; 3
     790:	91 05       	cpc	r25, r1
     792:	21 f0       	breq	.+8      	; 0x79c <CAN_receiveMessage+0x3a>
     794:	81 30       	cpi	r24, 0x01	; 1
     796:	91 05       	cpc	r25, r1
     798:	09 f0       	breq	.+2      	; 0x79c <CAN_receiveMessage+0x3a>
     79a:	9f c0       	rjmp	.+318    	; 0x8da <CAN_receiveMessage+0x178>
     79c:	61 e6       	ldi	r22, 0x61	; 97
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	be d4       	rcall	.+2428   	; 0x1120 <MCP2515_read>
     7a4:	88 2f       	mov	r24, r24
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	9d 83       	std	Y+5, r25	; 0x05
     7aa:	8c 83       	std	Y+4, r24	; 0x04
     7ac:	8c 81       	ldd	r24, Y+4	; 0x04
     7ae:	9d 81       	ldd	r25, Y+5	; 0x05
     7b0:	8c 01       	movw	r16, r24
     7b2:	00 0f       	add	r16, r16
     7b4:	11 1f       	adc	r17, r17
     7b6:	00 0f       	add	r16, r16
     7b8:	11 1f       	adc	r17, r17
     7ba:	00 0f       	add	r16, r16
     7bc:	11 1f       	adc	r17, r17
     7be:	62 e6       	ldi	r22, 0x62	; 98
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	ad d4       	rcall	.+2394   	; 0x1120 <MCP2515_read>
     7c6:	82 95       	swap	r24
     7c8:	86 95       	lsr	r24
     7ca:	87 70       	andi	r24, 0x07	; 7
     7cc:	88 2f       	mov	r24, r24
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	80 2b       	or	r24, r16
     7d2:	91 2b       	or	r25, r17
     7d4:	9d 83       	std	Y+5, r25	; 0x05
     7d6:	8c 83       	std	Y+4, r24	; 0x04
     7d8:	65 e6       	ldi	r22, 0x65	; 101
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	a0 d4       	rcall	.+2368   	; 0x1120 <MCP2515_read>
     7e0:	8e 83       	std	Y+6, r24	; 0x06
     7e2:	86 e6       	ldi	r24, 0x66	; 102
     7e4:	89 83       	std	Y+1, r24	; 0x01
     7e6:	1a 82       	std	Y+2, r1	; 0x02
     7e8:	14 c0       	rjmp	.+40     	; 0x812 <CAN_receiveMessage+0xb0>
     7ea:	8a 81       	ldd	r24, Y+2	; 0x02
     7ec:	08 2f       	mov	r16, r24
     7ee:	10 e0       	ldi	r17, 0x00	; 0
     7f0:	69 81       	ldd	r22, Y+1	; 0x01
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	94 d4       	rcall	.+2344   	; 0x1120 <MCP2515_read>
     7f8:	28 2f       	mov	r18, r24
     7fa:	ce 01       	movw	r24, r28
     7fc:	07 96       	adiw	r24, 0x07	; 7
     7fe:	80 0f       	add	r24, r16
     800:	91 1f       	adc	r25, r17
     802:	fc 01       	movw	r30, r24
     804:	20 83       	st	Z, r18
     806:	89 81       	ldd	r24, Y+1	; 0x01
     808:	8f 5f       	subi	r24, 0xFF	; 255
     80a:	89 83       	std	Y+1, r24	; 0x01
     80c:	8a 81       	ldd	r24, Y+2	; 0x02
     80e:	8f 5f       	subi	r24, 0xFF	; 255
     810:	8a 83       	std	Y+2, r24	; 0x02
     812:	9e 81       	ldd	r25, Y+6	; 0x06
     814:	8a 81       	ldd	r24, Y+2	; 0x02
     816:	89 17       	cp	r24, r25
     818:	40 f3       	brcs	.-48     	; 0x7ea <CAN_receiveMessage+0x88>
     81a:	20 e0       	ldi	r18, 0x00	; 0
     81c:	41 e0       	ldi	r20, 0x01	; 1
     81e:	6c e2       	ldi	r22, 0x2C	; 44
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	bd d4       	rcall	.+2426   	; 0x11a0 <MCP2515_bitModify>
     826:	8f 85       	ldd	r24, Y+15	; 0x0f
     828:	98 89       	ldd	r25, Y+16	; 0x10
     82a:	2b e0       	ldi	r18, 0x0B	; 11
     82c:	fe 01       	movw	r30, r28
     82e:	34 96       	adiw	r30, 0x04	; 4
     830:	dc 01       	movw	r26, r24
     832:	01 90       	ld	r0, Z+
     834:	0d 92       	st	X+, r0
     836:	2a 95       	dec	r18
     838:	e1 f7       	brne	.-8      	; 0x832 <CAN_receiveMessage+0xd0>
     83a:	4f c0       	rjmp	.+158    	; 0x8da <CAN_receiveMessage+0x178>
     83c:	61 e7       	ldi	r22, 0x71	; 113
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	6e d4       	rcall	.+2268   	; 0x1120 <MCP2515_read>
     844:	88 2f       	mov	r24, r24
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	9d 83       	std	Y+5, r25	; 0x05
     84a:	8c 83       	std	Y+4, r24	; 0x04
     84c:	8c 81       	ldd	r24, Y+4	; 0x04
     84e:	9d 81       	ldd	r25, Y+5	; 0x05
     850:	8c 01       	movw	r16, r24
     852:	00 0f       	add	r16, r16
     854:	11 1f       	adc	r17, r17
     856:	00 0f       	add	r16, r16
     858:	11 1f       	adc	r17, r17
     85a:	00 0f       	add	r16, r16
     85c:	11 1f       	adc	r17, r17
     85e:	62 e7       	ldi	r22, 0x72	; 114
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	5d d4       	rcall	.+2234   	; 0x1120 <MCP2515_read>
     866:	82 95       	swap	r24
     868:	86 95       	lsr	r24
     86a:	87 70       	andi	r24, 0x07	; 7
     86c:	88 2f       	mov	r24, r24
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	80 2b       	or	r24, r16
     872:	91 2b       	or	r25, r17
     874:	9d 83       	std	Y+5, r25	; 0x05
     876:	8c 83       	std	Y+4, r24	; 0x04
     878:	65 e7       	ldi	r22, 0x75	; 117
     87a:	80 e0       	ldi	r24, 0x00	; 0
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	50 d4       	rcall	.+2208   	; 0x1120 <MCP2515_read>
     880:	8e 83       	std	Y+6, r24	; 0x06
     882:	86 e7       	ldi	r24, 0x76	; 118
     884:	89 83       	std	Y+1, r24	; 0x01
     886:	1b 82       	std	Y+3, r1	; 0x03
     888:	14 c0       	rjmp	.+40     	; 0x8b2 <CAN_receiveMessage+0x150>
     88a:	8b 81       	ldd	r24, Y+3	; 0x03
     88c:	08 2f       	mov	r16, r24
     88e:	10 e0       	ldi	r17, 0x00	; 0
     890:	69 81       	ldd	r22, Y+1	; 0x01
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	44 d4       	rcall	.+2184   	; 0x1120 <MCP2515_read>
     898:	28 2f       	mov	r18, r24
     89a:	ce 01       	movw	r24, r28
     89c:	07 96       	adiw	r24, 0x07	; 7
     89e:	80 0f       	add	r24, r16
     8a0:	91 1f       	adc	r25, r17
     8a2:	fc 01       	movw	r30, r24
     8a4:	20 83       	st	Z, r18
     8a6:	89 81       	ldd	r24, Y+1	; 0x01
     8a8:	8f 5f       	subi	r24, 0xFF	; 255
     8aa:	89 83       	std	Y+1, r24	; 0x01
     8ac:	8b 81       	ldd	r24, Y+3	; 0x03
     8ae:	8f 5f       	subi	r24, 0xFF	; 255
     8b0:	8b 83       	std	Y+3, r24	; 0x03
     8b2:	9e 81       	ldd	r25, Y+6	; 0x06
     8b4:	8b 81       	ldd	r24, Y+3	; 0x03
     8b6:	89 17       	cp	r24, r25
     8b8:	40 f3       	brcs	.-48     	; 0x88a <CAN_receiveMessage+0x128>
     8ba:	20 e0       	ldi	r18, 0x00	; 0
     8bc:	42 e0       	ldi	r20, 0x02	; 2
     8be:	6c e2       	ldi	r22, 0x2C	; 44
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	6d d4       	rcall	.+2266   	; 0x11a0 <MCP2515_bitModify>
     8c6:	8f 85       	ldd	r24, Y+15	; 0x0f
     8c8:	98 89       	ldd	r25, Y+16	; 0x10
     8ca:	2b e0       	ldi	r18, 0x0B	; 11
     8cc:	fe 01       	movw	r30, r28
     8ce:	34 96       	adiw	r30, 0x04	; 4
     8d0:	dc 01       	movw	r26, r24
     8d2:	01 90       	ld	r0, Z+
     8d4:	0d 92       	st	X+, r0
     8d6:	2a 95       	dec	r18
     8d8:	e1 f7       	brne	.-8      	; 0x8d2 <CAN_receiveMessage+0x170>
     8da:	8f 85       	ldd	r24, Y+15	; 0x0f
     8dc:	98 89       	ldd	r25, Y+16	; 0x10
     8de:	61 96       	adiw	r28, 0x11	; 17
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	f8 94       	cli
     8e4:	de bf       	out	0x3e, r29	; 62
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	cd bf       	out	0x3d, r28	; 61
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	1f 91       	pop	r17
     8f0:	0f 91       	pop	r16
     8f2:	08 95       	ret

000008f4 <CAN_printMessage>:
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	00 d0       	rcall	.+0      	; 0x8fa <CAN_printMessage+0x6>
     8fa:	1f 92       	push	r1
     8fc:	cd b7       	in	r28, 0x3d	; 61
     8fe:	de b7       	in	r29, 0x3e	; 62
     900:	9b 83       	std	Y+3, r25	; 0x03
     902:	8a 83       	std	Y+2, r24	; 0x02
     904:	8a 81       	ldd	r24, Y+2	; 0x02
     906:	9b 81       	ldd	r25, Y+3	; 0x03
     908:	fc 01       	movw	r30, r24
     90a:	82 81       	ldd	r24, Z+2	; 0x02
     90c:	28 2f       	mov	r18, r24
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	8a 81       	ldd	r24, Y+2	; 0x02
     912:	9b 81       	ldd	r25, Y+3	; 0x03
     914:	fc 01       	movw	r30, r24
     916:	80 81       	ld	r24, Z
     918:	91 81       	ldd	r25, Z+1	; 0x01
     91a:	43 2f       	mov	r20, r19
     91c:	4f 93       	push	r20
     91e:	2f 93       	push	r18
     920:	29 2f       	mov	r18, r25
     922:	2f 93       	push	r18
     924:	8f 93       	push	r24
     926:	8a e1       	ldi	r24, 0x1A	; 26
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	89 2f       	mov	r24, r25
     92c:	8f 93       	push	r24
     92e:	8a e1       	ldi	r24, 0x1A	; 26
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	8f 93       	push	r24
     934:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <printf>
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
     944:	19 82       	std	Y+1, r1	; 0x01
     946:	1f c0       	rjmp	.+62     	; 0x986 <CAN_printMessage+0x92>
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	88 2f       	mov	r24, r24
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	2a 81       	ldd	r18, Y+2	; 0x02
     950:	3b 81       	ldd	r19, Y+3	; 0x03
     952:	82 0f       	add	r24, r18
     954:	93 1f       	adc	r25, r19
     956:	03 96       	adiw	r24, 0x03	; 3
     958:	fc 01       	movw	r30, r24
     95a:	80 81       	ld	r24, Z
     95c:	88 2f       	mov	r24, r24
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	29 2f       	mov	r18, r25
     962:	2f 93       	push	r18
     964:	8f 93       	push	r24
     966:	86 e4       	ldi	r24, 0x46	; 70
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	89 2f       	mov	r24, r25
     96c:	8f 93       	push	r24
     96e:	86 e4       	ldi	r24, 0x46	; 70
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	8f 93       	push	r24
     974:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <printf>
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	8f 5f       	subi	r24, 0xFF	; 255
     984:	89 83       	std	Y+1, r24	; 0x01
     986:	8a 81       	ldd	r24, Y+2	; 0x02
     988:	9b 81       	ldd	r25, Y+3	; 0x03
     98a:	fc 01       	movw	r30, r24
     98c:	92 81       	ldd	r25, Z+2	; 0x02
     98e:	89 81       	ldd	r24, Y+1	; 0x01
     990:	89 17       	cp	r24, r25
     992:	d0 f2       	brcs	.-76     	; 0x948 <CAN_printMessage+0x54>
     994:	8a e0       	ldi	r24, 0x0A	; 10
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <putchar>
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	0f 90       	pop	r0
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     9a8:	95 b7       	in	r25, 0x35	; 53
     9aa:	90 68       	ori	r25, 0x80	; 128
     9ac:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     9ae:	96 b7       	in	r25, 0x36	; 54
     9b0:	98 60       	ori	r25, 0x08	; 8
     9b2:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     9b4:	88 23       	and	r24, r24
     9b6:	19 f0       	breq	.+6      	; 0x9be <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     9b8:	80 b7       	in	r24, 0x30	; 48
     9ba:	80 62       	ori	r24, 0x20	; 32
     9bc:	80 bf       	out	0x30, r24	; 48
     9be:	08 95       	ret

000009c0 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     9c0:	fc 01       	movw	r30, r24
     9c2:	80 81       	ld	r24, Z
	return val;
}
     9c4:	08 95       	ret

000009c6 <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     9c6:	fc 01       	movw	r30, r24
     9c8:	60 83       	st	Z, r22
     9ca:	08 95       	ret

000009cc <Game_init>:
static uint8_t ButtonRight;

//UART_Message_t uartMouseSteeringMessage;

void Game_init()
{
     9cc:	0f 93       	push	r16
     9ce:	1f 93       	push	r17
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
	// declare score and lives
	score = 0;
     9d4:	10 92 e9 02 	sts	0x02E9, r1
     9d8:	10 92 e8 02 	sts	0x02E8, r1
	lives = 3;
     9dc:	83 e0       	ldi	r24, 0x03	; 3
     9de:	80 93 e7 02 	sts	0x02E7, r24
	
	// write Title to Screen
	OLED_clear();
     9e2:	cb d6       	rcall	.+3478   	; 0x177a <OLED_clear>
     9e4:	64 e0       	ldi	r22, 0x04	; 4
	OLED_bufferGoto(0,4);
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	1d d7       	rcall	.+3642   	; 0x1828 <OLED_bufferGoto>
     9ee:	83 e8       	ldi	r24, 0x83	; 131
     9f0:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("** Ping-Pong **");
     9f2:	79 d7       	rcall	.+3826   	; 0x18e6 <OLED_printString>
     9f4:	63 e1       	ldi	r22, 0x13	; 19
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	83 e0       	ldi	r24, 0x03	; 3
		
	// write to Screen
	OLED_bufferGoto(3,LIVES_POS-16);
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	15 d7       	rcall	.+3626   	; 0x1828 <OLED_bufferGoto>
     9fe:	83 e9       	ldi	r24, 0x93	; 147
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	71 d7       	rcall	.+3810   	; 0x18e6 <OLED_printString>
     a04:	6c e4       	ldi	r22, 0x4C	; 76
	OLED_printString("Lives");
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	83 e0       	ldi	r24, 0x03	; 3
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	0d d7       	rcall	.+3610   	; 0x1828 <OLED_bufferGoto>
	OLED_bufferGoto(3,SCORE_POS-8);
     a0e:	89 e9       	ldi	r24, 0x99	; 153
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	69 d7       	rcall	.+3794   	; 0x18e6 <OLED_printString>
     a14:	63 e2       	ldi	r22, 0x23	; 35
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	85 e0       	ldi	r24, 0x05	; 5
	OLED_printString("Score");
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	05 d7       	rcall	.+3594   	; 0x1828 <OLED_bufferGoto>
     a1e:	80 91 e7 02 	lds	r24, 0x02E7
		
	// write Numbers
	OLED_bufferGoto(5, LIVES_POS);
     a22:	1f 92       	push	r1
     a24:	8f 93       	push	r24
     a26:	0f e9       	ldi	r16, 0x9F	; 159
     a28:	11 e0       	ldi	r17, 0x01	; 1
     a2a:	1f 93       	push	r17
     a2c:	0f 93       	push	r16
	sprintf(str, "%d", lives);
     a2e:	ca ee       	ldi	r28, 0xEA	; 234
     a30:	d2 e0       	ldi	r29, 0x02	; 2
     a32:	df 93       	push	r29
     a34:	cf 93       	push	r28
     a36:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <sprintf>
     a3a:	ce 01       	movw	r24, r28
     a3c:	54 d7       	rcall	.+3752   	; 0x18e6 <OLED_printString>
     a3e:	64 e5       	ldi	r22, 0x54	; 84
     a40:	70 e0       	ldi	r23, 0x00	; 0
     a42:	85 e0       	ldi	r24, 0x05	; 5
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	f0 d6       	rcall	.+3552   	; 0x1828 <OLED_bufferGoto>
     a48:	80 91 e9 02 	lds	r24, 0x02E9
	OLED_printString(str);
     a4c:	8f 93       	push	r24
     a4e:	80 91 e8 02 	lds	r24, 0x02E8
	OLED_bufferGoto(5, SCORE_POS);
     a52:	8f 93       	push	r24
     a54:	1f 93       	push	r17
     a56:	0f 93       	push	r16
     a58:	df 93       	push	r29
     a5a:	cf 93       	push	r28
	sprintf(str, "%d", score);
     a5c:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <sprintf>
     a60:	ce 01       	movw	r24, r28
     a62:	41 d7       	rcall	.+3714   	; 0x18e6 <OLED_printString>
     a64:	8d b7       	in	r24, 0x3d	; 61
     a66:	9e b7       	in	r25, 0x3e	; 62
     a68:	0c 96       	adiw	r24, 0x0c	; 12
     a6a:	0f b6       	in	r0, 0x3f	; 63
     a6c:	f8 94       	cli
     a6e:	9e bf       	out	0x3e, r25	; 62
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	8d bf       	out	0x3d, r24	; 61
	OLED_printString(str);	
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	08 95       	ret

00000a7e <Game_updateLives>:
     a7e:	80 91 e7 02 	lds	r24, 0x02E7
     a82:	81 50       	subi	r24, 0x01	; 1
     a84:	80 93 e7 02 	sts	0x02E7, r24
     a88:	63 e2       	ldi	r22, 0x23	; 35
}
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	85 e0       	ldi	r24, 0x05	; 5
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	cb d6       	rcall	.+3478   	; 0x1828 <OLED_bufferGoto>
     a92:	80 91 e7 02 	lds	r24, 0x02E7

void Game_updateLives()
{
	lives--;
	OLED_bufferGoto(5, LIVES_POS);
	sprintf(str, "%d", lives);
     a96:	1f 92       	push	r1
     a98:	8f 93       	push	r24
     a9a:	8f e9       	ldi	r24, 0x9F	; 159
     a9c:	91 e0       	ldi	r25, 0x01	; 1
     a9e:	9f 93       	push	r25
     aa0:	8f 93       	push	r24
     aa2:	8a ee       	ldi	r24, 0xEA	; 234
     aa4:	92 e0       	ldi	r25, 0x02	; 2
     aa6:	9f 93       	push	r25
     aa8:	8f 93       	push	r24
     aaa:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <sprintf>
     aae:	8a ee       	ldi	r24, 0xEA	; 234
	OLED_printString(str);
     ab0:	92 e0       	ldi	r25, 0x02	; 2
     ab2:	19 d7       	rcall	.+3634   	; 0x18e6 <OLED_printString>
     ab4:	60 e3       	ldi	r22, 0x30	; 48
     ab6:	70 e0       	ldi	r23, 0x00	; 0
	
	OLED_bufferGoto(7, 48);
     ab8:	87 e0       	ldi	r24, 0x07	; 7
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	b5 d6       	rcall	.+3434   	; 0x1828 <OLED_bufferGoto>
     abe:	82 ea       	ldi	r24, 0xA2	; 162
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	11 d7       	rcall	.+3618   	; 0x18e6 <OLED_printString>
	OLED_printString("Wait");
     ac4:	10 92 09 01 	sts	0x0109, r1
     ac8:	0f 90       	pop	r0
     aca:	0f 90       	pop	r0
	updateScoreFlag = 0;
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	08 95       	ret

00000ad6 <Game_updateScore>:
     ad6:	80 91 e8 02 	lds	r24, 0x02E8
     ada:	90 91 e9 02 	lds	r25, 0x02E9
}

void Game_updateScore()
{
	score++;
     ade:	01 96       	adiw	r24, 0x01	; 1
     ae0:	90 93 e9 02 	sts	0x02E9, r25
     ae4:	80 93 e8 02 	sts	0x02E8, r24
	OLED_bufferGoto(5, SCORE_POS);
     ae8:	64 e5       	ldi	r22, 0x54	; 84
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	85 e0       	ldi	r24, 0x05	; 5
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	9b d6       	rcall	.+3382   	; 0x1828 <OLED_bufferGoto>
     af2:	80 91 e9 02 	lds	r24, 0x02E9
	sprintf(str, "%d", score);
     af6:	8f 93       	push	r24
     af8:	80 91 e8 02 	lds	r24, 0x02E8
     afc:	8f 93       	push	r24
     afe:	8f e9       	ldi	r24, 0x9F	; 159
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	9f 93       	push	r25
     b04:	8f 93       	push	r24
     b06:	8a ee       	ldi	r24, 0xEA	; 234
     b08:	92 e0       	ldi	r25, 0x02	; 2
     b0a:	9f 93       	push	r25
     b0c:	8f 93       	push	r24
     b0e:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <sprintf>
     b12:	8a ee       	ldi	r24, 0xEA	; 234
	OLED_printString(str);
     b14:	92 e0       	ldi	r25, 0x02	; 2
     b16:	e7 d6       	rcall	.+3534   	; 0x18e6 <OLED_printString>
     b18:	0f 90       	pop	r0
     b1a:	0f 90       	pop	r0
     b1c:	0f 90       	pop	r0
     b1e:	0f 90       	pop	r0
     b20:	0f 90       	pop	r0
     b22:	0f 90       	pop	r0
     b24:	08 95       	ret

00000b26 <Game_play>:
     b26:	2f 92       	push	r2
     b28:	3f 92       	push	r3
}

void Game_play(uint8_t* SPIreceivedFlag, uint8_t* updateCmdDispFlag, UART_Message_t* uartMouseSteeringMessage, INPUT_MODE* inputMode)
{
     b2a:	4f 92       	push	r4
     b2c:	5f 92       	push	r5
     b2e:	6f 92       	push	r6
     b30:	7f 92       	push	r7
     b32:	8f 92       	push	r8
     b34:	9f 92       	push	r9
     b36:	af 92       	push	r10
     b38:	bf 92       	push	r11
     b3a:	cf 92       	push	r12
     b3c:	df 92       	push	r13
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	a0 97       	sbiw	r28, 0x20	; 32
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8a 01       	movw	r16, r20
     b5c:	79 01       	movw	r14, r18
		//
		 	//*updateCmdDispFlag = 0;
		//}

		// send Positions to Node 2
		message2send.id = 23;
     b5e:	0f 2e       	mov	r0, r31
     b60:	fa e1       	ldi	r31, 0x1A	; 26
     b62:	8f 2e       	mov	r8, r31
     b64:	f3 e0       	ldi	r31, 0x03	; 3
     b66:	9f 2e       	mov	r9, r31
     b68:	f0 2d       	mov	r31, r0
     b6a:	0f 2e       	mov	r0, r31
     b6c:	f7 e1       	ldi	r31, 0x17	; 23
     b6e:	6f 2e       	mov	r6, r31
     b70:	71 2c       	mov	r7, r1
     b72:	f0 2d       	mov	r31, r0
     b74:	38 2c       	mov	r3, r8
     b76:	98 a2       	std	Y+32, r9	; 0x20
     b78:	8f 8e       	std	Y+31, r8	; 0x1f
     b7a:	43 2c       	mov	r4, r3
     b7c:	1c 01       	movw	r2, r24
	OLED_printString(str);
}

void Game_play(uint8_t* SPIreceivedFlag, uint8_t* updateCmdDispFlag, UART_Message_t* uartMouseSteeringMessage, INPUT_MODE* inputMode)
{
	while(lives > 0)
     b7e:	78 c0       	rjmp	.+240    	; 0xc70 <Game_play+0x14a>
	{
		if(updateScoreFlag)
     b80:	80 91 09 01 	lds	r24, 0x0109
     b84:	81 11       	cpse	r24, r1
		{
			Game_updateScore();
     b86:	a7 df       	rcall	.-178    	; 0xad6 <Game_updateScore>
     b88:	6b d2       	rcall	.+1238   	; 0x1060 <JOY_getPosition>
		}
		
		
		// call for Joystick and Slider positions
		JoyPos = JOY_getPosition().X_abs;
     b8a:	29 83       	std	Y+1, r18	; 0x01
     b8c:	3a 83       	std	Y+2, r19	; 0x02
     b8e:	4b 83       	std	Y+3, r20	; 0x03
     b90:	5c 83       	std	Y+4, r21	; 0x04
     b92:	6d 83       	std	Y+5, r22	; 0x05
     b94:	7e 83       	std	Y+6, r23	; 0x06
     b96:	8f 83       	std	Y+7, r24	; 0x07
     b98:	98 87       	std	Y+8, r25	; 0x08
     b9a:	20 93 e6 02 	sts	0x02E6, r18
     b9e:	0e 94 c0 10 	call	0x2180	; 0x2180 <SLI_getPosition>
		SliPos = SLI_getPosition().R_per;
     ba2:	80 93 e5 02 	sts	0x02E5, r24
     ba6:	2a 9b       	sbis	0x05, 2	; 5
     ba8:	03 c0       	rjmp	.+6      	; 0xbb0 <Game_play+0x8a>
		
		// Check for pushed Button
		if((PINE & (1<<PE2)))
     baa:	50 92 e4 02 	sts	0x02E4, r5
		{
			ButtonRight = 1;
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <Game_play+0x8e>
     bb0:	10 92 e4 02 	sts	0x02E4, r1
		}
		else
		{
			ButtonRight = 0;
     bb4:	ef 8d       	ldd	r30, Y+31	; 0x1f
     bb6:	f8 a1       	ldd	r31, Y+32	; 0x20
		//
		 	//*updateCmdDispFlag = 0;
		//}

		// send Positions to Node 2
		message2send.id = 23;
     bb8:	71 82       	std	Z+1, r7	; 0x01
     bba:	60 82       	st	Z, r6
     bbc:	ec e1       	ldi	r30, 0x1C	; 28
     bbe:	f3 e0       	ldi	r31, 0x03	; 3
		message2send.length = 7;
     bc0:	80 82       	st	Z, r8
     bc2:	90 91 e6 02 	lds	r25, 0x02E6
		message2send.data[0] = JoyPos;
     bc6:	ed e1       	ldi	r30, 0x1D	; 29
     bc8:	f3 e0       	ldi	r31, 0x03	; 3
     bca:	90 83       	st	Z, r25
     bcc:	ee e1       	ldi	r30, 0x1E	; 30
     bce:	f3 e0       	ldi	r31, 0x03	; 3
		message2send.data[1] = SliPos;
     bd0:	80 83       	st	Z, r24
     bd2:	80 91 e4 02 	lds	r24, 0x02E4
		message2send.data[2] = ButtonRight;
     bd6:	ef e1       	ldi	r30, 0x1F	; 31
     bd8:	f3 e0       	ldi	r31, 0x03	; 3
     bda:	80 83       	st	Z, r24
     bdc:	f8 01       	movw	r30, r16
     bde:	80 81       	ld	r24, Z
		message2send.data[3] = uartMouseSteeringMessage->Motor;
     be0:	e0 e2       	ldi	r30, 0x20	; 32
     be2:	f3 e0       	ldi	r31, 0x03	; 3
     be4:	80 83       	st	Z, r24
     be6:	f8 01       	movw	r30, r16
     be8:	81 81       	ldd	r24, Z+1	; 0x01
		message2send.data[4] = uartMouseSteeringMessage->Servo;
     bea:	f6 01       	movw	r30, r12
     bec:	80 83       	st	Z, r24
     bee:	f8 01       	movw	r30, r16
     bf0:	82 81       	ldd	r24, Z+2	; 0x02
		message2send.data[5] = uartMouseSteeringMessage->Button;
     bf2:	f5 01       	movw	r30, r10
     bf4:	80 83       	st	Z, r24
     bf6:	f7 01       	movw	r30, r14
     bf8:	80 81       	ld	r24, Z
		message2send.data[6] = *inputMode;
     bfa:	e3 e2       	ldi	r30, 0x23	; 35
     bfc:	f3 e0       	ldi	r31, 0x03	; 3
     bfe:	80 83       	st	Z, r24
     c00:	60 e0       	ldi	r22, 0x00	; 0
     c02:	84 2d       	mov	r24, r4
// 		{
// 			message3send.data[0] = 2;
// 		}
// 		
		
		CAN_sendMessage(&message2send, 0);
     c04:	99 2d       	mov	r25, r9
     c06:	44 dd       	rcall	.-1400   	; 0x690 <CAN_sendMessage>
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 ef       	ldi	r25, 0xF0	; 240
     c0c:	01 97       	sbiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c0e:	f1 f7       	brne	.-4      	; 0xc0c <Game_play+0xe6>
     c10:	f1 01       	movw	r30, r2
     c12:	80 81       	ld	r24, Z
     c14:	88 23       	and	r24, r24
		_delay_ms(50);
		
		// CAN reception
		if(*SPIreceivedFlag)
     c16:	09 f4       	brne	.+2      	; 0xc1a <Game_play+0xf4>
     c18:	3d c0       	rjmp	.+122    	; 0xc94 <Game_play+0x16e>
     c1a:	6c e2       	ldi	r22, 0x2C	; 44
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	80 d2       	rcall	.+1280   	; 0x1120 <MCP2515_read>
		{
		
		 	uint8_t receiveBufferStatus;
		 	// check for message reception
		 	if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
     c20:	83 70       	andi	r24, 0x03	; 3
     c22:	31 f1       	breq	.+76     	; 0xc70 <Game_play+0x14a>
     c24:	68 2f       	mov	r22, r24
     c26:	ce 01       	movw	r24, r28
     c28:	44 96       	adiw	r24, 0x14	; 20
     c2a:	9b dd       	rcall	.-1226   	; 0x762 <CAN_receiveMessage>
		 	{
		 		struct can_message receivedMessage;
		 		receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     c2c:	8b e0       	ldi	r24, 0x0B	; 11
     c2e:	fe 01       	movw	r30, r28
     c30:	74 96       	adiw	r30, 0x14	; 20
     c32:	de 01       	movw	r26, r28
     c34:	19 96       	adiw	r26, 0x09	; 9
     c36:	01 90       	ld	r0, Z+
     c38:	0d 92       	st	X+, r0
     c3a:	8a 95       	dec	r24
     c3c:	e1 f7       	brne	.-8      	; 0xc36 <Game_play+0x110>
     c3e:	ce 01       	movw	r24, r28
     c40:	09 96       	adiw	r24, 0x09	; 9
     c42:	58 de       	rcall	.-848    	; 0x8f4 <CAN_printMessage>
     c44:	89 85       	ldd	r24, Y+9	; 0x09
     c46:	9a 85       	ldd	r25, Y+10	; 0x0a
		
		 		CAN_printMessage(&receivedMessage);
     c48:	45 97       	sbiw	r24, 0x15	; 21
     c4a:	09 f4       	brne	.+2      	; 0xc4e <Game_play+0x128>
     c4c:	18 df       	rcall	.-464    	; 0xa7e <Game_updateLives>
     c4e:	89 85       	ldd	r24, Y+9	; 0x09
		
		 		if(receivedMessage.id == 21)
     c50:	9a 85       	ldd	r25, Y+10	; 0x0a
     c52:	0d 97       	sbiw	r24, 0x0d	; 13
     c54:	59 f4       	brne	.+22     	; 0xc6c <Game_play+0x146>
     c56:	60 e3       	ldi	r22, 0x30	; 48
		 		{
		 			Game_updateLives();
     c58:	70 e0       	ldi	r23, 0x00	; 0
     c5a:	87 e0       	ldi	r24, 0x07	; 7
		 		}
				 
				if(receivedMessage.id == 13)
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	e4 d5       	rcall	.+3016   	; 0x1828 <OLED_bufferGoto>
     c60:	87 ea       	ldi	r24, 0xA7	; 167
     c62:	91 e0       	ldi	r25, 0x01	; 1
				{
					OLED_bufferGoto(7, 48);
     c64:	40 d6       	rcall	.+3200   	; 0x18e6 <OLED_printString>
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	80 93 09 01 	sts	0x0109, r24
     c6c:	f1 01       	movw	r30, r2
     c6e:	10 82       	st	Z, r1
					OLED_printString("    ");
     c70:	55 24       	eor	r5, r5
     c72:	53 94       	inc	r5
     c74:	0f 2e       	mov	r0, r31
     c76:	f7 e0       	ldi	r31, 0x07	; 7
					updateScoreFlag = 1;
     c78:	8f 2e       	mov	r8, r31
     c7a:	f0 2d       	mov	r31, r0
     c7c:	0f 2e       	mov	r0, r31
				}
		
		 		*SPIreceivedFlag = 0;
     c7e:	f1 e2       	ldi	r31, 0x21	; 33
     c80:	cf 2e       	mov	r12, r31
		SliPos = SLI_getPosition().R_per;
		
		// Check for pushed Button
		if((PINE & (1<<PE2)))
		{
			ButtonRight = 1;
     c82:	f3 e0       	ldi	r31, 0x03	; 3
     c84:	df 2e       	mov	r13, r31
		 	//*updateCmdDispFlag = 0;
		//}

		// send Positions to Node 2
		message2send.id = 23;
		message2send.length = 7;
     c86:	f0 2d       	mov	r31, r0
     c88:	0f 2e       	mov	r0, r31
     c8a:	f2 e2       	ldi	r31, 0x22	; 34
     c8c:	af 2e       	mov	r10, r31
		message2send.data[0] = JoyPos;
		message2send.data[1] = SliPos;
		message2send.data[2] = ButtonRight;
		message2send.data[3] = uartMouseSteeringMessage->Motor;
		message2send.data[4] = uartMouseSteeringMessage->Servo;
     c8e:	f3 e0       	ldi	r31, 0x03	; 3
     c90:	bf 2e       	mov	r11, r31
     c92:	f0 2d       	mov	r31, r0
     c94:	20 91 e7 02 	lds	r18, 0x02E7
     c98:	21 11       	cpse	r18, r1
		message2send.data[5] = uartMouseSteeringMessage->Button;
     c9a:	72 cf       	rjmp	.-284    	; 0xb80 <Game_play+0x5a>
     c9c:	6e d5       	rcall	.+2780   	; 0x177a <OLED_clear>
     c9e:	6c e1       	ldi	r22, 0x1C	; 28
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	90 e0       	ldi	r25, 0x00	; 0
	OLED_printString(str);
}

void Game_play(uint8_t* SPIreceivedFlag, uint8_t* updateCmdDispFlag, UART_Message_t* uartMouseSteeringMessage, INPUT_MODE* inputMode)
{
	while(lives > 0)
     ca6:	c0 d5       	rcall	.+2944   	; 0x1828 <OLED_bufferGoto>
     ca8:	8c ea       	ldi	r24, 0xAC	; 172
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	1c d6       	rcall	.+3128   	; 0x18e6 <OLED_printString>
		 		*SPIreceivedFlag = 0;
		 	}
		}
	}
	
	OLED_clear();
     cae:	6c e2       	ldi	r22, 0x2C	; 44
     cb0:	70 e0       	ldi	r23, 0x00	; 0
	OLED_bufferGoto(2,28);
     cb2:	84 e0       	ldi	r24, 0x04	; 4
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	b8 d5       	rcall	.+2928   	; 0x1828 <OLED_bufferGoto>
     cb8:	86 eb       	ldi	r24, 0xB6	; 182
     cba:	91 e0       	ldi	r25, 0x01	; 1
     cbc:	14 d6       	rcall	.+3112   	; 0x18e6 <OLED_printString>
	OLED_printString("GAME OVER");
     cbe:	64 e3       	ldi	r22, 0x34	; 52
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	85 e0       	ldi	r24, 0x05	; 5
     cc4:	90 e0       	ldi	r25, 0x00	; 0
	OLED_bufferGoto(4,44);
     cc6:	b0 d5       	rcall	.+2912   	; 0x1828 <OLED_bufferGoto>
     cc8:	80 91 e9 02 	lds	r24, 0x02E9
     ccc:	8f 93       	push	r24
     cce:	80 91 e8 02 	lds	r24, 0x02E8
	OLED_printString("SCORE");
     cd2:	8f 93       	push	r24
     cd4:	8f e9       	ldi	r24, 0x9F	; 159
     cd6:	91 e0       	ldi	r25, 0x01	; 1
     cd8:	9f 93       	push	r25
	OLED_bufferGoto(5,52);
     cda:	8f 93       	push	r24
     cdc:	8a ee       	ldi	r24, 0xEA	; 234
     cde:	92 e0       	ldi	r25, 0x02	; 2
     ce0:	9f 93       	push	r25
     ce2:	8f 93       	push	r24
     ce4:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <sprintf>
	sprintf(str, "%d", score);
     ce8:	8a ee       	ldi	r24, 0xEA	; 234
     cea:	92 e0       	ldi	r25, 0x02	; 2
     cec:	fc d5       	rcall	.+3064   	; 0x18e6 <OLED_printString>
     cee:	ff ef       	ldi	r31, 0xFF	; 255
     cf0:	2f ef       	ldi	r18, 0xFF	; 255
     cf2:	8d e1       	ldi	r24, 0x1D	; 29
     cf4:	f1 50       	subi	r31, 0x01	; 1
     cf6:	20 40       	sbci	r18, 0x00	; 0
     cf8:	80 40       	sbci	r24, 0x00	; 0
     cfa:	e1 f7       	brne	.-8      	; 0xcf4 <Game_play+0x1ce>
     cfc:	00 c0       	rjmp	.+0      	; 0xcfe <Game_play+0x1d8>
     cfe:	00 00       	nop
     d00:	0f 90       	pop	r0
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
	OLED_printString(str);
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	a0 96       	adiw	r28, 0x20	; 32
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	de bf       	out	0x3e, r29	; 62
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	cd bf       	out	0x3d, r28	; 61
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	ff 90       	pop	r15
     d22:	ef 90       	pop	r14
     d24:	df 90       	pop	r13
     d26:	cf 90       	pop	r12
     d28:	bf 90       	pop	r11
     d2a:	af 90       	pop	r10
	
	_delay_ms(2000);
     d2c:	9f 90       	pop	r9
     d2e:	8f 90       	pop	r8
     d30:	7f 90       	pop	r7
     d32:	6f 90       	pop	r6
     d34:	5f 90       	pop	r5
     d36:	4f 90       	pop	r4
     d38:	3f 90       	pop	r3
     d3a:	2f 90       	pop	r2
     d3c:	08 95       	ret

00000d3e <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     d3e:	10 92 ef 02 	sts	0x02EF, r1
     d42:	10 92 ee 02 	sts	0x02EE, r1
	currentPosition.Y_abs = 0;
     d46:	10 92 f1 02 	sts	0x02F1, r1
     d4a:	10 92 f0 02 	sts	0x02F0, r1
	currentPosition.X_per = 0;
     d4e:	10 92 f3 02 	sts	0x02F3, r1
     d52:	10 92 f2 02 	sts	0x02F2, r1
	currentPosition.Y_per = 0;
     d56:	10 92 f5 02 	sts	0x02F5, r1
     d5a:	10 92 f4 02 	sts	0x02F4, r1
	currentDirection = CENTRE;
     d5e:	10 92 ed 02 	sts	0x02ED, r1
     d62:	08 95       	ret

00000d64 <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     d68:	08 d5       	rcall	.+2576   	; 0x177a <OLED_clear>
     d6a:	60 e0       	ldi	r22, 0x00	; 0
	OLED_bufferGoto(0,0);
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	5a d5       	rcall	.+2740   	; 0x1828 <OLED_bufferGoto>
     d74:	8c eb       	ldi	r24, 0xBC	; 188
     d76:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     d78:	b6 d5       	rcall	.+2924   	; 0x18e6 <OLED_printString>
     d7a:	2f ef       	ldi	r18, 0xFF	; 255
     d7c:	8f ef       	ldi	r24, 0xFF	; 255
     d7e:	92 e0       	ldi	r25, 0x02	; 2
     d80:	21 50       	subi	r18, 0x01	; 1
     d82:	80 40       	sbci	r24, 0x00	; 0
     d84:	90 40       	sbci	r25, 0x00	; 0
     d86:	e1 f7       	brne	.-8      	; 0xd80 <JOY_calibrate+0x1c>
     d88:	00 c0       	rjmp	.+0      	; 0xd8a <JOY_calibrate+0x26>
     d8a:	00 c0       	rjmp	.+0      	; 0xd8c <JOY_calibrate+0x28>
     d8c:	c4 e1       	ldi	r28, 0x14	; 20
     d8e:	d0 e0       	ldi	r29, 0x00	; 0
     d90:	60 91 06 01 	lds	r22, 0x0106
     d94:	70 91 07 01 	lds	r23, 0x0107
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     d98:	82 e0       	ldi	r24, 0x02	; 2
     d9a:	0e 94 48 13 	call	0x2690	; 0x2690 <ADC_request>
     d9e:	2f ef       	ldi	r18, 0xFF	; 255
     da0:	8f e1       	ldi	r24, 0x1F	; 31
     da2:	91 e0       	ldi	r25, 0x01	; 1
     da4:	21 50       	subi	r18, 0x01	; 1
     da6:	80 40       	sbci	r24, 0x00	; 0
     da8:	90 40       	sbci	r25, 0x00	; 0
     daa:	e1 f7       	brne	.-8      	; 0xda4 <JOY_calibrate+0x40>
     dac:	00 c0       	rjmp	.+0      	; 0xdae <JOY_calibrate+0x4a>
     dae:	00 00       	nop
     db0:	80 91 06 01 	lds	r24, 0x0106
     db4:	90 91 07 01 	lds	r25, 0x0107
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     db8:	0e 94 70 13 	call	0x26e0	; 0x26e0 <ADC_read>
     dbc:	90 91 0f 01 	lds	r25, 0x010F
     dc0:	98 17       	cp	r25, r24
		
		if(temp > calR) {calR = temp;}
     dc2:	10 f4       	brcc	.+4      	; 0xdc8 <JOY_calibrate+0x64>
     dc4:	80 93 0f 01 	sts	0x010F, r24
     dc8:	21 97       	sbiw	r28, 0x01	; 1
     dca:	20 97       	sbiw	r28, 0x00	; 0
     dcc:	09 f7       	brne	.-62     	; 0xd90 <JOY_calibrate+0x2c>
     dce:	60 e0       	ldi	r22, 0x00	; 0
	OLED_bufferGoto(0,0);
	OLED_printString("JOY RIGHT");
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     dd0:	70 e0       	ldi	r23, 0x00	; 0
     dd2:	81 e0       	ldi	r24, 0x01	; 1
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_bufferGoto(1,0);
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	28 d5       	rcall	.+2640   	; 0x1828 <OLED_bufferGoto>
     dd8:	86 ec       	ldi	r24, 0xC6	; 198
     dda:	91 e0       	ldi	r25, 0x01	; 1
     ddc:	84 d5       	rcall	.+2824   	; 0x18e6 <OLED_printString>
     dde:	2f ef       	ldi	r18, 0xFF	; 255
	OLED_printString("JOY LEFT");
     de0:	8f ef       	ldi	r24, 0xFF	; 255
     de2:	92 e0       	ldi	r25, 0x02	; 2
     de4:	21 50       	subi	r18, 0x01	; 1
     de6:	80 40       	sbci	r24, 0x00	; 0
     de8:	90 40       	sbci	r25, 0x00	; 0
     dea:	e1 f7       	brne	.-8      	; 0xde4 <JOY_calibrate+0x80>
     dec:	00 c0       	rjmp	.+0      	; 0xdee <JOY_calibrate+0x8a>
     dee:	00 c0       	rjmp	.+0      	; 0xdf0 <JOY_calibrate+0x8c>
     df0:	c4 e1       	ldi	r28, 0x14	; 20
     df2:	d0 e0       	ldi	r29, 0x00	; 0
     df4:	60 91 06 01 	lds	r22, 0x0106
     df8:	70 91 07 01 	lds	r23, 0x0107
     dfc:	82 e0       	ldi	r24, 0x02	; 2
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     dfe:	0e 94 48 13 	call	0x2690	; 0x2690 <ADC_request>
     e02:	2f ef       	ldi	r18, 0xFF	; 255
     e04:	8f e1       	ldi	r24, 0x1F	; 31
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	21 50       	subi	r18, 0x01	; 1
     e0a:	80 40       	sbci	r24, 0x00	; 0
     e0c:	90 40       	sbci	r25, 0x00	; 0
     e0e:	e1 f7       	brne	.-8      	; 0xe08 <JOY_calibrate+0xa4>
     e10:	00 c0       	rjmp	.+0      	; 0xe12 <JOY_calibrate+0xae>
     e12:	00 00       	nop
     e14:	80 91 06 01 	lds	r24, 0x0106
     e18:	90 91 07 01 	lds	r25, 0x0107
     e1c:	0e 94 70 13 	call	0x26e0	; 0x26e0 <ADC_read>
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     e20:	90 91 0e 01 	lds	r25, 0x010E
     e24:	89 17       	cp	r24, r25
     e26:	10 f4       	brcc	.+4      	; 0xe2c <JOY_calibrate+0xc8>
     e28:	80 93 0e 01 	sts	0x010E, r24
		
		if(temp < calL) {calL = temp;}
     e2c:	21 97       	sbiw	r28, 0x01	; 1
     e2e:	20 97       	sbiw	r28, 0x00	; 0
     e30:	09 f7       	brne	.-62     	; 0xdf4 <JOY_calibrate+0x90>
     e32:	60 e0       	ldi	r22, 0x00	; 0
     e34:	70 e0       	ldi	r23, 0x00	; 0
     e36:	82 e0       	ldi	r24, 0x02	; 2
	OLED_bufferGoto(1,0);
	OLED_printString("JOY LEFT");
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	f6 d4       	rcall	.+2540   	; 0x1828 <OLED_bufferGoto>
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_bufferGoto(2,0);
     e3c:	8f ec       	ldi	r24, 0xCF	; 207
     e3e:	91 e0       	ldi	r25, 0x01	; 1
     e40:	52 d5       	rcall	.+2724   	; 0x18e6 <OLED_printString>
     e42:	2f ef       	ldi	r18, 0xFF	; 255
     e44:	8f ef       	ldi	r24, 0xFF	; 255
     e46:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("JOY UP");
     e48:	21 50       	subi	r18, 0x01	; 1
     e4a:	80 40       	sbci	r24, 0x00	; 0
     e4c:	90 40       	sbci	r25, 0x00	; 0
     e4e:	e1 f7       	brne	.-8      	; 0xe48 <JOY_calibrate+0xe4>
     e50:	00 c0       	rjmp	.+0      	; 0xe52 <JOY_calibrate+0xee>
     e52:	00 c0       	rjmp	.+0      	; 0xe54 <JOY_calibrate+0xf0>
     e54:	c4 e1       	ldi	r28, 0x14	; 20
     e56:	d0 e0       	ldi	r29, 0x00	; 0
     e58:	60 91 06 01 	lds	r22, 0x0106
     e5c:	70 91 07 01 	lds	r23, 0x0107
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	0e 94 48 13 	call	0x2690	; 0x2690 <ADC_request>
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     e66:	2f ef       	ldi	r18, 0xFF	; 255
     e68:	8f e1       	ldi	r24, 0x1F	; 31
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	21 50       	subi	r18, 0x01	; 1
     e6e:	80 40       	sbci	r24, 0x00	; 0
     e70:	90 40       	sbci	r25, 0x00	; 0
     e72:	e1 f7       	brne	.-8      	; 0xe6c <JOY_calibrate+0x108>
     e74:	00 c0       	rjmp	.+0      	; 0xe76 <JOY_calibrate+0x112>
     e76:	00 00       	nop
     e78:	80 91 06 01 	lds	r24, 0x0106
     e7c:	90 91 07 01 	lds	r25, 0x0107
     e80:	0e 94 70 13 	call	0x26e0	; 0x26e0 <ADC_read>
     e84:	90 91 0d 01 	lds	r25, 0x010D
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     e88:	98 17       	cp	r25, r24
     e8a:	10 f4       	brcc	.+4      	; 0xe90 <JOY_calibrate+0x12c>
     e8c:	80 93 0d 01 	sts	0x010D, r24
     e90:	21 97       	sbiw	r28, 0x01	; 1
		
		if(temp > calUp) {calUp = temp;}
     e92:	20 97       	sbiw	r28, 0x00	; 0
     e94:	09 f7       	brne	.-62     	; 0xe58 <JOY_calibrate+0xf4>
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	83 e0       	ldi	r24, 0x03	; 3
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	c4 d4       	rcall	.+2440   	; 0x1828 <OLED_bufferGoto>
	OLED_bufferGoto(2,0);
	OLED_printString("JOY UP");
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     ea0:	86 ed       	ldi	r24, 0xD6	; 214
     ea2:	91 e0       	ldi	r25, 0x01	; 1
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_bufferGoto(3,0);
     ea4:	20 d5       	rcall	.+2624   	; 0x18e6 <OLED_printString>
     ea6:	2f ef       	ldi	r18, 0xFF	; 255
     ea8:	8f ef       	ldi	r24, 0xFF	; 255
     eaa:	92 e0       	ldi	r25, 0x02	; 2
     eac:	21 50       	subi	r18, 0x01	; 1
     eae:	80 40       	sbci	r24, 0x00	; 0
	OLED_printString("JOY DOWN");
     eb0:	90 40       	sbci	r25, 0x00	; 0
     eb2:	e1 f7       	brne	.-8      	; 0xeac <JOY_calibrate+0x148>
     eb4:	00 c0       	rjmp	.+0      	; 0xeb6 <JOY_calibrate+0x152>
     eb6:	00 c0       	rjmp	.+0      	; 0xeb8 <JOY_calibrate+0x154>
     eb8:	c4 e1       	ldi	r28, 0x14	; 20
     eba:	d0 e0       	ldi	r29, 0x00	; 0
     ebc:	60 91 06 01 	lds	r22, 0x0106
     ec0:	70 91 07 01 	lds	r23, 0x0107
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	0e 94 48 13 	call	0x2690	; 0x2690 <ADC_request>
     eca:	2f ef       	ldi	r18, 0xFF	; 255
     ecc:	8f e1       	ldi	r24, 0x1F	; 31
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     ece:	91 e0       	ldi	r25, 0x01	; 1
     ed0:	21 50       	subi	r18, 0x01	; 1
     ed2:	80 40       	sbci	r24, 0x00	; 0
     ed4:	90 40       	sbci	r25, 0x00	; 0
     ed6:	e1 f7       	brne	.-8      	; 0xed0 <JOY_calibrate+0x16c>
     ed8:	00 c0       	rjmp	.+0      	; 0xeda <JOY_calibrate+0x176>
     eda:	00 00       	nop
     edc:	80 91 06 01 	lds	r24, 0x0106
     ee0:	90 91 07 01 	lds	r25, 0x0107
     ee4:	0e 94 70 13 	call	0x26e0	; 0x26e0 <ADC_read>
     ee8:	90 91 0c 01 	lds	r25, 0x010C
     eec:	89 17       	cp	r24, r25
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     eee:	10 f4       	brcc	.+4      	; 0xef4 <JOY_calibrate+0x190>
     ef0:	80 93 0c 01 	sts	0x010C, r24
     ef4:	21 97       	sbiw	r28, 0x01	; 1
     ef6:	20 97       	sbiw	r28, 0x00	; 0
     ef8:	09 f7       	brne	.-62     	; 0xebc <JOY_calibrate+0x158>
		
		if(temp < calDown) {calDown = temp;}
     efa:	20 91 0d 01 	lds	r18, 0x010D
     efe:	80 91 0c 01 	lds	r24, 0x010C
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	28 1b       	sub	r18, r24
     f06:	31 09       	sbc	r19, r1
	OLED_bufferGoto(3,0);
	OLED_printString("JOY DOWN");
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     f08:	c9 01       	movw	r24, r18
     f0a:	99 23       	and	r25, r25
	}
	
	
	//printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
	
	meanVert = (calUp - calDown)/2;
     f0c:	0c f4       	brge	.+2      	; 0xf10 <JOY_calibrate+0x1ac>
     f0e:	01 96       	adiw	r24, 0x01	; 1
     f10:	95 95       	asr	r25
     f12:	87 95       	ror	r24
     f14:	80 93 0b 01 	sts	0x010B, r24
     f18:	20 91 0f 01 	lds	r18, 0x010F
     f1c:	80 91 0e 01 	lds	r24, 0x010E
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	28 1b       	sub	r18, r24
     f24:	31 09       	sbc	r19, r1
     f26:	c9 01       	movw	r24, r18
     f28:	99 23       	and	r25, r25
	meanHor = (calR - calL)/2;
     f2a:	0c f4       	brge	.+2      	; 0xf2e <JOY_calibrate+0x1ca>
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	95 95       	asr	r25
     f30:	87 95       	ror	r24
     f32:	80 93 0a 01 	sts	0x010A, r24
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	84 e0       	ldi	r24, 0x04	; 4
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	74 d4       	rcall	.+2280   	; 0x1828 <OLED_bufferGoto>
     f40:	8f ed       	ldi	r24, 0xDF	; 223
     f42:	91 e0       	ldi	r25, 0x01	; 1
     f44:	d0 d4       	rcall	.+2464   	; 0x18e6 <OLED_printString>
     f46:	2f ef       	ldi	r18, 0xFF	; 255
	
	OLED_bufferGoto(4,0);
     f48:	8f ef       	ldi	r24, 0xFF	; 255
     f4a:	9e e0       	ldi	r25, 0x0E	; 14
     f4c:	21 50       	subi	r18, 0x01	; 1
     f4e:	80 40       	sbci	r24, 0x00	; 0
     f50:	90 40       	sbci	r25, 0x00	; 0
     f52:	e1 f7       	brne	.-8      	; 0xf4c <JOY_calibrate+0x1e8>
	OLED_printString("CALIB DONE");
     f54:	00 c0       	rjmp	.+0      	; 0xf56 <JOY_calibrate+0x1f2>
     f56:	00 00       	nop
     f58:	df 91       	pop	r29
     f5a:	cf 91       	pop	r28
     f5c:	08 95       	ret

00000f5e <JOY_requestCurrentPosition>:
     f5e:	88 37       	cpi	r24, 0x78	; 120
     f60:	41 f4       	brne	.+16     	; 0xf72 <JOY_requestCurrentPosition+0x14>
     f62:	60 91 06 01 	lds	r22, 0x0106
     f66:	70 91 07 01 	lds	r23, 0x0107
     f6a:	82 e0       	ldi	r24, 0x02	; 2
     f6c:	0c 94 48 13 	jmp	0x2690	; 0x2690 <ADC_request>
	//printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
	_delay_ms(1000);
}
     f70:	08 95       	ret
     f72:	89 37       	cpi	r24, 0x79	; 121
	if(axis == 'x')
	{
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
     f74:	39 f4       	brne	.+14     	; 0xf84 <JOY_requestCurrentPosition+0x26>
	{
		ADC_request(Y_channel, adc_ext_ram);
     f76:	60 91 06 01 	lds	r22, 0x0106
     f7a:	70 91 07 01 	lds	r23, 0x0107
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	0c 94 48 13 	jmp	0x2690	; 0x2690 <ADC_request>
     f84:	08 95       	ret

00000f86 <JOY_updatePosition>:
// 2.) Calculate relative value X_per for position (-100% .. 100%) and write
// them to the current position.
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
     f86:	88 37       	cpi	r24, 0x78	; 120
     f88:	09 f5       	brne	.+66     	; 0xfcc <JOY_updatePosition+0x46>
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     f8a:	80 91 06 01 	lds	r24, 0x0106
     f8e:	90 91 07 01 	lds	r25, 0x0107
     f92:	0e 94 70 13 	call	0x26e0	; 0x26e0 <ADC_read>
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	90 93 ef 02 	sts	0x02EF, r25
     f9c:	80 93 ee 02 	sts	0x02EE, r24
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     fa0:	20 91 0a 01 	lds	r18, 0x010A
     fa4:	60 91 0a 01 	lds	r22, 0x010A
     fa8:	ac 01       	movw	r20, r24
     faa:	42 1b       	sub	r20, r18
     fac:	51 09       	sbc	r21, r1
     fae:	9a 01       	movw	r18, r20
     fb0:	44 e6       	ldi	r20, 0x64	; 100
     fb2:	42 9f       	mul	r20, r18
     fb4:	c0 01       	movw	r24, r0
     fb6:	43 9f       	mul	r20, r19
     fb8:	90 0d       	add	r25, r0
     fba:	11 24       	eor	r1, r1
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__divmodhi4>
     fc2:	70 93 f3 02 	sts	0x02F3, r23
     fc6:	60 93 f2 02 	sts	0x02F2, r22
     fca:	08 95       	ret
	}

	else if(axis == 'y')
     fcc:	89 37       	cpi	r24, 0x79	; 121
     fce:	01 f5       	brne	.+64     	; 0x1010 <JOY_updatePosition+0x8a>
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     fd0:	80 91 06 01 	lds	r24, 0x0106
     fd4:	90 91 07 01 	lds	r25, 0x0107
     fd8:	0e 94 70 13 	call	0x26e0	; 0x26e0 <ADC_read>
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	90 93 f1 02 	sts	0x02F1, r25
     fe2:	80 93 f0 02 	sts	0x02F0, r24
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     fe6:	20 91 0b 01 	lds	r18, 0x010B
     fea:	60 91 0b 01 	lds	r22, 0x010B
     fee:	ac 01       	movw	r20, r24
     ff0:	42 1b       	sub	r20, r18
     ff2:	51 09       	sbc	r21, r1
     ff4:	9a 01       	movw	r18, r20
     ff6:	44 e6       	ldi	r20, 0x64	; 100
     ff8:	42 9f       	mul	r20, r18
     ffa:	c0 01       	movw	r24, r0
     ffc:	43 9f       	mul	r20, r19
     ffe:	90 0d       	add	r25, r0
    1000:	11 24       	eor	r1, r1
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	0e 94 73 13 	call	0x26e6	; 0x26e6 <__divmodhi4>
    1008:	70 93 f5 02 	sts	0x02F5, r23
    100c:	60 93 f4 02 	sts	0x02F4, r22
    1010:	08 95       	ret

00001012 <JOY_calculateDirection>:
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
    1012:	80 91 f2 02 	lds	r24, 0x02F2
    1016:	90 91 f3 02 	lds	r25, 0x02F3
    101a:	8b 35       	cpi	r24, 0x5B	; 91
    101c:	91 05       	cpc	r25, r1
    101e:	24 f0       	brlt	.+8      	; 0x1028 <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
    1020:	83 e0       	ldi	r24, 0x03	; 3
    1022:	80 93 ed 02 	sts	0x02ED, r24
    1026:	08 95       	ret
	else if(currentPosition.X_per < -90) {
    1028:	86 3a       	cpi	r24, 0xA6	; 166
    102a:	9f 4f       	sbci	r25, 0xFF	; 255
    102c:	24 f4       	brge	.+8      	; 0x1036 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
    102e:	84 e0       	ldi	r24, 0x04	; 4
    1030:	80 93 ed 02 	sts	0x02ED, r24
    1034:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
    1036:	80 91 f4 02 	lds	r24, 0x02F4
    103a:	90 91 f5 02 	lds	r25, 0x02F5
    103e:	8b 35       	cpi	r24, 0x5B	; 91
    1040:	91 05       	cpc	r25, r1
    1042:	24 f0       	brlt	.+8      	; 0x104c <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	80 93 ed 02 	sts	0x02ED, r24
    104a:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
    104c:	86 3a       	cpi	r24, 0xA6	; 166
    104e:	9f 4f       	sbci	r25, 0xFF	; 255
    1050:	24 f4       	brge	.+8      	; 0x105a <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	80 93 ed 02 	sts	0x02ED, r24
    1058:	08 95       	ret
	else{currentDirection = CENTRE;}
    105a:	10 92 ed 02 	sts	0x02ED, r1
    105e:	08 95       	ret

00001060 <JOY_getPosition>:

//------------------------------------------------------------------------------
// This function returns the current position of the Joystick.
// It is a struct with the four parameters X_abs, Y_abs, X_per and Y_per
JOY_position_t JOY_getPosition()
{
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	28 97       	sbiw	r28, 0x08	; 8
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	cd bf       	out	0x3d, r28	; 61
	JOY_requestCurrentPosition('x');
    1074:	88 e7       	ldi	r24, 0x78	; 120
    1076:	73 df       	rcall	.-282    	; 0xf5e <JOY_requestCurrentPosition>
    1078:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    107a:	8a 95       	dec	r24
    107c:	f1 f7       	brne	.-4      	; 0x107a <JOY_getPosition+0x1a>
    107e:	00 00       	nop
    1080:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
    1082:	81 df       	rcall	.-254    	; 0xf86 <JOY_updatePosition>
    1084:	89 e7       	ldi	r24, 0x79	; 121
    1086:	6b df       	rcall	.-298    	; 0xf5e <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
    1088:	82 e6       	ldi	r24, 0x62	; 98
    108a:	8a 95       	dec	r24
    108c:	f1 f7       	brne	.-4      	; 0x108a <JOY_getPosition+0x2a>
    108e:	00 00       	nop
    1090:	89 e7       	ldi	r24, 0x79	; 121
    1092:	79 df       	rcall	.-270    	; 0xf86 <JOY_updatePosition>
    1094:	88 e0       	ldi	r24, 0x08	; 8
	_delay_us(delayConversion);
	JOY_updatePosition('y');
    1096:	ee ee       	ldi	r30, 0xEE	; 238
    1098:	f2 e0       	ldi	r31, 0x02	; 2
    109a:	de 01       	movw	r26, r28
	return currentPosition;
    109c:	11 96       	adiw	r26, 0x01	; 1
    109e:	01 90       	ld	r0, Z+
    10a0:	0d 92       	st	X+, r0
    10a2:	8a 95       	dec	r24
    10a4:	e1 f7       	brne	.-8      	; 0x109e <JOY_getPosition+0x3e>
    10a6:	29 81       	ldd	r18, Y+1	; 0x01
    10a8:	3a 81       	ldd	r19, Y+2	; 0x02
    10aa:	4b 81       	ldd	r20, Y+3	; 0x03
    10ac:	5c 81       	ldd	r21, Y+4	; 0x04
    10ae:	6d 81       	ldd	r22, Y+5	; 0x05
    10b0:	7e 81       	ldd	r23, Y+6	; 0x06
    10b2:	8f 81       	ldd	r24, Y+7	; 0x07
    10b4:	98 85       	ldd	r25, Y+8	; 0x08
    10b6:	28 96       	adiw	r28, 0x08	; 8
    10b8:	0f b6       	in	r0, 0x3f	; 63
}
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	08 95       	ret

000010c8 <JOY_getDirection>:
    10c8:	88 e7       	ldi	r24, 0x78	; 120
    10ca:	49 df       	rcall	.-366    	; 0xf5e <JOY_requestCurrentPosition>
    10cc:	82 e6       	ldi	r24, 0x62	; 98
    10ce:	8a 95       	dec	r24
    10d0:	f1 f7       	brne	.-4      	; 0x10ce <JOY_getDirection+0x6>
    10d2:	00 00       	nop
    10d4:	88 e7       	ldi	r24, 0x78	; 120
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
	_delay_us(delayConversion);
	JOY_updatePosition('x');
    10d6:	57 df       	rcall	.-338    	; 0xf86 <JOY_updatePosition>
    10d8:	89 e7       	ldi	r24, 0x79	; 121
    10da:	41 df       	rcall	.-382    	; 0xf5e <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
    10dc:	82 e6       	ldi	r24, 0x62	; 98
    10de:	8a 95       	dec	r24
    10e0:	f1 f7       	brne	.-4      	; 0x10de <JOY_getDirection+0x16>
    10e2:	00 00       	nop
    10e4:	89 e7       	ldi	r24, 0x79	; 121
    10e6:	4f df       	rcall	.-354    	; 0xf86 <JOY_updatePosition>
    10e8:	94 df       	rcall	.-216    	; 0x1012 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
    10ea:	80 91 ed 02 	lds	r24, 0x02ED
    10ee:	08 95       	ret

000010f0 <MCP2515_reset>:
	//printf("finished MCP2515_init\n");
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
    10f0:	cf 93       	push	r28
    10f2:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
    10f4:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <SPI_activateSlave>
	SPI_send(MCP_RESET);
    10f8:	80 ec       	ldi	r24, 0xC0	; 192
    10fa:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <SPI_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10fe:	8c ec       	ldi	r24, 0xCC	; 204
    1100:	94 e0       	ldi	r25, 0x04	; 4
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	f1 f7       	brne	.-4      	; 0x1102 <MCP2515_reset+0x12>
    1106:	00 c0       	rjmp	.+0      	; 0x1108 <MCP2515_reset+0x18>
    1108:	00 00       	nop
	_delay_ms(1);
	SPI_deactivateSlave(slave);
    110a:	8c 2f       	mov	r24, r28
    110c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <SPI_deactivateSlave>
    1110:	8f ef       	ldi	r24, 0xFF	; 255
    1112:	9f e2       	ldi	r25, 0x2F	; 47
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	f1 f7       	brne	.-4      	; 0x1114 <MCP2515_reset+0x24>
    1118:	00 c0       	rjmp	.+0      	; 0x111a <MCP2515_reset+0x2a>
    111a:	00 00       	nop
	_delay_ms(10);
}
    111c:	cf 91       	pop	r28
    111e:	08 95       	ret

00001120 <MCP2515_read>:

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	c8 2f       	mov	r28, r24
    1126:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
    1128:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <SPI_activateSlave>
	SPI_send(MCP_READ);
    112c:	83 e0       	ldi	r24, 0x03	; 3
    112e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <SPI_send>
    1132:	8c ec       	ldi	r24, 0xCC	; 204
    1134:	94 e0       	ldi	r25, 0x04	; 4
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	f1 f7       	brne	.-4      	; 0x1136 <MCP2515_read+0x16>
    113a:	00 c0       	rjmp	.+0      	; 0x113c <MCP2515_read+0x1c>
    113c:	00 00       	nop
	_delay_ms(1);
	SPI_send(address);
    113e:	8d 2f       	mov	r24, r29
    1140:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <SPI_send>
	
	uint8_t result;
	result = SPI_receive();
    1144:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <SPI_receive>
    1148:	d8 2f       	mov	r29, r24
	
	SPI_deactivateSlave(slave);
    114a:	8c 2f       	mov	r24, r28
    114c:	0e 94 ee 10 	call	0x21dc	; 0x21dc <SPI_deactivateSlave>
	return result;
}
    1150:	8d 2f       	mov	r24, r29
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	08 95       	ret

00001158 <MCP2515_init>:



uint8_t MCP2515_init()
{
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	ca df       	rcall	.-108    	; 0x10f0 <MCP2515_reset>
    115c:	6e e0       	ldi	r22, 0x0E	; 14
	// Self-test
	uint8_t value;
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
    115e:	80 e0       	ldi	r24, 0x00	; 0
    1160:	df df       	rcall	.-66     	; 0x1120 <MCP2515_read>
    1162:	98 2f       	mov	r25, r24
    1164:	90 7e       	andi	r25, 0xE0	; 224
	//printf("CANSTAT: %#x\n", value);
	if((value & MODE_MASK) != MODE_CONFIG) 
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 38       	cpi	r25, 0x80	; 128
    116a:	09 f4       	brne	.+2      	; 0x116e <MCP2515_init+0x16>
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	08 95       	ret

00001170 <MCP2515_write>:
    1170:	1f 93       	push	r17
		return 1;
	}
	//
	//printf("finished MCP2515_init\n");
	return 0;
}
    1172:	cf 93       	push	r28
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_write(SPI_SLAVES slave, uint8_t address, uint8_t data)
{
    1174:	df 93       	push	r29
    1176:	c8 2f       	mov	r28, r24
    1178:	16 2f       	mov	r17, r22
    117a:	d4 2f       	mov	r29, r20
	SPI_activateSlave(slave);
    117c:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <SPI_activateSlave>
	SPI_send(MCP_WRITE);
    1180:	82 e0       	ldi	r24, 0x02	; 2
    1182:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <SPI_send>
	SPI_send(address);
    1186:	81 2f       	mov	r24, r17
    1188:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <SPI_send>
	SPI_send(data);
    118c:	8d 2f       	mov	r24, r29
    118e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <SPI_send>
	SPI_deactivateSlave(slave);
    1192:	8c 2f       	mov	r24, r28
    1194:	0e 94 ee 10 	call	0x21dc	; 0x21dc <SPI_deactivateSlave>
}
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	1f 91       	pop	r17
    119e:	08 95       	ret

000011a0 <MCP2515_bitModify>:
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_bitModify(SPI_SLAVES slave, uint8_t register2change, uint8_t mask, uint8_t newValue)
{
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	c8 2f       	mov	r28, r24
    11aa:	06 2f       	mov	r16, r22
    11ac:	14 2f       	mov	r17, r20
    11ae:	d2 2f       	mov	r29, r18
	SPI_activateSlave(slave);
    11b0:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <SPI_activateSlave>
	
	SPI_send(MCP_BITMOD);
    11b4:	85 e0       	ldi	r24, 0x05	; 5
    11b6:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <SPI_send>
	SPI_send(register2change);
    11ba:	80 2f       	mov	r24, r16
    11bc:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <SPI_send>
	SPI_send(mask);
    11c0:	81 2f       	mov	r24, r17
    11c2:	fe d7       	rcall	.+4092   	; 0x21c0 <SPI_send>
    11c4:	8d 2f       	mov	r24, r29
	SPI_send(newValue);
    11c6:	fc d7       	rcall	.+4088   	; 0x21c0 <SPI_send>
    11c8:	8c 2f       	mov	r24, r28
    11ca:	0e 94 ee 10 	call	0x21dc	; 0x21dc <SPI_deactivateSlave>
	
	SPI_deactivateSlave(slave);
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
}
    11d2:	1f 91       	pop	r17
    11d4:	0f 91       	pop	r16
    11d6:	08 95       	ret

000011d8 <startGame>:
static OP_STATE* actualState;
static INPUT_MODE* actualInputMode;
//******************************************************************************************

void startGame()
{
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
	*actualState = GAME;
    11dc:	e0 91 f8 02 	lds	r30, 0x02F8
    11e0:	f0 91 f9 02 	lds	r31, 0x02F9
    11e4:	10 82       	st	Z, r1
	OLED_clear();
    11e6:	c9 d2       	rcall	.+1426   	; 0x177a <OLED_clear>
    11e8:	6c e2       	ldi	r22, 0x2C	; 44
	OLED_bufferGoto(0,44);
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	1b d3       	rcall	.+1590   	; 0x1828 <OLED_bufferGoto>
    11f2:	8a ee       	ldi	r24, 0xEA	; 234
    11f4:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("START");
    11f6:	77 d3       	rcall	.+1774   	; 0x18e6 <OLED_printString>
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	70 e0       	ldi	r23, 0x00	; 0
    11fc:	83 e0       	ldi	r24, 0x03	; 3
	
 	OLED_bufferGoto(3,0);
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	13 d3       	rcall	.+1574   	; 0x1828 <OLED_bufferGoto>
    1202:	c0 e1       	ldi	r28, 0x10	; 16
    1204:	d0 e0       	ldi	r29, 0x00	; 0
    1206:	81 e9       	ldi	r24, 0x91	; 145
    1208:	91 e0       	ldi	r25, 0x01	; 1
    120a:	6d d3       	rcall	.+1754   	; 0x18e6 <OLED_printString>
    120c:	80 e0       	ldi	r24, 0x00	; 0
 	
 	for(int i = 16; i > 0; i--)
 	{
	 	OLED_printString("*");
    120e:	90 ef       	ldi	r25, 0xF0	; 240
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	f1 f7       	brne	.-4      	; 0x1210 <startGame+0x38>
    1214:	21 97       	sbiw	r28, 0x01	; 1
    1216:	20 97       	sbiw	r28, 0x00	; 0
    1218:	b1 f7       	brne	.-20     	; 0x1206 <startGame+0x2e>
    121a:	9f ef       	ldi	r25, 0xFF	; 255
    121c:	2f e7       	ldi	r18, 0x7F	; 127
    121e:	87 e0       	ldi	r24, 0x07	; 7
	OLED_bufferGoto(0,44);
	OLED_printString("START");
	
 	OLED_bufferGoto(3,0);
 	
 	for(int i = 16; i > 0; i--)
    1220:	91 50       	subi	r25, 0x01	; 1
    1222:	20 40       	sbci	r18, 0x00	; 0
    1224:	80 40       	sbci	r24, 0x00	; 0
    1226:	e1 f7       	brne	.-8      	; 0x1220 <startGame+0x48>
    1228:	00 c0       	rjmp	.+0      	; 0x122a <startGame+0x52>
    122a:	00 00       	nop
    122c:	6c e1       	ldi	r22, 0x1C	; 28
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	86 e0       	ldi	r24, 0x06	; 6
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	f9 d2       	rcall	.+1522   	; 0x1828 <OLED_bufferGoto>
	 	OLED_printString("*");
	 	_delay_ms(50);
 	}

	_delay_ms(500);
	OLED_bufferGoto(6,28);
    1236:	80 ef       	ldi	r24, 0xF0	; 240
    1238:	91 e0       	ldi	r25, 0x01	; 1
    123a:	55 d3       	rcall	.+1706   	; 0x18e6 <OLED_printString>
    123c:	9f ef       	ldi	r25, 0xFF	; 255
    123e:	2f ef       	ldi	r18, 0xFF	; 255
    1240:	8d e1       	ldi	r24, 0x1D	; 29
	OLED_printString("GOOD LUCK");
    1242:	91 50       	subi	r25, 0x01	; 1
    1244:	20 40       	sbci	r18, 0x00	; 0
    1246:	80 40       	sbci	r24, 0x00	; 0
    1248:	e1 f7       	brne	.-8      	; 0x1242 <startGame+0x6a>
    124a:	00 c0       	rjmp	.+0      	; 0x124c <startGame+0x74>
    124c:	00 00       	nop
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <MENU_addMenuItem>:
    1254:	cf 92       	push	r12
    1256:	df 92       	push	r13
    1258:	ef 92       	push	r14
    125a:	ff 92       	push	r15
	_delay_ms(2000);
}
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	cf 93       	push	r28
	modeMenu->children[2] = currItem;
	modeMenu->children[2]->functionPtr = &MENU_updateState;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
    1262:	df 93       	push	r29
    1264:	8c 01       	movw	r16, r24
    1266:	7b 01       	movw	r14, r22
    1268:	6a 01       	movw	r12, r20
    126a:	e9 01       	movw	r28, r18
	if(currItem != NULL)
    126c:	80 91 fd 02 	lds	r24, 0x02FD
    1270:	90 91 fe 02 	lds	r25, 0x02FE
    1274:	89 2b       	or	r24, r25
    1276:	21 f0       	breq	.+8      	; 0x1280 <MENU_addMenuItem+0x2c>
	{
		printf("Creating next item...\n");
    1278:	8a ef       	ldi	r24, 0xFA	; 250
    127a:	91 e0       	ldi	r25, 0x01	; 1
    127c:	0e 94 21 15 	call	0x2a42	; 0x2a42 <puts>
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
    1280:	8c e0       	ldi	r24, 0x0C	; 12
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	0e 94 9a 13 	call	0x2734	; 0x2734 <malloc>
    1288:	fc 01       	movw	r30, r24
    128a:	90 93 fe 02 	sts	0x02FE, r25
    128e:	80 93 fd 02 	sts	0x02FD, r24
	currItem->parentMenu = parentMenu;
    1292:	f3 82       	std	Z+3, r15	; 0x03
    1294:	e2 82       	std	Z+2, r14	; 0x02
	currItem->name = name;
    1296:	11 83       	std	Z+1, r17	; 0x01
    1298:	00 83       	st	Z, r16
	
	if(hasChildMenu)
    129a:	cd 2b       	or	r28, r29
    129c:	39 f0       	breq	.+14     	; 0x12ac <MENU_addMenuItem+0x58>
	{
		currItem->childMenu = childMenu;
    129e:	d5 82       	std	Z+5, r13	; 0x05
    12a0:	c4 82       	std	Z+4, r12	; 0x04
		currItem->hasChildMenu = 1;
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	97 83       	std	Z+7, r25	; 0x07
    12a8:	86 83       	std	Z+6, r24	; 0x06
    12aa:	04 c0       	rjmp	.+8      	; 0x12b4 <MENU_addMenuItem+0x60>
	}
	else
	{
		currItem->childMenu = NULL;
    12ac:	15 82       	std	Z+5, r1	; 0x05
    12ae:	14 82       	std	Z+4, r1	; 0x04
		currItem->hasChildMenu = 0;
    12b0:	17 82       	std	Z+7, r1	; 0x07
    12b2:	16 82       	std	Z+6, r1	; 0x06
	}
}
    12b4:	df 91       	pop	r29
    12b6:	cf 91       	pop	r28
    12b8:	1f 91       	pop	r17
    12ba:	0f 91       	pop	r16
    12bc:	ff 90       	pop	r15
    12be:	ef 90       	pop	r14
    12c0:	df 90       	pop	r13
    12c2:	cf 90       	pop	r12
    12c4:	08 95       	ret

000012c6 <MENU_buildMenus>:
	OLED_printString("GOOD LUCK");
	_delay_ms(2000);
}

void MENU_buildMenus()
{
    12c6:	cf 93       	push	r28
    12c8:	df 93       	push	r29
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
    12ca:	86 e1       	ldi	r24, 0x16	; 22
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	0e 94 9a 13 	call	0x2734	; 0x2734 <malloc>
    12d2:	ec 01       	movw	r28, r24
    12d4:	90 93 04 03 	sts	0x0304, r25
    12d8:	80 93 03 03 	sts	0x0303, r24
	mainMenu->menuName = "MainMenu";
    12dc:	80 e1       	ldi	r24, 0x10	; 16
    12de:	92 e0       	ldi	r25, 0x02	; 2
    12e0:	99 83       	std	Y+1, r25	; 0x01
    12e2:	88 83       	st	Y, r24
	mainMenu->parentMenu = NULL;
    12e4:	1d 8a       	std	Y+21, r1	; 0x15
    12e6:	1c 8a       	std	Y+20, r1	; 0x14
	mainMenu->noChilds = 4;
    12e8:	84 e0       	ldi	r24, 0x04	; 4
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	9b 83       	std	Y+3, r25	; 0x03
    12ee:	8a 83       	std	Y+2, r24	; 0x02
	
	//create DifficultyMenu
	modeMenu = malloc(sizeof(menuNode_t));
    12f0:	86 e1       	ldi	r24, 0x16	; 22
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	0e 94 9a 13 	call	0x2734	; 0x2734 <malloc>
    12f8:	fc 01       	movw	r30, r24
    12fa:	90 93 02 03 	sts	0x0302, r25
    12fe:	80 93 01 03 	sts	0x0301, r24
	modeMenu->menuName = "ModeMenu";
    1302:	89 e1       	ldi	r24, 0x19	; 25
    1304:	92 e0       	ldi	r25, 0x02	; 2
    1306:	91 83       	std	Z+1, r25	; 0x01
    1308:	80 83       	st	Z, r24
	modeMenu->parentMenu = mainMenu;
    130a:	d5 8b       	std	Z+21, r29	; 0x15
    130c:	c4 8b       	std	Z+20, r28	; 0x14
	modeMenu->noChilds = 3;
    130e:	83 e0       	ldi	r24, 0x03	; 3
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	93 83       	std	Z+3, r25	; 0x03
    1314:	82 83       	std	Z+2, r24	; 0x02
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	40 e0       	ldi	r20, 0x00	; 0
    131c:	50 e0       	ldi	r21, 0x00	; 0
    131e:	be 01       	movw	r22, r28
    1320:	82 e2       	ldi	r24, 0x22	; 34
    1322:	92 e0       	ldi	r25, 0x02	; 2
    1324:	97 df       	rcall	.-210    	; 0x1254 <MENU_addMenuItem>
    1326:	60 91 03 03 	lds	r22, 0x0303
	mainMenu->children[0] = currItem;
    132a:	70 91 04 03 	lds	r23, 0x0304
    132e:	e0 91 fd 02 	lds	r30, 0x02FD
    1332:	f0 91 fe 02 	lds	r31, 0x02FE
    1336:	db 01       	movw	r26, r22
    1338:	15 96       	adiw	r26, 0x05	; 5
    133a:	fc 93       	st	X, r31
    133c:	ee 93       	st	-X, r30
    133e:	14 97       	sbiw	r26, 0x04	; 4
    1340:	8c ee       	ldi	r24, 0xEC	; 236
	mainMenu->children[0]->functionPtr = &startGame;
    1342:	98 e0       	ldi	r25, 0x08	; 8
    1344:	93 87       	std	Z+11, r25	; 0x0b
    1346:	82 87       	std	Z+10, r24	; 0x0a
    1348:	40 91 01 03 	lds	r20, 0x0301
	
	MENU_addMenuItem("Mode", mainMenu, modeMenu, 1);
    134c:	50 91 02 03 	lds	r21, 0x0302
    1350:	21 e0       	ldi	r18, 0x01	; 1
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	8b e2       	ldi	r24, 0x2B	; 43
    1356:	92 e0       	ldi	r25, 0x02	; 2
    1358:	7d df       	rcall	.-262    	; 0x1254 <MENU_addMenuItem>
    135a:	60 91 03 03 	lds	r22, 0x0303
	mainMenu->children[1] = currItem;
    135e:	70 91 04 03 	lds	r23, 0x0304
    1362:	80 91 fd 02 	lds	r24, 0x02FD
    1366:	90 91 fe 02 	lds	r25, 0x02FE
    136a:	fb 01       	movw	r30, r22
    136c:	97 83       	std	Z+7, r25	; 0x07
    136e:	86 83       	std	Z+6, r24	; 0x06
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
	
	//MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
	//mainMenu->children[2] = currItem;
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	80 e3       	ldi	r24, 0x30	; 48
    137a:	92 e0       	ldi	r25, 0x02	; 2
    137c:	6b df       	rcall	.-298    	; 0x1254 <MENU_addMenuItem>
    137e:	60 91 03 03 	lds	r22, 0x0303
    1382:	70 91 04 03 	lds	r23, 0x0304
	mainMenu->children[2] = currItem;
    1386:	e0 91 fd 02 	lds	r30, 0x02FD
    138a:	f0 91 fe 02 	lds	r31, 0x02FE
    138e:	db 01       	movw	r26, r22
    1390:	19 96       	adiw	r26, 0x09	; 9
    1392:	fc 93       	st	X, r31
    1394:	ee 93       	st	-X, r30
    1396:	18 97       	sbiw	r26, 0x08	; 8
    1398:	82 eb       	ldi	r24, 0xB2	; 178
    139a:	96 e0       	ldi	r25, 0x06	; 6
    139c:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[2]->functionPtr = &JOY_calibrate; //assign function to this item
    139e:	82 87       	std	Z+10, r24	; 0x0a
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
    13a6:	50 e0       	ldi	r21, 0x00	; 0
    13a8:	8a e3       	ldi	r24, 0x3A	; 58
    13aa:	92 e0       	ldi	r25, 0x02	; 2
    13ac:	53 df       	rcall	.-346    	; 0x1254 <MENU_addMenuItem>
    13ae:	e0 91 fd 02 	lds	r30, 0x02FD
    13b2:	f0 91 fe 02 	lds	r31, 0x02FE
	mainMenu->children[3] = currItem;
    13b6:	a0 91 03 03 	lds	r26, 0x0303
    13ba:	b0 91 04 03 	lds	r27, 0x0304
    13be:	1b 96       	adiw	r26, 0x0b	; 11
    13c0:	fc 93       	st	X, r31
    13c2:	ee 93       	st	-X, r30
    13c4:	1a 97       	sbiw	r26, 0x0a	; 10
    13c6:	8a e4       	ldi	r24, 0x4A	; 74
    13c8:	9b e0       	ldi	r25, 0x0B	; 11
    13ca:	93 87       	std	Z+11, r25	; 0x0b
    13cc:	82 87       	std	Z+10, r24	; 0x0a
	mainMenu->children[3]->functionPtr = &MENU_printInfo;
    13ce:	10 92 fe 02 	sts	0x02FE, r1
    13d2:	10 92 fd 02 	sts	0x02FD, r1
	
	currItem = NULL;
    13d6:	60 91 01 03 	lds	r22, 0x0301
    13da:	70 91 02 03 	lds	r23, 0x0302
	
	MENU_addMenuItem("Slider", modeMenu, NULL, 0);
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	8f e3       	ldi	r24, 0x3F	; 63
    13e8:	92 e0       	ldi	r25, 0x02	; 2
    13ea:	34 df       	rcall	.-408    	; 0x1254 <MENU_addMenuItem>
    13ec:	60 91 01 03 	lds	r22, 0x0301
    13f0:	70 91 02 03 	lds	r23, 0x0302
    13f4:	e0 91 fd 02 	lds	r30, 0x02FD
	modeMenu->children[0] = currItem;
    13f8:	f0 91 fe 02 	lds	r31, 0x02FE
    13fc:	db 01       	movw	r26, r22
    13fe:	15 96       	adiw	r26, 0x05	; 5
    1400:	fc 93       	st	X, r31
    1402:	ee 93       	st	-X, r30
    1404:	14 97       	sbiw	r26, 0x04	; 4
    1406:	c6 e7       	ldi	r28, 0x76	; 118
    1408:	db e0       	ldi	r29, 0x0B	; 11
    140a:	d3 87       	std	Z+11, r29	; 0x0b
    140c:	c2 87       	std	Z+10, r28	; 0x0a
    140e:	20 e0       	ldi	r18, 0x00	; 0
	modeMenu->children[0]->functionPtr = &MENU_updateState;
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	40 e0       	ldi	r20, 0x00	; 0
    1414:	50 e0       	ldi	r21, 0x00	; 0
    1416:	86 e4       	ldi	r24, 0x46	; 70
	
	MENU_addMenuItem("Joystick", modeMenu, NULL, 0);
    1418:	92 e0       	ldi	r25, 0x02	; 2
    141a:	1c df       	rcall	.-456    	; 0x1254 <MENU_addMenuItem>
    141c:	60 91 01 03 	lds	r22, 0x0301
    1420:	70 91 02 03 	lds	r23, 0x0302
    1424:	e0 91 fd 02 	lds	r30, 0x02FD
	modeMenu->children[1] = currItem;
    1428:	f0 91 fe 02 	lds	r31, 0x02FE
    142c:	db 01       	movw	r26, r22
    142e:	17 96       	adiw	r26, 0x07	; 7
    1430:	fc 93       	st	X, r31
    1432:	ee 93       	st	-X, r30
    1434:	16 97       	sbiw	r26, 0x06	; 6
    1436:	d3 87       	std	Z+11, r29	; 0x0b
    1438:	c2 87       	std	Z+10, r28	; 0x0a
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	50 e0       	ldi	r21, 0x00	; 0
	modeMenu->children[1]->functionPtr = &MENU_updateState;
    1442:	8f e4       	ldi	r24, 0x4F	; 79
    1444:	92 e0       	ldi	r25, 0x02	; 2
	
	MENU_addMenuItem("PC", modeMenu, NULL, 0);
    1446:	06 df       	rcall	.-500    	; 0x1254 <MENU_addMenuItem>
    1448:	e0 91 fd 02 	lds	r30, 0x02FD
    144c:	f0 91 fe 02 	lds	r31, 0x02FE
    1450:	a0 91 01 03 	lds	r26, 0x0301
    1454:	b0 91 02 03 	lds	r27, 0x0302
	modeMenu->children[2] = currItem;
    1458:	19 96       	adiw	r26, 0x09	; 9
    145a:	fc 93       	st	X, r31
    145c:	ee 93       	st	-X, r30
    145e:	18 97       	sbiw	r26, 0x08	; 8
    1460:	d3 87       	std	Z+11, r29	; 0x0b
    1462:	c2 87       	std	Z+10, r28	; 0x0a
    1464:	df 91       	pop	r29
    1466:	cf 91       	pop	r28
    1468:	08 95       	ret

0000146a <MENU_printMenuItem>:
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
	modeMenu->children[2]->functionPtr = &MENU_updateState;
    146e:	ec 01       	movw	r28, r24
    1470:	cb 01       	movw	r24, r22
}
    1472:	20 97       	sbiw	r28, 0x00	; 0
    1474:	39 f0       	breq	.+14     	; 0x1484 <MENU_printMenuItem+0x1a>
    1476:	6a e0       	ldi	r22, 0x0A	; 10

void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_bufferGoto(lineNumber, menuFrameOffset);
    1478:	70 e0       	ldi	r23, 0x00	; 0
    147a:	d6 d1       	rcall	.+940    	; 0x1828 <OLED_bufferGoto>
    147c:	88 81       	ld	r24, Y
		OLED_printString(item->name);
    147e:	99 81       	ldd	r25, Y+1	; 0x01
    1480:	32 d2       	rcall	.+1124   	; 0x18e6 <OLED_printString>
    1482:	08 c0       	rjmp	.+16     	; 0x1494 <MENU_printMenuItem+0x2a>
    1484:	82 e5       	ldi	r24, 0x52	; 82
    1486:	92 e0       	ldi	r25, 0x02	; 2
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
    1488:	9f 93       	push	r25
    148a:	8f 93       	push	r24
    148c:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <printf>
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
	}
}
    1498:	08 95       	ret

0000149a <MENU_printMenu>:
    149a:	cf 92       	push	r12
    149c:	df 92       	push	r13

void MENU_printMenu(menuNode_t* menu, int noElements)
{
    149e:	ef 92       	push	r14
    14a0:	ff 92       	push	r15
    14a2:	0f 93       	push	r16
    14a4:	1f 93       	push	r17
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	6c 01       	movw	r12, r24
    14ac:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
    14ae:	65 d1       	rcall	.+714    	; 0x177a <OLED_clear>
    14b0:	f8 d3       	rcall	.+2032   	; 0x1ca2 <OLED_resetArrow>
	//print arrow
	//OLED_moveArrow(0);
	OLED_resetArrow();
    14b2:	1e 14       	cp	r1, r14
    14b4:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
    14b6:	7c f4       	brge	.+30     	; 0x14d6 <MENU_printMenu+0x3c>
    14b8:	86 01       	movw	r16, r12
    14ba:	0c 5f       	subi	r16, 0xFC	; 252
    14bc:	1f 4f       	sbci	r17, 0xFF	; 255
    14be:	c0 e0       	ldi	r28, 0x00	; 0
    14c0:	d0 e0       	ldi	r29, 0x00	; 0
    14c2:	be 01       	movw	r22, r28
    14c4:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
    14c6:	81 91       	ld	r24, Z+
    14c8:	91 91       	ld	r25, Z+
    14ca:	8f 01       	movw	r16, r30
    14cc:	ce df       	rcall	.-100    	; 0x146a <MENU_printMenuItem>
    14ce:	21 96       	adiw	r28, 0x01	; 1
    14d0:	ce 15       	cp	r28, r14
    14d2:	df 05       	cpc	r29, r15
	OLED_clear();
	//print arrow
	//OLED_moveArrow(0);
	OLED_resetArrow();
	
	for(int i = 0; i < noElements; i++)
    14d4:	b1 f7       	brne	.-20     	; 0x14c2 <MENU_printMenu+0x28>
    14d6:	d0 92 00 03 	sts	0x0300, r13
    14da:	c0 92 ff 02 	sts	0x02FF, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
    14de:	10 92 fb 02 	sts	0x02FB, r1
    14e2:	10 92 fa 02 	sts	0x02FA, r1
	
	currentPosition = 0;
    14e6:	f6 01       	movw	r30, r12
    14e8:	84 81       	ldd	r24, Z+4	; 0x04
    14ea:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
    14ec:	90 93 fe 02 	sts	0x02FE, r25
    14f0:	80 93 fd 02 	sts	0x02FD, r24
    14f4:	df 91       	pop	r29
    14f6:	cf 91       	pop	r28
    14f8:	1f 91       	pop	r17
}
    14fa:	0f 91       	pop	r16
    14fc:	ff 90       	pop	r15
    14fe:	ef 90       	pop	r14
    1500:	df 90       	pop	r13
    1502:	cf 90       	pop	r12
    1504:	08 95       	ret

00001506 <MENU_moveUp>:
    1506:	20 91 fa 02 	lds	r18, 0x02FA
    150a:	30 91 fb 02 	lds	r19, 0x02FB
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
    150e:	12 16       	cp	r1, r18
    1510:	13 06       	cpc	r1, r19
    1512:	bc f4       	brge	.+46     	; 0x1542 <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
    1514:	c9 01       	movw	r24, r18
    1516:	01 97       	sbiw	r24, 0x01	; 1
    1518:	90 93 fb 02 	sts	0x02FB, r25
    151c:	80 93 fa 02 	sts	0x02FA, r24
		currItem = currentMenu->children[currentPosition];
    1520:	e0 91 ff 02 	lds	r30, 0x02FF
    1524:	f0 91 00 03 	lds	r31, 0x0300
    1528:	2f 5f       	subi	r18, 0xFF	; 255
    152a:	3f 4f       	sbci	r19, 0xFF	; 255
    152c:	22 0f       	add	r18, r18
    152e:	33 1f       	adc	r19, r19
    1530:	e2 0f       	add	r30, r18
    1532:	f3 1f       	adc	r31, r19
    1534:	20 81       	ld	r18, Z
    1536:	31 81       	ldd	r19, Z+1	; 0x01
    1538:	30 93 fe 02 	sts	0x02FE, r19
    153c:	20 93 fd 02 	sts	0x02FD, r18
		OLED_moveArrow(currentPosition);
    1540:	5a c2       	rjmp	.+1204   	; 0x19f6 <OLED_moveArrow>
    1542:	08 95       	ret

00001544 <MENU_moveDown>:
    1544:	e0 91 ff 02 	lds	r30, 0x02FF
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
    1548:	f0 91 00 03 	lds	r31, 0x0300
    154c:	20 91 fa 02 	lds	r18, 0x02FA
    1550:	30 91 fb 02 	lds	r19, 0x02FB
    1554:	82 81       	ldd	r24, Z+2	; 0x02
    1556:	93 81       	ldd	r25, Z+3	; 0x03
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	28 17       	cp	r18, r24
    155c:	39 07       	cpc	r19, r25
    155e:	a4 f4       	brge	.+40     	; 0x1588 <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
    1560:	c9 01       	movw	r24, r18
    1562:	01 96       	adiw	r24, 0x01	; 1
    1564:	90 93 fb 02 	sts	0x02FB, r25
    1568:	80 93 fa 02 	sts	0x02FA, r24
		currItem = currentMenu->children[currentPosition];
    156c:	2d 5f       	subi	r18, 0xFD	; 253
    156e:	3f 4f       	sbci	r19, 0xFF	; 255
    1570:	22 0f       	add	r18, r18
    1572:	33 1f       	adc	r19, r19
    1574:	e2 0f       	add	r30, r18
    1576:	f3 1f       	adc	r31, r19
    1578:	20 81       	ld	r18, Z
    157a:	31 81       	ldd	r19, Z+1	; 0x01
    157c:	30 93 fe 02 	sts	0x02FE, r19
    1580:	20 93 fd 02 	sts	0x02FD, r18
		OLED_moveArrow(currentPosition);
    1584:	38 c2       	rjmp	.+1136   	; 0x19f6 <OLED_moveArrow>
    1586:	08 95       	ret
    1588:	10 92 fb 02 	sts	0x02FB, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
    158c:	10 92 fa 02 	sts	0x02FA, r1
    1590:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
    1592:	95 81       	ldd	r25, Z+5	; 0x05
    1594:	90 93 fe 02 	sts	0x02FE, r25
    1598:	80 93 fd 02 	sts	0x02FD, r24
    159c:	82 d3       	rcall	.+1796   	; 0x1ca2 <OLED_resetArrow>
		//OLED_moveArrow(currentPosition);
		OLED_resetArrow();
    159e:	2f ef       	ldi	r18, 0xFF	; 255
    15a0:	8f ef       	ldi	r24, 0xFF	; 255
    15a2:	92 e0       	ldi	r25, 0x02	; 2
    15a4:	21 50       	subi	r18, 0x01	; 1
    15a6:	80 40       	sbci	r24, 0x00	; 0
    15a8:	90 40       	sbci	r25, 0x00	; 0
    15aa:	e1 f7       	brne	.-8      	; 0x15a4 <MENU_moveDown+0x60>
    15ac:	00 c0       	rjmp	.+0      	; 0x15ae <MENU_moveDown+0x6a>
    15ae:	00 c0       	rjmp	.+0      	; 0x15b0 <MENU_moveDown+0x6c>
    15b0:	08 95       	ret

000015b2 <MENU_moveLeft>:
    15b2:	e0 91 ff 02 	lds	r30, 0x02FF
	_delay_ms(200);
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
    15b6:	f0 91 00 03 	lds	r31, 0x0300
    15ba:	84 89       	ldd	r24, Z+20	; 0x14
    15bc:	95 89       	ldd	r25, Z+21	; 0x15
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	21 f0       	breq	.+8      	; 0x15ca <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
    15c2:	fc 01       	movw	r30, r24
    15c4:	62 81       	ldd	r22, Z+2	; 0x02
    15c6:	73 81       	ldd	r23, Z+3	; 0x03
    15c8:	68 cf       	rjmp	.-304    	; 0x149a <MENU_printMenu>
    15ca:	08 95       	ret

000015cc <MENU_reactivate>:
    15cc:	80 91 ff 02 	lds	r24, 0x02FF
	//MENU_clearMemory();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
    15d0:	90 91 00 03 	lds	r25, 0x0300
    15d4:	fc 01       	movw	r30, r24
    15d6:	62 81       	ldd	r22, Z+2	; 0x02
    15d8:	73 81       	ldd	r23, Z+3	; 0x03
    15da:	5f df       	rcall	.-322    	; 0x149a <MENU_printMenu>
    15dc:	21 c0       	rjmp	.+66     	; 0x1620 <MENU_waitForInput>
	MENU_waitForInput();
    15de:	08 95       	ret

000015e0 <MENU_moveRight>:
    15e0:	e0 91 fd 02 	lds	r30, 0x02FD
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
    15e4:	f0 91 fe 02 	lds	r31, 0x02FE
    15e8:	86 81       	ldd	r24, Z+6	; 0x06
    15ea:	97 81       	ldd	r25, Z+7	; 0x07
    15ec:	89 2b       	or	r24, r25
    15ee:	39 f0       	breq	.+14     	; 0x15fe <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
    15f0:	84 81       	ldd	r24, Z+4	; 0x04
    15f2:	95 81       	ldd	r25, Z+5	; 0x05
    15f4:	fc 01       	movw	r30, r24
    15f6:	62 81       	ldd	r22, Z+2	; 0x02
    15f8:	73 81       	ldd	r23, Z+3	; 0x03
    15fa:	4f df       	rcall	.-354    	; 0x149a <MENU_printMenu>
    15fc:	07 c0       	rjmp	.+14     	; 0x160c <MENU_moveRight+0x2c>
    15fe:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
    1600:	f3 85       	ldd	r31, Z+11	; 0x0b
    1602:	e0 2d       	mov	r30, r0
    1604:	30 97       	sbiw	r30, 0x00	; 0
    1606:	11 f0       	breq	.+4      	; 0x160c <MENU_moveRight+0x2c>
    1608:	09 95       	icall
	{
		currItem->functionPtr();
    160a:	e0 df       	rcall	.-64     	; 0x15cc <MENU_reactivate>
		MENU_reactivate();
    160c:	ff ef       	ldi	r31, 0xFF	; 255
    160e:	2f ef       	ldi	r18, 0xFF	; 255
    1610:	82 e0       	ldi	r24, 0x02	; 2
    1612:	f1 50       	subi	r31, 0x01	; 1
    1614:	20 40       	sbci	r18, 0x00	; 0
    1616:	80 40       	sbci	r24, 0x00	; 0
    1618:	e1 f7       	brne	.-8      	; 0x1612 <MENU_moveRight+0x32>
    161a:	00 c0       	rjmp	.+0      	; 0x161c <MENU_moveRight+0x3c>
    161c:	00 c0       	rjmp	.+0      	; 0x161e <MENU_moveRight+0x3e>
    161e:	08 95       	ret

00001620 <MENU_waitForInput>:
    1620:	80 91 fa 02 	lds	r24, 0x02FA
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
    1624:	90 91 fb 02 	lds	r25, 0x02FB
    1628:	e6 d1       	rcall	.+972    	; 0x19f6 <OLED_moveArrow>
    162a:	12 c0       	rjmp	.+36     	; 0x1650 <MENU_waitForInput+0x30>
	JOY_direction_t currDir;
	
	while(menuActiveFlag && *actualState == MENU)
    162c:	4d dd       	rcall	.-1382   	; 0x10c8 <JOY_getDirection>
	{
		currDir = JOY_getDirection();
    162e:	82 30       	cpi	r24, 0x02	; 2
    1630:	71 f0       	breq	.+28     	; 0x164e <MENU_waitForInput+0x2e>
		switch(currDir){
    1632:	18 f4       	brcc	.+6      	; 0x163a <MENU_waitForInput+0x1a>
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	49 f0       	breq	.+18     	; 0x164a <MENU_waitForInput+0x2a>
    1638:	0b c0       	rjmp	.+22     	; 0x1650 <MENU_waitForInput+0x30>
    163a:	83 30       	cpi	r24, 0x03	; 3
    163c:	21 f0       	breq	.+8      	; 0x1646 <MENU_waitForInput+0x26>
    163e:	84 30       	cpi	r24, 0x04	; 4
    1640:	39 f4       	brne	.+14     	; 0x1650 <MENU_waitForInput+0x30>
    1642:	b7 df       	rcall	.-146    	; 0x15b2 <MENU_moveLeft>
    1644:	05 c0       	rjmp	.+10     	; 0x1650 <MENU_waitForInput+0x30>
			case LEFT:
			MENU_moveLeft();
    1646:	cc df       	rcall	.-104    	; 0x15e0 <MENU_moveRight>
    1648:	03 c0       	rjmp	.+6      	; 0x1650 <MENU_waitForInput+0x30>
			break;
    164a:	5d df       	rcall	.-326    	; 0x1506 <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
    164c:	01 c0       	rjmp	.+2      	; 0x1650 <MENU_waitForInput+0x30>
    164e:	7a df       	rcall	.-268    	; 0x1544 <MENU_moveDown>
			break;
    1650:	80 91 fc 02 	lds	r24, 0x02FC
			
			case UP:
			MENU_moveUp();
    1654:	88 23       	and	r24, r24
			break;
    1656:	39 f0       	breq	.+14     	; 0x1666 <MENU_waitForInput+0x46>
			
			case DOWN:
			MENU_moveDown();
    1658:	e0 91 f8 02 	lds	r30, 0x02F8
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag && *actualState == MENU)
    165c:	f0 91 f9 02 	lds	r31, 0x02F9
    1660:	80 81       	ld	r24, Z
    1662:	81 30       	cpi	r24, 0x01	; 1
    1664:	19 f3       	breq	.-58     	; 0x162c <MENU_waitForInput+0xc>
    1666:	08 95       	ret

00001668 <MENU_activate>:
    1668:	90 93 f9 02 	sts	0x02F9, r25
    166c:	80 93 f8 02 	sts	0x02F8, r24
    1670:	70 93 f7 02 	sts	0x02F7, r23
}

void MENU_activate(OP_STATE* state, INPUT_MODE* inputMode)
{
	actualState = state;
	actualInputMode = inputMode;
    1674:	60 93 f6 02 	sts	0x02F6, r22
	menuActiveFlag = 1;
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	80 93 fc 02 	sts	0x02FC, r24
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
    167e:	23 de       	rcall	.-954    	; 0x12c6 <MENU_buildMenus>
    1680:	80 91 03 03 	lds	r24, 0x0303
	MENU_printMenu(mainMenu, mainMenu->noChilds);
    1684:	90 91 04 03 	lds	r25, 0x0304
    1688:	fc 01       	movw	r30, r24
    168a:	62 81       	ldd	r22, Z+2	; 0x02
    168c:	73 81       	ldd	r23, Z+3	; 0x03
    168e:	05 df       	rcall	.-502    	; 0x149a <MENU_printMenu>
    1690:	c7 cf       	rjmp	.-114    	; 0x1620 <MENU_waitForInput>
    1692:	08 95       	ret

00001694 <MENU_printInfo>:
	MENU_waitForInput();
    1694:	72 d0       	rcall	.+228    	; 0x177a <OLED_clear>
    1696:	60 e0       	ldi	r22, 0x00	; 0
    1698:	70 e0       	ldi	r23, 0x00	; 0
}

void MENU_printInfo()
{
	OLED_clear();
	OLED_bufferGoto(0,0);
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	c4 d0       	rcall	.+392    	; 0x1828 <OLED_bufferGoto>
    16a0:	82 e6       	ldi	r24, 0x62	; 98
    16a2:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("GROUP 46");
    16a4:	20 d1       	rcall	.+576    	; 0x18e6 <OLED_printString>
    16a6:	60 e0       	ldi	r22, 0x00	; 0
    16a8:	70 e0       	ldi	r23, 0x00	; 0
    16aa:	82 e0       	ldi	r24, 0x02	; 2
	OLED_bufferGoto(2,0);
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	bc d0       	rcall	.+376    	; 0x1828 <OLED_bufferGoto>
    16b0:	8b e6       	ldi	r24, 0x6B	; 107
    16b2:	92 e0       	ldi	r25, 0x02	; 2
    16b4:	18 d1       	rcall	.+560    	; 0x18e6 <OLED_printString>
    16b6:	60 e0       	ldi	r22, 0x00	; 0
	OLED_printString("O.Kasperek");
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	83 e0       	ldi	r24, 0x03	; 3
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	b4 d0       	rcall	.+360    	; 0x1828 <OLED_bufferGoto>
	OLED_bufferGoto(3,0);
    16c0:	86 e7       	ldi	r24, 0x76	; 118
    16c2:	92 e0       	ldi	r25, 0x02	; 2
    16c4:	10 d1       	rcall	.+544    	; 0x18e6 <OLED_printString>
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	70 e0       	ldi	r23, 0x00	; 0
    16ca:	84 e0       	ldi	r24, 0x04	; 4
	OLED_printString("L.Hagele");
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	ac d0       	rcall	.+344    	; 0x1828 <OLED_bufferGoto>
    16d0:	8f e7       	ldi	r24, 0x7F	; 127
    16d2:	92 e0       	ldi	r25, 0x02	; 2
	OLED_bufferGoto(4,0);
    16d4:	08 d1       	rcall	.+528    	; 0x18e6 <OLED_printString>
    16d6:	2f ef       	ldi	r18, 0xFF	; 255
    16d8:	8f ef       	ldi	r24, 0xFF	; 255
    16da:	9c e2       	ldi	r25, 0x2C	; 44
    16dc:	21 50       	subi	r18, 0x01	; 1
    16de:	80 40       	sbci	r24, 0x00	; 0
	OLED_printString("J.Haberny");
    16e0:	90 40       	sbci	r25, 0x00	; 0
    16e2:	e1 f7       	brne	.-8      	; 0x16dc <MENU_printInfo+0x48>
    16e4:	00 c0       	rjmp	.+0      	; 0x16e6 <MENU_printInfo+0x52>
    16e6:	00 c0       	rjmp	.+0      	; 0x16e8 <MENU_printInfo+0x54>
    16e8:	71 cf       	rjmp	.-286    	; 0x15cc <MENU_reactivate>
    16ea:	08 95       	ret

000016ec <MENU_updateState>:
    16ec:	cf 93       	push	r28
    16ee:	df 93       	push	r29
    16f0:	c0 91 fa 02 	lds	r28, 0x02FA
    16f4:	d0 91 fb 02 	lds	r29, 0x02FB
    16f8:	40 d0       	rcall	.+128    	; 0x177a <OLED_clear>
	
	_delay_ms(3000);
	MENU_reactivate();
    16fa:	60 e0       	ldi	r22, 0x00	; 0
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	80 e0       	ldi	r24, 0x00	; 0

void MENU_updateState()
{
	uint8_t newState = currentPosition;
	OLED_clear();
	OLED_bufferGoto(0,0);
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	92 d0       	rcall	.+292    	; 0x1828 <OLED_bufferGoto>
    1704:	89 e8       	ldi	r24, 0x89	; 137
    1706:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("INPUT:");
    1708:	ee d0       	rcall	.+476    	; 0x18e6 <OLED_printString>
    170a:	60 e0       	ldi	r22, 0x00	; 0
    170c:	70 e0       	ldi	r23, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
	OLED_bufferGoto(1,0);
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	8a d0       	rcall	.+276    	; 0x1828 <OLED_bufferGoto>
    1714:	ce 01       	movw	r24, r28
    1716:	99 27       	eor	r25, r25
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	91 05       	cpc	r25, r1
	switch (newState)
    171c:	71 f0       	breq	.+28     	; 0x173a <MENU_updateState+0x4e>
    171e:	82 30       	cpi	r24, 0x02	; 2
    1720:	91 05       	cpc	r25, r1
    1722:	a9 f0       	breq	.+42     	; 0x174e <MENU_updateState+0x62>
    1724:	89 2b       	or	r24, r25
    1726:	e1 f4       	brne	.+56     	; 0x1760 <MENU_updateState+0x74>
    1728:	e0 91 f6 02 	lds	r30, 0x02F6
    172c:	f0 91 f7 02 	lds	r31, 0x02F7
	{
		case 0:
			*actualInputMode = SLIDER;
    1730:	10 82       	st	Z, r1
    1732:	80 e9       	ldi	r24, 0x90	; 144
    1734:	92 e0       	ldi	r25, 0x02	; 2
    1736:	d7 d0       	rcall	.+430    	; 0x18e6 <OLED_printString>
    1738:	13 c0       	rjmp	.+38     	; 0x1760 <MENU_updateState+0x74>
			OLED_printString("SLIDER");
    173a:	e0 91 f6 02 	lds	r30, 0x02F6
    173e:	f0 91 f7 02 	lds	r31, 0x02F7
			break;
    1742:	81 e0       	ldi	r24, 0x01	; 1
		
		case 1:
			*actualInputMode = JOYSTICK;
    1744:	80 83       	st	Z, r24
    1746:	87 e9       	ldi	r24, 0x97	; 151
    1748:	92 e0       	ldi	r25, 0x02	; 2
    174a:	cd d0       	rcall	.+410    	; 0x18e6 <OLED_printString>
    174c:	09 c0       	rjmp	.+18     	; 0x1760 <MENU_updateState+0x74>
    174e:	e0 91 f6 02 	lds	r30, 0x02F6
			OLED_printString("JOYSTICK");
    1752:	f0 91 f7 02 	lds	r31, 0x02F7
    1756:	82 e0       	ldi	r24, 0x02	; 2
			break;
    1758:	80 83       	st	Z, r24
		
		case 2:
			*actualInputMode = PC;
    175a:	8f e4       	ldi	r24, 0x4F	; 79
    175c:	92 e0       	ldi	r25, 0x02	; 2
    175e:	c3 d0       	rcall	.+390    	; 0x18e6 <OLED_printString>
    1760:	2f ef       	ldi	r18, 0xFF	; 255
    1762:	8f ef       	ldi	r24, 0xFF	; 255
    1764:	9e e0       	ldi	r25, 0x0E	; 14
			OLED_printString("PC");
    1766:	21 50       	subi	r18, 0x01	; 1
    1768:	80 40       	sbci	r24, 0x00	; 0
    176a:	90 40       	sbci	r25, 0x00	; 0
    176c:	e1 f7       	brne	.-8      	; 0x1766 <MENU_updateState+0x7a>
    176e:	00 c0       	rjmp	.+0      	; 0x1770 <MENU_updateState+0x84>
    1770:	00 00       	nop
    1772:	2c df       	rcall	.-424    	; 0x15cc <MENU_reactivate>
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	08 95       	ret

0000177a <OLED_clear>:
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	// clear OLED buffer
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    177a:	80 91 12 01 	lds	r24, 0x0112
    177e:	90 91 13 01 	lds	r25, 0x0113
    1782:	89 2b       	or	r24, r25
    1784:	89 f0       	breq	.+34     	; 0x17a8 <OLED_clear+0x2e>
    1786:	80 e0       	ldi	r24, 0x00	; 0
    1788:	90 e0       	ldi	r25, 0x00	; 0
	{
		oled_buffer[i] = 0x00;
    178a:	e0 91 14 01 	lds	r30, 0x0114
    178e:	f0 91 15 01 	lds	r31, 0x0115
    1792:	e8 0f       	add	r30, r24
    1794:	f9 1f       	adc	r31, r25
    1796:	10 82       	st	Z, r1
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	// clear OLED buffer
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    1798:	01 96       	adiw	r24, 0x01	; 1
    179a:	20 91 12 01 	lds	r18, 0x0112
    179e:	30 91 13 01 	lds	r19, 0x0113
    17a2:	82 17       	cp	r24, r18
    17a4:	93 07       	cpc	r25, r19
    17a6:	88 f3       	brcs	.-30     	; 0x178a <OLED_clear+0x10>
    17a8:	08 95       	ret

000017aa <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
    17aa:	26 2f       	mov	r18, r22
    17ac:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
    17ae:	75 95       	asr	r23
    17b0:	67 95       	ror	r22
    17b2:	75 95       	asr	r23
    17b4:	67 95       	ror	r22
    17b6:	75 95       	asr	r23
    17b8:	67 95       	ror	r22
    17ba:	75 95       	asr	r23
    17bc:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
    17be:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
    17c0:	80 55       	subi	r24, 0x50	; 80
    17c2:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
    17c4:	e0 91 18 01 	lds	r30, 0x0118
    17c8:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    17cc:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
    17ce:	e0 91 18 01 	lds	r30, 0x0118
    17d2:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    17d6:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
    17d8:	e0 91 18 01 	lds	r30, 0x0118
    17dc:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    17e0:	60 83       	st	Z, r22
    17e2:	08 95       	ret

000017e4 <OLED_updateScreen>:
	// set horizontal addressing mode
// 	OLED_writeByteToOLED(oled_cmd, 0x20); // set memory addressing mode
// 	OLED_writeByteToOLED(oled_cmd, 0x00); // set horizontal addressing mode ~ 0d
// 	
	// write OLED buffer to OLED Memory
	OLED_goto(0,0); // todo: start writing in top left corner (maybe not further needed)
    17e4:	60 e0       	ldi	r22, 0x00	; 0
    17e6:	70 e0       	ldi	r23, 0x00	; 0
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	de df       	rcall	.-68     	; 0x17aa <OLED_goto>
    17ee:	80 91 12 01 	lds	r24, 0x0112
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    17f2:	90 91 13 01 	lds	r25, 0x0113
    17f6:	89 2b       	or	r24, r25
    17f8:	b1 f0       	breq	.+44     	; 0x1826 <OLED_updateScreen+0x42>
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	e0 91 14 01 	lds	r30, 0x0114
	{
		OLED_writeByteToOLED(oled_data, oled_buffer[i]);
    1802:	f0 91 15 01 	lds	r31, 0x0115
    1806:	e8 0f       	add	r30, r24
    1808:	f9 1f       	adc	r31, r25
    180a:	20 81       	ld	r18, Z
    180c:	e0 91 16 01 	lds	r30, 0x0116
    1810:	f0 91 17 01 	lds	r31, 0x0117
    1814:	20 83       	st	Z, r18
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1816:	01 96       	adiw	r24, 0x01	; 1
// 	OLED_writeByteToOLED(oled_cmd, 0x20); // set memory addressing mode
// 	OLED_writeByteToOLED(oled_cmd, 0x00); // set horizontal addressing mode ~ 0d
// 	
	// write OLED buffer to OLED Memory
	OLED_goto(0,0); // todo: start writing in top left corner (maybe not further needed)
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    1818:	20 91 12 01 	lds	r18, 0x0112
    181c:	30 91 13 01 	lds	r19, 0x0113
    1820:	82 17       	cp	r24, r18
    1822:	93 07       	cpc	r25, r19
    1824:	60 f3       	brcs	.-40     	; 0x17fe <OLED_updateScreen+0x1a>
    1826:	08 95       	ret

00001828 <OLED_bufferGoto>:
    1828:	96 95       	lsr	r25
}

void OLED_bufferGoto(int row, int column)
{
	// change pointer in OLED SRAM buffer
	oled_buffer_position = oled_buffer + (row * 0x80) + column;
    182a:	98 2f       	mov	r25, r24
    182c:	88 27       	eor	r24, r24
    182e:	97 95       	ror	r25
    1830:	87 95       	ror	r24
    1832:	68 0f       	add	r22, r24
    1834:	79 1f       	adc	r23, r25
    1836:	80 91 14 01 	lds	r24, 0x0114
    183a:	90 91 15 01 	lds	r25, 0x0115
    183e:	68 0f       	add	r22, r24
    1840:	79 1f       	adc	r23, r25
    1842:	70 93 11 01 	sts	0x0111, r23
    1846:	60 93 10 01 	sts	0x0110, r22
    184a:	08 95       	ret

0000184c <OLED_writePixelToOLED>:


//------------------------------------------------------------------------------
//
void OLED_writePixelToOLED(uint8_t u, uint8_t v)
{
    184c:	cf 93       	push	r28
    184e:	c6 2f       	mov	r28, r22
	// determine relevant row
	uint8_t row = v/8;
	// buffer old column
	OLED_bufferGoto(row, u);
    1850:	68 2f       	mov	r22, r24
    1852:	70 e0       	ldi	r23, 0x00	; 0
//------------------------------------------------------------------------------
//
void OLED_writePixelToOLED(uint8_t u, uint8_t v)
{
	// determine relevant row
	uint8_t row = v/8;
    1854:	8c 2f       	mov	r24, r28
    1856:	86 95       	lsr	r24
    1858:	86 95       	lsr	r24
    185a:	86 95       	lsr	r24
	// buffer old column
	OLED_bufferGoto(row, u);
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	e4 df       	rcall	.-56     	; 0x1828 <OLED_bufferGoto>
    1860:	80 91 10 01 	lds	r24, 0x0110
	uint8_t buffer_column = readFromAddress(oled_buffer_position);
    1864:	90 91 11 01 	lds	r25, 0x0111
    1868:	ab d8       	rcall	.-3754   	; 0x9c0 <readFromAddress>
    186a:	c7 70       	andi	r28, 0x07	; 7
    186c:	21 e0       	ldi	r18, 0x01	; 1
	// create new column
	buffer_column |= (1<<(v%8));
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	b9 01       	movw	r22, r18
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <OLED_writePixelToOLED+0x2c>
    1874:	66 0f       	add	r22, r22
    1876:	77 1f       	adc	r23, r23
    1878:	ca 95       	dec	r28
    187a:	e2 f7       	brpl	.-8      	; 0x1874 <OLED_writePixelToOLED+0x28>
    187c:	86 2b       	or	r24, r22
    187e:	e0 91 10 01 	lds	r30, 0x0110
	OLED_writeByteToOLED(oled_buffer_position, buffer_column);
    1882:	f0 91 11 01 	lds	r31, 0x0111
    1886:	80 83       	st	Z, r24
    1888:	cf 91       	pop	r28
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    188a:	08 95       	ret

0000188c <OLED_printCharacter>:
	OLED_bufferGoto(row, u);
	uint8_t buffer_column = readFromAddress(oled_buffer_position);
	// create new column
	buffer_column |= (1<<(v%8));
	OLED_writeByteToOLED(oled_buffer_position, buffer_column);
}
    188c:	0f 93       	push	r16
    188e:	1f 93       	push	r17
// SPACE (' '). As SPACE corresponds to position 32 in the ASCII table, this 
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
	character = character-32; // map character to font table
    1894:	80 52       	subi	r24, 0x20	; 32
    1896:	08 2f       	mov	r16, r24
    1898:	10 e0       	ldi	r17, 0x00	; 0
    189a:	00 0f       	add	r16, r16
    189c:	11 1f       	adc	r17, r17
    189e:	00 0f       	add	r16, r16
    18a0:	11 1f       	adc	r17, r17
    18a2:	00 0f       	add	r16, r16
    18a4:	11 1f       	adc	r17, r17
    18a6:	c0 e0       	ldi	r28, 0x00	; 0
    18a8:	d0 e0       	ldi	r29, 0x00	; 0
    18aa:	02 57       	subi	r16, 0x72	; 114
    18ac:	1f 4f       	sbci	r17, 0xFF	; 255
    18ae:	f8 01       	movw	r30, r16
    18b0:	ec 0f       	add	r30, r28
    18b2:	fd 1f       	adc	r31, r29
	
	// print 8 columns into OLED Buffer in SRAM
	for(uint8_t i = 0; i < 8; i++)
	{
		saveToAddress(oled_buffer_position, pgm_read_byte(&font8[character][i]));
    18b4:	64 91       	lpm	r22, Z
    18b6:	70 e0       	ldi	r23, 0x00	; 0
    18b8:	80 91 10 01 	lds	r24, 0x0110
    18bc:	90 91 11 01 	lds	r25, 0x0111
    18c0:	82 d8       	rcall	.-3836   	; 0x9c6 <saveToAddress>
    18c2:	80 91 10 01 	lds	r24, 0x0110
		oled_buffer_position++;
    18c6:	90 91 11 01 	lds	r25, 0x0111
    18ca:	01 96       	adiw	r24, 0x01	; 1
    18cc:	90 93 11 01 	sts	0x0111, r25
    18d0:	80 93 10 01 	sts	0x0110, r24
    18d4:	21 96       	adiw	r28, 0x01	; 1
    18d6:	c8 30       	cpi	r28, 0x08	; 8
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED Buffer in SRAM
	for(uint8_t i = 0; i < 8; i++)
    18d8:	d1 05       	cpc	r29, r1
    18da:	49 f7       	brne	.-46     	; 0x18ae <OLED_printCharacter+0x22>
    18dc:	df 91       	pop	r29
	// print 8 columns into OLED RAM
// 	for(uint8_t i = 0; i < 8; i++)
// 	{
// 		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
// 	}
}
    18de:	cf 91       	pop	r28
    18e0:	1f 91       	pop	r17
    18e2:	0f 91       	pop	r16
    18e4:	08 95       	ret

000018e6 <OLED_printString>:
    18e6:	1f 93       	push	r17

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
    18ee:	10 e0       	ldi	r17, 0x00	; 0
    18f0:	06 c0       	rjmp	.+12     	; 0x18fe <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
    18f2:	fe 01       	movw	r30, r28
    18f4:	e8 0f       	add	r30, r24
    18f6:	f9 1f       	adc	r31, r25
    18f8:	80 81       	ld	r24, Z
    18fa:	c8 df       	rcall	.-112    	; 0x188c <OLED_printCharacter>
    18fc:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
    18fe:	81 2f       	mov	r24, r17
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	fe 01       	movw	r30, r28
    1904:	01 90       	ld	r0, Z+
    1906:	00 20       	and	r0, r0
    1908:	e9 f7       	brne	.-6      	; 0x1904 <OLED_printString+0x1e>
    190a:	31 97       	sbiw	r30, 0x01	; 1
    190c:	ec 1b       	sub	r30, r28
    190e:	fd 0b       	sbc	r31, r29
    1910:	8e 17       	cp	r24, r30
    1912:	9f 07       	cpc	r25, r31
    1914:	70 f3       	brcs	.-36     	; 0x18f2 <OLED_printString+0xc>
    1916:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
    1918:	cf 91       	pop	r28
    191a:	1f 91       	pop	r17
    191c:	08 95       	ret

0000191e <OLED_printArrow>:
    191e:	68 e1       	ldi	r22, 0x18	; 24
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	// write arrow to oled sram buffer
	saveToAddress(oled_buffer_position, 0b00011000);
    1920:	70 e0       	ldi	r23, 0x00	; 0
    1922:	80 91 10 01 	lds	r24, 0x0110
    1926:	90 91 11 01 	lds	r25, 0x0111
    192a:	4d d8       	rcall	.-3942   	; 0x9c6 <saveToAddress>
    192c:	80 91 10 01 	lds	r24, 0x0110
	oled_buffer_position++;
    1930:	90 91 11 01 	lds	r25, 0x0111
    1934:	01 96       	adiw	r24, 0x01	; 1
    1936:	90 93 11 01 	sts	0x0111, r25
    193a:	80 93 10 01 	sts	0x0110, r24
    193e:	68 e1       	ldi	r22, 0x18	; 24
	saveToAddress(oled_buffer_position, 0b00011000);
    1940:	70 e0       	ldi	r23, 0x00	; 0
    1942:	41 d8       	rcall	.-3966   	; 0x9c6 <saveToAddress>
    1944:	80 91 10 01 	lds	r24, 0x0110
	oled_buffer_position++;
    1948:	90 91 11 01 	lds	r25, 0x0111
    194c:	01 96       	adiw	r24, 0x01	; 1
    194e:	90 93 11 01 	sts	0x0111, r25
    1952:	80 93 10 01 	sts	0x0110, r24
    1956:	6e e7       	ldi	r22, 0x7E	; 126
    1958:	70 e0       	ldi	r23, 0x00	; 0
	saveToAddress(oled_buffer_position, 0b01111110);
    195a:	35 d8       	rcall	.-3990   	; 0x9c6 <saveToAddress>
    195c:	80 91 10 01 	lds	r24, 0x0110
    1960:	90 91 11 01 	lds	r25, 0x0111
	oled_buffer_position++;
    1964:	01 96       	adiw	r24, 0x01	; 1
    1966:	90 93 11 01 	sts	0x0111, r25
    196a:	80 93 10 01 	sts	0x0110, r24
    196e:	6c e3       	ldi	r22, 0x3C	; 60
    1970:	70 e0       	ldi	r23, 0x00	; 0
    1972:	29 d8       	rcall	.-4014   	; 0x9c6 <saveToAddress>
	saveToAddress(oled_buffer_position, 0b00111100);
    1974:	80 91 10 01 	lds	r24, 0x0110
    1978:	90 91 11 01 	lds	r25, 0x0111
	oled_buffer_position++;
    197c:	01 96       	adiw	r24, 0x01	; 1
    197e:	90 93 11 01 	sts	0x0111, r25
    1982:	80 93 10 01 	sts	0x0110, r24
    1986:	68 e1       	ldi	r22, 0x18	; 24
    1988:	70 e0       	ldi	r23, 0x00	; 0
    198a:	1d d8       	rcall	.-4038   	; 0x9c6 <saveToAddress>
    198c:	80 91 10 01 	lds	r24, 0x0110
	saveToAddress(oled_buffer_position, 0b00011000);
    1990:	90 91 11 01 	lds	r25, 0x0111
    1994:	01 96       	adiw	r24, 0x01	; 1
	oled_buffer_position++;
    1996:	90 93 11 01 	sts	0x0111, r25
    199a:	80 93 10 01 	sts	0x0110, r24
    199e:	08 95       	ret

000019a0 <OLED_clearArrow>:
    19a0:	0f 93       	push	r16
    19a2:	1f 93       	push	r17
    19a4:	cf 93       	push	r28
    19a6:	df 93       	push	r29
    19a8:	c1 e0       	ldi	r28, 0x01	; 1
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    19aa:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_bufferGoto(count_row,0); // move to first column in row
    19b0:	05 e0       	ldi	r16, 0x05	; 5
    19b2:	60 e0       	ldi	r22, 0x00	; 0
    19b4:	70 e0       	ldi	r23, 0x00	; 0
    19b6:	38 df       	rcall	.-400    	; 0x1828 <OLED_bufferGoto>
    19b8:	10 2f       	mov	r17, r16
    19ba:	60 e0       	ldi	r22, 0x00	; 0

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < ARROW_WIDTH; count_column++)
		{
			saveToAddress(oled_buffer_position, 0x00);
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	80 91 10 01 	lds	r24, 0x0110
    19c2:	90 91 11 01 	lds	r25, 0x0111
    19c6:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <saveToAddress>
    19ca:	80 91 10 01 	lds	r24, 0x0110
			oled_buffer_position++;
    19ce:	90 91 11 01 	lds	r25, 0x0111
    19d2:	01 96       	adiw	r24, 0x01	; 1
    19d4:	90 93 11 01 	sts	0x0111, r25
    19d8:	80 93 10 01 	sts	0x0110, r24
    19dc:	11 50       	subi	r17, 0x01	; 1
    19de:	69 f7       	brne	.-38     	; 0x19ba <OLED_clearArrow+0x1a>
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_bufferGoto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < ARROW_WIDTH; count_column++)
    19e0:	8c 2f       	mov	r24, r28
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
    19e2:	9d 2f       	mov	r25, r29
    19e4:	21 96       	adiw	r28, 0x01	; 1
    19e6:	c9 30       	cpi	r28, 0x09	; 9
    19e8:	d1 05       	cpc	r29, r1
    19ea:	19 f7       	brne	.-58     	; 0x19b2 <OLED_clearArrow+0x12>
    19ec:	df 91       	pop	r29
// 		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
// 		{
// 			OLED_writeByteToOLED(oled_data, 0x00);
// 		}
// 	}
}
    19ee:	cf 91       	pop	r28
    19f0:	1f 91       	pop	r17
    19f2:	0f 91       	pop	r16
    19f4:	08 95       	ret

000019f6 <OLED_moveArrow>:
    19f6:	2f 92       	push	r2

//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.
void OLED_moveArrow(int joy_counter)
{
    19f8:	3f 92       	push	r3
    19fa:	4f 92       	push	r4
    19fc:	5f 92       	push	r5
    19fe:	6f 92       	push	r6
    1a00:	7f 92       	push	r7
    1a02:	8f 92       	push	r8
    1a04:	9f 92       	push	r9
    1a06:	af 92       	push	r10
    1a08:	bf 92       	push	r11
    1a0a:	cf 92       	push	r12
    1a0c:	df 92       	push	r13
    1a0e:	ef 92       	push	r14
    1a10:	ff 92       	push	r15
    1a12:	0f 93       	push	r16
    1a14:	1f 93       	push	r17
    1a16:	cf 93       	push	r28
    1a18:	df 93       	push	r29
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	2a 97       	sbiw	r28, 0x0a	; 10
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	8c 01       	movw	r16, r24
	// reset animation tick
	animation_tick = 0;
    1a2c:	10 92 06 03 	sts	0x0306, r1
    1a30:	10 92 05 03 	sts	0x0305, r1
	
	if(joy_counter == arrow_position)
    1a34:	80 91 07 03 	lds	r24, 0x0307
    1a38:	90 91 08 03 	lds	r25, 0x0308
    1a3c:	08 17       	cp	r16, r24
    1a3e:	19 07       	cpc	r17, r25
    1a40:	39 f4       	brne	.+14     	; 0x1a50 <OLED_moveArrow+0x5a>
	{
		OLED_clearArrow(); // clear the arrow space
    1a42:	ae df       	rcall	.-164    	; 0x19a0 <OLED_clearArrow>
    1a44:	60 e0       	ldi	r22, 0x00	; 0
		//OLED_goto(joy_counter,0); // move cursor to specified row
		OLED_bufferGoto(joy_counter, 0);
    1a46:	70 e0       	ldi	r23, 0x00	; 0
    1a48:	c8 01       	movw	r24, r16
    1a4a:	ee de       	rcall	.-548    	; 0x1828 <OLED_bufferGoto>
    1a4c:	68 df       	rcall	.-304    	; 0x191e <OLED_printArrow>
    1a4e:	10 c1       	rjmp	.+544    	; 0x1c70 <OLED_moveArrow+0x27a>
		OLED_printArrow(); // print arrow
    1a50:	80 17       	cp	r24, r16
    1a52:	91 07       	cpc	r25, r17
    1a54:	0c f0       	brlt	.+2      	; 0x1a58 <OLED_moveArrow+0x62>
	}
	else if(joy_counter > arrow_position)
    1a56:	84 c0       	rjmp	.+264    	; 0x1b60 <OLED_moveArrow+0x16a>
    1a58:	85 e0       	ldi	r24, 0x05	; 5
    1a5a:	fe 01       	movw	r30, r28
    1a5c:	36 96       	adiw	r30, 0x06	; 6
	{		
		//printf("%#x %#x %#x %#x %#x \n", readFromAddress(0x1c00), readFromAddress(0x1c01), readFromAddress(0x1c02), readFromAddress(0x1c03), readFromAddress(0x1c04));
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
    1a5e:	df 01       	movw	r26, r30
    1a60:	28 2f       	mov	r18, r24
    1a62:	1d 92       	st	X+, r1
    1a64:	2a 95       	dec	r18
    1a66:	e9 f7       	brne	.-6      	; 0x1a62 <OLED_moveArrow+0x6c>
    1a68:	35 97       	sbiw	r30, 0x05	; 5
    1a6a:	df 01       	movw	r26, r30
    1a6c:	1d 92       	st	X+, r1
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
    1a6e:	8a 95       	dec	r24
    1a70:	e9 f7       	brne	.-6      	; 0x1a6c <OLED_moveArrow+0x76>
    1a72:	68 94       	set
    1a74:	55 24       	eor	r5, r5
    1a76:	53 f8       	bld	r5, 3
    1a78:	41 2c       	mov	r4, r1
    1a7a:	31 2c       	mov	r3, r1
    1a7c:	64 2c       	mov	r6, r4
			
		for(uint8_t step = 0; step < 8; step++)
		{
			for(uint8_t i = 0; i < height; i++)
    1a7e:	73 2c       	mov	r7, r3
    1a80:	5f c0       	rjmp	.+190    	; 0x1b40 <OLED_moveArrow+0x14a>

//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.
void OLED_moveArrow(int joy_counter)
{
    1a82:	b8 01       	movw	r22, r16
    1a84:	88 2d       	mov	r24, r8
    1a86:	99 2d       	mov	r25, r9
		{
			for(uint8_t i = 0; i < height; i++)
			{
				for(uint8_t j = 0; j < ARROW_WIDTH; j++)
				{
					OLED_bufferGoto(i, j);
    1a88:	cf de       	rcall	.-610    	; 0x1828 <OLED_bufferGoto>
    1a8a:	80 91 10 01 	lds	r24, 0x0110
    1a8e:	90 91 11 01 	lds	r25, 0x0111
					buffer_current[j] = readFromAddress(oled_buffer_position); // save state of current row
    1a92:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <readFromAddress>
    1a96:	f7 01       	movw	r30, r14
    1a98:	81 93       	st	Z+, r24
    1a9a:	7f 01       	movw	r14, r30
    1a9c:	0f 5f       	subi	r16, 0xFF	; 255
    1a9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa0:	05 30       	cpi	r16, 0x05	; 5
    1aa2:	11 05       	cpc	r17, r1
    1aa4:	71 f7       	brne	.-36     	; 0x1a82 <OLED_moveArrow+0x8c>
    1aa6:	9e 01       	movw	r18, r28
			
		for(uint8_t step = 0; step < 8; step++)
		{
			for(uint8_t i = 0; i < height; i++)
			{
				for(uint8_t j = 0; j < ARROW_WIDTH; j++)
    1aa8:	2a 5f       	subi	r18, 0xFA	; 250
    1aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1aac:	79 01       	movw	r14, r18
    1aae:	ce 01       	movw	r24, r28
    1ab0:	01 96       	adiw	r24, 0x01	; 1
    1ab2:	5c 01       	movw	r10, r24
    1ab4:	06 2d       	mov	r16, r6
    1ab6:	17 2d       	mov	r17, r7
    1ab8:	b8 01       	movw	r22, r16
    1aba:	88 2d       	mov	r24, r8
    1abc:	99 2d       	mov	r25, r9
    1abe:	b4 de       	rcall	.-664    	; 0x1828 <OLED_bufferGoto>
					buffer_current[j] = readFromAddress(oled_buffer_position); // save state of current row
				}
			
				for(uint8_t k = 0; k < ARROW_WIDTH; k++)
				{				
					OLED_bufferGoto(i, k);
    1ac0:	d5 01       	movw	r26, r10
    1ac2:	2d 90       	ld	r2, X+
    1ac4:	5d 01       	movw	r10, r26
    1ac6:	f7 01       	movw	r30, r14
    1ac8:	80 81       	ld	r24, Z
					saveToAddress(oled_buffer_position, buffer_current[k]<<1 | buffer_dummy[k]>>7); // move current row 1 down + combine with lowest from above
    1aca:	88 1f       	adc	r24, r24
    1acc:	88 27       	eor	r24, r24
    1ace:	88 1f       	adc	r24, r24
    1ad0:	62 2d       	mov	r22, r2
    1ad2:	70 e0       	ldi	r23, 0x00	; 0
    1ad4:	66 0f       	add	r22, r22
    1ad6:	77 1f       	adc	r23, r23
    1ad8:	68 2b       	or	r22, r24
    1ada:	80 91 10 01 	lds	r24, 0x0110
    1ade:	90 91 11 01 	lds	r25, 0x0111
    1ae2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <saveToAddress>
    1ae6:	d7 01       	movw	r26, r14
    1ae8:	2d 92       	st	X+, r2
    1aea:	7d 01       	movw	r14, r26
    1aec:	0f 5f       	subi	r16, 0xFF	; 255
    1aee:	1f 4f       	sbci	r17, 0xFF	; 255
					buffer_dummy[k] = buffer_current[k]; // current row is reference for next row
    1af0:	05 30       	cpi	r16, 0x05	; 5
    1af2:	11 05       	cpc	r17, r1
    1af4:	09 f7       	brne	.-62     	; 0x1ab8 <OLED_moveArrow+0xc2>
    1af6:	8c 2c       	mov	r8, r12
    1af8:	9d 2c       	mov	r9, r13
				{
					OLED_bufferGoto(i, j);
					buffer_current[j] = readFromAddress(oled_buffer_position); // save state of current row
				}
			
				for(uint8_t k = 0; k < ARROW_WIDTH; k++)
    1afa:	bf ef       	ldi	r27, 0xFF	; 255
    1afc:	cb 1a       	sub	r12, r27
    1afe:	db 0a       	sbc	r13, r27
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
			
		for(uint8_t step = 0; step < 8; step++)
		{
			for(uint8_t i = 0; i < height; i++)
    1b00:	e9 e0       	ldi	r30, 0x09	; 9
    1b02:	ce 16       	cp	r12, r30
    1b04:	d1 04       	cpc	r13, r1
    1b06:	39 f0       	breq	.+14     	; 0x1b16 <OLED_moveArrow+0x120>
    1b08:	9e 01       	movw	r18, r28
    1b0a:	2f 5f       	subi	r18, 0xFF	; 255
    1b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0e:	79 01       	movw	r14, r18
    1b10:	06 2d       	mov	r16, r6

//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.
void OLED_moveArrow(int joy_counter)
{
    1b12:	17 2d       	mov	r17, r7
    1b14:	b6 cf       	rjmp	.-148    	; 0x1a82 <OLED_moveArrow+0x8c>
    1b16:	80 91 05 03 	lds	r24, 0x0305
    1b1a:	90 91 06 03 	lds	r25, 0x0306
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
					saveToAddress(oled_buffer_position, buffer_current[k]<<1 | buffer_dummy[k]>>7); // move current row 1 down + combine with lowest from above
					buffer_dummy[k] = buffer_current[k]; // current row is reference for next row
				}
			}
			
			while(animation_tick != 1){_delay_us(1);};
    1b20:	49 f0       	breq	.+18     	; 0x1b34 <OLED_moveArrow+0x13e>
    1b22:	00 c0       	rjmp	.+0      	; 0x1b24 <OLED_moveArrow+0x12e>
    1b24:	00 c0       	rjmp	.+0      	; 0x1b26 <OLED_moveArrow+0x130>
    1b26:	00 00       	nop
    1b28:	80 91 05 03 	lds	r24, 0x0305
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b2c:	90 91 06 03 	lds	r25, 0x0306
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	b9 f7       	brne	.-18     	; 0x1b22 <OLED_moveArrow+0x12c>
    1b34:	40 92 05 03 	sts	0x0305, r4
    1b38:	30 92 06 03 	sts	0x0306, r3
    1b3c:	5a 94       	dec	r5
			animation_tick = 0;
    1b3e:	31 f0       	breq	.+12     	; 0x1b4c <OLED_moveArrow+0x156>
    1b40:	cc 24       	eor	r12, r12
    1b42:	c3 94       	inc	r12
    1b44:	d1 2c       	mov	r13, r1
    1b46:	84 2c       	mov	r8, r4
	{		
		//printf("%#x %#x %#x %#x %#x \n", readFromAddress(0x1c00), readFromAddress(0x1c01), readFromAddress(0x1c02), readFromAddress(0x1c03), readFromAddress(0x1c04));
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
			
		for(uint8_t step = 0; step < 8; step++)
    1b48:	93 2c       	mov	r9, r3
		{
			for(uint8_t i = 0; i < height; i++)
			{
				for(uint8_t j = 0; j < ARROW_WIDTH; j++)
    1b4a:	de cf       	rjmp	.-68     	; 0x1b08 <OLED_moveArrow+0x112>
    1b4c:	80 91 07 03 	lds	r24, 0x0307
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
			
		for(uint8_t step = 0; step < 8; step++)
		{
			for(uint8_t i = 0; i < height; i++)
    1b50:	90 91 08 03 	lds	r25, 0x0308
    1b54:	01 96       	adiw	r24, 0x01	; 1
			}
			
			while(animation_tick != 1){_delay_us(1);};
			animation_tick = 0;
		}
		arrow_position++;
    1b56:	90 93 08 03 	sts	0x0308, r25
    1b5a:	80 93 07 03 	sts	0x0307, r24
    1b5e:	88 c0       	rjmp	.+272    	; 0x1c70 <OLED_moveArrow+0x27a>
    1b60:	85 e0       	ldi	r24, 0x05	; 5
    1b62:	fe 01       	movw	r30, r28
    1b64:	36 96       	adiw	r30, 0x06	; 6
    1b66:	df 01       	movw	r26, r30
    1b68:	28 2f       	mov	r18, r24
	}
	else
	{
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
    1b6a:	1d 92       	st	X+, r1
    1b6c:	2a 95       	dec	r18
    1b6e:	e9 f7       	brne	.-6      	; 0x1b6a <OLED_moveArrow+0x174>
    1b70:	35 97       	sbiw	r30, 0x05	; 5
    1b72:	df 01       	movw	r26, r30
    1b74:	1d 92       	st	X+, r1
    1b76:	8a 95       	dec	r24
    1b78:	e9 f7       	brne	.-6      	; 0x1b74 <OLED_moveArrow+0x17e>
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
    1b7a:	68 94       	set
    1b7c:	33 24       	eor	r3, r3
    1b7e:	33 f8       	bld	r3, 3
    1b80:	0f 2e       	mov	r0, r31
    1b82:	f7 e0       	ldi	r31, 0x07	; 7
    1b84:	6f 2e       	mov	r6, r31
    1b86:	71 2c       	mov	r7, r1
    1b88:	f0 2d       	mov	r31, r0
		{
			for(uint8_t i = 0; i < height; i++)
			{
				for(uint8_t j = 0; j < ARROW_WIDTH; j++)
				{
					OLED_bufferGoto(height-1-i, j);
    1b8a:	51 2c       	mov	r5, r1
    1b8c:	41 2c       	mov	r4, r1
    1b8e:	61 c0       	rjmp	.+194    	; 0x1c52 <OLED_moveArrow+0x25c>
    1b90:	9e 2c       	mov	r9, r14
    1b92:	8f 2c       	mov	r8, r15
	}
	else if(joy_counter > arrow_position)
	{		
		//printf("%#x %#x %#x %#x %#x \n", readFromAddress(0x1c00), readFromAddress(0x1c01), readFromAddress(0x1c02), readFromAddress(0x1c03), readFromAddress(0x1c04));
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
    1b94:	b8 01       	movw	r22, r16
    1b96:	c7 01       	movw	r24, r14
    1b98:	47 de       	rcall	.-882    	; 0x1828 <OLED_bufferGoto>
		{
			for(uint8_t i = 0; i < height; i++)
			{
				for(uint8_t j = 0; j < ARROW_WIDTH; j++)
				{
					OLED_bufferGoto(height-1-i, j);
    1b9a:	80 91 10 01 	lds	r24, 0x0110
    1b9e:	90 91 11 01 	lds	r25, 0x0111
    1ba2:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <readFromAddress>
					buffer_current[j] = readFromAddress(oled_buffer_position); // save state of current row
    1ba6:	f5 01       	movw	r30, r10
    1ba8:	81 93       	st	Z+, r24
    1baa:	5f 01       	movw	r10, r30
    1bac:	0f 5f       	subi	r16, 0xFF	; 255
    1bae:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb0:	05 30       	cpi	r16, 0x05	; 5
    1bb2:	11 05       	cpc	r17, r1
    1bb4:	69 f7       	brne	.-38     	; 0x1b90 <OLED_moveArrow+0x19a>
    1bb6:	9e 01       	movw	r18, r28
    1bb8:	2a 5f       	subi	r18, 0xFA	; 250
    1bba:	3f 4f       	sbci	r19, 0xFF	; 255
		
		for(uint8_t step = 0; step < 8; step++)
		{
			for(uint8_t i = 0; i < height; i++)
			{
				for(uint8_t j = 0; j < ARROW_WIDTH; j++)
    1bbc:	79 01       	movw	r14, r18
    1bbe:	ce 01       	movw	r24, r28
    1bc0:	01 96       	adiw	r24, 0x01	; 1
    1bc2:	5c 01       	movw	r10, r24
    1bc4:	05 2d       	mov	r16, r5
    1bc6:	14 2d       	mov	r17, r4
    1bc8:	b8 01       	movw	r22, r16
    1bca:	89 2d       	mov	r24, r9
    1bcc:	98 2d       	mov	r25, r8
    1bce:	2c de       	rcall	.-936    	; 0x1828 <OLED_bufferGoto>
    1bd0:	d5 01       	movw	r26, r10
    1bd2:	2d 90       	ld	r2, X+
					buffer_current[j] = readFromAddress(oled_buffer_position); // save state of current row
				}
				
				for(uint8_t k = 0; k < ARROW_WIDTH; k++)
				{
					OLED_bufferGoto(height-1-i, k);
    1bd4:	5d 01       	movw	r10, r26
    1bd6:	f7 01       	movw	r30, r14
    1bd8:	60 81       	ld	r22, Z
    1bda:	f0 e8       	ldi	r31, 0x80	; 128
    1bdc:	6f 9f       	mul	r22, r31
					saveToAddress(oled_buffer_position, buffer_current[k]>>1 | buffer_dummy[k]<<7); // move current row 1 up + combine with highest from below
    1bde:	b0 01       	movw	r22, r0
    1be0:	11 24       	eor	r1, r1
    1be2:	82 2d       	mov	r24, r2
    1be4:	86 95       	lsr	r24
    1be6:	68 2b       	or	r22, r24
    1be8:	80 91 10 01 	lds	r24, 0x0110
    1bec:	90 91 11 01 	lds	r25, 0x0111
    1bf0:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <saveToAddress>
    1bf4:	d7 01       	movw	r26, r14
    1bf6:	2d 92       	st	X+, r2
    1bf8:	7d 01       	movw	r14, r26
    1bfa:	0f 5f       	subi	r16, 0xFF	; 255
    1bfc:	1f 4f       	sbci	r17, 0xFF	; 255
    1bfe:	05 30       	cpi	r16, 0x05	; 5
    1c00:	11 05       	cpc	r17, r1
					buffer_dummy[k] = buffer_current[k]; // current row is reference for next row
    1c02:	11 f7       	brne	.-60     	; 0x1bc8 <OLED_moveArrow+0x1d2>
    1c04:	c6 01       	movw	r24, r12
    1c06:	bf ef       	ldi	r27, 0xFF	; 255
    1c08:	cb 1a       	sub	r12, r27
    1c0a:	db 0a       	sbc	r13, r27
				{
					OLED_bufferGoto(height-1-i, j);
					buffer_current[j] = readFromAddress(oled_buffer_position); // save state of current row
				}
				
				for(uint8_t k = 0; k < ARROW_WIDTH; k++)
    1c0c:	e9 e0       	ldi	r30, 0x09	; 9
    1c0e:	ce 16       	cp	r12, r30
    1c10:	d1 04       	cpc	r13, r1
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
		
		for(uint8_t step = 0; step < 8; step++)
		{
			for(uint8_t i = 0; i < height; i++)
    1c12:	51 f0       	breq	.+20     	; 0x1c28 <OLED_moveArrow+0x232>
    1c14:	9e 01       	movw	r18, r28
    1c16:	2f 5f       	subi	r18, 0xFF	; 255
    1c18:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1a:	59 01       	movw	r10, r18
    1c1c:	05 2d       	mov	r16, r5
    1c1e:	14 2d       	mov	r17, r4
    1c20:	73 01       	movw	r14, r6
	}
	else if(joy_counter > arrow_position)
	{		
		//printf("%#x %#x %#x %#x %#x \n", readFromAddress(0x1c00), readFromAddress(0x1c01), readFromAddress(0x1c02), readFromAddress(0x1c03), readFromAddress(0x1c04));
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
    1c22:	e8 1a       	sub	r14, r24
    1c24:	f9 0a       	sbc	r15, r25
    1c26:	b4 cf       	rjmp	.-152    	; 0x1b90 <OLED_moveArrow+0x19a>
    1c28:	80 91 05 03 	lds	r24, 0x0305
    1c2c:	90 91 06 03 	lds	r25, 0x0306
		{
			for(uint8_t i = 0; i < height; i++)
			{
				for(uint8_t j = 0; j < ARROW_WIDTH; j++)
				{
					OLED_bufferGoto(height-1-i, j);
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	49 f0       	breq	.+18     	; 0x1c46 <OLED_moveArrow+0x250>
    1c34:	00 c0       	rjmp	.+0      	; 0x1c36 <OLED_moveArrow+0x240>
					saveToAddress(oled_buffer_position, buffer_current[k]>>1 | buffer_dummy[k]<<7); // move current row 1 up + combine with highest from below
					buffer_dummy[k] = buffer_current[k]; // current row is reference for next row
				}
			}
			
			while(animation_tick != 1){_delay_us(1);};
    1c36:	00 c0       	rjmp	.+0      	; 0x1c38 <OLED_moveArrow+0x242>
    1c38:	00 00       	nop
    1c3a:	80 91 05 03 	lds	r24, 0x0305
    1c3e:	90 91 06 03 	lds	r25, 0x0306
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	b9 f7       	brne	.-18     	; 0x1c34 <OLED_moveArrow+0x23e>
    1c46:	10 92 05 03 	sts	0x0305, r1
    1c4a:	10 92 06 03 	sts	0x0306, r1
    1c4e:	3a 94       	dec	r3
    1c50:	31 f0       	breq	.+12     	; 0x1c5e <OLED_moveArrow+0x268>
    1c52:	cc 24       	eor	r12, r12
			animation_tick = 0;
    1c54:	c3 94       	inc	r12
    1c56:	d1 2c       	mov	r13, r1
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	db cf       	rjmp	.-74     	; 0x1c14 <OLED_moveArrow+0x21e>
	else
	{
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
		
		for(uint8_t step = 0; step < 8; step++)
    1c5e:	80 91 07 03 	lds	r24, 0x0307
		{
			for(uint8_t i = 0; i < height; i++)
			{
				for(uint8_t j = 0; j < ARROW_WIDTH; j++)
    1c62:	90 91 08 03 	lds	r25, 0x0308
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
		
		for(uint8_t step = 0; step < 8; step++)
		{
			for(uint8_t i = 0; i < height; i++)
    1c66:	01 97       	sbiw	r24, 0x01	; 1
    1c68:	90 93 08 03 	sts	0x0308, r25
			}
			
			while(animation_tick != 1){_delay_us(1);};
			animation_tick = 0;
		}
		arrow_position--;
    1c6c:	80 93 07 03 	sts	0x0307, r24
    1c70:	2a 96       	adiw	r28, 0x0a	; 10
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	df 91       	pop	r29
	}
	
}
    1c7e:	cf 91       	pop	r28
    1c80:	1f 91       	pop	r17
    1c82:	0f 91       	pop	r16
    1c84:	ff 90       	pop	r15
    1c86:	ef 90       	pop	r14
    1c88:	df 90       	pop	r13
    1c8a:	cf 90       	pop	r12
    1c8c:	bf 90       	pop	r11
    1c8e:	af 90       	pop	r10
    1c90:	9f 90       	pop	r9
    1c92:	8f 90       	pop	r8
    1c94:	7f 90       	pop	r7
    1c96:	6f 90       	pop	r6
    1c98:	5f 90       	pop	r5
    1c9a:	4f 90       	pop	r4
    1c9c:	3f 90       	pop	r3
    1c9e:	2f 90       	pop	r2
    1ca0:	08 95       	ret

00001ca2 <OLED_resetArrow>:
    1ca2:	7e de       	rcall	.-772    	; 0x19a0 <OLED_clearArrow>
    1ca4:	60 e0       	ldi	r22, 0x00	; 0
    1ca6:	70 e0       	ldi	r23, 0x00	; 0
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	bd dd       	rcall	.-1158   	; 0x1828 <OLED_bufferGoto>
    1cae:	37 de       	rcall	.-914    	; 0x191e <OLED_printArrow>
//------------------------------------------------------------------------------
//
void OLED_resetArrow()
{
	OLED_clearArrow();
	OLED_bufferGoto(0,0);
    1cb0:	10 92 08 03 	sts	0x0308, r1
	OLED_printArrow();
    1cb4:	10 92 07 03 	sts	0x0307, r1
	arrow_position = 0;
    1cb8:	08 95       	ret

00001cba <OLED_setAnimationTick>:
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	90 93 06 03 	sts	0x0306, r25

//------------------------------------------------------------------------------
//
void OLED_setAnimationTick()
{
		animation_tick = 1;
    1cc2:	80 93 05 03 	sts	0x0305, r24
    1cc6:	08 95       	ret

00001cc8 <OLED_line>:


//------------------------------------------------------------------------------
//
void OLED_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
    1cc8:	7f 92       	push	r7
    1cca:	8f 92       	push	r8
    1ccc:	9f 92       	push	r9
    1cce:	af 92       	push	r10
    1cd0:	bf 92       	push	r11
    1cd2:	cf 92       	push	r12
    1cd4:	df 92       	push	r13
    1cd6:	ef 92       	push	r14
    1cd8:	ff 92       	push	r15
    1cda:	0f 93       	push	r16
    1cdc:	1f 93       	push	r17
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
    1ce2:	d8 2f       	mov	r29, r24
    1ce4:	16 2f       	mov	r17, r22
    1ce6:	04 2f       	mov	r16, r20
    1ce8:	72 2e       	mov	r7, r18
	if(x0 == x1)
    1cea:	84 13       	cpse	r24, r20
    1cec:	0a c0       	rjmp	.+20     	; 0x1d02 <OLED_line+0x3a>
	{
		for(uint8_t v = y0; v <= y1; v++)
    1cee:	26 17       	cp	r18, r22
    1cf0:	08 f4       	brcc	.+2      	; 0x1cf4 <OLED_line+0x2c>
    1cf2:	9e c0       	rjmp	.+316    	; 0x1e30 <OLED_line+0x168>
		{
			OLED_writePixelToOLED(x0, v);
    1cf4:	61 2f       	mov	r22, r17
    1cf6:	8d 2f       	mov	r24, r29
    1cf8:	a9 dd       	rcall	.-1198   	; 0x184c <OLED_writePixelToOLED>
    1cfa:	1f 5f       	subi	r17, 0xFF	; 255
//
void OLED_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
	if(x0 == x1)
	{
		for(uint8_t v = y0; v <= y1; v++)
    1cfc:	71 16       	cp	r7, r17
    1cfe:	d0 f7       	brcc	.-12     	; 0x1cf4 <OLED_line+0x2c>
    1d00:	97 c0       	rjmp	.+302    	; 0x1e30 <OLED_line+0x168>
    1d02:	62 17       	cp	r22, r18
			OLED_writePixelToOLED(x0, v);
		}
	}
	else
	{	
		if(y0 < y1)
    1d04:	08 f0       	brcs	.+2      	; 0x1d08 <OLED_line+0x40>
    1d06:	4b c0       	rjmp	.+150    	; 0x1d9e <OLED_line+0xd6>
    1d08:	6e 30       	cpi	r22, 0x0E	; 14
		{
 			float m = 0.5;
			float c;
 			
			if(y0 == 14)
    1d0a:	59 f0       	breq	.+22     	; 0x1d22 <OLED_line+0x5a>
    1d0c:	67 32       	cpi	r22, 0x27	; 39
			{
				c = -7.5;
			}
			else if(y0 == 39)
    1d0e:	91 f4       	brne	.+36     	; 0x1d34 <OLED_line+0x6c>
    1d10:	0f 2e       	mov	r0, r31
			{
				c = 17.5;
    1d12:	c1 2c       	mov	r12, r1
    1d14:	d1 2c       	mov	r13, r1
    1d16:	fc e8       	ldi	r31, 0x8C	; 140
    1d18:	ef 2e       	mov	r14, r31
    1d1a:	f1 e4       	ldi	r31, 0x41	; 65
    1d1c:	ff 2e       	mov	r15, r31
    1d1e:	f0 2d       	mov	r31, r0
    1d20:	11 c0       	rjmp	.+34     	; 0x1d44 <OLED_line+0x7c>
    1d22:	0f 2e       	mov	r0, r31
 			float m = 0.5;
			float c;
 			
			if(y0 == 14)
			{
				c = -7.5;
    1d24:	c1 2c       	mov	r12, r1
    1d26:	d1 2c       	mov	r13, r1
    1d28:	f0 ef       	ldi	r31, 0xF0	; 240
    1d2a:	ef 2e       	mov	r14, r31
    1d2c:	f0 ec       	ldi	r31, 0xC0	; 192
    1d2e:	ff 2e       	mov	r15, r31
    1d30:	f0 2d       	mov	r31, r0
    1d32:	08 c0       	rjmp	.+16     	; 0x1d44 <OLED_line+0x7c>
    1d34:	0f 2e       	mov	r0, r31
			{
				c = 17.5;
			}
			else
			{
				c = -27.5;
    1d36:	c1 2c       	mov	r12, r1
    1d38:	d1 2c       	mov	r13, r1
    1d3a:	fc ed       	ldi	r31, 0xDC	; 220
    1d3c:	ef 2e       	mov	r14, r31
    1d3e:	f1 ec       	ldi	r31, 0xC1	; 193
    1d40:	ff 2e       	mov	r15, r31
    1d42:	f0 2d       	mov	r31, r0
    1d44:	0d 17       	cp	r16, r29
			}
						
			for(uint8_t u = x0; u <= x1; u++)
    1d46:	08 f4       	brcc	.+2      	; 0x1d4a <OLED_line+0x82>
    1d48:	73 c0       	rjmp	.+230    	; 0x1e30 <OLED_line+0x168>
    1d4a:	1b c0       	rjmp	.+54     	; 0x1d82 <OLED_line+0xba>
    1d4c:	6c 2f       	mov	r22, r28
			{
				for(uint8_t v = y0; v <= y1; v++)
				{
					if((v-u*m-c) == 0)
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	07 d3       	rcall	.+1550   	; 0x2364 <__floatsisf>
    1d56:	a5 01       	movw	r20, r10
    1d58:	94 01       	movw	r18, r8
    1d5a:	65 d2       	rcall	.+1226   	; 0x2226 <__subsf3>
    1d5c:	a7 01       	movw	r20, r14
    1d5e:	96 01       	movw	r18, r12
    1d60:	62 d2       	rcall	.+1220   	; 0x2226 <__subsf3>
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	a9 01       	movw	r20, r18
    1d68:	c3 d2       	rcall	.+1414   	; 0x22f0 <__cmpsf2>
    1d6a:	81 11       	cpse	r24, r1
    1d6c:	03 c0       	rjmp	.+6      	; 0x1d74 <OLED_line+0xac>
    1d6e:	6c 2f       	mov	r22, r28
    1d70:	8d 2f       	mov	r24, r29
    1d72:	6c dd       	rcall	.-1320   	; 0x184c <OLED_writePixelToOLED>
    1d74:	cf 5f       	subi	r28, 0xFF	; 255
    1d76:	7c 16       	cp	r7, r28
					{
						OLED_writePixelToOLED(u, v);
    1d78:	48 f7       	brcc	.-46     	; 0x1d4c <OLED_line+0x84>
    1d7a:	df 5f       	subi	r29, 0xFF	; 255
    1d7c:	0d 17       	cp	r16, r29
    1d7e:	08 f4       	brcc	.+2      	; 0x1d82 <OLED_line+0xba>
				c = -27.5;
			}
						
			for(uint8_t u = x0; u <= x1; u++)
			{
				for(uint8_t v = y0; v <= y1; v++)
    1d80:	57 c0       	rjmp	.+174    	; 0x1e30 <OLED_line+0x168>
    1d82:	6d 2f       	mov	r22, r29
    1d84:	70 e0       	ldi	r23, 0x00	; 0
			else
			{
				c = -27.5;
			}
						
			for(uint8_t u = x0; u <= x1; u++)
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	ec d2       	rcall	.+1496   	; 0x2364 <__floatsisf>
    1d8c:	20 e0       	ldi	r18, 0x00	; 0
			{
				for(uint8_t v = y0; v <= y1; v++)
				{
					if((v-u*m-c) == 0)
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	40 e0       	ldi	r20, 0x00	; 0
    1d92:	5f e3       	ldi	r21, 0x3F	; 63
    1d94:	d0 d3       	rcall	.+1952   	; 0x2536 <__mulsf3>
    1d96:	4b 01       	movw	r8, r22
    1d98:	5c 01       	movw	r10, r24
    1d9a:	c1 2f       	mov	r28, r17
    1d9c:	d7 cf       	rjmp	.-82     	; 0x1d4c <OLED_line+0x84>
    1d9e:	6e 30       	cpi	r22, 0x0E	; 14
    1da0:	59 f0       	breq	.+22     	; 0x1db8 <OLED_line+0xf0>
    1da2:	68 31       	cpi	r22, 0x18	; 24
    1da4:	91 f4       	brne	.+36     	; 0x1dca <OLED_line+0x102>
    1da6:	0f 2e       	mov	r0, r31
    1da8:	81 2c       	mov	r8, r1
    1daa:	91 2c       	mov	r9, r1
    1dac:	fe e5       	ldi	r31, 0x5E	; 94
		else
		{
			float m = -0.5;
			float c;
			
			if(y0 == 14)
    1dae:	af 2e       	mov	r10, r31
    1db0:	f2 e4       	ldi	r31, 0x42	; 66
			{
				c = 35.5;
			}
			else if(y0 == 24)
    1db2:	bf 2e       	mov	r11, r31
    1db4:	f0 2d       	mov	r31, r0
			{
				c = 55.5;
    1db6:	11 c0       	rjmp	.+34     	; 0x1dda <OLED_line+0x112>
    1db8:	0f 2e       	mov	r0, r31
    1dba:	81 2c       	mov	r8, r1
    1dbc:	91 2c       	mov	r9, r1
    1dbe:	fe e0       	ldi	r31, 0x0E	; 14
    1dc0:	af 2e       	mov	r10, r31
    1dc2:	f2 e4       	ldi	r31, 0x42	; 66
    1dc4:	bf 2e       	mov	r11, r31
    1dc6:	f0 2d       	mov	r31, r0
			float m = -0.5;
			float c;
			
			if(y0 == 14)
			{
				c = 35.5;
    1dc8:	08 c0       	rjmp	.+16     	; 0x1dda <OLED_line+0x112>
    1dca:	0f 2e       	mov	r0, r31
    1dcc:	81 2c       	mov	r8, r1
    1dce:	91 2c       	mov	r9, r1
    1dd0:	f1 ea       	ldi	r31, 0xA1	; 161
    1dd2:	af 2e       	mov	r10, r31
    1dd4:	f2 e4       	ldi	r31, 0x42	; 66
    1dd6:	bf 2e       	mov	r11, r31
    1dd8:	f0 2d       	mov	r31, r0
			{
				c = 55.5;
			}
			else
			{
				c = 80.5;
    1dda:	0d 17       	cp	r16, r29
    1ddc:	48 f1       	brcs	.+82     	; 0x1e30 <OLED_line+0x168>
    1dde:	1a c0       	rjmp	.+52     	; 0x1e14 <OLED_line+0x14c>
    1de0:	6c 2f       	mov	r22, r28
    1de2:	70 e0       	ldi	r23, 0x00	; 0
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	bd d2       	rcall	.+1402   	; 0x2364 <__floatsisf>
			}
						
			for(uint8_t u = x0; u <= x1; u++)
    1dea:	a7 01       	movw	r20, r14
    1dec:	96 01       	movw	r18, r12
    1dee:	1b d2       	rcall	.+1078   	; 0x2226 <__subsf3>
			{
				for(uint8_t v = y1; v <= y0; v++)
				{
					if((v-u*m-c) == 0)
    1df0:	a5 01       	movw	r20, r10
    1df2:	94 01       	movw	r18, r8
    1df4:	18 d2       	rcall	.+1072   	; 0x2226 <__subsf3>
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	a9 01       	movw	r20, r18
    1dfc:	79 d2       	rcall	.+1266   	; 0x22f0 <__cmpsf2>
    1dfe:	81 11       	cpse	r24, r1
    1e00:	03 c0       	rjmp	.+6      	; 0x1e08 <OLED_line+0x140>
    1e02:	6c 2f       	mov	r22, r28
    1e04:	8d 2f       	mov	r24, r29
    1e06:	22 dd       	rcall	.-1468   	; 0x184c <OLED_writePixelToOLED>
    1e08:	cf 5f       	subi	r28, 0xFF	; 255
    1e0a:	1c 17       	cp	r17, r28
    1e0c:	48 f7       	brcc	.-46     	; 0x1de0 <OLED_line+0x118>
    1e0e:	df 5f       	subi	r29, 0xFF	; 255
    1e10:	0d 17       	cp	r16, r29
    1e12:	70 f0       	brcs	.+28     	; 0x1e30 <OLED_line+0x168>
    1e14:	6d 2f       	mov	r22, r29
    1e16:	70 e0       	ldi	r23, 0x00	; 0
    1e18:	80 e0       	ldi	r24, 0x00	; 0
					{
						OLED_writePixelToOLED(u, v);
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	a3 d2       	rcall	.+1350   	; 0x2364 <__floatsisf>
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
				c = 80.5;
			}
						
			for(uint8_t u = x0; u <= x1; u++)
			{
				for(uint8_t v = y1; v <= y0; v++)
    1e22:	40 e0       	ldi	r20, 0x00	; 0
    1e24:	5f eb       	ldi	r21, 0xBF	; 191
    1e26:	87 d3       	rcall	.+1806   	; 0x2536 <__mulsf3>
			else
			{
				c = 80.5;
			}
						
			for(uint8_t u = x0; u <= x1; u++)
    1e28:	6b 01       	movw	r12, r22
    1e2a:	7c 01       	movw	r14, r24
    1e2c:	c7 2d       	mov	r28, r7
			{
				for(uint8_t v = y1; v <= y0; v++)
				{
					if((v-u*m-c) == 0)
    1e2e:	d8 cf       	rjmp	.-80     	; 0x1de0 <OLED_line+0x118>
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	ff 90       	pop	r15
    1e3a:	ef 90       	pop	r14
    1e3c:	df 90       	pop	r13
    1e3e:	cf 90       	pop	r12
    1e40:	bf 90       	pop	r11
    1e42:	af 90       	pop	r10
    1e44:	9f 90       	pop	r9
    1e46:	8f 90       	pop	r8
    1e48:	7f 90       	pop	r7
    1e4a:	08 95       	ret

00001e4c <OLED_circle>:
    1e4c:	2f 92       	push	r2
					}
				}
			}
		}
	}
}
    1e4e:	3f 92       	push	r3
    1e50:	4f 92       	push	r4
    1e52:	5f 92       	push	r5
    1e54:	6f 92       	push	r6
    1e56:	7f 92       	push	r7
    1e58:	8f 92       	push	r8
    1e5a:	9f 92       	push	r9
    1e5c:	af 92       	push	r10
    1e5e:	bf 92       	push	r11
    1e60:	cf 92       	push	r12
    1e62:	df 92       	push	r13
    1e64:	ef 92       	push	r14
    1e66:	ff 92       	push	r15
    1e68:	0f 93       	push	r16


//------------------------------------------------------------------------------
//
void OLED_circle(uint8_t x0, uint8_t y0, uint8_t r)
{
    1e6a:	1f 93       	push	r17
    1e6c:	cf 93       	push	r28
    1e6e:	df 93       	push	r29
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <OLED_circle+0x26>
    1e72:	1f 92       	push	r1
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	08 2f       	mov	r16, r24
    1e7a:	36 2e       	mov	r3, r22
    1e7c:	44 2e       	mov	r4, r20
	OLED_writePixelToOLED(x0, y0);
    1e7e:	e6 dc       	rcall	.-1588   	; 0x184c <OLED_writePixelToOLED>
    1e80:	23 2c       	mov	r2, r3
	for(float theta = 0; theta < 2*M_PI/4; theta += step)
	{
		u = x0 + (int)(r*cos(theta));
		v = y0 + (int)(r*sin(theta));
		OLED_writePixelToOLED(u, v);
		OLED_writePixelToOLED(u, 2*y0-v);
    1e82:	22 0c       	add	r2, r2
    1e84:	80 2f       	mov	r24, r16
 		OLED_writePixelToOLED(2*x0-u, v);
    1e86:	88 0f       	add	r24, r24
    1e88:	89 83       	std	Y+1, r24	; 0x01
    1e8a:	e8 e0       	ldi	r30, 0x08	; 8
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	fb 83       	std	Y+3, r31	; 0x03
    1e90:	ea 83       	std	Y+2, r30	; 0x02
    1e92:	c1 2c       	mov	r12, r1
	OLED_writePixelToOLED(x0, y0);
	
	float step = 2*M_PI_4/7;
	uint8_t u, v;
	
	for(float theta = 0; theta < 2*M_PI/4; theta += step)
    1e94:	d1 2c       	mov	r13, r1
    1e96:	76 01       	movw	r14, r12
    1e98:	51 2c       	mov	r5, r1
	{
		u = x0 + (int)(r*cos(theta));
    1e9a:	61 2c       	mov	r6, r1
    1e9c:	71 2c       	mov	r7, r1
    1e9e:	c3 01       	movw	r24, r6
    1ea0:	b2 01       	movw	r22, r4
    1ea2:	60 d2       	rcall	.+1216   	; 0x2364 <__floatsisf>
    1ea4:	4b 01       	movw	r8, r22
    1ea6:	5c 01       	movw	r10, r24
    1ea8:	c7 01       	movw	r24, r14
    1eaa:	b6 01       	movw	r22, r12
    1eac:	25 d2       	rcall	.+1098   	; 0x22f8 <cos>
    1eae:	9b 01       	movw	r18, r22
    1eb0:	ac 01       	movw	r20, r24
    1eb2:	c5 01       	movw	r24, r10
    1eb4:	b4 01       	movw	r22, r8
    1eb6:	3f d3       	rcall	.+1662   	; 0x2536 <__mulsf3>
    1eb8:	22 d2       	rcall	.+1092   	; 0x22fe <__fixsfsi>
    1eba:	10 2f       	mov	r17, r16
    1ebc:	16 0f       	add	r17, r22
    1ebe:	c7 01       	movw	r24, r14
    1ec0:	b6 01       	movw	r22, r12
    1ec2:	9c d3       	rcall	.+1848   	; 0x25fc <sin>
    1ec4:	9b 01       	movw	r18, r22
    1ec6:	ac 01       	movw	r20, r24
		v = y0 + (int)(r*sin(theta));
    1ec8:	c5 01       	movw	r24, r10
    1eca:	b4 01       	movw	r22, r8
    1ecc:	34 d3       	rcall	.+1640   	; 0x2536 <__mulsf3>
    1ece:	17 d2       	rcall	.+1070   	; 0x22fe <__fixsfsi>
    1ed0:	b3 2c       	mov	r11, r3
    1ed2:	b6 0e       	add	r11, r22
    1ed4:	6b 2d       	mov	r22, r11
    1ed6:	81 2f       	mov	r24, r17
    1ed8:	b9 dc       	rcall	.-1678   	; 0x184c <OLED_writePixelToOLED>
    1eda:	a2 2c       	mov	r10, r2
    1edc:	ab 18       	sub	r10, r11
    1ede:	6a 2d       	mov	r22, r10
    1ee0:	81 2f       	mov	r24, r17
    1ee2:	b4 dc       	rcall	.-1688   	; 0x184c <OLED_writePixelToOLED>
		OLED_writePixelToOLED(u, v);
    1ee4:	f9 81       	ldd	r31, Y+1	; 0x01
    1ee6:	f1 1b       	sub	r31, r17
    1ee8:	1f 2f       	mov	r17, r31
    1eea:	6b 2d       	mov	r22, r11
		OLED_writePixelToOLED(u, 2*y0-v);
    1eec:	8f 2f       	mov	r24, r31
    1eee:	ae dc       	rcall	.-1700   	; 0x184c <OLED_writePixelToOLED>
    1ef0:	6a 2d       	mov	r22, r10
    1ef2:	81 2f       	mov	r24, r17
    1ef4:	ab dc       	rcall	.-1706   	; 0x184c <OLED_writePixelToOLED>
    1ef6:	2a ef       	ldi	r18, 0xFA	; 250
 		OLED_writePixelToOLED(2*x0-u, v);
    1ef8:	38 ec       	ldi	r19, 0xC8	; 200
    1efa:	45 e6       	ldi	r20, 0x65	; 101
    1efc:	5e e3       	ldi	r21, 0x3E	; 62
    1efe:	c7 01       	movw	r24, r14
    1f00:	b6 01       	movw	r22, r12
    1f02:	92 d1       	rcall	.+804    	; 0x2228 <__addsf3>
    1f04:	6b 01       	movw	r12, r22
 		OLED_writePixelToOLED(2*x0-u, 2*y0-v);
    1f06:	7c 01       	movw	r14, r24
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
	OLED_writePixelToOLED(x0, y0);
	
	float step = 2*M_PI_4/7;
	uint8_t u, v;
	
	for(float theta = 0; theta < 2*M_PI/4; theta += step)
    1f0e:	9b 83       	std	Y+3, r25	; 0x03
    1f10:	8a 83       	std	Y+2, r24	; 0x02
    1f12:	89 2b       	or	r24, r25
    1f14:	09 f0       	breq	.+2      	; 0x1f18 <OLED_circle+0xcc>
    1f16:	c3 cf       	rjmp	.-122    	; 0x1e9e <OLED_circle+0x52>
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	1f 91       	pop	r17
    1f24:	0f 91       	pop	r16
    1f26:	ff 90       	pop	r15
    1f28:	ef 90       	pop	r14
    1f2a:	df 90       	pop	r13
    1f2c:	cf 90       	pop	r12
    1f2e:	bf 90       	pop	r11
    1f30:	af 90       	pop	r10
// 		OLED_writePixelToOLED(u, v);
// 		OLED_writePixelToOLED(u, v);
// 		OLED_writePixelToOLED(u, v);
// 		OLED_writePixelToOLED(u, v);
	}
}
    1f32:	9f 90       	pop	r9
    1f34:	8f 90       	pop	r8
    1f36:	7f 90       	pop	r7
    1f38:	6f 90       	pop	r6
    1f3a:	5f 90       	pop	r5
    1f3c:	4f 90       	pop	r4
    1f3e:	3f 90       	pop	r3
    1f40:	2f 90       	pop	r2
    1f42:	08 95       	ret

00001f44 <OLED_logo>:
    1f44:	27 e2       	ldi	r18, 0x27	; 39
    1f46:	4b e2       	ldi	r20, 0x2B	; 43
    1f48:	6e e0       	ldi	r22, 0x0E	; 14
    1f4a:	8b e2       	ldi	r24, 0x2B	; 43
    1f4c:	bd de       	rcall	.-646    	; 0x1cc8 <OLED_line>
    1f4e:	27 e2       	ldi	r18, 0x27	; 39
    1f50:	43 e5       	ldi	r20, 0x53	; 83
    1f52:	6e e0       	ldi	r22, 0x0E	; 14
    1f54:	83 e5       	ldi	r24, 0x53	; 83
    1f56:	b8 de       	rcall	.-656    	; 0x1cc8 <OLED_line>
    1f58:	21 e3       	ldi	r18, 0x31	; 49
    1f5a:	4f e3       	ldi	r20, 0x3F	; 63
    1f5c:	68 e1       	ldi	r22, 0x18	; 24
	
	// draw cube top
	// vertical lines
	OLED_line(43, 14, 43, 39);
	OLED_line(83, 14, 83, 39);
	OLED_line(63, 24, 63, 49);
    1f5e:	8f e3       	ldi	r24, 0x3F	; 63
    1f60:	b3 de       	rcall	.-666    	; 0x1cc8 <OLED_line>
    1f62:	24 e0       	ldi	r18, 0x04	; 4
    1f64:	4f e3       	ldi	r20, 0x3F	; 63
    1f66:	6e e0       	ldi	r22, 0x0E	; 14
	// diagonal lines
	// left half
 	OLED_line(43, 14, 63, 4);
    1f68:	8b e2       	ldi	r24, 0x2B	; 43
    1f6a:	ae de       	rcall	.-676    	; 0x1cc8 <OLED_line>
    1f6c:	28 e1       	ldi	r18, 0x18	; 24
    1f6e:	4f e3       	ldi	r20, 0x3F	; 63
    1f70:	6e e0       	ldi	r22, 0x0E	; 14
    1f72:	8b e2       	ldi	r24, 0x2B	; 43
 	OLED_line(43, 14, 63, 24);
    1f74:	a9 de       	rcall	.-686    	; 0x1cc8 <OLED_line>
    1f76:	21 e3       	ldi	r18, 0x31	; 49
    1f78:	4f e3       	ldi	r20, 0x3F	; 63
    1f7a:	67 e2       	ldi	r22, 0x27	; 39
    1f7c:	8b e2       	ldi	r24, 0x2B	; 43
    1f7e:	a4 de       	rcall	.-696    	; 0x1cc8 <OLED_line>
	OLED_line(43, 39, 63, 49);
    1f80:	2e e0       	ldi	r18, 0x0E	; 14
    1f82:	43 e5       	ldi	r20, 0x53	; 83
    1f84:	64 e0       	ldi	r22, 0x04	; 4
    1f86:	8f e3       	ldi	r24, 0x3F	; 63
    1f88:	9f de       	rcall	.-706    	; 0x1cc8 <OLED_line>
    1f8a:	2e e0       	ldi	r18, 0x0E	; 14
	// right half
	OLED_line(63, 4, 83, 14);
    1f8c:	43 e5       	ldi	r20, 0x53	; 83
    1f8e:	64 e0       	ldi	r22, 0x04	; 4
    1f90:	8f e3       	ldi	r24, 0x3F	; 63
    1f92:	9a de       	rcall	.-716    	; 0x1cc8 <OLED_line>
    1f94:	2e e0       	ldi	r18, 0x0E	; 14
    1f96:	43 e5       	ldi	r20, 0x53	; 83
	OLED_line(63, 4, 83, 14);
    1f98:	68 e1       	ldi	r22, 0x18	; 24
    1f9a:	8f e3       	ldi	r24, 0x3F	; 63
    1f9c:	95 de       	rcall	.-726    	; 0x1cc8 <OLED_line>
    1f9e:	27 e2       	ldi	r18, 0x27	; 39
    1fa0:	43 e5       	ldi	r20, 0x53	; 83
    1fa2:	61 e3       	ldi	r22, 0x31	; 49
	OLED_line(63, 24, 83, 14);
    1fa4:	8f e3       	ldi	r24, 0x3F	; 63
    1fa6:	90 de       	rcall	.-736    	; 0x1cc8 <OLED_line>
    1fa8:	6b e3       	ldi	r22, 0x3B	; 59
    1faa:	70 e0       	ldi	r23, 0x00	; 0
    1fac:	81 e0       	ldi	r24, 0x01	; 1
    1fae:	90 e0       	ldi	r25, 0x00	; 0
	OLED_line(63, 49, 83, 39);
    1fb0:	3b dc       	rcall	.-1930   	; 0x1828 <OLED_bufferGoto>
    1fb2:	87 e4       	ldi	r24, 0x47	; 71
    1fb4:	6b dc       	rcall	.-1834   	; 0x188c <OLED_printCharacter>
    1fb6:	61 e3       	ldi	r22, 0x31	; 49
    1fb8:	70 e0       	ldi	r23, 0x00	; 0
    1fba:	84 e0       	ldi	r24, 0x04	; 4
	
	// letters
	OLED_bufferGoto(1, 59);
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	34 dc       	rcall	.-1944   	; 0x1828 <OLED_bufferGoto>
    1fc0:	84 e3       	ldi	r24, 0x34	; 52
    1fc2:	64 dc       	rcall	.-1848   	; 0x188c <OLED_printCharacter>
    1fc4:	65 e4       	ldi	r22, 0x45	; 69
    1fc6:	70 e0       	ldi	r23, 0x00	; 0
	OLED_printCharacter('G');
    1fc8:	84 e0       	ldi	r24, 0x04	; 4
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	2d dc       	rcall	.-1958   	; 0x1828 <OLED_bufferGoto>
	OLED_bufferGoto(4, 49);
    1fce:	86 e3       	ldi	r24, 0x36	; 54
    1fd0:	5d cc       	rjmp	.-1862   	; 0x188c <OLED_printCharacter>
    1fd2:	08 95       	ret

00001fd4 <OLED_splashScreen>:
    1fd4:	80 ea       	ldi	r24, 0xA0	; 160
    1fd6:	92 e0       	ldi	r25, 0x02	; 2
    1fd8:	34 d5       	rcall	.+2664   	; 0x2a42 <puts>
	OLED_printCharacter('4');
    1fda:	b4 df       	rcall	.-152    	; 0x1f44 <OLED_logo>
    1fdc:	6c e0       	ldi	r22, 0x0C	; 12
    1fde:	70 e0       	ldi	r23, 0x00	; 0
	OLED_bufferGoto(4, 69);
    1fe0:	87 e0       	ldi	r24, 0x07	; 7
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	21 dc       	rcall	.-1982   	; 0x1828 <OLED_bufferGoto>
    1fe6:	85 eb       	ldi	r24, 0xB5	; 181
    1fe8:	92 e0       	ldi	r25, 0x02	; 2
    1fea:	7d cc       	rjmp	.-1798   	; 0x18e6 <OLED_printString>
	OLED_printCharacter('6');
    1fec:	08 95       	ret

00001fee <OLED_init>:
    1fee:	cf 93       	push	r28
    1ff0:	e0 91 18 01 	lds	r30, 0x0118
void OLED_splashScreen()
{
	printf("run splash screen...\n");
	OLED_logo();
 	OLED_bufferGoto(7,12);
 	OLED_printString("Group 46 Soft");
    1ff4:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1ff8:	8e ea       	ldi	r24, 0xAE	; 174
    1ffa:	80 83       	st	Z, r24
// Default initialization routine of the OLED display.

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
    1ffc:	e0 91 18 01 	lds	r30, 0x0118
    2000:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    2004:	81 ea       	ldi	r24, 0xA1	; 161
    2006:	80 83       	st	Z, r24

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
    2008:	e0 91 18 01 	lds	r30, 0x0118
    200c:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    2010:	8a ed       	ldi	r24, 0xDA	; 218
    2012:	80 83       	st	Z, r24
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
    2014:	e0 91 18 01 	lds	r30, 0x0118
    2018:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    201c:	82 e1       	ldi	r24, 0x12	; 18
    201e:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    2020:	e0 91 18 01 	lds	r30, 0x0118
    2024:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    2028:	88 ec       	ldi	r24, 0xC8	; 200
    202a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    202c:	e0 91 18 01 	lds	r30, 0x0118
    2030:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    2034:	88 ea       	ldi	r24, 0xA8	; 168
    2036:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    2038:	e0 91 18 01 	lds	r30, 0x0118
    203c:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    2040:	8f e3       	ldi	r24, 0x3F	; 63
    2042:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    2044:	e0 91 18 01 	lds	r30, 0x0118
    2048:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    204c:	85 ed       	ldi	r24, 0xD5	; 213
    204e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
    2050:	e0 91 18 01 	lds	r30, 0x0118
    2054:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    2058:	80 e8       	ldi	r24, 0x80	; 128
    205a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    205c:	e0 91 18 01 	lds	r30, 0x0118
    2060:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    2064:	81 e8       	ldi	r24, 0x81	; 129
    2066:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    2068:	e0 91 18 01 	lds	r30, 0x0118
    206c:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    2070:	c0 e5       	ldi	r28, 0x50	; 80
    2072:	c0 83       	st	Z, r28
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    2074:	e0 91 18 01 	lds	r30, 0x0118
    2078:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    207c:	89 ed       	ldi	r24, 0xD9	; 217
    207e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
    2080:	e0 91 18 01 	lds	r30, 0x0118
    2084:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    2088:	81 e2       	ldi	r24, 0x21	; 33
    208a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    208c:	e0 91 18 01 	lds	r30, 0x0118
    2090:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    2094:	80 e2       	ldi	r24, 0x20	; 32
    2096:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
    2098:	e0 91 18 01 	lds	r30, 0x0118
    209c:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    20a0:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    20a2:	e0 91 18 01 	lds	r30, 0x0118
    20a6:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    20aa:	8b ed       	ldi	r24, 0xDB	; 219
    20ac:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    20ae:	e0 91 18 01 	lds	r30, 0x0118
    20b2:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    20b6:	80 e3       	ldi	r24, 0x30	; 48
    20b8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    20ba:	e0 91 18 01 	lds	r30, 0x0118
    20be:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    20c2:	8d ea       	ldi	r24, 0xAD	; 173
    20c4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    20c6:	e0 91 18 01 	lds	r30, 0x0118
    20ca:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    20ce:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    20d0:	e0 91 18 01 	lds	r30, 0x0118
    20d4:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    20d8:	84 ea       	ldi	r24, 0xA4	; 164
    20da:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    20dc:	e0 91 18 01 	lds	r30, 0x0118
    20e0:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    20e4:	86 ea       	ldi	r24, 0xA6	; 166
    20e6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    20e8:	e0 91 18 01 	lds	r30, 0x0118
    20ec:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    20f0:	8f ea       	ldi	r24, 0xAF	; 175
    20f2:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    20f4:	42 db       	rcall	.-2428   	; 0x177a <OLED_clear>
    20f6:	6e df       	rcall	.-292    	; 0x1fd4 <OLED_splashScreen>
	OLED_splashScreen();
    20f8:	83 b7       	in	r24, 0x33	; 51
    20fa:	8d 60       	ori	r24, 0x0D	; 13
	//OLED_flyingArrows();
	
	// setup 8-bit counter0 without PWM
	// setting Mode of Operation to CTC and Prescaler to div/1024
	TCCR0 |= (1<<WGM01) | (1<<CS02) | (1<<CS00);
    20fc:	83 bf       	out	0x33, r24	; 51
    20fe:	89 b7       	in	r24, 0x39	; 57
    2100:	81 60       	ori	r24, 0x01	; 1
	// Output Compare Interrupt Enable
	TIMSK |= (1<<OCIE0);
    2102:	89 bf       	out	0x39, r24	; 57
    2104:	c1 bf       	out	0x31, r28	; 49
    2106:	cf 91       	pop	r28
	// 17ms Counter cycle (4800Hz -> 80 cycles)
	OCR0 = 80;
    2108:	08 95       	ret

0000210a <SLI_init>:
uint8_t SLI_startup = 1; 

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    210a:	10 92 25 03 	sts	0x0325, r1
	currentSliPosition.L_abs = 0;
    210e:	10 92 26 03 	sts	0x0326, r1
	currentSliPosition.R_per = 0;
    2112:	10 92 27 03 	sts	0x0327, r1
	currentSliPosition.L_per = 0;
    2116:	10 92 28 03 	sts	0x0328, r1
    211a:	08 95       	ret

0000211c <SLI_requestCurrentPosition>:

//------------------------------------------------------------------------------
// This function requests an AD conversion for the specified slider.
void SLI_requestCurrentPosition(uint8_t side)
{
	if(side == 'l')
    211c:	8c 36       	cpi	r24, 0x6C	; 108
    211e:	39 f4       	brne	.+14     	; 0x212e <SLI_requestCurrentPosition+0x12>
	{
		ADC_request(L_channel, adc_ext_ram);
    2120:	60 91 06 01 	lds	r22, 0x0106
    2124:	70 91 07 01 	lds	r23, 0x0107
    2128:	83 e0       	ldi	r24, 0x03	; 3
    212a:	b2 c2       	rjmp	.+1380   	; 0x2690 <ADC_request>
    212c:	08 95       	ret
    212e:	82 37       	cpi	r24, 0x72	; 114
	}

	else if(side == 'r')
    2130:	31 f4       	brne	.+12     	; 0x213e <SLI_requestCurrentPosition+0x22>
    2132:	60 91 06 01 	lds	r22, 0x0106
	{
		ADC_request(R_channel, adc_ext_ram);
    2136:	70 91 07 01 	lds	r23, 0x0107
    213a:	84 e0       	ldi	r24, 0x04	; 4
    213c:	a9 c2       	rjmp	.+1362   	; 0x2690 <ADC_request>
    213e:	08 95       	ret

00002140 <SLI_updatePosition>:
    2140:	8c 36       	cpi	r24, 0x6C	; 108
    2142:	71 f4       	brne	.+28     	; 0x2160 <SLI_updatePosition+0x20>
// received.
void SLI_updatePosition(uint8_t side)
{
	if(side == 'l')
	{
		currentSliPosition.L_abs = ADC_read(adc_ext_ram);
    2144:	80 91 06 01 	lds	r24, 0x0106
    2148:	90 91 07 01 	lds	r25, 0x0107
    214c:	c9 d2       	rcall	.+1426   	; 0x26e0 <ADC_read>
    214e:	80 93 26 03 	sts	0x0326, r24
    2152:	24 e6       	ldi	r18, 0x64	; 100
		currentSliPosition.L_per = currentSliPosition.L_abs * 100 / 256;
    2154:	82 9f       	mul	r24, r18
    2156:	c0 01       	movw	r24, r0
    2158:	11 24       	eor	r1, r1
    215a:	90 93 28 03 	sts	0x0328, r25
    215e:	08 95       	ret
    2160:	82 37       	cpi	r24, 0x72	; 114
		//printf("CurrSliPos_L: %d, CurrSliPos_R: %d\n", currentSliPosition.L_per, currentSliPosition.R_per);
	}

	else if(side == 'r')
    2162:	69 f4       	brne	.+26     	; 0x217e <SLI_updatePosition+0x3e>
    2164:	80 91 06 01 	lds	r24, 0x0106
	{
		currentSliPosition.R_abs = ADC_read(adc_ext_ram);
    2168:	90 91 07 01 	lds	r25, 0x0107
    216c:	b9 d2       	rcall	.+1394   	; 0x26e0 <ADC_read>
    216e:	80 93 25 03 	sts	0x0325, r24
    2172:	24 e6       	ldi	r18, 0x64	; 100
    2174:	82 9f       	mul	r24, r18
		currentSliPosition.R_per = currentSliPosition.R_abs * 100 / 256;
    2176:	c0 01       	movw	r24, r0
    2178:	11 24       	eor	r1, r1
    217a:	90 93 27 03 	sts	0x0327, r25
    217e:	08 95       	ret

00002180 <SLI_getPosition>:
    2180:	82 e7       	ldi	r24, 0x72	; 114
    2182:	cc df       	rcall	.-104    	; 0x211c <SLI_requestCurrentPosition>
}

//
SLI_position_t SLI_getPosition()
{
	SLI_requestCurrentPosition('r');
    2184:	82 e6       	ldi	r24, 0x62	; 98
    2186:	8a 95       	dec	r24
    2188:	f1 f7       	brne	.-4      	; 0x2186 <SLI_getPosition+0x6>
    218a:	00 00       	nop
    218c:	82 e7       	ldi	r24, 0x72	; 114
	_delay_us(60);
	SLI_updatePosition('r');
    218e:	d8 df       	rcall	.-80     	; 0x2140 <SLI_updatePosition>
    2190:	60 91 25 03 	lds	r22, 0x0325
	
	return currentSliPosition;
    2194:	70 91 26 03 	lds	r23, 0x0326
    2198:	80 91 27 03 	lds	r24, 0x0327
    219c:	90 91 28 03 	lds	r25, 0x0328
    21a0:	08 95       	ret

000021a2 <SPI_init>:

void SPI_init()
{
	//init external interrupt INT2 on falling edge
	#if defined(__AVR_ATmega162__)
		set_bit(GICR, INT2);
    21a2:	8b b7       	in	r24, 0x3b	; 59
    21a4:	80 62       	ori	r24, 0x20	; 32
    21a6:	8b bf       	out	0x3b, r24	; 59
		clear_bit(EMCUCR, ISC2);
    21a8:	86 b7       	in	r24, 0x36	; 54
    21aa:	8e 7f       	andi	r24, 0xFE	; 254
    21ac:	86 bf       	out	0x36, r24	; 54
		
		// Set _SS, MOSI and SCK output, all others input
		DDR_SPI |= (1<<SS_CAN_CONTROLLER_PIN_MODE) | (1<<MOSI_PIN) | (1<<SCK_PIN);
    21ae:	87 b3       	in	r24, 0x17	; 23
    21b0:	80 6b       	ori	r24, 0xB0	; 176
    21b2:	87 bb       	out	0x17, r24	; 23
	#endif
	
	

	// Enable SPI, Master, set clock rate fck/4
	SPCR = (1<<SPE) | (1<<MSTR);
    21b4:	80 e5       	ldi	r24, 0x50	; 80
    21b6:	8d b9       	out	0x0d, r24	; 13
	
	// clock rate fck/2
	SPSR = (1<<SPI2X);
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	8e b9       	out	0x0e, r24	; 14

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORT_SPI, SS_CAN_CONTROLLER_PIN);
    21bc:	c4 9a       	sbi	0x18, 4	; 24
    21be:	08 95       	ret

000021c0 <SPI_send>:
}

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    21c0:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    21c2:	77 9b       	sbis	0x0e, 7	; 14
    21c4:	fe cf       	rjmp	.-4      	; 0x21c2 <SPI_send+0x2>
}
    21c6:	08 95       	ret

000021c8 <SPI_receive>:

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    21c8:	8f ef       	ldi	r24, 0xFF	; 255
    21ca:	fa df       	rcall	.-12     	; 0x21c0 <SPI_send>
    21cc:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    21ce:	fe cf       	rjmp	.-4      	; 0x21cc <SPI_receive+0x4>
    21d0:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    21d2:	08 95       	ret

000021d4 <SPI_activateSlave>:

	return data;
}
    21d4:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    21d6:	01 c0       	rjmp	.+2      	; 0x21da <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    21d8:	c4 98       	cbi	0x18, 4	; 24
    21da:	08 95       	ret

000021dc <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    21dc:	81 11       	cpse	r24, r1
    21de:	01 c0       	rjmp	.+2      	; 0x21e2 <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    21e0:	c4 9a       	sbi	0x18, 4	; 24
    21e2:	08 95       	ret

000021e4 <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    21e4:	5d 9b       	sbis	0x0b, 5	; 11
    21e6:	fe cf       	rjmp	.-4      	; 0x21e4 <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    21e8:	8c b9       	out	0x0c, r24	; 12
    21ea:	08 95       	ret

000021ec <uartReceive>:
//UART_Message_t uartReceive()
uint8_t uartReceive()
{

	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    21ec:	5f 9b       	sbis	0x0b, 7	; 11
    21ee:	fe cf       	rjmp	.-4      	; 0x21ec <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    21f0:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;

}
    21f2:	08 95       	ret

000021f4 <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    21f4:	ef 92       	push	r14
    21f6:	ff 92       	push	r15
    21f8:	0f 93       	push	r16
    21fa:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    21fc:	bb 27       	eor	r27, r27
    21fe:	a1 2f       	mov	r26, r17
    2200:	90 2f       	mov	r25, r16
    2202:	8f 2d       	mov	r24, r15
    2204:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    2206:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    2208:	88 e1       	ldi	r24, 0x18	; 24
    220a:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    220c:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	#if defined(__AVR_ATmega162__)
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    220e:	8e e8       	ldi	r24, 0x8E	; 142
    2210:	80 bd       	out	0x20, r24	; 32
	
	#if defined(__AVR_ATmega2560__)
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	#endif
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    2212:	66 ef       	ldi	r22, 0xF6	; 246
    2214:	70 e1       	ldi	r23, 0x10	; 16
    2216:	82 ef       	ldi	r24, 0xF2	; 242
    2218:	90 e1       	ldi	r25, 0x10	; 16
    221a:	b3 d3       	rcall	.+1894   	; 0x2982 <fdevopen>
    221c:	1f 91       	pop	r17
    221e:	0f 91       	pop	r16
    2220:	ff 90       	pop	r15
    2222:	ef 90       	pop	r14
    2224:	08 95       	ret

00002226 <__subsf3>:
    2226:	50 58       	subi	r21, 0x80	; 128

00002228 <__addsf3>:
    2228:	bb 27       	eor	r27, r27
    222a:	aa 27       	eor	r26, r26
    222c:	0e d0       	rcall	.+28     	; 0x224a <__addsf3x>
    222e:	38 c1       	rjmp	.+624    	; 0x24a0 <__fp_round>
    2230:	01 d1       	rcall	.+514    	; 0x2434 <__fp_pscA>
    2232:	30 f0       	brcs	.+12     	; 0x2240 <__addsf3+0x18>
    2234:	06 d1       	rcall	.+524    	; 0x2442 <__fp_pscB>
    2236:	20 f0       	brcs	.+8      	; 0x2240 <__addsf3+0x18>
    2238:	31 f4       	brne	.+12     	; 0x2246 <__addsf3+0x1e>
    223a:	9f 3f       	cpi	r25, 0xFF	; 255
    223c:	11 f4       	brne	.+4      	; 0x2242 <__addsf3+0x1a>
    223e:	1e f4       	brtc	.+6      	; 0x2246 <__addsf3+0x1e>
    2240:	f6 c0       	rjmp	.+492    	; 0x242e <__fp_nan>
    2242:	0e f4       	brtc	.+2      	; 0x2246 <__addsf3+0x1e>
    2244:	e0 95       	com	r30
    2246:	e7 fb       	bst	r30, 7
    2248:	ec c0       	rjmp	.+472    	; 0x2422 <__fp_inf>

0000224a <__addsf3x>:
    224a:	e9 2f       	mov	r30, r25
    224c:	4b d1       	rcall	.+662    	; 0x24e4 <__fp_split3>
    224e:	80 f3       	brcs	.-32     	; 0x2230 <__addsf3+0x8>
    2250:	ba 17       	cp	r27, r26
    2252:	62 07       	cpc	r22, r18
    2254:	73 07       	cpc	r23, r19
    2256:	84 07       	cpc	r24, r20
    2258:	95 07       	cpc	r25, r21
    225a:	18 f0       	brcs	.+6      	; 0x2262 <__addsf3x+0x18>
    225c:	71 f4       	brne	.+28     	; 0x227a <__addsf3x+0x30>
    225e:	9e f5       	brtc	.+102    	; 0x22c6 <__addsf3x+0x7c>
    2260:	63 c1       	rjmp	.+710    	; 0x2528 <__fp_zero>
    2262:	0e f4       	brtc	.+2      	; 0x2266 <__addsf3x+0x1c>
    2264:	e0 95       	com	r30
    2266:	0b 2e       	mov	r0, r27
    2268:	ba 2f       	mov	r27, r26
    226a:	a0 2d       	mov	r26, r0
    226c:	0b 01       	movw	r0, r22
    226e:	b9 01       	movw	r22, r18
    2270:	90 01       	movw	r18, r0
    2272:	0c 01       	movw	r0, r24
    2274:	ca 01       	movw	r24, r20
    2276:	a0 01       	movw	r20, r0
    2278:	11 24       	eor	r1, r1
    227a:	ff 27       	eor	r31, r31
    227c:	59 1b       	sub	r21, r25
    227e:	99 f0       	breq	.+38     	; 0x22a6 <__addsf3x+0x5c>
    2280:	59 3f       	cpi	r21, 0xF9	; 249
    2282:	50 f4       	brcc	.+20     	; 0x2298 <__addsf3x+0x4e>
    2284:	50 3e       	cpi	r21, 0xE0	; 224
    2286:	68 f1       	brcs	.+90     	; 0x22e2 <__addsf3x+0x98>
    2288:	1a 16       	cp	r1, r26
    228a:	f0 40       	sbci	r31, 0x00	; 0
    228c:	a2 2f       	mov	r26, r18
    228e:	23 2f       	mov	r18, r19
    2290:	34 2f       	mov	r19, r20
    2292:	44 27       	eor	r20, r20
    2294:	58 5f       	subi	r21, 0xF8	; 248
    2296:	f3 cf       	rjmp	.-26     	; 0x227e <__addsf3x+0x34>
    2298:	46 95       	lsr	r20
    229a:	37 95       	ror	r19
    229c:	27 95       	ror	r18
    229e:	a7 95       	ror	r26
    22a0:	f0 40       	sbci	r31, 0x00	; 0
    22a2:	53 95       	inc	r21
    22a4:	c9 f7       	brne	.-14     	; 0x2298 <__addsf3x+0x4e>
    22a6:	7e f4       	brtc	.+30     	; 0x22c6 <__addsf3x+0x7c>
    22a8:	1f 16       	cp	r1, r31
    22aa:	ba 0b       	sbc	r27, r26
    22ac:	62 0b       	sbc	r22, r18
    22ae:	73 0b       	sbc	r23, r19
    22b0:	84 0b       	sbc	r24, r20
    22b2:	ba f0       	brmi	.+46     	; 0x22e2 <__addsf3x+0x98>
    22b4:	91 50       	subi	r25, 0x01	; 1
    22b6:	a1 f0       	breq	.+40     	; 0x22e0 <__addsf3x+0x96>
    22b8:	ff 0f       	add	r31, r31
    22ba:	bb 1f       	adc	r27, r27
    22bc:	66 1f       	adc	r22, r22
    22be:	77 1f       	adc	r23, r23
    22c0:	88 1f       	adc	r24, r24
    22c2:	c2 f7       	brpl	.-16     	; 0x22b4 <__addsf3x+0x6a>
    22c4:	0e c0       	rjmp	.+28     	; 0x22e2 <__addsf3x+0x98>
    22c6:	ba 0f       	add	r27, r26
    22c8:	62 1f       	adc	r22, r18
    22ca:	73 1f       	adc	r23, r19
    22cc:	84 1f       	adc	r24, r20
    22ce:	48 f4       	brcc	.+18     	; 0x22e2 <__addsf3x+0x98>
    22d0:	87 95       	ror	r24
    22d2:	77 95       	ror	r23
    22d4:	67 95       	ror	r22
    22d6:	b7 95       	ror	r27
    22d8:	f7 95       	ror	r31
    22da:	9e 3f       	cpi	r25, 0xFE	; 254
    22dc:	08 f0       	brcs	.+2      	; 0x22e0 <__addsf3x+0x96>
    22de:	b3 cf       	rjmp	.-154    	; 0x2246 <__addsf3+0x1e>
    22e0:	93 95       	inc	r25
    22e2:	88 0f       	add	r24, r24
    22e4:	08 f0       	brcs	.+2      	; 0x22e8 <__addsf3x+0x9e>
    22e6:	99 27       	eor	r25, r25
    22e8:	ee 0f       	add	r30, r30
    22ea:	97 95       	ror	r25
    22ec:	87 95       	ror	r24
    22ee:	08 95       	ret

000022f0 <__cmpsf2>:
    22f0:	74 d0       	rcall	.+232    	; 0x23da <__fp_cmp>
    22f2:	08 f4       	brcc	.+2      	; 0x22f6 <__cmpsf2+0x6>
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	08 95       	ret

000022f8 <cos>:
    22f8:	ac d0       	rcall	.+344    	; 0x2452 <__fp_rempio2>
    22fa:	e3 95       	inc	r30
    22fc:	e2 c0       	rjmp	.+452    	; 0x24c2 <__fp_sinus>

000022fe <__fixsfsi>:
    22fe:	04 d0       	rcall	.+8      	; 0x2308 <__fixunssfsi>
    2300:	68 94       	set
    2302:	b1 11       	cpse	r27, r1
    2304:	12 c1       	rjmp	.+548    	; 0x252a <__fp_szero>
    2306:	08 95       	ret

00002308 <__fixunssfsi>:
    2308:	f5 d0       	rcall	.+490    	; 0x24f4 <__fp_splitA>
    230a:	88 f0       	brcs	.+34     	; 0x232e <__fixunssfsi+0x26>
    230c:	9f 57       	subi	r25, 0x7F	; 127
    230e:	90 f0       	brcs	.+36     	; 0x2334 <__fixunssfsi+0x2c>
    2310:	b9 2f       	mov	r27, r25
    2312:	99 27       	eor	r25, r25
    2314:	b7 51       	subi	r27, 0x17	; 23
    2316:	a0 f0       	brcs	.+40     	; 0x2340 <__fixunssfsi+0x38>
    2318:	d1 f0       	breq	.+52     	; 0x234e <__fixunssfsi+0x46>
    231a:	66 0f       	add	r22, r22
    231c:	77 1f       	adc	r23, r23
    231e:	88 1f       	adc	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	1a f0       	brmi	.+6      	; 0x232a <__fixunssfsi+0x22>
    2324:	ba 95       	dec	r27
    2326:	c9 f7       	brne	.-14     	; 0x231a <__fixunssfsi+0x12>
    2328:	12 c0       	rjmp	.+36     	; 0x234e <__fixunssfsi+0x46>
    232a:	b1 30       	cpi	r27, 0x01	; 1
    232c:	81 f0       	breq	.+32     	; 0x234e <__fixunssfsi+0x46>
    232e:	fc d0       	rcall	.+504    	; 0x2528 <__fp_zero>
    2330:	b1 e0       	ldi	r27, 0x01	; 1
    2332:	08 95       	ret
    2334:	f9 c0       	rjmp	.+498    	; 0x2528 <__fp_zero>
    2336:	67 2f       	mov	r22, r23
    2338:	78 2f       	mov	r23, r24
    233a:	88 27       	eor	r24, r24
    233c:	b8 5f       	subi	r27, 0xF8	; 248
    233e:	39 f0       	breq	.+14     	; 0x234e <__fixunssfsi+0x46>
    2340:	b9 3f       	cpi	r27, 0xF9	; 249
    2342:	cc f3       	brlt	.-14     	; 0x2336 <__fixunssfsi+0x2e>
    2344:	86 95       	lsr	r24
    2346:	77 95       	ror	r23
    2348:	67 95       	ror	r22
    234a:	b3 95       	inc	r27
    234c:	d9 f7       	brne	.-10     	; 0x2344 <__fixunssfsi+0x3c>
    234e:	3e f4       	brtc	.+14     	; 0x235e <__fixunssfsi+0x56>
    2350:	90 95       	com	r25
    2352:	80 95       	com	r24
    2354:	70 95       	com	r23
    2356:	61 95       	neg	r22
    2358:	7f 4f       	sbci	r23, 0xFF	; 255
    235a:	8f 4f       	sbci	r24, 0xFF	; 255
    235c:	9f 4f       	sbci	r25, 0xFF	; 255
    235e:	08 95       	ret

00002360 <__floatunsisf>:
    2360:	e8 94       	clt
    2362:	09 c0       	rjmp	.+18     	; 0x2376 <__floatsisf+0x12>

00002364 <__floatsisf>:
    2364:	97 fb       	bst	r25, 7
    2366:	3e f4       	brtc	.+14     	; 0x2376 <__floatsisf+0x12>
    2368:	90 95       	com	r25
    236a:	80 95       	com	r24
    236c:	70 95       	com	r23
    236e:	61 95       	neg	r22
    2370:	7f 4f       	sbci	r23, 0xFF	; 255
    2372:	8f 4f       	sbci	r24, 0xFF	; 255
    2374:	9f 4f       	sbci	r25, 0xFF	; 255
    2376:	99 23       	and	r25, r25
    2378:	a9 f0       	breq	.+42     	; 0x23a4 <__floatsisf+0x40>
    237a:	f9 2f       	mov	r31, r25
    237c:	96 e9       	ldi	r25, 0x96	; 150
    237e:	bb 27       	eor	r27, r27
    2380:	93 95       	inc	r25
    2382:	f6 95       	lsr	r31
    2384:	87 95       	ror	r24
    2386:	77 95       	ror	r23
    2388:	67 95       	ror	r22
    238a:	b7 95       	ror	r27
    238c:	f1 11       	cpse	r31, r1
    238e:	f8 cf       	rjmp	.-16     	; 0x2380 <__floatsisf+0x1c>
    2390:	fa f4       	brpl	.+62     	; 0x23d0 <__floatsisf+0x6c>
    2392:	bb 0f       	add	r27, r27
    2394:	11 f4       	brne	.+4      	; 0x239a <__floatsisf+0x36>
    2396:	60 ff       	sbrs	r22, 0
    2398:	1b c0       	rjmp	.+54     	; 0x23d0 <__floatsisf+0x6c>
    239a:	6f 5f       	subi	r22, 0xFF	; 255
    239c:	7f 4f       	sbci	r23, 0xFF	; 255
    239e:	8f 4f       	sbci	r24, 0xFF	; 255
    23a0:	9f 4f       	sbci	r25, 0xFF	; 255
    23a2:	16 c0       	rjmp	.+44     	; 0x23d0 <__floatsisf+0x6c>
    23a4:	88 23       	and	r24, r24
    23a6:	11 f0       	breq	.+4      	; 0x23ac <__floatsisf+0x48>
    23a8:	96 e9       	ldi	r25, 0x96	; 150
    23aa:	11 c0       	rjmp	.+34     	; 0x23ce <__floatsisf+0x6a>
    23ac:	77 23       	and	r23, r23
    23ae:	21 f0       	breq	.+8      	; 0x23b8 <__floatsisf+0x54>
    23b0:	9e e8       	ldi	r25, 0x8E	; 142
    23b2:	87 2f       	mov	r24, r23
    23b4:	76 2f       	mov	r23, r22
    23b6:	05 c0       	rjmp	.+10     	; 0x23c2 <__floatsisf+0x5e>
    23b8:	66 23       	and	r22, r22
    23ba:	71 f0       	breq	.+28     	; 0x23d8 <__floatsisf+0x74>
    23bc:	96 e8       	ldi	r25, 0x86	; 134
    23be:	86 2f       	mov	r24, r22
    23c0:	70 e0       	ldi	r23, 0x00	; 0
    23c2:	60 e0       	ldi	r22, 0x00	; 0
    23c4:	2a f0       	brmi	.+10     	; 0x23d0 <__floatsisf+0x6c>
    23c6:	9a 95       	dec	r25
    23c8:	66 0f       	add	r22, r22
    23ca:	77 1f       	adc	r23, r23
    23cc:	88 1f       	adc	r24, r24
    23ce:	da f7       	brpl	.-10     	; 0x23c6 <__floatsisf+0x62>
    23d0:	88 0f       	add	r24, r24
    23d2:	96 95       	lsr	r25
    23d4:	87 95       	ror	r24
    23d6:	97 f9       	bld	r25, 7
    23d8:	08 95       	ret

000023da <__fp_cmp>:
    23da:	99 0f       	add	r25, r25
    23dc:	00 08       	sbc	r0, r0
    23de:	55 0f       	add	r21, r21
    23e0:	aa 0b       	sbc	r26, r26
    23e2:	e0 e8       	ldi	r30, 0x80	; 128
    23e4:	fe ef       	ldi	r31, 0xFE	; 254
    23e6:	16 16       	cp	r1, r22
    23e8:	17 06       	cpc	r1, r23
    23ea:	e8 07       	cpc	r30, r24
    23ec:	f9 07       	cpc	r31, r25
    23ee:	c0 f0       	brcs	.+48     	; 0x2420 <__fp_cmp+0x46>
    23f0:	12 16       	cp	r1, r18
    23f2:	13 06       	cpc	r1, r19
    23f4:	e4 07       	cpc	r30, r20
    23f6:	f5 07       	cpc	r31, r21
    23f8:	98 f0       	brcs	.+38     	; 0x2420 <__fp_cmp+0x46>
    23fa:	62 1b       	sub	r22, r18
    23fc:	73 0b       	sbc	r23, r19
    23fe:	84 0b       	sbc	r24, r20
    2400:	95 0b       	sbc	r25, r21
    2402:	39 f4       	brne	.+14     	; 0x2412 <__fp_cmp+0x38>
    2404:	0a 26       	eor	r0, r26
    2406:	61 f0       	breq	.+24     	; 0x2420 <__fp_cmp+0x46>
    2408:	23 2b       	or	r18, r19
    240a:	24 2b       	or	r18, r20
    240c:	25 2b       	or	r18, r21
    240e:	21 f4       	brne	.+8      	; 0x2418 <__fp_cmp+0x3e>
    2410:	08 95       	ret
    2412:	0a 26       	eor	r0, r26
    2414:	09 f4       	brne	.+2      	; 0x2418 <__fp_cmp+0x3e>
    2416:	a1 40       	sbci	r26, 0x01	; 1
    2418:	a6 95       	lsr	r26
    241a:	8f ef       	ldi	r24, 0xFF	; 255
    241c:	81 1d       	adc	r24, r1
    241e:	81 1d       	adc	r24, r1
    2420:	08 95       	ret

00002422 <__fp_inf>:
    2422:	97 f9       	bld	r25, 7
    2424:	9f 67       	ori	r25, 0x7F	; 127
    2426:	80 e8       	ldi	r24, 0x80	; 128
    2428:	70 e0       	ldi	r23, 0x00	; 0
    242a:	60 e0       	ldi	r22, 0x00	; 0
    242c:	08 95       	ret

0000242e <__fp_nan>:
    242e:	9f ef       	ldi	r25, 0xFF	; 255
    2430:	80 ec       	ldi	r24, 0xC0	; 192
    2432:	08 95       	ret

00002434 <__fp_pscA>:
    2434:	00 24       	eor	r0, r0
    2436:	0a 94       	dec	r0
    2438:	16 16       	cp	r1, r22
    243a:	17 06       	cpc	r1, r23
    243c:	18 06       	cpc	r1, r24
    243e:	09 06       	cpc	r0, r25
    2440:	08 95       	ret

00002442 <__fp_pscB>:
    2442:	00 24       	eor	r0, r0
    2444:	0a 94       	dec	r0
    2446:	12 16       	cp	r1, r18
    2448:	13 06       	cpc	r1, r19
    244a:	14 06       	cpc	r1, r20
    244c:	05 06       	cpc	r0, r21
    244e:	08 95       	ret
    2450:	ee cf       	rjmp	.-36     	; 0x242e <__fp_nan>

00002452 <__fp_rempio2>:
    2452:	50 d0       	rcall	.+160    	; 0x24f4 <__fp_splitA>
    2454:	e8 f3       	brcs	.-6      	; 0x2450 <__fp_pscB+0xe>
    2456:	e8 94       	clt
    2458:	e0 e0       	ldi	r30, 0x00	; 0
    245a:	bb 27       	eor	r27, r27
    245c:	9f 57       	subi	r25, 0x7F	; 127
    245e:	f0 f0       	brcs	.+60     	; 0x249c <__fp_rempio2+0x4a>
    2460:	2a ed       	ldi	r18, 0xDA	; 218
    2462:	3f e0       	ldi	r19, 0x0F	; 15
    2464:	49 ec       	ldi	r20, 0xC9	; 201
    2466:	06 c0       	rjmp	.+12     	; 0x2474 <__fp_rempio2+0x22>
    2468:	ee 0f       	add	r30, r30
    246a:	bb 0f       	add	r27, r27
    246c:	66 1f       	adc	r22, r22
    246e:	77 1f       	adc	r23, r23
    2470:	88 1f       	adc	r24, r24
    2472:	28 f0       	brcs	.+10     	; 0x247e <__fp_rempio2+0x2c>
    2474:	b2 3a       	cpi	r27, 0xA2	; 162
    2476:	62 07       	cpc	r22, r18
    2478:	73 07       	cpc	r23, r19
    247a:	84 07       	cpc	r24, r20
    247c:	28 f0       	brcs	.+10     	; 0x2488 <__fp_rempio2+0x36>
    247e:	b2 5a       	subi	r27, 0xA2	; 162
    2480:	62 0b       	sbc	r22, r18
    2482:	73 0b       	sbc	r23, r19
    2484:	84 0b       	sbc	r24, r20
    2486:	e3 95       	inc	r30
    2488:	9a 95       	dec	r25
    248a:	72 f7       	brpl	.-36     	; 0x2468 <__fp_rempio2+0x16>
    248c:	80 38       	cpi	r24, 0x80	; 128
    248e:	30 f4       	brcc	.+12     	; 0x249c <__fp_rempio2+0x4a>
    2490:	9a 95       	dec	r25
    2492:	bb 0f       	add	r27, r27
    2494:	66 1f       	adc	r22, r22
    2496:	77 1f       	adc	r23, r23
    2498:	88 1f       	adc	r24, r24
    249a:	d2 f7       	brpl	.-12     	; 0x2490 <__fp_rempio2+0x3e>
    249c:	90 48       	sbci	r25, 0x80	; 128
    249e:	b6 c0       	rjmp	.+364    	; 0x260c <__fp_mpack_finite>

000024a0 <__fp_round>:
    24a0:	09 2e       	mov	r0, r25
    24a2:	03 94       	inc	r0
    24a4:	00 0c       	add	r0, r0
    24a6:	11 f4       	brne	.+4      	; 0x24ac <__fp_round+0xc>
    24a8:	88 23       	and	r24, r24
    24aa:	52 f0       	brmi	.+20     	; 0x24c0 <__fp_round+0x20>
    24ac:	bb 0f       	add	r27, r27
    24ae:	40 f4       	brcc	.+16     	; 0x24c0 <__fp_round+0x20>
    24b0:	bf 2b       	or	r27, r31
    24b2:	11 f4       	brne	.+4      	; 0x24b8 <__fp_round+0x18>
    24b4:	60 ff       	sbrs	r22, 0
    24b6:	04 c0       	rjmp	.+8      	; 0x24c0 <__fp_round+0x20>
    24b8:	6f 5f       	subi	r22, 0xFF	; 255
    24ba:	7f 4f       	sbci	r23, 0xFF	; 255
    24bc:	8f 4f       	sbci	r24, 0xFF	; 255
    24be:	9f 4f       	sbci	r25, 0xFF	; 255
    24c0:	08 95       	ret

000024c2 <__fp_sinus>:
    24c2:	ef 93       	push	r30
    24c4:	e0 ff       	sbrs	r30, 0
    24c6:	06 c0       	rjmp	.+12     	; 0x24d4 <__fp_sinus+0x12>
    24c8:	a2 ea       	ldi	r26, 0xA2	; 162
    24ca:	2a ed       	ldi	r18, 0xDA	; 218
    24cc:	3f e0       	ldi	r19, 0x0F	; 15
    24ce:	49 ec       	ldi	r20, 0xC9	; 201
    24d0:	5f eb       	ldi	r21, 0xBF	; 191
    24d2:	bb de       	rcall	.-650    	; 0x224a <__addsf3x>
    24d4:	e5 df       	rcall	.-54     	; 0x24a0 <__fp_round>
    24d6:	0f 90       	pop	r0
    24d8:	03 94       	inc	r0
    24da:	01 fc       	sbrc	r0, 1
    24dc:	90 58       	subi	r25, 0x80	; 128
    24de:	e0 e7       	ldi	r30, 0x70	; 112
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	a0 c0       	rjmp	.+320    	; 0x2624 <__fp_powsodd>

000024e4 <__fp_split3>:
    24e4:	57 fd       	sbrc	r21, 7
    24e6:	90 58       	subi	r25, 0x80	; 128
    24e8:	44 0f       	add	r20, r20
    24ea:	55 1f       	adc	r21, r21
    24ec:	59 f0       	breq	.+22     	; 0x2504 <__fp_splitA+0x10>
    24ee:	5f 3f       	cpi	r21, 0xFF	; 255
    24f0:	71 f0       	breq	.+28     	; 0x250e <__fp_splitA+0x1a>
    24f2:	47 95       	ror	r20

000024f4 <__fp_splitA>:
    24f4:	88 0f       	add	r24, r24
    24f6:	97 fb       	bst	r25, 7
    24f8:	99 1f       	adc	r25, r25
    24fa:	61 f0       	breq	.+24     	; 0x2514 <__fp_splitA+0x20>
    24fc:	9f 3f       	cpi	r25, 0xFF	; 255
    24fe:	79 f0       	breq	.+30     	; 0x251e <__fp_splitA+0x2a>
    2500:	87 95       	ror	r24
    2502:	08 95       	ret
    2504:	12 16       	cp	r1, r18
    2506:	13 06       	cpc	r1, r19
    2508:	14 06       	cpc	r1, r20
    250a:	55 1f       	adc	r21, r21
    250c:	f2 cf       	rjmp	.-28     	; 0x24f2 <__fp_split3+0xe>
    250e:	46 95       	lsr	r20
    2510:	f1 df       	rcall	.-30     	; 0x24f4 <__fp_splitA>
    2512:	08 c0       	rjmp	.+16     	; 0x2524 <__fp_splitA+0x30>
    2514:	16 16       	cp	r1, r22
    2516:	17 06       	cpc	r1, r23
    2518:	18 06       	cpc	r1, r24
    251a:	99 1f       	adc	r25, r25
    251c:	f1 cf       	rjmp	.-30     	; 0x2500 <__fp_splitA+0xc>
    251e:	86 95       	lsr	r24
    2520:	71 05       	cpc	r23, r1
    2522:	61 05       	cpc	r22, r1
    2524:	08 94       	sec
    2526:	08 95       	ret

00002528 <__fp_zero>:
    2528:	e8 94       	clt

0000252a <__fp_szero>:
    252a:	bb 27       	eor	r27, r27
    252c:	66 27       	eor	r22, r22
    252e:	77 27       	eor	r23, r23
    2530:	cb 01       	movw	r24, r22
    2532:	97 f9       	bld	r25, 7
    2534:	08 95       	ret

00002536 <__mulsf3>:
    2536:	0b d0       	rcall	.+22     	; 0x254e <__mulsf3x>
    2538:	b3 cf       	rjmp	.-154    	; 0x24a0 <__fp_round>
    253a:	7c df       	rcall	.-264    	; 0x2434 <__fp_pscA>
    253c:	28 f0       	brcs	.+10     	; 0x2548 <__mulsf3+0x12>
    253e:	81 df       	rcall	.-254    	; 0x2442 <__fp_pscB>
    2540:	18 f0       	brcs	.+6      	; 0x2548 <__mulsf3+0x12>
    2542:	95 23       	and	r25, r21
    2544:	09 f0       	breq	.+2      	; 0x2548 <__mulsf3+0x12>
    2546:	6d cf       	rjmp	.-294    	; 0x2422 <__fp_inf>
    2548:	72 cf       	rjmp	.-284    	; 0x242e <__fp_nan>
    254a:	11 24       	eor	r1, r1
    254c:	ee cf       	rjmp	.-36     	; 0x252a <__fp_szero>

0000254e <__mulsf3x>:
    254e:	ca df       	rcall	.-108    	; 0x24e4 <__fp_split3>
    2550:	a0 f3       	brcs	.-24     	; 0x253a <__mulsf3+0x4>

00002552 <__mulsf3_pse>:
    2552:	95 9f       	mul	r25, r21
    2554:	d1 f3       	breq	.-12     	; 0x254a <__mulsf3+0x14>
    2556:	95 0f       	add	r25, r21
    2558:	50 e0       	ldi	r21, 0x00	; 0
    255a:	55 1f       	adc	r21, r21
    255c:	62 9f       	mul	r22, r18
    255e:	f0 01       	movw	r30, r0
    2560:	72 9f       	mul	r23, r18
    2562:	bb 27       	eor	r27, r27
    2564:	f0 0d       	add	r31, r0
    2566:	b1 1d       	adc	r27, r1
    2568:	63 9f       	mul	r22, r19
    256a:	aa 27       	eor	r26, r26
    256c:	f0 0d       	add	r31, r0
    256e:	b1 1d       	adc	r27, r1
    2570:	aa 1f       	adc	r26, r26
    2572:	64 9f       	mul	r22, r20
    2574:	66 27       	eor	r22, r22
    2576:	b0 0d       	add	r27, r0
    2578:	a1 1d       	adc	r26, r1
    257a:	66 1f       	adc	r22, r22
    257c:	82 9f       	mul	r24, r18
    257e:	22 27       	eor	r18, r18
    2580:	b0 0d       	add	r27, r0
    2582:	a1 1d       	adc	r26, r1
    2584:	62 1f       	adc	r22, r18
    2586:	73 9f       	mul	r23, r19
    2588:	b0 0d       	add	r27, r0
    258a:	a1 1d       	adc	r26, r1
    258c:	62 1f       	adc	r22, r18
    258e:	83 9f       	mul	r24, r19
    2590:	a0 0d       	add	r26, r0
    2592:	61 1d       	adc	r22, r1
    2594:	22 1f       	adc	r18, r18
    2596:	74 9f       	mul	r23, r20
    2598:	33 27       	eor	r19, r19
    259a:	a0 0d       	add	r26, r0
    259c:	61 1d       	adc	r22, r1
    259e:	23 1f       	adc	r18, r19
    25a0:	84 9f       	mul	r24, r20
    25a2:	60 0d       	add	r22, r0
    25a4:	21 1d       	adc	r18, r1
    25a6:	82 2f       	mov	r24, r18
    25a8:	76 2f       	mov	r23, r22
    25aa:	6a 2f       	mov	r22, r26
    25ac:	11 24       	eor	r1, r1
    25ae:	9f 57       	subi	r25, 0x7F	; 127
    25b0:	50 40       	sbci	r21, 0x00	; 0
    25b2:	8a f0       	brmi	.+34     	; 0x25d6 <__mulsf3_pse+0x84>
    25b4:	e1 f0       	breq	.+56     	; 0x25ee <__mulsf3_pse+0x9c>
    25b6:	88 23       	and	r24, r24
    25b8:	4a f0       	brmi	.+18     	; 0x25cc <__mulsf3_pse+0x7a>
    25ba:	ee 0f       	add	r30, r30
    25bc:	ff 1f       	adc	r31, r31
    25be:	bb 1f       	adc	r27, r27
    25c0:	66 1f       	adc	r22, r22
    25c2:	77 1f       	adc	r23, r23
    25c4:	88 1f       	adc	r24, r24
    25c6:	91 50       	subi	r25, 0x01	; 1
    25c8:	50 40       	sbci	r21, 0x00	; 0
    25ca:	a9 f7       	brne	.-22     	; 0x25b6 <__mulsf3_pse+0x64>
    25cc:	9e 3f       	cpi	r25, 0xFE	; 254
    25ce:	51 05       	cpc	r21, r1
    25d0:	70 f0       	brcs	.+28     	; 0x25ee <__mulsf3_pse+0x9c>
    25d2:	27 cf       	rjmp	.-434    	; 0x2422 <__fp_inf>
    25d4:	aa cf       	rjmp	.-172    	; 0x252a <__fp_szero>
    25d6:	5f 3f       	cpi	r21, 0xFF	; 255
    25d8:	ec f3       	brlt	.-6      	; 0x25d4 <__mulsf3_pse+0x82>
    25da:	98 3e       	cpi	r25, 0xE8	; 232
    25dc:	dc f3       	brlt	.-10     	; 0x25d4 <__mulsf3_pse+0x82>
    25de:	86 95       	lsr	r24
    25e0:	77 95       	ror	r23
    25e2:	67 95       	ror	r22
    25e4:	b7 95       	ror	r27
    25e6:	f7 95       	ror	r31
    25e8:	e7 95       	ror	r30
    25ea:	9f 5f       	subi	r25, 0xFF	; 255
    25ec:	c1 f7       	brne	.-16     	; 0x25de <__mulsf3_pse+0x8c>
    25ee:	fe 2b       	or	r31, r30
    25f0:	88 0f       	add	r24, r24
    25f2:	91 1d       	adc	r25, r1
    25f4:	96 95       	lsr	r25
    25f6:	87 95       	ror	r24
    25f8:	97 f9       	bld	r25, 7
    25fa:	08 95       	ret

000025fc <sin>:
    25fc:	9f 93       	push	r25
    25fe:	29 df       	rcall	.-430    	; 0x2452 <__fp_rempio2>
    2600:	0f 90       	pop	r0
    2602:	07 fc       	sbrc	r0, 7
    2604:	ee 5f       	subi	r30, 0xFE	; 254
    2606:	5d cf       	rjmp	.-326    	; 0x24c2 <__fp_sinus>

00002608 <__fp_mpack>:
    2608:	9f 3f       	cpi	r25, 0xFF	; 255
    260a:	31 f0       	breq	.+12     	; 0x2618 <__fp_mpack_finite+0xc>

0000260c <__fp_mpack_finite>:
    260c:	91 50       	subi	r25, 0x01	; 1
    260e:	20 f4       	brcc	.+8      	; 0x2618 <__fp_mpack_finite+0xc>
    2610:	87 95       	ror	r24
    2612:	77 95       	ror	r23
    2614:	67 95       	ror	r22
    2616:	b7 95       	ror	r27
    2618:	88 0f       	add	r24, r24
    261a:	91 1d       	adc	r25, r1
    261c:	96 95       	lsr	r25
    261e:	87 95       	ror	r24
    2620:	97 f9       	bld	r25, 7
    2622:	08 95       	ret

00002624 <__fp_powsodd>:
    2624:	9f 93       	push	r25
    2626:	8f 93       	push	r24
    2628:	7f 93       	push	r23
    262a:	6f 93       	push	r22
    262c:	ff 93       	push	r31
    262e:	ef 93       	push	r30
    2630:	9b 01       	movw	r18, r22
    2632:	ac 01       	movw	r20, r24
    2634:	80 df       	rcall	.-256    	; 0x2536 <__mulsf3>
    2636:	ef 91       	pop	r30
    2638:	ff 91       	pop	r31
    263a:	05 d0       	rcall	.+10     	; 0x2646 <__fp_powser>
    263c:	2f 91       	pop	r18
    263e:	3f 91       	pop	r19
    2640:	4f 91       	pop	r20
    2642:	5f 91       	pop	r21
    2644:	78 cf       	rjmp	.-272    	; 0x2536 <__mulsf3>

00002646 <__fp_powser>:
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	1f 93       	push	r17
    264c:	0f 93       	push	r16
    264e:	ff 92       	push	r15
    2650:	ef 92       	push	r14
    2652:	df 92       	push	r13
    2654:	7b 01       	movw	r14, r22
    2656:	8c 01       	movw	r16, r24
    2658:	68 94       	set
    265a:	05 c0       	rjmp	.+10     	; 0x2666 <__fp_powser+0x20>
    265c:	da 2e       	mov	r13, r26
    265e:	ef 01       	movw	r28, r30
    2660:	76 df       	rcall	.-276    	; 0x254e <__mulsf3x>
    2662:	fe 01       	movw	r30, r28
    2664:	e8 94       	clt
    2666:	a5 91       	lpm	r26, Z+
    2668:	25 91       	lpm	r18, Z+
    266a:	35 91       	lpm	r19, Z+
    266c:	45 91       	lpm	r20, Z+
    266e:	55 91       	lpm	r21, Z+
    2670:	ae f3       	brts	.-22     	; 0x265c <__fp_powser+0x16>
    2672:	ef 01       	movw	r28, r30
    2674:	ea dd       	rcall	.-1068   	; 0x224a <__addsf3x>
    2676:	fe 01       	movw	r30, r28
    2678:	97 01       	movw	r18, r14
    267a:	a8 01       	movw	r20, r16
    267c:	da 94       	dec	r13
    267e:	79 f7       	brne	.-34     	; 0x265e <__fp_powser+0x18>
    2680:	df 90       	pop	r13
    2682:	ef 90       	pop	r14
    2684:	ff 90       	pop	r15
    2686:	0f 91       	pop	r16
    2688:	1f 91       	pop	r17
    268a:	cf 91       	pop	r28
    268c:	df 91       	pop	r29
    268e:	08 95       	ret

00002690 <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    2690:	9b 01       	movw	r18, r22
	
	switch(channel){
    2692:	82 30       	cpi	r24, 0x02	; 2
    2694:	71 f0       	breq	.+28     	; 0x26b2 <ADC_request+0x22>
    2696:	18 f4       	brcc	.+6      	; 0x269e <ADC_request+0xe>
    2698:	81 30       	cpi	r24, 0x01	; 1
    269a:	31 f0       	breq	.+12     	; 0x26a8 <ADC_request+0x18>
    269c:	19 c0       	rjmp	.+50     	; 0x26d0 <ADC_request+0x40>
    269e:	83 30       	cpi	r24, 0x03	; 3
    26a0:	69 f0       	breq	.+26     	; 0x26bc <ADC_request+0x2c>
    26a2:	84 30       	cpi	r24, 0x04	; 4
    26a4:	81 f0       	breq	.+32     	; 0x26c6 <ADC_request+0x36>
    26a6:	14 c0       	rjmp	.+40     	; 0x26d0 <ADC_request+0x40>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    26a8:	64 e0       	ldi	r22, 0x04	; 4
    26aa:	c9 01       	movw	r24, r18
    26ac:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <saveToAddress>
			break;
    26b0:	08 95       	ret
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    26b2:	65 e0       	ldi	r22, 0x05	; 5
    26b4:	c9 01       	movw	r24, r18
    26b6:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <saveToAddress>
			break;
    26ba:	08 95       	ret
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    26bc:	66 e0       	ldi	r22, 0x06	; 6
    26be:	c9 01       	movw	r24, r18
    26c0:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <saveToAddress>
			break;
    26c4:	08 95       	ret
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    26c6:	67 e0       	ldi	r22, 0x07	; 7
    26c8:	c9 01       	movw	r24, r18
    26ca:	0c 94 e3 04 	jmp	0x9c6	; 0x9c6 <saveToAddress>
			break;
    26ce:	08 95       	ret
			
		default:
			printf("Problems with ADC...");
    26d0:	83 ec       	ldi	r24, 0xC3	; 195
    26d2:	92 e0       	ldi	r25, 0x02	; 2
    26d4:	9f 93       	push	r25
    26d6:	8f 93       	push	r24
    26d8:	9e d1       	rcall	.+828    	; 0x2a16 <printf>
    26da:	0f 90       	pop	r0
			break;
    26dc:	0f 90       	pop	r0
    26de:	08 95       	ret

000026e0 <ADC_read>:
    26e0:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <readFromAddress>
}

uint8_t ADC_read(volatile char *ADC_ADDRESS)
{
	return (uint8_t)readFromAddress(ADC_ADDRESS);
}
    26e4:	08 95       	ret

000026e6 <__divmodhi4>:
    26e6:	97 fb       	bst	r25, 7
    26e8:	07 2e       	mov	r0, r23
    26ea:	16 f4       	brtc	.+4      	; 0x26f0 <__divmodhi4+0xa>
    26ec:	00 94       	com	r0
    26ee:	06 d0       	rcall	.+12     	; 0x26fc <__divmodhi4_neg1>
    26f0:	77 fd       	sbrc	r23, 7
    26f2:	08 d0       	rcall	.+16     	; 0x2704 <__divmodhi4_neg2>
    26f4:	0b d0       	rcall	.+22     	; 0x270c <__udivmodhi4>
    26f6:	07 fc       	sbrc	r0, 7
    26f8:	05 d0       	rcall	.+10     	; 0x2704 <__divmodhi4_neg2>
    26fa:	3e f4       	brtc	.+14     	; 0x270a <__divmodhi4_exit>

000026fc <__divmodhi4_neg1>:
    26fc:	90 95       	com	r25
    26fe:	81 95       	neg	r24
    2700:	9f 4f       	sbci	r25, 0xFF	; 255
    2702:	08 95       	ret

00002704 <__divmodhi4_neg2>:
    2704:	70 95       	com	r23
    2706:	61 95       	neg	r22
    2708:	7f 4f       	sbci	r23, 0xFF	; 255

0000270a <__divmodhi4_exit>:
    270a:	08 95       	ret

0000270c <__udivmodhi4>:
    270c:	aa 1b       	sub	r26, r26
    270e:	bb 1b       	sub	r27, r27
    2710:	51 e1       	ldi	r21, 0x11	; 17
    2712:	07 c0       	rjmp	.+14     	; 0x2722 <__udivmodhi4_ep>

00002714 <__udivmodhi4_loop>:
    2714:	aa 1f       	adc	r26, r26
    2716:	bb 1f       	adc	r27, r27
    2718:	a6 17       	cp	r26, r22
    271a:	b7 07       	cpc	r27, r23
    271c:	10 f0       	brcs	.+4      	; 0x2722 <__udivmodhi4_ep>
    271e:	a6 1b       	sub	r26, r22
    2720:	b7 0b       	sbc	r27, r23

00002722 <__udivmodhi4_ep>:
    2722:	88 1f       	adc	r24, r24
    2724:	99 1f       	adc	r25, r25
    2726:	5a 95       	dec	r21
    2728:	a9 f7       	brne	.-22     	; 0x2714 <__udivmodhi4_loop>
    272a:	80 95       	com	r24
    272c:	90 95       	com	r25
    272e:	bc 01       	movw	r22, r24
    2730:	cd 01       	movw	r24, r26
    2732:	08 95       	ret

00002734 <malloc>:
    2734:	cf 93       	push	r28
    2736:	df 93       	push	r29
    2738:	82 30       	cpi	r24, 0x02	; 2
    273a:	91 05       	cpc	r25, r1
    273c:	10 f4       	brcc	.+4      	; 0x2742 <malloc+0xe>
    273e:	82 e0       	ldi	r24, 0x02	; 2
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	e0 91 2b 03 	lds	r30, 0x032B
    2746:	f0 91 2c 03 	lds	r31, 0x032C
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	a0 e0       	ldi	r26, 0x00	; 0
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	30 97       	sbiw	r30, 0x00	; 0
    2754:	39 f1       	breq	.+78     	; 0x27a4 <malloc+0x70>
    2756:	40 81       	ld	r20, Z
    2758:	51 81       	ldd	r21, Z+1	; 0x01
    275a:	48 17       	cp	r20, r24
    275c:	59 07       	cpc	r21, r25
    275e:	b8 f0       	brcs	.+46     	; 0x278e <malloc+0x5a>
    2760:	48 17       	cp	r20, r24
    2762:	59 07       	cpc	r21, r25
    2764:	71 f4       	brne	.+28     	; 0x2782 <malloc+0x4e>
    2766:	82 81       	ldd	r24, Z+2	; 0x02
    2768:	93 81       	ldd	r25, Z+3	; 0x03
    276a:	10 97       	sbiw	r26, 0x00	; 0
    276c:	29 f0       	breq	.+10     	; 0x2778 <malloc+0x44>
    276e:	13 96       	adiw	r26, 0x03	; 3
    2770:	9c 93       	st	X, r25
    2772:	8e 93       	st	-X, r24
    2774:	12 97       	sbiw	r26, 0x02	; 2
    2776:	2c c0       	rjmp	.+88     	; 0x27d0 <malloc+0x9c>
    2778:	90 93 2c 03 	sts	0x032C, r25
    277c:	80 93 2b 03 	sts	0x032B, r24
    2780:	27 c0       	rjmp	.+78     	; 0x27d0 <malloc+0x9c>
    2782:	21 15       	cp	r18, r1
    2784:	31 05       	cpc	r19, r1
    2786:	31 f0       	breq	.+12     	; 0x2794 <malloc+0x60>
    2788:	42 17       	cp	r20, r18
    278a:	53 07       	cpc	r21, r19
    278c:	18 f0       	brcs	.+6      	; 0x2794 <malloc+0x60>
    278e:	a9 01       	movw	r20, r18
    2790:	db 01       	movw	r26, r22
    2792:	01 c0       	rjmp	.+2      	; 0x2796 <malloc+0x62>
    2794:	ef 01       	movw	r28, r30
    2796:	9a 01       	movw	r18, r20
    2798:	bd 01       	movw	r22, r26
    279a:	df 01       	movw	r26, r30
    279c:	02 80       	ldd	r0, Z+2	; 0x02
    279e:	f3 81       	ldd	r31, Z+3	; 0x03
    27a0:	e0 2d       	mov	r30, r0
    27a2:	d7 cf       	rjmp	.-82     	; 0x2752 <malloc+0x1e>
    27a4:	21 15       	cp	r18, r1
    27a6:	31 05       	cpc	r19, r1
    27a8:	f9 f0       	breq	.+62     	; 0x27e8 <malloc+0xb4>
    27aa:	28 1b       	sub	r18, r24
    27ac:	39 0b       	sbc	r19, r25
    27ae:	24 30       	cpi	r18, 0x04	; 4
    27b0:	31 05       	cpc	r19, r1
    27b2:	80 f4       	brcc	.+32     	; 0x27d4 <malloc+0xa0>
    27b4:	8a 81       	ldd	r24, Y+2	; 0x02
    27b6:	9b 81       	ldd	r25, Y+3	; 0x03
    27b8:	61 15       	cp	r22, r1
    27ba:	71 05       	cpc	r23, r1
    27bc:	21 f0       	breq	.+8      	; 0x27c6 <malloc+0x92>
    27be:	fb 01       	movw	r30, r22
    27c0:	93 83       	std	Z+3, r25	; 0x03
    27c2:	82 83       	std	Z+2, r24	; 0x02
    27c4:	04 c0       	rjmp	.+8      	; 0x27ce <malloc+0x9a>
    27c6:	90 93 2c 03 	sts	0x032C, r25
    27ca:	80 93 2b 03 	sts	0x032B, r24
    27ce:	fe 01       	movw	r30, r28
    27d0:	32 96       	adiw	r30, 0x02	; 2
    27d2:	44 c0       	rjmp	.+136    	; 0x285c <malloc+0x128>
    27d4:	fe 01       	movw	r30, r28
    27d6:	e2 0f       	add	r30, r18
    27d8:	f3 1f       	adc	r31, r19
    27da:	81 93       	st	Z+, r24
    27dc:	91 93       	st	Z+, r25
    27de:	22 50       	subi	r18, 0x02	; 2
    27e0:	31 09       	sbc	r19, r1
    27e2:	39 83       	std	Y+1, r19	; 0x01
    27e4:	28 83       	st	Y, r18
    27e6:	3a c0       	rjmp	.+116    	; 0x285c <malloc+0x128>
    27e8:	20 91 29 03 	lds	r18, 0x0329
    27ec:	30 91 2a 03 	lds	r19, 0x032A
    27f0:	23 2b       	or	r18, r19
    27f2:	41 f4       	brne	.+16     	; 0x2804 <malloc+0xd0>
    27f4:	20 91 02 01 	lds	r18, 0x0102
    27f8:	30 91 03 01 	lds	r19, 0x0103
    27fc:	30 93 2a 03 	sts	0x032A, r19
    2800:	20 93 29 03 	sts	0x0329, r18
    2804:	20 91 00 01 	lds	r18, 0x0100
    2808:	30 91 01 01 	lds	r19, 0x0101
    280c:	21 15       	cp	r18, r1
    280e:	31 05       	cpc	r19, r1
    2810:	41 f4       	brne	.+16     	; 0x2822 <malloc+0xee>
    2812:	2d b7       	in	r18, 0x3d	; 61
    2814:	3e b7       	in	r19, 0x3e	; 62
    2816:	40 91 04 01 	lds	r20, 0x0104
    281a:	50 91 05 01 	lds	r21, 0x0105
    281e:	24 1b       	sub	r18, r20
    2820:	35 0b       	sbc	r19, r21
    2822:	e0 91 29 03 	lds	r30, 0x0329
    2826:	f0 91 2a 03 	lds	r31, 0x032A
    282a:	e2 17       	cp	r30, r18
    282c:	f3 07       	cpc	r31, r19
    282e:	a0 f4       	brcc	.+40     	; 0x2858 <malloc+0x124>
    2830:	2e 1b       	sub	r18, r30
    2832:	3f 0b       	sbc	r19, r31
    2834:	28 17       	cp	r18, r24
    2836:	39 07       	cpc	r19, r25
    2838:	78 f0       	brcs	.+30     	; 0x2858 <malloc+0x124>
    283a:	ac 01       	movw	r20, r24
    283c:	4e 5f       	subi	r20, 0xFE	; 254
    283e:	5f 4f       	sbci	r21, 0xFF	; 255
    2840:	24 17       	cp	r18, r20
    2842:	35 07       	cpc	r19, r21
    2844:	48 f0       	brcs	.+18     	; 0x2858 <malloc+0x124>
    2846:	4e 0f       	add	r20, r30
    2848:	5f 1f       	adc	r21, r31
    284a:	50 93 2a 03 	sts	0x032A, r21
    284e:	40 93 29 03 	sts	0x0329, r20
    2852:	81 93       	st	Z+, r24
    2854:	91 93       	st	Z+, r25
    2856:	02 c0       	rjmp	.+4      	; 0x285c <malloc+0x128>
    2858:	e0 e0       	ldi	r30, 0x00	; 0
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	cf 01       	movw	r24, r30
    285e:	df 91       	pop	r29
    2860:	cf 91       	pop	r28
    2862:	08 95       	ret

00002864 <free>:
    2864:	cf 93       	push	r28
    2866:	df 93       	push	r29
    2868:	00 97       	sbiw	r24, 0x00	; 0
    286a:	09 f4       	brne	.+2      	; 0x286e <free+0xa>
    286c:	87 c0       	rjmp	.+270    	; 0x297c <free+0x118>
    286e:	fc 01       	movw	r30, r24
    2870:	32 97       	sbiw	r30, 0x02	; 2
    2872:	13 82       	std	Z+3, r1	; 0x03
    2874:	12 82       	std	Z+2, r1	; 0x02
    2876:	c0 91 2b 03 	lds	r28, 0x032B
    287a:	d0 91 2c 03 	lds	r29, 0x032C
    287e:	20 97       	sbiw	r28, 0x00	; 0
    2880:	81 f4       	brne	.+32     	; 0x28a2 <free+0x3e>
    2882:	20 81       	ld	r18, Z
    2884:	31 81       	ldd	r19, Z+1	; 0x01
    2886:	28 0f       	add	r18, r24
    2888:	39 1f       	adc	r19, r25
    288a:	80 91 29 03 	lds	r24, 0x0329
    288e:	90 91 2a 03 	lds	r25, 0x032A
    2892:	82 17       	cp	r24, r18
    2894:	93 07       	cpc	r25, r19
    2896:	79 f5       	brne	.+94     	; 0x28f6 <free+0x92>
    2898:	f0 93 2a 03 	sts	0x032A, r31
    289c:	e0 93 29 03 	sts	0x0329, r30
    28a0:	6d c0       	rjmp	.+218    	; 0x297c <free+0x118>
    28a2:	de 01       	movw	r26, r28
    28a4:	20 e0       	ldi	r18, 0x00	; 0
    28a6:	30 e0       	ldi	r19, 0x00	; 0
    28a8:	ae 17       	cp	r26, r30
    28aa:	bf 07       	cpc	r27, r31
    28ac:	50 f4       	brcc	.+20     	; 0x28c2 <free+0x5e>
    28ae:	12 96       	adiw	r26, 0x02	; 2
    28b0:	4d 91       	ld	r20, X+
    28b2:	5c 91       	ld	r21, X
    28b4:	13 97       	sbiw	r26, 0x03	; 3
    28b6:	9d 01       	movw	r18, r26
    28b8:	41 15       	cp	r20, r1
    28ba:	51 05       	cpc	r21, r1
    28bc:	09 f1       	breq	.+66     	; 0x2900 <free+0x9c>
    28be:	da 01       	movw	r26, r20
    28c0:	f3 cf       	rjmp	.-26     	; 0x28a8 <free+0x44>
    28c2:	b3 83       	std	Z+3, r27	; 0x03
    28c4:	a2 83       	std	Z+2, r26	; 0x02
    28c6:	40 81       	ld	r20, Z
    28c8:	51 81       	ldd	r21, Z+1	; 0x01
    28ca:	84 0f       	add	r24, r20
    28cc:	95 1f       	adc	r25, r21
    28ce:	8a 17       	cp	r24, r26
    28d0:	9b 07       	cpc	r25, r27
    28d2:	71 f4       	brne	.+28     	; 0x28f0 <free+0x8c>
    28d4:	8d 91       	ld	r24, X+
    28d6:	9c 91       	ld	r25, X
    28d8:	11 97       	sbiw	r26, 0x01	; 1
    28da:	84 0f       	add	r24, r20
    28dc:	95 1f       	adc	r25, r21
    28de:	02 96       	adiw	r24, 0x02	; 2
    28e0:	91 83       	std	Z+1, r25	; 0x01
    28e2:	80 83       	st	Z, r24
    28e4:	12 96       	adiw	r26, 0x02	; 2
    28e6:	8d 91       	ld	r24, X+
    28e8:	9c 91       	ld	r25, X
    28ea:	13 97       	sbiw	r26, 0x03	; 3
    28ec:	93 83       	std	Z+3, r25	; 0x03
    28ee:	82 83       	std	Z+2, r24	; 0x02
    28f0:	21 15       	cp	r18, r1
    28f2:	31 05       	cpc	r19, r1
    28f4:	29 f4       	brne	.+10     	; 0x2900 <free+0x9c>
    28f6:	f0 93 2c 03 	sts	0x032C, r31
    28fa:	e0 93 2b 03 	sts	0x032B, r30
    28fe:	3e c0       	rjmp	.+124    	; 0x297c <free+0x118>
    2900:	d9 01       	movw	r26, r18
    2902:	13 96       	adiw	r26, 0x03	; 3
    2904:	fc 93       	st	X, r31
    2906:	ee 93       	st	-X, r30
    2908:	12 97       	sbiw	r26, 0x02	; 2
    290a:	4d 91       	ld	r20, X+
    290c:	5d 91       	ld	r21, X+
    290e:	a4 0f       	add	r26, r20
    2910:	b5 1f       	adc	r27, r21
    2912:	ea 17       	cp	r30, r26
    2914:	fb 07       	cpc	r31, r27
    2916:	79 f4       	brne	.+30     	; 0x2936 <free+0xd2>
    2918:	80 81       	ld	r24, Z
    291a:	91 81       	ldd	r25, Z+1	; 0x01
    291c:	84 0f       	add	r24, r20
    291e:	95 1f       	adc	r25, r21
    2920:	02 96       	adiw	r24, 0x02	; 2
    2922:	d9 01       	movw	r26, r18
    2924:	11 96       	adiw	r26, 0x01	; 1
    2926:	9c 93       	st	X, r25
    2928:	8e 93       	st	-X, r24
    292a:	82 81       	ldd	r24, Z+2	; 0x02
    292c:	93 81       	ldd	r25, Z+3	; 0x03
    292e:	13 96       	adiw	r26, 0x03	; 3
    2930:	9c 93       	st	X, r25
    2932:	8e 93       	st	-X, r24
    2934:	12 97       	sbiw	r26, 0x02	; 2
    2936:	e0 e0       	ldi	r30, 0x00	; 0
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	8a 81       	ldd	r24, Y+2	; 0x02
    293c:	9b 81       	ldd	r25, Y+3	; 0x03
    293e:	00 97       	sbiw	r24, 0x00	; 0
    2940:	19 f0       	breq	.+6      	; 0x2948 <free+0xe4>
    2942:	fe 01       	movw	r30, r28
    2944:	ec 01       	movw	r28, r24
    2946:	f9 cf       	rjmp	.-14     	; 0x293a <free+0xd6>
    2948:	ce 01       	movw	r24, r28
    294a:	02 96       	adiw	r24, 0x02	; 2
    294c:	28 81       	ld	r18, Y
    294e:	39 81       	ldd	r19, Y+1	; 0x01
    2950:	82 0f       	add	r24, r18
    2952:	93 1f       	adc	r25, r19
    2954:	20 91 29 03 	lds	r18, 0x0329
    2958:	30 91 2a 03 	lds	r19, 0x032A
    295c:	28 17       	cp	r18, r24
    295e:	39 07       	cpc	r19, r25
    2960:	69 f4       	brne	.+26     	; 0x297c <free+0x118>
    2962:	30 97       	sbiw	r30, 0x00	; 0
    2964:	29 f4       	brne	.+10     	; 0x2970 <free+0x10c>
    2966:	10 92 2c 03 	sts	0x032C, r1
    296a:	10 92 2b 03 	sts	0x032B, r1
    296e:	02 c0       	rjmp	.+4      	; 0x2974 <free+0x110>
    2970:	13 82       	std	Z+3, r1	; 0x03
    2972:	12 82       	std	Z+2, r1	; 0x02
    2974:	d0 93 2a 03 	sts	0x032A, r29
    2978:	c0 93 29 03 	sts	0x0329, r28
    297c:	df 91       	pop	r29
    297e:	cf 91       	pop	r28
    2980:	08 95       	ret

00002982 <fdevopen>:
    2982:	0f 93       	push	r16
    2984:	1f 93       	push	r17
    2986:	cf 93       	push	r28
    2988:	df 93       	push	r29
    298a:	ec 01       	movw	r28, r24
    298c:	8b 01       	movw	r16, r22
    298e:	00 97       	sbiw	r24, 0x00	; 0
    2990:	31 f4       	brne	.+12     	; 0x299e <fdevopen+0x1c>
    2992:	61 15       	cp	r22, r1
    2994:	71 05       	cpc	r23, r1
    2996:	19 f4       	brne	.+6      	; 0x299e <fdevopen+0x1c>
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	37 c0       	rjmp	.+110    	; 0x2a0c <fdevopen+0x8a>
    299e:	6e e0       	ldi	r22, 0x0E	; 14
    29a0:	70 e0       	ldi	r23, 0x00	; 0
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	5c d2       	rcall	.+1208   	; 0x2e60 <calloc>
    29a8:	fc 01       	movw	r30, r24
    29aa:	00 97       	sbiw	r24, 0x00	; 0
    29ac:	a9 f3       	breq	.-22     	; 0x2998 <fdevopen+0x16>
    29ae:	80 e8       	ldi	r24, 0x80	; 128
    29b0:	83 83       	std	Z+3, r24	; 0x03
    29b2:	01 15       	cp	r16, r1
    29b4:	11 05       	cpc	r17, r1
    29b6:	71 f0       	breq	.+28     	; 0x29d4 <fdevopen+0x52>
    29b8:	13 87       	std	Z+11, r17	; 0x0b
    29ba:	02 87       	std	Z+10, r16	; 0x0a
    29bc:	81 e8       	ldi	r24, 0x81	; 129
    29be:	83 83       	std	Z+3, r24	; 0x03
    29c0:	80 91 2d 03 	lds	r24, 0x032D
    29c4:	90 91 2e 03 	lds	r25, 0x032E
    29c8:	89 2b       	or	r24, r25
    29ca:	21 f4       	brne	.+8      	; 0x29d4 <fdevopen+0x52>
    29cc:	f0 93 2e 03 	sts	0x032E, r31
    29d0:	e0 93 2d 03 	sts	0x032D, r30
    29d4:	20 97       	sbiw	r28, 0x00	; 0
    29d6:	c9 f0       	breq	.+50     	; 0x2a0a <fdevopen+0x88>
    29d8:	d1 87       	std	Z+9, r29	; 0x09
    29da:	c0 87       	std	Z+8, r28	; 0x08
    29dc:	83 81       	ldd	r24, Z+3	; 0x03
    29de:	82 60       	ori	r24, 0x02	; 2
    29e0:	83 83       	std	Z+3, r24	; 0x03
    29e2:	80 91 2f 03 	lds	r24, 0x032F
    29e6:	90 91 30 03 	lds	r25, 0x0330
    29ea:	89 2b       	or	r24, r25
    29ec:	71 f4       	brne	.+28     	; 0x2a0a <fdevopen+0x88>
    29ee:	f0 93 30 03 	sts	0x0330, r31
    29f2:	e0 93 2f 03 	sts	0x032F, r30
    29f6:	80 91 31 03 	lds	r24, 0x0331
    29fa:	90 91 32 03 	lds	r25, 0x0332
    29fe:	89 2b       	or	r24, r25
    2a00:	21 f4       	brne	.+8      	; 0x2a0a <fdevopen+0x88>
    2a02:	f0 93 32 03 	sts	0x0332, r31
    2a06:	e0 93 31 03 	sts	0x0331, r30
    2a0a:	cf 01       	movw	r24, r30
    2a0c:	df 91       	pop	r29
    2a0e:	cf 91       	pop	r28
    2a10:	1f 91       	pop	r17
    2a12:	0f 91       	pop	r16
    2a14:	08 95       	ret

00002a16 <printf>:
    2a16:	a0 e0       	ldi	r26, 0x00	; 0
    2a18:	b0 e0       	ldi	r27, 0x00	; 0
    2a1a:	e0 e1       	ldi	r30, 0x10	; 16
    2a1c:	f5 e1       	ldi	r31, 0x15	; 21
    2a1e:	f7 c2       	rjmp	.+1518   	; 0x300e <__prologue_saves__+0x20>
    2a20:	fe 01       	movw	r30, r28
    2a22:	35 96       	adiw	r30, 0x05	; 5
    2a24:	61 91       	ld	r22, Z+
    2a26:	71 91       	ld	r23, Z+
    2a28:	af 01       	movw	r20, r30
    2a2a:	80 91 2f 03 	lds	r24, 0x032F
    2a2e:	90 91 30 03 	lds	r25, 0x0330
    2a32:	53 d0       	rcall	.+166    	; 0x2ada <vfprintf>
    2a34:	e2 e0       	ldi	r30, 0x02	; 2
    2a36:	07 c3       	rjmp	.+1550   	; 0x3046 <__epilogue_restores__+0x20>

00002a38 <putchar>:
    2a38:	60 91 2f 03 	lds	r22, 0x032F
    2a3c:	70 91 30 03 	lds	r23, 0x0330
    2a40:	46 c2       	rjmp	.+1164   	; 0x2ece <fputc>

00002a42 <puts>:
    2a42:	0f 93       	push	r16
    2a44:	1f 93       	push	r17
    2a46:	cf 93       	push	r28
    2a48:	df 93       	push	r29
    2a4a:	e0 91 2f 03 	lds	r30, 0x032F
    2a4e:	f0 91 30 03 	lds	r31, 0x0330
    2a52:	23 81       	ldd	r18, Z+3	; 0x03
    2a54:	21 ff       	sbrs	r18, 1
    2a56:	1b c0       	rjmp	.+54     	; 0x2a8e <puts+0x4c>
    2a58:	ec 01       	movw	r28, r24
    2a5a:	00 e0       	ldi	r16, 0x00	; 0
    2a5c:	10 e0       	ldi	r17, 0x00	; 0
    2a5e:	89 91       	ld	r24, Y+
    2a60:	60 91 2f 03 	lds	r22, 0x032F
    2a64:	70 91 30 03 	lds	r23, 0x0330
    2a68:	db 01       	movw	r26, r22
    2a6a:	18 96       	adiw	r26, 0x08	; 8
    2a6c:	ed 91       	ld	r30, X+
    2a6e:	fc 91       	ld	r31, X
    2a70:	19 97       	sbiw	r26, 0x09	; 9
    2a72:	88 23       	and	r24, r24
    2a74:	31 f0       	breq	.+12     	; 0x2a82 <puts+0x40>
    2a76:	09 95       	icall
    2a78:	89 2b       	or	r24, r25
    2a7a:	89 f3       	breq	.-30     	; 0x2a5e <puts+0x1c>
    2a7c:	0f ef       	ldi	r16, 0xFF	; 255
    2a7e:	1f ef       	ldi	r17, 0xFF	; 255
    2a80:	ee cf       	rjmp	.-36     	; 0x2a5e <puts+0x1c>
    2a82:	8a e0       	ldi	r24, 0x0A	; 10
    2a84:	09 95       	icall
    2a86:	89 2b       	or	r24, r25
    2a88:	11 f4       	brne	.+4      	; 0x2a8e <puts+0x4c>
    2a8a:	c8 01       	movw	r24, r16
    2a8c:	02 c0       	rjmp	.+4      	; 0x2a92 <puts+0x50>
    2a8e:	8f ef       	ldi	r24, 0xFF	; 255
    2a90:	9f ef       	ldi	r25, 0xFF	; 255
    2a92:	df 91       	pop	r29
    2a94:	cf 91       	pop	r28
    2a96:	1f 91       	pop	r17
    2a98:	0f 91       	pop	r16
    2a9a:	08 95       	ret

00002a9c <sprintf>:
    2a9c:	ae e0       	ldi	r26, 0x0E	; 14
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	e3 e5       	ldi	r30, 0x53	; 83
    2aa2:	f5 e1       	ldi	r31, 0x15	; 21
    2aa4:	b2 c2       	rjmp	.+1380   	; 0x300a <__prologue_saves__+0x1c>
    2aa6:	0d 89       	ldd	r16, Y+21	; 0x15
    2aa8:	1e 89       	ldd	r17, Y+22	; 0x16
    2aaa:	86 e0       	ldi	r24, 0x06	; 6
    2aac:	8c 83       	std	Y+4, r24	; 0x04
    2aae:	1a 83       	std	Y+2, r17	; 0x02
    2ab0:	09 83       	std	Y+1, r16	; 0x01
    2ab2:	8f ef       	ldi	r24, 0xFF	; 255
    2ab4:	9f e7       	ldi	r25, 0x7F	; 127
    2ab6:	9e 83       	std	Y+6, r25	; 0x06
    2ab8:	8d 83       	std	Y+5, r24	; 0x05
    2aba:	ae 01       	movw	r20, r28
    2abc:	47 5e       	subi	r20, 0xE7	; 231
    2abe:	5f 4f       	sbci	r21, 0xFF	; 255
    2ac0:	6f 89       	ldd	r22, Y+23	; 0x17
    2ac2:	78 8d       	ldd	r23, Y+24	; 0x18
    2ac4:	ce 01       	movw	r24, r28
    2ac6:	01 96       	adiw	r24, 0x01	; 1
    2ac8:	08 d0       	rcall	.+16     	; 0x2ada <vfprintf>
    2aca:	ef 81       	ldd	r30, Y+7	; 0x07
    2acc:	f8 85       	ldd	r31, Y+8	; 0x08
    2ace:	e0 0f       	add	r30, r16
    2ad0:	f1 1f       	adc	r31, r17
    2ad2:	10 82       	st	Z, r1
    2ad4:	2e 96       	adiw	r28, 0x0e	; 14
    2ad6:	e4 e0       	ldi	r30, 0x04	; 4
    2ad8:	b4 c2       	rjmp	.+1384   	; 0x3042 <__epilogue_restores__+0x1c>

00002ada <vfprintf>:
    2ada:	ac e0       	ldi	r26, 0x0C	; 12
    2adc:	b0 e0       	ldi	r27, 0x00	; 0
    2ade:	e2 e7       	ldi	r30, 0x72	; 114
    2ae0:	f5 e1       	ldi	r31, 0x15	; 21
    2ae2:	85 c2       	rjmp	.+1290   	; 0x2fee <__prologue_saves__>
    2ae4:	7c 01       	movw	r14, r24
    2ae6:	6b 01       	movw	r12, r22
    2ae8:	8a 01       	movw	r16, r20
    2aea:	fc 01       	movw	r30, r24
    2aec:	17 82       	std	Z+7, r1	; 0x07
    2aee:	16 82       	std	Z+6, r1	; 0x06
    2af0:	83 81       	ldd	r24, Z+3	; 0x03
    2af2:	81 ff       	sbrs	r24, 1
    2af4:	b0 c1       	rjmp	.+864    	; 0x2e56 <vfprintf+0x37c>
    2af6:	ce 01       	movw	r24, r28
    2af8:	01 96       	adiw	r24, 0x01	; 1
    2afa:	4c 01       	movw	r8, r24
    2afc:	f7 01       	movw	r30, r14
    2afe:	93 81       	ldd	r25, Z+3	; 0x03
    2b00:	f6 01       	movw	r30, r12
    2b02:	93 fd       	sbrc	r25, 3
    2b04:	85 91       	lpm	r24, Z+
    2b06:	93 ff       	sbrs	r25, 3
    2b08:	81 91       	ld	r24, Z+
    2b0a:	6f 01       	movw	r12, r30
    2b0c:	88 23       	and	r24, r24
    2b0e:	09 f4       	brne	.+2      	; 0x2b12 <vfprintf+0x38>
    2b10:	9e c1       	rjmp	.+828    	; 0x2e4e <vfprintf+0x374>
    2b12:	85 32       	cpi	r24, 0x25	; 37
    2b14:	39 f4       	brne	.+14     	; 0x2b24 <vfprintf+0x4a>
    2b16:	93 fd       	sbrc	r25, 3
    2b18:	85 91       	lpm	r24, Z+
    2b1a:	93 ff       	sbrs	r25, 3
    2b1c:	81 91       	ld	r24, Z+
    2b1e:	6f 01       	movw	r12, r30
    2b20:	85 32       	cpi	r24, 0x25	; 37
    2b22:	21 f4       	brne	.+8      	; 0x2b2c <vfprintf+0x52>
    2b24:	b7 01       	movw	r22, r14
    2b26:	90 e0       	ldi	r25, 0x00	; 0
    2b28:	d2 d1       	rcall	.+932    	; 0x2ece <fputc>
    2b2a:	e8 cf       	rjmp	.-48     	; 0x2afc <vfprintf+0x22>
    2b2c:	51 2c       	mov	r5, r1
    2b2e:	31 2c       	mov	r3, r1
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	20 32       	cpi	r18, 0x20	; 32
    2b34:	a0 f4       	brcc	.+40     	; 0x2b5e <vfprintf+0x84>
    2b36:	8b 32       	cpi	r24, 0x2B	; 43
    2b38:	69 f0       	breq	.+26     	; 0x2b54 <vfprintf+0x7a>
    2b3a:	30 f4       	brcc	.+12     	; 0x2b48 <vfprintf+0x6e>
    2b3c:	80 32       	cpi	r24, 0x20	; 32
    2b3e:	59 f0       	breq	.+22     	; 0x2b56 <vfprintf+0x7c>
    2b40:	83 32       	cpi	r24, 0x23	; 35
    2b42:	69 f4       	brne	.+26     	; 0x2b5e <vfprintf+0x84>
    2b44:	20 61       	ori	r18, 0x10	; 16
    2b46:	2c c0       	rjmp	.+88     	; 0x2ba0 <vfprintf+0xc6>
    2b48:	8d 32       	cpi	r24, 0x2D	; 45
    2b4a:	39 f0       	breq	.+14     	; 0x2b5a <vfprintf+0x80>
    2b4c:	80 33       	cpi	r24, 0x30	; 48
    2b4e:	39 f4       	brne	.+14     	; 0x2b5e <vfprintf+0x84>
    2b50:	21 60       	ori	r18, 0x01	; 1
    2b52:	26 c0       	rjmp	.+76     	; 0x2ba0 <vfprintf+0xc6>
    2b54:	22 60       	ori	r18, 0x02	; 2
    2b56:	24 60       	ori	r18, 0x04	; 4
    2b58:	23 c0       	rjmp	.+70     	; 0x2ba0 <vfprintf+0xc6>
    2b5a:	28 60       	ori	r18, 0x08	; 8
    2b5c:	21 c0       	rjmp	.+66     	; 0x2ba0 <vfprintf+0xc6>
    2b5e:	27 fd       	sbrc	r18, 7
    2b60:	27 c0       	rjmp	.+78     	; 0x2bb0 <vfprintf+0xd6>
    2b62:	30 ed       	ldi	r19, 0xD0	; 208
    2b64:	38 0f       	add	r19, r24
    2b66:	3a 30       	cpi	r19, 0x0A	; 10
    2b68:	78 f4       	brcc	.+30     	; 0x2b88 <vfprintf+0xae>
    2b6a:	26 ff       	sbrs	r18, 6
    2b6c:	06 c0       	rjmp	.+12     	; 0x2b7a <vfprintf+0xa0>
    2b6e:	fa e0       	ldi	r31, 0x0A	; 10
    2b70:	5f 9e       	mul	r5, r31
    2b72:	30 0d       	add	r19, r0
    2b74:	11 24       	eor	r1, r1
    2b76:	53 2e       	mov	r5, r19
    2b78:	13 c0       	rjmp	.+38     	; 0x2ba0 <vfprintf+0xc6>
    2b7a:	8a e0       	ldi	r24, 0x0A	; 10
    2b7c:	38 9e       	mul	r3, r24
    2b7e:	30 0d       	add	r19, r0
    2b80:	11 24       	eor	r1, r1
    2b82:	33 2e       	mov	r3, r19
    2b84:	20 62       	ori	r18, 0x20	; 32
    2b86:	0c c0       	rjmp	.+24     	; 0x2ba0 <vfprintf+0xc6>
    2b88:	8e 32       	cpi	r24, 0x2E	; 46
    2b8a:	21 f4       	brne	.+8      	; 0x2b94 <vfprintf+0xba>
    2b8c:	26 fd       	sbrc	r18, 6
    2b8e:	5f c1       	rjmp	.+702    	; 0x2e4e <vfprintf+0x374>
    2b90:	20 64       	ori	r18, 0x40	; 64
    2b92:	06 c0       	rjmp	.+12     	; 0x2ba0 <vfprintf+0xc6>
    2b94:	8c 36       	cpi	r24, 0x6C	; 108
    2b96:	11 f4       	brne	.+4      	; 0x2b9c <vfprintf+0xc2>
    2b98:	20 68       	ori	r18, 0x80	; 128
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <vfprintf+0xc6>
    2b9c:	88 36       	cpi	r24, 0x68	; 104
    2b9e:	41 f4       	brne	.+16     	; 0x2bb0 <vfprintf+0xd6>
    2ba0:	f6 01       	movw	r30, r12
    2ba2:	93 fd       	sbrc	r25, 3
    2ba4:	85 91       	lpm	r24, Z+
    2ba6:	93 ff       	sbrs	r25, 3
    2ba8:	81 91       	ld	r24, Z+
    2baa:	6f 01       	movw	r12, r30
    2bac:	81 11       	cpse	r24, r1
    2bae:	c1 cf       	rjmp	.-126    	; 0x2b32 <vfprintf+0x58>
    2bb0:	98 2f       	mov	r25, r24
    2bb2:	9f 7d       	andi	r25, 0xDF	; 223
    2bb4:	95 54       	subi	r25, 0x45	; 69
    2bb6:	93 30       	cpi	r25, 0x03	; 3
    2bb8:	28 f4       	brcc	.+10     	; 0x2bc4 <vfprintf+0xea>
    2bba:	0c 5f       	subi	r16, 0xFC	; 252
    2bbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bbe:	ff e3       	ldi	r31, 0x3F	; 63
    2bc0:	f9 83       	std	Y+1, r31	; 0x01
    2bc2:	0d c0       	rjmp	.+26     	; 0x2bde <vfprintf+0x104>
    2bc4:	83 36       	cpi	r24, 0x63	; 99
    2bc6:	31 f0       	breq	.+12     	; 0x2bd4 <vfprintf+0xfa>
    2bc8:	83 37       	cpi	r24, 0x73	; 115
    2bca:	71 f0       	breq	.+28     	; 0x2be8 <vfprintf+0x10e>
    2bcc:	83 35       	cpi	r24, 0x53	; 83
    2bce:	09 f0       	breq	.+2      	; 0x2bd2 <vfprintf+0xf8>
    2bd0:	57 c0       	rjmp	.+174    	; 0x2c80 <vfprintf+0x1a6>
    2bd2:	21 c0       	rjmp	.+66     	; 0x2c16 <vfprintf+0x13c>
    2bd4:	f8 01       	movw	r30, r16
    2bd6:	80 81       	ld	r24, Z
    2bd8:	89 83       	std	Y+1, r24	; 0x01
    2bda:	0e 5f       	subi	r16, 0xFE	; 254
    2bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bde:	44 24       	eor	r4, r4
    2be0:	43 94       	inc	r4
    2be2:	51 2c       	mov	r5, r1
    2be4:	54 01       	movw	r10, r8
    2be6:	14 c0       	rjmp	.+40     	; 0x2c10 <vfprintf+0x136>
    2be8:	38 01       	movw	r6, r16
    2bea:	f2 e0       	ldi	r31, 0x02	; 2
    2bec:	6f 0e       	add	r6, r31
    2bee:	71 1c       	adc	r7, r1
    2bf0:	f8 01       	movw	r30, r16
    2bf2:	a0 80       	ld	r10, Z
    2bf4:	b1 80       	ldd	r11, Z+1	; 0x01
    2bf6:	26 ff       	sbrs	r18, 6
    2bf8:	03 c0       	rjmp	.+6      	; 0x2c00 <vfprintf+0x126>
    2bfa:	65 2d       	mov	r22, r5
    2bfc:	70 e0       	ldi	r23, 0x00	; 0
    2bfe:	02 c0       	rjmp	.+4      	; 0x2c04 <vfprintf+0x12a>
    2c00:	6f ef       	ldi	r22, 0xFF	; 255
    2c02:	7f ef       	ldi	r23, 0xFF	; 255
    2c04:	c5 01       	movw	r24, r10
    2c06:	2c 87       	std	Y+12, r18	; 0x0c
    2c08:	57 d1       	rcall	.+686    	; 0x2eb8 <strnlen>
    2c0a:	2c 01       	movw	r4, r24
    2c0c:	83 01       	movw	r16, r6
    2c0e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c10:	2f 77       	andi	r18, 0x7F	; 127
    2c12:	22 2e       	mov	r2, r18
    2c14:	16 c0       	rjmp	.+44     	; 0x2c42 <vfprintf+0x168>
    2c16:	38 01       	movw	r6, r16
    2c18:	f2 e0       	ldi	r31, 0x02	; 2
    2c1a:	6f 0e       	add	r6, r31
    2c1c:	71 1c       	adc	r7, r1
    2c1e:	f8 01       	movw	r30, r16
    2c20:	a0 80       	ld	r10, Z
    2c22:	b1 80       	ldd	r11, Z+1	; 0x01
    2c24:	26 ff       	sbrs	r18, 6
    2c26:	03 c0       	rjmp	.+6      	; 0x2c2e <vfprintf+0x154>
    2c28:	65 2d       	mov	r22, r5
    2c2a:	70 e0       	ldi	r23, 0x00	; 0
    2c2c:	02 c0       	rjmp	.+4      	; 0x2c32 <vfprintf+0x158>
    2c2e:	6f ef       	ldi	r22, 0xFF	; 255
    2c30:	7f ef       	ldi	r23, 0xFF	; 255
    2c32:	c5 01       	movw	r24, r10
    2c34:	2c 87       	std	Y+12, r18	; 0x0c
    2c36:	2e d1       	rcall	.+604    	; 0x2e94 <strnlen_P>
    2c38:	2c 01       	movw	r4, r24
    2c3a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c3c:	20 68       	ori	r18, 0x80	; 128
    2c3e:	22 2e       	mov	r2, r18
    2c40:	83 01       	movw	r16, r6
    2c42:	23 fc       	sbrc	r2, 3
    2c44:	19 c0       	rjmp	.+50     	; 0x2c78 <vfprintf+0x19e>
    2c46:	83 2d       	mov	r24, r3
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	48 16       	cp	r4, r24
    2c4c:	59 06       	cpc	r5, r25
    2c4e:	a0 f4       	brcc	.+40     	; 0x2c78 <vfprintf+0x19e>
    2c50:	b7 01       	movw	r22, r14
    2c52:	80 e2       	ldi	r24, 0x20	; 32
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	3b d1       	rcall	.+630    	; 0x2ece <fputc>
    2c58:	3a 94       	dec	r3
    2c5a:	f5 cf       	rjmp	.-22     	; 0x2c46 <vfprintf+0x16c>
    2c5c:	f5 01       	movw	r30, r10
    2c5e:	27 fc       	sbrc	r2, 7
    2c60:	85 91       	lpm	r24, Z+
    2c62:	27 fe       	sbrs	r2, 7
    2c64:	81 91       	ld	r24, Z+
    2c66:	5f 01       	movw	r10, r30
    2c68:	b7 01       	movw	r22, r14
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	30 d1       	rcall	.+608    	; 0x2ece <fputc>
    2c6e:	31 10       	cpse	r3, r1
    2c70:	3a 94       	dec	r3
    2c72:	f1 e0       	ldi	r31, 0x01	; 1
    2c74:	4f 1a       	sub	r4, r31
    2c76:	51 08       	sbc	r5, r1
    2c78:	41 14       	cp	r4, r1
    2c7a:	51 04       	cpc	r5, r1
    2c7c:	79 f7       	brne	.-34     	; 0x2c5c <vfprintf+0x182>
    2c7e:	de c0       	rjmp	.+444    	; 0x2e3c <vfprintf+0x362>
    2c80:	84 36       	cpi	r24, 0x64	; 100
    2c82:	11 f0       	breq	.+4      	; 0x2c88 <vfprintf+0x1ae>
    2c84:	89 36       	cpi	r24, 0x69	; 105
    2c86:	31 f5       	brne	.+76     	; 0x2cd4 <vfprintf+0x1fa>
    2c88:	f8 01       	movw	r30, r16
    2c8a:	27 ff       	sbrs	r18, 7
    2c8c:	07 c0       	rjmp	.+14     	; 0x2c9c <vfprintf+0x1c2>
    2c8e:	60 81       	ld	r22, Z
    2c90:	71 81       	ldd	r23, Z+1	; 0x01
    2c92:	82 81       	ldd	r24, Z+2	; 0x02
    2c94:	93 81       	ldd	r25, Z+3	; 0x03
    2c96:	0c 5f       	subi	r16, 0xFC	; 252
    2c98:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9a:	08 c0       	rjmp	.+16     	; 0x2cac <vfprintf+0x1d2>
    2c9c:	60 81       	ld	r22, Z
    2c9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ca0:	88 27       	eor	r24, r24
    2ca2:	77 fd       	sbrc	r23, 7
    2ca4:	80 95       	com	r24
    2ca6:	98 2f       	mov	r25, r24
    2ca8:	0e 5f       	subi	r16, 0xFE	; 254
    2caa:	1f 4f       	sbci	r17, 0xFF	; 255
    2cac:	2f 76       	andi	r18, 0x6F	; 111
    2cae:	b2 2e       	mov	r11, r18
    2cb0:	97 ff       	sbrs	r25, 7
    2cb2:	09 c0       	rjmp	.+18     	; 0x2cc6 <vfprintf+0x1ec>
    2cb4:	90 95       	com	r25
    2cb6:	80 95       	com	r24
    2cb8:	70 95       	com	r23
    2cba:	61 95       	neg	r22
    2cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2cbe:	8f 4f       	sbci	r24, 0xFF	; 255
    2cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    2cc2:	20 68       	ori	r18, 0x80	; 128
    2cc4:	b2 2e       	mov	r11, r18
    2cc6:	2a e0       	ldi	r18, 0x0A	; 10
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	a4 01       	movw	r20, r8
    2ccc:	32 d1       	rcall	.+612    	; 0x2f32 <__ultoa_invert>
    2cce:	a8 2e       	mov	r10, r24
    2cd0:	a8 18       	sub	r10, r8
    2cd2:	43 c0       	rjmp	.+134    	; 0x2d5a <vfprintf+0x280>
    2cd4:	85 37       	cpi	r24, 0x75	; 117
    2cd6:	29 f4       	brne	.+10     	; 0x2ce2 <vfprintf+0x208>
    2cd8:	2f 7e       	andi	r18, 0xEF	; 239
    2cda:	b2 2e       	mov	r11, r18
    2cdc:	2a e0       	ldi	r18, 0x0A	; 10
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	25 c0       	rjmp	.+74     	; 0x2d2c <vfprintf+0x252>
    2ce2:	f2 2f       	mov	r31, r18
    2ce4:	f9 7f       	andi	r31, 0xF9	; 249
    2ce6:	bf 2e       	mov	r11, r31
    2ce8:	8f 36       	cpi	r24, 0x6F	; 111
    2cea:	c1 f0       	breq	.+48     	; 0x2d1c <vfprintf+0x242>
    2cec:	18 f4       	brcc	.+6      	; 0x2cf4 <vfprintf+0x21a>
    2cee:	88 35       	cpi	r24, 0x58	; 88
    2cf0:	79 f0       	breq	.+30     	; 0x2d10 <vfprintf+0x236>
    2cf2:	ad c0       	rjmp	.+346    	; 0x2e4e <vfprintf+0x374>
    2cf4:	80 37       	cpi	r24, 0x70	; 112
    2cf6:	19 f0       	breq	.+6      	; 0x2cfe <vfprintf+0x224>
    2cf8:	88 37       	cpi	r24, 0x78	; 120
    2cfa:	21 f0       	breq	.+8      	; 0x2d04 <vfprintf+0x22a>
    2cfc:	a8 c0       	rjmp	.+336    	; 0x2e4e <vfprintf+0x374>
    2cfe:	2f 2f       	mov	r18, r31
    2d00:	20 61       	ori	r18, 0x10	; 16
    2d02:	b2 2e       	mov	r11, r18
    2d04:	b4 fe       	sbrs	r11, 4
    2d06:	0d c0       	rjmp	.+26     	; 0x2d22 <vfprintf+0x248>
    2d08:	8b 2d       	mov	r24, r11
    2d0a:	84 60       	ori	r24, 0x04	; 4
    2d0c:	b8 2e       	mov	r11, r24
    2d0e:	09 c0       	rjmp	.+18     	; 0x2d22 <vfprintf+0x248>
    2d10:	24 ff       	sbrs	r18, 4
    2d12:	0a c0       	rjmp	.+20     	; 0x2d28 <vfprintf+0x24e>
    2d14:	9f 2f       	mov	r25, r31
    2d16:	96 60       	ori	r25, 0x06	; 6
    2d18:	b9 2e       	mov	r11, r25
    2d1a:	06 c0       	rjmp	.+12     	; 0x2d28 <vfprintf+0x24e>
    2d1c:	28 e0       	ldi	r18, 0x08	; 8
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	05 c0       	rjmp	.+10     	; 0x2d2c <vfprintf+0x252>
    2d22:	20 e1       	ldi	r18, 0x10	; 16
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	02 c0       	rjmp	.+4      	; 0x2d2c <vfprintf+0x252>
    2d28:	20 e1       	ldi	r18, 0x10	; 16
    2d2a:	32 e0       	ldi	r19, 0x02	; 2
    2d2c:	f8 01       	movw	r30, r16
    2d2e:	b7 fe       	sbrs	r11, 7
    2d30:	07 c0       	rjmp	.+14     	; 0x2d40 <vfprintf+0x266>
    2d32:	60 81       	ld	r22, Z
    2d34:	71 81       	ldd	r23, Z+1	; 0x01
    2d36:	82 81       	ldd	r24, Z+2	; 0x02
    2d38:	93 81       	ldd	r25, Z+3	; 0x03
    2d3a:	0c 5f       	subi	r16, 0xFC	; 252
    2d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d3e:	06 c0       	rjmp	.+12     	; 0x2d4c <vfprintf+0x272>
    2d40:	60 81       	ld	r22, Z
    2d42:	71 81       	ldd	r23, Z+1	; 0x01
    2d44:	80 e0       	ldi	r24, 0x00	; 0
    2d46:	90 e0       	ldi	r25, 0x00	; 0
    2d48:	0e 5f       	subi	r16, 0xFE	; 254
    2d4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4c:	a4 01       	movw	r20, r8
    2d4e:	f1 d0       	rcall	.+482    	; 0x2f32 <__ultoa_invert>
    2d50:	a8 2e       	mov	r10, r24
    2d52:	a8 18       	sub	r10, r8
    2d54:	fb 2d       	mov	r31, r11
    2d56:	ff 77       	andi	r31, 0x7F	; 127
    2d58:	bf 2e       	mov	r11, r31
    2d5a:	b6 fe       	sbrs	r11, 6
    2d5c:	0b c0       	rjmp	.+22     	; 0x2d74 <vfprintf+0x29a>
    2d5e:	2b 2d       	mov	r18, r11
    2d60:	2e 7f       	andi	r18, 0xFE	; 254
    2d62:	a5 14       	cp	r10, r5
    2d64:	50 f4       	brcc	.+20     	; 0x2d7a <vfprintf+0x2a0>
    2d66:	b4 fe       	sbrs	r11, 4
    2d68:	0a c0       	rjmp	.+20     	; 0x2d7e <vfprintf+0x2a4>
    2d6a:	b2 fc       	sbrc	r11, 2
    2d6c:	08 c0       	rjmp	.+16     	; 0x2d7e <vfprintf+0x2a4>
    2d6e:	2b 2d       	mov	r18, r11
    2d70:	2e 7e       	andi	r18, 0xEE	; 238
    2d72:	05 c0       	rjmp	.+10     	; 0x2d7e <vfprintf+0x2a4>
    2d74:	7a 2c       	mov	r7, r10
    2d76:	2b 2d       	mov	r18, r11
    2d78:	03 c0       	rjmp	.+6      	; 0x2d80 <vfprintf+0x2a6>
    2d7a:	7a 2c       	mov	r7, r10
    2d7c:	01 c0       	rjmp	.+2      	; 0x2d80 <vfprintf+0x2a6>
    2d7e:	75 2c       	mov	r7, r5
    2d80:	24 ff       	sbrs	r18, 4
    2d82:	0d c0       	rjmp	.+26     	; 0x2d9e <vfprintf+0x2c4>
    2d84:	fe 01       	movw	r30, r28
    2d86:	ea 0d       	add	r30, r10
    2d88:	f1 1d       	adc	r31, r1
    2d8a:	80 81       	ld	r24, Z
    2d8c:	80 33       	cpi	r24, 0x30	; 48
    2d8e:	11 f4       	brne	.+4      	; 0x2d94 <vfprintf+0x2ba>
    2d90:	29 7e       	andi	r18, 0xE9	; 233
    2d92:	09 c0       	rjmp	.+18     	; 0x2da6 <vfprintf+0x2cc>
    2d94:	22 ff       	sbrs	r18, 2
    2d96:	06 c0       	rjmp	.+12     	; 0x2da4 <vfprintf+0x2ca>
    2d98:	73 94       	inc	r7
    2d9a:	73 94       	inc	r7
    2d9c:	04 c0       	rjmp	.+8      	; 0x2da6 <vfprintf+0x2cc>
    2d9e:	82 2f       	mov	r24, r18
    2da0:	86 78       	andi	r24, 0x86	; 134
    2da2:	09 f0       	breq	.+2      	; 0x2da6 <vfprintf+0x2cc>
    2da4:	73 94       	inc	r7
    2da6:	23 fd       	sbrc	r18, 3
    2da8:	12 c0       	rjmp	.+36     	; 0x2dce <vfprintf+0x2f4>
    2daa:	20 ff       	sbrs	r18, 0
    2dac:	06 c0       	rjmp	.+12     	; 0x2dba <vfprintf+0x2e0>
    2dae:	5a 2c       	mov	r5, r10
    2db0:	73 14       	cp	r7, r3
    2db2:	18 f4       	brcc	.+6      	; 0x2dba <vfprintf+0x2e0>
    2db4:	53 0c       	add	r5, r3
    2db6:	57 18       	sub	r5, r7
    2db8:	73 2c       	mov	r7, r3
    2dba:	73 14       	cp	r7, r3
    2dbc:	60 f4       	brcc	.+24     	; 0x2dd6 <vfprintf+0x2fc>
    2dbe:	b7 01       	movw	r22, r14
    2dc0:	80 e2       	ldi	r24, 0x20	; 32
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	2c 87       	std	Y+12, r18	; 0x0c
    2dc6:	83 d0       	rcall	.+262    	; 0x2ece <fputc>
    2dc8:	73 94       	inc	r7
    2dca:	2c 85       	ldd	r18, Y+12	; 0x0c
    2dcc:	f6 cf       	rjmp	.-20     	; 0x2dba <vfprintf+0x2e0>
    2dce:	73 14       	cp	r7, r3
    2dd0:	10 f4       	brcc	.+4      	; 0x2dd6 <vfprintf+0x2fc>
    2dd2:	37 18       	sub	r3, r7
    2dd4:	01 c0       	rjmp	.+2      	; 0x2dd8 <vfprintf+0x2fe>
    2dd6:	31 2c       	mov	r3, r1
    2dd8:	24 ff       	sbrs	r18, 4
    2dda:	11 c0       	rjmp	.+34     	; 0x2dfe <vfprintf+0x324>
    2ddc:	b7 01       	movw	r22, r14
    2dde:	80 e3       	ldi	r24, 0x30	; 48
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	2c 87       	std	Y+12, r18	; 0x0c
    2de4:	74 d0       	rcall	.+232    	; 0x2ece <fputc>
    2de6:	2c 85       	ldd	r18, Y+12	; 0x0c
    2de8:	22 ff       	sbrs	r18, 2
    2dea:	16 c0       	rjmp	.+44     	; 0x2e18 <vfprintf+0x33e>
    2dec:	21 ff       	sbrs	r18, 1
    2dee:	03 c0       	rjmp	.+6      	; 0x2df6 <vfprintf+0x31c>
    2df0:	88 e5       	ldi	r24, 0x58	; 88
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	02 c0       	rjmp	.+4      	; 0x2dfa <vfprintf+0x320>
    2df6:	88 e7       	ldi	r24, 0x78	; 120
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	b7 01       	movw	r22, r14
    2dfc:	0c c0       	rjmp	.+24     	; 0x2e16 <vfprintf+0x33c>
    2dfe:	82 2f       	mov	r24, r18
    2e00:	86 78       	andi	r24, 0x86	; 134
    2e02:	51 f0       	breq	.+20     	; 0x2e18 <vfprintf+0x33e>
    2e04:	21 fd       	sbrc	r18, 1
    2e06:	02 c0       	rjmp	.+4      	; 0x2e0c <vfprintf+0x332>
    2e08:	80 e2       	ldi	r24, 0x20	; 32
    2e0a:	01 c0       	rjmp	.+2      	; 0x2e0e <vfprintf+0x334>
    2e0c:	8b e2       	ldi	r24, 0x2B	; 43
    2e0e:	27 fd       	sbrc	r18, 7
    2e10:	8d e2       	ldi	r24, 0x2D	; 45
    2e12:	b7 01       	movw	r22, r14
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	5b d0       	rcall	.+182    	; 0x2ece <fputc>
    2e18:	a5 14       	cp	r10, r5
    2e1a:	30 f4       	brcc	.+12     	; 0x2e28 <vfprintf+0x34e>
    2e1c:	b7 01       	movw	r22, r14
    2e1e:	80 e3       	ldi	r24, 0x30	; 48
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	55 d0       	rcall	.+170    	; 0x2ece <fputc>
    2e24:	5a 94       	dec	r5
    2e26:	f8 cf       	rjmp	.-16     	; 0x2e18 <vfprintf+0x33e>
    2e28:	aa 94       	dec	r10
    2e2a:	f4 01       	movw	r30, r8
    2e2c:	ea 0d       	add	r30, r10
    2e2e:	f1 1d       	adc	r31, r1
    2e30:	80 81       	ld	r24, Z
    2e32:	b7 01       	movw	r22, r14
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	4b d0       	rcall	.+150    	; 0x2ece <fputc>
    2e38:	a1 10       	cpse	r10, r1
    2e3a:	f6 cf       	rjmp	.-20     	; 0x2e28 <vfprintf+0x34e>
    2e3c:	33 20       	and	r3, r3
    2e3e:	09 f4       	brne	.+2      	; 0x2e42 <vfprintf+0x368>
    2e40:	5d ce       	rjmp	.-838    	; 0x2afc <vfprintf+0x22>
    2e42:	b7 01       	movw	r22, r14
    2e44:	80 e2       	ldi	r24, 0x20	; 32
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	42 d0       	rcall	.+132    	; 0x2ece <fputc>
    2e4a:	3a 94       	dec	r3
    2e4c:	f7 cf       	rjmp	.-18     	; 0x2e3c <vfprintf+0x362>
    2e4e:	f7 01       	movw	r30, r14
    2e50:	86 81       	ldd	r24, Z+6	; 0x06
    2e52:	97 81       	ldd	r25, Z+7	; 0x07
    2e54:	02 c0       	rjmp	.+4      	; 0x2e5a <vfprintf+0x380>
    2e56:	8f ef       	ldi	r24, 0xFF	; 255
    2e58:	9f ef       	ldi	r25, 0xFF	; 255
    2e5a:	2c 96       	adiw	r28, 0x0c	; 12
    2e5c:	e2 e1       	ldi	r30, 0x12	; 18
    2e5e:	e3 c0       	rjmp	.+454    	; 0x3026 <__epilogue_restores__>

00002e60 <calloc>:
    2e60:	0f 93       	push	r16
    2e62:	1f 93       	push	r17
    2e64:	cf 93       	push	r28
    2e66:	df 93       	push	r29
    2e68:	86 9f       	mul	r24, r22
    2e6a:	80 01       	movw	r16, r0
    2e6c:	87 9f       	mul	r24, r23
    2e6e:	10 0d       	add	r17, r0
    2e70:	96 9f       	mul	r25, r22
    2e72:	10 0d       	add	r17, r0
    2e74:	11 24       	eor	r1, r1
    2e76:	c8 01       	movw	r24, r16
    2e78:	5d dc       	rcall	.-1862   	; 0x2734 <malloc>
    2e7a:	ec 01       	movw	r28, r24
    2e7c:	00 97       	sbiw	r24, 0x00	; 0
    2e7e:	21 f0       	breq	.+8      	; 0x2e88 <calloc+0x28>
    2e80:	a8 01       	movw	r20, r16
    2e82:	60 e0       	ldi	r22, 0x00	; 0
    2e84:	70 e0       	ldi	r23, 0x00	; 0
    2e86:	11 d0       	rcall	.+34     	; 0x2eaa <memset>
    2e88:	ce 01       	movw	r24, r28
    2e8a:	df 91       	pop	r29
    2e8c:	cf 91       	pop	r28
    2e8e:	1f 91       	pop	r17
    2e90:	0f 91       	pop	r16
    2e92:	08 95       	ret

00002e94 <strnlen_P>:
    2e94:	fc 01       	movw	r30, r24
    2e96:	05 90       	lpm	r0, Z+
    2e98:	61 50       	subi	r22, 0x01	; 1
    2e9a:	70 40       	sbci	r23, 0x00	; 0
    2e9c:	01 10       	cpse	r0, r1
    2e9e:	d8 f7       	brcc	.-10     	; 0x2e96 <strnlen_P+0x2>
    2ea0:	80 95       	com	r24
    2ea2:	90 95       	com	r25
    2ea4:	8e 0f       	add	r24, r30
    2ea6:	9f 1f       	adc	r25, r31
    2ea8:	08 95       	ret

00002eaa <memset>:
    2eaa:	dc 01       	movw	r26, r24
    2eac:	01 c0       	rjmp	.+2      	; 0x2eb0 <memset+0x6>
    2eae:	6d 93       	st	X+, r22
    2eb0:	41 50       	subi	r20, 0x01	; 1
    2eb2:	50 40       	sbci	r21, 0x00	; 0
    2eb4:	e0 f7       	brcc	.-8      	; 0x2eae <memset+0x4>
    2eb6:	08 95       	ret

00002eb8 <strnlen>:
    2eb8:	fc 01       	movw	r30, r24
    2eba:	61 50       	subi	r22, 0x01	; 1
    2ebc:	70 40       	sbci	r23, 0x00	; 0
    2ebe:	01 90       	ld	r0, Z+
    2ec0:	01 10       	cpse	r0, r1
    2ec2:	d8 f7       	brcc	.-10     	; 0x2eba <strnlen+0x2>
    2ec4:	80 95       	com	r24
    2ec6:	90 95       	com	r25
    2ec8:	8e 0f       	add	r24, r30
    2eca:	9f 1f       	adc	r25, r31
    2ecc:	08 95       	ret

00002ece <fputc>:
    2ece:	0f 93       	push	r16
    2ed0:	1f 93       	push	r17
    2ed2:	cf 93       	push	r28
    2ed4:	df 93       	push	r29
    2ed6:	18 2f       	mov	r17, r24
    2ed8:	09 2f       	mov	r16, r25
    2eda:	eb 01       	movw	r28, r22
    2edc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ede:	81 fd       	sbrc	r24, 1
    2ee0:	03 c0       	rjmp	.+6      	; 0x2ee8 <fputc+0x1a>
    2ee2:	8f ef       	ldi	r24, 0xFF	; 255
    2ee4:	9f ef       	ldi	r25, 0xFF	; 255
    2ee6:	20 c0       	rjmp	.+64     	; 0x2f28 <fputc+0x5a>
    2ee8:	82 ff       	sbrs	r24, 2
    2eea:	10 c0       	rjmp	.+32     	; 0x2f0c <fputc+0x3e>
    2eec:	4e 81       	ldd	r20, Y+6	; 0x06
    2eee:	5f 81       	ldd	r21, Y+7	; 0x07
    2ef0:	2c 81       	ldd	r18, Y+4	; 0x04
    2ef2:	3d 81       	ldd	r19, Y+5	; 0x05
    2ef4:	42 17       	cp	r20, r18
    2ef6:	53 07       	cpc	r21, r19
    2ef8:	7c f4       	brge	.+30     	; 0x2f18 <fputc+0x4a>
    2efa:	e8 81       	ld	r30, Y
    2efc:	f9 81       	ldd	r31, Y+1	; 0x01
    2efe:	9f 01       	movw	r18, r30
    2f00:	2f 5f       	subi	r18, 0xFF	; 255
    2f02:	3f 4f       	sbci	r19, 0xFF	; 255
    2f04:	39 83       	std	Y+1, r19	; 0x01
    2f06:	28 83       	st	Y, r18
    2f08:	10 83       	st	Z, r17
    2f0a:	06 c0       	rjmp	.+12     	; 0x2f18 <fputc+0x4a>
    2f0c:	e8 85       	ldd	r30, Y+8	; 0x08
    2f0e:	f9 85       	ldd	r31, Y+9	; 0x09
    2f10:	81 2f       	mov	r24, r17
    2f12:	09 95       	icall
    2f14:	89 2b       	or	r24, r25
    2f16:	29 f7       	brne	.-54     	; 0x2ee2 <fputc+0x14>
    2f18:	2e 81       	ldd	r18, Y+6	; 0x06
    2f1a:	3f 81       	ldd	r19, Y+7	; 0x07
    2f1c:	2f 5f       	subi	r18, 0xFF	; 255
    2f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f20:	3f 83       	std	Y+7, r19	; 0x07
    2f22:	2e 83       	std	Y+6, r18	; 0x06
    2f24:	81 2f       	mov	r24, r17
    2f26:	90 2f       	mov	r25, r16
    2f28:	df 91       	pop	r29
    2f2a:	cf 91       	pop	r28
    2f2c:	1f 91       	pop	r17
    2f2e:	0f 91       	pop	r16
    2f30:	08 95       	ret

00002f32 <__ultoa_invert>:
    2f32:	fa 01       	movw	r30, r20
    2f34:	aa 27       	eor	r26, r26
    2f36:	28 30       	cpi	r18, 0x08	; 8
    2f38:	51 f1       	breq	.+84     	; 0x2f8e <__ultoa_invert+0x5c>
    2f3a:	20 31       	cpi	r18, 0x10	; 16
    2f3c:	81 f1       	breq	.+96     	; 0x2f9e <__ultoa_invert+0x6c>
    2f3e:	e8 94       	clt
    2f40:	6f 93       	push	r22
    2f42:	6e 7f       	andi	r22, 0xFE	; 254
    2f44:	6e 5f       	subi	r22, 0xFE	; 254
    2f46:	7f 4f       	sbci	r23, 0xFF	; 255
    2f48:	8f 4f       	sbci	r24, 0xFF	; 255
    2f4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f4c:	af 4f       	sbci	r26, 0xFF	; 255
    2f4e:	b1 e0       	ldi	r27, 0x01	; 1
    2f50:	3e d0       	rcall	.+124    	; 0x2fce <__ultoa_invert+0x9c>
    2f52:	b4 e0       	ldi	r27, 0x04	; 4
    2f54:	3c d0       	rcall	.+120    	; 0x2fce <__ultoa_invert+0x9c>
    2f56:	67 0f       	add	r22, r23
    2f58:	78 1f       	adc	r23, r24
    2f5a:	89 1f       	adc	r24, r25
    2f5c:	9a 1f       	adc	r25, r26
    2f5e:	a1 1d       	adc	r26, r1
    2f60:	68 0f       	add	r22, r24
    2f62:	79 1f       	adc	r23, r25
    2f64:	8a 1f       	adc	r24, r26
    2f66:	91 1d       	adc	r25, r1
    2f68:	a1 1d       	adc	r26, r1
    2f6a:	6a 0f       	add	r22, r26
    2f6c:	71 1d       	adc	r23, r1
    2f6e:	81 1d       	adc	r24, r1
    2f70:	91 1d       	adc	r25, r1
    2f72:	a1 1d       	adc	r26, r1
    2f74:	20 d0       	rcall	.+64     	; 0x2fb6 <__ultoa_invert+0x84>
    2f76:	09 f4       	brne	.+2      	; 0x2f7a <__ultoa_invert+0x48>
    2f78:	68 94       	set
    2f7a:	3f 91       	pop	r19
    2f7c:	2a e0       	ldi	r18, 0x0A	; 10
    2f7e:	26 9f       	mul	r18, r22
    2f80:	11 24       	eor	r1, r1
    2f82:	30 19       	sub	r19, r0
    2f84:	30 5d       	subi	r19, 0xD0	; 208
    2f86:	31 93       	st	Z+, r19
    2f88:	de f6       	brtc	.-74     	; 0x2f40 <__ultoa_invert+0xe>
    2f8a:	cf 01       	movw	r24, r30
    2f8c:	08 95       	ret
    2f8e:	46 2f       	mov	r20, r22
    2f90:	47 70       	andi	r20, 0x07	; 7
    2f92:	40 5d       	subi	r20, 0xD0	; 208
    2f94:	41 93       	st	Z+, r20
    2f96:	b3 e0       	ldi	r27, 0x03	; 3
    2f98:	0f d0       	rcall	.+30     	; 0x2fb8 <__ultoa_invert+0x86>
    2f9a:	c9 f7       	brne	.-14     	; 0x2f8e <__ultoa_invert+0x5c>
    2f9c:	f6 cf       	rjmp	.-20     	; 0x2f8a <__ultoa_invert+0x58>
    2f9e:	46 2f       	mov	r20, r22
    2fa0:	4f 70       	andi	r20, 0x0F	; 15
    2fa2:	40 5d       	subi	r20, 0xD0	; 208
    2fa4:	4a 33       	cpi	r20, 0x3A	; 58
    2fa6:	18 f0       	brcs	.+6      	; 0x2fae <__ultoa_invert+0x7c>
    2fa8:	49 5d       	subi	r20, 0xD9	; 217
    2faa:	31 fd       	sbrc	r19, 1
    2fac:	40 52       	subi	r20, 0x20	; 32
    2fae:	41 93       	st	Z+, r20
    2fb0:	02 d0       	rcall	.+4      	; 0x2fb6 <__ultoa_invert+0x84>
    2fb2:	a9 f7       	brne	.-22     	; 0x2f9e <__ultoa_invert+0x6c>
    2fb4:	ea cf       	rjmp	.-44     	; 0x2f8a <__ultoa_invert+0x58>
    2fb6:	b4 e0       	ldi	r27, 0x04	; 4
    2fb8:	a6 95       	lsr	r26
    2fba:	97 95       	ror	r25
    2fbc:	87 95       	ror	r24
    2fbe:	77 95       	ror	r23
    2fc0:	67 95       	ror	r22
    2fc2:	ba 95       	dec	r27
    2fc4:	c9 f7       	brne	.-14     	; 0x2fb8 <__ultoa_invert+0x86>
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	61 05       	cpc	r22, r1
    2fca:	71 05       	cpc	r23, r1
    2fcc:	08 95       	ret
    2fce:	9b 01       	movw	r18, r22
    2fd0:	ac 01       	movw	r20, r24
    2fd2:	0a 2e       	mov	r0, r26
    2fd4:	06 94       	lsr	r0
    2fd6:	57 95       	ror	r21
    2fd8:	47 95       	ror	r20
    2fda:	37 95       	ror	r19
    2fdc:	27 95       	ror	r18
    2fde:	ba 95       	dec	r27
    2fe0:	c9 f7       	brne	.-14     	; 0x2fd4 <__ultoa_invert+0xa2>
    2fe2:	62 0f       	add	r22, r18
    2fe4:	73 1f       	adc	r23, r19
    2fe6:	84 1f       	adc	r24, r20
    2fe8:	95 1f       	adc	r25, r21
    2fea:	a0 1d       	adc	r26, r0
    2fec:	08 95       	ret

00002fee <__prologue_saves__>:
    2fee:	2f 92       	push	r2
    2ff0:	3f 92       	push	r3
    2ff2:	4f 92       	push	r4
    2ff4:	5f 92       	push	r5
    2ff6:	6f 92       	push	r6
    2ff8:	7f 92       	push	r7
    2ffa:	8f 92       	push	r8
    2ffc:	9f 92       	push	r9
    2ffe:	af 92       	push	r10
    3000:	bf 92       	push	r11
    3002:	cf 92       	push	r12
    3004:	df 92       	push	r13
    3006:	ef 92       	push	r14
    3008:	ff 92       	push	r15
    300a:	0f 93       	push	r16
    300c:	1f 93       	push	r17
    300e:	cf 93       	push	r28
    3010:	df 93       	push	r29
    3012:	cd b7       	in	r28, 0x3d	; 61
    3014:	de b7       	in	r29, 0x3e	; 62
    3016:	ca 1b       	sub	r28, r26
    3018:	db 0b       	sbc	r29, r27
    301a:	0f b6       	in	r0, 0x3f	; 63
    301c:	f8 94       	cli
    301e:	de bf       	out	0x3e, r29	; 62
    3020:	0f be       	out	0x3f, r0	; 63
    3022:	cd bf       	out	0x3d, r28	; 61
    3024:	09 94       	ijmp

00003026 <__epilogue_restores__>:
    3026:	2a 88       	ldd	r2, Y+18	; 0x12
    3028:	39 88       	ldd	r3, Y+17	; 0x11
    302a:	48 88       	ldd	r4, Y+16	; 0x10
    302c:	5f 84       	ldd	r5, Y+15	; 0x0f
    302e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3030:	7d 84       	ldd	r7, Y+13	; 0x0d
    3032:	8c 84       	ldd	r8, Y+12	; 0x0c
    3034:	9b 84       	ldd	r9, Y+11	; 0x0b
    3036:	aa 84       	ldd	r10, Y+10	; 0x0a
    3038:	b9 84       	ldd	r11, Y+9	; 0x09
    303a:	c8 84       	ldd	r12, Y+8	; 0x08
    303c:	df 80       	ldd	r13, Y+7	; 0x07
    303e:	ee 80       	ldd	r14, Y+6	; 0x06
    3040:	fd 80       	ldd	r15, Y+5	; 0x05
    3042:	0c 81       	ldd	r16, Y+4	; 0x04
    3044:	1b 81       	ldd	r17, Y+3	; 0x03
    3046:	aa 81       	ldd	r26, Y+2	; 0x02
    3048:	b9 81       	ldd	r27, Y+1	; 0x01
    304a:	ce 0f       	add	r28, r30
    304c:	d1 1d       	adc	r29, r1
    304e:	0f b6       	in	r0, 0x3f	; 63
    3050:	f8 94       	cli
    3052:	de bf       	out	0x3e, r29	; 62
    3054:	0f be       	out	0x3f, r0	; 63
    3056:	cd bf       	out	0x3d, r28	; 61
    3058:	ed 01       	movw	r28, r26
    305a:	08 95       	ret

0000305c <_exit>:
    305c:	f8 94       	cli

0000305e <__stop_program>:
    305e:	ff cf       	rjmp	.-2      	; 0x305e <__stop_program>
