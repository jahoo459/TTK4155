
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000222  00800100  0000247a  0000250e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000247a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000055  00800322  00800322  00002730  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002730  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000350  00000000  00000000  0000278c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000049f6  00000000  00000000  00002adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001470  00000000  00000000  000074d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b37  00000000  00000000  00008942  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000888  00000000  00000000  0000a47c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001003  00000000  00000000  0000ad04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000023dc  00000000  00000000  0000bd07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000410  00000000  00000000  0000e0e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	32 c2       	rjmp	.+1124   	; 0x46a <__vector_1>
       6:	00 00       	nop
       8:	3f c2       	rjmp	.+1150   	; 0x488 <__vector_2>
       a:	00 00       	nop
       c:	4c c2       	rjmp	.+1176   	; 0x4a6 <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <Game_play+0x106>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ea e7       	ldi	r30, 0x7A	; 122
     37c:	f4 e2       	ldi	r31, 0x24	; 36
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a2 32       	cpi	r26, 0x22	; 34
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a2 e2       	ldi	r26, 0x22	; 34
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a7 37       	cpi	r26, 0x77	; 119
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	d4 d0       	rcall	.+424    	; 0x544 <main>
     39c:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
			retrieval_errors++;
		}
	}

	//printf("SRAM test completed with\n %4d errors in write phase and\n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	2f 93       	push	r18
     3ae:	3f 93       	push	r19
     3b0:	4f 93       	push	r20
     3b2:	5f 93       	push	r21
     3b4:	6f 93       	push	r22
     3b6:	7f 93       	push	r23
     3b8:	8f 93       	push	r24
     3ba:	9f 93       	push	r25
     3bc:	af 93       	push	r26
     3be:	bf 93       	push	r27
     3c0:	ef 93       	push	r30
     3c2:	ff 93       	push	r31
     3c4:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <uartReceive>
     3c8:	80 93 52 03 	sts	0x0352, r24
     3cc:	90 91 2a 03 	lds	r25, 0x032A
     3d0:	99 23       	and	r25, r25
     3d2:	f9 f0       	breq	.+62     	; 0x412 <__vector_19+0x70>
     3d4:	90 91 29 03 	lds	r25, 0x0329
     3d8:	91 30       	cpi	r25, 0x01	; 1
     3da:	61 f0       	breq	.+24     	; 0x3f4 <__vector_19+0x52>
     3dc:	18 f0       	brcs	.+6      	; 0x3e4 <__vector_19+0x42>
     3de:	92 30       	cpi	r25, 0x02	; 2
     3e0:	89 f0       	breq	.+34     	; 0x404 <__vector_19+0x62>
     3e2:	17 c0       	rjmp	.+46     	; 0x412 <__vector_19+0x70>
     3e4:	80 93 4f 03 	sts	0x034F, r24
     3e8:	10 92 2a 03 	sts	0x032A, r1
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	90 93 28 03 	sts	0x0328, r25
     3f2:	0f c0       	rjmp	.+30     	; 0x412 <__vector_19+0x70>
     3f4:	80 93 50 03 	sts	0x0350, r24
     3f8:	10 92 2a 03 	sts	0x032A, r1
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	90 93 28 03 	sts	0x0328, r25
     402:	07 c0       	rjmp	.+14     	; 0x412 <__vector_19+0x70>
     404:	80 93 51 03 	sts	0x0351, r24
     408:	10 92 2a 03 	sts	0x032A, r1
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	90 93 28 03 	sts	0x0328, r25
     412:	8f 3f       	cpi	r24, 0xFF	; 255
     414:	31 f4       	brne	.+12     	; 0x422 <__vector_19+0x80>
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	80 93 2a 03 	sts	0x032A, r24
     41c:	10 92 29 03 	sts	0x0329, r1
     420:	10 c0       	rjmp	.+32     	; 0x442 <__vector_19+0xa0>
     422:	8e 3f       	cpi	r24, 0xFE	; 254
     424:	31 f4       	brne	.+12     	; 0x432 <__vector_19+0x90>
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	80 93 2a 03 	sts	0x032A, r24
     42c:	80 93 29 03 	sts	0x0329, r24
     430:	08 c0       	rjmp	.+16     	; 0x442 <__vector_19+0xa0>
     432:	8d 3f       	cpi	r24, 0xFD	; 253
     434:	31 f4       	brne	.+12     	; 0x442 <__vector_19+0xa0>
     436:	81 e0       	ldi	r24, 0x01	; 1
     438:	80 93 2a 03 	sts	0x032A, r24
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	80 93 29 03 	sts	0x0329, r24
     442:	81 e0       	ldi	r24, 0x01	; 1
     444:	80 93 2b 03 	sts	0x032B, r24
     448:	ff 91       	pop	r31
     44a:	ef 91       	pop	r30
     44c:	bf 91       	pop	r27
     44e:	af 91       	pop	r26
     450:	9f 91       	pop	r25
     452:	8f 91       	pop	r24
     454:	7f 91       	pop	r23
     456:	6f 91       	pop	r22
     458:	5f 91       	pop	r21
     45a:	4f 91       	pop	r20
     45c:	3f 91       	pop	r19
     45e:	2f 91       	pop	r18
     460:	0f 90       	pop	r0
     462:	0f be       	out	0x3f, r0	; 63
     464:	0f 90       	pop	r0
     466:	1f 90       	pop	r1
     468:	18 95       	reti

0000046a <__vector_1>:
     46a:	1f 92       	push	r1
     46c:	0f 92       	push	r0
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	0f 92       	push	r0
     472:	11 24       	eor	r1, r1
     474:	8f 93       	push	r24
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	80 93 27 03 	sts	0x0327, r24
     47c:	8f 91       	pop	r24
     47e:	0f 90       	pop	r0
     480:	0f be       	out	0x3f, r0	; 63
     482:	0f 90       	pop	r0
     484:	1f 90       	pop	r1
     486:	18 95       	reti

00000488 <__vector_2>:
     488:	1f 92       	push	r1
     48a:	0f 92       	push	r0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	0f 92       	push	r0
     490:	11 24       	eor	r1, r1
     492:	8f 93       	push	r24
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	80 93 26 03 	sts	0x0326, r24
     49a:	8f 91       	pop	r24
     49c:	0f 90       	pop	r0
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	0f 90       	pop	r0
     4a2:	1f 90       	pop	r1
     4a4:	18 95       	reti

000004a6 <__vector_3>:
     4a6:	1f 92       	push	r1
     4a8:	0f 92       	push	r0
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	0f 92       	push	r0
     4ae:	11 24       	eor	r1, r1
     4b0:	8f 93       	push	r24
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	80 93 22 03 	sts	0x0322, r24
     4b8:	8f 91       	pop	r24
     4ba:	0f 90       	pop	r0
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	0f 90       	pop	r0
     4c0:	1f 90       	pop	r1
     4c2:	18 95       	reti

000004c4 <init>:

void init()
{
     4c4:	ef 92       	push	r14
     4c6:	ff 92       	push	r15
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
	// call initialization subroutines
	uartInit(BAUDRATE, FOSC, UBRR); printf("\n======================STARTUP==========================\n");
     4cc:	1f e1       	ldi	r17, 0x1F	; 31
     4ce:	e1 2e       	mov	r14, r17
     4d0:	f1 2c       	mov	r15, r1
     4d2:	00 e0       	ldi	r16, 0x00	; 0
     4d4:	10 e0       	ldi	r17, 0x00	; 0
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	4b e4       	ldi	r20, 0x4B	; 75
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	60 e8       	ldi	r22, 0x80	; 128
     4e0:	75 e2       	ldi	r23, 0x25	; 37
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <uartInit>
     4ea:	83 e4       	ldi	r24, 0x43	; 67
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	0e 94 2e 0f 	call	0x1e5c	; 0x1e5c <puts>
	enableXMEM(1);
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	0e d2       	rcall	.+1052   	; 0x912 <enableXMEM>
	SLI_init();
     4f6:	0e 94 c7 0c 	call	0x198e	; 0x198e <SLI_init>
	JOY_init();
     4fa:	9c d3       	rcall	.+1848   	; 0xc34 <JOY_init>
	OLED_init();
     4fc:	0e 94 41 0c 	call	0x1882	; 0x1882 <OLED_init>
	SPI_init();
     500:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <SPI_init>
	MCP2515_init();
     504:	8e d5       	rcall	.+2844   	; 0x1022 <MCP2515_init>
	CAN_init();
     506:	62 d0       	rcall	.+196    	; 0x5cc <CAN_init>
	
	// setup interrupts
	// init external interrupt INT0 on falling edge
	set_bit(GICR, INT0);
     508:	8b b7       	in	r24, 0x3b	; 59
     50a:	80 64       	ori	r24, 0x40	; 64
     50c:	8b bf       	out	0x3b, r24	; 59
	set_bit(MCUCR, ISC01);
     50e:	85 b7       	in	r24, 0x35	; 53
     510:	82 60       	ori	r24, 0x02	; 2
     512:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     514:	85 b7       	in	r24, 0x35	; 53
     516:	8e 7f       	andi	r24, 0xFE	; 254
     518:	85 bf       	out	0x35, r24	; 53
	
	// Pull-up on PD3
	clear_bit(DDRD, PD3);
     51a:	8b 98       	cbi	0x11, 3	; 17
	set_bit(PORTD, PD3);
     51c:	93 9a       	sbi	0x12, 3	; 18
	
	// init external interrupt INT1 on falling edge
	set_bit(GICR, INT1);
     51e:	8b b7       	in	r24, 0x3b	; 59
     520:	80 68       	ori	r24, 0x80	; 128
     522:	8b bf       	out	0x3b, r24	; 59
	set_bit(MCUCR, ISC11);
     524:	85 b7       	in	r24, 0x35	; 53
     526:	88 60       	ori	r24, 0x08	; 8
     528:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC10);
     52a:	85 b7       	in	r24, 0x35	; 53
     52c:	8b 7f       	andi	r24, 0xFB	; 251
     52e:	85 bf       	out	0x35, r24	; 53
	
		
	// PE2
	clear_bit(DDRE, PE2);
     530:	32 98       	cbi	0x06, 2	; 6
	clear_bit(PORTE, PE2);
     532:	3a 98       	cbi	0x07, 2	; 7
	// PB0
	clear_bit(DDRB, PB0);
     534:	b8 98       	cbi	0x17, 0	; 23
	clear_bit(PORTB, PB0);
     536:	c0 98       	cbi	0x18, 0	; 24

	// activate interrupts
	sei();
     538:	78 94       	sei

	// call SRAM Test
	//SRAM_test();
}
     53a:	1f 91       	pop	r17
     53c:	0f 91       	pop	r16
     53e:	ff 90       	pop	r15
     540:	ef 90       	pop	r14
     542:	08 95       	ret

00000544 <main>:
*/

int main(void)
{
	
	init();
     544:	bf df       	rcall	.-130    	; 0x4c4 <init>
	//activateMenuFlag = 1; // display the main menu
		
	
	

	uartMsg = 0;
     546:	10 92 52 03 	sts	0x0352, r1
	uartMouseSteeringMessage.Motor = 0;
     54a:	10 92 4f 03 	sts	0x034F, r1
	uartMouseSteeringMessage.Servo = 0;
     54e:	10 92 50 03 	sts	0x0350, r1
	uartMouseSteeringMessage.Button = 0;
     552:	10 92 51 03 	sts	0x0351, r1
// 		CAN_sendMessage(&message2send, 0);
// 		_delay_ms(50);

		if(activateMenuFlag && menuAlreadyBuiltFlag == 0)
		{
			activeState = MENU;
     556:	11 e0       	ldi	r17, 0x01	; 1
			MENU_activate(&activeState, &inputMode);

			menuAlreadyBuiltFlag = 1;
     558:	c1 e0       	ldi	r28, 0x01	; 1
     55a:	d0 e0       	ldi	r29, 0x00	; 0
		
		if(activeState == GAME)
		{
			Game_init();
			Game_play(&SPIreceivedFlag, &updateCmdDispFlag, &uartMouseSteeringMessage, &inputMode);
			activeState = IDLE;
     55c:	02 e0       	ldi	r16, 0x02	; 2
// 		message2send.data[2] = ButtonRight;
// 		
// 		CAN_sendMessage(&message2send, 0);
// 		_delay_ms(50);

		if(activateMenuFlag && menuAlreadyBuiltFlag == 0)
     55e:	80 91 26 03 	lds	r24, 0x0326
     562:	88 23       	and	r24, r24
     564:	99 f0       	breq	.+38     	; 0x58c <main+0x48>
     566:	80 91 23 03 	lds	r24, 0x0323
     56a:	90 91 24 03 	lds	r25, 0x0324
     56e:	89 2b       	or	r24, r25
     570:	69 f4       	brne	.+26     	; 0x58c <main+0x48>
		{
			activeState = MENU;
     572:	10 93 08 01 	sts	0x0108, r17
			MENU_activate(&activeState, &inputMode);
     576:	65 e2       	ldi	r22, 0x25	; 37
     578:	73 e0       	ldi	r23, 0x03	; 3
     57a:	88 e0       	ldi	r24, 0x08	; 8
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	bb d7       	rcall	.+3958   	; 0x14f6 <MENU_activate>

			menuAlreadyBuiltFlag = 1;
     580:	d0 93 24 03 	sts	0x0324, r29
     584:	c0 93 23 03 	sts	0x0323, r28
			activateMenuFlag = 0;
     588:	10 92 26 03 	sts	0x0326, r1
		}

		if(activateMenuFlag && menuAlreadyBuiltFlag == 1)
     58c:	80 91 26 03 	lds	r24, 0x0326
     590:	88 23       	and	r24, r24
     592:	59 f0       	breq	.+22     	; 0x5aa <main+0x66>
     594:	80 91 23 03 	lds	r24, 0x0323
     598:	90 91 24 03 	lds	r25, 0x0324
     59c:	01 97       	sbiw	r24, 0x01	; 1
     59e:	29 f4       	brne	.+10     	; 0x5aa <main+0x66>
		{
			activeState = MENU;
     5a0:	10 93 08 01 	sts	0x0108, r17
			MENU_reactivate();	
     5a4:	50 d7       	rcall	.+3744   	; 0x1446 <MENU_reactivate>
			activateMenuFlag = 0;
     5a6:	10 92 26 03 	sts	0x0326, r1
// 			OLED_printString(str);
// 				
// 			updateCmdDispFlag = 0;
// 		}
		
		if(activeState == GAME)
     5aa:	80 91 08 01 	lds	r24, 0x0108
     5ae:	81 11       	cpse	r24, r1
     5b0:	d6 cf       	rjmp	.-84     	; 0x55e <main+0x1a>
		{
			Game_init();
     5b2:	c1 d1       	rcall	.+898    	; 0x936 <Game_init>
			Game_play(&SPIreceivedFlag, &updateCmdDispFlag, &uartMouseSteeringMessage, &inputMode);
     5b4:	25 e2       	ldi	r18, 0x25	; 37
     5b6:	33 e0       	ldi	r19, 0x03	; 3
     5b8:	4f e4       	ldi	r20, 0x4F	; 79
     5ba:	53 e0       	ldi	r21, 0x03	; 3
     5bc:	68 e2       	ldi	r22, 0x28	; 40
     5be:	73 e0       	ldi	r23, 0x03	; 3
     5c0:	82 e2       	ldi	r24, 0x22	; 34
     5c2:	93 e0       	ldi	r25, 0x03	; 3
     5c4:	3b d2       	rcall	.+1142   	; 0xa3c <Game_play>
			activeState = IDLE;
     5c6:	00 93 08 01 	sts	0x0108, r16
     5ca:	c9 cf       	rjmp	.-110    	; 0x55e <main+0x1a>

000005cc <CAN_init>:
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
     5d4:	43 e0       	ldi	r20, 0x03	; 3
     5d6:	6b e2       	ldi	r22, 0x2B	; 43
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	2e d5       	rcall	.+2652   	; 0x103a <MCP2515_write>
     5de:	40 e6       	ldi	r20, 0x60	; 96
     5e0:	60 e6       	ldi	r22, 0x60	; 96
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	29 d5       	rcall	.+2642   	; 0x103a <MCP2515_write>
     5e8:	20 e0       	ldi	r18, 0x00	; 0
     5ea:	40 e8       	ldi	r20, 0x80	; 128
     5ec:	6f e0       	ldi	r22, 0x0F	; 15
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	36 d5       	rcall	.+2668   	; 0x1060 <MCP2515_bitModify>
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <CAN_sendMessage>:
     5fa:	cf 93       	push	r28
     5fc:	df 93       	push	r29
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	27 97       	sbiw	r28, 0x07	; 7
     604:	0f b6       	in	r0, 0x3f	; 63
     606:	f8 94       	cli
     608:	de bf       	out	0x3e, r29	; 62
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	cd bf       	out	0x3d, r28	; 61
     60e:	9e 83       	std	Y+6, r25	; 0x06
     610:	8d 83       	std	Y+5, r24	; 0x05
     612:	6f 83       	std	Y+7, r22	; 0x07
     614:	8f 81       	ldd	r24, Y+7	; 0x07
     616:	88 2f       	mov	r24, r24
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	00 97       	sbiw	r24, 0x00	; 0
     61c:	09 f0       	breq	.+2      	; 0x620 <CAN_sendMessage+0x26>
     61e:	4d c0       	rjmp	.+154    	; 0x6ba <CAN_sendMessage+0xc0>
     620:	8d 81       	ldd	r24, Y+5	; 0x05
     622:	9e 81       	ldd	r25, Y+6	; 0x06
     624:	fc 01       	movw	r30, r24
     626:	80 81       	ld	r24, Z
     628:	91 81       	ldd	r25, Z+1	; 0x01
     62a:	9c 83       	std	Y+4, r25	; 0x04
     62c:	8b 83       	std	Y+3, r24	; 0x03
     62e:	8b 81       	ldd	r24, Y+3	; 0x03
     630:	82 95       	swap	r24
     632:	88 0f       	add	r24, r24
     634:	80 7e       	andi	r24, 0xE0	; 224
     636:	48 2f       	mov	r20, r24
     638:	62 e3       	ldi	r22, 0x32	; 50
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	fd d4       	rcall	.+2554   	; 0x103a <MCP2515_write>
     640:	8b 81       	ldd	r24, Y+3	; 0x03
     642:	9c 81       	ldd	r25, Y+4	; 0x04
     644:	96 95       	lsr	r25
     646:	87 95       	ror	r24
     648:	96 95       	lsr	r25
     64a:	87 95       	ror	r24
     64c:	96 95       	lsr	r25
     64e:	87 95       	ror	r24
     650:	48 2f       	mov	r20, r24
     652:	61 e3       	ldi	r22, 0x31	; 49
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	f0 d4       	rcall	.+2528   	; 0x103a <MCP2515_write>
     65a:	8d 81       	ldd	r24, Y+5	; 0x05
     65c:	9e 81       	ldd	r25, Y+6	; 0x06
     65e:	fc 01       	movw	r30, r24
     660:	82 81       	ldd	r24, Z+2	; 0x02
     662:	48 2f       	mov	r20, r24
     664:	65 e3       	ldi	r22, 0x35	; 53
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	e7 d4       	rcall	.+2510   	; 0x103a <MCP2515_write>
     66c:	86 e3       	ldi	r24, 0x36	; 54
     66e:	89 83       	std	Y+1, r24	; 0x01
     670:	1a 82       	std	Y+2, r1	; 0x02
     672:	15 c0       	rjmp	.+42     	; 0x69e <CAN_sendMessage+0xa4>
     674:	8a 81       	ldd	r24, Y+2	; 0x02
     676:	88 2f       	mov	r24, r24
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	2d 81       	ldd	r18, Y+5	; 0x05
     67c:	3e 81       	ldd	r19, Y+6	; 0x06
     67e:	82 0f       	add	r24, r18
     680:	93 1f       	adc	r25, r19
     682:	03 96       	adiw	r24, 0x03	; 3
     684:	fc 01       	movw	r30, r24
     686:	80 81       	ld	r24, Z
     688:	48 2f       	mov	r20, r24
     68a:	69 81       	ldd	r22, Y+1	; 0x01
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	d4 d4       	rcall	.+2472   	; 0x103a <MCP2515_write>
     692:	89 81       	ldd	r24, Y+1	; 0x01
     694:	8f 5f       	subi	r24, 0xFF	; 255
     696:	89 83       	std	Y+1, r24	; 0x01
     698:	8a 81       	ldd	r24, Y+2	; 0x02
     69a:	8f 5f       	subi	r24, 0xFF	; 255
     69c:	8a 83       	std	Y+2, r24	; 0x02
     69e:	8d 81       	ldd	r24, Y+5	; 0x05
     6a0:	9e 81       	ldd	r25, Y+6	; 0x06
     6a2:	fc 01       	movw	r30, r24
     6a4:	92 81       	ldd	r25, Z+2	; 0x02
     6a6:	8a 81       	ldd	r24, Y+2	; 0x02
     6a8:	89 17       	cp	r24, r25
     6aa:	20 f3       	brcs	.-56     	; 0x674 <CAN_sendMessage+0x7a>
     6ac:	2f ef       	ldi	r18, 0xFF	; 255
     6ae:	48 e0       	ldi	r20, 0x08	; 8
     6b0:	60 e3       	ldi	r22, 0x30	; 48
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	d4 d4       	rcall	.+2472   	; 0x1060 <MCP2515_bitModify>
     6b8:	00 00       	nop
     6ba:	27 96       	adiw	r28, 0x07	; 7
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	de bf       	out	0x3e, r29	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	cd bf       	out	0x3d, r28	; 61
     6c6:	df 91       	pop	r29
     6c8:	cf 91       	pop	r28
     6ca:	08 95       	ret

000006cc <CAN_receiveMessage>:
     6cc:	0f 93       	push	r16
     6ce:	1f 93       	push	r17
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	cd b7       	in	r28, 0x3d	; 61
     6d6:	de b7       	in	r29, 0x3e	; 62
     6d8:	61 97       	sbiw	r28, 0x11	; 17
     6da:	0f b6       	in	r0, 0x3f	; 63
     6dc:	f8 94       	cli
     6de:	de bf       	out	0x3e, r29	; 62
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	cd bf       	out	0x3d, r28	; 61
     6e4:	98 8b       	std	Y+16, r25	; 0x10
     6e6:	8f 87       	std	Y+15, r24	; 0x0f
     6e8:	69 8b       	std	Y+17, r22	; 0x11
     6ea:	89 89       	ldd	r24, Y+17	; 0x11
     6ec:	88 2f       	mov	r24, r24
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	82 30       	cpi	r24, 0x02	; 2
     6f2:	91 05       	cpc	r25, r1
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <CAN_receiveMessage+0x2c>
     6f6:	57 c0       	rjmp	.+174    	; 0x7a6 <CAN_receiveMessage+0xda>
     6f8:	83 30       	cpi	r24, 0x03	; 3
     6fa:	91 05       	cpc	r25, r1
     6fc:	21 f0       	breq	.+8      	; 0x706 <CAN_receiveMessage+0x3a>
     6fe:	81 30       	cpi	r24, 0x01	; 1
     700:	91 05       	cpc	r25, r1
     702:	09 f0       	breq	.+2      	; 0x706 <CAN_receiveMessage+0x3a>
     704:	9f c0       	rjmp	.+318    	; 0x844 <CAN_receiveMessage+0x178>
     706:	61 e6       	ldi	r22, 0x61	; 97
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	73 d4       	rcall	.+2278   	; 0xff4 <MCP2515_read>
     70e:	88 2f       	mov	r24, r24
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	9d 83       	std	Y+5, r25	; 0x05
     714:	8c 83       	std	Y+4, r24	; 0x04
     716:	8c 81       	ldd	r24, Y+4	; 0x04
     718:	9d 81       	ldd	r25, Y+5	; 0x05
     71a:	8c 01       	movw	r16, r24
     71c:	00 0f       	add	r16, r16
     71e:	11 1f       	adc	r17, r17
     720:	00 0f       	add	r16, r16
     722:	11 1f       	adc	r17, r17
     724:	00 0f       	add	r16, r16
     726:	11 1f       	adc	r17, r17
     728:	62 e6       	ldi	r22, 0x62	; 98
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	62 d4       	rcall	.+2244   	; 0xff4 <MCP2515_read>
     730:	82 95       	swap	r24
     732:	86 95       	lsr	r24
     734:	87 70       	andi	r24, 0x07	; 7
     736:	88 2f       	mov	r24, r24
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	80 2b       	or	r24, r16
     73c:	91 2b       	or	r25, r17
     73e:	9d 83       	std	Y+5, r25	; 0x05
     740:	8c 83       	std	Y+4, r24	; 0x04
     742:	65 e6       	ldi	r22, 0x65	; 101
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	55 d4       	rcall	.+2218   	; 0xff4 <MCP2515_read>
     74a:	8e 83       	std	Y+6, r24	; 0x06
     74c:	86 e6       	ldi	r24, 0x66	; 102
     74e:	89 83       	std	Y+1, r24	; 0x01
     750:	1a 82       	std	Y+2, r1	; 0x02
     752:	14 c0       	rjmp	.+40     	; 0x77c <CAN_receiveMessage+0xb0>
     754:	8a 81       	ldd	r24, Y+2	; 0x02
     756:	08 2f       	mov	r16, r24
     758:	10 e0       	ldi	r17, 0x00	; 0
     75a:	69 81       	ldd	r22, Y+1	; 0x01
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	49 d4       	rcall	.+2194   	; 0xff4 <MCP2515_read>
     762:	28 2f       	mov	r18, r24
     764:	ce 01       	movw	r24, r28
     766:	07 96       	adiw	r24, 0x07	; 7
     768:	80 0f       	add	r24, r16
     76a:	91 1f       	adc	r25, r17
     76c:	fc 01       	movw	r30, r24
     76e:	20 83       	st	Z, r18
     770:	89 81       	ldd	r24, Y+1	; 0x01
     772:	8f 5f       	subi	r24, 0xFF	; 255
     774:	89 83       	std	Y+1, r24	; 0x01
     776:	8a 81       	ldd	r24, Y+2	; 0x02
     778:	8f 5f       	subi	r24, 0xFF	; 255
     77a:	8a 83       	std	Y+2, r24	; 0x02
     77c:	9e 81       	ldd	r25, Y+6	; 0x06
     77e:	8a 81       	ldd	r24, Y+2	; 0x02
     780:	89 17       	cp	r24, r25
     782:	40 f3       	brcs	.-48     	; 0x754 <CAN_receiveMessage+0x88>
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	41 e0       	ldi	r20, 0x01	; 1
     788:	6c e2       	ldi	r22, 0x2C	; 44
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	68 d4       	rcall	.+2256   	; 0x1060 <MCP2515_bitModify>
     790:	8f 85       	ldd	r24, Y+15	; 0x0f
     792:	98 89       	ldd	r25, Y+16	; 0x10
     794:	2b e0       	ldi	r18, 0x0B	; 11
     796:	fe 01       	movw	r30, r28
     798:	34 96       	adiw	r30, 0x04	; 4
     79a:	dc 01       	movw	r26, r24
     79c:	01 90       	ld	r0, Z+
     79e:	0d 92       	st	X+, r0
     7a0:	2a 95       	dec	r18
     7a2:	e1 f7       	brne	.-8      	; 0x79c <CAN_receiveMessage+0xd0>
     7a4:	4f c0       	rjmp	.+158    	; 0x844 <CAN_receiveMessage+0x178>
     7a6:	61 e7       	ldi	r22, 0x71	; 113
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	23 d4       	rcall	.+2118   	; 0xff4 <MCP2515_read>
     7ae:	88 2f       	mov	r24, r24
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	9d 83       	std	Y+5, r25	; 0x05
     7b4:	8c 83       	std	Y+4, r24	; 0x04
     7b6:	8c 81       	ldd	r24, Y+4	; 0x04
     7b8:	9d 81       	ldd	r25, Y+5	; 0x05
     7ba:	8c 01       	movw	r16, r24
     7bc:	00 0f       	add	r16, r16
     7be:	11 1f       	adc	r17, r17
     7c0:	00 0f       	add	r16, r16
     7c2:	11 1f       	adc	r17, r17
     7c4:	00 0f       	add	r16, r16
     7c6:	11 1f       	adc	r17, r17
     7c8:	62 e7       	ldi	r22, 0x72	; 114
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	12 d4       	rcall	.+2084   	; 0xff4 <MCP2515_read>
     7d0:	82 95       	swap	r24
     7d2:	86 95       	lsr	r24
     7d4:	87 70       	andi	r24, 0x07	; 7
     7d6:	88 2f       	mov	r24, r24
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	80 2b       	or	r24, r16
     7dc:	91 2b       	or	r25, r17
     7de:	9d 83       	std	Y+5, r25	; 0x05
     7e0:	8c 83       	std	Y+4, r24	; 0x04
     7e2:	65 e7       	ldi	r22, 0x75	; 117
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	05 d4       	rcall	.+2058   	; 0xff4 <MCP2515_read>
     7ea:	8e 83       	std	Y+6, r24	; 0x06
     7ec:	86 e7       	ldi	r24, 0x76	; 118
     7ee:	89 83       	std	Y+1, r24	; 0x01
     7f0:	1b 82       	std	Y+3, r1	; 0x03
     7f2:	14 c0       	rjmp	.+40     	; 0x81c <CAN_receiveMessage+0x150>
     7f4:	8b 81       	ldd	r24, Y+3	; 0x03
     7f6:	08 2f       	mov	r16, r24
     7f8:	10 e0       	ldi	r17, 0x00	; 0
     7fa:	69 81       	ldd	r22, Y+1	; 0x01
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	f9 d3       	rcall	.+2034   	; 0xff4 <MCP2515_read>
     802:	28 2f       	mov	r18, r24
     804:	ce 01       	movw	r24, r28
     806:	07 96       	adiw	r24, 0x07	; 7
     808:	80 0f       	add	r24, r16
     80a:	91 1f       	adc	r25, r17
     80c:	fc 01       	movw	r30, r24
     80e:	20 83       	st	Z, r18
     810:	89 81       	ldd	r24, Y+1	; 0x01
     812:	8f 5f       	subi	r24, 0xFF	; 255
     814:	89 83       	std	Y+1, r24	; 0x01
     816:	8b 81       	ldd	r24, Y+3	; 0x03
     818:	8f 5f       	subi	r24, 0xFF	; 255
     81a:	8b 83       	std	Y+3, r24	; 0x03
     81c:	9e 81       	ldd	r25, Y+6	; 0x06
     81e:	8b 81       	ldd	r24, Y+3	; 0x03
     820:	89 17       	cp	r24, r25
     822:	40 f3       	brcs	.-48     	; 0x7f4 <CAN_receiveMessage+0x128>
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	42 e0       	ldi	r20, 0x02	; 2
     828:	6c e2       	ldi	r22, 0x2C	; 44
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	18 d4       	rcall	.+2096   	; 0x1060 <MCP2515_bitModify>
     830:	8f 85       	ldd	r24, Y+15	; 0x0f
     832:	98 89       	ldd	r25, Y+16	; 0x10
     834:	2b e0       	ldi	r18, 0x0B	; 11
     836:	fe 01       	movw	r30, r28
     838:	34 96       	adiw	r30, 0x04	; 4
     83a:	dc 01       	movw	r26, r24
     83c:	01 90       	ld	r0, Z+
     83e:	0d 92       	st	X+, r0
     840:	2a 95       	dec	r18
     842:	e1 f7       	brne	.-8      	; 0x83c <CAN_receiveMessage+0x170>
     844:	8f 85       	ldd	r24, Y+15	; 0x0f
     846:	98 89       	ldd	r25, Y+16	; 0x10
     848:	61 96       	adiw	r28, 0x11	; 17
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	08 95       	ret

0000085e <CAN_printMessage>:
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	00 d0       	rcall	.+0      	; 0x864 <CAN_printMessage+0x6>
     864:	1f 92       	push	r1
     866:	cd b7       	in	r28, 0x3d	; 61
     868:	de b7       	in	r29, 0x3e	; 62
     86a:	9b 83       	std	Y+3, r25	; 0x03
     86c:	8a 83       	std	Y+2, r24	; 0x02
     86e:	8a 81       	ldd	r24, Y+2	; 0x02
     870:	9b 81       	ldd	r25, Y+3	; 0x03
     872:	fc 01       	movw	r30, r24
     874:	82 81       	ldd	r24, Z+2	; 0x02
     876:	28 2f       	mov	r18, r24
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	8a 81       	ldd	r24, Y+2	; 0x02
     87c:	9b 81       	ldd	r25, Y+3	; 0x03
     87e:	fc 01       	movw	r30, r24
     880:	80 81       	ld	r24, Z
     882:	91 81       	ldd	r25, Z+1	; 0x01
     884:	43 2f       	mov	r20, r19
     886:	4f 93       	push	r20
     888:	2f 93       	push	r18
     88a:	29 2f       	mov	r18, r25
     88c:	2f 93       	push	r18
     88e:	8f 93       	push	r24
     890:	83 e1       	ldi	r24, 0x13	; 19
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	89 2f       	mov	r24, r25
     896:	8f 93       	push	r24
     898:	83 e1       	ldi	r24, 0x13	; 19
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	8f 93       	push	r24
     89e:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <printf>
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	0f 90       	pop	r0
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	0f 90       	pop	r0
     8ae:	19 82       	std	Y+1, r1	; 0x01
     8b0:	1f c0       	rjmp	.+62     	; 0x8f0 <CAN_printMessage+0x92>
     8b2:	89 81       	ldd	r24, Y+1	; 0x01
     8b4:	88 2f       	mov	r24, r24
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	2a 81       	ldd	r18, Y+2	; 0x02
     8ba:	3b 81       	ldd	r19, Y+3	; 0x03
     8bc:	82 0f       	add	r24, r18
     8be:	93 1f       	adc	r25, r19
     8c0:	03 96       	adiw	r24, 0x03	; 3
     8c2:	fc 01       	movw	r30, r24
     8c4:	80 81       	ld	r24, Z
     8c6:	88 2f       	mov	r24, r24
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	29 2f       	mov	r18, r25
     8cc:	2f 93       	push	r18
     8ce:	8f 93       	push	r24
     8d0:	8f e3       	ldi	r24, 0x3F	; 63
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	89 2f       	mov	r24, r25
     8d6:	8f 93       	push	r24
     8d8:	8f e3       	ldi	r24, 0x3F	; 63
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	8f 93       	push	r24
     8de:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <printf>
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	89 81       	ldd	r24, Y+1	; 0x01
     8ec:	8f 5f       	subi	r24, 0xFF	; 255
     8ee:	89 83       	std	Y+1, r24	; 0x01
     8f0:	8a 81       	ldd	r24, Y+2	; 0x02
     8f2:	9b 81       	ldd	r25, Y+3	; 0x03
     8f4:	fc 01       	movw	r30, r24
     8f6:	92 81       	ldd	r25, Z+2	; 0x02
     8f8:	89 81       	ldd	r24, Y+1	; 0x01
     8fa:	89 17       	cp	r24, r25
     8fc:	d0 f2       	brcs	.-76     	; 0x8b2 <CAN_printMessage+0x54>
     8fe:	8a e0       	ldi	r24, 0x0A	; 10
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <putchar>
     906:	0f 90       	pop	r0
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     912:	95 b7       	in	r25, 0x35	; 53
     914:	90 68       	ori	r25, 0x80	; 128
     916:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     918:	96 b7       	in	r25, 0x36	; 54
     91a:	98 60       	ori	r25, 0x08	; 8
     91c:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     91e:	88 23       	and	r24, r24
     920:	19 f0       	breq	.+6      	; 0x928 <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     922:	80 b7       	in	r24, 0x30	; 48
     924:	80 62       	ori	r24, 0x20	; 32
     926:	80 bf       	out	0x30, r24	; 48
     928:	08 95       	ret

0000092a <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     92a:	fc 01       	movw	r30, r24
     92c:	80 81       	ld	r24, Z
	return val;
}
     92e:	08 95       	ret

00000930 <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     930:	fc 01       	movw	r30, r24
     932:	60 83       	st	Z, r22
     934:	08 95       	ret

00000936 <Game_init>:
static uint8_t ButtonRight;

//UART_Message_t uartMouseSteeringMessage;

void Game_init()
{
     936:	0f 93       	push	r16
     938:	1f 93       	push	r17
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
	// declare score and lives
	score = 0;
     93e:	10 92 31 03 	sts	0x0331, r1
     942:	10 92 30 03 	sts	0x0330, r1
	lives = 3;
     946:	83 e0       	ldi	r24, 0x03	; 3
     948:	80 93 2f 03 	sts	0x032F, r24
	
	// write Title to Screen
	OLED_clear();
     94c:	7a d6       	rcall	.+3316   	; 0x1642 <OLED_clear>
     94e:	64 e0       	ldi	r22, 0x04	; 4
	OLED_goto(0,4);
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	58 d6       	rcall	.+3248   	; 0x1608 <OLED_goto>
     958:	8c e7       	ldi	r24, 0x7C	; 124
     95a:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("** Ping-Pong **");
     95c:	ab d6       	rcall	.+3414   	; 0x16b4 <OLED_printString>
     95e:	64 e1       	ldi	r22, 0x14	; 20
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	83 e0       	ldi	r24, 0x03	; 3
		
	// write to Screen
	OLED_goto(3,LIVES_POS-16);
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	50 d6       	rcall	.+3232   	; 0x1608 <OLED_goto>
     968:	8c e8       	ldi	r24, 0x8C	; 140
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	a3 d6       	rcall	.+3398   	; 0x16b4 <OLED_printString>
     96e:	6b e3       	ldi	r22, 0x3B	; 59
	OLED_printString("Lives");
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	48 d6       	rcall	.+3216   	; 0x1608 <OLED_goto>
	OLED_goto(3,SCORE_POS-16);
     978:	82 e9       	ldi	r24, 0x92	; 146
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	9b d6       	rcall	.+3382   	; 0x16b4 <OLED_printString>
     97e:	64 e2       	ldi	r22, 0x24	; 36
     980:	70 e0       	ldi	r23, 0x00	; 0
     982:	84 e0       	ldi	r24, 0x04	; 4
	OLED_printString("Score");
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	40 d6       	rcall	.+3200   	; 0x1608 <OLED_goto>
     988:	80 91 2f 03 	lds	r24, 0x032F
		
	// write Numbers
	OLED_goto(4, LIVES_POS);
     98c:	1f 92       	push	r1
     98e:	8f 93       	push	r24
     990:	08 e9       	ldi	r16, 0x98	; 152
     992:	11 e0       	ldi	r17, 0x01	; 1
     994:	1f 93       	push	r17
     996:	0f 93       	push	r16
	sprintf(str, "%d", lives);
     998:	c2 e3       	ldi	r28, 0x32	; 50
     99a:	d3 e0       	ldi	r29, 0x03	; 3
     99c:	df 93       	push	r29
     99e:	cf 93       	push	r28
     9a0:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <sprintf>
     9a4:	ce 01       	movw	r24, r28
     9a6:	86 d6       	rcall	.+3340   	; 0x16b4 <OLED_printString>
     9a8:	6b e4       	ldi	r22, 0x4B	; 75
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	84 e0       	ldi	r24, 0x04	; 4
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	2b d6       	rcall	.+3158   	; 0x1608 <OLED_goto>
     9b2:	80 91 31 03 	lds	r24, 0x0331
	OLED_printString(str);
     9b6:	8f 93       	push	r24
     9b8:	80 91 30 03 	lds	r24, 0x0330
	OLED_goto(4, SCORE_POS);
     9bc:	8f 93       	push	r24
     9be:	1f 93       	push	r17
     9c0:	0f 93       	push	r16
     9c2:	df 93       	push	r29
     9c4:	cf 93       	push	r28
	sprintf(str, "%d", score);
     9c6:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <sprintf>
     9ca:	ce 01       	movw	r24, r28
     9cc:	73 d6       	rcall	.+3302   	; 0x16b4 <OLED_printString>
     9ce:	8d b7       	in	r24, 0x3d	; 61
     9d0:	9e b7       	in	r25, 0x3e	; 62
     9d2:	0c 96       	adiw	r24, 0x0c	; 12
     9d4:	0f b6       	in	r0, 0x3f	; 63
     9d6:	f8 94       	cli
     9d8:	9e bf       	out	0x3e, r25	; 62
     9da:	0f be       	out	0x3f, r0	; 63
     9dc:	8d bf       	out	0x3d, r24	; 61
	OLED_printString(str);	
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	1f 91       	pop	r17
     9e4:	0f 91       	pop	r16
     9e6:	08 95       	ret

000009e8 <Game_updateLives>:
     9e8:	80 91 2f 03 	lds	r24, 0x032F
     9ec:	81 50       	subi	r24, 0x01	; 1
     9ee:	80 93 2f 03 	sts	0x032F, r24
     9f2:	64 e2       	ldi	r22, 0x24	; 36
}
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	84 e0       	ldi	r24, 0x04	; 4
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	06 d6       	rcall	.+3084   	; 0x1608 <OLED_goto>
     9fc:	80 91 2f 03 	lds	r24, 0x032F

void Game_updateLives()
{
	lives--;
	OLED_goto(4, LIVES_POS);
	sprintf(str, "%d", lives);
     a00:	1f 92       	push	r1
     a02:	8f 93       	push	r24
     a04:	88 e9       	ldi	r24, 0x98	; 152
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	9f 93       	push	r25
     a0a:	8f 93       	push	r24
     a0c:	82 e3       	ldi	r24, 0x32	; 50
     a0e:	93 e0       	ldi	r25, 0x03	; 3
     a10:	9f 93       	push	r25
     a12:	8f 93       	push	r24
     a14:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <sprintf>
     a18:	82 e3       	ldi	r24, 0x32	; 50
	OLED_printString(str);
     a1a:	93 e0       	ldi	r25, 0x03	; 3
     a1c:	4b d6       	rcall	.+3222   	; 0x16b4 <OLED_printString>
     a1e:	6e e1       	ldi	r22, 0x1E	; 30
     a20:	70 e0       	ldi	r23, 0x00	; 0
	
	OLED_goto(7, 30);
     a22:	87 e0       	ldi	r24, 0x07	; 7
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	f0 d5       	rcall	.+3040   	; 0x1608 <OLED_goto>
     a28:	8b e9       	ldi	r24, 0x9B	; 155
     a2a:	91 e0       	ldi	r25, 0x01	; 1
     a2c:	43 d6       	rcall	.+3206   	; 0x16b4 <OLED_printString>
	OLED_printString("Wait");
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	0f 90       	pop	r0
     a3a:	08 95       	ret

00000a3c <Game_play>:
     a3c:	2f 92       	push	r2
     a3e:	3f 92       	push	r3
     a40:	4f 92       	push	r4
     a42:	5f 92       	push	r5
}

void Game_play(uint8_t* SPIreceivedFlag, uint8_t* updateCmdDispFlag, UART_Message_t* uartMouseSteeringMessage, INPUT_MODE* inputMode)
{
     a44:	6f 92       	push	r6
     a46:	7f 92       	push	r7
     a48:	8f 92       	push	r8
     a4a:	9f 92       	push	r9
     a4c:	af 92       	push	r10
     a4e:	bf 92       	push	r11
     a50:	cf 92       	push	r12
     a52:	df 92       	push	r13
     a54:	ef 92       	push	r14
     a56:	ff 92       	push	r15
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
     a64:	a0 97       	sbiw	r28, 0x20	; 32
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	f8 94       	cli
     a6a:	de bf       	out	0x3e, r29	; 62
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	cd bf       	out	0x3d, r28	; 61
     a70:	8a 01       	movw	r16, r20
     a72:	79 01       	movw	r14, r18
		//
		 	//*updateCmdDispFlag = 0;
		//}

		// send Positions to Node 2
		message2send.id = 23;
     a74:	0f 2e       	mov	r0, r31
     a76:	fe e5       	ldi	r31, 0x5E	; 94
     a78:	8f 2e       	mov	r8, r31
     a7a:	f3 e0       	ldi	r31, 0x03	; 3
     a7c:	9f 2e       	mov	r9, r31
     a7e:	f0 2d       	mov	r31, r0
     a80:	0f 2e       	mov	r0, r31
     a82:	f7 e1       	ldi	r31, 0x17	; 23
     a84:	6f 2e       	mov	r6, r31
     a86:	71 2c       	mov	r7, r1
     a88:	f0 2d       	mov	r31, r0
     a8a:	38 2c       	mov	r3, r8
     a8c:	98 a2       	std	Y+32, r9	; 0x20
     a8e:	8f 8e       	std	Y+31, r8	; 0x1f
     a90:	43 2c       	mov	r4, r3
     a92:	1c 01       	movw	r2, r24
	OLED_printString("Wait");
}

void Game_play(uint8_t* SPIreceivedFlag, uint8_t* updateCmdDispFlag, UART_Message_t* uartMouseSteeringMessage, INPUT_MODE* inputMode)
{
	while(lives > 0)
     a94:	70 c0       	rjmp	.+224    	; 0xb76 <Game_play+0x13a>
	{
		// call for Joystick and Slider positions
		JoyPos = JOY_getPosition().X_abs;
     a96:	51 d2       	rcall	.+1186   	; 0xf3a <JOY_getPosition>
     a98:	29 83       	std	Y+1, r18	; 0x01
     a9a:	3a 83       	std	Y+2, r19	; 0x02
     a9c:	4b 83       	std	Y+3, r20	; 0x03
     a9e:	5c 83       	std	Y+4, r21	; 0x04
     aa0:	6d 83       	std	Y+5, r22	; 0x05
     aa2:	7e 83       	std	Y+6, r23	; 0x06
     aa4:	8f 83       	std	Y+7, r24	; 0x07
     aa6:	98 87       	std	Y+8, r25	; 0x08
     aa8:	20 93 2e 03 	sts	0x032E, r18
     aac:	ab d7       	rcall	.+3926   	; 0x1a04 <SLI_getPosition>
		SliPos = SLI_getPosition().R_per;
     aae:	80 93 2d 03 	sts	0x032D, r24
     ab2:	2a 9b       	sbis	0x05, 2	; 5
     ab4:	03 c0       	rjmp	.+6      	; 0xabc <Game_play+0x80>
		
		// Check for pushed Button
		if((PINE & (1<<PE2)))
     ab6:	50 92 2c 03 	sts	0x032C, r5
		{
			ButtonRight = 1;
     aba:	02 c0       	rjmp	.+4      	; 0xac0 <Game_play+0x84>
     abc:	10 92 2c 03 	sts	0x032C, r1
		}
		else
		{
			ButtonRight = 0;
     ac0:	ef 8d       	ldd	r30, Y+31	; 0x1f
     ac2:	f8 a1       	ldd	r31, Y+32	; 0x20
		//
		 	//*updateCmdDispFlag = 0;
		//}

		// send Positions to Node 2
		message2send.id = 23;
     ac4:	71 82       	std	Z+1, r7	; 0x01
     ac6:	60 82       	st	Z, r6
     ac8:	e0 e6       	ldi	r30, 0x60	; 96
     aca:	f3 e0       	ldi	r31, 0x03	; 3
		message2send.length = 7;
     acc:	80 82       	st	Z, r8
     ace:	90 91 2e 03 	lds	r25, 0x032E
		message2send.data[0] = JoyPos;
     ad2:	e1 e6       	ldi	r30, 0x61	; 97
     ad4:	f3 e0       	ldi	r31, 0x03	; 3
     ad6:	90 83       	st	Z, r25
     ad8:	e2 e6       	ldi	r30, 0x62	; 98
     ada:	f3 e0       	ldi	r31, 0x03	; 3
		message2send.data[1] = SliPos;
     adc:	80 83       	st	Z, r24
     ade:	80 91 2c 03 	lds	r24, 0x032C
		message2send.data[2] = ButtonRight;
     ae2:	e3 e6       	ldi	r30, 0x63	; 99
     ae4:	f3 e0       	ldi	r31, 0x03	; 3
     ae6:	80 83       	st	Z, r24
     ae8:	f8 01       	movw	r30, r16
     aea:	80 81       	ld	r24, Z
		message2send.data[3] = uartMouseSteeringMessage->Motor;
     aec:	e4 e6       	ldi	r30, 0x64	; 100
     aee:	f3 e0       	ldi	r31, 0x03	; 3
     af0:	80 83       	st	Z, r24
     af2:	f8 01       	movw	r30, r16
     af4:	81 81       	ldd	r24, Z+1	; 0x01
		message2send.data[4] = uartMouseSteeringMessage->Servo;
     af6:	f6 01       	movw	r30, r12
     af8:	80 83       	st	Z, r24
     afa:	f8 01       	movw	r30, r16
     afc:	82 81       	ldd	r24, Z+2	; 0x02
		message2send.data[5] = uartMouseSteeringMessage->Button;
     afe:	f5 01       	movw	r30, r10
     b00:	80 83       	st	Z, r24
     b02:	f7 01       	movw	r30, r14
     b04:	80 81       	ld	r24, Z
		message2send.data[6] = *inputMode;
     b06:	e7 e6       	ldi	r30, 0x67	; 103
     b08:	f3 e0       	ldi	r31, 0x03	; 3
     b0a:	80 83       	st	Z, r24
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	84 2d       	mov	r24, r4
// 		{
// 			message3send.data[0] = 2;
// 		}
// 		
		
		CAN_sendMessage(&message2send, 0);
     b10:	99 2d       	mov	r25, r9
     b12:	73 dd       	rcall	.-1306   	; 0x5fa <CAN_sendMessage>
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	90 ef       	ldi	r25, 0xF0	; 240
     b18:	01 97       	sbiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b1a:	f1 f7       	brne	.-4      	; 0xb18 <Game_play+0xdc>
     b1c:	f1 01       	movw	r30, r2
     b1e:	80 81       	ld	r24, Z
     b20:	88 23       	and	r24, r24
		_delay_ms(50);
		
		// CAN reception
		if(*SPIreceivedFlag)
     b22:	09 f4       	brne	.+2      	; 0xb26 <Game_play+0xea>
     b24:	3a c0       	rjmp	.+116    	; 0xb9a <Game_play+0x15e>
     b26:	6c e2       	ldi	r22, 0x2C	; 44
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	64 d2       	rcall	.+1224   	; 0xff4 <MCP2515_read>
		{
		
		 	uint8_t receiveBufferStatus;
		 	// check for message reception
		 	if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
     b2c:	83 70       	andi	r24, 0x03	; 3
     b2e:	19 f1       	breq	.+70     	; 0xb76 <Game_play+0x13a>
     b30:	68 2f       	mov	r22, r24
     b32:	ce 01       	movw	r24, r28
     b34:	44 96       	adiw	r24, 0x14	; 20
     b36:	ca dd       	rcall	.-1132   	; 0x6cc <CAN_receiveMessage>
		 	{
		 		struct can_message receivedMessage;
		 		receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     b38:	8b e0       	ldi	r24, 0x0B	; 11
     b3a:	fe 01       	movw	r30, r28
     b3c:	74 96       	adiw	r30, 0x14	; 20
     b3e:	de 01       	movw	r26, r28
     b40:	19 96       	adiw	r26, 0x09	; 9
     b42:	01 90       	ld	r0, Z+
     b44:	0d 92       	st	X+, r0
     b46:	8a 95       	dec	r24
     b48:	e1 f7       	brne	.-8      	; 0xb42 <Game_play+0x106>
     b4a:	ce 01       	movw	r24, r28
     b4c:	09 96       	adiw	r24, 0x09	; 9
     b4e:	87 de       	rcall	.-754    	; 0x85e <CAN_printMessage>
     b50:	89 85       	ldd	r24, Y+9	; 0x09
     b52:	9a 85       	ldd	r25, Y+10	; 0x0a
		
		 		CAN_printMessage(&receivedMessage);
     b54:	45 97       	sbiw	r24, 0x15	; 21
     b56:	09 f4       	brne	.+2      	; 0xb5a <Game_play+0x11e>
     b58:	47 df       	rcall	.-370    	; 0x9e8 <Game_updateLives>
     b5a:	89 85       	ldd	r24, Y+9	; 0x09
		
		 		if(receivedMessage.id == 21)
     b5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     b5e:	0d 97       	sbiw	r24, 0x0d	; 13
     b60:	41 f4       	brne	.+16     	; 0xb72 <Game_play+0x136>
     b62:	6e e1       	ldi	r22, 0x1E	; 30
		 		{
		 			Game_updateLives();
     b64:	70 e0       	ldi	r23, 0x00	; 0
     b66:	87 e0       	ldi	r24, 0x07	; 7
		 		}
				 
				if(receivedMessage.id == 13)
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	4e d5       	rcall	.+2716   	; 0x1608 <OLED_goto>
     b6c:	80 ea       	ldi	r24, 0xA0	; 160
     b6e:	91 e0       	ldi	r25, 0x01	; 1
				{
					OLED_goto(7, 30);
     b70:	a1 d5       	rcall	.+2882   	; 0x16b4 <OLED_printString>
     b72:	f1 01       	movw	r30, r2
     b74:	10 82       	st	Z, r1
     b76:	55 24       	eor	r5, r5
     b78:	53 94       	inc	r5
     b7a:	0f 2e       	mov	r0, r31
					OLED_printString("    ");
     b7c:	f7 e0       	ldi	r31, 0x07	; 7
     b7e:	8f 2e       	mov	r8, r31
     b80:	f0 2d       	mov	r31, r0
     b82:	0f 2e       	mov	r0, r31
				}
		
		 		*SPIreceivedFlag = 0;
     b84:	f5 e6       	ldi	r31, 0x65	; 101
     b86:	cf 2e       	mov	r12, r31
		SliPos = SLI_getPosition().R_per;
		
		// Check for pushed Button
		if((PINE & (1<<PE2)))
		{
			ButtonRight = 1;
     b88:	f3 e0       	ldi	r31, 0x03	; 3
     b8a:	df 2e       	mov	r13, r31
		 	//*updateCmdDispFlag = 0;
		//}

		// send Positions to Node 2
		message2send.id = 23;
		message2send.length = 7;
     b8c:	f0 2d       	mov	r31, r0
     b8e:	0f 2e       	mov	r0, r31
     b90:	f6 e6       	ldi	r31, 0x66	; 102
     b92:	af 2e       	mov	r10, r31
		message2send.data[0] = JoyPos;
		message2send.data[1] = SliPos;
		message2send.data[2] = ButtonRight;
		message2send.data[3] = uartMouseSteeringMessage->Motor;
		message2send.data[4] = uartMouseSteeringMessage->Servo;
     b94:	f3 e0       	ldi	r31, 0x03	; 3
     b96:	bf 2e       	mov	r11, r31
     b98:	f0 2d       	mov	r31, r0
     b9a:	20 91 2f 03 	lds	r18, 0x032F
     b9e:	21 11       	cpse	r18, r1
		message2send.data[5] = uartMouseSteeringMessage->Button;
     ba0:	7a cf       	rjmp	.-268    	; 0xa96 <Game_play+0x5a>
     ba2:	4f d5       	rcall	.+2718   	; 0x1642 <OLED_clear>
     ba4:	65 e0       	ldi	r22, 0x05	; 5
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	83 e0       	ldi	r24, 0x03	; 3
     baa:	90 e0       	ldi	r25, 0x00	; 0
	OLED_printString("Wait");
}

void Game_play(uint8_t* SPIreceivedFlag, uint8_t* updateCmdDispFlag, UART_Message_t* uartMouseSteeringMessage, INPUT_MODE* inputMode)
{
	while(lives > 0)
     bac:	2d d5       	rcall	.+2650   	; 0x1608 <OLED_goto>
     bae:	85 ea       	ldi	r24, 0xA5	; 165
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	80 d5       	rcall	.+2816   	; 0x16b4 <OLED_printString>
		 		*SPIreceivedFlag = 0;
		 	}
		}
	}
	
	OLED_clear();
     bb4:	65 e0       	ldi	r22, 0x05	; 5
     bb6:	70 e0       	ldi	r23, 0x00	; 0
	OLED_goto(3,5);
     bb8:	85 e0       	ldi	r24, 0x05	; 5
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	25 d5       	rcall	.+2634   	; 0x1608 <OLED_goto>
     bbe:	80 91 31 03 	lds	r24, 0x0331
     bc2:	8f 93       	push	r24
	OLED_printString("GAME OVER");
     bc4:	80 91 30 03 	lds	r24, 0x0330
     bc8:	8f 93       	push	r24
     bca:	88 e9       	ldi	r24, 0x98	; 152
	OLED_goto(5,5);
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	9f 93       	push	r25
     bd0:	8f 93       	push	r24
     bd2:	82 e3       	ldi	r24, 0x32	; 50
     bd4:	93 e0       	ldi	r25, 0x03	; 3
     bd6:	9f 93       	push	r25
	sprintf(str, "%d", score);
     bd8:	8f 93       	push	r24
     bda:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <sprintf>
     bde:	82 e3       	ldi	r24, 0x32	; 50
     be0:	93 e0       	ldi	r25, 0x03	; 3
     be2:	68 d5       	rcall	.+2768   	; 0x16b4 <OLED_printString>
     be4:	ff ef       	ldi	r31, 0xFF	; 255
     be6:	2f ef       	ldi	r18, 0xFF	; 255
     be8:	8d e1       	ldi	r24, 0x1D	; 29
     bea:	f1 50       	subi	r31, 0x01	; 1
     bec:	20 40       	sbci	r18, 0x00	; 0
     bee:	80 40       	sbci	r24, 0x00	; 0
     bf0:	e1 f7       	brne	.-8      	; 0xbea <Game_play+0x1ae>
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <Game_play+0x1b8>
     bf4:	00 00       	nop
     bf6:	0f 90       	pop	r0
	OLED_printString(str);
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	a0 96       	adiw	r28, 0x20	; 32
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	1f 91       	pop	r17
     c14:	0f 91       	pop	r16
     c16:	ff 90       	pop	r15
     c18:	ef 90       	pop	r14
     c1a:	df 90       	pop	r13
     c1c:	cf 90       	pop	r12
	
	_delay_ms(2000);
     c1e:	bf 90       	pop	r11
     c20:	af 90       	pop	r10
     c22:	9f 90       	pop	r9
     c24:	8f 90       	pop	r8
     c26:	7f 90       	pop	r7
     c28:	6f 90       	pop	r6
     c2a:	5f 90       	pop	r5
     c2c:	4f 90       	pop	r4
     c2e:	3f 90       	pop	r3
     c30:	2f 90       	pop	r2
     c32:	08 95       	ret

00000c34 <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     c34:	10 92 37 03 	sts	0x0337, r1
     c38:	10 92 36 03 	sts	0x0336, r1
	currentPosition.Y_abs = 0;
     c3c:	10 92 39 03 	sts	0x0339, r1
     c40:	10 92 38 03 	sts	0x0338, r1
	currentPosition.X_per = 0;
     c44:	10 92 3b 03 	sts	0x033B, r1
     c48:	10 92 3a 03 	sts	0x033A, r1
	currentPosition.Y_per = 0;
     c4c:	10 92 3d 03 	sts	0x033D, r1
     c50:	10 92 3c 03 	sts	0x033C, r1
	currentDirection = CENTRE;
     c54:	10 92 35 03 	sts	0x0335, r1
     c58:	08 95       	ret

00000c5a <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     c5e:	f1 d4       	rcall	.+2530   	; 0x1642 <OLED_clear>
     c60:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     c62:	70 e0       	ldi	r23, 0x00	; 0
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	cf d4       	rcall	.+2462   	; 0x1608 <OLED_goto>
     c6a:	8f ea       	ldi	r24, 0xAF	; 175
     c6c:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     c6e:	22 d5       	rcall	.+2628   	; 0x16b4 <OLED_printString>
     c70:	2f ef       	ldi	r18, 0xFF	; 255
     c72:	8f ef       	ldi	r24, 0xFF	; 255
     c74:	92 e0       	ldi	r25, 0x02	; 2
     c76:	21 50       	subi	r18, 0x01	; 1
     c78:	80 40       	sbci	r24, 0x00	; 0
     c7a:	90 40       	sbci	r25, 0x00	; 0
     c7c:	e1 f7       	brne	.-8      	; 0xc76 <JOY_calibrate+0x1c>
     c7e:	00 c0       	rjmp	.+0      	; 0xc80 <JOY_calibrate+0x26>
     c80:	00 c0       	rjmp	.+0      	; 0xc82 <JOY_calibrate+0x28>
     c82:	c4 e1       	ldi	r28, 0x14	; 20
     c84:	d0 e0       	ldi	r29, 0x00	; 0
     c86:	60 91 06 01 	lds	r22, 0x0106
     c8a:	70 91 07 01 	lds	r23, 0x0107
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     c8e:	82 e0       	ldi	r24, 0x02	; 2
     c90:	0c d7       	rcall	.+3608   	; 0x1aaa <ADC_request>
     c92:	2f ef       	ldi	r18, 0xFF	; 255
     c94:	8f e1       	ldi	r24, 0x1F	; 31
     c96:	91 e0       	ldi	r25, 0x01	; 1
     c98:	21 50       	subi	r18, 0x01	; 1
     c9a:	80 40       	sbci	r24, 0x00	; 0
     c9c:	90 40       	sbci	r25, 0x00	; 0
     c9e:	e1 f7       	brne	.-8      	; 0xc98 <JOY_calibrate+0x3e>
     ca0:	00 c0       	rjmp	.+0      	; 0xca2 <JOY_calibrate+0x48>
     ca2:	00 00       	nop
     ca4:	80 91 06 01 	lds	r24, 0x0106
     ca8:	90 91 07 01 	lds	r25, 0x0107
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     cac:	26 d7       	rcall	.+3660   	; 0x1afa <ADC_read>
     cae:	90 91 0e 01 	lds	r25, 0x010E
     cb2:	98 17       	cp	r25, r24
     cb4:	10 f4       	brcc	.+4      	; 0xcba <JOY_calibrate+0x60>
     cb6:	80 93 0e 01 	sts	0x010E, r24
		
		if(temp > calR) {calR = temp;}
     cba:	21 97       	sbiw	r28, 0x01	; 1
     cbc:	20 97       	sbiw	r28, 0x00	; 0
     cbe:	19 f7       	brne	.-58     	; 0xc86 <JOY_calibrate+0x2c>
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	81 e0       	ldi	r24, 0x01	; 1
	OLED_goto(0,0);
	OLED_printString("JOY RIGHT");
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	9f d4       	rcall	.+2366   	; 0x1608 <OLED_goto>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_goto(1,0);
     cca:	89 eb       	ldi	r24, 0xB9	; 185
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	f2 d4       	rcall	.+2532   	; 0x16b4 <OLED_printString>
     cd0:	2f ef       	ldi	r18, 0xFF	; 255
     cd2:	8f ef       	ldi	r24, 0xFF	; 255
     cd4:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("JOY LEFT");
     cd6:	21 50       	subi	r18, 0x01	; 1
     cd8:	80 40       	sbci	r24, 0x00	; 0
     cda:	90 40       	sbci	r25, 0x00	; 0
     cdc:	e1 f7       	brne	.-8      	; 0xcd6 <JOY_calibrate+0x7c>
     cde:	00 c0       	rjmp	.+0      	; 0xce0 <JOY_calibrate+0x86>
     ce0:	00 c0       	rjmp	.+0      	; 0xce2 <JOY_calibrate+0x88>
     ce2:	c4 e1       	ldi	r28, 0x14	; 20
     ce4:	d0 e0       	ldi	r29, 0x00	; 0
     ce6:	60 91 06 01 	lds	r22, 0x0106
     cea:	70 91 07 01 	lds	r23, 0x0107
     cee:	82 e0       	ldi	r24, 0x02	; 2
     cf0:	dc d6       	rcall	.+3512   	; 0x1aaa <ADC_request>
     cf2:	2f ef       	ldi	r18, 0xFF	; 255
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     cf4:	8f e1       	ldi	r24, 0x1F	; 31
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	21 50       	subi	r18, 0x01	; 1
     cfa:	80 40       	sbci	r24, 0x00	; 0
     cfc:	90 40       	sbci	r25, 0x00	; 0
     cfe:	e1 f7       	brne	.-8      	; 0xcf8 <JOY_calibrate+0x9e>
     d00:	00 c0       	rjmp	.+0      	; 0xd02 <JOY_calibrate+0xa8>
     d02:	00 00       	nop
     d04:	80 91 06 01 	lds	r24, 0x0106
     d08:	90 91 07 01 	lds	r25, 0x0107
     d0c:	f6 d6       	rcall	.+3564   	; 0x1afa <ADC_read>
     d0e:	90 91 0d 01 	lds	r25, 0x010D
     d12:	89 17       	cp	r24, r25
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     d14:	10 f4       	brcc	.+4      	; 0xd1a <JOY_calibrate+0xc0>
     d16:	80 93 0d 01 	sts	0x010D, r24
     d1a:	21 97       	sbiw	r28, 0x01	; 1
     d1c:	20 97       	sbiw	r28, 0x00	; 0
     d1e:	19 f7       	brne	.-58     	; 0xce6 <JOY_calibrate+0x8c>
		
		if(temp < calL) {calL = temp;}
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	6f d4       	rcall	.+2270   	; 0x1608 <OLED_goto>
     d2a:	82 ec       	ldi	r24, 0xC2	; 194
     d2c:	91 e0       	ldi	r25, 0x01	; 1
	OLED_goto(1,0);
	OLED_printString("JOY LEFT");
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     d2e:	c2 d4       	rcall	.+2436   	; 0x16b4 <OLED_printString>
     d30:	2f ef       	ldi	r18, 0xFF	; 255
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_goto(2,0);
     d32:	8f ef       	ldi	r24, 0xFF	; 255
     d34:	92 e0       	ldi	r25, 0x02	; 2
     d36:	21 50       	subi	r18, 0x01	; 1
     d38:	80 40       	sbci	r24, 0x00	; 0
     d3a:	90 40       	sbci	r25, 0x00	; 0
     d3c:	e1 f7       	brne	.-8      	; 0xd36 <JOY_calibrate+0xdc>
	OLED_printString("JOY UP");
     d3e:	00 c0       	rjmp	.+0      	; 0xd40 <JOY_calibrate+0xe6>
     d40:	00 c0       	rjmp	.+0      	; 0xd42 <JOY_calibrate+0xe8>
     d42:	c4 e1       	ldi	r28, 0x14	; 20
     d44:	d0 e0       	ldi	r29, 0x00	; 0
     d46:	60 91 06 01 	lds	r22, 0x0106
     d4a:	70 91 07 01 	lds	r23, 0x0107
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	ac d6       	rcall	.+3416   	; 0x1aaa <ADC_request>
     d52:	2f ef       	ldi	r18, 0xFF	; 255
     d54:	8f e1       	ldi	r24, 0x1F	; 31
     d56:	91 e0       	ldi	r25, 0x01	; 1
     d58:	21 50       	subi	r18, 0x01	; 1
     d5a:	80 40       	sbci	r24, 0x00	; 0
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     d5c:	90 40       	sbci	r25, 0x00	; 0
     d5e:	e1 f7       	brne	.-8      	; 0xd58 <JOY_calibrate+0xfe>
     d60:	00 c0       	rjmp	.+0      	; 0xd62 <JOY_calibrate+0x108>
     d62:	00 00       	nop
     d64:	80 91 06 01 	lds	r24, 0x0106
     d68:	90 91 07 01 	lds	r25, 0x0107
     d6c:	c6 d6       	rcall	.+3468   	; 0x1afa <ADC_read>
     d6e:	90 91 0c 01 	lds	r25, 0x010C
     d72:	98 17       	cp	r25, r24
     d74:	10 f4       	brcc	.+4      	; 0xd7a <JOY_calibrate+0x120>
     d76:	80 93 0c 01 	sts	0x010C, r24
     d7a:	21 97       	sbiw	r28, 0x01	; 1
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     d7c:	20 97       	sbiw	r28, 0x00	; 0
     d7e:	19 f7       	brne	.-58     	; 0xd46 <JOY_calibrate+0xec>
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	90 e0       	ldi	r25, 0x00	; 0
		
		if(temp > calUp) {calUp = temp;}
     d88:	3f d4       	rcall	.+2174   	; 0x1608 <OLED_goto>
     d8a:	89 ec       	ldi	r24, 0xC9	; 201
     d8c:	91 e0       	ldi	r25, 0x01	; 1
     d8e:	92 d4       	rcall	.+2340   	; 0x16b4 <OLED_printString>
     d90:	2f ef       	ldi	r18, 0xFF	; 255
     d92:	8f ef       	ldi	r24, 0xFF	; 255
     d94:	92 e0       	ldi	r25, 0x02	; 2
	OLED_goto(2,0);
	OLED_printString("JOY UP");
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     d96:	21 50       	subi	r18, 0x01	; 1
     d98:	80 40       	sbci	r24, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_goto(3,0);
     d9a:	90 40       	sbci	r25, 0x00	; 0
     d9c:	e1 f7       	brne	.-8      	; 0xd96 <JOY_calibrate+0x13c>
     d9e:	00 c0       	rjmp	.+0      	; 0xda0 <JOY_calibrate+0x146>
     da0:	00 c0       	rjmp	.+0      	; 0xda2 <JOY_calibrate+0x148>
     da2:	c4 e1       	ldi	r28, 0x14	; 20
     da4:	d0 e0       	ldi	r29, 0x00	; 0
	OLED_printString("JOY DOWN");
     da6:	60 91 06 01 	lds	r22, 0x0106
     daa:	70 91 07 01 	lds	r23, 0x0107
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	7c d6       	rcall	.+3320   	; 0x1aaa <ADC_request>
     db2:	2f ef       	ldi	r18, 0xFF	; 255
     db4:	8f e1       	ldi	r24, 0x1F	; 31
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	21 50       	subi	r18, 0x01	; 1
     dba:	80 40       	sbci	r24, 0x00	; 0
     dbc:	90 40       	sbci	r25, 0x00	; 0
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <JOY_calibrate+0x15e>
     dc0:	00 c0       	rjmp	.+0      	; 0xdc2 <JOY_calibrate+0x168>
     dc2:	00 00       	nop
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     dc4:	80 91 06 01 	lds	r24, 0x0106
     dc8:	90 91 07 01 	lds	r25, 0x0107
     dcc:	96 d6       	rcall	.+3372   	; 0x1afa <ADC_read>
     dce:	90 91 0b 01 	lds	r25, 0x010B
     dd2:	89 17       	cp	r24, r25
     dd4:	10 f4       	brcc	.+4      	; 0xdda <JOY_calibrate+0x180>
     dd6:	80 93 0b 01 	sts	0x010B, r24
     dda:	21 97       	sbiw	r28, 0x01	; 1
     ddc:	20 97       	sbiw	r28, 0x00	; 0
     dde:	19 f7       	brne	.-58     	; 0xda6 <JOY_calibrate+0x14c>
     de0:	20 91 0c 01 	lds	r18, 0x010C
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     de4:	80 91 0b 01 	lds	r24, 0x010B
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	28 1b       	sub	r18, r24
     dec:	31 09       	sbc	r19, r1
     dee:	c9 01       	movw	r24, r18
		
		if(temp < calDown) {calDown = temp;}
     df0:	99 23       	and	r25, r25
     df2:	0c f4       	brge	.+2      	; 0xdf6 <JOY_calibrate+0x19c>
     df4:	01 96       	adiw	r24, 0x01	; 1
     df6:	95 95       	asr	r25
     df8:	87 95       	ror	r24
     dfa:	80 93 0a 01 	sts	0x010A, r24
	OLED_goto(3,0);
	OLED_printString("JOY DOWN");
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     dfe:	20 91 0e 01 	lds	r18, 0x010E
	}
	
	
	//printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
	
	meanVert = (calUp - calDown)/2;
     e02:	80 91 0d 01 	lds	r24, 0x010D
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	28 1b       	sub	r18, r24
     e0a:	31 09       	sbc	r19, r1
     e0c:	c9 01       	movw	r24, r18
     e0e:	99 23       	and	r25, r25
     e10:	0c f4       	brge	.+2      	; 0xe14 <JOY_calibrate+0x1ba>
     e12:	01 96       	adiw	r24, 0x01	; 1
     e14:	95 95       	asr	r25
     e16:	87 95       	ror	r24
     e18:	80 93 09 01 	sts	0x0109, r24
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	70 e0       	ldi	r23, 0x00	; 0
	meanHor = (calR - calL)/2;
     e20:	84 e0       	ldi	r24, 0x04	; 4
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	f1 d3       	rcall	.+2018   	; 0x1608 <OLED_goto>
     e26:	82 ed       	ldi	r24, 0xD2	; 210
     e28:	91 e0       	ldi	r25, 0x01	; 1
     e2a:	44 d4       	rcall	.+2184   	; 0x16b4 <OLED_printString>
     e2c:	2f ef       	ldi	r18, 0xFF	; 255
     e2e:	8f ef       	ldi	r24, 0xFF	; 255
     e30:	9e e0       	ldi	r25, 0x0E	; 14
     e32:	21 50       	subi	r18, 0x01	; 1
     e34:	80 40       	sbci	r24, 0x00	; 0
     e36:	90 40       	sbci	r25, 0x00	; 0
     e38:	e1 f7       	brne	.-8      	; 0xe32 <JOY_calibrate+0x1d8>
     e3a:	00 c0       	rjmp	.+0      	; 0xe3c <JOY_calibrate+0x1e2>
     e3c:	00 00       	nop
	
	OLED_goto(4,0);
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	08 95       	ret

00000e44 <JOY_requestCurrentPosition>:
     e44:	88 37       	cpi	r24, 0x78	; 120
     e46:	39 f4       	brne	.+14     	; 0xe56 <JOY_requestCurrentPosition+0x12>
     e48:	60 91 06 01 	lds	r22, 0x0106
	OLED_printString("CALIB DONE");
     e4c:	70 91 07 01 	lds	r23, 0x0107
     e50:	82 e0       	ldi	r24, 0x02	; 2
     e52:	2b c6       	rjmp	.+3158   	; 0x1aaa <ADC_request>
     e54:	08 95       	ret
     e56:	89 37       	cpi	r24, 0x79	; 121
     e58:	31 f4       	brne	.+12     	; 0xe66 <JOY_requestCurrentPosition+0x22>
     e5a:	60 91 06 01 	lds	r22, 0x0106
     e5e:	70 91 07 01 	lds	r23, 0x0107
     e62:	81 e0       	ldi	r24, 0x01	; 1
	//printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
	_delay_ms(1000);
}
     e64:	22 c6       	rjmp	.+3140   	; 0x1aaa <ADC_request>
     e66:	08 95       	ret

00000e68 <JOY_updatePosition>:
     e68:	88 37       	cpi	r24, 0x78	; 120
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
	{
		ADC_request(Y_channel, adc_ext_ram);
     e6a:	f9 f4       	brne	.+62     	; 0xeaa <JOY_updatePosition+0x42>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     e6c:	80 91 06 01 	lds	r24, 0x0106
     e70:	90 91 07 01 	lds	r25, 0x0107
     e74:	42 d6       	rcall	.+3204   	; 0x1afa <ADC_read>
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	90 93 37 03 	sts	0x0337, r25
     e7c:	80 93 36 03 	sts	0x0336, r24
     e80:	20 91 09 01 	lds	r18, 0x0109
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     e84:	60 91 09 01 	lds	r22, 0x0109
     e88:	ac 01       	movw	r20, r24
     e8a:	42 1b       	sub	r20, r18
     e8c:	51 09       	sbc	r21, r1
     e8e:	9a 01       	movw	r18, r20
     e90:	44 e6       	ldi	r20, 0x64	; 100
     e92:	42 9f       	mul	r20, r18
     e94:	c0 01       	movw	r24, r0
     e96:	43 9f       	mul	r20, r19
     e98:	90 0d       	add	r25, r0
     e9a:	11 24       	eor	r1, r1
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	30 d6       	rcall	.+3168   	; 0x1b00 <__divmodhi4>
     ea0:	70 93 3b 03 	sts	0x033B, r23
     ea4:	60 93 3a 03 	sts	0x033A, r22
     ea8:	08 95       	ret
     eaa:	89 37       	cpi	r24, 0x79	; 121
     eac:	f1 f4       	brne	.+60     	; 0xeea <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     eae:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     eb2:	90 91 07 01 	lds	r25, 0x0107
     eb6:	21 d6       	rcall	.+3138   	; 0x1afa <ADC_read>
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	90 93 39 03 	sts	0x0339, r25
     ebe:	80 93 38 03 	sts	0x0338, r24
     ec2:	20 91 0a 01 	lds	r18, 0x010A
     ec6:	60 91 0a 01 	lds	r22, 0x010A
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     eca:	ac 01       	movw	r20, r24
     ecc:	42 1b       	sub	r20, r18
     ece:	51 09       	sbc	r21, r1
     ed0:	9a 01       	movw	r18, r20
     ed2:	44 e6       	ldi	r20, 0x64	; 100
     ed4:	42 9f       	mul	r20, r18
     ed6:	c0 01       	movw	r24, r0
     ed8:	43 9f       	mul	r20, r19
     eda:	90 0d       	add	r25, r0
     edc:	11 24       	eor	r1, r1
     ede:	70 e0       	ldi	r23, 0x00	; 0
     ee0:	0f d6       	rcall	.+3102   	; 0x1b00 <__divmodhi4>
     ee2:	70 93 3d 03 	sts	0x033D, r23
     ee6:	60 93 3c 03 	sts	0x033C, r22
     eea:	08 95       	ret

00000eec <JOY_calculateDirection>:
     eec:	80 91 3a 03 	lds	r24, 0x033A
     ef0:	90 91 3b 03 	lds	r25, 0x033B
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     ef4:	8b 35       	cpi	r24, 0x5B	; 91
     ef6:	91 05       	cpc	r25, r1
     ef8:	24 f0       	brlt	.+8      	; 0xf02 <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     efa:	83 e0       	ldi	r24, 0x03	; 3
     efc:	80 93 35 03 	sts	0x0335, r24
     f00:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     f02:	86 3a       	cpi	r24, 0xA6	; 166
     f04:	9f 4f       	sbci	r25, 0xFF	; 255
     f06:	24 f4       	brge	.+8      	; 0xf10 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     f08:	84 e0       	ldi	r24, 0x04	; 4
     f0a:	80 93 35 03 	sts	0x0335, r24
     f0e:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     f10:	80 91 3c 03 	lds	r24, 0x033C
     f14:	90 91 3d 03 	lds	r25, 0x033D
     f18:	8b 35       	cpi	r24, 0x5B	; 91
     f1a:	91 05       	cpc	r25, r1
     f1c:	24 f0       	brlt	.+8      	; 0xf26 <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	80 93 35 03 	sts	0x0335, r24
     f24:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     f26:	86 3a       	cpi	r24, 0xA6	; 166
     f28:	9f 4f       	sbci	r25, 0xFF	; 255
     f2a:	24 f4       	brge	.+8      	; 0xf34 <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	80 93 35 03 	sts	0x0335, r24
     f32:	08 95       	ret
	else{currentDirection = CENTRE;}
     f34:	10 92 35 03 	sts	0x0335, r1
     f38:	08 95       	ret

00000f3a <JOY_getPosition>:

//------------------------------------------------------------------------------
// This function returns the current position of the Joystick.
// It is a struct with the four parameters X_abs, Y_abs, X_per and Y_per
JOY_position_t JOY_getPosition()
{
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
     f3e:	cd b7       	in	r28, 0x3d	; 61
     f40:	de b7       	in	r29, 0x3e	; 62
     f42:	28 97       	sbiw	r28, 0x08	; 8
     f44:	0f b6       	in	r0, 0x3f	; 63
     f46:	f8 94       	cli
     f48:	de bf       	out	0x3e, r29	; 62
     f4a:	0f be       	out	0x3f, r0	; 63
     f4c:	cd bf       	out	0x3d, r28	; 61
	JOY_requestCurrentPosition('x');
     f4e:	88 e7       	ldi	r24, 0x78	; 120
     f50:	79 df       	rcall	.-270    	; 0xe44 <JOY_requestCurrentPosition>
     f52:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f54:	8a 95       	dec	r24
     f56:	f1 f7       	brne	.-4      	; 0xf54 <JOY_getPosition+0x1a>
     f58:	00 00       	nop
     f5a:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     f5c:	85 df       	rcall	.-246    	; 0xe68 <JOY_updatePosition>
     f5e:	89 e7       	ldi	r24, 0x79	; 121
     f60:	71 df       	rcall	.-286    	; 0xe44 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     f62:	82 e6       	ldi	r24, 0x62	; 98
     f64:	8a 95       	dec	r24
     f66:	f1 f7       	brne	.-4      	; 0xf64 <JOY_getPosition+0x2a>
     f68:	00 00       	nop
     f6a:	89 e7       	ldi	r24, 0x79	; 121
     f6c:	7d df       	rcall	.-262    	; 0xe68 <JOY_updatePosition>
     f6e:	88 e0       	ldi	r24, 0x08	; 8
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     f70:	e6 e3       	ldi	r30, 0x36	; 54
     f72:	f3 e0       	ldi	r31, 0x03	; 3
     f74:	de 01       	movw	r26, r28
	return currentPosition;
     f76:	11 96       	adiw	r26, 0x01	; 1
     f78:	01 90       	ld	r0, Z+
     f7a:	0d 92       	st	X+, r0
     f7c:	8a 95       	dec	r24
     f7e:	e1 f7       	brne	.-8      	; 0xf78 <JOY_getPosition+0x3e>
     f80:	29 81       	ldd	r18, Y+1	; 0x01
     f82:	3a 81       	ldd	r19, Y+2	; 0x02
     f84:	4b 81       	ldd	r20, Y+3	; 0x03
     f86:	5c 81       	ldd	r21, Y+4	; 0x04
     f88:	6d 81       	ldd	r22, Y+5	; 0x05
     f8a:	7e 81       	ldd	r23, Y+6	; 0x06
     f8c:	8f 81       	ldd	r24, Y+7	; 0x07
     f8e:	98 85       	ldd	r25, Y+8	; 0x08
     f90:	28 96       	adiw	r28, 0x08	; 8
     f92:	0f b6       	in	r0, 0x3f	; 63
}
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	08 95       	ret

00000fa2 <JOY_getDirection>:
     fa2:	88 e7       	ldi	r24, 0x78	; 120
     fa4:	4f df       	rcall	.-354    	; 0xe44 <JOY_requestCurrentPosition>
     fa6:	82 e6       	ldi	r24, 0x62	; 98
     fa8:	8a 95       	dec	r24
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <JOY_getDirection+0x6>
     fac:	00 00       	nop
     fae:	88 e7       	ldi	r24, 0x78	; 120
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     fb0:	5b df       	rcall	.-330    	; 0xe68 <JOY_updatePosition>
     fb2:	89 e7       	ldi	r24, 0x79	; 121
     fb4:	47 df       	rcall	.-370    	; 0xe44 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     fb6:	82 e6       	ldi	r24, 0x62	; 98
     fb8:	8a 95       	dec	r24
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <JOY_getDirection+0x16>
     fbc:	00 00       	nop
     fbe:	89 e7       	ldi	r24, 0x79	; 121
     fc0:	53 df       	rcall	.-346    	; 0xe68 <JOY_updatePosition>
     fc2:	94 df       	rcall	.-216    	; 0xeec <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     fc4:	80 91 35 03 	lds	r24, 0x0335
     fc8:	08 95       	ret

00000fca <MCP2515_reset>:
	//printf("finished MCP2515_init\n");
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
     fca:	cf 93       	push	r28
     fcc:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
     fce:	44 d5       	rcall	.+2696   	; 0x1a58 <SPI_activateSlave>
     fd0:	80 ec       	ldi	r24, 0xC0	; 192
	SPI_send(MCP_RESET);
     fd2:	38 d5       	rcall	.+2672   	; 0x1a44 <SPI_send>
     fd4:	8c ec       	ldi	r24, 0xCC	; 204
     fd6:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fd8:	01 97       	sbiw	r24, 0x01	; 1
     fda:	f1 f7       	brne	.-4      	; 0xfd8 <MCP2515_reset+0xe>
     fdc:	00 c0       	rjmp	.+0      	; 0xfde <MCP2515_reset+0x14>
     fde:	00 00       	nop
     fe0:	8c 2f       	mov	r24, r28
     fe2:	3e d5       	rcall	.+2684   	; 0x1a60 <SPI_deactivateSlave>
	_delay_ms(1);
	SPI_deactivateSlave(slave);
     fe4:	8f ef       	ldi	r24, 0xFF	; 255
     fe6:	9f e2       	ldi	r25, 0x2F	; 47
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	f1 f7       	brne	.-4      	; 0xfe8 <MCP2515_reset+0x1e>
     fec:	00 c0       	rjmp	.+0      	; 0xfee <MCP2515_reset+0x24>
     fee:	00 00       	nop
     ff0:	cf 91       	pop	r28
     ff2:	08 95       	ret

00000ff4 <MCP2515_read>:
     ff4:	cf 93       	push	r28
	_delay_ms(10);
}
     ff6:	df 93       	push	r29
     ff8:	c8 2f       	mov	r28, r24

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
     ffa:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
     ffc:	2d d5       	rcall	.+2650   	; 0x1a58 <SPI_activateSlave>
     ffe:	83 e0       	ldi	r24, 0x03	; 3
	SPI_send(MCP_READ);
    1000:	21 d5       	rcall	.+2626   	; 0x1a44 <SPI_send>
    1002:	8c ec       	ldi	r24, 0xCC	; 204
    1004:	94 e0       	ldi	r25, 0x04	; 4
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <MCP2515_read+0x12>
    100a:	00 c0       	rjmp	.+0      	; 0x100c <MCP2515_read+0x18>
    100c:	00 00       	nop
    100e:	8d 2f       	mov	r24, r29
    1010:	19 d5       	rcall	.+2610   	; 0x1a44 <SPI_send>
	_delay_ms(1);
	SPI_send(address);
    1012:	1c d5       	rcall	.+2616   	; 0x1a4c <SPI_receive>
    1014:	d8 2f       	mov	r29, r24
    1016:	8c 2f       	mov	r24, r28
	
	uint8_t result;
	result = SPI_receive();
    1018:	23 d5       	rcall	.+2630   	; 0x1a60 <SPI_deactivateSlave>
    101a:	8d 2f       	mov	r24, r29
    101c:	df 91       	pop	r29
	
	SPI_deactivateSlave(slave);
    101e:	cf 91       	pop	r28
    1020:	08 95       	ret

00001022 <MCP2515_init>:
    1022:	80 e0       	ldi	r24, 0x00	; 0
	return result;
}
    1024:	d2 df       	rcall	.-92     	; 0xfca <MCP2515_reset>
    1026:	6e e0       	ldi	r22, 0x0E	; 14
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	e4 df       	rcall	.-56     	; 0xff4 <MCP2515_read>
uint8_t MCP2515_init()
{
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
	// Self-test
	uint8_t value;
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
    102c:	98 2f       	mov	r25, r24
    102e:	90 7e       	andi	r25, 0xE0	; 224
	//printf("CANSTAT: %#x\n", value);
	if((value & MODE_MASK) != MODE_CONFIG) 
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 38       	cpi	r25, 0x80	; 128
    1034:	09 f4       	brne	.+2      	; 0x1038 <MCP2515_init+0x16>
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	08 95       	ret

0000103a <MCP2515_write>:
    103a:	1f 93       	push	r17
		return 1;
	}
	//
	//printf("finished MCP2515_init\n");
	return 0;
}
    103c:	cf 93       	push	r28
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_write(SPI_SLAVES slave, uint8_t address, uint8_t data)
{
    103e:	df 93       	push	r29
    1040:	c8 2f       	mov	r28, r24
    1042:	16 2f       	mov	r17, r22
    1044:	d4 2f       	mov	r29, r20
	SPI_activateSlave(slave);
    1046:	08 d5       	rcall	.+2576   	; 0x1a58 <SPI_activateSlave>
    1048:	82 e0       	ldi	r24, 0x02	; 2
	SPI_send(MCP_WRITE);
    104a:	fc d4       	rcall	.+2552   	; 0x1a44 <SPI_send>
    104c:	81 2f       	mov	r24, r17
    104e:	fa d4       	rcall	.+2548   	; 0x1a44 <SPI_send>
	SPI_send(address);
    1050:	8d 2f       	mov	r24, r29
    1052:	f8 d4       	rcall	.+2544   	; 0x1a44 <SPI_send>
    1054:	8c 2f       	mov	r24, r28
	SPI_send(data);
    1056:	04 d5       	rcall	.+2568   	; 0x1a60 <SPI_deactivateSlave>
    1058:	df 91       	pop	r29
    105a:	cf 91       	pop	r28
	SPI_deactivateSlave(slave);
    105c:	1f 91       	pop	r17
    105e:	08 95       	ret

00001060 <MCP2515_bitModify>:
    1060:	0f 93       	push	r16
}
    1062:	1f 93       	push	r17
    1064:	cf 93       	push	r28
    1066:	df 93       	push	r29
    1068:	c8 2f       	mov	r28, r24
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_bitModify(SPI_SLAVES slave, uint8_t register2change, uint8_t mask, uint8_t newValue)
{
    106a:	06 2f       	mov	r16, r22
    106c:	14 2f       	mov	r17, r20
    106e:	d2 2f       	mov	r29, r18
	SPI_activateSlave(slave);
    1070:	f3 d4       	rcall	.+2534   	; 0x1a58 <SPI_activateSlave>
    1072:	85 e0       	ldi	r24, 0x05	; 5
	
	SPI_send(MCP_BITMOD);
    1074:	e7 d4       	rcall	.+2510   	; 0x1a44 <SPI_send>
    1076:	80 2f       	mov	r24, r16
    1078:	e5 d4       	rcall	.+2506   	; 0x1a44 <SPI_send>
	SPI_send(register2change);
    107a:	81 2f       	mov	r24, r17
    107c:	e3 d4       	rcall	.+2502   	; 0x1a44 <SPI_send>
    107e:	8d 2f       	mov	r24, r29
	SPI_send(mask);
    1080:	e1 d4       	rcall	.+2498   	; 0x1a44 <SPI_send>
    1082:	8c 2f       	mov	r24, r28
    1084:	ed d4       	rcall	.+2522   	; 0x1a60 <SPI_deactivateSlave>
	SPI_send(newValue);
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
	
	SPI_deactivateSlave(slave);
    108c:	0f 91       	pop	r16
    108e:	08 95       	ret

00001090 <startGame>:
static INPUT_MODE* actualInputMode;
//******************************************************************************************

void startGame()
{
	*actualState = GAME;
    1090:	e0 91 40 03 	lds	r30, 0x0340
    1094:	f0 91 41 03 	lds	r31, 0x0341
    1098:	10 82       	st	Z, r1
	OLED_clear();
    109a:	d3 d2       	rcall	.+1446   	; 0x1642 <OLED_clear>
    109c:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
    109e:	70 e0       	ldi	r23, 0x00	; 0
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	b1 d2       	rcall	.+1378   	; 0x1608 <OLED_goto>
    10a6:	8d ed       	ldi	r24, 0xDD	; 221
    10a8:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("START");
    10aa:	04 d3       	rcall	.+1544   	; 0x16b4 <OLED_printString>
    10ac:	2f ef       	ldi	r18, 0xFF	; 255
    10ae:	8f e7       	ldi	r24, 0x7F	; 127
    10b0:	97 e0       	ldi	r25, 0x07	; 7
    10b2:	21 50       	subi	r18, 0x01	; 1
    10b4:	80 40       	sbci	r24, 0x00	; 0
    10b6:	90 40       	sbci	r25, 0x00	; 0
    10b8:	e1 f7       	brne	.-8      	; 0x10b2 <startGame+0x22>
    10ba:	00 c0       	rjmp	.+0      	; 0x10bc <startGame+0x2c>
    10bc:	00 00       	nop
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	85 e0       	ldi	r24, 0x05	; 5
// 		OLED_printString("*");
// 		_delay_ms(500);
// 	}

	_delay_ms(500);
	OLED_goto(5,0);
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	a0 d2       	rcall	.+1344   	; 0x1608 <OLED_goto>
    10c8:	83 ee       	ldi	r24, 0xE3	; 227
    10ca:	91 e0       	ldi	r25, 0x01	; 1
    10cc:	f3 d2       	rcall	.+1510   	; 0x16b4 <OLED_printString>
    10ce:	2f ef       	ldi	r18, 0xFF	; 255
	OLED_printString("YUPII :)");
    10d0:	8f ef       	ldi	r24, 0xFF	; 255
    10d2:	9c e2       	ldi	r25, 0x2C	; 44
    10d4:	21 50       	subi	r18, 0x01	; 1
    10d6:	80 40       	sbci	r24, 0x00	; 0
    10d8:	90 40       	sbci	r25, 0x00	; 0
    10da:	e1 f7       	brne	.-8      	; 0x10d4 <startGame+0x44>
    10dc:	00 c0       	rjmp	.+0      	; 0x10de <startGame+0x4e>
    10de:	00 c0       	rjmp	.+0      	; 0x10e0 <startGame+0x50>
    10e0:	08 95       	ret

000010e2 <MENU_addMenuItem>:
    10e2:	cf 92       	push	r12
    10e4:	df 92       	push	r13
    10e6:	ef 92       	push	r14
    10e8:	ff 92       	push	r15
    10ea:	0f 93       	push	r16
	modeMenu->children[2] = currItem;
	modeMenu->children[2]->functionPtr = &MENU_updateState;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
    10ec:	1f 93       	push	r17
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	8c 01       	movw	r16, r24
    10f4:	7b 01       	movw	r14, r22
    10f6:	6a 01       	movw	r12, r20
    10f8:	e9 01       	movw	r28, r18
	if(currItem != NULL)
    10fa:	80 91 45 03 	lds	r24, 0x0345
    10fe:	90 91 46 03 	lds	r25, 0x0346
    1102:	89 2b       	or	r24, r25
    1104:	19 f0       	breq	.+6      	; 0x110c <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
    1106:	8c ee       	ldi	r24, 0xEC	; 236
    1108:	91 e0       	ldi	r25, 0x01	; 1
    110a:	a8 d6       	rcall	.+3408   	; 0x1e5c <puts>
    110c:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	1e d5       	rcall	.+2620   	; 0x1b4e <malloc>
    1112:	fc 01       	movw	r30, r24
    1114:	90 93 46 03 	sts	0x0346, r25
    1118:	80 93 45 03 	sts	0x0345, r24
    111c:	f3 82       	std	Z+3, r15	; 0x03
    111e:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
    1120:	11 83       	std	Z+1, r17	; 0x01
    1122:	00 83       	st	Z, r16
	currItem->name = name;
    1124:	cd 2b       	or	r28, r29
    1126:	39 f0       	breq	.+14     	; 0x1136 <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
    1128:	d5 82       	std	Z+5, r13	; 0x05
    112a:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
    1130:	97 83       	std	Z+7, r25	; 0x07
    1132:	86 83       	std	Z+6, r24	; 0x06
    1134:	04 c0       	rjmp	.+8      	; 0x113e <MENU_addMenuItem+0x5c>
    1136:	15 82       	std	Z+5, r1	; 0x05
    1138:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
    113a:	17 82       	std	Z+7, r1	; 0x07
    113c:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
    113e:	df 91       	pop	r29
    1140:	cf 91       	pop	r28
	}
}
    1142:	1f 91       	pop	r17
    1144:	0f 91       	pop	r16
    1146:	ff 90       	pop	r15
    1148:	ef 90       	pop	r14
    114a:	df 90       	pop	r13
    114c:	cf 90       	pop	r12
    114e:	08 95       	ret

00001150 <MENU_buildMenus>:
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
    1154:	86 e1       	ldi	r24, 0x16	; 22
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	fa d4       	rcall	.+2548   	; 0x1b4e <malloc>
    115a:	ec 01       	movw	r28, r24
    115c:	90 93 4c 03 	sts	0x034C, r25
    1160:	80 93 4b 03 	sts	0x034B, r24
    1164:	82 e0       	ldi	r24, 0x02	; 2
	mainMenu->menuName = "MainMenu";
    1166:	92 e0       	ldi	r25, 0x02	; 2
    1168:	99 83       	std	Y+1, r25	; 0x01
    116a:	88 83       	st	Y, r24
    116c:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
    116e:	1c 8a       	std	Y+20, r1	; 0x14
    1170:	84 e0       	ldi	r24, 0x04	; 4
	mainMenu->noChilds = 4;
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	9b 83       	std	Y+3, r25	; 0x03
    1176:	8a 83       	std	Y+2, r24	; 0x02
    1178:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	modeMenu = malloc(sizeof(menuNode_t));
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	e8 d4       	rcall	.+2512   	; 0x1b4e <malloc>
    117e:	fc 01       	movw	r30, r24
    1180:	90 93 4a 03 	sts	0x034A, r25
    1184:	80 93 49 03 	sts	0x0349, r24
    1188:	8b e0       	ldi	r24, 0x0B	; 11
    118a:	92 e0       	ldi	r25, 0x02	; 2
	modeMenu->menuName = "ModeMenu";
    118c:	91 83       	std	Z+1, r25	; 0x01
    118e:	80 83       	st	Z, r24
    1190:	d5 8b       	std	Z+21, r29	; 0x15
    1192:	c4 8b       	std	Z+20, r28	; 0x14
	modeMenu->parentMenu = mainMenu;
    1194:	83 e0       	ldi	r24, 0x03	; 3
    1196:	90 e0       	ldi	r25, 0x00	; 0
	modeMenu->noChilds = 3;
    1198:	93 83       	std	Z+3, r25	; 0x03
    119a:	82 83       	std	Z+2, r24	; 0x02
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	be 01       	movw	r22, r28
    11a6:	84 e1       	ldi	r24, 0x14	; 20
    11a8:	92 e0       	ldi	r25, 0x02	; 2
    11aa:	9b df       	rcall	.-202    	; 0x10e2 <MENU_addMenuItem>
    11ac:	60 91 4b 03 	lds	r22, 0x034B
    11b0:	70 91 4c 03 	lds	r23, 0x034C
	mainMenu->children[0] = currItem;
    11b4:	e0 91 45 03 	lds	r30, 0x0345
    11b8:	f0 91 46 03 	lds	r31, 0x0346
    11bc:	db 01       	movw	r26, r22
    11be:	15 96       	adiw	r26, 0x05	; 5
    11c0:	fc 93       	st	X, r31
    11c2:	ee 93       	st	-X, r30
    11c4:	14 97       	sbiw	r26, 0x04	; 4
    11c6:	88 e4       	ldi	r24, 0x48	; 72
    11c8:	98 e0       	ldi	r25, 0x08	; 8
    11ca:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
    11cc:	82 87       	std	Z+10, r24	; 0x0a
    11ce:	40 91 49 03 	lds	r20, 0x0349
    11d2:	50 91 4a 03 	lds	r21, 0x034A
	
	MENU_addMenuItem("Mode", mainMenu, modeMenu, 1);
    11d6:	21 e0       	ldi	r18, 0x01	; 1
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	8d e1       	ldi	r24, 0x1D	; 29
    11dc:	92 e0       	ldi	r25, 0x02	; 2
    11de:	81 df       	rcall	.-254    	; 0x10e2 <MENU_addMenuItem>
    11e0:	60 91 4b 03 	lds	r22, 0x034B
    11e4:	70 91 4c 03 	lds	r23, 0x034C
	mainMenu->children[1] = currItem;
    11e8:	80 91 45 03 	lds	r24, 0x0345
    11ec:	90 91 46 03 	lds	r25, 0x0346
    11f0:	fb 01       	movw	r30, r22
    11f2:	97 83       	std	Z+7, r25	; 0x07
    11f4:	86 83       	std	Z+6, r24	; 0x06
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	40 e0       	ldi	r20, 0x00	; 0
    11fc:	50 e0       	ldi	r21, 0x00	; 0
	
	//MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
	//mainMenu->children[2] = currItem;
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
    11fe:	82 e2       	ldi	r24, 0x22	; 34
    1200:	92 e0       	ldi	r25, 0x02	; 2
    1202:	6f df       	rcall	.-290    	; 0x10e2 <MENU_addMenuItem>
    1204:	60 91 4b 03 	lds	r22, 0x034B
    1208:	70 91 4c 03 	lds	r23, 0x034C
    120c:	e0 91 45 03 	lds	r30, 0x0345
	mainMenu->children[2] = currItem;
    1210:	f0 91 46 03 	lds	r31, 0x0346
    1214:	db 01       	movw	r26, r22
    1216:	19 96       	adiw	r26, 0x09	; 9
    1218:	fc 93       	st	X, r31
    121a:	ee 93       	st	-X, r30
    121c:	18 97       	sbiw	r26, 0x08	; 8
    121e:	8d e2       	ldi	r24, 0x2D	; 45
    1220:	96 e0       	ldi	r25, 0x06	; 6
    1222:	93 87       	std	Z+11, r25	; 0x0b
    1224:	82 87       	std	Z+10, r24	; 0x0a
    1226:	20 e0       	ldi	r18, 0x00	; 0
	mainMenu->children[2]->functionPtr = &JOY_calibrate; //assign function to this item
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	40 e0       	ldi	r20, 0x00	; 0
    122c:	50 e0       	ldi	r21, 0x00	; 0
    122e:	8c e2       	ldi	r24, 0x2C	; 44
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
    1230:	92 e0       	ldi	r25, 0x02	; 2
    1232:	57 df       	rcall	.-338    	; 0x10e2 <MENU_addMenuItem>
    1234:	e0 91 45 03 	lds	r30, 0x0345
    1238:	f0 91 46 03 	lds	r31, 0x0346
    123c:	a0 91 4b 03 	lds	r26, 0x034B
	mainMenu->children[3] = currItem;
    1240:	b0 91 4c 03 	lds	r27, 0x034C
    1244:	1b 96       	adiw	r26, 0x0b	; 11
    1246:	fc 93       	st	X, r31
    1248:	ee 93       	st	-X, r30
    124a:	1a 97       	sbiw	r26, 0x0a	; 10
    124c:	81 e9       	ldi	r24, 0x91	; 145
    124e:	9a e0       	ldi	r25, 0x0A	; 10
    1250:	93 87       	std	Z+11, r25	; 0x0b
    1252:	82 87       	std	Z+10, r24	; 0x0a
    1254:	10 92 46 03 	sts	0x0346, r1
	mainMenu->children[3]->functionPtr = &MENU_printInfo;
    1258:	10 92 45 03 	sts	0x0345, r1
    125c:	60 91 49 03 	lds	r22, 0x0349
	
	currItem = NULL;
    1260:	70 91 4a 03 	lds	r23, 0x034A
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
	
	MENU_addMenuItem("Slider", modeMenu, NULL, 0);
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	81 e3       	ldi	r24, 0x31	; 49
    126e:	92 e0       	ldi	r25, 0x02	; 2
    1270:	38 df       	rcall	.-400    	; 0x10e2 <MENU_addMenuItem>
    1272:	60 91 49 03 	lds	r22, 0x0349
    1276:	70 91 4a 03 	lds	r23, 0x034A
    127a:	e0 91 45 03 	lds	r30, 0x0345
    127e:	f0 91 46 03 	lds	r31, 0x0346
	modeMenu->children[0] = currItem;
    1282:	db 01       	movw	r26, r22
    1284:	15 96       	adiw	r26, 0x05	; 5
    1286:	fc 93       	st	X, r31
    1288:	ee 93       	st	-X, r30
    128a:	14 97       	sbiw	r26, 0x04	; 4
    128c:	cd eb       	ldi	r28, 0xBD	; 189
    128e:	da e0       	ldi	r29, 0x0A	; 10
    1290:	d3 87       	std	Z+11, r29	; 0x0b
    1292:	c2 87       	std	Z+10, r28	; 0x0a
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e0       	ldi	r20, 0x00	; 0
	modeMenu->children[0]->functionPtr = &MENU_updateState;
    129a:	50 e0       	ldi	r21, 0x00	; 0
    129c:	88 e3       	ldi	r24, 0x38	; 56
    129e:	92 e0       	ldi	r25, 0x02	; 2
    12a0:	20 df       	rcall	.-448    	; 0x10e2 <MENU_addMenuItem>
	
	MENU_addMenuItem("Joystick", modeMenu, NULL, 0);
    12a2:	60 91 49 03 	lds	r22, 0x0349
    12a6:	70 91 4a 03 	lds	r23, 0x034A
    12aa:	e0 91 45 03 	lds	r30, 0x0345
    12ae:	f0 91 46 03 	lds	r31, 0x0346
	modeMenu->children[1] = currItem;
    12b2:	db 01       	movw	r26, r22
    12b4:	17 96       	adiw	r26, 0x07	; 7
    12b6:	fc 93       	st	X, r31
    12b8:	ee 93       	st	-X, r30
    12ba:	16 97       	sbiw	r26, 0x06	; 6
    12bc:	d3 87       	std	Z+11, r29	; 0x0b
    12be:	c2 87       	std	Z+10, r28	; 0x0a
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	81 e4       	ldi	r24, 0x41	; 65
    12ca:	92 e0       	ldi	r25, 0x02	; 2
	modeMenu->children[1]->functionPtr = &MENU_updateState;
    12cc:	0a df       	rcall	.-492    	; 0x10e2 <MENU_addMenuItem>
    12ce:	e0 91 45 03 	lds	r30, 0x0345
	
	MENU_addMenuItem("PC", modeMenu, NULL, 0);
    12d2:	f0 91 46 03 	lds	r31, 0x0346
    12d6:	a0 91 49 03 	lds	r26, 0x0349
    12da:	b0 91 4a 03 	lds	r27, 0x034A
    12de:	19 96       	adiw	r26, 0x09	; 9
	modeMenu->children[2] = currItem;
    12e0:	fc 93       	st	X, r31
    12e2:	ee 93       	st	-X, r30
    12e4:	18 97       	sbiw	r26, 0x08	; 8
    12e6:	d3 87       	std	Z+11, r29	; 0x0b
    12e8:	c2 87       	std	Z+10, r28	; 0x0a
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	08 95       	ret

000012f0 <MENU_printMenuItem>:
    12f0:	cf 93       	push	r28
    12f2:	df 93       	push	r29
    12f4:	ec 01       	movw	r28, r24
    12f6:	cb 01       	movw	r24, r22
	modeMenu->children[2]->functionPtr = &MENU_updateState;
    12f8:	20 97       	sbiw	r28, 0x00	; 0
    12fa:	39 f0       	breq	.+14     	; 0x130a <MENU_printMenuItem+0x1a>
}
    12fc:	6a e0       	ldi	r22, 0x0A	; 10
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	83 d1       	rcall	.+774    	; 0x1608 <OLED_goto>

void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
    1302:	88 81       	ld	r24, Y
		OLED_printString(item->name);
    1304:	99 81       	ldd	r25, Y+1	; 0x01
    1306:	d6 d1       	rcall	.+940    	; 0x16b4 <OLED_printString>
    1308:	07 c0       	rjmp	.+14     	; 0x1318 <MENU_printMenuItem+0x28>
    130a:	84 e4       	ldi	r24, 0x44	; 68
    130c:	92 e0       	ldi	r25, 0x02	; 2
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
    130e:	9f 93       	push	r25
    1310:	8f 93       	push	r24
    1312:	8e d5       	rcall	.+2844   	; 0x1e30 <printf>
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	df 91       	pop	r29
    131a:	cf 91       	pop	r28
    131c:	08 95       	ret

0000131e <MENU_printMenu>:
	}
}
    131e:	cf 92       	push	r12
    1320:	df 92       	push	r13
    1322:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
    1324:	ff 92       	push	r15
    1326:	0f 93       	push	r16
    1328:	1f 93       	push	r17
    132a:	cf 93       	push	r28
    132c:	df 93       	push	r29
    132e:	6c 01       	movw	r12, r24
    1330:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
    1332:	87 d1       	rcall	.+782    	; 0x1642 <OLED_clear>
    1334:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	14 d2       	rcall	.+1064   	; 0x1762 <OLED_moveArrow>
    133a:	1e 14       	cp	r1, r14
    133c:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
    133e:	7c f4       	brge	.+30     	; 0x135e <MENU_printMenu+0x40>
    1340:	86 01       	movw	r16, r12
    1342:	0c 5f       	subi	r16, 0xFC	; 252
    1344:	1f 4f       	sbci	r17, 0xFF	; 255
    1346:	c0 e0       	ldi	r28, 0x00	; 0
    1348:	d0 e0       	ldi	r29, 0x00	; 0
    134a:	be 01       	movw	r22, r28
    134c:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
    134e:	81 91       	ld	r24, Z+
    1350:	91 91       	ld	r25, Z+
    1352:	8f 01       	movw	r16, r30
    1354:	cd df       	rcall	.-102    	; 0x12f0 <MENU_printMenuItem>
    1356:	21 96       	adiw	r28, 0x01	; 1
    1358:	ce 15       	cp	r28, r14
    135a:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
    135c:	b1 f7       	brne	.-20     	; 0x134a <MENU_printMenu+0x2c>
    135e:	d0 92 48 03 	sts	0x0348, r13
    1362:	c0 92 47 03 	sts	0x0347, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
    1366:	10 92 43 03 	sts	0x0343, r1
    136a:	10 92 42 03 	sts	0x0342, r1
	
	currentPosition = 0;
    136e:	f6 01       	movw	r30, r12
    1370:	84 81       	ldd	r24, Z+4	; 0x04
    1372:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
    1374:	90 93 46 03 	sts	0x0346, r25
    1378:	80 93 45 03 	sts	0x0345, r24
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
}
    1382:	0f 91       	pop	r16
    1384:	ff 90       	pop	r15
    1386:	ef 90       	pop	r14
    1388:	df 90       	pop	r13
    138a:	cf 90       	pop	r12
    138c:	08 95       	ret

0000138e <MENU_moveUp>:
    138e:	20 91 42 03 	lds	r18, 0x0342
    1392:	30 91 43 03 	lds	r19, 0x0343
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
    1396:	12 16       	cp	r1, r18
    1398:	13 06       	cpc	r1, r19
    139a:	bc f4       	brge	.+46     	; 0x13ca <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
    139c:	c9 01       	movw	r24, r18
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	90 93 43 03 	sts	0x0343, r25
    13a4:	80 93 42 03 	sts	0x0342, r24
		currItem = currentMenu->children[currentPosition];
    13a8:	e0 91 47 03 	lds	r30, 0x0347
    13ac:	f0 91 48 03 	lds	r31, 0x0348
    13b0:	2f 5f       	subi	r18, 0xFF	; 255
    13b2:	3f 4f       	sbci	r19, 0xFF	; 255
    13b4:	22 0f       	add	r18, r18
    13b6:	33 1f       	adc	r19, r19
    13b8:	e2 0f       	add	r30, r18
    13ba:	f3 1f       	adc	r31, r19
    13bc:	20 81       	ld	r18, Z
    13be:	31 81       	ldd	r19, Z+1	; 0x01
    13c0:	30 93 46 03 	sts	0x0346, r19
    13c4:	20 93 45 03 	sts	0x0345, r18
		OLED_moveArrow(currentPosition);
    13c8:	cc c1       	rjmp	.+920    	; 0x1762 <OLED_moveArrow>
    13ca:	08 95       	ret

000013cc <MENU_moveDown>:
    13cc:	e0 91 47 03 	lds	r30, 0x0347
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
    13d0:	f0 91 48 03 	lds	r31, 0x0348
    13d4:	20 91 42 03 	lds	r18, 0x0342
    13d8:	30 91 43 03 	lds	r19, 0x0343
    13dc:	82 81       	ldd	r24, Z+2	; 0x02
    13de:	93 81       	ldd	r25, Z+3	; 0x03
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	28 17       	cp	r18, r24
    13e4:	39 07       	cpc	r19, r25
    13e6:	a4 f4       	brge	.+40     	; 0x1410 <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
    13e8:	c9 01       	movw	r24, r18
    13ea:	01 96       	adiw	r24, 0x01	; 1
    13ec:	90 93 43 03 	sts	0x0343, r25
    13f0:	80 93 42 03 	sts	0x0342, r24
		currItem = currentMenu->children[currentPosition];
    13f4:	2d 5f       	subi	r18, 0xFD	; 253
    13f6:	3f 4f       	sbci	r19, 0xFF	; 255
    13f8:	22 0f       	add	r18, r18
    13fa:	33 1f       	adc	r19, r19
    13fc:	e2 0f       	add	r30, r18
    13fe:	f3 1f       	adc	r31, r19
    1400:	20 81       	ld	r18, Z
    1402:	31 81       	ldd	r19, Z+1	; 0x01
    1404:	30 93 46 03 	sts	0x0346, r19
    1408:	20 93 45 03 	sts	0x0345, r18
		OLED_moveArrow(currentPosition);
    140c:	aa c1       	rjmp	.+852    	; 0x1762 <OLED_moveArrow>
    140e:	08 95       	ret
    1410:	10 92 43 03 	sts	0x0343, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
    1414:	10 92 42 03 	sts	0x0342, r1
    1418:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
    141a:	95 81       	ldd	r25, Z+5	; 0x05
    141c:	90 93 46 03 	sts	0x0346, r25
    1420:	80 93 45 03 	sts	0x0345, r24
    1424:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	9c c1       	rjmp	.+824    	; 0x1762 <OLED_moveArrow>
    142a:	08 95       	ret

0000142c <MENU_moveLeft>:
    142c:	e0 91 47 03 	lds	r30, 0x0347
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
    1430:	f0 91 48 03 	lds	r31, 0x0348
    1434:	84 89       	ldd	r24, Z+20	; 0x14
    1436:	95 89       	ldd	r25, Z+21	; 0x15
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	21 f0       	breq	.+8      	; 0x1444 <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
    143c:	fc 01       	movw	r30, r24
    143e:	62 81       	ldd	r22, Z+2	; 0x02
    1440:	73 81       	ldd	r23, Z+3	; 0x03
    1442:	6d cf       	rjmp	.-294    	; 0x131e <MENU_printMenu>
    1444:	08 95       	ret

00001446 <MENU_reactivate>:
    1446:	80 91 47 03 	lds	r24, 0x0347
	//MENU_clearMemory();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
    144a:	90 91 48 03 	lds	r25, 0x0348
    144e:	fc 01       	movw	r30, r24
    1450:	62 81       	ldd	r22, Z+2	; 0x02
    1452:	73 81       	ldd	r23, Z+3	; 0x03
    1454:	64 df       	rcall	.-312    	; 0x131e <MENU_printMenu>
    1456:	18 c0       	rjmp	.+48     	; 0x1488 <MENU_waitForInput>
	MENU_waitForInput();
    1458:	08 95       	ret

0000145a <MENU_moveRight>:
    145a:	e0 91 45 03 	lds	r30, 0x0345
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
    145e:	f0 91 46 03 	lds	r31, 0x0346
    1462:	86 81       	ldd	r24, Z+6	; 0x06
    1464:	97 81       	ldd	r25, Z+7	; 0x07
    1466:	89 2b       	or	r24, r25
    1468:	39 f0       	breq	.+14     	; 0x1478 <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
    146a:	84 81       	ldd	r24, Z+4	; 0x04
    146c:	95 81       	ldd	r25, Z+5	; 0x05
    146e:	fc 01       	movw	r30, r24
    1470:	62 81       	ldd	r22, Z+2	; 0x02
    1472:	73 81       	ldd	r23, Z+3	; 0x03
    1474:	54 cf       	rjmp	.-344    	; 0x131e <MENU_printMenu>
    1476:	08 95       	ret
    1478:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
    147a:	f3 85       	ldd	r31, Z+11	; 0x0b
    147c:	e0 2d       	mov	r30, r0
    147e:	30 97       	sbiw	r30, 0x00	; 0
    1480:	11 f0       	breq	.+4      	; 0x1486 <MENU_moveRight+0x2c>
    1482:	09 95       	icall
	{
		currItem->functionPtr();
    1484:	e0 cf       	rjmp	.-64     	; 0x1446 <MENU_reactivate>
		MENU_reactivate();
    1486:	08 95       	ret

00001488 <MENU_waitForInput>:
    1488:	80 91 42 03 	lds	r24, 0x0342
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
    148c:	90 91 43 03 	lds	r25, 0x0343
    1490:	68 d1       	rcall	.+720    	; 0x1762 <OLED_moveArrow>
    1492:	80 91 44 03 	lds	r24, 0x0344
	JOY_direction_t currDir;
	
	while(menuActiveFlag && *actualState == MENU)
    1496:	88 23       	and	r24, r24
    1498:	69 f1       	breq	.+90     	; 0x14f4 <MENU_waitForInput+0x6c>
    149a:	e0 91 40 03 	lds	r30, 0x0340
    149e:	f0 91 41 03 	lds	r31, 0x0341
    14a2:	80 81       	ld	r24, Z
    14a4:	81 30       	cpi	r24, 0x01	; 1
    14a6:	31 f5       	brne	.+76     	; 0x14f4 <MENU_waitForInput+0x6c>
    14a8:	7c dd       	rcall	.-1288   	; 0xfa2 <JOY_getDirection>
	{
		currDir = JOY_getDirection();
    14aa:	82 30       	cpi	r24, 0x02	; 2
    14ac:	71 f0       	breq	.+28     	; 0x14ca <MENU_waitForInput+0x42>
		switch(currDir){
    14ae:	18 f4       	brcc	.+6      	; 0x14b6 <MENU_waitForInput+0x2e>
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	49 f0       	breq	.+18     	; 0x14c6 <MENU_waitForInput+0x3e>
    14b4:	0b c0       	rjmp	.+22     	; 0x14cc <MENU_waitForInput+0x44>
    14b6:	83 30       	cpi	r24, 0x03	; 3
    14b8:	21 f0       	breq	.+8      	; 0x14c2 <MENU_waitForInput+0x3a>
    14ba:	84 30       	cpi	r24, 0x04	; 4
    14bc:	39 f4       	brne	.+14     	; 0x14cc <MENU_waitForInput+0x44>
    14be:	b6 df       	rcall	.-148    	; 0x142c <MENU_moveLeft>
    14c0:	05 c0       	rjmp	.+10     	; 0x14cc <MENU_waitForInput+0x44>
			case LEFT:
			MENU_moveLeft();
    14c2:	cb df       	rcall	.-106    	; 0x145a <MENU_moveRight>
    14c4:	03 c0       	rjmp	.+6      	; 0x14cc <MENU_waitForInput+0x44>
			break;
    14c6:	63 df       	rcall	.-314    	; 0x138e <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
    14c8:	01 c0       	rjmp	.+2      	; 0x14cc <MENU_waitForInput+0x44>
    14ca:	80 df       	rcall	.-256    	; 0x13cc <MENU_moveDown>
			break;
    14cc:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
    14ce:	8f e7       	ldi	r24, 0x7F	; 127
    14d0:	94 e0       	ldi	r25, 0x04	; 4
			break;
    14d2:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
    14d4:	80 40       	sbci	r24, 0x00	; 0
    14d6:	90 40       	sbci	r25, 0x00	; 0
    14d8:	e1 f7       	brne	.-8      	; 0x14d2 <MENU_waitForInput+0x4a>
    14da:	00 c0       	rjmp	.+0      	; 0x14dc <MENU_waitForInput+0x54>
    14dc:	00 00       	nop
    14de:	80 91 44 03 	lds	r24, 0x0344
    14e2:	88 23       	and	r24, r24
    14e4:	39 f0       	breq	.+14     	; 0x14f4 <MENU_waitForInput+0x6c>
    14e6:	e0 91 40 03 	lds	r30, 0x0340
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag && *actualState == MENU)
    14ea:	f0 91 41 03 	lds	r31, 0x0341
    14ee:	80 81       	ld	r24, Z
    14f0:	81 30       	cpi	r24, 0x01	; 1
    14f2:	d1 f2       	breq	.-76     	; 0x14a8 <MENU_waitForInput+0x20>
    14f4:	08 95       	ret

000014f6 <MENU_activate>:
    14f6:	90 93 41 03 	sts	0x0341, r25
    14fa:	80 93 40 03 	sts	0x0340, r24
    14fe:	70 93 3f 03 	sts	0x033F, r23
}

void MENU_activate(OP_STATE* state, INPUT_MODE* inputMode)
{
	actualState = state;
	actualInputMode = inputMode;
    1502:	60 93 3e 03 	sts	0x033E, r22
	menuActiveFlag = 1;
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	80 93 44 03 	sts	0x0344, r24
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
    150c:	21 de       	rcall	.-958    	; 0x1150 <MENU_buildMenus>
    150e:	80 91 4b 03 	lds	r24, 0x034B
	MENU_printMenu(mainMenu, mainMenu->noChilds);
    1512:	90 91 4c 03 	lds	r25, 0x034C
    1516:	fc 01       	movw	r30, r24
    1518:	62 81       	ldd	r22, Z+2	; 0x02
    151a:	73 81       	ldd	r23, Z+3	; 0x03
    151c:	00 df       	rcall	.-512    	; 0x131e <MENU_printMenu>
    151e:	b4 cf       	rjmp	.-152    	; 0x1488 <MENU_waitForInput>
    1520:	08 95       	ret

00001522 <MENU_printInfo>:
	MENU_waitForInput();
    1522:	8f d0       	rcall	.+286    	; 0x1642 <OLED_clear>
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	70 e0       	ldi	r23, 0x00	; 0
}

void MENU_printInfo()
{
	OLED_clear();
	OLED_goto(0,0);
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	6d d0       	rcall	.+218    	; 0x1608 <OLED_goto>
    152e:	84 e5       	ldi	r24, 0x54	; 84
    1530:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("GROUP 46");
    1532:	c0 d0       	rcall	.+384    	; 0x16b4 <OLED_printString>
    1534:	60 e0       	ldi	r22, 0x00	; 0
    1536:	70 e0       	ldi	r23, 0x00	; 0
    1538:	82 e0       	ldi	r24, 0x02	; 2
	OLED_goto(2,0);
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	65 d0       	rcall	.+202    	; 0x1608 <OLED_goto>
    153e:	8d e5       	ldi	r24, 0x5D	; 93
    1540:	92 e0       	ldi	r25, 0x02	; 2
    1542:	b8 d0       	rcall	.+368    	; 0x16b4 <OLED_printString>
    1544:	60 e0       	ldi	r22, 0x00	; 0
	OLED_printString("O.Kasperek");
    1546:	70 e0       	ldi	r23, 0x00	; 0
    1548:	83 e0       	ldi	r24, 0x03	; 3
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	5d d0       	rcall	.+186    	; 0x1608 <OLED_goto>
	OLED_goto(3,0);
    154e:	88 e6       	ldi	r24, 0x68	; 104
    1550:	92 e0       	ldi	r25, 0x02	; 2
    1552:	b0 d0       	rcall	.+352    	; 0x16b4 <OLED_printString>
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	84 e0       	ldi	r24, 0x04	; 4
	OLED_printString("L.Hagele");
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	55 d0       	rcall	.+170    	; 0x1608 <OLED_goto>
    155e:	81 e7       	ldi	r24, 0x71	; 113
    1560:	92 e0       	ldi	r25, 0x02	; 2
	OLED_goto(4,0);
    1562:	a8 d0       	rcall	.+336    	; 0x16b4 <OLED_printString>
    1564:	2f ef       	ldi	r18, 0xFF	; 255
    1566:	8f ef       	ldi	r24, 0xFF	; 255
    1568:	9c e2       	ldi	r25, 0x2C	; 44
    156a:	21 50       	subi	r18, 0x01	; 1
    156c:	80 40       	sbci	r24, 0x00	; 0
	OLED_printString("J.Haberny");
    156e:	90 40       	sbci	r25, 0x00	; 0
    1570:	e1 f7       	brne	.-8      	; 0x156a <MENU_printInfo+0x48>
    1572:	00 c0       	rjmp	.+0      	; 0x1574 <MENU_printInfo+0x52>
    1574:	00 c0       	rjmp	.+0      	; 0x1576 <MENU_printInfo+0x54>
    1576:	67 cf       	rjmp	.-306    	; 0x1446 <MENU_reactivate>
    1578:	08 95       	ret

0000157a <MENU_updateState>:
    157a:	cf 93       	push	r28
    157c:	df 93       	push	r29
    157e:	c0 91 42 03 	lds	r28, 0x0342
    1582:	d0 91 43 03 	lds	r29, 0x0343
    1586:	5d d0       	rcall	.+186    	; 0x1642 <OLED_clear>
	
	_delay_ms(3000);
	MENU_reactivate();
    1588:	60 e0       	ldi	r22, 0x00	; 0
    158a:	70 e0       	ldi	r23, 0x00	; 0
    158c:	80 e0       	ldi	r24, 0x00	; 0

void MENU_updateState()
{
	uint8_t newState = currentPosition;
	OLED_clear();
	OLED_goto(0,0);
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	3b d0       	rcall	.+118    	; 0x1608 <OLED_goto>
    1592:	8b e7       	ldi	r24, 0x7B	; 123
    1594:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("INPUT:");
    1596:	8e d0       	rcall	.+284    	; 0x16b4 <OLED_printString>
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	81 e0       	ldi	r24, 0x01	; 1
	OLED_goto(1,0);
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	33 d0       	rcall	.+102    	; 0x1608 <OLED_goto>
    15a2:	ce 01       	movw	r24, r28
    15a4:	99 27       	eor	r25, r25
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	91 05       	cpc	r25, r1
	switch (newState)
    15aa:	71 f0       	breq	.+28     	; 0x15c8 <MENU_updateState+0x4e>
    15ac:	82 30       	cpi	r24, 0x02	; 2
    15ae:	91 05       	cpc	r25, r1
    15b0:	a9 f0       	breq	.+42     	; 0x15dc <MENU_updateState+0x62>
    15b2:	89 2b       	or	r24, r25
    15b4:	e1 f4       	brne	.+56     	; 0x15ee <MENU_updateState+0x74>
    15b6:	e0 91 3e 03 	lds	r30, 0x033E
    15ba:	f0 91 3f 03 	lds	r31, 0x033F
	{
		case 0:
			*actualInputMode = SLIDER;
    15be:	10 82       	st	Z, r1
    15c0:	82 e8       	ldi	r24, 0x82	; 130
    15c2:	92 e0       	ldi	r25, 0x02	; 2
    15c4:	77 d0       	rcall	.+238    	; 0x16b4 <OLED_printString>
    15c6:	13 c0       	rjmp	.+38     	; 0x15ee <MENU_updateState+0x74>
			OLED_printString("SLIDER");
    15c8:	e0 91 3e 03 	lds	r30, 0x033E
    15cc:	f0 91 3f 03 	lds	r31, 0x033F
			break;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
		
		case 1:
			*actualInputMode = JOYSTICK;
    15d2:	80 83       	st	Z, r24
    15d4:	89 e8       	ldi	r24, 0x89	; 137
    15d6:	92 e0       	ldi	r25, 0x02	; 2
    15d8:	6d d0       	rcall	.+218    	; 0x16b4 <OLED_printString>
    15da:	09 c0       	rjmp	.+18     	; 0x15ee <MENU_updateState+0x74>
    15dc:	e0 91 3e 03 	lds	r30, 0x033E
			OLED_printString("JOYSTICK");
    15e0:	f0 91 3f 03 	lds	r31, 0x033F
    15e4:	82 e0       	ldi	r24, 0x02	; 2
			break;
    15e6:	80 83       	st	Z, r24
		
		case 2:
			*actualInputMode = PC;
    15e8:	81 e4       	ldi	r24, 0x41	; 65
    15ea:	92 e0       	ldi	r25, 0x02	; 2
    15ec:	63 d0       	rcall	.+198    	; 0x16b4 <OLED_printString>
    15ee:	2f ef       	ldi	r18, 0xFF	; 255
    15f0:	8f ef       	ldi	r24, 0xFF	; 255
    15f2:	9e e0       	ldi	r25, 0x0E	; 14
			OLED_printString("PC");
    15f4:	21 50       	subi	r18, 0x01	; 1
    15f6:	80 40       	sbci	r24, 0x00	; 0
    15f8:	90 40       	sbci	r25, 0x00	; 0
    15fa:	e1 f7       	brne	.-8      	; 0x15f4 <MENU_updateState+0x7a>
    15fc:	00 c0       	rjmp	.+0      	; 0x15fe <MENU_updateState+0x84>
    15fe:	00 00       	nop
    1600:	22 df       	rcall	.-444    	; 0x1446 <MENU_reactivate>
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	08 95       	ret

00001608 <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
    1608:	26 2f       	mov	r18, r22
    160a:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
    160c:	75 95       	asr	r23
    160e:	67 95       	ror	r22
    1610:	75 95       	asr	r23
    1612:	67 95       	ror	r22
    1614:	75 95       	asr	r23
    1616:	67 95       	ror	r22
    1618:	75 95       	asr	r23
    161a:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
    161c:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
    161e:	80 55       	subi	r24, 0x50	; 80
    1620:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
    1622:	e0 91 11 01 	lds	r30, 0x0111
    1626:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    162a:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
    162c:	e0 91 11 01 	lds	r30, 0x0111
    1630:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1634:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
    1636:	e0 91 11 01 	lds	r30, 0x0111
    163a:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    163e:	60 83       	st	Z, r22
    1640:	08 95       	ret

00001642 <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
    1642:	1f 93       	push	r17
    1644:	cf 93       	push	r28
    1646:	df 93       	push	r29
    1648:	c1 e0       	ldi	r28, 0x01	; 1
    164a:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1650:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	d8 df       	rcall	.-80     	; 0x1608 <OLED_goto>
    1658:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
    165a:	e0 91 0f 01 	lds	r30, 0x010F
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    165e:	f0 91 10 01 	lds	r31, 0x0110
    1662:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1664:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1666:	80 38       	cpi	r24, 0x80	; 128
    1668:	c1 f7       	brne	.-16     	; 0x165a <OLED_clear+0x18>
    166a:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
    166c:	9d 2f       	mov	r25, r29
    166e:	21 96       	adiw	r28, 0x01	; 1
    1670:	c9 30       	cpi	r28, 0x09	; 9
    1672:	d1 05       	cpc	r29, r1
    1674:	71 f7       	brne	.-36     	; 0x1652 <OLED_clear+0x10>
    1676:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	08 95       	ret

0000167e <OLED_printCharacter>:
    167e:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	22 0f       	add	r18, r18
    1686:	33 1f       	adc	r19, r19
    1688:	22 0f       	add	r18, r18
    168a:	33 1f       	adc	r19, r19
    168c:	22 0f       	add	r18, r18
    168e:	33 1f       	adc	r19, r19
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	20 59       	subi	r18, 0x90	; 144
    1696:	3f 4f       	sbci	r19, 0xFF	; 255
    1698:	f9 01       	movw	r30, r18
    169a:	e8 0f       	add	r30, r24
    169c:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
    169e:	e4 91       	lpm	r30, Z
    16a0:	a0 91 0f 01 	lds	r26, 0x010F
    16a4:	b0 91 10 01 	lds	r27, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16a8:	ec 93       	st	X, r30
    16aa:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
    16ac:	88 30       	cpi	r24, 0x08	; 8
    16ae:	91 05       	cpc	r25, r1
    16b0:	99 f7       	brne	.-26     	; 0x1698 <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
    16b2:	08 95       	ret

000016b4 <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
    16bc:	10 e0       	ldi	r17, 0x00	; 0
    16be:	06 c0       	rjmp	.+12     	; 0x16cc <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
    16c0:	fe 01       	movw	r30, r28
    16c2:	e8 0f       	add	r30, r24
    16c4:	f9 1f       	adc	r31, r25
    16c6:	80 81       	ld	r24, Z
    16c8:	da df       	rcall	.-76     	; 0x167e <OLED_printCharacter>
    16ca:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
    16cc:	81 2f       	mov	r24, r17
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	fe 01       	movw	r30, r28
    16d2:	01 90       	ld	r0, Z+
    16d4:	00 20       	and	r0, r0
    16d6:	e9 f7       	brne	.-6      	; 0x16d2 <OLED_printString+0x1e>
    16d8:	31 97       	sbiw	r30, 0x01	; 1
    16da:	ec 1b       	sub	r30, r28
    16dc:	fd 0b       	sbc	r31, r29
    16de:	8e 17       	cp	r24, r30
    16e0:	9f 07       	cpc	r25, r31
    16e2:	70 f3       	brcs	.-36     	; 0x16c0 <OLED_printString+0xc>
    16e4:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
    16e6:	cf 91       	pop	r28
    16e8:	1f 91       	pop	r17
    16ea:	08 95       	ret

000016ec <OLED_printArrow>:
    16ec:	e0 91 0f 01 	lds	r30, 0x010F
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
    16f0:	f0 91 10 01 	lds	r31, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16f4:	88 e1       	ldi	r24, 0x18	; 24
    16f6:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    16f8:	e0 91 0f 01 	lds	r30, 0x010F
    16fc:	f0 91 10 01 	lds	r31, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1700:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
    1702:	e0 91 0f 01 	lds	r30, 0x010F
    1706:	f0 91 10 01 	lds	r31, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    170a:	9e e7       	ldi	r25, 0x7E	; 126
    170c:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
    170e:	e0 91 0f 01 	lds	r30, 0x010F
    1712:	f0 91 10 01 	lds	r31, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1716:	9c e3       	ldi	r25, 0x3C	; 60
    1718:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    171a:	e0 91 0f 01 	lds	r30, 0x010F
    171e:	f0 91 10 01 	lds	r31, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1722:	80 83       	st	Z, r24
    1724:	08 95       	ret

00001726 <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    1726:	1f 93       	push	r17
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	c1 e0       	ldi	r28, 0x01	; 1
    172e:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1734:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	70 e0       	ldi	r23, 0x00	; 0
    173a:	66 df       	rcall	.-308    	; 0x1608 <OLED_goto>
    173c:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    173e:	e0 91 0f 01 	lds	r30, 0x010F
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    1742:	f0 91 10 01 	lds	r31, 0x0110
    1746:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1748:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    174a:	85 30       	cpi	r24, 0x05	; 5
    174c:	c1 f7       	brne	.-16     	; 0x173e <OLED_clearArrow+0x18>
    174e:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1750:	9d 2f       	mov	r25, r29
    1752:	21 96       	adiw	r28, 0x01	; 1
    1754:	c9 30       	cpi	r28, 0x09	; 9
    1756:	d1 05       	cpc	r29, r1
    1758:	71 f7       	brne	.-36     	; 0x1736 <OLED_clearArrow+0x10>
    175a:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	08 95       	ret

00001762 <OLED_moveArrow>:
    1762:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    1764:	df 93       	push	r29
    1766:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
    1768:	de df       	rcall	.-68     	; 0x1726 <OLED_clearArrow>
    176a:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
    176c:	70 e0       	ldi	r23, 0x00	; 0
    176e:	ce 01       	movw	r24, r28
    1770:	4b df       	rcall	.-362    	; 0x1608 <OLED_goto>
    1772:	bc df       	rcall	.-136    	; 0x16ec <OLED_printArrow>
    1774:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
    1776:	cf 91       	pop	r28
    1778:	08 95       	ret

0000177a <OLED_setContrast>:
}
    177a:	e0 91 11 01 	lds	r30, 0x0111
    177e:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1782:	91 e8       	ldi	r25, 0x81	; 129
    1784:	90 83       	st	Z, r25
void OLED_setContrast(uint8_t contrast)
{
	// activate contrast contol
	OLED_writeByteToOLED(oled_cmd, 0x81);
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
    1786:	e0 91 11 01 	lds	r30, 0x0111
    178a:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    178e:	80 83       	st	Z, r24
    1790:	08 95       	ret

00001792 <OLED_fadeIn>:
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
}

void OLED_fadeIn(void)
{
    1792:	cf 93       	push	r28
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    1794:	c0 e0       	ldi	r28, 0x00	; 0
	{
		OLED_setContrast(i);
    1796:	8c 2f       	mov	r24, r28
    1798:	f0 df       	rcall	.-32     	; 0x177a <OLED_setContrast>
    179a:	83 e3       	ldi	r24, 0x33	; 51
    179c:	93 e1       	ldi	r25, 0x13	; 19
    179e:	01 97       	sbiw	r24, 0x01	; 1
    17a0:	f1 f7       	brne	.-4      	; 0x179e <OLED_fadeIn+0xc>
    17a2:	cf 5f       	subi	r28, 0xFF	; 255
}

void OLED_fadeIn(void)
{
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    17a4:	cf 3f       	cpi	r28, 0xFF	; 255
    17a6:	b9 f7       	brne	.-18     	; 0x1796 <OLED_fadeIn+0x4>
    17a8:	cf 91       	pop	r28
	{
		OLED_setContrast(i);
		_delay_ms(4);
	}
}
    17aa:	08 95       	ret

000017ac <OLED_splashScreen>:
    17ac:	82 e9       	ldi	r24, 0x92	; 146
	}
}

void OLED_splashScreen(void)
{
	printf("run splash screen...\n");
    17ae:	92 e0       	ldi	r25, 0x02	; 2
    17b0:	55 d3       	rcall	.+1706   	; 0x1e5c <puts>
    17b2:	80 e0       	ldi	r24, 0x00	; 0
	
	OLED_setContrast(0);
    17b4:	e2 df       	rcall	.-60     	; 0x177a <OLED_setContrast>
    17b6:	2f ef       	ldi	r18, 0xFF	; 255
    17b8:	8f e7       	ldi	r24, 0x7F	; 127
    17ba:	97 e0       	ldi	r25, 0x07	; 7
    17bc:	21 50       	subi	r18, 0x01	; 1
    17be:	80 40       	sbci	r24, 0x00	; 0
    17c0:	90 40       	sbci	r25, 0x00	; 0
    17c2:	e1 f7       	brne	.-8      	; 0x17bc <OLED_splashScreen+0x10>
    17c4:	00 c0       	rjmp	.+0      	; 0x17c6 <OLED_splashScreen+0x1a>
    17c6:	00 00       	nop
    17c8:	64 e0       	ldi	r22, 0x04	; 4
    17ca:	70 e0       	ldi	r23, 0x00	; 0
	
	_delay_ms(500);
	OLED_goto(2,4);
    17cc:	82 e0       	ldi	r24, 0x02	; 2
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	1b df       	rcall	.-458    	; 0x1608 <OLED_goto>
    17d2:	87 ea       	ldi	r24, 0xA7	; 167
    17d4:	92 e0       	ldi	r25, 0x02	; 2
    17d6:	6e df       	rcall	.-292    	; 0x16b4 <OLED_printString>
	OLED_printString("Group 46 Soft");
    17d8:	dc df       	rcall	.-72     	; 0x1792 <OLED_fadeIn>
    17da:	2f ef       	ldi	r18, 0xFF	; 255
    17dc:	8f e7       	ldi	r24, 0x7F	; 127
    17de:	97 e0       	ldi	r25, 0x07	; 7
	OLED_fadeIn();
    17e0:	21 50       	subi	r18, 0x01	; 1
    17e2:	80 40       	sbci	r24, 0x00	; 0
    17e4:	90 40       	sbci	r25, 0x00	; 0
    17e6:	e1 f7       	brne	.-8      	; 0x17e0 <OLED_splashScreen+0x34>
    17e8:	00 c0       	rjmp	.+0      	; 0x17ea <OLED_splashScreen+0x3e>
    17ea:	00 00       	nop
    17ec:	2a df       	rcall	.-428    	; 0x1642 <OLED_clear>
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	c4 df       	rcall	.-120    	; 0x177a <OLED_setContrast>
    17f2:	2f ef       	ldi	r18, 0xFF	; 255
    17f4:	8f ef       	ldi	r24, 0xFF	; 255
	_delay_ms(500);
	
 	OLED_clear();
    17f6:	92 e0       	ldi	r25, 0x02	; 2
    17f8:	21 50       	subi	r18, 0x01	; 1
 	OLED_setContrast(0);
    17fa:	80 40       	sbci	r24, 0x00	; 0
    17fc:	90 40       	sbci	r25, 0x00	; 0
    17fe:	e1 f7       	brne	.-8      	; 0x17f8 <OLED_splashScreen+0x4c>
    1800:	00 c0       	rjmp	.+0      	; 0x1802 <OLED_splashScreen+0x56>
    1802:	00 c0       	rjmp	.+0      	; 0x1804 <OLED_splashScreen+0x58>
    1804:	6c e1       	ldi	r22, 0x1C	; 28
    1806:	70 e0       	ldi	r23, 0x00	; 0
    1808:	83 e0       	ldi	r24, 0x03	; 3
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	fd de       	rcall	.-518    	; 0x1608 <OLED_goto>
    180e:	85 eb       	ldi	r24, 0xB5	; 181
    1810:	92 e0       	ldi	r25, 0x02	; 2
 	
 	_delay_ms(200);
 	OLED_goto(3,28);
    1812:	50 df       	rcall	.-352    	; 0x16b4 <OLED_printString>
    1814:	68 e1       	ldi	r22, 0x18	; 24
    1816:	70 e0       	ldi	r23, 0x00	; 0
    1818:	84 e0       	ldi	r24, 0x04	; 4
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	f5 de       	rcall	.-534    	; 0x1608 <OLED_goto>
 	OLED_printString("proudly");
    181e:	8d eb       	ldi	r24, 0xBD	; 189
    1820:	92 e0       	ldi	r25, 0x02	; 2
    1822:	48 df       	rcall	.-368    	; 0x16b4 <OLED_printString>
    1824:	b6 df       	rcall	.-148    	; 0x1792 <OLED_fadeIn>
 	OLED_goto(4,24);	
    1826:	2f ef       	ldi	r18, 0xFF	; 255
    1828:	8f e7       	ldi	r24, 0x7F	; 127
    182a:	97 e0       	ldi	r25, 0x07	; 7
    182c:	21 50       	subi	r18, 0x01	; 1
    182e:	80 40       	sbci	r24, 0x00	; 0
    1830:	90 40       	sbci	r25, 0x00	; 0
 	OLED_printString("presents");
    1832:	e1 f7       	brne	.-8      	; 0x182c <OLED_splashScreen+0x80>
    1834:	00 c0       	rjmp	.+0      	; 0x1836 <OLED_splashScreen+0x8a>
    1836:	00 00       	nop
    1838:	04 df       	rcall	.-504    	; 0x1642 <OLED_clear>
 	OLED_fadeIn();
    183a:	80 e0       	ldi	r24, 0x00	; 0
    183c:	9e df       	rcall	.-196    	; 0x177a <OLED_setContrast>
    183e:	2f ef       	ldi	r18, 0xFF	; 255
    1840:	8f ef       	ldi	r24, 0xFF	; 255
    1842:	92 e0       	ldi	r25, 0x02	; 2
    1844:	21 50       	subi	r18, 0x01	; 1
    1846:	80 40       	sbci	r24, 0x00	; 0
    1848:	90 40       	sbci	r25, 0x00	; 0
    184a:	e1 f7       	brne	.-8      	; 0x1844 <OLED_splashScreen+0x98>
    184c:	00 c0       	rjmp	.+0      	; 0x184e <OLED_splashScreen+0xa2>
    184e:	00 c0       	rjmp	.+0      	; 0x1850 <OLED_splashScreen+0xa4>
 	_delay_ms(500);
 	
 	OLED_clear();
    1850:	6c e1       	ldi	r22, 0x1C	; 28
    1852:	70 e0       	ldi	r23, 0x00	; 0
 	OLED_setContrast(0);
    1854:	83 e0       	ldi	r24, 0x03	; 3
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	d7 de       	rcall	.-594    	; 0x1608 <OLED_goto>
    185a:	86 ec       	ldi	r24, 0xC6	; 198
    185c:	92 e0       	ldi	r25, 0x02	; 2
    185e:	2a df       	rcall	.-428    	; 0x16b4 <OLED_printString>
    1860:	98 df       	rcall	.-208    	; 0x1792 <OLED_fadeIn>
    1862:	2f ef       	ldi	r18, 0xFF	; 255
    1864:	8f ef       	ldi	r24, 0xFF	; 255
    1866:	9e e0       	ldi	r25, 0x0E	; 14
    1868:	21 50       	subi	r18, 0x01	; 1
    186a:	80 40       	sbci	r24, 0x00	; 0
 	
 	_delay_ms(200);
 	OLED_goto(3, 28);
    186c:	90 40       	sbci	r25, 0x00	; 0
    186e:	e1 f7       	brne	.-8      	; 0x1868 <OLED_splashScreen+0xbc>
    1870:	00 c0       	rjmp	.+0      	; 0x1872 <OLED_splashScreen+0xc6>
    1872:	00 00       	nop
    1874:	e6 de       	rcall	.-564    	; 0x1642 <OLED_clear>
    1876:	80 e5       	ldi	r24, 0x50	; 80
 	OLED_printString("FIFA 18");
    1878:	80 df       	rcall	.-256    	; 0x177a <OLED_setContrast>
    187a:	8e ec       	ldi	r24, 0xCE	; 206
    187c:	92 e0       	ldi	r25, 0x02	; 2
    187e:	ee c2       	rjmp	.+1500   	; 0x1e5c <puts>
 	OLED_fadeIn();
    1880:	08 95       	ret

00001882 <OLED_init>:
    1882:	e0 91 11 01 	lds	r30, 0x0111
    1886:	f0 91 12 01 	lds	r31, 0x0112
    188a:	8e ea       	ldi	r24, 0xAE	; 174
    188c:	80 83       	st	Z, r24
    188e:	e0 91 11 01 	lds	r30, 0x0111
    1892:	f0 91 12 01 	lds	r31, 0x0112
 	_delay_ms(1000);
	
	// clean up
	OLED_clear();
    1896:	81 ea       	ldi	r24, 0xA1	; 161
    1898:	80 83       	st	Z, r24
	OLED_setContrast(0x50); // back to standard contrast
    189a:	e0 91 11 01 	lds	r30, 0x0111
    189e:	f0 91 12 01 	lds	r31, 0x0112
	
	printf("splash screen done...\n");
    18a2:	8a ed       	ldi	r24, 0xDA	; 218
    18a4:	80 83       	st	Z, r24
    18a6:	e0 91 11 01 	lds	r30, 0x0111
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
    18aa:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18ae:	82 e1       	ldi	r24, 0x12	; 18
    18b0:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    18b2:	e0 91 11 01 	lds	r30, 0x0111
    18b6:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18ba:	88 ec       	ldi	r24, 0xC8	; 200
    18bc:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    18be:	e0 91 11 01 	lds	r30, 0x0111
    18c2:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18c6:	88 ea       	ldi	r24, 0xA8	; 168
    18c8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    18ca:	e0 91 11 01 	lds	r30, 0x0111
    18ce:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18d2:	8f e3       	ldi	r24, 0x3F	; 63
    18d4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    18d6:	e0 91 11 01 	lds	r30, 0x0111
    18da:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18de:	85 ed       	ldi	r24, 0xD5	; 213
    18e0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
    18e2:	e0 91 11 01 	lds	r30, 0x0111
    18e6:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18ea:	80 e8       	ldi	r24, 0x80	; 128
    18ec:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    18ee:	e0 91 11 01 	lds	r30, 0x0111
    18f2:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18f6:	81 e8       	ldi	r24, 0x81	; 129
    18f8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    18fa:	e0 91 11 01 	lds	r30, 0x0111
    18fe:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1902:	80 e5       	ldi	r24, 0x50	; 80
    1904:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    1906:	e0 91 11 01 	lds	r30, 0x0111
    190a:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    190e:	89 ed       	ldi	r24, 0xD9	; 217
    1910:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
    1912:	e0 91 11 01 	lds	r30, 0x0111
    1916:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    191a:	81 e2       	ldi	r24, 0x21	; 33
    191c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    191e:	e0 91 11 01 	lds	r30, 0x0111
    1922:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1926:	80 e2       	ldi	r24, 0x20	; 32
    1928:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    192a:	e0 91 11 01 	lds	r30, 0x0111
    192e:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1932:	82 e0       	ldi	r24, 0x02	; 2
    1934:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    1936:	e0 91 11 01 	lds	r30, 0x0111
    193a:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    193e:	8b ed       	ldi	r24, 0xDB	; 219
    1940:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    1942:	e0 91 11 01 	lds	r30, 0x0111
    1946:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    194a:	80 e3       	ldi	r24, 0x30	; 48
    194c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    194e:	e0 91 11 01 	lds	r30, 0x0111
    1952:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1956:	8d ea       	ldi	r24, 0xAD	; 173
    1958:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    195a:	e0 91 11 01 	lds	r30, 0x0111
    195e:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1962:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    1964:	e0 91 11 01 	lds	r30, 0x0111
    1968:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    196c:	84 ea       	ldi	r24, 0xA4	; 164
    196e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    1970:	e0 91 11 01 	lds	r30, 0x0111
    1974:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1978:	86 ea       	ldi	r24, 0xA6	; 166
    197a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    197c:	e0 91 11 01 	lds	r30, 0x0111
    1980:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1984:	8f ea       	ldi	r24, 0xAF	; 175
    1986:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    1988:	5c de       	rcall	.-840    	; 0x1642 <OLED_clear>
    198a:	10 cf       	rjmp	.-480    	; 0x17ac <OLED_splashScreen>
	OLED_splashScreen();
    198c:	08 95       	ret

0000198e <SLI_init>:
uint8_t SLI_startup = 1; 

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    198e:	10 92 69 03 	sts	0x0369, r1
	currentSliPosition.L_abs = 0;
    1992:	10 92 6a 03 	sts	0x036A, r1
	currentSliPosition.R_per = 0;
    1996:	10 92 6b 03 	sts	0x036B, r1
	currentSliPosition.L_per = 0;
    199a:	10 92 6c 03 	sts	0x036C, r1
    199e:	08 95       	ret

000019a0 <SLI_requestCurrentPosition>:

//------------------------------------------------------------------------------
// This function requests an AD conversion for the specified slider.
void SLI_requestCurrentPosition(uint8_t side)
{
	if(side == 'l')
    19a0:	8c 36       	cpi	r24, 0x6C	; 108
    19a2:	39 f4       	brne	.+14     	; 0x19b2 <SLI_requestCurrentPosition+0x12>
	{
		ADC_request(L_channel, adc_ext_ram);
    19a4:	60 91 06 01 	lds	r22, 0x0106
    19a8:	70 91 07 01 	lds	r23, 0x0107
    19ac:	83 e0       	ldi	r24, 0x03	; 3
    19ae:	7d c0       	rjmp	.+250    	; 0x1aaa <ADC_request>
    19b0:	08 95       	ret
    19b2:	82 37       	cpi	r24, 0x72	; 114
	}

	else if(side == 'r')
    19b4:	31 f4       	brne	.+12     	; 0x19c2 <SLI_requestCurrentPosition+0x22>
    19b6:	60 91 06 01 	lds	r22, 0x0106
	{
		ADC_request(R_channel, adc_ext_ram);
    19ba:	70 91 07 01 	lds	r23, 0x0107
    19be:	84 e0       	ldi	r24, 0x04	; 4
    19c0:	74 c0       	rjmp	.+232    	; 0x1aaa <ADC_request>
    19c2:	08 95       	ret

000019c4 <SLI_updatePosition>:
    19c4:	8c 36       	cpi	r24, 0x6C	; 108
    19c6:	71 f4       	brne	.+28     	; 0x19e4 <SLI_updatePosition+0x20>
// received.
void SLI_updatePosition(uint8_t side)
{
	if(side == 'l')
	{
		currentSliPosition.L_abs = ADC_read(adc_ext_ram);
    19c8:	80 91 06 01 	lds	r24, 0x0106
    19cc:	90 91 07 01 	lds	r25, 0x0107
    19d0:	94 d0       	rcall	.+296    	; 0x1afa <ADC_read>
    19d2:	80 93 6a 03 	sts	0x036A, r24
    19d6:	24 e6       	ldi	r18, 0x64	; 100
		currentSliPosition.L_per = currentSliPosition.L_abs * 100 / 256;
    19d8:	82 9f       	mul	r24, r18
    19da:	c0 01       	movw	r24, r0
    19dc:	11 24       	eor	r1, r1
    19de:	90 93 6c 03 	sts	0x036C, r25
    19e2:	08 95       	ret
    19e4:	82 37       	cpi	r24, 0x72	; 114
		//printf("CurrSliPos_L: %d, CurrSliPos_R: %d\n", currentSliPosition.L_per, currentSliPosition.R_per);
	}

	else if(side == 'r')
    19e6:	69 f4       	brne	.+26     	; 0x1a02 <SLI_updatePosition+0x3e>
    19e8:	80 91 06 01 	lds	r24, 0x0106
	{
		currentSliPosition.R_abs = ADC_read(adc_ext_ram);
    19ec:	90 91 07 01 	lds	r25, 0x0107
    19f0:	84 d0       	rcall	.+264    	; 0x1afa <ADC_read>
    19f2:	80 93 69 03 	sts	0x0369, r24
    19f6:	24 e6       	ldi	r18, 0x64	; 100
    19f8:	82 9f       	mul	r24, r18
		currentSliPosition.R_per = currentSliPosition.R_abs * 100 / 256;
    19fa:	c0 01       	movw	r24, r0
    19fc:	11 24       	eor	r1, r1
    19fe:	90 93 6b 03 	sts	0x036B, r25
    1a02:	08 95       	ret

00001a04 <SLI_getPosition>:
    1a04:	82 e7       	ldi	r24, 0x72	; 114
    1a06:	cc df       	rcall	.-104    	; 0x19a0 <SLI_requestCurrentPosition>
}

//
SLI_position_t SLI_getPosition()
{
	SLI_requestCurrentPosition('r');
    1a08:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a0a:	8a 95       	dec	r24
    1a0c:	f1 f7       	brne	.-4      	; 0x1a0a <SLI_getPosition+0x6>
    1a0e:	00 00       	nop
    1a10:	82 e7       	ldi	r24, 0x72	; 114
	_delay_us(60);
	SLI_updatePosition('r');
    1a12:	d8 df       	rcall	.-80     	; 0x19c4 <SLI_updatePosition>
    1a14:	60 91 69 03 	lds	r22, 0x0369
	
	return currentSliPosition;
    1a18:	70 91 6a 03 	lds	r23, 0x036A
    1a1c:	80 91 6b 03 	lds	r24, 0x036B
    1a20:	90 91 6c 03 	lds	r25, 0x036C
    1a24:	08 95       	ret

00001a26 <SPI_init>:

void SPI_init()
{
	//init external interrupt INT2 on falling edge
	#if defined(__AVR_ATmega162__)
		set_bit(GICR, INT2);
    1a26:	8b b7       	in	r24, 0x3b	; 59
    1a28:	80 62       	ori	r24, 0x20	; 32
    1a2a:	8b bf       	out	0x3b, r24	; 59
		clear_bit(EMCUCR, ISC2);
    1a2c:	86 b7       	in	r24, 0x36	; 54
    1a2e:	8e 7f       	andi	r24, 0xFE	; 254
    1a30:	86 bf       	out	0x36, r24	; 54
		
		// Set _SS, MOSI and SCK output, all others input
		DDR_SPI |= (1<<SS_CAN_CONTROLLER_PIN_MODE) | (1<<MOSI_PIN) | (1<<SCK_PIN);
    1a32:	87 b3       	in	r24, 0x17	; 23
    1a34:	80 6b       	ori	r24, 0xB0	; 176
    1a36:	87 bb       	out	0x17, r24	; 23
	#endif
	
	

	// Enable SPI, Master, set clock rate fck/4
	SPCR = (1<<SPE) | (1<<MSTR);
    1a38:	80 e5       	ldi	r24, 0x50	; 80
    1a3a:	8d b9       	out	0x0d, r24	; 13
	
	// clock rate fck/2
	SPSR = (1<<SPI2X);
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	8e b9       	out	0x0e, r24	; 14

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORT_SPI, SS_CAN_CONTROLLER_PIN);
    1a40:	c4 9a       	sbi	0x18, 4	; 24
    1a42:	08 95       	ret

00001a44 <SPI_send>:
}

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    1a44:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    1a46:	77 9b       	sbis	0x0e, 7	; 14
    1a48:	fe cf       	rjmp	.-4      	; 0x1a46 <SPI_send+0x2>
}
    1a4a:	08 95       	ret

00001a4c <SPI_receive>:

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    1a4c:	8f ef       	ldi	r24, 0xFF	; 255
    1a4e:	fa df       	rcall	.-12     	; 0x1a44 <SPI_send>
    1a50:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    1a52:	fe cf       	rjmp	.-4      	; 0x1a50 <SPI_receive+0x4>
    1a54:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    1a56:	08 95       	ret

00001a58 <SPI_activateSlave>:

	return data;
}
    1a58:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    1a5a:	01 c0       	rjmp	.+2      	; 0x1a5e <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    1a5c:	c4 98       	cbi	0x18, 4	; 24
    1a5e:	08 95       	ret

00001a60 <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    1a60:	81 11       	cpse	r24, r1
    1a62:	01 c0       	rjmp	.+2      	; 0x1a66 <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    1a64:	c4 9a       	sbi	0x18, 4	; 24
    1a66:	08 95       	ret

00001a68 <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1a68:	5d 9b       	sbis	0x0b, 5	; 11
    1a6a:	fe cf       	rjmp	.-4      	; 0x1a68 <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    1a6c:	8c b9       	out	0x0c, r24	; 12
    1a6e:	08 95       	ret

00001a70 <uartReceive>:
//UART_Message_t uartReceive()
uint8_t uartReceive()
{

	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    1a70:	5f 9b       	sbis	0x0b, 7	; 11
    1a72:	fe cf       	rjmp	.-4      	; 0x1a70 <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    1a74:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;

}
    1a76:	08 95       	ret

00001a78 <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    1a78:	ef 92       	push	r14
    1a7a:	ff 92       	push	r15
    1a7c:	0f 93       	push	r16
    1a7e:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    1a80:	bb 27       	eor	r27, r27
    1a82:	a1 2f       	mov	r26, r17
    1a84:	90 2f       	mov	r25, r16
    1a86:	8f 2d       	mov	r24, r15
    1a88:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    1a8a:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1a8c:	88 e1       	ldi	r24, 0x18	; 24
    1a8e:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    1a90:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	#if defined(__AVR_ATmega162__)
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    1a92:	8e e8       	ldi	r24, 0x8E	; 142
    1a94:	80 bd       	out	0x20, r24	; 32
	
	#if defined(__AVR_ATmega2560__)
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	#endif
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    1a96:	68 e3       	ldi	r22, 0x38	; 56
    1a98:	7d e0       	ldi	r23, 0x0D	; 13
    1a9a:	84 e3       	ldi	r24, 0x34	; 52
    1a9c:	9d e0       	ldi	r25, 0x0D	; 13
    1a9e:	7e d1       	rcall	.+764    	; 0x1d9c <fdevopen>
    1aa0:	1f 91       	pop	r17
    1aa2:	0f 91       	pop	r16
    1aa4:	ff 90       	pop	r15
    1aa6:	ef 90       	pop	r14
    1aa8:	08 95       	ret

00001aaa <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    1aaa:	9b 01       	movw	r18, r22
	
	switch(channel){
    1aac:	82 30       	cpi	r24, 0x02	; 2
    1aae:	71 f0       	breq	.+28     	; 0x1acc <ADC_request+0x22>
    1ab0:	18 f4       	brcc	.+6      	; 0x1ab8 <ADC_request+0xe>
    1ab2:	81 30       	cpi	r24, 0x01	; 1
    1ab4:	31 f0       	breq	.+12     	; 0x1ac2 <ADC_request+0x18>
    1ab6:	19 c0       	rjmp	.+50     	; 0x1aea <ADC_request+0x40>
    1ab8:	83 30       	cpi	r24, 0x03	; 3
    1aba:	69 f0       	breq	.+26     	; 0x1ad6 <ADC_request+0x2c>
    1abc:	84 30       	cpi	r24, 0x04	; 4
    1abe:	81 f0       	breq	.+32     	; 0x1ae0 <ADC_request+0x36>
    1ac0:	14 c0       	rjmp	.+40     	; 0x1aea <ADC_request+0x40>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    1ac2:	64 e0       	ldi	r22, 0x04	; 4
    1ac4:	c9 01       	movw	r24, r18
    1ac6:	0c 94 98 04 	jmp	0x930	; 0x930 <saveToAddress>
			break;
    1aca:	08 95       	ret
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    1acc:	65 e0       	ldi	r22, 0x05	; 5
    1ace:	c9 01       	movw	r24, r18
    1ad0:	0c 94 98 04 	jmp	0x930	; 0x930 <saveToAddress>
			break;
    1ad4:	08 95       	ret
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    1ad6:	66 e0       	ldi	r22, 0x06	; 6
    1ad8:	c9 01       	movw	r24, r18
    1ada:	0c 94 98 04 	jmp	0x930	; 0x930 <saveToAddress>
			break;
    1ade:	08 95       	ret
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    1ae0:	67 e0       	ldi	r22, 0x07	; 7
    1ae2:	c9 01       	movw	r24, r18
    1ae4:	0c 94 98 04 	jmp	0x930	; 0x930 <saveToAddress>
			break;
    1ae8:	08 95       	ret
			
		default:
			printf("Problems with ADC...");
    1aea:	8d e0       	ldi	r24, 0x0D	; 13
    1aec:	93 e0       	ldi	r25, 0x03	; 3
    1aee:	9f 93       	push	r25
    1af0:	8f 93       	push	r24
    1af2:	9e d1       	rcall	.+828    	; 0x1e30 <printf>
    1af4:	0f 90       	pop	r0
			break;
    1af6:	0f 90       	pop	r0
    1af8:	08 95       	ret

00001afa <ADC_read>:
    1afa:	0c 94 95 04 	jmp	0x92a	; 0x92a <readFromAddress>
}

uint8_t ADC_read(volatile char *ADC_ADDRESS)
{
	return (uint8_t)readFromAddress(ADC_ADDRESS);
}
    1afe:	08 95       	ret

00001b00 <__divmodhi4>:
    1b00:	97 fb       	bst	r25, 7
    1b02:	07 2e       	mov	r0, r23
    1b04:	16 f4       	brtc	.+4      	; 0x1b0a <__divmodhi4+0xa>
    1b06:	00 94       	com	r0
    1b08:	06 d0       	rcall	.+12     	; 0x1b16 <__divmodhi4_neg1>
    1b0a:	77 fd       	sbrc	r23, 7
    1b0c:	08 d0       	rcall	.+16     	; 0x1b1e <__divmodhi4_neg2>
    1b0e:	0b d0       	rcall	.+22     	; 0x1b26 <__udivmodhi4>
    1b10:	07 fc       	sbrc	r0, 7
    1b12:	05 d0       	rcall	.+10     	; 0x1b1e <__divmodhi4_neg2>
    1b14:	3e f4       	brtc	.+14     	; 0x1b24 <__divmodhi4_exit>

00001b16 <__divmodhi4_neg1>:
    1b16:	90 95       	com	r25
    1b18:	81 95       	neg	r24
    1b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1c:	08 95       	ret

00001b1e <__divmodhi4_neg2>:
    1b1e:	70 95       	com	r23
    1b20:	61 95       	neg	r22
    1b22:	7f 4f       	sbci	r23, 0xFF	; 255

00001b24 <__divmodhi4_exit>:
    1b24:	08 95       	ret

00001b26 <__udivmodhi4>:
    1b26:	aa 1b       	sub	r26, r26
    1b28:	bb 1b       	sub	r27, r27
    1b2a:	51 e1       	ldi	r21, 0x11	; 17
    1b2c:	07 c0       	rjmp	.+14     	; 0x1b3c <__udivmodhi4_ep>

00001b2e <__udivmodhi4_loop>:
    1b2e:	aa 1f       	adc	r26, r26
    1b30:	bb 1f       	adc	r27, r27
    1b32:	a6 17       	cp	r26, r22
    1b34:	b7 07       	cpc	r27, r23
    1b36:	10 f0       	brcs	.+4      	; 0x1b3c <__udivmodhi4_ep>
    1b38:	a6 1b       	sub	r26, r22
    1b3a:	b7 0b       	sbc	r27, r23

00001b3c <__udivmodhi4_ep>:
    1b3c:	88 1f       	adc	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	5a 95       	dec	r21
    1b42:	a9 f7       	brne	.-22     	; 0x1b2e <__udivmodhi4_loop>
    1b44:	80 95       	com	r24
    1b46:	90 95       	com	r25
    1b48:	bc 01       	movw	r22, r24
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	08 95       	ret

00001b4e <malloc>:
    1b4e:	cf 93       	push	r28
    1b50:	df 93       	push	r29
    1b52:	82 30       	cpi	r24, 0x02	; 2
    1b54:	91 05       	cpc	r25, r1
    1b56:	10 f4       	brcc	.+4      	; 0x1b5c <malloc+0xe>
    1b58:	82 e0       	ldi	r24, 0x02	; 2
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	e0 91 6f 03 	lds	r30, 0x036F
    1b60:	f0 91 70 03 	lds	r31, 0x0370
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	a0 e0       	ldi	r26, 0x00	; 0
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	30 97       	sbiw	r30, 0x00	; 0
    1b6e:	39 f1       	breq	.+78     	; 0x1bbe <malloc+0x70>
    1b70:	40 81       	ld	r20, Z
    1b72:	51 81       	ldd	r21, Z+1	; 0x01
    1b74:	48 17       	cp	r20, r24
    1b76:	59 07       	cpc	r21, r25
    1b78:	b8 f0       	brcs	.+46     	; 0x1ba8 <malloc+0x5a>
    1b7a:	48 17       	cp	r20, r24
    1b7c:	59 07       	cpc	r21, r25
    1b7e:	71 f4       	brne	.+28     	; 0x1b9c <malloc+0x4e>
    1b80:	82 81       	ldd	r24, Z+2	; 0x02
    1b82:	93 81       	ldd	r25, Z+3	; 0x03
    1b84:	10 97       	sbiw	r26, 0x00	; 0
    1b86:	29 f0       	breq	.+10     	; 0x1b92 <malloc+0x44>
    1b88:	13 96       	adiw	r26, 0x03	; 3
    1b8a:	9c 93       	st	X, r25
    1b8c:	8e 93       	st	-X, r24
    1b8e:	12 97       	sbiw	r26, 0x02	; 2
    1b90:	2c c0       	rjmp	.+88     	; 0x1bea <malloc+0x9c>
    1b92:	90 93 70 03 	sts	0x0370, r25
    1b96:	80 93 6f 03 	sts	0x036F, r24
    1b9a:	27 c0       	rjmp	.+78     	; 0x1bea <malloc+0x9c>
    1b9c:	21 15       	cp	r18, r1
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	31 f0       	breq	.+12     	; 0x1bae <malloc+0x60>
    1ba2:	42 17       	cp	r20, r18
    1ba4:	53 07       	cpc	r21, r19
    1ba6:	18 f0       	brcs	.+6      	; 0x1bae <malloc+0x60>
    1ba8:	a9 01       	movw	r20, r18
    1baa:	db 01       	movw	r26, r22
    1bac:	01 c0       	rjmp	.+2      	; 0x1bb0 <malloc+0x62>
    1bae:	ef 01       	movw	r28, r30
    1bb0:	9a 01       	movw	r18, r20
    1bb2:	bd 01       	movw	r22, r26
    1bb4:	df 01       	movw	r26, r30
    1bb6:	02 80       	ldd	r0, Z+2	; 0x02
    1bb8:	f3 81       	ldd	r31, Z+3	; 0x03
    1bba:	e0 2d       	mov	r30, r0
    1bbc:	d7 cf       	rjmp	.-82     	; 0x1b6c <malloc+0x1e>
    1bbe:	21 15       	cp	r18, r1
    1bc0:	31 05       	cpc	r19, r1
    1bc2:	f9 f0       	breq	.+62     	; 0x1c02 <malloc+0xb4>
    1bc4:	28 1b       	sub	r18, r24
    1bc6:	39 0b       	sbc	r19, r25
    1bc8:	24 30       	cpi	r18, 0x04	; 4
    1bca:	31 05       	cpc	r19, r1
    1bcc:	80 f4       	brcc	.+32     	; 0x1bee <malloc+0xa0>
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1bd2:	61 15       	cp	r22, r1
    1bd4:	71 05       	cpc	r23, r1
    1bd6:	21 f0       	breq	.+8      	; 0x1be0 <malloc+0x92>
    1bd8:	fb 01       	movw	r30, r22
    1bda:	93 83       	std	Z+3, r25	; 0x03
    1bdc:	82 83       	std	Z+2, r24	; 0x02
    1bde:	04 c0       	rjmp	.+8      	; 0x1be8 <malloc+0x9a>
    1be0:	90 93 70 03 	sts	0x0370, r25
    1be4:	80 93 6f 03 	sts	0x036F, r24
    1be8:	fe 01       	movw	r30, r28
    1bea:	32 96       	adiw	r30, 0x02	; 2
    1bec:	44 c0       	rjmp	.+136    	; 0x1c76 <malloc+0x128>
    1bee:	fe 01       	movw	r30, r28
    1bf0:	e2 0f       	add	r30, r18
    1bf2:	f3 1f       	adc	r31, r19
    1bf4:	81 93       	st	Z+, r24
    1bf6:	91 93       	st	Z+, r25
    1bf8:	22 50       	subi	r18, 0x02	; 2
    1bfa:	31 09       	sbc	r19, r1
    1bfc:	39 83       	std	Y+1, r19	; 0x01
    1bfe:	28 83       	st	Y, r18
    1c00:	3a c0       	rjmp	.+116    	; 0x1c76 <malloc+0x128>
    1c02:	20 91 6d 03 	lds	r18, 0x036D
    1c06:	30 91 6e 03 	lds	r19, 0x036E
    1c0a:	23 2b       	or	r18, r19
    1c0c:	41 f4       	brne	.+16     	; 0x1c1e <malloc+0xd0>
    1c0e:	20 91 02 01 	lds	r18, 0x0102
    1c12:	30 91 03 01 	lds	r19, 0x0103
    1c16:	30 93 6e 03 	sts	0x036E, r19
    1c1a:	20 93 6d 03 	sts	0x036D, r18
    1c1e:	20 91 00 01 	lds	r18, 0x0100
    1c22:	30 91 01 01 	lds	r19, 0x0101
    1c26:	21 15       	cp	r18, r1
    1c28:	31 05       	cpc	r19, r1
    1c2a:	41 f4       	brne	.+16     	; 0x1c3c <malloc+0xee>
    1c2c:	2d b7       	in	r18, 0x3d	; 61
    1c2e:	3e b7       	in	r19, 0x3e	; 62
    1c30:	40 91 04 01 	lds	r20, 0x0104
    1c34:	50 91 05 01 	lds	r21, 0x0105
    1c38:	24 1b       	sub	r18, r20
    1c3a:	35 0b       	sbc	r19, r21
    1c3c:	e0 91 6d 03 	lds	r30, 0x036D
    1c40:	f0 91 6e 03 	lds	r31, 0x036E
    1c44:	e2 17       	cp	r30, r18
    1c46:	f3 07       	cpc	r31, r19
    1c48:	a0 f4       	brcc	.+40     	; 0x1c72 <malloc+0x124>
    1c4a:	2e 1b       	sub	r18, r30
    1c4c:	3f 0b       	sbc	r19, r31
    1c4e:	28 17       	cp	r18, r24
    1c50:	39 07       	cpc	r19, r25
    1c52:	78 f0       	brcs	.+30     	; 0x1c72 <malloc+0x124>
    1c54:	ac 01       	movw	r20, r24
    1c56:	4e 5f       	subi	r20, 0xFE	; 254
    1c58:	5f 4f       	sbci	r21, 0xFF	; 255
    1c5a:	24 17       	cp	r18, r20
    1c5c:	35 07       	cpc	r19, r21
    1c5e:	48 f0       	brcs	.+18     	; 0x1c72 <malloc+0x124>
    1c60:	4e 0f       	add	r20, r30
    1c62:	5f 1f       	adc	r21, r31
    1c64:	50 93 6e 03 	sts	0x036E, r21
    1c68:	40 93 6d 03 	sts	0x036D, r20
    1c6c:	81 93       	st	Z+, r24
    1c6e:	91 93       	st	Z+, r25
    1c70:	02 c0       	rjmp	.+4      	; 0x1c76 <malloc+0x128>
    1c72:	e0 e0       	ldi	r30, 0x00	; 0
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	cf 01       	movw	r24, r30
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	08 95       	ret

00001c7e <free>:
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	00 97       	sbiw	r24, 0x00	; 0
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <free+0xa>
    1c86:	87 c0       	rjmp	.+270    	; 0x1d96 <free+0x118>
    1c88:	fc 01       	movw	r30, r24
    1c8a:	32 97       	sbiw	r30, 0x02	; 2
    1c8c:	13 82       	std	Z+3, r1	; 0x03
    1c8e:	12 82       	std	Z+2, r1	; 0x02
    1c90:	c0 91 6f 03 	lds	r28, 0x036F
    1c94:	d0 91 70 03 	lds	r29, 0x0370
    1c98:	20 97       	sbiw	r28, 0x00	; 0
    1c9a:	81 f4       	brne	.+32     	; 0x1cbc <free+0x3e>
    1c9c:	20 81       	ld	r18, Z
    1c9e:	31 81       	ldd	r19, Z+1	; 0x01
    1ca0:	28 0f       	add	r18, r24
    1ca2:	39 1f       	adc	r19, r25
    1ca4:	80 91 6d 03 	lds	r24, 0x036D
    1ca8:	90 91 6e 03 	lds	r25, 0x036E
    1cac:	82 17       	cp	r24, r18
    1cae:	93 07       	cpc	r25, r19
    1cb0:	79 f5       	brne	.+94     	; 0x1d10 <free+0x92>
    1cb2:	f0 93 6e 03 	sts	0x036E, r31
    1cb6:	e0 93 6d 03 	sts	0x036D, r30
    1cba:	6d c0       	rjmp	.+218    	; 0x1d96 <free+0x118>
    1cbc:	de 01       	movw	r26, r28
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	ae 17       	cp	r26, r30
    1cc4:	bf 07       	cpc	r27, r31
    1cc6:	50 f4       	brcc	.+20     	; 0x1cdc <free+0x5e>
    1cc8:	12 96       	adiw	r26, 0x02	; 2
    1cca:	4d 91       	ld	r20, X+
    1ccc:	5c 91       	ld	r21, X
    1cce:	13 97       	sbiw	r26, 0x03	; 3
    1cd0:	9d 01       	movw	r18, r26
    1cd2:	41 15       	cp	r20, r1
    1cd4:	51 05       	cpc	r21, r1
    1cd6:	09 f1       	breq	.+66     	; 0x1d1a <free+0x9c>
    1cd8:	da 01       	movw	r26, r20
    1cda:	f3 cf       	rjmp	.-26     	; 0x1cc2 <free+0x44>
    1cdc:	b3 83       	std	Z+3, r27	; 0x03
    1cde:	a2 83       	std	Z+2, r26	; 0x02
    1ce0:	40 81       	ld	r20, Z
    1ce2:	51 81       	ldd	r21, Z+1	; 0x01
    1ce4:	84 0f       	add	r24, r20
    1ce6:	95 1f       	adc	r25, r21
    1ce8:	8a 17       	cp	r24, r26
    1cea:	9b 07       	cpc	r25, r27
    1cec:	71 f4       	brne	.+28     	; 0x1d0a <free+0x8c>
    1cee:	8d 91       	ld	r24, X+
    1cf0:	9c 91       	ld	r25, X
    1cf2:	11 97       	sbiw	r26, 0x01	; 1
    1cf4:	84 0f       	add	r24, r20
    1cf6:	95 1f       	adc	r25, r21
    1cf8:	02 96       	adiw	r24, 0x02	; 2
    1cfa:	91 83       	std	Z+1, r25	; 0x01
    1cfc:	80 83       	st	Z, r24
    1cfe:	12 96       	adiw	r26, 0x02	; 2
    1d00:	8d 91       	ld	r24, X+
    1d02:	9c 91       	ld	r25, X
    1d04:	13 97       	sbiw	r26, 0x03	; 3
    1d06:	93 83       	std	Z+3, r25	; 0x03
    1d08:	82 83       	std	Z+2, r24	; 0x02
    1d0a:	21 15       	cp	r18, r1
    1d0c:	31 05       	cpc	r19, r1
    1d0e:	29 f4       	brne	.+10     	; 0x1d1a <free+0x9c>
    1d10:	f0 93 70 03 	sts	0x0370, r31
    1d14:	e0 93 6f 03 	sts	0x036F, r30
    1d18:	3e c0       	rjmp	.+124    	; 0x1d96 <free+0x118>
    1d1a:	d9 01       	movw	r26, r18
    1d1c:	13 96       	adiw	r26, 0x03	; 3
    1d1e:	fc 93       	st	X, r31
    1d20:	ee 93       	st	-X, r30
    1d22:	12 97       	sbiw	r26, 0x02	; 2
    1d24:	4d 91       	ld	r20, X+
    1d26:	5d 91       	ld	r21, X+
    1d28:	a4 0f       	add	r26, r20
    1d2a:	b5 1f       	adc	r27, r21
    1d2c:	ea 17       	cp	r30, r26
    1d2e:	fb 07       	cpc	r31, r27
    1d30:	79 f4       	brne	.+30     	; 0x1d50 <free+0xd2>
    1d32:	80 81       	ld	r24, Z
    1d34:	91 81       	ldd	r25, Z+1	; 0x01
    1d36:	84 0f       	add	r24, r20
    1d38:	95 1f       	adc	r25, r21
    1d3a:	02 96       	adiw	r24, 0x02	; 2
    1d3c:	d9 01       	movw	r26, r18
    1d3e:	11 96       	adiw	r26, 0x01	; 1
    1d40:	9c 93       	st	X, r25
    1d42:	8e 93       	st	-X, r24
    1d44:	82 81       	ldd	r24, Z+2	; 0x02
    1d46:	93 81       	ldd	r25, Z+3	; 0x03
    1d48:	13 96       	adiw	r26, 0x03	; 3
    1d4a:	9c 93       	st	X, r25
    1d4c:	8e 93       	st	-X, r24
    1d4e:	12 97       	sbiw	r26, 0x02	; 2
    1d50:	e0 e0       	ldi	r30, 0x00	; 0
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	8a 81       	ldd	r24, Y+2	; 0x02
    1d56:	9b 81       	ldd	r25, Y+3	; 0x03
    1d58:	00 97       	sbiw	r24, 0x00	; 0
    1d5a:	19 f0       	breq	.+6      	; 0x1d62 <free+0xe4>
    1d5c:	fe 01       	movw	r30, r28
    1d5e:	ec 01       	movw	r28, r24
    1d60:	f9 cf       	rjmp	.-14     	; 0x1d54 <free+0xd6>
    1d62:	ce 01       	movw	r24, r28
    1d64:	02 96       	adiw	r24, 0x02	; 2
    1d66:	28 81       	ld	r18, Y
    1d68:	39 81       	ldd	r19, Y+1	; 0x01
    1d6a:	82 0f       	add	r24, r18
    1d6c:	93 1f       	adc	r25, r19
    1d6e:	20 91 6d 03 	lds	r18, 0x036D
    1d72:	30 91 6e 03 	lds	r19, 0x036E
    1d76:	28 17       	cp	r18, r24
    1d78:	39 07       	cpc	r19, r25
    1d7a:	69 f4       	brne	.+26     	; 0x1d96 <free+0x118>
    1d7c:	30 97       	sbiw	r30, 0x00	; 0
    1d7e:	29 f4       	brne	.+10     	; 0x1d8a <free+0x10c>
    1d80:	10 92 70 03 	sts	0x0370, r1
    1d84:	10 92 6f 03 	sts	0x036F, r1
    1d88:	02 c0       	rjmp	.+4      	; 0x1d8e <free+0x110>
    1d8a:	13 82       	std	Z+3, r1	; 0x03
    1d8c:	12 82       	std	Z+2, r1	; 0x02
    1d8e:	d0 93 6e 03 	sts	0x036E, r29
    1d92:	c0 93 6d 03 	sts	0x036D, r28
    1d96:	df 91       	pop	r29
    1d98:	cf 91       	pop	r28
    1d9a:	08 95       	ret

00001d9c <fdevopen>:
    1d9c:	0f 93       	push	r16
    1d9e:	1f 93       	push	r17
    1da0:	cf 93       	push	r28
    1da2:	df 93       	push	r29
    1da4:	ec 01       	movw	r28, r24
    1da6:	8b 01       	movw	r16, r22
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	31 f4       	brne	.+12     	; 0x1db8 <fdevopen+0x1c>
    1dac:	61 15       	cp	r22, r1
    1dae:	71 05       	cpc	r23, r1
    1db0:	19 f4       	brne	.+6      	; 0x1db8 <fdevopen+0x1c>
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	37 c0       	rjmp	.+110    	; 0x1e26 <fdevopen+0x8a>
    1db8:	6e e0       	ldi	r22, 0x0E	; 14
    1dba:	70 e0       	ldi	r23, 0x00	; 0
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	5c d2       	rcall	.+1208   	; 0x227a <calloc>
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	a9 f3       	breq	.-22     	; 0x1db2 <fdevopen+0x16>
    1dc8:	80 e8       	ldi	r24, 0x80	; 128
    1dca:	83 83       	std	Z+3, r24	; 0x03
    1dcc:	01 15       	cp	r16, r1
    1dce:	11 05       	cpc	r17, r1
    1dd0:	71 f0       	breq	.+28     	; 0x1dee <fdevopen+0x52>
    1dd2:	13 87       	std	Z+11, r17	; 0x0b
    1dd4:	02 87       	std	Z+10, r16	; 0x0a
    1dd6:	81 e8       	ldi	r24, 0x81	; 129
    1dd8:	83 83       	std	Z+3, r24	; 0x03
    1dda:	80 91 71 03 	lds	r24, 0x0371
    1dde:	90 91 72 03 	lds	r25, 0x0372
    1de2:	89 2b       	or	r24, r25
    1de4:	21 f4       	brne	.+8      	; 0x1dee <fdevopen+0x52>
    1de6:	f0 93 72 03 	sts	0x0372, r31
    1dea:	e0 93 71 03 	sts	0x0371, r30
    1dee:	20 97       	sbiw	r28, 0x00	; 0
    1df0:	c9 f0       	breq	.+50     	; 0x1e24 <fdevopen+0x88>
    1df2:	d1 87       	std	Z+9, r29	; 0x09
    1df4:	c0 87       	std	Z+8, r28	; 0x08
    1df6:	83 81       	ldd	r24, Z+3	; 0x03
    1df8:	82 60       	ori	r24, 0x02	; 2
    1dfa:	83 83       	std	Z+3, r24	; 0x03
    1dfc:	80 91 73 03 	lds	r24, 0x0373
    1e00:	90 91 74 03 	lds	r25, 0x0374
    1e04:	89 2b       	or	r24, r25
    1e06:	71 f4       	brne	.+28     	; 0x1e24 <fdevopen+0x88>
    1e08:	f0 93 74 03 	sts	0x0374, r31
    1e0c:	e0 93 73 03 	sts	0x0373, r30
    1e10:	80 91 75 03 	lds	r24, 0x0375
    1e14:	90 91 76 03 	lds	r25, 0x0376
    1e18:	89 2b       	or	r24, r25
    1e1a:	21 f4       	brne	.+8      	; 0x1e24 <fdevopen+0x88>
    1e1c:	f0 93 76 03 	sts	0x0376, r31
    1e20:	e0 93 75 03 	sts	0x0375, r30
    1e24:	cf 01       	movw	r24, r30
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
    1e2e:	08 95       	ret

00001e30 <printf>:
    1e30:	a0 e0       	ldi	r26, 0x00	; 0
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	ed e1       	ldi	r30, 0x1D	; 29
    1e36:	ff e0       	ldi	r31, 0x0F	; 15
    1e38:	f7 c2       	rjmp	.+1518   	; 0x2428 <__prologue_saves__+0x20>
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	35 96       	adiw	r30, 0x05	; 5
    1e3e:	61 91       	ld	r22, Z+
    1e40:	71 91       	ld	r23, Z+
    1e42:	af 01       	movw	r20, r30
    1e44:	80 91 73 03 	lds	r24, 0x0373
    1e48:	90 91 74 03 	lds	r25, 0x0374
    1e4c:	53 d0       	rcall	.+166    	; 0x1ef4 <vfprintf>
    1e4e:	e2 e0       	ldi	r30, 0x02	; 2
    1e50:	07 c3       	rjmp	.+1550   	; 0x2460 <__epilogue_restores__+0x20>

00001e52 <putchar>:
    1e52:	60 91 73 03 	lds	r22, 0x0373
    1e56:	70 91 74 03 	lds	r23, 0x0374
    1e5a:	46 c2       	rjmp	.+1164   	; 0x22e8 <fputc>

00001e5c <puts>:
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	e0 91 73 03 	lds	r30, 0x0373
    1e68:	f0 91 74 03 	lds	r31, 0x0374
    1e6c:	23 81       	ldd	r18, Z+3	; 0x03
    1e6e:	21 ff       	sbrs	r18, 1
    1e70:	1b c0       	rjmp	.+54     	; 0x1ea8 <puts+0x4c>
    1e72:	ec 01       	movw	r28, r24
    1e74:	00 e0       	ldi	r16, 0x00	; 0
    1e76:	10 e0       	ldi	r17, 0x00	; 0
    1e78:	89 91       	ld	r24, Y+
    1e7a:	60 91 73 03 	lds	r22, 0x0373
    1e7e:	70 91 74 03 	lds	r23, 0x0374
    1e82:	db 01       	movw	r26, r22
    1e84:	18 96       	adiw	r26, 0x08	; 8
    1e86:	ed 91       	ld	r30, X+
    1e88:	fc 91       	ld	r31, X
    1e8a:	19 97       	sbiw	r26, 0x09	; 9
    1e8c:	88 23       	and	r24, r24
    1e8e:	31 f0       	breq	.+12     	; 0x1e9c <puts+0x40>
    1e90:	09 95       	icall
    1e92:	89 2b       	or	r24, r25
    1e94:	89 f3       	breq	.-30     	; 0x1e78 <puts+0x1c>
    1e96:	0f ef       	ldi	r16, 0xFF	; 255
    1e98:	1f ef       	ldi	r17, 0xFF	; 255
    1e9a:	ee cf       	rjmp	.-36     	; 0x1e78 <puts+0x1c>
    1e9c:	8a e0       	ldi	r24, 0x0A	; 10
    1e9e:	09 95       	icall
    1ea0:	89 2b       	or	r24, r25
    1ea2:	11 f4       	brne	.+4      	; 0x1ea8 <puts+0x4c>
    1ea4:	c8 01       	movw	r24, r16
    1ea6:	02 c0       	rjmp	.+4      	; 0x1eac <puts+0x50>
    1ea8:	8f ef       	ldi	r24, 0xFF	; 255
    1eaa:	9f ef       	ldi	r25, 0xFF	; 255
    1eac:	df 91       	pop	r29
    1eae:	cf 91       	pop	r28
    1eb0:	1f 91       	pop	r17
    1eb2:	0f 91       	pop	r16
    1eb4:	08 95       	ret

00001eb6 <sprintf>:
    1eb6:	ae e0       	ldi	r26, 0x0E	; 14
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e0 e6       	ldi	r30, 0x60	; 96
    1ebc:	ff e0       	ldi	r31, 0x0F	; 15
    1ebe:	b2 c2       	rjmp	.+1380   	; 0x2424 <__prologue_saves__+0x1c>
    1ec0:	0d 89       	ldd	r16, Y+21	; 0x15
    1ec2:	1e 89       	ldd	r17, Y+22	; 0x16
    1ec4:	86 e0       	ldi	r24, 0x06	; 6
    1ec6:	8c 83       	std	Y+4, r24	; 0x04
    1ec8:	1a 83       	std	Y+2, r17	; 0x02
    1eca:	09 83       	std	Y+1, r16	; 0x01
    1ecc:	8f ef       	ldi	r24, 0xFF	; 255
    1ece:	9f e7       	ldi	r25, 0x7F	; 127
    1ed0:	9e 83       	std	Y+6, r25	; 0x06
    1ed2:	8d 83       	std	Y+5, r24	; 0x05
    1ed4:	ae 01       	movw	r20, r28
    1ed6:	47 5e       	subi	r20, 0xE7	; 231
    1ed8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eda:	6f 89       	ldd	r22, Y+23	; 0x17
    1edc:	78 8d       	ldd	r23, Y+24	; 0x18
    1ede:	ce 01       	movw	r24, r28
    1ee0:	01 96       	adiw	r24, 0x01	; 1
    1ee2:	08 d0       	rcall	.+16     	; 0x1ef4 <vfprintf>
    1ee4:	ef 81       	ldd	r30, Y+7	; 0x07
    1ee6:	f8 85       	ldd	r31, Y+8	; 0x08
    1ee8:	e0 0f       	add	r30, r16
    1eea:	f1 1f       	adc	r31, r17
    1eec:	10 82       	st	Z, r1
    1eee:	2e 96       	adiw	r28, 0x0e	; 14
    1ef0:	e4 e0       	ldi	r30, 0x04	; 4
    1ef2:	b4 c2       	rjmp	.+1384   	; 0x245c <__epilogue_restores__+0x1c>

00001ef4 <vfprintf>:
    1ef4:	ac e0       	ldi	r26, 0x0C	; 12
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	ef e7       	ldi	r30, 0x7F	; 127
    1efa:	ff e0       	ldi	r31, 0x0F	; 15
    1efc:	85 c2       	rjmp	.+1290   	; 0x2408 <__prologue_saves__>
    1efe:	7c 01       	movw	r14, r24
    1f00:	6b 01       	movw	r12, r22
    1f02:	8a 01       	movw	r16, r20
    1f04:	fc 01       	movw	r30, r24
    1f06:	17 82       	std	Z+7, r1	; 0x07
    1f08:	16 82       	std	Z+6, r1	; 0x06
    1f0a:	83 81       	ldd	r24, Z+3	; 0x03
    1f0c:	81 ff       	sbrs	r24, 1
    1f0e:	b0 c1       	rjmp	.+864    	; 0x2270 <vfprintf+0x37c>
    1f10:	ce 01       	movw	r24, r28
    1f12:	01 96       	adiw	r24, 0x01	; 1
    1f14:	4c 01       	movw	r8, r24
    1f16:	f7 01       	movw	r30, r14
    1f18:	93 81       	ldd	r25, Z+3	; 0x03
    1f1a:	f6 01       	movw	r30, r12
    1f1c:	93 fd       	sbrc	r25, 3
    1f1e:	85 91       	lpm	r24, Z+
    1f20:	93 ff       	sbrs	r25, 3
    1f22:	81 91       	ld	r24, Z+
    1f24:	6f 01       	movw	r12, r30
    1f26:	88 23       	and	r24, r24
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <vfprintf+0x38>
    1f2a:	9e c1       	rjmp	.+828    	; 0x2268 <vfprintf+0x374>
    1f2c:	85 32       	cpi	r24, 0x25	; 37
    1f2e:	39 f4       	brne	.+14     	; 0x1f3e <vfprintf+0x4a>
    1f30:	93 fd       	sbrc	r25, 3
    1f32:	85 91       	lpm	r24, Z+
    1f34:	93 ff       	sbrs	r25, 3
    1f36:	81 91       	ld	r24, Z+
    1f38:	6f 01       	movw	r12, r30
    1f3a:	85 32       	cpi	r24, 0x25	; 37
    1f3c:	21 f4       	brne	.+8      	; 0x1f46 <vfprintf+0x52>
    1f3e:	b7 01       	movw	r22, r14
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	d2 d1       	rcall	.+932    	; 0x22e8 <fputc>
    1f44:	e8 cf       	rjmp	.-48     	; 0x1f16 <vfprintf+0x22>
    1f46:	51 2c       	mov	r5, r1
    1f48:	31 2c       	mov	r3, r1
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	20 32       	cpi	r18, 0x20	; 32
    1f4e:	a0 f4       	brcc	.+40     	; 0x1f78 <vfprintf+0x84>
    1f50:	8b 32       	cpi	r24, 0x2B	; 43
    1f52:	69 f0       	breq	.+26     	; 0x1f6e <vfprintf+0x7a>
    1f54:	30 f4       	brcc	.+12     	; 0x1f62 <vfprintf+0x6e>
    1f56:	80 32       	cpi	r24, 0x20	; 32
    1f58:	59 f0       	breq	.+22     	; 0x1f70 <vfprintf+0x7c>
    1f5a:	83 32       	cpi	r24, 0x23	; 35
    1f5c:	69 f4       	brne	.+26     	; 0x1f78 <vfprintf+0x84>
    1f5e:	20 61       	ori	r18, 0x10	; 16
    1f60:	2c c0       	rjmp	.+88     	; 0x1fba <vfprintf+0xc6>
    1f62:	8d 32       	cpi	r24, 0x2D	; 45
    1f64:	39 f0       	breq	.+14     	; 0x1f74 <vfprintf+0x80>
    1f66:	80 33       	cpi	r24, 0x30	; 48
    1f68:	39 f4       	brne	.+14     	; 0x1f78 <vfprintf+0x84>
    1f6a:	21 60       	ori	r18, 0x01	; 1
    1f6c:	26 c0       	rjmp	.+76     	; 0x1fba <vfprintf+0xc6>
    1f6e:	22 60       	ori	r18, 0x02	; 2
    1f70:	24 60       	ori	r18, 0x04	; 4
    1f72:	23 c0       	rjmp	.+70     	; 0x1fba <vfprintf+0xc6>
    1f74:	28 60       	ori	r18, 0x08	; 8
    1f76:	21 c0       	rjmp	.+66     	; 0x1fba <vfprintf+0xc6>
    1f78:	27 fd       	sbrc	r18, 7
    1f7a:	27 c0       	rjmp	.+78     	; 0x1fca <vfprintf+0xd6>
    1f7c:	30 ed       	ldi	r19, 0xD0	; 208
    1f7e:	38 0f       	add	r19, r24
    1f80:	3a 30       	cpi	r19, 0x0A	; 10
    1f82:	78 f4       	brcc	.+30     	; 0x1fa2 <vfprintf+0xae>
    1f84:	26 ff       	sbrs	r18, 6
    1f86:	06 c0       	rjmp	.+12     	; 0x1f94 <vfprintf+0xa0>
    1f88:	fa e0       	ldi	r31, 0x0A	; 10
    1f8a:	5f 9e       	mul	r5, r31
    1f8c:	30 0d       	add	r19, r0
    1f8e:	11 24       	eor	r1, r1
    1f90:	53 2e       	mov	r5, r19
    1f92:	13 c0       	rjmp	.+38     	; 0x1fba <vfprintf+0xc6>
    1f94:	8a e0       	ldi	r24, 0x0A	; 10
    1f96:	38 9e       	mul	r3, r24
    1f98:	30 0d       	add	r19, r0
    1f9a:	11 24       	eor	r1, r1
    1f9c:	33 2e       	mov	r3, r19
    1f9e:	20 62       	ori	r18, 0x20	; 32
    1fa0:	0c c0       	rjmp	.+24     	; 0x1fba <vfprintf+0xc6>
    1fa2:	8e 32       	cpi	r24, 0x2E	; 46
    1fa4:	21 f4       	brne	.+8      	; 0x1fae <vfprintf+0xba>
    1fa6:	26 fd       	sbrc	r18, 6
    1fa8:	5f c1       	rjmp	.+702    	; 0x2268 <vfprintf+0x374>
    1faa:	20 64       	ori	r18, 0x40	; 64
    1fac:	06 c0       	rjmp	.+12     	; 0x1fba <vfprintf+0xc6>
    1fae:	8c 36       	cpi	r24, 0x6C	; 108
    1fb0:	11 f4       	brne	.+4      	; 0x1fb6 <vfprintf+0xc2>
    1fb2:	20 68       	ori	r18, 0x80	; 128
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <vfprintf+0xc6>
    1fb6:	88 36       	cpi	r24, 0x68	; 104
    1fb8:	41 f4       	brne	.+16     	; 0x1fca <vfprintf+0xd6>
    1fba:	f6 01       	movw	r30, r12
    1fbc:	93 fd       	sbrc	r25, 3
    1fbe:	85 91       	lpm	r24, Z+
    1fc0:	93 ff       	sbrs	r25, 3
    1fc2:	81 91       	ld	r24, Z+
    1fc4:	6f 01       	movw	r12, r30
    1fc6:	81 11       	cpse	r24, r1
    1fc8:	c1 cf       	rjmp	.-126    	; 0x1f4c <vfprintf+0x58>
    1fca:	98 2f       	mov	r25, r24
    1fcc:	9f 7d       	andi	r25, 0xDF	; 223
    1fce:	95 54       	subi	r25, 0x45	; 69
    1fd0:	93 30       	cpi	r25, 0x03	; 3
    1fd2:	28 f4       	brcc	.+10     	; 0x1fde <vfprintf+0xea>
    1fd4:	0c 5f       	subi	r16, 0xFC	; 252
    1fd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd8:	ff e3       	ldi	r31, 0x3F	; 63
    1fda:	f9 83       	std	Y+1, r31	; 0x01
    1fdc:	0d c0       	rjmp	.+26     	; 0x1ff8 <vfprintf+0x104>
    1fde:	83 36       	cpi	r24, 0x63	; 99
    1fe0:	31 f0       	breq	.+12     	; 0x1fee <vfprintf+0xfa>
    1fe2:	83 37       	cpi	r24, 0x73	; 115
    1fe4:	71 f0       	breq	.+28     	; 0x2002 <vfprintf+0x10e>
    1fe6:	83 35       	cpi	r24, 0x53	; 83
    1fe8:	09 f0       	breq	.+2      	; 0x1fec <vfprintf+0xf8>
    1fea:	57 c0       	rjmp	.+174    	; 0x209a <vfprintf+0x1a6>
    1fec:	21 c0       	rjmp	.+66     	; 0x2030 <vfprintf+0x13c>
    1fee:	f8 01       	movw	r30, r16
    1ff0:	80 81       	ld	r24, Z
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	0e 5f       	subi	r16, 0xFE	; 254
    1ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff8:	44 24       	eor	r4, r4
    1ffa:	43 94       	inc	r4
    1ffc:	51 2c       	mov	r5, r1
    1ffe:	54 01       	movw	r10, r8
    2000:	14 c0       	rjmp	.+40     	; 0x202a <vfprintf+0x136>
    2002:	38 01       	movw	r6, r16
    2004:	f2 e0       	ldi	r31, 0x02	; 2
    2006:	6f 0e       	add	r6, r31
    2008:	71 1c       	adc	r7, r1
    200a:	f8 01       	movw	r30, r16
    200c:	a0 80       	ld	r10, Z
    200e:	b1 80       	ldd	r11, Z+1	; 0x01
    2010:	26 ff       	sbrs	r18, 6
    2012:	03 c0       	rjmp	.+6      	; 0x201a <vfprintf+0x126>
    2014:	65 2d       	mov	r22, r5
    2016:	70 e0       	ldi	r23, 0x00	; 0
    2018:	02 c0       	rjmp	.+4      	; 0x201e <vfprintf+0x12a>
    201a:	6f ef       	ldi	r22, 0xFF	; 255
    201c:	7f ef       	ldi	r23, 0xFF	; 255
    201e:	c5 01       	movw	r24, r10
    2020:	2c 87       	std	Y+12, r18	; 0x0c
    2022:	57 d1       	rcall	.+686    	; 0x22d2 <strnlen>
    2024:	2c 01       	movw	r4, r24
    2026:	83 01       	movw	r16, r6
    2028:	2c 85       	ldd	r18, Y+12	; 0x0c
    202a:	2f 77       	andi	r18, 0x7F	; 127
    202c:	22 2e       	mov	r2, r18
    202e:	16 c0       	rjmp	.+44     	; 0x205c <vfprintf+0x168>
    2030:	38 01       	movw	r6, r16
    2032:	f2 e0       	ldi	r31, 0x02	; 2
    2034:	6f 0e       	add	r6, r31
    2036:	71 1c       	adc	r7, r1
    2038:	f8 01       	movw	r30, r16
    203a:	a0 80       	ld	r10, Z
    203c:	b1 80       	ldd	r11, Z+1	; 0x01
    203e:	26 ff       	sbrs	r18, 6
    2040:	03 c0       	rjmp	.+6      	; 0x2048 <vfprintf+0x154>
    2042:	65 2d       	mov	r22, r5
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	02 c0       	rjmp	.+4      	; 0x204c <vfprintf+0x158>
    2048:	6f ef       	ldi	r22, 0xFF	; 255
    204a:	7f ef       	ldi	r23, 0xFF	; 255
    204c:	c5 01       	movw	r24, r10
    204e:	2c 87       	std	Y+12, r18	; 0x0c
    2050:	2e d1       	rcall	.+604    	; 0x22ae <strnlen_P>
    2052:	2c 01       	movw	r4, r24
    2054:	2c 85       	ldd	r18, Y+12	; 0x0c
    2056:	20 68       	ori	r18, 0x80	; 128
    2058:	22 2e       	mov	r2, r18
    205a:	83 01       	movw	r16, r6
    205c:	23 fc       	sbrc	r2, 3
    205e:	19 c0       	rjmp	.+50     	; 0x2092 <vfprintf+0x19e>
    2060:	83 2d       	mov	r24, r3
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	48 16       	cp	r4, r24
    2066:	59 06       	cpc	r5, r25
    2068:	a0 f4       	brcc	.+40     	; 0x2092 <vfprintf+0x19e>
    206a:	b7 01       	movw	r22, r14
    206c:	80 e2       	ldi	r24, 0x20	; 32
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	3b d1       	rcall	.+630    	; 0x22e8 <fputc>
    2072:	3a 94       	dec	r3
    2074:	f5 cf       	rjmp	.-22     	; 0x2060 <vfprintf+0x16c>
    2076:	f5 01       	movw	r30, r10
    2078:	27 fc       	sbrc	r2, 7
    207a:	85 91       	lpm	r24, Z+
    207c:	27 fe       	sbrs	r2, 7
    207e:	81 91       	ld	r24, Z+
    2080:	5f 01       	movw	r10, r30
    2082:	b7 01       	movw	r22, r14
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	30 d1       	rcall	.+608    	; 0x22e8 <fputc>
    2088:	31 10       	cpse	r3, r1
    208a:	3a 94       	dec	r3
    208c:	f1 e0       	ldi	r31, 0x01	; 1
    208e:	4f 1a       	sub	r4, r31
    2090:	51 08       	sbc	r5, r1
    2092:	41 14       	cp	r4, r1
    2094:	51 04       	cpc	r5, r1
    2096:	79 f7       	brne	.-34     	; 0x2076 <vfprintf+0x182>
    2098:	de c0       	rjmp	.+444    	; 0x2256 <vfprintf+0x362>
    209a:	84 36       	cpi	r24, 0x64	; 100
    209c:	11 f0       	breq	.+4      	; 0x20a2 <vfprintf+0x1ae>
    209e:	89 36       	cpi	r24, 0x69	; 105
    20a0:	31 f5       	brne	.+76     	; 0x20ee <vfprintf+0x1fa>
    20a2:	f8 01       	movw	r30, r16
    20a4:	27 ff       	sbrs	r18, 7
    20a6:	07 c0       	rjmp	.+14     	; 0x20b6 <vfprintf+0x1c2>
    20a8:	60 81       	ld	r22, Z
    20aa:	71 81       	ldd	r23, Z+1	; 0x01
    20ac:	82 81       	ldd	r24, Z+2	; 0x02
    20ae:	93 81       	ldd	r25, Z+3	; 0x03
    20b0:	0c 5f       	subi	r16, 0xFC	; 252
    20b2:	1f 4f       	sbci	r17, 0xFF	; 255
    20b4:	08 c0       	rjmp	.+16     	; 0x20c6 <vfprintf+0x1d2>
    20b6:	60 81       	ld	r22, Z
    20b8:	71 81       	ldd	r23, Z+1	; 0x01
    20ba:	88 27       	eor	r24, r24
    20bc:	77 fd       	sbrc	r23, 7
    20be:	80 95       	com	r24
    20c0:	98 2f       	mov	r25, r24
    20c2:	0e 5f       	subi	r16, 0xFE	; 254
    20c4:	1f 4f       	sbci	r17, 0xFF	; 255
    20c6:	2f 76       	andi	r18, 0x6F	; 111
    20c8:	b2 2e       	mov	r11, r18
    20ca:	97 ff       	sbrs	r25, 7
    20cc:	09 c0       	rjmp	.+18     	; 0x20e0 <vfprintf+0x1ec>
    20ce:	90 95       	com	r25
    20d0:	80 95       	com	r24
    20d2:	70 95       	com	r23
    20d4:	61 95       	neg	r22
    20d6:	7f 4f       	sbci	r23, 0xFF	; 255
    20d8:	8f 4f       	sbci	r24, 0xFF	; 255
    20da:	9f 4f       	sbci	r25, 0xFF	; 255
    20dc:	20 68       	ori	r18, 0x80	; 128
    20de:	b2 2e       	mov	r11, r18
    20e0:	2a e0       	ldi	r18, 0x0A	; 10
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	a4 01       	movw	r20, r8
    20e6:	32 d1       	rcall	.+612    	; 0x234c <__ultoa_invert>
    20e8:	a8 2e       	mov	r10, r24
    20ea:	a8 18       	sub	r10, r8
    20ec:	43 c0       	rjmp	.+134    	; 0x2174 <vfprintf+0x280>
    20ee:	85 37       	cpi	r24, 0x75	; 117
    20f0:	29 f4       	brne	.+10     	; 0x20fc <vfprintf+0x208>
    20f2:	2f 7e       	andi	r18, 0xEF	; 239
    20f4:	b2 2e       	mov	r11, r18
    20f6:	2a e0       	ldi	r18, 0x0A	; 10
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	25 c0       	rjmp	.+74     	; 0x2146 <vfprintf+0x252>
    20fc:	f2 2f       	mov	r31, r18
    20fe:	f9 7f       	andi	r31, 0xF9	; 249
    2100:	bf 2e       	mov	r11, r31
    2102:	8f 36       	cpi	r24, 0x6F	; 111
    2104:	c1 f0       	breq	.+48     	; 0x2136 <vfprintf+0x242>
    2106:	18 f4       	brcc	.+6      	; 0x210e <vfprintf+0x21a>
    2108:	88 35       	cpi	r24, 0x58	; 88
    210a:	79 f0       	breq	.+30     	; 0x212a <vfprintf+0x236>
    210c:	ad c0       	rjmp	.+346    	; 0x2268 <vfprintf+0x374>
    210e:	80 37       	cpi	r24, 0x70	; 112
    2110:	19 f0       	breq	.+6      	; 0x2118 <vfprintf+0x224>
    2112:	88 37       	cpi	r24, 0x78	; 120
    2114:	21 f0       	breq	.+8      	; 0x211e <vfprintf+0x22a>
    2116:	a8 c0       	rjmp	.+336    	; 0x2268 <vfprintf+0x374>
    2118:	2f 2f       	mov	r18, r31
    211a:	20 61       	ori	r18, 0x10	; 16
    211c:	b2 2e       	mov	r11, r18
    211e:	b4 fe       	sbrs	r11, 4
    2120:	0d c0       	rjmp	.+26     	; 0x213c <vfprintf+0x248>
    2122:	8b 2d       	mov	r24, r11
    2124:	84 60       	ori	r24, 0x04	; 4
    2126:	b8 2e       	mov	r11, r24
    2128:	09 c0       	rjmp	.+18     	; 0x213c <vfprintf+0x248>
    212a:	24 ff       	sbrs	r18, 4
    212c:	0a c0       	rjmp	.+20     	; 0x2142 <vfprintf+0x24e>
    212e:	9f 2f       	mov	r25, r31
    2130:	96 60       	ori	r25, 0x06	; 6
    2132:	b9 2e       	mov	r11, r25
    2134:	06 c0       	rjmp	.+12     	; 0x2142 <vfprintf+0x24e>
    2136:	28 e0       	ldi	r18, 0x08	; 8
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	05 c0       	rjmp	.+10     	; 0x2146 <vfprintf+0x252>
    213c:	20 e1       	ldi	r18, 0x10	; 16
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	02 c0       	rjmp	.+4      	; 0x2146 <vfprintf+0x252>
    2142:	20 e1       	ldi	r18, 0x10	; 16
    2144:	32 e0       	ldi	r19, 0x02	; 2
    2146:	f8 01       	movw	r30, r16
    2148:	b7 fe       	sbrs	r11, 7
    214a:	07 c0       	rjmp	.+14     	; 0x215a <vfprintf+0x266>
    214c:	60 81       	ld	r22, Z
    214e:	71 81       	ldd	r23, Z+1	; 0x01
    2150:	82 81       	ldd	r24, Z+2	; 0x02
    2152:	93 81       	ldd	r25, Z+3	; 0x03
    2154:	0c 5f       	subi	r16, 0xFC	; 252
    2156:	1f 4f       	sbci	r17, 0xFF	; 255
    2158:	06 c0       	rjmp	.+12     	; 0x2166 <vfprintf+0x272>
    215a:	60 81       	ld	r22, Z
    215c:	71 81       	ldd	r23, Z+1	; 0x01
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	0e 5f       	subi	r16, 0xFE	; 254
    2164:	1f 4f       	sbci	r17, 0xFF	; 255
    2166:	a4 01       	movw	r20, r8
    2168:	f1 d0       	rcall	.+482    	; 0x234c <__ultoa_invert>
    216a:	a8 2e       	mov	r10, r24
    216c:	a8 18       	sub	r10, r8
    216e:	fb 2d       	mov	r31, r11
    2170:	ff 77       	andi	r31, 0x7F	; 127
    2172:	bf 2e       	mov	r11, r31
    2174:	b6 fe       	sbrs	r11, 6
    2176:	0b c0       	rjmp	.+22     	; 0x218e <vfprintf+0x29a>
    2178:	2b 2d       	mov	r18, r11
    217a:	2e 7f       	andi	r18, 0xFE	; 254
    217c:	a5 14       	cp	r10, r5
    217e:	50 f4       	brcc	.+20     	; 0x2194 <vfprintf+0x2a0>
    2180:	b4 fe       	sbrs	r11, 4
    2182:	0a c0       	rjmp	.+20     	; 0x2198 <vfprintf+0x2a4>
    2184:	b2 fc       	sbrc	r11, 2
    2186:	08 c0       	rjmp	.+16     	; 0x2198 <vfprintf+0x2a4>
    2188:	2b 2d       	mov	r18, r11
    218a:	2e 7e       	andi	r18, 0xEE	; 238
    218c:	05 c0       	rjmp	.+10     	; 0x2198 <vfprintf+0x2a4>
    218e:	7a 2c       	mov	r7, r10
    2190:	2b 2d       	mov	r18, r11
    2192:	03 c0       	rjmp	.+6      	; 0x219a <vfprintf+0x2a6>
    2194:	7a 2c       	mov	r7, r10
    2196:	01 c0       	rjmp	.+2      	; 0x219a <vfprintf+0x2a6>
    2198:	75 2c       	mov	r7, r5
    219a:	24 ff       	sbrs	r18, 4
    219c:	0d c0       	rjmp	.+26     	; 0x21b8 <vfprintf+0x2c4>
    219e:	fe 01       	movw	r30, r28
    21a0:	ea 0d       	add	r30, r10
    21a2:	f1 1d       	adc	r31, r1
    21a4:	80 81       	ld	r24, Z
    21a6:	80 33       	cpi	r24, 0x30	; 48
    21a8:	11 f4       	brne	.+4      	; 0x21ae <vfprintf+0x2ba>
    21aa:	29 7e       	andi	r18, 0xE9	; 233
    21ac:	09 c0       	rjmp	.+18     	; 0x21c0 <vfprintf+0x2cc>
    21ae:	22 ff       	sbrs	r18, 2
    21b0:	06 c0       	rjmp	.+12     	; 0x21be <vfprintf+0x2ca>
    21b2:	73 94       	inc	r7
    21b4:	73 94       	inc	r7
    21b6:	04 c0       	rjmp	.+8      	; 0x21c0 <vfprintf+0x2cc>
    21b8:	82 2f       	mov	r24, r18
    21ba:	86 78       	andi	r24, 0x86	; 134
    21bc:	09 f0       	breq	.+2      	; 0x21c0 <vfprintf+0x2cc>
    21be:	73 94       	inc	r7
    21c0:	23 fd       	sbrc	r18, 3
    21c2:	12 c0       	rjmp	.+36     	; 0x21e8 <vfprintf+0x2f4>
    21c4:	20 ff       	sbrs	r18, 0
    21c6:	06 c0       	rjmp	.+12     	; 0x21d4 <vfprintf+0x2e0>
    21c8:	5a 2c       	mov	r5, r10
    21ca:	73 14       	cp	r7, r3
    21cc:	18 f4       	brcc	.+6      	; 0x21d4 <vfprintf+0x2e0>
    21ce:	53 0c       	add	r5, r3
    21d0:	57 18       	sub	r5, r7
    21d2:	73 2c       	mov	r7, r3
    21d4:	73 14       	cp	r7, r3
    21d6:	60 f4       	brcc	.+24     	; 0x21f0 <vfprintf+0x2fc>
    21d8:	b7 01       	movw	r22, r14
    21da:	80 e2       	ldi	r24, 0x20	; 32
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	2c 87       	std	Y+12, r18	; 0x0c
    21e0:	83 d0       	rcall	.+262    	; 0x22e8 <fputc>
    21e2:	73 94       	inc	r7
    21e4:	2c 85       	ldd	r18, Y+12	; 0x0c
    21e6:	f6 cf       	rjmp	.-20     	; 0x21d4 <vfprintf+0x2e0>
    21e8:	73 14       	cp	r7, r3
    21ea:	10 f4       	brcc	.+4      	; 0x21f0 <vfprintf+0x2fc>
    21ec:	37 18       	sub	r3, r7
    21ee:	01 c0       	rjmp	.+2      	; 0x21f2 <vfprintf+0x2fe>
    21f0:	31 2c       	mov	r3, r1
    21f2:	24 ff       	sbrs	r18, 4
    21f4:	11 c0       	rjmp	.+34     	; 0x2218 <vfprintf+0x324>
    21f6:	b7 01       	movw	r22, r14
    21f8:	80 e3       	ldi	r24, 0x30	; 48
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	2c 87       	std	Y+12, r18	; 0x0c
    21fe:	74 d0       	rcall	.+232    	; 0x22e8 <fputc>
    2200:	2c 85       	ldd	r18, Y+12	; 0x0c
    2202:	22 ff       	sbrs	r18, 2
    2204:	16 c0       	rjmp	.+44     	; 0x2232 <vfprintf+0x33e>
    2206:	21 ff       	sbrs	r18, 1
    2208:	03 c0       	rjmp	.+6      	; 0x2210 <vfprintf+0x31c>
    220a:	88 e5       	ldi	r24, 0x58	; 88
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	02 c0       	rjmp	.+4      	; 0x2214 <vfprintf+0x320>
    2210:	88 e7       	ldi	r24, 0x78	; 120
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	b7 01       	movw	r22, r14
    2216:	0c c0       	rjmp	.+24     	; 0x2230 <vfprintf+0x33c>
    2218:	82 2f       	mov	r24, r18
    221a:	86 78       	andi	r24, 0x86	; 134
    221c:	51 f0       	breq	.+20     	; 0x2232 <vfprintf+0x33e>
    221e:	21 fd       	sbrc	r18, 1
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <vfprintf+0x332>
    2222:	80 e2       	ldi	r24, 0x20	; 32
    2224:	01 c0       	rjmp	.+2      	; 0x2228 <vfprintf+0x334>
    2226:	8b e2       	ldi	r24, 0x2B	; 43
    2228:	27 fd       	sbrc	r18, 7
    222a:	8d e2       	ldi	r24, 0x2D	; 45
    222c:	b7 01       	movw	r22, r14
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	5b d0       	rcall	.+182    	; 0x22e8 <fputc>
    2232:	a5 14       	cp	r10, r5
    2234:	30 f4       	brcc	.+12     	; 0x2242 <vfprintf+0x34e>
    2236:	b7 01       	movw	r22, r14
    2238:	80 e3       	ldi	r24, 0x30	; 48
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	55 d0       	rcall	.+170    	; 0x22e8 <fputc>
    223e:	5a 94       	dec	r5
    2240:	f8 cf       	rjmp	.-16     	; 0x2232 <vfprintf+0x33e>
    2242:	aa 94       	dec	r10
    2244:	f4 01       	movw	r30, r8
    2246:	ea 0d       	add	r30, r10
    2248:	f1 1d       	adc	r31, r1
    224a:	80 81       	ld	r24, Z
    224c:	b7 01       	movw	r22, r14
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	4b d0       	rcall	.+150    	; 0x22e8 <fputc>
    2252:	a1 10       	cpse	r10, r1
    2254:	f6 cf       	rjmp	.-20     	; 0x2242 <vfprintf+0x34e>
    2256:	33 20       	and	r3, r3
    2258:	09 f4       	brne	.+2      	; 0x225c <vfprintf+0x368>
    225a:	5d ce       	rjmp	.-838    	; 0x1f16 <vfprintf+0x22>
    225c:	b7 01       	movw	r22, r14
    225e:	80 e2       	ldi	r24, 0x20	; 32
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	42 d0       	rcall	.+132    	; 0x22e8 <fputc>
    2264:	3a 94       	dec	r3
    2266:	f7 cf       	rjmp	.-18     	; 0x2256 <vfprintf+0x362>
    2268:	f7 01       	movw	r30, r14
    226a:	86 81       	ldd	r24, Z+6	; 0x06
    226c:	97 81       	ldd	r25, Z+7	; 0x07
    226e:	02 c0       	rjmp	.+4      	; 0x2274 <vfprintf+0x380>
    2270:	8f ef       	ldi	r24, 0xFF	; 255
    2272:	9f ef       	ldi	r25, 0xFF	; 255
    2274:	2c 96       	adiw	r28, 0x0c	; 12
    2276:	e2 e1       	ldi	r30, 0x12	; 18
    2278:	e3 c0       	rjmp	.+454    	; 0x2440 <__epilogue_restores__>

0000227a <calloc>:
    227a:	0f 93       	push	r16
    227c:	1f 93       	push	r17
    227e:	cf 93       	push	r28
    2280:	df 93       	push	r29
    2282:	86 9f       	mul	r24, r22
    2284:	80 01       	movw	r16, r0
    2286:	87 9f       	mul	r24, r23
    2288:	10 0d       	add	r17, r0
    228a:	96 9f       	mul	r25, r22
    228c:	10 0d       	add	r17, r0
    228e:	11 24       	eor	r1, r1
    2290:	c8 01       	movw	r24, r16
    2292:	5d dc       	rcall	.-1862   	; 0x1b4e <malloc>
    2294:	ec 01       	movw	r28, r24
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	21 f0       	breq	.+8      	; 0x22a2 <calloc+0x28>
    229a:	a8 01       	movw	r20, r16
    229c:	60 e0       	ldi	r22, 0x00	; 0
    229e:	70 e0       	ldi	r23, 0x00	; 0
    22a0:	11 d0       	rcall	.+34     	; 0x22c4 <memset>
    22a2:	ce 01       	movw	r24, r28
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	1f 91       	pop	r17
    22aa:	0f 91       	pop	r16
    22ac:	08 95       	ret

000022ae <strnlen_P>:
    22ae:	fc 01       	movw	r30, r24
    22b0:	05 90       	lpm	r0, Z+
    22b2:	61 50       	subi	r22, 0x01	; 1
    22b4:	70 40       	sbci	r23, 0x00	; 0
    22b6:	01 10       	cpse	r0, r1
    22b8:	d8 f7       	brcc	.-10     	; 0x22b0 <strnlen_P+0x2>
    22ba:	80 95       	com	r24
    22bc:	90 95       	com	r25
    22be:	8e 0f       	add	r24, r30
    22c0:	9f 1f       	adc	r25, r31
    22c2:	08 95       	ret

000022c4 <memset>:
    22c4:	dc 01       	movw	r26, r24
    22c6:	01 c0       	rjmp	.+2      	; 0x22ca <memset+0x6>
    22c8:	6d 93       	st	X+, r22
    22ca:	41 50       	subi	r20, 0x01	; 1
    22cc:	50 40       	sbci	r21, 0x00	; 0
    22ce:	e0 f7       	brcc	.-8      	; 0x22c8 <memset+0x4>
    22d0:	08 95       	ret

000022d2 <strnlen>:
    22d2:	fc 01       	movw	r30, r24
    22d4:	61 50       	subi	r22, 0x01	; 1
    22d6:	70 40       	sbci	r23, 0x00	; 0
    22d8:	01 90       	ld	r0, Z+
    22da:	01 10       	cpse	r0, r1
    22dc:	d8 f7       	brcc	.-10     	; 0x22d4 <strnlen+0x2>
    22de:	80 95       	com	r24
    22e0:	90 95       	com	r25
    22e2:	8e 0f       	add	r24, r30
    22e4:	9f 1f       	adc	r25, r31
    22e6:	08 95       	ret

000022e8 <fputc>:
    22e8:	0f 93       	push	r16
    22ea:	1f 93       	push	r17
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	18 2f       	mov	r17, r24
    22f2:	09 2f       	mov	r16, r25
    22f4:	eb 01       	movw	r28, r22
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	81 fd       	sbrc	r24, 1
    22fa:	03 c0       	rjmp	.+6      	; 0x2302 <fputc+0x1a>
    22fc:	8f ef       	ldi	r24, 0xFF	; 255
    22fe:	9f ef       	ldi	r25, 0xFF	; 255
    2300:	20 c0       	rjmp	.+64     	; 0x2342 <fputc+0x5a>
    2302:	82 ff       	sbrs	r24, 2
    2304:	10 c0       	rjmp	.+32     	; 0x2326 <fputc+0x3e>
    2306:	4e 81       	ldd	r20, Y+6	; 0x06
    2308:	5f 81       	ldd	r21, Y+7	; 0x07
    230a:	2c 81       	ldd	r18, Y+4	; 0x04
    230c:	3d 81       	ldd	r19, Y+5	; 0x05
    230e:	42 17       	cp	r20, r18
    2310:	53 07       	cpc	r21, r19
    2312:	7c f4       	brge	.+30     	; 0x2332 <fputc+0x4a>
    2314:	e8 81       	ld	r30, Y
    2316:	f9 81       	ldd	r31, Y+1	; 0x01
    2318:	9f 01       	movw	r18, r30
    231a:	2f 5f       	subi	r18, 0xFF	; 255
    231c:	3f 4f       	sbci	r19, 0xFF	; 255
    231e:	39 83       	std	Y+1, r19	; 0x01
    2320:	28 83       	st	Y, r18
    2322:	10 83       	st	Z, r17
    2324:	06 c0       	rjmp	.+12     	; 0x2332 <fputc+0x4a>
    2326:	e8 85       	ldd	r30, Y+8	; 0x08
    2328:	f9 85       	ldd	r31, Y+9	; 0x09
    232a:	81 2f       	mov	r24, r17
    232c:	09 95       	icall
    232e:	89 2b       	or	r24, r25
    2330:	29 f7       	brne	.-54     	; 0x22fc <fputc+0x14>
    2332:	2e 81       	ldd	r18, Y+6	; 0x06
    2334:	3f 81       	ldd	r19, Y+7	; 0x07
    2336:	2f 5f       	subi	r18, 0xFF	; 255
    2338:	3f 4f       	sbci	r19, 0xFF	; 255
    233a:	3f 83       	std	Y+7, r19	; 0x07
    233c:	2e 83       	std	Y+6, r18	; 0x06
    233e:	81 2f       	mov	r24, r17
    2340:	90 2f       	mov	r25, r16
    2342:	df 91       	pop	r29
    2344:	cf 91       	pop	r28
    2346:	1f 91       	pop	r17
    2348:	0f 91       	pop	r16
    234a:	08 95       	ret

0000234c <__ultoa_invert>:
    234c:	fa 01       	movw	r30, r20
    234e:	aa 27       	eor	r26, r26
    2350:	28 30       	cpi	r18, 0x08	; 8
    2352:	51 f1       	breq	.+84     	; 0x23a8 <__ultoa_invert+0x5c>
    2354:	20 31       	cpi	r18, 0x10	; 16
    2356:	81 f1       	breq	.+96     	; 0x23b8 <__ultoa_invert+0x6c>
    2358:	e8 94       	clt
    235a:	6f 93       	push	r22
    235c:	6e 7f       	andi	r22, 0xFE	; 254
    235e:	6e 5f       	subi	r22, 0xFE	; 254
    2360:	7f 4f       	sbci	r23, 0xFF	; 255
    2362:	8f 4f       	sbci	r24, 0xFF	; 255
    2364:	9f 4f       	sbci	r25, 0xFF	; 255
    2366:	af 4f       	sbci	r26, 0xFF	; 255
    2368:	b1 e0       	ldi	r27, 0x01	; 1
    236a:	3e d0       	rcall	.+124    	; 0x23e8 <__ultoa_invert+0x9c>
    236c:	b4 e0       	ldi	r27, 0x04	; 4
    236e:	3c d0       	rcall	.+120    	; 0x23e8 <__ultoa_invert+0x9c>
    2370:	67 0f       	add	r22, r23
    2372:	78 1f       	adc	r23, r24
    2374:	89 1f       	adc	r24, r25
    2376:	9a 1f       	adc	r25, r26
    2378:	a1 1d       	adc	r26, r1
    237a:	68 0f       	add	r22, r24
    237c:	79 1f       	adc	r23, r25
    237e:	8a 1f       	adc	r24, r26
    2380:	91 1d       	adc	r25, r1
    2382:	a1 1d       	adc	r26, r1
    2384:	6a 0f       	add	r22, r26
    2386:	71 1d       	adc	r23, r1
    2388:	81 1d       	adc	r24, r1
    238a:	91 1d       	adc	r25, r1
    238c:	a1 1d       	adc	r26, r1
    238e:	20 d0       	rcall	.+64     	; 0x23d0 <__ultoa_invert+0x84>
    2390:	09 f4       	brne	.+2      	; 0x2394 <__ultoa_invert+0x48>
    2392:	68 94       	set
    2394:	3f 91       	pop	r19
    2396:	2a e0       	ldi	r18, 0x0A	; 10
    2398:	26 9f       	mul	r18, r22
    239a:	11 24       	eor	r1, r1
    239c:	30 19       	sub	r19, r0
    239e:	30 5d       	subi	r19, 0xD0	; 208
    23a0:	31 93       	st	Z+, r19
    23a2:	de f6       	brtc	.-74     	; 0x235a <__ultoa_invert+0xe>
    23a4:	cf 01       	movw	r24, r30
    23a6:	08 95       	ret
    23a8:	46 2f       	mov	r20, r22
    23aa:	47 70       	andi	r20, 0x07	; 7
    23ac:	40 5d       	subi	r20, 0xD0	; 208
    23ae:	41 93       	st	Z+, r20
    23b0:	b3 e0       	ldi	r27, 0x03	; 3
    23b2:	0f d0       	rcall	.+30     	; 0x23d2 <__ultoa_invert+0x86>
    23b4:	c9 f7       	brne	.-14     	; 0x23a8 <__ultoa_invert+0x5c>
    23b6:	f6 cf       	rjmp	.-20     	; 0x23a4 <__ultoa_invert+0x58>
    23b8:	46 2f       	mov	r20, r22
    23ba:	4f 70       	andi	r20, 0x0F	; 15
    23bc:	40 5d       	subi	r20, 0xD0	; 208
    23be:	4a 33       	cpi	r20, 0x3A	; 58
    23c0:	18 f0       	brcs	.+6      	; 0x23c8 <__ultoa_invert+0x7c>
    23c2:	49 5d       	subi	r20, 0xD9	; 217
    23c4:	31 fd       	sbrc	r19, 1
    23c6:	40 52       	subi	r20, 0x20	; 32
    23c8:	41 93       	st	Z+, r20
    23ca:	02 d0       	rcall	.+4      	; 0x23d0 <__ultoa_invert+0x84>
    23cc:	a9 f7       	brne	.-22     	; 0x23b8 <__ultoa_invert+0x6c>
    23ce:	ea cf       	rjmp	.-44     	; 0x23a4 <__ultoa_invert+0x58>
    23d0:	b4 e0       	ldi	r27, 0x04	; 4
    23d2:	a6 95       	lsr	r26
    23d4:	97 95       	ror	r25
    23d6:	87 95       	ror	r24
    23d8:	77 95       	ror	r23
    23da:	67 95       	ror	r22
    23dc:	ba 95       	dec	r27
    23de:	c9 f7       	brne	.-14     	; 0x23d2 <__ultoa_invert+0x86>
    23e0:	00 97       	sbiw	r24, 0x00	; 0
    23e2:	61 05       	cpc	r22, r1
    23e4:	71 05       	cpc	r23, r1
    23e6:	08 95       	ret
    23e8:	9b 01       	movw	r18, r22
    23ea:	ac 01       	movw	r20, r24
    23ec:	0a 2e       	mov	r0, r26
    23ee:	06 94       	lsr	r0
    23f0:	57 95       	ror	r21
    23f2:	47 95       	ror	r20
    23f4:	37 95       	ror	r19
    23f6:	27 95       	ror	r18
    23f8:	ba 95       	dec	r27
    23fa:	c9 f7       	brne	.-14     	; 0x23ee <__ultoa_invert+0xa2>
    23fc:	62 0f       	add	r22, r18
    23fe:	73 1f       	adc	r23, r19
    2400:	84 1f       	adc	r24, r20
    2402:	95 1f       	adc	r25, r21
    2404:	a0 1d       	adc	r26, r0
    2406:	08 95       	ret

00002408 <__prologue_saves__>:
    2408:	2f 92       	push	r2
    240a:	3f 92       	push	r3
    240c:	4f 92       	push	r4
    240e:	5f 92       	push	r5
    2410:	6f 92       	push	r6
    2412:	7f 92       	push	r7
    2414:	8f 92       	push	r8
    2416:	9f 92       	push	r9
    2418:	af 92       	push	r10
    241a:	bf 92       	push	r11
    241c:	cf 92       	push	r12
    241e:	df 92       	push	r13
    2420:	ef 92       	push	r14
    2422:	ff 92       	push	r15
    2424:	0f 93       	push	r16
    2426:	1f 93       	push	r17
    2428:	cf 93       	push	r28
    242a:	df 93       	push	r29
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	ca 1b       	sub	r28, r26
    2432:	db 0b       	sbc	r29, r27
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	cd bf       	out	0x3d, r28	; 61
    243e:	09 94       	ijmp

00002440 <__epilogue_restores__>:
    2440:	2a 88       	ldd	r2, Y+18	; 0x12
    2442:	39 88       	ldd	r3, Y+17	; 0x11
    2444:	48 88       	ldd	r4, Y+16	; 0x10
    2446:	5f 84       	ldd	r5, Y+15	; 0x0f
    2448:	6e 84       	ldd	r6, Y+14	; 0x0e
    244a:	7d 84       	ldd	r7, Y+13	; 0x0d
    244c:	8c 84       	ldd	r8, Y+12	; 0x0c
    244e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2450:	aa 84       	ldd	r10, Y+10	; 0x0a
    2452:	b9 84       	ldd	r11, Y+9	; 0x09
    2454:	c8 84       	ldd	r12, Y+8	; 0x08
    2456:	df 80       	ldd	r13, Y+7	; 0x07
    2458:	ee 80       	ldd	r14, Y+6	; 0x06
    245a:	fd 80       	ldd	r15, Y+5	; 0x05
    245c:	0c 81       	ldd	r16, Y+4	; 0x04
    245e:	1b 81       	ldd	r17, Y+3	; 0x03
    2460:	aa 81       	ldd	r26, Y+2	; 0x02
    2462:	b9 81       	ldd	r27, Y+1	; 0x01
    2464:	ce 0f       	add	r28, r30
    2466:	d1 1d       	adc	r29, r1
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	de bf       	out	0x3e, r29	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	cd bf       	out	0x3d, r28	; 61
    2472:	ed 01       	movw	r28, r26
    2474:	08 95       	ret

00002476 <_exit>:
    2476:	f8 94       	cli

00002478 <__stop_program>:
    2478:	ff cf       	rjmp	.-2      	; 0x2478 <__stop_program>
