
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002a8  00800100  00001b0c  00001ba0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  008003a8  008003a8  00001e48  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000300  00000000  00000000  00001ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003477  00000000  00000000  000021a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010ba  00000000  00000000  0000561b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001541  00000000  00000000  000066d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000754  00000000  00000000  00007c18  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000db0  00000000  00000000  0000836c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001a7f  00000000  00000000  0000911c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000290  00000000  00000000  0000ab9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	fa c1       	rjmp	.+1012   	; 0x402 <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <MENU_buildMenus+0x156>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ec e0       	ldi	r30, 0x0C	; 12
     37c:	fb e1       	ldi	r31, 0x1B	; 27
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a8 3a       	cpi	r26, 0xA8	; 168
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a8 ea       	ldi	r26, 0xA8	; 168
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a1 3d       	cpi	r26, 0xD1	; 209
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	7e d0       	rcall	.+252    	; 0x498 <main>
     39c:	0c 94 84 0d 	jmp	0x1b08	; 0x1b08 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 c1 03 	sts	0x03C1, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 ac 03 	sts	0x03AC, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 ab 03 	sts	0x03AB, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 a9 03 	sts	0x03A9, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_3>:
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	8f 93       	push	r24
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 a8 03 	sts	0x03A8, r24
     414:	8f 91       	pop	r24
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <init>:
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	1f e1       	ldi	r17, 0x1F	; 31
     42a:	e1 2e       	mov	r14, r17
     42c:	f1 2c       	mov	r15, r1
     42e:	00 e0       	ldi	r16, 0x00	; 0
     430:	10 e0       	ldi	r17, 0x00	; 0
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	4b e4       	ldi	r20, 0x4B	; 75
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e8       	ldi	r22, 0x80	; 128
     43c:	75 e2       	ldi	r23, 0x25	; 37
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	8c d6       	rcall	.+3352   	; 0x115c <uartInit>
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	47 d0       	rcall	.+142    	; 0x4d6 <enableXMEM>
     448:	52 d6       	rcall	.+3236   	; 0x10ee <SLI_init>
     44a:	57 d0       	rcall	.+174    	; 0x4fa <JOY_init>
     44c:	ca d5       	rcall	.+2964   	; 0xfe2 <OLED_init>
     44e:	58 d6       	rcall	.+3248   	; 0x1100 <SPI_init>
     450:	8b b7       	in	r24, 0x3b	; 59
     452:	80 64       	ori	r24, 0x40	; 64
     454:	8b bf       	out	0x3b, r24	; 59
     456:	85 b7       	in	r24, 0x35	; 53
     458:	82 60       	ori	r24, 0x02	; 2
     45a:	85 bf       	out	0x35, r24	; 53
     45c:	85 b7       	in	r24, 0x35	; 53
     45e:	8e 7f       	andi	r24, 0xFE	; 254
     460:	85 bf       	out	0x35, r24	; 53
     462:	8b 98       	cbi	0x11, 3	; 17
     464:	93 9a       	sbi	0x12, 3	; 18
     466:	8b b7       	in	r24, 0x3b	; 59
     468:	80 68       	ori	r24, 0x80	; 128
     46a:	8b bf       	out	0x3b, r24	; 59
     46c:	85 b7       	in	r24, 0x35	; 53
     46e:	88 60       	ori	r24, 0x08	; 8
     470:	85 bf       	out	0x35, r24	; 53
     472:	85 b7       	in	r24, 0x35	; 53
     474:	8b 7f       	andi	r24, 0xFB	; 251
     476:	85 bf       	out	0x35, r24	; 53
     478:	32 98       	cbi	0x06, 2	; 6
     47a:	3a 98       	cbi	0x07, 2	; 7
     47c:	b8 98       	cbi	0x17, 0	; 23
     47e:	c0 98       	cbi	0x18, 0	; 24
     480:	86 b7       	in	r24, 0x36	; 54
     482:	8e 7f       	andi	r24, 0xFE	; 254
     484:	86 bf       	out	0x36, r24	; 54
     486:	8b b7       	in	r24, 0x3b	; 59
     488:	81 60       	ori	r24, 0x01	; 1
     48a:	8b bf       	out	0x3b, r24	; 59
     48c:	78 94       	sei
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	ff 90       	pop	r15
     494:	ef 90       	pop	r14
     496:	08 95       	ret

00000498 <main>:
=======================MAIN FUNCTION=========================
*/

int main(void)
{	
	init();
     498:	c3 df       	rcall	.-122    	; 0x420 <init>
	
	MCP2515_init();
     49a:	18 d2       	rcall	.+1072   	; 0x8cc <MCP2515_init>
	//MCP2525_requestToSend(SS_CAN_CONTROLLER, 1, 1, 1);
	printf("STATUS: %d\n", MCP2515_readStatus(SS_CAN_CONTROLLER));
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	2c d2       	rcall	.+1112   	; 0x8f8 <MCP2515_readStatus>
     4a0:	1f 92       	push	r1
     4a2:	8f 93       	push	r24
     4a4:	8f e9       	ldi	r24, 0x9F	; 159
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	9f 93       	push	r25
     4aa:	8f 93       	push	r24
     4ac:	0e 94 85 0a 	call	0x150a	; 0x150a <printf>
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
		//SPI_send((uint8_t)19, SS_CAN_CONTROLLER);
		//SPI_ReceivedByte = SPI_receive(SS_CAN_CONTROLLER);
		//printf("SPI received byte: %d\n", SPI_ReceivedByte);
		
		// statusMultifunctionBoard();
		JOY_getDirection();
     4b8:	e0 d1       	rcall	.+960    	; 0x87a <JOY_getDirection>

		// todo: remove! will be included in the menu driver later
		if(JOYcalibFlag)
     4ba:	80 91 aa 03 	lds	r24, 0x03AA
     4be:	88 23       	and	r24, r24
     4c0:	19 f0       	breq	.+6      	; 0x4c8 <main+0x30>
		{
			//run joystick calibration
			JOY_calibrate();
     4c2:	2e d0       	rcall	.+92     	; 0x520 <JOY_calibrate>
			JOYcalibFlag = 0;
     4c4:	10 92 aa 03 	sts	0x03AA, r1
		}	
		
		if(activateMenuFlag)
     4c8:	80 91 a9 03 	lds	r24, 0x03A9
     4cc:	81 11       	cpse	r24, r1
		{
			MENU_activate();
     4ce:	57 d4       	rcall	.+2222   	; 0xd7e <MENU_activate>
		}
		
		if(SPI_ReceivedByte)
     4d0:	80 91 c2 03 	lds	r24, 0x03C2
		{
			//TODO: check which slave caused teh interrupt. SS_CAN_CONTROLLER assumed now
// 			SPI_ReceivedByte = SPI_receive(SS_CAN_CONTROLLER);	
// 			printf("SPI received byte: %d\n", SPI_ReceivedByte);
		}
    }
     4d4:	f1 cf       	rjmp	.-30     	; 0x4b8 <main+0x20>

000004d6 <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     4d6:	95 b7       	in	r25, 0x35	; 53
     4d8:	90 68       	ori	r25, 0x80	; 128
     4da:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     4dc:	96 b7       	in	r25, 0x36	; 54
     4de:	98 60       	ori	r25, 0x08	; 8
     4e0:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     4e2:	88 23       	and	r24, r24
     4e4:	19 f0       	breq	.+6      	; 0x4ec <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     4e6:	80 b7       	in	r24, 0x30	; 48
     4e8:	80 62       	ori	r24, 0x20	; 32
     4ea:	80 bf       	out	0x30, r24	; 48
     4ec:	08 95       	ret

000004ee <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     4ee:	fc 01       	movw	r30, r24
     4f0:	80 81       	ld	r24, Z
	return val;
}
     4f2:	08 95       	ret

000004f4 <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     4f4:	fc 01       	movw	r30, r24
     4f6:	60 83       	st	Z, r22
     4f8:	08 95       	ret

000004fa <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     4fa:	10 92 af 03 	sts	0x03AF, r1
     4fe:	10 92 ae 03 	sts	0x03AE, r1
	currentPosition.Y_abs = 0;
     502:	10 92 b1 03 	sts	0x03B1, r1
     506:	10 92 b0 03 	sts	0x03B0, r1
	currentPosition.X_per = 0;
     50a:	10 92 b3 03 	sts	0x03B3, r1
     50e:	10 92 b2 03 	sts	0x03B2, r1
	currentPosition.Y_per = 0;
     512:	10 92 b5 03 	sts	0x03B5, r1
     516:	10 92 b4 03 	sts	0x03B4, r1
	currentDirection = CENTRE;
     51a:	10 92 ad 03 	sts	0x03AD, r1
     51e:	08 95       	ret

00000520 <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     524:	57 d4       	rcall	.+2222   	; 0xdd4 <OLED_clear>
     526:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	80 e0       	ldi	r24, 0x00	; 0
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	35 d4       	rcall	.+2154   	; 0xd9a <OLED_goto>
     530:	8b ea       	ldi	r24, 0xAB	; 171
     532:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     534:	88 d4       	rcall	.+2320   	; 0xe46 <OLED_printString>
     536:	85 eb       	ldi	r24, 0xB5	; 181
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	f8 d7       	rcall	.+4080   	; 0x152c <puts>
	printf("Move JOY to the right\n");
     53c:	2f ef       	ldi	r18, 0xFF	; 255
     53e:	4f ef       	ldi	r20, 0xFF	; 255
     540:	52 e0       	ldi	r21, 0x02	; 2
     542:	21 50       	subi	r18, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     544:	40 40       	sbci	r20, 0x00	; 0
     546:	50 40       	sbci	r21, 0x00	; 0
     548:	e1 f7       	brne	.-8      	; 0x542 <JOY_calibrate+0x22>
     54a:	00 c0       	rjmp	.+0      	; 0x54c <JOY_calibrate+0x2c>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <JOY_calibrate+0x2e>
     54e:	c4 e1       	ldi	r28, 0x14	; 20
     550:	d0 e0       	ldi	r29, 0x00	; 0
     552:	60 91 06 01 	lds	r22, 0x0106
     556:	70 91 07 01 	lds	r23, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     55a:	82 e0       	ldi	r24, 0x02	; 2
     55c:	18 d6       	rcall	.+3120   	; 0x118e <ADC_request>
     55e:	8f ef       	ldi	r24, 0xFF	; 255
     560:	9f e1       	ldi	r25, 0x1F	; 31
     562:	21 e0       	ldi	r18, 0x01	; 1
     564:	81 50       	subi	r24, 0x01	; 1
     566:	90 40       	sbci	r25, 0x00	; 0
     568:	20 40       	sbci	r18, 0x00	; 0
     56a:	e1 f7       	brne	.-8      	; 0x564 <JOY_calibrate+0x44>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <JOY_calibrate+0x4e>
     56e:	00 00       	nop
     570:	80 91 06 01 	lds	r24, 0x0106
     574:	90 91 07 01 	lds	r25, 0x0107
     578:	2e d6       	rcall	.+3164   	; 0x11d6 <ADC_read>
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     57a:	90 91 0d 01 	lds	r25, 0x010D
     57e:	98 17       	cp	r25, r24
     580:	10 f4       	brcc	.+4      	; 0x586 <JOY_calibrate+0x66>
     582:	80 93 0d 01 	sts	0x010D, r24
		
		if(temp > calR) {calR = temp;}
     586:	21 97       	sbiw	r28, 0x01	; 1
     588:	20 97       	sbiw	r28, 0x00	; 0
     58a:	19 f7       	brne	.-58     	; 0x552 <JOY_calibrate+0x32>
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	90 e0       	ldi	r25, 0x00	; 0
	OLED_goto(0,0);
	OLED_printString("JOY RIGHT");
	printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     594:	02 d4       	rcall	.+2052   	; 0xd9a <OLED_goto>
     596:	8b ec       	ldi	r24, 0xCB	; 203
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_goto(1,0);
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	55 d4       	rcall	.+2218   	; 0xe46 <OLED_printString>
     59c:	84 ed       	ldi	r24, 0xD4	; 212
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	c5 d7       	rcall	.+3978   	; 0x152c <puts>
     5a2:	4f ef       	ldi	r20, 0xFF	; 255
	OLED_printString("JOY LEFT");
     5a4:	5f ef       	ldi	r21, 0xFF	; 255
     5a6:	82 e0       	ldi	r24, 0x02	; 2
     5a8:	41 50       	subi	r20, 0x01	; 1
     5aa:	50 40       	sbci	r21, 0x00	; 0
	printf("Move JOY to the left\n");
     5ac:	80 40       	sbci	r24, 0x00	; 0
     5ae:	e1 f7       	brne	.-8      	; 0x5a8 <JOY_calibrate+0x88>
     5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <JOY_calibrate+0x92>
     5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <JOY_calibrate+0x94>
     5b4:	c4 e1       	ldi	r28, 0x14	; 20
     5b6:	d0 e0       	ldi	r29, 0x00	; 0
     5b8:	60 91 06 01 	lds	r22, 0x0106
     5bc:	70 91 07 01 	lds	r23, 0x0107
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	e5 d5       	rcall	.+3018   	; 0x118e <ADC_request>
     5c4:	9f ef       	ldi	r25, 0xFF	; 255
     5c6:	2f e1       	ldi	r18, 0x1F	; 31
     5c8:	41 e0       	ldi	r20, 0x01	; 1
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     5ca:	91 50       	subi	r25, 0x01	; 1
     5cc:	20 40       	sbci	r18, 0x00	; 0
     5ce:	40 40       	sbci	r20, 0x00	; 0
     5d0:	e1 f7       	brne	.-8      	; 0x5ca <JOY_calibrate+0xaa>
     5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <JOY_calibrate+0xb4>
     5d4:	00 00       	nop
     5d6:	80 91 06 01 	lds	r24, 0x0106
     5da:	90 91 07 01 	lds	r25, 0x0107
     5de:	fb d5       	rcall	.+3062   	; 0x11d6 <ADC_read>
     5e0:	90 91 0c 01 	lds	r25, 0x010C
     5e4:	89 17       	cp	r24, r25
     5e6:	10 f4       	brcc	.+4      	; 0x5ec <JOY_calibrate+0xcc>
     5e8:	80 93 0c 01 	sts	0x010C, r24
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     5ec:	21 97       	sbiw	r28, 0x01	; 1
     5ee:	20 97       	sbiw	r28, 0x00	; 0
     5f0:	19 f7       	brne	.-58     	; 0x5b8 <JOY_calibrate+0x98>
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	70 e0       	ldi	r23, 0x00	; 0
		
		if(temp < calL) {calL = temp;}
     5f6:	82 e0       	ldi	r24, 0x02	; 2
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	cf d3       	rcall	.+1950   	; 0xd9a <OLED_goto>
     5fc:	89 ee       	ldi	r24, 0xE9	; 233
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	22 d4       	rcall	.+2116   	; 0xe46 <OLED_printString>
     602:	80 ef       	ldi	r24, 0xF0	; 240
	OLED_goto(1,0);
	OLED_printString("JOY LEFT");
	printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     604:	91 e0       	ldi	r25, 0x01	; 1
     606:	92 d7       	rcall	.+3876   	; 0x152c <puts>
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_goto(2,0);
     608:	5f ef       	ldi	r21, 0xFF	; 255
     60a:	8f ef       	ldi	r24, 0xFF	; 255
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	51 50       	subi	r21, 0x01	; 1
     610:	80 40       	sbci	r24, 0x00	; 0
     612:	90 40       	sbci	r25, 0x00	; 0
	OLED_printString("JOY UP");
     614:	e1 f7       	brne	.-8      	; 0x60e <JOY_calibrate+0xee>
     616:	00 c0       	rjmp	.+0      	; 0x618 <JOY_calibrate+0xf8>
     618:	00 c0       	rjmp	.+0      	; 0x61a <JOY_calibrate+0xfa>
     61a:	c4 e1       	ldi	r28, 0x14	; 20
	printf("Move JOY up\n");
     61c:	d0 e0       	ldi	r29, 0x00	; 0
     61e:	60 91 06 01 	lds	r22, 0x0106
     622:	70 91 07 01 	lds	r23, 0x0107
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	b2 d5       	rcall	.+2916   	; 0x118e <ADC_request>
     62a:	2f ef       	ldi	r18, 0xFF	; 255
     62c:	4f e1       	ldi	r20, 0x1F	; 31
     62e:	51 e0       	ldi	r21, 0x01	; 1
     630:	21 50       	subi	r18, 0x01	; 1
     632:	40 40       	sbci	r20, 0x00	; 0
     634:	50 40       	sbci	r21, 0x00	; 0
     636:	e1 f7       	brne	.-8      	; 0x630 <JOY_calibrate+0x110>
     638:	00 c0       	rjmp	.+0      	; 0x63a <JOY_calibrate+0x11a>
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     63a:	00 00       	nop
     63c:	80 91 06 01 	lds	r24, 0x0106
     640:	90 91 07 01 	lds	r25, 0x0107
     644:	c8 d5       	rcall	.+2960   	; 0x11d6 <ADC_read>
     646:	90 91 0b 01 	lds	r25, 0x010B
     64a:	98 17       	cp	r25, r24
     64c:	10 f4       	brcc	.+4      	; 0x652 <JOY_calibrate+0x132>
     64e:	80 93 0b 01 	sts	0x010B, r24
     652:	21 97       	sbiw	r28, 0x01	; 1
     654:	20 97       	sbiw	r28, 0x00	; 0
     656:	19 f7       	brne	.-58     	; 0x61e <JOY_calibrate+0xfe>
     658:	60 e0       	ldi	r22, 0x00	; 0
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	83 e0       	ldi	r24, 0x03	; 3
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	9c d3       	rcall	.+1848   	; 0xd9a <OLED_goto>
     662:	8c ef       	ldi	r24, 0xFC	; 252
     664:	91 e0       	ldi	r25, 0x01	; 1
		
		if(temp > calUp) {calUp = temp;}
     666:	ef d3       	rcall	.+2014   	; 0xe46 <OLED_printString>
     668:	85 e0       	ldi	r24, 0x05	; 5
     66a:	92 e0       	ldi	r25, 0x02	; 2
     66c:	5f d7       	rcall	.+3774   	; 0x152c <puts>
     66e:	8f ef       	ldi	r24, 0xFF	; 255
     670:	9f ef       	ldi	r25, 0xFF	; 255
     672:	22 e0       	ldi	r18, 0x02	; 2
	OLED_goto(2,0);
	OLED_printString("JOY UP");
	printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     674:	81 50       	subi	r24, 0x01	; 1
     676:	90 40       	sbci	r25, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_goto(3,0);
     678:	20 40       	sbci	r18, 0x00	; 0
     67a:	e1 f7       	brne	.-8      	; 0x674 <JOY_calibrate+0x154>
     67c:	00 c0       	rjmp	.+0      	; 0x67e <JOY_calibrate+0x15e>
     67e:	00 c0       	rjmp	.+0      	; 0x680 <JOY_calibrate+0x160>
     680:	c4 e1       	ldi	r28, 0x14	; 20
     682:	d0 e0       	ldi	r29, 0x00	; 0
	OLED_printString("JOY DOWN");
     684:	60 91 06 01 	lds	r22, 0x0106
     688:	70 91 07 01 	lds	r23, 0x0107
	printf("Move JOY down\n");
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	7f d5       	rcall	.+2814   	; 0x118e <ADC_request>
     690:	4f ef       	ldi	r20, 0xFF	; 255
     692:	5f e1       	ldi	r21, 0x1F	; 31
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	41 50       	subi	r20, 0x01	; 1
     698:	50 40       	sbci	r21, 0x00	; 0
     69a:	80 40       	sbci	r24, 0x00	; 0
     69c:	e1 f7       	brne	.-8      	; 0x696 <JOY_calibrate+0x176>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <JOY_calibrate+0x180>
     6a0:	00 00       	nop
     6a2:	80 91 06 01 	lds	r24, 0x0106
     6a6:	90 91 07 01 	lds	r25, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     6aa:	95 d5       	rcall	.+2858   	; 0x11d6 <ADC_read>
     6ac:	90 91 0a 01 	lds	r25, 0x010A
     6b0:	89 17       	cp	r24, r25
     6b2:	10 f4       	brcc	.+4      	; 0x6b8 <JOY_calibrate+0x198>
     6b4:	80 93 0a 01 	sts	0x010A, r24
     6b8:	21 97       	sbiw	r28, 0x01	; 1
     6ba:	20 97       	sbiw	r28, 0x00	; 0
     6bc:	19 f7       	brne	.-58     	; 0x684 <JOY_calibrate+0x164>
     6be:	30 91 0a 01 	lds	r19, 0x010A
     6c2:	20 91 0b 01 	lds	r18, 0x010B
     6c6:	90 91 0c 01 	lds	r25, 0x010C
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     6ca:	80 91 0d 01 	lds	r24, 0x010D
     6ce:	1f 92       	push	r1
     6d0:	3f 93       	push	r19
     6d2:	1f 92       	push	r1
     6d4:	2f 93       	push	r18
		
		if(temp < calDown) {calDown = temp;}
     6d6:	1f 92       	push	r1
     6d8:	9f 93       	push	r25
     6da:	1f 92       	push	r1
     6dc:	8f 93       	push	r24
     6de:	83 e1       	ldi	r24, 0x13	; 19
     6e0:	92 e0       	ldi	r25, 0x02	; 2
     6e2:	9f 93       	push	r25
	OLED_goto(3,0);
	OLED_printString("JOY DOWN");
	printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     6e4:	8f 93       	push	r24
     6e6:	11 d7       	rcall	.+3618   	; 0x150a <printf>
		
		if(temp < calDown) {calDown = temp;}
	}
	
	
	printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
     6e8:	20 91 0b 01 	lds	r18, 0x010B
     6ec:	80 91 0a 01 	lds	r24, 0x010A
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	28 1b       	sub	r18, r24
     6f4:	31 09       	sbc	r19, r1
     6f6:	c9 01       	movw	r24, r18
     6f8:	4d b7       	in	r20, 0x3d	; 61
     6fa:	5e b7       	in	r21, 0x3e	; 62
     6fc:	46 5f       	subi	r20, 0xF6	; 246
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	f8 94       	cli
     704:	5e bf       	out	0x3e, r21	; 62
     706:	0f be       	out	0x3f, r0	; 63
     708:	4d bf       	out	0x3d, r20	; 61
     70a:	99 23       	and	r25, r25
     70c:	0c f4       	brge	.+2      	; 0x710 <JOY_calibrate+0x1f0>
     70e:	01 96       	adiw	r24, 0x01	; 1
     710:	95 95       	asr	r25
     712:	87 95       	ror	r24
	
	meanVert = (calUp - calDown)/2;
     714:	80 93 09 01 	sts	0x0109, r24
     718:	20 91 0d 01 	lds	r18, 0x010D
     71c:	80 91 0c 01 	lds	r24, 0x010C
     720:	30 e0       	ldi	r19, 0x00	; 0
     722:	28 1b       	sub	r18, r24
     724:	31 09       	sbc	r19, r1
     726:	c9 01       	movw	r24, r18
     728:	99 23       	and	r25, r25
     72a:	0c f4       	brge	.+2      	; 0x72e <JOY_calibrate+0x20e>
     72c:	01 96       	adiw	r24, 0x01	; 1
     72e:	95 95       	asr	r25
     730:	87 95       	ror	r24
     732:	80 93 08 01 	sts	0x0108, r24
     736:	60 e0       	ldi	r22, 0x00	; 0
     738:	70 e0       	ldi	r23, 0x00	; 0
     73a:	84 e0       	ldi	r24, 0x04	; 4
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	2d d3       	rcall	.+1626   	; 0xd9a <OLED_goto>
     740:	8d e3       	ldi	r24, 0x3D	; 61
     742:	92 e0       	ldi	r25, 0x02	; 2
	meanHor = (calR - calL)/2;
     744:	80 d3       	rcall	.+1792   	; 0xe46 <OLED_printString>
     746:	90 91 08 01 	lds	r25, 0x0108
     74a:	80 91 09 01 	lds	r24, 0x0109
     74e:	1f 92       	push	r1
     750:	9f 93       	push	r25
     752:	1f 92       	push	r1
     754:	8f 93       	push	r24
     756:	88 e4       	ldi	r24, 0x48	; 72
     758:	92 e0       	ldi	r25, 0x02	; 2
     75a:	9f 93       	push	r25
     75c:	8f 93       	push	r24
     75e:	d5 d6       	rcall	.+3498   	; 0x150a <printf>
     760:	5f ef       	ldi	r21, 0xFF	; 255
	
	OLED_goto(4,0);
     762:	8f ef       	ldi	r24, 0xFF	; 255
     764:	9e e0       	ldi	r25, 0x0E	; 14
     766:	51 50       	subi	r21, 0x01	; 1
     768:	80 40       	sbci	r24, 0x00	; 0
     76a:	90 40       	sbci	r25, 0x00	; 0
     76c:	e1 f7       	brne	.-8      	; 0x766 <JOY_calibrate+0x246>
	OLED_printString("CALIB DONE");
     76e:	00 c0       	rjmp	.+0      	; 0x770 <JOY_calibrate+0x250>
     770:	00 00       	nop
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
	printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	08 95       	ret

00000784 <JOY_requestCurrentPosition>:
     784:	88 37       	cpi	r24, 0x78	; 120
     786:	39 f4       	brne	.+14     	; 0x796 <JOY_requestCurrentPosition+0x12>
     788:	60 91 06 01 	lds	r22, 0x0106
     78c:	70 91 07 01 	lds	r23, 0x0107
     790:	82 e0       	ldi	r24, 0x02	; 2
     792:	fd c4       	rjmp	.+2554   	; 0x118e <ADC_request>
     794:	08 95       	ret
     796:	89 37       	cpi	r24, 0x79	; 121
     798:	31 f4       	brne	.+12     	; 0x7a6 <JOY_requestCurrentPosition+0x22>
     79a:	60 91 06 01 	lds	r22, 0x0106
     79e:	70 91 07 01 	lds	r23, 0x0107
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	f4 c4       	rjmp	.+2536   	; 0x118e <ADC_request>
     7a6:	08 95       	ret

000007a8 <JOY_updatePosition>:
     7a8:	88 37       	cpi	r24, 0x78	; 120
     7aa:	f9 f4       	brne	.+62     	; 0x7ea <JOY_updatePosition+0x42>
     7ac:	80 91 06 01 	lds	r24, 0x0106
	_delay_ms(1000);
}
     7b0:	90 91 07 01 	lds	r25, 0x0107
     7b4:	10 d5       	rcall	.+2592   	; 0x11d6 <ADC_read>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	90 93 af 03 	sts	0x03AF, r25
     7bc:	80 93 ae 03 	sts	0x03AE, r24
     7c0:	20 91 08 01 	lds	r18, 0x0108
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     7c4:	60 91 08 01 	lds	r22, 0x0108
     7c8:	ac 01       	movw	r20, r24
     7ca:	42 1b       	sub	r20, r18
     7cc:	51 09       	sbc	r21, r1
     7ce:	9a 01       	movw	r18, r20
     7d0:	44 e6       	ldi	r20, 0x64	; 100
     7d2:	42 9f       	mul	r20, r18
     7d4:	c0 01       	movw	r24, r0
     7d6:	43 9f       	mul	r20, r19
     7d8:	90 0d       	add	r25, r0
     7da:	11 24       	eor	r1, r1
     7dc:	70 e0       	ldi	r23, 0x00	; 0
     7de:	fd d4       	rcall	.+2554   	; 0x11da <__divmodhi4>
     7e0:	70 93 b3 03 	sts	0x03B3, r23
     7e4:	60 93 b2 03 	sts	0x03B2, r22
     7e8:	08 95       	ret
     7ea:	89 37       	cpi	r24, 0x79	; 121
     7ec:	f1 f4       	brne	.+60     	; 0x82a <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     7ee:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     7f2:	90 91 07 01 	lds	r25, 0x0107
     7f6:	ef d4       	rcall	.+2526   	; 0x11d6 <ADC_read>
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	90 93 b1 03 	sts	0x03B1, r25
     7fe:	80 93 b0 03 	sts	0x03B0, r24
     802:	20 91 09 01 	lds	r18, 0x0109
     806:	60 91 09 01 	lds	r22, 0x0109
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     80a:	ac 01       	movw	r20, r24
     80c:	42 1b       	sub	r20, r18
     80e:	51 09       	sbc	r21, r1
     810:	9a 01       	movw	r18, r20
     812:	44 e6       	ldi	r20, 0x64	; 100
     814:	42 9f       	mul	r20, r18
     816:	c0 01       	movw	r24, r0
     818:	43 9f       	mul	r20, r19
     81a:	90 0d       	add	r25, r0
     81c:	11 24       	eor	r1, r1
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	dc d4       	rcall	.+2488   	; 0x11da <__divmodhi4>
     822:	70 93 b5 03 	sts	0x03B5, r23
     826:	60 93 b4 03 	sts	0x03B4, r22
     82a:	08 95       	ret

0000082c <JOY_calculateDirection>:
     82c:	80 91 b2 03 	lds	r24, 0x03B2
     830:	90 91 b3 03 	lds	r25, 0x03B3
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     834:	8b 35       	cpi	r24, 0x5B	; 91
     836:	91 05       	cpc	r25, r1
     838:	24 f0       	brlt	.+8      	; 0x842 <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     83a:	83 e0       	ldi	r24, 0x03	; 3
     83c:	80 93 ad 03 	sts	0x03AD, r24
     840:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     842:	86 3a       	cpi	r24, 0xA6	; 166
     844:	9f 4f       	sbci	r25, 0xFF	; 255
     846:	24 f4       	brge	.+8      	; 0x850 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     848:	84 e0       	ldi	r24, 0x04	; 4
     84a:	80 93 ad 03 	sts	0x03AD, r24
     84e:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     850:	80 91 b4 03 	lds	r24, 0x03B4
     854:	90 91 b5 03 	lds	r25, 0x03B5
     858:	8b 35       	cpi	r24, 0x5B	; 91
     85a:	91 05       	cpc	r25, r1
     85c:	24 f0       	brlt	.+8      	; 0x866 <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	80 93 ad 03 	sts	0x03AD, r24
     864:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     866:	86 3a       	cpi	r24, 0xA6	; 166
     868:	9f 4f       	sbci	r25, 0xFF	; 255
     86a:	24 f4       	brge	.+8      	; 0x874 <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     86c:	82 e0       	ldi	r24, 0x02	; 2
     86e:	80 93 ad 03 	sts	0x03AD, r24
     872:	08 95       	ret
	else{currentDirection = CENTRE;}
     874:	10 92 ad 03 	sts	0x03AD, r1
     878:	08 95       	ret

0000087a <JOY_getDirection>:
// Before the value is returned, the values of position in x and y direction are 
// requested from the ADC and written to the currentPosition and 
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
     87a:	88 e7       	ldi	r24, 0x78	; 120
     87c:	83 df       	rcall	.-250    	; 0x784 <JOY_requestCurrentPosition>
     87e:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     880:	8a 95       	dec	r24
     882:	f1 f7       	brne	.-4      	; 0x880 <JOY_getDirection+0x6>
     884:	00 00       	nop
     886:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     888:	8f df       	rcall	.-226    	; 0x7a8 <JOY_updatePosition>
     88a:	89 e7       	ldi	r24, 0x79	; 121
     88c:	7b df       	rcall	.-266    	; 0x784 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     88e:	82 e6       	ldi	r24, 0x62	; 98
     890:	8a 95       	dec	r24
     892:	f1 f7       	brne	.-4      	; 0x890 <JOY_getDirection+0x16>
     894:	00 00       	nop
     896:	89 e7       	ldi	r24, 0x79	; 121
     898:	87 df       	rcall	.-242    	; 0x7a8 <JOY_updatePosition>
     89a:	c8 df       	rcall	.-112    	; 0x82c <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     89c:	80 91 ad 03 	lds	r24, 0x03AD
     8a0:	08 95       	ret

000008a2 <MCP2515_reset>:
	}
}

 void MCP2515_reset()
{
	SPI_send(MCP_RESET);
     8a2:	80 ec       	ldi	r24, 0xC0	; 192
     8a4:	36 c4       	rjmp	.+2156   	; 0x1112 <SPI_send>
     8a6:	08 95       	ret

000008a8 <MCP2515_read>:
     8a8:	cf 93       	push	r28
}

uint8_t MCP2515_read(uint8_t address, SPI_SLAVES slave)
{
     8aa:	df 93       	push	r29
     8ac:	d8 2f       	mov	r29, r24
     8ae:	c6 2f       	mov	r28, r22
	SPI_activateSlave(slave);
     8b0:	86 2f       	mov	r24, r22
     8b2:	44 d4       	rcall	.+2184   	; 0x113c <SPI_activateSlave>
     8b4:	83 e0       	ldi	r24, 0x03	; 3
	SPI_send(MCP_READ);
     8b6:	2d d4       	rcall	.+2138   	; 0x1112 <SPI_send>
     8b8:	8d 2f       	mov	r24, r29
     8ba:	2b d4       	rcall	.+2134   	; 0x1112 <SPI_send>
	SPI_send(address);
     8bc:	39 d4       	rcall	.+2162   	; 0x1130 <SPI_receive>
     8be:	d8 2f       	mov	r29, r24
     8c0:	8c 2f       	mov	r24, r28
	
	uint8_t result;
	result = SPI_receive();
     8c2:	40 d4       	rcall	.+2176   	; 0x1144 <SPI_deactivateSlave>
     8c4:	8d 2f       	mov	r24, r29
     8c6:	df 91       	pop	r29
	
	SPI_deactivateSlave(slave);
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <MCP2515_init>:
     8cc:	ea df       	rcall	.-44     	; 0x8a2 <MCP2515_reset>
	return result;
}
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	8e e0       	ldi	r24, 0x0E	; 14
     8d2:	ea df       	rcall	.-44     	; 0x8a8 <MCP2515_read>
     8d4:	98 2f       	mov	r25, r24
{
	uint8_t value;
	MCP2515_reset(); // Send reset-command
	
	// Self-test
	value = MCP2515_read(MCP_CANSTAT, SS_CAN_CONTROLLER);
     8d6:	90 7e       	andi	r25, 0xE0	; 224
	if((value & MODE_MASK) != MODE_CONFIG) 
     8d8:	90 38       	cpi	r25, 0x80	; 128
     8da:	69 f0       	breq	.+26     	; 0x8f6 <MCP2515_init+0x2a>
     8dc:	1f 92       	push	r1
     8de:	8f 93       	push	r24
	{
		printf("MCP2515 is NOT in configuration mode after reset! Value: %d\n", value);
     8e0:	8d e6       	ldi	r24, 0x6D	; 109
     8e2:	92 e0       	ldi	r25, 0x02	; 2
     8e4:	9f 93       	push	r25
     8e6:	8f 93       	push	r24
     8e8:	10 d6       	rcall	.+3104   	; 0x150a <printf>
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
		return 1;
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	08 95       	ret
     8f6:	08 95       	ret

000008f8 <MCP2515_readStatus>:
     8f8:	cf 93       	push	r28
     8fa:	df 93       	push	r29
	}
}
     8fc:	c8 2f       	mov	r28, r24
	SPI_deactivateSlave(slave);
}

uint8_t MCP2515_readStatus(SPI_SLAVES slave)
{
	SPI_activateSlave(slave);
     8fe:	1e d4       	rcall	.+2108   	; 0x113c <SPI_activateSlave>
     900:	80 ea       	ldi	r24, 0xA0	; 160
	uint8_t result;
	
	SPI_send(MCP_READ_STATUS);
     902:	07 d4       	rcall	.+2062   	; 0x1112 <SPI_send>
     904:	15 d4       	rcall	.+2090   	; 0x1130 <SPI_receive>
     906:	d8 2f       	mov	r29, r24
	result = SPI_receive();
     908:	8c 2f       	mov	r24, r28
     90a:	1c d4       	rcall	.+2104   	; 0x1144 <SPI_deactivateSlave>
     90c:	8d 2f       	mov	r24, r29
	
	SPI_deactivateSlave(slave);
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	08 95       	ret

00000914 <startGame>:

int menuFrameOffset = 10; //Columns from left frame border
//******************************************************************************************

void startGame()
{
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
	OLED_clear();
     918:	5d d2       	rcall	.+1210   	; 0xdd4 <OLED_clear>
     91a:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	3b d2       	rcall	.+1142   	; 0xd9a <OLED_goto>
     924:	80 ec       	ldi	r24, 0xC0	; 192
     926:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("START");
     928:	8e d2       	rcall	.+1308   	; 0xe46 <OLED_printString>
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_goto(3,0);
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	33 d2       	rcall	.+1126   	; 0xd9a <OLED_goto>
     934:	ce e0       	ldi	r28, 0x0E	; 14
     936:	d0 e0       	ldi	r29, 0x00	; 0
     938:	86 ec       	ldi	r24, 0xC6	; 198
     93a:	92 e0       	ldi	r25, 0x02	; 2
     93c:	84 d2       	rcall	.+1288   	; 0xe46 <OLED_printString>
     93e:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     940:	8f e7       	ldi	r24, 0x7F	; 127
     942:	97 e0       	ldi	r25, 0x07	; 7
     944:	21 50       	subi	r18, 0x01	; 1
     946:	80 40       	sbci	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     948:	90 40       	sbci	r25, 0x00	; 0
     94a:	e1 f7       	brne	.-8      	; 0x944 <startGame+0x30>
     94c:	00 c0       	rjmp	.+0      	; 0x94e <startGame+0x3a>
     94e:	00 00       	nop
     950:	21 97       	sbiw	r28, 0x01	; 1
     952:	20 97       	sbiw	r28, 0x00	; 0
     954:	89 f7       	brne	.-30     	; 0x938 <startGame+0x24>
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	85 e0       	ldi	r24, 0x05	; 5
	OLED_goto(0,0);
	OLED_printString("START");
	
	OLED_goto(3,0);
	
	for(int i = 14; i > 0; i--)
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	1d d2       	rcall	.+1082   	; 0xd9a <OLED_goto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_goto(5,0);
     960:	88 ec       	ldi	r24, 0xC8	; 200
     962:	92 e0       	ldi	r25, 0x02	; 2
     964:	70 d2       	rcall	.+1248   	; 0xe46 <OLED_printString>
     966:	2f ef       	ldi	r18, 0xFF	; 255
     968:	8f ef       	ldi	r24, 0xFF	; 255
     96a:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     96c:	21 50       	subi	r18, 0x01	; 1
     96e:	80 40       	sbci	r24, 0x00	; 0
     970:	90 40       	sbci	r25, 0x00	; 0
     972:	e1 f7       	brne	.-8      	; 0x96c <startGame+0x58>
     974:	00 c0       	rjmp	.+0      	; 0x976 <startGame+0x62>
     976:	00 c0       	rjmp	.+0      	; 0x978 <startGame+0x64>
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	08 95       	ret

0000097e <MENU_addMenuItem>:
     97e:	cf 92       	push	r12
     980:	df 92       	push	r13
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
	_delay_ms(3000);
}
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     98c:	df 93       	push	r29
     98e:	8c 01       	movw	r16, r24
     990:	7b 01       	movw	r14, r22
     992:	6a 01       	movw	r12, r20
     994:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     996:	80 91 b9 03 	lds	r24, 0x03B9
     99a:	90 91 ba 03 	lds	r25, 0x03BA
     99e:	89 2b       	or	r24, r25
     9a0:	19 f0       	breq	.+6      	; 0x9a8 <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     9a2:	81 ed       	ldi	r24, 0xD1	; 209
     9a4:	92 e0       	ldi	r25, 0x02	; 2
     9a6:	c2 d5       	rcall	.+2948   	; 0x152c <puts>
     9a8:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	3d d4       	rcall	.+2170   	; 0x1228 <malloc>
     9ae:	fc 01       	movw	r30, r24
     9b0:	90 93 ba 03 	sts	0x03BA, r25
     9b4:	80 93 b9 03 	sts	0x03B9, r24
     9b8:	f3 82       	std	Z+3, r15	; 0x03
     9ba:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     9bc:	11 83       	std	Z+1, r17	; 0x01
     9be:	00 83       	st	Z, r16
	currItem->name = name;
     9c0:	cd 2b       	or	r28, r29
     9c2:	39 f0       	breq	.+14     	; 0x9d2 <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     9c4:	d5 82       	std	Z+5, r13	; 0x05
     9c6:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     9cc:	97 83       	std	Z+7, r25	; 0x07
     9ce:	86 83       	std	Z+6, r24	; 0x06
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <MENU_addMenuItem+0x5c>
     9d2:	15 82       	std	Z+5, r1	; 0x05
     9d4:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     9d6:	17 82       	std	Z+7, r1	; 0x07
     9d8:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
	}
}
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	ef 90       	pop	r14
     9e6:	df 90       	pop	r13
     9e8:	cf 90       	pop	r12
     9ea:	08 95       	ret

000009ec <MENU_buildMenus>:
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     9f0:	86 e1       	ldi	r24, 0x16	; 22
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	19 d4       	rcall	.+2098   	; 0x1228 <malloc>
     9f6:	ec 01       	movw	r28, r24
     9f8:	90 93 c0 03 	sts	0x03C0, r25
     9fc:	80 93 bf 03 	sts	0x03BF, r24
     a00:	87 ee       	ldi	r24, 0xE7	; 231
	mainMenu->menuName = "MainMenu";
     a02:	92 e0       	ldi	r25, 0x02	; 2
     a04:	99 83       	std	Y+1, r25	; 0x01
     a06:	88 83       	st	Y, r24
     a08:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     a0a:	1c 8a       	std	Y+20, r1	; 0x14
     a0c:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	9b 83       	std	Y+3, r25	; 0x03
     a12:	8a 83       	std	Y+2, r24	; 0x02
     a14:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	07 d4       	rcall	.+2062   	; 0x1228 <malloc>
     a1a:	fc 01       	movw	r30, r24
     a1c:	90 93 be 03 	sts	0x03BE, r25
     a20:	80 93 bd 03 	sts	0x03BD, r24
     a24:	80 ef       	ldi	r24, 0xF0	; 240
     a26:	92 e0       	ldi	r25, 0x02	; 2
	difficultyMenu->menuName = "DifficultyMenu";
     a28:	91 83       	std	Z+1, r25	; 0x01
     a2a:	80 83       	st	Z, r24
     a2c:	d5 8b       	std	Z+21, r29	; 0x15
     a2e:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     a30:	83 e0       	ldi	r24, 0x03	; 3
     a32:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     a34:	93 83       	std	Z+3, r25	; 0x03
     a36:	82 83       	std	Z+2, r24	; 0x02
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	be 01       	movw	r22, r28
     a42:	8f ef       	ldi	r24, 0xFF	; 255
     a44:	92 e0       	ldi	r25, 0x02	; 2
     a46:	9b df       	rcall	.-202    	; 0x97e <MENU_addMenuItem>
     a48:	60 91 bf 03 	lds	r22, 0x03BF
     a4c:	70 91 c0 03 	lds	r23, 0x03C0
	mainMenu->children[0] = currItem;
     a50:	e0 91 b9 03 	lds	r30, 0x03B9
     a54:	f0 91 ba 03 	lds	r31, 0x03BA
     a58:	db 01       	movw	r26, r22
     a5a:	15 96       	adiw	r26, 0x05	; 5
     a5c:	fc 93       	st	X, r31
     a5e:	ee 93       	st	-X, r30
     a60:	14 97       	sbiw	r26, 0x04	; 4
     a62:	8a e8       	ldi	r24, 0x8A	; 138
     a64:	94 e0       	ldi	r25, 0x04	; 4
     a66:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
     a68:	82 87       	std	Z+10, r24	; 0x0a
     a6a:	40 91 bd 03 	lds	r20, 0x03BD
     a6e:	50 91 be 03 	lds	r21, 0x03BE
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     a72:	21 e0       	ldi	r18, 0x01	; 1
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	88 e0       	ldi	r24, 0x08	; 8
     a78:	93 e0       	ldi	r25, 0x03	; 3
     a7a:	81 df       	rcall	.-254    	; 0x97e <MENU_addMenuItem>
     a7c:	60 91 bf 03 	lds	r22, 0x03BF
     a80:	70 91 c0 03 	lds	r23, 0x03C0
	mainMenu->children[1] = currItem;
     a84:	80 91 b9 03 	lds	r24, 0x03B9
     a88:	90 91 ba 03 	lds	r25, 0x03BA
     a8c:	fb 01       	movw	r30, r22
     a8e:	97 83       	std	Z+7, r25	; 0x07
     a90:	86 83       	std	Z+6, r24	; 0x06
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	40 e0       	ldi	r20, 0x00	; 0
     a98:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     a9a:	83 e1       	ldi	r24, 0x13	; 19
     a9c:	93 e0       	ldi	r25, 0x03	; 3
     a9e:	6f df       	rcall	.-290    	; 0x97e <MENU_addMenuItem>
     aa0:	60 91 bf 03 	lds	r22, 0x03BF
     aa4:	70 91 c0 03 	lds	r23, 0x03C0
     aa8:	80 91 b9 03 	lds	r24, 0x03B9
	mainMenu->children[2] = currItem;
     aac:	90 91 ba 03 	lds	r25, 0x03BA
     ab0:	db 01       	movw	r26, r22
     ab2:	19 96       	adiw	r26, 0x09	; 9
     ab4:	9c 93       	st	X, r25
     ab6:	8e 93       	st	-X, r24
     ab8:	18 97       	sbiw	r26, 0x08	; 8
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	50 e0       	ldi	r21, 0x00	; 0
     ac2:	8e e1       	ldi	r24, 0x1E	; 30
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
     ac4:	93 e0       	ldi	r25, 0x03	; 3
     ac6:	5b df       	rcall	.-330    	; 0x97e <MENU_addMenuItem>
     ac8:	60 91 bf 03 	lds	r22, 0x03BF
     acc:	70 91 c0 03 	lds	r23, 0x03C0
     ad0:	e0 91 b9 03 	lds	r30, 0x03B9
	mainMenu->children[3] = currItem;
     ad4:	f0 91 ba 03 	lds	r31, 0x03BA
     ad8:	db 01       	movw	r26, r22
     ada:	1b 96       	adiw	r26, 0x0b	; 11
     adc:	fc 93       	st	X, r31
     ade:	ee 93       	st	-X, r30
     ae0:	1a 97       	sbiw	r26, 0x0a	; 10
     ae2:	80 e9       	ldi	r24, 0x90	; 144
     ae4:	92 e0       	ldi	r25, 0x02	; 2
     ae6:	93 87       	std	Z+11, r25	; 0x0b
     ae8:	82 87       	std	Z+10, r24	; 0x0a
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
     aee:	40 e0       	ldi	r20, 0x00	; 0
     af0:	50 e0       	ldi	r21, 0x00	; 0
     af2:	88 e2       	ldi	r24, 0x28	; 40
     af4:	93 e0       	ldi	r25, 0x03	; 3
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
     af6:	43 df       	rcall	.-378    	; 0x97e <MENU_addMenuItem>
     af8:	e0 91 bf 03 	lds	r30, 0x03BF
     afc:	f0 91 c0 03 	lds	r31, 0x03C0
     b00:	80 91 b9 03 	lds	r24, 0x03B9
     b04:	90 91 ba 03 	lds	r25, 0x03BA
	mainMenu->children[4] = currItem;
     b08:	95 87       	std	Z+13, r25	; 0x0d
     b0a:	84 87       	std	Z+12, r24	; 0x0c
     b0c:	10 92 ba 03 	sts	0x03BA, r1
     b10:	10 92 b9 03 	sts	0x03B9, r1
     b14:	60 91 bd 03 	lds	r22, 0x03BD
     b18:	70 91 be 03 	lds	r23, 0x03BE
	
	currItem = NULL;
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	8d e2       	ldi	r24, 0x2D	; 45
     b26:	93 e0       	ldi	r25, 0x03	; 3
     b28:	2a df       	rcall	.-428    	; 0x97e <MENU_addMenuItem>
     b2a:	60 91 bd 03 	lds	r22, 0x03BD
     b2e:	70 91 be 03 	lds	r23, 0x03BE
     b32:	80 91 b9 03 	lds	r24, 0x03B9
     b36:	90 91 ba 03 	lds	r25, 0x03BA
	difficultyMenu->children[0] = currItem;
     b3a:	fb 01       	movw	r30, r22
     b3c:	95 83       	std	Z+5, r25	; 0x05
     b3e:	84 83       	std	Z+4, r24	; 0x04
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	82 e3       	ldi	r24, 0x32	; 50
     b4a:	93 e0       	ldi	r25, 0x03	; 3
     b4c:	18 df       	rcall	.-464    	; 0x97e <MENU_addMenuItem>
     b4e:	60 91 bd 03 	lds	r22, 0x03BD
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
     b52:	70 91 be 03 	lds	r23, 0x03BE
     b56:	80 91 b9 03 	lds	r24, 0x03B9
     b5a:	90 91 ba 03 	lds	r25, 0x03BA
     b5e:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
     b60:	17 96       	adiw	r26, 0x07	; 7
     b62:	9c 93       	st	X, r25
     b64:	8e 93       	st	-X, r24
     b66:	16 97       	sbiw	r26, 0x06	; 6
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	50 e0       	ldi	r21, 0x00	; 0
     b70:	89 e3       	ldi	r24, 0x39	; 57
     b72:	93 e0       	ldi	r25, 0x03	; 3
     b74:	04 df       	rcall	.-504    	; 0x97e <MENU_addMenuItem>
     b76:	e0 91 bd 03 	lds	r30, 0x03BD
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
     b7a:	f0 91 be 03 	lds	r31, 0x03BE
     b7e:	80 91 b9 03 	lds	r24, 0x03B9
     b82:	90 91 ba 03 	lds	r25, 0x03BA
     b86:	91 87       	std	Z+9, r25	; 0x09
     b88:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	08 95       	ret

00000b90 <MENU_printMenuItem>:
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	ec 01       	movw	r28, r24
     b96:	cb 01       	movw	r24, r22
     b98:	20 97       	sbiw	r28, 0x00	; 0
     b9a:	49 f0       	breq	.+18     	; 0xbae <MENU_printMenuItem+0x1e>
     b9c:	60 91 0e 01 	lds	r22, 0x010E
}
     ba0:	70 91 0f 01 	lds	r23, 0x010F

void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
     ba4:	fa d0       	rcall	.+500    	; 0xd9a <OLED_goto>
     ba6:	88 81       	ld	r24, Y
		OLED_printString(item->name);
     ba8:	99 81       	ldd	r25, Y+1	; 0x01
     baa:	4d d1       	rcall	.+666    	; 0xe46 <OLED_printString>
     bac:	07 c0       	rjmp	.+14     	; 0xbbc <MENU_printMenuItem+0x2c>
     bae:	8e e3       	ldi	r24, 0x3E	; 62
     bb0:	93 e0       	ldi	r25, 0x03	; 3
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
     bb2:	9f 93       	push	r25
     bb4:	8f 93       	push	r24
     bb6:	a9 d4       	rcall	.+2386   	; 0x150a <printf>
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	08 95       	ret

00000bc2 <MENU_printMenu>:
	}
}
     bc2:	cf 92       	push	r12
     bc4:	df 92       	push	r13
     bc6:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
     bc8:	ff 92       	push	r15
     bca:	0f 93       	push	r16
     bcc:	1f 93       	push	r17
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	6c 01       	movw	r12, r24
     bd4:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
     bd6:	fe d0       	rcall	.+508    	; 0xdd4 <OLED_clear>
     bd8:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	8b d1       	rcall	.+790    	; 0xef4 <OLED_moveArrow>
     bde:	1e 14       	cp	r1, r14
     be0:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
     be2:	7c f4       	brge	.+30     	; 0xc02 <MENU_printMenu+0x40>
     be4:	86 01       	movw	r16, r12
     be6:	0c 5f       	subi	r16, 0xFC	; 252
     be8:	1f 4f       	sbci	r17, 0xFF	; 255
     bea:	c0 e0       	ldi	r28, 0x00	; 0
     bec:	d0 e0       	ldi	r29, 0x00	; 0
     bee:	be 01       	movw	r22, r28
     bf0:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
     bf2:	81 91       	ld	r24, Z+
     bf4:	91 91       	ld	r25, Z+
     bf6:	8f 01       	movw	r16, r30
     bf8:	cb df       	rcall	.-106    	; 0xb90 <MENU_printMenuItem>
     bfa:	21 96       	adiw	r28, 0x01	; 1
     bfc:	ce 15       	cp	r28, r14
     bfe:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
     c00:	b1 f7       	brne	.-20     	; 0xbee <MENU_printMenu+0x2c>
     c02:	d0 92 bc 03 	sts	0x03BC, r13
     c06:	c0 92 bb 03 	sts	0x03BB, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
     c0a:	10 92 b7 03 	sts	0x03B7, r1
     c0e:	10 92 b6 03 	sts	0x03B6, r1
	
	currentPosition = 0;
     c12:	f6 01       	movw	r30, r12
     c14:	84 81       	ldd	r24, Z+4	; 0x04
     c16:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
     c18:	90 93 ba 03 	sts	0x03BA, r25
     c1c:	80 93 b9 03 	sts	0x03B9, r24
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
}
     c26:	0f 91       	pop	r16
     c28:	ff 90       	pop	r15
     c2a:	ef 90       	pop	r14
     c2c:	df 90       	pop	r13
     c2e:	cf 90       	pop	r12
     c30:	08 95       	ret

00000c32 <MENU_moveUp>:
     c32:	20 91 b6 03 	lds	r18, 0x03B6
     c36:	30 91 b7 03 	lds	r19, 0x03B7
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
     c3a:	12 16       	cp	r1, r18
     c3c:	13 06       	cpc	r1, r19
     c3e:	bc f4       	brge	.+46     	; 0xc6e <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
     c40:	c9 01       	movw	r24, r18
     c42:	01 97       	sbiw	r24, 0x01	; 1
     c44:	90 93 b7 03 	sts	0x03B7, r25
     c48:	80 93 b6 03 	sts	0x03B6, r24
		currItem = currentMenu->children[currentPosition];
     c4c:	e0 91 bb 03 	lds	r30, 0x03BB
     c50:	f0 91 bc 03 	lds	r31, 0x03BC
     c54:	2f 5f       	subi	r18, 0xFF	; 255
     c56:	3f 4f       	sbci	r19, 0xFF	; 255
     c58:	22 0f       	add	r18, r18
     c5a:	33 1f       	adc	r19, r19
     c5c:	e2 0f       	add	r30, r18
     c5e:	f3 1f       	adc	r31, r19
     c60:	20 81       	ld	r18, Z
     c62:	31 81       	ldd	r19, Z+1	; 0x01
     c64:	30 93 ba 03 	sts	0x03BA, r19
     c68:	20 93 b9 03 	sts	0x03B9, r18
		OLED_moveArrow(currentPosition);
     c6c:	43 c1       	rjmp	.+646    	; 0xef4 <OLED_moveArrow>
     c6e:	08 95       	ret

00000c70 <MENU_moveDown>:
     c70:	e0 91 bb 03 	lds	r30, 0x03BB
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
     c74:	f0 91 bc 03 	lds	r31, 0x03BC
     c78:	20 91 b6 03 	lds	r18, 0x03B6
     c7c:	30 91 b7 03 	lds	r19, 0x03B7
     c80:	82 81       	ldd	r24, Z+2	; 0x02
     c82:	93 81       	ldd	r25, Z+3	; 0x03
     c84:	01 97       	sbiw	r24, 0x01	; 1
     c86:	28 17       	cp	r18, r24
     c88:	39 07       	cpc	r19, r25
     c8a:	a4 f4       	brge	.+40     	; 0xcb4 <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
     c8c:	c9 01       	movw	r24, r18
     c8e:	01 96       	adiw	r24, 0x01	; 1
     c90:	90 93 b7 03 	sts	0x03B7, r25
     c94:	80 93 b6 03 	sts	0x03B6, r24
		currItem = currentMenu->children[currentPosition];
     c98:	2d 5f       	subi	r18, 0xFD	; 253
     c9a:	3f 4f       	sbci	r19, 0xFF	; 255
     c9c:	22 0f       	add	r18, r18
     c9e:	33 1f       	adc	r19, r19
     ca0:	e2 0f       	add	r30, r18
     ca2:	f3 1f       	adc	r31, r19
     ca4:	20 81       	ld	r18, Z
     ca6:	31 81       	ldd	r19, Z+1	; 0x01
     ca8:	30 93 ba 03 	sts	0x03BA, r19
     cac:	20 93 b9 03 	sts	0x03B9, r18
		OLED_moveArrow(currentPosition);
     cb0:	21 c1       	rjmp	.+578    	; 0xef4 <OLED_moveArrow>
     cb2:	08 95       	ret
     cb4:	10 92 b7 03 	sts	0x03B7, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
     cb8:	10 92 b6 03 	sts	0x03B6, r1
     cbc:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
     cbe:	95 81       	ldd	r25, Z+5	; 0x05
     cc0:	90 93 ba 03 	sts	0x03BA, r25
     cc4:	80 93 b9 03 	sts	0x03B9, r24
     cc8:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	13 c1       	rjmp	.+550    	; 0xef4 <OLED_moveArrow>
     cce:	08 95       	ret

00000cd0 <MENU_moveLeft>:
     cd0:	e0 91 bb 03 	lds	r30, 0x03BB
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
     cd4:	f0 91 bc 03 	lds	r31, 0x03BC
     cd8:	84 89       	ldd	r24, Z+20	; 0x14
     cda:	95 89       	ldd	r25, Z+21	; 0x15
     cdc:	00 97       	sbiw	r24, 0x00	; 0
     cde:	21 f0       	breq	.+8      	; 0xce8 <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
     ce0:	fc 01       	movw	r30, r24
     ce2:	62 81       	ldd	r22, Z+2	; 0x02
     ce4:	73 81       	ldd	r23, Z+3	; 0x03
     ce6:	6d cf       	rjmp	.-294    	; 0xbc2 <MENU_printMenu>
     ce8:	08 95       	ret

00000cea <MENU_reactivate>:
     cea:	80 91 bb 03 	lds	r24, 0x03BB
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
     cee:	90 91 bc 03 	lds	r25, 0x03BC
     cf2:	fc 01       	movw	r30, r24
     cf4:	62 81       	ldd	r22, Z+2	; 0x02
     cf6:	73 81       	ldd	r23, Z+3	; 0x03
     cf8:	64 df       	rcall	.-312    	; 0xbc2 <MENU_printMenu>
     cfa:	18 c0       	rjmp	.+48     	; 0xd2c <MENU_waitForInput>
	MENU_waitForInput();
     cfc:	08 95       	ret

00000cfe <MENU_moveRight>:
     cfe:	e0 91 b9 03 	lds	r30, 0x03B9
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
     d02:	f0 91 ba 03 	lds	r31, 0x03BA
     d06:	86 81       	ldd	r24, Z+6	; 0x06
     d08:	97 81       	ldd	r25, Z+7	; 0x07
     d0a:	89 2b       	or	r24, r25
     d0c:	39 f0       	breq	.+14     	; 0xd1c <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
     d0e:	84 81       	ldd	r24, Z+4	; 0x04
     d10:	95 81       	ldd	r25, Z+5	; 0x05
     d12:	fc 01       	movw	r30, r24
     d14:	62 81       	ldd	r22, Z+2	; 0x02
     d16:	73 81       	ldd	r23, Z+3	; 0x03
     d18:	54 cf       	rjmp	.-344    	; 0xbc2 <MENU_printMenu>
     d1a:	08 95       	ret
     d1c:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
     d1e:	f3 85       	ldd	r31, Z+11	; 0x0b
     d20:	e0 2d       	mov	r30, r0
     d22:	30 97       	sbiw	r30, 0x00	; 0
     d24:	11 f0       	breq	.+4      	; 0xd2a <MENU_moveRight+0x2c>
     d26:	09 95       	icall
	{
		currItem->functionPtr();
     d28:	e0 cf       	rjmp	.-64     	; 0xcea <MENU_reactivate>
		MENU_reactivate();
     d2a:	08 95       	ret

00000d2c <MENU_waitForInput>:
     d2c:	80 91 b6 03 	lds	r24, 0x03B6
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
     d30:	90 91 b7 03 	lds	r25, 0x03B7
     d34:	df d0       	rcall	.+446    	; 0xef4 <OLED_moveArrow>
     d36:	80 91 b8 03 	lds	r24, 0x03B8
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
     d3a:	88 23       	and	r24, r24
     d3c:	f9 f0       	breq	.+62     	; 0xd7c <MENU_waitForInput+0x50>
     d3e:	9d dd       	rcall	.-1222   	; 0x87a <JOY_getDirection>
	{
		currDir = JOY_getDirection();
     d40:	82 30       	cpi	r24, 0x02	; 2
     d42:	71 f0       	breq	.+28     	; 0xd60 <MENU_waitForInput+0x34>
		switch(currDir){
     d44:	18 f4       	brcc	.+6      	; 0xd4c <MENU_waitForInput+0x20>
     d46:	81 30       	cpi	r24, 0x01	; 1
     d48:	49 f0       	breq	.+18     	; 0xd5c <MENU_waitForInput+0x30>
     d4a:	0b c0       	rjmp	.+22     	; 0xd62 <MENU_waitForInput+0x36>
     d4c:	83 30       	cpi	r24, 0x03	; 3
     d4e:	21 f0       	breq	.+8      	; 0xd58 <MENU_waitForInput+0x2c>
     d50:	84 30       	cpi	r24, 0x04	; 4
     d52:	39 f4       	brne	.+14     	; 0xd62 <MENU_waitForInput+0x36>
     d54:	bd df       	rcall	.-134    	; 0xcd0 <MENU_moveLeft>
     d56:	05 c0       	rjmp	.+10     	; 0xd62 <MENU_waitForInput+0x36>
			case LEFT:
			MENU_moveLeft();
     d58:	d2 df       	rcall	.-92     	; 0xcfe <MENU_moveRight>
     d5a:	03 c0       	rjmp	.+6      	; 0xd62 <MENU_waitForInput+0x36>
			break;
     d5c:	6a df       	rcall	.-300    	; 0xc32 <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
     d5e:	01 c0       	rjmp	.+2      	; 0xd62 <MENU_waitForInput+0x36>
     d60:	87 df       	rcall	.-242    	; 0xc70 <MENU_moveDown>
			break;
     d62:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
     d64:	8f e7       	ldi	r24, 0x7F	; 127
     d66:	94 e0       	ldi	r25, 0x04	; 4
			break;
     d68:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
     d6a:	80 40       	sbci	r24, 0x00	; 0
     d6c:	90 40       	sbci	r25, 0x00	; 0
     d6e:	e1 f7       	brne	.-8      	; 0xd68 <MENU_waitForInput+0x3c>
     d70:	00 c0       	rjmp	.+0      	; 0xd72 <MENU_waitForInput+0x46>
     d72:	00 00       	nop
     d74:	80 91 b8 03 	lds	r24, 0x03B8
     d78:	81 11       	cpse	r24, r1
     d7a:	e1 cf       	rjmp	.-62     	; 0xd3e <MENU_waitForInput+0x12>
     d7c:	08 95       	ret

00000d7e <MENU_activate>:
     d7e:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
     d80:	80 93 b8 03 	sts	0x03B8, r24
     d84:	33 de       	rcall	.-922    	; 0x9ec <MENU_buildMenus>
     d86:	80 91 bf 03 	lds	r24, 0x03BF
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
     d8a:	90 91 c0 03 	lds	r25, 0x03C0
     d8e:	fc 01       	movw	r30, r24
     d90:	62 81       	ldd	r22, Z+2	; 0x02
     d92:	73 81       	ldd	r23, Z+3	; 0x03
     d94:	16 df       	rcall	.-468    	; 0xbc2 <MENU_printMenu>
     d96:	ca cf       	rjmp	.-108    	; 0xd2c <MENU_waitForInput>
     d98:	08 95       	ret

00000d9a <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
     d9a:	26 2f       	mov	r18, r22
     d9c:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
     d9e:	75 95       	asr	r23
     da0:	67 95       	ror	r22
     da2:	75 95       	asr	r23
     da4:	67 95       	ror	r22
     da6:	75 95       	asr	r23
     da8:	67 95       	ror	r22
     daa:	75 95       	asr	r23
     dac:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
     dae:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
     db0:	80 55       	subi	r24, 0x50	; 80
     db2:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
     db4:	e0 91 12 01 	lds	r30, 0x0112
     db8:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     dbc:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
     dbe:	e0 91 12 01 	lds	r30, 0x0112
     dc2:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     dc6:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
     dc8:	e0 91 12 01 	lds	r30, 0x0112
     dcc:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     dd0:	60 83       	st	Z, r22
     dd2:	08 95       	ret

00000dd4 <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	c1 e0       	ldi	r28, 0x01	; 1
     ddc:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
     de2:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	d8 df       	rcall	.-80     	; 0xd9a <OLED_goto>
     dea:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
     dec:	e0 91 10 01 	lds	r30, 0x0110
		{
			OLED_writeByteToOLED(oled_data, 0x00);
     df0:	f0 91 11 01 	lds	r31, 0x0111
     df4:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     df6:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
     df8:	80 38       	cpi	r24, 0x80	; 128
     dfa:	c1 f7       	brne	.-16     	; 0xdec <OLED_clear+0x18>
     dfc:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
     dfe:	9d 2f       	mov	r25, r29
     e00:	21 96       	adiw	r28, 0x01	; 1
     e02:	c9 30       	cpi	r28, 0x09	; 9
     e04:	d1 05       	cpc	r29, r1
     e06:	71 f7       	brne	.-36     	; 0xde4 <OLED_clear+0x10>
     e08:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	08 95       	ret

00000e10 <OLED_printCharacter>:
     e10:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
     e12:	28 2f       	mov	r18, r24
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	22 0f       	add	r18, r18
     e18:	33 1f       	adc	r19, r19
     e1a:	22 0f       	add	r18, r18
     e1c:	33 1f       	adc	r19, r19
     e1e:	22 0f       	add	r18, r18
     e20:	33 1f       	adc	r19, r19
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	20 59       	subi	r18, 0x90	; 144
     e28:	3f 4f       	sbci	r19, 0xFF	; 255
     e2a:	f9 01       	movw	r30, r18
     e2c:	e8 0f       	add	r30, r24
     e2e:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
     e30:	e4 91       	lpm	r30, Z
     e32:	a0 91 10 01 	lds	r26, 0x0110
     e36:	b0 91 11 01 	lds	r27, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e3a:	ec 93       	st	X, r30
     e3c:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
     e3e:	88 30       	cpi	r24, 0x08	; 8
     e40:	91 05       	cpc	r25, r1
     e42:	99 f7       	brne	.-26     	; 0xe2a <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
     e44:	08 95       	ret

00000e46 <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
     e4c:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
     e4e:	10 e0       	ldi	r17, 0x00	; 0
     e50:	06 c0       	rjmp	.+12     	; 0xe5e <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
     e52:	fe 01       	movw	r30, r28
     e54:	e8 0f       	add	r30, r24
     e56:	f9 1f       	adc	r31, r25
     e58:	80 81       	ld	r24, Z
     e5a:	da df       	rcall	.-76     	; 0xe10 <OLED_printCharacter>
     e5c:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
     e5e:	81 2f       	mov	r24, r17
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	fe 01       	movw	r30, r28
     e64:	01 90       	ld	r0, Z+
     e66:	00 20       	and	r0, r0
     e68:	e9 f7       	brne	.-6      	; 0xe64 <OLED_printString+0x1e>
     e6a:	31 97       	sbiw	r30, 0x01	; 1
     e6c:	ec 1b       	sub	r30, r28
     e6e:	fd 0b       	sbc	r31, r29
     e70:	8e 17       	cp	r24, r30
     e72:	9f 07       	cpc	r25, r31
     e74:	70 f3       	brcs	.-36     	; 0xe52 <OLED_printString+0xc>
     e76:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	08 95       	ret

00000e7e <OLED_printArrow>:
     e7e:	e0 91 10 01 	lds	r30, 0x0110
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
     e82:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e86:	88 e1       	ldi	r24, 0x18	; 24
     e88:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
     e8a:	e0 91 10 01 	lds	r30, 0x0110
     e8e:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e92:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
     e94:	e0 91 10 01 	lds	r30, 0x0110
     e98:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e9c:	9e e7       	ldi	r25, 0x7E	; 126
     e9e:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
     ea0:	e0 91 10 01 	lds	r30, 0x0110
     ea4:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ea8:	9c e3       	ldi	r25, 0x3C	; 60
     eaa:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
     eac:	e0 91 10 01 	lds	r30, 0x0110
     eb0:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     eb4:	80 83       	st	Z, r24
     eb6:	08 95       	ret

00000eb8 <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
     eb8:	1f 93       	push	r17
     eba:	cf 93       	push	r28
     ebc:	df 93       	push	r29
     ebe:	c1 e0       	ldi	r28, 0x01	; 1
     ec0:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
     ec6:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	70 e0       	ldi	r23, 0x00	; 0
     ecc:	66 df       	rcall	.-308    	; 0xd9a <OLED_goto>
     ece:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
     ed0:	e0 91 10 01 	lds	r30, 0x0110
		{
			OLED_writeByteToOLED(oled_data, 0x00);
     ed4:	f0 91 11 01 	lds	r31, 0x0111
     ed8:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     eda:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
     edc:	85 30       	cpi	r24, 0x05	; 5
     ede:	c1 f7       	brne	.-16     	; 0xed0 <OLED_clearArrow+0x18>
     ee0:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
     ee2:	9d 2f       	mov	r25, r29
     ee4:	21 96       	adiw	r28, 0x01	; 1
     ee6:	c9 30       	cpi	r28, 0x09	; 9
     ee8:	d1 05       	cpc	r29, r1
     eea:	71 f7       	brne	.-36     	; 0xec8 <OLED_clearArrow+0x10>
     eec:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
     eee:	cf 91       	pop	r28
     ef0:	1f 91       	pop	r17
     ef2:	08 95       	ret

00000ef4 <OLED_moveArrow>:
     ef4:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
     ef6:	df 93       	push	r29
     ef8:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
     efa:	de df       	rcall	.-68     	; 0xeb8 <OLED_clearArrow>
     efc:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
     efe:	70 e0       	ldi	r23, 0x00	; 0
     f00:	ce 01       	movw	r24, r28
     f02:	4b df       	rcall	.-362    	; 0xd9a <OLED_goto>
     f04:	bc df       	rcall	.-136    	; 0xe7e <OLED_printArrow>
     f06:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
     f08:	cf 91       	pop	r28
     f0a:	08 95       	ret

00000f0c <OLED_setContrast>:
}
     f0c:	e0 91 12 01 	lds	r30, 0x0112
     f10:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f14:	91 e8       	ldi	r25, 0x81	; 129
     f16:	90 83       	st	Z, r25
void OLED_setContrast(uint8_t contrast)
{
	// activate contrast contol
	OLED_writeByteToOLED(oled_cmd, 0x81);
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
     f18:	e0 91 12 01 	lds	r30, 0x0112
     f1c:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f20:	80 83       	st	Z, r24
     f22:	08 95       	ret

00000f24 <OLED_fadeIn>:
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
}

void OLED_fadeIn(void)
{
     f24:	cf 93       	push	r28
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
     f26:	c0 e0       	ldi	r28, 0x00	; 0
	{
		OLED_setContrast(i);
     f28:	8c 2f       	mov	r24, r28
     f2a:	f0 df       	rcall	.-32     	; 0xf0c <OLED_setContrast>
     f2c:	83 e3       	ldi	r24, 0x33	; 51
     f2e:	93 e1       	ldi	r25, 0x13	; 19
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	f1 f7       	brne	.-4      	; 0xf30 <OLED_fadeIn+0xc>
     f34:	cf 5f       	subi	r28, 0xFF	; 255
}

void OLED_fadeIn(void)
{
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
     f36:	cf 3f       	cpi	r28, 0xFF	; 255
     f38:	b9 f7       	brne	.-18     	; 0xf28 <OLED_fadeIn+0x4>
     f3a:	cf 91       	pop	r28
	{
		OLED_setContrast(i);
		_delay_ms(4);
	}
}
     f3c:	08 95       	ret

00000f3e <OLED_splashScreen>:
     f3e:	2f ef       	ldi	r18, 0xFF	; 255
     f40:	8f ef       	ldi	r24, 0xFF	; 255
     f42:	92 e0       	ldi	r25, 0x02	; 2
     f44:	21 50       	subi	r18, 0x01	; 1
     f46:	80 40       	sbci	r24, 0x00	; 0
     f48:	90 40       	sbci	r25, 0x00	; 0
     f4a:	e1 f7       	brne	.-8      	; 0xf44 <OLED_splashScreen+0x6>
     f4c:	00 c0       	rjmp	.+0      	; 0xf4e <OLED_splashScreen+0x10>
     f4e:	00 c0       	rjmp	.+0      	; 0xf50 <OLED_splashScreen+0x12>
}

void OLED_splashScreen(void)
{
	_delay_ms(200);
	OLED_setContrast(0);
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	dc df       	rcall	.-72     	; 0xf0c <OLED_setContrast>
     f54:	64 e0       	ldi	r22, 0x04	; 4
	OLED_goto(2,4);
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	82 e0       	ldi	r24, 0x02	; 2
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	1e df       	rcall	.-452    	; 0xd9a <OLED_goto>
     f5e:	8e e4       	ldi	r24, 0x4E	; 78
     f60:	93 e0       	ldi	r25, 0x03	; 3
	OLED_printString("Group 46 Soft");
     f62:	71 df       	rcall	.-286    	; 0xe46 <OLED_printString>
     f64:	df df       	rcall	.-66     	; 0xf24 <OLED_fadeIn>
     f66:	2f ef       	ldi	r18, 0xFF	; 255
     f68:	8f e7       	ldi	r24, 0x7F	; 127
	OLED_fadeIn();
     f6a:	97 e0       	ldi	r25, 0x07	; 7
     f6c:	21 50       	subi	r18, 0x01	; 1
     f6e:	80 40       	sbci	r24, 0x00	; 0
     f70:	90 40       	sbci	r25, 0x00	; 0
     f72:	e1 f7       	brne	.-8      	; 0xf6c <OLED_splashScreen+0x2e>
     f74:	00 c0       	rjmp	.+0      	; 0xf76 <OLED_splashScreen+0x38>
     f76:	00 00       	nop
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	c8 df       	rcall	.-112    	; 0xf0c <OLED_setContrast>
     f7c:	6c e1       	ldi	r22, 0x1C	; 28
     f7e:	70 e0       	ldi	r23, 0x00	; 0
	_delay_ms(500);
	OLED_setContrast(0);
     f80:	84 e0       	ldi	r24, 0x04	; 4
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0a df       	rcall	.-492    	; 0xd9a <OLED_goto>
	OLED_goto(4,28);
     f86:	8c e5       	ldi	r24, 0x5C	; 92
     f88:	93 e0       	ldi	r25, 0x03	; 3
     f8a:	5d df       	rcall	.-326    	; 0xe46 <OLED_printString>
     f8c:	68 e1       	ldi	r22, 0x18	; 24
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	85 e0       	ldi	r24, 0x05	; 5
	OLED_printString("proudly");
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	02 df       	rcall	.-508    	; 0xd9a <OLED_goto>
     f96:	84 e6       	ldi	r24, 0x64	; 100
     f98:	93 e0       	ldi	r25, 0x03	; 3
	OLED_goto(5,24);	
     f9a:	55 df       	rcall	.-342    	; 0xe46 <OLED_printString>
     f9c:	c3 df       	rcall	.-122    	; 0xf24 <OLED_fadeIn>
     f9e:	2f ef       	ldi	r18, 0xFF	; 255
     fa0:	8f e7       	ldi	r24, 0x7F	; 127
     fa2:	97 e0       	ldi	r25, 0x07	; 7
     fa4:	21 50       	subi	r18, 0x01	; 1
	OLED_printString("presents");
     fa6:	80 40       	sbci	r24, 0x00	; 0
     fa8:	90 40       	sbci	r25, 0x00	; 0
     faa:	e1 f7       	brne	.-8      	; 0xfa4 <OLED_splashScreen+0x66>
     fac:	00 c0       	rjmp	.+0      	; 0xfae <OLED_splashScreen+0x70>
	OLED_fadeIn();
     fae:	00 00       	nop
     fb0:	11 df       	rcall	.-478    	; 0xdd4 <OLED_clear>
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	ab df       	rcall	.-170    	; 0xf0c <OLED_setContrast>
     fb6:	6c e1       	ldi	r22, 0x1C	; 28
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	83 e0       	ldi	r24, 0x03	; 3
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	ed de       	rcall	.-550    	; 0xd9a <OLED_goto>
     fc0:	8d e6       	ldi	r24, 0x6D	; 109
     fc2:	93 e0       	ldi	r25, 0x03	; 3
	_delay_ms(500);
	
	OLED_clear();
     fc4:	40 df       	rcall	.-384    	; 0xe46 <OLED_printString>
     fc6:	ae df       	rcall	.-164    	; 0xf24 <OLED_fadeIn>
	OLED_setContrast(0);
     fc8:	2f ef       	ldi	r18, 0xFF	; 255
     fca:	8f ef       	ldi	r24, 0xFF	; 255
     fcc:	9e e0       	ldi	r25, 0x0E	; 14
	OLED_goto(3, 28);
     fce:	21 50       	subi	r18, 0x01	; 1
     fd0:	80 40       	sbci	r24, 0x00	; 0
     fd2:	90 40       	sbci	r25, 0x00	; 0
     fd4:	e1 f7       	brne	.-8      	; 0xfce <OLED_splashScreen+0x90>
     fd6:	00 c0       	rjmp	.+0      	; 0xfd8 <OLED_splashScreen+0x9a>
     fd8:	00 00       	nop
	OLED_printString("FIFA 18");
     fda:	fc de       	rcall	.-520    	; 0xdd4 <OLED_clear>
     fdc:	80 e5       	ldi	r24, 0x50	; 80
     fde:	96 cf       	rjmp	.-212    	; 0xf0c <OLED_setContrast>
     fe0:	08 95       	ret

00000fe2 <OLED_init>:
	OLED_fadeIn();
     fe2:	e0 91 12 01 	lds	r30, 0x0112
     fe6:	f0 91 13 01 	lds	r31, 0x0113
     fea:	8e ea       	ldi	r24, 0xAE	; 174
     fec:	80 83       	st	Z, r24
     fee:	e0 91 12 01 	lds	r30, 0x0112
     ff2:	f0 91 13 01 	lds	r31, 0x0113
     ff6:	81 ea       	ldi	r24, 0xA1	; 161
	_delay_ms(1000);
	
	// clean up
	OLED_clear(); // wipe screen
     ff8:	80 83       	st	Z, r24
     ffa:	e0 91 12 01 	lds	r30, 0x0112
	OLED_setContrast(0x50); // back to standard contrast
     ffe:	f0 91 13 01 	lds	r31, 0x0113
    1002:	8a ed       	ldi	r24, 0xDA	; 218
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1004:	80 83       	st	Z, r24
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
    1006:	e0 91 12 01 	lds	r30, 0x0112
    100a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    100e:	82 e1       	ldi	r24, 0x12	; 18
    1010:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    1012:	e0 91 12 01 	lds	r30, 0x0112
    1016:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    101a:	88 ec       	ldi	r24, 0xC8	; 200
    101c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    101e:	e0 91 12 01 	lds	r30, 0x0112
    1022:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1026:	88 ea       	ldi	r24, 0xA8	; 168
    1028:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    102a:	e0 91 12 01 	lds	r30, 0x0112
    102e:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1032:	8f e3       	ldi	r24, 0x3F	; 63
    1034:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    1036:	e0 91 12 01 	lds	r30, 0x0112
    103a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    103e:	85 ed       	ldi	r24, 0xD5	; 213
    1040:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
    1042:	e0 91 12 01 	lds	r30, 0x0112
    1046:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    104a:	80 e8       	ldi	r24, 0x80	; 128
    104c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    104e:	e0 91 12 01 	lds	r30, 0x0112
    1052:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1056:	81 e8       	ldi	r24, 0x81	; 129
    1058:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    105a:	e0 91 12 01 	lds	r30, 0x0112
    105e:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1062:	80 e5       	ldi	r24, 0x50	; 80
    1064:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    1066:	e0 91 12 01 	lds	r30, 0x0112
    106a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    106e:	89 ed       	ldi	r24, 0xD9	; 217
    1070:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
    1072:	e0 91 12 01 	lds	r30, 0x0112
    1076:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    107a:	81 e2       	ldi	r24, 0x21	; 33
    107c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    107e:	e0 91 12 01 	lds	r30, 0x0112
    1082:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1086:	80 e2       	ldi	r24, 0x20	; 32
    1088:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    108a:	e0 91 12 01 	lds	r30, 0x0112
    108e:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1092:	82 e0       	ldi	r24, 0x02	; 2
    1094:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    1096:	e0 91 12 01 	lds	r30, 0x0112
    109a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    109e:	8b ed       	ldi	r24, 0xDB	; 219
    10a0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    10a2:	e0 91 12 01 	lds	r30, 0x0112
    10a6:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10aa:	80 e3       	ldi	r24, 0x30	; 48
    10ac:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    10ae:	e0 91 12 01 	lds	r30, 0x0112
    10b2:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10b6:	8d ea       	ldi	r24, 0xAD	; 173
    10b8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    10ba:	e0 91 12 01 	lds	r30, 0x0112
    10be:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10c2:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    10c4:	e0 91 12 01 	lds	r30, 0x0112
    10c8:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10cc:	84 ea       	ldi	r24, 0xA4	; 164
    10ce:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    10d0:	e0 91 12 01 	lds	r30, 0x0112
    10d4:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10d8:	86 ea       	ldi	r24, 0xA6	; 166
    10da:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    10dc:	e0 91 12 01 	lds	r30, 0x0112
    10e0:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10e4:	8f ea       	ldi	r24, 0xAF	; 175
    10e6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    10e8:	75 de       	rcall	.-790    	; 0xdd4 <OLED_clear>
    10ea:	29 cf       	rjmp	.-430    	; 0xf3e <OLED_splashScreen>
	OLED_splashScreen();
    10ec:	08 95       	ret

000010ee <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    10ee:	10 92 c3 03 	sts	0x03C3, r1
	currentSliPosition.L_abs = 0;
    10f2:	10 92 c4 03 	sts	0x03C4, r1
	currentSliPosition.R_per = 0;
    10f6:	10 92 c5 03 	sts	0x03C5, r1
	currentSliPosition.L_per = 0;
    10fa:	10 92 c6 03 	sts	0x03C6, r1
    10fe:	08 95       	ret

00001100 <SPI_init>:
#define UNSELECT_CAN_CONTROLLER_SLAVE set_bit(PORTB, SS_CAN_CONTROLLER_PIN)


void SPI_init()
{
	printf("Initializing SPI\n");
    1100:	85 e7       	ldi	r24, 0x75	; 117
    1102:	93 e0       	ldi	r25, 0x03	; 3
    1104:	13 d2       	rcall	.+1062   	; 0x152c <puts>
    1106:	80 eb       	ldi	r24, 0xB0	; 176
	// Set _SS, MOSI and SCK output, all others input
	//DDRB = (1<<SS_CAN_CONTROLLER_PIN) | (1<<DDB5) | (1<<DDB7);
	DDRB = (1<<DDB4) | (1<<DDB5) | (1<<DDB7);
    1108:	87 bb       	out	0x17, r24	; 23
    110a:	81 e5       	ldi	r24, 0x51	; 81
	
	// Enable SPI, Master, set clock rate fck/16
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
    110c:	8d b9       	out	0x0d, r24	; 13
    110e:	c4 9a       	sbi	0x18, 4	; 24
	
	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORTB, SS_CAN_CONTROLLER_PIN);
    1110:	08 95       	ret

00001112 <SPI_send>:
    1112:	8f b9       	out	0x0f, r24	; 15

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
	printf("Sendind %d\n", cData);
    1114:	1f 92       	push	r1
    1116:	8f 93       	push	r24
    1118:	86 e8       	ldi	r24, 0x86	; 134
    111a:	93 e0       	ldi	r25, 0x03	; 3
    111c:	9f 93       	push	r25
    111e:	8f 93       	push	r24
    1120:	f4 d1       	rcall	.+1000   	; 0x150a <printf>
    1122:	0f 90       	pop	r0
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    1124:	0f 90       	pop	r0
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	77 9b       	sbis	0x0e, 7	; 14
    112c:	fe cf       	rjmp	.-4      	; 0x112a <SPI_send+0x18>
    112e:	08 95       	ret

00001130 <SPI_receive>:
	
	
}
    1130:	80 e0       	ldi	r24, 0x00	; 0

uint8_t SPI_receive()
{	
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0);
    1132:	ef df       	rcall	.-34     	; 0x1112 <SPI_send>
    1134:	77 9b       	sbis	0x0e, 7	; 14
	
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    1136:	fe cf       	rjmp	.-4      	; 0x1134 <SPI_receive+0x4>
    1138:	8f b1       	in	r24, 0x0f	; 15
	
	//read the buffer
	uint8_t data = SPDR;
    113a:	08 95       	ret

0000113c <SPI_activateSlave>:

	return data;
}
    113c:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    113e:	01 c0       	rjmp	.+2      	; 0x1142 <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    1140:	c4 98       	cbi	0x18, 4	; 24
    1142:	08 95       	ret

00001144 <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    1144:	81 11       	cpse	r24, r1
    1146:	01 c0       	rjmp	.+2      	; 0x114a <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    1148:	c4 9a       	sbi	0x18, 4	; 24
    114a:	08 95       	ret

0000114c <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    114c:	5d 9b       	sbis	0x0b, 5	; 11
    114e:	fe cf       	rjmp	.-4      	; 0x114c <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    1150:	8c b9       	out	0x0c, r24	; 12
    1152:	08 95       	ret

00001154 <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    1154:	5f 9b       	sbis	0x0b, 7	; 11
    1156:	fe cf       	rjmp	.-4      	; 0x1154 <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    1158:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
    115a:	08 95       	ret

0000115c <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    115c:	ef 92       	push	r14
    115e:	ff 92       	push	r15
    1160:	0f 93       	push	r16
    1162:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    1164:	bb 27       	eor	r27, r27
    1166:	a1 2f       	mov	r26, r17
    1168:	90 2f       	mov	r25, r16
    116a:	8f 2d       	mov	r24, r15
    116c:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    116e:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1170:	88 e1       	ldi	r24, 0x18	; 24
    1172:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    1174:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    1176:	8e e8       	ldi	r24, 0x8E	; 142
    1178:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    117a:	6a ea       	ldi	r22, 0xAA	; 170
    117c:	78 e0       	ldi	r23, 0x08	; 8
    117e:	86 ea       	ldi	r24, 0xA6	; 166
    1180:	98 e0       	ldi	r25, 0x08	; 8
    1182:	79 d1       	rcall	.+754    	; 0x1476 <fdevopen>
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	ff 90       	pop	r15
    118a:	ef 90       	pop	r14
    118c:	08 95       	ret

0000118e <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    118e:	9b 01       	movw	r18, r22
	
	switch(channel){
    1190:	82 30       	cpi	r24, 0x02	; 2
    1192:	69 f0       	breq	.+26     	; 0x11ae <ADC_request+0x20>
    1194:	18 f4       	brcc	.+6      	; 0x119c <ADC_request+0xe>
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	31 f0       	breq	.+12     	; 0x11a6 <ADC_request+0x18>
    119a:	15 c0       	rjmp	.+42     	; 0x11c6 <ADC_request+0x38>
    119c:	83 30       	cpi	r24, 0x03	; 3
    119e:	59 f0       	breq	.+22     	; 0x11b6 <ADC_request+0x28>
    11a0:	84 30       	cpi	r24, 0x04	; 4
    11a2:	69 f0       	breq	.+26     	; 0x11be <ADC_request+0x30>
    11a4:	10 c0       	rjmp	.+32     	; 0x11c6 <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    11a6:	64 e0       	ldi	r22, 0x04	; 4
    11a8:	c9 01       	movw	r24, r18
    11aa:	a4 c9       	rjmp	.-3256   	; 0x4f4 <saveToAddress>
    11ac:	08 95       	ret
			break;
    11ae:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    11b0:	c9 01       	movw	r24, r18
    11b2:	a0 c9       	rjmp	.-3264   	; 0x4f4 <saveToAddress>
    11b4:	08 95       	ret
    11b6:	66 e0       	ldi	r22, 0x06	; 6
			break;
    11b8:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    11ba:	9c c9       	rjmp	.-3272   	; 0x4f4 <saveToAddress>
    11bc:	08 95       	ret
    11be:	67 e0       	ldi	r22, 0x07	; 7
    11c0:	c9 01       	movw	r24, r18
			break;
    11c2:	98 c9       	rjmp	.-3280   	; 0x4f4 <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    11c4:	08 95       	ret
    11c6:	82 e9       	ldi	r24, 0x92	; 146
    11c8:	93 e0       	ldi	r25, 0x03	; 3
    11ca:	9f 93       	push	r25
			break;
    11cc:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    11ce:	9d d1       	rcall	.+826    	; 0x150a <printf>
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	08 95       	ret

000011d6 <ADC_read>:
    11d6:	8b c9       	rjmp	.-3306   	; 0x4ee <readFromAddress>
    11d8:	08 95       	ret

000011da <__divmodhi4>:
			break;
    11da:	97 fb       	bst	r25, 7
    11dc:	07 2e       	mov	r0, r23
    11de:	16 f4       	brtc	.+4      	; 0x11e4 <__divmodhi4+0xa>
    11e0:	00 94       	com	r0
    11e2:	06 d0       	rcall	.+12     	; 0x11f0 <__divmodhi4_neg1>
    11e4:	77 fd       	sbrc	r23, 7
    11e6:	08 d0       	rcall	.+16     	; 0x11f8 <__divmodhi4_neg2>
    11e8:	0b d0       	rcall	.+22     	; 0x1200 <__udivmodhi4>
    11ea:	07 fc       	sbrc	r0, 7
    11ec:	05 d0       	rcall	.+10     	; 0x11f8 <__divmodhi4_neg2>
    11ee:	3e f4       	brtc	.+14     	; 0x11fe <__divmodhi4_exit>

000011f0 <__divmodhi4_neg1>:
    11f0:	90 95       	com	r25
    11f2:	81 95       	neg	r24
    11f4:	9f 4f       	sbci	r25, 0xFF	; 255
    11f6:	08 95       	ret

000011f8 <__divmodhi4_neg2>:
    11f8:	70 95       	com	r23
    11fa:	61 95       	neg	r22
    11fc:	7f 4f       	sbci	r23, 0xFF	; 255

000011fe <__divmodhi4_exit>:
    11fe:	08 95       	ret

00001200 <__udivmodhi4>:
    1200:	aa 1b       	sub	r26, r26
    1202:	bb 1b       	sub	r27, r27
    1204:	51 e1       	ldi	r21, 0x11	; 17
    1206:	07 c0       	rjmp	.+14     	; 0x1216 <__udivmodhi4_ep>

00001208 <__udivmodhi4_loop>:
    1208:	aa 1f       	adc	r26, r26
    120a:	bb 1f       	adc	r27, r27
    120c:	a6 17       	cp	r26, r22
    120e:	b7 07       	cpc	r27, r23
    1210:	10 f0       	brcs	.+4      	; 0x1216 <__udivmodhi4_ep>
    1212:	a6 1b       	sub	r26, r22
    1214:	b7 0b       	sbc	r27, r23

00001216 <__udivmodhi4_ep>:
    1216:	88 1f       	adc	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	5a 95       	dec	r21
    121c:	a9 f7       	brne	.-22     	; 0x1208 <__udivmodhi4_loop>
    121e:	80 95       	com	r24
    1220:	90 95       	com	r25
    1222:	bc 01       	movw	r22, r24
    1224:	cd 01       	movw	r24, r26
    1226:	08 95       	ret

00001228 <malloc>:
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	82 30       	cpi	r24, 0x02	; 2
    122e:	91 05       	cpc	r25, r1
    1230:	10 f4       	brcc	.+4      	; 0x1236 <malloc+0xe>
    1232:	82 e0       	ldi	r24, 0x02	; 2
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	e0 91 c9 03 	lds	r30, 0x03C9
    123a:	f0 91 ca 03 	lds	r31, 0x03CA
    123e:	20 e0       	ldi	r18, 0x00	; 0
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	a0 e0       	ldi	r26, 0x00	; 0
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	30 97       	sbiw	r30, 0x00	; 0
    1248:	39 f1       	breq	.+78     	; 0x1298 <malloc+0x70>
    124a:	40 81       	ld	r20, Z
    124c:	51 81       	ldd	r21, Z+1	; 0x01
    124e:	48 17       	cp	r20, r24
    1250:	59 07       	cpc	r21, r25
    1252:	b8 f0       	brcs	.+46     	; 0x1282 <malloc+0x5a>
    1254:	48 17       	cp	r20, r24
    1256:	59 07       	cpc	r21, r25
    1258:	71 f4       	brne	.+28     	; 0x1276 <malloc+0x4e>
    125a:	82 81       	ldd	r24, Z+2	; 0x02
    125c:	93 81       	ldd	r25, Z+3	; 0x03
    125e:	10 97       	sbiw	r26, 0x00	; 0
    1260:	29 f0       	breq	.+10     	; 0x126c <malloc+0x44>
    1262:	13 96       	adiw	r26, 0x03	; 3
    1264:	9c 93       	st	X, r25
    1266:	8e 93       	st	-X, r24
    1268:	12 97       	sbiw	r26, 0x02	; 2
    126a:	2c c0       	rjmp	.+88     	; 0x12c4 <malloc+0x9c>
    126c:	90 93 ca 03 	sts	0x03CA, r25
    1270:	80 93 c9 03 	sts	0x03C9, r24
    1274:	27 c0       	rjmp	.+78     	; 0x12c4 <malloc+0x9c>
    1276:	21 15       	cp	r18, r1
    1278:	31 05       	cpc	r19, r1
    127a:	31 f0       	breq	.+12     	; 0x1288 <malloc+0x60>
    127c:	42 17       	cp	r20, r18
    127e:	53 07       	cpc	r21, r19
    1280:	18 f0       	brcs	.+6      	; 0x1288 <malloc+0x60>
    1282:	a9 01       	movw	r20, r18
    1284:	db 01       	movw	r26, r22
    1286:	01 c0       	rjmp	.+2      	; 0x128a <malloc+0x62>
    1288:	ef 01       	movw	r28, r30
    128a:	9a 01       	movw	r18, r20
    128c:	bd 01       	movw	r22, r26
    128e:	df 01       	movw	r26, r30
    1290:	02 80       	ldd	r0, Z+2	; 0x02
    1292:	f3 81       	ldd	r31, Z+3	; 0x03
    1294:	e0 2d       	mov	r30, r0
    1296:	d7 cf       	rjmp	.-82     	; 0x1246 <malloc+0x1e>
    1298:	21 15       	cp	r18, r1
    129a:	31 05       	cpc	r19, r1
    129c:	f9 f0       	breq	.+62     	; 0x12dc <malloc+0xb4>
    129e:	28 1b       	sub	r18, r24
    12a0:	39 0b       	sbc	r19, r25
    12a2:	24 30       	cpi	r18, 0x04	; 4
    12a4:	31 05       	cpc	r19, r1
    12a6:	80 f4       	brcc	.+32     	; 0x12c8 <malloc+0xa0>
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	9b 81       	ldd	r25, Y+3	; 0x03
    12ac:	61 15       	cp	r22, r1
    12ae:	71 05       	cpc	r23, r1
    12b0:	21 f0       	breq	.+8      	; 0x12ba <malloc+0x92>
    12b2:	fb 01       	movw	r30, r22
    12b4:	93 83       	std	Z+3, r25	; 0x03
    12b6:	82 83       	std	Z+2, r24	; 0x02
    12b8:	04 c0       	rjmp	.+8      	; 0x12c2 <malloc+0x9a>
    12ba:	90 93 ca 03 	sts	0x03CA, r25
    12be:	80 93 c9 03 	sts	0x03C9, r24
    12c2:	fe 01       	movw	r30, r28
    12c4:	32 96       	adiw	r30, 0x02	; 2
    12c6:	44 c0       	rjmp	.+136    	; 0x1350 <malloc+0x128>
    12c8:	fe 01       	movw	r30, r28
    12ca:	e2 0f       	add	r30, r18
    12cc:	f3 1f       	adc	r31, r19
    12ce:	81 93       	st	Z+, r24
    12d0:	91 93       	st	Z+, r25
    12d2:	22 50       	subi	r18, 0x02	; 2
    12d4:	31 09       	sbc	r19, r1
    12d6:	39 83       	std	Y+1, r19	; 0x01
    12d8:	28 83       	st	Y, r18
    12da:	3a c0       	rjmp	.+116    	; 0x1350 <malloc+0x128>
    12dc:	20 91 c7 03 	lds	r18, 0x03C7
    12e0:	30 91 c8 03 	lds	r19, 0x03C8
    12e4:	23 2b       	or	r18, r19
    12e6:	41 f4       	brne	.+16     	; 0x12f8 <malloc+0xd0>
    12e8:	20 91 02 01 	lds	r18, 0x0102
    12ec:	30 91 03 01 	lds	r19, 0x0103
    12f0:	30 93 c8 03 	sts	0x03C8, r19
    12f4:	20 93 c7 03 	sts	0x03C7, r18
    12f8:	20 91 00 01 	lds	r18, 0x0100
    12fc:	30 91 01 01 	lds	r19, 0x0101
    1300:	21 15       	cp	r18, r1
    1302:	31 05       	cpc	r19, r1
    1304:	41 f4       	brne	.+16     	; 0x1316 <malloc+0xee>
    1306:	2d b7       	in	r18, 0x3d	; 61
    1308:	3e b7       	in	r19, 0x3e	; 62
    130a:	40 91 04 01 	lds	r20, 0x0104
    130e:	50 91 05 01 	lds	r21, 0x0105
    1312:	24 1b       	sub	r18, r20
    1314:	35 0b       	sbc	r19, r21
    1316:	e0 91 c7 03 	lds	r30, 0x03C7
    131a:	f0 91 c8 03 	lds	r31, 0x03C8
    131e:	e2 17       	cp	r30, r18
    1320:	f3 07       	cpc	r31, r19
    1322:	a0 f4       	brcc	.+40     	; 0x134c <malloc+0x124>
    1324:	2e 1b       	sub	r18, r30
    1326:	3f 0b       	sbc	r19, r31
    1328:	28 17       	cp	r18, r24
    132a:	39 07       	cpc	r19, r25
    132c:	78 f0       	brcs	.+30     	; 0x134c <malloc+0x124>
    132e:	ac 01       	movw	r20, r24
    1330:	4e 5f       	subi	r20, 0xFE	; 254
    1332:	5f 4f       	sbci	r21, 0xFF	; 255
    1334:	24 17       	cp	r18, r20
    1336:	35 07       	cpc	r19, r21
    1338:	48 f0       	brcs	.+18     	; 0x134c <malloc+0x124>
    133a:	4e 0f       	add	r20, r30
    133c:	5f 1f       	adc	r21, r31
    133e:	50 93 c8 03 	sts	0x03C8, r21
    1342:	40 93 c7 03 	sts	0x03C7, r20
    1346:	81 93       	st	Z+, r24
    1348:	91 93       	st	Z+, r25
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <malloc+0x128>
    134c:	e0 e0       	ldi	r30, 0x00	; 0
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	cf 01       	movw	r24, r30
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	08 95       	ret

00001358 <free>:
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	00 97       	sbiw	r24, 0x00	; 0
    135e:	09 f4       	brne	.+2      	; 0x1362 <free+0xa>
    1360:	87 c0       	rjmp	.+270    	; 0x1470 <free+0x118>
    1362:	fc 01       	movw	r30, r24
    1364:	32 97       	sbiw	r30, 0x02	; 2
    1366:	13 82       	std	Z+3, r1	; 0x03
    1368:	12 82       	std	Z+2, r1	; 0x02
    136a:	c0 91 c9 03 	lds	r28, 0x03C9
    136e:	d0 91 ca 03 	lds	r29, 0x03CA
    1372:	20 97       	sbiw	r28, 0x00	; 0
    1374:	81 f4       	brne	.+32     	; 0x1396 <free+0x3e>
    1376:	20 81       	ld	r18, Z
    1378:	31 81       	ldd	r19, Z+1	; 0x01
    137a:	28 0f       	add	r18, r24
    137c:	39 1f       	adc	r19, r25
    137e:	80 91 c7 03 	lds	r24, 0x03C7
    1382:	90 91 c8 03 	lds	r25, 0x03C8
    1386:	82 17       	cp	r24, r18
    1388:	93 07       	cpc	r25, r19
    138a:	79 f5       	brne	.+94     	; 0x13ea <free+0x92>
    138c:	f0 93 c8 03 	sts	0x03C8, r31
    1390:	e0 93 c7 03 	sts	0x03C7, r30
    1394:	6d c0       	rjmp	.+218    	; 0x1470 <free+0x118>
    1396:	de 01       	movw	r26, r28
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	ae 17       	cp	r26, r30
    139e:	bf 07       	cpc	r27, r31
    13a0:	50 f4       	brcc	.+20     	; 0x13b6 <free+0x5e>
    13a2:	12 96       	adiw	r26, 0x02	; 2
    13a4:	4d 91       	ld	r20, X+
    13a6:	5c 91       	ld	r21, X
    13a8:	13 97       	sbiw	r26, 0x03	; 3
    13aa:	9d 01       	movw	r18, r26
    13ac:	41 15       	cp	r20, r1
    13ae:	51 05       	cpc	r21, r1
    13b0:	09 f1       	breq	.+66     	; 0x13f4 <free+0x9c>
    13b2:	da 01       	movw	r26, r20
    13b4:	f3 cf       	rjmp	.-26     	; 0x139c <free+0x44>
    13b6:	b3 83       	std	Z+3, r27	; 0x03
    13b8:	a2 83       	std	Z+2, r26	; 0x02
    13ba:	40 81       	ld	r20, Z
    13bc:	51 81       	ldd	r21, Z+1	; 0x01
    13be:	84 0f       	add	r24, r20
    13c0:	95 1f       	adc	r25, r21
    13c2:	8a 17       	cp	r24, r26
    13c4:	9b 07       	cpc	r25, r27
    13c6:	71 f4       	brne	.+28     	; 0x13e4 <free+0x8c>
    13c8:	8d 91       	ld	r24, X+
    13ca:	9c 91       	ld	r25, X
    13cc:	11 97       	sbiw	r26, 0x01	; 1
    13ce:	84 0f       	add	r24, r20
    13d0:	95 1f       	adc	r25, r21
    13d2:	02 96       	adiw	r24, 0x02	; 2
    13d4:	91 83       	std	Z+1, r25	; 0x01
    13d6:	80 83       	st	Z, r24
    13d8:	12 96       	adiw	r26, 0x02	; 2
    13da:	8d 91       	ld	r24, X+
    13dc:	9c 91       	ld	r25, X
    13de:	13 97       	sbiw	r26, 0x03	; 3
    13e0:	93 83       	std	Z+3, r25	; 0x03
    13e2:	82 83       	std	Z+2, r24	; 0x02
    13e4:	21 15       	cp	r18, r1
    13e6:	31 05       	cpc	r19, r1
    13e8:	29 f4       	brne	.+10     	; 0x13f4 <free+0x9c>
    13ea:	f0 93 ca 03 	sts	0x03CA, r31
    13ee:	e0 93 c9 03 	sts	0x03C9, r30
    13f2:	3e c0       	rjmp	.+124    	; 0x1470 <free+0x118>
    13f4:	d9 01       	movw	r26, r18
    13f6:	13 96       	adiw	r26, 0x03	; 3
    13f8:	fc 93       	st	X, r31
    13fa:	ee 93       	st	-X, r30
    13fc:	12 97       	sbiw	r26, 0x02	; 2
    13fe:	4d 91       	ld	r20, X+
    1400:	5d 91       	ld	r21, X+
    1402:	a4 0f       	add	r26, r20
    1404:	b5 1f       	adc	r27, r21
    1406:	ea 17       	cp	r30, r26
    1408:	fb 07       	cpc	r31, r27
    140a:	79 f4       	brne	.+30     	; 0x142a <free+0xd2>
    140c:	80 81       	ld	r24, Z
    140e:	91 81       	ldd	r25, Z+1	; 0x01
    1410:	84 0f       	add	r24, r20
    1412:	95 1f       	adc	r25, r21
    1414:	02 96       	adiw	r24, 0x02	; 2
    1416:	d9 01       	movw	r26, r18
    1418:	11 96       	adiw	r26, 0x01	; 1
    141a:	9c 93       	st	X, r25
    141c:	8e 93       	st	-X, r24
    141e:	82 81       	ldd	r24, Z+2	; 0x02
    1420:	93 81       	ldd	r25, Z+3	; 0x03
    1422:	13 96       	adiw	r26, 0x03	; 3
    1424:	9c 93       	st	X, r25
    1426:	8e 93       	st	-X, r24
    1428:	12 97       	sbiw	r26, 0x02	; 2
    142a:	e0 e0       	ldi	r30, 0x00	; 0
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	9b 81       	ldd	r25, Y+3	; 0x03
    1432:	00 97       	sbiw	r24, 0x00	; 0
    1434:	19 f0       	breq	.+6      	; 0x143c <free+0xe4>
    1436:	fe 01       	movw	r30, r28
    1438:	ec 01       	movw	r28, r24
    143a:	f9 cf       	rjmp	.-14     	; 0x142e <free+0xd6>
    143c:	ce 01       	movw	r24, r28
    143e:	02 96       	adiw	r24, 0x02	; 2
    1440:	28 81       	ld	r18, Y
    1442:	39 81       	ldd	r19, Y+1	; 0x01
    1444:	82 0f       	add	r24, r18
    1446:	93 1f       	adc	r25, r19
    1448:	20 91 c7 03 	lds	r18, 0x03C7
    144c:	30 91 c8 03 	lds	r19, 0x03C8
    1450:	28 17       	cp	r18, r24
    1452:	39 07       	cpc	r19, r25
    1454:	69 f4       	brne	.+26     	; 0x1470 <free+0x118>
    1456:	30 97       	sbiw	r30, 0x00	; 0
    1458:	29 f4       	brne	.+10     	; 0x1464 <free+0x10c>
    145a:	10 92 ca 03 	sts	0x03CA, r1
    145e:	10 92 c9 03 	sts	0x03C9, r1
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <free+0x110>
    1464:	13 82       	std	Z+3, r1	; 0x03
    1466:	12 82       	std	Z+2, r1	; 0x02
    1468:	d0 93 c8 03 	sts	0x03C8, r29
    146c:	c0 93 c7 03 	sts	0x03C7, r28
    1470:	df 91       	pop	r29
    1472:	cf 91       	pop	r28
    1474:	08 95       	ret

00001476 <fdevopen>:
    1476:	0f 93       	push	r16
    1478:	1f 93       	push	r17
    147a:	cf 93       	push	r28
    147c:	df 93       	push	r29
    147e:	ec 01       	movw	r28, r24
    1480:	8b 01       	movw	r16, r22
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	31 f4       	brne	.+12     	; 0x1492 <fdevopen+0x1c>
    1486:	61 15       	cp	r22, r1
    1488:	71 05       	cpc	r23, r1
    148a:	19 f4       	brne	.+6      	; 0x1492 <fdevopen+0x1c>
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	37 c0       	rjmp	.+110    	; 0x1500 <fdevopen+0x8a>
    1492:	6e e0       	ldi	r22, 0x0E	; 14
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	38 d2       	rcall	.+1136   	; 0x190c <calloc>
    149c:	fc 01       	movw	r30, r24
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	a9 f3       	breq	.-22     	; 0x148c <fdevopen+0x16>
    14a2:	80 e8       	ldi	r24, 0x80	; 128
    14a4:	83 83       	std	Z+3, r24	; 0x03
    14a6:	01 15       	cp	r16, r1
    14a8:	11 05       	cpc	r17, r1
    14aa:	71 f0       	breq	.+28     	; 0x14c8 <fdevopen+0x52>
    14ac:	13 87       	std	Z+11, r17	; 0x0b
    14ae:	02 87       	std	Z+10, r16	; 0x0a
    14b0:	81 e8       	ldi	r24, 0x81	; 129
    14b2:	83 83       	std	Z+3, r24	; 0x03
    14b4:	80 91 cb 03 	lds	r24, 0x03CB
    14b8:	90 91 cc 03 	lds	r25, 0x03CC
    14bc:	89 2b       	or	r24, r25
    14be:	21 f4       	brne	.+8      	; 0x14c8 <fdevopen+0x52>
    14c0:	f0 93 cc 03 	sts	0x03CC, r31
    14c4:	e0 93 cb 03 	sts	0x03CB, r30
    14c8:	20 97       	sbiw	r28, 0x00	; 0
    14ca:	c9 f0       	breq	.+50     	; 0x14fe <fdevopen+0x88>
    14cc:	d1 87       	std	Z+9, r29	; 0x09
    14ce:	c0 87       	std	Z+8, r28	; 0x08
    14d0:	83 81       	ldd	r24, Z+3	; 0x03
    14d2:	82 60       	ori	r24, 0x02	; 2
    14d4:	83 83       	std	Z+3, r24	; 0x03
    14d6:	80 91 cd 03 	lds	r24, 0x03CD
    14da:	90 91 ce 03 	lds	r25, 0x03CE
    14de:	89 2b       	or	r24, r25
    14e0:	71 f4       	brne	.+28     	; 0x14fe <fdevopen+0x88>
    14e2:	f0 93 ce 03 	sts	0x03CE, r31
    14e6:	e0 93 cd 03 	sts	0x03CD, r30
    14ea:	80 91 cf 03 	lds	r24, 0x03CF
    14ee:	90 91 d0 03 	lds	r25, 0x03D0
    14f2:	89 2b       	or	r24, r25
    14f4:	21 f4       	brne	.+8      	; 0x14fe <fdevopen+0x88>
    14f6:	f0 93 d0 03 	sts	0x03D0, r31
    14fa:	e0 93 cf 03 	sts	0x03CF, r30
    14fe:	cf 01       	movw	r24, r30
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	08 95       	ret

0000150a <printf>:
    150a:	a0 e0       	ldi	r26, 0x00	; 0
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	ea e8       	ldi	r30, 0x8A	; 138
    1510:	fa e0       	ldi	r31, 0x0A	; 10
    1512:	d3 c2       	rjmp	.+1446   	; 0x1aba <__prologue_saves__+0x20>
    1514:	fe 01       	movw	r30, r28
    1516:	35 96       	adiw	r30, 0x05	; 5
    1518:	61 91       	ld	r22, Z+
    151a:	71 91       	ld	r23, Z+
    151c:	af 01       	movw	r20, r30
    151e:	80 91 cd 03 	lds	r24, 0x03CD
    1522:	90 91 ce 03 	lds	r25, 0x03CE
    1526:	2f d0       	rcall	.+94     	; 0x1586 <vfprintf>
    1528:	e2 e0       	ldi	r30, 0x02	; 2
    152a:	e3 c2       	rjmp	.+1478   	; 0x1af2 <__epilogue_restores__+0x20>

0000152c <puts>:
    152c:	0f 93       	push	r16
    152e:	1f 93       	push	r17
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	e0 91 cd 03 	lds	r30, 0x03CD
    1538:	f0 91 ce 03 	lds	r31, 0x03CE
    153c:	23 81       	ldd	r18, Z+3	; 0x03
    153e:	21 ff       	sbrs	r18, 1
    1540:	1b c0       	rjmp	.+54     	; 0x1578 <puts+0x4c>
    1542:	ec 01       	movw	r28, r24
    1544:	00 e0       	ldi	r16, 0x00	; 0
    1546:	10 e0       	ldi	r17, 0x00	; 0
    1548:	89 91       	ld	r24, Y+
    154a:	60 91 cd 03 	lds	r22, 0x03CD
    154e:	70 91 ce 03 	lds	r23, 0x03CE
    1552:	db 01       	movw	r26, r22
    1554:	18 96       	adiw	r26, 0x08	; 8
    1556:	ed 91       	ld	r30, X+
    1558:	fc 91       	ld	r31, X
    155a:	19 97       	sbiw	r26, 0x09	; 9
    155c:	88 23       	and	r24, r24
    155e:	31 f0       	breq	.+12     	; 0x156c <puts+0x40>
    1560:	09 95       	icall
    1562:	89 2b       	or	r24, r25
    1564:	89 f3       	breq	.-30     	; 0x1548 <puts+0x1c>
    1566:	0f ef       	ldi	r16, 0xFF	; 255
    1568:	1f ef       	ldi	r17, 0xFF	; 255
    156a:	ee cf       	rjmp	.-36     	; 0x1548 <puts+0x1c>
    156c:	8a e0       	ldi	r24, 0x0A	; 10
    156e:	09 95       	icall
    1570:	89 2b       	or	r24, r25
    1572:	11 f4       	brne	.+4      	; 0x1578 <puts+0x4c>
    1574:	c8 01       	movw	r24, r16
    1576:	02 c0       	rjmp	.+4      	; 0x157c <puts+0x50>
    1578:	8f ef       	ldi	r24, 0xFF	; 255
    157a:	9f ef       	ldi	r25, 0xFF	; 255
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	1f 91       	pop	r17
    1582:	0f 91       	pop	r16
    1584:	08 95       	ret

00001586 <vfprintf>:
    1586:	ac e0       	ldi	r26, 0x0C	; 12
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e8 ec       	ldi	r30, 0xC8	; 200
    158c:	fa e0       	ldi	r31, 0x0A	; 10
    158e:	85 c2       	rjmp	.+1290   	; 0x1a9a <__prologue_saves__>
    1590:	7c 01       	movw	r14, r24
    1592:	6b 01       	movw	r12, r22
    1594:	8a 01       	movw	r16, r20
    1596:	fc 01       	movw	r30, r24
    1598:	17 82       	std	Z+7, r1	; 0x07
    159a:	16 82       	std	Z+6, r1	; 0x06
    159c:	83 81       	ldd	r24, Z+3	; 0x03
    159e:	81 ff       	sbrs	r24, 1
    15a0:	b0 c1       	rjmp	.+864    	; 0x1902 <vfprintf+0x37c>
    15a2:	ce 01       	movw	r24, r28
    15a4:	01 96       	adiw	r24, 0x01	; 1
    15a6:	4c 01       	movw	r8, r24
    15a8:	f7 01       	movw	r30, r14
    15aa:	93 81       	ldd	r25, Z+3	; 0x03
    15ac:	f6 01       	movw	r30, r12
    15ae:	93 fd       	sbrc	r25, 3
    15b0:	85 91       	lpm	r24, Z+
    15b2:	93 ff       	sbrs	r25, 3
    15b4:	81 91       	ld	r24, Z+
    15b6:	6f 01       	movw	r12, r30
    15b8:	88 23       	and	r24, r24
    15ba:	09 f4       	brne	.+2      	; 0x15be <vfprintf+0x38>
    15bc:	9e c1       	rjmp	.+828    	; 0x18fa <vfprintf+0x374>
    15be:	85 32       	cpi	r24, 0x25	; 37
    15c0:	39 f4       	brne	.+14     	; 0x15d0 <vfprintf+0x4a>
    15c2:	93 fd       	sbrc	r25, 3
    15c4:	85 91       	lpm	r24, Z+
    15c6:	93 ff       	sbrs	r25, 3
    15c8:	81 91       	ld	r24, Z+
    15ca:	6f 01       	movw	r12, r30
    15cc:	85 32       	cpi	r24, 0x25	; 37
    15ce:	21 f4       	brne	.+8      	; 0x15d8 <vfprintf+0x52>
    15d0:	b7 01       	movw	r22, r14
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	d2 d1       	rcall	.+932    	; 0x197a <fputc>
    15d6:	e8 cf       	rjmp	.-48     	; 0x15a8 <vfprintf+0x22>
    15d8:	51 2c       	mov	r5, r1
    15da:	31 2c       	mov	r3, r1
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	20 32       	cpi	r18, 0x20	; 32
    15e0:	a0 f4       	brcc	.+40     	; 0x160a <vfprintf+0x84>
    15e2:	8b 32       	cpi	r24, 0x2B	; 43
    15e4:	69 f0       	breq	.+26     	; 0x1600 <vfprintf+0x7a>
    15e6:	30 f4       	brcc	.+12     	; 0x15f4 <vfprintf+0x6e>
    15e8:	80 32       	cpi	r24, 0x20	; 32
    15ea:	59 f0       	breq	.+22     	; 0x1602 <vfprintf+0x7c>
    15ec:	83 32       	cpi	r24, 0x23	; 35
    15ee:	69 f4       	brne	.+26     	; 0x160a <vfprintf+0x84>
    15f0:	20 61       	ori	r18, 0x10	; 16
    15f2:	2c c0       	rjmp	.+88     	; 0x164c <vfprintf+0xc6>
    15f4:	8d 32       	cpi	r24, 0x2D	; 45
    15f6:	39 f0       	breq	.+14     	; 0x1606 <vfprintf+0x80>
    15f8:	80 33       	cpi	r24, 0x30	; 48
    15fa:	39 f4       	brne	.+14     	; 0x160a <vfprintf+0x84>
    15fc:	21 60       	ori	r18, 0x01	; 1
    15fe:	26 c0       	rjmp	.+76     	; 0x164c <vfprintf+0xc6>
    1600:	22 60       	ori	r18, 0x02	; 2
    1602:	24 60       	ori	r18, 0x04	; 4
    1604:	23 c0       	rjmp	.+70     	; 0x164c <vfprintf+0xc6>
    1606:	28 60       	ori	r18, 0x08	; 8
    1608:	21 c0       	rjmp	.+66     	; 0x164c <vfprintf+0xc6>
    160a:	27 fd       	sbrc	r18, 7
    160c:	27 c0       	rjmp	.+78     	; 0x165c <vfprintf+0xd6>
    160e:	30 ed       	ldi	r19, 0xD0	; 208
    1610:	38 0f       	add	r19, r24
    1612:	3a 30       	cpi	r19, 0x0A	; 10
    1614:	78 f4       	brcc	.+30     	; 0x1634 <vfprintf+0xae>
    1616:	26 ff       	sbrs	r18, 6
    1618:	06 c0       	rjmp	.+12     	; 0x1626 <vfprintf+0xa0>
    161a:	fa e0       	ldi	r31, 0x0A	; 10
    161c:	5f 9e       	mul	r5, r31
    161e:	30 0d       	add	r19, r0
    1620:	11 24       	eor	r1, r1
    1622:	53 2e       	mov	r5, r19
    1624:	13 c0       	rjmp	.+38     	; 0x164c <vfprintf+0xc6>
    1626:	8a e0       	ldi	r24, 0x0A	; 10
    1628:	38 9e       	mul	r3, r24
    162a:	30 0d       	add	r19, r0
    162c:	11 24       	eor	r1, r1
    162e:	33 2e       	mov	r3, r19
    1630:	20 62       	ori	r18, 0x20	; 32
    1632:	0c c0       	rjmp	.+24     	; 0x164c <vfprintf+0xc6>
    1634:	8e 32       	cpi	r24, 0x2E	; 46
    1636:	21 f4       	brne	.+8      	; 0x1640 <vfprintf+0xba>
    1638:	26 fd       	sbrc	r18, 6
    163a:	5f c1       	rjmp	.+702    	; 0x18fa <vfprintf+0x374>
    163c:	20 64       	ori	r18, 0x40	; 64
    163e:	06 c0       	rjmp	.+12     	; 0x164c <vfprintf+0xc6>
    1640:	8c 36       	cpi	r24, 0x6C	; 108
    1642:	11 f4       	brne	.+4      	; 0x1648 <vfprintf+0xc2>
    1644:	20 68       	ori	r18, 0x80	; 128
    1646:	02 c0       	rjmp	.+4      	; 0x164c <vfprintf+0xc6>
    1648:	88 36       	cpi	r24, 0x68	; 104
    164a:	41 f4       	brne	.+16     	; 0x165c <vfprintf+0xd6>
    164c:	f6 01       	movw	r30, r12
    164e:	93 fd       	sbrc	r25, 3
    1650:	85 91       	lpm	r24, Z+
    1652:	93 ff       	sbrs	r25, 3
    1654:	81 91       	ld	r24, Z+
    1656:	6f 01       	movw	r12, r30
    1658:	81 11       	cpse	r24, r1
    165a:	c1 cf       	rjmp	.-126    	; 0x15de <vfprintf+0x58>
    165c:	98 2f       	mov	r25, r24
    165e:	9f 7d       	andi	r25, 0xDF	; 223
    1660:	95 54       	subi	r25, 0x45	; 69
    1662:	93 30       	cpi	r25, 0x03	; 3
    1664:	28 f4       	brcc	.+10     	; 0x1670 <vfprintf+0xea>
    1666:	0c 5f       	subi	r16, 0xFC	; 252
    1668:	1f 4f       	sbci	r17, 0xFF	; 255
    166a:	ff e3       	ldi	r31, 0x3F	; 63
    166c:	f9 83       	std	Y+1, r31	; 0x01
    166e:	0d c0       	rjmp	.+26     	; 0x168a <vfprintf+0x104>
    1670:	83 36       	cpi	r24, 0x63	; 99
    1672:	31 f0       	breq	.+12     	; 0x1680 <vfprintf+0xfa>
    1674:	83 37       	cpi	r24, 0x73	; 115
    1676:	71 f0       	breq	.+28     	; 0x1694 <vfprintf+0x10e>
    1678:	83 35       	cpi	r24, 0x53	; 83
    167a:	09 f0       	breq	.+2      	; 0x167e <vfprintf+0xf8>
    167c:	57 c0       	rjmp	.+174    	; 0x172c <vfprintf+0x1a6>
    167e:	21 c0       	rjmp	.+66     	; 0x16c2 <vfprintf+0x13c>
    1680:	f8 01       	movw	r30, r16
    1682:	80 81       	ld	r24, Z
    1684:	89 83       	std	Y+1, r24	; 0x01
    1686:	0e 5f       	subi	r16, 0xFE	; 254
    1688:	1f 4f       	sbci	r17, 0xFF	; 255
    168a:	44 24       	eor	r4, r4
    168c:	43 94       	inc	r4
    168e:	51 2c       	mov	r5, r1
    1690:	54 01       	movw	r10, r8
    1692:	14 c0       	rjmp	.+40     	; 0x16bc <vfprintf+0x136>
    1694:	38 01       	movw	r6, r16
    1696:	f2 e0       	ldi	r31, 0x02	; 2
    1698:	6f 0e       	add	r6, r31
    169a:	71 1c       	adc	r7, r1
    169c:	f8 01       	movw	r30, r16
    169e:	a0 80       	ld	r10, Z
    16a0:	b1 80       	ldd	r11, Z+1	; 0x01
    16a2:	26 ff       	sbrs	r18, 6
    16a4:	03 c0       	rjmp	.+6      	; 0x16ac <vfprintf+0x126>
    16a6:	65 2d       	mov	r22, r5
    16a8:	70 e0       	ldi	r23, 0x00	; 0
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <vfprintf+0x12a>
    16ac:	6f ef       	ldi	r22, 0xFF	; 255
    16ae:	7f ef       	ldi	r23, 0xFF	; 255
    16b0:	c5 01       	movw	r24, r10
    16b2:	2c 87       	std	Y+12, r18	; 0x0c
    16b4:	57 d1       	rcall	.+686    	; 0x1964 <strnlen>
    16b6:	2c 01       	movw	r4, r24
    16b8:	83 01       	movw	r16, r6
    16ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    16bc:	2f 77       	andi	r18, 0x7F	; 127
    16be:	22 2e       	mov	r2, r18
    16c0:	16 c0       	rjmp	.+44     	; 0x16ee <vfprintf+0x168>
    16c2:	38 01       	movw	r6, r16
    16c4:	f2 e0       	ldi	r31, 0x02	; 2
    16c6:	6f 0e       	add	r6, r31
    16c8:	71 1c       	adc	r7, r1
    16ca:	f8 01       	movw	r30, r16
    16cc:	a0 80       	ld	r10, Z
    16ce:	b1 80       	ldd	r11, Z+1	; 0x01
    16d0:	26 ff       	sbrs	r18, 6
    16d2:	03 c0       	rjmp	.+6      	; 0x16da <vfprintf+0x154>
    16d4:	65 2d       	mov	r22, r5
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <vfprintf+0x158>
    16da:	6f ef       	ldi	r22, 0xFF	; 255
    16dc:	7f ef       	ldi	r23, 0xFF	; 255
    16de:	c5 01       	movw	r24, r10
    16e0:	2c 87       	std	Y+12, r18	; 0x0c
    16e2:	2e d1       	rcall	.+604    	; 0x1940 <strnlen_P>
    16e4:	2c 01       	movw	r4, r24
    16e6:	2c 85       	ldd	r18, Y+12	; 0x0c
    16e8:	20 68       	ori	r18, 0x80	; 128
    16ea:	22 2e       	mov	r2, r18
    16ec:	83 01       	movw	r16, r6
    16ee:	23 fc       	sbrc	r2, 3
    16f0:	19 c0       	rjmp	.+50     	; 0x1724 <vfprintf+0x19e>
    16f2:	83 2d       	mov	r24, r3
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	48 16       	cp	r4, r24
    16f8:	59 06       	cpc	r5, r25
    16fa:	a0 f4       	brcc	.+40     	; 0x1724 <vfprintf+0x19e>
    16fc:	b7 01       	movw	r22, r14
    16fe:	80 e2       	ldi	r24, 0x20	; 32
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	3b d1       	rcall	.+630    	; 0x197a <fputc>
    1704:	3a 94       	dec	r3
    1706:	f5 cf       	rjmp	.-22     	; 0x16f2 <vfprintf+0x16c>
    1708:	f5 01       	movw	r30, r10
    170a:	27 fc       	sbrc	r2, 7
    170c:	85 91       	lpm	r24, Z+
    170e:	27 fe       	sbrs	r2, 7
    1710:	81 91       	ld	r24, Z+
    1712:	5f 01       	movw	r10, r30
    1714:	b7 01       	movw	r22, r14
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	30 d1       	rcall	.+608    	; 0x197a <fputc>
    171a:	31 10       	cpse	r3, r1
    171c:	3a 94       	dec	r3
    171e:	f1 e0       	ldi	r31, 0x01	; 1
    1720:	4f 1a       	sub	r4, r31
    1722:	51 08       	sbc	r5, r1
    1724:	41 14       	cp	r4, r1
    1726:	51 04       	cpc	r5, r1
    1728:	79 f7       	brne	.-34     	; 0x1708 <vfprintf+0x182>
    172a:	de c0       	rjmp	.+444    	; 0x18e8 <vfprintf+0x362>
    172c:	84 36       	cpi	r24, 0x64	; 100
    172e:	11 f0       	breq	.+4      	; 0x1734 <vfprintf+0x1ae>
    1730:	89 36       	cpi	r24, 0x69	; 105
    1732:	31 f5       	brne	.+76     	; 0x1780 <vfprintf+0x1fa>
    1734:	f8 01       	movw	r30, r16
    1736:	27 ff       	sbrs	r18, 7
    1738:	07 c0       	rjmp	.+14     	; 0x1748 <vfprintf+0x1c2>
    173a:	60 81       	ld	r22, Z
    173c:	71 81       	ldd	r23, Z+1	; 0x01
    173e:	82 81       	ldd	r24, Z+2	; 0x02
    1740:	93 81       	ldd	r25, Z+3	; 0x03
    1742:	0c 5f       	subi	r16, 0xFC	; 252
    1744:	1f 4f       	sbci	r17, 0xFF	; 255
    1746:	08 c0       	rjmp	.+16     	; 0x1758 <vfprintf+0x1d2>
    1748:	60 81       	ld	r22, Z
    174a:	71 81       	ldd	r23, Z+1	; 0x01
    174c:	88 27       	eor	r24, r24
    174e:	77 fd       	sbrc	r23, 7
    1750:	80 95       	com	r24
    1752:	98 2f       	mov	r25, r24
    1754:	0e 5f       	subi	r16, 0xFE	; 254
    1756:	1f 4f       	sbci	r17, 0xFF	; 255
    1758:	2f 76       	andi	r18, 0x6F	; 111
    175a:	b2 2e       	mov	r11, r18
    175c:	97 ff       	sbrs	r25, 7
    175e:	09 c0       	rjmp	.+18     	; 0x1772 <vfprintf+0x1ec>
    1760:	90 95       	com	r25
    1762:	80 95       	com	r24
    1764:	70 95       	com	r23
    1766:	61 95       	neg	r22
    1768:	7f 4f       	sbci	r23, 0xFF	; 255
    176a:	8f 4f       	sbci	r24, 0xFF	; 255
    176c:	9f 4f       	sbci	r25, 0xFF	; 255
    176e:	20 68       	ori	r18, 0x80	; 128
    1770:	b2 2e       	mov	r11, r18
    1772:	2a e0       	ldi	r18, 0x0A	; 10
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	a4 01       	movw	r20, r8
    1778:	32 d1       	rcall	.+612    	; 0x19de <__ultoa_invert>
    177a:	a8 2e       	mov	r10, r24
    177c:	a8 18       	sub	r10, r8
    177e:	43 c0       	rjmp	.+134    	; 0x1806 <vfprintf+0x280>
    1780:	85 37       	cpi	r24, 0x75	; 117
    1782:	29 f4       	brne	.+10     	; 0x178e <vfprintf+0x208>
    1784:	2f 7e       	andi	r18, 0xEF	; 239
    1786:	b2 2e       	mov	r11, r18
    1788:	2a e0       	ldi	r18, 0x0A	; 10
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	25 c0       	rjmp	.+74     	; 0x17d8 <vfprintf+0x252>
    178e:	f2 2f       	mov	r31, r18
    1790:	f9 7f       	andi	r31, 0xF9	; 249
    1792:	bf 2e       	mov	r11, r31
    1794:	8f 36       	cpi	r24, 0x6F	; 111
    1796:	c1 f0       	breq	.+48     	; 0x17c8 <vfprintf+0x242>
    1798:	18 f4       	brcc	.+6      	; 0x17a0 <vfprintf+0x21a>
    179a:	88 35       	cpi	r24, 0x58	; 88
    179c:	79 f0       	breq	.+30     	; 0x17bc <vfprintf+0x236>
    179e:	ad c0       	rjmp	.+346    	; 0x18fa <vfprintf+0x374>
    17a0:	80 37       	cpi	r24, 0x70	; 112
    17a2:	19 f0       	breq	.+6      	; 0x17aa <vfprintf+0x224>
    17a4:	88 37       	cpi	r24, 0x78	; 120
    17a6:	21 f0       	breq	.+8      	; 0x17b0 <vfprintf+0x22a>
    17a8:	a8 c0       	rjmp	.+336    	; 0x18fa <vfprintf+0x374>
    17aa:	2f 2f       	mov	r18, r31
    17ac:	20 61       	ori	r18, 0x10	; 16
    17ae:	b2 2e       	mov	r11, r18
    17b0:	b4 fe       	sbrs	r11, 4
    17b2:	0d c0       	rjmp	.+26     	; 0x17ce <vfprintf+0x248>
    17b4:	8b 2d       	mov	r24, r11
    17b6:	84 60       	ori	r24, 0x04	; 4
    17b8:	b8 2e       	mov	r11, r24
    17ba:	09 c0       	rjmp	.+18     	; 0x17ce <vfprintf+0x248>
    17bc:	24 ff       	sbrs	r18, 4
    17be:	0a c0       	rjmp	.+20     	; 0x17d4 <vfprintf+0x24e>
    17c0:	9f 2f       	mov	r25, r31
    17c2:	96 60       	ori	r25, 0x06	; 6
    17c4:	b9 2e       	mov	r11, r25
    17c6:	06 c0       	rjmp	.+12     	; 0x17d4 <vfprintf+0x24e>
    17c8:	28 e0       	ldi	r18, 0x08	; 8
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	05 c0       	rjmp	.+10     	; 0x17d8 <vfprintf+0x252>
    17ce:	20 e1       	ldi	r18, 0x10	; 16
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <vfprintf+0x252>
    17d4:	20 e1       	ldi	r18, 0x10	; 16
    17d6:	32 e0       	ldi	r19, 0x02	; 2
    17d8:	f8 01       	movw	r30, r16
    17da:	b7 fe       	sbrs	r11, 7
    17dc:	07 c0       	rjmp	.+14     	; 0x17ec <vfprintf+0x266>
    17de:	60 81       	ld	r22, Z
    17e0:	71 81       	ldd	r23, Z+1	; 0x01
    17e2:	82 81       	ldd	r24, Z+2	; 0x02
    17e4:	93 81       	ldd	r25, Z+3	; 0x03
    17e6:	0c 5f       	subi	r16, 0xFC	; 252
    17e8:	1f 4f       	sbci	r17, 0xFF	; 255
    17ea:	06 c0       	rjmp	.+12     	; 0x17f8 <vfprintf+0x272>
    17ec:	60 81       	ld	r22, Z
    17ee:	71 81       	ldd	r23, Z+1	; 0x01
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	0e 5f       	subi	r16, 0xFE	; 254
    17f6:	1f 4f       	sbci	r17, 0xFF	; 255
    17f8:	a4 01       	movw	r20, r8
    17fa:	f1 d0       	rcall	.+482    	; 0x19de <__ultoa_invert>
    17fc:	a8 2e       	mov	r10, r24
    17fe:	a8 18       	sub	r10, r8
    1800:	fb 2d       	mov	r31, r11
    1802:	ff 77       	andi	r31, 0x7F	; 127
    1804:	bf 2e       	mov	r11, r31
    1806:	b6 fe       	sbrs	r11, 6
    1808:	0b c0       	rjmp	.+22     	; 0x1820 <vfprintf+0x29a>
    180a:	2b 2d       	mov	r18, r11
    180c:	2e 7f       	andi	r18, 0xFE	; 254
    180e:	a5 14       	cp	r10, r5
    1810:	50 f4       	brcc	.+20     	; 0x1826 <vfprintf+0x2a0>
    1812:	b4 fe       	sbrs	r11, 4
    1814:	0a c0       	rjmp	.+20     	; 0x182a <vfprintf+0x2a4>
    1816:	b2 fc       	sbrc	r11, 2
    1818:	08 c0       	rjmp	.+16     	; 0x182a <vfprintf+0x2a4>
    181a:	2b 2d       	mov	r18, r11
    181c:	2e 7e       	andi	r18, 0xEE	; 238
    181e:	05 c0       	rjmp	.+10     	; 0x182a <vfprintf+0x2a4>
    1820:	7a 2c       	mov	r7, r10
    1822:	2b 2d       	mov	r18, r11
    1824:	03 c0       	rjmp	.+6      	; 0x182c <vfprintf+0x2a6>
    1826:	7a 2c       	mov	r7, r10
    1828:	01 c0       	rjmp	.+2      	; 0x182c <vfprintf+0x2a6>
    182a:	75 2c       	mov	r7, r5
    182c:	24 ff       	sbrs	r18, 4
    182e:	0d c0       	rjmp	.+26     	; 0x184a <vfprintf+0x2c4>
    1830:	fe 01       	movw	r30, r28
    1832:	ea 0d       	add	r30, r10
    1834:	f1 1d       	adc	r31, r1
    1836:	80 81       	ld	r24, Z
    1838:	80 33       	cpi	r24, 0x30	; 48
    183a:	11 f4       	brne	.+4      	; 0x1840 <vfprintf+0x2ba>
    183c:	29 7e       	andi	r18, 0xE9	; 233
    183e:	09 c0       	rjmp	.+18     	; 0x1852 <vfprintf+0x2cc>
    1840:	22 ff       	sbrs	r18, 2
    1842:	06 c0       	rjmp	.+12     	; 0x1850 <vfprintf+0x2ca>
    1844:	73 94       	inc	r7
    1846:	73 94       	inc	r7
    1848:	04 c0       	rjmp	.+8      	; 0x1852 <vfprintf+0x2cc>
    184a:	82 2f       	mov	r24, r18
    184c:	86 78       	andi	r24, 0x86	; 134
    184e:	09 f0       	breq	.+2      	; 0x1852 <vfprintf+0x2cc>
    1850:	73 94       	inc	r7
    1852:	23 fd       	sbrc	r18, 3
    1854:	12 c0       	rjmp	.+36     	; 0x187a <vfprintf+0x2f4>
    1856:	20 ff       	sbrs	r18, 0
    1858:	06 c0       	rjmp	.+12     	; 0x1866 <vfprintf+0x2e0>
    185a:	5a 2c       	mov	r5, r10
    185c:	73 14       	cp	r7, r3
    185e:	18 f4       	brcc	.+6      	; 0x1866 <vfprintf+0x2e0>
    1860:	53 0c       	add	r5, r3
    1862:	57 18       	sub	r5, r7
    1864:	73 2c       	mov	r7, r3
    1866:	73 14       	cp	r7, r3
    1868:	60 f4       	brcc	.+24     	; 0x1882 <vfprintf+0x2fc>
    186a:	b7 01       	movw	r22, r14
    186c:	80 e2       	ldi	r24, 0x20	; 32
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	2c 87       	std	Y+12, r18	; 0x0c
    1872:	83 d0       	rcall	.+262    	; 0x197a <fputc>
    1874:	73 94       	inc	r7
    1876:	2c 85       	ldd	r18, Y+12	; 0x0c
    1878:	f6 cf       	rjmp	.-20     	; 0x1866 <vfprintf+0x2e0>
    187a:	73 14       	cp	r7, r3
    187c:	10 f4       	brcc	.+4      	; 0x1882 <vfprintf+0x2fc>
    187e:	37 18       	sub	r3, r7
    1880:	01 c0       	rjmp	.+2      	; 0x1884 <vfprintf+0x2fe>
    1882:	31 2c       	mov	r3, r1
    1884:	24 ff       	sbrs	r18, 4
    1886:	11 c0       	rjmp	.+34     	; 0x18aa <vfprintf+0x324>
    1888:	b7 01       	movw	r22, r14
    188a:	80 e3       	ldi	r24, 0x30	; 48
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	2c 87       	std	Y+12, r18	; 0x0c
    1890:	74 d0       	rcall	.+232    	; 0x197a <fputc>
    1892:	2c 85       	ldd	r18, Y+12	; 0x0c
    1894:	22 ff       	sbrs	r18, 2
    1896:	16 c0       	rjmp	.+44     	; 0x18c4 <vfprintf+0x33e>
    1898:	21 ff       	sbrs	r18, 1
    189a:	03 c0       	rjmp	.+6      	; 0x18a2 <vfprintf+0x31c>
    189c:	88 e5       	ldi	r24, 0x58	; 88
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <vfprintf+0x320>
    18a2:	88 e7       	ldi	r24, 0x78	; 120
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	b7 01       	movw	r22, r14
    18a8:	0c c0       	rjmp	.+24     	; 0x18c2 <vfprintf+0x33c>
    18aa:	82 2f       	mov	r24, r18
    18ac:	86 78       	andi	r24, 0x86	; 134
    18ae:	51 f0       	breq	.+20     	; 0x18c4 <vfprintf+0x33e>
    18b0:	21 fd       	sbrc	r18, 1
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <vfprintf+0x332>
    18b4:	80 e2       	ldi	r24, 0x20	; 32
    18b6:	01 c0       	rjmp	.+2      	; 0x18ba <vfprintf+0x334>
    18b8:	8b e2       	ldi	r24, 0x2B	; 43
    18ba:	27 fd       	sbrc	r18, 7
    18bc:	8d e2       	ldi	r24, 0x2D	; 45
    18be:	b7 01       	movw	r22, r14
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	5b d0       	rcall	.+182    	; 0x197a <fputc>
    18c4:	a5 14       	cp	r10, r5
    18c6:	30 f4       	brcc	.+12     	; 0x18d4 <vfprintf+0x34e>
    18c8:	b7 01       	movw	r22, r14
    18ca:	80 e3       	ldi	r24, 0x30	; 48
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	55 d0       	rcall	.+170    	; 0x197a <fputc>
    18d0:	5a 94       	dec	r5
    18d2:	f8 cf       	rjmp	.-16     	; 0x18c4 <vfprintf+0x33e>
    18d4:	aa 94       	dec	r10
    18d6:	f4 01       	movw	r30, r8
    18d8:	ea 0d       	add	r30, r10
    18da:	f1 1d       	adc	r31, r1
    18dc:	80 81       	ld	r24, Z
    18de:	b7 01       	movw	r22, r14
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	4b d0       	rcall	.+150    	; 0x197a <fputc>
    18e4:	a1 10       	cpse	r10, r1
    18e6:	f6 cf       	rjmp	.-20     	; 0x18d4 <vfprintf+0x34e>
    18e8:	33 20       	and	r3, r3
    18ea:	09 f4       	brne	.+2      	; 0x18ee <vfprintf+0x368>
    18ec:	5d ce       	rjmp	.-838    	; 0x15a8 <vfprintf+0x22>
    18ee:	b7 01       	movw	r22, r14
    18f0:	80 e2       	ldi	r24, 0x20	; 32
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	42 d0       	rcall	.+132    	; 0x197a <fputc>
    18f6:	3a 94       	dec	r3
    18f8:	f7 cf       	rjmp	.-18     	; 0x18e8 <vfprintf+0x362>
    18fa:	f7 01       	movw	r30, r14
    18fc:	86 81       	ldd	r24, Z+6	; 0x06
    18fe:	97 81       	ldd	r25, Z+7	; 0x07
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <vfprintf+0x380>
    1902:	8f ef       	ldi	r24, 0xFF	; 255
    1904:	9f ef       	ldi	r25, 0xFF	; 255
    1906:	2c 96       	adiw	r28, 0x0c	; 12
    1908:	e2 e1       	ldi	r30, 0x12	; 18
    190a:	e3 c0       	rjmp	.+454    	; 0x1ad2 <__epilogue_restores__>

0000190c <calloc>:
    190c:	0f 93       	push	r16
    190e:	1f 93       	push	r17
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	86 9f       	mul	r24, r22
    1916:	80 01       	movw	r16, r0
    1918:	87 9f       	mul	r24, r23
    191a:	10 0d       	add	r17, r0
    191c:	96 9f       	mul	r25, r22
    191e:	10 0d       	add	r17, r0
    1920:	11 24       	eor	r1, r1
    1922:	c8 01       	movw	r24, r16
    1924:	81 dc       	rcall	.-1790   	; 0x1228 <malloc>
    1926:	ec 01       	movw	r28, r24
    1928:	00 97       	sbiw	r24, 0x00	; 0
    192a:	21 f0       	breq	.+8      	; 0x1934 <calloc+0x28>
    192c:	a8 01       	movw	r20, r16
    192e:	60 e0       	ldi	r22, 0x00	; 0
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	11 d0       	rcall	.+34     	; 0x1956 <memset>
    1934:	ce 01       	movw	r24, r28
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	1f 91       	pop	r17
    193c:	0f 91       	pop	r16
    193e:	08 95       	ret

00001940 <strnlen_P>:
    1940:	fc 01       	movw	r30, r24
    1942:	05 90       	lpm	r0, Z+
    1944:	61 50       	subi	r22, 0x01	; 1
    1946:	70 40       	sbci	r23, 0x00	; 0
    1948:	01 10       	cpse	r0, r1
    194a:	d8 f7       	brcc	.-10     	; 0x1942 <strnlen_P+0x2>
    194c:	80 95       	com	r24
    194e:	90 95       	com	r25
    1950:	8e 0f       	add	r24, r30
    1952:	9f 1f       	adc	r25, r31
    1954:	08 95       	ret

00001956 <memset>:
    1956:	dc 01       	movw	r26, r24
    1958:	01 c0       	rjmp	.+2      	; 0x195c <memset+0x6>
    195a:	6d 93       	st	X+, r22
    195c:	41 50       	subi	r20, 0x01	; 1
    195e:	50 40       	sbci	r21, 0x00	; 0
    1960:	e0 f7       	brcc	.-8      	; 0x195a <memset+0x4>
    1962:	08 95       	ret

00001964 <strnlen>:
    1964:	fc 01       	movw	r30, r24
    1966:	61 50       	subi	r22, 0x01	; 1
    1968:	70 40       	sbci	r23, 0x00	; 0
    196a:	01 90       	ld	r0, Z+
    196c:	01 10       	cpse	r0, r1
    196e:	d8 f7       	brcc	.-10     	; 0x1966 <strnlen+0x2>
    1970:	80 95       	com	r24
    1972:	90 95       	com	r25
    1974:	8e 0f       	add	r24, r30
    1976:	9f 1f       	adc	r25, r31
    1978:	08 95       	ret

0000197a <fputc>:
    197a:	0f 93       	push	r16
    197c:	1f 93       	push	r17
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
    1982:	18 2f       	mov	r17, r24
    1984:	09 2f       	mov	r16, r25
    1986:	eb 01       	movw	r28, r22
    1988:	8b 81       	ldd	r24, Y+3	; 0x03
    198a:	81 fd       	sbrc	r24, 1
    198c:	03 c0       	rjmp	.+6      	; 0x1994 <fputc+0x1a>
    198e:	8f ef       	ldi	r24, 0xFF	; 255
    1990:	9f ef       	ldi	r25, 0xFF	; 255
    1992:	20 c0       	rjmp	.+64     	; 0x19d4 <fputc+0x5a>
    1994:	82 ff       	sbrs	r24, 2
    1996:	10 c0       	rjmp	.+32     	; 0x19b8 <fputc+0x3e>
    1998:	4e 81       	ldd	r20, Y+6	; 0x06
    199a:	5f 81       	ldd	r21, Y+7	; 0x07
    199c:	2c 81       	ldd	r18, Y+4	; 0x04
    199e:	3d 81       	ldd	r19, Y+5	; 0x05
    19a0:	42 17       	cp	r20, r18
    19a2:	53 07       	cpc	r21, r19
    19a4:	7c f4       	brge	.+30     	; 0x19c4 <fputc+0x4a>
    19a6:	e8 81       	ld	r30, Y
    19a8:	f9 81       	ldd	r31, Y+1	; 0x01
    19aa:	9f 01       	movw	r18, r30
    19ac:	2f 5f       	subi	r18, 0xFF	; 255
    19ae:	3f 4f       	sbci	r19, 0xFF	; 255
    19b0:	39 83       	std	Y+1, r19	; 0x01
    19b2:	28 83       	st	Y, r18
    19b4:	10 83       	st	Z, r17
    19b6:	06 c0       	rjmp	.+12     	; 0x19c4 <fputc+0x4a>
    19b8:	e8 85       	ldd	r30, Y+8	; 0x08
    19ba:	f9 85       	ldd	r31, Y+9	; 0x09
    19bc:	81 2f       	mov	r24, r17
    19be:	09 95       	icall
    19c0:	89 2b       	or	r24, r25
    19c2:	29 f7       	brne	.-54     	; 0x198e <fputc+0x14>
    19c4:	2e 81       	ldd	r18, Y+6	; 0x06
    19c6:	3f 81       	ldd	r19, Y+7	; 0x07
    19c8:	2f 5f       	subi	r18, 0xFF	; 255
    19ca:	3f 4f       	sbci	r19, 0xFF	; 255
    19cc:	3f 83       	std	Y+7, r19	; 0x07
    19ce:	2e 83       	std	Y+6, r18	; 0x06
    19d0:	81 2f       	mov	r24, r17
    19d2:	90 2f       	mov	r25, r16
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	1f 91       	pop	r17
    19da:	0f 91       	pop	r16
    19dc:	08 95       	ret

000019de <__ultoa_invert>:
    19de:	fa 01       	movw	r30, r20
    19e0:	aa 27       	eor	r26, r26
    19e2:	28 30       	cpi	r18, 0x08	; 8
    19e4:	51 f1       	breq	.+84     	; 0x1a3a <__ultoa_invert+0x5c>
    19e6:	20 31       	cpi	r18, 0x10	; 16
    19e8:	81 f1       	breq	.+96     	; 0x1a4a <__ultoa_invert+0x6c>
    19ea:	e8 94       	clt
    19ec:	6f 93       	push	r22
    19ee:	6e 7f       	andi	r22, 0xFE	; 254
    19f0:	6e 5f       	subi	r22, 0xFE	; 254
    19f2:	7f 4f       	sbci	r23, 0xFF	; 255
    19f4:	8f 4f       	sbci	r24, 0xFF	; 255
    19f6:	9f 4f       	sbci	r25, 0xFF	; 255
    19f8:	af 4f       	sbci	r26, 0xFF	; 255
    19fa:	b1 e0       	ldi	r27, 0x01	; 1
    19fc:	3e d0       	rcall	.+124    	; 0x1a7a <__ultoa_invert+0x9c>
    19fe:	b4 e0       	ldi	r27, 0x04	; 4
    1a00:	3c d0       	rcall	.+120    	; 0x1a7a <__ultoa_invert+0x9c>
    1a02:	67 0f       	add	r22, r23
    1a04:	78 1f       	adc	r23, r24
    1a06:	89 1f       	adc	r24, r25
    1a08:	9a 1f       	adc	r25, r26
    1a0a:	a1 1d       	adc	r26, r1
    1a0c:	68 0f       	add	r22, r24
    1a0e:	79 1f       	adc	r23, r25
    1a10:	8a 1f       	adc	r24, r26
    1a12:	91 1d       	adc	r25, r1
    1a14:	a1 1d       	adc	r26, r1
    1a16:	6a 0f       	add	r22, r26
    1a18:	71 1d       	adc	r23, r1
    1a1a:	81 1d       	adc	r24, r1
    1a1c:	91 1d       	adc	r25, r1
    1a1e:	a1 1d       	adc	r26, r1
    1a20:	20 d0       	rcall	.+64     	; 0x1a62 <__ultoa_invert+0x84>
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <__ultoa_invert+0x48>
    1a24:	68 94       	set
    1a26:	3f 91       	pop	r19
    1a28:	2a e0       	ldi	r18, 0x0A	; 10
    1a2a:	26 9f       	mul	r18, r22
    1a2c:	11 24       	eor	r1, r1
    1a2e:	30 19       	sub	r19, r0
    1a30:	30 5d       	subi	r19, 0xD0	; 208
    1a32:	31 93       	st	Z+, r19
    1a34:	de f6       	brtc	.-74     	; 0x19ec <__ultoa_invert+0xe>
    1a36:	cf 01       	movw	r24, r30
    1a38:	08 95       	ret
    1a3a:	46 2f       	mov	r20, r22
    1a3c:	47 70       	andi	r20, 0x07	; 7
    1a3e:	40 5d       	subi	r20, 0xD0	; 208
    1a40:	41 93       	st	Z+, r20
    1a42:	b3 e0       	ldi	r27, 0x03	; 3
    1a44:	0f d0       	rcall	.+30     	; 0x1a64 <__ultoa_invert+0x86>
    1a46:	c9 f7       	brne	.-14     	; 0x1a3a <__ultoa_invert+0x5c>
    1a48:	f6 cf       	rjmp	.-20     	; 0x1a36 <__ultoa_invert+0x58>
    1a4a:	46 2f       	mov	r20, r22
    1a4c:	4f 70       	andi	r20, 0x0F	; 15
    1a4e:	40 5d       	subi	r20, 0xD0	; 208
    1a50:	4a 33       	cpi	r20, 0x3A	; 58
    1a52:	18 f0       	brcs	.+6      	; 0x1a5a <__ultoa_invert+0x7c>
    1a54:	49 5d       	subi	r20, 0xD9	; 217
    1a56:	31 fd       	sbrc	r19, 1
    1a58:	40 52       	subi	r20, 0x20	; 32
    1a5a:	41 93       	st	Z+, r20
    1a5c:	02 d0       	rcall	.+4      	; 0x1a62 <__ultoa_invert+0x84>
    1a5e:	a9 f7       	brne	.-22     	; 0x1a4a <__ultoa_invert+0x6c>
    1a60:	ea cf       	rjmp	.-44     	; 0x1a36 <__ultoa_invert+0x58>
    1a62:	b4 e0       	ldi	r27, 0x04	; 4
    1a64:	a6 95       	lsr	r26
    1a66:	97 95       	ror	r25
    1a68:	87 95       	ror	r24
    1a6a:	77 95       	ror	r23
    1a6c:	67 95       	ror	r22
    1a6e:	ba 95       	dec	r27
    1a70:	c9 f7       	brne	.-14     	; 0x1a64 <__ultoa_invert+0x86>
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	61 05       	cpc	r22, r1
    1a76:	71 05       	cpc	r23, r1
    1a78:	08 95       	ret
    1a7a:	9b 01       	movw	r18, r22
    1a7c:	ac 01       	movw	r20, r24
    1a7e:	0a 2e       	mov	r0, r26
    1a80:	06 94       	lsr	r0
    1a82:	57 95       	ror	r21
    1a84:	47 95       	ror	r20
    1a86:	37 95       	ror	r19
    1a88:	27 95       	ror	r18
    1a8a:	ba 95       	dec	r27
    1a8c:	c9 f7       	brne	.-14     	; 0x1a80 <__ultoa_invert+0xa2>
    1a8e:	62 0f       	add	r22, r18
    1a90:	73 1f       	adc	r23, r19
    1a92:	84 1f       	adc	r24, r20
    1a94:	95 1f       	adc	r25, r21
    1a96:	a0 1d       	adc	r26, r0
    1a98:	08 95       	ret

00001a9a <__prologue_saves__>:
    1a9a:	2f 92       	push	r2
    1a9c:	3f 92       	push	r3
    1a9e:	4f 92       	push	r4
    1aa0:	5f 92       	push	r5
    1aa2:	6f 92       	push	r6
    1aa4:	7f 92       	push	r7
    1aa6:	8f 92       	push	r8
    1aa8:	9f 92       	push	r9
    1aaa:	af 92       	push	r10
    1aac:	bf 92       	push	r11
    1aae:	cf 92       	push	r12
    1ab0:	df 92       	push	r13
    1ab2:	ef 92       	push	r14
    1ab4:	ff 92       	push	r15
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	ca 1b       	sub	r28, r26
    1ac4:	db 0b       	sbc	r29, r27
    1ac6:	0f b6       	in	r0, 0x3f	; 63
    1ac8:	f8 94       	cli
    1aca:	de bf       	out	0x3e, r29	; 62
    1acc:	0f be       	out	0x3f, r0	; 63
    1ace:	cd bf       	out	0x3d, r28	; 61
    1ad0:	09 94       	ijmp

00001ad2 <__epilogue_restores__>:
    1ad2:	2a 88       	ldd	r2, Y+18	; 0x12
    1ad4:	39 88       	ldd	r3, Y+17	; 0x11
    1ad6:	48 88       	ldd	r4, Y+16	; 0x10
    1ad8:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ada:	6e 84       	ldd	r6, Y+14	; 0x0e
    1adc:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ade:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ae0:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ae2:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ae4:	b9 84       	ldd	r11, Y+9	; 0x09
    1ae6:	c8 84       	ldd	r12, Y+8	; 0x08
    1ae8:	df 80       	ldd	r13, Y+7	; 0x07
    1aea:	ee 80       	ldd	r14, Y+6	; 0x06
    1aec:	fd 80       	ldd	r15, Y+5	; 0x05
    1aee:	0c 81       	ldd	r16, Y+4	; 0x04
    1af0:	1b 81       	ldd	r17, Y+3	; 0x03
    1af2:	aa 81       	ldd	r26, Y+2	; 0x02
    1af4:	b9 81       	ldd	r27, Y+1	; 0x01
    1af6:	ce 0f       	add	r28, r30
    1af8:	d1 1d       	adc	r29, r1
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	de bf       	out	0x3e, r29	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	cd bf       	out	0x3d, r28	; 61
    1b04:	ed 01       	movw	r28, r26
    1b06:	08 95       	ret

00001b08 <_exit>:
    1b08:	f8 94       	cli

00001b0a <__stop_program>:
    1b0a:	ff cf       	rjmp	.-2      	; 0x1b0a <__stop_program>
