
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000238  00800100  00001c30  00001cc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  00800338  00800338  00001efc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001efc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000268  00000000  00000000  00001f58  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002d50  00000000  00000000  000021c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e1a  00000000  00000000  00004f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000122e  00000000  00000000  00005d2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000005e8  00000000  00000000  00006f58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b9c  00000000  00000000  00007540  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000154f  00000000  00000000  000080dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000218  00000000  00000000  0000962b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	c9 c1       	rjmp	.+914    	; 0x3a0 <__bad_interrupt>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <MENU_buildMenus+0x182>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e0 e3       	ldi	r30, 0x30	; 48
     37c:	fc e1       	ldi	r31, 0x1C	; 28
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a8 33       	cpi	r26, 0x38	; 56
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a8 e3       	ldi	r26, 0x38	; 56
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ae 35       	cpi	r26, 0x5E	; 94
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	b5 d0       	rcall	.+362    	; 0x506 <main>
     39c:	0c 94 16 0e 	jmp	0x1c2c	; 0x1c2c <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 4f 03 	sts	0x034F, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 3a 03 	sts	0x033A, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 39 03 	sts	0x0339, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 38 03 	sts	0x0338, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <SRAM_test>:
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	88 e1       	ldi	r24, 0x18	; 24
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 cb 0a 	call	0x1596	; 0x1596 <puts>
     416:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <rand>
     41a:	7c 01       	movw	r14, r24
     41c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <srand>
     420:	c0 e0       	ldi	r28, 0x00	; 0
     422:	d8 e1       	ldi	r29, 0x18	; 24
     424:	00 e0       	ldi	r16, 0x00	; 0
     426:	10 e0       	ldi	r17, 0x00	; 0
     428:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <rand>
     42c:	88 83       	st	Y, r24
     42e:	98 81       	ld	r25, Y
     430:	98 17       	cp	r25, r24
     432:	11 f0       	breq	.+4      	; 0x438 <SRAM_test+0x36>
     434:	0f 5f       	subi	r16, 0xFF	; 255
     436:	1f 4f       	sbci	r17, 0xFF	; 255
     438:	21 96       	adiw	r28, 0x01	; 1
     43a:	c1 15       	cp	r28, r1
     43c:	80 e2       	ldi	r24, 0x20	; 32
     43e:	d8 07       	cpc	r29, r24
     440:	99 f7       	brne	.-26     	; 0x428 <SRAM_test+0x26>
     442:	c7 01       	movw	r24, r14
     444:	0e 94 65 0a 	call	0x14ca	; 0x14ca <srand>
     448:	c0 e0       	ldi	r28, 0x00	; 0
     44a:	d8 e1       	ldi	r29, 0x18	; 24
     44c:	e1 2c       	mov	r14, r1
     44e:	f1 2c       	mov	r15, r1
     450:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <rand>
     454:	98 81       	ld	r25, Y
     456:	98 17       	cp	r25, r24
     458:	19 f0       	breq	.+6      	; 0x460 <SRAM_test+0x5e>
     45a:	8f ef       	ldi	r24, 0xFF	; 255
     45c:	e8 1a       	sub	r14, r24
     45e:	f8 0a       	sbc	r15, r24
     460:	21 96       	adiw	r28, 0x01	; 1
     462:	c1 15       	cp	r28, r1
     464:	80 e2       	ldi	r24, 0x20	; 32
     466:	d8 07       	cpc	r29, r24
     468:	99 f7       	brne	.-26     	; 0x450 <SRAM_test+0x4e>
     46a:	ff 92       	push	r15
     46c:	ef 92       	push	r14
     46e:	1f 93       	push	r17
     470:	0f 93       	push	r16
     472:	8e e2       	ldi	r24, 0x2E	; 46
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	9f 93       	push	r25
     478:	8f 93       	push	r24
     47a:	0e 94 ba 0a 	call	0x1574	; 0x1574 <printf>
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	ff 90       	pop	r15
     494:	ef 90       	pop	r14
     496:	08 95       	ret

00000498 <init>:
     498:	ef 92       	push	r14
     49a:	ff 92       	push	r15
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	1f e1       	ldi	r17, 0x1F	; 31
     4a2:	e1 2e       	mov	r14, r17
     4a4:	f1 2c       	mov	r15, r1
     4a6:	00 e0       	ldi	r16, 0x00	; 0
     4a8:	10 e0       	ldi	r17, 0x00	; 0
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	4b e4       	ldi	r20, 0x4B	; 75
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	60 e8       	ldi	r22, 0x80	; 128
     4b4:	75 e2       	ldi	r23, 0x25	; 37
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	2e d6       	rcall	.+3164   	; 0x1118 <uartInit>
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	2d d0       	rcall	.+90     	; 0x51a <enableXMEM>
     4c0:	1a d6       	rcall	.+3124   	; 0x10f6 <SLI_init>
     4c2:	3d d0       	rcall	.+122    	; 0x53e <JOY_init>
     4c4:	92 d5       	rcall	.+2852   	; 0xfea <OLED_init>
     4c6:	45 d4       	rcall	.+2186   	; 0xd52 <MENU_activate>
     4c8:	8b b7       	in	r24, 0x3b	; 59
     4ca:	80 64       	ori	r24, 0x40	; 64
     4cc:	8b bf       	out	0x3b, r24	; 59
     4ce:	85 b7       	in	r24, 0x35	; 53
     4d0:	82 60       	ori	r24, 0x02	; 2
     4d2:	85 bf       	out	0x35, r24	; 53
     4d4:	85 b7       	in	r24, 0x35	; 53
     4d6:	8e 7f       	andi	r24, 0xFE	; 254
     4d8:	85 bf       	out	0x35, r24	; 53
     4da:	8b 98       	cbi	0x11, 3	; 17
     4dc:	93 9a       	sbi	0x12, 3	; 18
     4de:	8b b7       	in	r24, 0x3b	; 59
     4e0:	80 68       	ori	r24, 0x80	; 128
     4e2:	8b bf       	out	0x3b, r24	; 59
     4e4:	85 b7       	in	r24, 0x35	; 53
     4e6:	88 60       	ori	r24, 0x08	; 8
     4e8:	85 bf       	out	0x35, r24	; 53
     4ea:	85 b7       	in	r24, 0x35	; 53
     4ec:	8b 7f       	andi	r24, 0xFB	; 251
     4ee:	85 bf       	out	0x35, r24	; 53
     4f0:	32 98       	cbi	0x06, 2	; 6
     4f2:	3a 98       	cbi	0x07, 2	; 7
     4f4:	b8 98       	cbi	0x17, 0	; 23
     4f6:	c0 98       	cbi	0x18, 0	; 24
     4f8:	78 94       	sei
     4fa:	83 df       	rcall	.-250    	; 0x402 <SRAM_test>
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	ff 90       	pop	r15
     502:	ef 90       	pop	r14
     504:	08 95       	ret

00000506 <main>:
=======================MAIN FUNCTION=========================
*/

int main(void)
{	
	init();
     506:	c8 df       	rcall	.-112    	; 0x498 <init>
	
    while(1)
    {	
		// statusMultifunctionBoard();
		JOY_getDirection();
     508:	db d1       	rcall	.+950    	; 0x8c0 <JOY_getDirection>

		// todo: remove! will be included in the menu driver later
		if(JOYcalibFlag)
     50a:	80 91 38 03 	lds	r24, 0x0338
     50e:	88 23       	and	r24, r24
     510:	d9 f3       	breq	.-10     	; 0x508 <main+0x2>
		{
			//run joystick calibration
			JOY_calibrate();
     512:	28 d0       	rcall	.+80     	; 0x564 <JOY_calibrate>
			JOYcalibFlag = 0;
     514:	10 92 38 03 	sts	0x0338, r1
     518:	f7 cf       	rjmp	.-18     	; 0x508 <main+0x2>

0000051a <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     51a:	95 b7       	in	r25, 0x35	; 53
     51c:	90 68       	ori	r25, 0x80	; 128
     51e:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     520:	96 b7       	in	r25, 0x36	; 54
     522:	98 60       	ori	r25, 0x08	; 8
     524:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     526:	88 23       	and	r24, r24
     528:	19 f0       	breq	.+6      	; 0x530 <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     52a:	80 b7       	in	r24, 0x30	; 48
     52c:	80 62       	ori	r24, 0x20	; 32
     52e:	80 bf       	out	0x30, r24	; 48
     530:	08 95       	ret

00000532 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     532:	fc 01       	movw	r30, r24
     534:	80 81       	ld	r24, Z
	return val;
}
     536:	08 95       	ret

00000538 <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     538:	fc 01       	movw	r30, r24
     53a:	60 83       	st	Z, r22
     53c:	08 95       	ret

0000053e <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     53e:	10 92 3d 03 	sts	0x033D, r1
     542:	10 92 3c 03 	sts	0x033C, r1
	currentPosition.Y_abs = 0;
     546:	10 92 3f 03 	sts	0x033F, r1
     54a:	10 92 3e 03 	sts	0x033E, r1
	currentPosition.X_per = 0;
     54e:	10 92 41 03 	sts	0x0341, r1
     552:	10 92 40 03 	sts	0x0340, r1
	currentPosition.Y_per = 0;
     556:	10 92 43 03 	sts	0x0343, r1
     55a:	10 92 42 03 	sts	0x0342, r1
	currentDirection = CENTRE;
     55e:	10 92 3b 03 	sts	0x033B, r1
     562:	08 95       	ret

00000564 <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     568:	1f d4       	rcall	.+2110   	; 0xda8 <OLED_clear>
     56a:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	80 e0       	ldi	r24, 0x00	; 0
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	fd d3       	rcall	.+2042   	; 0xd6e <OLED_goto>
     574:	83 ea       	ldi	r24, 0xA3	; 163
     576:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     578:	50 d4       	rcall	.+2208   	; 0xe1a <OLED_printString>
     57a:	8d ea       	ldi	r24, 0xAD	; 173
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	0e 94 cb 0a 	call	0x1596	; 0x1596 <puts>
	printf("Move JOY to the right\n");
     582:	2f ef       	ldi	r18, 0xFF	; 255
     584:	4f ef       	ldi	r20, 0xFF	; 255
     586:	52 e0       	ldi	r21, 0x02	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     588:	21 50       	subi	r18, 0x01	; 1
     58a:	40 40       	sbci	r20, 0x00	; 0
     58c:	50 40       	sbci	r21, 0x00	; 0
     58e:	e1 f7       	brne	.-8      	; 0x588 <JOY_calibrate+0x24>
     590:	00 c0       	rjmp	.+0      	; 0x592 <JOY_calibrate+0x2e>
     592:	00 c0       	rjmp	.+0      	; 0x594 <JOY_calibrate+0x30>
     594:	c4 e1       	ldi	r28, 0x14	; 20
     596:	d0 e0       	ldi	r29, 0x00	; 0
     598:	60 91 0a 01 	lds	r22, 0x010A
     59c:	70 91 0b 01 	lds	r23, 0x010B
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     5a0:	82 e0       	ldi	r24, 0x02	; 2
     5a2:	d3 d5       	rcall	.+2982   	; 0x114a <ADC_request>
     5a4:	8f ef       	ldi	r24, 0xFF	; 255
     5a6:	9f e1       	ldi	r25, 0x1F	; 31
     5a8:	21 e0       	ldi	r18, 0x01	; 1
     5aa:	81 50       	subi	r24, 0x01	; 1
     5ac:	90 40       	sbci	r25, 0x00	; 0
     5ae:	20 40       	sbci	r18, 0x00	; 0
     5b0:	e1 f7       	brne	.-8      	; 0x5aa <JOY_calibrate+0x46>
     5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <JOY_calibrate+0x50>
     5b4:	00 00       	nop
     5b6:	80 91 0a 01 	lds	r24, 0x010A
     5ba:	90 91 0b 01 	lds	r25, 0x010B
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     5be:	e9 d5       	rcall	.+3026   	; 0x1192 <ADC_read>
     5c0:	90 91 11 01 	lds	r25, 0x0111
     5c4:	98 17       	cp	r25, r24
     5c6:	10 f4       	brcc	.+4      	; 0x5cc <JOY_calibrate+0x68>
     5c8:	80 93 11 01 	sts	0x0111, r24
		
		if(temp > calR) {calR = temp;}
     5cc:	21 97       	sbiw	r28, 0x01	; 1
     5ce:	20 97       	sbiw	r28, 0x00	; 0
     5d0:	19 f7       	brne	.-58     	; 0x598 <JOY_calibrate+0x34>
     5d2:	60 e0       	ldi	r22, 0x00	; 0
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	81 e0       	ldi	r24, 0x01	; 1
	OLED_goto(0,0);
	OLED_printString("JOY RIGHT");
	printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	c9 d3       	rcall	.+1938   	; 0xd6e <OLED_goto>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_goto(1,0);
     5dc:	83 ec       	ldi	r24, 0xC3	; 195
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	1c d4       	rcall	.+2104   	; 0xe1a <OLED_printString>
     5e2:	8c ec       	ldi	r24, 0xCC	; 204
     5e4:	91 e0       	ldi	r25, 0x01	; 1
     5e6:	d7 d7       	rcall	.+4014   	; 0x1596 <puts>
	OLED_printString("JOY LEFT");
     5e8:	4f ef       	ldi	r20, 0xFF	; 255
     5ea:	5f ef       	ldi	r21, 0xFF	; 255
     5ec:	82 e0       	ldi	r24, 0x02	; 2
     5ee:	41 50       	subi	r20, 0x01	; 1
	printf("Move JOY to the left\n");
     5f0:	50 40       	sbci	r21, 0x00	; 0
     5f2:	80 40       	sbci	r24, 0x00	; 0
     5f4:	e1 f7       	brne	.-8      	; 0x5ee <JOY_calibrate+0x8a>
     5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <JOY_calibrate+0x94>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <JOY_calibrate+0x96>
     5fa:	c4 e1       	ldi	r28, 0x14	; 20
     5fc:	d0 e0       	ldi	r29, 0x00	; 0
     5fe:	60 91 0a 01 	lds	r22, 0x010A
     602:	70 91 0b 01 	lds	r23, 0x010B
     606:	82 e0       	ldi	r24, 0x02	; 2
     608:	a0 d5       	rcall	.+2880   	; 0x114a <ADC_request>
     60a:	9f ef       	ldi	r25, 0xFF	; 255
     60c:	2f e1       	ldi	r18, 0x1F	; 31
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     60e:	41 e0       	ldi	r20, 0x01	; 1
     610:	91 50       	subi	r25, 0x01	; 1
     612:	20 40       	sbci	r18, 0x00	; 0
     614:	40 40       	sbci	r20, 0x00	; 0
     616:	e1 f7       	brne	.-8      	; 0x610 <JOY_calibrate+0xac>
     618:	00 c0       	rjmp	.+0      	; 0x61a <JOY_calibrate+0xb6>
     61a:	00 00       	nop
     61c:	80 91 0a 01 	lds	r24, 0x010A
     620:	90 91 0b 01 	lds	r25, 0x010B
     624:	b6 d5       	rcall	.+2924   	; 0x1192 <ADC_read>
     626:	90 91 10 01 	lds	r25, 0x0110
     62a:	89 17       	cp	r24, r25
     62c:	10 f4       	brcc	.+4      	; 0x632 <JOY_calibrate+0xce>
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     62e:	80 93 10 01 	sts	0x0110, r24
     632:	21 97       	sbiw	r28, 0x01	; 1
     634:	20 97       	sbiw	r28, 0x00	; 0
     636:	19 f7       	brne	.-58     	; 0x5fe <JOY_calibrate+0x9a>
     638:	60 e0       	ldi	r22, 0x00	; 0
		
		if(temp < calL) {calL = temp;}
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	96 d3       	rcall	.+1836   	; 0xd6e <OLED_goto>
     642:	81 ee       	ldi	r24, 0xE1	; 225
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	e9 d3       	rcall	.+2002   	; 0xe1a <OLED_printString>
	OLED_goto(1,0);
	OLED_printString("JOY LEFT");
	printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     648:	88 ee       	ldi	r24, 0xE8	; 232
     64a:	91 e0       	ldi	r25, 0x01	; 1
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_goto(2,0);
     64c:	a4 d7       	rcall	.+3912   	; 0x1596 <puts>
     64e:	5f ef       	ldi	r21, 0xFF	; 255
     650:	8f ef       	ldi	r24, 0xFF	; 255
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	51 50       	subi	r21, 0x01	; 1
     656:	80 40       	sbci	r24, 0x00	; 0
	OLED_printString("JOY UP");
     658:	90 40       	sbci	r25, 0x00	; 0
     65a:	e1 f7       	brne	.-8      	; 0x654 <JOY_calibrate+0xf0>
     65c:	00 c0       	rjmp	.+0      	; 0x65e <JOY_calibrate+0xfa>
     65e:	00 c0       	rjmp	.+0      	; 0x660 <JOY_calibrate+0xfc>
	printf("Move JOY up\n");
     660:	c4 e1       	ldi	r28, 0x14	; 20
     662:	d0 e0       	ldi	r29, 0x00	; 0
     664:	60 91 0a 01 	lds	r22, 0x010A
     668:	70 91 0b 01 	lds	r23, 0x010B
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	6d d5       	rcall	.+2778   	; 0x114a <ADC_request>
     670:	2f ef       	ldi	r18, 0xFF	; 255
     672:	4f e1       	ldi	r20, 0x1F	; 31
     674:	51 e0       	ldi	r21, 0x01	; 1
     676:	21 50       	subi	r18, 0x01	; 1
     678:	40 40       	sbci	r20, 0x00	; 0
     67a:	50 40       	sbci	r21, 0x00	; 0
     67c:	e1 f7       	brne	.-8      	; 0x676 <JOY_calibrate+0x112>
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     67e:	00 c0       	rjmp	.+0      	; 0x680 <JOY_calibrate+0x11c>
     680:	00 00       	nop
     682:	80 91 0a 01 	lds	r24, 0x010A
     686:	90 91 0b 01 	lds	r25, 0x010B
     68a:	83 d5       	rcall	.+2822   	; 0x1192 <ADC_read>
     68c:	90 91 0f 01 	lds	r25, 0x010F
     690:	98 17       	cp	r25, r24
     692:	10 f4       	brcc	.+4      	; 0x698 <JOY_calibrate+0x134>
     694:	80 93 0f 01 	sts	0x010F, r24
     698:	21 97       	sbiw	r28, 0x01	; 1
     69a:	20 97       	sbiw	r28, 0x00	; 0
     69c:	19 f7       	brne	.-58     	; 0x664 <JOY_calibrate+0x100>
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	63 d3       	rcall	.+1734   	; 0xd6e <OLED_goto>
     6a8:	84 ef       	ldi	r24, 0xF4	; 244
		
		if(temp > calUp) {calUp = temp;}
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	b6 d3       	rcall	.+1900   	; 0xe1a <OLED_printString>
     6ae:	8d ef       	ldi	r24, 0xFD	; 253
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	71 d7       	rcall	.+3810   	; 0x1596 <puts>
     6b4:	8f ef       	ldi	r24, 0xFF	; 255
     6b6:	9f ef       	ldi	r25, 0xFF	; 255
	OLED_goto(2,0);
	OLED_printString("JOY UP");
	printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     6b8:	22 e0       	ldi	r18, 0x02	; 2
     6ba:	81 50       	subi	r24, 0x01	; 1
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_goto(3,0);
     6bc:	90 40       	sbci	r25, 0x00	; 0
     6be:	20 40       	sbci	r18, 0x00	; 0
     6c0:	e1 f7       	brne	.-8      	; 0x6ba <JOY_calibrate+0x156>
     6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <JOY_calibrate+0x160>
     6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <JOY_calibrate+0x162>
     6c6:	c4 e1       	ldi	r28, 0x14	; 20
	OLED_printString("JOY DOWN");
     6c8:	d0 e0       	ldi	r29, 0x00	; 0
     6ca:	60 91 0a 01 	lds	r22, 0x010A
     6ce:	70 91 0b 01 	lds	r23, 0x010B
	printf("Move JOY down\n");
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	3a d5       	rcall	.+2676   	; 0x114a <ADC_request>
     6d6:	4f ef       	ldi	r20, 0xFF	; 255
     6d8:	5f e1       	ldi	r21, 0x1F	; 31
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	41 50       	subi	r20, 0x01	; 1
     6de:	50 40       	sbci	r21, 0x00	; 0
     6e0:	80 40       	sbci	r24, 0x00	; 0
     6e2:	e1 f7       	brne	.-8      	; 0x6dc <JOY_calibrate+0x178>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <JOY_calibrate+0x182>
     6e6:	00 00       	nop
     6e8:	80 91 0a 01 	lds	r24, 0x010A
     6ec:	90 91 0b 01 	lds	r25, 0x010B
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     6f0:	50 d5       	rcall	.+2720   	; 0x1192 <ADC_read>
     6f2:	90 91 0e 01 	lds	r25, 0x010E
     6f6:	89 17       	cp	r24, r25
     6f8:	10 f4       	brcc	.+4      	; 0x6fe <JOY_calibrate+0x19a>
     6fa:	80 93 0e 01 	sts	0x010E, r24
     6fe:	21 97       	sbiw	r28, 0x01	; 1
     700:	20 97       	sbiw	r28, 0x00	; 0
     702:	19 f7       	brne	.-58     	; 0x6ca <JOY_calibrate+0x166>
     704:	30 91 0e 01 	lds	r19, 0x010E
     708:	20 91 0f 01 	lds	r18, 0x010F
     70c:	90 91 10 01 	lds	r25, 0x0110
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     710:	80 91 11 01 	lds	r24, 0x0111
     714:	1f 92       	push	r1
     716:	3f 93       	push	r19
     718:	1f 92       	push	r1
		
		if(temp < calDown) {calDown = temp;}
     71a:	2f 93       	push	r18
     71c:	1f 92       	push	r1
     71e:	9f 93       	push	r25
     720:	1f 92       	push	r1
     722:	8f 93       	push	r24
     724:	8b e0       	ldi	r24, 0x0B	; 11
     726:	92 e0       	ldi	r25, 0x02	; 2
	OLED_goto(3,0);
	OLED_printString("JOY DOWN");
	printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
		
		if(temp < calDown) {calDown = temp;}
	}
	
	
	printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
     72c:	23 d7       	rcall	.+3654   	; 0x1574 <printf>
     72e:	20 91 0f 01 	lds	r18, 0x010F
     732:	80 91 0e 01 	lds	r24, 0x010E
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	28 1b       	sub	r18, r24
     73a:	31 09       	sbc	r19, r1
     73c:	c9 01       	movw	r24, r18
     73e:	4d b7       	in	r20, 0x3d	; 61
     740:	5e b7       	in	r21, 0x3e	; 62
     742:	46 5f       	subi	r20, 0xF6	; 246
     744:	5f 4f       	sbci	r21, 0xFF	; 255
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	f8 94       	cli
     74a:	5e bf       	out	0x3e, r21	; 62
     74c:	0f be       	out	0x3f, r0	; 63
     74e:	4d bf       	out	0x3d, r20	; 61
     750:	99 23       	and	r25, r25
     752:	0c f4       	brge	.+2      	; 0x756 <JOY_calibrate+0x1f2>
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	95 95       	asr	r25
	
	meanVert = (calUp - calDown)/2;
     758:	87 95       	ror	r24
     75a:	80 93 0d 01 	sts	0x010D, r24
     75e:	20 91 11 01 	lds	r18, 0x0111
     762:	80 91 10 01 	lds	r24, 0x0110
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	28 1b       	sub	r18, r24
     76a:	31 09       	sbc	r19, r1
     76c:	c9 01       	movw	r24, r18
     76e:	99 23       	and	r25, r25
     770:	0c f4       	brge	.+2      	; 0x774 <JOY_calibrate+0x210>
     772:	01 96       	adiw	r24, 0x01	; 1
     774:	95 95       	asr	r25
     776:	87 95       	ror	r24
     778:	80 93 0c 01 	sts	0x010C, r24
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	84 e0       	ldi	r24, 0x04	; 4
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	f4 d2       	rcall	.+1512   	; 0xd6e <OLED_goto>
     786:	85 e3       	ldi	r24, 0x35	; 53
	meanHor = (calR - calL)/2;
     788:	92 e0       	ldi	r25, 0x02	; 2
     78a:	47 d3       	rcall	.+1678   	; 0xe1a <OLED_printString>
     78c:	90 91 0c 01 	lds	r25, 0x010C
     790:	80 91 0d 01 	lds	r24, 0x010D
     794:	1f 92       	push	r1
     796:	9f 93       	push	r25
     798:	1f 92       	push	r1
     79a:	8f 93       	push	r24
     79c:	80 e4       	ldi	r24, 0x40	; 64
     79e:	92 e0       	ldi	r25, 0x02	; 2
     7a0:	9f 93       	push	r25
     7a2:	8f 93       	push	r24
     7a4:	e7 d6       	rcall	.+3534   	; 0x1574 <printf>
	
	OLED_goto(4,0);
     7a6:	5f ef       	ldi	r21, 0xFF	; 255
     7a8:	8f ef       	ldi	r24, 0xFF	; 255
     7aa:	9e e0       	ldi	r25, 0x0E	; 14
     7ac:	51 50       	subi	r21, 0x01	; 1
     7ae:	80 40       	sbci	r24, 0x00	; 0
     7b0:	90 40       	sbci	r25, 0x00	; 0
	OLED_printString("CALIB DONE");
     7b2:	e1 f7       	brne	.-8      	; 0x7ac <JOY_calibrate+0x248>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <JOY_calibrate+0x252>
     7b6:	00 00       	nop
     7b8:	0f 90       	pop	r0
	printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
     7ba:	0f 90       	pop	r0
     7bc:	0f 90       	pop	r0
     7be:	0f 90       	pop	r0
     7c0:	0f 90       	pop	r0
     7c2:	0f 90       	pop	r0
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	08 95       	ret

000007ca <JOY_requestCurrentPosition>:
     7ca:	88 37       	cpi	r24, 0x78	; 120
     7cc:	39 f4       	brne	.+14     	; 0x7dc <JOY_requestCurrentPosition+0x12>
     7ce:	60 91 0a 01 	lds	r22, 0x010A
     7d2:	70 91 0b 01 	lds	r23, 0x010B
     7d6:	82 e0       	ldi	r24, 0x02	; 2
     7d8:	b8 c4       	rjmp	.+2416   	; 0x114a <ADC_request>
     7da:	08 95       	ret
     7dc:	89 37       	cpi	r24, 0x79	; 121
     7de:	31 f4       	brne	.+12     	; 0x7ec <JOY_requestCurrentPosition+0x22>
     7e0:	60 91 0a 01 	lds	r22, 0x010A
     7e4:	70 91 0b 01 	lds	r23, 0x010B
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	af c4       	rjmp	.+2398   	; 0x114a <ADC_request>
     7ec:	08 95       	ret

000007ee <JOY_updatePosition>:
     7ee:	88 37       	cpi	r24, 0x78	; 120
     7f0:	f9 f4       	brne	.+62     	; 0x830 <JOY_updatePosition+0x42>
     7f2:	80 91 0a 01 	lds	r24, 0x010A
	_delay_ms(1000);
}
     7f6:	90 91 0b 01 	lds	r25, 0x010B
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     7fa:	cb d4       	rcall	.+2454   	; 0x1192 <ADC_read>
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	90 93 3d 03 	sts	0x033D, r25
     802:	80 93 3c 03 	sts	0x033C, r24
     806:	20 91 0c 01 	lds	r18, 0x010C
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     80a:	60 91 0c 01 	lds	r22, 0x010C
     80e:	ac 01       	movw	r20, r24
     810:	42 1b       	sub	r20, r18
     812:	51 09       	sbc	r21, r1
     814:	9a 01       	movw	r18, r20
     816:	44 e6       	ldi	r20, 0x64	; 100
     818:	42 9f       	mul	r20, r18
     81a:	c0 01       	movw	r24, r0
     81c:	43 9f       	mul	r20, r19
     81e:	90 0d       	add	r25, r0
     820:	11 24       	eor	r1, r1
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	b8 d4       	rcall	.+2416   	; 0x1196 <__divmodhi4>
     826:	70 93 41 03 	sts	0x0341, r23
     82a:	60 93 40 03 	sts	0x0340, r22
     82e:	08 95       	ret
     830:	89 37       	cpi	r24, 0x79	; 121
     832:	f1 f4       	brne	.+60     	; 0x870 <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     834:	80 91 0a 01 	lds	r24, 0x010A
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     838:	90 91 0b 01 	lds	r25, 0x010B
     83c:	aa d4       	rcall	.+2388   	; 0x1192 <ADC_read>
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	90 93 3f 03 	sts	0x033F, r25
     844:	80 93 3e 03 	sts	0x033E, r24
     848:	20 91 0d 01 	lds	r18, 0x010D
     84c:	60 91 0d 01 	lds	r22, 0x010D
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     850:	ac 01       	movw	r20, r24
     852:	42 1b       	sub	r20, r18
     854:	51 09       	sbc	r21, r1
     856:	9a 01       	movw	r18, r20
     858:	44 e6       	ldi	r20, 0x64	; 100
     85a:	42 9f       	mul	r20, r18
     85c:	c0 01       	movw	r24, r0
     85e:	43 9f       	mul	r20, r19
     860:	90 0d       	add	r25, r0
     862:	11 24       	eor	r1, r1
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	97 d4       	rcall	.+2350   	; 0x1196 <__divmodhi4>
     868:	70 93 43 03 	sts	0x0343, r23
     86c:	60 93 42 03 	sts	0x0342, r22
     870:	08 95       	ret

00000872 <JOY_calculateDirection>:
     872:	80 91 40 03 	lds	r24, 0x0340
     876:	90 91 41 03 	lds	r25, 0x0341
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     87a:	8b 35       	cpi	r24, 0x5B	; 91
     87c:	91 05       	cpc	r25, r1
     87e:	24 f0       	brlt	.+8      	; 0x888 <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     880:	83 e0       	ldi	r24, 0x03	; 3
     882:	80 93 3b 03 	sts	0x033B, r24
     886:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     888:	86 3a       	cpi	r24, 0xA6	; 166
     88a:	9f 4f       	sbci	r25, 0xFF	; 255
     88c:	24 f4       	brge	.+8      	; 0x896 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     88e:	84 e0       	ldi	r24, 0x04	; 4
     890:	80 93 3b 03 	sts	0x033B, r24
     894:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     896:	80 91 42 03 	lds	r24, 0x0342
     89a:	90 91 43 03 	lds	r25, 0x0343
     89e:	8b 35       	cpi	r24, 0x5B	; 91
     8a0:	91 05       	cpc	r25, r1
     8a2:	24 f0       	brlt	.+8      	; 0x8ac <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	80 93 3b 03 	sts	0x033B, r24
     8aa:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     8ac:	86 3a       	cpi	r24, 0xA6	; 166
     8ae:	9f 4f       	sbci	r25, 0xFF	; 255
     8b0:	24 f4       	brge	.+8      	; 0x8ba <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     8b2:	82 e0       	ldi	r24, 0x02	; 2
     8b4:	80 93 3b 03 	sts	0x033B, r24
     8b8:	08 95       	ret
	else{currentDirection = CENTRE;}
     8ba:	10 92 3b 03 	sts	0x033B, r1
     8be:	08 95       	ret

000008c0 <JOY_getDirection>:
// Before the value is returned, the values of position in x and y direction are 
// requested from the ADC and written to the currentPosition and 
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
     8c0:	88 e7       	ldi	r24, 0x78	; 120
     8c2:	83 df       	rcall	.-250    	; 0x7ca <JOY_requestCurrentPosition>
     8c4:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8c6:	8a 95       	dec	r24
     8c8:	f1 f7       	brne	.-4      	; 0x8c6 <JOY_getDirection+0x6>
     8ca:	00 00       	nop
     8cc:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     8ce:	8f df       	rcall	.-226    	; 0x7ee <JOY_updatePosition>
     8d0:	89 e7       	ldi	r24, 0x79	; 121
     8d2:	7b df       	rcall	.-266    	; 0x7ca <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     8d4:	82 e6       	ldi	r24, 0x62	; 98
     8d6:	8a 95       	dec	r24
     8d8:	f1 f7       	brne	.-4      	; 0x8d6 <JOY_getDirection+0x16>
     8da:	00 00       	nop
     8dc:	89 e7       	ldi	r24, 0x79	; 121
     8de:	87 df       	rcall	.-242    	; 0x7ee <JOY_updatePosition>
     8e0:	c8 df       	rcall	.-112    	; 0x872 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     8e2:	80 91 3b 03 	lds	r24, 0x033B
     8e6:	08 95       	ret

000008e8 <startGame>:

int menuFrameOffset = 10; //Columns from left frame border
//******************************************************************************************

void startGame()
{
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
	OLED_clear();
     8ec:	5d d2       	rcall	.+1210   	; 0xda8 <OLED_clear>
     8ee:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     8f0:	70 e0       	ldi	r23, 0x00	; 0
     8f2:	80 e0       	ldi	r24, 0x00	; 0
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	3b d2       	rcall	.+1142   	; 0xd6e <OLED_goto>
     8f8:	85 e6       	ldi	r24, 0x65	; 101
     8fa:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("START");
     8fc:	8e d2       	rcall	.+1308   	; 0xe1a <OLED_printString>
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_goto(3,0);
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	33 d2       	rcall	.+1126   	; 0xd6e <OLED_goto>
     908:	ce e0       	ldi	r28, 0x0E	; 14
     90a:	d0 e0       	ldi	r29, 0x00	; 0
     90c:	8b e6       	ldi	r24, 0x6B	; 107
     90e:	92 e0       	ldi	r25, 0x02	; 2
     910:	84 d2       	rcall	.+1288   	; 0xe1a <OLED_printString>
     912:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     914:	8f e7       	ldi	r24, 0x7F	; 127
     916:	97 e0       	ldi	r25, 0x07	; 7
     918:	21 50       	subi	r18, 0x01	; 1
     91a:	80 40       	sbci	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     91c:	90 40       	sbci	r25, 0x00	; 0
     91e:	e1 f7       	brne	.-8      	; 0x918 <startGame+0x30>
     920:	00 c0       	rjmp	.+0      	; 0x922 <startGame+0x3a>
     922:	00 00       	nop
     924:	21 97       	sbiw	r28, 0x01	; 1
     926:	20 97       	sbiw	r28, 0x00	; 0
     928:	89 f7       	brne	.-30     	; 0x90c <startGame+0x24>
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	85 e0       	ldi	r24, 0x05	; 5
	OLED_goto(0,0);
	OLED_printString("START");
	
	OLED_goto(3,0);
	
	for(int i = 14; i > 0; i--)
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	1d d2       	rcall	.+1082   	; 0xd6e <OLED_goto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_goto(5,0);
     934:	8d e6       	ldi	r24, 0x6D	; 109
     936:	92 e0       	ldi	r25, 0x02	; 2
     938:	70 d2       	rcall	.+1248   	; 0xe1a <OLED_printString>
     93a:	2f ef       	ldi	r18, 0xFF	; 255
     93c:	8f ef       	ldi	r24, 0xFF	; 255
     93e:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     940:	21 50       	subi	r18, 0x01	; 1
     942:	80 40       	sbci	r24, 0x00	; 0
     944:	90 40       	sbci	r25, 0x00	; 0
     946:	e1 f7       	brne	.-8      	; 0x940 <startGame+0x58>
     948:	00 c0       	rjmp	.+0      	; 0x94a <startGame+0x62>
     94a:	00 c0       	rjmp	.+0      	; 0x94c <startGame+0x64>
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	08 95       	ret

00000952 <MENU_addMenuItem>:
     952:	cf 92       	push	r12
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
	_delay_ms(3000);
}
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     960:	df 93       	push	r29
     962:	8c 01       	movw	r16, r24
     964:	7b 01       	movw	r14, r22
     966:	6a 01       	movw	r12, r20
     968:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     96a:	80 91 47 03 	lds	r24, 0x0347
     96e:	90 91 48 03 	lds	r25, 0x0348
     972:	89 2b       	or	r24, r25
     974:	19 f0       	breq	.+6      	; 0x97c <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     976:	86 e7       	ldi	r24, 0x76	; 118
     978:	92 e0       	ldi	r25, 0x02	; 2
     97a:	0d d6       	rcall	.+3098   	; 0x1596 <puts>
     97c:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	31 d4       	rcall	.+2146   	; 0x11e4 <malloc>
     982:	fc 01       	movw	r30, r24
     984:	90 93 48 03 	sts	0x0348, r25
     988:	80 93 47 03 	sts	0x0347, r24
     98c:	f3 82       	std	Z+3, r15	; 0x03
     98e:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     990:	11 83       	std	Z+1, r17	; 0x01
     992:	00 83       	st	Z, r16
	currItem->name = name;
     994:	cd 2b       	or	r28, r29
     996:	39 f0       	breq	.+14     	; 0x9a6 <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     998:	d5 82       	std	Z+5, r13	; 0x05
     99a:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     9a0:	97 83       	std	Z+7, r25	; 0x07
     9a2:	86 83       	std	Z+6, r24	; 0x06
     9a4:	04 c0       	rjmp	.+8      	; 0x9ae <MENU_addMenuItem+0x5c>
     9a6:	15 82       	std	Z+5, r1	; 0x05
     9a8:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     9aa:	17 82       	std	Z+7, r1	; 0x07
     9ac:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     9ae:	df 91       	pop	r29
     9b0:	cf 91       	pop	r28
	}
}
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	ff 90       	pop	r15
     9b8:	ef 90       	pop	r14
     9ba:	df 90       	pop	r13
     9bc:	cf 90       	pop	r12
     9be:	08 95       	ret

000009c0 <MENU_buildMenus>:
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     9c4:	86 e1       	ldi	r24, 0x16	; 22
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0d d4       	rcall	.+2074   	; 0x11e4 <malloc>
     9ca:	ec 01       	movw	r28, r24
     9cc:	90 93 4e 03 	sts	0x034E, r25
     9d0:	80 93 4d 03 	sts	0x034D, r24
     9d4:	8c e8       	ldi	r24, 0x8C	; 140
	mainMenu->menuName = "MainMenu";
     9d6:	92 e0       	ldi	r25, 0x02	; 2
     9d8:	99 83       	std	Y+1, r25	; 0x01
     9da:	88 83       	st	Y, r24
     9dc:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     9de:	1c 8a       	std	Y+20, r1	; 0x14
     9e0:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	9b 83       	std	Y+3, r25	; 0x03
     9e6:	8a 83       	std	Y+2, r24	; 0x02
     9e8:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	fb d3       	rcall	.+2038   	; 0x11e4 <malloc>
     9ee:	fc 01       	movw	r30, r24
     9f0:	90 93 4c 03 	sts	0x034C, r25
     9f4:	80 93 4b 03 	sts	0x034B, r24
     9f8:	85 e9       	ldi	r24, 0x95	; 149
     9fa:	92 e0       	ldi	r25, 0x02	; 2
	difficultyMenu->menuName = "DifficultyMenu";
     9fc:	91 83       	std	Z+1, r25	; 0x01
     9fe:	80 83       	st	Z, r24
     a00:	d5 8b       	std	Z+21, r29	; 0x15
     a02:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     a08:	93 83       	std	Z+3, r25	; 0x03
     a0a:	82 83       	std	Z+2, r24	; 0x02
     a0c:	20 e0       	ldi	r18, 0x00	; 0
     a0e:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	be 01       	movw	r22, r28
     a16:	84 ea       	ldi	r24, 0xA4	; 164
     a18:	92 e0       	ldi	r25, 0x02	; 2
     a1a:	9b df       	rcall	.-202    	; 0x952 <MENU_addMenuItem>
     a1c:	60 91 4d 03 	lds	r22, 0x034D
     a20:	70 91 4e 03 	lds	r23, 0x034E
	mainMenu->children[0] = currItem;
     a24:	e0 91 47 03 	lds	r30, 0x0347
     a28:	f0 91 48 03 	lds	r31, 0x0348
     a2c:	db 01       	movw	r26, r22
     a2e:	15 96       	adiw	r26, 0x05	; 5
     a30:	fc 93       	st	X, r31
     a32:	ee 93       	st	-X, r30
     a34:	14 97       	sbiw	r26, 0x04	; 4
     a36:	84 e7       	ldi	r24, 0x74	; 116
     a38:	94 e0       	ldi	r25, 0x04	; 4
     a3a:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
     a3c:	82 87       	std	Z+10, r24	; 0x0a
     a3e:	40 91 4b 03 	lds	r20, 0x034B
     a42:	50 91 4c 03 	lds	r21, 0x034C
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     a46:	21 e0       	ldi	r18, 0x01	; 1
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	8d ea       	ldi	r24, 0xAD	; 173
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	81 df       	rcall	.-254    	; 0x952 <MENU_addMenuItem>
     a50:	60 91 4d 03 	lds	r22, 0x034D
     a54:	70 91 4e 03 	lds	r23, 0x034E
	mainMenu->children[1] = currItem;
     a58:	80 91 47 03 	lds	r24, 0x0347
     a5c:	90 91 48 03 	lds	r25, 0x0348
     a60:	fb 01       	movw	r30, r22
     a62:	97 83       	std	Z+7, r25	; 0x07
     a64:	86 83       	std	Z+6, r24	; 0x06
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	40 e0       	ldi	r20, 0x00	; 0
     a6c:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     a6e:	88 eb       	ldi	r24, 0xB8	; 184
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	6f df       	rcall	.-290    	; 0x952 <MENU_addMenuItem>
     a74:	60 91 4d 03 	lds	r22, 0x034D
     a78:	70 91 4e 03 	lds	r23, 0x034E
     a7c:	80 91 47 03 	lds	r24, 0x0347
	mainMenu->children[2] = currItem;
     a80:	90 91 48 03 	lds	r25, 0x0348
     a84:	db 01       	movw	r26, r22
     a86:	19 96       	adiw	r26, 0x09	; 9
     a88:	9c 93       	st	X, r25
     a8a:	8e 93       	st	-X, r24
     a8c:	18 97       	sbiw	r26, 0x08	; 8
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	50 e0       	ldi	r21, 0x00	; 0
     a96:	83 ec       	ldi	r24, 0xC3	; 195
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	5b df       	rcall	.-330    	; 0x952 <MENU_addMenuItem>
     a9c:	60 91 4d 03 	lds	r22, 0x034D
     aa0:	70 91 4e 03 	lds	r23, 0x034E
     aa4:	e0 91 47 03 	lds	r30, 0x0347
	mainMenu->children[3] = currItem;
     aa8:	f0 91 48 03 	lds	r31, 0x0348
     aac:	db 01       	movw	r26, r22
     aae:	1b 96       	adiw	r26, 0x0b	; 11
     ab0:	fc 93       	st	X, r31
     ab2:	ee 93       	st	-X, r30
     ab4:	1a 97       	sbiw	r26, 0x0a	; 10
     ab6:	82 eb       	ldi	r24, 0xB2	; 178
     ab8:	92 e0       	ldi	r25, 0x02	; 2
     aba:	93 87       	std	Z+11, r25	; 0x0b
     abc:	82 87       	std	Z+10, r24	; 0x0a
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
     ac2:	40 e0       	ldi	r20, 0x00	; 0
     ac4:	50 e0       	ldi	r21, 0x00	; 0
     ac6:	8d ec       	ldi	r24, 0xCD	; 205
     ac8:	92 e0       	ldi	r25, 0x02	; 2
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
     aca:	43 df       	rcall	.-378    	; 0x952 <MENU_addMenuItem>
     acc:	e0 91 4d 03 	lds	r30, 0x034D
     ad0:	f0 91 4e 03 	lds	r31, 0x034E
     ad4:	80 91 47 03 	lds	r24, 0x0347
     ad8:	90 91 48 03 	lds	r25, 0x0348
	mainMenu->children[4] = currItem;
     adc:	95 87       	std	Z+13, r25	; 0x0d
     ade:	84 87       	std	Z+12, r24	; 0x0c
     ae0:	10 92 48 03 	sts	0x0348, r1
     ae4:	10 92 47 03 	sts	0x0347, r1
     ae8:	60 91 4b 03 	lds	r22, 0x034B
     aec:	70 91 4c 03 	lds	r23, 0x034C
	
	currItem = NULL;
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
     af6:	50 e0       	ldi	r21, 0x00	; 0
     af8:	82 ed       	ldi	r24, 0xD2	; 210
     afa:	92 e0       	ldi	r25, 0x02	; 2
     afc:	2a df       	rcall	.-428    	; 0x952 <MENU_addMenuItem>
     afe:	60 91 4b 03 	lds	r22, 0x034B
     b02:	70 91 4c 03 	lds	r23, 0x034C
     b06:	80 91 47 03 	lds	r24, 0x0347
     b0a:	90 91 48 03 	lds	r25, 0x0348
	difficultyMenu->children[0] = currItem;
     b0e:	fb 01       	movw	r30, r22
     b10:	95 83       	std	Z+5, r25	; 0x05
     b12:	84 83       	std	Z+4, r24	; 0x04
     b14:	20 e0       	ldi	r18, 0x00	; 0
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	40 e0       	ldi	r20, 0x00	; 0
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	87 ed       	ldi	r24, 0xD7	; 215
     b1e:	92 e0       	ldi	r25, 0x02	; 2
     b20:	18 df       	rcall	.-464    	; 0x952 <MENU_addMenuItem>
     b22:	60 91 4b 03 	lds	r22, 0x034B
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
     b26:	70 91 4c 03 	lds	r23, 0x034C
     b2a:	80 91 47 03 	lds	r24, 0x0347
     b2e:	90 91 48 03 	lds	r25, 0x0348
     b32:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
     b34:	17 96       	adiw	r26, 0x07	; 7
     b36:	9c 93       	st	X, r25
     b38:	8e 93       	st	-X, r24
     b3a:	16 97       	sbiw	r26, 0x06	; 6
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	50 e0       	ldi	r21, 0x00	; 0
     b44:	8e ed       	ldi	r24, 0xDE	; 222
     b46:	92 e0       	ldi	r25, 0x02	; 2
     b48:	04 df       	rcall	.-504    	; 0x952 <MENU_addMenuItem>
     b4a:	e0 91 4b 03 	lds	r30, 0x034B
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
     b4e:	f0 91 4c 03 	lds	r31, 0x034C
     b52:	80 91 47 03 	lds	r24, 0x0347
     b56:	90 91 48 03 	lds	r25, 0x0348
     b5a:	91 87       	std	Z+9, r25	; 0x09
     b5c:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	08 95       	ret

00000b64 <MENU_printMenuItem>:
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	ec 01       	movw	r28, r24
     b6a:	cb 01       	movw	r24, r22
     b6c:	20 97       	sbiw	r28, 0x00	; 0
     b6e:	49 f0       	breq	.+18     	; 0xb82 <MENU_printMenuItem+0x1e>
     b70:	60 91 12 01 	lds	r22, 0x0112
}
     b74:	70 91 13 01 	lds	r23, 0x0113

void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
     b78:	fa d0       	rcall	.+500    	; 0xd6e <OLED_goto>
     b7a:	88 81       	ld	r24, Y
		OLED_printString(item->name);
     b7c:	99 81       	ldd	r25, Y+1	; 0x01
     b7e:	4d d1       	rcall	.+666    	; 0xe1a <OLED_printString>
     b80:	07 c0       	rjmp	.+14     	; 0xb90 <MENU_printMenuItem+0x2c>
     b82:	83 ee       	ldi	r24, 0xE3	; 227
     b84:	92 e0       	ldi	r25, 0x02	; 2
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
     b86:	9f 93       	push	r25
     b88:	8f 93       	push	r24
     b8a:	f4 d4       	rcall	.+2536   	; 0x1574 <printf>
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	08 95       	ret

00000b96 <MENU_printMenu>:
	}
}
     b96:	cf 92       	push	r12
     b98:	df 92       	push	r13
     b9a:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
     b9c:	ff 92       	push	r15
     b9e:	0f 93       	push	r16
     ba0:	1f 93       	push	r17
     ba2:	cf 93       	push	r28
     ba4:	df 93       	push	r29
     ba6:	6c 01       	movw	r12, r24
     ba8:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
     baa:	fe d0       	rcall	.+508    	; 0xda8 <OLED_clear>
     bac:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	8b d1       	rcall	.+790    	; 0xec8 <OLED_moveArrow>
     bb2:	1e 14       	cp	r1, r14
     bb4:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
     bb6:	7c f4       	brge	.+30     	; 0xbd6 <MENU_printMenu+0x40>
     bb8:	86 01       	movw	r16, r12
     bba:	0c 5f       	subi	r16, 0xFC	; 252
     bbc:	1f 4f       	sbci	r17, 0xFF	; 255
     bbe:	c0 e0       	ldi	r28, 0x00	; 0
     bc0:	d0 e0       	ldi	r29, 0x00	; 0
     bc2:	be 01       	movw	r22, r28
     bc4:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
     bc6:	81 91       	ld	r24, Z+
     bc8:	91 91       	ld	r25, Z+
     bca:	8f 01       	movw	r16, r30
     bcc:	cb df       	rcall	.-106    	; 0xb64 <MENU_printMenuItem>
     bce:	21 96       	adiw	r28, 0x01	; 1
     bd0:	ce 15       	cp	r28, r14
     bd2:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
     bd4:	b1 f7       	brne	.-20     	; 0xbc2 <MENU_printMenu+0x2c>
     bd6:	d0 92 4a 03 	sts	0x034A, r13
     bda:	c0 92 49 03 	sts	0x0349, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
     bde:	10 92 45 03 	sts	0x0345, r1
     be2:	10 92 44 03 	sts	0x0344, r1
	
	currentPosition = 0;
     be6:	f6 01       	movw	r30, r12
     be8:	84 81       	ldd	r24, Z+4	; 0x04
     bea:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
     bec:	90 93 48 03 	sts	0x0348, r25
     bf0:	80 93 47 03 	sts	0x0347, r24
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	1f 91       	pop	r17
}
     bfa:	0f 91       	pop	r16
     bfc:	ff 90       	pop	r15
     bfe:	ef 90       	pop	r14
     c00:	df 90       	pop	r13
     c02:	cf 90       	pop	r12
     c04:	08 95       	ret

00000c06 <MENU_moveUp>:
     c06:	20 91 44 03 	lds	r18, 0x0344
     c0a:	30 91 45 03 	lds	r19, 0x0345
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
     c0e:	12 16       	cp	r1, r18
     c10:	13 06       	cpc	r1, r19
     c12:	bc f4       	brge	.+46     	; 0xc42 <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
     c14:	c9 01       	movw	r24, r18
     c16:	01 97       	sbiw	r24, 0x01	; 1
     c18:	90 93 45 03 	sts	0x0345, r25
     c1c:	80 93 44 03 	sts	0x0344, r24
		currItem = currentMenu->children[currentPosition];
     c20:	e0 91 49 03 	lds	r30, 0x0349
     c24:	f0 91 4a 03 	lds	r31, 0x034A
     c28:	2f 5f       	subi	r18, 0xFF	; 255
     c2a:	3f 4f       	sbci	r19, 0xFF	; 255
     c2c:	22 0f       	add	r18, r18
     c2e:	33 1f       	adc	r19, r19
     c30:	e2 0f       	add	r30, r18
     c32:	f3 1f       	adc	r31, r19
     c34:	20 81       	ld	r18, Z
     c36:	31 81       	ldd	r19, Z+1	; 0x01
     c38:	30 93 48 03 	sts	0x0348, r19
     c3c:	20 93 47 03 	sts	0x0347, r18
		OLED_moveArrow(currentPosition);
     c40:	43 c1       	rjmp	.+646    	; 0xec8 <OLED_moveArrow>
     c42:	08 95       	ret

00000c44 <MENU_moveDown>:
     c44:	e0 91 49 03 	lds	r30, 0x0349
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
     c48:	f0 91 4a 03 	lds	r31, 0x034A
     c4c:	20 91 44 03 	lds	r18, 0x0344
     c50:	30 91 45 03 	lds	r19, 0x0345
     c54:	82 81       	ldd	r24, Z+2	; 0x02
     c56:	93 81       	ldd	r25, Z+3	; 0x03
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	a4 f4       	brge	.+40     	; 0xc88 <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
     c60:	c9 01       	movw	r24, r18
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	90 93 45 03 	sts	0x0345, r25
     c68:	80 93 44 03 	sts	0x0344, r24
		currItem = currentMenu->children[currentPosition];
     c6c:	2d 5f       	subi	r18, 0xFD	; 253
     c6e:	3f 4f       	sbci	r19, 0xFF	; 255
     c70:	22 0f       	add	r18, r18
     c72:	33 1f       	adc	r19, r19
     c74:	e2 0f       	add	r30, r18
     c76:	f3 1f       	adc	r31, r19
     c78:	20 81       	ld	r18, Z
     c7a:	31 81       	ldd	r19, Z+1	; 0x01
     c7c:	30 93 48 03 	sts	0x0348, r19
     c80:	20 93 47 03 	sts	0x0347, r18
		OLED_moveArrow(currentPosition);
     c84:	21 c1       	rjmp	.+578    	; 0xec8 <OLED_moveArrow>
     c86:	08 95       	ret
     c88:	10 92 45 03 	sts	0x0345, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
     c8c:	10 92 44 03 	sts	0x0344, r1
     c90:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
     c92:	95 81       	ldd	r25, Z+5	; 0x05
     c94:	90 93 48 03 	sts	0x0348, r25
     c98:	80 93 47 03 	sts	0x0347, r24
     c9c:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	13 c1       	rjmp	.+550    	; 0xec8 <OLED_moveArrow>
     ca2:	08 95       	ret

00000ca4 <MENU_moveLeft>:
     ca4:	e0 91 49 03 	lds	r30, 0x0349
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
     ca8:	f0 91 4a 03 	lds	r31, 0x034A
     cac:	84 89       	ldd	r24, Z+20	; 0x14
     cae:	95 89       	ldd	r25, Z+21	; 0x15
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	21 f0       	breq	.+8      	; 0xcbc <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
     cb4:	fc 01       	movw	r30, r24
     cb6:	62 81       	ldd	r22, Z+2	; 0x02
     cb8:	73 81       	ldd	r23, Z+3	; 0x03
     cba:	6d cf       	rjmp	.-294    	; 0xb96 <MENU_printMenu>
     cbc:	08 95       	ret

00000cbe <MENU_reactivate>:
     cbe:	80 91 49 03 	lds	r24, 0x0349
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
     cc2:	90 91 4a 03 	lds	r25, 0x034A
     cc6:	fc 01       	movw	r30, r24
     cc8:	62 81       	ldd	r22, Z+2	; 0x02
     cca:	73 81       	ldd	r23, Z+3	; 0x03
     ccc:	64 df       	rcall	.-312    	; 0xb96 <MENU_printMenu>
     cce:	18 c0       	rjmp	.+48     	; 0xd00 <MENU_waitForInput>
	MENU_waitForInput();
     cd0:	08 95       	ret

00000cd2 <MENU_moveRight>:
     cd2:	e0 91 47 03 	lds	r30, 0x0347
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
     cd6:	f0 91 48 03 	lds	r31, 0x0348
     cda:	86 81       	ldd	r24, Z+6	; 0x06
     cdc:	97 81       	ldd	r25, Z+7	; 0x07
     cde:	89 2b       	or	r24, r25
     ce0:	39 f0       	breq	.+14     	; 0xcf0 <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
     ce2:	84 81       	ldd	r24, Z+4	; 0x04
     ce4:	95 81       	ldd	r25, Z+5	; 0x05
     ce6:	fc 01       	movw	r30, r24
     ce8:	62 81       	ldd	r22, Z+2	; 0x02
     cea:	73 81       	ldd	r23, Z+3	; 0x03
     cec:	54 cf       	rjmp	.-344    	; 0xb96 <MENU_printMenu>
     cee:	08 95       	ret
     cf0:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
     cf2:	f3 85       	ldd	r31, Z+11	; 0x0b
     cf4:	e0 2d       	mov	r30, r0
     cf6:	30 97       	sbiw	r30, 0x00	; 0
     cf8:	11 f0       	breq	.+4      	; 0xcfe <MENU_moveRight+0x2c>
     cfa:	09 95       	icall
	{
		currItem->functionPtr();
     cfc:	e0 cf       	rjmp	.-64     	; 0xcbe <MENU_reactivate>
		MENU_reactivate();
     cfe:	08 95       	ret

00000d00 <MENU_waitForInput>:
     d00:	80 91 44 03 	lds	r24, 0x0344
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
     d04:	90 91 45 03 	lds	r25, 0x0345
     d08:	df d0       	rcall	.+446    	; 0xec8 <OLED_moveArrow>
     d0a:	80 91 46 03 	lds	r24, 0x0346
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
     d0e:	88 23       	and	r24, r24
     d10:	f9 f0       	breq	.+62     	; 0xd50 <MENU_waitForInput+0x50>
     d12:	d6 dd       	rcall	.-1108   	; 0x8c0 <JOY_getDirection>
	{
		currDir = JOY_getDirection();
     d14:	82 30       	cpi	r24, 0x02	; 2
     d16:	71 f0       	breq	.+28     	; 0xd34 <MENU_waitForInput+0x34>
		switch(currDir){
     d18:	18 f4       	brcc	.+6      	; 0xd20 <MENU_waitForInput+0x20>
     d1a:	81 30       	cpi	r24, 0x01	; 1
     d1c:	49 f0       	breq	.+18     	; 0xd30 <MENU_waitForInput+0x30>
     d1e:	0b c0       	rjmp	.+22     	; 0xd36 <MENU_waitForInput+0x36>
     d20:	83 30       	cpi	r24, 0x03	; 3
     d22:	21 f0       	breq	.+8      	; 0xd2c <MENU_waitForInput+0x2c>
     d24:	84 30       	cpi	r24, 0x04	; 4
     d26:	39 f4       	brne	.+14     	; 0xd36 <MENU_waitForInput+0x36>
     d28:	bd df       	rcall	.-134    	; 0xca4 <MENU_moveLeft>
     d2a:	05 c0       	rjmp	.+10     	; 0xd36 <MENU_waitForInput+0x36>
			case LEFT:
			MENU_moveLeft();
     d2c:	d2 df       	rcall	.-92     	; 0xcd2 <MENU_moveRight>
     d2e:	03 c0       	rjmp	.+6      	; 0xd36 <MENU_waitForInput+0x36>
			break;
     d30:	6a df       	rcall	.-300    	; 0xc06 <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
     d32:	01 c0       	rjmp	.+2      	; 0xd36 <MENU_waitForInput+0x36>
     d34:	87 df       	rcall	.-242    	; 0xc44 <MENU_moveDown>
			break;
     d36:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
     d38:	8f e7       	ldi	r24, 0x7F	; 127
     d3a:	94 e0       	ldi	r25, 0x04	; 4
			break;
     d3c:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
     d3e:	80 40       	sbci	r24, 0x00	; 0
     d40:	90 40       	sbci	r25, 0x00	; 0
     d42:	e1 f7       	brne	.-8      	; 0xd3c <MENU_waitForInput+0x3c>
     d44:	00 c0       	rjmp	.+0      	; 0xd46 <MENU_waitForInput+0x46>
     d46:	00 00       	nop
     d48:	80 91 46 03 	lds	r24, 0x0346
     d4c:	81 11       	cpse	r24, r1
     d4e:	e1 cf       	rjmp	.-62     	; 0xd12 <MENU_waitForInput+0x12>
     d50:	08 95       	ret

00000d52 <MENU_activate>:
     d52:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
     d54:	80 93 46 03 	sts	0x0346, r24
     d58:	33 de       	rcall	.-922    	; 0x9c0 <MENU_buildMenus>
     d5a:	80 91 4d 03 	lds	r24, 0x034D
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
     d5e:	90 91 4e 03 	lds	r25, 0x034E
     d62:	fc 01       	movw	r30, r24
     d64:	62 81       	ldd	r22, Z+2	; 0x02
     d66:	73 81       	ldd	r23, Z+3	; 0x03
     d68:	16 df       	rcall	.-468    	; 0xb96 <MENU_printMenu>
     d6a:	ca cf       	rjmp	.-108    	; 0xd00 <MENU_waitForInput>
     d6c:	08 95       	ret

00000d6e <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
     d6e:	26 2f       	mov	r18, r22
     d70:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
     d72:	75 95       	asr	r23
     d74:	67 95       	ror	r22
     d76:	75 95       	asr	r23
     d78:	67 95       	ror	r22
     d7a:	75 95       	asr	r23
     d7c:	67 95       	ror	r22
     d7e:	75 95       	asr	r23
     d80:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
     d82:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
     d84:	80 55       	subi	r24, 0x50	; 80
     d86:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
     d88:	e0 91 16 01 	lds	r30, 0x0116
     d8c:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     d90:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
     d92:	e0 91 16 01 	lds	r30, 0x0116
     d96:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     d9a:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
     d9c:	e0 91 16 01 	lds	r30, 0x0116
     da0:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     da4:	60 83       	st	Z, r22
     da6:	08 95       	ret

00000da8 <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
     da8:	1f 93       	push	r17
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	c1 e0       	ldi	r28, 0x01	; 1
     db0:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
     db6:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	d8 df       	rcall	.-80     	; 0xd6e <OLED_goto>
     dbe:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
     dc0:	e0 91 14 01 	lds	r30, 0x0114
		{
			OLED_writeByteToOLED(oled_data, 0x00);
     dc4:	f0 91 15 01 	lds	r31, 0x0115
     dc8:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     dca:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
     dcc:	80 38       	cpi	r24, 0x80	; 128
     dce:	c1 f7       	brne	.-16     	; 0xdc0 <OLED_clear+0x18>
     dd0:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
     dd2:	9d 2f       	mov	r25, r29
     dd4:	21 96       	adiw	r28, 0x01	; 1
     dd6:	c9 30       	cpi	r28, 0x09	; 9
     dd8:	d1 05       	cpc	r29, r1
     dda:	71 f7       	brne	.-36     	; 0xdb8 <OLED_clear+0x10>
     ddc:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
     dde:	cf 91       	pop	r28
     de0:	1f 91       	pop	r17
     de2:	08 95       	ret

00000de4 <OLED_printCharacter>:
     de4:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	22 0f       	add	r18, r18
     dec:	33 1f       	adc	r19, r19
     dee:	22 0f       	add	r18, r18
     df0:	33 1f       	adc	r19, r19
     df2:	22 0f       	add	r18, r18
     df4:	33 1f       	adc	r19, r19
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	20 59       	subi	r18, 0x90	; 144
     dfc:	3f 4f       	sbci	r19, 0xFF	; 255
     dfe:	f9 01       	movw	r30, r18
     e00:	e8 0f       	add	r30, r24
     e02:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
     e04:	e4 91       	lpm	r30, Z
     e06:	a0 91 14 01 	lds	r26, 0x0114
     e0a:	b0 91 15 01 	lds	r27, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e0e:	ec 93       	st	X, r30
     e10:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
     e12:	88 30       	cpi	r24, 0x08	; 8
     e14:	91 05       	cpc	r25, r1
     e16:	99 f7       	brne	.-26     	; 0xdfe <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
     e18:	08 95       	ret

00000e1a <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
     e1a:	1f 93       	push	r17
     e1c:	cf 93       	push	r28
     e1e:	df 93       	push	r29
     e20:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
     e22:	10 e0       	ldi	r17, 0x00	; 0
     e24:	06 c0       	rjmp	.+12     	; 0xe32 <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
     e26:	fe 01       	movw	r30, r28
     e28:	e8 0f       	add	r30, r24
     e2a:	f9 1f       	adc	r31, r25
     e2c:	80 81       	ld	r24, Z
     e2e:	da df       	rcall	.-76     	; 0xde4 <OLED_printCharacter>
     e30:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
     e32:	81 2f       	mov	r24, r17
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	fe 01       	movw	r30, r28
     e38:	01 90       	ld	r0, Z+
     e3a:	00 20       	and	r0, r0
     e3c:	e9 f7       	brne	.-6      	; 0xe38 <OLED_printString+0x1e>
     e3e:	31 97       	sbiw	r30, 0x01	; 1
     e40:	ec 1b       	sub	r30, r28
     e42:	fd 0b       	sbc	r31, r29
     e44:	8e 17       	cp	r24, r30
     e46:	9f 07       	cpc	r25, r31
     e48:	70 f3       	brcs	.-36     	; 0xe26 <OLED_printString+0xc>
     e4a:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
     e50:	08 95       	ret

00000e52 <OLED_printArrow>:
     e52:	e0 91 14 01 	lds	r30, 0x0114
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
     e56:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e5a:	88 e1       	ldi	r24, 0x18	; 24
     e5c:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
     e5e:	e0 91 14 01 	lds	r30, 0x0114
     e62:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e66:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
     e68:	e0 91 14 01 	lds	r30, 0x0114
     e6c:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e70:	9e e7       	ldi	r25, 0x7E	; 126
     e72:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
     e74:	e0 91 14 01 	lds	r30, 0x0114
     e78:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e7c:	9c e3       	ldi	r25, 0x3C	; 60
     e7e:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
     e80:	e0 91 14 01 	lds	r30, 0x0114
     e84:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e88:	80 83       	st	Z, r24
     e8a:	08 95       	ret

00000e8c <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
     e8c:	1f 93       	push	r17
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	c1 e0       	ldi	r28, 0x01	; 1
     e94:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
     e9a:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
     e9c:	60 e0       	ldi	r22, 0x00	; 0
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	66 df       	rcall	.-308    	; 0xd6e <OLED_goto>
     ea2:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
     ea4:	e0 91 14 01 	lds	r30, 0x0114
		{
			OLED_writeByteToOLED(oled_data, 0x00);
     ea8:	f0 91 15 01 	lds	r31, 0x0115
     eac:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     eae:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
     eb0:	85 30       	cpi	r24, 0x05	; 5
     eb2:	c1 f7       	brne	.-16     	; 0xea4 <OLED_clearArrow+0x18>
     eb4:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
     eb6:	9d 2f       	mov	r25, r29
     eb8:	21 96       	adiw	r28, 0x01	; 1
     eba:	c9 30       	cpi	r28, 0x09	; 9
     ebc:	d1 05       	cpc	r29, r1
     ebe:	71 f7       	brne	.-36     	; 0xe9c <OLED_clearArrow+0x10>
     ec0:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
     ec2:	cf 91       	pop	r28
     ec4:	1f 91       	pop	r17
     ec6:	08 95       	ret

00000ec8 <OLED_moveArrow>:
     ec8:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
     eca:	df 93       	push	r29
     ecc:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
     ece:	de df       	rcall	.-68     	; 0xe8c <OLED_clearArrow>
     ed0:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	ce 01       	movw	r24, r28
     ed6:	4b df       	rcall	.-362    	; 0xd6e <OLED_goto>
     ed8:	bc df       	rcall	.-136    	; 0xe52 <OLED_printArrow>
     eda:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <OLED_setContrast>:
}
     ee0:	e0 91 16 01 	lds	r30, 0x0116
     ee4:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ee8:	91 e8       	ldi	r25, 0x81	; 129
     eea:	90 83       	st	Z, r25
void OLED_setContrast(uint8_t contrast)
{
	// activate contrast contol
	OLED_writeByteToOLED(oled_cmd, 0x81);
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
     eec:	e0 91 16 01 	lds	r30, 0x0116
     ef0:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ef4:	80 83       	st	Z, r24
     ef6:	08 95       	ret

00000ef8 <OLED_fadeIn>:
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
}

void OLED_fadeIn(void)
{
     ef8:	0f 93       	push	r16
     efa:	1f 93       	push	r17
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
     f00:	c0 e0       	ldi	r28, 0x00	; 0
     f02:	d0 e0       	ldi	r29, 0x00	; 0
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
	{
		OLED_setContrast(i);
		_delay_ms(4);
		printf("%d\n",i);
     f04:	0f e9       	ldi	r16, 0x9F	; 159
     f06:	11 e0       	ldi	r17, 0x01	; 1
void OLED_fadeIn(void)
{
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
	{
		OLED_setContrast(i);
     f08:	8c 2f       	mov	r24, r28
     f0a:	ea df       	rcall	.-44     	; 0xee0 <OLED_setContrast>
     f0c:	83 e3       	ldi	r24, 0x33	; 51
     f0e:	93 e1       	ldi	r25, 0x13	; 19
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	f1 f7       	brne	.-4      	; 0xf10 <OLED_fadeIn+0x18>
     f14:	df 93       	push	r29
		_delay_ms(4);
		printf("%d\n",i);
     f16:	cf 93       	push	r28
     f18:	1f 93       	push	r17
     f1a:	0f 93       	push	r16
     f1c:	2b d3       	rcall	.+1622   	; 0x1574 <printf>
     f1e:	21 96       	adiw	r28, 0x01	; 1
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
}

void OLED_fadeIn(void)
{
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	cf 3f       	cpi	r28, 0xFF	; 255
     f2a:	d1 05       	cpc	r29, r1
     f2c:	69 f7       	brne	.-38     	; 0xf08 <OLED_fadeIn+0x10>
     f2e:	83 ef       	ldi	r24, 0xF3	; 243
     f30:	92 e0       	ldi	r25, 0x02	; 2
	{
		OLED_setContrast(i);
		_delay_ms(4);
		printf("%d\n",i);
	}
	printf("was here");
     f32:	9f 93       	push	r25
     f34:	8f 93       	push	r24
     f36:	1e d3       	rcall	.+1596   	; 0x1574 <printf>
     f38:	0f 90       	pop	r0
     f3a:	0f 90       	pop	r0
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
}
     f42:	0f 91       	pop	r16
     f44:	08 95       	ret

00000f46 <OLED_splashScreen>:
     f46:	2f ef       	ldi	r18, 0xFF	; 255
     f48:	8f ef       	ldi	r24, 0xFF	; 255
     f4a:	92 e0       	ldi	r25, 0x02	; 2
     f4c:	21 50       	subi	r18, 0x01	; 1
     f4e:	80 40       	sbci	r24, 0x00	; 0
     f50:	90 40       	sbci	r25, 0x00	; 0
     f52:	e1 f7       	brne	.-8      	; 0xf4c <OLED_splashScreen+0x6>
     f54:	00 c0       	rjmp	.+0      	; 0xf56 <OLED_splashScreen+0x10>
     f56:	00 c0       	rjmp	.+0      	; 0xf58 <OLED_splashScreen+0x12>
}

void OLED_splashScreen(void)
{
	_delay_ms(200);
	OLED_setContrast(0);
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	c2 df       	rcall	.-124    	; 0xee0 <OLED_setContrast>
     f5c:	64 e0       	ldi	r22, 0x04	; 4
	OLED_goto(2,4);
     f5e:	70 e0       	ldi	r23, 0x00	; 0
     f60:	82 e0       	ldi	r24, 0x02	; 2
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	04 df       	rcall	.-504    	; 0xd6e <OLED_goto>
     f66:	8c ef       	ldi	r24, 0xFC	; 252
     f68:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("Group 46 Soft");
     f6a:	57 df       	rcall	.-338    	; 0xe1a <OLED_printString>
     f6c:	c5 df       	rcall	.-118    	; 0xef8 <OLED_fadeIn>
     f6e:	2f ef       	ldi	r18, 0xFF	; 255
     f70:	8f e7       	ldi	r24, 0x7F	; 127
	OLED_fadeIn();
     f72:	97 e0       	ldi	r25, 0x07	; 7
     f74:	21 50       	subi	r18, 0x01	; 1
     f76:	80 40       	sbci	r24, 0x00	; 0
     f78:	90 40       	sbci	r25, 0x00	; 0
     f7a:	e1 f7       	brne	.-8      	; 0xf74 <OLED_splashScreen+0x2e>
     f7c:	00 c0       	rjmp	.+0      	; 0xf7e <OLED_splashScreen+0x38>
     f7e:	00 00       	nop
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	ae df       	rcall	.-164    	; 0xee0 <OLED_setContrast>
     f84:	6c e1       	ldi	r22, 0x1C	; 28
     f86:	70 e0       	ldi	r23, 0x00	; 0
	_delay_ms(500);
	OLED_setContrast(0);
     f88:	84 e0       	ldi	r24, 0x04	; 4
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	f0 de       	rcall	.-544    	; 0xd6e <OLED_goto>
	OLED_goto(4,28);
     f8e:	8a e0       	ldi	r24, 0x0A	; 10
     f90:	93 e0       	ldi	r25, 0x03	; 3
     f92:	43 df       	rcall	.-378    	; 0xe1a <OLED_printString>
     f94:	68 e1       	ldi	r22, 0x18	; 24
     f96:	70 e0       	ldi	r23, 0x00	; 0
     f98:	85 e0       	ldi	r24, 0x05	; 5
	OLED_printString("proudly");
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	e8 de       	rcall	.-560    	; 0xd6e <OLED_goto>
     f9e:	82 e1       	ldi	r24, 0x12	; 18
     fa0:	93 e0       	ldi	r25, 0x03	; 3
	OLED_goto(5,24);	
     fa2:	3b df       	rcall	.-394    	; 0xe1a <OLED_printString>
     fa4:	a9 df       	rcall	.-174    	; 0xef8 <OLED_fadeIn>
     fa6:	2f ef       	ldi	r18, 0xFF	; 255
     fa8:	8f e7       	ldi	r24, 0x7F	; 127
     faa:	97 e0       	ldi	r25, 0x07	; 7
     fac:	21 50       	subi	r18, 0x01	; 1
	OLED_printString("presents");
     fae:	80 40       	sbci	r24, 0x00	; 0
     fb0:	90 40       	sbci	r25, 0x00	; 0
     fb2:	e1 f7       	brne	.-8      	; 0xfac <OLED_splashScreen+0x66>
     fb4:	00 c0       	rjmp	.+0      	; 0xfb6 <OLED_splashScreen+0x70>
	OLED_fadeIn();
     fb6:	00 00       	nop
     fb8:	f7 de       	rcall	.-530    	; 0xda8 <OLED_clear>
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	91 df       	rcall	.-222    	; 0xee0 <OLED_setContrast>
     fbe:	6c e1       	ldi	r22, 0x1C	; 28
     fc0:	70 e0       	ldi	r23, 0x00	; 0
     fc2:	83 e0       	ldi	r24, 0x03	; 3
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	d3 de       	rcall	.-602    	; 0xd6e <OLED_goto>
     fc8:	8b e1       	ldi	r24, 0x1B	; 27
     fca:	93 e0       	ldi	r25, 0x03	; 3
	_delay_ms(500);
	
	OLED_clear();
     fcc:	26 df       	rcall	.-436    	; 0xe1a <OLED_printString>
     fce:	94 df       	rcall	.-216    	; 0xef8 <OLED_fadeIn>
	OLED_setContrast(0);
     fd0:	2f ef       	ldi	r18, 0xFF	; 255
     fd2:	8f ef       	ldi	r24, 0xFF	; 255
     fd4:	9e e0       	ldi	r25, 0x0E	; 14
	OLED_goto(3, 28);
     fd6:	21 50       	subi	r18, 0x01	; 1
     fd8:	80 40       	sbci	r24, 0x00	; 0
     fda:	90 40       	sbci	r25, 0x00	; 0
     fdc:	e1 f7       	brne	.-8      	; 0xfd6 <OLED_splashScreen+0x90>
     fde:	00 c0       	rjmp	.+0      	; 0xfe0 <OLED_splashScreen+0x9a>
     fe0:	00 00       	nop
	OLED_printString("FIFA 18");
     fe2:	e2 de       	rcall	.-572    	; 0xda8 <OLED_clear>
     fe4:	80 e5       	ldi	r24, 0x50	; 80
     fe6:	7c cf       	rjmp	.-264    	; 0xee0 <OLED_setContrast>
     fe8:	08 95       	ret

00000fea <OLED_init>:
	OLED_fadeIn();
     fea:	e0 91 16 01 	lds	r30, 0x0116
     fee:	f0 91 17 01 	lds	r31, 0x0117
     ff2:	8e ea       	ldi	r24, 0xAE	; 174
     ff4:	80 83       	st	Z, r24
     ff6:	e0 91 16 01 	lds	r30, 0x0116
     ffa:	f0 91 17 01 	lds	r31, 0x0117
     ffe:	81 ea       	ldi	r24, 0xA1	; 161
	_delay_ms(1000);
	
	// clean up
	OLED_clear(); // wipe screen
    1000:	80 83       	st	Z, r24
    1002:	e0 91 16 01 	lds	r30, 0x0116
	OLED_setContrast(0x50); // back to standard contrast
    1006:	f0 91 17 01 	lds	r31, 0x0117
    100a:	8a ed       	ldi	r24, 0xDA	; 218
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    100c:	80 83       	st	Z, r24
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
    100e:	e0 91 16 01 	lds	r30, 0x0116
    1012:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1016:	82 e1       	ldi	r24, 0x12	; 18
    1018:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    101a:	e0 91 16 01 	lds	r30, 0x0116
    101e:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1022:	88 ec       	ldi	r24, 0xC8	; 200
    1024:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    1026:	e0 91 16 01 	lds	r30, 0x0116
    102a:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    102e:	88 ea       	ldi	r24, 0xA8	; 168
    1030:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    1032:	e0 91 16 01 	lds	r30, 0x0116
    1036:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    103a:	8f e3       	ldi	r24, 0x3F	; 63
    103c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    103e:	e0 91 16 01 	lds	r30, 0x0116
    1042:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1046:	85 ed       	ldi	r24, 0xD5	; 213
    1048:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
    104a:	e0 91 16 01 	lds	r30, 0x0116
    104e:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1052:	80 e8       	ldi	r24, 0x80	; 128
    1054:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    1056:	e0 91 16 01 	lds	r30, 0x0116
    105a:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    105e:	81 e8       	ldi	r24, 0x81	; 129
    1060:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    1062:	e0 91 16 01 	lds	r30, 0x0116
    1066:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    106a:	80 e5       	ldi	r24, 0x50	; 80
    106c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    106e:	e0 91 16 01 	lds	r30, 0x0116
    1072:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1076:	89 ed       	ldi	r24, 0xD9	; 217
    1078:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
    107a:	e0 91 16 01 	lds	r30, 0x0116
    107e:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1082:	81 e2       	ldi	r24, 0x21	; 33
    1084:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    1086:	e0 91 16 01 	lds	r30, 0x0116
    108a:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    108e:	80 e2       	ldi	r24, 0x20	; 32
    1090:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    1092:	e0 91 16 01 	lds	r30, 0x0116
    1096:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    109a:	82 e0       	ldi	r24, 0x02	; 2
    109c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    109e:	e0 91 16 01 	lds	r30, 0x0116
    10a2:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10a6:	8b ed       	ldi	r24, 0xDB	; 219
    10a8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    10aa:	e0 91 16 01 	lds	r30, 0x0116
    10ae:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10b2:	80 e3       	ldi	r24, 0x30	; 48
    10b4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    10b6:	e0 91 16 01 	lds	r30, 0x0116
    10ba:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10be:	8d ea       	ldi	r24, 0xAD	; 173
    10c0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    10c2:	e0 91 16 01 	lds	r30, 0x0116
    10c6:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10ca:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    10cc:	e0 91 16 01 	lds	r30, 0x0116
    10d0:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10d4:	84 ea       	ldi	r24, 0xA4	; 164
    10d6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    10d8:	e0 91 16 01 	lds	r30, 0x0116
    10dc:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10e0:	86 ea       	ldi	r24, 0xA6	; 166
    10e2:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    10e4:	e0 91 16 01 	lds	r30, 0x0116
    10e8:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10ec:	8f ea       	ldi	r24, 0xAF	; 175
    10ee:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    10f0:	5b de       	rcall	.-842    	; 0xda8 <OLED_clear>
    10f2:	29 cf       	rjmp	.-430    	; 0xf46 <OLED_splashScreen>
	OLED_splashScreen();
    10f4:	08 95       	ret

000010f6 <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    10f6:	10 92 50 03 	sts	0x0350, r1
	currentSliPosition.L_abs = 0;
    10fa:	10 92 51 03 	sts	0x0351, r1
	currentSliPosition.R_per = 0;
    10fe:	10 92 52 03 	sts	0x0352, r1
	currentSliPosition.L_per = 0;
    1102:	10 92 53 03 	sts	0x0353, r1
    1106:	08 95       	ret

00001108 <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1108:	5d 9b       	sbis	0x0b, 5	; 11
    110a:	fe cf       	rjmp	.-4      	; 0x1108 <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    110c:	8c b9       	out	0x0c, r24	; 12
    110e:	08 95       	ret

00001110 <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    1110:	5f 9b       	sbis	0x0b, 7	; 11
    1112:	fe cf       	rjmp	.-4      	; 0x1110 <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    1114:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
    1116:	08 95       	ret

00001118 <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    1118:	ef 92       	push	r14
    111a:	ff 92       	push	r15
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    1120:	bb 27       	eor	r27, r27
    1122:	a1 2f       	mov	r26, r17
    1124:	90 2f       	mov	r25, r16
    1126:	8f 2d       	mov	r24, r15
    1128:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    112a:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    112c:	88 e1       	ldi	r24, 0x18	; 24
    112e:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    1130:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    1132:	8e e8       	ldi	r24, 0x8E	; 142
    1134:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    1136:	68 e8       	ldi	r22, 0x88	; 136
    1138:	78 e0       	ldi	r23, 0x08	; 8
    113a:	84 e8       	ldi	r24, 0x84	; 132
    113c:	98 e0       	ldi	r25, 0x08	; 8
    113e:	d0 d1       	rcall	.+928    	; 0x14e0 <fdevopen>
    1140:	1f 91       	pop	r17
    1142:	0f 91       	pop	r16
    1144:	ff 90       	pop	r15
    1146:	ef 90       	pop	r14
    1148:	08 95       	ret

0000114a <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    114a:	9b 01       	movw	r18, r22
	
	switch(channel){
    114c:	82 30       	cpi	r24, 0x02	; 2
    114e:	69 f0       	breq	.+26     	; 0x116a <ADC_request+0x20>
    1150:	18 f4       	brcc	.+6      	; 0x1158 <ADC_request+0xe>
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	31 f0       	breq	.+12     	; 0x1162 <ADC_request+0x18>
    1156:	15 c0       	rjmp	.+42     	; 0x1182 <ADC_request+0x38>
    1158:	83 30       	cpi	r24, 0x03	; 3
    115a:	59 f0       	breq	.+22     	; 0x1172 <ADC_request+0x28>
    115c:	84 30       	cpi	r24, 0x04	; 4
    115e:	69 f0       	breq	.+26     	; 0x117a <ADC_request+0x30>
    1160:	10 c0       	rjmp	.+32     	; 0x1182 <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    1162:	64 e0       	ldi	r22, 0x04	; 4
    1164:	c9 01       	movw	r24, r18
    1166:	e8 c9       	rjmp	.-3120   	; 0x538 <saveToAddress>
    1168:	08 95       	ret
			break;
    116a:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    116c:	c9 01       	movw	r24, r18
    116e:	e4 c9       	rjmp	.-3128   	; 0x538 <saveToAddress>
    1170:	08 95       	ret
    1172:	66 e0       	ldi	r22, 0x06	; 6
			break;
    1174:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    1176:	e0 c9       	rjmp	.-3136   	; 0x538 <saveToAddress>
    1178:	08 95       	ret
    117a:	67 e0       	ldi	r22, 0x07	; 7
    117c:	c9 01       	movw	r24, r18
			break;
    117e:	dc c9       	rjmp	.-3144   	; 0x538 <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    1180:	08 95       	ret
    1182:	83 e2       	ldi	r24, 0x23	; 35
    1184:	93 e0       	ldi	r25, 0x03	; 3
    1186:	9f 93       	push	r25
			break;
    1188:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    118a:	f4 d1       	rcall	.+1000   	; 0x1574 <printf>
    118c:	0f 90       	pop	r0
    118e:	0f 90       	pop	r0
    1190:	08 95       	ret

00001192 <ADC_read>:
    1192:	cf c9       	rjmp	.-3170   	; 0x532 <readFromAddress>
    1194:	08 95       	ret

00001196 <__divmodhi4>:
			break;
    1196:	97 fb       	bst	r25, 7
    1198:	07 2e       	mov	r0, r23
    119a:	16 f4       	brtc	.+4      	; 0x11a0 <__divmodhi4+0xa>
    119c:	00 94       	com	r0
    119e:	06 d0       	rcall	.+12     	; 0x11ac <__divmodhi4_neg1>
    11a0:	77 fd       	sbrc	r23, 7
    11a2:	08 d0       	rcall	.+16     	; 0x11b4 <__divmodhi4_neg2>
    11a4:	0b d0       	rcall	.+22     	; 0x11bc <__udivmodhi4>
    11a6:	07 fc       	sbrc	r0, 7
    11a8:	05 d0       	rcall	.+10     	; 0x11b4 <__divmodhi4_neg2>
    11aa:	3e f4       	brtc	.+14     	; 0x11ba <__divmodhi4_exit>

000011ac <__divmodhi4_neg1>:
    11ac:	90 95       	com	r25
    11ae:	81 95       	neg	r24
    11b0:	9f 4f       	sbci	r25, 0xFF	; 255
    11b2:	08 95       	ret

000011b4 <__divmodhi4_neg2>:
    11b4:	70 95       	com	r23
    11b6:	61 95       	neg	r22
    11b8:	7f 4f       	sbci	r23, 0xFF	; 255

000011ba <__divmodhi4_exit>:
    11ba:	08 95       	ret

000011bc <__udivmodhi4>:
    11bc:	aa 1b       	sub	r26, r26
    11be:	bb 1b       	sub	r27, r27
    11c0:	51 e1       	ldi	r21, 0x11	; 17
    11c2:	07 c0       	rjmp	.+14     	; 0x11d2 <__udivmodhi4_ep>

000011c4 <__udivmodhi4_loop>:
    11c4:	aa 1f       	adc	r26, r26
    11c6:	bb 1f       	adc	r27, r27
    11c8:	a6 17       	cp	r26, r22
    11ca:	b7 07       	cpc	r27, r23
    11cc:	10 f0       	brcs	.+4      	; 0x11d2 <__udivmodhi4_ep>
    11ce:	a6 1b       	sub	r26, r22
    11d0:	b7 0b       	sbc	r27, r23

000011d2 <__udivmodhi4_ep>:
    11d2:	88 1f       	adc	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	5a 95       	dec	r21
    11d8:	a9 f7       	brne	.-22     	; 0x11c4 <__udivmodhi4_loop>
    11da:	80 95       	com	r24
    11dc:	90 95       	com	r25
    11de:	bc 01       	movw	r22, r24
    11e0:	cd 01       	movw	r24, r26
    11e2:	08 95       	ret

000011e4 <malloc>:
    11e4:	cf 93       	push	r28
    11e6:	df 93       	push	r29
    11e8:	82 30       	cpi	r24, 0x02	; 2
    11ea:	91 05       	cpc	r25, r1
    11ec:	10 f4       	brcc	.+4      	; 0x11f2 <malloc+0xe>
    11ee:	82 e0       	ldi	r24, 0x02	; 2
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	e0 91 56 03 	lds	r30, 0x0356
    11f6:	f0 91 57 03 	lds	r31, 0x0357
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	a0 e0       	ldi	r26, 0x00	; 0
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	30 97       	sbiw	r30, 0x00	; 0
    1204:	39 f1       	breq	.+78     	; 0x1254 <malloc+0x70>
    1206:	40 81       	ld	r20, Z
    1208:	51 81       	ldd	r21, Z+1	; 0x01
    120a:	48 17       	cp	r20, r24
    120c:	59 07       	cpc	r21, r25
    120e:	b8 f0       	brcs	.+46     	; 0x123e <malloc+0x5a>
    1210:	48 17       	cp	r20, r24
    1212:	59 07       	cpc	r21, r25
    1214:	71 f4       	brne	.+28     	; 0x1232 <malloc+0x4e>
    1216:	82 81       	ldd	r24, Z+2	; 0x02
    1218:	93 81       	ldd	r25, Z+3	; 0x03
    121a:	10 97       	sbiw	r26, 0x00	; 0
    121c:	29 f0       	breq	.+10     	; 0x1228 <malloc+0x44>
    121e:	13 96       	adiw	r26, 0x03	; 3
    1220:	9c 93       	st	X, r25
    1222:	8e 93       	st	-X, r24
    1224:	12 97       	sbiw	r26, 0x02	; 2
    1226:	2c c0       	rjmp	.+88     	; 0x1280 <malloc+0x9c>
    1228:	90 93 57 03 	sts	0x0357, r25
    122c:	80 93 56 03 	sts	0x0356, r24
    1230:	27 c0       	rjmp	.+78     	; 0x1280 <malloc+0x9c>
    1232:	21 15       	cp	r18, r1
    1234:	31 05       	cpc	r19, r1
    1236:	31 f0       	breq	.+12     	; 0x1244 <malloc+0x60>
    1238:	42 17       	cp	r20, r18
    123a:	53 07       	cpc	r21, r19
    123c:	18 f0       	brcs	.+6      	; 0x1244 <malloc+0x60>
    123e:	a9 01       	movw	r20, r18
    1240:	db 01       	movw	r26, r22
    1242:	01 c0       	rjmp	.+2      	; 0x1246 <malloc+0x62>
    1244:	ef 01       	movw	r28, r30
    1246:	9a 01       	movw	r18, r20
    1248:	bd 01       	movw	r22, r26
    124a:	df 01       	movw	r26, r30
    124c:	02 80       	ldd	r0, Z+2	; 0x02
    124e:	f3 81       	ldd	r31, Z+3	; 0x03
    1250:	e0 2d       	mov	r30, r0
    1252:	d7 cf       	rjmp	.-82     	; 0x1202 <malloc+0x1e>
    1254:	21 15       	cp	r18, r1
    1256:	31 05       	cpc	r19, r1
    1258:	f9 f0       	breq	.+62     	; 0x1298 <malloc+0xb4>
    125a:	28 1b       	sub	r18, r24
    125c:	39 0b       	sbc	r19, r25
    125e:	24 30       	cpi	r18, 0x04	; 4
    1260:	31 05       	cpc	r19, r1
    1262:	80 f4       	brcc	.+32     	; 0x1284 <malloc+0xa0>
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	9b 81       	ldd	r25, Y+3	; 0x03
    1268:	61 15       	cp	r22, r1
    126a:	71 05       	cpc	r23, r1
    126c:	21 f0       	breq	.+8      	; 0x1276 <malloc+0x92>
    126e:	fb 01       	movw	r30, r22
    1270:	93 83       	std	Z+3, r25	; 0x03
    1272:	82 83       	std	Z+2, r24	; 0x02
    1274:	04 c0       	rjmp	.+8      	; 0x127e <malloc+0x9a>
    1276:	90 93 57 03 	sts	0x0357, r25
    127a:	80 93 56 03 	sts	0x0356, r24
    127e:	fe 01       	movw	r30, r28
    1280:	32 96       	adiw	r30, 0x02	; 2
    1282:	44 c0       	rjmp	.+136    	; 0x130c <malloc+0x128>
    1284:	fe 01       	movw	r30, r28
    1286:	e2 0f       	add	r30, r18
    1288:	f3 1f       	adc	r31, r19
    128a:	81 93       	st	Z+, r24
    128c:	91 93       	st	Z+, r25
    128e:	22 50       	subi	r18, 0x02	; 2
    1290:	31 09       	sbc	r19, r1
    1292:	39 83       	std	Y+1, r19	; 0x01
    1294:	28 83       	st	Y, r18
    1296:	3a c0       	rjmp	.+116    	; 0x130c <malloc+0x128>
    1298:	20 91 54 03 	lds	r18, 0x0354
    129c:	30 91 55 03 	lds	r19, 0x0355
    12a0:	23 2b       	or	r18, r19
    12a2:	41 f4       	brne	.+16     	; 0x12b4 <malloc+0xd0>
    12a4:	20 91 02 01 	lds	r18, 0x0102
    12a8:	30 91 03 01 	lds	r19, 0x0103
    12ac:	30 93 55 03 	sts	0x0355, r19
    12b0:	20 93 54 03 	sts	0x0354, r18
    12b4:	20 91 00 01 	lds	r18, 0x0100
    12b8:	30 91 01 01 	lds	r19, 0x0101
    12bc:	21 15       	cp	r18, r1
    12be:	31 05       	cpc	r19, r1
    12c0:	41 f4       	brne	.+16     	; 0x12d2 <malloc+0xee>
    12c2:	2d b7       	in	r18, 0x3d	; 61
    12c4:	3e b7       	in	r19, 0x3e	; 62
    12c6:	40 91 04 01 	lds	r20, 0x0104
    12ca:	50 91 05 01 	lds	r21, 0x0105
    12ce:	24 1b       	sub	r18, r20
    12d0:	35 0b       	sbc	r19, r21
    12d2:	e0 91 54 03 	lds	r30, 0x0354
    12d6:	f0 91 55 03 	lds	r31, 0x0355
    12da:	e2 17       	cp	r30, r18
    12dc:	f3 07       	cpc	r31, r19
    12de:	a0 f4       	brcc	.+40     	; 0x1308 <malloc+0x124>
    12e0:	2e 1b       	sub	r18, r30
    12e2:	3f 0b       	sbc	r19, r31
    12e4:	28 17       	cp	r18, r24
    12e6:	39 07       	cpc	r19, r25
    12e8:	78 f0       	brcs	.+30     	; 0x1308 <malloc+0x124>
    12ea:	ac 01       	movw	r20, r24
    12ec:	4e 5f       	subi	r20, 0xFE	; 254
    12ee:	5f 4f       	sbci	r21, 0xFF	; 255
    12f0:	24 17       	cp	r18, r20
    12f2:	35 07       	cpc	r19, r21
    12f4:	48 f0       	brcs	.+18     	; 0x1308 <malloc+0x124>
    12f6:	4e 0f       	add	r20, r30
    12f8:	5f 1f       	adc	r21, r31
    12fa:	50 93 55 03 	sts	0x0355, r21
    12fe:	40 93 54 03 	sts	0x0354, r20
    1302:	81 93       	st	Z+, r24
    1304:	91 93       	st	Z+, r25
    1306:	02 c0       	rjmp	.+4      	; 0x130c <malloc+0x128>
    1308:	e0 e0       	ldi	r30, 0x00	; 0
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	cf 01       	movw	r24, r30
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	08 95       	ret

00001314 <free>:
    1314:	cf 93       	push	r28
    1316:	df 93       	push	r29
    1318:	00 97       	sbiw	r24, 0x00	; 0
    131a:	09 f4       	brne	.+2      	; 0x131e <free+0xa>
    131c:	87 c0       	rjmp	.+270    	; 0x142c <free+0x118>
    131e:	fc 01       	movw	r30, r24
    1320:	32 97       	sbiw	r30, 0x02	; 2
    1322:	13 82       	std	Z+3, r1	; 0x03
    1324:	12 82       	std	Z+2, r1	; 0x02
    1326:	c0 91 56 03 	lds	r28, 0x0356
    132a:	d0 91 57 03 	lds	r29, 0x0357
    132e:	20 97       	sbiw	r28, 0x00	; 0
    1330:	81 f4       	brne	.+32     	; 0x1352 <free+0x3e>
    1332:	20 81       	ld	r18, Z
    1334:	31 81       	ldd	r19, Z+1	; 0x01
    1336:	28 0f       	add	r18, r24
    1338:	39 1f       	adc	r19, r25
    133a:	80 91 54 03 	lds	r24, 0x0354
    133e:	90 91 55 03 	lds	r25, 0x0355
    1342:	82 17       	cp	r24, r18
    1344:	93 07       	cpc	r25, r19
    1346:	79 f5       	brne	.+94     	; 0x13a6 <free+0x92>
    1348:	f0 93 55 03 	sts	0x0355, r31
    134c:	e0 93 54 03 	sts	0x0354, r30
    1350:	6d c0       	rjmp	.+218    	; 0x142c <free+0x118>
    1352:	de 01       	movw	r26, r28
    1354:	20 e0       	ldi	r18, 0x00	; 0
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	ae 17       	cp	r26, r30
    135a:	bf 07       	cpc	r27, r31
    135c:	50 f4       	brcc	.+20     	; 0x1372 <free+0x5e>
    135e:	12 96       	adiw	r26, 0x02	; 2
    1360:	4d 91       	ld	r20, X+
    1362:	5c 91       	ld	r21, X
    1364:	13 97       	sbiw	r26, 0x03	; 3
    1366:	9d 01       	movw	r18, r26
    1368:	41 15       	cp	r20, r1
    136a:	51 05       	cpc	r21, r1
    136c:	09 f1       	breq	.+66     	; 0x13b0 <free+0x9c>
    136e:	da 01       	movw	r26, r20
    1370:	f3 cf       	rjmp	.-26     	; 0x1358 <free+0x44>
    1372:	b3 83       	std	Z+3, r27	; 0x03
    1374:	a2 83       	std	Z+2, r26	; 0x02
    1376:	40 81       	ld	r20, Z
    1378:	51 81       	ldd	r21, Z+1	; 0x01
    137a:	84 0f       	add	r24, r20
    137c:	95 1f       	adc	r25, r21
    137e:	8a 17       	cp	r24, r26
    1380:	9b 07       	cpc	r25, r27
    1382:	71 f4       	brne	.+28     	; 0x13a0 <free+0x8c>
    1384:	8d 91       	ld	r24, X+
    1386:	9c 91       	ld	r25, X
    1388:	11 97       	sbiw	r26, 0x01	; 1
    138a:	84 0f       	add	r24, r20
    138c:	95 1f       	adc	r25, r21
    138e:	02 96       	adiw	r24, 0x02	; 2
    1390:	91 83       	std	Z+1, r25	; 0x01
    1392:	80 83       	st	Z, r24
    1394:	12 96       	adiw	r26, 0x02	; 2
    1396:	8d 91       	ld	r24, X+
    1398:	9c 91       	ld	r25, X
    139a:	13 97       	sbiw	r26, 0x03	; 3
    139c:	93 83       	std	Z+3, r25	; 0x03
    139e:	82 83       	std	Z+2, r24	; 0x02
    13a0:	21 15       	cp	r18, r1
    13a2:	31 05       	cpc	r19, r1
    13a4:	29 f4       	brne	.+10     	; 0x13b0 <free+0x9c>
    13a6:	f0 93 57 03 	sts	0x0357, r31
    13aa:	e0 93 56 03 	sts	0x0356, r30
    13ae:	3e c0       	rjmp	.+124    	; 0x142c <free+0x118>
    13b0:	d9 01       	movw	r26, r18
    13b2:	13 96       	adiw	r26, 0x03	; 3
    13b4:	fc 93       	st	X, r31
    13b6:	ee 93       	st	-X, r30
    13b8:	12 97       	sbiw	r26, 0x02	; 2
    13ba:	4d 91       	ld	r20, X+
    13bc:	5d 91       	ld	r21, X+
    13be:	a4 0f       	add	r26, r20
    13c0:	b5 1f       	adc	r27, r21
    13c2:	ea 17       	cp	r30, r26
    13c4:	fb 07       	cpc	r31, r27
    13c6:	79 f4       	brne	.+30     	; 0x13e6 <free+0xd2>
    13c8:	80 81       	ld	r24, Z
    13ca:	91 81       	ldd	r25, Z+1	; 0x01
    13cc:	84 0f       	add	r24, r20
    13ce:	95 1f       	adc	r25, r21
    13d0:	02 96       	adiw	r24, 0x02	; 2
    13d2:	d9 01       	movw	r26, r18
    13d4:	11 96       	adiw	r26, 0x01	; 1
    13d6:	9c 93       	st	X, r25
    13d8:	8e 93       	st	-X, r24
    13da:	82 81       	ldd	r24, Z+2	; 0x02
    13dc:	93 81       	ldd	r25, Z+3	; 0x03
    13de:	13 96       	adiw	r26, 0x03	; 3
    13e0:	9c 93       	st	X, r25
    13e2:	8e 93       	st	-X, r24
    13e4:	12 97       	sbiw	r26, 0x02	; 2
    13e6:	e0 e0       	ldi	r30, 0x00	; 0
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	9b 81       	ldd	r25, Y+3	; 0x03
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	19 f0       	breq	.+6      	; 0x13f8 <free+0xe4>
    13f2:	fe 01       	movw	r30, r28
    13f4:	ec 01       	movw	r28, r24
    13f6:	f9 cf       	rjmp	.-14     	; 0x13ea <free+0xd6>
    13f8:	ce 01       	movw	r24, r28
    13fa:	02 96       	adiw	r24, 0x02	; 2
    13fc:	28 81       	ld	r18, Y
    13fe:	39 81       	ldd	r19, Y+1	; 0x01
    1400:	82 0f       	add	r24, r18
    1402:	93 1f       	adc	r25, r19
    1404:	20 91 54 03 	lds	r18, 0x0354
    1408:	30 91 55 03 	lds	r19, 0x0355
    140c:	28 17       	cp	r18, r24
    140e:	39 07       	cpc	r19, r25
    1410:	69 f4       	brne	.+26     	; 0x142c <free+0x118>
    1412:	30 97       	sbiw	r30, 0x00	; 0
    1414:	29 f4       	brne	.+10     	; 0x1420 <free+0x10c>
    1416:	10 92 57 03 	sts	0x0357, r1
    141a:	10 92 56 03 	sts	0x0356, r1
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <free+0x110>
    1420:	13 82       	std	Z+3, r1	; 0x03
    1422:	12 82       	std	Z+2, r1	; 0x02
    1424:	d0 93 55 03 	sts	0x0355, r29
    1428:	c0 93 54 03 	sts	0x0354, r28
    142c:	df 91       	pop	r29
    142e:	cf 91       	pop	r28
    1430:	08 95       	ret

00001432 <do_rand>:
    1432:	8f 92       	push	r8
    1434:	9f 92       	push	r9
    1436:	af 92       	push	r10
    1438:	bf 92       	push	r11
    143a:	cf 92       	push	r12
    143c:	df 92       	push	r13
    143e:	ef 92       	push	r14
    1440:	ff 92       	push	r15
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	ec 01       	movw	r28, r24
    1448:	68 81       	ld	r22, Y
    144a:	79 81       	ldd	r23, Y+1	; 0x01
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	9b 81       	ldd	r25, Y+3	; 0x03
    1450:	61 15       	cp	r22, r1
    1452:	71 05       	cpc	r23, r1
    1454:	81 05       	cpc	r24, r1
    1456:	91 05       	cpc	r25, r1
    1458:	21 f4       	brne	.+8      	; 0x1462 <do_rand+0x30>
    145a:	64 e2       	ldi	r22, 0x24	; 36
    145c:	79 ed       	ldi	r23, 0xD9	; 217
    145e:	8b e5       	ldi	r24, 0x5B	; 91
    1460:	97 e0       	ldi	r25, 0x07	; 7
    1462:	2d e1       	ldi	r18, 0x1D	; 29
    1464:	33 ef       	ldi	r19, 0xF3	; 243
    1466:	41 e0       	ldi	r20, 0x01	; 1
    1468:	50 e0       	ldi	r21, 0x00	; 0
    146a:	4c d3       	rcall	.+1688   	; 0x1b04 <__divmodsi4>
    146c:	49 01       	movw	r8, r18
    146e:	5a 01       	movw	r10, r20
    1470:	9b 01       	movw	r18, r22
    1472:	ac 01       	movw	r20, r24
    1474:	a7 ea       	ldi	r26, 0xA7	; 167
    1476:	b1 e4       	ldi	r27, 0x41	; 65
    1478:	61 d3       	rcall	.+1730   	; 0x1b3c <__muluhisi3>
    147a:	6b 01       	movw	r12, r22
    147c:	7c 01       	movw	r14, r24
    147e:	ac ee       	ldi	r26, 0xEC	; 236
    1480:	b4 ef       	ldi	r27, 0xF4	; 244
    1482:	a5 01       	movw	r20, r10
    1484:	94 01       	movw	r18, r8
    1486:	66 d3       	rcall	.+1740   	; 0x1b54 <__mulohisi3>
    1488:	c6 0e       	add	r12, r22
    148a:	d7 1e       	adc	r13, r23
    148c:	e8 1e       	adc	r14, r24
    148e:	f9 1e       	adc	r15, r25
    1490:	f7 fe       	sbrs	r15, 7
    1492:	06 c0       	rjmp	.+12     	; 0x14a0 <do_rand+0x6e>
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	c8 1a       	sub	r12, r24
    1498:	d1 08       	sbc	r13, r1
    149a:	e1 08       	sbc	r14, r1
    149c:	80 e8       	ldi	r24, 0x80	; 128
    149e:	f8 0a       	sbc	r15, r24
    14a0:	c8 82       	st	Y, r12
    14a2:	d9 82       	std	Y+1, r13	; 0x01
    14a4:	ea 82       	std	Y+2, r14	; 0x02
    14a6:	fb 82       	std	Y+3, r15	; 0x03
    14a8:	c6 01       	movw	r24, r12
    14aa:	9f 77       	andi	r25, 0x7F	; 127
    14ac:	df 91       	pop	r29
    14ae:	cf 91       	pop	r28
    14b0:	ff 90       	pop	r15
    14b2:	ef 90       	pop	r14
    14b4:	df 90       	pop	r13
    14b6:	cf 90       	pop	r12
    14b8:	bf 90       	pop	r11
    14ba:	af 90       	pop	r10
    14bc:	9f 90       	pop	r9
    14be:	8f 90       	pop	r8
    14c0:	08 95       	ret

000014c2 <rand_r>:
    14c2:	b7 cf       	rjmp	.-146    	; 0x1432 <do_rand>

000014c4 <rand>:
    14c4:	86 e0       	ldi	r24, 0x06	; 6
    14c6:	91 e0       	ldi	r25, 0x01	; 1
    14c8:	b4 cf       	rjmp	.-152    	; 0x1432 <do_rand>

000014ca <srand>:
    14ca:	a0 e0       	ldi	r26, 0x00	; 0
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	80 93 06 01 	sts	0x0106, r24
    14d2:	90 93 07 01 	sts	0x0107, r25
    14d6:	a0 93 08 01 	sts	0x0108, r26
    14da:	b0 93 09 01 	sts	0x0109, r27
    14de:	08 95       	ret

000014e0 <fdevopen>:
    14e0:	0f 93       	push	r16
    14e2:	1f 93       	push	r17
    14e4:	cf 93       	push	r28
    14e6:	df 93       	push	r29
    14e8:	ec 01       	movw	r28, r24
    14ea:	8b 01       	movw	r16, r22
    14ec:	00 97       	sbiw	r24, 0x00	; 0
    14ee:	31 f4       	brne	.+12     	; 0x14fc <fdevopen+0x1c>
    14f0:	61 15       	cp	r22, r1
    14f2:	71 05       	cpc	r23, r1
    14f4:	19 f4       	brne	.+6      	; 0x14fc <fdevopen+0x1c>
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	37 c0       	rjmp	.+110    	; 0x156a <fdevopen+0x8a>
    14fc:	6e e0       	ldi	r22, 0x0E	; 14
    14fe:	70 e0       	ldi	r23, 0x00	; 0
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	38 d2       	rcall	.+1136   	; 0x1976 <calloc>
    1506:	fc 01       	movw	r30, r24
    1508:	00 97       	sbiw	r24, 0x00	; 0
    150a:	a9 f3       	breq	.-22     	; 0x14f6 <fdevopen+0x16>
    150c:	80 e8       	ldi	r24, 0x80	; 128
    150e:	83 83       	std	Z+3, r24	; 0x03
    1510:	01 15       	cp	r16, r1
    1512:	11 05       	cpc	r17, r1
    1514:	71 f0       	breq	.+28     	; 0x1532 <fdevopen+0x52>
    1516:	13 87       	std	Z+11, r17	; 0x0b
    1518:	02 87       	std	Z+10, r16	; 0x0a
    151a:	81 e8       	ldi	r24, 0x81	; 129
    151c:	83 83       	std	Z+3, r24	; 0x03
    151e:	80 91 58 03 	lds	r24, 0x0358
    1522:	90 91 59 03 	lds	r25, 0x0359
    1526:	89 2b       	or	r24, r25
    1528:	21 f4       	brne	.+8      	; 0x1532 <fdevopen+0x52>
    152a:	f0 93 59 03 	sts	0x0359, r31
    152e:	e0 93 58 03 	sts	0x0358, r30
    1532:	20 97       	sbiw	r28, 0x00	; 0
    1534:	c9 f0       	breq	.+50     	; 0x1568 <fdevopen+0x88>
    1536:	d1 87       	std	Z+9, r29	; 0x09
    1538:	c0 87       	std	Z+8, r28	; 0x08
    153a:	83 81       	ldd	r24, Z+3	; 0x03
    153c:	82 60       	ori	r24, 0x02	; 2
    153e:	83 83       	std	Z+3, r24	; 0x03
    1540:	80 91 5a 03 	lds	r24, 0x035A
    1544:	90 91 5b 03 	lds	r25, 0x035B
    1548:	89 2b       	or	r24, r25
    154a:	71 f4       	brne	.+28     	; 0x1568 <fdevopen+0x88>
    154c:	f0 93 5b 03 	sts	0x035B, r31
    1550:	e0 93 5a 03 	sts	0x035A, r30
    1554:	80 91 5c 03 	lds	r24, 0x035C
    1558:	90 91 5d 03 	lds	r25, 0x035D
    155c:	89 2b       	or	r24, r25
    155e:	21 f4       	brne	.+8      	; 0x1568 <fdevopen+0x88>
    1560:	f0 93 5d 03 	sts	0x035D, r31
    1564:	e0 93 5c 03 	sts	0x035C, r30
    1568:	cf 01       	movw	r24, r30
    156a:	df 91       	pop	r29
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	08 95       	ret

00001574 <printf>:
    1574:	a0 e0       	ldi	r26, 0x00	; 0
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	ef eb       	ldi	r30, 0xBF	; 191
    157a:	fa e0       	ldi	r31, 0x0A	; 10
    157c:	ff c2       	rjmp	.+1534   	; 0x1b7c <__prologue_saves__+0x20>
    157e:	fe 01       	movw	r30, r28
    1580:	35 96       	adiw	r30, 0x05	; 5
    1582:	61 91       	ld	r22, Z+
    1584:	71 91       	ld	r23, Z+
    1586:	af 01       	movw	r20, r30
    1588:	80 91 5a 03 	lds	r24, 0x035A
    158c:	90 91 5b 03 	lds	r25, 0x035B
    1590:	2f d0       	rcall	.+94     	; 0x15f0 <vfprintf>
    1592:	e2 e0       	ldi	r30, 0x02	; 2
    1594:	0f c3       	rjmp	.+1566   	; 0x1bb4 <__epilogue_restores__+0x20>

00001596 <puts>:
    1596:	0f 93       	push	r16
    1598:	1f 93       	push	r17
    159a:	cf 93       	push	r28
    159c:	df 93       	push	r29
    159e:	e0 91 5a 03 	lds	r30, 0x035A
    15a2:	f0 91 5b 03 	lds	r31, 0x035B
    15a6:	23 81       	ldd	r18, Z+3	; 0x03
    15a8:	21 ff       	sbrs	r18, 1
    15aa:	1b c0       	rjmp	.+54     	; 0x15e2 <puts+0x4c>
    15ac:	ec 01       	movw	r28, r24
    15ae:	00 e0       	ldi	r16, 0x00	; 0
    15b0:	10 e0       	ldi	r17, 0x00	; 0
    15b2:	89 91       	ld	r24, Y+
    15b4:	60 91 5a 03 	lds	r22, 0x035A
    15b8:	70 91 5b 03 	lds	r23, 0x035B
    15bc:	db 01       	movw	r26, r22
    15be:	18 96       	adiw	r26, 0x08	; 8
    15c0:	ed 91       	ld	r30, X+
    15c2:	fc 91       	ld	r31, X
    15c4:	19 97       	sbiw	r26, 0x09	; 9
    15c6:	88 23       	and	r24, r24
    15c8:	31 f0       	breq	.+12     	; 0x15d6 <puts+0x40>
    15ca:	09 95       	icall
    15cc:	89 2b       	or	r24, r25
    15ce:	89 f3       	breq	.-30     	; 0x15b2 <puts+0x1c>
    15d0:	0f ef       	ldi	r16, 0xFF	; 255
    15d2:	1f ef       	ldi	r17, 0xFF	; 255
    15d4:	ee cf       	rjmp	.-36     	; 0x15b2 <puts+0x1c>
    15d6:	8a e0       	ldi	r24, 0x0A	; 10
    15d8:	09 95       	icall
    15da:	89 2b       	or	r24, r25
    15dc:	11 f4       	brne	.+4      	; 0x15e2 <puts+0x4c>
    15de:	c8 01       	movw	r24, r16
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <puts+0x50>
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	9f ef       	ldi	r25, 0xFF	; 255
    15e6:	df 91       	pop	r29
    15e8:	cf 91       	pop	r28
    15ea:	1f 91       	pop	r17
    15ec:	0f 91       	pop	r16
    15ee:	08 95       	ret

000015f0 <vfprintf>:
    15f0:	ac e0       	ldi	r26, 0x0C	; 12
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	ed ef       	ldi	r30, 0xFD	; 253
    15f6:	fa e0       	ldi	r31, 0x0A	; 10
    15f8:	b1 c2       	rjmp	.+1378   	; 0x1b5c <__prologue_saves__>
    15fa:	7c 01       	movw	r14, r24
    15fc:	6b 01       	movw	r12, r22
    15fe:	8a 01       	movw	r16, r20
    1600:	fc 01       	movw	r30, r24
    1602:	17 82       	std	Z+7, r1	; 0x07
    1604:	16 82       	std	Z+6, r1	; 0x06
    1606:	83 81       	ldd	r24, Z+3	; 0x03
    1608:	81 ff       	sbrs	r24, 1
    160a:	b0 c1       	rjmp	.+864    	; 0x196c <vfprintf+0x37c>
    160c:	ce 01       	movw	r24, r28
    160e:	01 96       	adiw	r24, 0x01	; 1
    1610:	4c 01       	movw	r8, r24
    1612:	f7 01       	movw	r30, r14
    1614:	93 81       	ldd	r25, Z+3	; 0x03
    1616:	f6 01       	movw	r30, r12
    1618:	93 fd       	sbrc	r25, 3
    161a:	85 91       	lpm	r24, Z+
    161c:	93 ff       	sbrs	r25, 3
    161e:	81 91       	ld	r24, Z+
    1620:	6f 01       	movw	r12, r30
    1622:	88 23       	and	r24, r24
    1624:	09 f4       	brne	.+2      	; 0x1628 <vfprintf+0x38>
    1626:	9e c1       	rjmp	.+828    	; 0x1964 <vfprintf+0x374>
    1628:	85 32       	cpi	r24, 0x25	; 37
    162a:	39 f4       	brne	.+14     	; 0x163a <vfprintf+0x4a>
    162c:	93 fd       	sbrc	r25, 3
    162e:	85 91       	lpm	r24, Z+
    1630:	93 ff       	sbrs	r25, 3
    1632:	81 91       	ld	r24, Z+
    1634:	6f 01       	movw	r12, r30
    1636:	85 32       	cpi	r24, 0x25	; 37
    1638:	21 f4       	brne	.+8      	; 0x1642 <vfprintf+0x52>
    163a:	b7 01       	movw	r22, r14
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	d2 d1       	rcall	.+932    	; 0x19e4 <fputc>
    1640:	e8 cf       	rjmp	.-48     	; 0x1612 <vfprintf+0x22>
    1642:	51 2c       	mov	r5, r1
    1644:	31 2c       	mov	r3, r1
    1646:	20 e0       	ldi	r18, 0x00	; 0
    1648:	20 32       	cpi	r18, 0x20	; 32
    164a:	a0 f4       	brcc	.+40     	; 0x1674 <vfprintf+0x84>
    164c:	8b 32       	cpi	r24, 0x2B	; 43
    164e:	69 f0       	breq	.+26     	; 0x166a <vfprintf+0x7a>
    1650:	30 f4       	brcc	.+12     	; 0x165e <vfprintf+0x6e>
    1652:	80 32       	cpi	r24, 0x20	; 32
    1654:	59 f0       	breq	.+22     	; 0x166c <vfprintf+0x7c>
    1656:	83 32       	cpi	r24, 0x23	; 35
    1658:	69 f4       	brne	.+26     	; 0x1674 <vfprintf+0x84>
    165a:	20 61       	ori	r18, 0x10	; 16
    165c:	2c c0       	rjmp	.+88     	; 0x16b6 <vfprintf+0xc6>
    165e:	8d 32       	cpi	r24, 0x2D	; 45
    1660:	39 f0       	breq	.+14     	; 0x1670 <vfprintf+0x80>
    1662:	80 33       	cpi	r24, 0x30	; 48
    1664:	39 f4       	brne	.+14     	; 0x1674 <vfprintf+0x84>
    1666:	21 60       	ori	r18, 0x01	; 1
    1668:	26 c0       	rjmp	.+76     	; 0x16b6 <vfprintf+0xc6>
    166a:	22 60       	ori	r18, 0x02	; 2
    166c:	24 60       	ori	r18, 0x04	; 4
    166e:	23 c0       	rjmp	.+70     	; 0x16b6 <vfprintf+0xc6>
    1670:	28 60       	ori	r18, 0x08	; 8
    1672:	21 c0       	rjmp	.+66     	; 0x16b6 <vfprintf+0xc6>
    1674:	27 fd       	sbrc	r18, 7
    1676:	27 c0       	rjmp	.+78     	; 0x16c6 <vfprintf+0xd6>
    1678:	30 ed       	ldi	r19, 0xD0	; 208
    167a:	38 0f       	add	r19, r24
    167c:	3a 30       	cpi	r19, 0x0A	; 10
    167e:	78 f4       	brcc	.+30     	; 0x169e <vfprintf+0xae>
    1680:	26 ff       	sbrs	r18, 6
    1682:	06 c0       	rjmp	.+12     	; 0x1690 <vfprintf+0xa0>
    1684:	fa e0       	ldi	r31, 0x0A	; 10
    1686:	5f 9e       	mul	r5, r31
    1688:	30 0d       	add	r19, r0
    168a:	11 24       	eor	r1, r1
    168c:	53 2e       	mov	r5, r19
    168e:	13 c0       	rjmp	.+38     	; 0x16b6 <vfprintf+0xc6>
    1690:	8a e0       	ldi	r24, 0x0A	; 10
    1692:	38 9e       	mul	r3, r24
    1694:	30 0d       	add	r19, r0
    1696:	11 24       	eor	r1, r1
    1698:	33 2e       	mov	r3, r19
    169a:	20 62       	ori	r18, 0x20	; 32
    169c:	0c c0       	rjmp	.+24     	; 0x16b6 <vfprintf+0xc6>
    169e:	8e 32       	cpi	r24, 0x2E	; 46
    16a0:	21 f4       	brne	.+8      	; 0x16aa <vfprintf+0xba>
    16a2:	26 fd       	sbrc	r18, 6
    16a4:	5f c1       	rjmp	.+702    	; 0x1964 <vfprintf+0x374>
    16a6:	20 64       	ori	r18, 0x40	; 64
    16a8:	06 c0       	rjmp	.+12     	; 0x16b6 <vfprintf+0xc6>
    16aa:	8c 36       	cpi	r24, 0x6C	; 108
    16ac:	11 f4       	brne	.+4      	; 0x16b2 <vfprintf+0xc2>
    16ae:	20 68       	ori	r18, 0x80	; 128
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <vfprintf+0xc6>
    16b2:	88 36       	cpi	r24, 0x68	; 104
    16b4:	41 f4       	brne	.+16     	; 0x16c6 <vfprintf+0xd6>
    16b6:	f6 01       	movw	r30, r12
    16b8:	93 fd       	sbrc	r25, 3
    16ba:	85 91       	lpm	r24, Z+
    16bc:	93 ff       	sbrs	r25, 3
    16be:	81 91       	ld	r24, Z+
    16c0:	6f 01       	movw	r12, r30
    16c2:	81 11       	cpse	r24, r1
    16c4:	c1 cf       	rjmp	.-126    	; 0x1648 <vfprintf+0x58>
    16c6:	98 2f       	mov	r25, r24
    16c8:	9f 7d       	andi	r25, 0xDF	; 223
    16ca:	95 54       	subi	r25, 0x45	; 69
    16cc:	93 30       	cpi	r25, 0x03	; 3
    16ce:	28 f4       	brcc	.+10     	; 0x16da <vfprintf+0xea>
    16d0:	0c 5f       	subi	r16, 0xFC	; 252
    16d2:	1f 4f       	sbci	r17, 0xFF	; 255
    16d4:	ff e3       	ldi	r31, 0x3F	; 63
    16d6:	f9 83       	std	Y+1, r31	; 0x01
    16d8:	0d c0       	rjmp	.+26     	; 0x16f4 <vfprintf+0x104>
    16da:	83 36       	cpi	r24, 0x63	; 99
    16dc:	31 f0       	breq	.+12     	; 0x16ea <vfprintf+0xfa>
    16de:	83 37       	cpi	r24, 0x73	; 115
    16e0:	71 f0       	breq	.+28     	; 0x16fe <vfprintf+0x10e>
    16e2:	83 35       	cpi	r24, 0x53	; 83
    16e4:	09 f0       	breq	.+2      	; 0x16e8 <vfprintf+0xf8>
    16e6:	57 c0       	rjmp	.+174    	; 0x1796 <vfprintf+0x1a6>
    16e8:	21 c0       	rjmp	.+66     	; 0x172c <vfprintf+0x13c>
    16ea:	f8 01       	movw	r30, r16
    16ec:	80 81       	ld	r24, Z
    16ee:	89 83       	std	Y+1, r24	; 0x01
    16f0:	0e 5f       	subi	r16, 0xFE	; 254
    16f2:	1f 4f       	sbci	r17, 0xFF	; 255
    16f4:	44 24       	eor	r4, r4
    16f6:	43 94       	inc	r4
    16f8:	51 2c       	mov	r5, r1
    16fa:	54 01       	movw	r10, r8
    16fc:	14 c0       	rjmp	.+40     	; 0x1726 <vfprintf+0x136>
    16fe:	38 01       	movw	r6, r16
    1700:	f2 e0       	ldi	r31, 0x02	; 2
    1702:	6f 0e       	add	r6, r31
    1704:	71 1c       	adc	r7, r1
    1706:	f8 01       	movw	r30, r16
    1708:	a0 80       	ld	r10, Z
    170a:	b1 80       	ldd	r11, Z+1	; 0x01
    170c:	26 ff       	sbrs	r18, 6
    170e:	03 c0       	rjmp	.+6      	; 0x1716 <vfprintf+0x126>
    1710:	65 2d       	mov	r22, r5
    1712:	70 e0       	ldi	r23, 0x00	; 0
    1714:	02 c0       	rjmp	.+4      	; 0x171a <vfprintf+0x12a>
    1716:	6f ef       	ldi	r22, 0xFF	; 255
    1718:	7f ef       	ldi	r23, 0xFF	; 255
    171a:	c5 01       	movw	r24, r10
    171c:	2c 87       	std	Y+12, r18	; 0x0c
    171e:	57 d1       	rcall	.+686    	; 0x19ce <strnlen>
    1720:	2c 01       	movw	r4, r24
    1722:	83 01       	movw	r16, r6
    1724:	2c 85       	ldd	r18, Y+12	; 0x0c
    1726:	2f 77       	andi	r18, 0x7F	; 127
    1728:	22 2e       	mov	r2, r18
    172a:	16 c0       	rjmp	.+44     	; 0x1758 <vfprintf+0x168>
    172c:	38 01       	movw	r6, r16
    172e:	f2 e0       	ldi	r31, 0x02	; 2
    1730:	6f 0e       	add	r6, r31
    1732:	71 1c       	adc	r7, r1
    1734:	f8 01       	movw	r30, r16
    1736:	a0 80       	ld	r10, Z
    1738:	b1 80       	ldd	r11, Z+1	; 0x01
    173a:	26 ff       	sbrs	r18, 6
    173c:	03 c0       	rjmp	.+6      	; 0x1744 <vfprintf+0x154>
    173e:	65 2d       	mov	r22, r5
    1740:	70 e0       	ldi	r23, 0x00	; 0
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <vfprintf+0x158>
    1744:	6f ef       	ldi	r22, 0xFF	; 255
    1746:	7f ef       	ldi	r23, 0xFF	; 255
    1748:	c5 01       	movw	r24, r10
    174a:	2c 87       	std	Y+12, r18	; 0x0c
    174c:	2e d1       	rcall	.+604    	; 0x19aa <strnlen_P>
    174e:	2c 01       	movw	r4, r24
    1750:	2c 85       	ldd	r18, Y+12	; 0x0c
    1752:	20 68       	ori	r18, 0x80	; 128
    1754:	22 2e       	mov	r2, r18
    1756:	83 01       	movw	r16, r6
    1758:	23 fc       	sbrc	r2, 3
    175a:	19 c0       	rjmp	.+50     	; 0x178e <vfprintf+0x19e>
    175c:	83 2d       	mov	r24, r3
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	48 16       	cp	r4, r24
    1762:	59 06       	cpc	r5, r25
    1764:	a0 f4       	brcc	.+40     	; 0x178e <vfprintf+0x19e>
    1766:	b7 01       	movw	r22, r14
    1768:	80 e2       	ldi	r24, 0x20	; 32
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	3b d1       	rcall	.+630    	; 0x19e4 <fputc>
    176e:	3a 94       	dec	r3
    1770:	f5 cf       	rjmp	.-22     	; 0x175c <vfprintf+0x16c>
    1772:	f5 01       	movw	r30, r10
    1774:	27 fc       	sbrc	r2, 7
    1776:	85 91       	lpm	r24, Z+
    1778:	27 fe       	sbrs	r2, 7
    177a:	81 91       	ld	r24, Z+
    177c:	5f 01       	movw	r10, r30
    177e:	b7 01       	movw	r22, r14
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	30 d1       	rcall	.+608    	; 0x19e4 <fputc>
    1784:	31 10       	cpse	r3, r1
    1786:	3a 94       	dec	r3
    1788:	f1 e0       	ldi	r31, 0x01	; 1
    178a:	4f 1a       	sub	r4, r31
    178c:	51 08       	sbc	r5, r1
    178e:	41 14       	cp	r4, r1
    1790:	51 04       	cpc	r5, r1
    1792:	79 f7       	brne	.-34     	; 0x1772 <vfprintf+0x182>
    1794:	de c0       	rjmp	.+444    	; 0x1952 <vfprintf+0x362>
    1796:	84 36       	cpi	r24, 0x64	; 100
    1798:	11 f0       	breq	.+4      	; 0x179e <vfprintf+0x1ae>
    179a:	89 36       	cpi	r24, 0x69	; 105
    179c:	31 f5       	brne	.+76     	; 0x17ea <vfprintf+0x1fa>
    179e:	f8 01       	movw	r30, r16
    17a0:	27 ff       	sbrs	r18, 7
    17a2:	07 c0       	rjmp	.+14     	; 0x17b2 <vfprintf+0x1c2>
    17a4:	60 81       	ld	r22, Z
    17a6:	71 81       	ldd	r23, Z+1	; 0x01
    17a8:	82 81       	ldd	r24, Z+2	; 0x02
    17aa:	93 81       	ldd	r25, Z+3	; 0x03
    17ac:	0c 5f       	subi	r16, 0xFC	; 252
    17ae:	1f 4f       	sbci	r17, 0xFF	; 255
    17b0:	08 c0       	rjmp	.+16     	; 0x17c2 <vfprintf+0x1d2>
    17b2:	60 81       	ld	r22, Z
    17b4:	71 81       	ldd	r23, Z+1	; 0x01
    17b6:	88 27       	eor	r24, r24
    17b8:	77 fd       	sbrc	r23, 7
    17ba:	80 95       	com	r24
    17bc:	98 2f       	mov	r25, r24
    17be:	0e 5f       	subi	r16, 0xFE	; 254
    17c0:	1f 4f       	sbci	r17, 0xFF	; 255
    17c2:	2f 76       	andi	r18, 0x6F	; 111
    17c4:	b2 2e       	mov	r11, r18
    17c6:	97 ff       	sbrs	r25, 7
    17c8:	09 c0       	rjmp	.+18     	; 0x17dc <vfprintf+0x1ec>
    17ca:	90 95       	com	r25
    17cc:	80 95       	com	r24
    17ce:	70 95       	com	r23
    17d0:	61 95       	neg	r22
    17d2:	7f 4f       	sbci	r23, 0xFF	; 255
    17d4:	8f 4f       	sbci	r24, 0xFF	; 255
    17d6:	9f 4f       	sbci	r25, 0xFF	; 255
    17d8:	20 68       	ori	r18, 0x80	; 128
    17da:	b2 2e       	mov	r11, r18
    17dc:	2a e0       	ldi	r18, 0x0A	; 10
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	a4 01       	movw	r20, r8
    17e2:	32 d1       	rcall	.+612    	; 0x1a48 <__ultoa_invert>
    17e4:	a8 2e       	mov	r10, r24
    17e6:	a8 18       	sub	r10, r8
    17e8:	43 c0       	rjmp	.+134    	; 0x1870 <vfprintf+0x280>
    17ea:	85 37       	cpi	r24, 0x75	; 117
    17ec:	29 f4       	brne	.+10     	; 0x17f8 <vfprintf+0x208>
    17ee:	2f 7e       	andi	r18, 0xEF	; 239
    17f0:	b2 2e       	mov	r11, r18
    17f2:	2a e0       	ldi	r18, 0x0A	; 10
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	25 c0       	rjmp	.+74     	; 0x1842 <vfprintf+0x252>
    17f8:	f2 2f       	mov	r31, r18
    17fa:	f9 7f       	andi	r31, 0xF9	; 249
    17fc:	bf 2e       	mov	r11, r31
    17fe:	8f 36       	cpi	r24, 0x6F	; 111
    1800:	c1 f0       	breq	.+48     	; 0x1832 <vfprintf+0x242>
    1802:	18 f4       	brcc	.+6      	; 0x180a <vfprintf+0x21a>
    1804:	88 35       	cpi	r24, 0x58	; 88
    1806:	79 f0       	breq	.+30     	; 0x1826 <vfprintf+0x236>
    1808:	ad c0       	rjmp	.+346    	; 0x1964 <vfprintf+0x374>
    180a:	80 37       	cpi	r24, 0x70	; 112
    180c:	19 f0       	breq	.+6      	; 0x1814 <vfprintf+0x224>
    180e:	88 37       	cpi	r24, 0x78	; 120
    1810:	21 f0       	breq	.+8      	; 0x181a <vfprintf+0x22a>
    1812:	a8 c0       	rjmp	.+336    	; 0x1964 <vfprintf+0x374>
    1814:	2f 2f       	mov	r18, r31
    1816:	20 61       	ori	r18, 0x10	; 16
    1818:	b2 2e       	mov	r11, r18
    181a:	b4 fe       	sbrs	r11, 4
    181c:	0d c0       	rjmp	.+26     	; 0x1838 <vfprintf+0x248>
    181e:	8b 2d       	mov	r24, r11
    1820:	84 60       	ori	r24, 0x04	; 4
    1822:	b8 2e       	mov	r11, r24
    1824:	09 c0       	rjmp	.+18     	; 0x1838 <vfprintf+0x248>
    1826:	24 ff       	sbrs	r18, 4
    1828:	0a c0       	rjmp	.+20     	; 0x183e <vfprintf+0x24e>
    182a:	9f 2f       	mov	r25, r31
    182c:	96 60       	ori	r25, 0x06	; 6
    182e:	b9 2e       	mov	r11, r25
    1830:	06 c0       	rjmp	.+12     	; 0x183e <vfprintf+0x24e>
    1832:	28 e0       	ldi	r18, 0x08	; 8
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	05 c0       	rjmp	.+10     	; 0x1842 <vfprintf+0x252>
    1838:	20 e1       	ldi	r18, 0x10	; 16
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <vfprintf+0x252>
    183e:	20 e1       	ldi	r18, 0x10	; 16
    1840:	32 e0       	ldi	r19, 0x02	; 2
    1842:	f8 01       	movw	r30, r16
    1844:	b7 fe       	sbrs	r11, 7
    1846:	07 c0       	rjmp	.+14     	; 0x1856 <vfprintf+0x266>
    1848:	60 81       	ld	r22, Z
    184a:	71 81       	ldd	r23, Z+1	; 0x01
    184c:	82 81       	ldd	r24, Z+2	; 0x02
    184e:	93 81       	ldd	r25, Z+3	; 0x03
    1850:	0c 5f       	subi	r16, 0xFC	; 252
    1852:	1f 4f       	sbci	r17, 0xFF	; 255
    1854:	06 c0       	rjmp	.+12     	; 0x1862 <vfprintf+0x272>
    1856:	60 81       	ld	r22, Z
    1858:	71 81       	ldd	r23, Z+1	; 0x01
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	0e 5f       	subi	r16, 0xFE	; 254
    1860:	1f 4f       	sbci	r17, 0xFF	; 255
    1862:	a4 01       	movw	r20, r8
    1864:	f1 d0       	rcall	.+482    	; 0x1a48 <__ultoa_invert>
    1866:	a8 2e       	mov	r10, r24
    1868:	a8 18       	sub	r10, r8
    186a:	fb 2d       	mov	r31, r11
    186c:	ff 77       	andi	r31, 0x7F	; 127
    186e:	bf 2e       	mov	r11, r31
    1870:	b6 fe       	sbrs	r11, 6
    1872:	0b c0       	rjmp	.+22     	; 0x188a <vfprintf+0x29a>
    1874:	2b 2d       	mov	r18, r11
    1876:	2e 7f       	andi	r18, 0xFE	; 254
    1878:	a5 14       	cp	r10, r5
    187a:	50 f4       	brcc	.+20     	; 0x1890 <vfprintf+0x2a0>
    187c:	b4 fe       	sbrs	r11, 4
    187e:	0a c0       	rjmp	.+20     	; 0x1894 <vfprintf+0x2a4>
    1880:	b2 fc       	sbrc	r11, 2
    1882:	08 c0       	rjmp	.+16     	; 0x1894 <vfprintf+0x2a4>
    1884:	2b 2d       	mov	r18, r11
    1886:	2e 7e       	andi	r18, 0xEE	; 238
    1888:	05 c0       	rjmp	.+10     	; 0x1894 <vfprintf+0x2a4>
    188a:	7a 2c       	mov	r7, r10
    188c:	2b 2d       	mov	r18, r11
    188e:	03 c0       	rjmp	.+6      	; 0x1896 <vfprintf+0x2a6>
    1890:	7a 2c       	mov	r7, r10
    1892:	01 c0       	rjmp	.+2      	; 0x1896 <vfprintf+0x2a6>
    1894:	75 2c       	mov	r7, r5
    1896:	24 ff       	sbrs	r18, 4
    1898:	0d c0       	rjmp	.+26     	; 0x18b4 <vfprintf+0x2c4>
    189a:	fe 01       	movw	r30, r28
    189c:	ea 0d       	add	r30, r10
    189e:	f1 1d       	adc	r31, r1
    18a0:	80 81       	ld	r24, Z
    18a2:	80 33       	cpi	r24, 0x30	; 48
    18a4:	11 f4       	brne	.+4      	; 0x18aa <vfprintf+0x2ba>
    18a6:	29 7e       	andi	r18, 0xE9	; 233
    18a8:	09 c0       	rjmp	.+18     	; 0x18bc <vfprintf+0x2cc>
    18aa:	22 ff       	sbrs	r18, 2
    18ac:	06 c0       	rjmp	.+12     	; 0x18ba <vfprintf+0x2ca>
    18ae:	73 94       	inc	r7
    18b0:	73 94       	inc	r7
    18b2:	04 c0       	rjmp	.+8      	; 0x18bc <vfprintf+0x2cc>
    18b4:	82 2f       	mov	r24, r18
    18b6:	86 78       	andi	r24, 0x86	; 134
    18b8:	09 f0       	breq	.+2      	; 0x18bc <vfprintf+0x2cc>
    18ba:	73 94       	inc	r7
    18bc:	23 fd       	sbrc	r18, 3
    18be:	12 c0       	rjmp	.+36     	; 0x18e4 <vfprintf+0x2f4>
    18c0:	20 ff       	sbrs	r18, 0
    18c2:	06 c0       	rjmp	.+12     	; 0x18d0 <vfprintf+0x2e0>
    18c4:	5a 2c       	mov	r5, r10
    18c6:	73 14       	cp	r7, r3
    18c8:	18 f4       	brcc	.+6      	; 0x18d0 <vfprintf+0x2e0>
    18ca:	53 0c       	add	r5, r3
    18cc:	57 18       	sub	r5, r7
    18ce:	73 2c       	mov	r7, r3
    18d0:	73 14       	cp	r7, r3
    18d2:	60 f4       	brcc	.+24     	; 0x18ec <vfprintf+0x2fc>
    18d4:	b7 01       	movw	r22, r14
    18d6:	80 e2       	ldi	r24, 0x20	; 32
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	2c 87       	std	Y+12, r18	; 0x0c
    18dc:	83 d0       	rcall	.+262    	; 0x19e4 <fputc>
    18de:	73 94       	inc	r7
    18e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    18e2:	f6 cf       	rjmp	.-20     	; 0x18d0 <vfprintf+0x2e0>
    18e4:	73 14       	cp	r7, r3
    18e6:	10 f4       	brcc	.+4      	; 0x18ec <vfprintf+0x2fc>
    18e8:	37 18       	sub	r3, r7
    18ea:	01 c0       	rjmp	.+2      	; 0x18ee <vfprintf+0x2fe>
    18ec:	31 2c       	mov	r3, r1
    18ee:	24 ff       	sbrs	r18, 4
    18f0:	11 c0       	rjmp	.+34     	; 0x1914 <vfprintf+0x324>
    18f2:	b7 01       	movw	r22, r14
    18f4:	80 e3       	ldi	r24, 0x30	; 48
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	2c 87       	std	Y+12, r18	; 0x0c
    18fa:	74 d0       	rcall	.+232    	; 0x19e4 <fputc>
    18fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    18fe:	22 ff       	sbrs	r18, 2
    1900:	16 c0       	rjmp	.+44     	; 0x192e <vfprintf+0x33e>
    1902:	21 ff       	sbrs	r18, 1
    1904:	03 c0       	rjmp	.+6      	; 0x190c <vfprintf+0x31c>
    1906:	88 e5       	ldi	r24, 0x58	; 88
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <vfprintf+0x320>
    190c:	88 e7       	ldi	r24, 0x78	; 120
    190e:	90 e0       	ldi	r25, 0x00	; 0
    1910:	b7 01       	movw	r22, r14
    1912:	0c c0       	rjmp	.+24     	; 0x192c <vfprintf+0x33c>
    1914:	82 2f       	mov	r24, r18
    1916:	86 78       	andi	r24, 0x86	; 134
    1918:	51 f0       	breq	.+20     	; 0x192e <vfprintf+0x33e>
    191a:	21 fd       	sbrc	r18, 1
    191c:	02 c0       	rjmp	.+4      	; 0x1922 <vfprintf+0x332>
    191e:	80 e2       	ldi	r24, 0x20	; 32
    1920:	01 c0       	rjmp	.+2      	; 0x1924 <vfprintf+0x334>
    1922:	8b e2       	ldi	r24, 0x2B	; 43
    1924:	27 fd       	sbrc	r18, 7
    1926:	8d e2       	ldi	r24, 0x2D	; 45
    1928:	b7 01       	movw	r22, r14
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	5b d0       	rcall	.+182    	; 0x19e4 <fputc>
    192e:	a5 14       	cp	r10, r5
    1930:	30 f4       	brcc	.+12     	; 0x193e <vfprintf+0x34e>
    1932:	b7 01       	movw	r22, r14
    1934:	80 e3       	ldi	r24, 0x30	; 48
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	55 d0       	rcall	.+170    	; 0x19e4 <fputc>
    193a:	5a 94       	dec	r5
    193c:	f8 cf       	rjmp	.-16     	; 0x192e <vfprintf+0x33e>
    193e:	aa 94       	dec	r10
    1940:	f4 01       	movw	r30, r8
    1942:	ea 0d       	add	r30, r10
    1944:	f1 1d       	adc	r31, r1
    1946:	80 81       	ld	r24, Z
    1948:	b7 01       	movw	r22, r14
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	4b d0       	rcall	.+150    	; 0x19e4 <fputc>
    194e:	a1 10       	cpse	r10, r1
    1950:	f6 cf       	rjmp	.-20     	; 0x193e <vfprintf+0x34e>
    1952:	33 20       	and	r3, r3
    1954:	09 f4       	brne	.+2      	; 0x1958 <vfprintf+0x368>
    1956:	5d ce       	rjmp	.-838    	; 0x1612 <vfprintf+0x22>
    1958:	b7 01       	movw	r22, r14
    195a:	80 e2       	ldi	r24, 0x20	; 32
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	42 d0       	rcall	.+132    	; 0x19e4 <fputc>
    1960:	3a 94       	dec	r3
    1962:	f7 cf       	rjmp	.-18     	; 0x1952 <vfprintf+0x362>
    1964:	f7 01       	movw	r30, r14
    1966:	86 81       	ldd	r24, Z+6	; 0x06
    1968:	97 81       	ldd	r25, Z+7	; 0x07
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <vfprintf+0x380>
    196c:	8f ef       	ldi	r24, 0xFF	; 255
    196e:	9f ef       	ldi	r25, 0xFF	; 255
    1970:	2c 96       	adiw	r28, 0x0c	; 12
    1972:	e2 e1       	ldi	r30, 0x12	; 18
    1974:	0f c1       	rjmp	.+542    	; 0x1b94 <__epilogue_restores__>

00001976 <calloc>:
    1976:	0f 93       	push	r16
    1978:	1f 93       	push	r17
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	86 9f       	mul	r24, r22
    1980:	80 01       	movw	r16, r0
    1982:	87 9f       	mul	r24, r23
    1984:	10 0d       	add	r17, r0
    1986:	96 9f       	mul	r25, r22
    1988:	10 0d       	add	r17, r0
    198a:	11 24       	eor	r1, r1
    198c:	c8 01       	movw	r24, r16
    198e:	2a dc       	rcall	.-1964   	; 0x11e4 <malloc>
    1990:	ec 01       	movw	r28, r24
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	21 f0       	breq	.+8      	; 0x199e <calloc+0x28>
    1996:	a8 01       	movw	r20, r16
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	11 d0       	rcall	.+34     	; 0x19c0 <memset>
    199e:	ce 01       	movw	r24, r28
    19a0:	df 91       	pop	r29
    19a2:	cf 91       	pop	r28
    19a4:	1f 91       	pop	r17
    19a6:	0f 91       	pop	r16
    19a8:	08 95       	ret

000019aa <strnlen_P>:
    19aa:	fc 01       	movw	r30, r24
    19ac:	05 90       	lpm	r0, Z+
    19ae:	61 50       	subi	r22, 0x01	; 1
    19b0:	70 40       	sbci	r23, 0x00	; 0
    19b2:	01 10       	cpse	r0, r1
    19b4:	d8 f7       	brcc	.-10     	; 0x19ac <strnlen_P+0x2>
    19b6:	80 95       	com	r24
    19b8:	90 95       	com	r25
    19ba:	8e 0f       	add	r24, r30
    19bc:	9f 1f       	adc	r25, r31
    19be:	08 95       	ret

000019c0 <memset>:
    19c0:	dc 01       	movw	r26, r24
    19c2:	01 c0       	rjmp	.+2      	; 0x19c6 <memset+0x6>
    19c4:	6d 93       	st	X+, r22
    19c6:	41 50       	subi	r20, 0x01	; 1
    19c8:	50 40       	sbci	r21, 0x00	; 0
    19ca:	e0 f7       	brcc	.-8      	; 0x19c4 <memset+0x4>
    19cc:	08 95       	ret

000019ce <strnlen>:
    19ce:	fc 01       	movw	r30, r24
    19d0:	61 50       	subi	r22, 0x01	; 1
    19d2:	70 40       	sbci	r23, 0x00	; 0
    19d4:	01 90       	ld	r0, Z+
    19d6:	01 10       	cpse	r0, r1
    19d8:	d8 f7       	brcc	.-10     	; 0x19d0 <strnlen+0x2>
    19da:	80 95       	com	r24
    19dc:	90 95       	com	r25
    19de:	8e 0f       	add	r24, r30
    19e0:	9f 1f       	adc	r25, r31
    19e2:	08 95       	ret

000019e4 <fputc>:
    19e4:	0f 93       	push	r16
    19e6:	1f 93       	push	r17
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	18 2f       	mov	r17, r24
    19ee:	09 2f       	mov	r16, r25
    19f0:	eb 01       	movw	r28, r22
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	81 fd       	sbrc	r24, 1
    19f6:	03 c0       	rjmp	.+6      	; 0x19fe <fputc+0x1a>
    19f8:	8f ef       	ldi	r24, 0xFF	; 255
    19fa:	9f ef       	ldi	r25, 0xFF	; 255
    19fc:	20 c0       	rjmp	.+64     	; 0x1a3e <fputc+0x5a>
    19fe:	82 ff       	sbrs	r24, 2
    1a00:	10 c0       	rjmp	.+32     	; 0x1a22 <fputc+0x3e>
    1a02:	4e 81       	ldd	r20, Y+6	; 0x06
    1a04:	5f 81       	ldd	r21, Y+7	; 0x07
    1a06:	2c 81       	ldd	r18, Y+4	; 0x04
    1a08:	3d 81       	ldd	r19, Y+5	; 0x05
    1a0a:	42 17       	cp	r20, r18
    1a0c:	53 07       	cpc	r21, r19
    1a0e:	7c f4       	brge	.+30     	; 0x1a2e <fputc+0x4a>
    1a10:	e8 81       	ld	r30, Y
    1a12:	f9 81       	ldd	r31, Y+1	; 0x01
    1a14:	9f 01       	movw	r18, r30
    1a16:	2f 5f       	subi	r18, 0xFF	; 255
    1a18:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1a:	39 83       	std	Y+1, r19	; 0x01
    1a1c:	28 83       	st	Y, r18
    1a1e:	10 83       	st	Z, r17
    1a20:	06 c0       	rjmp	.+12     	; 0x1a2e <fputc+0x4a>
    1a22:	e8 85       	ldd	r30, Y+8	; 0x08
    1a24:	f9 85       	ldd	r31, Y+9	; 0x09
    1a26:	81 2f       	mov	r24, r17
    1a28:	09 95       	icall
    1a2a:	89 2b       	or	r24, r25
    1a2c:	29 f7       	brne	.-54     	; 0x19f8 <fputc+0x14>
    1a2e:	2e 81       	ldd	r18, Y+6	; 0x06
    1a30:	3f 81       	ldd	r19, Y+7	; 0x07
    1a32:	2f 5f       	subi	r18, 0xFF	; 255
    1a34:	3f 4f       	sbci	r19, 0xFF	; 255
    1a36:	3f 83       	std	Y+7, r19	; 0x07
    1a38:	2e 83       	std	Y+6, r18	; 0x06
    1a3a:	81 2f       	mov	r24, r17
    1a3c:	90 2f       	mov	r25, r16
    1a3e:	df 91       	pop	r29
    1a40:	cf 91       	pop	r28
    1a42:	1f 91       	pop	r17
    1a44:	0f 91       	pop	r16
    1a46:	08 95       	ret

00001a48 <__ultoa_invert>:
    1a48:	fa 01       	movw	r30, r20
    1a4a:	aa 27       	eor	r26, r26
    1a4c:	28 30       	cpi	r18, 0x08	; 8
    1a4e:	51 f1       	breq	.+84     	; 0x1aa4 <__ultoa_invert+0x5c>
    1a50:	20 31       	cpi	r18, 0x10	; 16
    1a52:	81 f1       	breq	.+96     	; 0x1ab4 <__ultoa_invert+0x6c>
    1a54:	e8 94       	clt
    1a56:	6f 93       	push	r22
    1a58:	6e 7f       	andi	r22, 0xFE	; 254
    1a5a:	6e 5f       	subi	r22, 0xFE	; 254
    1a5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a60:	9f 4f       	sbci	r25, 0xFF	; 255
    1a62:	af 4f       	sbci	r26, 0xFF	; 255
    1a64:	b1 e0       	ldi	r27, 0x01	; 1
    1a66:	3e d0       	rcall	.+124    	; 0x1ae4 <__ultoa_invert+0x9c>
    1a68:	b4 e0       	ldi	r27, 0x04	; 4
    1a6a:	3c d0       	rcall	.+120    	; 0x1ae4 <__ultoa_invert+0x9c>
    1a6c:	67 0f       	add	r22, r23
    1a6e:	78 1f       	adc	r23, r24
    1a70:	89 1f       	adc	r24, r25
    1a72:	9a 1f       	adc	r25, r26
    1a74:	a1 1d       	adc	r26, r1
    1a76:	68 0f       	add	r22, r24
    1a78:	79 1f       	adc	r23, r25
    1a7a:	8a 1f       	adc	r24, r26
    1a7c:	91 1d       	adc	r25, r1
    1a7e:	a1 1d       	adc	r26, r1
    1a80:	6a 0f       	add	r22, r26
    1a82:	71 1d       	adc	r23, r1
    1a84:	81 1d       	adc	r24, r1
    1a86:	91 1d       	adc	r25, r1
    1a88:	a1 1d       	adc	r26, r1
    1a8a:	20 d0       	rcall	.+64     	; 0x1acc <__ultoa_invert+0x84>
    1a8c:	09 f4       	brne	.+2      	; 0x1a90 <__ultoa_invert+0x48>
    1a8e:	68 94       	set
    1a90:	3f 91       	pop	r19
    1a92:	2a e0       	ldi	r18, 0x0A	; 10
    1a94:	26 9f       	mul	r18, r22
    1a96:	11 24       	eor	r1, r1
    1a98:	30 19       	sub	r19, r0
    1a9a:	30 5d       	subi	r19, 0xD0	; 208
    1a9c:	31 93       	st	Z+, r19
    1a9e:	de f6       	brtc	.-74     	; 0x1a56 <__ultoa_invert+0xe>
    1aa0:	cf 01       	movw	r24, r30
    1aa2:	08 95       	ret
    1aa4:	46 2f       	mov	r20, r22
    1aa6:	47 70       	andi	r20, 0x07	; 7
    1aa8:	40 5d       	subi	r20, 0xD0	; 208
    1aaa:	41 93       	st	Z+, r20
    1aac:	b3 e0       	ldi	r27, 0x03	; 3
    1aae:	0f d0       	rcall	.+30     	; 0x1ace <__ultoa_invert+0x86>
    1ab0:	c9 f7       	brne	.-14     	; 0x1aa4 <__ultoa_invert+0x5c>
    1ab2:	f6 cf       	rjmp	.-20     	; 0x1aa0 <__ultoa_invert+0x58>
    1ab4:	46 2f       	mov	r20, r22
    1ab6:	4f 70       	andi	r20, 0x0F	; 15
    1ab8:	40 5d       	subi	r20, 0xD0	; 208
    1aba:	4a 33       	cpi	r20, 0x3A	; 58
    1abc:	18 f0       	brcs	.+6      	; 0x1ac4 <__ultoa_invert+0x7c>
    1abe:	49 5d       	subi	r20, 0xD9	; 217
    1ac0:	31 fd       	sbrc	r19, 1
    1ac2:	40 52       	subi	r20, 0x20	; 32
    1ac4:	41 93       	st	Z+, r20
    1ac6:	02 d0       	rcall	.+4      	; 0x1acc <__ultoa_invert+0x84>
    1ac8:	a9 f7       	brne	.-22     	; 0x1ab4 <__ultoa_invert+0x6c>
    1aca:	ea cf       	rjmp	.-44     	; 0x1aa0 <__ultoa_invert+0x58>
    1acc:	b4 e0       	ldi	r27, 0x04	; 4
    1ace:	a6 95       	lsr	r26
    1ad0:	97 95       	ror	r25
    1ad2:	87 95       	ror	r24
    1ad4:	77 95       	ror	r23
    1ad6:	67 95       	ror	r22
    1ad8:	ba 95       	dec	r27
    1ada:	c9 f7       	brne	.-14     	; 0x1ace <__ultoa_invert+0x86>
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	61 05       	cpc	r22, r1
    1ae0:	71 05       	cpc	r23, r1
    1ae2:	08 95       	ret
    1ae4:	9b 01       	movw	r18, r22
    1ae6:	ac 01       	movw	r20, r24
    1ae8:	0a 2e       	mov	r0, r26
    1aea:	06 94       	lsr	r0
    1aec:	57 95       	ror	r21
    1aee:	47 95       	ror	r20
    1af0:	37 95       	ror	r19
    1af2:	27 95       	ror	r18
    1af4:	ba 95       	dec	r27
    1af6:	c9 f7       	brne	.-14     	; 0x1aea <__ultoa_invert+0xa2>
    1af8:	62 0f       	add	r22, r18
    1afa:	73 1f       	adc	r23, r19
    1afc:	84 1f       	adc	r24, r20
    1afe:	95 1f       	adc	r25, r21
    1b00:	a0 1d       	adc	r26, r0
    1b02:	08 95       	ret

00001b04 <__divmodsi4>:
    1b04:	05 2e       	mov	r0, r21
    1b06:	97 fb       	bst	r25, 7
    1b08:	16 f4       	brtc	.+4      	; 0x1b0e <__divmodsi4+0xa>
    1b0a:	00 94       	com	r0
    1b0c:	0f d0       	rcall	.+30     	; 0x1b2c <__negsi2>
    1b0e:	57 fd       	sbrc	r21, 7
    1b10:	05 d0       	rcall	.+10     	; 0x1b1c <__divmodsi4_neg2>
    1b12:	5b d0       	rcall	.+182    	; 0x1bca <__udivmodsi4>
    1b14:	07 fc       	sbrc	r0, 7
    1b16:	02 d0       	rcall	.+4      	; 0x1b1c <__divmodsi4_neg2>
    1b18:	46 f4       	brtc	.+16     	; 0x1b2a <__divmodsi4_exit>
    1b1a:	08 c0       	rjmp	.+16     	; 0x1b2c <__negsi2>

00001b1c <__divmodsi4_neg2>:
    1b1c:	50 95       	com	r21
    1b1e:	40 95       	com	r20
    1b20:	30 95       	com	r19
    1b22:	21 95       	neg	r18
    1b24:	3f 4f       	sbci	r19, 0xFF	; 255
    1b26:	4f 4f       	sbci	r20, 0xFF	; 255
    1b28:	5f 4f       	sbci	r21, 0xFF	; 255

00001b2a <__divmodsi4_exit>:
    1b2a:	08 95       	ret

00001b2c <__negsi2>:
    1b2c:	90 95       	com	r25
    1b2e:	80 95       	com	r24
    1b30:	70 95       	com	r23
    1b32:	61 95       	neg	r22
    1b34:	7f 4f       	sbci	r23, 0xFF	; 255
    1b36:	8f 4f       	sbci	r24, 0xFF	; 255
    1b38:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3a:	08 95       	ret

00001b3c <__muluhisi3>:
    1b3c:	68 d0       	rcall	.+208    	; 0x1c0e <__umulhisi3>
    1b3e:	a5 9f       	mul	r26, r21
    1b40:	90 0d       	add	r25, r0
    1b42:	b4 9f       	mul	r27, r20
    1b44:	90 0d       	add	r25, r0
    1b46:	a4 9f       	mul	r26, r20
    1b48:	80 0d       	add	r24, r0
    1b4a:	91 1d       	adc	r25, r1
    1b4c:	11 24       	eor	r1, r1
    1b4e:	08 95       	ret

00001b50 <__mulshisi3>:
    1b50:	b7 ff       	sbrs	r27, 7
    1b52:	f4 cf       	rjmp	.-24     	; 0x1b3c <__muluhisi3>

00001b54 <__mulohisi3>:
    1b54:	f3 df       	rcall	.-26     	; 0x1b3c <__muluhisi3>
    1b56:	82 1b       	sub	r24, r18
    1b58:	93 0b       	sbc	r25, r19
    1b5a:	08 95       	ret

00001b5c <__prologue_saves__>:
    1b5c:	2f 92       	push	r2
    1b5e:	3f 92       	push	r3
    1b60:	4f 92       	push	r4
    1b62:	5f 92       	push	r5
    1b64:	6f 92       	push	r6
    1b66:	7f 92       	push	r7
    1b68:	8f 92       	push	r8
    1b6a:	9f 92       	push	r9
    1b6c:	af 92       	push	r10
    1b6e:	bf 92       	push	r11
    1b70:	cf 92       	push	r12
    1b72:	df 92       	push	r13
    1b74:	ef 92       	push	r14
    1b76:	ff 92       	push	r15
    1b78:	0f 93       	push	r16
    1b7a:	1f 93       	push	r17
    1b7c:	cf 93       	push	r28
    1b7e:	df 93       	push	r29
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
    1b84:	ca 1b       	sub	r28, r26
    1b86:	db 0b       	sbc	r29, r27
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	09 94       	ijmp

00001b94 <__epilogue_restores__>:
    1b94:	2a 88       	ldd	r2, Y+18	; 0x12
    1b96:	39 88       	ldd	r3, Y+17	; 0x11
    1b98:	48 88       	ldd	r4, Y+16	; 0x10
    1b9a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b9c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b9e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ba0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ba2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ba4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ba6:	b9 84       	ldd	r11, Y+9	; 0x09
    1ba8:	c8 84       	ldd	r12, Y+8	; 0x08
    1baa:	df 80       	ldd	r13, Y+7	; 0x07
    1bac:	ee 80       	ldd	r14, Y+6	; 0x06
    1bae:	fd 80       	ldd	r15, Y+5	; 0x05
    1bb0:	0c 81       	ldd	r16, Y+4	; 0x04
    1bb2:	1b 81       	ldd	r17, Y+3	; 0x03
    1bb4:	aa 81       	ldd	r26, Y+2	; 0x02
    1bb6:	b9 81       	ldd	r27, Y+1	; 0x01
    1bb8:	ce 0f       	add	r28, r30
    1bba:	d1 1d       	adc	r29, r1
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	ed 01       	movw	r28, r26
    1bc8:	08 95       	ret

00001bca <__udivmodsi4>:
    1bca:	a1 e2       	ldi	r26, 0x21	; 33
    1bcc:	1a 2e       	mov	r1, r26
    1bce:	aa 1b       	sub	r26, r26
    1bd0:	bb 1b       	sub	r27, r27
    1bd2:	fd 01       	movw	r30, r26
    1bd4:	0d c0       	rjmp	.+26     	; 0x1bf0 <__udivmodsi4_ep>

00001bd6 <__udivmodsi4_loop>:
    1bd6:	aa 1f       	adc	r26, r26
    1bd8:	bb 1f       	adc	r27, r27
    1bda:	ee 1f       	adc	r30, r30
    1bdc:	ff 1f       	adc	r31, r31
    1bde:	a2 17       	cp	r26, r18
    1be0:	b3 07       	cpc	r27, r19
    1be2:	e4 07       	cpc	r30, r20
    1be4:	f5 07       	cpc	r31, r21
    1be6:	20 f0       	brcs	.+8      	; 0x1bf0 <__udivmodsi4_ep>
    1be8:	a2 1b       	sub	r26, r18
    1bea:	b3 0b       	sbc	r27, r19
    1bec:	e4 0b       	sbc	r30, r20
    1bee:	f5 0b       	sbc	r31, r21

00001bf0 <__udivmodsi4_ep>:
    1bf0:	66 1f       	adc	r22, r22
    1bf2:	77 1f       	adc	r23, r23
    1bf4:	88 1f       	adc	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	1a 94       	dec	r1
    1bfa:	69 f7       	brne	.-38     	; 0x1bd6 <__udivmodsi4_loop>
    1bfc:	60 95       	com	r22
    1bfe:	70 95       	com	r23
    1c00:	80 95       	com	r24
    1c02:	90 95       	com	r25
    1c04:	9b 01       	movw	r18, r22
    1c06:	ac 01       	movw	r20, r24
    1c08:	bd 01       	movw	r22, r26
    1c0a:	cf 01       	movw	r24, r30
    1c0c:	08 95       	ret

00001c0e <__umulhisi3>:
    1c0e:	a2 9f       	mul	r26, r18
    1c10:	b0 01       	movw	r22, r0
    1c12:	b3 9f       	mul	r27, r19
    1c14:	c0 01       	movw	r24, r0
    1c16:	a3 9f       	mul	r26, r19
    1c18:	70 0d       	add	r23, r0
    1c1a:	81 1d       	adc	r24, r1
    1c1c:	11 24       	eor	r1, r1
    1c1e:	91 1d       	adc	r25, r1
    1c20:	b2 9f       	mul	r27, r18
    1c22:	70 0d       	add	r23, r0
    1c24:	81 1d       	adc	r24, r1
    1c26:	11 24       	eor	r1, r1
    1c28:	91 1d       	adc	r25, r1
    1c2a:	08 95       	ret

00001c2c <_exit>:
    1c2c:	f8 94       	cli

00001c2e <__stop_program>:
    1c2e:	ff cf       	rjmp	.-2      	; 0x1c2e <__stop_program>
