
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000210  00800100  00001a44  00001ad8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  00800310  00800310  00001ce8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000300  00000000  00000000  00001d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003559  00000000  00000000  00002044  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001107  00000000  00000000  0000559d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000015dc  00000000  00000000  000066a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000760  00000000  00000000  00007c80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000db0  00000000  00000000  000083e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001a9e  00000000  00000000  00009190  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000290  00000000  00000000  0000ac2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	fa c1       	rjmp	.+1012   	; 0x402 <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <MENU_buildMenus+0x146>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e4 e4       	ldi	r30, 0x44	; 68
     37c:	fa e1       	ldi	r31, 0x1A	; 26
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a0 31       	cpi	r26, 0x10	; 16
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a0 e1       	ldi	r26, 0x10	; 16
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a9 33       	cpi	r26, 0x39	; 57
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	7e d0       	rcall	.+252    	; 0x498 <main>
     39c:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 29 03 	sts	0x0329, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 14 03 	sts	0x0314, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 13 03 	sts	0x0313, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 11 03 	sts	0x0311, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_3>:
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	8f 93       	push	r24
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 10 03 	sts	0x0310, r24
     414:	8f 91       	pop	r24
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <init>:
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	1f e1       	ldi	r17, 0x1F	; 31
     42a:	e1 2e       	mov	r14, r17
     42c:	f1 2c       	mov	r15, r1
     42e:	00 e0       	ldi	r16, 0x00	; 0
     430:	10 e0       	ldi	r17, 0x00	; 0
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	4b e4       	ldi	r20, 0x4B	; 75
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e8       	ldi	r22, 0x80	; 128
     43c:	75 e2       	ldi	r23, 0x25	; 37
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	28 d6       	rcall	.+3152   	; 0x1094 <uartInit>
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	39 d0       	rcall	.+114    	; 0x4ba <enableXMEM>
     448:	ee d5       	rcall	.+3036   	; 0x1026 <SLI_init>
     44a:	49 d0       	rcall	.+146    	; 0x4de <JOY_init>
     44c:	e9 d4       	rcall	.+2514   	; 0xe20 <OLED_init>
     44e:	f4 d5       	rcall	.+3048   	; 0x1038 <SPI_init>
     450:	8b b7       	in	r24, 0x3b	; 59
     452:	80 64       	ori	r24, 0x40	; 64
     454:	8b bf       	out	0x3b, r24	; 59
     456:	85 b7       	in	r24, 0x35	; 53
     458:	82 60       	ori	r24, 0x02	; 2
     45a:	85 bf       	out	0x35, r24	; 53
     45c:	85 b7       	in	r24, 0x35	; 53
     45e:	8e 7f       	andi	r24, 0xFE	; 254
     460:	85 bf       	out	0x35, r24	; 53
     462:	8b 98       	cbi	0x11, 3	; 17
     464:	93 9a       	sbi	0x12, 3	; 18
     466:	8b b7       	in	r24, 0x3b	; 59
     468:	80 68       	ori	r24, 0x80	; 128
     46a:	8b bf       	out	0x3b, r24	; 59
     46c:	85 b7       	in	r24, 0x35	; 53
     46e:	88 60       	ori	r24, 0x08	; 8
     470:	85 bf       	out	0x35, r24	; 53
     472:	85 b7       	in	r24, 0x35	; 53
     474:	8b 7f       	andi	r24, 0xFB	; 251
     476:	85 bf       	out	0x35, r24	; 53
     478:	32 98       	cbi	0x06, 2	; 6
     47a:	3a 98       	cbi	0x07, 2	; 7
     47c:	b8 98       	cbi	0x17, 0	; 23
     47e:	c0 98       	cbi	0x18, 0	; 24
     480:	86 b7       	in	r24, 0x36	; 54
     482:	8e 7f       	andi	r24, 0xFE	; 254
     484:	86 bf       	out	0x36, r24	; 54
     486:	8b b7       	in	r24, 0x3b	; 59
     488:	81 60       	ori	r24, 0x01	; 1
     48a:	8b bf       	out	0x3b, r24	; 59
     48c:	78 94       	sei
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	ff 90       	pop	r15
     494:	ef 90       	pop	r14
     496:	08 95       	ret

00000498 <main>:
=======================MAIN FUNCTION=========================
*/

int main(void)
{
	init();
     498:	c3 df       	rcall	.-122    	; 0x420 <init>

	MCP2515_init();
     49a:	1b d2       	rcall	.+1078   	; 0x8d2 <MCP2515_init>
	//}

    while(1)
    {
		// statusMultifunctionBoard();
		JOY_getDirection();
     49c:	e0 d1       	rcall	.+960    	; 0x85e <JOY_getDirection>

		// todo: remove! will be included in the menu driver later
		if(JOYcalibFlag)
     49e:	80 91 12 03 	lds	r24, 0x0312
     4a2:	88 23       	and	r24, r24
     4a4:	19 f0       	breq	.+6      	; 0x4ac <main+0x14>
		{
			//run joystick calibration
			JOY_calibrate();
     4a6:	2e d0       	rcall	.+92     	; 0x504 <JOY_calibrate>
			JOYcalibFlag = 0;
     4a8:	10 92 12 03 	sts	0x0312, r1
		}

		if(activateMenuFlag)
     4ac:	80 91 11 03 	lds	r24, 0x0311
     4b0:	81 11       	cpse	r24, r1
		{
			MENU_activate();
     4b2:	6d d4       	rcall	.+2266   	; 0xd8e <MENU_activate>
		}

		if(SPI_ReceivedByte)
     4b4:	80 91 2a 03 	lds	r24, 0x032A
		{
			//TODO: check which slave caused the interrupt. SS_CAN_CONTROLLER assumed now
// 			SPI_ReceivedByte = SPI_receive(SS_CAN_CONTROLLER);
// 			printf("SPI received byte: %d\n", SPI_ReceivedByte);
		}
    }
     4b8:	f1 cf       	rjmp	.-30     	; 0x49c <main+0x4>

000004ba <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     4ba:	95 b7       	in	r25, 0x35	; 53
     4bc:	90 68       	ori	r25, 0x80	; 128
     4be:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     4c0:	96 b7       	in	r25, 0x36	; 54
     4c2:	98 60       	ori	r25, 0x08	; 8
     4c4:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     4c6:	88 23       	and	r24, r24
     4c8:	19 f0       	breq	.+6      	; 0x4d0 <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     4ca:	80 b7       	in	r24, 0x30	; 48
     4cc:	80 62       	ori	r24, 0x20	; 32
     4ce:	80 bf       	out	0x30, r24	; 48
     4d0:	08 95       	ret

000004d2 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     4d2:	fc 01       	movw	r30, r24
     4d4:	80 81       	ld	r24, Z
	return val;
}
     4d6:	08 95       	ret

000004d8 <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     4d8:	fc 01       	movw	r30, r24
     4da:	60 83       	st	Z, r22
     4dc:	08 95       	ret

000004de <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     4de:	10 92 17 03 	sts	0x0317, r1
     4e2:	10 92 16 03 	sts	0x0316, r1
	currentPosition.Y_abs = 0;
     4e6:	10 92 19 03 	sts	0x0319, r1
     4ea:	10 92 18 03 	sts	0x0318, r1
	currentPosition.X_per = 0;
     4ee:	10 92 1b 03 	sts	0x031B, r1
     4f2:	10 92 1a 03 	sts	0x031A, r1
	currentPosition.Y_per = 0;
     4f6:	10 92 1d 03 	sts	0x031D, r1
     4fa:	10 92 1c 03 	sts	0x031C, r1
	currentDirection = CENTRE;
     4fe:	10 92 15 03 	sts	0x0315, r1
     502:	08 95       	ret

00000504 <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     504:	cf 93       	push	r28
     506:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     508:	6d d4       	rcall	.+2266   	; 0xde4 <OLED_clear>
     50a:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	4b d4       	rcall	.+2198   	; 0xdaa <OLED_goto>
     514:	84 e1       	ldi	r24, 0x14	; 20
     516:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     518:	23 d5       	rcall	.+2630   	; 0xf60 <OLED_printString>
     51a:	8e e1       	ldi	r24, 0x1E	; 30
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	a2 d7       	rcall	.+3908   	; 0x1464 <puts>
	printf("Move JOY to the right\n");
     520:	2f ef       	ldi	r18, 0xFF	; 255
     522:	4f ef       	ldi	r20, 0xFF	; 255
     524:	52 e0       	ldi	r21, 0x02	; 2
     526:	21 50       	subi	r18, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     528:	40 40       	sbci	r20, 0x00	; 0
     52a:	50 40       	sbci	r21, 0x00	; 0
     52c:	e1 f7       	brne	.-8      	; 0x526 <JOY_calibrate+0x22>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <JOY_calibrate+0x2c>
     530:	00 c0       	rjmp	.+0      	; 0x532 <JOY_calibrate+0x2e>
     532:	c4 e1       	ldi	r28, 0x14	; 20
     534:	d0 e0       	ldi	r29, 0x00	; 0
     536:	60 91 06 01 	lds	r22, 0x0106
     53a:	70 91 07 01 	lds	r23, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     53e:	82 e0       	ldi	r24, 0x02	; 2
     540:	c2 d5       	rcall	.+2948   	; 0x10c6 <ADC_request>
     542:	8f ef       	ldi	r24, 0xFF	; 255
     544:	9f e1       	ldi	r25, 0x1F	; 31
     546:	21 e0       	ldi	r18, 0x01	; 1
     548:	81 50       	subi	r24, 0x01	; 1
     54a:	90 40       	sbci	r25, 0x00	; 0
     54c:	20 40       	sbci	r18, 0x00	; 0
     54e:	e1 f7       	brne	.-8      	; 0x548 <JOY_calibrate+0x44>
     550:	00 c0       	rjmp	.+0      	; 0x552 <JOY_calibrate+0x4e>
     552:	00 00       	nop
     554:	80 91 06 01 	lds	r24, 0x0106
     558:	90 91 07 01 	lds	r25, 0x0107
     55c:	d8 d5       	rcall	.+2992   	; 0x110e <ADC_read>
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     55e:	90 91 0d 01 	lds	r25, 0x010D
     562:	98 17       	cp	r25, r24
     564:	10 f4       	brcc	.+4      	; 0x56a <JOY_calibrate+0x66>
     566:	80 93 0d 01 	sts	0x010D, r24
		
		if(temp > calR) {calR = temp;}
     56a:	21 97       	sbiw	r28, 0x01	; 1
     56c:	20 97       	sbiw	r28, 0x00	; 0
     56e:	19 f7       	brne	.-58     	; 0x536 <JOY_calibrate+0x32>
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	90 e0       	ldi	r25, 0x00	; 0
	OLED_goto(0,0);
	OLED_printString("JOY RIGHT");
	printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     578:	18 d4       	rcall	.+2096   	; 0xdaa <OLED_goto>
     57a:	84 e3       	ldi	r24, 0x34	; 52
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_goto(1,0);
     57c:	91 e0       	ldi	r25, 0x01	; 1
     57e:	f0 d4       	rcall	.+2528   	; 0xf60 <OLED_printString>
     580:	8d e3       	ldi	r24, 0x3D	; 61
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	6f d7       	rcall	.+3806   	; 0x1464 <puts>
     586:	4f ef       	ldi	r20, 0xFF	; 255
	OLED_printString("JOY LEFT");
     588:	5f ef       	ldi	r21, 0xFF	; 255
     58a:	82 e0       	ldi	r24, 0x02	; 2
     58c:	41 50       	subi	r20, 0x01	; 1
     58e:	50 40       	sbci	r21, 0x00	; 0
	printf("Move JOY to the left\n");
     590:	80 40       	sbci	r24, 0x00	; 0
     592:	e1 f7       	brne	.-8      	; 0x58c <JOY_calibrate+0x88>
     594:	00 c0       	rjmp	.+0      	; 0x596 <JOY_calibrate+0x92>
     596:	00 c0       	rjmp	.+0      	; 0x598 <JOY_calibrate+0x94>
     598:	c4 e1       	ldi	r28, 0x14	; 20
     59a:	d0 e0       	ldi	r29, 0x00	; 0
     59c:	60 91 06 01 	lds	r22, 0x0106
     5a0:	70 91 07 01 	lds	r23, 0x0107
     5a4:	82 e0       	ldi	r24, 0x02	; 2
     5a6:	8f d5       	rcall	.+2846   	; 0x10c6 <ADC_request>
     5a8:	9f ef       	ldi	r25, 0xFF	; 255
     5aa:	2f e1       	ldi	r18, 0x1F	; 31
     5ac:	41 e0       	ldi	r20, 0x01	; 1
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     5ae:	91 50       	subi	r25, 0x01	; 1
     5b0:	20 40       	sbci	r18, 0x00	; 0
     5b2:	40 40       	sbci	r20, 0x00	; 0
     5b4:	e1 f7       	brne	.-8      	; 0x5ae <JOY_calibrate+0xaa>
     5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <JOY_calibrate+0xb4>
     5b8:	00 00       	nop
     5ba:	80 91 06 01 	lds	r24, 0x0106
     5be:	90 91 07 01 	lds	r25, 0x0107
     5c2:	a5 d5       	rcall	.+2890   	; 0x110e <ADC_read>
     5c4:	90 91 0c 01 	lds	r25, 0x010C
     5c8:	89 17       	cp	r24, r25
     5ca:	10 f4       	brcc	.+4      	; 0x5d0 <JOY_calibrate+0xcc>
     5cc:	80 93 0c 01 	sts	0x010C, r24
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     5d0:	21 97       	sbiw	r28, 0x01	; 1
     5d2:	20 97       	sbiw	r28, 0x00	; 0
     5d4:	19 f7       	brne	.-58     	; 0x59c <JOY_calibrate+0x98>
     5d6:	60 e0       	ldi	r22, 0x00	; 0
     5d8:	70 e0       	ldi	r23, 0x00	; 0
		
		if(temp < calL) {calL = temp;}
     5da:	82 e0       	ldi	r24, 0x02	; 2
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	e5 d3       	rcall	.+1994   	; 0xdaa <OLED_goto>
     5e0:	82 e5       	ldi	r24, 0x52	; 82
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	bd d4       	rcall	.+2426   	; 0xf60 <OLED_printString>
     5e6:	89 e5       	ldi	r24, 0x59	; 89
	OLED_goto(1,0);
	OLED_printString("JOY LEFT");
	printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	3c d7       	rcall	.+3704   	; 0x1464 <puts>
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_goto(2,0);
     5ec:	5f ef       	ldi	r21, 0xFF	; 255
     5ee:	8f ef       	ldi	r24, 0xFF	; 255
     5f0:	92 e0       	ldi	r25, 0x02	; 2
     5f2:	51 50       	subi	r21, 0x01	; 1
     5f4:	80 40       	sbci	r24, 0x00	; 0
     5f6:	90 40       	sbci	r25, 0x00	; 0
	OLED_printString("JOY UP");
     5f8:	e1 f7       	brne	.-8      	; 0x5f2 <JOY_calibrate+0xee>
     5fa:	00 c0       	rjmp	.+0      	; 0x5fc <JOY_calibrate+0xf8>
     5fc:	00 c0       	rjmp	.+0      	; 0x5fe <JOY_calibrate+0xfa>
     5fe:	c4 e1       	ldi	r28, 0x14	; 20
	printf("Move JOY up\n");
     600:	d0 e0       	ldi	r29, 0x00	; 0
     602:	60 91 06 01 	lds	r22, 0x0106
     606:	70 91 07 01 	lds	r23, 0x0107
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	5c d5       	rcall	.+2744   	; 0x10c6 <ADC_request>
     60e:	2f ef       	ldi	r18, 0xFF	; 255
     610:	4f e1       	ldi	r20, 0x1F	; 31
     612:	51 e0       	ldi	r21, 0x01	; 1
     614:	21 50       	subi	r18, 0x01	; 1
     616:	40 40       	sbci	r20, 0x00	; 0
     618:	50 40       	sbci	r21, 0x00	; 0
     61a:	e1 f7       	brne	.-8      	; 0x614 <JOY_calibrate+0x110>
     61c:	00 c0       	rjmp	.+0      	; 0x61e <JOY_calibrate+0x11a>
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     61e:	00 00       	nop
     620:	80 91 06 01 	lds	r24, 0x0106
     624:	90 91 07 01 	lds	r25, 0x0107
     628:	72 d5       	rcall	.+2788   	; 0x110e <ADC_read>
     62a:	90 91 0b 01 	lds	r25, 0x010B
     62e:	98 17       	cp	r25, r24
     630:	10 f4       	brcc	.+4      	; 0x636 <JOY_calibrate+0x132>
     632:	80 93 0b 01 	sts	0x010B, r24
     636:	21 97       	sbiw	r28, 0x01	; 1
     638:	20 97       	sbiw	r28, 0x00	; 0
     63a:	19 f7       	brne	.-58     	; 0x602 <JOY_calibrate+0xfe>
     63c:	60 e0       	ldi	r22, 0x00	; 0
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     63e:	70 e0       	ldi	r23, 0x00	; 0
     640:	83 e0       	ldi	r24, 0x03	; 3
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	b2 d3       	rcall	.+1892   	; 0xdaa <OLED_goto>
     646:	85 e6       	ldi	r24, 0x65	; 101
     648:	91 e0       	ldi	r25, 0x01	; 1
		
		if(temp > calUp) {calUp = temp;}
     64a:	8a d4       	rcall	.+2324   	; 0xf60 <OLED_printString>
     64c:	8e e6       	ldi	r24, 0x6E	; 110
     64e:	91 e0       	ldi	r25, 0x01	; 1
     650:	09 d7       	rcall	.+3602   	; 0x1464 <puts>
     652:	8f ef       	ldi	r24, 0xFF	; 255
     654:	9f ef       	ldi	r25, 0xFF	; 255
     656:	22 e0       	ldi	r18, 0x02	; 2
	OLED_goto(2,0);
	OLED_printString("JOY UP");
	printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     658:	81 50       	subi	r24, 0x01	; 1
     65a:	90 40       	sbci	r25, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_goto(3,0);
     65c:	20 40       	sbci	r18, 0x00	; 0
     65e:	e1 f7       	brne	.-8      	; 0x658 <JOY_calibrate+0x154>
     660:	00 c0       	rjmp	.+0      	; 0x662 <JOY_calibrate+0x15e>
     662:	00 c0       	rjmp	.+0      	; 0x664 <JOY_calibrate+0x160>
     664:	c4 e1       	ldi	r28, 0x14	; 20
     666:	d0 e0       	ldi	r29, 0x00	; 0
	OLED_printString("JOY DOWN");
     668:	60 91 06 01 	lds	r22, 0x0106
     66c:	70 91 07 01 	lds	r23, 0x0107
	printf("Move JOY down\n");
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	29 d5       	rcall	.+2642   	; 0x10c6 <ADC_request>
     674:	4f ef       	ldi	r20, 0xFF	; 255
     676:	5f e1       	ldi	r21, 0x1F	; 31
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	41 50       	subi	r20, 0x01	; 1
     67c:	50 40       	sbci	r21, 0x00	; 0
     67e:	80 40       	sbci	r24, 0x00	; 0
     680:	e1 f7       	brne	.-8      	; 0x67a <JOY_calibrate+0x176>
     682:	00 c0       	rjmp	.+0      	; 0x684 <JOY_calibrate+0x180>
     684:	00 00       	nop
     686:	80 91 06 01 	lds	r24, 0x0106
     68a:	90 91 07 01 	lds	r25, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     68e:	3f d5       	rcall	.+2686   	; 0x110e <ADC_read>
     690:	90 91 0a 01 	lds	r25, 0x010A
     694:	89 17       	cp	r24, r25
     696:	10 f4       	brcc	.+4      	; 0x69c <JOY_calibrate+0x198>
     698:	80 93 0a 01 	sts	0x010A, r24
     69c:	21 97       	sbiw	r28, 0x01	; 1
     69e:	20 97       	sbiw	r28, 0x00	; 0
     6a0:	19 f7       	brne	.-58     	; 0x668 <JOY_calibrate+0x164>
     6a2:	30 91 0a 01 	lds	r19, 0x010A
     6a6:	20 91 0b 01 	lds	r18, 0x010B
     6aa:	90 91 0c 01 	lds	r25, 0x010C
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     6ae:	80 91 0d 01 	lds	r24, 0x010D
     6b2:	1f 92       	push	r1
     6b4:	3f 93       	push	r19
     6b6:	1f 92       	push	r1
     6b8:	2f 93       	push	r18
		
		if(temp < calDown) {calDown = temp;}
     6ba:	1f 92       	push	r1
     6bc:	9f 93       	push	r25
     6be:	1f 92       	push	r1
     6c0:	8f 93       	push	r24
     6c2:	8c e7       	ldi	r24, 0x7C	; 124
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	9f 93       	push	r25
	OLED_goto(3,0);
	OLED_printString("JOY DOWN");
	printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     6c8:	8f 93       	push	r24
     6ca:	bb d6       	rcall	.+3446   	; 0x1442 <printf>
		
		if(temp < calDown) {calDown = temp;}
	}
	
	
	printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
     6cc:	20 91 0b 01 	lds	r18, 0x010B
     6d0:	80 91 0a 01 	lds	r24, 0x010A
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	28 1b       	sub	r18, r24
     6d8:	31 09       	sbc	r19, r1
     6da:	c9 01       	movw	r24, r18
     6dc:	4d b7       	in	r20, 0x3d	; 61
     6de:	5e b7       	in	r21, 0x3e	; 62
     6e0:	46 5f       	subi	r20, 0xF6	; 246
     6e2:	5f 4f       	sbci	r21, 0xFF	; 255
     6e4:	0f b6       	in	r0, 0x3f	; 63
     6e6:	f8 94       	cli
     6e8:	5e bf       	out	0x3e, r21	; 62
     6ea:	0f be       	out	0x3f, r0	; 63
     6ec:	4d bf       	out	0x3d, r20	; 61
     6ee:	99 23       	and	r25, r25
     6f0:	0c f4       	brge	.+2      	; 0x6f4 <JOY_calibrate+0x1f0>
     6f2:	01 96       	adiw	r24, 0x01	; 1
     6f4:	95 95       	asr	r25
     6f6:	87 95       	ror	r24
	
	meanVert = (calUp - calDown)/2;
     6f8:	80 93 09 01 	sts	0x0109, r24
     6fc:	20 91 0d 01 	lds	r18, 0x010D
     700:	80 91 0c 01 	lds	r24, 0x010C
     704:	30 e0       	ldi	r19, 0x00	; 0
     706:	28 1b       	sub	r18, r24
     708:	31 09       	sbc	r19, r1
     70a:	c9 01       	movw	r24, r18
     70c:	99 23       	and	r25, r25
     70e:	0c f4       	brge	.+2      	; 0x712 <JOY_calibrate+0x20e>
     710:	01 96       	adiw	r24, 0x01	; 1
     712:	95 95       	asr	r25
     714:	87 95       	ror	r24
     716:	80 93 08 01 	sts	0x0108, r24
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	70 e0       	ldi	r23, 0x00	; 0
     71e:	84 e0       	ldi	r24, 0x04	; 4
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	43 d3       	rcall	.+1670   	; 0xdaa <OLED_goto>
     724:	86 ea       	ldi	r24, 0xA6	; 166
     726:	91 e0       	ldi	r25, 0x01	; 1
	meanHor = (calR - calL)/2;
     728:	1b d4       	rcall	.+2102   	; 0xf60 <OLED_printString>
     72a:	90 91 08 01 	lds	r25, 0x0108
     72e:	80 91 09 01 	lds	r24, 0x0109
     732:	1f 92       	push	r1
     734:	9f 93       	push	r25
     736:	1f 92       	push	r1
     738:	8f 93       	push	r24
     73a:	81 eb       	ldi	r24, 0xB1	; 177
     73c:	91 e0       	ldi	r25, 0x01	; 1
     73e:	9f 93       	push	r25
     740:	8f 93       	push	r24
     742:	7f d6       	rcall	.+3326   	; 0x1442 <printf>
     744:	5f ef       	ldi	r21, 0xFF	; 255
	
	OLED_goto(4,0);
     746:	8f ef       	ldi	r24, 0xFF	; 255
     748:	9e e0       	ldi	r25, 0x0E	; 14
     74a:	51 50       	subi	r21, 0x01	; 1
     74c:	80 40       	sbci	r24, 0x00	; 0
     74e:	90 40       	sbci	r25, 0x00	; 0
     750:	e1 f7       	brne	.-8      	; 0x74a <JOY_calibrate+0x246>
	OLED_printString("CALIB DONE");
     752:	00 c0       	rjmp	.+0      	; 0x754 <JOY_calibrate+0x250>
     754:	00 00       	nop
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
	printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
     75a:	0f 90       	pop	r0
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <JOY_requestCurrentPosition>:
     768:	88 37       	cpi	r24, 0x78	; 120
     76a:	39 f4       	brne	.+14     	; 0x77a <JOY_requestCurrentPosition+0x12>
     76c:	60 91 06 01 	lds	r22, 0x0106
     770:	70 91 07 01 	lds	r23, 0x0107
     774:	82 e0       	ldi	r24, 0x02	; 2
     776:	a7 c4       	rjmp	.+2382   	; 0x10c6 <ADC_request>
     778:	08 95       	ret
     77a:	89 37       	cpi	r24, 0x79	; 121
     77c:	31 f4       	brne	.+12     	; 0x78a <JOY_requestCurrentPosition+0x22>
     77e:	60 91 06 01 	lds	r22, 0x0106
     782:	70 91 07 01 	lds	r23, 0x0107
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	9e c4       	rjmp	.+2364   	; 0x10c6 <ADC_request>
     78a:	08 95       	ret

0000078c <JOY_updatePosition>:
     78c:	88 37       	cpi	r24, 0x78	; 120
     78e:	f9 f4       	brne	.+62     	; 0x7ce <JOY_updatePosition+0x42>
     790:	80 91 06 01 	lds	r24, 0x0106
	_delay_ms(1000);
}
     794:	90 91 07 01 	lds	r25, 0x0107
     798:	ba d4       	rcall	.+2420   	; 0x110e <ADC_read>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	90 93 17 03 	sts	0x0317, r25
     7a0:	80 93 16 03 	sts	0x0316, r24
     7a4:	20 91 08 01 	lds	r18, 0x0108
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     7a8:	60 91 08 01 	lds	r22, 0x0108
     7ac:	ac 01       	movw	r20, r24
     7ae:	42 1b       	sub	r20, r18
     7b0:	51 09       	sbc	r21, r1
     7b2:	9a 01       	movw	r18, r20
     7b4:	44 e6       	ldi	r20, 0x64	; 100
     7b6:	42 9f       	mul	r20, r18
     7b8:	c0 01       	movw	r24, r0
     7ba:	43 9f       	mul	r20, r19
     7bc:	90 0d       	add	r25, r0
     7be:	11 24       	eor	r1, r1
     7c0:	70 e0       	ldi	r23, 0x00	; 0
     7c2:	a7 d4       	rcall	.+2382   	; 0x1112 <__divmodhi4>
     7c4:	70 93 1b 03 	sts	0x031B, r23
     7c8:	60 93 1a 03 	sts	0x031A, r22
     7cc:	08 95       	ret
     7ce:	89 37       	cpi	r24, 0x79	; 121
     7d0:	f1 f4       	brne	.+60     	; 0x80e <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     7d2:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     7d6:	90 91 07 01 	lds	r25, 0x0107
     7da:	99 d4       	rcall	.+2354   	; 0x110e <ADC_read>
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	90 93 19 03 	sts	0x0319, r25
     7e2:	80 93 18 03 	sts	0x0318, r24
     7e6:	20 91 09 01 	lds	r18, 0x0109
     7ea:	60 91 09 01 	lds	r22, 0x0109
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     7ee:	ac 01       	movw	r20, r24
     7f0:	42 1b       	sub	r20, r18
     7f2:	51 09       	sbc	r21, r1
     7f4:	9a 01       	movw	r18, r20
     7f6:	44 e6       	ldi	r20, 0x64	; 100
     7f8:	42 9f       	mul	r20, r18
     7fa:	c0 01       	movw	r24, r0
     7fc:	43 9f       	mul	r20, r19
     7fe:	90 0d       	add	r25, r0
     800:	11 24       	eor	r1, r1
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	86 d4       	rcall	.+2316   	; 0x1112 <__divmodhi4>
     806:	70 93 1d 03 	sts	0x031D, r23
     80a:	60 93 1c 03 	sts	0x031C, r22
     80e:	08 95       	ret

00000810 <JOY_calculateDirection>:
     810:	80 91 1a 03 	lds	r24, 0x031A
     814:	90 91 1b 03 	lds	r25, 0x031B
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     818:	8b 35       	cpi	r24, 0x5B	; 91
     81a:	91 05       	cpc	r25, r1
     81c:	24 f0       	brlt	.+8      	; 0x826 <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     81e:	83 e0       	ldi	r24, 0x03	; 3
     820:	80 93 15 03 	sts	0x0315, r24
     824:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     826:	86 3a       	cpi	r24, 0xA6	; 166
     828:	9f 4f       	sbci	r25, 0xFF	; 255
     82a:	24 f4       	brge	.+8      	; 0x834 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     82c:	84 e0       	ldi	r24, 0x04	; 4
     82e:	80 93 15 03 	sts	0x0315, r24
     832:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     834:	80 91 1c 03 	lds	r24, 0x031C
     838:	90 91 1d 03 	lds	r25, 0x031D
     83c:	8b 35       	cpi	r24, 0x5B	; 91
     83e:	91 05       	cpc	r25, r1
     840:	24 f0       	brlt	.+8      	; 0x84a <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	80 93 15 03 	sts	0x0315, r24
     848:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     84a:	86 3a       	cpi	r24, 0xA6	; 166
     84c:	9f 4f       	sbci	r25, 0xFF	; 255
     84e:	24 f4       	brge	.+8      	; 0x858 <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     850:	82 e0       	ldi	r24, 0x02	; 2
     852:	80 93 15 03 	sts	0x0315, r24
     856:	08 95       	ret
	else{currentDirection = CENTRE;}
     858:	10 92 15 03 	sts	0x0315, r1
     85c:	08 95       	ret

0000085e <JOY_getDirection>:
// Before the value is returned, the values of position in x and y direction are 
// requested from the ADC and written to the currentPosition and 
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
     85e:	88 e7       	ldi	r24, 0x78	; 120
     860:	83 df       	rcall	.-250    	; 0x768 <JOY_requestCurrentPosition>
     862:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     864:	8a 95       	dec	r24
     866:	f1 f7       	brne	.-4      	; 0x864 <JOY_getDirection+0x6>
     868:	00 00       	nop
     86a:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     86c:	8f df       	rcall	.-226    	; 0x78c <JOY_updatePosition>
     86e:	89 e7       	ldi	r24, 0x79	; 121
     870:	7b df       	rcall	.-266    	; 0x768 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     872:	82 e6       	ldi	r24, 0x62	; 98
     874:	8a 95       	dec	r24
     876:	f1 f7       	brne	.-4      	; 0x874 <JOY_getDirection+0x16>
     878:	00 00       	nop
     87a:	89 e7       	ldi	r24, 0x79	; 121
     87c:	87 df       	rcall	.-242    	; 0x78c <JOY_updatePosition>
     87e:	c8 df       	rcall	.-112    	; 0x810 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     880:	80 91 15 03 	lds	r24, 0x0315
     884:	08 95       	ret

00000886 <MCP2515_reset>:
	printf("finished MCP2515_init\n");
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
     886:	cf 93       	push	r28
     888:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
     88a:	f4 d3       	rcall	.+2024   	; 0x1074 <SPI_activateSlave>
     88c:	80 ec       	ldi	r24, 0xC0	; 192
	SPI_send(MCP_RESET);
     88e:	dd d3       	rcall	.+1978   	; 0x104a <SPI_send>
     890:	8c ec       	ldi	r24, 0xCC	; 204
     892:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     894:	01 97       	sbiw	r24, 0x01	; 1
     896:	f1 f7       	brne	.-4      	; 0x894 <MCP2515_reset+0xe>
     898:	00 c0       	rjmp	.+0      	; 0x89a <MCP2515_reset+0x14>
     89a:	00 00       	nop
     89c:	8c 2f       	mov	r24, r28
     89e:	ee d3       	rcall	.+2012   	; 0x107c <SPI_deactivateSlave>
	_delay_ms(1);
	SPI_deactivateSlave(slave);
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	9f e2       	ldi	r25, 0x2F	; 47
     8a4:	01 97       	sbiw	r24, 0x01	; 1
     8a6:	f1 f7       	brne	.-4      	; 0x8a4 <MCP2515_reset+0x1e>
     8a8:	00 c0       	rjmp	.+0      	; 0x8aa <MCP2515_reset+0x24>
     8aa:	00 00       	nop
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <MCP2515_read>:
     8b0:	cf 93       	push	r28
	_delay_ms(10);
}
     8b2:	df 93       	push	r29
     8b4:	c8 2f       	mov	r28, r24

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
     8b6:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
     8b8:	dd d3       	rcall	.+1978   	; 0x1074 <SPI_activateSlave>
     8ba:	83 e0       	ldi	r24, 0x03	; 3
	SPI_send(MCP_READ);
     8bc:	c6 d3       	rcall	.+1932   	; 0x104a <SPI_send>
     8be:	8d 2f       	mov	r24, r29
     8c0:	c4 d3       	rcall	.+1928   	; 0x104a <SPI_send>
	SPI_send(address);
     8c2:	d2 d3       	rcall	.+1956   	; 0x1068 <SPI_receive>
     8c4:	d8 2f       	mov	r29, r24
     8c6:	8c 2f       	mov	r24, r28
	
	uint8_t result;
	result = SPI_receive();
     8c8:	d9 d3       	rcall	.+1970   	; 0x107c <SPI_deactivateSlave>
     8ca:	8d 2f       	mov	r24, r29
     8cc:	df 91       	pop	r29
	
	SPI_deactivateSlave(slave);
     8ce:	cf 91       	pop	r28
     8d0:	08 95       	ret

000008d2 <MCP2515_init>:
     8d2:	cf 93       	push	r28
	return result;
}
     8d4:	80 e0       	ldi	r24, 0x00	; 0
     8d6:	d7 df       	rcall	.-82     	; 0x886 <MCP2515_reset>
     8d8:	6e e0       	ldi	r22, 0x0E	; 14
     8da:	80 e0       	ldi	r24, 0x00	; 0
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
	
	//printf("MCP_CANSTAT: %d\n", MCP2515_read(MCP_CANSTAT, SS_CAN_CONTROLLER));
	
	// Self-test
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
     8dc:	e9 df       	rcall	.-46     	; 0x8b0 <MCP2515_read>
     8de:	c8 2f       	mov	r28, r24
     8e0:	1f 92       	push	r1
     8e2:	8f 93       	push	r24
	printf("CANSTAT: %#x\n", value);
     8e4:	26 ed       	ldi	r18, 0xD6	; 214
     8e6:	31 e0       	ldi	r19, 0x01	; 1
     8e8:	3f 93       	push	r19
     8ea:	2f 93       	push	r18
     8ec:	aa d5       	rcall	.+2900   	; 0x1442 <printf>
     8ee:	8c 2f       	mov	r24, r28
     8f0:	80 7e       	andi	r24, 0xE0	; 224
     8f2:	0f 90       	pop	r0
	if((value & MODE_MASK) != MODE_CONFIG) 
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	80 38       	cpi	r24, 0x80	; 128
     8fc:	69 f0       	breq	.+26     	; 0x918 <MCP2515_init+0x46>
     8fe:	1f 92       	push	r1
     900:	cf 93       	push	r28
     902:	84 ee       	ldi	r24, 0xE4	; 228
	{
		printf("MCP2515 is NOT in configuration mode after reset! Value: %d\n", value);
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	9f 93       	push	r25
     908:	8f 93       	push	r24
     90a:	9b d5       	rcall	.+2870   	; 0x1442 <printf>
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
		return 1;
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	04 c0       	rjmp	.+8      	; 0x920 <MCP2515_init+0x4e>
     918:	81 e2       	ldi	r24, 0x21	; 33
     91a:	92 e0       	ldi	r25, 0x02	; 2
     91c:	a3 d5       	rcall	.+2886   	; 0x1464 <puts>
     91e:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	printf("finished MCP2515_init\n");
     920:	cf 91       	pop	r28
     922:	08 95       	ret

00000924 <startGame>:

int menuFrameOffset = 10; //Columns from left frame border
//******************************************************************************************

void startGame()
{
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
	OLED_clear();
     928:	5d d2       	rcall	.+1210   	; 0xde4 <OLED_clear>
     92a:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	3b d2       	rcall	.+1142   	; 0xdaa <OLED_goto>
     934:	8d e4       	ldi	r24, 0x4D	; 77
     936:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("START");
     938:	13 d3       	rcall	.+1574   	; 0xf60 <OLED_printString>
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_goto(3,0);
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	33 d2       	rcall	.+1126   	; 0xdaa <OLED_goto>
     944:	ce e0       	ldi	r28, 0x0E	; 14
     946:	d0 e0       	ldi	r29, 0x00	; 0
     948:	83 e5       	ldi	r24, 0x53	; 83
     94a:	92 e0       	ldi	r25, 0x02	; 2
     94c:	09 d3       	rcall	.+1554   	; 0xf60 <OLED_printString>
     94e:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     950:	8f e7       	ldi	r24, 0x7F	; 127
     952:	97 e0       	ldi	r25, 0x07	; 7
     954:	21 50       	subi	r18, 0x01	; 1
     956:	80 40       	sbci	r24, 0x00	; 0
     958:	90 40       	sbci	r25, 0x00	; 0
     95a:	e1 f7       	brne	.-8      	; 0x954 <startGame+0x30>
     95c:	00 c0       	rjmp	.+0      	; 0x95e <startGame+0x3a>
     95e:	00 00       	nop
     960:	21 97       	sbiw	r28, 0x01	; 1
     962:	20 97       	sbiw	r28, 0x00	; 0
     964:	89 f7       	brne	.-30     	; 0x948 <startGame+0x24>
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	85 e0       	ldi	r24, 0x05	; 5
	OLED_goto(0,0);
	OLED_printString("START");
	
	OLED_goto(3,0);
	
	for(int i = 14; i > 0; i--)
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	1d d2       	rcall	.+1082   	; 0xdaa <OLED_goto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_goto(5,0);
     970:	85 e5       	ldi	r24, 0x55	; 85
     972:	92 e0       	ldi	r25, 0x02	; 2
     974:	f5 d2       	rcall	.+1514   	; 0xf60 <OLED_printString>
     976:	2f ef       	ldi	r18, 0xFF	; 255
     978:	8f ef       	ldi	r24, 0xFF	; 255
     97a:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     97c:	21 50       	subi	r18, 0x01	; 1
     97e:	80 40       	sbci	r24, 0x00	; 0
     980:	90 40       	sbci	r25, 0x00	; 0
     982:	e1 f7       	brne	.-8      	; 0x97c <startGame+0x58>
     984:	00 c0       	rjmp	.+0      	; 0x986 <startGame+0x62>
     986:	00 c0       	rjmp	.+0      	; 0x988 <startGame+0x64>
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	08 95       	ret

0000098e <MENU_addMenuItem>:
     98e:	cf 92       	push	r12
     990:	df 92       	push	r13
     992:	ef 92       	push	r14
     994:	ff 92       	push	r15
	_delay_ms(3000);
}
     996:	0f 93       	push	r16
     998:	1f 93       	push	r17
     99a:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     99c:	df 93       	push	r29
     99e:	8c 01       	movw	r16, r24
     9a0:	7b 01       	movw	r14, r22
     9a2:	6a 01       	movw	r12, r20
     9a4:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     9a6:	80 91 21 03 	lds	r24, 0x0321
     9aa:	90 91 22 03 	lds	r25, 0x0322
     9ae:	89 2b       	or	r24, r25
     9b0:	19 f0       	breq	.+6      	; 0x9b8 <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     9b2:	8e e5       	ldi	r24, 0x5E	; 94
     9b4:	92 e0       	ldi	r25, 0x02	; 2
     9b6:	56 d5       	rcall	.+2732   	; 0x1464 <puts>
     9b8:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	d1 d3       	rcall	.+1954   	; 0x1160 <malloc>
     9be:	fc 01       	movw	r30, r24
     9c0:	90 93 22 03 	sts	0x0322, r25
     9c4:	80 93 21 03 	sts	0x0321, r24
     9c8:	f3 82       	std	Z+3, r15	; 0x03
     9ca:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     9cc:	11 83       	std	Z+1, r17	; 0x01
     9ce:	00 83       	st	Z, r16
	currItem->name = name;
     9d0:	cd 2b       	or	r28, r29
     9d2:	39 f0       	breq	.+14     	; 0x9e2 <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     9d4:	d5 82       	std	Z+5, r13	; 0x05
     9d6:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     9dc:	97 83       	std	Z+7, r25	; 0x07
     9de:	86 83       	std	Z+6, r24	; 0x06
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <MENU_addMenuItem+0x5c>
     9e2:	15 82       	std	Z+5, r1	; 0x05
     9e4:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     9e6:	17 82       	std	Z+7, r1	; 0x07
     9e8:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     9ea:	df 91       	pop	r29
     9ec:	cf 91       	pop	r28
	}
}
     9ee:	1f 91       	pop	r17
     9f0:	0f 91       	pop	r16
     9f2:	ff 90       	pop	r15
     9f4:	ef 90       	pop	r14
     9f6:	df 90       	pop	r13
     9f8:	cf 90       	pop	r12
     9fa:	08 95       	ret

000009fc <MENU_buildMenus>:
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     a00:	86 e1       	ldi	r24, 0x16	; 22
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	ad d3       	rcall	.+1882   	; 0x1160 <malloc>
     a06:	ec 01       	movw	r28, r24
     a08:	90 93 28 03 	sts	0x0328, r25
     a0c:	80 93 27 03 	sts	0x0327, r24
     a10:	84 e7       	ldi	r24, 0x74	; 116
	mainMenu->menuName = "MainMenu";
     a12:	92 e0       	ldi	r25, 0x02	; 2
     a14:	99 83       	std	Y+1, r25	; 0x01
     a16:	88 83       	st	Y, r24
     a18:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     a1a:	1c 8a       	std	Y+20, r1	; 0x14
     a1c:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	9b 83       	std	Y+3, r25	; 0x03
     a22:	8a 83       	std	Y+2, r24	; 0x02
     a24:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	9b d3       	rcall	.+1846   	; 0x1160 <malloc>
     a2a:	fc 01       	movw	r30, r24
     a2c:	90 93 26 03 	sts	0x0326, r25
     a30:	80 93 25 03 	sts	0x0325, r24
     a34:	8d e7       	ldi	r24, 0x7D	; 125
     a36:	92 e0       	ldi	r25, 0x02	; 2
	difficultyMenu->menuName = "DifficultyMenu";
     a38:	91 83       	std	Z+1, r25	; 0x01
     a3a:	80 83       	st	Z, r24
     a3c:	d5 8b       	std	Z+21, r29	; 0x15
     a3e:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     a40:	83 e0       	ldi	r24, 0x03	; 3
     a42:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     a44:	93 83       	std	Z+3, r25	; 0x03
     a46:	82 83       	std	Z+2, r24	; 0x02
     a48:	20 e0       	ldi	r18, 0x00	; 0
     a4a:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	be 01       	movw	r22, r28
     a52:	8c e8       	ldi	r24, 0x8C	; 140
     a54:	92 e0       	ldi	r25, 0x02	; 2
     a56:	9b df       	rcall	.-202    	; 0x98e <MENU_addMenuItem>
     a58:	60 91 27 03 	lds	r22, 0x0327
     a5c:	70 91 28 03 	lds	r23, 0x0328
	mainMenu->children[0] = currItem;
     a60:	e0 91 21 03 	lds	r30, 0x0321
     a64:	f0 91 22 03 	lds	r31, 0x0322
     a68:	db 01       	movw	r26, r22
     a6a:	15 96       	adiw	r26, 0x05	; 5
     a6c:	fc 93       	st	X, r31
     a6e:	ee 93       	st	-X, r30
     a70:	14 97       	sbiw	r26, 0x04	; 4
     a72:	82 e9       	ldi	r24, 0x92	; 146
     a74:	94 e0       	ldi	r25, 0x04	; 4
     a76:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
     a78:	82 87       	std	Z+10, r24	; 0x0a
     a7a:	40 91 25 03 	lds	r20, 0x0325
     a7e:	50 91 26 03 	lds	r21, 0x0326
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     a82:	21 e0       	ldi	r18, 0x01	; 1
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	85 e9       	ldi	r24, 0x95	; 149
     a88:	92 e0       	ldi	r25, 0x02	; 2
     a8a:	81 df       	rcall	.-254    	; 0x98e <MENU_addMenuItem>
     a8c:	60 91 27 03 	lds	r22, 0x0327
     a90:	70 91 28 03 	lds	r23, 0x0328
	mainMenu->children[1] = currItem;
     a94:	80 91 21 03 	lds	r24, 0x0321
     a98:	90 91 22 03 	lds	r25, 0x0322
     a9c:	fb 01       	movw	r30, r22
     a9e:	97 83       	std	Z+7, r25	; 0x07
     aa0:	86 83       	std	Z+6, r24	; 0x06
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e0       	ldi	r20, 0x00	; 0
     aa8:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     aaa:	80 ea       	ldi	r24, 0xA0	; 160
     aac:	92 e0       	ldi	r25, 0x02	; 2
     aae:	6f df       	rcall	.-290    	; 0x98e <MENU_addMenuItem>
     ab0:	60 91 27 03 	lds	r22, 0x0327
     ab4:	70 91 28 03 	lds	r23, 0x0328
     ab8:	80 91 21 03 	lds	r24, 0x0321
	mainMenu->children[2] = currItem;
     abc:	90 91 22 03 	lds	r25, 0x0322
     ac0:	db 01       	movw	r26, r22
     ac2:	19 96       	adiw	r26, 0x09	; 9
     ac4:	9c 93       	st	X, r25
     ac6:	8e 93       	st	-X, r24
     ac8:	18 97       	sbiw	r26, 0x08	; 8
     aca:	20 e0       	ldi	r18, 0x00	; 0
     acc:	30 e0       	ldi	r19, 0x00	; 0
     ace:	40 e0       	ldi	r20, 0x00	; 0
     ad0:	50 e0       	ldi	r21, 0x00	; 0
     ad2:	8b ea       	ldi	r24, 0xAB	; 171
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
     ad4:	92 e0       	ldi	r25, 0x02	; 2
     ad6:	5b df       	rcall	.-330    	; 0x98e <MENU_addMenuItem>
     ad8:	60 91 27 03 	lds	r22, 0x0327
     adc:	70 91 28 03 	lds	r23, 0x0328
     ae0:	e0 91 21 03 	lds	r30, 0x0321
	mainMenu->children[3] = currItem;
     ae4:	f0 91 22 03 	lds	r31, 0x0322
     ae8:	db 01       	movw	r26, r22
     aea:	1b 96       	adiw	r26, 0x0b	; 11
     aec:	fc 93       	st	X, r31
     aee:	ee 93       	st	-X, r30
     af0:	1a 97       	sbiw	r26, 0x0a	; 10
     af2:	82 e8       	ldi	r24, 0x82	; 130
     af4:	92 e0       	ldi	r25, 0x02	; 2
     af6:	93 87       	std	Z+11, r25	; 0x0b
     af8:	82 87       	std	Z+10, r24	; 0x0a
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
     afe:	40 e0       	ldi	r20, 0x00	; 0
     b00:	50 e0       	ldi	r21, 0x00	; 0
     b02:	85 eb       	ldi	r24, 0xB5	; 181
     b04:	92 e0       	ldi	r25, 0x02	; 2
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
     b06:	43 df       	rcall	.-378    	; 0x98e <MENU_addMenuItem>
     b08:	e0 91 27 03 	lds	r30, 0x0327
     b0c:	f0 91 28 03 	lds	r31, 0x0328
     b10:	80 91 21 03 	lds	r24, 0x0321
     b14:	90 91 22 03 	lds	r25, 0x0322
	mainMenu->children[4] = currItem;
     b18:	95 87       	std	Z+13, r25	; 0x0d
     b1a:	84 87       	std	Z+12, r24	; 0x0c
     b1c:	10 92 22 03 	sts	0x0322, r1
     b20:	10 92 21 03 	sts	0x0321, r1
     b24:	60 91 25 03 	lds	r22, 0x0325
     b28:	70 91 26 03 	lds	r23, 0x0326
	
	currItem = NULL;
     b2c:	20 e0       	ldi	r18, 0x00	; 0
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
     b32:	50 e0       	ldi	r21, 0x00	; 0
     b34:	8a eb       	ldi	r24, 0xBA	; 186
     b36:	92 e0       	ldi	r25, 0x02	; 2
     b38:	2a df       	rcall	.-428    	; 0x98e <MENU_addMenuItem>
     b3a:	60 91 25 03 	lds	r22, 0x0325
     b3e:	70 91 26 03 	lds	r23, 0x0326
     b42:	80 91 21 03 	lds	r24, 0x0321
     b46:	90 91 22 03 	lds	r25, 0x0322
	difficultyMenu->children[0] = currItem;
     b4a:	fb 01       	movw	r30, r22
     b4c:	95 83       	std	Z+5, r25	; 0x05
     b4e:	84 83       	std	Z+4, r24	; 0x04
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	8f eb       	ldi	r24, 0xBF	; 191
     b5a:	92 e0       	ldi	r25, 0x02	; 2
     b5c:	18 df       	rcall	.-464    	; 0x98e <MENU_addMenuItem>
     b5e:	60 91 25 03 	lds	r22, 0x0325
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
     b62:	70 91 26 03 	lds	r23, 0x0326
     b66:	80 91 21 03 	lds	r24, 0x0321
     b6a:	90 91 22 03 	lds	r25, 0x0322
     b6e:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
     b70:	17 96       	adiw	r26, 0x07	; 7
     b72:	9c 93       	st	X, r25
     b74:	8e 93       	st	-X, r24
     b76:	16 97       	sbiw	r26, 0x06	; 6
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e0       	ldi	r20, 0x00	; 0
     b7e:	50 e0       	ldi	r21, 0x00	; 0
     b80:	86 ec       	ldi	r24, 0xC6	; 198
     b82:	92 e0       	ldi	r25, 0x02	; 2
     b84:	04 df       	rcall	.-504    	; 0x98e <MENU_addMenuItem>
     b86:	e0 91 25 03 	lds	r30, 0x0325
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
     b8a:	f0 91 26 03 	lds	r31, 0x0326
     b8e:	80 91 21 03 	lds	r24, 0x0321
     b92:	90 91 22 03 	lds	r25, 0x0322
     b96:	91 87       	std	Z+9, r25	; 0x09
     b98:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	08 95       	ret

00000ba0 <MENU_printMenuItem>:
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	ec 01       	movw	r28, r24
     ba6:	cb 01       	movw	r24, r22
     ba8:	20 97       	sbiw	r28, 0x00	; 0
     baa:	49 f0       	breq	.+18     	; 0xbbe <MENU_printMenuItem+0x1e>
     bac:	60 91 0e 01 	lds	r22, 0x010E
}
     bb0:	70 91 0f 01 	lds	r23, 0x010F

void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
     bb4:	fa d0       	rcall	.+500    	; 0xdaa <OLED_goto>
     bb6:	88 81       	ld	r24, Y
		OLED_printString(item->name);
     bb8:	99 81       	ldd	r25, Y+1	; 0x01
     bba:	d2 d1       	rcall	.+932    	; 0xf60 <OLED_printString>
     bbc:	07 c0       	rjmp	.+14     	; 0xbcc <MENU_printMenuItem+0x2c>
     bbe:	8b ec       	ldi	r24, 0xCB	; 203
     bc0:	92 e0       	ldi	r25, 0x02	; 2
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
     bc2:	9f 93       	push	r25
     bc4:	8f 93       	push	r24
     bc6:	3d d4       	rcall	.+2170   	; 0x1442 <printf>
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	df 91       	pop	r29
     bce:	cf 91       	pop	r28
     bd0:	08 95       	ret

00000bd2 <MENU_printMenu>:
	}
}
     bd2:	cf 92       	push	r12
     bd4:	df 92       	push	r13
     bd6:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
     bd8:	ff 92       	push	r15
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	cf 93       	push	r28
     be0:	df 93       	push	r29
     be2:	6c 01       	movw	r12, r24
     be4:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
     be6:	fe d0       	rcall	.+508    	; 0xde4 <OLED_clear>
     be8:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	10 d2       	rcall	.+1056   	; 0x100e <OLED_moveArrow>
     bee:	1e 14       	cp	r1, r14
     bf0:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
     bf2:	7c f4       	brge	.+30     	; 0xc12 <MENU_printMenu+0x40>
     bf4:	86 01       	movw	r16, r12
     bf6:	0c 5f       	subi	r16, 0xFC	; 252
     bf8:	1f 4f       	sbci	r17, 0xFF	; 255
     bfa:	c0 e0       	ldi	r28, 0x00	; 0
     bfc:	d0 e0       	ldi	r29, 0x00	; 0
     bfe:	be 01       	movw	r22, r28
     c00:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
     c02:	81 91       	ld	r24, Z+
     c04:	91 91       	ld	r25, Z+
     c06:	8f 01       	movw	r16, r30
     c08:	cb df       	rcall	.-106    	; 0xba0 <MENU_printMenuItem>
     c0a:	21 96       	adiw	r28, 0x01	; 1
     c0c:	ce 15       	cp	r28, r14
     c0e:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
     c10:	b1 f7       	brne	.-20     	; 0xbfe <MENU_printMenu+0x2c>
     c12:	d0 92 24 03 	sts	0x0324, r13
     c16:	c0 92 23 03 	sts	0x0323, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
     c1a:	10 92 1f 03 	sts	0x031F, r1
     c1e:	10 92 1e 03 	sts	0x031E, r1
	
	currentPosition = 0;
     c22:	f6 01       	movw	r30, r12
     c24:	84 81       	ldd	r24, Z+4	; 0x04
     c26:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
     c28:	90 93 22 03 	sts	0x0322, r25
     c2c:	80 93 21 03 	sts	0x0321, r24
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	1f 91       	pop	r17
}
     c36:	0f 91       	pop	r16
     c38:	ff 90       	pop	r15
     c3a:	ef 90       	pop	r14
     c3c:	df 90       	pop	r13
     c3e:	cf 90       	pop	r12
     c40:	08 95       	ret

00000c42 <MENU_moveUp>:
     c42:	20 91 1e 03 	lds	r18, 0x031E
     c46:	30 91 1f 03 	lds	r19, 0x031F
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
     c4a:	12 16       	cp	r1, r18
     c4c:	13 06       	cpc	r1, r19
     c4e:	bc f4       	brge	.+46     	; 0xc7e <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
     c50:	c9 01       	movw	r24, r18
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	90 93 1f 03 	sts	0x031F, r25
     c58:	80 93 1e 03 	sts	0x031E, r24
		currItem = currentMenu->children[currentPosition];
     c5c:	e0 91 23 03 	lds	r30, 0x0323
     c60:	f0 91 24 03 	lds	r31, 0x0324
     c64:	2f 5f       	subi	r18, 0xFF	; 255
     c66:	3f 4f       	sbci	r19, 0xFF	; 255
     c68:	22 0f       	add	r18, r18
     c6a:	33 1f       	adc	r19, r19
     c6c:	e2 0f       	add	r30, r18
     c6e:	f3 1f       	adc	r31, r19
     c70:	20 81       	ld	r18, Z
     c72:	31 81       	ldd	r19, Z+1	; 0x01
     c74:	30 93 22 03 	sts	0x0322, r19
     c78:	20 93 21 03 	sts	0x0321, r18
		OLED_moveArrow(currentPosition);
     c7c:	c8 c1       	rjmp	.+912    	; 0x100e <OLED_moveArrow>
     c7e:	08 95       	ret

00000c80 <MENU_moveDown>:
     c80:	e0 91 23 03 	lds	r30, 0x0323
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
     c84:	f0 91 24 03 	lds	r31, 0x0324
     c88:	20 91 1e 03 	lds	r18, 0x031E
     c8c:	30 91 1f 03 	lds	r19, 0x031F
     c90:	82 81       	ldd	r24, Z+2	; 0x02
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	28 17       	cp	r18, r24
     c98:	39 07       	cpc	r19, r25
     c9a:	a4 f4       	brge	.+40     	; 0xcc4 <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
     c9c:	c9 01       	movw	r24, r18
     c9e:	01 96       	adiw	r24, 0x01	; 1
     ca0:	90 93 1f 03 	sts	0x031F, r25
     ca4:	80 93 1e 03 	sts	0x031E, r24
		currItem = currentMenu->children[currentPosition];
     ca8:	2d 5f       	subi	r18, 0xFD	; 253
     caa:	3f 4f       	sbci	r19, 0xFF	; 255
     cac:	22 0f       	add	r18, r18
     cae:	33 1f       	adc	r19, r19
     cb0:	e2 0f       	add	r30, r18
     cb2:	f3 1f       	adc	r31, r19
     cb4:	20 81       	ld	r18, Z
     cb6:	31 81       	ldd	r19, Z+1	; 0x01
     cb8:	30 93 22 03 	sts	0x0322, r19
     cbc:	20 93 21 03 	sts	0x0321, r18
		OLED_moveArrow(currentPosition);
     cc0:	a6 c1       	rjmp	.+844    	; 0x100e <OLED_moveArrow>
     cc2:	08 95       	ret
     cc4:	10 92 1f 03 	sts	0x031F, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
     cc8:	10 92 1e 03 	sts	0x031E, r1
     ccc:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
     cce:	95 81       	ldd	r25, Z+5	; 0x05
     cd0:	90 93 22 03 	sts	0x0322, r25
     cd4:	80 93 21 03 	sts	0x0321, r24
     cd8:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	98 c1       	rjmp	.+816    	; 0x100e <OLED_moveArrow>
     cde:	08 95       	ret

00000ce0 <MENU_moveLeft>:
     ce0:	e0 91 23 03 	lds	r30, 0x0323
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
     ce4:	f0 91 24 03 	lds	r31, 0x0324
     ce8:	84 89       	ldd	r24, Z+20	; 0x14
     cea:	95 89       	ldd	r25, Z+21	; 0x15
     cec:	00 97       	sbiw	r24, 0x00	; 0
     cee:	21 f0       	breq	.+8      	; 0xcf8 <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
     cf0:	fc 01       	movw	r30, r24
     cf2:	62 81       	ldd	r22, Z+2	; 0x02
     cf4:	73 81       	ldd	r23, Z+3	; 0x03
     cf6:	6d cf       	rjmp	.-294    	; 0xbd2 <MENU_printMenu>
     cf8:	08 95       	ret

00000cfa <MENU_reactivate>:
     cfa:	80 91 23 03 	lds	r24, 0x0323
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
     cfe:	90 91 24 03 	lds	r25, 0x0324
     d02:	fc 01       	movw	r30, r24
     d04:	62 81       	ldd	r22, Z+2	; 0x02
     d06:	73 81       	ldd	r23, Z+3	; 0x03
     d08:	64 df       	rcall	.-312    	; 0xbd2 <MENU_printMenu>
     d0a:	18 c0       	rjmp	.+48     	; 0xd3c <MENU_waitForInput>
	MENU_waitForInput();
     d0c:	08 95       	ret

00000d0e <MENU_moveRight>:
     d0e:	e0 91 21 03 	lds	r30, 0x0321
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
     d12:	f0 91 22 03 	lds	r31, 0x0322
     d16:	86 81       	ldd	r24, Z+6	; 0x06
     d18:	97 81       	ldd	r25, Z+7	; 0x07
     d1a:	89 2b       	or	r24, r25
     d1c:	39 f0       	breq	.+14     	; 0xd2c <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
     d1e:	84 81       	ldd	r24, Z+4	; 0x04
     d20:	95 81       	ldd	r25, Z+5	; 0x05
     d22:	fc 01       	movw	r30, r24
     d24:	62 81       	ldd	r22, Z+2	; 0x02
     d26:	73 81       	ldd	r23, Z+3	; 0x03
     d28:	54 cf       	rjmp	.-344    	; 0xbd2 <MENU_printMenu>
     d2a:	08 95       	ret
     d2c:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
     d2e:	f3 85       	ldd	r31, Z+11	; 0x0b
     d30:	e0 2d       	mov	r30, r0
     d32:	30 97       	sbiw	r30, 0x00	; 0
     d34:	11 f0       	breq	.+4      	; 0xd3a <MENU_moveRight+0x2c>
     d36:	09 95       	icall
	{
		currItem->functionPtr();
     d38:	e0 cf       	rjmp	.-64     	; 0xcfa <MENU_reactivate>
		MENU_reactivate();
     d3a:	08 95       	ret

00000d3c <MENU_waitForInput>:
     d3c:	80 91 1e 03 	lds	r24, 0x031E
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
     d40:	90 91 1f 03 	lds	r25, 0x031F
     d44:	64 d1       	rcall	.+712    	; 0x100e <OLED_moveArrow>
     d46:	80 91 20 03 	lds	r24, 0x0320
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
     d4a:	88 23       	and	r24, r24
     d4c:	f9 f0       	breq	.+62     	; 0xd8c <MENU_waitForInput+0x50>
     d4e:	87 dd       	rcall	.-1266   	; 0x85e <JOY_getDirection>
	{
		currDir = JOY_getDirection();
     d50:	82 30       	cpi	r24, 0x02	; 2
     d52:	71 f0       	breq	.+28     	; 0xd70 <MENU_waitForInput+0x34>
		switch(currDir){
     d54:	18 f4       	brcc	.+6      	; 0xd5c <MENU_waitForInput+0x20>
     d56:	81 30       	cpi	r24, 0x01	; 1
     d58:	49 f0       	breq	.+18     	; 0xd6c <MENU_waitForInput+0x30>
     d5a:	0b c0       	rjmp	.+22     	; 0xd72 <MENU_waitForInput+0x36>
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	21 f0       	breq	.+8      	; 0xd68 <MENU_waitForInput+0x2c>
     d60:	84 30       	cpi	r24, 0x04	; 4
     d62:	39 f4       	brne	.+14     	; 0xd72 <MENU_waitForInput+0x36>
     d64:	bd df       	rcall	.-134    	; 0xce0 <MENU_moveLeft>
     d66:	05 c0       	rjmp	.+10     	; 0xd72 <MENU_waitForInput+0x36>
			case LEFT:
			MENU_moveLeft();
     d68:	d2 df       	rcall	.-92     	; 0xd0e <MENU_moveRight>
     d6a:	03 c0       	rjmp	.+6      	; 0xd72 <MENU_waitForInput+0x36>
			break;
     d6c:	6a df       	rcall	.-300    	; 0xc42 <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
     d6e:	01 c0       	rjmp	.+2      	; 0xd72 <MENU_waitForInput+0x36>
     d70:	87 df       	rcall	.-242    	; 0xc80 <MENU_moveDown>
			break;
     d72:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
     d74:	8f e7       	ldi	r24, 0x7F	; 127
     d76:	94 e0       	ldi	r25, 0x04	; 4
			break;
     d78:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
     d7a:	80 40       	sbci	r24, 0x00	; 0
     d7c:	90 40       	sbci	r25, 0x00	; 0
     d7e:	e1 f7       	brne	.-8      	; 0xd78 <MENU_waitForInput+0x3c>
     d80:	00 c0       	rjmp	.+0      	; 0xd82 <MENU_waitForInput+0x46>
     d82:	00 00       	nop
     d84:	80 91 20 03 	lds	r24, 0x0320
     d88:	81 11       	cpse	r24, r1
     d8a:	e1 cf       	rjmp	.-62     	; 0xd4e <MENU_waitForInput+0x12>
     d8c:	08 95       	ret

00000d8e <MENU_activate>:
     d8e:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
     d90:	80 93 20 03 	sts	0x0320, r24
     d94:	33 de       	rcall	.-922    	; 0x9fc <MENU_buildMenus>
     d96:	80 91 27 03 	lds	r24, 0x0327
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
     d9a:	90 91 28 03 	lds	r25, 0x0328
     d9e:	fc 01       	movw	r30, r24
     da0:	62 81       	ldd	r22, Z+2	; 0x02
     da2:	73 81       	ldd	r23, Z+3	; 0x03
     da4:	16 df       	rcall	.-468    	; 0xbd2 <MENU_printMenu>
     da6:	ca cf       	rjmp	.-108    	; 0xd3c <MENU_waitForInput>
     da8:	08 95       	ret

00000daa <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
     daa:	26 2f       	mov	r18, r22
     dac:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
     dae:	75 95       	asr	r23
     db0:	67 95       	ror	r22
     db2:	75 95       	asr	r23
     db4:	67 95       	ror	r22
     db6:	75 95       	asr	r23
     db8:	67 95       	ror	r22
     dba:	75 95       	asr	r23
     dbc:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
     dbe:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
     dc0:	80 55       	subi	r24, 0x50	; 80
     dc2:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
     dc4:	e0 91 12 01 	lds	r30, 0x0112
     dc8:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     dcc:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
     dce:	e0 91 12 01 	lds	r30, 0x0112
     dd2:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     dd6:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
     dd8:	e0 91 12 01 	lds	r30, 0x0112
     ddc:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     de0:	60 83       	st	Z, r22
     de2:	08 95       	ret

00000de4 <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	c1 e0       	ldi	r28, 0x01	; 1
     dec:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
     df2:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
     df4:	60 e0       	ldi	r22, 0x00	; 0
     df6:	70 e0       	ldi	r23, 0x00	; 0
     df8:	d8 df       	rcall	.-80     	; 0xdaa <OLED_goto>
     dfa:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
     dfc:	e0 91 10 01 	lds	r30, 0x0110
		{
			OLED_writeByteToOLED(oled_data, 0x00);
     e00:	f0 91 11 01 	lds	r31, 0x0111
     e04:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e06:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
     e08:	80 38       	cpi	r24, 0x80	; 128
     e0a:	c1 f7       	brne	.-16     	; 0xdfc <OLED_clear+0x18>
     e0c:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
     e0e:	9d 2f       	mov	r25, r29
     e10:	21 96       	adiw	r28, 0x01	; 1
     e12:	c9 30       	cpi	r28, 0x09	; 9
     e14:	d1 05       	cpc	r29, r1
     e16:	71 f7       	brne	.-36     	; 0xdf4 <OLED_clear+0x10>
     e18:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	08 95       	ret

00000e20 <OLED_init>:
     e20:	e0 91 12 01 	lds	r30, 0x0112
//------------------------------------------------------------------------------
// Default initialization routine of the OLED display.

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
     e24:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e28:	8e ea       	ldi	r24, 0xAE	; 174
     e2a:	80 83       	st	Z, r24
// Default initialization routine of the OLED display.

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
     e2c:	e0 91 12 01 	lds	r30, 0x0112
     e30:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e34:	81 ea       	ldi	r24, 0xA1	; 161
     e36:	80 83       	st	Z, r24

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
     e38:	e0 91 12 01 	lds	r30, 0x0112
     e3c:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e40:	8a ed       	ldi	r24, 0xDA	; 218
     e42:	80 83       	st	Z, r24
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
     e44:	e0 91 12 01 	lds	r30, 0x0112
     e48:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e4c:	82 e1       	ldi	r24, 0x12	; 18
     e4e:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
     e50:	e0 91 12 01 	lds	r30, 0x0112
     e54:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e58:	88 ec       	ldi	r24, 0xC8	; 200
     e5a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
     e5c:	e0 91 12 01 	lds	r30, 0x0112
     e60:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e64:	88 ea       	ldi	r24, 0xA8	; 168
     e66:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
     e68:	e0 91 12 01 	lds	r30, 0x0112
     e6c:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e70:	8f e3       	ldi	r24, 0x3F	; 63
     e72:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
     e74:	e0 91 12 01 	lds	r30, 0x0112
     e78:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e7c:	85 ed       	ldi	r24, 0xD5	; 213
     e7e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
     e80:	e0 91 12 01 	lds	r30, 0x0112
     e84:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e88:	80 e8       	ldi	r24, 0x80	; 128
     e8a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
     e8c:	e0 91 12 01 	lds	r30, 0x0112
     e90:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e94:	81 e8       	ldi	r24, 0x81	; 129
     e96:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
     e98:	e0 91 12 01 	lds	r30, 0x0112
     e9c:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ea0:	80 e5       	ldi	r24, 0x50	; 80
     ea2:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
     ea4:	e0 91 12 01 	lds	r30, 0x0112
     ea8:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     eac:	89 ed       	ldi	r24, 0xD9	; 217
     eae:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
     eb0:	e0 91 12 01 	lds	r30, 0x0112
     eb4:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     eb8:	81 e2       	ldi	r24, 0x21	; 33
     eba:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
     ebc:	e0 91 12 01 	lds	r30, 0x0112
     ec0:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ec4:	80 e2       	ldi	r24, 0x20	; 32
     ec6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
     ec8:	e0 91 12 01 	lds	r30, 0x0112
     ecc:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
     ed4:	e0 91 12 01 	lds	r30, 0x0112
     ed8:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     edc:	8b ed       	ldi	r24, 0xDB	; 219
     ede:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
     ee0:	e0 91 12 01 	lds	r30, 0x0112
     ee4:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ee8:	80 e3       	ldi	r24, 0x30	; 48
     eea:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
     eec:	e0 91 12 01 	lds	r30, 0x0112
     ef0:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ef4:	8d ea       	ldi	r24, 0xAD	; 173
     ef6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
     ef8:	e0 91 12 01 	lds	r30, 0x0112
     efc:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f00:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
     f02:	e0 91 12 01 	lds	r30, 0x0112
     f06:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f0a:	84 ea       	ldi	r24, 0xA4	; 164
     f0c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
     f0e:	e0 91 12 01 	lds	r30, 0x0112
     f12:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f16:	86 ea       	ldi	r24, 0xA6	; 166
     f18:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
     f1a:	e0 91 12 01 	lds	r30, 0x0112
     f1e:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f22:	8f ea       	ldi	r24, 0xAF	; 175
     f24:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
     f26:	5e cf       	rjmp	.-324    	; 0xde4 <OLED_clear>
     f28:	08 95       	ret

00000f2a <OLED_printCharacter>:
     f2a:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	22 0f       	add	r18, r18
     f32:	33 1f       	adc	r19, r19
     f34:	22 0f       	add	r18, r18
     f36:	33 1f       	adc	r19, r19
     f38:	22 0f       	add	r18, r18
     f3a:	33 1f       	adc	r19, r19
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	20 59       	subi	r18, 0x90	; 144
     f42:	3f 4f       	sbci	r19, 0xFF	; 255
     f44:	f9 01       	movw	r30, r18
     f46:	e8 0f       	add	r30, r24
     f48:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
     f4a:	e4 91       	lpm	r30, Z
     f4c:	a0 91 10 01 	lds	r26, 0x0110
     f50:	b0 91 11 01 	lds	r27, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f54:	ec 93       	st	X, r30
     f56:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
     f58:	88 30       	cpi	r24, 0x08	; 8
     f5a:	91 05       	cpc	r25, r1
     f5c:	99 f7       	brne	.-26     	; 0xf44 <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
     f5e:	08 95       	ret

00000f60 <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
     f60:	1f 93       	push	r17
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
     f66:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
     f68:	10 e0       	ldi	r17, 0x00	; 0
     f6a:	06 c0       	rjmp	.+12     	; 0xf78 <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
     f6c:	fe 01       	movw	r30, r28
     f6e:	e8 0f       	add	r30, r24
     f70:	f9 1f       	adc	r31, r25
     f72:	80 81       	ld	r24, Z
     f74:	da df       	rcall	.-76     	; 0xf2a <OLED_printCharacter>
     f76:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
     f78:	81 2f       	mov	r24, r17
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	fe 01       	movw	r30, r28
     f7e:	01 90       	ld	r0, Z+
     f80:	00 20       	and	r0, r0
     f82:	e9 f7       	brne	.-6      	; 0xf7e <OLED_printString+0x1e>
     f84:	31 97       	sbiw	r30, 0x01	; 1
     f86:	ec 1b       	sub	r30, r28
     f88:	fd 0b       	sbc	r31, r29
     f8a:	8e 17       	cp	r24, r30
     f8c:	9f 07       	cpc	r25, r31
     f8e:	70 f3       	brcs	.-36     	; 0xf6c <OLED_printString+0xc>
     f90:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	08 95       	ret

00000f98 <OLED_printArrow>:
     f98:	e0 91 10 01 	lds	r30, 0x0110
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
     f9c:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     fa0:	88 e1       	ldi	r24, 0x18	; 24
     fa2:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
     fa4:	e0 91 10 01 	lds	r30, 0x0110
     fa8:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     fac:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
     fae:	e0 91 10 01 	lds	r30, 0x0110
     fb2:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     fb6:	9e e7       	ldi	r25, 0x7E	; 126
     fb8:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
     fba:	e0 91 10 01 	lds	r30, 0x0110
     fbe:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     fc2:	9c e3       	ldi	r25, 0x3C	; 60
     fc4:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
     fc6:	e0 91 10 01 	lds	r30, 0x0110
     fca:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     fce:	80 83       	st	Z, r24
     fd0:	08 95       	ret

00000fd2 <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	c1 e0       	ldi	r28, 0x01	; 1
     fda:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
     fe0:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	e1 de       	rcall	.-574    	; 0xdaa <OLED_goto>
     fe8:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
     fea:	e0 91 10 01 	lds	r30, 0x0110
		{
			OLED_writeByteToOLED(oled_data, 0x00);
     fee:	f0 91 11 01 	lds	r31, 0x0111
     ff2:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ff4:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
     ff6:	85 30       	cpi	r24, 0x05	; 5
     ff8:	c1 f7       	brne	.-16     	; 0xfea <OLED_clearArrow+0x18>
     ffa:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
     ffc:	9d 2f       	mov	r25, r29
     ffe:	21 96       	adiw	r28, 0x01	; 1
    1000:	c9 30       	cpi	r28, 0x09	; 9
    1002:	d1 05       	cpc	r29, r1
    1004:	71 f7       	brne	.-36     	; 0xfe2 <OLED_clearArrow+0x10>
    1006:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    1008:	cf 91       	pop	r28
    100a:	1f 91       	pop	r17
    100c:	08 95       	ret

0000100e <OLED_moveArrow>:
    100e:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    1010:	df 93       	push	r29
    1012:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
    1014:	de df       	rcall	.-68     	; 0xfd2 <OLED_clearArrow>
    1016:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
    1018:	70 e0       	ldi	r23, 0x00	; 0
    101a:	ce 01       	movw	r24, r28
    101c:	c6 de       	rcall	.-628    	; 0xdaa <OLED_goto>
    101e:	bc df       	rcall	.-136    	; 0xf98 <OLED_printArrow>
    1020:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    1026:	10 92 2b 03 	sts	0x032B, r1
	currentSliPosition.L_abs = 0;
    102a:	10 92 2c 03 	sts	0x032C, r1
	currentSliPosition.R_per = 0;
    102e:	10 92 2d 03 	sts	0x032D, r1
	currentSliPosition.L_per = 0;
    1032:	10 92 2e 03 	sts	0x032E, r1
    1036:	08 95       	ret

00001038 <SPI_init>:
#define UNSELECT_CAN_CONTROLLER_SLAVE set_bit(PORTB, SS_CAN_CONTROLLER_PIN)


void SPI_init()
{
	printf("\n\nInitializing SPI\n");
    1038:	8b ed       	ldi	r24, 0xDB	; 219
    103a:	92 e0       	ldi	r25, 0x02	; 2
    103c:	13 d2       	rcall	.+1062   	; 0x1464 <puts>
    103e:	80 eb       	ldi	r24, 0xB0	; 176
	// Set _SS, MOSI and SCK output, all others input
	//DDRB = (1<<SS_CAN_CONTROLLER_PIN) | (1<<DDB5) | (1<<DDB7);
	DDRB = (1<<DDB4) | (1<<DDB5) | (1<<DDB7);
    1040:	87 bb       	out	0x17, r24	; 23
    1042:	81 e5       	ldi	r24, 0x51	; 81

 	//Enable SPI, Master, set clock rate fck/16
 	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
    1044:	8d b9       	out	0x0d, r24	; 13
    1046:	c4 9a       	sbi	0x18, 4	; 24

	// clock rate fck/2
	//SPSR = (1<<SPI2X);

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORTB, SS_CAN_CONTROLLER_PIN);
    1048:	08 95       	ret

0000104a <SPI_send>:
    104a:	8f b9       	out	0x0f, r24	; 15

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
	printf("Sendind %d\n", cData);
    104c:	1f 92       	push	r1
    104e:	8f 93       	push	r24
    1050:	8e ee       	ldi	r24, 0xEE	; 238
    1052:	92 e0       	ldi	r25, 0x02	; 2
    1054:	9f 93       	push	r25
    1056:	8f 93       	push	r24
    1058:	f4 d1       	rcall	.+1000   	; 0x1442 <printf>
    105a:	0f 90       	pop	r0

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    105c:	0f 90       	pop	r0
    105e:	0f 90       	pop	r0
    1060:	0f 90       	pop	r0
    1062:	77 9b       	sbis	0x0e, 7	; 14
    1064:	fe cf       	rjmp	.-4      	; 0x1062 <SPI_send+0x18>
    1066:	08 95       	ret

00001068 <SPI_receive>:
}
    1068:	8f ef       	ldi	r24, 0xFF	; 255

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    106a:	ef df       	rcall	.-34     	; 0x104a <SPI_send>
    106c:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    106e:	fe cf       	rjmp	.-4      	; 0x106c <SPI_receive+0x4>
    1070:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    1072:	08 95       	ret

00001074 <SPI_activateSlave>:

	return data;
}
    1074:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    1076:	01 c0       	rjmp	.+2      	; 0x107a <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    1078:	c4 98       	cbi	0x18, 4	; 24
    107a:	08 95       	ret

0000107c <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    107c:	81 11       	cpse	r24, r1
    107e:	01 c0       	rjmp	.+2      	; 0x1082 <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    1080:	c4 9a       	sbi	0x18, 4	; 24
    1082:	08 95       	ret

00001084 <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1084:	5d 9b       	sbis	0x0b, 5	; 11
    1086:	fe cf       	rjmp	.-4      	; 0x1084 <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    1088:	8c b9       	out	0x0c, r24	; 12
    108a:	08 95       	ret

0000108c <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    108c:	5f 9b       	sbis	0x0b, 7	; 11
    108e:	fe cf       	rjmp	.-4      	; 0x108c <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    1090:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
    1092:	08 95       	ret

00001094 <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    1094:	ef 92       	push	r14
    1096:	ff 92       	push	r15
    1098:	0f 93       	push	r16
    109a:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    109c:	bb 27       	eor	r27, r27
    109e:	a1 2f       	mov	r26, r17
    10a0:	90 2f       	mov	r25, r16
    10a2:	8f 2d       	mov	r24, r15
    10a4:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    10a6:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    10a8:	88 e1       	ldi	r24, 0x18	; 24
    10aa:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    10ac:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    10ae:	8e e8       	ldi	r24, 0x8E	; 142
    10b0:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    10b2:	66 e4       	ldi	r22, 0x46	; 70
    10b4:	78 e0       	ldi	r23, 0x08	; 8
    10b6:	82 e4       	ldi	r24, 0x42	; 66
    10b8:	98 e0       	ldi	r25, 0x08	; 8
    10ba:	79 d1       	rcall	.+754    	; 0x13ae <fdevopen>
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	ff 90       	pop	r15
    10c2:	ef 90       	pop	r14
    10c4:	08 95       	ret

000010c6 <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    10c6:	9b 01       	movw	r18, r22
	
	switch(channel){
    10c8:	82 30       	cpi	r24, 0x02	; 2
    10ca:	69 f0       	breq	.+26     	; 0x10e6 <ADC_request+0x20>
    10cc:	18 f4       	brcc	.+6      	; 0x10d4 <ADC_request+0xe>
    10ce:	81 30       	cpi	r24, 0x01	; 1
    10d0:	31 f0       	breq	.+12     	; 0x10de <ADC_request+0x18>
    10d2:	15 c0       	rjmp	.+42     	; 0x10fe <ADC_request+0x38>
    10d4:	83 30       	cpi	r24, 0x03	; 3
    10d6:	59 f0       	breq	.+22     	; 0x10ee <ADC_request+0x28>
    10d8:	84 30       	cpi	r24, 0x04	; 4
    10da:	69 f0       	breq	.+26     	; 0x10f6 <ADC_request+0x30>
    10dc:	10 c0       	rjmp	.+32     	; 0x10fe <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    10de:	64 e0       	ldi	r22, 0x04	; 4
    10e0:	c9 01       	movw	r24, r18
    10e2:	fa c9       	rjmp	.-3084   	; 0x4d8 <saveToAddress>
    10e4:	08 95       	ret
			break;
    10e6:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    10e8:	c9 01       	movw	r24, r18
    10ea:	f6 c9       	rjmp	.-3092   	; 0x4d8 <saveToAddress>
    10ec:	08 95       	ret
    10ee:	66 e0       	ldi	r22, 0x06	; 6
			break;
    10f0:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    10f2:	f2 c9       	rjmp	.-3100   	; 0x4d8 <saveToAddress>
    10f4:	08 95       	ret
    10f6:	67 e0       	ldi	r22, 0x07	; 7
    10f8:	c9 01       	movw	r24, r18
			break;
    10fa:	ee c9       	rjmp	.-3108   	; 0x4d8 <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    10fc:	08 95       	ret
    10fe:	8a ef       	ldi	r24, 0xFA	; 250
    1100:	92 e0       	ldi	r25, 0x02	; 2
    1102:	9f 93       	push	r25
			break;
    1104:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    1106:	9d d1       	rcall	.+826    	; 0x1442 <printf>
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	08 95       	ret

0000110e <ADC_read>:
    110e:	e1 c9       	rjmp	.-3134   	; 0x4d2 <readFromAddress>
    1110:	08 95       	ret

00001112 <__divmodhi4>:
			break;
    1112:	97 fb       	bst	r25, 7
    1114:	07 2e       	mov	r0, r23
    1116:	16 f4       	brtc	.+4      	; 0x111c <__divmodhi4+0xa>
    1118:	00 94       	com	r0
    111a:	06 d0       	rcall	.+12     	; 0x1128 <__divmodhi4_neg1>
    111c:	77 fd       	sbrc	r23, 7
    111e:	08 d0       	rcall	.+16     	; 0x1130 <__divmodhi4_neg2>
    1120:	0b d0       	rcall	.+22     	; 0x1138 <__udivmodhi4>
    1122:	07 fc       	sbrc	r0, 7
    1124:	05 d0       	rcall	.+10     	; 0x1130 <__divmodhi4_neg2>
    1126:	3e f4       	brtc	.+14     	; 0x1136 <__divmodhi4_exit>

00001128 <__divmodhi4_neg1>:
    1128:	90 95       	com	r25
    112a:	81 95       	neg	r24
    112c:	9f 4f       	sbci	r25, 0xFF	; 255
    112e:	08 95       	ret

00001130 <__divmodhi4_neg2>:
    1130:	70 95       	com	r23
    1132:	61 95       	neg	r22
    1134:	7f 4f       	sbci	r23, 0xFF	; 255

00001136 <__divmodhi4_exit>:
    1136:	08 95       	ret

00001138 <__udivmodhi4>:
    1138:	aa 1b       	sub	r26, r26
    113a:	bb 1b       	sub	r27, r27
    113c:	51 e1       	ldi	r21, 0x11	; 17
    113e:	07 c0       	rjmp	.+14     	; 0x114e <__udivmodhi4_ep>

00001140 <__udivmodhi4_loop>:
    1140:	aa 1f       	adc	r26, r26
    1142:	bb 1f       	adc	r27, r27
    1144:	a6 17       	cp	r26, r22
    1146:	b7 07       	cpc	r27, r23
    1148:	10 f0       	brcs	.+4      	; 0x114e <__udivmodhi4_ep>
    114a:	a6 1b       	sub	r26, r22
    114c:	b7 0b       	sbc	r27, r23

0000114e <__udivmodhi4_ep>:
    114e:	88 1f       	adc	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	5a 95       	dec	r21
    1154:	a9 f7       	brne	.-22     	; 0x1140 <__udivmodhi4_loop>
    1156:	80 95       	com	r24
    1158:	90 95       	com	r25
    115a:	bc 01       	movw	r22, r24
    115c:	cd 01       	movw	r24, r26
    115e:	08 95       	ret

00001160 <malloc>:
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	82 30       	cpi	r24, 0x02	; 2
    1166:	91 05       	cpc	r25, r1
    1168:	10 f4       	brcc	.+4      	; 0x116e <malloc+0xe>
    116a:	82 e0       	ldi	r24, 0x02	; 2
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	e0 91 31 03 	lds	r30, 0x0331
    1172:	f0 91 32 03 	lds	r31, 0x0332
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	a0 e0       	ldi	r26, 0x00	; 0
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	30 97       	sbiw	r30, 0x00	; 0
    1180:	39 f1       	breq	.+78     	; 0x11d0 <malloc+0x70>
    1182:	40 81       	ld	r20, Z
    1184:	51 81       	ldd	r21, Z+1	; 0x01
    1186:	48 17       	cp	r20, r24
    1188:	59 07       	cpc	r21, r25
    118a:	b8 f0       	brcs	.+46     	; 0x11ba <malloc+0x5a>
    118c:	48 17       	cp	r20, r24
    118e:	59 07       	cpc	r21, r25
    1190:	71 f4       	brne	.+28     	; 0x11ae <malloc+0x4e>
    1192:	82 81       	ldd	r24, Z+2	; 0x02
    1194:	93 81       	ldd	r25, Z+3	; 0x03
    1196:	10 97       	sbiw	r26, 0x00	; 0
    1198:	29 f0       	breq	.+10     	; 0x11a4 <malloc+0x44>
    119a:	13 96       	adiw	r26, 0x03	; 3
    119c:	9c 93       	st	X, r25
    119e:	8e 93       	st	-X, r24
    11a0:	12 97       	sbiw	r26, 0x02	; 2
    11a2:	2c c0       	rjmp	.+88     	; 0x11fc <malloc+0x9c>
    11a4:	90 93 32 03 	sts	0x0332, r25
    11a8:	80 93 31 03 	sts	0x0331, r24
    11ac:	27 c0       	rjmp	.+78     	; 0x11fc <malloc+0x9c>
    11ae:	21 15       	cp	r18, r1
    11b0:	31 05       	cpc	r19, r1
    11b2:	31 f0       	breq	.+12     	; 0x11c0 <malloc+0x60>
    11b4:	42 17       	cp	r20, r18
    11b6:	53 07       	cpc	r21, r19
    11b8:	18 f0       	brcs	.+6      	; 0x11c0 <malloc+0x60>
    11ba:	a9 01       	movw	r20, r18
    11bc:	db 01       	movw	r26, r22
    11be:	01 c0       	rjmp	.+2      	; 0x11c2 <malloc+0x62>
    11c0:	ef 01       	movw	r28, r30
    11c2:	9a 01       	movw	r18, r20
    11c4:	bd 01       	movw	r22, r26
    11c6:	df 01       	movw	r26, r30
    11c8:	02 80       	ldd	r0, Z+2	; 0x02
    11ca:	f3 81       	ldd	r31, Z+3	; 0x03
    11cc:	e0 2d       	mov	r30, r0
    11ce:	d7 cf       	rjmp	.-82     	; 0x117e <malloc+0x1e>
    11d0:	21 15       	cp	r18, r1
    11d2:	31 05       	cpc	r19, r1
    11d4:	f9 f0       	breq	.+62     	; 0x1214 <malloc+0xb4>
    11d6:	28 1b       	sub	r18, r24
    11d8:	39 0b       	sbc	r19, r25
    11da:	24 30       	cpi	r18, 0x04	; 4
    11dc:	31 05       	cpc	r19, r1
    11de:	80 f4       	brcc	.+32     	; 0x1200 <malloc+0xa0>
    11e0:	8a 81       	ldd	r24, Y+2	; 0x02
    11e2:	9b 81       	ldd	r25, Y+3	; 0x03
    11e4:	61 15       	cp	r22, r1
    11e6:	71 05       	cpc	r23, r1
    11e8:	21 f0       	breq	.+8      	; 0x11f2 <malloc+0x92>
    11ea:	fb 01       	movw	r30, r22
    11ec:	93 83       	std	Z+3, r25	; 0x03
    11ee:	82 83       	std	Z+2, r24	; 0x02
    11f0:	04 c0       	rjmp	.+8      	; 0x11fa <malloc+0x9a>
    11f2:	90 93 32 03 	sts	0x0332, r25
    11f6:	80 93 31 03 	sts	0x0331, r24
    11fa:	fe 01       	movw	r30, r28
    11fc:	32 96       	adiw	r30, 0x02	; 2
    11fe:	44 c0       	rjmp	.+136    	; 0x1288 <malloc+0x128>
    1200:	fe 01       	movw	r30, r28
    1202:	e2 0f       	add	r30, r18
    1204:	f3 1f       	adc	r31, r19
    1206:	81 93       	st	Z+, r24
    1208:	91 93       	st	Z+, r25
    120a:	22 50       	subi	r18, 0x02	; 2
    120c:	31 09       	sbc	r19, r1
    120e:	39 83       	std	Y+1, r19	; 0x01
    1210:	28 83       	st	Y, r18
    1212:	3a c0       	rjmp	.+116    	; 0x1288 <malloc+0x128>
    1214:	20 91 2f 03 	lds	r18, 0x032F
    1218:	30 91 30 03 	lds	r19, 0x0330
    121c:	23 2b       	or	r18, r19
    121e:	41 f4       	brne	.+16     	; 0x1230 <malloc+0xd0>
    1220:	20 91 02 01 	lds	r18, 0x0102
    1224:	30 91 03 01 	lds	r19, 0x0103
    1228:	30 93 30 03 	sts	0x0330, r19
    122c:	20 93 2f 03 	sts	0x032F, r18
    1230:	20 91 00 01 	lds	r18, 0x0100
    1234:	30 91 01 01 	lds	r19, 0x0101
    1238:	21 15       	cp	r18, r1
    123a:	31 05       	cpc	r19, r1
    123c:	41 f4       	brne	.+16     	; 0x124e <malloc+0xee>
    123e:	2d b7       	in	r18, 0x3d	; 61
    1240:	3e b7       	in	r19, 0x3e	; 62
    1242:	40 91 04 01 	lds	r20, 0x0104
    1246:	50 91 05 01 	lds	r21, 0x0105
    124a:	24 1b       	sub	r18, r20
    124c:	35 0b       	sbc	r19, r21
    124e:	e0 91 2f 03 	lds	r30, 0x032F
    1252:	f0 91 30 03 	lds	r31, 0x0330
    1256:	e2 17       	cp	r30, r18
    1258:	f3 07       	cpc	r31, r19
    125a:	a0 f4       	brcc	.+40     	; 0x1284 <malloc+0x124>
    125c:	2e 1b       	sub	r18, r30
    125e:	3f 0b       	sbc	r19, r31
    1260:	28 17       	cp	r18, r24
    1262:	39 07       	cpc	r19, r25
    1264:	78 f0       	brcs	.+30     	; 0x1284 <malloc+0x124>
    1266:	ac 01       	movw	r20, r24
    1268:	4e 5f       	subi	r20, 0xFE	; 254
    126a:	5f 4f       	sbci	r21, 0xFF	; 255
    126c:	24 17       	cp	r18, r20
    126e:	35 07       	cpc	r19, r21
    1270:	48 f0       	brcs	.+18     	; 0x1284 <malloc+0x124>
    1272:	4e 0f       	add	r20, r30
    1274:	5f 1f       	adc	r21, r31
    1276:	50 93 30 03 	sts	0x0330, r21
    127a:	40 93 2f 03 	sts	0x032F, r20
    127e:	81 93       	st	Z+, r24
    1280:	91 93       	st	Z+, r25
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <malloc+0x128>
    1284:	e0 e0       	ldi	r30, 0x00	; 0
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	cf 01       	movw	r24, r30
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	08 95       	ret

00001290 <free>:
    1290:	cf 93       	push	r28
    1292:	df 93       	push	r29
    1294:	00 97       	sbiw	r24, 0x00	; 0
    1296:	09 f4       	brne	.+2      	; 0x129a <free+0xa>
    1298:	87 c0       	rjmp	.+270    	; 0x13a8 <free+0x118>
    129a:	fc 01       	movw	r30, r24
    129c:	32 97       	sbiw	r30, 0x02	; 2
    129e:	13 82       	std	Z+3, r1	; 0x03
    12a0:	12 82       	std	Z+2, r1	; 0x02
    12a2:	c0 91 31 03 	lds	r28, 0x0331
    12a6:	d0 91 32 03 	lds	r29, 0x0332
    12aa:	20 97       	sbiw	r28, 0x00	; 0
    12ac:	81 f4       	brne	.+32     	; 0x12ce <free+0x3e>
    12ae:	20 81       	ld	r18, Z
    12b0:	31 81       	ldd	r19, Z+1	; 0x01
    12b2:	28 0f       	add	r18, r24
    12b4:	39 1f       	adc	r19, r25
    12b6:	80 91 2f 03 	lds	r24, 0x032F
    12ba:	90 91 30 03 	lds	r25, 0x0330
    12be:	82 17       	cp	r24, r18
    12c0:	93 07       	cpc	r25, r19
    12c2:	79 f5       	brne	.+94     	; 0x1322 <free+0x92>
    12c4:	f0 93 30 03 	sts	0x0330, r31
    12c8:	e0 93 2f 03 	sts	0x032F, r30
    12cc:	6d c0       	rjmp	.+218    	; 0x13a8 <free+0x118>
    12ce:	de 01       	movw	r26, r28
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	ae 17       	cp	r26, r30
    12d6:	bf 07       	cpc	r27, r31
    12d8:	50 f4       	brcc	.+20     	; 0x12ee <free+0x5e>
    12da:	12 96       	adiw	r26, 0x02	; 2
    12dc:	4d 91       	ld	r20, X+
    12de:	5c 91       	ld	r21, X
    12e0:	13 97       	sbiw	r26, 0x03	; 3
    12e2:	9d 01       	movw	r18, r26
    12e4:	41 15       	cp	r20, r1
    12e6:	51 05       	cpc	r21, r1
    12e8:	09 f1       	breq	.+66     	; 0x132c <free+0x9c>
    12ea:	da 01       	movw	r26, r20
    12ec:	f3 cf       	rjmp	.-26     	; 0x12d4 <free+0x44>
    12ee:	b3 83       	std	Z+3, r27	; 0x03
    12f0:	a2 83       	std	Z+2, r26	; 0x02
    12f2:	40 81       	ld	r20, Z
    12f4:	51 81       	ldd	r21, Z+1	; 0x01
    12f6:	84 0f       	add	r24, r20
    12f8:	95 1f       	adc	r25, r21
    12fa:	8a 17       	cp	r24, r26
    12fc:	9b 07       	cpc	r25, r27
    12fe:	71 f4       	brne	.+28     	; 0x131c <free+0x8c>
    1300:	8d 91       	ld	r24, X+
    1302:	9c 91       	ld	r25, X
    1304:	11 97       	sbiw	r26, 0x01	; 1
    1306:	84 0f       	add	r24, r20
    1308:	95 1f       	adc	r25, r21
    130a:	02 96       	adiw	r24, 0x02	; 2
    130c:	91 83       	std	Z+1, r25	; 0x01
    130e:	80 83       	st	Z, r24
    1310:	12 96       	adiw	r26, 0x02	; 2
    1312:	8d 91       	ld	r24, X+
    1314:	9c 91       	ld	r25, X
    1316:	13 97       	sbiw	r26, 0x03	; 3
    1318:	93 83       	std	Z+3, r25	; 0x03
    131a:	82 83       	std	Z+2, r24	; 0x02
    131c:	21 15       	cp	r18, r1
    131e:	31 05       	cpc	r19, r1
    1320:	29 f4       	brne	.+10     	; 0x132c <free+0x9c>
    1322:	f0 93 32 03 	sts	0x0332, r31
    1326:	e0 93 31 03 	sts	0x0331, r30
    132a:	3e c0       	rjmp	.+124    	; 0x13a8 <free+0x118>
    132c:	d9 01       	movw	r26, r18
    132e:	13 96       	adiw	r26, 0x03	; 3
    1330:	fc 93       	st	X, r31
    1332:	ee 93       	st	-X, r30
    1334:	12 97       	sbiw	r26, 0x02	; 2
    1336:	4d 91       	ld	r20, X+
    1338:	5d 91       	ld	r21, X+
    133a:	a4 0f       	add	r26, r20
    133c:	b5 1f       	adc	r27, r21
    133e:	ea 17       	cp	r30, r26
    1340:	fb 07       	cpc	r31, r27
    1342:	79 f4       	brne	.+30     	; 0x1362 <free+0xd2>
    1344:	80 81       	ld	r24, Z
    1346:	91 81       	ldd	r25, Z+1	; 0x01
    1348:	84 0f       	add	r24, r20
    134a:	95 1f       	adc	r25, r21
    134c:	02 96       	adiw	r24, 0x02	; 2
    134e:	d9 01       	movw	r26, r18
    1350:	11 96       	adiw	r26, 0x01	; 1
    1352:	9c 93       	st	X, r25
    1354:	8e 93       	st	-X, r24
    1356:	82 81       	ldd	r24, Z+2	; 0x02
    1358:	93 81       	ldd	r25, Z+3	; 0x03
    135a:	13 96       	adiw	r26, 0x03	; 3
    135c:	9c 93       	st	X, r25
    135e:	8e 93       	st	-X, r24
    1360:	12 97       	sbiw	r26, 0x02	; 2
    1362:	e0 e0       	ldi	r30, 0x00	; 0
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	8a 81       	ldd	r24, Y+2	; 0x02
    1368:	9b 81       	ldd	r25, Y+3	; 0x03
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	19 f0       	breq	.+6      	; 0x1374 <free+0xe4>
    136e:	fe 01       	movw	r30, r28
    1370:	ec 01       	movw	r28, r24
    1372:	f9 cf       	rjmp	.-14     	; 0x1366 <free+0xd6>
    1374:	ce 01       	movw	r24, r28
    1376:	02 96       	adiw	r24, 0x02	; 2
    1378:	28 81       	ld	r18, Y
    137a:	39 81       	ldd	r19, Y+1	; 0x01
    137c:	82 0f       	add	r24, r18
    137e:	93 1f       	adc	r25, r19
    1380:	20 91 2f 03 	lds	r18, 0x032F
    1384:	30 91 30 03 	lds	r19, 0x0330
    1388:	28 17       	cp	r18, r24
    138a:	39 07       	cpc	r19, r25
    138c:	69 f4       	brne	.+26     	; 0x13a8 <free+0x118>
    138e:	30 97       	sbiw	r30, 0x00	; 0
    1390:	29 f4       	brne	.+10     	; 0x139c <free+0x10c>
    1392:	10 92 32 03 	sts	0x0332, r1
    1396:	10 92 31 03 	sts	0x0331, r1
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <free+0x110>
    139c:	13 82       	std	Z+3, r1	; 0x03
    139e:	12 82       	std	Z+2, r1	; 0x02
    13a0:	d0 93 30 03 	sts	0x0330, r29
    13a4:	c0 93 2f 03 	sts	0x032F, r28
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	08 95       	ret

000013ae <fdevopen>:
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	ec 01       	movw	r28, r24
    13b8:	8b 01       	movw	r16, r22
    13ba:	00 97       	sbiw	r24, 0x00	; 0
    13bc:	31 f4       	brne	.+12     	; 0x13ca <fdevopen+0x1c>
    13be:	61 15       	cp	r22, r1
    13c0:	71 05       	cpc	r23, r1
    13c2:	19 f4       	brne	.+6      	; 0x13ca <fdevopen+0x1c>
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	90 e0       	ldi	r25, 0x00	; 0
    13c8:	37 c0       	rjmp	.+110    	; 0x1438 <fdevopen+0x8a>
    13ca:	6e e0       	ldi	r22, 0x0E	; 14
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	38 d2       	rcall	.+1136   	; 0x1844 <calloc>
    13d4:	fc 01       	movw	r30, r24
    13d6:	00 97       	sbiw	r24, 0x00	; 0
    13d8:	a9 f3       	breq	.-22     	; 0x13c4 <fdevopen+0x16>
    13da:	80 e8       	ldi	r24, 0x80	; 128
    13dc:	83 83       	std	Z+3, r24	; 0x03
    13de:	01 15       	cp	r16, r1
    13e0:	11 05       	cpc	r17, r1
    13e2:	71 f0       	breq	.+28     	; 0x1400 <fdevopen+0x52>
    13e4:	13 87       	std	Z+11, r17	; 0x0b
    13e6:	02 87       	std	Z+10, r16	; 0x0a
    13e8:	81 e8       	ldi	r24, 0x81	; 129
    13ea:	83 83       	std	Z+3, r24	; 0x03
    13ec:	80 91 33 03 	lds	r24, 0x0333
    13f0:	90 91 34 03 	lds	r25, 0x0334
    13f4:	89 2b       	or	r24, r25
    13f6:	21 f4       	brne	.+8      	; 0x1400 <fdevopen+0x52>
    13f8:	f0 93 34 03 	sts	0x0334, r31
    13fc:	e0 93 33 03 	sts	0x0333, r30
    1400:	20 97       	sbiw	r28, 0x00	; 0
    1402:	c9 f0       	breq	.+50     	; 0x1436 <fdevopen+0x88>
    1404:	d1 87       	std	Z+9, r29	; 0x09
    1406:	c0 87       	std	Z+8, r28	; 0x08
    1408:	83 81       	ldd	r24, Z+3	; 0x03
    140a:	82 60       	ori	r24, 0x02	; 2
    140c:	83 83       	std	Z+3, r24	; 0x03
    140e:	80 91 35 03 	lds	r24, 0x0335
    1412:	90 91 36 03 	lds	r25, 0x0336
    1416:	89 2b       	or	r24, r25
    1418:	71 f4       	brne	.+28     	; 0x1436 <fdevopen+0x88>
    141a:	f0 93 36 03 	sts	0x0336, r31
    141e:	e0 93 35 03 	sts	0x0335, r30
    1422:	80 91 37 03 	lds	r24, 0x0337
    1426:	90 91 38 03 	lds	r25, 0x0338
    142a:	89 2b       	or	r24, r25
    142c:	21 f4       	brne	.+8      	; 0x1436 <fdevopen+0x88>
    142e:	f0 93 38 03 	sts	0x0338, r31
    1432:	e0 93 37 03 	sts	0x0337, r30
    1436:	cf 01       	movw	r24, r30
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	1f 91       	pop	r17
    143e:	0f 91       	pop	r16
    1440:	08 95       	ret

00001442 <printf>:
    1442:	a0 e0       	ldi	r26, 0x00	; 0
    1444:	b0 e0       	ldi	r27, 0x00	; 0
    1446:	e6 e2       	ldi	r30, 0x26	; 38
    1448:	fa e0       	ldi	r31, 0x0A	; 10
    144a:	d3 c2       	rjmp	.+1446   	; 0x19f2 <__prologue_saves__+0x20>
    144c:	fe 01       	movw	r30, r28
    144e:	35 96       	adiw	r30, 0x05	; 5
    1450:	61 91       	ld	r22, Z+
    1452:	71 91       	ld	r23, Z+
    1454:	af 01       	movw	r20, r30
    1456:	80 91 35 03 	lds	r24, 0x0335
    145a:	90 91 36 03 	lds	r25, 0x0336
    145e:	2f d0       	rcall	.+94     	; 0x14be <vfprintf>
    1460:	e2 e0       	ldi	r30, 0x02	; 2
    1462:	e3 c2       	rjmp	.+1478   	; 0x1a2a <__epilogue_restores__+0x20>

00001464 <puts>:
    1464:	0f 93       	push	r16
    1466:	1f 93       	push	r17
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	e0 91 35 03 	lds	r30, 0x0335
    1470:	f0 91 36 03 	lds	r31, 0x0336
    1474:	23 81       	ldd	r18, Z+3	; 0x03
    1476:	21 ff       	sbrs	r18, 1
    1478:	1b c0       	rjmp	.+54     	; 0x14b0 <puts+0x4c>
    147a:	ec 01       	movw	r28, r24
    147c:	00 e0       	ldi	r16, 0x00	; 0
    147e:	10 e0       	ldi	r17, 0x00	; 0
    1480:	89 91       	ld	r24, Y+
    1482:	60 91 35 03 	lds	r22, 0x0335
    1486:	70 91 36 03 	lds	r23, 0x0336
    148a:	db 01       	movw	r26, r22
    148c:	18 96       	adiw	r26, 0x08	; 8
    148e:	ed 91       	ld	r30, X+
    1490:	fc 91       	ld	r31, X
    1492:	19 97       	sbiw	r26, 0x09	; 9
    1494:	88 23       	and	r24, r24
    1496:	31 f0       	breq	.+12     	; 0x14a4 <puts+0x40>
    1498:	09 95       	icall
    149a:	89 2b       	or	r24, r25
    149c:	89 f3       	breq	.-30     	; 0x1480 <puts+0x1c>
    149e:	0f ef       	ldi	r16, 0xFF	; 255
    14a0:	1f ef       	ldi	r17, 0xFF	; 255
    14a2:	ee cf       	rjmp	.-36     	; 0x1480 <puts+0x1c>
    14a4:	8a e0       	ldi	r24, 0x0A	; 10
    14a6:	09 95       	icall
    14a8:	89 2b       	or	r24, r25
    14aa:	11 f4       	brne	.+4      	; 0x14b0 <puts+0x4c>
    14ac:	c8 01       	movw	r24, r16
    14ae:	02 c0       	rjmp	.+4      	; 0x14b4 <puts+0x50>
    14b0:	8f ef       	ldi	r24, 0xFF	; 255
    14b2:	9f ef       	ldi	r25, 0xFF	; 255
    14b4:	df 91       	pop	r29
    14b6:	cf 91       	pop	r28
    14b8:	1f 91       	pop	r17
    14ba:	0f 91       	pop	r16
    14bc:	08 95       	ret

000014be <vfprintf>:
    14be:	ac e0       	ldi	r26, 0x0C	; 12
    14c0:	b0 e0       	ldi	r27, 0x00	; 0
    14c2:	e4 e6       	ldi	r30, 0x64	; 100
    14c4:	fa e0       	ldi	r31, 0x0A	; 10
    14c6:	85 c2       	rjmp	.+1290   	; 0x19d2 <__prologue_saves__>
    14c8:	7c 01       	movw	r14, r24
    14ca:	6b 01       	movw	r12, r22
    14cc:	8a 01       	movw	r16, r20
    14ce:	fc 01       	movw	r30, r24
    14d0:	17 82       	std	Z+7, r1	; 0x07
    14d2:	16 82       	std	Z+6, r1	; 0x06
    14d4:	83 81       	ldd	r24, Z+3	; 0x03
    14d6:	81 ff       	sbrs	r24, 1
    14d8:	b0 c1       	rjmp	.+864    	; 0x183a <vfprintf+0x37c>
    14da:	ce 01       	movw	r24, r28
    14dc:	01 96       	adiw	r24, 0x01	; 1
    14de:	4c 01       	movw	r8, r24
    14e0:	f7 01       	movw	r30, r14
    14e2:	93 81       	ldd	r25, Z+3	; 0x03
    14e4:	f6 01       	movw	r30, r12
    14e6:	93 fd       	sbrc	r25, 3
    14e8:	85 91       	lpm	r24, Z+
    14ea:	93 ff       	sbrs	r25, 3
    14ec:	81 91       	ld	r24, Z+
    14ee:	6f 01       	movw	r12, r30
    14f0:	88 23       	and	r24, r24
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <vfprintf+0x38>
    14f4:	9e c1       	rjmp	.+828    	; 0x1832 <vfprintf+0x374>
    14f6:	85 32       	cpi	r24, 0x25	; 37
    14f8:	39 f4       	brne	.+14     	; 0x1508 <vfprintf+0x4a>
    14fa:	93 fd       	sbrc	r25, 3
    14fc:	85 91       	lpm	r24, Z+
    14fe:	93 ff       	sbrs	r25, 3
    1500:	81 91       	ld	r24, Z+
    1502:	6f 01       	movw	r12, r30
    1504:	85 32       	cpi	r24, 0x25	; 37
    1506:	21 f4       	brne	.+8      	; 0x1510 <vfprintf+0x52>
    1508:	b7 01       	movw	r22, r14
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	d2 d1       	rcall	.+932    	; 0x18b2 <fputc>
    150e:	e8 cf       	rjmp	.-48     	; 0x14e0 <vfprintf+0x22>
    1510:	51 2c       	mov	r5, r1
    1512:	31 2c       	mov	r3, r1
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	20 32       	cpi	r18, 0x20	; 32
    1518:	a0 f4       	brcc	.+40     	; 0x1542 <vfprintf+0x84>
    151a:	8b 32       	cpi	r24, 0x2B	; 43
    151c:	69 f0       	breq	.+26     	; 0x1538 <vfprintf+0x7a>
    151e:	30 f4       	brcc	.+12     	; 0x152c <vfprintf+0x6e>
    1520:	80 32       	cpi	r24, 0x20	; 32
    1522:	59 f0       	breq	.+22     	; 0x153a <vfprintf+0x7c>
    1524:	83 32       	cpi	r24, 0x23	; 35
    1526:	69 f4       	brne	.+26     	; 0x1542 <vfprintf+0x84>
    1528:	20 61       	ori	r18, 0x10	; 16
    152a:	2c c0       	rjmp	.+88     	; 0x1584 <vfprintf+0xc6>
    152c:	8d 32       	cpi	r24, 0x2D	; 45
    152e:	39 f0       	breq	.+14     	; 0x153e <vfprintf+0x80>
    1530:	80 33       	cpi	r24, 0x30	; 48
    1532:	39 f4       	brne	.+14     	; 0x1542 <vfprintf+0x84>
    1534:	21 60       	ori	r18, 0x01	; 1
    1536:	26 c0       	rjmp	.+76     	; 0x1584 <vfprintf+0xc6>
    1538:	22 60       	ori	r18, 0x02	; 2
    153a:	24 60       	ori	r18, 0x04	; 4
    153c:	23 c0       	rjmp	.+70     	; 0x1584 <vfprintf+0xc6>
    153e:	28 60       	ori	r18, 0x08	; 8
    1540:	21 c0       	rjmp	.+66     	; 0x1584 <vfprintf+0xc6>
    1542:	27 fd       	sbrc	r18, 7
    1544:	27 c0       	rjmp	.+78     	; 0x1594 <vfprintf+0xd6>
    1546:	30 ed       	ldi	r19, 0xD0	; 208
    1548:	38 0f       	add	r19, r24
    154a:	3a 30       	cpi	r19, 0x0A	; 10
    154c:	78 f4       	brcc	.+30     	; 0x156c <vfprintf+0xae>
    154e:	26 ff       	sbrs	r18, 6
    1550:	06 c0       	rjmp	.+12     	; 0x155e <vfprintf+0xa0>
    1552:	fa e0       	ldi	r31, 0x0A	; 10
    1554:	5f 9e       	mul	r5, r31
    1556:	30 0d       	add	r19, r0
    1558:	11 24       	eor	r1, r1
    155a:	53 2e       	mov	r5, r19
    155c:	13 c0       	rjmp	.+38     	; 0x1584 <vfprintf+0xc6>
    155e:	8a e0       	ldi	r24, 0x0A	; 10
    1560:	38 9e       	mul	r3, r24
    1562:	30 0d       	add	r19, r0
    1564:	11 24       	eor	r1, r1
    1566:	33 2e       	mov	r3, r19
    1568:	20 62       	ori	r18, 0x20	; 32
    156a:	0c c0       	rjmp	.+24     	; 0x1584 <vfprintf+0xc6>
    156c:	8e 32       	cpi	r24, 0x2E	; 46
    156e:	21 f4       	brne	.+8      	; 0x1578 <vfprintf+0xba>
    1570:	26 fd       	sbrc	r18, 6
    1572:	5f c1       	rjmp	.+702    	; 0x1832 <vfprintf+0x374>
    1574:	20 64       	ori	r18, 0x40	; 64
    1576:	06 c0       	rjmp	.+12     	; 0x1584 <vfprintf+0xc6>
    1578:	8c 36       	cpi	r24, 0x6C	; 108
    157a:	11 f4       	brne	.+4      	; 0x1580 <vfprintf+0xc2>
    157c:	20 68       	ori	r18, 0x80	; 128
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <vfprintf+0xc6>
    1580:	88 36       	cpi	r24, 0x68	; 104
    1582:	41 f4       	brne	.+16     	; 0x1594 <vfprintf+0xd6>
    1584:	f6 01       	movw	r30, r12
    1586:	93 fd       	sbrc	r25, 3
    1588:	85 91       	lpm	r24, Z+
    158a:	93 ff       	sbrs	r25, 3
    158c:	81 91       	ld	r24, Z+
    158e:	6f 01       	movw	r12, r30
    1590:	81 11       	cpse	r24, r1
    1592:	c1 cf       	rjmp	.-126    	; 0x1516 <vfprintf+0x58>
    1594:	98 2f       	mov	r25, r24
    1596:	9f 7d       	andi	r25, 0xDF	; 223
    1598:	95 54       	subi	r25, 0x45	; 69
    159a:	93 30       	cpi	r25, 0x03	; 3
    159c:	28 f4       	brcc	.+10     	; 0x15a8 <vfprintf+0xea>
    159e:	0c 5f       	subi	r16, 0xFC	; 252
    15a0:	1f 4f       	sbci	r17, 0xFF	; 255
    15a2:	ff e3       	ldi	r31, 0x3F	; 63
    15a4:	f9 83       	std	Y+1, r31	; 0x01
    15a6:	0d c0       	rjmp	.+26     	; 0x15c2 <vfprintf+0x104>
    15a8:	83 36       	cpi	r24, 0x63	; 99
    15aa:	31 f0       	breq	.+12     	; 0x15b8 <vfprintf+0xfa>
    15ac:	83 37       	cpi	r24, 0x73	; 115
    15ae:	71 f0       	breq	.+28     	; 0x15cc <vfprintf+0x10e>
    15b0:	83 35       	cpi	r24, 0x53	; 83
    15b2:	09 f0       	breq	.+2      	; 0x15b6 <vfprintf+0xf8>
    15b4:	57 c0       	rjmp	.+174    	; 0x1664 <vfprintf+0x1a6>
    15b6:	21 c0       	rjmp	.+66     	; 0x15fa <vfprintf+0x13c>
    15b8:	f8 01       	movw	r30, r16
    15ba:	80 81       	ld	r24, Z
    15bc:	89 83       	std	Y+1, r24	; 0x01
    15be:	0e 5f       	subi	r16, 0xFE	; 254
    15c0:	1f 4f       	sbci	r17, 0xFF	; 255
    15c2:	44 24       	eor	r4, r4
    15c4:	43 94       	inc	r4
    15c6:	51 2c       	mov	r5, r1
    15c8:	54 01       	movw	r10, r8
    15ca:	14 c0       	rjmp	.+40     	; 0x15f4 <vfprintf+0x136>
    15cc:	38 01       	movw	r6, r16
    15ce:	f2 e0       	ldi	r31, 0x02	; 2
    15d0:	6f 0e       	add	r6, r31
    15d2:	71 1c       	adc	r7, r1
    15d4:	f8 01       	movw	r30, r16
    15d6:	a0 80       	ld	r10, Z
    15d8:	b1 80       	ldd	r11, Z+1	; 0x01
    15da:	26 ff       	sbrs	r18, 6
    15dc:	03 c0       	rjmp	.+6      	; 0x15e4 <vfprintf+0x126>
    15de:	65 2d       	mov	r22, r5
    15e0:	70 e0       	ldi	r23, 0x00	; 0
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <vfprintf+0x12a>
    15e4:	6f ef       	ldi	r22, 0xFF	; 255
    15e6:	7f ef       	ldi	r23, 0xFF	; 255
    15e8:	c5 01       	movw	r24, r10
    15ea:	2c 87       	std	Y+12, r18	; 0x0c
    15ec:	57 d1       	rcall	.+686    	; 0x189c <strnlen>
    15ee:	2c 01       	movw	r4, r24
    15f0:	83 01       	movw	r16, r6
    15f2:	2c 85       	ldd	r18, Y+12	; 0x0c
    15f4:	2f 77       	andi	r18, 0x7F	; 127
    15f6:	22 2e       	mov	r2, r18
    15f8:	16 c0       	rjmp	.+44     	; 0x1626 <vfprintf+0x168>
    15fa:	38 01       	movw	r6, r16
    15fc:	f2 e0       	ldi	r31, 0x02	; 2
    15fe:	6f 0e       	add	r6, r31
    1600:	71 1c       	adc	r7, r1
    1602:	f8 01       	movw	r30, r16
    1604:	a0 80       	ld	r10, Z
    1606:	b1 80       	ldd	r11, Z+1	; 0x01
    1608:	26 ff       	sbrs	r18, 6
    160a:	03 c0       	rjmp	.+6      	; 0x1612 <vfprintf+0x154>
    160c:	65 2d       	mov	r22, r5
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <vfprintf+0x158>
    1612:	6f ef       	ldi	r22, 0xFF	; 255
    1614:	7f ef       	ldi	r23, 0xFF	; 255
    1616:	c5 01       	movw	r24, r10
    1618:	2c 87       	std	Y+12, r18	; 0x0c
    161a:	2e d1       	rcall	.+604    	; 0x1878 <strnlen_P>
    161c:	2c 01       	movw	r4, r24
    161e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1620:	20 68       	ori	r18, 0x80	; 128
    1622:	22 2e       	mov	r2, r18
    1624:	83 01       	movw	r16, r6
    1626:	23 fc       	sbrc	r2, 3
    1628:	19 c0       	rjmp	.+50     	; 0x165c <vfprintf+0x19e>
    162a:	83 2d       	mov	r24, r3
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	48 16       	cp	r4, r24
    1630:	59 06       	cpc	r5, r25
    1632:	a0 f4       	brcc	.+40     	; 0x165c <vfprintf+0x19e>
    1634:	b7 01       	movw	r22, r14
    1636:	80 e2       	ldi	r24, 0x20	; 32
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	3b d1       	rcall	.+630    	; 0x18b2 <fputc>
    163c:	3a 94       	dec	r3
    163e:	f5 cf       	rjmp	.-22     	; 0x162a <vfprintf+0x16c>
    1640:	f5 01       	movw	r30, r10
    1642:	27 fc       	sbrc	r2, 7
    1644:	85 91       	lpm	r24, Z+
    1646:	27 fe       	sbrs	r2, 7
    1648:	81 91       	ld	r24, Z+
    164a:	5f 01       	movw	r10, r30
    164c:	b7 01       	movw	r22, r14
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	30 d1       	rcall	.+608    	; 0x18b2 <fputc>
    1652:	31 10       	cpse	r3, r1
    1654:	3a 94       	dec	r3
    1656:	f1 e0       	ldi	r31, 0x01	; 1
    1658:	4f 1a       	sub	r4, r31
    165a:	51 08       	sbc	r5, r1
    165c:	41 14       	cp	r4, r1
    165e:	51 04       	cpc	r5, r1
    1660:	79 f7       	brne	.-34     	; 0x1640 <vfprintf+0x182>
    1662:	de c0       	rjmp	.+444    	; 0x1820 <vfprintf+0x362>
    1664:	84 36       	cpi	r24, 0x64	; 100
    1666:	11 f0       	breq	.+4      	; 0x166c <vfprintf+0x1ae>
    1668:	89 36       	cpi	r24, 0x69	; 105
    166a:	31 f5       	brne	.+76     	; 0x16b8 <vfprintf+0x1fa>
    166c:	f8 01       	movw	r30, r16
    166e:	27 ff       	sbrs	r18, 7
    1670:	07 c0       	rjmp	.+14     	; 0x1680 <vfprintf+0x1c2>
    1672:	60 81       	ld	r22, Z
    1674:	71 81       	ldd	r23, Z+1	; 0x01
    1676:	82 81       	ldd	r24, Z+2	; 0x02
    1678:	93 81       	ldd	r25, Z+3	; 0x03
    167a:	0c 5f       	subi	r16, 0xFC	; 252
    167c:	1f 4f       	sbci	r17, 0xFF	; 255
    167e:	08 c0       	rjmp	.+16     	; 0x1690 <vfprintf+0x1d2>
    1680:	60 81       	ld	r22, Z
    1682:	71 81       	ldd	r23, Z+1	; 0x01
    1684:	88 27       	eor	r24, r24
    1686:	77 fd       	sbrc	r23, 7
    1688:	80 95       	com	r24
    168a:	98 2f       	mov	r25, r24
    168c:	0e 5f       	subi	r16, 0xFE	; 254
    168e:	1f 4f       	sbci	r17, 0xFF	; 255
    1690:	2f 76       	andi	r18, 0x6F	; 111
    1692:	b2 2e       	mov	r11, r18
    1694:	97 ff       	sbrs	r25, 7
    1696:	09 c0       	rjmp	.+18     	; 0x16aa <vfprintf+0x1ec>
    1698:	90 95       	com	r25
    169a:	80 95       	com	r24
    169c:	70 95       	com	r23
    169e:	61 95       	neg	r22
    16a0:	7f 4f       	sbci	r23, 0xFF	; 255
    16a2:	8f 4f       	sbci	r24, 0xFF	; 255
    16a4:	9f 4f       	sbci	r25, 0xFF	; 255
    16a6:	20 68       	ori	r18, 0x80	; 128
    16a8:	b2 2e       	mov	r11, r18
    16aa:	2a e0       	ldi	r18, 0x0A	; 10
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	a4 01       	movw	r20, r8
    16b0:	32 d1       	rcall	.+612    	; 0x1916 <__ultoa_invert>
    16b2:	a8 2e       	mov	r10, r24
    16b4:	a8 18       	sub	r10, r8
    16b6:	43 c0       	rjmp	.+134    	; 0x173e <vfprintf+0x280>
    16b8:	85 37       	cpi	r24, 0x75	; 117
    16ba:	29 f4       	brne	.+10     	; 0x16c6 <vfprintf+0x208>
    16bc:	2f 7e       	andi	r18, 0xEF	; 239
    16be:	b2 2e       	mov	r11, r18
    16c0:	2a e0       	ldi	r18, 0x0A	; 10
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	25 c0       	rjmp	.+74     	; 0x1710 <vfprintf+0x252>
    16c6:	f2 2f       	mov	r31, r18
    16c8:	f9 7f       	andi	r31, 0xF9	; 249
    16ca:	bf 2e       	mov	r11, r31
    16cc:	8f 36       	cpi	r24, 0x6F	; 111
    16ce:	c1 f0       	breq	.+48     	; 0x1700 <vfprintf+0x242>
    16d0:	18 f4       	brcc	.+6      	; 0x16d8 <vfprintf+0x21a>
    16d2:	88 35       	cpi	r24, 0x58	; 88
    16d4:	79 f0       	breq	.+30     	; 0x16f4 <vfprintf+0x236>
    16d6:	ad c0       	rjmp	.+346    	; 0x1832 <vfprintf+0x374>
    16d8:	80 37       	cpi	r24, 0x70	; 112
    16da:	19 f0       	breq	.+6      	; 0x16e2 <vfprintf+0x224>
    16dc:	88 37       	cpi	r24, 0x78	; 120
    16de:	21 f0       	breq	.+8      	; 0x16e8 <vfprintf+0x22a>
    16e0:	a8 c0       	rjmp	.+336    	; 0x1832 <vfprintf+0x374>
    16e2:	2f 2f       	mov	r18, r31
    16e4:	20 61       	ori	r18, 0x10	; 16
    16e6:	b2 2e       	mov	r11, r18
    16e8:	b4 fe       	sbrs	r11, 4
    16ea:	0d c0       	rjmp	.+26     	; 0x1706 <vfprintf+0x248>
    16ec:	8b 2d       	mov	r24, r11
    16ee:	84 60       	ori	r24, 0x04	; 4
    16f0:	b8 2e       	mov	r11, r24
    16f2:	09 c0       	rjmp	.+18     	; 0x1706 <vfprintf+0x248>
    16f4:	24 ff       	sbrs	r18, 4
    16f6:	0a c0       	rjmp	.+20     	; 0x170c <vfprintf+0x24e>
    16f8:	9f 2f       	mov	r25, r31
    16fa:	96 60       	ori	r25, 0x06	; 6
    16fc:	b9 2e       	mov	r11, r25
    16fe:	06 c0       	rjmp	.+12     	; 0x170c <vfprintf+0x24e>
    1700:	28 e0       	ldi	r18, 0x08	; 8
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	05 c0       	rjmp	.+10     	; 0x1710 <vfprintf+0x252>
    1706:	20 e1       	ldi	r18, 0x10	; 16
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <vfprintf+0x252>
    170c:	20 e1       	ldi	r18, 0x10	; 16
    170e:	32 e0       	ldi	r19, 0x02	; 2
    1710:	f8 01       	movw	r30, r16
    1712:	b7 fe       	sbrs	r11, 7
    1714:	07 c0       	rjmp	.+14     	; 0x1724 <vfprintf+0x266>
    1716:	60 81       	ld	r22, Z
    1718:	71 81       	ldd	r23, Z+1	; 0x01
    171a:	82 81       	ldd	r24, Z+2	; 0x02
    171c:	93 81       	ldd	r25, Z+3	; 0x03
    171e:	0c 5f       	subi	r16, 0xFC	; 252
    1720:	1f 4f       	sbci	r17, 0xFF	; 255
    1722:	06 c0       	rjmp	.+12     	; 0x1730 <vfprintf+0x272>
    1724:	60 81       	ld	r22, Z
    1726:	71 81       	ldd	r23, Z+1	; 0x01
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	0e 5f       	subi	r16, 0xFE	; 254
    172e:	1f 4f       	sbci	r17, 0xFF	; 255
    1730:	a4 01       	movw	r20, r8
    1732:	f1 d0       	rcall	.+482    	; 0x1916 <__ultoa_invert>
    1734:	a8 2e       	mov	r10, r24
    1736:	a8 18       	sub	r10, r8
    1738:	fb 2d       	mov	r31, r11
    173a:	ff 77       	andi	r31, 0x7F	; 127
    173c:	bf 2e       	mov	r11, r31
    173e:	b6 fe       	sbrs	r11, 6
    1740:	0b c0       	rjmp	.+22     	; 0x1758 <vfprintf+0x29a>
    1742:	2b 2d       	mov	r18, r11
    1744:	2e 7f       	andi	r18, 0xFE	; 254
    1746:	a5 14       	cp	r10, r5
    1748:	50 f4       	brcc	.+20     	; 0x175e <vfprintf+0x2a0>
    174a:	b4 fe       	sbrs	r11, 4
    174c:	0a c0       	rjmp	.+20     	; 0x1762 <vfprintf+0x2a4>
    174e:	b2 fc       	sbrc	r11, 2
    1750:	08 c0       	rjmp	.+16     	; 0x1762 <vfprintf+0x2a4>
    1752:	2b 2d       	mov	r18, r11
    1754:	2e 7e       	andi	r18, 0xEE	; 238
    1756:	05 c0       	rjmp	.+10     	; 0x1762 <vfprintf+0x2a4>
    1758:	7a 2c       	mov	r7, r10
    175a:	2b 2d       	mov	r18, r11
    175c:	03 c0       	rjmp	.+6      	; 0x1764 <vfprintf+0x2a6>
    175e:	7a 2c       	mov	r7, r10
    1760:	01 c0       	rjmp	.+2      	; 0x1764 <vfprintf+0x2a6>
    1762:	75 2c       	mov	r7, r5
    1764:	24 ff       	sbrs	r18, 4
    1766:	0d c0       	rjmp	.+26     	; 0x1782 <vfprintf+0x2c4>
    1768:	fe 01       	movw	r30, r28
    176a:	ea 0d       	add	r30, r10
    176c:	f1 1d       	adc	r31, r1
    176e:	80 81       	ld	r24, Z
    1770:	80 33       	cpi	r24, 0x30	; 48
    1772:	11 f4       	brne	.+4      	; 0x1778 <vfprintf+0x2ba>
    1774:	29 7e       	andi	r18, 0xE9	; 233
    1776:	09 c0       	rjmp	.+18     	; 0x178a <vfprintf+0x2cc>
    1778:	22 ff       	sbrs	r18, 2
    177a:	06 c0       	rjmp	.+12     	; 0x1788 <vfprintf+0x2ca>
    177c:	73 94       	inc	r7
    177e:	73 94       	inc	r7
    1780:	04 c0       	rjmp	.+8      	; 0x178a <vfprintf+0x2cc>
    1782:	82 2f       	mov	r24, r18
    1784:	86 78       	andi	r24, 0x86	; 134
    1786:	09 f0       	breq	.+2      	; 0x178a <vfprintf+0x2cc>
    1788:	73 94       	inc	r7
    178a:	23 fd       	sbrc	r18, 3
    178c:	12 c0       	rjmp	.+36     	; 0x17b2 <vfprintf+0x2f4>
    178e:	20 ff       	sbrs	r18, 0
    1790:	06 c0       	rjmp	.+12     	; 0x179e <vfprintf+0x2e0>
    1792:	5a 2c       	mov	r5, r10
    1794:	73 14       	cp	r7, r3
    1796:	18 f4       	brcc	.+6      	; 0x179e <vfprintf+0x2e0>
    1798:	53 0c       	add	r5, r3
    179a:	57 18       	sub	r5, r7
    179c:	73 2c       	mov	r7, r3
    179e:	73 14       	cp	r7, r3
    17a0:	60 f4       	brcc	.+24     	; 0x17ba <vfprintf+0x2fc>
    17a2:	b7 01       	movw	r22, r14
    17a4:	80 e2       	ldi	r24, 0x20	; 32
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	2c 87       	std	Y+12, r18	; 0x0c
    17aa:	83 d0       	rcall	.+262    	; 0x18b2 <fputc>
    17ac:	73 94       	inc	r7
    17ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    17b0:	f6 cf       	rjmp	.-20     	; 0x179e <vfprintf+0x2e0>
    17b2:	73 14       	cp	r7, r3
    17b4:	10 f4       	brcc	.+4      	; 0x17ba <vfprintf+0x2fc>
    17b6:	37 18       	sub	r3, r7
    17b8:	01 c0       	rjmp	.+2      	; 0x17bc <vfprintf+0x2fe>
    17ba:	31 2c       	mov	r3, r1
    17bc:	24 ff       	sbrs	r18, 4
    17be:	11 c0       	rjmp	.+34     	; 0x17e2 <vfprintf+0x324>
    17c0:	b7 01       	movw	r22, r14
    17c2:	80 e3       	ldi	r24, 0x30	; 48
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	2c 87       	std	Y+12, r18	; 0x0c
    17c8:	74 d0       	rcall	.+232    	; 0x18b2 <fputc>
    17ca:	2c 85       	ldd	r18, Y+12	; 0x0c
    17cc:	22 ff       	sbrs	r18, 2
    17ce:	16 c0       	rjmp	.+44     	; 0x17fc <vfprintf+0x33e>
    17d0:	21 ff       	sbrs	r18, 1
    17d2:	03 c0       	rjmp	.+6      	; 0x17da <vfprintf+0x31c>
    17d4:	88 e5       	ldi	r24, 0x58	; 88
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	02 c0       	rjmp	.+4      	; 0x17de <vfprintf+0x320>
    17da:	88 e7       	ldi	r24, 0x78	; 120
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	b7 01       	movw	r22, r14
    17e0:	0c c0       	rjmp	.+24     	; 0x17fa <vfprintf+0x33c>
    17e2:	82 2f       	mov	r24, r18
    17e4:	86 78       	andi	r24, 0x86	; 134
    17e6:	51 f0       	breq	.+20     	; 0x17fc <vfprintf+0x33e>
    17e8:	21 fd       	sbrc	r18, 1
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <vfprintf+0x332>
    17ec:	80 e2       	ldi	r24, 0x20	; 32
    17ee:	01 c0       	rjmp	.+2      	; 0x17f2 <vfprintf+0x334>
    17f0:	8b e2       	ldi	r24, 0x2B	; 43
    17f2:	27 fd       	sbrc	r18, 7
    17f4:	8d e2       	ldi	r24, 0x2D	; 45
    17f6:	b7 01       	movw	r22, r14
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	5b d0       	rcall	.+182    	; 0x18b2 <fputc>
    17fc:	a5 14       	cp	r10, r5
    17fe:	30 f4       	brcc	.+12     	; 0x180c <vfprintf+0x34e>
    1800:	b7 01       	movw	r22, r14
    1802:	80 e3       	ldi	r24, 0x30	; 48
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	55 d0       	rcall	.+170    	; 0x18b2 <fputc>
    1808:	5a 94       	dec	r5
    180a:	f8 cf       	rjmp	.-16     	; 0x17fc <vfprintf+0x33e>
    180c:	aa 94       	dec	r10
    180e:	f4 01       	movw	r30, r8
    1810:	ea 0d       	add	r30, r10
    1812:	f1 1d       	adc	r31, r1
    1814:	80 81       	ld	r24, Z
    1816:	b7 01       	movw	r22, r14
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	4b d0       	rcall	.+150    	; 0x18b2 <fputc>
    181c:	a1 10       	cpse	r10, r1
    181e:	f6 cf       	rjmp	.-20     	; 0x180c <vfprintf+0x34e>
    1820:	33 20       	and	r3, r3
    1822:	09 f4       	brne	.+2      	; 0x1826 <vfprintf+0x368>
    1824:	5d ce       	rjmp	.-838    	; 0x14e0 <vfprintf+0x22>
    1826:	b7 01       	movw	r22, r14
    1828:	80 e2       	ldi	r24, 0x20	; 32
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	42 d0       	rcall	.+132    	; 0x18b2 <fputc>
    182e:	3a 94       	dec	r3
    1830:	f7 cf       	rjmp	.-18     	; 0x1820 <vfprintf+0x362>
    1832:	f7 01       	movw	r30, r14
    1834:	86 81       	ldd	r24, Z+6	; 0x06
    1836:	97 81       	ldd	r25, Z+7	; 0x07
    1838:	02 c0       	rjmp	.+4      	; 0x183e <vfprintf+0x380>
    183a:	8f ef       	ldi	r24, 0xFF	; 255
    183c:	9f ef       	ldi	r25, 0xFF	; 255
    183e:	2c 96       	adiw	r28, 0x0c	; 12
    1840:	e2 e1       	ldi	r30, 0x12	; 18
    1842:	e3 c0       	rjmp	.+454    	; 0x1a0a <__epilogue_restores__>

00001844 <calloc>:
    1844:	0f 93       	push	r16
    1846:	1f 93       	push	r17
    1848:	cf 93       	push	r28
    184a:	df 93       	push	r29
    184c:	86 9f       	mul	r24, r22
    184e:	80 01       	movw	r16, r0
    1850:	87 9f       	mul	r24, r23
    1852:	10 0d       	add	r17, r0
    1854:	96 9f       	mul	r25, r22
    1856:	10 0d       	add	r17, r0
    1858:	11 24       	eor	r1, r1
    185a:	c8 01       	movw	r24, r16
    185c:	81 dc       	rcall	.-1790   	; 0x1160 <malloc>
    185e:	ec 01       	movw	r28, r24
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	21 f0       	breq	.+8      	; 0x186c <calloc+0x28>
    1864:	a8 01       	movw	r20, r16
    1866:	60 e0       	ldi	r22, 0x00	; 0
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	11 d0       	rcall	.+34     	; 0x188e <memset>
    186c:	ce 01       	movw	r24, r28
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	1f 91       	pop	r17
    1874:	0f 91       	pop	r16
    1876:	08 95       	ret

00001878 <strnlen_P>:
    1878:	fc 01       	movw	r30, r24
    187a:	05 90       	lpm	r0, Z+
    187c:	61 50       	subi	r22, 0x01	; 1
    187e:	70 40       	sbci	r23, 0x00	; 0
    1880:	01 10       	cpse	r0, r1
    1882:	d8 f7       	brcc	.-10     	; 0x187a <strnlen_P+0x2>
    1884:	80 95       	com	r24
    1886:	90 95       	com	r25
    1888:	8e 0f       	add	r24, r30
    188a:	9f 1f       	adc	r25, r31
    188c:	08 95       	ret

0000188e <memset>:
    188e:	dc 01       	movw	r26, r24
    1890:	01 c0       	rjmp	.+2      	; 0x1894 <memset+0x6>
    1892:	6d 93       	st	X+, r22
    1894:	41 50       	subi	r20, 0x01	; 1
    1896:	50 40       	sbci	r21, 0x00	; 0
    1898:	e0 f7       	brcc	.-8      	; 0x1892 <memset+0x4>
    189a:	08 95       	ret

0000189c <strnlen>:
    189c:	fc 01       	movw	r30, r24
    189e:	61 50       	subi	r22, 0x01	; 1
    18a0:	70 40       	sbci	r23, 0x00	; 0
    18a2:	01 90       	ld	r0, Z+
    18a4:	01 10       	cpse	r0, r1
    18a6:	d8 f7       	brcc	.-10     	; 0x189e <strnlen+0x2>
    18a8:	80 95       	com	r24
    18aa:	90 95       	com	r25
    18ac:	8e 0f       	add	r24, r30
    18ae:	9f 1f       	adc	r25, r31
    18b0:	08 95       	ret

000018b2 <fputc>:
    18b2:	0f 93       	push	r16
    18b4:	1f 93       	push	r17
    18b6:	cf 93       	push	r28
    18b8:	df 93       	push	r29
    18ba:	18 2f       	mov	r17, r24
    18bc:	09 2f       	mov	r16, r25
    18be:	eb 01       	movw	r28, r22
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	81 fd       	sbrc	r24, 1
    18c4:	03 c0       	rjmp	.+6      	; 0x18cc <fputc+0x1a>
    18c6:	8f ef       	ldi	r24, 0xFF	; 255
    18c8:	9f ef       	ldi	r25, 0xFF	; 255
    18ca:	20 c0       	rjmp	.+64     	; 0x190c <fputc+0x5a>
    18cc:	82 ff       	sbrs	r24, 2
    18ce:	10 c0       	rjmp	.+32     	; 0x18f0 <fputc+0x3e>
    18d0:	4e 81       	ldd	r20, Y+6	; 0x06
    18d2:	5f 81       	ldd	r21, Y+7	; 0x07
    18d4:	2c 81       	ldd	r18, Y+4	; 0x04
    18d6:	3d 81       	ldd	r19, Y+5	; 0x05
    18d8:	42 17       	cp	r20, r18
    18da:	53 07       	cpc	r21, r19
    18dc:	7c f4       	brge	.+30     	; 0x18fc <fputc+0x4a>
    18de:	e8 81       	ld	r30, Y
    18e0:	f9 81       	ldd	r31, Y+1	; 0x01
    18e2:	9f 01       	movw	r18, r30
    18e4:	2f 5f       	subi	r18, 0xFF	; 255
    18e6:	3f 4f       	sbci	r19, 0xFF	; 255
    18e8:	39 83       	std	Y+1, r19	; 0x01
    18ea:	28 83       	st	Y, r18
    18ec:	10 83       	st	Z, r17
    18ee:	06 c0       	rjmp	.+12     	; 0x18fc <fputc+0x4a>
    18f0:	e8 85       	ldd	r30, Y+8	; 0x08
    18f2:	f9 85       	ldd	r31, Y+9	; 0x09
    18f4:	81 2f       	mov	r24, r17
    18f6:	09 95       	icall
    18f8:	89 2b       	or	r24, r25
    18fa:	29 f7       	brne	.-54     	; 0x18c6 <fputc+0x14>
    18fc:	2e 81       	ldd	r18, Y+6	; 0x06
    18fe:	3f 81       	ldd	r19, Y+7	; 0x07
    1900:	2f 5f       	subi	r18, 0xFF	; 255
    1902:	3f 4f       	sbci	r19, 0xFF	; 255
    1904:	3f 83       	std	Y+7, r19	; 0x07
    1906:	2e 83       	std	Y+6, r18	; 0x06
    1908:	81 2f       	mov	r24, r17
    190a:	90 2f       	mov	r25, r16
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	08 95       	ret

00001916 <__ultoa_invert>:
    1916:	fa 01       	movw	r30, r20
    1918:	aa 27       	eor	r26, r26
    191a:	28 30       	cpi	r18, 0x08	; 8
    191c:	51 f1       	breq	.+84     	; 0x1972 <__ultoa_invert+0x5c>
    191e:	20 31       	cpi	r18, 0x10	; 16
    1920:	81 f1       	breq	.+96     	; 0x1982 <__ultoa_invert+0x6c>
    1922:	e8 94       	clt
    1924:	6f 93       	push	r22
    1926:	6e 7f       	andi	r22, 0xFE	; 254
    1928:	6e 5f       	subi	r22, 0xFE	; 254
    192a:	7f 4f       	sbci	r23, 0xFF	; 255
    192c:	8f 4f       	sbci	r24, 0xFF	; 255
    192e:	9f 4f       	sbci	r25, 0xFF	; 255
    1930:	af 4f       	sbci	r26, 0xFF	; 255
    1932:	b1 e0       	ldi	r27, 0x01	; 1
    1934:	3e d0       	rcall	.+124    	; 0x19b2 <__ultoa_invert+0x9c>
    1936:	b4 e0       	ldi	r27, 0x04	; 4
    1938:	3c d0       	rcall	.+120    	; 0x19b2 <__ultoa_invert+0x9c>
    193a:	67 0f       	add	r22, r23
    193c:	78 1f       	adc	r23, r24
    193e:	89 1f       	adc	r24, r25
    1940:	9a 1f       	adc	r25, r26
    1942:	a1 1d       	adc	r26, r1
    1944:	68 0f       	add	r22, r24
    1946:	79 1f       	adc	r23, r25
    1948:	8a 1f       	adc	r24, r26
    194a:	91 1d       	adc	r25, r1
    194c:	a1 1d       	adc	r26, r1
    194e:	6a 0f       	add	r22, r26
    1950:	71 1d       	adc	r23, r1
    1952:	81 1d       	adc	r24, r1
    1954:	91 1d       	adc	r25, r1
    1956:	a1 1d       	adc	r26, r1
    1958:	20 d0       	rcall	.+64     	; 0x199a <__ultoa_invert+0x84>
    195a:	09 f4       	brne	.+2      	; 0x195e <__ultoa_invert+0x48>
    195c:	68 94       	set
    195e:	3f 91       	pop	r19
    1960:	2a e0       	ldi	r18, 0x0A	; 10
    1962:	26 9f       	mul	r18, r22
    1964:	11 24       	eor	r1, r1
    1966:	30 19       	sub	r19, r0
    1968:	30 5d       	subi	r19, 0xD0	; 208
    196a:	31 93       	st	Z+, r19
    196c:	de f6       	brtc	.-74     	; 0x1924 <__ultoa_invert+0xe>
    196e:	cf 01       	movw	r24, r30
    1970:	08 95       	ret
    1972:	46 2f       	mov	r20, r22
    1974:	47 70       	andi	r20, 0x07	; 7
    1976:	40 5d       	subi	r20, 0xD0	; 208
    1978:	41 93       	st	Z+, r20
    197a:	b3 e0       	ldi	r27, 0x03	; 3
    197c:	0f d0       	rcall	.+30     	; 0x199c <__ultoa_invert+0x86>
    197e:	c9 f7       	brne	.-14     	; 0x1972 <__ultoa_invert+0x5c>
    1980:	f6 cf       	rjmp	.-20     	; 0x196e <__ultoa_invert+0x58>
    1982:	46 2f       	mov	r20, r22
    1984:	4f 70       	andi	r20, 0x0F	; 15
    1986:	40 5d       	subi	r20, 0xD0	; 208
    1988:	4a 33       	cpi	r20, 0x3A	; 58
    198a:	18 f0       	brcs	.+6      	; 0x1992 <__ultoa_invert+0x7c>
    198c:	49 5d       	subi	r20, 0xD9	; 217
    198e:	31 fd       	sbrc	r19, 1
    1990:	40 52       	subi	r20, 0x20	; 32
    1992:	41 93       	st	Z+, r20
    1994:	02 d0       	rcall	.+4      	; 0x199a <__ultoa_invert+0x84>
    1996:	a9 f7       	brne	.-22     	; 0x1982 <__ultoa_invert+0x6c>
    1998:	ea cf       	rjmp	.-44     	; 0x196e <__ultoa_invert+0x58>
    199a:	b4 e0       	ldi	r27, 0x04	; 4
    199c:	a6 95       	lsr	r26
    199e:	97 95       	ror	r25
    19a0:	87 95       	ror	r24
    19a2:	77 95       	ror	r23
    19a4:	67 95       	ror	r22
    19a6:	ba 95       	dec	r27
    19a8:	c9 f7       	brne	.-14     	; 0x199c <__ultoa_invert+0x86>
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	61 05       	cpc	r22, r1
    19ae:	71 05       	cpc	r23, r1
    19b0:	08 95       	ret
    19b2:	9b 01       	movw	r18, r22
    19b4:	ac 01       	movw	r20, r24
    19b6:	0a 2e       	mov	r0, r26
    19b8:	06 94       	lsr	r0
    19ba:	57 95       	ror	r21
    19bc:	47 95       	ror	r20
    19be:	37 95       	ror	r19
    19c0:	27 95       	ror	r18
    19c2:	ba 95       	dec	r27
    19c4:	c9 f7       	brne	.-14     	; 0x19b8 <__ultoa_invert+0xa2>
    19c6:	62 0f       	add	r22, r18
    19c8:	73 1f       	adc	r23, r19
    19ca:	84 1f       	adc	r24, r20
    19cc:	95 1f       	adc	r25, r21
    19ce:	a0 1d       	adc	r26, r0
    19d0:	08 95       	ret

000019d2 <__prologue_saves__>:
    19d2:	2f 92       	push	r2
    19d4:	3f 92       	push	r3
    19d6:	4f 92       	push	r4
    19d8:	5f 92       	push	r5
    19da:	6f 92       	push	r6
    19dc:	7f 92       	push	r7
    19de:	8f 92       	push	r8
    19e0:	9f 92       	push	r9
    19e2:	af 92       	push	r10
    19e4:	bf 92       	push	r11
    19e6:	cf 92       	push	r12
    19e8:	df 92       	push	r13
    19ea:	ef 92       	push	r14
    19ec:	ff 92       	push	r15
    19ee:	0f 93       	push	r16
    19f0:	1f 93       	push	r17
    19f2:	cf 93       	push	r28
    19f4:	df 93       	push	r29
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	ca 1b       	sub	r28, r26
    19fc:	db 0b       	sbc	r29, r27
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	09 94       	ijmp

00001a0a <__epilogue_restores__>:
    1a0a:	2a 88       	ldd	r2, Y+18	; 0x12
    1a0c:	39 88       	ldd	r3, Y+17	; 0x11
    1a0e:	48 88       	ldd	r4, Y+16	; 0x10
    1a10:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a12:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a14:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a16:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a18:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a1a:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a1c:	b9 84       	ldd	r11, Y+9	; 0x09
    1a1e:	c8 84       	ldd	r12, Y+8	; 0x08
    1a20:	df 80       	ldd	r13, Y+7	; 0x07
    1a22:	ee 80       	ldd	r14, Y+6	; 0x06
    1a24:	fd 80       	ldd	r15, Y+5	; 0x05
    1a26:	0c 81       	ldd	r16, Y+4	; 0x04
    1a28:	1b 81       	ldd	r17, Y+3	; 0x03
    1a2a:	aa 81       	ldd	r26, Y+2	; 0x02
    1a2c:	b9 81       	ldd	r27, Y+1	; 0x01
    1a2e:	ce 0f       	add	r28, r30
    1a30:	d1 1d       	adc	r29, r1
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	f8 94       	cli
    1a36:	de bf       	out	0x3e, r29	; 62
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	cd bf       	out	0x3d, r28	; 61
    1a3c:	ed 01       	movw	r28, r26
    1a3e:	08 95       	ret

00001a40 <_exit>:
    1a40:	f8 94       	cli

00001a42 <__stop_program>:
    1a42:	ff cf       	rjmp	.-2      	; 0x1a42 <__stop_program>
