
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ee  00800100  00001bde  00001c72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bde  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  008002ee  008002ee  00001e60  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000248  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002758  00000000  00000000  00002104  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d92  00000000  00000000  0000485c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010df  00000000  00000000  000055ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000574  00000000  00000000  000066d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b6b  00000000  00000000  00006c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000013ef  00000000  00000000  000077af  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f8  00000000  00000000  00008b9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	c9 c1       	rjmp	.+914    	; 0x3a0 <__bad_interrupt>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <MENU_buildMenus+0xe8>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ee ed       	ldi	r30, 0xDE	; 222
     37c:	fb e1       	ldi	r31, 0x1B	; 27
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	ae 3e       	cpi	r26, 0xEE	; 238
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	ae ee       	ldi	r26, 0xEE	; 238
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a4 31       	cpi	r26, 0x14	; 20
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	10 d1       	rcall	.+544    	; 0x5bc <main>
     39c:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
/*
=======================INTERRUPTS=========================
*/

ISR(USART0_RXC_vect)		
{
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
	//interrupt generated after receiving a byte over UART 
	receivedByte = UDR0;		//received byte
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 05 03 	sts	0x0305, r24
	USARTreceivedFlag = 1;		//set the flag to 1
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 f0 02 	sts	0x02F0, r24
}
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:

ISR(INT0_vect)
{
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
	//interrupt generated on pin PD2 after the conversion in the ADC is completed
	ADCconversionCompletedFlag = 1;
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 ef 02 	sts	0x02EF, r24
}
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:

ISR(INT1_vect)
{
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
	//interrupt generated on pin PD3 to start the joystick calibration
	JOYcalibFlag = 1;
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 ee 02 	sts	0x02EE, r24
}
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <SRAM_test>:
/*
=======================FUNCTION DEFINITIONS=========================
*/

void SRAM_test(void)
{
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors= 0;
	uint16_t retrieval_errors= 0;
	
	printf("Starting SRAM test...\n");
     40e:	88 e1       	ldi	r24, 0x18	; 24
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 a2 0a 	call	0x1544	; 0x1544 <puts>
	
	// rand() stores some internal state, so calling this function in a loop will
	// yield different seeds each time (unless srand() is called before thisfunction)
	
	uint16_t seed = rand();
     416:	0e 94 39 0a 	call	0x1472	; 0x1472 <rand>
     41a:	7c 01       	movw	r14, r24
	
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
     41c:	0e 94 3c 0a 	call	0x1478	; 0x1478 <srand>
     420:	c0 e0       	ldi	r28, 0x00	; 0
     422:	d8 e1       	ldi	r29, 0x18	; 24

void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors= 0;
     424:	00 e0       	ldi	r16, 0x00	; 0
     426:	10 e0       	ldi	r17, 0x00	; 0
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	
	for (uint16_t i = 0; i < ext_ram_size; i++) 
	{
		uint8_t some_value = rand();
     428:	0e 94 39 0a 	call	0x1472	; 0x1472 <rand>
		ext_ram[i] = some_value;
     42c:	88 83       	st	Y, r24
		uint8_t retreived_value = ext_ram[i];
     42e:	98 81       	ld	r25, Y
		
		if (retreived_value != some_value) 
     430:	98 17       	cp	r25, r24
     432:	11 f0       	breq	.+4      	; 0x438 <SRAM_test+0x36>
		{
			//printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			write_errors++;
     434:	0f 5f       	subi	r16, 0xFF	; 255
     436:	1f 4f       	sbci	r17, 0xFF	; 255
     438:	21 96       	adiw	r28, 0x01	; 1
	uint16_t seed = rand();
	
	// Write phase: Immediately check that the correct value was stored
	srand(seed);
	
	for (uint16_t i = 0; i < ext_ram_size; i++) 
     43a:	c1 15       	cp	r28, r1
     43c:	80 e2       	ldi	r24, 0x20	; 32
     43e:	d8 07       	cpc	r29, r24
     440:	99 f7       	brne	.-26     	; 0x428 <SRAM_test+0x26>
		}

	}
	
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
     442:	c7 01       	movw	r24, r14
     444:	0e 94 3c 0a 	call	0x1478	; 0x1478 <srand>
     448:	c0 e0       	ldi	r28, 0x00	; 0
     44a:	d8 e1       	ldi	r29, 0x18	; 24
void SRAM_test(void)
{
	volatile char *ext_ram = (char *) 0x1800; // Start address for the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors= 0;
	uint16_t retrieval_errors= 0;
     44c:	e1 2c       	mov	r14, r1
     44e:	f1 2c       	mov	r15, r1
	srand(seed);
	
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) 
	{
		uint8_t some_value = rand();
     450:	0e 94 39 0a 	call	0x1472	; 0x1472 <rand>
		uint8_t retreived_value = ext_ram[i];
     454:	98 81       	ld	r25, Y
		
		if (retreived_value != some_value) 
     456:	98 17       	cp	r25, r24
     458:	19 f0       	breq	.+6      	; 0x460 <SRAM_test+0x5e>
		{
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
     45a:	8f ef       	ldi	r24, 0xFF	; 255
     45c:	e8 1a       	sub	r14, r24
     45e:	f8 0a       	sbc	r15, r24
     460:	21 96       	adiw	r28, 0x01	; 1
	
	// Retrieval phase: Check that no values were changed during or after the write phase
	srand(seed);
	
	// reset the PRNG to the state it had before the write phase
	for (uint16_t i = 0; i < ext_ram_size; i++) 
     462:	c1 15       	cp	r28, r1
     464:	80 e2       	ldi	r24, 0x20	; 32
     466:	d8 07       	cpc	r29, r24
     468:	99 f7       	brne	.-26     	; 0x450 <SRAM_test+0x4e>
			//printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	
	printf("SRAM test completed with\n %4d errors in write phase and\n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
     46a:	ff 92       	push	r15
     46c:	ef 92       	push	r14
     46e:	1f 93       	push	r17
     470:	0f 93       	push	r16
     472:	8e e2       	ldi	r24, 0x2E	; 46
     474:	91 e0       	ldi	r25, 0x01	; 1
     476:	9f 93       	push	r25
     478:	8f 93       	push	r24
     47a:	0e 94 91 0a 	call	0x1522	; 0x1522 <printf>
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	0f 90       	pop	r0
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
}
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	ff 90       	pop	r15
     494:	ef 90       	pop	r14
     496:	08 95       	ret

00000498 <init>:

void init(void)
{
     498:	ef 92       	push	r14
     49a:	ff 92       	push	r15
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
	// call initialization subroutines
	uartInit(BAUDRATE, FOSC, UBRR);
     4a0:	1f e1       	ldi	r17, 0x1F	; 31
     4a2:	e1 2e       	mov	r14, r17
     4a4:	f1 2c       	mov	r15, r1
     4a6:	00 e0       	ldi	r16, 0x00	; 0
     4a8:	10 e0       	ldi	r17, 0x00	; 0
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	4b e4       	ldi	r20, 0x4B	; 75
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	60 e8       	ldi	r22, 0x80	; 128
     4b4:	75 e2       	ldi	r23, 0x25	; 37
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	05 d6       	rcall	.+3082   	; 0x10c6 <uartInit>
	enableXMEM(1);
     4bc:	81 e0       	ldi	r24, 0x01	; 1
     4be:	89 d0       	rcall	.+274    	; 0x5d2 <enableXMEM>
	SLI_init();
     4c0:	e8 d5       	rcall	.+3024   	; 0x1092 <SLI_init>
	JOY_init();
     4c2:	99 d0       	rcall	.+306    	; 0x5f6 <JOY_init>
	OLED_init();
     4c4:	f7 d4       	rcall	.+2542   	; 0xeb4 <OLED_init>
	MENU_activate();
     4c6:	92 d4       	rcall	.+2340   	; 0xdec <MENU_activate>
	
	// setup interrupts
	// init external interrupt INT0 on falling edge
	set_bit(GICR, INT0);
     4c8:	8b b7       	in	r24, 0x3b	; 59
     4ca:	80 64       	ori	r24, 0x40	; 64
     4cc:	8b bf       	out	0x3b, r24	; 59
	set_bit(MCUCR, ISC01);
     4ce:	85 b7       	in	r24, 0x35	; 53
     4d0:	82 60       	ori	r24, 0x02	; 2
     4d2:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     4d4:	85 b7       	in	r24, 0x35	; 53
     4d6:	8e 7f       	andi	r24, 0xFE	; 254
     4d8:	85 bf       	out	0x35, r24	; 53
	// Pull-up on PD3
	clear_bit(DDRD, PD3);
     4da:	8b 98       	cbi	0x11, 3	; 17
	set_bit(PORTD, PD3);
     4dc:	93 9a       	sbi	0x12, 3	; 18
	// init external interrupt INT1 on falling edge
	set_bit(GICR, INT1);
     4de:	8b b7       	in	r24, 0x3b	; 59
     4e0:	80 68       	ori	r24, 0x80	; 128
     4e2:	8b bf       	out	0x3b, r24	; 59
	set_bit(MCUCR, ISC11);
     4e4:	85 b7       	in	r24, 0x35	; 53
     4e6:	88 60       	ori	r24, 0x08	; 8
     4e8:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC10);
     4ea:	85 b7       	in	r24, 0x35	; 53
     4ec:	8b 7f       	andi	r24, 0xFB	; 251
     4ee:	85 bf       	out	0x35, r24	; 53
	// PE2
	clear_bit(DDRE, PE2);
     4f0:	32 98       	cbi	0x06, 2	; 6
	clear_bit(PORTE, PE2);
     4f2:	3a 98       	cbi	0x07, 2	; 7
	// PB0
	clear_bit(DDRB, PB0);
     4f4:	b8 98       	cbi	0x17, 0	; 23
	clear_bit(PORTB, PB0);
     4f6:	c0 98       	cbi	0x18, 0	; 24
	// activate interrupts
	sei();
     4f8:	78 94       	sei

	// call SRAM Test
	SRAM_test();
     4fa:	83 df       	rcall	.-250    	; 0x402 <SRAM_test>
}
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	ff 90       	pop	r15
     502:	ef 90       	pop	r14
     504:	08 95       	ret

00000506 <statusMultifunctionBoard>:

// print status variables of Multifunction Board
void statusMultifunctionBoard(){
     506:	ff 92       	push	r15
     508:	0f 93       	push	r16
     50a:	1f 93       	push	r17
     50c:	cf 93       	push	r28
     50e:	df 93       	push	r29
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
     514:	28 97       	sbiw	r28, 0x08	; 8
     516:	0f b6       	in	r0, 0x3f	; 63
     518:	f8 94       	cli
     51a:	de bf       	out	0x3e, r29	; 62
     51c:	0f be       	out	0x3f, r0	; 63
     51e:	cd bf       	out	0x3d, r28	; 61
	JOY_position_t currentJoyPosition;
	currentJoyPosition = JOY_getPosition();
     520:	f8 d1       	rcall	.+1008   	; 0x912 <JOY_getPosition>
     522:	29 83       	std	Y+1, r18	; 0x01
     524:	3a 83       	std	Y+2, r19	; 0x02
     526:	4b 83       	std	Y+3, r20	; 0x03
     528:	5c 83       	std	Y+4, r21	; 0x04
     52a:	6d 83       	std	Y+5, r22	; 0x05
     52c:	7e 83       	std	Y+6, r23	; 0x06
     52e:	8f 83       	std	Y+7, r24	; 0x07
     530:	98 87       	std	Y+8, r25	; 0x08

	JOY_direction_t currentJoyDirection;
	currentJoyDirection = JOY_getDirection();
     532:	13 d2       	rcall	.+1062   	; 0x95a <JOY_getDirection>
     534:	f8 2e       	mov	r15, r24

	SLI_position_t currentSliPosition;
	currentSliPosition = SLI_getPosition();
     536:	b6 d5       	rcall	.+2924   	; 0x10a4 <SLI_getPosition>
	uint8_t rightButton = 0;

	char directions[] = {'C', 'U', 'D', 'R', 'L'};
	char* dir;
	
	if((PINB & (1<<PB0)))
     538:	b0 9b       	sbis	0x16, 0	; 22
		{
			//printf("Left button clicked ");
			leftButton = 1;
		}
		else if((PINE & (1<<PE2)))
     53a:	85 b1       	in	r24, 0x05	; 5
		{
			//printf("Right button clicked ");
			rightButton = 1;
		}
		
	switch(currentJoyDirection)
     53c:	82 e0       	ldi	r24, 0x02	; 2
     53e:	f8 16       	cp	r15, r24
     540:	91 f0       	breq	.+36     	; 0x566 <statusMultifunctionBoard+0x60>
     542:	8f 15       	cp	r24, r15
     544:	30 f0       	brcs	.+12     	; 0x552 <statusMultifunctionBoard+0x4c>
     546:	ff 20       	and	r15, r15
     548:	b9 f0       	breq	.+46     	; 0x578 <statusMultifunctionBoard+0x72>
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	f9 16       	cp	r15, r25
     54e:	41 f0       	breq	.+16     	; 0x560 <statusMultifunctionBoard+0x5a>
     550:	15 c0       	rjmp	.+42     	; 0x57c <statusMultifunctionBoard+0x76>
     552:	83 e0       	ldi	r24, 0x03	; 3
     554:	f8 16       	cp	r15, r24
     556:	51 f0       	breq	.+20     	; 0x56c <statusMultifunctionBoard+0x66>
     558:	94 e0       	ldi	r25, 0x04	; 4
     55a:	f9 16       	cp	r15, r25
     55c:	51 f0       	breq	.+20     	; 0x572 <statusMultifunctionBoard+0x6c>
     55e:	0e c0       	rjmp	.+28     	; 0x57c <statusMultifunctionBoard+0x76>

		dir = "CENTER";
		break;

		case 1:
		dir = "UP";
     560:	0d e8       	ldi	r16, 0x8D	; 141
     562:	11 e0       	ldi	r17, 0x01	; 1
		break;
     564:	0b c0       	rjmp	.+22     	; 0x57c <statusMultifunctionBoard+0x76>

		case 2:
		dir = "DOWN";
     566:	00 e9       	ldi	r16, 0x90	; 144
     568:	11 e0       	ldi	r17, 0x01	; 1
		break;
     56a:	08 c0       	rjmp	.+16     	; 0x57c <statusMultifunctionBoard+0x76>

		case 3:
		dir = "RIGHT";
     56c:	05 e9       	ldi	r16, 0x95	; 149
     56e:	11 e0       	ldi	r17, 0x01	; 1
		break;
     570:	05 c0       	rjmp	.+10     	; 0x57c <statusMultifunctionBoard+0x76>

		case 4:
		dir = "LEFT";
     572:	0b e9       	ldi	r16, 0x9B	; 155
     574:	11 e0       	ldi	r17, 0x01	; 1
		break;
     576:	02 c0       	rjmp	.+4      	; 0x57c <statusMultifunctionBoard+0x76>
		
	switch(currentJoyDirection)
	{
		case 0:

		dir = "CENTER";
     578:	06 e8       	ldi	r16, 0x86	; 134
     57a:	11 e0       	ldi	r17, 0x01	; 1
		dir = "LEFT";
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
     57c:	88 85       	ldd	r24, Y+8	; 0x08
     57e:	8f 93       	push	r24
     580:	8f 81       	ldd	r24, Y+7	; 0x07
     582:	8f 93       	push	r24
     584:	8e 81       	ldd	r24, Y+6	; 0x06
     586:	8f 93       	push	r24
     588:	8d 81       	ldd	r24, Y+5	; 0x05
     58a:	8f 93       	push	r24
     58c:	1f 93       	push	r17
     58e:	0f 93       	push	r16
     590:	80 ea       	ldi	r24, 0xA0	; 160
     592:	91 e0       	ldi	r25, 0x01	; 1
     594:	9f 93       	push	r25
     596:	8f 93       	push	r24
     598:	c4 d7       	rcall	.+3976   	; 0x1522 <printf>
     59a:	0f b6       	in	r0, 0x3f	; 63
     59c:	f8 94       	cli
     59e:	de bf       	out	0x3e, r29	; 62
     5a0:	0f be       	out	0x3f, r0	; 63
     5a2:	cd bf       	out	0x3d, r28	; 61
}
     5a4:	28 96       	adiw	r28, 0x08	; 8
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	de bf       	out	0x3e, r29	; 62
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	cd bf       	out	0x3d, r28	; 61
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	ff 90       	pop	r15
     5ba:	08 95       	ret

000005bc <main>:
=======================MAIN FUNCTION=========================
*/

int main(void)
{	
	init();
     5bc:	6d df       	rcall	.-294    	; 0x498 <init>
	
    while(1)
    {	
		statusMultifunctionBoard();
     5be:	a3 df       	rcall	.-186    	; 0x506 <statusMultifunctionBoard>
		JOY_getDirection();
     5c0:	cc d1       	rcall	.+920    	; 0x95a <JOY_getDirection>

		// todo: remove! will be included in the menu driver later
		if(JOYcalibFlag)
     5c2:	80 91 ee 02 	lds	r24, 0x02EE
     5c6:	88 23       	and	r24, r24
     5c8:	d1 f3       	breq	.-12     	; 0x5be <main+0x2>
		{
			//run joystick calibration
			JOY_calibrate();
     5ca:	28 d0       	rcall	.+80     	; 0x61c <JOY_calibrate>
			JOYcalibFlag = 0;
     5cc:	10 92 ee 02 	sts	0x02EE, r1
     5d0:	f6 cf       	rjmp	.-20     	; 0x5be <main+0x2>

000005d2 <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     5d2:	95 b7       	in	r25, 0x35	; 53
     5d4:	90 68       	ori	r25, 0x80	; 128
     5d6:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     5d8:	96 b7       	in	r25, 0x36	; 54
     5da:	98 60       	ori	r25, 0x08	; 8
     5dc:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     5de:	88 23       	and	r24, r24
     5e0:	19 f0       	breq	.+6      	; 0x5e8 <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     5e2:	80 b7       	in	r24, 0x30	; 48
     5e4:	80 62       	ori	r24, 0x20	; 32
     5e6:	80 bf       	out	0x30, r24	; 48
     5e8:	08 95       	ret

000005ea <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     5ea:	fc 01       	movw	r30, r24
     5ec:	80 81       	ld	r24, Z
	return val;
}
     5ee:	08 95       	ret

000005f0 <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     5f0:	fc 01       	movw	r30, r24
     5f2:	60 83       	st	Z, r22
     5f4:	08 95       	ret

000005f6 <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     5f6:	10 92 f3 02 	sts	0x02F3, r1
     5fa:	10 92 f2 02 	sts	0x02F2, r1
	currentPosition.Y_abs = 0;
     5fe:	10 92 f5 02 	sts	0x02F5, r1
     602:	10 92 f4 02 	sts	0x02F4, r1
	currentPosition.X_per = 0;
     606:	10 92 f7 02 	sts	0x02F7, r1
     60a:	10 92 f6 02 	sts	0x02F6, r1
	currentPosition.Y_per = 0;
     60e:	10 92 f9 02 	sts	0x02F9, r1
     612:	10 92 f8 02 	sts	0x02F8, r1
	currentDirection = CENTRE;
     616:	10 92 f1 02 	sts	0x02F1, r1
     61a:	08 95       	ret

0000061c <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
	uint8_t temp = 0;
	
	printf("Move JOY to the right\n");
     620:	86 eb       	ldi	r24, 0xB6	; 182
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	8f d7       	rcall	.+3870   	; 0x1544 <puts>
     626:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     628:	4f ef       	ldi	r20, 0xFF	; 255
     62a:	52 e0       	ldi	r21, 0x02	; 2
     62c:	21 50       	subi	r18, 0x01	; 1
     62e:	40 40       	sbci	r20, 0x00	; 0
     630:	50 40       	sbci	r21, 0x00	; 0
     632:	e1 f7       	brne	.-8      	; 0x62c <JOY_calibrate+0x10>
     634:	00 c0       	rjmp	.+0      	; 0x636 <JOY_calibrate+0x1a>
     636:	00 c0       	rjmp	.+0      	; 0x638 <JOY_calibrate+0x1c>
     638:	c4 e1       	ldi	r28, 0x14	; 20
     63a:	d0 e0       	ldi	r29, 0x00	; 0
     63c:	60 91 0a 01 	lds	r22, 0x010A
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     640:	70 91 0b 01 	lds	r23, 0x010B
     644:	82 e0       	ldi	r24, 0x02	; 2
     646:	58 d5       	rcall	.+2736   	; 0x10f8 <ADC_request>
     648:	8f ef       	ldi	r24, 0xFF	; 255
     64a:	9f e1       	ldi	r25, 0x1F	; 31
     64c:	21 e0       	ldi	r18, 0x01	; 1
     64e:	81 50       	subi	r24, 0x01	; 1
     650:	90 40       	sbci	r25, 0x00	; 0
     652:	20 40       	sbci	r18, 0x00	; 0
     654:	e1 f7       	brne	.-8      	; 0x64e <JOY_calibrate+0x32>
     656:	00 c0       	rjmp	.+0      	; 0x658 <JOY_calibrate+0x3c>
     658:	00 00       	nop
     65a:	80 91 0a 01 	lds	r24, 0x010A
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     65e:	90 91 0b 01 	lds	r25, 0x010B
     662:	6e d5       	rcall	.+2780   	; 0x1140 <ADC_read>
     664:	90 91 11 01 	lds	r25, 0x0111
     668:	98 17       	cp	r25, r24
		
		if(temp > calR) {calR = temp;}
     66a:	10 f4       	brcc	.+4      	; 0x670 <JOY_calibrate+0x54>
     66c:	80 93 11 01 	sts	0x0111, r24
     670:	21 97       	sbiw	r28, 0x01	; 1
     672:	20 97       	sbiw	r28, 0x00	; 0
     674:	19 f7       	brne	.-58     	; 0x63c <JOY_calibrate+0x20>
     676:	8c ec       	ldi	r24, 0xCC	; 204
	uint8_t temp = 0;
	
	printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	64 d7       	rcall	.+3784   	; 0x1544 <puts>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	printf("Move JOY to the left\n");
     67c:	4f ef       	ldi	r20, 0xFF	; 255
     67e:	5f ef       	ldi	r21, 0xFF	; 255
     680:	82 e0       	ldi	r24, 0x02	; 2
     682:	41 50       	subi	r20, 0x01	; 1
     684:	50 40       	sbci	r21, 0x00	; 0
     686:	80 40       	sbci	r24, 0x00	; 0
     688:	e1 f7       	brne	.-8      	; 0x682 <JOY_calibrate+0x66>
     68a:	00 c0       	rjmp	.+0      	; 0x68c <JOY_calibrate+0x70>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <JOY_calibrate+0x72>
     68e:	c4 e1       	ldi	r28, 0x14	; 20
     690:	d0 e0       	ldi	r29, 0x00	; 0
     692:	60 91 0a 01 	lds	r22, 0x010A
     696:	70 91 0b 01 	lds	r23, 0x010B
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     69a:	82 e0       	ldi	r24, 0x02	; 2
     69c:	2d d5       	rcall	.+2650   	; 0x10f8 <ADC_request>
     69e:	9f ef       	ldi	r25, 0xFF	; 255
     6a0:	2f e1       	ldi	r18, 0x1F	; 31
     6a2:	41 e0       	ldi	r20, 0x01	; 1
     6a4:	91 50       	subi	r25, 0x01	; 1
     6a6:	20 40       	sbci	r18, 0x00	; 0
     6a8:	40 40       	sbci	r20, 0x00	; 0
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <JOY_calibrate+0x88>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <JOY_calibrate+0x92>
     6ae:	00 00       	nop
     6b0:	80 91 0a 01 	lds	r24, 0x010A
     6b4:	90 91 0b 01 	lds	r25, 0x010B
     6b8:	43 d5       	rcall	.+2694   	; 0x1140 <ADC_read>
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     6ba:	90 91 10 01 	lds	r25, 0x0110
     6be:	89 17       	cp	r24, r25
     6c0:	10 f4       	brcc	.+4      	; 0x6c6 <JOY_calibrate+0xaa>
     6c2:	80 93 10 01 	sts	0x0110, r24
		
		if(temp < calL) {calL = temp;}
     6c6:	21 97       	sbiw	r28, 0x01	; 1
     6c8:	20 97       	sbiw	r28, 0x00	; 0
     6ca:	19 f7       	brne	.-58     	; 0x692 <JOY_calibrate+0x76>
     6cc:	81 ee       	ldi	r24, 0xE1	; 225
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	39 d7       	rcall	.+3698   	; 0x1544 <puts>
     6d2:	5f ef       	ldi	r21, 0xFF	; 255
	}
	
	printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     6d4:	8f ef       	ldi	r24, 0xFF	; 255
     6d6:	92 e0       	ldi	r25, 0x02	; 2
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	printf("Move JOY up\n");
     6d8:	51 50       	subi	r21, 0x01	; 1
     6da:	80 40       	sbci	r24, 0x00	; 0
     6dc:	90 40       	sbci	r25, 0x00	; 0
     6de:	e1 f7       	brne	.-8      	; 0x6d8 <JOY_calibrate+0xbc>
     6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <JOY_calibrate+0xc6>
     6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <JOY_calibrate+0xc8>
     6e4:	c4 e1       	ldi	r28, 0x14	; 20
     6e6:	d0 e0       	ldi	r29, 0x00	; 0
     6e8:	60 91 0a 01 	lds	r22, 0x010A
     6ec:	70 91 0b 01 	lds	r23, 0x010B
     6f0:	81 e0       	ldi	r24, 0x01	; 1
     6f2:	02 d5       	rcall	.+2564   	; 0x10f8 <ADC_request>
     6f4:	2f ef       	ldi	r18, 0xFF	; 255
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     6f6:	4f e1       	ldi	r20, 0x1F	; 31
     6f8:	51 e0       	ldi	r21, 0x01	; 1
     6fa:	21 50       	subi	r18, 0x01	; 1
     6fc:	40 40       	sbci	r20, 0x00	; 0
     6fe:	50 40       	sbci	r21, 0x00	; 0
     700:	e1 f7       	brne	.-8      	; 0x6fa <JOY_calibrate+0xde>
     702:	00 c0       	rjmp	.+0      	; 0x704 <JOY_calibrate+0xe8>
     704:	00 00       	nop
     706:	80 91 0a 01 	lds	r24, 0x010A
     70a:	90 91 0b 01 	lds	r25, 0x010B
     70e:	18 d5       	rcall	.+2608   	; 0x1140 <ADC_read>
     710:	90 91 0f 01 	lds	r25, 0x010F
     714:	98 17       	cp	r25, r24
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     716:	10 f4       	brcc	.+4      	; 0x71c <JOY_calibrate+0x100>
     718:	80 93 0f 01 	sts	0x010F, r24
     71c:	21 97       	sbiw	r28, 0x01	; 1
     71e:	20 97       	sbiw	r28, 0x00	; 0
     720:	19 f7       	brne	.-58     	; 0x6e8 <JOY_calibrate+0xcc>
		
		if(temp > calUp) {calUp = temp;}
     722:	8d ee       	ldi	r24, 0xED	; 237
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	0e d7       	rcall	.+3612   	; 0x1544 <puts>
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	9f ef       	ldi	r25, 0xFF	; 255
     72c:	22 e0       	ldi	r18, 0x02	; 2
     72e:	81 50       	subi	r24, 0x01	; 1
	}
	
	printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     730:	90 40       	sbci	r25, 0x00	; 0
     732:	20 40       	sbci	r18, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	printf("Move JOY down\n");
     734:	e1 f7       	brne	.-8      	; 0x72e <JOY_calibrate+0x112>
     736:	00 c0       	rjmp	.+0      	; 0x738 <JOY_calibrate+0x11c>
     738:	00 c0       	rjmp	.+0      	; 0x73a <JOY_calibrate+0x11e>
     73a:	c4 e1       	ldi	r28, 0x14	; 20
     73c:	d0 e0       	ldi	r29, 0x00	; 0
     73e:	60 91 0a 01 	lds	r22, 0x010A
     742:	70 91 0b 01 	lds	r23, 0x010B
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	d7 d4       	rcall	.+2478   	; 0x10f8 <ADC_request>
     74a:	4f ef       	ldi	r20, 0xFF	; 255
     74c:	5f e1       	ldi	r21, 0x1F	; 31
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	41 50       	subi	r20, 0x01	; 1
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     752:	50 40       	sbci	r21, 0x00	; 0
     754:	80 40       	sbci	r24, 0x00	; 0
     756:	e1 f7       	brne	.-8      	; 0x750 <JOY_calibrate+0x134>
     758:	00 c0       	rjmp	.+0      	; 0x75a <JOY_calibrate+0x13e>
     75a:	00 00       	nop
     75c:	80 91 0a 01 	lds	r24, 0x010A
     760:	90 91 0b 01 	lds	r25, 0x010B
     764:	ed d4       	rcall	.+2522   	; 0x1140 <ADC_read>
     766:	90 91 0e 01 	lds	r25, 0x010E
     76a:	89 17       	cp	r24, r25
     76c:	10 f4       	brcc	.+4      	; 0x772 <JOY_calibrate+0x156>
     76e:	80 93 0e 01 	sts	0x010E, r24
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     772:	21 97       	sbiw	r28, 0x01	; 1
     774:	20 97       	sbiw	r28, 0x00	; 0
     776:	19 f7       	brne	.-58     	; 0x73e <JOY_calibrate+0x122>
     778:	30 91 0e 01 	lds	r19, 0x010E
     77c:	20 91 0f 01 	lds	r18, 0x010F
		
		if(temp < calDown) {calDown = temp;}
     780:	90 91 10 01 	lds	r25, 0x0110
     784:	80 91 11 01 	lds	r24, 0x0111
     788:	1f 92       	push	r1
     78a:	3f 93       	push	r19
	}
	
	printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     78c:	1f 92       	push	r1
     78e:	2f 93       	push	r18
		
		if(temp < calDown) {calDown = temp;}
	}
	
	
	printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
     790:	1f 92       	push	r1
     792:	9f 93       	push	r25
     794:	1f 92       	push	r1
     796:	8f 93       	push	r24
     798:	8b ef       	ldi	r24, 0xFB	; 251
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	9f 93       	push	r25
     79e:	8f 93       	push	r24
     7a0:	c0 d6       	rcall	.+3456   	; 0x1522 <printf>
     7a2:	20 91 0f 01 	lds	r18, 0x010F
     7a6:	80 91 0e 01 	lds	r24, 0x010E
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	28 1b       	sub	r18, r24
     7ae:	31 09       	sbc	r19, r1
     7b0:	c9 01       	movw	r24, r18
     7b2:	4d b7       	in	r20, 0x3d	; 61
     7b4:	5e b7       	in	r21, 0x3e	; 62
     7b6:	46 5f       	subi	r20, 0xF6	; 246
     7b8:	5f 4f       	sbci	r21, 0xFF	; 255
     7ba:	0f b6       	in	r0, 0x3f	; 63
	
	meanVert = (calUp - calDown)/2;
     7bc:	f8 94       	cli
     7be:	5e bf       	out	0x3e, r21	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	4d bf       	out	0x3d, r20	; 61
     7c4:	99 23       	and	r25, r25
     7c6:	0c f4       	brge	.+2      	; 0x7ca <JOY_calibrate+0x1ae>
     7c8:	01 96       	adiw	r24, 0x01	; 1
     7ca:	95 95       	asr	r25
     7cc:	87 95       	ror	r24
     7ce:	80 93 0d 01 	sts	0x010D, r24
     7d2:	20 91 11 01 	lds	r18, 0x0111
     7d6:	80 91 10 01 	lds	r24, 0x0110
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	28 1b       	sub	r18, r24
     7de:	31 09       	sbc	r19, r1
     7e0:	c9 01       	movw	r24, r18
     7e2:	99 23       	and	r25, r25
     7e4:	0c f4       	brge	.+2      	; 0x7e8 <JOY_calibrate+0x1cc>
     7e6:	01 96       	adiw	r24, 0x01	; 1
     7e8:	95 95       	asr	r25
     7ea:	87 95       	ror	r24
	meanHor = (calR - calL)/2;
     7ec:	80 93 0c 01 	sts	0x010C, r24
     7f0:	90 91 0c 01 	lds	r25, 0x010C
     7f4:	80 91 0d 01 	lds	r24, 0x010D
     7f8:	1f 92       	push	r1
     7fa:	9f 93       	push	r25
     7fc:	1f 92       	push	r1
     7fe:	8f 93       	push	r24
     800:	85 e2       	ldi	r24, 0x25	; 37
     802:	92 e0       	ldi	r25, 0x02	; 2
     804:	9f 93       	push	r25
     806:	8f 93       	push	r24
     808:	8c d6       	rcall	.+3352   	; 0x1522 <printf>
	
	printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	df 91       	pop	r29
     818:	cf 91       	pop	r28
     81a:	08 95       	ret

0000081c <JOY_requestCurrentPosition>:
     81c:	88 37       	cpi	r24, 0x78	; 120
     81e:	39 f4       	brne	.+14     	; 0x82e <JOY_requestCurrentPosition+0x12>
     820:	60 91 0a 01 	lds	r22, 0x010A
     824:	70 91 0b 01 	lds	r23, 0x010B
     828:	82 e0       	ldi	r24, 0x02	; 2
     82a:	66 c4       	rjmp	.+2252   	; 0x10f8 <ADC_request>
     82c:	08 95       	ret
     82e:	89 37       	cpi	r24, 0x79	; 121
     830:	31 f4       	brne	.+12     	; 0x83e <JOY_requestCurrentPosition+0x22>
}
     832:	60 91 0a 01 	lds	r22, 0x010A
     836:	70 91 0b 01 	lds	r23, 0x010B
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
	{
		ADC_request(Y_channel, adc_ext_ram);
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	5d c4       	rjmp	.+2234   	; 0x10f8 <ADC_request>
     83e:	08 95       	ret

00000840 <JOY_updatePosition>:
     840:	88 37       	cpi	r24, 0x78	; 120
     842:	f9 f4       	brne	.+62     	; 0x882 <JOY_updatePosition+0x42>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     844:	80 91 0a 01 	lds	r24, 0x010A
     848:	90 91 0b 01 	lds	r25, 0x010B
     84c:	79 d4       	rcall	.+2290   	; 0x1140 <ADC_read>
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	90 93 f3 02 	sts	0x02F3, r25
     854:	80 93 f2 02 	sts	0x02F2, r24
     858:	20 91 0c 01 	lds	r18, 0x010C
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     85c:	60 91 0c 01 	lds	r22, 0x010C
     860:	ac 01       	movw	r20, r24
     862:	42 1b       	sub	r20, r18
     864:	51 09       	sbc	r21, r1
     866:	9a 01       	movw	r18, r20
     868:	44 e6       	ldi	r20, 0x64	; 100
     86a:	42 9f       	mul	r20, r18
     86c:	c0 01       	movw	r24, r0
     86e:	43 9f       	mul	r20, r19
     870:	90 0d       	add	r25, r0
     872:	11 24       	eor	r1, r1
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	66 d4       	rcall	.+2252   	; 0x1144 <__divmodhi4>
     878:	70 93 f7 02 	sts	0x02F7, r23
     87c:	60 93 f6 02 	sts	0x02F6, r22
     880:	08 95       	ret
     882:	89 37       	cpi	r24, 0x79	; 121
     884:	f1 f4       	brne	.+60     	; 0x8c2 <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     886:	80 91 0a 01 	lds	r24, 0x010A
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     88a:	90 91 0b 01 	lds	r25, 0x010B
     88e:	58 d4       	rcall	.+2224   	; 0x1140 <ADC_read>
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	90 93 f5 02 	sts	0x02F5, r25
     896:	80 93 f4 02 	sts	0x02F4, r24
     89a:	20 91 0d 01 	lds	r18, 0x010D
     89e:	60 91 0d 01 	lds	r22, 0x010D
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     8a2:	ac 01       	movw	r20, r24
     8a4:	42 1b       	sub	r20, r18
     8a6:	51 09       	sbc	r21, r1
     8a8:	9a 01       	movw	r18, r20
     8aa:	44 e6       	ldi	r20, 0x64	; 100
     8ac:	42 9f       	mul	r20, r18
     8ae:	c0 01       	movw	r24, r0
     8b0:	43 9f       	mul	r20, r19
     8b2:	90 0d       	add	r25, r0
     8b4:	11 24       	eor	r1, r1
     8b6:	70 e0       	ldi	r23, 0x00	; 0
     8b8:	45 d4       	rcall	.+2186   	; 0x1144 <__divmodhi4>
     8ba:	70 93 f9 02 	sts	0x02F9, r23
     8be:	60 93 f8 02 	sts	0x02F8, r22
     8c2:	08 95       	ret

000008c4 <JOY_calculateDirection>:
     8c4:	80 91 f6 02 	lds	r24, 0x02F6
     8c8:	90 91 f7 02 	lds	r25, 0x02F7
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     8cc:	8b 35       	cpi	r24, 0x5B	; 91
     8ce:	91 05       	cpc	r25, r1
     8d0:	24 f0       	brlt	.+8      	; 0x8da <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     8d2:	83 e0       	ldi	r24, 0x03	; 3
     8d4:	80 93 f1 02 	sts	0x02F1, r24
     8d8:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     8da:	86 3a       	cpi	r24, 0xA6	; 166
     8dc:	9f 4f       	sbci	r25, 0xFF	; 255
     8de:	24 f4       	brge	.+8      	; 0x8e8 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     8e0:	84 e0       	ldi	r24, 0x04	; 4
     8e2:	80 93 f1 02 	sts	0x02F1, r24
     8e6:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     8e8:	80 91 f8 02 	lds	r24, 0x02F8
     8ec:	90 91 f9 02 	lds	r25, 0x02F9
     8f0:	8b 35       	cpi	r24, 0x5B	; 91
     8f2:	91 05       	cpc	r25, r1
     8f4:	24 f0       	brlt	.+8      	; 0x8fe <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	80 93 f1 02 	sts	0x02F1, r24
     8fc:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     8fe:	86 3a       	cpi	r24, 0xA6	; 166
     900:	9f 4f       	sbci	r25, 0xFF	; 255
     902:	24 f4       	brge	.+8      	; 0x90c <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     904:	82 e0       	ldi	r24, 0x02	; 2
     906:	80 93 f1 02 	sts	0x02F1, r24
     90a:	08 95       	ret
	else{currentDirection = CENTRE;}
     90c:	10 92 f1 02 	sts	0x02F1, r1
     910:	08 95       	ret

00000912 <JOY_getPosition>:

//------------------------------------------------------------------------------
// This function returns the current position of the Joystick.
// It is a struct with the four parameters X_abs, Y_abs, X_per and Y_per
JOY_position_t JOY_getPosition()
{
     912:	cf 93       	push	r28
     914:	df 93       	push	r29
     916:	cd b7       	in	r28, 0x3d	; 61
     918:	de b7       	in	r29, 0x3e	; 62
     91a:	28 97       	sbiw	r28, 0x08	; 8
     91c:	0f b6       	in	r0, 0x3f	; 63
     91e:	f8 94       	cli
     920:	de bf       	out	0x3e, r29	; 62
     922:	0f be       	out	0x3f, r0	; 63
     924:	cd bf       	out	0x3d, r28	; 61
	return currentPosition;
     926:	88 e0       	ldi	r24, 0x08	; 8
     928:	e2 ef       	ldi	r30, 0xF2	; 242
     92a:	f2 e0       	ldi	r31, 0x02	; 2
     92c:	de 01       	movw	r26, r28
     92e:	11 96       	adiw	r26, 0x01	; 1
     930:	01 90       	ld	r0, Z+
     932:	0d 92       	st	X+, r0
     934:	8a 95       	dec	r24
     936:	e1 f7       	brne	.-8      	; 0x930 <JOY_getPosition+0x1e>
     938:	29 81       	ldd	r18, Y+1	; 0x01
     93a:	3a 81       	ldd	r19, Y+2	; 0x02
     93c:	4b 81       	ldd	r20, Y+3	; 0x03
     93e:	5c 81       	ldd	r21, Y+4	; 0x04
     940:	6d 81       	ldd	r22, Y+5	; 0x05
     942:	7e 81       	ldd	r23, Y+6	; 0x06
}
     944:	8f 81       	ldd	r24, Y+7	; 0x07
     946:	98 85       	ldd	r25, Y+8	; 0x08
     948:	28 96       	adiw	r28, 0x08	; 8
     94a:	0f b6       	in	r0, 0x3f	; 63
     94c:	f8 94       	cli
     94e:	de bf       	out	0x3e, r29	; 62
     950:	0f be       	out	0x3f, r0	; 63
     952:	cd bf       	out	0x3d, r28	; 61
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <JOY_getDirection>:
// Before the value is returned, the values of position in x and y direction are 
// requested from the ADC and written to the currentPosition and 
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
     95a:	88 e7       	ldi	r24, 0x78	; 120
     95c:	5f df       	rcall	.-322    	; 0x81c <JOY_requestCurrentPosition>
     95e:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     960:	8a 95       	dec	r24
     962:	f1 f7       	brne	.-4      	; 0x960 <JOY_getDirection+0x6>
     964:	00 00       	nop
     966:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     968:	6b df       	rcall	.-298    	; 0x840 <JOY_updatePosition>
     96a:	89 e7       	ldi	r24, 0x79	; 121
     96c:	57 df       	rcall	.-338    	; 0x81c <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     96e:	82 e6       	ldi	r24, 0x62	; 98
     970:	8a 95       	dec	r24
     972:	f1 f7       	brne	.-4      	; 0x970 <JOY_getDirection+0x16>
     974:	00 00       	nop
     976:	89 e7       	ldi	r24, 0x79	; 121
     978:	63 df       	rcall	.-314    	; 0x840 <JOY_updatePosition>
     97a:	a4 df       	rcall	.-184    	; 0x8c4 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     97c:	80 91 f1 02 	lds	r24, 0x02F1
     980:	08 95       	ret

00000982 <startGame>:

int menuFrameOffset = 10; //Columns from left frame border
//******************************************************************************************

void startGame()
{
     982:	cf 93       	push	r28
     984:	df 93       	push	r29
	OLED_clear();
     986:	5d d2       	rcall	.+1210   	; 0xe42 <OLED_clear>
     988:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	3b d2       	rcall	.+1142   	; 0xe08 <OLED_goto>
     992:	8a e4       	ldi	r24, 0x4A	; 74
     994:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("START");
     996:	1a d3       	rcall	.+1588   	; 0xfcc <OLED_printString>
     998:	60 e0       	ldi	r22, 0x00	; 0
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_goto(3,0);
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	33 d2       	rcall	.+1126   	; 0xe08 <OLED_goto>
     9a2:	ce e0       	ldi	r28, 0x0E	; 14
     9a4:	d0 e0       	ldi	r29, 0x00	; 0
     9a6:	80 e5       	ldi	r24, 0x50	; 80
     9a8:	92 e0       	ldi	r25, 0x02	; 2
     9aa:	10 d3       	rcall	.+1568   	; 0xfcc <OLED_printString>
     9ac:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     9ae:	8f e7       	ldi	r24, 0x7F	; 127
     9b0:	97 e0       	ldi	r25, 0x07	; 7
     9b2:	21 50       	subi	r18, 0x01	; 1
     9b4:	80 40       	sbci	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9b6:	90 40       	sbci	r25, 0x00	; 0
     9b8:	e1 f7       	brne	.-8      	; 0x9b2 <startGame+0x30>
     9ba:	00 c0       	rjmp	.+0      	; 0x9bc <startGame+0x3a>
     9bc:	00 00       	nop
     9be:	21 97       	sbiw	r28, 0x01	; 1
     9c0:	20 97       	sbiw	r28, 0x00	; 0
     9c2:	89 f7       	brne	.-30     	; 0x9a6 <startGame+0x24>
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	85 e0       	ldi	r24, 0x05	; 5
	OLED_goto(0,0);
	OLED_printString("START");
	
	OLED_goto(3,0);
	
	for(int i = 14; i > 0; i--)
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	1d d2       	rcall	.+1082   	; 0xe08 <OLED_goto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_goto(5,0);
     9ce:	82 e5       	ldi	r24, 0x52	; 82
     9d0:	92 e0       	ldi	r25, 0x02	; 2
     9d2:	fc d2       	rcall	.+1528   	; 0xfcc <OLED_printString>
     9d4:	2f ef       	ldi	r18, 0xFF	; 255
     9d6:	8f ef       	ldi	r24, 0xFF	; 255
     9d8:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     9da:	21 50       	subi	r18, 0x01	; 1
     9dc:	80 40       	sbci	r24, 0x00	; 0
     9de:	90 40       	sbci	r25, 0x00	; 0
     9e0:	e1 f7       	brne	.-8      	; 0x9da <startGame+0x58>
     9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <startGame+0x62>
     9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <startGame+0x64>
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	08 95       	ret

000009ec <MENU_addMenuItem>:
     9ec:	cf 92       	push	r12
     9ee:	df 92       	push	r13
     9f0:	ef 92       	push	r14
     9f2:	ff 92       	push	r15
	_delay_ms(3000);
}
     9f4:	0f 93       	push	r16
     9f6:	1f 93       	push	r17
     9f8:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     9fa:	df 93       	push	r29
     9fc:	8c 01       	movw	r16, r24
     9fe:	7b 01       	movw	r14, r22
     a00:	6a 01       	movw	r12, r20
     a02:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     a04:	80 91 fd 02 	lds	r24, 0x02FD
     a08:	90 91 fe 02 	lds	r25, 0x02FE
     a0c:	89 2b       	or	r24, r25
     a0e:	19 f0       	breq	.+6      	; 0xa16 <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     a10:	8b e5       	ldi	r24, 0x5B	; 91
     a12:	92 e0       	ldi	r25, 0x02	; 2
     a14:	97 d5       	rcall	.+2862   	; 0x1544 <puts>
     a16:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	bb d3       	rcall	.+1910   	; 0x1192 <malloc>
     a1c:	fc 01       	movw	r30, r24
     a1e:	90 93 fe 02 	sts	0x02FE, r25
     a22:	80 93 fd 02 	sts	0x02FD, r24
     a26:	f3 82       	std	Z+3, r15	; 0x03
     a28:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     a2a:	11 83       	std	Z+1, r17	; 0x01
     a2c:	00 83       	st	Z, r16
	currItem->name = name;
     a2e:	cd 2b       	or	r28, r29
     a30:	39 f0       	breq	.+14     	; 0xa40 <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     a32:	d5 82       	std	Z+5, r13	; 0x05
     a34:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     a3a:	97 83       	std	Z+7, r25	; 0x07
     a3c:	86 83       	std	Z+6, r24	; 0x06
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <MENU_addMenuItem+0x5c>
     a40:	15 82       	std	Z+5, r1	; 0x05
     a42:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     a44:	17 82       	std	Z+7, r1	; 0x07
     a46:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
	}
}
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	ff 90       	pop	r15
     a52:	ef 90       	pop	r14
     a54:	df 90       	pop	r13
     a56:	cf 90       	pop	r12
     a58:	08 95       	ret

00000a5a <MENU_buildMenus>:
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     a5e:	86 e1       	ldi	r24, 0x16	; 22
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	97 d3       	rcall	.+1838   	; 0x1192 <malloc>
     a64:	ec 01       	movw	r28, r24
     a66:	90 93 04 03 	sts	0x0304, r25
     a6a:	80 93 03 03 	sts	0x0303, r24
     a6e:	81 e7       	ldi	r24, 0x71	; 113
	mainMenu->menuName = "MainMenu";
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	99 83       	std	Y+1, r25	; 0x01
     a74:	88 83       	st	Y, r24
     a76:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     a78:	1c 8a       	std	Y+20, r1	; 0x14
     a7a:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	9b 83       	std	Y+3, r25	; 0x03
     a80:	8a 83       	std	Y+2, r24	; 0x02
     a82:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	85 d3       	rcall	.+1802   	; 0x1192 <malloc>
     a88:	fc 01       	movw	r30, r24
     a8a:	90 93 02 03 	sts	0x0302, r25
     a8e:	80 93 01 03 	sts	0x0301, r24
     a92:	8a e7       	ldi	r24, 0x7A	; 122
     a94:	92 e0       	ldi	r25, 0x02	; 2
	difficultyMenu->menuName = "DifficultyMenu";
     a96:	91 83       	std	Z+1, r25	; 0x01
     a98:	80 83       	st	Z, r24
     a9a:	d5 8b       	std	Z+21, r29	; 0x15
     a9c:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     a9e:	83 e0       	ldi	r24, 0x03	; 3
     aa0:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     aa2:	93 83       	std	Z+3, r25	; 0x03
     aa4:	82 83       	std	Z+2, r24	; 0x02
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	50 e0       	ldi	r21, 0x00	; 0
     aae:	be 01       	movw	r22, r28
     ab0:	89 e8       	ldi	r24, 0x89	; 137
     ab2:	92 e0       	ldi	r25, 0x02	; 2
     ab4:	9b df       	rcall	.-202    	; 0x9ec <MENU_addMenuItem>
     ab6:	60 91 03 03 	lds	r22, 0x0303
     aba:	70 91 04 03 	lds	r23, 0x0304
	mainMenu->children[0] = currItem;
     abe:	e0 91 fd 02 	lds	r30, 0x02FD
     ac2:	f0 91 fe 02 	lds	r31, 0x02FE
     ac6:	db 01       	movw	r26, r22
     ac8:	15 96       	adiw	r26, 0x05	; 5
     aca:	fc 93       	st	X, r31
     acc:	ee 93       	st	-X, r30
     ace:	14 97       	sbiw	r26, 0x04	; 4
     ad0:	81 ec       	ldi	r24, 0xC1	; 193
     ad2:	94 e0       	ldi	r25, 0x04	; 4
     ad4:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
     ad6:	82 87       	std	Z+10, r24	; 0x0a
     ad8:	40 91 01 03 	lds	r20, 0x0301
     adc:	50 91 02 03 	lds	r21, 0x0302
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     ae0:	21 e0       	ldi	r18, 0x01	; 1
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	82 e9       	ldi	r24, 0x92	; 146
     ae6:	92 e0       	ldi	r25, 0x02	; 2
     ae8:	81 df       	rcall	.-254    	; 0x9ec <MENU_addMenuItem>
     aea:	60 91 03 03 	lds	r22, 0x0303
     aee:	70 91 04 03 	lds	r23, 0x0304
	mainMenu->children[1] = currItem;
     af2:	80 91 fd 02 	lds	r24, 0x02FD
     af6:	90 91 fe 02 	lds	r25, 0x02FE
     afa:	fb 01       	movw	r30, r22
     afc:	97 83       	std	Z+7, r25	; 0x07
     afe:	86 83       	std	Z+6, r24	; 0x06
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	40 e0       	ldi	r20, 0x00	; 0
     b06:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     b08:	8d e9       	ldi	r24, 0x9D	; 157
     b0a:	92 e0       	ldi	r25, 0x02	; 2
     b0c:	6f df       	rcall	.-290    	; 0x9ec <MENU_addMenuItem>
     b0e:	60 91 03 03 	lds	r22, 0x0303
     b12:	70 91 04 03 	lds	r23, 0x0304
     b16:	80 91 fd 02 	lds	r24, 0x02FD
	mainMenu->children[2] = currItem;
     b1a:	90 91 fe 02 	lds	r25, 0x02FE
     b1e:	db 01       	movw	r26, r22
     b20:	19 96       	adiw	r26, 0x09	; 9
     b22:	9c 93       	st	X, r25
     b24:	8e 93       	st	-X, r24
     b26:	18 97       	sbiw	r26, 0x08	; 8
     b28:	20 e0       	ldi	r18, 0x00	; 0
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	40 e0       	ldi	r20, 0x00	; 0
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	88 ea       	ldi	r24, 0xA8	; 168
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
     b32:	92 e0       	ldi	r25, 0x02	; 2
     b34:	5b df       	rcall	.-330    	; 0x9ec <MENU_addMenuItem>
     b36:	60 91 03 03 	lds	r22, 0x0303
     b3a:	70 91 04 03 	lds	r23, 0x0304
     b3e:	e0 91 fd 02 	lds	r30, 0x02FD
	mainMenu->children[3] = currItem;
     b42:	f0 91 fe 02 	lds	r31, 0x02FE
     b46:	db 01       	movw	r26, r22
     b48:	1b 96       	adiw	r26, 0x0b	; 11
     b4a:	fc 93       	st	X, r31
     b4c:	ee 93       	st	-X, r30
     b4e:	1a 97       	sbiw	r26, 0x0a	; 10
     b50:	8e e0       	ldi	r24, 0x0E	; 14
     b52:	93 e0       	ldi	r25, 0x03	; 3
     b54:	93 87       	std	Z+11, r25	; 0x0b
     b56:	82 87       	std	Z+10, r24	; 0x0a
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	50 e0       	ldi	r21, 0x00	; 0
     b60:	82 eb       	ldi	r24, 0xB2	; 178
     b62:	92 e0       	ldi	r25, 0x02	; 2
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
     b64:	43 df       	rcall	.-378    	; 0x9ec <MENU_addMenuItem>
     b66:	e0 91 03 03 	lds	r30, 0x0303
     b6a:	f0 91 04 03 	lds	r31, 0x0304
     b6e:	80 91 fd 02 	lds	r24, 0x02FD
     b72:	90 91 fe 02 	lds	r25, 0x02FE
	mainMenu->children[4] = currItem;
     b76:	95 87       	std	Z+13, r25	; 0x0d
     b78:	84 87       	std	Z+12, r24	; 0x0c
     b7a:	10 92 fe 02 	sts	0x02FE, r1
     b7e:	10 92 fd 02 	sts	0x02FD, r1
     b82:	60 91 01 03 	lds	r22, 0x0301
     b86:	70 91 02 03 	lds	r23, 0x0302
	
	currItem = NULL;
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
     b90:	50 e0       	ldi	r21, 0x00	; 0
     b92:	87 eb       	ldi	r24, 0xB7	; 183
     b94:	92 e0       	ldi	r25, 0x02	; 2
     b96:	2a df       	rcall	.-428    	; 0x9ec <MENU_addMenuItem>
     b98:	60 91 01 03 	lds	r22, 0x0301
     b9c:	70 91 02 03 	lds	r23, 0x0302
     ba0:	80 91 fd 02 	lds	r24, 0x02FD
     ba4:	90 91 fe 02 	lds	r25, 0x02FE
	difficultyMenu->children[0] = currItem;
     ba8:	fb 01       	movw	r30, r22
     baa:	95 83       	std	Z+5, r25	; 0x05
     bac:	84 83       	std	Z+4, r24	; 0x04
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	8c eb       	ldi	r24, 0xBC	; 188
     bb8:	92 e0       	ldi	r25, 0x02	; 2
     bba:	18 df       	rcall	.-464    	; 0x9ec <MENU_addMenuItem>
     bbc:	60 91 01 03 	lds	r22, 0x0301
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
     bc0:	70 91 02 03 	lds	r23, 0x0302
     bc4:	80 91 fd 02 	lds	r24, 0x02FD
     bc8:	90 91 fe 02 	lds	r25, 0x02FE
     bcc:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
     bce:	17 96       	adiw	r26, 0x07	; 7
     bd0:	9c 93       	st	X, r25
     bd2:	8e 93       	st	-X, r24
     bd4:	16 97       	sbiw	r26, 0x06	; 6
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e0       	ldi	r20, 0x00	; 0
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	83 ec       	ldi	r24, 0xC3	; 195
     be0:	92 e0       	ldi	r25, 0x02	; 2
     be2:	04 df       	rcall	.-504    	; 0x9ec <MENU_addMenuItem>
     be4:	e0 91 01 03 	lds	r30, 0x0301
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
     be8:	f0 91 02 03 	lds	r31, 0x0302
     bec:	80 91 fd 02 	lds	r24, 0x02FD
     bf0:	90 91 fe 02 	lds	r25, 0x02FE
     bf4:	91 87       	std	Z+9, r25	; 0x09
     bf6:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
     bf8:	df 91       	pop	r29
     bfa:	cf 91       	pop	r28
     bfc:	08 95       	ret

00000bfe <MENU_printMenuItem>:
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	ec 01       	movw	r28, r24
     c04:	cb 01       	movw	r24, r22
     c06:	20 97       	sbiw	r28, 0x00	; 0
     c08:	49 f0       	breq	.+18     	; 0xc1c <MENU_printMenuItem+0x1e>
     c0a:	60 91 12 01 	lds	r22, 0x0112
}
     c0e:	70 91 13 01 	lds	r23, 0x0113

void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
     c12:	fa d0       	rcall	.+500    	; 0xe08 <OLED_goto>
     c14:	88 81       	ld	r24, Y
		OLED_printString(item->name);
     c16:	99 81       	ldd	r25, Y+1	; 0x01
     c18:	d9 d1       	rcall	.+946    	; 0xfcc <OLED_printString>
     c1a:	07 c0       	rjmp	.+14     	; 0xc2a <MENU_printMenuItem+0x2c>
     c1c:	88 ec       	ldi	r24, 0xC8	; 200
     c1e:	92 e0       	ldi	r25, 0x02	; 2
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
     c20:	9f 93       	push	r25
     c22:	8f 93       	push	r24
     c24:	7e d4       	rcall	.+2300   	; 0x1522 <printf>
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	df 91       	pop	r29
     c2c:	cf 91       	pop	r28
     c2e:	08 95       	ret

00000c30 <MENU_printMenu>:
	}
}
     c30:	cf 92       	push	r12
     c32:	df 92       	push	r13
     c34:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
     c36:	ff 92       	push	r15
     c38:	0f 93       	push	r16
     c3a:	1f 93       	push	r17
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	6c 01       	movw	r12, r24
     c42:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
     c44:	fe d0       	rcall	.+508    	; 0xe42 <OLED_clear>
     c46:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	17 d2       	rcall	.+1070   	; 0x107a <OLED_moveArrow>
     c4c:	1e 14       	cp	r1, r14
     c4e:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
     c50:	7c f4       	brge	.+30     	; 0xc70 <MENU_printMenu+0x40>
     c52:	86 01       	movw	r16, r12
     c54:	0c 5f       	subi	r16, 0xFC	; 252
     c56:	1f 4f       	sbci	r17, 0xFF	; 255
     c58:	c0 e0       	ldi	r28, 0x00	; 0
     c5a:	d0 e0       	ldi	r29, 0x00	; 0
     c5c:	be 01       	movw	r22, r28
     c5e:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
     c60:	81 91       	ld	r24, Z+
     c62:	91 91       	ld	r25, Z+
     c64:	8f 01       	movw	r16, r30
     c66:	cb df       	rcall	.-106    	; 0xbfe <MENU_printMenuItem>
     c68:	21 96       	adiw	r28, 0x01	; 1
     c6a:	ce 15       	cp	r28, r14
     c6c:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
     c6e:	b1 f7       	brne	.-20     	; 0xc5c <MENU_printMenu+0x2c>
     c70:	d0 92 00 03 	sts	0x0300, r13
     c74:	c0 92 ff 02 	sts	0x02FF, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
     c78:	10 92 fb 02 	sts	0x02FB, r1
     c7c:	10 92 fa 02 	sts	0x02FA, r1
	
	currentPosition = 0;
     c80:	f6 01       	movw	r30, r12
     c82:	84 81       	ldd	r24, Z+4	; 0x04
     c84:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
     c86:	90 93 fe 02 	sts	0x02FE, r25
     c8a:	80 93 fd 02 	sts	0x02FD, r24
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
}
     c94:	0f 91       	pop	r16
     c96:	ff 90       	pop	r15
     c98:	ef 90       	pop	r14
     c9a:	df 90       	pop	r13
     c9c:	cf 90       	pop	r12
     c9e:	08 95       	ret

00000ca0 <MENU_moveUp>:
     ca0:	20 91 fa 02 	lds	r18, 0x02FA
     ca4:	30 91 fb 02 	lds	r19, 0x02FB
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
     ca8:	12 16       	cp	r1, r18
     caa:	13 06       	cpc	r1, r19
     cac:	bc f4       	brge	.+46     	; 0xcdc <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
     cae:	c9 01       	movw	r24, r18
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	90 93 fb 02 	sts	0x02FB, r25
     cb6:	80 93 fa 02 	sts	0x02FA, r24
		currItem = currentMenu->children[currentPosition];
     cba:	e0 91 ff 02 	lds	r30, 0x02FF
     cbe:	f0 91 00 03 	lds	r31, 0x0300
     cc2:	2f 5f       	subi	r18, 0xFF	; 255
     cc4:	3f 4f       	sbci	r19, 0xFF	; 255
     cc6:	22 0f       	add	r18, r18
     cc8:	33 1f       	adc	r19, r19
     cca:	e2 0f       	add	r30, r18
     ccc:	f3 1f       	adc	r31, r19
     cce:	20 81       	ld	r18, Z
     cd0:	31 81       	ldd	r19, Z+1	; 0x01
     cd2:	30 93 fe 02 	sts	0x02FE, r19
     cd6:	20 93 fd 02 	sts	0x02FD, r18
		OLED_moveArrow(currentPosition);
     cda:	cf c1       	rjmp	.+926    	; 0x107a <OLED_moveArrow>
     cdc:	08 95       	ret

00000cde <MENU_moveDown>:
     cde:	e0 91 ff 02 	lds	r30, 0x02FF
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
     ce2:	f0 91 00 03 	lds	r31, 0x0300
     ce6:	20 91 fa 02 	lds	r18, 0x02FA
     cea:	30 91 fb 02 	lds	r19, 0x02FB
     cee:	82 81       	ldd	r24, Z+2	; 0x02
     cf0:	93 81       	ldd	r25, Z+3	; 0x03
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	28 17       	cp	r18, r24
     cf6:	39 07       	cpc	r19, r25
     cf8:	a4 f4       	brge	.+40     	; 0xd22 <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
     cfa:	c9 01       	movw	r24, r18
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	90 93 fb 02 	sts	0x02FB, r25
     d02:	80 93 fa 02 	sts	0x02FA, r24
		currItem = currentMenu->children[currentPosition];
     d06:	2d 5f       	subi	r18, 0xFD	; 253
     d08:	3f 4f       	sbci	r19, 0xFF	; 255
     d0a:	22 0f       	add	r18, r18
     d0c:	33 1f       	adc	r19, r19
     d0e:	e2 0f       	add	r30, r18
     d10:	f3 1f       	adc	r31, r19
     d12:	20 81       	ld	r18, Z
     d14:	31 81       	ldd	r19, Z+1	; 0x01
     d16:	30 93 fe 02 	sts	0x02FE, r19
     d1a:	20 93 fd 02 	sts	0x02FD, r18
		OLED_moveArrow(currentPosition);
     d1e:	ad c1       	rjmp	.+858    	; 0x107a <OLED_moveArrow>
     d20:	08 95       	ret
     d22:	10 92 fb 02 	sts	0x02FB, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
     d26:	10 92 fa 02 	sts	0x02FA, r1
     d2a:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
     d2c:	95 81       	ldd	r25, Z+5	; 0x05
     d2e:	90 93 fe 02 	sts	0x02FE, r25
     d32:	80 93 fd 02 	sts	0x02FD, r24
     d36:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	9f c1       	rjmp	.+830    	; 0x107a <OLED_moveArrow>
     d3c:	08 95       	ret

00000d3e <MENU_moveLeft>:
     d3e:	e0 91 ff 02 	lds	r30, 0x02FF
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
     d42:	f0 91 00 03 	lds	r31, 0x0300
     d46:	84 89       	ldd	r24, Z+20	; 0x14
     d48:	95 89       	ldd	r25, Z+21	; 0x15
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	21 f0       	breq	.+8      	; 0xd56 <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
     d4e:	fc 01       	movw	r30, r24
     d50:	62 81       	ldd	r22, Z+2	; 0x02
     d52:	73 81       	ldd	r23, Z+3	; 0x03
     d54:	6d cf       	rjmp	.-294    	; 0xc30 <MENU_printMenu>
     d56:	08 95       	ret

00000d58 <MENU_reactivate>:
     d58:	80 91 ff 02 	lds	r24, 0x02FF
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
     d5c:	90 91 00 03 	lds	r25, 0x0300
     d60:	fc 01       	movw	r30, r24
     d62:	62 81       	ldd	r22, Z+2	; 0x02
     d64:	73 81       	ldd	r23, Z+3	; 0x03
     d66:	64 df       	rcall	.-312    	; 0xc30 <MENU_printMenu>
     d68:	18 c0       	rjmp	.+48     	; 0xd9a <MENU_waitForInput>
	MENU_waitForInput();
     d6a:	08 95       	ret

00000d6c <MENU_moveRight>:
     d6c:	e0 91 fd 02 	lds	r30, 0x02FD
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
     d70:	f0 91 fe 02 	lds	r31, 0x02FE
     d74:	86 81       	ldd	r24, Z+6	; 0x06
     d76:	97 81       	ldd	r25, Z+7	; 0x07
     d78:	89 2b       	or	r24, r25
     d7a:	39 f0       	breq	.+14     	; 0xd8a <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
     d7c:	84 81       	ldd	r24, Z+4	; 0x04
     d7e:	95 81       	ldd	r25, Z+5	; 0x05
     d80:	fc 01       	movw	r30, r24
     d82:	62 81       	ldd	r22, Z+2	; 0x02
     d84:	73 81       	ldd	r23, Z+3	; 0x03
     d86:	54 cf       	rjmp	.-344    	; 0xc30 <MENU_printMenu>
     d88:	08 95       	ret
     d8a:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
     d8c:	f3 85       	ldd	r31, Z+11	; 0x0b
     d8e:	e0 2d       	mov	r30, r0
     d90:	30 97       	sbiw	r30, 0x00	; 0
     d92:	11 f0       	breq	.+4      	; 0xd98 <MENU_moveRight+0x2c>
     d94:	09 95       	icall
	{
		currItem->functionPtr();
     d96:	e0 cf       	rjmp	.-64     	; 0xd58 <MENU_reactivate>
		MENU_reactivate();
     d98:	08 95       	ret

00000d9a <MENU_waitForInput>:
     d9a:	80 91 fa 02 	lds	r24, 0x02FA
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
     d9e:	90 91 fb 02 	lds	r25, 0x02FB
     da2:	6b d1       	rcall	.+726    	; 0x107a <OLED_moveArrow>
     da4:	80 91 fc 02 	lds	r24, 0x02FC
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
     da8:	88 23       	and	r24, r24
     daa:	f9 f0       	breq	.+62     	; 0xdea <MENU_waitForInput+0x50>
     dac:	d6 dd       	rcall	.-1108   	; 0x95a <JOY_getDirection>
	{
		currDir = JOY_getDirection();
     dae:	82 30       	cpi	r24, 0x02	; 2
     db0:	71 f0       	breq	.+28     	; 0xdce <MENU_waitForInput+0x34>
		switch(currDir){
     db2:	18 f4       	brcc	.+6      	; 0xdba <MENU_waitForInput+0x20>
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	49 f0       	breq	.+18     	; 0xdca <MENU_waitForInput+0x30>
     db8:	0b c0       	rjmp	.+22     	; 0xdd0 <MENU_waitForInput+0x36>
     dba:	83 30       	cpi	r24, 0x03	; 3
     dbc:	21 f0       	breq	.+8      	; 0xdc6 <MENU_waitForInput+0x2c>
     dbe:	84 30       	cpi	r24, 0x04	; 4
     dc0:	39 f4       	brne	.+14     	; 0xdd0 <MENU_waitForInput+0x36>
     dc2:	bd df       	rcall	.-134    	; 0xd3e <MENU_moveLeft>
     dc4:	05 c0       	rjmp	.+10     	; 0xdd0 <MENU_waitForInput+0x36>
			case LEFT:
			MENU_moveLeft();
     dc6:	d2 df       	rcall	.-92     	; 0xd6c <MENU_moveRight>
     dc8:	03 c0       	rjmp	.+6      	; 0xdd0 <MENU_waitForInput+0x36>
			break;
     dca:	6a df       	rcall	.-300    	; 0xca0 <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
     dcc:	01 c0       	rjmp	.+2      	; 0xdd0 <MENU_waitForInput+0x36>
     dce:	87 df       	rcall	.-242    	; 0xcde <MENU_moveDown>
			break;
     dd0:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
     dd2:	8f e7       	ldi	r24, 0x7F	; 127
     dd4:	94 e0       	ldi	r25, 0x04	; 4
			break;
     dd6:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
     dd8:	80 40       	sbci	r24, 0x00	; 0
     dda:	90 40       	sbci	r25, 0x00	; 0
     ddc:	e1 f7       	brne	.-8      	; 0xdd6 <MENU_waitForInput+0x3c>
     dde:	00 c0       	rjmp	.+0      	; 0xde0 <MENU_waitForInput+0x46>
     de0:	00 00       	nop
     de2:	80 91 fc 02 	lds	r24, 0x02FC
     de6:	81 11       	cpse	r24, r1
     de8:	e1 cf       	rjmp	.-62     	; 0xdac <MENU_waitForInput+0x12>
     dea:	08 95       	ret

00000dec <MENU_activate>:
     dec:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
     dee:	80 93 fc 02 	sts	0x02FC, r24
     df2:	33 de       	rcall	.-922    	; 0xa5a <MENU_buildMenus>
     df4:	80 91 03 03 	lds	r24, 0x0303
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
     df8:	90 91 04 03 	lds	r25, 0x0304
     dfc:	fc 01       	movw	r30, r24
     dfe:	62 81       	ldd	r22, Z+2	; 0x02
     e00:	73 81       	ldd	r23, Z+3	; 0x03
     e02:	16 df       	rcall	.-468    	; 0xc30 <MENU_printMenu>
     e04:	ca cf       	rjmp	.-108    	; 0xd9a <MENU_waitForInput>
     e06:	08 95       	ret

00000e08 <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
     e08:	26 2f       	mov	r18, r22
     e0a:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
     e0c:	75 95       	asr	r23
     e0e:	67 95       	ror	r22
     e10:	75 95       	asr	r23
     e12:	67 95       	ror	r22
     e14:	75 95       	asr	r23
     e16:	67 95       	ror	r22
     e18:	75 95       	asr	r23
     e1a:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
     e1c:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
     e1e:	80 55       	subi	r24, 0x50	; 80
     e20:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
     e22:	e0 91 16 01 	lds	r30, 0x0116
     e26:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e2a:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
     e2c:	e0 91 16 01 	lds	r30, 0x0116
     e30:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e34:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
     e36:	e0 91 16 01 	lds	r30, 0x0116
     e3a:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e3e:	60 83       	st	Z, r22
     e40:	08 95       	ret

00000e42 <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
     e42:	1f 93       	push	r17
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	c1 e0       	ldi	r28, 0x01	; 1
     e4a:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
     e50:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	d8 df       	rcall	.-80     	; 0xe08 <OLED_goto>
     e58:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
     e5a:	e0 91 14 01 	lds	r30, 0x0114
		{
			OLED_writeByteToOLED(oled_data, 0x00);
     e5e:	f0 91 15 01 	lds	r31, 0x0115
     e62:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e64:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
     e66:	80 38       	cpi	r24, 0x80	; 128
     e68:	c1 f7       	brne	.-16     	; 0xe5a <OLED_clear+0x18>
     e6a:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
     e6c:	9d 2f       	mov	r25, r29
     e6e:	21 96       	adiw	r28, 0x01	; 1
     e70:	c9 30       	cpi	r28, 0x09	; 9
     e72:	d1 05       	cpc	r29, r1
     e74:	71 f7       	brne	.-36     	; 0xe52 <OLED_clear+0x10>
     e76:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	08 95       	ret

00000e7e <OLED_printCharacter>:
     e7e:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	22 0f       	add	r18, r18
     e86:	33 1f       	adc	r19, r19
     e88:	22 0f       	add	r18, r18
     e8a:	33 1f       	adc	r19, r19
     e8c:	22 0f       	add	r18, r18
     e8e:	33 1f       	adc	r19, r19
     e90:	80 e0       	ldi	r24, 0x00	; 0
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	20 59       	subi	r18, 0x90	; 144
     e96:	3f 4f       	sbci	r19, 0xFF	; 255
     e98:	f9 01       	movw	r30, r18
     e9a:	e8 0f       	add	r30, r24
     e9c:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
     e9e:	e4 91       	lpm	r30, Z
     ea0:	a0 91 14 01 	lds	r26, 0x0114
     ea4:	b0 91 15 01 	lds	r27, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ea8:	ec 93       	st	X, r30
     eaa:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
     eac:	88 30       	cpi	r24, 0x08	; 8
     eae:	91 05       	cpc	r25, r1
     eb0:	99 f7       	brne	.-26     	; 0xe98 <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
     eb2:	08 95       	ret

00000eb4 <OLED_init>:
//------------------------------------------------------------------------------
// Default initialization routine of the OLED display.

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
     eb4:	e0 91 16 01 	lds	r30, 0x0116
     eb8:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ebc:	8e ea       	ldi	r24, 0xAE	; 174
     ebe:	80 83       	st	Z, r24
// Default initialization routine of the OLED display.

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
     ec0:	e0 91 16 01 	lds	r30, 0x0116
     ec4:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ec8:	81 ea       	ldi	r24, 0xA1	; 161
     eca:	80 83       	st	Z, r24

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
     ecc:	e0 91 16 01 	lds	r30, 0x0116
     ed0:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ed4:	8a ed       	ldi	r24, 0xDA	; 218
     ed6:	80 83       	st	Z, r24
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
     ed8:	e0 91 16 01 	lds	r30, 0x0116
     edc:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ee0:	82 e1       	ldi	r24, 0x12	; 18
     ee2:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
     ee4:	e0 91 16 01 	lds	r30, 0x0116
     ee8:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     eec:	88 ec       	ldi	r24, 0xC8	; 200
     eee:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
     ef0:	e0 91 16 01 	lds	r30, 0x0116
     ef4:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ef8:	88 ea       	ldi	r24, 0xA8	; 168
     efa:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
     efc:	e0 91 16 01 	lds	r30, 0x0116
     f00:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f04:	8f e3       	ldi	r24, 0x3F	; 63
     f06:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
     f08:	e0 91 16 01 	lds	r30, 0x0116
     f0c:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f10:	85 ed       	ldi	r24, 0xD5	; 213
     f12:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
     f14:	e0 91 16 01 	lds	r30, 0x0116
     f18:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f1c:	80 e8       	ldi	r24, 0x80	; 128
     f1e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
     f20:	e0 91 16 01 	lds	r30, 0x0116
     f24:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f28:	81 e8       	ldi	r24, 0x81	; 129
     f2a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
     f2c:	e0 91 16 01 	lds	r30, 0x0116
     f30:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f34:	80 e5       	ldi	r24, 0x50	; 80
     f36:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
     f38:	e0 91 16 01 	lds	r30, 0x0116
     f3c:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f40:	89 ed       	ldi	r24, 0xD9	; 217
     f42:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
     f44:	e0 91 16 01 	lds	r30, 0x0116
     f48:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f4c:	81 e2       	ldi	r24, 0x21	; 33
     f4e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
     f50:	e0 91 16 01 	lds	r30, 0x0116
     f54:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f58:	80 e2       	ldi	r24, 0x20	; 32
     f5a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
     f5c:	e0 91 16 01 	lds	r30, 0x0116
     f60:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f64:	82 e0       	ldi	r24, 0x02	; 2
     f66:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
     f68:	e0 91 16 01 	lds	r30, 0x0116
     f6c:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f70:	8b ed       	ldi	r24, 0xDB	; 219
     f72:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
     f74:	e0 91 16 01 	lds	r30, 0x0116
     f78:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f7c:	80 e3       	ldi	r24, 0x30	; 48
     f7e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
     f80:	e0 91 16 01 	lds	r30, 0x0116
     f84:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f88:	8d ea       	ldi	r24, 0xAD	; 173
     f8a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
     f8c:	e0 91 16 01 	lds	r30, 0x0116
     f90:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f94:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
     f96:	e0 91 16 01 	lds	r30, 0x0116
     f9a:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f9e:	84 ea       	ldi	r24, 0xA4	; 164
     fa0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
     fa2:	e0 91 16 01 	lds	r30, 0x0116
     fa6:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     faa:	86 ea       	ldi	r24, 0xA6	; 166
     fac:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
     fae:	e0 91 16 01 	lds	r30, 0x0116
     fb2:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     fb6:	8f ea       	ldi	r24, 0xAF	; 175
     fb8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
     fba:	43 df       	rcall	.-378    	; 0xe42 <OLED_clear>
     fbc:	67 e7       	ldi	r22, 0x77	; 119
	OLED_goto(7, 119);
     fbe:	70 e0       	ldi	r23, 0x00	; 0
     fc0:	87 e0       	ldi	r24, 0x07	; 7
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	21 df       	rcall	.-446    	; 0xe08 <OLED_goto>
     fc6:	8a e2       	ldi	r24, 0x2A	; 42
     fc8:	5a cf       	rjmp	.-332    	; 0xe7e <OLED_printCharacter>
	OLED_printCharacter('*');
     fca:	08 95       	ret

00000fcc <OLED_printString>:
     fcc:	1f 93       	push	r17
     fce:	cf 93       	push	r28
     fd0:	df 93       	push	r29

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
     fd2:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
     fd4:	10 e0       	ldi	r17, 0x00	; 0
     fd6:	06 c0       	rjmp	.+12     	; 0xfe4 <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
     fd8:	fe 01       	movw	r30, r28
     fda:	e8 0f       	add	r30, r24
     fdc:	f9 1f       	adc	r31, r25
     fde:	80 81       	ld	r24, Z
     fe0:	4e df       	rcall	.-356    	; 0xe7e <OLED_printCharacter>
     fe2:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
     fe4:	81 2f       	mov	r24, r17
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	fe 01       	movw	r30, r28
     fea:	01 90       	ld	r0, Z+
     fec:	00 20       	and	r0, r0
     fee:	e9 f7       	brne	.-6      	; 0xfea <OLED_printString+0x1e>
     ff0:	31 97       	sbiw	r30, 0x01	; 1
     ff2:	ec 1b       	sub	r30, r28
     ff4:	fd 0b       	sbc	r31, r29
     ff6:	8e 17       	cp	r24, r30
     ff8:	9f 07       	cpc	r25, r31
     ffa:	70 f3       	brcs	.-36     	; 0xfd8 <OLED_printString+0xc>
     ffc:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	08 95       	ret

00001004 <OLED_printArrow>:
    1004:	e0 91 14 01 	lds	r30, 0x0114
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
    1008:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    100c:	88 e1       	ldi	r24, 0x18	; 24
    100e:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    1010:	e0 91 14 01 	lds	r30, 0x0114
    1014:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1018:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
    101a:	e0 91 14 01 	lds	r30, 0x0114
    101e:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1022:	9e e7       	ldi	r25, 0x7E	; 126
    1024:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
    1026:	e0 91 14 01 	lds	r30, 0x0114
    102a:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    102e:	9c e3       	ldi	r25, 0x3C	; 60
    1030:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    1032:	e0 91 14 01 	lds	r30, 0x0114
    1036:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    103a:	80 83       	st	Z, r24
    103c:	08 95       	ret

0000103e <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	c1 e0       	ldi	r28, 0x01	; 1
    1046:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1048:	80 e0       	ldi	r24, 0x00	; 0
    104a:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    104c:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	70 e0       	ldi	r23, 0x00	; 0
    1052:	da de       	rcall	.-588    	; 0xe08 <OLED_goto>
    1054:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1056:	e0 91 14 01 	lds	r30, 0x0114
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    105a:	f0 91 15 01 	lds	r31, 0x0115
    105e:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1060:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1062:	85 30       	cpi	r24, 0x05	; 5
    1064:	c1 f7       	brne	.-16     	; 0x1056 <OLED_clearArrow+0x18>
    1066:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1068:	9d 2f       	mov	r25, r29
    106a:	21 96       	adiw	r28, 0x01	; 1
    106c:	c9 30       	cpi	r28, 0x09	; 9
    106e:	d1 05       	cpc	r29, r1
    1070:	71 f7       	brne	.-36     	; 0x104e <OLED_clearArrow+0x10>
    1072:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	08 95       	ret

0000107a <OLED_moveArrow>:
    107a:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    107c:	df 93       	push	r29
    107e:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
    1080:	de df       	rcall	.-68     	; 0x103e <OLED_clearArrow>
    1082:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
    1084:	70 e0       	ldi	r23, 0x00	; 0
    1086:	ce 01       	movw	r24, r28
    1088:	bf de       	rcall	.-642    	; 0xe08 <OLED_goto>
    108a:	bc df       	rcall	.-136    	; 0x1004 <OLED_printArrow>
    108c:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
    108e:	cf 91       	pop	r28
    1090:	08 95       	ret

00001092 <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    1092:	10 92 06 03 	sts	0x0306, r1
	currentSliPosition.L_abs = 0;
    1096:	10 92 07 03 	sts	0x0307, r1
	currentSliPosition.R_per = 0;
    109a:	10 92 08 03 	sts	0x0308, r1
	currentSliPosition.L_per = 0;
    109e:	10 92 09 03 	sts	0x0309, r1
    10a2:	08 95       	ret

000010a4 <SLI_getPosition>:
}

//
SLI_position_t SLI_getPosition()
{
	return currentSliPosition;
    10a4:	60 91 06 03 	lds	r22, 0x0306
    10a8:	70 91 07 03 	lds	r23, 0x0307
    10ac:	80 91 08 03 	lds	r24, 0x0308
    10b0:	90 91 09 03 	lds	r25, 0x0309
    10b4:	08 95       	ret

000010b6 <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    10b6:	5d 9b       	sbis	0x0b, 5	; 11
    10b8:	fe cf       	rjmp	.-4      	; 0x10b6 <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    10ba:	8c b9       	out	0x0c, r24	; 12
    10bc:	08 95       	ret

000010be <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    10be:	5f 9b       	sbis	0x0b, 7	; 11
    10c0:	fe cf       	rjmp	.-4      	; 0x10be <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    10c2:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
    10c4:	08 95       	ret

000010c6 <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    10c6:	ef 92       	push	r14
    10c8:	ff 92       	push	r15
    10ca:	0f 93       	push	r16
    10cc:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    10ce:	bb 27       	eor	r27, r27
    10d0:	a1 2f       	mov	r26, r17
    10d2:	90 2f       	mov	r25, r16
    10d4:	8f 2d       	mov	r24, r15
    10d6:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    10d8:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    10da:	88 e1       	ldi	r24, 0x18	; 24
    10dc:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    10de:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    10e0:	8e e8       	ldi	r24, 0x8E	; 142
    10e2:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    10e4:	6f e5       	ldi	r22, 0x5F	; 95
    10e6:	78 e0       	ldi	r23, 0x08	; 8
    10e8:	8b e5       	ldi	r24, 0x5B	; 91
    10ea:	98 e0       	ldi	r25, 0x08	; 8
    10ec:	d0 d1       	rcall	.+928    	; 0x148e <fdevopen>
    10ee:	1f 91       	pop	r17
    10f0:	0f 91       	pop	r16
    10f2:	ff 90       	pop	r15
    10f4:	ef 90       	pop	r14
    10f6:	08 95       	ret

000010f8 <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    10f8:	9b 01       	movw	r18, r22
	
	switch(channel){
    10fa:	82 30       	cpi	r24, 0x02	; 2
    10fc:	69 f0       	breq	.+26     	; 0x1118 <ADC_request+0x20>
    10fe:	18 f4       	brcc	.+6      	; 0x1106 <ADC_request+0xe>
    1100:	81 30       	cpi	r24, 0x01	; 1
    1102:	31 f0       	breq	.+12     	; 0x1110 <ADC_request+0x18>
    1104:	15 c0       	rjmp	.+42     	; 0x1130 <ADC_request+0x38>
    1106:	83 30       	cpi	r24, 0x03	; 3
    1108:	59 f0       	breq	.+22     	; 0x1120 <ADC_request+0x28>
    110a:	84 30       	cpi	r24, 0x04	; 4
    110c:	69 f0       	breq	.+26     	; 0x1128 <ADC_request+0x30>
    110e:	10 c0       	rjmp	.+32     	; 0x1130 <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    1110:	64 e0       	ldi	r22, 0x04	; 4
    1112:	c9 01       	movw	r24, r18
    1114:	6d ca       	rjmp	.-2854   	; 0x5f0 <saveToAddress>
    1116:	08 95       	ret
			break;
    1118:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    111a:	c9 01       	movw	r24, r18
    111c:	69 ca       	rjmp	.-2862   	; 0x5f0 <saveToAddress>
    111e:	08 95       	ret
    1120:	66 e0       	ldi	r22, 0x06	; 6
			break;
    1122:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    1124:	65 ca       	rjmp	.-2870   	; 0x5f0 <saveToAddress>
    1126:	08 95       	ret
    1128:	67 e0       	ldi	r22, 0x07	; 7
    112a:	c9 01       	movw	r24, r18
			break;
    112c:	61 ca       	rjmp	.-2878   	; 0x5f0 <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    112e:	08 95       	ret
    1130:	88 ed       	ldi	r24, 0xD8	; 216
    1132:	92 e0       	ldi	r25, 0x02	; 2
    1134:	9f 93       	push	r25
			break;
    1136:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    1138:	f4 d1       	rcall	.+1000   	; 0x1522 <printf>
    113a:	0f 90       	pop	r0
    113c:	0f 90       	pop	r0
    113e:	08 95       	ret

00001140 <ADC_read>:
    1140:	54 ca       	rjmp	.-2904   	; 0x5ea <readFromAddress>
    1142:	08 95       	ret

00001144 <__divmodhi4>:
			break;
    1144:	97 fb       	bst	r25, 7
    1146:	07 2e       	mov	r0, r23
    1148:	16 f4       	brtc	.+4      	; 0x114e <__divmodhi4+0xa>
    114a:	00 94       	com	r0
    114c:	06 d0       	rcall	.+12     	; 0x115a <__divmodhi4_neg1>
    114e:	77 fd       	sbrc	r23, 7
    1150:	08 d0       	rcall	.+16     	; 0x1162 <__divmodhi4_neg2>
    1152:	0b d0       	rcall	.+22     	; 0x116a <__udivmodhi4>
    1154:	07 fc       	sbrc	r0, 7
    1156:	05 d0       	rcall	.+10     	; 0x1162 <__divmodhi4_neg2>
    1158:	3e f4       	brtc	.+14     	; 0x1168 <__divmodhi4_exit>

0000115a <__divmodhi4_neg1>:
    115a:	90 95       	com	r25
    115c:	81 95       	neg	r24
    115e:	9f 4f       	sbci	r25, 0xFF	; 255
    1160:	08 95       	ret

00001162 <__divmodhi4_neg2>:
    1162:	70 95       	com	r23
    1164:	61 95       	neg	r22
    1166:	7f 4f       	sbci	r23, 0xFF	; 255

00001168 <__divmodhi4_exit>:
    1168:	08 95       	ret

0000116a <__udivmodhi4>:
    116a:	aa 1b       	sub	r26, r26
    116c:	bb 1b       	sub	r27, r27
    116e:	51 e1       	ldi	r21, 0x11	; 17
    1170:	07 c0       	rjmp	.+14     	; 0x1180 <__udivmodhi4_ep>

00001172 <__udivmodhi4_loop>:
    1172:	aa 1f       	adc	r26, r26
    1174:	bb 1f       	adc	r27, r27
    1176:	a6 17       	cp	r26, r22
    1178:	b7 07       	cpc	r27, r23
    117a:	10 f0       	brcs	.+4      	; 0x1180 <__udivmodhi4_ep>
    117c:	a6 1b       	sub	r26, r22
    117e:	b7 0b       	sbc	r27, r23

00001180 <__udivmodhi4_ep>:
    1180:	88 1f       	adc	r24, r24
    1182:	99 1f       	adc	r25, r25
    1184:	5a 95       	dec	r21
    1186:	a9 f7       	brne	.-22     	; 0x1172 <__udivmodhi4_loop>
    1188:	80 95       	com	r24
    118a:	90 95       	com	r25
    118c:	bc 01       	movw	r22, r24
    118e:	cd 01       	movw	r24, r26
    1190:	08 95       	ret

00001192 <malloc>:
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	82 30       	cpi	r24, 0x02	; 2
    1198:	91 05       	cpc	r25, r1
    119a:	10 f4       	brcc	.+4      	; 0x11a0 <malloc+0xe>
    119c:	82 e0       	ldi	r24, 0x02	; 2
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	e0 91 0c 03 	lds	r30, 0x030C
    11a4:	f0 91 0d 03 	lds	r31, 0x030D
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	a0 e0       	ldi	r26, 0x00	; 0
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	30 97       	sbiw	r30, 0x00	; 0
    11b2:	39 f1       	breq	.+78     	; 0x1202 <malloc+0x70>
    11b4:	40 81       	ld	r20, Z
    11b6:	51 81       	ldd	r21, Z+1	; 0x01
    11b8:	48 17       	cp	r20, r24
    11ba:	59 07       	cpc	r21, r25
    11bc:	b8 f0       	brcs	.+46     	; 0x11ec <malloc+0x5a>
    11be:	48 17       	cp	r20, r24
    11c0:	59 07       	cpc	r21, r25
    11c2:	71 f4       	brne	.+28     	; 0x11e0 <malloc+0x4e>
    11c4:	82 81       	ldd	r24, Z+2	; 0x02
    11c6:	93 81       	ldd	r25, Z+3	; 0x03
    11c8:	10 97       	sbiw	r26, 0x00	; 0
    11ca:	29 f0       	breq	.+10     	; 0x11d6 <malloc+0x44>
    11cc:	13 96       	adiw	r26, 0x03	; 3
    11ce:	9c 93       	st	X, r25
    11d0:	8e 93       	st	-X, r24
    11d2:	12 97       	sbiw	r26, 0x02	; 2
    11d4:	2c c0       	rjmp	.+88     	; 0x122e <malloc+0x9c>
    11d6:	90 93 0d 03 	sts	0x030D, r25
    11da:	80 93 0c 03 	sts	0x030C, r24
    11de:	27 c0       	rjmp	.+78     	; 0x122e <malloc+0x9c>
    11e0:	21 15       	cp	r18, r1
    11e2:	31 05       	cpc	r19, r1
    11e4:	31 f0       	breq	.+12     	; 0x11f2 <malloc+0x60>
    11e6:	42 17       	cp	r20, r18
    11e8:	53 07       	cpc	r21, r19
    11ea:	18 f0       	brcs	.+6      	; 0x11f2 <malloc+0x60>
    11ec:	a9 01       	movw	r20, r18
    11ee:	db 01       	movw	r26, r22
    11f0:	01 c0       	rjmp	.+2      	; 0x11f4 <malloc+0x62>
    11f2:	ef 01       	movw	r28, r30
    11f4:	9a 01       	movw	r18, r20
    11f6:	bd 01       	movw	r22, r26
    11f8:	df 01       	movw	r26, r30
    11fa:	02 80       	ldd	r0, Z+2	; 0x02
    11fc:	f3 81       	ldd	r31, Z+3	; 0x03
    11fe:	e0 2d       	mov	r30, r0
    1200:	d7 cf       	rjmp	.-82     	; 0x11b0 <malloc+0x1e>
    1202:	21 15       	cp	r18, r1
    1204:	31 05       	cpc	r19, r1
    1206:	f9 f0       	breq	.+62     	; 0x1246 <malloc+0xb4>
    1208:	28 1b       	sub	r18, r24
    120a:	39 0b       	sbc	r19, r25
    120c:	24 30       	cpi	r18, 0x04	; 4
    120e:	31 05       	cpc	r19, r1
    1210:	80 f4       	brcc	.+32     	; 0x1232 <malloc+0xa0>
    1212:	8a 81       	ldd	r24, Y+2	; 0x02
    1214:	9b 81       	ldd	r25, Y+3	; 0x03
    1216:	61 15       	cp	r22, r1
    1218:	71 05       	cpc	r23, r1
    121a:	21 f0       	breq	.+8      	; 0x1224 <malloc+0x92>
    121c:	fb 01       	movw	r30, r22
    121e:	93 83       	std	Z+3, r25	; 0x03
    1220:	82 83       	std	Z+2, r24	; 0x02
    1222:	04 c0       	rjmp	.+8      	; 0x122c <malloc+0x9a>
    1224:	90 93 0d 03 	sts	0x030D, r25
    1228:	80 93 0c 03 	sts	0x030C, r24
    122c:	fe 01       	movw	r30, r28
    122e:	32 96       	adiw	r30, 0x02	; 2
    1230:	44 c0       	rjmp	.+136    	; 0x12ba <malloc+0x128>
    1232:	fe 01       	movw	r30, r28
    1234:	e2 0f       	add	r30, r18
    1236:	f3 1f       	adc	r31, r19
    1238:	81 93       	st	Z+, r24
    123a:	91 93       	st	Z+, r25
    123c:	22 50       	subi	r18, 0x02	; 2
    123e:	31 09       	sbc	r19, r1
    1240:	39 83       	std	Y+1, r19	; 0x01
    1242:	28 83       	st	Y, r18
    1244:	3a c0       	rjmp	.+116    	; 0x12ba <malloc+0x128>
    1246:	20 91 0a 03 	lds	r18, 0x030A
    124a:	30 91 0b 03 	lds	r19, 0x030B
    124e:	23 2b       	or	r18, r19
    1250:	41 f4       	brne	.+16     	; 0x1262 <malloc+0xd0>
    1252:	20 91 02 01 	lds	r18, 0x0102
    1256:	30 91 03 01 	lds	r19, 0x0103
    125a:	30 93 0b 03 	sts	0x030B, r19
    125e:	20 93 0a 03 	sts	0x030A, r18
    1262:	20 91 00 01 	lds	r18, 0x0100
    1266:	30 91 01 01 	lds	r19, 0x0101
    126a:	21 15       	cp	r18, r1
    126c:	31 05       	cpc	r19, r1
    126e:	41 f4       	brne	.+16     	; 0x1280 <malloc+0xee>
    1270:	2d b7       	in	r18, 0x3d	; 61
    1272:	3e b7       	in	r19, 0x3e	; 62
    1274:	40 91 04 01 	lds	r20, 0x0104
    1278:	50 91 05 01 	lds	r21, 0x0105
    127c:	24 1b       	sub	r18, r20
    127e:	35 0b       	sbc	r19, r21
    1280:	e0 91 0a 03 	lds	r30, 0x030A
    1284:	f0 91 0b 03 	lds	r31, 0x030B
    1288:	e2 17       	cp	r30, r18
    128a:	f3 07       	cpc	r31, r19
    128c:	a0 f4       	brcc	.+40     	; 0x12b6 <malloc+0x124>
    128e:	2e 1b       	sub	r18, r30
    1290:	3f 0b       	sbc	r19, r31
    1292:	28 17       	cp	r18, r24
    1294:	39 07       	cpc	r19, r25
    1296:	78 f0       	brcs	.+30     	; 0x12b6 <malloc+0x124>
    1298:	ac 01       	movw	r20, r24
    129a:	4e 5f       	subi	r20, 0xFE	; 254
    129c:	5f 4f       	sbci	r21, 0xFF	; 255
    129e:	24 17       	cp	r18, r20
    12a0:	35 07       	cpc	r19, r21
    12a2:	48 f0       	brcs	.+18     	; 0x12b6 <malloc+0x124>
    12a4:	4e 0f       	add	r20, r30
    12a6:	5f 1f       	adc	r21, r31
    12a8:	50 93 0b 03 	sts	0x030B, r21
    12ac:	40 93 0a 03 	sts	0x030A, r20
    12b0:	81 93       	st	Z+, r24
    12b2:	91 93       	st	Z+, r25
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <malloc+0x128>
    12b6:	e0 e0       	ldi	r30, 0x00	; 0
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	cf 01       	movw	r24, r30
    12bc:	df 91       	pop	r29
    12be:	cf 91       	pop	r28
    12c0:	08 95       	ret

000012c2 <free>:
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	09 f4       	brne	.+2      	; 0x12cc <free+0xa>
    12ca:	87 c0       	rjmp	.+270    	; 0x13da <free+0x118>
    12cc:	fc 01       	movw	r30, r24
    12ce:	32 97       	sbiw	r30, 0x02	; 2
    12d0:	13 82       	std	Z+3, r1	; 0x03
    12d2:	12 82       	std	Z+2, r1	; 0x02
    12d4:	c0 91 0c 03 	lds	r28, 0x030C
    12d8:	d0 91 0d 03 	lds	r29, 0x030D
    12dc:	20 97       	sbiw	r28, 0x00	; 0
    12de:	81 f4       	brne	.+32     	; 0x1300 <free+0x3e>
    12e0:	20 81       	ld	r18, Z
    12e2:	31 81       	ldd	r19, Z+1	; 0x01
    12e4:	28 0f       	add	r18, r24
    12e6:	39 1f       	adc	r19, r25
    12e8:	80 91 0a 03 	lds	r24, 0x030A
    12ec:	90 91 0b 03 	lds	r25, 0x030B
    12f0:	82 17       	cp	r24, r18
    12f2:	93 07       	cpc	r25, r19
    12f4:	79 f5       	brne	.+94     	; 0x1354 <free+0x92>
    12f6:	f0 93 0b 03 	sts	0x030B, r31
    12fa:	e0 93 0a 03 	sts	0x030A, r30
    12fe:	6d c0       	rjmp	.+218    	; 0x13da <free+0x118>
    1300:	de 01       	movw	r26, r28
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	ae 17       	cp	r26, r30
    1308:	bf 07       	cpc	r27, r31
    130a:	50 f4       	brcc	.+20     	; 0x1320 <free+0x5e>
    130c:	12 96       	adiw	r26, 0x02	; 2
    130e:	4d 91       	ld	r20, X+
    1310:	5c 91       	ld	r21, X
    1312:	13 97       	sbiw	r26, 0x03	; 3
    1314:	9d 01       	movw	r18, r26
    1316:	41 15       	cp	r20, r1
    1318:	51 05       	cpc	r21, r1
    131a:	09 f1       	breq	.+66     	; 0x135e <free+0x9c>
    131c:	da 01       	movw	r26, r20
    131e:	f3 cf       	rjmp	.-26     	; 0x1306 <free+0x44>
    1320:	b3 83       	std	Z+3, r27	; 0x03
    1322:	a2 83       	std	Z+2, r26	; 0x02
    1324:	40 81       	ld	r20, Z
    1326:	51 81       	ldd	r21, Z+1	; 0x01
    1328:	84 0f       	add	r24, r20
    132a:	95 1f       	adc	r25, r21
    132c:	8a 17       	cp	r24, r26
    132e:	9b 07       	cpc	r25, r27
    1330:	71 f4       	brne	.+28     	; 0x134e <free+0x8c>
    1332:	8d 91       	ld	r24, X+
    1334:	9c 91       	ld	r25, X
    1336:	11 97       	sbiw	r26, 0x01	; 1
    1338:	84 0f       	add	r24, r20
    133a:	95 1f       	adc	r25, r21
    133c:	02 96       	adiw	r24, 0x02	; 2
    133e:	91 83       	std	Z+1, r25	; 0x01
    1340:	80 83       	st	Z, r24
    1342:	12 96       	adiw	r26, 0x02	; 2
    1344:	8d 91       	ld	r24, X+
    1346:	9c 91       	ld	r25, X
    1348:	13 97       	sbiw	r26, 0x03	; 3
    134a:	93 83       	std	Z+3, r25	; 0x03
    134c:	82 83       	std	Z+2, r24	; 0x02
    134e:	21 15       	cp	r18, r1
    1350:	31 05       	cpc	r19, r1
    1352:	29 f4       	brne	.+10     	; 0x135e <free+0x9c>
    1354:	f0 93 0d 03 	sts	0x030D, r31
    1358:	e0 93 0c 03 	sts	0x030C, r30
    135c:	3e c0       	rjmp	.+124    	; 0x13da <free+0x118>
    135e:	d9 01       	movw	r26, r18
    1360:	13 96       	adiw	r26, 0x03	; 3
    1362:	fc 93       	st	X, r31
    1364:	ee 93       	st	-X, r30
    1366:	12 97       	sbiw	r26, 0x02	; 2
    1368:	4d 91       	ld	r20, X+
    136a:	5d 91       	ld	r21, X+
    136c:	a4 0f       	add	r26, r20
    136e:	b5 1f       	adc	r27, r21
    1370:	ea 17       	cp	r30, r26
    1372:	fb 07       	cpc	r31, r27
    1374:	79 f4       	brne	.+30     	; 0x1394 <free+0xd2>
    1376:	80 81       	ld	r24, Z
    1378:	91 81       	ldd	r25, Z+1	; 0x01
    137a:	84 0f       	add	r24, r20
    137c:	95 1f       	adc	r25, r21
    137e:	02 96       	adiw	r24, 0x02	; 2
    1380:	d9 01       	movw	r26, r18
    1382:	11 96       	adiw	r26, 0x01	; 1
    1384:	9c 93       	st	X, r25
    1386:	8e 93       	st	-X, r24
    1388:	82 81       	ldd	r24, Z+2	; 0x02
    138a:	93 81       	ldd	r25, Z+3	; 0x03
    138c:	13 96       	adiw	r26, 0x03	; 3
    138e:	9c 93       	st	X, r25
    1390:	8e 93       	st	-X, r24
    1392:	12 97       	sbiw	r26, 0x02	; 2
    1394:	e0 e0       	ldi	r30, 0x00	; 0
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	8a 81       	ldd	r24, Y+2	; 0x02
    139a:	9b 81       	ldd	r25, Y+3	; 0x03
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	19 f0       	breq	.+6      	; 0x13a6 <free+0xe4>
    13a0:	fe 01       	movw	r30, r28
    13a2:	ec 01       	movw	r28, r24
    13a4:	f9 cf       	rjmp	.-14     	; 0x1398 <free+0xd6>
    13a6:	ce 01       	movw	r24, r28
    13a8:	02 96       	adiw	r24, 0x02	; 2
    13aa:	28 81       	ld	r18, Y
    13ac:	39 81       	ldd	r19, Y+1	; 0x01
    13ae:	82 0f       	add	r24, r18
    13b0:	93 1f       	adc	r25, r19
    13b2:	20 91 0a 03 	lds	r18, 0x030A
    13b6:	30 91 0b 03 	lds	r19, 0x030B
    13ba:	28 17       	cp	r18, r24
    13bc:	39 07       	cpc	r19, r25
    13be:	69 f4       	brne	.+26     	; 0x13da <free+0x118>
    13c0:	30 97       	sbiw	r30, 0x00	; 0
    13c2:	29 f4       	brne	.+10     	; 0x13ce <free+0x10c>
    13c4:	10 92 0d 03 	sts	0x030D, r1
    13c8:	10 92 0c 03 	sts	0x030C, r1
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <free+0x110>
    13ce:	13 82       	std	Z+3, r1	; 0x03
    13d0:	12 82       	std	Z+2, r1	; 0x02
    13d2:	d0 93 0b 03 	sts	0x030B, r29
    13d6:	c0 93 0a 03 	sts	0x030A, r28
    13da:	df 91       	pop	r29
    13dc:	cf 91       	pop	r28
    13de:	08 95       	ret

000013e0 <do_rand>:
    13e0:	8f 92       	push	r8
    13e2:	9f 92       	push	r9
    13e4:	af 92       	push	r10
    13e6:	bf 92       	push	r11
    13e8:	cf 92       	push	r12
    13ea:	df 92       	push	r13
    13ec:	ef 92       	push	r14
    13ee:	ff 92       	push	r15
    13f0:	cf 93       	push	r28
    13f2:	df 93       	push	r29
    13f4:	ec 01       	movw	r28, r24
    13f6:	68 81       	ld	r22, Y
    13f8:	79 81       	ldd	r23, Y+1	; 0x01
    13fa:	8a 81       	ldd	r24, Y+2	; 0x02
    13fc:	9b 81       	ldd	r25, Y+3	; 0x03
    13fe:	61 15       	cp	r22, r1
    1400:	71 05       	cpc	r23, r1
    1402:	81 05       	cpc	r24, r1
    1404:	91 05       	cpc	r25, r1
    1406:	21 f4       	brne	.+8      	; 0x1410 <do_rand+0x30>
    1408:	64 e2       	ldi	r22, 0x24	; 36
    140a:	79 ed       	ldi	r23, 0xD9	; 217
    140c:	8b e5       	ldi	r24, 0x5B	; 91
    140e:	97 e0       	ldi	r25, 0x07	; 7
    1410:	2d e1       	ldi	r18, 0x1D	; 29
    1412:	33 ef       	ldi	r19, 0xF3	; 243
    1414:	41 e0       	ldi	r20, 0x01	; 1
    1416:	50 e0       	ldi	r21, 0x00	; 0
    1418:	4c d3       	rcall	.+1688   	; 0x1ab2 <__divmodsi4>
    141a:	49 01       	movw	r8, r18
    141c:	5a 01       	movw	r10, r20
    141e:	9b 01       	movw	r18, r22
    1420:	ac 01       	movw	r20, r24
    1422:	a7 ea       	ldi	r26, 0xA7	; 167
    1424:	b1 e4       	ldi	r27, 0x41	; 65
    1426:	61 d3       	rcall	.+1730   	; 0x1aea <__muluhisi3>
    1428:	6b 01       	movw	r12, r22
    142a:	7c 01       	movw	r14, r24
    142c:	ac ee       	ldi	r26, 0xEC	; 236
    142e:	b4 ef       	ldi	r27, 0xF4	; 244
    1430:	a5 01       	movw	r20, r10
    1432:	94 01       	movw	r18, r8
    1434:	66 d3       	rcall	.+1740   	; 0x1b02 <__mulohisi3>
    1436:	c6 0e       	add	r12, r22
    1438:	d7 1e       	adc	r13, r23
    143a:	e8 1e       	adc	r14, r24
    143c:	f9 1e       	adc	r15, r25
    143e:	f7 fe       	sbrs	r15, 7
    1440:	06 c0       	rjmp	.+12     	; 0x144e <do_rand+0x6e>
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	c8 1a       	sub	r12, r24
    1446:	d1 08       	sbc	r13, r1
    1448:	e1 08       	sbc	r14, r1
    144a:	80 e8       	ldi	r24, 0x80	; 128
    144c:	f8 0a       	sbc	r15, r24
    144e:	c8 82       	st	Y, r12
    1450:	d9 82       	std	Y+1, r13	; 0x01
    1452:	ea 82       	std	Y+2, r14	; 0x02
    1454:	fb 82       	std	Y+3, r15	; 0x03
    1456:	c6 01       	movw	r24, r12
    1458:	9f 77       	andi	r25, 0x7F	; 127
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	ff 90       	pop	r15
    1460:	ef 90       	pop	r14
    1462:	df 90       	pop	r13
    1464:	cf 90       	pop	r12
    1466:	bf 90       	pop	r11
    1468:	af 90       	pop	r10
    146a:	9f 90       	pop	r9
    146c:	8f 90       	pop	r8
    146e:	08 95       	ret

00001470 <rand_r>:
    1470:	b7 cf       	rjmp	.-146    	; 0x13e0 <do_rand>

00001472 <rand>:
    1472:	86 e0       	ldi	r24, 0x06	; 6
    1474:	91 e0       	ldi	r25, 0x01	; 1
    1476:	b4 cf       	rjmp	.-152    	; 0x13e0 <do_rand>

00001478 <srand>:
    1478:	a0 e0       	ldi	r26, 0x00	; 0
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	80 93 06 01 	sts	0x0106, r24
    1480:	90 93 07 01 	sts	0x0107, r25
    1484:	a0 93 08 01 	sts	0x0108, r26
    1488:	b0 93 09 01 	sts	0x0109, r27
    148c:	08 95       	ret

0000148e <fdevopen>:
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
    1496:	ec 01       	movw	r28, r24
    1498:	8b 01       	movw	r16, r22
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	31 f4       	brne	.+12     	; 0x14aa <fdevopen+0x1c>
    149e:	61 15       	cp	r22, r1
    14a0:	71 05       	cpc	r23, r1
    14a2:	19 f4       	brne	.+6      	; 0x14aa <fdevopen+0x1c>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	37 c0       	rjmp	.+110    	; 0x1518 <fdevopen+0x8a>
    14aa:	6e e0       	ldi	r22, 0x0E	; 14
    14ac:	70 e0       	ldi	r23, 0x00	; 0
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	38 d2       	rcall	.+1136   	; 0x1924 <calloc>
    14b4:	fc 01       	movw	r30, r24
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	a9 f3       	breq	.-22     	; 0x14a4 <fdevopen+0x16>
    14ba:	80 e8       	ldi	r24, 0x80	; 128
    14bc:	83 83       	std	Z+3, r24	; 0x03
    14be:	01 15       	cp	r16, r1
    14c0:	11 05       	cpc	r17, r1
    14c2:	71 f0       	breq	.+28     	; 0x14e0 <fdevopen+0x52>
    14c4:	13 87       	std	Z+11, r17	; 0x0b
    14c6:	02 87       	std	Z+10, r16	; 0x0a
    14c8:	81 e8       	ldi	r24, 0x81	; 129
    14ca:	83 83       	std	Z+3, r24	; 0x03
    14cc:	80 91 0e 03 	lds	r24, 0x030E
    14d0:	90 91 0f 03 	lds	r25, 0x030F
    14d4:	89 2b       	or	r24, r25
    14d6:	21 f4       	brne	.+8      	; 0x14e0 <fdevopen+0x52>
    14d8:	f0 93 0f 03 	sts	0x030F, r31
    14dc:	e0 93 0e 03 	sts	0x030E, r30
    14e0:	20 97       	sbiw	r28, 0x00	; 0
    14e2:	c9 f0       	breq	.+50     	; 0x1516 <fdevopen+0x88>
    14e4:	d1 87       	std	Z+9, r29	; 0x09
    14e6:	c0 87       	std	Z+8, r28	; 0x08
    14e8:	83 81       	ldd	r24, Z+3	; 0x03
    14ea:	82 60       	ori	r24, 0x02	; 2
    14ec:	83 83       	std	Z+3, r24	; 0x03
    14ee:	80 91 10 03 	lds	r24, 0x0310
    14f2:	90 91 11 03 	lds	r25, 0x0311
    14f6:	89 2b       	or	r24, r25
    14f8:	71 f4       	brne	.+28     	; 0x1516 <fdevopen+0x88>
    14fa:	f0 93 11 03 	sts	0x0311, r31
    14fe:	e0 93 10 03 	sts	0x0310, r30
    1502:	80 91 12 03 	lds	r24, 0x0312
    1506:	90 91 13 03 	lds	r25, 0x0313
    150a:	89 2b       	or	r24, r25
    150c:	21 f4       	brne	.+8      	; 0x1516 <fdevopen+0x88>
    150e:	f0 93 13 03 	sts	0x0313, r31
    1512:	e0 93 12 03 	sts	0x0312, r30
    1516:	cf 01       	movw	r24, r30
    1518:	df 91       	pop	r29
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	08 95       	ret

00001522 <printf>:
    1522:	a0 e0       	ldi	r26, 0x00	; 0
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e6 e9       	ldi	r30, 0x96	; 150
    1528:	fa e0       	ldi	r31, 0x0A	; 10
    152a:	ff c2       	rjmp	.+1534   	; 0x1b2a <__prologue_saves__+0x20>
    152c:	fe 01       	movw	r30, r28
    152e:	35 96       	adiw	r30, 0x05	; 5
    1530:	61 91       	ld	r22, Z+
    1532:	71 91       	ld	r23, Z+
    1534:	af 01       	movw	r20, r30
    1536:	80 91 10 03 	lds	r24, 0x0310
    153a:	90 91 11 03 	lds	r25, 0x0311
    153e:	2f d0       	rcall	.+94     	; 0x159e <vfprintf>
    1540:	e2 e0       	ldi	r30, 0x02	; 2
    1542:	0f c3       	rjmp	.+1566   	; 0x1b62 <__epilogue_restores__+0x20>

00001544 <puts>:
    1544:	0f 93       	push	r16
    1546:	1f 93       	push	r17
    1548:	cf 93       	push	r28
    154a:	df 93       	push	r29
    154c:	e0 91 10 03 	lds	r30, 0x0310
    1550:	f0 91 11 03 	lds	r31, 0x0311
    1554:	23 81       	ldd	r18, Z+3	; 0x03
    1556:	21 ff       	sbrs	r18, 1
    1558:	1b c0       	rjmp	.+54     	; 0x1590 <puts+0x4c>
    155a:	ec 01       	movw	r28, r24
    155c:	00 e0       	ldi	r16, 0x00	; 0
    155e:	10 e0       	ldi	r17, 0x00	; 0
    1560:	89 91       	ld	r24, Y+
    1562:	60 91 10 03 	lds	r22, 0x0310
    1566:	70 91 11 03 	lds	r23, 0x0311
    156a:	db 01       	movw	r26, r22
    156c:	18 96       	adiw	r26, 0x08	; 8
    156e:	ed 91       	ld	r30, X+
    1570:	fc 91       	ld	r31, X
    1572:	19 97       	sbiw	r26, 0x09	; 9
    1574:	88 23       	and	r24, r24
    1576:	31 f0       	breq	.+12     	; 0x1584 <puts+0x40>
    1578:	09 95       	icall
    157a:	89 2b       	or	r24, r25
    157c:	89 f3       	breq	.-30     	; 0x1560 <puts+0x1c>
    157e:	0f ef       	ldi	r16, 0xFF	; 255
    1580:	1f ef       	ldi	r17, 0xFF	; 255
    1582:	ee cf       	rjmp	.-36     	; 0x1560 <puts+0x1c>
    1584:	8a e0       	ldi	r24, 0x0A	; 10
    1586:	09 95       	icall
    1588:	89 2b       	or	r24, r25
    158a:	11 f4       	brne	.+4      	; 0x1590 <puts+0x4c>
    158c:	c8 01       	movw	r24, r16
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <puts+0x50>
    1590:	8f ef       	ldi	r24, 0xFF	; 255
    1592:	9f ef       	ldi	r25, 0xFF	; 255
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	1f 91       	pop	r17
    159a:	0f 91       	pop	r16
    159c:	08 95       	ret

0000159e <vfprintf>:
    159e:	ac e0       	ldi	r26, 0x0C	; 12
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e4 ed       	ldi	r30, 0xD4	; 212
    15a4:	fa e0       	ldi	r31, 0x0A	; 10
    15a6:	b1 c2       	rjmp	.+1378   	; 0x1b0a <__prologue_saves__>
    15a8:	7c 01       	movw	r14, r24
    15aa:	6b 01       	movw	r12, r22
    15ac:	8a 01       	movw	r16, r20
    15ae:	fc 01       	movw	r30, r24
    15b0:	17 82       	std	Z+7, r1	; 0x07
    15b2:	16 82       	std	Z+6, r1	; 0x06
    15b4:	83 81       	ldd	r24, Z+3	; 0x03
    15b6:	81 ff       	sbrs	r24, 1
    15b8:	b0 c1       	rjmp	.+864    	; 0x191a <vfprintf+0x37c>
    15ba:	ce 01       	movw	r24, r28
    15bc:	01 96       	adiw	r24, 0x01	; 1
    15be:	4c 01       	movw	r8, r24
    15c0:	f7 01       	movw	r30, r14
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	f6 01       	movw	r30, r12
    15c6:	93 fd       	sbrc	r25, 3
    15c8:	85 91       	lpm	r24, Z+
    15ca:	93 ff       	sbrs	r25, 3
    15cc:	81 91       	ld	r24, Z+
    15ce:	6f 01       	movw	r12, r30
    15d0:	88 23       	and	r24, r24
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <vfprintf+0x38>
    15d4:	9e c1       	rjmp	.+828    	; 0x1912 <vfprintf+0x374>
    15d6:	85 32       	cpi	r24, 0x25	; 37
    15d8:	39 f4       	brne	.+14     	; 0x15e8 <vfprintf+0x4a>
    15da:	93 fd       	sbrc	r25, 3
    15dc:	85 91       	lpm	r24, Z+
    15de:	93 ff       	sbrs	r25, 3
    15e0:	81 91       	ld	r24, Z+
    15e2:	6f 01       	movw	r12, r30
    15e4:	85 32       	cpi	r24, 0x25	; 37
    15e6:	21 f4       	brne	.+8      	; 0x15f0 <vfprintf+0x52>
    15e8:	b7 01       	movw	r22, r14
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	d2 d1       	rcall	.+932    	; 0x1992 <fputc>
    15ee:	e8 cf       	rjmp	.-48     	; 0x15c0 <vfprintf+0x22>
    15f0:	51 2c       	mov	r5, r1
    15f2:	31 2c       	mov	r3, r1
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	20 32       	cpi	r18, 0x20	; 32
    15f8:	a0 f4       	brcc	.+40     	; 0x1622 <vfprintf+0x84>
    15fa:	8b 32       	cpi	r24, 0x2B	; 43
    15fc:	69 f0       	breq	.+26     	; 0x1618 <vfprintf+0x7a>
    15fe:	30 f4       	brcc	.+12     	; 0x160c <vfprintf+0x6e>
    1600:	80 32       	cpi	r24, 0x20	; 32
    1602:	59 f0       	breq	.+22     	; 0x161a <vfprintf+0x7c>
    1604:	83 32       	cpi	r24, 0x23	; 35
    1606:	69 f4       	brne	.+26     	; 0x1622 <vfprintf+0x84>
    1608:	20 61       	ori	r18, 0x10	; 16
    160a:	2c c0       	rjmp	.+88     	; 0x1664 <vfprintf+0xc6>
    160c:	8d 32       	cpi	r24, 0x2D	; 45
    160e:	39 f0       	breq	.+14     	; 0x161e <vfprintf+0x80>
    1610:	80 33       	cpi	r24, 0x30	; 48
    1612:	39 f4       	brne	.+14     	; 0x1622 <vfprintf+0x84>
    1614:	21 60       	ori	r18, 0x01	; 1
    1616:	26 c0       	rjmp	.+76     	; 0x1664 <vfprintf+0xc6>
    1618:	22 60       	ori	r18, 0x02	; 2
    161a:	24 60       	ori	r18, 0x04	; 4
    161c:	23 c0       	rjmp	.+70     	; 0x1664 <vfprintf+0xc6>
    161e:	28 60       	ori	r18, 0x08	; 8
    1620:	21 c0       	rjmp	.+66     	; 0x1664 <vfprintf+0xc6>
    1622:	27 fd       	sbrc	r18, 7
    1624:	27 c0       	rjmp	.+78     	; 0x1674 <vfprintf+0xd6>
    1626:	30 ed       	ldi	r19, 0xD0	; 208
    1628:	38 0f       	add	r19, r24
    162a:	3a 30       	cpi	r19, 0x0A	; 10
    162c:	78 f4       	brcc	.+30     	; 0x164c <vfprintf+0xae>
    162e:	26 ff       	sbrs	r18, 6
    1630:	06 c0       	rjmp	.+12     	; 0x163e <vfprintf+0xa0>
    1632:	fa e0       	ldi	r31, 0x0A	; 10
    1634:	5f 9e       	mul	r5, r31
    1636:	30 0d       	add	r19, r0
    1638:	11 24       	eor	r1, r1
    163a:	53 2e       	mov	r5, r19
    163c:	13 c0       	rjmp	.+38     	; 0x1664 <vfprintf+0xc6>
    163e:	8a e0       	ldi	r24, 0x0A	; 10
    1640:	38 9e       	mul	r3, r24
    1642:	30 0d       	add	r19, r0
    1644:	11 24       	eor	r1, r1
    1646:	33 2e       	mov	r3, r19
    1648:	20 62       	ori	r18, 0x20	; 32
    164a:	0c c0       	rjmp	.+24     	; 0x1664 <vfprintf+0xc6>
    164c:	8e 32       	cpi	r24, 0x2E	; 46
    164e:	21 f4       	brne	.+8      	; 0x1658 <vfprintf+0xba>
    1650:	26 fd       	sbrc	r18, 6
    1652:	5f c1       	rjmp	.+702    	; 0x1912 <vfprintf+0x374>
    1654:	20 64       	ori	r18, 0x40	; 64
    1656:	06 c0       	rjmp	.+12     	; 0x1664 <vfprintf+0xc6>
    1658:	8c 36       	cpi	r24, 0x6C	; 108
    165a:	11 f4       	brne	.+4      	; 0x1660 <vfprintf+0xc2>
    165c:	20 68       	ori	r18, 0x80	; 128
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <vfprintf+0xc6>
    1660:	88 36       	cpi	r24, 0x68	; 104
    1662:	41 f4       	brne	.+16     	; 0x1674 <vfprintf+0xd6>
    1664:	f6 01       	movw	r30, r12
    1666:	93 fd       	sbrc	r25, 3
    1668:	85 91       	lpm	r24, Z+
    166a:	93 ff       	sbrs	r25, 3
    166c:	81 91       	ld	r24, Z+
    166e:	6f 01       	movw	r12, r30
    1670:	81 11       	cpse	r24, r1
    1672:	c1 cf       	rjmp	.-126    	; 0x15f6 <vfprintf+0x58>
    1674:	98 2f       	mov	r25, r24
    1676:	9f 7d       	andi	r25, 0xDF	; 223
    1678:	95 54       	subi	r25, 0x45	; 69
    167a:	93 30       	cpi	r25, 0x03	; 3
    167c:	28 f4       	brcc	.+10     	; 0x1688 <vfprintf+0xea>
    167e:	0c 5f       	subi	r16, 0xFC	; 252
    1680:	1f 4f       	sbci	r17, 0xFF	; 255
    1682:	ff e3       	ldi	r31, 0x3F	; 63
    1684:	f9 83       	std	Y+1, r31	; 0x01
    1686:	0d c0       	rjmp	.+26     	; 0x16a2 <vfprintf+0x104>
    1688:	83 36       	cpi	r24, 0x63	; 99
    168a:	31 f0       	breq	.+12     	; 0x1698 <vfprintf+0xfa>
    168c:	83 37       	cpi	r24, 0x73	; 115
    168e:	71 f0       	breq	.+28     	; 0x16ac <vfprintf+0x10e>
    1690:	83 35       	cpi	r24, 0x53	; 83
    1692:	09 f0       	breq	.+2      	; 0x1696 <vfprintf+0xf8>
    1694:	57 c0       	rjmp	.+174    	; 0x1744 <vfprintf+0x1a6>
    1696:	21 c0       	rjmp	.+66     	; 0x16da <vfprintf+0x13c>
    1698:	f8 01       	movw	r30, r16
    169a:	80 81       	ld	r24, Z
    169c:	89 83       	std	Y+1, r24	; 0x01
    169e:	0e 5f       	subi	r16, 0xFE	; 254
    16a0:	1f 4f       	sbci	r17, 0xFF	; 255
    16a2:	44 24       	eor	r4, r4
    16a4:	43 94       	inc	r4
    16a6:	51 2c       	mov	r5, r1
    16a8:	54 01       	movw	r10, r8
    16aa:	14 c0       	rjmp	.+40     	; 0x16d4 <vfprintf+0x136>
    16ac:	38 01       	movw	r6, r16
    16ae:	f2 e0       	ldi	r31, 0x02	; 2
    16b0:	6f 0e       	add	r6, r31
    16b2:	71 1c       	adc	r7, r1
    16b4:	f8 01       	movw	r30, r16
    16b6:	a0 80       	ld	r10, Z
    16b8:	b1 80       	ldd	r11, Z+1	; 0x01
    16ba:	26 ff       	sbrs	r18, 6
    16bc:	03 c0       	rjmp	.+6      	; 0x16c4 <vfprintf+0x126>
    16be:	65 2d       	mov	r22, r5
    16c0:	70 e0       	ldi	r23, 0x00	; 0
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <vfprintf+0x12a>
    16c4:	6f ef       	ldi	r22, 0xFF	; 255
    16c6:	7f ef       	ldi	r23, 0xFF	; 255
    16c8:	c5 01       	movw	r24, r10
    16ca:	2c 87       	std	Y+12, r18	; 0x0c
    16cc:	57 d1       	rcall	.+686    	; 0x197c <strnlen>
    16ce:	2c 01       	movw	r4, r24
    16d0:	83 01       	movw	r16, r6
    16d2:	2c 85       	ldd	r18, Y+12	; 0x0c
    16d4:	2f 77       	andi	r18, 0x7F	; 127
    16d6:	22 2e       	mov	r2, r18
    16d8:	16 c0       	rjmp	.+44     	; 0x1706 <vfprintf+0x168>
    16da:	38 01       	movw	r6, r16
    16dc:	f2 e0       	ldi	r31, 0x02	; 2
    16de:	6f 0e       	add	r6, r31
    16e0:	71 1c       	adc	r7, r1
    16e2:	f8 01       	movw	r30, r16
    16e4:	a0 80       	ld	r10, Z
    16e6:	b1 80       	ldd	r11, Z+1	; 0x01
    16e8:	26 ff       	sbrs	r18, 6
    16ea:	03 c0       	rjmp	.+6      	; 0x16f2 <vfprintf+0x154>
    16ec:	65 2d       	mov	r22, r5
    16ee:	70 e0       	ldi	r23, 0x00	; 0
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <vfprintf+0x158>
    16f2:	6f ef       	ldi	r22, 0xFF	; 255
    16f4:	7f ef       	ldi	r23, 0xFF	; 255
    16f6:	c5 01       	movw	r24, r10
    16f8:	2c 87       	std	Y+12, r18	; 0x0c
    16fa:	2e d1       	rcall	.+604    	; 0x1958 <strnlen_P>
    16fc:	2c 01       	movw	r4, r24
    16fe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1700:	20 68       	ori	r18, 0x80	; 128
    1702:	22 2e       	mov	r2, r18
    1704:	83 01       	movw	r16, r6
    1706:	23 fc       	sbrc	r2, 3
    1708:	19 c0       	rjmp	.+50     	; 0x173c <vfprintf+0x19e>
    170a:	83 2d       	mov	r24, r3
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	48 16       	cp	r4, r24
    1710:	59 06       	cpc	r5, r25
    1712:	a0 f4       	brcc	.+40     	; 0x173c <vfprintf+0x19e>
    1714:	b7 01       	movw	r22, r14
    1716:	80 e2       	ldi	r24, 0x20	; 32
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	3b d1       	rcall	.+630    	; 0x1992 <fputc>
    171c:	3a 94       	dec	r3
    171e:	f5 cf       	rjmp	.-22     	; 0x170a <vfprintf+0x16c>
    1720:	f5 01       	movw	r30, r10
    1722:	27 fc       	sbrc	r2, 7
    1724:	85 91       	lpm	r24, Z+
    1726:	27 fe       	sbrs	r2, 7
    1728:	81 91       	ld	r24, Z+
    172a:	5f 01       	movw	r10, r30
    172c:	b7 01       	movw	r22, r14
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	30 d1       	rcall	.+608    	; 0x1992 <fputc>
    1732:	31 10       	cpse	r3, r1
    1734:	3a 94       	dec	r3
    1736:	f1 e0       	ldi	r31, 0x01	; 1
    1738:	4f 1a       	sub	r4, r31
    173a:	51 08       	sbc	r5, r1
    173c:	41 14       	cp	r4, r1
    173e:	51 04       	cpc	r5, r1
    1740:	79 f7       	brne	.-34     	; 0x1720 <vfprintf+0x182>
    1742:	de c0       	rjmp	.+444    	; 0x1900 <vfprintf+0x362>
    1744:	84 36       	cpi	r24, 0x64	; 100
    1746:	11 f0       	breq	.+4      	; 0x174c <vfprintf+0x1ae>
    1748:	89 36       	cpi	r24, 0x69	; 105
    174a:	31 f5       	brne	.+76     	; 0x1798 <vfprintf+0x1fa>
    174c:	f8 01       	movw	r30, r16
    174e:	27 ff       	sbrs	r18, 7
    1750:	07 c0       	rjmp	.+14     	; 0x1760 <vfprintf+0x1c2>
    1752:	60 81       	ld	r22, Z
    1754:	71 81       	ldd	r23, Z+1	; 0x01
    1756:	82 81       	ldd	r24, Z+2	; 0x02
    1758:	93 81       	ldd	r25, Z+3	; 0x03
    175a:	0c 5f       	subi	r16, 0xFC	; 252
    175c:	1f 4f       	sbci	r17, 0xFF	; 255
    175e:	08 c0       	rjmp	.+16     	; 0x1770 <vfprintf+0x1d2>
    1760:	60 81       	ld	r22, Z
    1762:	71 81       	ldd	r23, Z+1	; 0x01
    1764:	88 27       	eor	r24, r24
    1766:	77 fd       	sbrc	r23, 7
    1768:	80 95       	com	r24
    176a:	98 2f       	mov	r25, r24
    176c:	0e 5f       	subi	r16, 0xFE	; 254
    176e:	1f 4f       	sbci	r17, 0xFF	; 255
    1770:	2f 76       	andi	r18, 0x6F	; 111
    1772:	b2 2e       	mov	r11, r18
    1774:	97 ff       	sbrs	r25, 7
    1776:	09 c0       	rjmp	.+18     	; 0x178a <vfprintf+0x1ec>
    1778:	90 95       	com	r25
    177a:	80 95       	com	r24
    177c:	70 95       	com	r23
    177e:	61 95       	neg	r22
    1780:	7f 4f       	sbci	r23, 0xFF	; 255
    1782:	8f 4f       	sbci	r24, 0xFF	; 255
    1784:	9f 4f       	sbci	r25, 0xFF	; 255
    1786:	20 68       	ori	r18, 0x80	; 128
    1788:	b2 2e       	mov	r11, r18
    178a:	2a e0       	ldi	r18, 0x0A	; 10
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	a4 01       	movw	r20, r8
    1790:	32 d1       	rcall	.+612    	; 0x19f6 <__ultoa_invert>
    1792:	a8 2e       	mov	r10, r24
    1794:	a8 18       	sub	r10, r8
    1796:	43 c0       	rjmp	.+134    	; 0x181e <vfprintf+0x280>
    1798:	85 37       	cpi	r24, 0x75	; 117
    179a:	29 f4       	brne	.+10     	; 0x17a6 <vfprintf+0x208>
    179c:	2f 7e       	andi	r18, 0xEF	; 239
    179e:	b2 2e       	mov	r11, r18
    17a0:	2a e0       	ldi	r18, 0x0A	; 10
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	25 c0       	rjmp	.+74     	; 0x17f0 <vfprintf+0x252>
    17a6:	f2 2f       	mov	r31, r18
    17a8:	f9 7f       	andi	r31, 0xF9	; 249
    17aa:	bf 2e       	mov	r11, r31
    17ac:	8f 36       	cpi	r24, 0x6F	; 111
    17ae:	c1 f0       	breq	.+48     	; 0x17e0 <vfprintf+0x242>
    17b0:	18 f4       	brcc	.+6      	; 0x17b8 <vfprintf+0x21a>
    17b2:	88 35       	cpi	r24, 0x58	; 88
    17b4:	79 f0       	breq	.+30     	; 0x17d4 <vfprintf+0x236>
    17b6:	ad c0       	rjmp	.+346    	; 0x1912 <vfprintf+0x374>
    17b8:	80 37       	cpi	r24, 0x70	; 112
    17ba:	19 f0       	breq	.+6      	; 0x17c2 <vfprintf+0x224>
    17bc:	88 37       	cpi	r24, 0x78	; 120
    17be:	21 f0       	breq	.+8      	; 0x17c8 <vfprintf+0x22a>
    17c0:	a8 c0       	rjmp	.+336    	; 0x1912 <vfprintf+0x374>
    17c2:	2f 2f       	mov	r18, r31
    17c4:	20 61       	ori	r18, 0x10	; 16
    17c6:	b2 2e       	mov	r11, r18
    17c8:	b4 fe       	sbrs	r11, 4
    17ca:	0d c0       	rjmp	.+26     	; 0x17e6 <vfprintf+0x248>
    17cc:	8b 2d       	mov	r24, r11
    17ce:	84 60       	ori	r24, 0x04	; 4
    17d0:	b8 2e       	mov	r11, r24
    17d2:	09 c0       	rjmp	.+18     	; 0x17e6 <vfprintf+0x248>
    17d4:	24 ff       	sbrs	r18, 4
    17d6:	0a c0       	rjmp	.+20     	; 0x17ec <vfprintf+0x24e>
    17d8:	9f 2f       	mov	r25, r31
    17da:	96 60       	ori	r25, 0x06	; 6
    17dc:	b9 2e       	mov	r11, r25
    17de:	06 c0       	rjmp	.+12     	; 0x17ec <vfprintf+0x24e>
    17e0:	28 e0       	ldi	r18, 0x08	; 8
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	05 c0       	rjmp	.+10     	; 0x17f0 <vfprintf+0x252>
    17e6:	20 e1       	ldi	r18, 0x10	; 16
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <vfprintf+0x252>
    17ec:	20 e1       	ldi	r18, 0x10	; 16
    17ee:	32 e0       	ldi	r19, 0x02	; 2
    17f0:	f8 01       	movw	r30, r16
    17f2:	b7 fe       	sbrs	r11, 7
    17f4:	07 c0       	rjmp	.+14     	; 0x1804 <vfprintf+0x266>
    17f6:	60 81       	ld	r22, Z
    17f8:	71 81       	ldd	r23, Z+1	; 0x01
    17fa:	82 81       	ldd	r24, Z+2	; 0x02
    17fc:	93 81       	ldd	r25, Z+3	; 0x03
    17fe:	0c 5f       	subi	r16, 0xFC	; 252
    1800:	1f 4f       	sbci	r17, 0xFF	; 255
    1802:	06 c0       	rjmp	.+12     	; 0x1810 <vfprintf+0x272>
    1804:	60 81       	ld	r22, Z
    1806:	71 81       	ldd	r23, Z+1	; 0x01
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	0e 5f       	subi	r16, 0xFE	; 254
    180e:	1f 4f       	sbci	r17, 0xFF	; 255
    1810:	a4 01       	movw	r20, r8
    1812:	f1 d0       	rcall	.+482    	; 0x19f6 <__ultoa_invert>
    1814:	a8 2e       	mov	r10, r24
    1816:	a8 18       	sub	r10, r8
    1818:	fb 2d       	mov	r31, r11
    181a:	ff 77       	andi	r31, 0x7F	; 127
    181c:	bf 2e       	mov	r11, r31
    181e:	b6 fe       	sbrs	r11, 6
    1820:	0b c0       	rjmp	.+22     	; 0x1838 <vfprintf+0x29a>
    1822:	2b 2d       	mov	r18, r11
    1824:	2e 7f       	andi	r18, 0xFE	; 254
    1826:	a5 14       	cp	r10, r5
    1828:	50 f4       	brcc	.+20     	; 0x183e <vfprintf+0x2a0>
    182a:	b4 fe       	sbrs	r11, 4
    182c:	0a c0       	rjmp	.+20     	; 0x1842 <vfprintf+0x2a4>
    182e:	b2 fc       	sbrc	r11, 2
    1830:	08 c0       	rjmp	.+16     	; 0x1842 <vfprintf+0x2a4>
    1832:	2b 2d       	mov	r18, r11
    1834:	2e 7e       	andi	r18, 0xEE	; 238
    1836:	05 c0       	rjmp	.+10     	; 0x1842 <vfprintf+0x2a4>
    1838:	7a 2c       	mov	r7, r10
    183a:	2b 2d       	mov	r18, r11
    183c:	03 c0       	rjmp	.+6      	; 0x1844 <vfprintf+0x2a6>
    183e:	7a 2c       	mov	r7, r10
    1840:	01 c0       	rjmp	.+2      	; 0x1844 <vfprintf+0x2a6>
    1842:	75 2c       	mov	r7, r5
    1844:	24 ff       	sbrs	r18, 4
    1846:	0d c0       	rjmp	.+26     	; 0x1862 <vfprintf+0x2c4>
    1848:	fe 01       	movw	r30, r28
    184a:	ea 0d       	add	r30, r10
    184c:	f1 1d       	adc	r31, r1
    184e:	80 81       	ld	r24, Z
    1850:	80 33       	cpi	r24, 0x30	; 48
    1852:	11 f4       	brne	.+4      	; 0x1858 <vfprintf+0x2ba>
    1854:	29 7e       	andi	r18, 0xE9	; 233
    1856:	09 c0       	rjmp	.+18     	; 0x186a <vfprintf+0x2cc>
    1858:	22 ff       	sbrs	r18, 2
    185a:	06 c0       	rjmp	.+12     	; 0x1868 <vfprintf+0x2ca>
    185c:	73 94       	inc	r7
    185e:	73 94       	inc	r7
    1860:	04 c0       	rjmp	.+8      	; 0x186a <vfprintf+0x2cc>
    1862:	82 2f       	mov	r24, r18
    1864:	86 78       	andi	r24, 0x86	; 134
    1866:	09 f0       	breq	.+2      	; 0x186a <vfprintf+0x2cc>
    1868:	73 94       	inc	r7
    186a:	23 fd       	sbrc	r18, 3
    186c:	12 c0       	rjmp	.+36     	; 0x1892 <vfprintf+0x2f4>
    186e:	20 ff       	sbrs	r18, 0
    1870:	06 c0       	rjmp	.+12     	; 0x187e <vfprintf+0x2e0>
    1872:	5a 2c       	mov	r5, r10
    1874:	73 14       	cp	r7, r3
    1876:	18 f4       	brcc	.+6      	; 0x187e <vfprintf+0x2e0>
    1878:	53 0c       	add	r5, r3
    187a:	57 18       	sub	r5, r7
    187c:	73 2c       	mov	r7, r3
    187e:	73 14       	cp	r7, r3
    1880:	60 f4       	brcc	.+24     	; 0x189a <vfprintf+0x2fc>
    1882:	b7 01       	movw	r22, r14
    1884:	80 e2       	ldi	r24, 0x20	; 32
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	2c 87       	std	Y+12, r18	; 0x0c
    188a:	83 d0       	rcall	.+262    	; 0x1992 <fputc>
    188c:	73 94       	inc	r7
    188e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1890:	f6 cf       	rjmp	.-20     	; 0x187e <vfprintf+0x2e0>
    1892:	73 14       	cp	r7, r3
    1894:	10 f4       	brcc	.+4      	; 0x189a <vfprintf+0x2fc>
    1896:	37 18       	sub	r3, r7
    1898:	01 c0       	rjmp	.+2      	; 0x189c <vfprintf+0x2fe>
    189a:	31 2c       	mov	r3, r1
    189c:	24 ff       	sbrs	r18, 4
    189e:	11 c0       	rjmp	.+34     	; 0x18c2 <vfprintf+0x324>
    18a0:	b7 01       	movw	r22, r14
    18a2:	80 e3       	ldi	r24, 0x30	; 48
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	2c 87       	std	Y+12, r18	; 0x0c
    18a8:	74 d0       	rcall	.+232    	; 0x1992 <fputc>
    18aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    18ac:	22 ff       	sbrs	r18, 2
    18ae:	16 c0       	rjmp	.+44     	; 0x18dc <vfprintf+0x33e>
    18b0:	21 ff       	sbrs	r18, 1
    18b2:	03 c0       	rjmp	.+6      	; 0x18ba <vfprintf+0x31c>
    18b4:	88 e5       	ldi	r24, 0x58	; 88
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <vfprintf+0x320>
    18ba:	88 e7       	ldi	r24, 0x78	; 120
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	b7 01       	movw	r22, r14
    18c0:	0c c0       	rjmp	.+24     	; 0x18da <vfprintf+0x33c>
    18c2:	82 2f       	mov	r24, r18
    18c4:	86 78       	andi	r24, 0x86	; 134
    18c6:	51 f0       	breq	.+20     	; 0x18dc <vfprintf+0x33e>
    18c8:	21 fd       	sbrc	r18, 1
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <vfprintf+0x332>
    18cc:	80 e2       	ldi	r24, 0x20	; 32
    18ce:	01 c0       	rjmp	.+2      	; 0x18d2 <vfprintf+0x334>
    18d0:	8b e2       	ldi	r24, 0x2B	; 43
    18d2:	27 fd       	sbrc	r18, 7
    18d4:	8d e2       	ldi	r24, 0x2D	; 45
    18d6:	b7 01       	movw	r22, r14
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	5b d0       	rcall	.+182    	; 0x1992 <fputc>
    18dc:	a5 14       	cp	r10, r5
    18de:	30 f4       	brcc	.+12     	; 0x18ec <vfprintf+0x34e>
    18e0:	b7 01       	movw	r22, r14
    18e2:	80 e3       	ldi	r24, 0x30	; 48
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	55 d0       	rcall	.+170    	; 0x1992 <fputc>
    18e8:	5a 94       	dec	r5
    18ea:	f8 cf       	rjmp	.-16     	; 0x18dc <vfprintf+0x33e>
    18ec:	aa 94       	dec	r10
    18ee:	f4 01       	movw	r30, r8
    18f0:	ea 0d       	add	r30, r10
    18f2:	f1 1d       	adc	r31, r1
    18f4:	80 81       	ld	r24, Z
    18f6:	b7 01       	movw	r22, r14
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	4b d0       	rcall	.+150    	; 0x1992 <fputc>
    18fc:	a1 10       	cpse	r10, r1
    18fe:	f6 cf       	rjmp	.-20     	; 0x18ec <vfprintf+0x34e>
    1900:	33 20       	and	r3, r3
    1902:	09 f4       	brne	.+2      	; 0x1906 <vfprintf+0x368>
    1904:	5d ce       	rjmp	.-838    	; 0x15c0 <vfprintf+0x22>
    1906:	b7 01       	movw	r22, r14
    1908:	80 e2       	ldi	r24, 0x20	; 32
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	42 d0       	rcall	.+132    	; 0x1992 <fputc>
    190e:	3a 94       	dec	r3
    1910:	f7 cf       	rjmp	.-18     	; 0x1900 <vfprintf+0x362>
    1912:	f7 01       	movw	r30, r14
    1914:	86 81       	ldd	r24, Z+6	; 0x06
    1916:	97 81       	ldd	r25, Z+7	; 0x07
    1918:	02 c0       	rjmp	.+4      	; 0x191e <vfprintf+0x380>
    191a:	8f ef       	ldi	r24, 0xFF	; 255
    191c:	9f ef       	ldi	r25, 0xFF	; 255
    191e:	2c 96       	adiw	r28, 0x0c	; 12
    1920:	e2 e1       	ldi	r30, 0x12	; 18
    1922:	0f c1       	rjmp	.+542    	; 0x1b42 <__epilogue_restores__>

00001924 <calloc>:
    1924:	0f 93       	push	r16
    1926:	1f 93       	push	r17
    1928:	cf 93       	push	r28
    192a:	df 93       	push	r29
    192c:	86 9f       	mul	r24, r22
    192e:	80 01       	movw	r16, r0
    1930:	87 9f       	mul	r24, r23
    1932:	10 0d       	add	r17, r0
    1934:	96 9f       	mul	r25, r22
    1936:	10 0d       	add	r17, r0
    1938:	11 24       	eor	r1, r1
    193a:	c8 01       	movw	r24, r16
    193c:	2a dc       	rcall	.-1964   	; 0x1192 <malloc>
    193e:	ec 01       	movw	r28, r24
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	21 f0       	breq	.+8      	; 0x194c <calloc+0x28>
    1944:	a8 01       	movw	r20, r16
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	70 e0       	ldi	r23, 0x00	; 0
    194a:	11 d0       	rcall	.+34     	; 0x196e <memset>
    194c:	ce 01       	movw	r24, r28
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	1f 91       	pop	r17
    1954:	0f 91       	pop	r16
    1956:	08 95       	ret

00001958 <strnlen_P>:
    1958:	fc 01       	movw	r30, r24
    195a:	05 90       	lpm	r0, Z+
    195c:	61 50       	subi	r22, 0x01	; 1
    195e:	70 40       	sbci	r23, 0x00	; 0
    1960:	01 10       	cpse	r0, r1
    1962:	d8 f7       	brcc	.-10     	; 0x195a <strnlen_P+0x2>
    1964:	80 95       	com	r24
    1966:	90 95       	com	r25
    1968:	8e 0f       	add	r24, r30
    196a:	9f 1f       	adc	r25, r31
    196c:	08 95       	ret

0000196e <memset>:
    196e:	dc 01       	movw	r26, r24
    1970:	01 c0       	rjmp	.+2      	; 0x1974 <memset+0x6>
    1972:	6d 93       	st	X+, r22
    1974:	41 50       	subi	r20, 0x01	; 1
    1976:	50 40       	sbci	r21, 0x00	; 0
    1978:	e0 f7       	brcc	.-8      	; 0x1972 <memset+0x4>
    197a:	08 95       	ret

0000197c <strnlen>:
    197c:	fc 01       	movw	r30, r24
    197e:	61 50       	subi	r22, 0x01	; 1
    1980:	70 40       	sbci	r23, 0x00	; 0
    1982:	01 90       	ld	r0, Z+
    1984:	01 10       	cpse	r0, r1
    1986:	d8 f7       	brcc	.-10     	; 0x197e <strnlen+0x2>
    1988:	80 95       	com	r24
    198a:	90 95       	com	r25
    198c:	8e 0f       	add	r24, r30
    198e:	9f 1f       	adc	r25, r31
    1990:	08 95       	ret

00001992 <fputc>:
    1992:	0f 93       	push	r16
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	18 2f       	mov	r17, r24
    199c:	09 2f       	mov	r16, r25
    199e:	eb 01       	movw	r28, r22
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	81 fd       	sbrc	r24, 1
    19a4:	03 c0       	rjmp	.+6      	; 0x19ac <fputc+0x1a>
    19a6:	8f ef       	ldi	r24, 0xFF	; 255
    19a8:	9f ef       	ldi	r25, 0xFF	; 255
    19aa:	20 c0       	rjmp	.+64     	; 0x19ec <fputc+0x5a>
    19ac:	82 ff       	sbrs	r24, 2
    19ae:	10 c0       	rjmp	.+32     	; 0x19d0 <fputc+0x3e>
    19b0:	4e 81       	ldd	r20, Y+6	; 0x06
    19b2:	5f 81       	ldd	r21, Y+7	; 0x07
    19b4:	2c 81       	ldd	r18, Y+4	; 0x04
    19b6:	3d 81       	ldd	r19, Y+5	; 0x05
    19b8:	42 17       	cp	r20, r18
    19ba:	53 07       	cpc	r21, r19
    19bc:	7c f4       	brge	.+30     	; 0x19dc <fputc+0x4a>
    19be:	e8 81       	ld	r30, Y
    19c0:	f9 81       	ldd	r31, Y+1	; 0x01
    19c2:	9f 01       	movw	r18, r30
    19c4:	2f 5f       	subi	r18, 0xFF	; 255
    19c6:	3f 4f       	sbci	r19, 0xFF	; 255
    19c8:	39 83       	std	Y+1, r19	; 0x01
    19ca:	28 83       	st	Y, r18
    19cc:	10 83       	st	Z, r17
    19ce:	06 c0       	rjmp	.+12     	; 0x19dc <fputc+0x4a>
    19d0:	e8 85       	ldd	r30, Y+8	; 0x08
    19d2:	f9 85       	ldd	r31, Y+9	; 0x09
    19d4:	81 2f       	mov	r24, r17
    19d6:	09 95       	icall
    19d8:	89 2b       	or	r24, r25
    19da:	29 f7       	brne	.-54     	; 0x19a6 <fputc+0x14>
    19dc:	2e 81       	ldd	r18, Y+6	; 0x06
    19de:	3f 81       	ldd	r19, Y+7	; 0x07
    19e0:	2f 5f       	subi	r18, 0xFF	; 255
    19e2:	3f 4f       	sbci	r19, 0xFF	; 255
    19e4:	3f 83       	std	Y+7, r19	; 0x07
    19e6:	2e 83       	std	Y+6, r18	; 0x06
    19e8:	81 2f       	mov	r24, r17
    19ea:	90 2f       	mov	r25, r16
    19ec:	df 91       	pop	r29
    19ee:	cf 91       	pop	r28
    19f0:	1f 91       	pop	r17
    19f2:	0f 91       	pop	r16
    19f4:	08 95       	ret

000019f6 <__ultoa_invert>:
    19f6:	fa 01       	movw	r30, r20
    19f8:	aa 27       	eor	r26, r26
    19fa:	28 30       	cpi	r18, 0x08	; 8
    19fc:	51 f1       	breq	.+84     	; 0x1a52 <__ultoa_invert+0x5c>
    19fe:	20 31       	cpi	r18, 0x10	; 16
    1a00:	81 f1       	breq	.+96     	; 0x1a62 <__ultoa_invert+0x6c>
    1a02:	e8 94       	clt
    1a04:	6f 93       	push	r22
    1a06:	6e 7f       	andi	r22, 0xFE	; 254
    1a08:	6e 5f       	subi	r22, 0xFE	; 254
    1a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a10:	af 4f       	sbci	r26, 0xFF	; 255
    1a12:	b1 e0       	ldi	r27, 0x01	; 1
    1a14:	3e d0       	rcall	.+124    	; 0x1a92 <__ultoa_invert+0x9c>
    1a16:	b4 e0       	ldi	r27, 0x04	; 4
    1a18:	3c d0       	rcall	.+120    	; 0x1a92 <__ultoa_invert+0x9c>
    1a1a:	67 0f       	add	r22, r23
    1a1c:	78 1f       	adc	r23, r24
    1a1e:	89 1f       	adc	r24, r25
    1a20:	9a 1f       	adc	r25, r26
    1a22:	a1 1d       	adc	r26, r1
    1a24:	68 0f       	add	r22, r24
    1a26:	79 1f       	adc	r23, r25
    1a28:	8a 1f       	adc	r24, r26
    1a2a:	91 1d       	adc	r25, r1
    1a2c:	a1 1d       	adc	r26, r1
    1a2e:	6a 0f       	add	r22, r26
    1a30:	71 1d       	adc	r23, r1
    1a32:	81 1d       	adc	r24, r1
    1a34:	91 1d       	adc	r25, r1
    1a36:	a1 1d       	adc	r26, r1
    1a38:	20 d0       	rcall	.+64     	; 0x1a7a <__ultoa_invert+0x84>
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <__ultoa_invert+0x48>
    1a3c:	68 94       	set
    1a3e:	3f 91       	pop	r19
    1a40:	2a e0       	ldi	r18, 0x0A	; 10
    1a42:	26 9f       	mul	r18, r22
    1a44:	11 24       	eor	r1, r1
    1a46:	30 19       	sub	r19, r0
    1a48:	30 5d       	subi	r19, 0xD0	; 208
    1a4a:	31 93       	st	Z+, r19
    1a4c:	de f6       	brtc	.-74     	; 0x1a04 <__ultoa_invert+0xe>
    1a4e:	cf 01       	movw	r24, r30
    1a50:	08 95       	ret
    1a52:	46 2f       	mov	r20, r22
    1a54:	47 70       	andi	r20, 0x07	; 7
    1a56:	40 5d       	subi	r20, 0xD0	; 208
    1a58:	41 93       	st	Z+, r20
    1a5a:	b3 e0       	ldi	r27, 0x03	; 3
    1a5c:	0f d0       	rcall	.+30     	; 0x1a7c <__ultoa_invert+0x86>
    1a5e:	c9 f7       	brne	.-14     	; 0x1a52 <__ultoa_invert+0x5c>
    1a60:	f6 cf       	rjmp	.-20     	; 0x1a4e <__ultoa_invert+0x58>
    1a62:	46 2f       	mov	r20, r22
    1a64:	4f 70       	andi	r20, 0x0F	; 15
    1a66:	40 5d       	subi	r20, 0xD0	; 208
    1a68:	4a 33       	cpi	r20, 0x3A	; 58
    1a6a:	18 f0       	brcs	.+6      	; 0x1a72 <__ultoa_invert+0x7c>
    1a6c:	49 5d       	subi	r20, 0xD9	; 217
    1a6e:	31 fd       	sbrc	r19, 1
    1a70:	40 52       	subi	r20, 0x20	; 32
    1a72:	41 93       	st	Z+, r20
    1a74:	02 d0       	rcall	.+4      	; 0x1a7a <__ultoa_invert+0x84>
    1a76:	a9 f7       	brne	.-22     	; 0x1a62 <__ultoa_invert+0x6c>
    1a78:	ea cf       	rjmp	.-44     	; 0x1a4e <__ultoa_invert+0x58>
    1a7a:	b4 e0       	ldi	r27, 0x04	; 4
    1a7c:	a6 95       	lsr	r26
    1a7e:	97 95       	ror	r25
    1a80:	87 95       	ror	r24
    1a82:	77 95       	ror	r23
    1a84:	67 95       	ror	r22
    1a86:	ba 95       	dec	r27
    1a88:	c9 f7       	brne	.-14     	; 0x1a7c <__ultoa_invert+0x86>
    1a8a:	00 97       	sbiw	r24, 0x00	; 0
    1a8c:	61 05       	cpc	r22, r1
    1a8e:	71 05       	cpc	r23, r1
    1a90:	08 95       	ret
    1a92:	9b 01       	movw	r18, r22
    1a94:	ac 01       	movw	r20, r24
    1a96:	0a 2e       	mov	r0, r26
    1a98:	06 94       	lsr	r0
    1a9a:	57 95       	ror	r21
    1a9c:	47 95       	ror	r20
    1a9e:	37 95       	ror	r19
    1aa0:	27 95       	ror	r18
    1aa2:	ba 95       	dec	r27
    1aa4:	c9 f7       	brne	.-14     	; 0x1a98 <__ultoa_invert+0xa2>
    1aa6:	62 0f       	add	r22, r18
    1aa8:	73 1f       	adc	r23, r19
    1aaa:	84 1f       	adc	r24, r20
    1aac:	95 1f       	adc	r25, r21
    1aae:	a0 1d       	adc	r26, r0
    1ab0:	08 95       	ret

00001ab2 <__divmodsi4>:
    1ab2:	05 2e       	mov	r0, r21
    1ab4:	97 fb       	bst	r25, 7
    1ab6:	16 f4       	brtc	.+4      	; 0x1abc <__divmodsi4+0xa>
    1ab8:	00 94       	com	r0
    1aba:	0f d0       	rcall	.+30     	; 0x1ada <__negsi2>
    1abc:	57 fd       	sbrc	r21, 7
    1abe:	05 d0       	rcall	.+10     	; 0x1aca <__divmodsi4_neg2>
    1ac0:	5b d0       	rcall	.+182    	; 0x1b78 <__udivmodsi4>
    1ac2:	07 fc       	sbrc	r0, 7
    1ac4:	02 d0       	rcall	.+4      	; 0x1aca <__divmodsi4_neg2>
    1ac6:	46 f4       	brtc	.+16     	; 0x1ad8 <__divmodsi4_exit>
    1ac8:	08 c0       	rjmp	.+16     	; 0x1ada <__negsi2>

00001aca <__divmodsi4_neg2>:
    1aca:	50 95       	com	r21
    1acc:	40 95       	com	r20
    1ace:	30 95       	com	r19
    1ad0:	21 95       	neg	r18
    1ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad4:	4f 4f       	sbci	r20, 0xFF	; 255
    1ad6:	5f 4f       	sbci	r21, 0xFF	; 255

00001ad8 <__divmodsi4_exit>:
    1ad8:	08 95       	ret

00001ada <__negsi2>:
    1ada:	90 95       	com	r25
    1adc:	80 95       	com	r24
    1ade:	70 95       	com	r23
    1ae0:	61 95       	neg	r22
    1ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae8:	08 95       	ret

00001aea <__muluhisi3>:
    1aea:	68 d0       	rcall	.+208    	; 0x1bbc <__umulhisi3>
    1aec:	a5 9f       	mul	r26, r21
    1aee:	90 0d       	add	r25, r0
    1af0:	b4 9f       	mul	r27, r20
    1af2:	90 0d       	add	r25, r0
    1af4:	a4 9f       	mul	r26, r20
    1af6:	80 0d       	add	r24, r0
    1af8:	91 1d       	adc	r25, r1
    1afa:	11 24       	eor	r1, r1
    1afc:	08 95       	ret

00001afe <__mulshisi3>:
    1afe:	b7 ff       	sbrs	r27, 7
    1b00:	f4 cf       	rjmp	.-24     	; 0x1aea <__muluhisi3>

00001b02 <__mulohisi3>:
    1b02:	f3 df       	rcall	.-26     	; 0x1aea <__muluhisi3>
    1b04:	82 1b       	sub	r24, r18
    1b06:	93 0b       	sbc	r25, r19
    1b08:	08 95       	ret

00001b0a <__prologue_saves__>:
    1b0a:	2f 92       	push	r2
    1b0c:	3f 92       	push	r3
    1b0e:	4f 92       	push	r4
    1b10:	5f 92       	push	r5
    1b12:	6f 92       	push	r6
    1b14:	7f 92       	push	r7
    1b16:	8f 92       	push	r8
    1b18:	9f 92       	push	r9
    1b1a:	af 92       	push	r10
    1b1c:	bf 92       	push	r11
    1b1e:	cf 92       	push	r12
    1b20:	df 92       	push	r13
    1b22:	ef 92       	push	r14
    1b24:	ff 92       	push	r15
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	ca 1b       	sub	r28, r26
    1b34:	db 0b       	sbc	r29, r27
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	09 94       	ijmp

00001b42 <__epilogue_restores__>:
    1b42:	2a 88       	ldd	r2, Y+18	; 0x12
    1b44:	39 88       	ldd	r3, Y+17	; 0x11
    1b46:	48 88       	ldd	r4, Y+16	; 0x10
    1b48:	5f 84       	ldd	r5, Y+15	; 0x0f
    1b4a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1b4c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1b4e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1b50:	9b 84       	ldd	r9, Y+11	; 0x0b
    1b52:	aa 84       	ldd	r10, Y+10	; 0x0a
    1b54:	b9 84       	ldd	r11, Y+9	; 0x09
    1b56:	c8 84       	ldd	r12, Y+8	; 0x08
    1b58:	df 80       	ldd	r13, Y+7	; 0x07
    1b5a:	ee 80       	ldd	r14, Y+6	; 0x06
    1b5c:	fd 80       	ldd	r15, Y+5	; 0x05
    1b5e:	0c 81       	ldd	r16, Y+4	; 0x04
    1b60:	1b 81       	ldd	r17, Y+3	; 0x03
    1b62:	aa 81       	ldd	r26, Y+2	; 0x02
    1b64:	b9 81       	ldd	r27, Y+1	; 0x01
    1b66:	ce 0f       	add	r28, r30
    1b68:	d1 1d       	adc	r29, r1
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	f8 94       	cli
    1b6e:	de bf       	out	0x3e, r29	; 62
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	cd bf       	out	0x3d, r28	; 61
    1b74:	ed 01       	movw	r28, r26
    1b76:	08 95       	ret

00001b78 <__udivmodsi4>:
    1b78:	a1 e2       	ldi	r26, 0x21	; 33
    1b7a:	1a 2e       	mov	r1, r26
    1b7c:	aa 1b       	sub	r26, r26
    1b7e:	bb 1b       	sub	r27, r27
    1b80:	fd 01       	movw	r30, r26
    1b82:	0d c0       	rjmp	.+26     	; 0x1b9e <__udivmodsi4_ep>

00001b84 <__udivmodsi4_loop>:
    1b84:	aa 1f       	adc	r26, r26
    1b86:	bb 1f       	adc	r27, r27
    1b88:	ee 1f       	adc	r30, r30
    1b8a:	ff 1f       	adc	r31, r31
    1b8c:	a2 17       	cp	r26, r18
    1b8e:	b3 07       	cpc	r27, r19
    1b90:	e4 07       	cpc	r30, r20
    1b92:	f5 07       	cpc	r31, r21
    1b94:	20 f0       	brcs	.+8      	; 0x1b9e <__udivmodsi4_ep>
    1b96:	a2 1b       	sub	r26, r18
    1b98:	b3 0b       	sbc	r27, r19
    1b9a:	e4 0b       	sbc	r30, r20
    1b9c:	f5 0b       	sbc	r31, r21

00001b9e <__udivmodsi4_ep>:
    1b9e:	66 1f       	adc	r22, r22
    1ba0:	77 1f       	adc	r23, r23
    1ba2:	88 1f       	adc	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	1a 94       	dec	r1
    1ba8:	69 f7       	brne	.-38     	; 0x1b84 <__udivmodsi4_loop>
    1baa:	60 95       	com	r22
    1bac:	70 95       	com	r23
    1bae:	80 95       	com	r24
    1bb0:	90 95       	com	r25
    1bb2:	9b 01       	movw	r18, r22
    1bb4:	ac 01       	movw	r20, r24
    1bb6:	bd 01       	movw	r22, r26
    1bb8:	cf 01       	movw	r24, r30
    1bba:	08 95       	ret

00001bbc <__umulhisi3>:
    1bbc:	a2 9f       	mul	r26, r18
    1bbe:	b0 01       	movw	r22, r0
    1bc0:	b3 9f       	mul	r27, r19
    1bc2:	c0 01       	movw	r24, r0
    1bc4:	a3 9f       	mul	r26, r19
    1bc6:	70 0d       	add	r23, r0
    1bc8:	81 1d       	adc	r24, r1
    1bca:	11 24       	eor	r1, r1
    1bcc:	91 1d       	adc	r25, r1
    1bce:	b2 9f       	mul	r27, r18
    1bd0:	70 0d       	add	r23, r0
    1bd2:	81 1d       	adc	r24, r1
    1bd4:	11 24       	eor	r1, r1
    1bd6:	91 1d       	adc	r25, r1
    1bd8:	08 95       	ret

00001bda <_exit>:
    1bda:	f8 94       	cli

00001bdc <__stop_program>:
    1bdc:	ff cf       	rjmp	.-2      	; 0x1bdc <__stop_program>
