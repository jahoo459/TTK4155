
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000268  00800100  00001b56  00001bea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000026  00800368  00800368  00001e52  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e52  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000258  00000000  00000000  00001eae  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002981  00000000  00000000  00002106  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dd7  00000000  00000000  00004a87  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011c9  00000000  00000000  0000585e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000062c  00000000  00000000  00006a28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b76  00000000  00000000  00007054  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000016aa  00000000  00000000  00007bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000208  00000000  00000000  00009274  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	c9 c1       	rjmp	.+914    	; 0x3a0 <__bad_interrupt>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <MENU_printMenu+0xa6>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e6 e5       	ldi	r30, 0x56	; 86
     37c:	fb e1       	ldi	r31, 0x1B	; 27
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a8 36       	cpi	r26, 0x68	; 104
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a8 e6       	ldi	r26, 0x68	; 104
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ae 38       	cpi	r26, 0x8E	; 142
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	b0 d0       	rcall	.+352    	; 0x4fc <main>
     39c:	0c 94 a9 0d 	jmp	0x1b52	; 0x1b52 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 7f 03 	sts	0x037F, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 6a 03 	sts	0x036A, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 69 03 	sts	0x0369, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 68 03 	sts	0x0368, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <SRAM_test>:
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	88 e1       	ldi	r24, 0x18	; 24
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <puts>
     416:	e9 d7       	rcall	.+4050   	; 0x13ea <rand>
     418:	7c 01       	movw	r14, r24
     41a:	ea d7       	rcall	.+4052   	; 0x13f0 <srand>
     41c:	c0 e0       	ldi	r28, 0x00	; 0
     41e:	d8 e1       	ldi	r29, 0x18	; 24
     420:	00 e0       	ldi	r16, 0x00	; 0
     422:	10 e0       	ldi	r17, 0x00	; 0
     424:	e2 d7       	rcall	.+4036   	; 0x13ea <rand>
     426:	88 83       	st	Y, r24
     428:	98 81       	ld	r25, Y
     42a:	98 17       	cp	r25, r24
     42c:	11 f0       	breq	.+4      	; 0x432 <SRAM_test+0x30>
     42e:	0f 5f       	subi	r16, 0xFF	; 255
     430:	1f 4f       	sbci	r17, 0xFF	; 255
     432:	21 96       	adiw	r28, 0x01	; 1
     434:	c1 15       	cp	r28, r1
     436:	80 e2       	ldi	r24, 0x20	; 32
     438:	d8 07       	cpc	r29, r24
     43a:	a1 f7       	brne	.-24     	; 0x424 <SRAM_test+0x22>
     43c:	c7 01       	movw	r24, r14
     43e:	d8 d7       	rcall	.+4016   	; 0x13f0 <srand>
     440:	c0 e0       	ldi	r28, 0x00	; 0
     442:	d8 e1       	ldi	r29, 0x18	; 24
     444:	e1 2c       	mov	r14, r1
     446:	f1 2c       	mov	r15, r1
     448:	d0 d7       	rcall	.+4000   	; 0x13ea <rand>
     44a:	98 81       	ld	r25, Y
     44c:	98 17       	cp	r25, r24
     44e:	19 f0       	breq	.+6      	; 0x456 <SRAM_test+0x54>
     450:	8f ef       	ldi	r24, 0xFF	; 255
     452:	e8 1a       	sub	r14, r24
     454:	f8 0a       	sbc	r15, r24
     456:	21 96       	adiw	r28, 0x01	; 1
     458:	c1 15       	cp	r28, r1
     45a:	80 e2       	ldi	r24, 0x20	; 32
     45c:	d8 07       	cpc	r29, r24
     45e:	a1 f7       	brne	.-24     	; 0x448 <SRAM_test+0x46>
     460:	ff 92       	push	r15
     462:	ef 92       	push	r14
     464:	1f 93       	push	r17
     466:	0f 93       	push	r16
     468:	8e e2       	ldi	r24, 0x2E	; 46
     46a:	91 e0       	ldi	r25, 0x01	; 1
     46c:	9f 93       	push	r25
     46e:	8f 93       	push	r24
     470:	0e 94 4d 0a 	call	0x149a	; 0x149a <printf>
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	1f 91       	pop	r17
     486:	0f 91       	pop	r16
     488:	ff 90       	pop	r15
     48a:	ef 90       	pop	r14
     48c:	08 95       	ret

0000048e <init>:
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	1f e1       	ldi	r17, 0x1F	; 31
     498:	e1 2e       	mov	r14, r17
     49a:	f1 2c       	mov	r15, r1
     49c:	00 e0       	ldi	r16, 0x00	; 0
     49e:	10 e0       	ldi	r17, 0x00	; 0
     4a0:	20 e0       	ldi	r18, 0x00	; 0
     4a2:	30 e0       	ldi	r19, 0x00	; 0
     4a4:	4b e4       	ldi	r20, 0x4B	; 75
     4a6:	50 e0       	ldi	r21, 0x00	; 0
     4a8:	60 e8       	ldi	r22, 0x80	; 128
     4aa:	75 e2       	ldi	r23, 0x25	; 37
     4ac:	80 e0       	ldi	r24, 0x00	; 0
     4ae:	90 e0       	ldi	r25, 0x00	; 0
     4b0:	c6 d5       	rcall	.+2956   	; 0x103e <uartInit>
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	2d d0       	rcall	.+90     	; 0x510 <enableXMEM>
     4b6:	b2 d5       	rcall	.+2916   	; 0x101c <SLI_init>
     4b8:	3d d0       	rcall	.+122    	; 0x534 <JOY_init>
     4ba:	2a d5       	rcall	.+2644   	; 0xf10 <OLED_init>
     4bc:	dd d3       	rcall	.+1978   	; 0xc78 <MENU_activate>
     4be:	8b b7       	in	r24, 0x3b	; 59
     4c0:	80 64       	ori	r24, 0x40	; 64
     4c2:	8b bf       	out	0x3b, r24	; 59
     4c4:	85 b7       	in	r24, 0x35	; 53
     4c6:	82 60       	ori	r24, 0x02	; 2
     4c8:	85 bf       	out	0x35, r24	; 53
     4ca:	85 b7       	in	r24, 0x35	; 53
     4cc:	8e 7f       	andi	r24, 0xFE	; 254
     4ce:	85 bf       	out	0x35, r24	; 53
     4d0:	8b 98       	cbi	0x11, 3	; 17
     4d2:	93 9a       	sbi	0x12, 3	; 18
     4d4:	8b b7       	in	r24, 0x3b	; 59
     4d6:	80 68       	ori	r24, 0x80	; 128
     4d8:	8b bf       	out	0x3b, r24	; 59
     4da:	85 b7       	in	r24, 0x35	; 53
     4dc:	88 60       	ori	r24, 0x08	; 8
     4de:	85 bf       	out	0x35, r24	; 53
     4e0:	85 b7       	in	r24, 0x35	; 53
     4e2:	8b 7f       	andi	r24, 0xFB	; 251
     4e4:	85 bf       	out	0x35, r24	; 53
     4e6:	32 98       	cbi	0x06, 2	; 6
     4e8:	3a 98       	cbi	0x07, 2	; 7
     4ea:	b8 98       	cbi	0x17, 0	; 23
     4ec:	c0 98       	cbi	0x18, 0	; 24
     4ee:	78 94       	sei
     4f0:	88 df       	rcall	.-240    	; 0x402 <SRAM_test>
     4f2:	1f 91       	pop	r17
     4f4:	0f 91       	pop	r16
     4f6:	ff 90       	pop	r15
     4f8:	ef 90       	pop	r14
     4fa:	08 95       	ret

000004fc <main>:
=======================MAIN FUNCTION=========================
*/

int main(void)
{	
	init();
     4fc:	c8 df       	rcall	.-112    	; 0x48e <init>
	
    while(1)
    {	
		// statusMultifunctionBoard();
		JOY_getDirection();
     4fe:	a8 d1       	rcall	.+848    	; 0x850 <JOY_getDirection>

		// todo: remove! will be included in the menu driver later
		if(JOYcalibFlag)
     500:	80 91 68 03 	lds	r24, 0x0368
     504:	88 23       	and	r24, r24
     506:	d9 f3       	breq	.-10     	; 0x4fe <main+0x2>
		{
			//run joystick calibration
			JOY_calibrate();
     508:	28 d0       	rcall	.+80     	; 0x55a <JOY_calibrate>
			JOYcalibFlag = 0;
     50a:	10 92 68 03 	sts	0x0368, r1
     50e:	f7 cf       	rjmp	.-18     	; 0x4fe <main+0x2>

00000510 <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     510:	95 b7       	in	r25, 0x35	; 53
     512:	90 68       	ori	r25, 0x80	; 128
     514:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     516:	96 b7       	in	r25, 0x36	; 54
     518:	98 60       	ori	r25, 0x08	; 8
     51a:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     51c:	88 23       	and	r24, r24
     51e:	19 f0       	breq	.+6      	; 0x526 <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     520:	80 b7       	in	r24, 0x30	; 48
     522:	80 62       	ori	r24, 0x20	; 32
     524:	80 bf       	out	0x30, r24	; 48
     526:	08 95       	ret

00000528 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     528:	fc 01       	movw	r30, r24
     52a:	80 81       	ld	r24, Z
	return val;
}
     52c:	08 95       	ret

0000052e <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     52e:	fc 01       	movw	r30, r24
     530:	60 83       	st	Z, r22
     532:	08 95       	ret

00000534 <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     534:	10 92 6d 03 	sts	0x036D, r1
     538:	10 92 6c 03 	sts	0x036C, r1
	currentPosition.Y_abs = 0;
     53c:	10 92 6f 03 	sts	0x036F, r1
     540:	10 92 6e 03 	sts	0x036E, r1
	currentPosition.X_per = 0;
     544:	10 92 71 03 	sts	0x0371, r1
     548:	10 92 70 03 	sts	0x0370, r1
	currentPosition.Y_per = 0;
     54c:	10 92 73 03 	sts	0x0373, r1
     550:	10 92 72 03 	sts	0x0372, r1
	currentDirection = CENTRE;
     554:	10 92 6b 03 	sts	0x036B, r1
     558:	08 95       	ret

0000055a <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
	uint8_t temp = 0;
	
	printf("Move JOY to the right\n");
     55e:	86 eb       	ldi	r24, 0xB6	; 182
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	ac d7       	rcall	.+3928   	; 0x14bc <puts>
     564:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     566:	4f ef       	ldi	r20, 0xFF	; 255
     568:	52 e0       	ldi	r21, 0x02	; 2
     56a:	21 50       	subi	r18, 0x01	; 1
     56c:	40 40       	sbci	r20, 0x00	; 0
     56e:	50 40       	sbci	r21, 0x00	; 0
     570:	e1 f7       	brne	.-8      	; 0x56a <JOY_calibrate+0x10>
     572:	00 c0       	rjmp	.+0      	; 0x574 <JOY_calibrate+0x1a>
     574:	00 c0       	rjmp	.+0      	; 0x576 <JOY_calibrate+0x1c>
     576:	c4 e1       	ldi	r28, 0x14	; 20
     578:	d0 e0       	ldi	r29, 0x00	; 0
     57a:	60 91 0a 01 	lds	r22, 0x010A
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     57e:	70 91 0b 01 	lds	r23, 0x010B
     582:	82 e0       	ldi	r24, 0x02	; 2
     584:	75 d5       	rcall	.+2794   	; 0x1070 <ADC_request>
     586:	8f ef       	ldi	r24, 0xFF	; 255
     588:	9f e1       	ldi	r25, 0x1F	; 31
     58a:	21 e0       	ldi	r18, 0x01	; 1
     58c:	81 50       	subi	r24, 0x01	; 1
     58e:	90 40       	sbci	r25, 0x00	; 0
     590:	20 40       	sbci	r18, 0x00	; 0
     592:	e1 f7       	brne	.-8      	; 0x58c <JOY_calibrate+0x32>
     594:	00 c0       	rjmp	.+0      	; 0x596 <JOY_calibrate+0x3c>
     596:	00 00       	nop
     598:	80 91 0a 01 	lds	r24, 0x010A
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     59c:	90 91 0b 01 	lds	r25, 0x010B
     5a0:	8b d5       	rcall	.+2838   	; 0x10b8 <ADC_read>
     5a2:	90 91 11 01 	lds	r25, 0x0111
     5a6:	98 17       	cp	r25, r24
		
		if(temp > calR) {calR = temp;}
     5a8:	10 f4       	brcc	.+4      	; 0x5ae <JOY_calibrate+0x54>
     5aa:	80 93 11 01 	sts	0x0111, r24
     5ae:	21 97       	sbiw	r28, 0x01	; 1
     5b0:	20 97       	sbiw	r28, 0x00	; 0
     5b2:	19 f7       	brne	.-58     	; 0x57a <JOY_calibrate+0x20>
     5b4:	8c ec       	ldi	r24, 0xCC	; 204
	uint8_t temp = 0;
	
	printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	81 d7       	rcall	.+3842   	; 0x14bc <puts>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	printf("Move JOY to the left\n");
     5ba:	4f ef       	ldi	r20, 0xFF	; 255
     5bc:	5f ef       	ldi	r21, 0xFF	; 255
     5be:	82 e0       	ldi	r24, 0x02	; 2
     5c0:	41 50       	subi	r20, 0x01	; 1
     5c2:	50 40       	sbci	r21, 0x00	; 0
     5c4:	80 40       	sbci	r24, 0x00	; 0
     5c6:	e1 f7       	brne	.-8      	; 0x5c0 <JOY_calibrate+0x66>
     5c8:	00 c0       	rjmp	.+0      	; 0x5ca <JOY_calibrate+0x70>
     5ca:	00 c0       	rjmp	.+0      	; 0x5cc <JOY_calibrate+0x72>
     5cc:	c4 e1       	ldi	r28, 0x14	; 20
     5ce:	d0 e0       	ldi	r29, 0x00	; 0
     5d0:	60 91 0a 01 	lds	r22, 0x010A
     5d4:	70 91 0b 01 	lds	r23, 0x010B
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     5d8:	82 e0       	ldi	r24, 0x02	; 2
     5da:	4a d5       	rcall	.+2708   	; 0x1070 <ADC_request>
     5dc:	9f ef       	ldi	r25, 0xFF	; 255
     5de:	2f e1       	ldi	r18, 0x1F	; 31
     5e0:	41 e0       	ldi	r20, 0x01	; 1
     5e2:	91 50       	subi	r25, 0x01	; 1
     5e4:	20 40       	sbci	r18, 0x00	; 0
     5e6:	40 40       	sbci	r20, 0x00	; 0
     5e8:	e1 f7       	brne	.-8      	; 0x5e2 <JOY_calibrate+0x88>
     5ea:	00 c0       	rjmp	.+0      	; 0x5ec <JOY_calibrate+0x92>
     5ec:	00 00       	nop
     5ee:	80 91 0a 01 	lds	r24, 0x010A
     5f2:	90 91 0b 01 	lds	r25, 0x010B
     5f6:	60 d5       	rcall	.+2752   	; 0x10b8 <ADC_read>
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     5f8:	90 91 10 01 	lds	r25, 0x0110
     5fc:	89 17       	cp	r24, r25
     5fe:	10 f4       	brcc	.+4      	; 0x604 <JOY_calibrate+0xaa>
     600:	80 93 10 01 	sts	0x0110, r24
		
		if(temp < calL) {calL = temp;}
     604:	21 97       	sbiw	r28, 0x01	; 1
     606:	20 97       	sbiw	r28, 0x00	; 0
     608:	19 f7       	brne	.-58     	; 0x5d0 <JOY_calibrate+0x76>
     60a:	81 ee       	ldi	r24, 0xE1	; 225
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	56 d7       	rcall	.+3756   	; 0x14bc <puts>
     610:	5f ef       	ldi	r21, 0xFF	; 255
	}
	
	printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     612:	8f ef       	ldi	r24, 0xFF	; 255
     614:	92 e0       	ldi	r25, 0x02	; 2
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	printf("Move JOY up\n");
     616:	51 50       	subi	r21, 0x01	; 1
     618:	80 40       	sbci	r24, 0x00	; 0
     61a:	90 40       	sbci	r25, 0x00	; 0
     61c:	e1 f7       	brne	.-8      	; 0x616 <JOY_calibrate+0xbc>
     61e:	00 c0       	rjmp	.+0      	; 0x620 <JOY_calibrate+0xc6>
     620:	00 c0       	rjmp	.+0      	; 0x622 <JOY_calibrate+0xc8>
     622:	c4 e1       	ldi	r28, 0x14	; 20
     624:	d0 e0       	ldi	r29, 0x00	; 0
     626:	60 91 0a 01 	lds	r22, 0x010A
     62a:	70 91 0b 01 	lds	r23, 0x010B
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	1f d5       	rcall	.+2622   	; 0x1070 <ADC_request>
     632:	2f ef       	ldi	r18, 0xFF	; 255
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     634:	4f e1       	ldi	r20, 0x1F	; 31
     636:	51 e0       	ldi	r21, 0x01	; 1
     638:	21 50       	subi	r18, 0x01	; 1
     63a:	40 40       	sbci	r20, 0x00	; 0
     63c:	50 40       	sbci	r21, 0x00	; 0
     63e:	e1 f7       	brne	.-8      	; 0x638 <JOY_calibrate+0xde>
     640:	00 c0       	rjmp	.+0      	; 0x642 <JOY_calibrate+0xe8>
     642:	00 00       	nop
     644:	80 91 0a 01 	lds	r24, 0x010A
     648:	90 91 0b 01 	lds	r25, 0x010B
     64c:	35 d5       	rcall	.+2666   	; 0x10b8 <ADC_read>
     64e:	90 91 0f 01 	lds	r25, 0x010F
     652:	98 17       	cp	r25, r24
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     654:	10 f4       	brcc	.+4      	; 0x65a <JOY_calibrate+0x100>
     656:	80 93 0f 01 	sts	0x010F, r24
     65a:	21 97       	sbiw	r28, 0x01	; 1
     65c:	20 97       	sbiw	r28, 0x00	; 0
     65e:	19 f7       	brne	.-58     	; 0x626 <JOY_calibrate+0xcc>
		
		if(temp > calUp) {calUp = temp;}
     660:	8d ee       	ldi	r24, 0xED	; 237
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	2b d7       	rcall	.+3670   	; 0x14bc <puts>
     666:	8f ef       	ldi	r24, 0xFF	; 255
     668:	9f ef       	ldi	r25, 0xFF	; 255
     66a:	22 e0       	ldi	r18, 0x02	; 2
     66c:	81 50       	subi	r24, 0x01	; 1
	}
	
	printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     66e:	90 40       	sbci	r25, 0x00	; 0
     670:	20 40       	sbci	r18, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	printf("Move JOY down\n");
     672:	e1 f7       	brne	.-8      	; 0x66c <JOY_calibrate+0x112>
     674:	00 c0       	rjmp	.+0      	; 0x676 <JOY_calibrate+0x11c>
     676:	00 c0       	rjmp	.+0      	; 0x678 <JOY_calibrate+0x11e>
     678:	c4 e1       	ldi	r28, 0x14	; 20
     67a:	d0 e0       	ldi	r29, 0x00	; 0
     67c:	60 91 0a 01 	lds	r22, 0x010A
     680:	70 91 0b 01 	lds	r23, 0x010B
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	f4 d4       	rcall	.+2536   	; 0x1070 <ADC_request>
     688:	4f ef       	ldi	r20, 0xFF	; 255
     68a:	5f e1       	ldi	r21, 0x1F	; 31
     68c:	81 e0       	ldi	r24, 0x01	; 1
     68e:	41 50       	subi	r20, 0x01	; 1
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     690:	50 40       	sbci	r21, 0x00	; 0
     692:	80 40       	sbci	r24, 0x00	; 0
     694:	e1 f7       	brne	.-8      	; 0x68e <JOY_calibrate+0x134>
     696:	00 c0       	rjmp	.+0      	; 0x698 <JOY_calibrate+0x13e>
     698:	00 00       	nop
     69a:	80 91 0a 01 	lds	r24, 0x010A
     69e:	90 91 0b 01 	lds	r25, 0x010B
     6a2:	0a d5       	rcall	.+2580   	; 0x10b8 <ADC_read>
     6a4:	90 91 0e 01 	lds	r25, 0x010E
     6a8:	89 17       	cp	r24, r25
     6aa:	10 f4       	brcc	.+4      	; 0x6b0 <JOY_calibrate+0x156>
     6ac:	80 93 0e 01 	sts	0x010E, r24
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     6b0:	21 97       	sbiw	r28, 0x01	; 1
     6b2:	20 97       	sbiw	r28, 0x00	; 0
     6b4:	19 f7       	brne	.-58     	; 0x67c <JOY_calibrate+0x122>
     6b6:	30 91 0e 01 	lds	r19, 0x010E
     6ba:	20 91 0f 01 	lds	r18, 0x010F
		
		if(temp < calDown) {calDown = temp;}
     6be:	90 91 10 01 	lds	r25, 0x0110
     6c2:	80 91 11 01 	lds	r24, 0x0111
     6c6:	1f 92       	push	r1
     6c8:	3f 93       	push	r19
	}
	
	printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     6ca:	1f 92       	push	r1
     6cc:	2f 93       	push	r18
		
		if(temp < calDown) {calDown = temp;}
	}
	
	
	printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
     6ce:	1f 92       	push	r1
     6d0:	9f 93       	push	r25
     6d2:	1f 92       	push	r1
     6d4:	8f 93       	push	r24
     6d6:	8b ef       	ldi	r24, 0xFB	; 251
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	9f 93       	push	r25
     6dc:	8f 93       	push	r24
     6de:	dd d6       	rcall	.+3514   	; 0x149a <printf>
     6e0:	20 91 0f 01 	lds	r18, 0x010F
     6e4:	80 91 0e 01 	lds	r24, 0x010E
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	28 1b       	sub	r18, r24
     6ec:	31 09       	sbc	r19, r1
     6ee:	c9 01       	movw	r24, r18
     6f0:	4d b7       	in	r20, 0x3d	; 61
     6f2:	5e b7       	in	r21, 0x3e	; 62
     6f4:	46 5f       	subi	r20, 0xF6	; 246
     6f6:	5f 4f       	sbci	r21, 0xFF	; 255
     6f8:	0f b6       	in	r0, 0x3f	; 63
	
	meanVert = (calUp - calDown)/2;
     6fa:	f8 94       	cli
     6fc:	5e bf       	out	0x3e, r21	; 62
     6fe:	0f be       	out	0x3f, r0	; 63
     700:	4d bf       	out	0x3d, r20	; 61
     702:	99 23       	and	r25, r25
     704:	0c f4       	brge	.+2      	; 0x708 <JOY_calibrate+0x1ae>
     706:	01 96       	adiw	r24, 0x01	; 1
     708:	95 95       	asr	r25
     70a:	87 95       	ror	r24
     70c:	80 93 0d 01 	sts	0x010D, r24
     710:	20 91 11 01 	lds	r18, 0x0111
     714:	80 91 10 01 	lds	r24, 0x0110
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	28 1b       	sub	r18, r24
     71c:	31 09       	sbc	r19, r1
     71e:	c9 01       	movw	r24, r18
     720:	99 23       	and	r25, r25
     722:	0c f4       	brge	.+2      	; 0x726 <JOY_calibrate+0x1cc>
     724:	01 96       	adiw	r24, 0x01	; 1
     726:	95 95       	asr	r25
     728:	87 95       	ror	r24
	meanHor = (calR - calL)/2;
     72a:	80 93 0c 01 	sts	0x010C, r24
     72e:	90 91 0c 01 	lds	r25, 0x010C
     732:	80 91 0d 01 	lds	r24, 0x010D
     736:	1f 92       	push	r1
     738:	9f 93       	push	r25
     73a:	1f 92       	push	r1
     73c:	8f 93       	push	r24
     73e:	85 e2       	ldi	r24, 0x25	; 37
     740:	92 e0       	ldi	r25, 0x02	; 2
     742:	9f 93       	push	r25
     744:	8f 93       	push	r24
     746:	a9 d6       	rcall	.+3410   	; 0x149a <printf>
	
	printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	0f 90       	pop	r0
     752:	0f 90       	pop	r0
     754:	df 91       	pop	r29
     756:	cf 91       	pop	r28
     758:	08 95       	ret

0000075a <JOY_requestCurrentPosition>:
     75a:	88 37       	cpi	r24, 0x78	; 120
     75c:	39 f4       	brne	.+14     	; 0x76c <JOY_requestCurrentPosition+0x12>
     75e:	60 91 0a 01 	lds	r22, 0x010A
     762:	70 91 0b 01 	lds	r23, 0x010B
     766:	82 e0       	ldi	r24, 0x02	; 2
     768:	83 c4       	rjmp	.+2310   	; 0x1070 <ADC_request>
     76a:	08 95       	ret
     76c:	89 37       	cpi	r24, 0x79	; 121
     76e:	31 f4       	brne	.+12     	; 0x77c <JOY_requestCurrentPosition+0x22>
}
     770:	60 91 0a 01 	lds	r22, 0x010A
     774:	70 91 0b 01 	lds	r23, 0x010B
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
	{
		ADC_request(Y_channel, adc_ext_ram);
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	7a c4       	rjmp	.+2292   	; 0x1070 <ADC_request>
     77c:	08 95       	ret

0000077e <JOY_updatePosition>:
     77e:	88 37       	cpi	r24, 0x78	; 120
     780:	f9 f4       	brne	.+62     	; 0x7c0 <JOY_updatePosition+0x42>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     782:	80 91 0a 01 	lds	r24, 0x010A
     786:	90 91 0b 01 	lds	r25, 0x010B
     78a:	96 d4       	rcall	.+2348   	; 0x10b8 <ADC_read>
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	90 93 6d 03 	sts	0x036D, r25
     792:	80 93 6c 03 	sts	0x036C, r24
     796:	20 91 0c 01 	lds	r18, 0x010C
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     79a:	60 91 0c 01 	lds	r22, 0x010C
     79e:	ac 01       	movw	r20, r24
     7a0:	42 1b       	sub	r20, r18
     7a2:	51 09       	sbc	r21, r1
     7a4:	9a 01       	movw	r18, r20
     7a6:	44 e6       	ldi	r20, 0x64	; 100
     7a8:	42 9f       	mul	r20, r18
     7aa:	c0 01       	movw	r24, r0
     7ac:	43 9f       	mul	r20, r19
     7ae:	90 0d       	add	r25, r0
     7b0:	11 24       	eor	r1, r1
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	83 d4       	rcall	.+2310   	; 0x10bc <__divmodhi4>
     7b6:	70 93 71 03 	sts	0x0371, r23
     7ba:	60 93 70 03 	sts	0x0370, r22
     7be:	08 95       	ret
     7c0:	89 37       	cpi	r24, 0x79	; 121
     7c2:	f1 f4       	brne	.+60     	; 0x800 <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     7c4:	80 91 0a 01 	lds	r24, 0x010A
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     7c8:	90 91 0b 01 	lds	r25, 0x010B
     7cc:	75 d4       	rcall	.+2282   	; 0x10b8 <ADC_read>
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	90 93 6f 03 	sts	0x036F, r25
     7d4:	80 93 6e 03 	sts	0x036E, r24
     7d8:	20 91 0d 01 	lds	r18, 0x010D
     7dc:	60 91 0d 01 	lds	r22, 0x010D
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     7e0:	ac 01       	movw	r20, r24
     7e2:	42 1b       	sub	r20, r18
     7e4:	51 09       	sbc	r21, r1
     7e6:	9a 01       	movw	r18, r20
     7e8:	44 e6       	ldi	r20, 0x64	; 100
     7ea:	42 9f       	mul	r20, r18
     7ec:	c0 01       	movw	r24, r0
     7ee:	43 9f       	mul	r20, r19
     7f0:	90 0d       	add	r25, r0
     7f2:	11 24       	eor	r1, r1
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	62 d4       	rcall	.+2244   	; 0x10bc <__divmodhi4>
     7f8:	70 93 73 03 	sts	0x0373, r23
     7fc:	60 93 72 03 	sts	0x0372, r22
     800:	08 95       	ret

00000802 <JOY_calculateDirection>:
     802:	80 91 70 03 	lds	r24, 0x0370
     806:	90 91 71 03 	lds	r25, 0x0371
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     80a:	8b 35       	cpi	r24, 0x5B	; 91
     80c:	91 05       	cpc	r25, r1
     80e:	24 f0       	brlt	.+8      	; 0x818 <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     810:	83 e0       	ldi	r24, 0x03	; 3
     812:	80 93 6b 03 	sts	0x036B, r24
     816:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     818:	86 3a       	cpi	r24, 0xA6	; 166
     81a:	9f 4f       	sbci	r25, 0xFF	; 255
     81c:	24 f4       	brge	.+8      	; 0x826 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     81e:	84 e0       	ldi	r24, 0x04	; 4
     820:	80 93 6b 03 	sts	0x036B, r24
     824:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     826:	80 91 72 03 	lds	r24, 0x0372
     82a:	90 91 73 03 	lds	r25, 0x0373
     82e:	8b 35       	cpi	r24, 0x5B	; 91
     830:	91 05       	cpc	r25, r1
     832:	24 f0       	brlt	.+8      	; 0x83c <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	80 93 6b 03 	sts	0x036B, r24
     83a:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     83c:	86 3a       	cpi	r24, 0xA6	; 166
     83e:	9f 4f       	sbci	r25, 0xFF	; 255
     840:	24 f4       	brge	.+8      	; 0x84a <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     842:	82 e0       	ldi	r24, 0x02	; 2
     844:	80 93 6b 03 	sts	0x036B, r24
     848:	08 95       	ret
	else{currentDirection = CENTRE;}
     84a:	10 92 6b 03 	sts	0x036B, r1
     84e:	08 95       	ret

00000850 <JOY_getDirection>:
// Before the value is returned, the values of position in x and y direction are 
// requested from the ADC and written to the currentPosition and 
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
     850:	88 e7       	ldi	r24, 0x78	; 120
     852:	83 df       	rcall	.-250    	; 0x75a <JOY_requestCurrentPosition>
     854:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     856:	8a 95       	dec	r24
     858:	f1 f7       	brne	.-4      	; 0x856 <JOY_getDirection+0x6>
     85a:	00 00       	nop
     85c:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     85e:	8f df       	rcall	.-226    	; 0x77e <JOY_updatePosition>
     860:	89 e7       	ldi	r24, 0x79	; 121
     862:	7b df       	rcall	.-266    	; 0x75a <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     864:	82 e6       	ldi	r24, 0x62	; 98
     866:	8a 95       	dec	r24
     868:	f1 f7       	brne	.-4      	; 0x866 <JOY_getDirection+0x16>
     86a:	00 00       	nop
     86c:	89 e7       	ldi	r24, 0x79	; 121
     86e:	87 df       	rcall	.-242    	; 0x77e <JOY_updatePosition>
     870:	c8 df       	rcall	.-112    	; 0x802 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     872:	80 91 6b 03 	lds	r24, 0x036B
     876:	08 95       	ret

00000878 <MENU_addMenuItem>:
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     878:	cf 92       	push	r12
     87a:	df 92       	push	r13
     87c:	ef 92       	push	r14
     87e:	ff 92       	push	r15
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	8c 01       	movw	r16, r24
     88a:	7b 01       	movw	r14, r22
     88c:	6a 01       	movw	r12, r20
     88e:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     890:	80 91 77 03 	lds	r24, 0x0377
     894:	90 91 78 03 	lds	r25, 0x0378
     898:	89 2b       	or	r24, r25
     89a:	19 f0       	breq	.+6      	; 0x8a2 <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     89c:	8a e4       	ldi	r24, 0x4A	; 74
     89e:	92 e0       	ldi	r25, 0x02	; 2
     8a0:	0d d6       	rcall	.+3098   	; 0x14bc <puts>
     8a2:	8a e0       	ldi	r24, 0x0A	; 10
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	31 d4       	rcall	.+2146   	; 0x110a <malloc>
     8a8:	fc 01       	movw	r30, r24
     8aa:	90 93 78 03 	sts	0x0378, r25
     8ae:	80 93 77 03 	sts	0x0377, r24
     8b2:	f3 82       	std	Z+3, r15	; 0x03
     8b4:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     8b6:	11 83       	std	Z+1, r17	; 0x01
     8b8:	00 83       	st	Z, r16
	currItem->name = name;
     8ba:	cd 2b       	or	r28, r29
     8bc:	39 f0       	breq	.+14     	; 0x8cc <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     8be:	d5 82       	std	Z+5, r13	; 0x05
     8c0:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     8c6:	97 83       	std	Z+7, r25	; 0x07
     8c8:	86 83       	std	Z+6, r24	; 0x06
     8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <MENU_addMenuItem+0x5c>
     8cc:	15 82       	std	Z+5, r1	; 0x05
     8ce:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     8d0:	17 82       	std	Z+7, r1	; 0x07
     8d2:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     8d4:	df 91       	pop	r29
     8d6:	cf 91       	pop	r28
	}
}
     8d8:	1f 91       	pop	r17
     8da:	0f 91       	pop	r16
     8dc:	ff 90       	pop	r15
     8de:	ef 90       	pop	r14
     8e0:	df 90       	pop	r13
     8e2:	cf 90       	pop	r12
     8e4:	08 95       	ret

000008e6 <MENU_buildMenus>:
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
//******************************************************************************************

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     8ea:	86 e1       	ldi	r24, 0x16	; 22
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0d d4       	rcall	.+2074   	; 0x110a <malloc>
     8f0:	ec 01       	movw	r28, r24
     8f2:	90 93 7e 03 	sts	0x037E, r25
     8f6:	80 93 7d 03 	sts	0x037D, r24
     8fa:	80 e6       	ldi	r24, 0x60	; 96
	mainMenu->menuName = "MainMenu";
     8fc:	92 e0       	ldi	r25, 0x02	; 2
     8fe:	99 83       	std	Y+1, r25	; 0x01
     900:	88 83       	st	Y, r24
     902:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     904:	1c 8a       	std	Y+20, r1	; 0x14
     906:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	9b 83       	std	Y+3, r25	; 0x03
     90c:	8a 83       	std	Y+2, r24	; 0x02
     90e:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	fb d3       	rcall	.+2038   	; 0x110a <malloc>
     914:	fc 01       	movw	r30, r24
     916:	90 93 7c 03 	sts	0x037C, r25
     91a:	80 93 7b 03 	sts	0x037B, r24
     91e:	89 e6       	ldi	r24, 0x69	; 105
     920:	92 e0       	ldi	r25, 0x02	; 2
	difficultyMenu->menuName = "DifficultyMenu";
     922:	91 83       	std	Z+1, r25	; 0x01
     924:	80 83       	st	Z, r24
     926:	d5 8b       	std	Z+21, r29	; 0x15
     928:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     92a:	83 e0       	ldi	r24, 0x03	; 3
     92c:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     92e:	93 83       	std	Z+3, r25	; 0x03
     930:	82 83       	std	Z+2, r24	; 0x02
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	be 01       	movw	r22, r28
     93c:	88 e7       	ldi	r24, 0x78	; 120
     93e:	92 e0       	ldi	r25, 0x02	; 2
     940:	9b df       	rcall	.-202    	; 0x878 <MENU_addMenuItem>
     942:	60 91 7d 03 	lds	r22, 0x037D
     946:	70 91 7e 03 	lds	r23, 0x037E
	mainMenu->children[0] = currItem;
     94a:	80 91 77 03 	lds	r24, 0x0377
     94e:	90 91 78 03 	lds	r25, 0x0378
     952:	fb 01       	movw	r30, r22
     954:	95 83       	std	Z+5, r25	; 0x05
     956:	84 83       	std	Z+4, r24	; 0x04
     958:	40 91 7b 03 	lds	r20, 0x037B
     95c:	50 91 7c 03 	lds	r21, 0x037C
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     960:	21 e0       	ldi	r18, 0x01	; 1
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	81 e8       	ldi	r24, 0x81	; 129
     966:	92 e0       	ldi	r25, 0x02	; 2
     968:	87 df       	rcall	.-242    	; 0x878 <MENU_addMenuItem>
     96a:	60 91 7d 03 	lds	r22, 0x037D
     96e:	70 91 7e 03 	lds	r23, 0x037E
	mainMenu->children[1] = currItem;
     972:	80 91 77 03 	lds	r24, 0x0377
     976:	90 91 78 03 	lds	r25, 0x0378
     97a:	fb 01       	movw	r30, r22
     97c:	97 83       	std	Z+7, r25	; 0x07
     97e:	86 83       	std	Z+6, r24	; 0x06
     980:	20 e0       	ldi	r18, 0x00	; 0
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	40 e0       	ldi	r20, 0x00	; 0
     986:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     988:	8c e8       	ldi	r24, 0x8C	; 140
     98a:	92 e0       	ldi	r25, 0x02	; 2
     98c:	75 df       	rcall	.-278    	; 0x878 <MENU_addMenuItem>
     98e:	60 91 7d 03 	lds	r22, 0x037D
     992:	70 91 7e 03 	lds	r23, 0x037E
     996:	80 91 77 03 	lds	r24, 0x0377
	mainMenu->children[2] = currItem;
     99a:	90 91 78 03 	lds	r25, 0x0378
     99e:	fb 01       	movw	r30, r22
     9a0:	91 87       	std	Z+9, r25	; 0x09
     9a2:	80 87       	std	Z+8, r24	; 0x08
     9a4:	20 e0       	ldi	r18, 0x00	; 0
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	40 e0       	ldi	r20, 0x00	; 0
     9aa:	50 e0       	ldi	r21, 0x00	; 0
     9ac:	87 e9       	ldi	r24, 0x97	; 151
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
     9ae:	92 e0       	ldi	r25, 0x02	; 2
     9b0:	63 df       	rcall	.-314    	; 0x878 <MENU_addMenuItem>
     9b2:	60 91 7d 03 	lds	r22, 0x037D
     9b6:	70 91 7e 03 	lds	r23, 0x037E
     9ba:	80 91 77 03 	lds	r24, 0x0377
	mainMenu->children[3] = currItem;
     9be:	90 91 78 03 	lds	r25, 0x0378
     9c2:	fb 01       	movw	r30, r22
     9c4:	93 87       	std	Z+11, r25	; 0x0b
     9c6:	82 87       	std	Z+10, r24	; 0x0a
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	40 e0       	ldi	r20, 0x00	; 0
     9ce:	50 e0       	ldi	r21, 0x00	; 0
     9d0:	81 ea       	ldi	r24, 0xA1	; 161
     9d2:	92 e0       	ldi	r25, 0x02	; 2
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
     9d4:	51 df       	rcall	.-350    	; 0x878 <MENU_addMenuItem>
     9d6:	e0 91 7d 03 	lds	r30, 0x037D
     9da:	f0 91 7e 03 	lds	r31, 0x037E
     9de:	80 91 77 03 	lds	r24, 0x0377
     9e2:	90 91 78 03 	lds	r25, 0x0378
	mainMenu->children[4] = currItem;
     9e6:	95 87       	std	Z+13, r25	; 0x0d
     9e8:	84 87       	std	Z+12, r24	; 0x0c
     9ea:	10 92 78 03 	sts	0x0378, r1
     9ee:	10 92 77 03 	sts	0x0377, r1
     9f2:	60 91 7b 03 	lds	r22, 0x037B
     9f6:	70 91 7c 03 	lds	r23, 0x037C
	
	currItem = NULL;
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
     a00:	50 e0       	ldi	r21, 0x00	; 0
     a02:	86 ea       	ldi	r24, 0xA6	; 166
     a04:	92 e0       	ldi	r25, 0x02	; 2
     a06:	38 df       	rcall	.-400    	; 0x878 <MENU_addMenuItem>
     a08:	60 91 7b 03 	lds	r22, 0x037B
     a0c:	70 91 7c 03 	lds	r23, 0x037C
     a10:	80 91 77 03 	lds	r24, 0x0377
     a14:	90 91 78 03 	lds	r25, 0x0378
	difficultyMenu->children[0] = currItem;
     a18:	fb 01       	movw	r30, r22
     a1a:	95 83       	std	Z+5, r25	; 0x05
     a1c:	84 83       	std	Z+4, r24	; 0x04
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	8b ea       	ldi	r24, 0xAB	; 171
     a28:	92 e0       	ldi	r25, 0x02	; 2
     a2a:	26 df       	rcall	.-436    	; 0x878 <MENU_addMenuItem>
     a2c:	60 91 7b 03 	lds	r22, 0x037B
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
     a30:	70 91 7c 03 	lds	r23, 0x037C
     a34:	80 91 77 03 	lds	r24, 0x0377
     a38:	90 91 78 03 	lds	r25, 0x0378
     a3c:	fb 01       	movw	r30, r22
	difficultyMenu->children[1] = currItem;
     a3e:	97 83       	std	Z+7, r25	; 0x07
     a40:	86 83       	std	Z+6, r24	; 0x06
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	40 e0       	ldi	r20, 0x00	; 0
     a48:	50 e0       	ldi	r21, 0x00	; 0
     a4a:	82 eb       	ldi	r24, 0xB2	; 178
     a4c:	92 e0       	ldi	r25, 0x02	; 2
     a4e:	14 df       	rcall	.-472    	; 0x878 <MENU_addMenuItem>
     a50:	e0 91 7b 03 	lds	r30, 0x037B
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
     a54:	f0 91 7c 03 	lds	r31, 0x037C
     a58:	80 91 77 03 	lds	r24, 0x0377
     a5c:	90 91 78 03 	lds	r25, 0x0378
     a60:	91 87       	std	Z+9, r25	; 0x09
     a62:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	08 95       	ret

00000a6a <MENU_printMenuItem>:
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	ec 01       	movw	r28, r24
     a70:	cb 01       	movw	r24, r22
     a72:	20 97       	sbiw	r28, 0x00	; 0
     a74:	49 f0       	breq	.+18     	; 0xa88 <MENU_printMenuItem+0x1e>
     a76:	60 91 12 01 	lds	r22, 0x0112
}
     a7a:	70 91 13 01 	lds	r23, 0x0113

void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
     a7e:	0a d1       	rcall	.+532    	; 0xc94 <OLED_goto>
     a80:	88 81       	ld	r24, Y
		OLED_printString(item->name);
     a82:	99 81       	ldd	r25, Y+1	; 0x01
     a84:	5d d1       	rcall	.+698    	; 0xd40 <OLED_printString>
     a86:	07 c0       	rjmp	.+14     	; 0xa96 <MENU_printMenuItem+0x2c>
     a88:	87 eb       	ldi	r24, 0xB7	; 183
     a8a:	92 e0       	ldi	r25, 0x02	; 2
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
     a8c:	9f 93       	push	r25
     a8e:	8f 93       	push	r24
     a90:	04 d5       	rcall	.+2568   	; 0x149a <printf>
     a92:	0f 90       	pop	r0
     a94:	0f 90       	pop	r0
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <MENU_printMenu>:
	}
}
     a9c:	8f 92       	push	r8
     a9e:	9f 92       	push	r9
     aa0:	af 92       	push	r10

void MENU_printMenu(menuNode_t* menu, int noElements)
{
     aa2:	bf 92       	push	r11
     aa4:	cf 92       	push	r12
     aa6:	df 92       	push	r13
     aa8:	ef 92       	push	r14
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	5c 01       	movw	r10, r24
     ab6:	6b 01       	movw	r12, r22
	printf("%s: Number of elements:%d\n", menu->menuName, noElements);
     ab8:	df 92       	push	r13
     aba:	6f 93       	push	r22
     abc:	dc 01       	movw	r26, r24
     abe:	11 96       	adiw	r26, 0x01	; 1
     ac0:	8c 91       	ld	r24, X
     ac2:	11 97       	sbiw	r26, 0x01	; 1
     ac4:	8f 93       	push	r24
     ac6:	8c 91       	ld	r24, X
     ac8:	8f 93       	push	r24
     aca:	87 ec       	ldi	r24, 0xC7	; 199
     acc:	92 e0       	ldi	r25, 0x02	; 2
     ace:	9f 93       	push	r25
     ad0:	8f 93       	push	r24
     ad2:	e3 d4       	rcall	.+2502   	; 0x149a <printf>
     ad4:	0f 90       	pop	r0
	
	for(int i = 0; i < noElements; i++)
     ad6:	0f 90       	pop	r0
     ad8:	0f 90       	pop	r0
     ada:	0f 90       	pop	r0
     adc:	0f 90       	pop	r0
     ade:	0f 90       	pop	r0
     ae0:	1c 14       	cp	r1, r12
     ae2:	1d 04       	cpc	r1, r13
     ae4:	0c f0       	brlt	.+2      	; 0xae8 <MENU_printMenu+0x4c>
     ae6:	42 c0       	rjmp	.+132    	; 0xb6c <MENU_printMenu+0xd0>
     ae8:	85 01       	movw	r16, r10
     aea:	0c 5f       	subi	r16, 0xFC	; 252
     aec:	1f 4f       	sbci	r17, 0xFF	; 255
     aee:	c0 e0       	ldi	r28, 0x00	; 0
     af0:	d0 e0       	ldi	r29, 0x00	; 0
     af2:	0f 2e       	mov	r0, r31
	{
		MENU_printMenuItem(menu->children[i], i);
		printf("%d: %s\n", i, menu->children[i]->name);
     af4:	f2 ee       	ldi	r31, 0xE2	; 226
     af6:	ef 2e       	mov	r14, r31
     af8:	f2 e0       	ldi	r31, 0x02	; 2
     afa:	ff 2e       	mov	r15, r31
     afc:	f0 2d       	mov	r31, r0
     afe:	0f 2e       	mov	r0, r31
		if(menu->children[i]->hasChildMenu)
		{
			printf("*****Child Menu: %s\n", menu->children[i]->childMenu->menuName);
     b00:	fa ee       	ldi	r31, 0xEA	; 234
     b02:	8f 2e       	mov	r8, r31
     b04:	f2 e0       	ldi	r31, 0x02	; 2
     b06:	9f 2e       	mov	r9, r31
     b08:	f0 2d       	mov	r31, r0
     b0a:	be 01       	movw	r22, r28
{
	printf("%s: Number of elements:%d\n", menu->menuName, noElements);
	
	for(int i = 0; i < noElements; i++)
	{
		MENU_printMenuItem(menu->children[i], i);
     b0c:	f8 01       	movw	r30, r16
     b0e:	80 81       	ld	r24, Z
     b10:	91 81       	ldd	r25, Z+1	; 0x01
     b12:	ab df       	rcall	.-170    	; 0xa6a <MENU_printMenuItem>
     b14:	d8 01       	movw	r26, r16
     b16:	ed 91       	ld	r30, X+
		printf("%d: %s\n", i, menu->children[i]->name);
     b18:	fc 91       	ld	r31, X
     b1a:	81 81       	ldd	r24, Z+1	; 0x01
     b1c:	8f 93       	push	r24
     b1e:	80 81       	ld	r24, Z
     b20:	8f 93       	push	r24
     b22:	df 93       	push	r29
     b24:	cf 93       	push	r28
     b26:	ff 92       	push	r15
     b28:	ef 92       	push	r14
     b2a:	b7 d4       	rcall	.+2414   	; 0x149a <printf>
     b2c:	d8 01       	movw	r26, r16
     b2e:	ed 91       	ld	r30, X+
     b30:	fd 91       	ld	r31, X+
		if(menu->children[i]->hasChildMenu)
     b32:	8d 01       	movw	r16, r26
     b34:	0f 90       	pop	r0
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	0f 90       	pop	r0
     b3c:	0f 90       	pop	r0
     b3e:	0f 90       	pop	r0
     b40:	86 81       	ldd	r24, Z+6	; 0x06
     b42:	97 81       	ldd	r25, Z+7	; 0x07
     b44:	89 2b       	or	r24, r25
     b46:	71 f0       	breq	.+28     	; 0xb64 <MENU_printMenu+0xc8>
     b48:	04 80       	ldd	r0, Z+4	; 0x04
     b4a:	f5 81       	ldd	r31, Z+5	; 0x05
     b4c:	e0 2d       	mov	r30, r0
		{
			printf("*****Child Menu: %s\n", menu->children[i]->childMenu->menuName);
     b4e:	81 81       	ldd	r24, Z+1	; 0x01
     b50:	8f 93       	push	r24
     b52:	80 81       	ld	r24, Z
     b54:	8f 93       	push	r24
     b56:	9f 92       	push	r9
     b58:	8f 92       	push	r8
     b5a:	9f d4       	rcall	.+2366   	; 0x149a <printf>
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
     b60:	0f 90       	pop	r0
     b62:	0f 90       	pop	r0
     b64:	21 96       	adiw	r28, 0x01	; 1
     b66:	cc 15       	cp	r28, r12
     b68:	dd 05       	cpc	r29, r13
     b6a:	79 f6       	brne	.-98     	; 0xb0a <MENU_printMenu+0x6e>

void MENU_printMenu(menuNode_t* menu, int noElements)
{
	printf("%s: Number of elements:%d\n", menu->menuName, noElements);
	
	for(int i = 0; i < noElements; i++)
     b6c:	b0 92 7a 03 	sts	0x037A, r11
     b70:	a0 92 79 03 	sts	0x0379, r10
		{
			printf("*****Child Menu: %s\n", menu->children[i]->childMenu->menuName);
		}
	}
	//currentMenu points to currently printed menu
	currentMenu = menu;
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
}
     b7c:	ff 90       	pop	r15
     b7e:	ef 90       	pop	r14
     b80:	df 90       	pop	r13
     b82:	cf 90       	pop	r12
     b84:	bf 90       	pop	r11
     b86:	af 90       	pop	r10
     b88:	9f 90       	pop	r9
     b8a:	8f 90       	pop	r8
     b8c:	08 95       	ret

00000b8e <MENU_moveUp>:
     b8e:	80 91 74 03 	lds	r24, 0x0374
     b92:	90 91 75 03 	lds	r25, 0x0375
	}
}

void MENU_moveUp()
{
	if(currentPosition >0)
     b96:	18 16       	cp	r1, r24
     b98:	19 06       	cpc	r1, r25
     b9a:	ac f4       	brge	.+42     	; 0xbc6 <MENU_moveUp+0x38>
	{
		currentPosition = currentPosition - 1;
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	90 93 75 03 	sts	0x0375, r25
     ba2:	80 93 74 03 	sts	0x0374, r24
		printf("Curr Pos Up: %d\n", currentPosition);
     ba6:	9f 93       	push	r25
     ba8:	8f 93       	push	r24
     baa:	8f ef       	ldi	r24, 0xFF	; 255
     bac:	92 e0       	ldi	r25, 0x02	; 2
     bae:	9f 93       	push	r25
     bb0:	8f 93       	push	r24
     bb2:	73 d4       	rcall	.+2278   	; 0x149a <printf>
     bb4:	80 91 74 03 	lds	r24, 0x0374
		OLED_moveArrow(currentPosition);
     bb8:	90 91 75 03 	lds	r25, 0x0375
     bbc:	18 d1       	rcall	.+560    	; 0xdee <OLED_moveArrow>
     bbe:	0f 90       	pop	r0
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	08 95       	ret

00000bc8 <MENU_moveDown>:
     bc8:	80 91 74 03 	lds	r24, 0x0374
	}
}

void MENU_moveDown()
{
	if(currentPosition < MAX_MENU_SIZE -1)
     bcc:	90 91 75 03 	lds	r25, 0x0375
     bd0:	87 30       	cpi	r24, 0x07	; 7
     bd2:	91 05       	cpc	r25, r1
     bd4:	ac f4       	brge	.+42     	; 0xc00 <MENU_moveDown+0x38>
	{
		currentPosition = currentPosition + 1;
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	90 93 75 03 	sts	0x0375, r25
     bdc:	80 93 74 03 	sts	0x0374, r24
		printf("Curr Pos Down: %d\n", currentPosition);
     be0:	9f 93       	push	r25
     be2:	8f 93       	push	r24
     be4:	80 e1       	ldi	r24, 0x10	; 16
     be6:	93 e0       	ldi	r25, 0x03	; 3
     be8:	9f 93       	push	r25
     bea:	8f 93       	push	r24
     bec:	56 d4       	rcall	.+2220   	; 0x149a <printf>
     bee:	80 91 74 03 	lds	r24, 0x0374
		OLED_moveArrow(currentPosition);
     bf2:	90 91 75 03 	lds	r25, 0x0375
     bf6:	fb d0       	rcall	.+502    	; 0xdee <OLED_moveArrow>
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	08 95       	ret

00000c02 <MENU_moveRight>:
     c02:	80 91 79 03 	lds	r24, 0x0379
}

void MENU_moveRight()
{
	//MENU_init(mainMenu, mainMenuItems);
	if(currentMenu)
     c06:	90 91 7a 03 	lds	r25, 0x037A
     c0a:	89 2b       	or	r24, r25
     c0c:	41 f0       	breq	.+16     	; 0xc1e <MENU_moveRight+0x1c>
	MENU_printMenu(mainMenu, mainMenu->noChilds);
     c0e:	80 91 7d 03 	lds	r24, 0x037D
     c12:	90 91 7e 03 	lds	r25, 0x037E
     c16:	fc 01       	movw	r30, r24
     c18:	62 81       	ldd	r22, Z+2	; 0x02
     c1a:	73 81       	ldd	r23, Z+3	; 0x03
     c1c:	3f cf       	rjmp	.-386    	; 0xa9c <MENU_printMenu>
     c1e:	08 95       	ret

00000c20 <MENU_waitForInput>:
     c20:	80 91 74 03 	lds	r24, 0x0374
	currentMenu = menu;
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
     c24:	90 91 75 03 	lds	r25, 0x0375
     c28:	e2 d0       	rcall	.+452    	; 0xdee <OLED_moveArrow>
     c2a:	80 91 76 03 	lds	r24, 0x0376
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
     c2e:	88 23       	and	r24, r24
     c30:	11 f1       	breq	.+68     	; 0xc76 <MENU_waitForInput+0x56>
     c32:	0e de       	rcall	.-996    	; 0x850 <JOY_getDirection>
	{
		currDir = JOY_getDirection();
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	89 f0       	breq	.+34     	; 0xc5a <MENU_waitForInput+0x3a>
		switch(currDir){
     c38:	18 f4       	brcc	.+6      	; 0xc40 <MENU_waitForInput+0x20>
     c3a:	81 30       	cpi	r24, 0x01	; 1
     c3c:	61 f0       	breq	.+24     	; 0xc56 <MENU_waitForInput+0x36>
     c3e:	0e c0       	rjmp	.+28     	; 0xc5c <MENU_waitForInput+0x3c>
     c40:	83 30       	cpi	r24, 0x03	; 3
     c42:	39 f0       	breq	.+14     	; 0xc52 <MENU_waitForInput+0x32>
     c44:	84 30       	cpi	r24, 0x04	; 4
     c46:	51 f4       	brne	.+20     	; 0xc5c <MENU_waitForInput+0x3c>
     c48:	10 92 75 03 	sts	0x0375, r1
	MENU_printMenu(mainMenu, mainMenu->noChilds);
}

void MENU_moveLeft()
{
	currentPosition = 0;
     c4c:	10 92 74 03 	sts	0x0374, r1
     c50:	05 c0       	rjmp	.+10     	; 0xc5c <MENU_waitForInput+0x3c>
     c52:	d7 df       	rcall	.-82     	; 0xc02 <MENU_moveRight>
     c54:	03 c0       	rjmp	.+6      	; 0xc5c <MENU_waitForInput+0x3c>
			case LEFT:
			MENU_moveLeft();
			break;
			
			case RIGHT:
			MENU_moveRight();
     c56:	9b df       	rcall	.-202    	; 0xb8e <MENU_moveUp>
     c58:	01 c0       	rjmp	.+2      	; 0xc5c <MENU_waitForInput+0x3c>
			break;
     c5a:	b6 df       	rcall	.-148    	; 0xbc8 <MENU_moveDown>
			
			case UP:
			MENU_moveUp();
     c5c:	2f ef       	ldi	r18, 0xFF	; 255
     c5e:	8f ef       	ldi	r24, 0xFF	; 255
			break;
     c60:	91 e1       	ldi	r25, 0x11	; 17
			
			case DOWN:
			MENU_moveDown();
     c62:	21 50       	subi	r18, 0x01	; 1
     c64:	80 40       	sbci	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c66:	90 40       	sbci	r25, 0x00	; 0
     c68:	e1 f7       	brne	.-8      	; 0xc62 <MENU_waitForInput+0x42>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <MENU_waitForInput+0x4c>
     c6c:	00 00       	nop
     c6e:	80 91 76 03 	lds	r24, 0x0376
     c72:	81 11       	cpse	r24, r1
     c74:	de cf       	rjmp	.-68     	; 0xc32 <MENU_waitForInput+0x12>
     c76:	08 95       	ret

00000c78 <MENU_activate>:
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	80 93 76 03 	sts	0x0376, r24
     c7e:	33 de       	rcall	.-922    	; 0x8e6 <MENU_buildMenus>
     c80:	80 91 7d 03 	lds	r24, 0x037D
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
     c84:	90 91 7e 03 	lds	r25, 0x037E
     c88:	fc 01       	movw	r30, r24
     c8a:	62 81       	ldd	r22, Z+2	; 0x02
     c8c:	73 81       	ldd	r23, Z+3	; 0x03
     c8e:	06 df       	rcall	.-500    	; 0xa9c <MENU_printMenu>
     c90:	c7 cf       	rjmp	.-114    	; 0xc20 <MENU_waitForInput>
     c92:	08 95       	ret

00000c94 <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
     c94:	26 2f       	mov	r18, r22
     c96:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
     c98:	75 95       	asr	r23
     c9a:	67 95       	ror	r22
     c9c:	75 95       	asr	r23
     c9e:	67 95       	ror	r22
     ca0:	75 95       	asr	r23
     ca2:	67 95       	ror	r22
     ca4:	75 95       	asr	r23
     ca6:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
     ca8:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
     caa:	80 55       	subi	r24, 0x50	; 80
     cac:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
     cae:	e0 91 16 01 	lds	r30, 0x0116
     cb2:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     cb6:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
     cb8:	e0 91 16 01 	lds	r30, 0x0116
     cbc:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     cc0:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
     cc2:	e0 91 16 01 	lds	r30, 0x0116
     cc6:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     cca:	60 83       	st	Z, r22
     ccc:	08 95       	ret

00000cce <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
     cce:	1f 93       	push	r17
     cd0:	cf 93       	push	r28
     cd2:	df 93       	push	r29
     cd4:	c1 e0       	ldi	r28, 0x01	; 1
     cd6:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
     cdc:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
     cde:	60 e0       	ldi	r22, 0x00	; 0
     ce0:	70 e0       	ldi	r23, 0x00	; 0
     ce2:	d8 df       	rcall	.-80     	; 0xc94 <OLED_goto>
     ce4:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
     ce6:	e0 91 14 01 	lds	r30, 0x0114
		{
			OLED_writeByteToOLED(oled_data, 0x00);
     cea:	f0 91 15 01 	lds	r31, 0x0115
     cee:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     cf0:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
     cf2:	80 38       	cpi	r24, 0x80	; 128
     cf4:	c1 f7       	brne	.-16     	; 0xce6 <OLED_clear+0x18>
     cf6:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
     cf8:	9d 2f       	mov	r25, r29
     cfa:	21 96       	adiw	r28, 0x01	; 1
     cfc:	c9 30       	cpi	r28, 0x09	; 9
     cfe:	d1 05       	cpc	r29, r1
     d00:	71 f7       	brne	.-36     	; 0xcde <OLED_clear+0x10>
     d02:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
     d04:	cf 91       	pop	r28
     d06:	1f 91       	pop	r17
     d08:	08 95       	ret

00000d0a <OLED_printCharacter>:
     d0a:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
     d0c:	28 2f       	mov	r18, r24
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	22 0f       	add	r18, r18
     d12:	33 1f       	adc	r19, r19
     d14:	22 0f       	add	r18, r18
     d16:	33 1f       	adc	r19, r19
     d18:	22 0f       	add	r18, r18
     d1a:	33 1f       	adc	r19, r19
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	20 59       	subi	r18, 0x90	; 144
     d22:	3f 4f       	sbci	r19, 0xFF	; 255
     d24:	f9 01       	movw	r30, r18
     d26:	e8 0f       	add	r30, r24
     d28:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
     d2a:	e4 91       	lpm	r30, Z
     d2c:	a0 91 14 01 	lds	r26, 0x0114
     d30:	b0 91 15 01 	lds	r27, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     d34:	ec 93       	st	X, r30
     d36:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
     d38:	88 30       	cpi	r24, 0x08	; 8
     d3a:	91 05       	cpc	r25, r1
     d3c:	99 f7       	brne	.-26     	; 0xd24 <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
     d3e:	08 95       	ret

00000d40 <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
     d40:	1f 93       	push	r17
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
     d48:	10 e0       	ldi	r17, 0x00	; 0
     d4a:	06 c0       	rjmp	.+12     	; 0xd58 <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
     d4c:	fe 01       	movw	r30, r28
     d4e:	e8 0f       	add	r30, r24
     d50:	f9 1f       	adc	r31, r25
     d52:	80 81       	ld	r24, Z
     d54:	da df       	rcall	.-76     	; 0xd0a <OLED_printCharacter>
     d56:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
     d58:	81 2f       	mov	r24, r17
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	fe 01       	movw	r30, r28
     d5e:	01 90       	ld	r0, Z+
     d60:	00 20       	and	r0, r0
     d62:	e9 f7       	brne	.-6      	; 0xd5e <OLED_printString+0x1e>
     d64:	31 97       	sbiw	r30, 0x01	; 1
     d66:	ec 1b       	sub	r30, r28
     d68:	fd 0b       	sbc	r31, r29
     d6a:	8e 17       	cp	r24, r30
     d6c:	9f 07       	cpc	r25, r31
     d6e:	70 f3       	brcs	.-36     	; 0xd4c <OLED_printString+0xc>
     d70:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
     d72:	cf 91       	pop	r28
     d74:	1f 91       	pop	r17
     d76:	08 95       	ret

00000d78 <OLED_printArrow>:
     d78:	e0 91 14 01 	lds	r30, 0x0114
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
     d7c:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     d80:	88 e1       	ldi	r24, 0x18	; 24
     d82:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
     d84:	e0 91 14 01 	lds	r30, 0x0114
     d88:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     d8c:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
     d8e:	e0 91 14 01 	lds	r30, 0x0114
     d92:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     d96:	9e e7       	ldi	r25, 0x7E	; 126
     d98:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
     d9a:	e0 91 14 01 	lds	r30, 0x0114
     d9e:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     da2:	9c e3       	ldi	r25, 0x3C	; 60
     da4:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
     da6:	e0 91 14 01 	lds	r30, 0x0114
     daa:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     dae:	80 83       	st	Z, r24
     db0:	08 95       	ret

00000db2 <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
     db2:	1f 93       	push	r17
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	c1 e0       	ldi	r28, 0x01	; 1
     dba:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
     dc0:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
     dc2:	60 e0       	ldi	r22, 0x00	; 0
     dc4:	70 e0       	ldi	r23, 0x00	; 0
     dc6:	66 df       	rcall	.-308    	; 0xc94 <OLED_goto>
     dc8:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
     dca:	e0 91 14 01 	lds	r30, 0x0114
		{
			OLED_writeByteToOLED(oled_data, 0x00);
     dce:	f0 91 15 01 	lds	r31, 0x0115
     dd2:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     dd4:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
     dd6:	85 30       	cpi	r24, 0x05	; 5
     dd8:	c1 f7       	brne	.-16     	; 0xdca <OLED_clearArrow+0x18>
     dda:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
     ddc:	9d 2f       	mov	r25, r29
     dde:	21 96       	adiw	r28, 0x01	; 1
     de0:	c9 30       	cpi	r28, 0x09	; 9
     de2:	d1 05       	cpc	r29, r1
     de4:	71 f7       	brne	.-36     	; 0xdc2 <OLED_clearArrow+0x10>
     de6:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
     de8:	cf 91       	pop	r28
     dea:	1f 91       	pop	r17
     dec:	08 95       	ret

00000dee <OLED_moveArrow>:
     dee:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
     df0:	df 93       	push	r29
     df2:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
     df4:	de df       	rcall	.-68     	; 0xdb2 <OLED_clearArrow>
     df6:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	ce 01       	movw	r24, r28
     dfc:	4b df       	rcall	.-362    	; 0xc94 <OLED_goto>
     dfe:	bc df       	rcall	.-136    	; 0xd78 <OLED_printArrow>
     e00:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
     e02:	cf 91       	pop	r28
     e04:	08 95       	ret

00000e06 <OLED_setContrast>:
}
     e06:	e0 91 16 01 	lds	r30, 0x0116
     e0a:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e0e:	91 e8       	ldi	r25, 0x81	; 129
     e10:	90 83       	st	Z, r25
void OLED_setContrast(uint8_t contrast)
{
	// activate contrast contol
	OLED_writeByteToOLED(oled_cmd, 0x81);
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
     e12:	e0 91 16 01 	lds	r30, 0x0116
     e16:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e1a:	80 83       	st	Z, r24
     e1c:	08 95       	ret

00000e1e <OLED_fadeIn>:
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
}

void OLED_fadeIn(void)
{
     e1e:	0f 93       	push	r16
     e20:	1f 93       	push	r17
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	c0 e0       	ldi	r28, 0x00	; 0
     e28:	d0 e0       	ldi	r29, 0x00	; 0
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
	{
		OLED_setContrast(i);
		_delay_ms(4);
		printf("%d\n",i);
     e2a:	02 eb       	ldi	r16, 0xB2	; 178
     e2c:	11 e0       	ldi	r17, 0x01	; 1
void OLED_fadeIn(void)
{
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
	{
		OLED_setContrast(i);
     e2e:	8c 2f       	mov	r24, r28
     e30:	ea df       	rcall	.-44     	; 0xe06 <OLED_setContrast>
     e32:	83 e3       	ldi	r24, 0x33	; 51
     e34:	93 e1       	ldi	r25, 0x13	; 19
     e36:	01 97       	sbiw	r24, 0x01	; 1
     e38:	f1 f7       	brne	.-4      	; 0xe36 <OLED_fadeIn+0x18>
     e3a:	df 93       	push	r29
		_delay_ms(4);
		printf("%d\n",i);
     e3c:	cf 93       	push	r28
     e3e:	1f 93       	push	r17
     e40:	0f 93       	push	r16
     e42:	2b d3       	rcall	.+1622   	; 0x149a <printf>
     e44:	21 96       	adiw	r28, 0x01	; 1
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
}

void OLED_fadeIn(void)
{
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
     e4a:	0f 90       	pop	r0
     e4c:	0f 90       	pop	r0
     e4e:	cf 3f       	cpi	r28, 0xFF	; 255
     e50:	d1 05       	cpc	r29, r1
     e52:	69 f7       	brne	.-38     	; 0xe2e <OLED_fadeIn+0x10>
     e54:	83 e2       	ldi	r24, 0x23	; 35
     e56:	93 e0       	ldi	r25, 0x03	; 3
	{
		OLED_setContrast(i);
		_delay_ms(4);
		printf("%d\n",i);
	}
	printf("was here");
     e58:	9f 93       	push	r25
     e5a:	8f 93       	push	r24
     e5c:	1e d3       	rcall	.+1596   	; 0x149a <printf>
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	df 91       	pop	r29
     e64:	cf 91       	pop	r28
     e66:	1f 91       	pop	r17
}
     e68:	0f 91       	pop	r16
     e6a:	08 95       	ret

00000e6c <OLED_splashScreen>:
     e6c:	2f ef       	ldi	r18, 0xFF	; 255
     e6e:	8f ef       	ldi	r24, 0xFF	; 255
     e70:	92 e0       	ldi	r25, 0x02	; 2
     e72:	21 50       	subi	r18, 0x01	; 1
     e74:	80 40       	sbci	r24, 0x00	; 0
     e76:	90 40       	sbci	r25, 0x00	; 0
     e78:	e1 f7       	brne	.-8      	; 0xe72 <OLED_splashScreen+0x6>
     e7a:	00 c0       	rjmp	.+0      	; 0xe7c <OLED_splashScreen+0x10>
     e7c:	00 c0       	rjmp	.+0      	; 0xe7e <OLED_splashScreen+0x12>
}

void OLED_splashScreen(void)
{
	_delay_ms(200);
	OLED_setContrast(0);
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	c2 df       	rcall	.-124    	; 0xe06 <OLED_setContrast>
     e82:	64 e0       	ldi	r22, 0x04	; 4
	OLED_goto(2,4);
     e84:	70 e0       	ldi	r23, 0x00	; 0
     e86:	82 e0       	ldi	r24, 0x02	; 2
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	04 df       	rcall	.-504    	; 0xc94 <OLED_goto>
     e8c:	8c e2       	ldi	r24, 0x2C	; 44
     e8e:	93 e0       	ldi	r25, 0x03	; 3
	OLED_printString("Group 46 Soft");
     e90:	57 df       	rcall	.-338    	; 0xd40 <OLED_printString>
     e92:	c5 df       	rcall	.-118    	; 0xe1e <OLED_fadeIn>
     e94:	2f ef       	ldi	r18, 0xFF	; 255
     e96:	8f e7       	ldi	r24, 0x7F	; 127
	OLED_fadeIn();
     e98:	97 e0       	ldi	r25, 0x07	; 7
     e9a:	21 50       	subi	r18, 0x01	; 1
     e9c:	80 40       	sbci	r24, 0x00	; 0
     e9e:	90 40       	sbci	r25, 0x00	; 0
     ea0:	e1 f7       	brne	.-8      	; 0xe9a <OLED_splashScreen+0x2e>
     ea2:	00 c0       	rjmp	.+0      	; 0xea4 <OLED_splashScreen+0x38>
     ea4:	00 00       	nop
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	ae df       	rcall	.-164    	; 0xe06 <OLED_setContrast>
     eaa:	6c e1       	ldi	r22, 0x1C	; 28
     eac:	70 e0       	ldi	r23, 0x00	; 0
	_delay_ms(500);
	OLED_setContrast(0);
     eae:	84 e0       	ldi	r24, 0x04	; 4
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	f0 de       	rcall	.-544    	; 0xc94 <OLED_goto>
	OLED_goto(4,28);
     eb4:	8a e3       	ldi	r24, 0x3A	; 58
     eb6:	93 e0       	ldi	r25, 0x03	; 3
     eb8:	43 df       	rcall	.-378    	; 0xd40 <OLED_printString>
     eba:	68 e1       	ldi	r22, 0x18	; 24
     ebc:	70 e0       	ldi	r23, 0x00	; 0
     ebe:	85 e0       	ldi	r24, 0x05	; 5
	OLED_printString("proudly");
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	e8 de       	rcall	.-560    	; 0xc94 <OLED_goto>
     ec4:	82 e4       	ldi	r24, 0x42	; 66
     ec6:	93 e0       	ldi	r25, 0x03	; 3
	OLED_goto(5,24);	
     ec8:	3b df       	rcall	.-394    	; 0xd40 <OLED_printString>
     eca:	a9 df       	rcall	.-174    	; 0xe1e <OLED_fadeIn>
     ecc:	2f ef       	ldi	r18, 0xFF	; 255
     ece:	8f e7       	ldi	r24, 0x7F	; 127
     ed0:	97 e0       	ldi	r25, 0x07	; 7
     ed2:	21 50       	subi	r18, 0x01	; 1
	OLED_printString("presents");
     ed4:	80 40       	sbci	r24, 0x00	; 0
     ed6:	90 40       	sbci	r25, 0x00	; 0
     ed8:	e1 f7       	brne	.-8      	; 0xed2 <OLED_splashScreen+0x66>
     eda:	00 c0       	rjmp	.+0      	; 0xedc <OLED_splashScreen+0x70>
	OLED_fadeIn();
     edc:	00 00       	nop
     ede:	f7 de       	rcall	.-530    	; 0xcce <OLED_clear>
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	91 df       	rcall	.-222    	; 0xe06 <OLED_setContrast>
     ee4:	6c e1       	ldi	r22, 0x1C	; 28
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	83 e0       	ldi	r24, 0x03	; 3
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	d3 de       	rcall	.-602    	; 0xc94 <OLED_goto>
     eee:	8b e4       	ldi	r24, 0x4B	; 75
     ef0:	93 e0       	ldi	r25, 0x03	; 3
	_delay_ms(500);
	
	OLED_clear();
     ef2:	26 df       	rcall	.-436    	; 0xd40 <OLED_printString>
     ef4:	94 df       	rcall	.-216    	; 0xe1e <OLED_fadeIn>
	OLED_setContrast(0);
     ef6:	2f ef       	ldi	r18, 0xFF	; 255
     ef8:	8f ef       	ldi	r24, 0xFF	; 255
     efa:	9e e0       	ldi	r25, 0x0E	; 14
	OLED_goto(3, 28);
     efc:	21 50       	subi	r18, 0x01	; 1
     efe:	80 40       	sbci	r24, 0x00	; 0
     f00:	90 40       	sbci	r25, 0x00	; 0
     f02:	e1 f7       	brne	.-8      	; 0xefc <OLED_splashScreen+0x90>
     f04:	00 c0       	rjmp	.+0      	; 0xf06 <OLED_splashScreen+0x9a>
     f06:	00 00       	nop
	OLED_printString("FIFA 18");
     f08:	e2 de       	rcall	.-572    	; 0xcce <OLED_clear>
     f0a:	80 e5       	ldi	r24, 0x50	; 80
     f0c:	7c cf       	rjmp	.-264    	; 0xe06 <OLED_setContrast>
     f0e:	08 95       	ret

00000f10 <OLED_init>:
	OLED_fadeIn();
     f10:	e0 91 16 01 	lds	r30, 0x0116
     f14:	f0 91 17 01 	lds	r31, 0x0117
     f18:	8e ea       	ldi	r24, 0xAE	; 174
     f1a:	80 83       	st	Z, r24
     f1c:	e0 91 16 01 	lds	r30, 0x0116
     f20:	f0 91 17 01 	lds	r31, 0x0117
     f24:	81 ea       	ldi	r24, 0xA1	; 161
	_delay_ms(1000);
	
	// clean up
	OLED_clear(); // wipe screen
     f26:	80 83       	st	Z, r24
     f28:	e0 91 16 01 	lds	r30, 0x0116
	OLED_setContrast(0x50); // back to standard contrast
     f2c:	f0 91 17 01 	lds	r31, 0x0117
     f30:	8a ed       	ldi	r24, 0xDA	; 218
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f32:	80 83       	st	Z, r24
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
     f34:	e0 91 16 01 	lds	r30, 0x0116
     f38:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f3c:	82 e1       	ldi	r24, 0x12	; 18
     f3e:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
     f40:	e0 91 16 01 	lds	r30, 0x0116
     f44:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f48:	88 ec       	ldi	r24, 0xC8	; 200
     f4a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
     f4c:	e0 91 16 01 	lds	r30, 0x0116
     f50:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f54:	88 ea       	ldi	r24, 0xA8	; 168
     f56:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
     f58:	e0 91 16 01 	lds	r30, 0x0116
     f5c:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f60:	8f e3       	ldi	r24, 0x3F	; 63
     f62:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
     f64:	e0 91 16 01 	lds	r30, 0x0116
     f68:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f6c:	85 ed       	ldi	r24, 0xD5	; 213
     f6e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
     f70:	e0 91 16 01 	lds	r30, 0x0116
     f74:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f78:	80 e8       	ldi	r24, 0x80	; 128
     f7a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
     f7c:	e0 91 16 01 	lds	r30, 0x0116
     f80:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f84:	81 e8       	ldi	r24, 0x81	; 129
     f86:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
     f88:	e0 91 16 01 	lds	r30, 0x0116
     f8c:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f90:	80 e5       	ldi	r24, 0x50	; 80
     f92:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
     f94:	e0 91 16 01 	lds	r30, 0x0116
     f98:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f9c:	89 ed       	ldi	r24, 0xD9	; 217
     f9e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
     fa0:	e0 91 16 01 	lds	r30, 0x0116
     fa4:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     fa8:	81 e2       	ldi	r24, 0x21	; 33
     faa:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
     fac:	e0 91 16 01 	lds	r30, 0x0116
     fb0:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     fb4:	80 e2       	ldi	r24, 0x20	; 32
     fb6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
     fb8:	e0 91 16 01 	lds	r30, 0x0116
     fbc:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     fc0:	82 e0       	ldi	r24, 0x02	; 2
     fc2:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
     fc4:	e0 91 16 01 	lds	r30, 0x0116
     fc8:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     fcc:	8b ed       	ldi	r24, 0xDB	; 219
     fce:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
     fd0:	e0 91 16 01 	lds	r30, 0x0116
     fd4:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     fd8:	80 e3       	ldi	r24, 0x30	; 48
     fda:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
     fdc:	e0 91 16 01 	lds	r30, 0x0116
     fe0:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     fe4:	8d ea       	ldi	r24, 0xAD	; 173
     fe6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
     fe8:	e0 91 16 01 	lds	r30, 0x0116
     fec:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ff0:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
     ff2:	e0 91 16 01 	lds	r30, 0x0116
     ff6:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ffa:	84 ea       	ldi	r24, 0xA4	; 164
     ffc:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
     ffe:	e0 91 16 01 	lds	r30, 0x0116
    1002:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1006:	86 ea       	ldi	r24, 0xA6	; 166
    1008:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    100a:	e0 91 16 01 	lds	r30, 0x0116
    100e:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1012:	8f ea       	ldi	r24, 0xAF	; 175
    1014:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    1016:	5b de       	rcall	.-842    	; 0xcce <OLED_clear>
    1018:	29 cf       	rjmp	.-430    	; 0xe6c <OLED_splashScreen>
	OLED_splashScreen();
    101a:	08 95       	ret

0000101c <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    101c:	10 92 80 03 	sts	0x0380, r1
	currentSliPosition.L_abs = 0;
    1020:	10 92 81 03 	sts	0x0381, r1
	currentSliPosition.R_per = 0;
    1024:	10 92 82 03 	sts	0x0382, r1
	currentSliPosition.L_per = 0;
    1028:	10 92 83 03 	sts	0x0383, r1
    102c:	08 95       	ret

0000102e <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    102e:	5d 9b       	sbis	0x0b, 5	; 11
    1030:	fe cf       	rjmp	.-4      	; 0x102e <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    1032:	8c b9       	out	0x0c, r24	; 12
    1034:	08 95       	ret

00001036 <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    1036:	5f 9b       	sbis	0x0b, 7	; 11
    1038:	fe cf       	rjmp	.-4      	; 0x1036 <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    103a:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
    103c:	08 95       	ret

0000103e <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    103e:	ef 92       	push	r14
    1040:	ff 92       	push	r15
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    1046:	bb 27       	eor	r27, r27
    1048:	a1 2f       	mov	r26, r17
    104a:	90 2f       	mov	r25, r16
    104c:	8f 2d       	mov	r24, r15
    104e:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    1050:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1052:	88 e1       	ldi	r24, 0x18	; 24
    1054:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    1056:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    1058:	8e e8       	ldi	r24, 0x8E	; 142
    105a:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    105c:	6b e1       	ldi	r22, 0x1B	; 27
    105e:	78 e0       	ldi	r23, 0x08	; 8
    1060:	87 e1       	ldi	r24, 0x17	; 23
    1062:	98 e0       	ldi	r25, 0x08	; 8
    1064:	d0 d1       	rcall	.+928    	; 0x1406 <fdevopen>
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	ff 90       	pop	r15
    106c:	ef 90       	pop	r14
    106e:	08 95       	ret

00001070 <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    1070:	9b 01       	movw	r18, r22
	
	switch(channel){
    1072:	82 30       	cpi	r24, 0x02	; 2
    1074:	69 f0       	breq	.+26     	; 0x1090 <ADC_request+0x20>
    1076:	18 f4       	brcc	.+6      	; 0x107e <ADC_request+0xe>
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	31 f0       	breq	.+12     	; 0x1088 <ADC_request+0x18>
    107c:	15 c0       	rjmp	.+42     	; 0x10a8 <ADC_request+0x38>
    107e:	83 30       	cpi	r24, 0x03	; 3
    1080:	59 f0       	breq	.+22     	; 0x1098 <ADC_request+0x28>
    1082:	84 30       	cpi	r24, 0x04	; 4
    1084:	69 f0       	breq	.+26     	; 0x10a0 <ADC_request+0x30>
    1086:	10 c0       	rjmp	.+32     	; 0x10a8 <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    1088:	64 e0       	ldi	r22, 0x04	; 4
    108a:	c9 01       	movw	r24, r18
    108c:	50 ca       	rjmp	.-2912   	; 0x52e <saveToAddress>
    108e:	08 95       	ret
			break;
    1090:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    1092:	c9 01       	movw	r24, r18
    1094:	4c ca       	rjmp	.-2920   	; 0x52e <saveToAddress>
    1096:	08 95       	ret
    1098:	66 e0       	ldi	r22, 0x06	; 6
			break;
    109a:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    109c:	48 ca       	rjmp	.-2928   	; 0x52e <saveToAddress>
    109e:	08 95       	ret
    10a0:	67 e0       	ldi	r22, 0x07	; 7
    10a2:	c9 01       	movw	r24, r18
			break;
    10a4:	44 ca       	rjmp	.-2936   	; 0x52e <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    10a6:	08 95       	ret
    10a8:	83 e5       	ldi	r24, 0x53	; 83
    10aa:	93 e0       	ldi	r25, 0x03	; 3
    10ac:	9f 93       	push	r25
			break;
    10ae:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    10b0:	f4 d1       	rcall	.+1000   	; 0x149a <printf>
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	08 95       	ret

000010b8 <ADC_read>:
    10b8:	37 ca       	rjmp	.-2962   	; 0x528 <readFromAddress>
    10ba:	08 95       	ret

000010bc <__divmodhi4>:
			break;
    10bc:	97 fb       	bst	r25, 7
    10be:	07 2e       	mov	r0, r23
    10c0:	16 f4       	brtc	.+4      	; 0x10c6 <__divmodhi4+0xa>
    10c2:	00 94       	com	r0
    10c4:	06 d0       	rcall	.+12     	; 0x10d2 <__divmodhi4_neg1>
    10c6:	77 fd       	sbrc	r23, 7
    10c8:	08 d0       	rcall	.+16     	; 0x10da <__divmodhi4_neg2>
    10ca:	0b d0       	rcall	.+22     	; 0x10e2 <__udivmodhi4>
    10cc:	07 fc       	sbrc	r0, 7
    10ce:	05 d0       	rcall	.+10     	; 0x10da <__divmodhi4_neg2>
    10d0:	3e f4       	brtc	.+14     	; 0x10e0 <__divmodhi4_exit>

000010d2 <__divmodhi4_neg1>:
    10d2:	90 95       	com	r25
    10d4:	81 95       	neg	r24
    10d6:	9f 4f       	sbci	r25, 0xFF	; 255
    10d8:	08 95       	ret

000010da <__divmodhi4_neg2>:
    10da:	70 95       	com	r23
    10dc:	61 95       	neg	r22
    10de:	7f 4f       	sbci	r23, 0xFF	; 255

000010e0 <__divmodhi4_exit>:
    10e0:	08 95       	ret

000010e2 <__udivmodhi4>:
    10e2:	aa 1b       	sub	r26, r26
    10e4:	bb 1b       	sub	r27, r27
    10e6:	51 e1       	ldi	r21, 0x11	; 17
    10e8:	07 c0       	rjmp	.+14     	; 0x10f8 <__udivmodhi4_ep>

000010ea <__udivmodhi4_loop>:
    10ea:	aa 1f       	adc	r26, r26
    10ec:	bb 1f       	adc	r27, r27
    10ee:	a6 17       	cp	r26, r22
    10f0:	b7 07       	cpc	r27, r23
    10f2:	10 f0       	brcs	.+4      	; 0x10f8 <__udivmodhi4_ep>
    10f4:	a6 1b       	sub	r26, r22
    10f6:	b7 0b       	sbc	r27, r23

000010f8 <__udivmodhi4_ep>:
    10f8:	88 1f       	adc	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	5a 95       	dec	r21
    10fe:	a9 f7       	brne	.-22     	; 0x10ea <__udivmodhi4_loop>
    1100:	80 95       	com	r24
    1102:	90 95       	com	r25
    1104:	bc 01       	movw	r22, r24
    1106:	cd 01       	movw	r24, r26
    1108:	08 95       	ret

0000110a <malloc>:
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	82 30       	cpi	r24, 0x02	; 2
    1110:	91 05       	cpc	r25, r1
    1112:	10 f4       	brcc	.+4      	; 0x1118 <malloc+0xe>
    1114:	82 e0       	ldi	r24, 0x02	; 2
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	e0 91 86 03 	lds	r30, 0x0386
    111c:	f0 91 87 03 	lds	r31, 0x0387
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	a0 e0       	ldi	r26, 0x00	; 0
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	30 97       	sbiw	r30, 0x00	; 0
    112a:	39 f1       	breq	.+78     	; 0x117a <malloc+0x70>
    112c:	40 81       	ld	r20, Z
    112e:	51 81       	ldd	r21, Z+1	; 0x01
    1130:	48 17       	cp	r20, r24
    1132:	59 07       	cpc	r21, r25
    1134:	b8 f0       	brcs	.+46     	; 0x1164 <malloc+0x5a>
    1136:	48 17       	cp	r20, r24
    1138:	59 07       	cpc	r21, r25
    113a:	71 f4       	brne	.+28     	; 0x1158 <malloc+0x4e>
    113c:	82 81       	ldd	r24, Z+2	; 0x02
    113e:	93 81       	ldd	r25, Z+3	; 0x03
    1140:	10 97       	sbiw	r26, 0x00	; 0
    1142:	29 f0       	breq	.+10     	; 0x114e <malloc+0x44>
    1144:	13 96       	adiw	r26, 0x03	; 3
    1146:	9c 93       	st	X, r25
    1148:	8e 93       	st	-X, r24
    114a:	12 97       	sbiw	r26, 0x02	; 2
    114c:	2c c0       	rjmp	.+88     	; 0x11a6 <malloc+0x9c>
    114e:	90 93 87 03 	sts	0x0387, r25
    1152:	80 93 86 03 	sts	0x0386, r24
    1156:	27 c0       	rjmp	.+78     	; 0x11a6 <malloc+0x9c>
    1158:	21 15       	cp	r18, r1
    115a:	31 05       	cpc	r19, r1
    115c:	31 f0       	breq	.+12     	; 0x116a <malloc+0x60>
    115e:	42 17       	cp	r20, r18
    1160:	53 07       	cpc	r21, r19
    1162:	18 f0       	brcs	.+6      	; 0x116a <malloc+0x60>
    1164:	a9 01       	movw	r20, r18
    1166:	db 01       	movw	r26, r22
    1168:	01 c0       	rjmp	.+2      	; 0x116c <malloc+0x62>
    116a:	ef 01       	movw	r28, r30
    116c:	9a 01       	movw	r18, r20
    116e:	bd 01       	movw	r22, r26
    1170:	df 01       	movw	r26, r30
    1172:	02 80       	ldd	r0, Z+2	; 0x02
    1174:	f3 81       	ldd	r31, Z+3	; 0x03
    1176:	e0 2d       	mov	r30, r0
    1178:	d7 cf       	rjmp	.-82     	; 0x1128 <malloc+0x1e>
    117a:	21 15       	cp	r18, r1
    117c:	31 05       	cpc	r19, r1
    117e:	f9 f0       	breq	.+62     	; 0x11be <malloc+0xb4>
    1180:	28 1b       	sub	r18, r24
    1182:	39 0b       	sbc	r19, r25
    1184:	24 30       	cpi	r18, 0x04	; 4
    1186:	31 05       	cpc	r19, r1
    1188:	80 f4       	brcc	.+32     	; 0x11aa <malloc+0xa0>
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	9b 81       	ldd	r25, Y+3	; 0x03
    118e:	61 15       	cp	r22, r1
    1190:	71 05       	cpc	r23, r1
    1192:	21 f0       	breq	.+8      	; 0x119c <malloc+0x92>
    1194:	fb 01       	movw	r30, r22
    1196:	93 83       	std	Z+3, r25	; 0x03
    1198:	82 83       	std	Z+2, r24	; 0x02
    119a:	04 c0       	rjmp	.+8      	; 0x11a4 <malloc+0x9a>
    119c:	90 93 87 03 	sts	0x0387, r25
    11a0:	80 93 86 03 	sts	0x0386, r24
    11a4:	fe 01       	movw	r30, r28
    11a6:	32 96       	adiw	r30, 0x02	; 2
    11a8:	44 c0       	rjmp	.+136    	; 0x1232 <malloc+0x128>
    11aa:	fe 01       	movw	r30, r28
    11ac:	e2 0f       	add	r30, r18
    11ae:	f3 1f       	adc	r31, r19
    11b0:	81 93       	st	Z+, r24
    11b2:	91 93       	st	Z+, r25
    11b4:	22 50       	subi	r18, 0x02	; 2
    11b6:	31 09       	sbc	r19, r1
    11b8:	39 83       	std	Y+1, r19	; 0x01
    11ba:	28 83       	st	Y, r18
    11bc:	3a c0       	rjmp	.+116    	; 0x1232 <malloc+0x128>
    11be:	20 91 84 03 	lds	r18, 0x0384
    11c2:	30 91 85 03 	lds	r19, 0x0385
    11c6:	23 2b       	or	r18, r19
    11c8:	41 f4       	brne	.+16     	; 0x11da <malloc+0xd0>
    11ca:	20 91 02 01 	lds	r18, 0x0102
    11ce:	30 91 03 01 	lds	r19, 0x0103
    11d2:	30 93 85 03 	sts	0x0385, r19
    11d6:	20 93 84 03 	sts	0x0384, r18
    11da:	20 91 00 01 	lds	r18, 0x0100
    11de:	30 91 01 01 	lds	r19, 0x0101
    11e2:	21 15       	cp	r18, r1
    11e4:	31 05       	cpc	r19, r1
    11e6:	41 f4       	brne	.+16     	; 0x11f8 <malloc+0xee>
    11e8:	2d b7       	in	r18, 0x3d	; 61
    11ea:	3e b7       	in	r19, 0x3e	; 62
    11ec:	40 91 04 01 	lds	r20, 0x0104
    11f0:	50 91 05 01 	lds	r21, 0x0105
    11f4:	24 1b       	sub	r18, r20
    11f6:	35 0b       	sbc	r19, r21
    11f8:	e0 91 84 03 	lds	r30, 0x0384
    11fc:	f0 91 85 03 	lds	r31, 0x0385
    1200:	e2 17       	cp	r30, r18
    1202:	f3 07       	cpc	r31, r19
    1204:	a0 f4       	brcc	.+40     	; 0x122e <malloc+0x124>
    1206:	2e 1b       	sub	r18, r30
    1208:	3f 0b       	sbc	r19, r31
    120a:	28 17       	cp	r18, r24
    120c:	39 07       	cpc	r19, r25
    120e:	78 f0       	brcs	.+30     	; 0x122e <malloc+0x124>
    1210:	ac 01       	movw	r20, r24
    1212:	4e 5f       	subi	r20, 0xFE	; 254
    1214:	5f 4f       	sbci	r21, 0xFF	; 255
    1216:	24 17       	cp	r18, r20
    1218:	35 07       	cpc	r19, r21
    121a:	48 f0       	brcs	.+18     	; 0x122e <malloc+0x124>
    121c:	4e 0f       	add	r20, r30
    121e:	5f 1f       	adc	r21, r31
    1220:	50 93 85 03 	sts	0x0385, r21
    1224:	40 93 84 03 	sts	0x0384, r20
    1228:	81 93       	st	Z+, r24
    122a:	91 93       	st	Z+, r25
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <malloc+0x128>
    122e:	e0 e0       	ldi	r30, 0x00	; 0
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	cf 01       	movw	r24, r30
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	08 95       	ret

0000123a <free>:
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	00 97       	sbiw	r24, 0x00	; 0
    1240:	09 f4       	brne	.+2      	; 0x1244 <free+0xa>
    1242:	87 c0       	rjmp	.+270    	; 0x1352 <free+0x118>
    1244:	fc 01       	movw	r30, r24
    1246:	32 97       	sbiw	r30, 0x02	; 2
    1248:	13 82       	std	Z+3, r1	; 0x03
    124a:	12 82       	std	Z+2, r1	; 0x02
    124c:	c0 91 86 03 	lds	r28, 0x0386
    1250:	d0 91 87 03 	lds	r29, 0x0387
    1254:	20 97       	sbiw	r28, 0x00	; 0
    1256:	81 f4       	brne	.+32     	; 0x1278 <free+0x3e>
    1258:	20 81       	ld	r18, Z
    125a:	31 81       	ldd	r19, Z+1	; 0x01
    125c:	28 0f       	add	r18, r24
    125e:	39 1f       	adc	r19, r25
    1260:	80 91 84 03 	lds	r24, 0x0384
    1264:	90 91 85 03 	lds	r25, 0x0385
    1268:	82 17       	cp	r24, r18
    126a:	93 07       	cpc	r25, r19
    126c:	79 f5       	brne	.+94     	; 0x12cc <free+0x92>
    126e:	f0 93 85 03 	sts	0x0385, r31
    1272:	e0 93 84 03 	sts	0x0384, r30
    1276:	6d c0       	rjmp	.+218    	; 0x1352 <free+0x118>
    1278:	de 01       	movw	r26, r28
    127a:	20 e0       	ldi	r18, 0x00	; 0
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	ae 17       	cp	r26, r30
    1280:	bf 07       	cpc	r27, r31
    1282:	50 f4       	brcc	.+20     	; 0x1298 <free+0x5e>
    1284:	12 96       	adiw	r26, 0x02	; 2
    1286:	4d 91       	ld	r20, X+
    1288:	5c 91       	ld	r21, X
    128a:	13 97       	sbiw	r26, 0x03	; 3
    128c:	9d 01       	movw	r18, r26
    128e:	41 15       	cp	r20, r1
    1290:	51 05       	cpc	r21, r1
    1292:	09 f1       	breq	.+66     	; 0x12d6 <free+0x9c>
    1294:	da 01       	movw	r26, r20
    1296:	f3 cf       	rjmp	.-26     	; 0x127e <free+0x44>
    1298:	b3 83       	std	Z+3, r27	; 0x03
    129a:	a2 83       	std	Z+2, r26	; 0x02
    129c:	40 81       	ld	r20, Z
    129e:	51 81       	ldd	r21, Z+1	; 0x01
    12a0:	84 0f       	add	r24, r20
    12a2:	95 1f       	adc	r25, r21
    12a4:	8a 17       	cp	r24, r26
    12a6:	9b 07       	cpc	r25, r27
    12a8:	71 f4       	brne	.+28     	; 0x12c6 <free+0x8c>
    12aa:	8d 91       	ld	r24, X+
    12ac:	9c 91       	ld	r25, X
    12ae:	11 97       	sbiw	r26, 0x01	; 1
    12b0:	84 0f       	add	r24, r20
    12b2:	95 1f       	adc	r25, r21
    12b4:	02 96       	adiw	r24, 0x02	; 2
    12b6:	91 83       	std	Z+1, r25	; 0x01
    12b8:	80 83       	st	Z, r24
    12ba:	12 96       	adiw	r26, 0x02	; 2
    12bc:	8d 91       	ld	r24, X+
    12be:	9c 91       	ld	r25, X
    12c0:	13 97       	sbiw	r26, 0x03	; 3
    12c2:	93 83       	std	Z+3, r25	; 0x03
    12c4:	82 83       	std	Z+2, r24	; 0x02
    12c6:	21 15       	cp	r18, r1
    12c8:	31 05       	cpc	r19, r1
    12ca:	29 f4       	brne	.+10     	; 0x12d6 <free+0x9c>
    12cc:	f0 93 87 03 	sts	0x0387, r31
    12d0:	e0 93 86 03 	sts	0x0386, r30
    12d4:	3e c0       	rjmp	.+124    	; 0x1352 <free+0x118>
    12d6:	d9 01       	movw	r26, r18
    12d8:	13 96       	adiw	r26, 0x03	; 3
    12da:	fc 93       	st	X, r31
    12dc:	ee 93       	st	-X, r30
    12de:	12 97       	sbiw	r26, 0x02	; 2
    12e0:	4d 91       	ld	r20, X+
    12e2:	5d 91       	ld	r21, X+
    12e4:	a4 0f       	add	r26, r20
    12e6:	b5 1f       	adc	r27, r21
    12e8:	ea 17       	cp	r30, r26
    12ea:	fb 07       	cpc	r31, r27
    12ec:	79 f4       	brne	.+30     	; 0x130c <free+0xd2>
    12ee:	80 81       	ld	r24, Z
    12f0:	91 81       	ldd	r25, Z+1	; 0x01
    12f2:	84 0f       	add	r24, r20
    12f4:	95 1f       	adc	r25, r21
    12f6:	02 96       	adiw	r24, 0x02	; 2
    12f8:	d9 01       	movw	r26, r18
    12fa:	11 96       	adiw	r26, 0x01	; 1
    12fc:	9c 93       	st	X, r25
    12fe:	8e 93       	st	-X, r24
    1300:	82 81       	ldd	r24, Z+2	; 0x02
    1302:	93 81       	ldd	r25, Z+3	; 0x03
    1304:	13 96       	adiw	r26, 0x03	; 3
    1306:	9c 93       	st	X, r25
    1308:	8e 93       	st	-X, r24
    130a:	12 97       	sbiw	r26, 0x02	; 2
    130c:	e0 e0       	ldi	r30, 0x00	; 0
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	8a 81       	ldd	r24, Y+2	; 0x02
    1312:	9b 81       	ldd	r25, Y+3	; 0x03
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	19 f0       	breq	.+6      	; 0x131e <free+0xe4>
    1318:	fe 01       	movw	r30, r28
    131a:	ec 01       	movw	r28, r24
    131c:	f9 cf       	rjmp	.-14     	; 0x1310 <free+0xd6>
    131e:	ce 01       	movw	r24, r28
    1320:	02 96       	adiw	r24, 0x02	; 2
    1322:	28 81       	ld	r18, Y
    1324:	39 81       	ldd	r19, Y+1	; 0x01
    1326:	82 0f       	add	r24, r18
    1328:	93 1f       	adc	r25, r19
    132a:	20 91 84 03 	lds	r18, 0x0384
    132e:	30 91 85 03 	lds	r19, 0x0385
    1332:	28 17       	cp	r18, r24
    1334:	39 07       	cpc	r19, r25
    1336:	69 f4       	brne	.+26     	; 0x1352 <free+0x118>
    1338:	30 97       	sbiw	r30, 0x00	; 0
    133a:	29 f4       	brne	.+10     	; 0x1346 <free+0x10c>
    133c:	10 92 87 03 	sts	0x0387, r1
    1340:	10 92 86 03 	sts	0x0386, r1
    1344:	02 c0       	rjmp	.+4      	; 0x134a <free+0x110>
    1346:	13 82       	std	Z+3, r1	; 0x03
    1348:	12 82       	std	Z+2, r1	; 0x02
    134a:	d0 93 85 03 	sts	0x0385, r29
    134e:	c0 93 84 03 	sts	0x0384, r28
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	08 95       	ret

00001358 <do_rand>:
    1358:	8f 92       	push	r8
    135a:	9f 92       	push	r9
    135c:	af 92       	push	r10
    135e:	bf 92       	push	r11
    1360:	cf 92       	push	r12
    1362:	df 92       	push	r13
    1364:	ef 92       	push	r14
    1366:	ff 92       	push	r15
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	ec 01       	movw	r28, r24
    136e:	68 81       	ld	r22, Y
    1370:	79 81       	ldd	r23, Y+1	; 0x01
    1372:	8a 81       	ldd	r24, Y+2	; 0x02
    1374:	9b 81       	ldd	r25, Y+3	; 0x03
    1376:	61 15       	cp	r22, r1
    1378:	71 05       	cpc	r23, r1
    137a:	81 05       	cpc	r24, r1
    137c:	91 05       	cpc	r25, r1
    137e:	21 f4       	brne	.+8      	; 0x1388 <do_rand+0x30>
    1380:	64 e2       	ldi	r22, 0x24	; 36
    1382:	79 ed       	ldi	r23, 0xD9	; 217
    1384:	8b e5       	ldi	r24, 0x5B	; 91
    1386:	97 e0       	ldi	r25, 0x07	; 7
    1388:	2d e1       	ldi	r18, 0x1D	; 29
    138a:	33 ef       	ldi	r19, 0xF3	; 243
    138c:	41 e0       	ldi	r20, 0x01	; 1
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	4c d3       	rcall	.+1688   	; 0x1a2a <__divmodsi4>
    1392:	49 01       	movw	r8, r18
    1394:	5a 01       	movw	r10, r20
    1396:	9b 01       	movw	r18, r22
    1398:	ac 01       	movw	r20, r24
    139a:	a7 ea       	ldi	r26, 0xA7	; 167
    139c:	b1 e4       	ldi	r27, 0x41	; 65
    139e:	61 d3       	rcall	.+1730   	; 0x1a62 <__muluhisi3>
    13a0:	6b 01       	movw	r12, r22
    13a2:	7c 01       	movw	r14, r24
    13a4:	ac ee       	ldi	r26, 0xEC	; 236
    13a6:	b4 ef       	ldi	r27, 0xF4	; 244
    13a8:	a5 01       	movw	r20, r10
    13aa:	94 01       	movw	r18, r8
    13ac:	66 d3       	rcall	.+1740   	; 0x1a7a <__mulohisi3>
    13ae:	c6 0e       	add	r12, r22
    13b0:	d7 1e       	adc	r13, r23
    13b2:	e8 1e       	adc	r14, r24
    13b4:	f9 1e       	adc	r15, r25
    13b6:	f7 fe       	sbrs	r15, 7
    13b8:	06 c0       	rjmp	.+12     	; 0x13c6 <do_rand+0x6e>
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	c8 1a       	sub	r12, r24
    13be:	d1 08       	sbc	r13, r1
    13c0:	e1 08       	sbc	r14, r1
    13c2:	80 e8       	ldi	r24, 0x80	; 128
    13c4:	f8 0a       	sbc	r15, r24
    13c6:	c8 82       	st	Y, r12
    13c8:	d9 82       	std	Y+1, r13	; 0x01
    13ca:	ea 82       	std	Y+2, r14	; 0x02
    13cc:	fb 82       	std	Y+3, r15	; 0x03
    13ce:	c6 01       	movw	r24, r12
    13d0:	9f 77       	andi	r25, 0x7F	; 127
    13d2:	df 91       	pop	r29
    13d4:	cf 91       	pop	r28
    13d6:	ff 90       	pop	r15
    13d8:	ef 90       	pop	r14
    13da:	df 90       	pop	r13
    13dc:	cf 90       	pop	r12
    13de:	bf 90       	pop	r11
    13e0:	af 90       	pop	r10
    13e2:	9f 90       	pop	r9
    13e4:	8f 90       	pop	r8
    13e6:	08 95       	ret

000013e8 <rand_r>:
    13e8:	b7 cf       	rjmp	.-146    	; 0x1358 <do_rand>

000013ea <rand>:
    13ea:	86 e0       	ldi	r24, 0x06	; 6
    13ec:	91 e0       	ldi	r25, 0x01	; 1
    13ee:	b4 cf       	rjmp	.-152    	; 0x1358 <do_rand>

000013f0 <srand>:
    13f0:	a0 e0       	ldi	r26, 0x00	; 0
    13f2:	b0 e0       	ldi	r27, 0x00	; 0
    13f4:	80 93 06 01 	sts	0x0106, r24
    13f8:	90 93 07 01 	sts	0x0107, r25
    13fc:	a0 93 08 01 	sts	0x0108, r26
    1400:	b0 93 09 01 	sts	0x0109, r27
    1404:	08 95       	ret

00001406 <fdevopen>:
    1406:	0f 93       	push	r16
    1408:	1f 93       	push	r17
    140a:	cf 93       	push	r28
    140c:	df 93       	push	r29
    140e:	ec 01       	movw	r28, r24
    1410:	8b 01       	movw	r16, r22
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	31 f4       	brne	.+12     	; 0x1422 <fdevopen+0x1c>
    1416:	61 15       	cp	r22, r1
    1418:	71 05       	cpc	r23, r1
    141a:	19 f4       	brne	.+6      	; 0x1422 <fdevopen+0x1c>
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	37 c0       	rjmp	.+110    	; 0x1490 <fdevopen+0x8a>
    1422:	6e e0       	ldi	r22, 0x0E	; 14
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	38 d2       	rcall	.+1136   	; 0x189c <calloc>
    142c:	fc 01       	movw	r30, r24
    142e:	00 97       	sbiw	r24, 0x00	; 0
    1430:	a9 f3       	breq	.-22     	; 0x141c <fdevopen+0x16>
    1432:	80 e8       	ldi	r24, 0x80	; 128
    1434:	83 83       	std	Z+3, r24	; 0x03
    1436:	01 15       	cp	r16, r1
    1438:	11 05       	cpc	r17, r1
    143a:	71 f0       	breq	.+28     	; 0x1458 <fdevopen+0x52>
    143c:	13 87       	std	Z+11, r17	; 0x0b
    143e:	02 87       	std	Z+10, r16	; 0x0a
    1440:	81 e8       	ldi	r24, 0x81	; 129
    1442:	83 83       	std	Z+3, r24	; 0x03
    1444:	80 91 88 03 	lds	r24, 0x0388
    1448:	90 91 89 03 	lds	r25, 0x0389
    144c:	89 2b       	or	r24, r25
    144e:	21 f4       	brne	.+8      	; 0x1458 <fdevopen+0x52>
    1450:	f0 93 89 03 	sts	0x0389, r31
    1454:	e0 93 88 03 	sts	0x0388, r30
    1458:	20 97       	sbiw	r28, 0x00	; 0
    145a:	c9 f0       	breq	.+50     	; 0x148e <fdevopen+0x88>
    145c:	d1 87       	std	Z+9, r29	; 0x09
    145e:	c0 87       	std	Z+8, r28	; 0x08
    1460:	83 81       	ldd	r24, Z+3	; 0x03
    1462:	82 60       	ori	r24, 0x02	; 2
    1464:	83 83       	std	Z+3, r24	; 0x03
    1466:	80 91 8a 03 	lds	r24, 0x038A
    146a:	90 91 8b 03 	lds	r25, 0x038B
    146e:	89 2b       	or	r24, r25
    1470:	71 f4       	brne	.+28     	; 0x148e <fdevopen+0x88>
    1472:	f0 93 8b 03 	sts	0x038B, r31
    1476:	e0 93 8a 03 	sts	0x038A, r30
    147a:	80 91 8c 03 	lds	r24, 0x038C
    147e:	90 91 8d 03 	lds	r25, 0x038D
    1482:	89 2b       	or	r24, r25
    1484:	21 f4       	brne	.+8      	; 0x148e <fdevopen+0x88>
    1486:	f0 93 8d 03 	sts	0x038D, r31
    148a:	e0 93 8c 03 	sts	0x038C, r30
    148e:	cf 01       	movw	r24, r30
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	1f 91       	pop	r17
    1496:	0f 91       	pop	r16
    1498:	08 95       	ret

0000149a <printf>:
    149a:	a0 e0       	ldi	r26, 0x00	; 0
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	e2 e5       	ldi	r30, 0x52	; 82
    14a0:	fa e0       	ldi	r31, 0x0A	; 10
    14a2:	ff c2       	rjmp	.+1534   	; 0x1aa2 <__prologue_saves__+0x20>
    14a4:	fe 01       	movw	r30, r28
    14a6:	35 96       	adiw	r30, 0x05	; 5
    14a8:	61 91       	ld	r22, Z+
    14aa:	71 91       	ld	r23, Z+
    14ac:	af 01       	movw	r20, r30
    14ae:	80 91 8a 03 	lds	r24, 0x038A
    14b2:	90 91 8b 03 	lds	r25, 0x038B
    14b6:	2f d0       	rcall	.+94     	; 0x1516 <vfprintf>
    14b8:	e2 e0       	ldi	r30, 0x02	; 2
    14ba:	0f c3       	rjmp	.+1566   	; 0x1ada <__epilogue_restores__+0x20>

000014bc <puts>:
    14bc:	0f 93       	push	r16
    14be:	1f 93       	push	r17
    14c0:	cf 93       	push	r28
    14c2:	df 93       	push	r29
    14c4:	e0 91 8a 03 	lds	r30, 0x038A
    14c8:	f0 91 8b 03 	lds	r31, 0x038B
    14cc:	23 81       	ldd	r18, Z+3	; 0x03
    14ce:	21 ff       	sbrs	r18, 1
    14d0:	1b c0       	rjmp	.+54     	; 0x1508 <puts+0x4c>
    14d2:	ec 01       	movw	r28, r24
    14d4:	00 e0       	ldi	r16, 0x00	; 0
    14d6:	10 e0       	ldi	r17, 0x00	; 0
    14d8:	89 91       	ld	r24, Y+
    14da:	60 91 8a 03 	lds	r22, 0x038A
    14de:	70 91 8b 03 	lds	r23, 0x038B
    14e2:	db 01       	movw	r26, r22
    14e4:	18 96       	adiw	r26, 0x08	; 8
    14e6:	ed 91       	ld	r30, X+
    14e8:	fc 91       	ld	r31, X
    14ea:	19 97       	sbiw	r26, 0x09	; 9
    14ec:	88 23       	and	r24, r24
    14ee:	31 f0       	breq	.+12     	; 0x14fc <puts+0x40>
    14f0:	09 95       	icall
    14f2:	89 2b       	or	r24, r25
    14f4:	89 f3       	breq	.-30     	; 0x14d8 <puts+0x1c>
    14f6:	0f ef       	ldi	r16, 0xFF	; 255
    14f8:	1f ef       	ldi	r17, 0xFF	; 255
    14fa:	ee cf       	rjmp	.-36     	; 0x14d8 <puts+0x1c>
    14fc:	8a e0       	ldi	r24, 0x0A	; 10
    14fe:	09 95       	icall
    1500:	89 2b       	or	r24, r25
    1502:	11 f4       	brne	.+4      	; 0x1508 <puts+0x4c>
    1504:	c8 01       	movw	r24, r16
    1506:	02 c0       	rjmp	.+4      	; 0x150c <puts+0x50>
    1508:	8f ef       	ldi	r24, 0xFF	; 255
    150a:	9f ef       	ldi	r25, 0xFF	; 255
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	1f 91       	pop	r17
    1512:	0f 91       	pop	r16
    1514:	08 95       	ret

00001516 <vfprintf>:
    1516:	ac e0       	ldi	r26, 0x0C	; 12
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e0 e9       	ldi	r30, 0x90	; 144
    151c:	fa e0       	ldi	r31, 0x0A	; 10
    151e:	b1 c2       	rjmp	.+1378   	; 0x1a82 <__prologue_saves__>
    1520:	7c 01       	movw	r14, r24
    1522:	6b 01       	movw	r12, r22
    1524:	8a 01       	movw	r16, r20
    1526:	fc 01       	movw	r30, r24
    1528:	17 82       	std	Z+7, r1	; 0x07
    152a:	16 82       	std	Z+6, r1	; 0x06
    152c:	83 81       	ldd	r24, Z+3	; 0x03
    152e:	81 ff       	sbrs	r24, 1
    1530:	b0 c1       	rjmp	.+864    	; 0x1892 <vfprintf+0x37c>
    1532:	ce 01       	movw	r24, r28
    1534:	01 96       	adiw	r24, 0x01	; 1
    1536:	4c 01       	movw	r8, r24
    1538:	f7 01       	movw	r30, r14
    153a:	93 81       	ldd	r25, Z+3	; 0x03
    153c:	f6 01       	movw	r30, r12
    153e:	93 fd       	sbrc	r25, 3
    1540:	85 91       	lpm	r24, Z+
    1542:	93 ff       	sbrs	r25, 3
    1544:	81 91       	ld	r24, Z+
    1546:	6f 01       	movw	r12, r30
    1548:	88 23       	and	r24, r24
    154a:	09 f4       	brne	.+2      	; 0x154e <vfprintf+0x38>
    154c:	9e c1       	rjmp	.+828    	; 0x188a <vfprintf+0x374>
    154e:	85 32       	cpi	r24, 0x25	; 37
    1550:	39 f4       	brne	.+14     	; 0x1560 <vfprintf+0x4a>
    1552:	93 fd       	sbrc	r25, 3
    1554:	85 91       	lpm	r24, Z+
    1556:	93 ff       	sbrs	r25, 3
    1558:	81 91       	ld	r24, Z+
    155a:	6f 01       	movw	r12, r30
    155c:	85 32       	cpi	r24, 0x25	; 37
    155e:	21 f4       	brne	.+8      	; 0x1568 <vfprintf+0x52>
    1560:	b7 01       	movw	r22, r14
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	d2 d1       	rcall	.+932    	; 0x190a <fputc>
    1566:	e8 cf       	rjmp	.-48     	; 0x1538 <vfprintf+0x22>
    1568:	51 2c       	mov	r5, r1
    156a:	31 2c       	mov	r3, r1
    156c:	20 e0       	ldi	r18, 0x00	; 0
    156e:	20 32       	cpi	r18, 0x20	; 32
    1570:	a0 f4       	brcc	.+40     	; 0x159a <vfprintf+0x84>
    1572:	8b 32       	cpi	r24, 0x2B	; 43
    1574:	69 f0       	breq	.+26     	; 0x1590 <vfprintf+0x7a>
    1576:	30 f4       	brcc	.+12     	; 0x1584 <vfprintf+0x6e>
    1578:	80 32       	cpi	r24, 0x20	; 32
    157a:	59 f0       	breq	.+22     	; 0x1592 <vfprintf+0x7c>
    157c:	83 32       	cpi	r24, 0x23	; 35
    157e:	69 f4       	brne	.+26     	; 0x159a <vfprintf+0x84>
    1580:	20 61       	ori	r18, 0x10	; 16
    1582:	2c c0       	rjmp	.+88     	; 0x15dc <vfprintf+0xc6>
    1584:	8d 32       	cpi	r24, 0x2D	; 45
    1586:	39 f0       	breq	.+14     	; 0x1596 <vfprintf+0x80>
    1588:	80 33       	cpi	r24, 0x30	; 48
    158a:	39 f4       	brne	.+14     	; 0x159a <vfprintf+0x84>
    158c:	21 60       	ori	r18, 0x01	; 1
    158e:	26 c0       	rjmp	.+76     	; 0x15dc <vfprintf+0xc6>
    1590:	22 60       	ori	r18, 0x02	; 2
    1592:	24 60       	ori	r18, 0x04	; 4
    1594:	23 c0       	rjmp	.+70     	; 0x15dc <vfprintf+0xc6>
    1596:	28 60       	ori	r18, 0x08	; 8
    1598:	21 c0       	rjmp	.+66     	; 0x15dc <vfprintf+0xc6>
    159a:	27 fd       	sbrc	r18, 7
    159c:	27 c0       	rjmp	.+78     	; 0x15ec <vfprintf+0xd6>
    159e:	30 ed       	ldi	r19, 0xD0	; 208
    15a0:	38 0f       	add	r19, r24
    15a2:	3a 30       	cpi	r19, 0x0A	; 10
    15a4:	78 f4       	brcc	.+30     	; 0x15c4 <vfprintf+0xae>
    15a6:	26 ff       	sbrs	r18, 6
    15a8:	06 c0       	rjmp	.+12     	; 0x15b6 <vfprintf+0xa0>
    15aa:	fa e0       	ldi	r31, 0x0A	; 10
    15ac:	5f 9e       	mul	r5, r31
    15ae:	30 0d       	add	r19, r0
    15b0:	11 24       	eor	r1, r1
    15b2:	53 2e       	mov	r5, r19
    15b4:	13 c0       	rjmp	.+38     	; 0x15dc <vfprintf+0xc6>
    15b6:	8a e0       	ldi	r24, 0x0A	; 10
    15b8:	38 9e       	mul	r3, r24
    15ba:	30 0d       	add	r19, r0
    15bc:	11 24       	eor	r1, r1
    15be:	33 2e       	mov	r3, r19
    15c0:	20 62       	ori	r18, 0x20	; 32
    15c2:	0c c0       	rjmp	.+24     	; 0x15dc <vfprintf+0xc6>
    15c4:	8e 32       	cpi	r24, 0x2E	; 46
    15c6:	21 f4       	brne	.+8      	; 0x15d0 <vfprintf+0xba>
    15c8:	26 fd       	sbrc	r18, 6
    15ca:	5f c1       	rjmp	.+702    	; 0x188a <vfprintf+0x374>
    15cc:	20 64       	ori	r18, 0x40	; 64
    15ce:	06 c0       	rjmp	.+12     	; 0x15dc <vfprintf+0xc6>
    15d0:	8c 36       	cpi	r24, 0x6C	; 108
    15d2:	11 f4       	brne	.+4      	; 0x15d8 <vfprintf+0xc2>
    15d4:	20 68       	ori	r18, 0x80	; 128
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <vfprintf+0xc6>
    15d8:	88 36       	cpi	r24, 0x68	; 104
    15da:	41 f4       	brne	.+16     	; 0x15ec <vfprintf+0xd6>
    15dc:	f6 01       	movw	r30, r12
    15de:	93 fd       	sbrc	r25, 3
    15e0:	85 91       	lpm	r24, Z+
    15e2:	93 ff       	sbrs	r25, 3
    15e4:	81 91       	ld	r24, Z+
    15e6:	6f 01       	movw	r12, r30
    15e8:	81 11       	cpse	r24, r1
    15ea:	c1 cf       	rjmp	.-126    	; 0x156e <vfprintf+0x58>
    15ec:	98 2f       	mov	r25, r24
    15ee:	9f 7d       	andi	r25, 0xDF	; 223
    15f0:	95 54       	subi	r25, 0x45	; 69
    15f2:	93 30       	cpi	r25, 0x03	; 3
    15f4:	28 f4       	brcc	.+10     	; 0x1600 <vfprintf+0xea>
    15f6:	0c 5f       	subi	r16, 0xFC	; 252
    15f8:	1f 4f       	sbci	r17, 0xFF	; 255
    15fa:	ff e3       	ldi	r31, 0x3F	; 63
    15fc:	f9 83       	std	Y+1, r31	; 0x01
    15fe:	0d c0       	rjmp	.+26     	; 0x161a <vfprintf+0x104>
    1600:	83 36       	cpi	r24, 0x63	; 99
    1602:	31 f0       	breq	.+12     	; 0x1610 <vfprintf+0xfa>
    1604:	83 37       	cpi	r24, 0x73	; 115
    1606:	71 f0       	breq	.+28     	; 0x1624 <vfprintf+0x10e>
    1608:	83 35       	cpi	r24, 0x53	; 83
    160a:	09 f0       	breq	.+2      	; 0x160e <vfprintf+0xf8>
    160c:	57 c0       	rjmp	.+174    	; 0x16bc <vfprintf+0x1a6>
    160e:	21 c0       	rjmp	.+66     	; 0x1652 <vfprintf+0x13c>
    1610:	f8 01       	movw	r30, r16
    1612:	80 81       	ld	r24, Z
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	0e 5f       	subi	r16, 0xFE	; 254
    1618:	1f 4f       	sbci	r17, 0xFF	; 255
    161a:	44 24       	eor	r4, r4
    161c:	43 94       	inc	r4
    161e:	51 2c       	mov	r5, r1
    1620:	54 01       	movw	r10, r8
    1622:	14 c0       	rjmp	.+40     	; 0x164c <vfprintf+0x136>
    1624:	38 01       	movw	r6, r16
    1626:	f2 e0       	ldi	r31, 0x02	; 2
    1628:	6f 0e       	add	r6, r31
    162a:	71 1c       	adc	r7, r1
    162c:	f8 01       	movw	r30, r16
    162e:	a0 80       	ld	r10, Z
    1630:	b1 80       	ldd	r11, Z+1	; 0x01
    1632:	26 ff       	sbrs	r18, 6
    1634:	03 c0       	rjmp	.+6      	; 0x163c <vfprintf+0x126>
    1636:	65 2d       	mov	r22, r5
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <vfprintf+0x12a>
    163c:	6f ef       	ldi	r22, 0xFF	; 255
    163e:	7f ef       	ldi	r23, 0xFF	; 255
    1640:	c5 01       	movw	r24, r10
    1642:	2c 87       	std	Y+12, r18	; 0x0c
    1644:	57 d1       	rcall	.+686    	; 0x18f4 <strnlen>
    1646:	2c 01       	movw	r4, r24
    1648:	83 01       	movw	r16, r6
    164a:	2c 85       	ldd	r18, Y+12	; 0x0c
    164c:	2f 77       	andi	r18, 0x7F	; 127
    164e:	22 2e       	mov	r2, r18
    1650:	16 c0       	rjmp	.+44     	; 0x167e <vfprintf+0x168>
    1652:	38 01       	movw	r6, r16
    1654:	f2 e0       	ldi	r31, 0x02	; 2
    1656:	6f 0e       	add	r6, r31
    1658:	71 1c       	adc	r7, r1
    165a:	f8 01       	movw	r30, r16
    165c:	a0 80       	ld	r10, Z
    165e:	b1 80       	ldd	r11, Z+1	; 0x01
    1660:	26 ff       	sbrs	r18, 6
    1662:	03 c0       	rjmp	.+6      	; 0x166a <vfprintf+0x154>
    1664:	65 2d       	mov	r22, r5
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	02 c0       	rjmp	.+4      	; 0x166e <vfprintf+0x158>
    166a:	6f ef       	ldi	r22, 0xFF	; 255
    166c:	7f ef       	ldi	r23, 0xFF	; 255
    166e:	c5 01       	movw	r24, r10
    1670:	2c 87       	std	Y+12, r18	; 0x0c
    1672:	2e d1       	rcall	.+604    	; 0x18d0 <strnlen_P>
    1674:	2c 01       	movw	r4, r24
    1676:	2c 85       	ldd	r18, Y+12	; 0x0c
    1678:	20 68       	ori	r18, 0x80	; 128
    167a:	22 2e       	mov	r2, r18
    167c:	83 01       	movw	r16, r6
    167e:	23 fc       	sbrc	r2, 3
    1680:	19 c0       	rjmp	.+50     	; 0x16b4 <vfprintf+0x19e>
    1682:	83 2d       	mov	r24, r3
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	48 16       	cp	r4, r24
    1688:	59 06       	cpc	r5, r25
    168a:	a0 f4       	brcc	.+40     	; 0x16b4 <vfprintf+0x19e>
    168c:	b7 01       	movw	r22, r14
    168e:	80 e2       	ldi	r24, 0x20	; 32
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	3b d1       	rcall	.+630    	; 0x190a <fputc>
    1694:	3a 94       	dec	r3
    1696:	f5 cf       	rjmp	.-22     	; 0x1682 <vfprintf+0x16c>
    1698:	f5 01       	movw	r30, r10
    169a:	27 fc       	sbrc	r2, 7
    169c:	85 91       	lpm	r24, Z+
    169e:	27 fe       	sbrs	r2, 7
    16a0:	81 91       	ld	r24, Z+
    16a2:	5f 01       	movw	r10, r30
    16a4:	b7 01       	movw	r22, r14
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	30 d1       	rcall	.+608    	; 0x190a <fputc>
    16aa:	31 10       	cpse	r3, r1
    16ac:	3a 94       	dec	r3
    16ae:	f1 e0       	ldi	r31, 0x01	; 1
    16b0:	4f 1a       	sub	r4, r31
    16b2:	51 08       	sbc	r5, r1
    16b4:	41 14       	cp	r4, r1
    16b6:	51 04       	cpc	r5, r1
    16b8:	79 f7       	brne	.-34     	; 0x1698 <vfprintf+0x182>
    16ba:	de c0       	rjmp	.+444    	; 0x1878 <vfprintf+0x362>
    16bc:	84 36       	cpi	r24, 0x64	; 100
    16be:	11 f0       	breq	.+4      	; 0x16c4 <vfprintf+0x1ae>
    16c0:	89 36       	cpi	r24, 0x69	; 105
    16c2:	31 f5       	brne	.+76     	; 0x1710 <vfprintf+0x1fa>
    16c4:	f8 01       	movw	r30, r16
    16c6:	27 ff       	sbrs	r18, 7
    16c8:	07 c0       	rjmp	.+14     	; 0x16d8 <vfprintf+0x1c2>
    16ca:	60 81       	ld	r22, Z
    16cc:	71 81       	ldd	r23, Z+1	; 0x01
    16ce:	82 81       	ldd	r24, Z+2	; 0x02
    16d0:	93 81       	ldd	r25, Z+3	; 0x03
    16d2:	0c 5f       	subi	r16, 0xFC	; 252
    16d4:	1f 4f       	sbci	r17, 0xFF	; 255
    16d6:	08 c0       	rjmp	.+16     	; 0x16e8 <vfprintf+0x1d2>
    16d8:	60 81       	ld	r22, Z
    16da:	71 81       	ldd	r23, Z+1	; 0x01
    16dc:	88 27       	eor	r24, r24
    16de:	77 fd       	sbrc	r23, 7
    16e0:	80 95       	com	r24
    16e2:	98 2f       	mov	r25, r24
    16e4:	0e 5f       	subi	r16, 0xFE	; 254
    16e6:	1f 4f       	sbci	r17, 0xFF	; 255
    16e8:	2f 76       	andi	r18, 0x6F	; 111
    16ea:	b2 2e       	mov	r11, r18
    16ec:	97 ff       	sbrs	r25, 7
    16ee:	09 c0       	rjmp	.+18     	; 0x1702 <vfprintf+0x1ec>
    16f0:	90 95       	com	r25
    16f2:	80 95       	com	r24
    16f4:	70 95       	com	r23
    16f6:	61 95       	neg	r22
    16f8:	7f 4f       	sbci	r23, 0xFF	; 255
    16fa:	8f 4f       	sbci	r24, 0xFF	; 255
    16fc:	9f 4f       	sbci	r25, 0xFF	; 255
    16fe:	20 68       	ori	r18, 0x80	; 128
    1700:	b2 2e       	mov	r11, r18
    1702:	2a e0       	ldi	r18, 0x0A	; 10
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	a4 01       	movw	r20, r8
    1708:	32 d1       	rcall	.+612    	; 0x196e <__ultoa_invert>
    170a:	a8 2e       	mov	r10, r24
    170c:	a8 18       	sub	r10, r8
    170e:	43 c0       	rjmp	.+134    	; 0x1796 <vfprintf+0x280>
    1710:	85 37       	cpi	r24, 0x75	; 117
    1712:	29 f4       	brne	.+10     	; 0x171e <vfprintf+0x208>
    1714:	2f 7e       	andi	r18, 0xEF	; 239
    1716:	b2 2e       	mov	r11, r18
    1718:	2a e0       	ldi	r18, 0x0A	; 10
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	25 c0       	rjmp	.+74     	; 0x1768 <vfprintf+0x252>
    171e:	f2 2f       	mov	r31, r18
    1720:	f9 7f       	andi	r31, 0xF9	; 249
    1722:	bf 2e       	mov	r11, r31
    1724:	8f 36       	cpi	r24, 0x6F	; 111
    1726:	c1 f0       	breq	.+48     	; 0x1758 <vfprintf+0x242>
    1728:	18 f4       	brcc	.+6      	; 0x1730 <vfprintf+0x21a>
    172a:	88 35       	cpi	r24, 0x58	; 88
    172c:	79 f0       	breq	.+30     	; 0x174c <vfprintf+0x236>
    172e:	ad c0       	rjmp	.+346    	; 0x188a <vfprintf+0x374>
    1730:	80 37       	cpi	r24, 0x70	; 112
    1732:	19 f0       	breq	.+6      	; 0x173a <vfprintf+0x224>
    1734:	88 37       	cpi	r24, 0x78	; 120
    1736:	21 f0       	breq	.+8      	; 0x1740 <vfprintf+0x22a>
    1738:	a8 c0       	rjmp	.+336    	; 0x188a <vfprintf+0x374>
    173a:	2f 2f       	mov	r18, r31
    173c:	20 61       	ori	r18, 0x10	; 16
    173e:	b2 2e       	mov	r11, r18
    1740:	b4 fe       	sbrs	r11, 4
    1742:	0d c0       	rjmp	.+26     	; 0x175e <vfprintf+0x248>
    1744:	8b 2d       	mov	r24, r11
    1746:	84 60       	ori	r24, 0x04	; 4
    1748:	b8 2e       	mov	r11, r24
    174a:	09 c0       	rjmp	.+18     	; 0x175e <vfprintf+0x248>
    174c:	24 ff       	sbrs	r18, 4
    174e:	0a c0       	rjmp	.+20     	; 0x1764 <vfprintf+0x24e>
    1750:	9f 2f       	mov	r25, r31
    1752:	96 60       	ori	r25, 0x06	; 6
    1754:	b9 2e       	mov	r11, r25
    1756:	06 c0       	rjmp	.+12     	; 0x1764 <vfprintf+0x24e>
    1758:	28 e0       	ldi	r18, 0x08	; 8
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	05 c0       	rjmp	.+10     	; 0x1768 <vfprintf+0x252>
    175e:	20 e1       	ldi	r18, 0x10	; 16
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <vfprintf+0x252>
    1764:	20 e1       	ldi	r18, 0x10	; 16
    1766:	32 e0       	ldi	r19, 0x02	; 2
    1768:	f8 01       	movw	r30, r16
    176a:	b7 fe       	sbrs	r11, 7
    176c:	07 c0       	rjmp	.+14     	; 0x177c <vfprintf+0x266>
    176e:	60 81       	ld	r22, Z
    1770:	71 81       	ldd	r23, Z+1	; 0x01
    1772:	82 81       	ldd	r24, Z+2	; 0x02
    1774:	93 81       	ldd	r25, Z+3	; 0x03
    1776:	0c 5f       	subi	r16, 0xFC	; 252
    1778:	1f 4f       	sbci	r17, 0xFF	; 255
    177a:	06 c0       	rjmp	.+12     	; 0x1788 <vfprintf+0x272>
    177c:	60 81       	ld	r22, Z
    177e:	71 81       	ldd	r23, Z+1	; 0x01
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	0e 5f       	subi	r16, 0xFE	; 254
    1786:	1f 4f       	sbci	r17, 0xFF	; 255
    1788:	a4 01       	movw	r20, r8
    178a:	f1 d0       	rcall	.+482    	; 0x196e <__ultoa_invert>
    178c:	a8 2e       	mov	r10, r24
    178e:	a8 18       	sub	r10, r8
    1790:	fb 2d       	mov	r31, r11
    1792:	ff 77       	andi	r31, 0x7F	; 127
    1794:	bf 2e       	mov	r11, r31
    1796:	b6 fe       	sbrs	r11, 6
    1798:	0b c0       	rjmp	.+22     	; 0x17b0 <vfprintf+0x29a>
    179a:	2b 2d       	mov	r18, r11
    179c:	2e 7f       	andi	r18, 0xFE	; 254
    179e:	a5 14       	cp	r10, r5
    17a0:	50 f4       	brcc	.+20     	; 0x17b6 <vfprintf+0x2a0>
    17a2:	b4 fe       	sbrs	r11, 4
    17a4:	0a c0       	rjmp	.+20     	; 0x17ba <vfprintf+0x2a4>
    17a6:	b2 fc       	sbrc	r11, 2
    17a8:	08 c0       	rjmp	.+16     	; 0x17ba <vfprintf+0x2a4>
    17aa:	2b 2d       	mov	r18, r11
    17ac:	2e 7e       	andi	r18, 0xEE	; 238
    17ae:	05 c0       	rjmp	.+10     	; 0x17ba <vfprintf+0x2a4>
    17b0:	7a 2c       	mov	r7, r10
    17b2:	2b 2d       	mov	r18, r11
    17b4:	03 c0       	rjmp	.+6      	; 0x17bc <vfprintf+0x2a6>
    17b6:	7a 2c       	mov	r7, r10
    17b8:	01 c0       	rjmp	.+2      	; 0x17bc <vfprintf+0x2a6>
    17ba:	75 2c       	mov	r7, r5
    17bc:	24 ff       	sbrs	r18, 4
    17be:	0d c0       	rjmp	.+26     	; 0x17da <vfprintf+0x2c4>
    17c0:	fe 01       	movw	r30, r28
    17c2:	ea 0d       	add	r30, r10
    17c4:	f1 1d       	adc	r31, r1
    17c6:	80 81       	ld	r24, Z
    17c8:	80 33       	cpi	r24, 0x30	; 48
    17ca:	11 f4       	brne	.+4      	; 0x17d0 <vfprintf+0x2ba>
    17cc:	29 7e       	andi	r18, 0xE9	; 233
    17ce:	09 c0       	rjmp	.+18     	; 0x17e2 <vfprintf+0x2cc>
    17d0:	22 ff       	sbrs	r18, 2
    17d2:	06 c0       	rjmp	.+12     	; 0x17e0 <vfprintf+0x2ca>
    17d4:	73 94       	inc	r7
    17d6:	73 94       	inc	r7
    17d8:	04 c0       	rjmp	.+8      	; 0x17e2 <vfprintf+0x2cc>
    17da:	82 2f       	mov	r24, r18
    17dc:	86 78       	andi	r24, 0x86	; 134
    17de:	09 f0       	breq	.+2      	; 0x17e2 <vfprintf+0x2cc>
    17e0:	73 94       	inc	r7
    17e2:	23 fd       	sbrc	r18, 3
    17e4:	12 c0       	rjmp	.+36     	; 0x180a <vfprintf+0x2f4>
    17e6:	20 ff       	sbrs	r18, 0
    17e8:	06 c0       	rjmp	.+12     	; 0x17f6 <vfprintf+0x2e0>
    17ea:	5a 2c       	mov	r5, r10
    17ec:	73 14       	cp	r7, r3
    17ee:	18 f4       	brcc	.+6      	; 0x17f6 <vfprintf+0x2e0>
    17f0:	53 0c       	add	r5, r3
    17f2:	57 18       	sub	r5, r7
    17f4:	73 2c       	mov	r7, r3
    17f6:	73 14       	cp	r7, r3
    17f8:	60 f4       	brcc	.+24     	; 0x1812 <vfprintf+0x2fc>
    17fa:	b7 01       	movw	r22, r14
    17fc:	80 e2       	ldi	r24, 0x20	; 32
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	2c 87       	std	Y+12, r18	; 0x0c
    1802:	83 d0       	rcall	.+262    	; 0x190a <fputc>
    1804:	73 94       	inc	r7
    1806:	2c 85       	ldd	r18, Y+12	; 0x0c
    1808:	f6 cf       	rjmp	.-20     	; 0x17f6 <vfprintf+0x2e0>
    180a:	73 14       	cp	r7, r3
    180c:	10 f4       	brcc	.+4      	; 0x1812 <vfprintf+0x2fc>
    180e:	37 18       	sub	r3, r7
    1810:	01 c0       	rjmp	.+2      	; 0x1814 <vfprintf+0x2fe>
    1812:	31 2c       	mov	r3, r1
    1814:	24 ff       	sbrs	r18, 4
    1816:	11 c0       	rjmp	.+34     	; 0x183a <vfprintf+0x324>
    1818:	b7 01       	movw	r22, r14
    181a:	80 e3       	ldi	r24, 0x30	; 48
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	2c 87       	std	Y+12, r18	; 0x0c
    1820:	74 d0       	rcall	.+232    	; 0x190a <fputc>
    1822:	2c 85       	ldd	r18, Y+12	; 0x0c
    1824:	22 ff       	sbrs	r18, 2
    1826:	16 c0       	rjmp	.+44     	; 0x1854 <vfprintf+0x33e>
    1828:	21 ff       	sbrs	r18, 1
    182a:	03 c0       	rjmp	.+6      	; 0x1832 <vfprintf+0x31c>
    182c:	88 e5       	ldi	r24, 0x58	; 88
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <vfprintf+0x320>
    1832:	88 e7       	ldi	r24, 0x78	; 120
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	b7 01       	movw	r22, r14
    1838:	0c c0       	rjmp	.+24     	; 0x1852 <vfprintf+0x33c>
    183a:	82 2f       	mov	r24, r18
    183c:	86 78       	andi	r24, 0x86	; 134
    183e:	51 f0       	breq	.+20     	; 0x1854 <vfprintf+0x33e>
    1840:	21 fd       	sbrc	r18, 1
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <vfprintf+0x332>
    1844:	80 e2       	ldi	r24, 0x20	; 32
    1846:	01 c0       	rjmp	.+2      	; 0x184a <vfprintf+0x334>
    1848:	8b e2       	ldi	r24, 0x2B	; 43
    184a:	27 fd       	sbrc	r18, 7
    184c:	8d e2       	ldi	r24, 0x2D	; 45
    184e:	b7 01       	movw	r22, r14
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	5b d0       	rcall	.+182    	; 0x190a <fputc>
    1854:	a5 14       	cp	r10, r5
    1856:	30 f4       	brcc	.+12     	; 0x1864 <vfprintf+0x34e>
    1858:	b7 01       	movw	r22, r14
    185a:	80 e3       	ldi	r24, 0x30	; 48
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	55 d0       	rcall	.+170    	; 0x190a <fputc>
    1860:	5a 94       	dec	r5
    1862:	f8 cf       	rjmp	.-16     	; 0x1854 <vfprintf+0x33e>
    1864:	aa 94       	dec	r10
    1866:	f4 01       	movw	r30, r8
    1868:	ea 0d       	add	r30, r10
    186a:	f1 1d       	adc	r31, r1
    186c:	80 81       	ld	r24, Z
    186e:	b7 01       	movw	r22, r14
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	4b d0       	rcall	.+150    	; 0x190a <fputc>
    1874:	a1 10       	cpse	r10, r1
    1876:	f6 cf       	rjmp	.-20     	; 0x1864 <vfprintf+0x34e>
    1878:	33 20       	and	r3, r3
    187a:	09 f4       	brne	.+2      	; 0x187e <vfprintf+0x368>
    187c:	5d ce       	rjmp	.-838    	; 0x1538 <vfprintf+0x22>
    187e:	b7 01       	movw	r22, r14
    1880:	80 e2       	ldi	r24, 0x20	; 32
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	42 d0       	rcall	.+132    	; 0x190a <fputc>
    1886:	3a 94       	dec	r3
    1888:	f7 cf       	rjmp	.-18     	; 0x1878 <vfprintf+0x362>
    188a:	f7 01       	movw	r30, r14
    188c:	86 81       	ldd	r24, Z+6	; 0x06
    188e:	97 81       	ldd	r25, Z+7	; 0x07
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <vfprintf+0x380>
    1892:	8f ef       	ldi	r24, 0xFF	; 255
    1894:	9f ef       	ldi	r25, 0xFF	; 255
    1896:	2c 96       	adiw	r28, 0x0c	; 12
    1898:	e2 e1       	ldi	r30, 0x12	; 18
    189a:	0f c1       	rjmp	.+542    	; 0x1aba <__epilogue_restores__>

0000189c <calloc>:
    189c:	0f 93       	push	r16
    189e:	1f 93       	push	r17
    18a0:	cf 93       	push	r28
    18a2:	df 93       	push	r29
    18a4:	86 9f       	mul	r24, r22
    18a6:	80 01       	movw	r16, r0
    18a8:	87 9f       	mul	r24, r23
    18aa:	10 0d       	add	r17, r0
    18ac:	96 9f       	mul	r25, r22
    18ae:	10 0d       	add	r17, r0
    18b0:	11 24       	eor	r1, r1
    18b2:	c8 01       	movw	r24, r16
    18b4:	2a dc       	rcall	.-1964   	; 0x110a <malloc>
    18b6:	ec 01       	movw	r28, r24
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	21 f0       	breq	.+8      	; 0x18c4 <calloc+0x28>
    18bc:	a8 01       	movw	r20, r16
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	70 e0       	ldi	r23, 0x00	; 0
    18c2:	11 d0       	rcall	.+34     	; 0x18e6 <memset>
    18c4:	ce 01       	movw	r24, r28
    18c6:	df 91       	pop	r29
    18c8:	cf 91       	pop	r28
    18ca:	1f 91       	pop	r17
    18cc:	0f 91       	pop	r16
    18ce:	08 95       	ret

000018d0 <strnlen_P>:
    18d0:	fc 01       	movw	r30, r24
    18d2:	05 90       	lpm	r0, Z+
    18d4:	61 50       	subi	r22, 0x01	; 1
    18d6:	70 40       	sbci	r23, 0x00	; 0
    18d8:	01 10       	cpse	r0, r1
    18da:	d8 f7       	brcc	.-10     	; 0x18d2 <strnlen_P+0x2>
    18dc:	80 95       	com	r24
    18de:	90 95       	com	r25
    18e0:	8e 0f       	add	r24, r30
    18e2:	9f 1f       	adc	r25, r31
    18e4:	08 95       	ret

000018e6 <memset>:
    18e6:	dc 01       	movw	r26, r24
    18e8:	01 c0       	rjmp	.+2      	; 0x18ec <memset+0x6>
    18ea:	6d 93       	st	X+, r22
    18ec:	41 50       	subi	r20, 0x01	; 1
    18ee:	50 40       	sbci	r21, 0x00	; 0
    18f0:	e0 f7       	brcc	.-8      	; 0x18ea <memset+0x4>
    18f2:	08 95       	ret

000018f4 <strnlen>:
    18f4:	fc 01       	movw	r30, r24
    18f6:	61 50       	subi	r22, 0x01	; 1
    18f8:	70 40       	sbci	r23, 0x00	; 0
    18fa:	01 90       	ld	r0, Z+
    18fc:	01 10       	cpse	r0, r1
    18fe:	d8 f7       	brcc	.-10     	; 0x18f6 <strnlen+0x2>
    1900:	80 95       	com	r24
    1902:	90 95       	com	r25
    1904:	8e 0f       	add	r24, r30
    1906:	9f 1f       	adc	r25, r31
    1908:	08 95       	ret

0000190a <fputc>:
    190a:	0f 93       	push	r16
    190c:	1f 93       	push	r17
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	18 2f       	mov	r17, r24
    1914:	09 2f       	mov	r16, r25
    1916:	eb 01       	movw	r28, r22
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	81 fd       	sbrc	r24, 1
    191c:	03 c0       	rjmp	.+6      	; 0x1924 <fputc+0x1a>
    191e:	8f ef       	ldi	r24, 0xFF	; 255
    1920:	9f ef       	ldi	r25, 0xFF	; 255
    1922:	20 c0       	rjmp	.+64     	; 0x1964 <fputc+0x5a>
    1924:	82 ff       	sbrs	r24, 2
    1926:	10 c0       	rjmp	.+32     	; 0x1948 <fputc+0x3e>
    1928:	4e 81       	ldd	r20, Y+6	; 0x06
    192a:	5f 81       	ldd	r21, Y+7	; 0x07
    192c:	2c 81       	ldd	r18, Y+4	; 0x04
    192e:	3d 81       	ldd	r19, Y+5	; 0x05
    1930:	42 17       	cp	r20, r18
    1932:	53 07       	cpc	r21, r19
    1934:	7c f4       	brge	.+30     	; 0x1954 <fputc+0x4a>
    1936:	e8 81       	ld	r30, Y
    1938:	f9 81       	ldd	r31, Y+1	; 0x01
    193a:	9f 01       	movw	r18, r30
    193c:	2f 5f       	subi	r18, 0xFF	; 255
    193e:	3f 4f       	sbci	r19, 0xFF	; 255
    1940:	39 83       	std	Y+1, r19	; 0x01
    1942:	28 83       	st	Y, r18
    1944:	10 83       	st	Z, r17
    1946:	06 c0       	rjmp	.+12     	; 0x1954 <fputc+0x4a>
    1948:	e8 85       	ldd	r30, Y+8	; 0x08
    194a:	f9 85       	ldd	r31, Y+9	; 0x09
    194c:	81 2f       	mov	r24, r17
    194e:	09 95       	icall
    1950:	89 2b       	or	r24, r25
    1952:	29 f7       	brne	.-54     	; 0x191e <fputc+0x14>
    1954:	2e 81       	ldd	r18, Y+6	; 0x06
    1956:	3f 81       	ldd	r19, Y+7	; 0x07
    1958:	2f 5f       	subi	r18, 0xFF	; 255
    195a:	3f 4f       	sbci	r19, 0xFF	; 255
    195c:	3f 83       	std	Y+7, r19	; 0x07
    195e:	2e 83       	std	Y+6, r18	; 0x06
    1960:	81 2f       	mov	r24, r17
    1962:	90 2f       	mov	r25, r16
    1964:	df 91       	pop	r29
    1966:	cf 91       	pop	r28
    1968:	1f 91       	pop	r17
    196a:	0f 91       	pop	r16
    196c:	08 95       	ret

0000196e <__ultoa_invert>:
    196e:	fa 01       	movw	r30, r20
    1970:	aa 27       	eor	r26, r26
    1972:	28 30       	cpi	r18, 0x08	; 8
    1974:	51 f1       	breq	.+84     	; 0x19ca <__ultoa_invert+0x5c>
    1976:	20 31       	cpi	r18, 0x10	; 16
    1978:	81 f1       	breq	.+96     	; 0x19da <__ultoa_invert+0x6c>
    197a:	e8 94       	clt
    197c:	6f 93       	push	r22
    197e:	6e 7f       	andi	r22, 0xFE	; 254
    1980:	6e 5f       	subi	r22, 0xFE	; 254
    1982:	7f 4f       	sbci	r23, 0xFF	; 255
    1984:	8f 4f       	sbci	r24, 0xFF	; 255
    1986:	9f 4f       	sbci	r25, 0xFF	; 255
    1988:	af 4f       	sbci	r26, 0xFF	; 255
    198a:	b1 e0       	ldi	r27, 0x01	; 1
    198c:	3e d0       	rcall	.+124    	; 0x1a0a <__ultoa_invert+0x9c>
    198e:	b4 e0       	ldi	r27, 0x04	; 4
    1990:	3c d0       	rcall	.+120    	; 0x1a0a <__ultoa_invert+0x9c>
    1992:	67 0f       	add	r22, r23
    1994:	78 1f       	adc	r23, r24
    1996:	89 1f       	adc	r24, r25
    1998:	9a 1f       	adc	r25, r26
    199a:	a1 1d       	adc	r26, r1
    199c:	68 0f       	add	r22, r24
    199e:	79 1f       	adc	r23, r25
    19a0:	8a 1f       	adc	r24, r26
    19a2:	91 1d       	adc	r25, r1
    19a4:	a1 1d       	adc	r26, r1
    19a6:	6a 0f       	add	r22, r26
    19a8:	71 1d       	adc	r23, r1
    19aa:	81 1d       	adc	r24, r1
    19ac:	91 1d       	adc	r25, r1
    19ae:	a1 1d       	adc	r26, r1
    19b0:	20 d0       	rcall	.+64     	; 0x19f2 <__ultoa_invert+0x84>
    19b2:	09 f4       	brne	.+2      	; 0x19b6 <__ultoa_invert+0x48>
    19b4:	68 94       	set
    19b6:	3f 91       	pop	r19
    19b8:	2a e0       	ldi	r18, 0x0A	; 10
    19ba:	26 9f       	mul	r18, r22
    19bc:	11 24       	eor	r1, r1
    19be:	30 19       	sub	r19, r0
    19c0:	30 5d       	subi	r19, 0xD0	; 208
    19c2:	31 93       	st	Z+, r19
    19c4:	de f6       	brtc	.-74     	; 0x197c <__ultoa_invert+0xe>
    19c6:	cf 01       	movw	r24, r30
    19c8:	08 95       	ret
    19ca:	46 2f       	mov	r20, r22
    19cc:	47 70       	andi	r20, 0x07	; 7
    19ce:	40 5d       	subi	r20, 0xD0	; 208
    19d0:	41 93       	st	Z+, r20
    19d2:	b3 e0       	ldi	r27, 0x03	; 3
    19d4:	0f d0       	rcall	.+30     	; 0x19f4 <__ultoa_invert+0x86>
    19d6:	c9 f7       	brne	.-14     	; 0x19ca <__ultoa_invert+0x5c>
    19d8:	f6 cf       	rjmp	.-20     	; 0x19c6 <__ultoa_invert+0x58>
    19da:	46 2f       	mov	r20, r22
    19dc:	4f 70       	andi	r20, 0x0F	; 15
    19de:	40 5d       	subi	r20, 0xD0	; 208
    19e0:	4a 33       	cpi	r20, 0x3A	; 58
    19e2:	18 f0       	brcs	.+6      	; 0x19ea <__ultoa_invert+0x7c>
    19e4:	49 5d       	subi	r20, 0xD9	; 217
    19e6:	31 fd       	sbrc	r19, 1
    19e8:	40 52       	subi	r20, 0x20	; 32
    19ea:	41 93       	st	Z+, r20
    19ec:	02 d0       	rcall	.+4      	; 0x19f2 <__ultoa_invert+0x84>
    19ee:	a9 f7       	brne	.-22     	; 0x19da <__ultoa_invert+0x6c>
    19f0:	ea cf       	rjmp	.-44     	; 0x19c6 <__ultoa_invert+0x58>
    19f2:	b4 e0       	ldi	r27, 0x04	; 4
    19f4:	a6 95       	lsr	r26
    19f6:	97 95       	ror	r25
    19f8:	87 95       	ror	r24
    19fa:	77 95       	ror	r23
    19fc:	67 95       	ror	r22
    19fe:	ba 95       	dec	r27
    1a00:	c9 f7       	brne	.-14     	; 0x19f4 <__ultoa_invert+0x86>
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	61 05       	cpc	r22, r1
    1a06:	71 05       	cpc	r23, r1
    1a08:	08 95       	ret
    1a0a:	9b 01       	movw	r18, r22
    1a0c:	ac 01       	movw	r20, r24
    1a0e:	0a 2e       	mov	r0, r26
    1a10:	06 94       	lsr	r0
    1a12:	57 95       	ror	r21
    1a14:	47 95       	ror	r20
    1a16:	37 95       	ror	r19
    1a18:	27 95       	ror	r18
    1a1a:	ba 95       	dec	r27
    1a1c:	c9 f7       	brne	.-14     	; 0x1a10 <__ultoa_invert+0xa2>
    1a1e:	62 0f       	add	r22, r18
    1a20:	73 1f       	adc	r23, r19
    1a22:	84 1f       	adc	r24, r20
    1a24:	95 1f       	adc	r25, r21
    1a26:	a0 1d       	adc	r26, r0
    1a28:	08 95       	ret

00001a2a <__divmodsi4>:
    1a2a:	05 2e       	mov	r0, r21
    1a2c:	97 fb       	bst	r25, 7
    1a2e:	16 f4       	brtc	.+4      	; 0x1a34 <__divmodsi4+0xa>
    1a30:	00 94       	com	r0
    1a32:	0f d0       	rcall	.+30     	; 0x1a52 <__negsi2>
    1a34:	57 fd       	sbrc	r21, 7
    1a36:	05 d0       	rcall	.+10     	; 0x1a42 <__divmodsi4_neg2>
    1a38:	5b d0       	rcall	.+182    	; 0x1af0 <__udivmodsi4>
    1a3a:	07 fc       	sbrc	r0, 7
    1a3c:	02 d0       	rcall	.+4      	; 0x1a42 <__divmodsi4_neg2>
    1a3e:	46 f4       	brtc	.+16     	; 0x1a50 <__divmodsi4_exit>
    1a40:	08 c0       	rjmp	.+16     	; 0x1a52 <__negsi2>

00001a42 <__divmodsi4_neg2>:
    1a42:	50 95       	com	r21
    1a44:	40 95       	com	r20
    1a46:	30 95       	com	r19
    1a48:	21 95       	neg	r18
    1a4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a4c:	4f 4f       	sbci	r20, 0xFF	; 255
    1a4e:	5f 4f       	sbci	r21, 0xFF	; 255

00001a50 <__divmodsi4_exit>:
    1a50:	08 95       	ret

00001a52 <__negsi2>:
    1a52:	90 95       	com	r25
    1a54:	80 95       	com	r24
    1a56:	70 95       	com	r23
    1a58:	61 95       	neg	r22
    1a5a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a5c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a60:	08 95       	ret

00001a62 <__muluhisi3>:
    1a62:	68 d0       	rcall	.+208    	; 0x1b34 <__umulhisi3>
    1a64:	a5 9f       	mul	r26, r21
    1a66:	90 0d       	add	r25, r0
    1a68:	b4 9f       	mul	r27, r20
    1a6a:	90 0d       	add	r25, r0
    1a6c:	a4 9f       	mul	r26, r20
    1a6e:	80 0d       	add	r24, r0
    1a70:	91 1d       	adc	r25, r1
    1a72:	11 24       	eor	r1, r1
    1a74:	08 95       	ret

00001a76 <__mulshisi3>:
    1a76:	b7 ff       	sbrs	r27, 7
    1a78:	f4 cf       	rjmp	.-24     	; 0x1a62 <__muluhisi3>

00001a7a <__mulohisi3>:
    1a7a:	f3 df       	rcall	.-26     	; 0x1a62 <__muluhisi3>
    1a7c:	82 1b       	sub	r24, r18
    1a7e:	93 0b       	sbc	r25, r19
    1a80:	08 95       	ret

00001a82 <__prologue_saves__>:
    1a82:	2f 92       	push	r2
    1a84:	3f 92       	push	r3
    1a86:	4f 92       	push	r4
    1a88:	5f 92       	push	r5
    1a8a:	6f 92       	push	r6
    1a8c:	7f 92       	push	r7
    1a8e:	8f 92       	push	r8
    1a90:	9f 92       	push	r9
    1a92:	af 92       	push	r10
    1a94:	bf 92       	push	r11
    1a96:	cf 92       	push	r12
    1a98:	df 92       	push	r13
    1a9a:	ef 92       	push	r14
    1a9c:	ff 92       	push	r15
    1a9e:	0f 93       	push	r16
    1aa0:	1f 93       	push	r17
    1aa2:	cf 93       	push	r28
    1aa4:	df 93       	push	r29
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	ca 1b       	sub	r28, r26
    1aac:	db 0b       	sbc	r29, r27
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	09 94       	ijmp

00001aba <__epilogue_restores__>:
    1aba:	2a 88       	ldd	r2, Y+18	; 0x12
    1abc:	39 88       	ldd	r3, Y+17	; 0x11
    1abe:	48 88       	ldd	r4, Y+16	; 0x10
    1ac0:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ac2:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ac4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ac6:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ac8:	9b 84       	ldd	r9, Y+11	; 0x0b
    1aca:	aa 84       	ldd	r10, Y+10	; 0x0a
    1acc:	b9 84       	ldd	r11, Y+9	; 0x09
    1ace:	c8 84       	ldd	r12, Y+8	; 0x08
    1ad0:	df 80       	ldd	r13, Y+7	; 0x07
    1ad2:	ee 80       	ldd	r14, Y+6	; 0x06
    1ad4:	fd 80       	ldd	r15, Y+5	; 0x05
    1ad6:	0c 81       	ldd	r16, Y+4	; 0x04
    1ad8:	1b 81       	ldd	r17, Y+3	; 0x03
    1ada:	aa 81       	ldd	r26, Y+2	; 0x02
    1adc:	b9 81       	ldd	r27, Y+1	; 0x01
    1ade:	ce 0f       	add	r28, r30
    1ae0:	d1 1d       	adc	r29, r1
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61
    1aec:	ed 01       	movw	r28, r26
    1aee:	08 95       	ret

00001af0 <__udivmodsi4>:
    1af0:	a1 e2       	ldi	r26, 0x21	; 33
    1af2:	1a 2e       	mov	r1, r26
    1af4:	aa 1b       	sub	r26, r26
    1af6:	bb 1b       	sub	r27, r27
    1af8:	fd 01       	movw	r30, r26
    1afa:	0d c0       	rjmp	.+26     	; 0x1b16 <__udivmodsi4_ep>

00001afc <__udivmodsi4_loop>:
    1afc:	aa 1f       	adc	r26, r26
    1afe:	bb 1f       	adc	r27, r27
    1b00:	ee 1f       	adc	r30, r30
    1b02:	ff 1f       	adc	r31, r31
    1b04:	a2 17       	cp	r26, r18
    1b06:	b3 07       	cpc	r27, r19
    1b08:	e4 07       	cpc	r30, r20
    1b0a:	f5 07       	cpc	r31, r21
    1b0c:	20 f0       	brcs	.+8      	; 0x1b16 <__udivmodsi4_ep>
    1b0e:	a2 1b       	sub	r26, r18
    1b10:	b3 0b       	sbc	r27, r19
    1b12:	e4 0b       	sbc	r30, r20
    1b14:	f5 0b       	sbc	r31, r21

00001b16 <__udivmodsi4_ep>:
    1b16:	66 1f       	adc	r22, r22
    1b18:	77 1f       	adc	r23, r23
    1b1a:	88 1f       	adc	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	1a 94       	dec	r1
    1b20:	69 f7       	brne	.-38     	; 0x1afc <__udivmodsi4_loop>
    1b22:	60 95       	com	r22
    1b24:	70 95       	com	r23
    1b26:	80 95       	com	r24
    1b28:	90 95       	com	r25
    1b2a:	9b 01       	movw	r18, r22
    1b2c:	ac 01       	movw	r20, r24
    1b2e:	bd 01       	movw	r22, r26
    1b30:	cf 01       	movw	r24, r30
    1b32:	08 95       	ret

00001b34 <__umulhisi3>:
    1b34:	a2 9f       	mul	r26, r18
    1b36:	b0 01       	movw	r22, r0
    1b38:	b3 9f       	mul	r27, r19
    1b3a:	c0 01       	movw	r24, r0
    1b3c:	a3 9f       	mul	r26, r19
    1b3e:	70 0d       	add	r23, r0
    1b40:	81 1d       	adc	r24, r1
    1b42:	11 24       	eor	r1, r1
    1b44:	91 1d       	adc	r25, r1
    1b46:	b2 9f       	mul	r27, r18
    1b48:	70 0d       	add	r23, r0
    1b4a:	81 1d       	adc	r24, r1
    1b4c:	11 24       	eor	r1, r1
    1b4e:	91 1d       	adc	r25, r1
    1b50:	08 95       	ret

00001b52 <_exit>:
    1b52:	f8 94       	cli

00001b54 <__stop_program>:
    1b54:	ff cf       	rjmp	.-2      	; 0x1b54 <__stop_program>
