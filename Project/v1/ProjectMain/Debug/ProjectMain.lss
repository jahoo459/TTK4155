
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000198  00800100  00001eb8  00001f4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001eb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  00800298  00800298  000020e4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000020e4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000308  00000000  00000000  00002140  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003c70  00000000  00000000  00002448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011bf  00000000  00000000  000060b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001737  00000000  00000000  00007277  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000718  00000000  00000000  000089b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e27  00000000  00000000  000090c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001d99  00000000  00000000  00009eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003f0  00000000  00000000  0000bc88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	fa c1       	rjmp	.+1012   	; 0x402 <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <JOY_updatePosition+0x70>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e8 eb       	ldi	r30, 0xB8	; 184
     37c:	fe e1       	ldi	r31, 0x1E	; 30
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a8 39       	cpi	r26, 0x98	; 152
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a8 e9       	ldi	r26, 0x98	; 152
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a1 3c       	cpi	r26, 0xC1	; 193
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	7d d0       	rcall	.+250    	; 0x496 <main>
     39c:	0c 94 5a 0f 	jmp	0x1eb4	; 0x1eb4 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	//printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 b1 02 	sts	0x02B1, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 9c 02 	sts	0x029C, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 9b 02 	sts	0x029B, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 9a 02 	sts	0x029A, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_3>:
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	8f 93       	push	r24
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 99 02 	sts	0x0299, r24
     414:	8f 91       	pop	r24
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <init>:
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	1f e1       	ldi	r17, 0x1F	; 31
     42a:	e1 2e       	mov	r14, r17
     42c:	f1 2c       	mov	r15, r1
     42e:	00 e0       	ldi	r16, 0x00	; 0
     430:	10 e0       	ldi	r17, 0x00	; 0
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	4b e4       	ldi	r20, 0x4B	; 75
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e8       	ldi	r22, 0x80	; 128
     43c:	75 e2       	ldi	r23, 0x25	; 37
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <uartInit>
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	18 d2       	rcall	.+1072   	; 0x87a <enableXMEM>
     44a:	0e 94 4d 0a 	call	0x149a	; 0x149a <SLI_init>
     44e:	27 d2       	rcall	.+1102   	; 0x89e <JOY_init>
     450:	9e d7       	rcall	.+3900   	; 0x138e <OLED_init>
     452:	0e 94 56 0a 	call	0x14ac	; 0x14ac <SPI_init>
     456:	e6 d3       	rcall	.+1996   	; 0xc24 <MCP2515_init>
     458:	6d d0       	rcall	.+218    	; 0x534 <CAN_init>
     45a:	8b b7       	in	r24, 0x3b	; 59
     45c:	80 64       	ori	r24, 0x40	; 64
     45e:	8b bf       	out	0x3b, r24	; 59
     460:	85 b7       	in	r24, 0x35	; 53
     462:	82 60       	ori	r24, 0x02	; 2
     464:	85 bf       	out	0x35, r24	; 53
     466:	85 b7       	in	r24, 0x35	; 53
     468:	8e 7f       	andi	r24, 0xFE	; 254
     46a:	85 bf       	out	0x35, r24	; 53
     46c:	8b 98       	cbi	0x11, 3	; 17
     46e:	93 9a       	sbi	0x12, 3	; 18
     470:	8b b7       	in	r24, 0x3b	; 59
     472:	80 68       	ori	r24, 0x80	; 128
     474:	8b bf       	out	0x3b, r24	; 59
     476:	85 b7       	in	r24, 0x35	; 53
     478:	88 60       	ori	r24, 0x08	; 8
     47a:	85 bf       	out	0x35, r24	; 53
     47c:	85 b7       	in	r24, 0x35	; 53
     47e:	8b 7f       	andi	r24, 0xFB	; 251
     480:	85 bf       	out	0x35, r24	; 53
     482:	32 98       	cbi	0x06, 2	; 6
     484:	3a 98       	cbi	0x07, 2	; 7
     486:	b8 98       	cbi	0x17, 0	; 23
     488:	c0 98       	cbi	0x18, 0	; 24
     48a:	78 94       	sei
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	ff 90       	pop	r15
     492:	ef 90       	pop	r14
     494:	08 95       	ret

00000496 <main>:
/*
=======================MAIN FUNCTION=========================
*/

int main(void)
{
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	a1 97       	sbiw	r28, 0x21	; 33
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
	
	init();
     4aa:	ba df       	rcall	.-140    	; 0x420 <init>

	OLED_goto(0,0);
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	80 e0       	ldi	r24, 0x00	; 0
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	2f d6       	rcall	.+3166   	; 0x1114 <OLED_goto>
	OLED_printString("I'm alive");
     4b6:	82 e4       	ldi	r24, 0x42	; 66
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	82 d6       	rcall	.+3332   	; 0x11c0 <OLED_printString>
    while(1)
    {
		// statusMultifunctionBoard();
		currDir = JOY_getDirection();
		
		message2send.id = 23;
     4bc:	07 e1       	ldi	r16, 0x17	; 23
     4be:	10 e0       	ldi	r17, 0x00	; 0
		message2send.length = 1;
     4c0:	ff 24       	eor	r15, r15
     4c2:	f3 94       	inc	r15
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     4c4:	0f 2e       	mov	r0, r31
     4c6:	fb e0       	ldi	r31, 0x0B	; 11
     4c8:	ef 2e       	mov	r14, r31
     4ca:	f0 2d       	mov	r31, r0
	static JOY_direction_t currDir;
	
    while(1)
    {
		// statusMultifunctionBoard();
		currDir = JOY_getDirection();
     4cc:	6b d3       	rcall	.+1750   	; 0xba4 <JOY_getDirection>
     4ce:	80 93 98 02 	sts	0x0298, r24
		
		message2send.id = 23;
     4d2:	1a 83       	std	Y+2, r17	; 0x02
     4d4:	09 83       	std	Y+1, r16	; 0x01
		message2send.length = 1;
     4d6:	fb 82       	std	Y+3, r15	; 0x03
		message2send.data[0] = currDir;
     4d8:	8c 83       	std	Y+4, r24	; 0x04

		
		CAN_sendMessage(&message2send, 0);
     4da:	60 e0       	ldi	r22, 0x00	; 0
     4dc:	ce 01       	movw	r24, r28
     4de:	01 96       	adiw	r24, 0x01	; 1
     4e0:	40 d0       	rcall	.+128    	; 0x562 <CAN_sendMessage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4e2:	2f ef       	ldi	r18, 0xFF	; 255
     4e4:	8f ef       	ldi	r24, 0xFF	; 255
     4e6:	92 e0       	ldi	r25, 0x02	; 2
     4e8:	21 50       	subi	r18, 0x01	; 1
     4ea:	80 40       	sbci	r24, 0x00	; 0
     4ec:	90 40       	sbci	r25, 0x00	; 0
     4ee:	e1 f7       	brne	.-8      	; 0x4e8 <main+0x52>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <main+0x5c>
     4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <main+0x5e>
		_delay_ms(200);

		if(activateMenuFlag)
     4f4:	80 91 9a 02 	lds	r24, 0x029A
     4f8:	81 11       	cpse	r24, r1
		{
			MENU_activate();
     4fa:	fe d5       	rcall	.+3068   	; 0x10f8 <MENU_activate>
		}

		if(SPIreceivedFlag)
     4fc:	80 91 99 02 	lds	r24, 0x0299
     500:	88 23       	and	r24, r24
     502:	21 f3       	breq	.-56     	; 0x4cc <main+0x36>
		{
			
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
     504:	6c e2       	ldi	r22, 0x2C	; 44
     506:	80 e0       	ldi	r24, 0x00	; 0
     508:	76 d3       	rcall	.+1772   	; 0xbf6 <MCP2515_read>
     50a:	83 70       	andi	r24, 0x03	; 3
     50c:	f9 f2       	breq	.-66     	; 0x4cc <main+0x36>
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     50e:	68 2f       	mov	r22, r24
     510:	ce 01       	movw	r24, r28
     512:	47 96       	adiw	r24, 0x17	; 23
     514:	8f d0       	rcall	.+286    	; 0x634 <CAN_receiveMessage>
     516:	fe 01       	movw	r30, r28
     518:	77 96       	adiw	r30, 0x17	; 23
     51a:	de 01       	movw	r26, r28
     51c:	1c 96       	adiw	r26, 0x0c	; 12
     51e:	8e 2d       	mov	r24, r14
     520:	01 90       	ld	r0, Z+
     522:	0d 92       	st	X+, r0
     524:	8a 95       	dec	r24
     526:	e1 f7       	brne	.-8      	; 0x520 <__stack+0x21>
	// 			{
	// 				printf(" %c", receivedMessage.data[i]);
	// 			}
	// 			printf("\n");

				CAN_printMessage(&receivedMessage);
     528:	ce 01       	movw	r24, r28
     52a:	0c 96       	adiw	r24, 0x0c	; 12
     52c:	4c d1       	rcall	.+664    	; 0x7c6 <CAN_printMessage>
			
				SPIreceivedFlag = 0;
     52e:	10 92 99 02 	sts	0x0299, r1
     532:	cc cf       	rjmp	.-104    	; 0x4cc <main+0x36>

00000534 <CAN_init>:
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
     53c:	43 e0       	ldi	r20, 0x03	; 3
     53e:	6b e2       	ldi	r22, 0x2B	; 43
     540:	80 e0       	ldi	r24, 0x00	; 0
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	7b d3       	rcall	.+1782   	; 0xc3c <MCP2515_write>
     546:	40 e6       	ldi	r20, 0x60	; 96
     548:	60 e6       	ldi	r22, 0x60	; 96
     54a:	80 e0       	ldi	r24, 0x00	; 0
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	76 d3       	rcall	.+1772   	; 0xc3c <MCP2515_write>
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	40 e8       	ldi	r20, 0x80	; 128
     554:	6f e0       	ldi	r22, 0x0F	; 15
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	83 d3       	rcall	.+1798   	; 0xc62 <MCP2515_bitModify>
     55c:	df 91       	pop	r29
     55e:	cf 91       	pop	r28
     560:	08 95       	ret

00000562 <CAN_sendMessage>:
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	cd b7       	in	r28, 0x3d	; 61
     568:	de b7       	in	r29, 0x3e	; 62
     56a:	27 97       	sbiw	r28, 0x07	; 7
     56c:	0f b6       	in	r0, 0x3f	; 63
     56e:	f8 94       	cli
     570:	de bf       	out	0x3e, r29	; 62
     572:	0f be       	out	0x3f, r0	; 63
     574:	cd bf       	out	0x3d, r28	; 61
     576:	9e 83       	std	Y+6, r25	; 0x06
     578:	8d 83       	std	Y+5, r24	; 0x05
     57a:	6f 83       	std	Y+7, r22	; 0x07
     57c:	8f 81       	ldd	r24, Y+7	; 0x07
     57e:	88 2f       	mov	r24, r24
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	00 97       	sbiw	r24, 0x00	; 0
     584:	09 f0       	breq	.+2      	; 0x588 <CAN_sendMessage+0x26>
     586:	4d c0       	rjmp	.+154    	; 0x622 <CAN_sendMessage+0xc0>
     588:	8d 81       	ldd	r24, Y+5	; 0x05
     58a:	9e 81       	ldd	r25, Y+6	; 0x06
     58c:	fc 01       	movw	r30, r24
     58e:	80 81       	ld	r24, Z
     590:	91 81       	ldd	r25, Z+1	; 0x01
     592:	9c 83       	std	Y+4, r25	; 0x04
     594:	8b 83       	std	Y+3, r24	; 0x03
     596:	8b 81       	ldd	r24, Y+3	; 0x03
     598:	82 95       	swap	r24
     59a:	88 0f       	add	r24, r24
     59c:	80 7e       	andi	r24, 0xE0	; 224
     59e:	48 2f       	mov	r20, r24
     5a0:	62 e3       	ldi	r22, 0x32	; 50
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	4a d3       	rcall	.+1684   	; 0xc3c <MCP2515_write>
     5a8:	8b 81       	ldd	r24, Y+3	; 0x03
     5aa:	9c 81       	ldd	r25, Y+4	; 0x04
     5ac:	96 95       	lsr	r25
     5ae:	87 95       	ror	r24
     5b0:	96 95       	lsr	r25
     5b2:	87 95       	ror	r24
     5b4:	96 95       	lsr	r25
     5b6:	87 95       	ror	r24
     5b8:	48 2f       	mov	r20, r24
     5ba:	61 e3       	ldi	r22, 0x31	; 49
     5bc:	80 e0       	ldi	r24, 0x00	; 0
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	3d d3       	rcall	.+1658   	; 0xc3c <MCP2515_write>
     5c2:	8d 81       	ldd	r24, Y+5	; 0x05
     5c4:	9e 81       	ldd	r25, Y+6	; 0x06
     5c6:	fc 01       	movw	r30, r24
     5c8:	82 81       	ldd	r24, Z+2	; 0x02
     5ca:	48 2f       	mov	r20, r24
     5cc:	65 e3       	ldi	r22, 0x35	; 53
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	34 d3       	rcall	.+1640   	; 0xc3c <MCP2515_write>
     5d4:	86 e3       	ldi	r24, 0x36	; 54
     5d6:	89 83       	std	Y+1, r24	; 0x01
     5d8:	1a 82       	std	Y+2, r1	; 0x02
     5da:	15 c0       	rjmp	.+42     	; 0x606 <CAN_sendMessage+0xa4>
     5dc:	8a 81       	ldd	r24, Y+2	; 0x02
     5de:	88 2f       	mov	r24, r24
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	2d 81       	ldd	r18, Y+5	; 0x05
     5e4:	3e 81       	ldd	r19, Y+6	; 0x06
     5e6:	82 0f       	add	r24, r18
     5e8:	93 1f       	adc	r25, r19
     5ea:	03 96       	adiw	r24, 0x03	; 3
     5ec:	fc 01       	movw	r30, r24
     5ee:	80 81       	ld	r24, Z
     5f0:	48 2f       	mov	r20, r24
     5f2:	69 81       	ldd	r22, Y+1	; 0x01
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	21 d3       	rcall	.+1602   	; 0xc3c <MCP2515_write>
     5fa:	89 81       	ldd	r24, Y+1	; 0x01
     5fc:	8f 5f       	subi	r24, 0xFF	; 255
     5fe:	89 83       	std	Y+1, r24	; 0x01
     600:	8a 81       	ldd	r24, Y+2	; 0x02
     602:	8f 5f       	subi	r24, 0xFF	; 255
     604:	8a 83       	std	Y+2, r24	; 0x02
     606:	8d 81       	ldd	r24, Y+5	; 0x05
     608:	9e 81       	ldd	r25, Y+6	; 0x06
     60a:	fc 01       	movw	r30, r24
     60c:	92 81       	ldd	r25, Z+2	; 0x02
     60e:	8a 81       	ldd	r24, Y+2	; 0x02
     610:	89 17       	cp	r24, r25
     612:	20 f3       	brcs	.-56     	; 0x5dc <CAN_sendMessage+0x7a>
     614:	2f ef       	ldi	r18, 0xFF	; 255
     616:	48 e0       	ldi	r20, 0x08	; 8
     618:	60 e3       	ldi	r22, 0x30	; 48
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	21 d3       	rcall	.+1602   	; 0xc62 <MCP2515_bitModify>
     620:	00 00       	nop
     622:	27 96       	adiw	r28, 0x07	; 7
     624:	0f b6       	in	r0, 0x3f	; 63
     626:	f8 94       	cli
     628:	de bf       	out	0x3e, r29	; 62
     62a:	0f be       	out	0x3f, r0	; 63
     62c:	cd bf       	out	0x3d, r28	; 61
     62e:	df 91       	pop	r29
     630:	cf 91       	pop	r28
     632:	08 95       	ret

00000634 <CAN_receiveMessage>:
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	61 97       	sbiw	r28, 0x11	; 17
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	de bf       	out	0x3e, r29	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	cd bf       	out	0x3d, r28	; 61
     64c:	98 8b       	std	Y+16, r25	; 0x10
     64e:	8f 87       	std	Y+15, r24	; 0x0f
     650:	69 8b       	std	Y+17, r22	; 0x11
     652:	89 89       	ldd	r24, Y+17	; 0x11
     654:	88 2f       	mov	r24, r24
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	82 30       	cpi	r24, 0x02	; 2
     65a:	91 05       	cpc	r25, r1
     65c:	09 f4       	brne	.+2      	; 0x660 <CAN_receiveMessage+0x2c>
     65e:	57 c0       	rjmp	.+174    	; 0x70e <CAN_receiveMessage+0xda>
     660:	83 30       	cpi	r24, 0x03	; 3
     662:	91 05       	cpc	r25, r1
     664:	21 f0       	breq	.+8      	; 0x66e <CAN_receiveMessage+0x3a>
     666:	81 30       	cpi	r24, 0x01	; 1
     668:	91 05       	cpc	r25, r1
     66a:	09 f0       	breq	.+2      	; 0x66e <CAN_receiveMessage+0x3a>
     66c:	9f c0       	rjmp	.+318    	; 0x7ac <CAN_receiveMessage+0x178>
     66e:	61 e6       	ldi	r22, 0x61	; 97
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	c0 d2       	rcall	.+1408   	; 0xbf6 <MCP2515_read>
     676:	88 2f       	mov	r24, r24
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	9d 83       	std	Y+5, r25	; 0x05
     67c:	8c 83       	std	Y+4, r24	; 0x04
     67e:	8c 81       	ldd	r24, Y+4	; 0x04
     680:	9d 81       	ldd	r25, Y+5	; 0x05
     682:	8c 01       	movw	r16, r24
     684:	00 0f       	add	r16, r16
     686:	11 1f       	adc	r17, r17
     688:	00 0f       	add	r16, r16
     68a:	11 1f       	adc	r17, r17
     68c:	00 0f       	add	r16, r16
     68e:	11 1f       	adc	r17, r17
     690:	62 e6       	ldi	r22, 0x62	; 98
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	af d2       	rcall	.+1374   	; 0xbf6 <MCP2515_read>
     698:	82 95       	swap	r24
     69a:	86 95       	lsr	r24
     69c:	87 70       	andi	r24, 0x07	; 7
     69e:	88 2f       	mov	r24, r24
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	80 2b       	or	r24, r16
     6a4:	91 2b       	or	r25, r17
     6a6:	9d 83       	std	Y+5, r25	; 0x05
     6a8:	8c 83       	std	Y+4, r24	; 0x04
     6aa:	65 e6       	ldi	r22, 0x65	; 101
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	a2 d2       	rcall	.+1348   	; 0xbf6 <MCP2515_read>
     6b2:	8e 83       	std	Y+6, r24	; 0x06
     6b4:	86 e6       	ldi	r24, 0x66	; 102
     6b6:	89 83       	std	Y+1, r24	; 0x01
     6b8:	1a 82       	std	Y+2, r1	; 0x02
     6ba:	14 c0       	rjmp	.+40     	; 0x6e4 <CAN_receiveMessage+0xb0>
     6bc:	8a 81       	ldd	r24, Y+2	; 0x02
     6be:	08 2f       	mov	r16, r24
     6c0:	10 e0       	ldi	r17, 0x00	; 0
     6c2:	69 81       	ldd	r22, Y+1	; 0x01
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	96 d2       	rcall	.+1324   	; 0xbf6 <MCP2515_read>
     6ca:	28 2f       	mov	r18, r24
     6cc:	ce 01       	movw	r24, r28
     6ce:	07 96       	adiw	r24, 0x07	; 7
     6d0:	80 0f       	add	r24, r16
     6d2:	91 1f       	adc	r25, r17
     6d4:	fc 01       	movw	r30, r24
     6d6:	20 83       	st	Z, r18
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	8f 5f       	subi	r24, 0xFF	; 255
     6dc:	89 83       	std	Y+1, r24	; 0x01
     6de:	8a 81       	ldd	r24, Y+2	; 0x02
     6e0:	8f 5f       	subi	r24, 0xFF	; 255
     6e2:	8a 83       	std	Y+2, r24	; 0x02
     6e4:	9e 81       	ldd	r25, Y+6	; 0x06
     6e6:	8a 81       	ldd	r24, Y+2	; 0x02
     6e8:	89 17       	cp	r24, r25
     6ea:	40 f3       	brcs	.-48     	; 0x6bc <CAN_receiveMessage+0x88>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	41 e0       	ldi	r20, 0x01	; 1
     6f0:	6c e2       	ldi	r22, 0x2C	; 44
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	b5 d2       	rcall	.+1386   	; 0xc62 <MCP2515_bitModify>
     6f8:	8f 85       	ldd	r24, Y+15	; 0x0f
     6fa:	98 89       	ldd	r25, Y+16	; 0x10
     6fc:	2b e0       	ldi	r18, 0x0B	; 11
     6fe:	fe 01       	movw	r30, r28
     700:	34 96       	adiw	r30, 0x04	; 4
     702:	dc 01       	movw	r26, r24
     704:	01 90       	ld	r0, Z+
     706:	0d 92       	st	X+, r0
     708:	2a 95       	dec	r18
     70a:	e1 f7       	brne	.-8      	; 0x704 <CAN_receiveMessage+0xd0>
     70c:	4f c0       	rjmp	.+158    	; 0x7ac <CAN_receiveMessage+0x178>
     70e:	61 e7       	ldi	r22, 0x71	; 113
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	70 d2       	rcall	.+1248   	; 0xbf6 <MCP2515_read>
     716:	88 2f       	mov	r24, r24
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	9d 83       	std	Y+5, r25	; 0x05
     71c:	8c 83       	std	Y+4, r24	; 0x04
     71e:	8c 81       	ldd	r24, Y+4	; 0x04
     720:	9d 81       	ldd	r25, Y+5	; 0x05
     722:	8c 01       	movw	r16, r24
     724:	00 0f       	add	r16, r16
     726:	11 1f       	adc	r17, r17
     728:	00 0f       	add	r16, r16
     72a:	11 1f       	adc	r17, r17
     72c:	00 0f       	add	r16, r16
     72e:	11 1f       	adc	r17, r17
     730:	62 e7       	ldi	r22, 0x72	; 114
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	5f d2       	rcall	.+1214   	; 0xbf6 <MCP2515_read>
     738:	82 95       	swap	r24
     73a:	86 95       	lsr	r24
     73c:	87 70       	andi	r24, 0x07	; 7
     73e:	88 2f       	mov	r24, r24
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	80 2b       	or	r24, r16
     744:	91 2b       	or	r25, r17
     746:	9d 83       	std	Y+5, r25	; 0x05
     748:	8c 83       	std	Y+4, r24	; 0x04
     74a:	65 e7       	ldi	r22, 0x75	; 117
     74c:	80 e0       	ldi	r24, 0x00	; 0
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	52 d2       	rcall	.+1188   	; 0xbf6 <MCP2515_read>
     752:	8e 83       	std	Y+6, r24	; 0x06
     754:	86 e7       	ldi	r24, 0x76	; 118
     756:	89 83       	std	Y+1, r24	; 0x01
     758:	1b 82       	std	Y+3, r1	; 0x03
     75a:	14 c0       	rjmp	.+40     	; 0x784 <CAN_receiveMessage+0x150>
     75c:	8b 81       	ldd	r24, Y+3	; 0x03
     75e:	08 2f       	mov	r16, r24
     760:	10 e0       	ldi	r17, 0x00	; 0
     762:	69 81       	ldd	r22, Y+1	; 0x01
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	46 d2       	rcall	.+1164   	; 0xbf6 <MCP2515_read>
     76a:	28 2f       	mov	r18, r24
     76c:	ce 01       	movw	r24, r28
     76e:	07 96       	adiw	r24, 0x07	; 7
     770:	80 0f       	add	r24, r16
     772:	91 1f       	adc	r25, r17
     774:	fc 01       	movw	r30, r24
     776:	20 83       	st	Z, r18
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	8f 5f       	subi	r24, 0xFF	; 255
     77c:	89 83       	std	Y+1, r24	; 0x01
     77e:	8b 81       	ldd	r24, Y+3	; 0x03
     780:	8f 5f       	subi	r24, 0xFF	; 255
     782:	8b 83       	std	Y+3, r24	; 0x03
     784:	9e 81       	ldd	r25, Y+6	; 0x06
     786:	8b 81       	ldd	r24, Y+3	; 0x03
     788:	89 17       	cp	r24, r25
     78a:	40 f3       	brcs	.-48     	; 0x75c <CAN_receiveMessage+0x128>
     78c:	20 e0       	ldi	r18, 0x00	; 0
     78e:	42 e0       	ldi	r20, 0x02	; 2
     790:	6c e2       	ldi	r22, 0x2C	; 44
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	65 d2       	rcall	.+1226   	; 0xc62 <MCP2515_bitModify>
     798:	8f 85       	ldd	r24, Y+15	; 0x0f
     79a:	98 89       	ldd	r25, Y+16	; 0x10
     79c:	2b e0       	ldi	r18, 0x0B	; 11
     79e:	fe 01       	movw	r30, r28
     7a0:	34 96       	adiw	r30, 0x04	; 4
     7a2:	dc 01       	movw	r26, r24
     7a4:	01 90       	ld	r0, Z+
     7a6:	0d 92       	st	X+, r0
     7a8:	2a 95       	dec	r18
     7aa:	e1 f7       	brne	.-8      	; 0x7a4 <CAN_receiveMessage+0x170>
     7ac:	8f 85       	ldd	r24, Y+15	; 0x0f
     7ae:	98 89       	ldd	r25, Y+16	; 0x10
     7b0:	61 96       	adiw	r28, 0x11	; 17
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	de bf       	out	0x3e, r29	; 62
     7b8:	0f be       	out	0x3f, r0	; 63
     7ba:	cd bf       	out	0x3d, r28	; 61
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	08 95       	ret

000007c6 <CAN_printMessage>:
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	00 d0       	rcall	.+0      	; 0x7cc <CAN_printMessage+0x6>
     7cc:	1f 92       	push	r1
     7ce:	cd b7       	in	r28, 0x3d	; 61
     7d0:	de b7       	in	r29, 0x3e	; 62
     7d2:	9b 83       	std	Y+3, r25	; 0x03
     7d4:	8a 83       	std	Y+2, r24	; 0x02
     7d6:	8a 81       	ldd	r24, Y+2	; 0x02
     7d8:	9b 81       	ldd	r25, Y+3	; 0x03
     7da:	fc 01       	movw	r30, r24
     7dc:	82 81       	ldd	r24, Z+2	; 0x02
     7de:	28 2f       	mov	r18, r24
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	8a 81       	ldd	r24, Y+2	; 0x02
     7e4:	9b 81       	ldd	r25, Y+3	; 0x03
     7e6:	fc 01       	movw	r30, r24
     7e8:	80 81       	ld	r24, Z
     7ea:	91 81       	ldd	r25, Z+1	; 0x01
     7ec:	43 2f       	mov	r20, r19
     7ee:	4f 93       	push	r20
     7f0:	2f 93       	push	r18
     7f2:	29 2f       	mov	r18, r25
     7f4:	2f 93       	push	r18
     7f6:	8f 93       	push	r24
     7f8:	82 e1       	ldi	r24, 0x12	; 18
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	89 2f       	mov	r24, r25
     7fe:	8f 93       	push	r24
     800:	82 e1       	ldi	r24, 0x12	; 18
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	8f 93       	push	r24
     806:	0e 94 56 0c 	call	0x18ac	; 0x18ac <printf>
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
     80e:	0f 90       	pop	r0
     810:	0f 90       	pop	r0
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	19 82       	std	Y+1, r1	; 0x01
     818:	1f c0       	rjmp	.+62     	; 0x858 <CAN_printMessage+0x92>
     81a:	89 81       	ldd	r24, Y+1	; 0x01
     81c:	88 2f       	mov	r24, r24
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	2a 81       	ldd	r18, Y+2	; 0x02
     822:	3b 81       	ldd	r19, Y+3	; 0x03
     824:	82 0f       	add	r24, r18
     826:	93 1f       	adc	r25, r19
     828:	03 96       	adiw	r24, 0x03	; 3
     82a:	fc 01       	movw	r30, r24
     82c:	80 81       	ld	r24, Z
     82e:	88 2f       	mov	r24, r24
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	29 2f       	mov	r18, r25
     834:	2f 93       	push	r18
     836:	8f 93       	push	r24
     838:	8e e3       	ldi	r24, 0x3E	; 62
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	89 2f       	mov	r24, r25
     83e:	8f 93       	push	r24
     840:	8e e3       	ldi	r24, 0x3E	; 62
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	8f 93       	push	r24
     846:	0e 94 56 0c 	call	0x18ac	; 0x18ac <printf>
     84a:	0f 90       	pop	r0
     84c:	0f 90       	pop	r0
     84e:	0f 90       	pop	r0
     850:	0f 90       	pop	r0
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	8f 5f       	subi	r24, 0xFF	; 255
     856:	89 83       	std	Y+1, r24	; 0x01
     858:	8a 81       	ldd	r24, Y+2	; 0x02
     85a:	9b 81       	ldd	r25, Y+3	; 0x03
     85c:	fc 01       	movw	r30, r24
     85e:	92 81       	ldd	r25, Z+2	; 0x02
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	89 17       	cp	r24, r25
     864:	d0 f2       	brcs	.-76     	; 0x81a <CAN_printMessage+0x54>
     866:	8a e0       	ldi	r24, 0x0A	; 10
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <putchar>
     86e:	0f 90       	pop	r0
     870:	0f 90       	pop	r0
     872:	0f 90       	pop	r0
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	08 95       	ret

0000087a <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     87a:	95 b7       	in	r25, 0x35	; 53
     87c:	90 68       	ori	r25, 0x80	; 128
     87e:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     880:	96 b7       	in	r25, 0x36	; 54
     882:	98 60       	ori	r25, 0x08	; 8
     884:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     886:	88 23       	and	r24, r24
     888:	19 f0       	breq	.+6      	; 0x890 <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     88a:	80 b7       	in	r24, 0x30	; 48
     88c:	80 62       	ori	r24, 0x20	; 32
     88e:	80 bf       	out	0x30, r24	; 48
     890:	08 95       	ret

00000892 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     892:	fc 01       	movw	r30, r24
     894:	80 81       	ld	r24, Z
	return val;
}
     896:	08 95       	ret

00000898 <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     898:	fc 01       	movw	r30, r24
     89a:	60 83       	st	Z, r22
     89c:	08 95       	ret

0000089e <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     89e:	10 92 9f 02 	sts	0x029F, r1
     8a2:	10 92 9e 02 	sts	0x029E, r1
	currentPosition.Y_abs = 0;
     8a6:	10 92 a1 02 	sts	0x02A1, r1
     8aa:	10 92 a0 02 	sts	0x02A0, r1
	currentPosition.X_per = 0;
     8ae:	10 92 a3 02 	sts	0x02A3, r1
     8b2:	10 92 a2 02 	sts	0x02A2, r1
	currentPosition.Y_per = 0;
     8b6:	10 92 a5 02 	sts	0x02A5, r1
     8ba:	10 92 a4 02 	sts	0x02A4, r1
	currentDirection = CENTRE;
     8be:	10 92 9d 02 	sts	0x029D, r1
     8c2:	08 95       	ret

000008c4 <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     8c8:	42 d4       	rcall	.+2180   	; 0x114e <OLED_clear>
     8ca:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     8cc:	70 e0       	ldi	r23, 0x00	; 0
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	20 d4       	rcall	.+2112   	; 0x1114 <OLED_goto>
     8d4:	8c e4       	ldi	r24, 0x4C	; 76
     8d6:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     8d8:	73 d4       	rcall	.+2278   	; 0x11c0 <OLED_printString>
     8da:	2f ef       	ldi	r18, 0xFF	; 255
     8dc:	8f ef       	ldi	r24, 0xFF	; 255
     8de:	92 e0       	ldi	r25, 0x02	; 2
     8e0:	21 50       	subi	r18, 0x01	; 1
     8e2:	80 40       	sbci	r24, 0x00	; 0
     8e4:	90 40       	sbci	r25, 0x00	; 0
     8e6:	e1 f7       	brne	.-8      	; 0x8e0 <JOY_calibrate+0x1c>
     8e8:	00 c0       	rjmp	.+0      	; 0x8ea <JOY_calibrate+0x26>
     8ea:	00 c0       	rjmp	.+0      	; 0x8ec <JOY_calibrate+0x28>
     8ec:	c4 e1       	ldi	r28, 0x14	; 20
     8ee:	d0 e0       	ldi	r29, 0x00	; 0
     8f0:	60 91 06 01 	lds	r22, 0x0106
     8f4:	70 91 07 01 	lds	r23, 0x0107
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     8f8:	82 e0       	ldi	r24, 0x02	; 2
     8fa:	1a d6       	rcall	.+3124   	; 0x1530 <ADC_request>
     8fc:	2f ef       	ldi	r18, 0xFF	; 255
     8fe:	8f e1       	ldi	r24, 0x1F	; 31
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	21 50       	subi	r18, 0x01	; 1
     904:	80 40       	sbci	r24, 0x00	; 0
     906:	90 40       	sbci	r25, 0x00	; 0
     908:	e1 f7       	brne	.-8      	; 0x902 <JOY_calibrate+0x3e>
     90a:	00 c0       	rjmp	.+0      	; 0x90c <JOY_calibrate+0x48>
     90c:	00 00       	nop
     90e:	80 91 06 01 	lds	r24, 0x0106
     912:	90 91 07 01 	lds	r25, 0x0107
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     916:	30 d6       	rcall	.+3168   	; 0x1578 <ADC_read>
     918:	90 91 0d 01 	lds	r25, 0x010D
     91c:	98 17       	cp	r25, r24
     91e:	10 f4       	brcc	.+4      	; 0x924 <JOY_calibrate+0x60>
     920:	80 93 0d 01 	sts	0x010D, r24
		
		if(temp > calR) {calR = temp;}
     924:	21 97       	sbiw	r28, 0x01	; 1
     926:	20 97       	sbiw	r28, 0x00	; 0
     928:	19 f7       	brne	.-58     	; 0x8f0 <JOY_calibrate+0x2c>
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	81 e0       	ldi	r24, 0x01	; 1
	OLED_goto(0,0);
	OLED_printString("JOY RIGHT");
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	f0 d3       	rcall	.+2016   	; 0x1114 <OLED_goto>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_goto(1,0);
     934:	86 e5       	ldi	r24, 0x56	; 86
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	43 d4       	rcall	.+2182   	; 0x11c0 <OLED_printString>
     93a:	2f ef       	ldi	r18, 0xFF	; 255
     93c:	8f ef       	ldi	r24, 0xFF	; 255
     93e:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("JOY LEFT");
     940:	21 50       	subi	r18, 0x01	; 1
     942:	80 40       	sbci	r24, 0x00	; 0
     944:	90 40       	sbci	r25, 0x00	; 0
     946:	e1 f7       	brne	.-8      	; 0x940 <JOY_calibrate+0x7c>
     948:	00 c0       	rjmp	.+0      	; 0x94a <JOY_calibrate+0x86>
     94a:	00 c0       	rjmp	.+0      	; 0x94c <JOY_calibrate+0x88>
     94c:	c4 e1       	ldi	r28, 0x14	; 20
     94e:	d0 e0       	ldi	r29, 0x00	; 0
     950:	60 91 06 01 	lds	r22, 0x0106
     954:	70 91 07 01 	lds	r23, 0x0107
     958:	82 e0       	ldi	r24, 0x02	; 2
     95a:	ea d5       	rcall	.+3028   	; 0x1530 <ADC_request>
     95c:	2f ef       	ldi	r18, 0xFF	; 255
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     95e:	8f e1       	ldi	r24, 0x1F	; 31
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	21 50       	subi	r18, 0x01	; 1
     964:	80 40       	sbci	r24, 0x00	; 0
     966:	90 40       	sbci	r25, 0x00	; 0
     968:	e1 f7       	brne	.-8      	; 0x962 <JOY_calibrate+0x9e>
     96a:	00 c0       	rjmp	.+0      	; 0x96c <JOY_calibrate+0xa8>
     96c:	00 00       	nop
     96e:	80 91 06 01 	lds	r24, 0x0106
     972:	90 91 07 01 	lds	r25, 0x0107
     976:	00 d6       	rcall	.+3072   	; 0x1578 <ADC_read>
     978:	90 91 0c 01 	lds	r25, 0x010C
     97c:	89 17       	cp	r24, r25
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     97e:	10 f4       	brcc	.+4      	; 0x984 <JOY_calibrate+0xc0>
     980:	80 93 0c 01 	sts	0x010C, r24
     984:	21 97       	sbiw	r28, 0x01	; 1
     986:	20 97       	sbiw	r28, 0x00	; 0
     988:	19 f7       	brne	.-58     	; 0x950 <JOY_calibrate+0x8c>
		
		if(temp < calL) {calL = temp;}
     98a:	60 e0       	ldi	r22, 0x00	; 0
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	82 e0       	ldi	r24, 0x02	; 2
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	c0 d3       	rcall	.+1920   	; 0x1114 <OLED_goto>
     994:	8f e5       	ldi	r24, 0x5F	; 95
     996:	91 e0       	ldi	r25, 0x01	; 1
	OLED_goto(1,0);
	OLED_printString("JOY LEFT");
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     998:	13 d4       	rcall	.+2086   	; 0x11c0 <OLED_printString>
     99a:	2f ef       	ldi	r18, 0xFF	; 255
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_goto(2,0);
     99c:	8f ef       	ldi	r24, 0xFF	; 255
     99e:	92 e0       	ldi	r25, 0x02	; 2
     9a0:	21 50       	subi	r18, 0x01	; 1
     9a2:	80 40       	sbci	r24, 0x00	; 0
     9a4:	90 40       	sbci	r25, 0x00	; 0
     9a6:	e1 f7       	brne	.-8      	; 0x9a0 <JOY_calibrate+0xdc>
	OLED_printString("JOY UP");
     9a8:	00 c0       	rjmp	.+0      	; 0x9aa <JOY_calibrate+0xe6>
     9aa:	00 c0       	rjmp	.+0      	; 0x9ac <JOY_calibrate+0xe8>
     9ac:	c4 e1       	ldi	r28, 0x14	; 20
     9ae:	d0 e0       	ldi	r29, 0x00	; 0
     9b0:	60 91 06 01 	lds	r22, 0x0106
     9b4:	70 91 07 01 	lds	r23, 0x0107
     9b8:	81 e0       	ldi	r24, 0x01	; 1
     9ba:	ba d5       	rcall	.+2932   	; 0x1530 <ADC_request>
     9bc:	2f ef       	ldi	r18, 0xFF	; 255
     9be:	8f e1       	ldi	r24, 0x1F	; 31
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	21 50       	subi	r18, 0x01	; 1
     9c4:	80 40       	sbci	r24, 0x00	; 0
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     9c6:	90 40       	sbci	r25, 0x00	; 0
     9c8:	e1 f7       	brne	.-8      	; 0x9c2 <JOY_calibrate+0xfe>
     9ca:	00 c0       	rjmp	.+0      	; 0x9cc <JOY_calibrate+0x108>
     9cc:	00 00       	nop
     9ce:	80 91 06 01 	lds	r24, 0x0106
     9d2:	90 91 07 01 	lds	r25, 0x0107
     9d6:	d0 d5       	rcall	.+2976   	; 0x1578 <ADC_read>
     9d8:	90 91 0b 01 	lds	r25, 0x010B
     9dc:	98 17       	cp	r25, r24
     9de:	10 f4       	brcc	.+4      	; 0x9e4 <JOY_calibrate+0x120>
     9e0:	80 93 0b 01 	sts	0x010B, r24
     9e4:	21 97       	sbiw	r28, 0x01	; 1
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     9e6:	20 97       	sbiw	r28, 0x00	; 0
     9e8:	19 f7       	brne	.-58     	; 0x9b0 <JOY_calibrate+0xec>
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	83 e0       	ldi	r24, 0x03	; 3
     9f0:	90 e0       	ldi	r25, 0x00	; 0
		
		if(temp > calUp) {calUp = temp;}
     9f2:	90 d3       	rcall	.+1824   	; 0x1114 <OLED_goto>
     9f4:	86 e6       	ldi	r24, 0x66	; 102
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	e3 d3       	rcall	.+1990   	; 0x11c0 <OLED_printString>
     9fa:	2f ef       	ldi	r18, 0xFF	; 255
     9fc:	8f ef       	ldi	r24, 0xFF	; 255
     9fe:	92 e0       	ldi	r25, 0x02	; 2
	OLED_goto(2,0);
	OLED_printString("JOY UP");
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     a00:	21 50       	subi	r18, 0x01	; 1
     a02:	80 40       	sbci	r24, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_goto(3,0);
     a04:	90 40       	sbci	r25, 0x00	; 0
     a06:	e1 f7       	brne	.-8      	; 0xa00 <JOY_calibrate+0x13c>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <JOY_calibrate+0x146>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <JOY_calibrate+0x148>
     a0c:	c4 e1       	ldi	r28, 0x14	; 20
     a0e:	d0 e0       	ldi	r29, 0x00	; 0
	OLED_printString("JOY DOWN");
     a10:	60 91 06 01 	lds	r22, 0x0106
     a14:	70 91 07 01 	lds	r23, 0x0107
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	8a d5       	rcall	.+2836   	; 0x1530 <ADC_request>
     a1c:	2f ef       	ldi	r18, 0xFF	; 255
     a1e:	8f e1       	ldi	r24, 0x1F	; 31
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	21 50       	subi	r18, 0x01	; 1
     a24:	80 40       	sbci	r24, 0x00	; 0
     a26:	90 40       	sbci	r25, 0x00	; 0
     a28:	e1 f7       	brne	.-8      	; 0xa22 <JOY_calibrate+0x15e>
     a2a:	00 c0       	rjmp	.+0      	; 0xa2c <JOY_calibrate+0x168>
     a2c:	00 00       	nop
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     a2e:	80 91 06 01 	lds	r24, 0x0106
     a32:	90 91 07 01 	lds	r25, 0x0107
     a36:	a0 d5       	rcall	.+2880   	; 0x1578 <ADC_read>
     a38:	90 91 0a 01 	lds	r25, 0x010A
     a3c:	89 17       	cp	r24, r25
     a3e:	10 f4       	brcc	.+4      	; 0xa44 <JOY_calibrate+0x180>
     a40:	80 93 0a 01 	sts	0x010A, r24
     a44:	21 97       	sbiw	r28, 0x01	; 1
     a46:	20 97       	sbiw	r28, 0x00	; 0
     a48:	19 f7       	brne	.-58     	; 0xa10 <JOY_calibrate+0x14c>
     a4a:	20 91 0b 01 	lds	r18, 0x010B
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     a4e:	80 91 0a 01 	lds	r24, 0x010A
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	28 1b       	sub	r18, r24
     a56:	31 09       	sbc	r19, r1
     a58:	c9 01       	movw	r24, r18
		
		if(temp < calDown) {calDown = temp;}
     a5a:	99 23       	and	r25, r25
     a5c:	0c f4       	brge	.+2      	; 0xa60 <JOY_calibrate+0x19c>
     a5e:	01 96       	adiw	r24, 0x01	; 1
     a60:	95 95       	asr	r25
     a62:	87 95       	ror	r24
     a64:	80 93 09 01 	sts	0x0109, r24
	OLED_goto(3,0);
	OLED_printString("JOY DOWN");
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     a68:	20 91 0d 01 	lds	r18, 0x010D
	}
	
	
	//printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
	
	meanVert = (calUp - calDown)/2;
     a6c:	80 91 0c 01 	lds	r24, 0x010C
     a70:	30 e0       	ldi	r19, 0x00	; 0
     a72:	28 1b       	sub	r18, r24
     a74:	31 09       	sbc	r19, r1
     a76:	c9 01       	movw	r24, r18
     a78:	99 23       	and	r25, r25
     a7a:	0c f4       	brge	.+2      	; 0xa7e <JOY_calibrate+0x1ba>
     a7c:	01 96       	adiw	r24, 0x01	; 1
     a7e:	95 95       	asr	r25
     a80:	87 95       	ror	r24
     a82:	80 93 08 01 	sts	0x0108, r24
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	70 e0       	ldi	r23, 0x00	; 0
	meanHor = (calR - calL)/2;
     a8a:	84 e0       	ldi	r24, 0x04	; 4
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	42 d3       	rcall	.+1668   	; 0x1114 <OLED_goto>
     a90:	8f e6       	ldi	r24, 0x6F	; 111
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	95 d3       	rcall	.+1834   	; 0x11c0 <OLED_printString>
     a96:	2f ef       	ldi	r18, 0xFF	; 255
     a98:	8f ef       	ldi	r24, 0xFF	; 255
     a9a:	9e e0       	ldi	r25, 0x0E	; 14
     a9c:	21 50       	subi	r18, 0x01	; 1
     a9e:	80 40       	sbci	r24, 0x00	; 0
     aa0:	90 40       	sbci	r25, 0x00	; 0
     aa2:	e1 f7       	brne	.-8      	; 0xa9c <JOY_calibrate+0x1d8>
     aa4:	00 c0       	rjmp	.+0      	; 0xaa6 <JOY_calibrate+0x1e2>
     aa6:	00 00       	nop
	
	OLED_goto(4,0);
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	08 95       	ret

00000aae <JOY_requestCurrentPosition>:
     aae:	88 37       	cpi	r24, 0x78	; 120
     ab0:	39 f4       	brne	.+14     	; 0xac0 <JOY_requestCurrentPosition+0x12>
     ab2:	60 91 06 01 	lds	r22, 0x0106
	OLED_printString("CALIB DONE");
     ab6:	70 91 07 01 	lds	r23, 0x0107
     aba:	82 e0       	ldi	r24, 0x02	; 2
     abc:	39 c5       	rjmp	.+2674   	; 0x1530 <ADC_request>
     abe:	08 95       	ret
     ac0:	89 37       	cpi	r24, 0x79	; 121
     ac2:	31 f4       	brne	.+12     	; 0xad0 <JOY_requestCurrentPosition+0x22>
     ac4:	60 91 06 01 	lds	r22, 0x0106
     ac8:	70 91 07 01 	lds	r23, 0x0107
     acc:	81 e0       	ldi	r24, 0x01	; 1
	//printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
	_delay_ms(1000);
}
     ace:	30 c5       	rjmp	.+2656   	; 0x1530 <ADC_request>
     ad0:	08 95       	ret

00000ad2 <JOY_updatePosition>:
     ad2:	88 37       	cpi	r24, 0x78	; 120
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
	{
		ADC_request(Y_channel, adc_ext_ram);
     ad4:	f9 f4       	brne	.+62     	; 0xb14 <JOY_updatePosition+0x42>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     ad6:	80 91 06 01 	lds	r24, 0x0106
     ada:	90 91 07 01 	lds	r25, 0x0107
     ade:	4c d5       	rcall	.+2712   	; 0x1578 <ADC_read>
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	90 93 9f 02 	sts	0x029F, r25
     ae6:	80 93 9e 02 	sts	0x029E, r24
     aea:	20 91 08 01 	lds	r18, 0x0108
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     aee:	60 91 08 01 	lds	r22, 0x0108
     af2:	ac 01       	movw	r20, r24
     af4:	42 1b       	sub	r20, r18
     af6:	51 09       	sbc	r21, r1
     af8:	9a 01       	movw	r18, r20
     afa:	44 e6       	ldi	r20, 0x64	; 100
     afc:	42 9f       	mul	r20, r18
     afe:	c0 01       	movw	r24, r0
     b00:	43 9f       	mul	r20, r19
     b02:	90 0d       	add	r25, r0
     b04:	11 24       	eor	r1, r1
     b06:	70 e0       	ldi	r23, 0x00	; 0
     b08:	39 d5       	rcall	.+2674   	; 0x157c <__divmodhi4>
     b0a:	70 93 a3 02 	sts	0x02A3, r23
     b0e:	60 93 a2 02 	sts	0x02A2, r22
     b12:	08 95       	ret
     b14:	89 37       	cpi	r24, 0x79	; 121
     b16:	f1 f4       	brne	.+60     	; 0xb54 <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     b18:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     b1c:	90 91 07 01 	lds	r25, 0x0107
     b20:	2b d5       	rcall	.+2646   	; 0x1578 <ADC_read>
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	90 93 a1 02 	sts	0x02A1, r25
     b28:	80 93 a0 02 	sts	0x02A0, r24
     b2c:	20 91 09 01 	lds	r18, 0x0109
     b30:	60 91 09 01 	lds	r22, 0x0109
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     b34:	ac 01       	movw	r20, r24
     b36:	42 1b       	sub	r20, r18
     b38:	51 09       	sbc	r21, r1
     b3a:	9a 01       	movw	r18, r20
     b3c:	44 e6       	ldi	r20, 0x64	; 100
     b3e:	42 9f       	mul	r20, r18
     b40:	c0 01       	movw	r24, r0
     b42:	43 9f       	mul	r20, r19
     b44:	90 0d       	add	r25, r0
     b46:	11 24       	eor	r1, r1
     b48:	70 e0       	ldi	r23, 0x00	; 0
     b4a:	18 d5       	rcall	.+2608   	; 0x157c <__divmodhi4>
     b4c:	70 93 a5 02 	sts	0x02A5, r23
     b50:	60 93 a4 02 	sts	0x02A4, r22
     b54:	08 95       	ret

00000b56 <JOY_calculateDirection>:
     b56:	80 91 a2 02 	lds	r24, 0x02A2
     b5a:	90 91 a3 02 	lds	r25, 0x02A3
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     b5e:	8b 35       	cpi	r24, 0x5B	; 91
     b60:	91 05       	cpc	r25, r1
     b62:	24 f0       	brlt	.+8      	; 0xb6c <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     b64:	83 e0       	ldi	r24, 0x03	; 3
     b66:	80 93 9d 02 	sts	0x029D, r24
     b6a:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     b6c:	86 3a       	cpi	r24, 0xA6	; 166
     b6e:	9f 4f       	sbci	r25, 0xFF	; 255
     b70:	24 f4       	brge	.+8      	; 0xb7a <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     b72:	84 e0       	ldi	r24, 0x04	; 4
     b74:	80 93 9d 02 	sts	0x029D, r24
     b78:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     b7a:	80 91 a4 02 	lds	r24, 0x02A4
     b7e:	90 91 a5 02 	lds	r25, 0x02A5
     b82:	8b 35       	cpi	r24, 0x5B	; 91
     b84:	91 05       	cpc	r25, r1
     b86:	24 f0       	brlt	.+8      	; 0xb90 <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	80 93 9d 02 	sts	0x029D, r24
     b8e:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     b90:	86 3a       	cpi	r24, 0xA6	; 166
     b92:	9f 4f       	sbci	r25, 0xFF	; 255
     b94:	24 f4       	brge	.+8      	; 0xb9e <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     b96:	82 e0       	ldi	r24, 0x02	; 2
     b98:	80 93 9d 02 	sts	0x029D, r24
     b9c:	08 95       	ret
	else{currentDirection = CENTRE;}
     b9e:	10 92 9d 02 	sts	0x029D, r1
     ba2:	08 95       	ret

00000ba4 <JOY_getDirection>:
// Before the value is returned, the values of position in x and y direction are 
// requested from the ADC and written to the currentPosition and 
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
     ba4:	88 e7       	ldi	r24, 0x78	; 120
     ba6:	83 df       	rcall	.-250    	; 0xaae <JOY_requestCurrentPosition>
     ba8:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     baa:	8a 95       	dec	r24
     bac:	f1 f7       	brne	.-4      	; 0xbaa <JOY_getDirection+0x6>
     bae:	00 00       	nop
     bb0:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     bb2:	8f df       	rcall	.-226    	; 0xad2 <JOY_updatePosition>
     bb4:	89 e7       	ldi	r24, 0x79	; 121
     bb6:	7b df       	rcall	.-266    	; 0xaae <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     bb8:	82 e6       	ldi	r24, 0x62	; 98
     bba:	8a 95       	dec	r24
     bbc:	f1 f7       	brne	.-4      	; 0xbba <JOY_getDirection+0x16>
     bbe:	00 00       	nop
     bc0:	89 e7       	ldi	r24, 0x79	; 121
     bc2:	87 df       	rcall	.-242    	; 0xad2 <JOY_updatePosition>
     bc4:	c8 df       	rcall	.-112    	; 0xb56 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     bc6:	80 91 9d 02 	lds	r24, 0x029D
     bca:	08 95       	ret

00000bcc <MCP2515_reset>:
	//printf("finished MCP2515_init\n");
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
     bcc:	cf 93       	push	r28
     bce:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
     bd0:	86 d4       	rcall	.+2316   	; 0x14de <SPI_activateSlave>
     bd2:	80 ec       	ldi	r24, 0xC0	; 192
	SPI_send(MCP_RESET);
     bd4:	7a d4       	rcall	.+2292   	; 0x14ca <SPI_send>
     bd6:	8c ec       	ldi	r24, 0xCC	; 204
     bd8:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bda:	01 97       	sbiw	r24, 0x01	; 1
     bdc:	f1 f7       	brne	.-4      	; 0xbda <MCP2515_reset+0xe>
     bde:	00 c0       	rjmp	.+0      	; 0xbe0 <MCP2515_reset+0x14>
     be0:	00 00       	nop
     be2:	8c 2f       	mov	r24, r28
     be4:	80 d4       	rcall	.+2304   	; 0x14e6 <SPI_deactivateSlave>
	_delay_ms(1);
	SPI_deactivateSlave(slave);
     be6:	8f ef       	ldi	r24, 0xFF	; 255
     be8:	9f e2       	ldi	r25, 0x2F	; 47
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	f1 f7       	brne	.-4      	; 0xbea <MCP2515_reset+0x1e>
     bee:	00 c0       	rjmp	.+0      	; 0xbf0 <MCP2515_reset+0x24>
     bf0:	00 00       	nop
     bf2:	cf 91       	pop	r28
     bf4:	08 95       	ret

00000bf6 <MCP2515_read>:
     bf6:	cf 93       	push	r28
	_delay_ms(10);
}
     bf8:	df 93       	push	r29
     bfa:	c8 2f       	mov	r28, r24

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
     bfc:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
     bfe:	6f d4       	rcall	.+2270   	; 0x14de <SPI_activateSlave>
     c00:	83 e0       	ldi	r24, 0x03	; 3
	SPI_send(MCP_READ);
     c02:	63 d4       	rcall	.+2246   	; 0x14ca <SPI_send>
     c04:	8c ec       	ldi	r24, 0xCC	; 204
     c06:	94 e0       	ldi	r25, 0x04	; 4
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	f1 f7       	brne	.-4      	; 0xc08 <MCP2515_read+0x12>
     c0c:	00 c0       	rjmp	.+0      	; 0xc0e <MCP2515_read+0x18>
     c0e:	00 00       	nop
     c10:	8d 2f       	mov	r24, r29
     c12:	5b d4       	rcall	.+2230   	; 0x14ca <SPI_send>
	_delay_ms(1);
	SPI_send(address);
     c14:	5e d4       	rcall	.+2236   	; 0x14d2 <SPI_receive>
     c16:	d8 2f       	mov	r29, r24
     c18:	8c 2f       	mov	r24, r28
	
	uint8_t result;
	result = SPI_receive();
     c1a:	65 d4       	rcall	.+2250   	; 0x14e6 <SPI_deactivateSlave>
     c1c:	8d 2f       	mov	r24, r29
     c1e:	df 91       	pop	r29
	
	SPI_deactivateSlave(slave);
     c20:	cf 91       	pop	r28
     c22:	08 95       	ret

00000c24 <MCP2515_init>:
     c24:	80 e0       	ldi	r24, 0x00	; 0
	return result;
}
     c26:	d2 df       	rcall	.-92     	; 0xbcc <MCP2515_reset>
     c28:	6e e0       	ldi	r22, 0x0E	; 14
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	e4 df       	rcall	.-56     	; 0xbf6 <MCP2515_read>
uint8_t MCP2515_init()
{
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
	// Self-test
	uint8_t value;
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
     c2e:	98 2f       	mov	r25, r24
     c30:	90 7e       	andi	r25, 0xE0	; 224
	//printf("CANSTAT: %#x\n", value);
	if((value & MODE_MASK) != MODE_CONFIG) 
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 38       	cpi	r25, 0x80	; 128
     c36:	09 f4       	brne	.+2      	; 0xc3a <MCP2515_init+0x16>
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	08 95       	ret

00000c3c <MCP2515_write>:
     c3c:	1f 93       	push	r17
		return 1;
	}
	//
	//printf("finished MCP2515_init\n");
	return 0;
}
     c3e:	cf 93       	push	r28
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_write(SPI_SLAVES slave, uint8_t address, uint8_t data)
{
     c40:	df 93       	push	r29
     c42:	c8 2f       	mov	r28, r24
     c44:	16 2f       	mov	r17, r22
     c46:	d4 2f       	mov	r29, r20
	SPI_activateSlave(slave);
     c48:	4a d4       	rcall	.+2196   	; 0x14de <SPI_activateSlave>
     c4a:	82 e0       	ldi	r24, 0x02	; 2
	SPI_send(MCP_WRITE);
     c4c:	3e d4       	rcall	.+2172   	; 0x14ca <SPI_send>
     c4e:	81 2f       	mov	r24, r17
     c50:	3c d4       	rcall	.+2168   	; 0x14ca <SPI_send>
	SPI_send(address);
     c52:	8d 2f       	mov	r24, r29
     c54:	3a d4       	rcall	.+2164   	; 0x14ca <SPI_send>
     c56:	8c 2f       	mov	r24, r28
	SPI_send(data);
     c58:	46 d4       	rcall	.+2188   	; 0x14e6 <SPI_deactivateSlave>
     c5a:	df 91       	pop	r29
     c5c:	cf 91       	pop	r28
	SPI_deactivateSlave(slave);
     c5e:	1f 91       	pop	r17
     c60:	08 95       	ret

00000c62 <MCP2515_bitModify>:
     c62:	0f 93       	push	r16
}
     c64:	1f 93       	push	r17
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	c8 2f       	mov	r28, r24
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_bitModify(SPI_SLAVES slave, uint8_t register2change, uint8_t mask, uint8_t newValue)
{
     c6c:	06 2f       	mov	r16, r22
     c6e:	14 2f       	mov	r17, r20
     c70:	d2 2f       	mov	r29, r18
	SPI_activateSlave(slave);
     c72:	35 d4       	rcall	.+2154   	; 0x14de <SPI_activateSlave>
     c74:	85 e0       	ldi	r24, 0x05	; 5
	
	SPI_send(MCP_BITMOD);
     c76:	29 d4       	rcall	.+2130   	; 0x14ca <SPI_send>
     c78:	80 2f       	mov	r24, r16
     c7a:	27 d4       	rcall	.+2126   	; 0x14ca <SPI_send>
	SPI_send(register2change);
     c7c:	81 2f       	mov	r24, r17
     c7e:	25 d4       	rcall	.+2122   	; 0x14ca <SPI_send>
     c80:	8d 2f       	mov	r24, r29
	SPI_send(mask);
     c82:	23 d4       	rcall	.+2118   	; 0x14ca <SPI_send>
     c84:	8c 2f       	mov	r24, r28
     c86:	2f d4       	rcall	.+2142   	; 0x14e6 <SPI_deactivateSlave>
	SPI_send(newValue);
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	1f 91       	pop	r17
	
	SPI_deactivateSlave(slave);
     c8e:	0f 91       	pop	r16
     c90:	08 95       	ret

00000c92 <startGame>:

static int menuFrameOffset = 10; //Columns from left frame border
//******************************************************************************************

void startGame()
{
     c92:	cf 93       	push	r28
     c94:	df 93       	push	r29
	OLED_clear();
     c96:	5b d2       	rcall	.+1206   	; 0x114e <OLED_clear>
     c98:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	39 d2       	rcall	.+1138   	; 0x1114 <OLED_goto>
     ca2:	8a e7       	ldi	r24, 0x7A	; 122
     ca4:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("START");
     ca6:	8c d2       	rcall	.+1304   	; 0x11c0 <OLED_printString>
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_goto(3,0);
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	31 d2       	rcall	.+1122   	; 0x1114 <OLED_goto>
     cb2:	ce e0       	ldi	r28, 0x0E	; 14
     cb4:	d0 e0       	ldi	r29, 0x00	; 0
     cb6:	80 e8       	ldi	r24, 0x80	; 128
     cb8:	91 e0       	ldi	r25, 0x01	; 1
     cba:	82 d2       	rcall	.+1284   	; 0x11c0 <OLED_printString>
     cbc:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     cbe:	8f e7       	ldi	r24, 0x7F	; 127
     cc0:	97 e0       	ldi	r25, 0x07	; 7
     cc2:	21 50       	subi	r18, 0x01	; 1
     cc4:	80 40       	sbci	r24, 0x00	; 0
     cc6:	90 40       	sbci	r25, 0x00	; 0
     cc8:	e1 f7       	brne	.-8      	; 0xcc2 <startGame+0x30>
     cca:	00 c0       	rjmp	.+0      	; 0xccc <startGame+0x3a>
     ccc:	00 00       	nop
     cce:	21 97       	sbiw	r28, 0x01	; 1
     cd0:	20 97       	sbiw	r28, 0x00	; 0
     cd2:	89 f7       	brne	.-30     	; 0xcb6 <startGame+0x24>
     cd4:	60 e0       	ldi	r22, 0x00	; 0
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	85 e0       	ldi	r24, 0x05	; 5
	OLED_goto(0,0);
	OLED_printString("START");
	
	OLED_goto(3,0);
	
	for(int i = 14; i > 0; i--)
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	1b d2       	rcall	.+1078   	; 0x1114 <OLED_goto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_goto(5,0);
     cde:	82 e8       	ldi	r24, 0x82	; 130
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	6e d2       	rcall	.+1244   	; 0x11c0 <OLED_printString>
     ce4:	2f ef       	ldi	r18, 0xFF	; 255
     ce6:	8f ef       	ldi	r24, 0xFF	; 255
     ce8:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     cea:	21 50       	subi	r18, 0x01	; 1
     cec:	80 40       	sbci	r24, 0x00	; 0
     cee:	90 40       	sbci	r25, 0x00	; 0
     cf0:	e1 f7       	brne	.-8      	; 0xcea <startGame+0x58>
     cf2:	00 c0       	rjmp	.+0      	; 0xcf4 <startGame+0x62>
     cf4:	00 c0       	rjmp	.+0      	; 0xcf6 <startGame+0x64>
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	08 95       	ret

00000cfc <MENU_addMenuItem>:
     cfc:	cf 92       	push	r12
     cfe:	df 92       	push	r13
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
	_delay_ms(3000);
}
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     d0a:	df 93       	push	r29
     d0c:	8c 01       	movw	r16, r24
     d0e:	7b 01       	movw	r14, r22
     d10:	6a 01       	movw	r12, r20
     d12:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     d14:	80 91 a9 02 	lds	r24, 0x02A9
     d18:	90 91 aa 02 	lds	r25, 0x02AA
     d1c:	89 2b       	or	r24, r25
     d1e:	19 f0       	breq	.+6      	; 0xd26 <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     d20:	8b e8       	ldi	r24, 0x8B	; 139
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	d9 d5       	rcall	.+2994   	; 0x18d8 <puts>
     d26:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	4f d4       	rcall	.+2206   	; 0x15ca <malloc>
     d2c:	fc 01       	movw	r30, r24
     d2e:	90 93 aa 02 	sts	0x02AA, r25
     d32:	80 93 a9 02 	sts	0x02A9, r24
     d36:	f3 82       	std	Z+3, r15	; 0x03
     d38:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     d3a:	11 83       	std	Z+1, r17	; 0x01
     d3c:	00 83       	st	Z, r16
	currItem->name = name;
     d3e:	cd 2b       	or	r28, r29
     d40:	39 f0       	breq	.+14     	; 0xd50 <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     d42:	d5 82       	std	Z+5, r13	; 0x05
     d44:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     d4a:	97 83       	std	Z+7, r25	; 0x07
     d4c:	86 83       	std	Z+6, r24	; 0x06
     d4e:	04 c0       	rjmp	.+8      	; 0xd58 <MENU_addMenuItem+0x5c>
     d50:	15 82       	std	Z+5, r1	; 0x05
     d52:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     d54:	17 82       	std	Z+7, r1	; 0x07
     d56:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     d58:	df 91       	pop	r29
     d5a:	cf 91       	pop	r28
	}
}
     d5c:	1f 91       	pop	r17
     d5e:	0f 91       	pop	r16
     d60:	ff 90       	pop	r15
     d62:	ef 90       	pop	r14
     d64:	df 90       	pop	r13
     d66:	cf 90       	pop	r12
     d68:	08 95       	ret

00000d6a <MENU_buildMenus>:
     d6a:	cf 93       	push	r28
     d6c:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     d6e:	86 e1       	ldi	r24, 0x16	; 22
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	2b d4       	rcall	.+2134   	; 0x15ca <malloc>
     d74:	ec 01       	movw	r28, r24
     d76:	90 93 b0 02 	sts	0x02B0, r25
     d7a:	80 93 af 02 	sts	0x02AF, r24
     d7e:	81 ea       	ldi	r24, 0xA1	; 161
	mainMenu->menuName = "MainMenu";
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	99 83       	std	Y+1, r25	; 0x01
     d84:	88 83       	st	Y, r24
     d86:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     d88:	1c 8a       	std	Y+20, r1	; 0x14
     d8a:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9b 83       	std	Y+3, r25	; 0x03
     d90:	8a 83       	std	Y+2, r24	; 0x02
     d92:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	19 d4       	rcall	.+2098   	; 0x15ca <malloc>
     d98:	fc 01       	movw	r30, r24
     d9a:	90 93 ae 02 	sts	0x02AE, r25
     d9e:	80 93 ad 02 	sts	0x02AD, r24
     da2:	8a ea       	ldi	r24, 0xAA	; 170
     da4:	91 e0       	ldi	r25, 0x01	; 1
	difficultyMenu->menuName = "DifficultyMenu";
     da6:	91 83       	std	Z+1, r25	; 0x01
     da8:	80 83       	st	Z, r24
     daa:	d5 8b       	std	Z+21, r29	; 0x15
     dac:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     dae:	83 e0       	ldi	r24, 0x03	; 3
     db0:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     db2:	93 83       	std	Z+3, r25	; 0x03
     db4:	82 83       	std	Z+2, r24	; 0x02
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     dba:	40 e0       	ldi	r20, 0x00	; 0
     dbc:	50 e0       	ldi	r21, 0x00	; 0
     dbe:	be 01       	movw	r22, r28
     dc0:	89 eb       	ldi	r24, 0xB9	; 185
     dc2:	91 e0       	ldi	r25, 0x01	; 1
     dc4:	9b df       	rcall	.-202    	; 0xcfc <MENU_addMenuItem>
     dc6:	60 91 af 02 	lds	r22, 0x02AF
     dca:	70 91 b0 02 	lds	r23, 0x02B0
	mainMenu->children[0] = currItem;
     dce:	e0 91 a9 02 	lds	r30, 0x02A9
     dd2:	f0 91 aa 02 	lds	r31, 0x02AA
     dd6:	db 01       	movw	r26, r22
     dd8:	15 96       	adiw	r26, 0x05	; 5
     dda:	fc 93       	st	X, r31
     ddc:	ee 93       	st	-X, r30
     dde:	14 97       	sbiw	r26, 0x04	; 4
     de0:	89 e4       	ldi	r24, 0x49	; 73
     de2:	96 e0       	ldi	r25, 0x06	; 6
     de4:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
     de6:	82 87       	std	Z+10, r24	; 0x0a
     de8:	40 91 ad 02 	lds	r20, 0x02AD
     dec:	50 91 ae 02 	lds	r21, 0x02AE
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     df0:	21 e0       	ldi	r18, 0x01	; 1
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	82 ec       	ldi	r24, 0xC2	; 194
     df6:	91 e0       	ldi	r25, 0x01	; 1
     df8:	81 df       	rcall	.-254    	; 0xcfc <MENU_addMenuItem>
     dfa:	60 91 af 02 	lds	r22, 0x02AF
     dfe:	70 91 b0 02 	lds	r23, 0x02B0
	mainMenu->children[1] = currItem;
     e02:	80 91 a9 02 	lds	r24, 0x02A9
     e06:	90 91 aa 02 	lds	r25, 0x02AA
     e0a:	fb 01       	movw	r30, r22
     e0c:	97 83       	std	Z+7, r25	; 0x07
     e0e:	86 83       	std	Z+6, r24	; 0x06
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	40 e0       	ldi	r20, 0x00	; 0
     e16:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     e18:	8d ec       	ldi	r24, 0xCD	; 205
     e1a:	91 e0       	ldi	r25, 0x01	; 1
     e1c:	6f df       	rcall	.-290    	; 0xcfc <MENU_addMenuItem>
     e1e:	60 91 af 02 	lds	r22, 0x02AF
     e22:	70 91 b0 02 	lds	r23, 0x02B0
     e26:	80 91 a9 02 	lds	r24, 0x02A9
	mainMenu->children[2] = currItem;
     e2a:	90 91 aa 02 	lds	r25, 0x02AA
     e2e:	db 01       	movw	r26, r22
     e30:	19 96       	adiw	r26, 0x09	; 9
     e32:	9c 93       	st	X, r25
     e34:	8e 93       	st	-X, r24
     e36:	18 97       	sbiw	r26, 0x08	; 8
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e0       	ldi	r20, 0x00	; 0
     e3e:	50 e0       	ldi	r21, 0x00	; 0
     e40:	88 ed       	ldi	r24, 0xD8	; 216
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
     e42:	91 e0       	ldi	r25, 0x01	; 1
     e44:	5b df       	rcall	.-330    	; 0xcfc <MENU_addMenuItem>
     e46:	60 91 af 02 	lds	r22, 0x02AF
     e4a:	70 91 b0 02 	lds	r23, 0x02B0
     e4e:	e0 91 a9 02 	lds	r30, 0x02A9
	mainMenu->children[3] = currItem;
     e52:	f0 91 aa 02 	lds	r31, 0x02AA
     e56:	db 01       	movw	r26, r22
     e58:	1b 96       	adiw	r26, 0x0b	; 11
     e5a:	fc 93       	st	X, r31
     e5c:	ee 93       	st	-X, r30
     e5e:	1a 97       	sbiw	r26, 0x0a	; 10
     e60:	82 e6       	ldi	r24, 0x62	; 98
     e62:	94 e0       	ldi	r25, 0x04	; 4
     e64:	93 87       	std	Z+11, r25	; 0x0b
     e66:	82 87       	std	Z+10, r24	; 0x0a
     e68:	20 e0       	ldi	r18, 0x00	; 0
     e6a:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
     e6c:	40 e0       	ldi	r20, 0x00	; 0
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	82 ee       	ldi	r24, 0xE2	; 226
     e72:	91 e0       	ldi	r25, 0x01	; 1
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
     e74:	43 df       	rcall	.-378    	; 0xcfc <MENU_addMenuItem>
     e76:	e0 91 af 02 	lds	r30, 0x02AF
     e7a:	f0 91 b0 02 	lds	r31, 0x02B0
     e7e:	80 91 a9 02 	lds	r24, 0x02A9
     e82:	90 91 aa 02 	lds	r25, 0x02AA
	mainMenu->children[4] = currItem;
     e86:	95 87       	std	Z+13, r25	; 0x0d
     e88:	84 87       	std	Z+12, r24	; 0x0c
     e8a:	10 92 aa 02 	sts	0x02AA, r1
     e8e:	10 92 a9 02 	sts	0x02A9, r1
     e92:	60 91 ad 02 	lds	r22, 0x02AD
     e96:	70 91 ae 02 	lds	r23, 0x02AE
	
	currItem = NULL;
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
     ea0:	50 e0       	ldi	r21, 0x00	; 0
     ea2:	87 ee       	ldi	r24, 0xE7	; 231
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	2a df       	rcall	.-428    	; 0xcfc <MENU_addMenuItem>
     ea8:	60 91 ad 02 	lds	r22, 0x02AD
     eac:	70 91 ae 02 	lds	r23, 0x02AE
     eb0:	80 91 a9 02 	lds	r24, 0x02A9
     eb4:	90 91 aa 02 	lds	r25, 0x02AA
	difficultyMenu->children[0] = currItem;
     eb8:	fb 01       	movw	r30, r22
     eba:	95 83       	std	Z+5, r25	; 0x05
     ebc:	84 83       	std	Z+4, r24	; 0x04
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	50 e0       	ldi	r21, 0x00	; 0
     ec6:	8c ee       	ldi	r24, 0xEC	; 236
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	18 df       	rcall	.-464    	; 0xcfc <MENU_addMenuItem>
     ecc:	60 91 ad 02 	lds	r22, 0x02AD
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
     ed0:	70 91 ae 02 	lds	r23, 0x02AE
     ed4:	80 91 a9 02 	lds	r24, 0x02A9
     ed8:	90 91 aa 02 	lds	r25, 0x02AA
     edc:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
     ede:	17 96       	adiw	r26, 0x07	; 7
     ee0:	9c 93       	st	X, r25
     ee2:	8e 93       	st	-X, r24
     ee4:	16 97       	sbiw	r26, 0x06	; 6
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	83 ef       	ldi	r24, 0xF3	; 243
     ef0:	91 e0       	ldi	r25, 0x01	; 1
     ef2:	04 df       	rcall	.-504    	; 0xcfc <MENU_addMenuItem>
     ef4:	e0 91 ad 02 	lds	r30, 0x02AD
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
     ef8:	f0 91 ae 02 	lds	r31, 0x02AE
     efc:	80 91 a9 02 	lds	r24, 0x02A9
     f00:	90 91 aa 02 	lds	r25, 0x02AA
     f04:	91 87       	std	Z+9, r25	; 0x09
     f06:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
     f08:	df 91       	pop	r29
     f0a:	cf 91       	pop	r28
     f0c:	08 95       	ret

00000f0e <MENU_printMenuItem>:
     f0e:	cf 93       	push	r28
     f10:	df 93       	push	r29
     f12:	ec 01       	movw	r28, r24
     f14:	cb 01       	movw	r24, r22
     f16:	20 97       	sbiw	r28, 0x00	; 0
     f18:	39 f0       	breq	.+14     	; 0xf28 <MENU_printMenuItem+0x1a>
     f1a:	6a e0       	ldi	r22, 0x0A	; 10
}
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	fa d0       	rcall	.+500    	; 0x1114 <OLED_goto>
     f20:	88 81       	ld	r24, Y
void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
		OLED_printString(item->name);
     f22:	99 81       	ldd	r25, Y+1	; 0x01
     f24:	4d d1       	rcall	.+666    	; 0x11c0 <OLED_printString>
     f26:	07 c0       	rjmp	.+14     	; 0xf36 <MENU_printMenuItem+0x28>
     f28:	88 ef       	ldi	r24, 0xF8	; 248
     f2a:	91 e0       	ldi	r25, 0x01	; 1
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
     f2c:	9f 93       	push	r25
     f2e:	8f 93       	push	r24
     f30:	bd d4       	rcall	.+2426   	; 0x18ac <printf>
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	08 95       	ret

00000f3c <MENU_printMenu>:
	}
}
     f3c:	cf 92       	push	r12
     f3e:	df 92       	push	r13
     f40:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
     f42:	ff 92       	push	r15
     f44:	0f 93       	push	r16
     f46:	1f 93       	push	r17
     f48:	cf 93       	push	r28
     f4a:	df 93       	push	r29
     f4c:	6c 01       	movw	r12, r24
     f4e:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
     f50:	fe d0       	rcall	.+508    	; 0x114e <OLED_clear>
     f52:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	8b d1       	rcall	.+790    	; 0x126e <OLED_moveArrow>
     f58:	1e 14       	cp	r1, r14
     f5a:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
     f5c:	7c f4       	brge	.+30     	; 0xf7c <MENU_printMenu+0x40>
     f5e:	86 01       	movw	r16, r12
     f60:	0c 5f       	subi	r16, 0xFC	; 252
     f62:	1f 4f       	sbci	r17, 0xFF	; 255
     f64:	c0 e0       	ldi	r28, 0x00	; 0
     f66:	d0 e0       	ldi	r29, 0x00	; 0
     f68:	be 01       	movw	r22, r28
     f6a:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
     f6c:	81 91       	ld	r24, Z+
     f6e:	91 91       	ld	r25, Z+
     f70:	8f 01       	movw	r16, r30
     f72:	cd df       	rcall	.-102    	; 0xf0e <MENU_printMenuItem>
     f74:	21 96       	adiw	r28, 0x01	; 1
     f76:	ce 15       	cp	r28, r14
     f78:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
     f7a:	b1 f7       	brne	.-20     	; 0xf68 <MENU_printMenu+0x2c>
     f7c:	d0 92 ac 02 	sts	0x02AC, r13
     f80:	c0 92 ab 02 	sts	0x02AB, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
     f84:	10 92 a7 02 	sts	0x02A7, r1
     f88:	10 92 a6 02 	sts	0x02A6, r1
	
	currentPosition = 0;
     f8c:	f6 01       	movw	r30, r12
     f8e:	84 81       	ldd	r24, Z+4	; 0x04
     f90:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
     f92:	90 93 aa 02 	sts	0x02AA, r25
     f96:	80 93 a9 02 	sts	0x02A9, r24
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	1f 91       	pop	r17
}
     fa0:	0f 91       	pop	r16
     fa2:	ff 90       	pop	r15
     fa4:	ef 90       	pop	r14
     fa6:	df 90       	pop	r13
     fa8:	cf 90       	pop	r12
     faa:	08 95       	ret

00000fac <MENU_moveUp>:
     fac:	20 91 a6 02 	lds	r18, 0x02A6
     fb0:	30 91 a7 02 	lds	r19, 0x02A7
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
     fb4:	12 16       	cp	r1, r18
     fb6:	13 06       	cpc	r1, r19
     fb8:	bc f4       	brge	.+46     	; 0xfe8 <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
     fba:	c9 01       	movw	r24, r18
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	90 93 a7 02 	sts	0x02A7, r25
     fc2:	80 93 a6 02 	sts	0x02A6, r24
		currItem = currentMenu->children[currentPosition];
     fc6:	e0 91 ab 02 	lds	r30, 0x02AB
     fca:	f0 91 ac 02 	lds	r31, 0x02AC
     fce:	2f 5f       	subi	r18, 0xFF	; 255
     fd0:	3f 4f       	sbci	r19, 0xFF	; 255
     fd2:	22 0f       	add	r18, r18
     fd4:	33 1f       	adc	r19, r19
     fd6:	e2 0f       	add	r30, r18
     fd8:	f3 1f       	adc	r31, r19
     fda:	20 81       	ld	r18, Z
     fdc:	31 81       	ldd	r19, Z+1	; 0x01
     fde:	30 93 aa 02 	sts	0x02AA, r19
     fe2:	20 93 a9 02 	sts	0x02A9, r18
		OLED_moveArrow(currentPosition);
     fe6:	43 c1       	rjmp	.+646    	; 0x126e <OLED_moveArrow>
     fe8:	08 95       	ret

00000fea <MENU_moveDown>:
     fea:	e0 91 ab 02 	lds	r30, 0x02AB
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
     fee:	f0 91 ac 02 	lds	r31, 0x02AC
     ff2:	20 91 a6 02 	lds	r18, 0x02A6
     ff6:	30 91 a7 02 	lds	r19, 0x02A7
     ffa:	82 81       	ldd	r24, Z+2	; 0x02
     ffc:	93 81       	ldd	r25, Z+3	; 0x03
     ffe:	01 97       	sbiw	r24, 0x01	; 1
    1000:	28 17       	cp	r18, r24
    1002:	39 07       	cpc	r19, r25
    1004:	a4 f4       	brge	.+40     	; 0x102e <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
    1006:	c9 01       	movw	r24, r18
    1008:	01 96       	adiw	r24, 0x01	; 1
    100a:	90 93 a7 02 	sts	0x02A7, r25
    100e:	80 93 a6 02 	sts	0x02A6, r24
		currItem = currentMenu->children[currentPosition];
    1012:	2d 5f       	subi	r18, 0xFD	; 253
    1014:	3f 4f       	sbci	r19, 0xFF	; 255
    1016:	22 0f       	add	r18, r18
    1018:	33 1f       	adc	r19, r19
    101a:	e2 0f       	add	r30, r18
    101c:	f3 1f       	adc	r31, r19
    101e:	20 81       	ld	r18, Z
    1020:	31 81       	ldd	r19, Z+1	; 0x01
    1022:	30 93 aa 02 	sts	0x02AA, r19
    1026:	20 93 a9 02 	sts	0x02A9, r18
		OLED_moveArrow(currentPosition);
    102a:	21 c1       	rjmp	.+578    	; 0x126e <OLED_moveArrow>
    102c:	08 95       	ret
    102e:	10 92 a7 02 	sts	0x02A7, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
    1032:	10 92 a6 02 	sts	0x02A6, r1
    1036:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
    1038:	95 81       	ldd	r25, Z+5	; 0x05
    103a:	90 93 aa 02 	sts	0x02AA, r25
    103e:	80 93 a9 02 	sts	0x02A9, r24
    1042:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	13 c1       	rjmp	.+550    	; 0x126e <OLED_moveArrow>
    1048:	08 95       	ret

0000104a <MENU_moveLeft>:
    104a:	e0 91 ab 02 	lds	r30, 0x02AB
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
    104e:	f0 91 ac 02 	lds	r31, 0x02AC
    1052:	84 89       	ldd	r24, Z+20	; 0x14
    1054:	95 89       	ldd	r25, Z+21	; 0x15
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	21 f0       	breq	.+8      	; 0x1062 <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
    105a:	fc 01       	movw	r30, r24
    105c:	62 81       	ldd	r22, Z+2	; 0x02
    105e:	73 81       	ldd	r23, Z+3	; 0x03
    1060:	6d cf       	rjmp	.-294    	; 0xf3c <MENU_printMenu>
    1062:	08 95       	ret

00001064 <MENU_reactivate>:
    1064:	80 91 ab 02 	lds	r24, 0x02AB
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
    1068:	90 91 ac 02 	lds	r25, 0x02AC
    106c:	fc 01       	movw	r30, r24
    106e:	62 81       	ldd	r22, Z+2	; 0x02
    1070:	73 81       	ldd	r23, Z+3	; 0x03
    1072:	64 df       	rcall	.-312    	; 0xf3c <MENU_printMenu>
    1074:	18 c0       	rjmp	.+48     	; 0x10a6 <MENU_waitForInput>
	MENU_waitForInput();
    1076:	08 95       	ret

00001078 <MENU_moveRight>:
    1078:	e0 91 a9 02 	lds	r30, 0x02A9
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
    107c:	f0 91 aa 02 	lds	r31, 0x02AA
    1080:	86 81       	ldd	r24, Z+6	; 0x06
    1082:	97 81       	ldd	r25, Z+7	; 0x07
    1084:	89 2b       	or	r24, r25
    1086:	39 f0       	breq	.+14     	; 0x1096 <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
    1088:	84 81       	ldd	r24, Z+4	; 0x04
    108a:	95 81       	ldd	r25, Z+5	; 0x05
    108c:	fc 01       	movw	r30, r24
    108e:	62 81       	ldd	r22, Z+2	; 0x02
    1090:	73 81       	ldd	r23, Z+3	; 0x03
    1092:	54 cf       	rjmp	.-344    	; 0xf3c <MENU_printMenu>
    1094:	08 95       	ret
    1096:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
    1098:	f3 85       	ldd	r31, Z+11	; 0x0b
    109a:	e0 2d       	mov	r30, r0
    109c:	30 97       	sbiw	r30, 0x00	; 0
    109e:	11 f0       	breq	.+4      	; 0x10a4 <MENU_moveRight+0x2c>
    10a0:	09 95       	icall
	{
		currItem->functionPtr();
    10a2:	e0 cf       	rjmp	.-64     	; 0x1064 <MENU_reactivate>
		MENU_reactivate();
    10a4:	08 95       	ret

000010a6 <MENU_waitForInput>:
    10a6:	80 91 a6 02 	lds	r24, 0x02A6
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
    10aa:	90 91 a7 02 	lds	r25, 0x02A7
    10ae:	df d0       	rcall	.+446    	; 0x126e <OLED_moveArrow>
    10b0:	80 91 a8 02 	lds	r24, 0x02A8
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    10b4:	88 23       	and	r24, r24
    10b6:	f9 f0       	breq	.+62     	; 0x10f6 <MENU_waitForInput+0x50>
    10b8:	75 dd       	rcall	.-1302   	; 0xba4 <JOY_getDirection>
	{
		currDir = JOY_getDirection();
    10ba:	82 30       	cpi	r24, 0x02	; 2
    10bc:	71 f0       	breq	.+28     	; 0x10da <MENU_waitForInput+0x34>
		switch(currDir){
    10be:	18 f4       	brcc	.+6      	; 0x10c6 <MENU_waitForInput+0x20>
    10c0:	81 30       	cpi	r24, 0x01	; 1
    10c2:	49 f0       	breq	.+18     	; 0x10d6 <MENU_waitForInput+0x30>
    10c4:	0b c0       	rjmp	.+22     	; 0x10dc <MENU_waitForInput+0x36>
    10c6:	83 30       	cpi	r24, 0x03	; 3
    10c8:	21 f0       	breq	.+8      	; 0x10d2 <MENU_waitForInput+0x2c>
    10ca:	84 30       	cpi	r24, 0x04	; 4
    10cc:	39 f4       	brne	.+14     	; 0x10dc <MENU_waitForInput+0x36>
    10ce:	bd df       	rcall	.-134    	; 0x104a <MENU_moveLeft>
    10d0:	05 c0       	rjmp	.+10     	; 0x10dc <MENU_waitForInput+0x36>
			case LEFT:
			MENU_moveLeft();
    10d2:	d2 df       	rcall	.-92     	; 0x1078 <MENU_moveRight>
    10d4:	03 c0       	rjmp	.+6      	; 0x10dc <MENU_waitForInput+0x36>
			break;
    10d6:	6a df       	rcall	.-300    	; 0xfac <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
    10d8:	01 c0       	rjmp	.+2      	; 0x10dc <MENU_waitForInput+0x36>
    10da:	87 df       	rcall	.-242    	; 0xfea <MENU_moveDown>
			break;
    10dc:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
    10de:	8f e7       	ldi	r24, 0x7F	; 127
    10e0:	94 e0       	ldi	r25, 0x04	; 4
			break;
    10e2:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
    10e4:	80 40       	sbci	r24, 0x00	; 0
    10e6:	90 40       	sbci	r25, 0x00	; 0
    10e8:	e1 f7       	brne	.-8      	; 0x10e2 <MENU_waitForInput+0x3c>
    10ea:	00 c0       	rjmp	.+0      	; 0x10ec <MENU_waitForInput+0x46>
    10ec:	00 00       	nop
    10ee:	80 91 a8 02 	lds	r24, 0x02A8
    10f2:	81 11       	cpse	r24, r1
    10f4:	e1 cf       	rjmp	.-62     	; 0x10b8 <MENU_waitForInput+0x12>
    10f6:	08 95       	ret

000010f8 <MENU_activate>:
    10f8:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    10fa:	80 93 a8 02 	sts	0x02A8, r24
    10fe:	35 de       	rcall	.-918    	; 0xd6a <MENU_buildMenus>
    1100:	80 91 af 02 	lds	r24, 0x02AF
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
    1104:	90 91 b0 02 	lds	r25, 0x02B0
    1108:	fc 01       	movw	r30, r24
    110a:	62 81       	ldd	r22, Z+2	; 0x02
    110c:	73 81       	ldd	r23, Z+3	; 0x03
    110e:	16 df       	rcall	.-468    	; 0xf3c <MENU_printMenu>
    1110:	ca cf       	rjmp	.-108    	; 0x10a6 <MENU_waitForInput>
    1112:	08 95       	ret

00001114 <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
    1114:	26 2f       	mov	r18, r22
    1116:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
    1118:	75 95       	asr	r23
    111a:	67 95       	ror	r22
    111c:	75 95       	asr	r23
    111e:	67 95       	ror	r22
    1120:	75 95       	asr	r23
    1122:	67 95       	ror	r22
    1124:	75 95       	asr	r23
    1126:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
    1128:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
    112a:	80 55       	subi	r24, 0x50	; 80
    112c:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
    112e:	e0 91 10 01 	lds	r30, 0x0110
    1132:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1136:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
    1138:	e0 91 10 01 	lds	r30, 0x0110
    113c:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1140:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
    1142:	e0 91 10 01 	lds	r30, 0x0110
    1146:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    114a:	60 83       	st	Z, r22
    114c:	08 95       	ret

0000114e <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	c1 e0       	ldi	r28, 0x01	; 1
    1156:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    115c:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	70 e0       	ldi	r23, 0x00	; 0
    1162:	d8 df       	rcall	.-80     	; 0x1114 <OLED_goto>
    1164:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1166:	e0 91 0e 01 	lds	r30, 0x010E
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    116a:	f0 91 0f 01 	lds	r31, 0x010F
    116e:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1170:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1172:	80 38       	cpi	r24, 0x80	; 128
    1174:	c1 f7       	brne	.-16     	; 0x1166 <OLED_clear+0x18>
    1176:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1178:	9d 2f       	mov	r25, r29
    117a:	21 96       	adiw	r28, 0x01	; 1
    117c:	c9 30       	cpi	r28, 0x09	; 9
    117e:	d1 05       	cpc	r29, r1
    1180:	71 f7       	brne	.-36     	; 0x115e <OLED_clear+0x10>
    1182:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	08 95       	ret

0000118a <OLED_printCharacter>:
    118a:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	22 0f       	add	r18, r18
    1192:	33 1f       	adc	r19, r19
    1194:	22 0f       	add	r18, r18
    1196:	33 1f       	adc	r19, r19
    1198:	22 0f       	add	r18, r18
    119a:	33 1f       	adc	r19, r19
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	20 59       	subi	r18, 0x90	; 144
    11a2:	3f 4f       	sbci	r19, 0xFF	; 255
    11a4:	f9 01       	movw	r30, r18
    11a6:	e8 0f       	add	r30, r24
    11a8:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
    11aa:	e4 91       	lpm	r30, Z
    11ac:	a0 91 0e 01 	lds	r26, 0x010E
    11b0:	b0 91 0f 01 	lds	r27, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    11b4:	ec 93       	st	X, r30
    11b6:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
    11b8:	88 30       	cpi	r24, 0x08	; 8
    11ba:	91 05       	cpc	r25, r1
    11bc:	99 f7       	brne	.-26     	; 0x11a4 <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
    11be:	08 95       	ret

000011c0 <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
    11c0:	1f 93       	push	r17
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
    11c8:	10 e0       	ldi	r17, 0x00	; 0
    11ca:	06 c0       	rjmp	.+12     	; 0x11d8 <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
    11cc:	fe 01       	movw	r30, r28
    11ce:	e8 0f       	add	r30, r24
    11d0:	f9 1f       	adc	r31, r25
    11d2:	80 81       	ld	r24, Z
    11d4:	da df       	rcall	.-76     	; 0x118a <OLED_printCharacter>
    11d6:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
    11d8:	81 2f       	mov	r24, r17
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	fe 01       	movw	r30, r28
    11de:	01 90       	ld	r0, Z+
    11e0:	00 20       	and	r0, r0
    11e2:	e9 f7       	brne	.-6      	; 0x11de <OLED_printString+0x1e>
    11e4:	31 97       	sbiw	r30, 0x01	; 1
    11e6:	ec 1b       	sub	r30, r28
    11e8:	fd 0b       	sbc	r31, r29
    11ea:	8e 17       	cp	r24, r30
    11ec:	9f 07       	cpc	r25, r31
    11ee:	70 f3       	brcs	.-36     	; 0x11cc <OLED_printString+0xc>
    11f0:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
    11f2:	cf 91       	pop	r28
    11f4:	1f 91       	pop	r17
    11f6:	08 95       	ret

000011f8 <OLED_printArrow>:
    11f8:	e0 91 0e 01 	lds	r30, 0x010E
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
    11fc:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1200:	88 e1       	ldi	r24, 0x18	; 24
    1202:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    1204:	e0 91 0e 01 	lds	r30, 0x010E
    1208:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    120c:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
    120e:	e0 91 0e 01 	lds	r30, 0x010E
    1212:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1216:	9e e7       	ldi	r25, 0x7E	; 126
    1218:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
    121a:	e0 91 0e 01 	lds	r30, 0x010E
    121e:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1222:	9c e3       	ldi	r25, 0x3C	; 60
    1224:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    1226:	e0 91 0e 01 	lds	r30, 0x010E
    122a:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    122e:	80 83       	st	Z, r24
    1230:	08 95       	ret

00001232 <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    1232:	1f 93       	push	r17
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	c1 e0       	ldi	r28, 0x01	; 1
    123a:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1240:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	70 e0       	ldi	r23, 0x00	; 0
    1246:	66 df       	rcall	.-308    	; 0x1114 <OLED_goto>
    1248:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    124a:	e0 91 0e 01 	lds	r30, 0x010E
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    124e:	f0 91 0f 01 	lds	r31, 0x010F
    1252:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1254:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1256:	85 30       	cpi	r24, 0x05	; 5
    1258:	c1 f7       	brne	.-16     	; 0x124a <OLED_clearArrow+0x18>
    125a:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    125c:	9d 2f       	mov	r25, r29
    125e:	21 96       	adiw	r28, 0x01	; 1
    1260:	c9 30       	cpi	r28, 0x09	; 9
    1262:	d1 05       	cpc	r29, r1
    1264:	71 f7       	brne	.-36     	; 0x1242 <OLED_clearArrow+0x10>
    1266:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	08 95       	ret

0000126e <OLED_moveArrow>:
    126e:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    1270:	df 93       	push	r29
    1272:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
    1274:	de df       	rcall	.-68     	; 0x1232 <OLED_clearArrow>
    1276:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	ce 01       	movw	r24, r28
    127c:	4b df       	rcall	.-362    	; 0x1114 <OLED_goto>
    127e:	bc df       	rcall	.-136    	; 0x11f8 <OLED_printArrow>
    1280:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
    1282:	cf 91       	pop	r28
    1284:	08 95       	ret

00001286 <OLED_setContrast>:
}
    1286:	e0 91 10 01 	lds	r30, 0x0110
    128a:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    128e:	91 e8       	ldi	r25, 0x81	; 129
    1290:	90 83       	st	Z, r25
void OLED_setContrast(uint8_t contrast)
{
	// activate contrast contol
	OLED_writeByteToOLED(oled_cmd, 0x81);
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
    1292:	e0 91 10 01 	lds	r30, 0x0110
    1296:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    129a:	80 83       	st	Z, r24
    129c:	08 95       	ret

0000129e <OLED_fadeIn>:
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
}

void OLED_fadeIn(void)
{
    129e:	cf 93       	push	r28
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    12a0:	c0 e0       	ldi	r28, 0x00	; 0
	{
		OLED_setContrast(i);
    12a2:	8c 2f       	mov	r24, r28
    12a4:	f0 df       	rcall	.-32     	; 0x1286 <OLED_setContrast>
    12a6:	83 e3       	ldi	r24, 0x33	; 51
    12a8:	93 e1       	ldi	r25, 0x13	; 19
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	f1 f7       	brne	.-4      	; 0x12aa <OLED_fadeIn+0xc>
    12ae:	cf 5f       	subi	r28, 0xFF	; 255
}

void OLED_fadeIn(void)
{
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    12b0:	cf 3f       	cpi	r28, 0xFF	; 255
    12b2:	b9 f7       	brne	.-18     	; 0x12a2 <OLED_fadeIn+0x4>
    12b4:	cf 91       	pop	r28
	{
		OLED_setContrast(i);
		_delay_ms(4);
	}
}
    12b6:	08 95       	ret

000012b8 <OLED_splashScreen>:
    12b8:	88 e0       	ldi	r24, 0x08	; 8
	}
}

void OLED_splashScreen(void)
{
	printf("run splash screen...\n");
    12ba:	92 e0       	ldi	r25, 0x02	; 2
    12bc:	0d d3       	rcall	.+1562   	; 0x18d8 <puts>
    12be:	80 e0       	ldi	r24, 0x00	; 0
	
	OLED_setContrast(0);
    12c0:	e2 df       	rcall	.-60     	; 0x1286 <OLED_setContrast>
    12c2:	2f ef       	ldi	r18, 0xFF	; 255
    12c4:	8f e7       	ldi	r24, 0x7F	; 127
    12c6:	97 e0       	ldi	r25, 0x07	; 7
    12c8:	21 50       	subi	r18, 0x01	; 1
    12ca:	80 40       	sbci	r24, 0x00	; 0
    12cc:	90 40       	sbci	r25, 0x00	; 0
    12ce:	e1 f7       	brne	.-8      	; 0x12c8 <OLED_splashScreen+0x10>
    12d0:	00 c0       	rjmp	.+0      	; 0x12d2 <OLED_splashScreen+0x1a>
    12d2:	00 00       	nop
    12d4:	64 e0       	ldi	r22, 0x04	; 4
    12d6:	70 e0       	ldi	r23, 0x00	; 0
	
	_delay_ms(500);
	OLED_goto(2,4);
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	1b df       	rcall	.-458    	; 0x1114 <OLED_goto>
    12de:	8d e1       	ldi	r24, 0x1D	; 29
    12e0:	92 e0       	ldi	r25, 0x02	; 2
    12e2:	6e df       	rcall	.-292    	; 0x11c0 <OLED_printString>
	OLED_printString("Group 46 Soft");
    12e4:	dc df       	rcall	.-72     	; 0x129e <OLED_fadeIn>
    12e6:	2f ef       	ldi	r18, 0xFF	; 255
    12e8:	8f e7       	ldi	r24, 0x7F	; 127
    12ea:	97 e0       	ldi	r25, 0x07	; 7
	OLED_fadeIn();
    12ec:	21 50       	subi	r18, 0x01	; 1
    12ee:	80 40       	sbci	r24, 0x00	; 0
    12f0:	90 40       	sbci	r25, 0x00	; 0
    12f2:	e1 f7       	brne	.-8      	; 0x12ec <OLED_splashScreen+0x34>
    12f4:	00 c0       	rjmp	.+0      	; 0x12f6 <OLED_splashScreen+0x3e>
    12f6:	00 00       	nop
    12f8:	2a df       	rcall	.-428    	; 0x114e <OLED_clear>
    12fa:	80 e0       	ldi	r24, 0x00	; 0
    12fc:	c4 df       	rcall	.-120    	; 0x1286 <OLED_setContrast>
    12fe:	2f ef       	ldi	r18, 0xFF	; 255
    1300:	8f ef       	ldi	r24, 0xFF	; 255
	_delay_ms(500);
	
 	OLED_clear();
    1302:	92 e0       	ldi	r25, 0x02	; 2
    1304:	21 50       	subi	r18, 0x01	; 1
 	OLED_setContrast(0);
    1306:	80 40       	sbci	r24, 0x00	; 0
    1308:	90 40       	sbci	r25, 0x00	; 0
    130a:	e1 f7       	brne	.-8      	; 0x1304 <OLED_splashScreen+0x4c>
    130c:	00 c0       	rjmp	.+0      	; 0x130e <OLED_splashScreen+0x56>
    130e:	00 c0       	rjmp	.+0      	; 0x1310 <OLED_splashScreen+0x58>
    1310:	6c e1       	ldi	r22, 0x1C	; 28
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	83 e0       	ldi	r24, 0x03	; 3
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	fd de       	rcall	.-518    	; 0x1114 <OLED_goto>
    131a:	8b e2       	ldi	r24, 0x2B	; 43
    131c:	92 e0       	ldi	r25, 0x02	; 2
 	
 	_delay_ms(200);
 	OLED_goto(3,28);
    131e:	50 df       	rcall	.-352    	; 0x11c0 <OLED_printString>
    1320:	68 e1       	ldi	r22, 0x18	; 24
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	84 e0       	ldi	r24, 0x04	; 4
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	f5 de       	rcall	.-534    	; 0x1114 <OLED_goto>
 	OLED_printString("proudly");
    132a:	83 e3       	ldi	r24, 0x33	; 51
    132c:	92 e0       	ldi	r25, 0x02	; 2
    132e:	48 df       	rcall	.-368    	; 0x11c0 <OLED_printString>
    1330:	b6 df       	rcall	.-148    	; 0x129e <OLED_fadeIn>
 	OLED_goto(4,24);	
    1332:	2f ef       	ldi	r18, 0xFF	; 255
    1334:	8f e7       	ldi	r24, 0x7F	; 127
    1336:	97 e0       	ldi	r25, 0x07	; 7
    1338:	21 50       	subi	r18, 0x01	; 1
    133a:	80 40       	sbci	r24, 0x00	; 0
    133c:	90 40       	sbci	r25, 0x00	; 0
 	OLED_printString("presents");
    133e:	e1 f7       	brne	.-8      	; 0x1338 <OLED_splashScreen+0x80>
    1340:	00 c0       	rjmp	.+0      	; 0x1342 <OLED_splashScreen+0x8a>
    1342:	00 00       	nop
    1344:	04 df       	rcall	.-504    	; 0x114e <OLED_clear>
 	OLED_fadeIn();
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	9e df       	rcall	.-196    	; 0x1286 <OLED_setContrast>
    134a:	2f ef       	ldi	r18, 0xFF	; 255
    134c:	8f ef       	ldi	r24, 0xFF	; 255
    134e:	92 e0       	ldi	r25, 0x02	; 2
    1350:	21 50       	subi	r18, 0x01	; 1
    1352:	80 40       	sbci	r24, 0x00	; 0
    1354:	90 40       	sbci	r25, 0x00	; 0
    1356:	e1 f7       	brne	.-8      	; 0x1350 <OLED_splashScreen+0x98>
    1358:	00 c0       	rjmp	.+0      	; 0x135a <OLED_splashScreen+0xa2>
    135a:	00 c0       	rjmp	.+0      	; 0x135c <OLED_splashScreen+0xa4>
 	_delay_ms(500);
 	
 	OLED_clear();
    135c:	6c e1       	ldi	r22, 0x1C	; 28
    135e:	70 e0       	ldi	r23, 0x00	; 0
 	OLED_setContrast(0);
    1360:	83 e0       	ldi	r24, 0x03	; 3
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	d7 de       	rcall	.-594    	; 0x1114 <OLED_goto>
    1366:	8c e3       	ldi	r24, 0x3C	; 60
    1368:	92 e0       	ldi	r25, 0x02	; 2
    136a:	2a df       	rcall	.-428    	; 0x11c0 <OLED_printString>
    136c:	98 df       	rcall	.-208    	; 0x129e <OLED_fadeIn>
    136e:	2f ef       	ldi	r18, 0xFF	; 255
    1370:	8f ef       	ldi	r24, 0xFF	; 255
    1372:	9e e0       	ldi	r25, 0x0E	; 14
    1374:	21 50       	subi	r18, 0x01	; 1
    1376:	80 40       	sbci	r24, 0x00	; 0
 	
 	_delay_ms(200);
 	OLED_goto(3, 28);
    1378:	90 40       	sbci	r25, 0x00	; 0
    137a:	e1 f7       	brne	.-8      	; 0x1374 <OLED_splashScreen+0xbc>
    137c:	00 c0       	rjmp	.+0      	; 0x137e <OLED_splashScreen+0xc6>
    137e:	00 00       	nop
    1380:	e6 de       	rcall	.-564    	; 0x114e <OLED_clear>
    1382:	80 e5       	ldi	r24, 0x50	; 80
 	OLED_printString("FIFA 18");
    1384:	80 df       	rcall	.-256    	; 0x1286 <OLED_setContrast>
    1386:	84 e4       	ldi	r24, 0x44	; 68
    1388:	92 e0       	ldi	r25, 0x02	; 2
    138a:	a6 c2       	rjmp	.+1356   	; 0x18d8 <puts>
 	OLED_fadeIn();
    138c:	08 95       	ret

0000138e <OLED_init>:
    138e:	e0 91 10 01 	lds	r30, 0x0110
    1392:	f0 91 11 01 	lds	r31, 0x0111
    1396:	8e ea       	ldi	r24, 0xAE	; 174
    1398:	80 83       	st	Z, r24
    139a:	e0 91 10 01 	lds	r30, 0x0110
    139e:	f0 91 11 01 	lds	r31, 0x0111
 	_delay_ms(1000);
	
	// clean up
	OLED_clear();
    13a2:	81 ea       	ldi	r24, 0xA1	; 161
    13a4:	80 83       	st	Z, r24
	OLED_setContrast(0x50); // back to standard contrast
    13a6:	e0 91 10 01 	lds	r30, 0x0110
    13aa:	f0 91 11 01 	lds	r31, 0x0111
	
	printf("splash screen done...\n");
    13ae:	8a ed       	ldi	r24, 0xDA	; 218
    13b0:	80 83       	st	Z, r24
    13b2:	e0 91 10 01 	lds	r30, 0x0110
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
    13b6:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13ba:	82 e1       	ldi	r24, 0x12	; 18
    13bc:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    13be:	e0 91 10 01 	lds	r30, 0x0110
    13c2:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13c6:	88 ec       	ldi	r24, 0xC8	; 200
    13c8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    13ca:	e0 91 10 01 	lds	r30, 0x0110
    13ce:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13d2:	88 ea       	ldi	r24, 0xA8	; 168
    13d4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    13d6:	e0 91 10 01 	lds	r30, 0x0110
    13da:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13de:	8f e3       	ldi	r24, 0x3F	; 63
    13e0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    13e2:	e0 91 10 01 	lds	r30, 0x0110
    13e6:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13ea:	85 ed       	ldi	r24, 0xD5	; 213
    13ec:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
    13ee:	e0 91 10 01 	lds	r30, 0x0110
    13f2:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13f6:	80 e8       	ldi	r24, 0x80	; 128
    13f8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    13fa:	e0 91 10 01 	lds	r30, 0x0110
    13fe:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1402:	81 e8       	ldi	r24, 0x81	; 129
    1404:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    1406:	e0 91 10 01 	lds	r30, 0x0110
    140a:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    140e:	80 e5       	ldi	r24, 0x50	; 80
    1410:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    1412:	e0 91 10 01 	lds	r30, 0x0110
    1416:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    141a:	89 ed       	ldi	r24, 0xD9	; 217
    141c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
    141e:	e0 91 10 01 	lds	r30, 0x0110
    1422:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1426:	81 e2       	ldi	r24, 0x21	; 33
    1428:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    142a:	e0 91 10 01 	lds	r30, 0x0110
    142e:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1432:	80 e2       	ldi	r24, 0x20	; 32
    1434:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    1436:	e0 91 10 01 	lds	r30, 0x0110
    143a:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    143e:	82 e0       	ldi	r24, 0x02	; 2
    1440:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    1442:	e0 91 10 01 	lds	r30, 0x0110
    1446:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    144a:	8b ed       	ldi	r24, 0xDB	; 219
    144c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    144e:	e0 91 10 01 	lds	r30, 0x0110
    1452:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1456:	80 e3       	ldi	r24, 0x30	; 48
    1458:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    145a:	e0 91 10 01 	lds	r30, 0x0110
    145e:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1462:	8d ea       	ldi	r24, 0xAD	; 173
    1464:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    1466:	e0 91 10 01 	lds	r30, 0x0110
    146a:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    146e:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    1470:	e0 91 10 01 	lds	r30, 0x0110
    1474:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1478:	84 ea       	ldi	r24, 0xA4	; 164
    147a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    147c:	e0 91 10 01 	lds	r30, 0x0110
    1480:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1484:	86 ea       	ldi	r24, 0xA6	; 166
    1486:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    1488:	e0 91 10 01 	lds	r30, 0x0110
    148c:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1490:	8f ea       	ldi	r24, 0xAF	; 175
    1492:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    1494:	5c de       	rcall	.-840    	; 0x114e <OLED_clear>
    1496:	10 cf       	rjmp	.-480    	; 0x12b8 <OLED_splashScreen>
	OLED_splashScreen();
    1498:	08 95       	ret

0000149a <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    149a:	10 92 b3 02 	sts	0x02B3, r1
	currentSliPosition.L_abs = 0;
    149e:	10 92 b4 02 	sts	0x02B4, r1
	currentSliPosition.R_per = 0;
    14a2:	10 92 b5 02 	sts	0x02B5, r1
	currentSliPosition.L_per = 0;
    14a6:	10 92 b6 02 	sts	0x02B6, r1
    14aa:	08 95       	ret

000014ac <SPI_init>:

void SPI_init()
{
	//init external interrupt INT2 on falling edge
	#if defined(__AVR_ATmega162__)
		set_bit(GICR, INT2);
    14ac:	8b b7       	in	r24, 0x3b	; 59
    14ae:	80 62       	ori	r24, 0x20	; 32
    14b0:	8b bf       	out	0x3b, r24	; 59
		clear_bit(EMCUCR, ISC2);
    14b2:	86 b7       	in	r24, 0x36	; 54
    14b4:	8e 7f       	andi	r24, 0xFE	; 254
    14b6:	86 bf       	out	0x36, r24	; 54
		
		// Set _SS, MOSI and SCK output, all others input
		DDR_SPI |= (1<<SS_CAN_CONTROLLER_PIN_MODE) | (1<<MOSI_PIN) | (1<<SCK_PIN);
    14b8:	87 b3       	in	r24, 0x17	; 23
    14ba:	80 6b       	ori	r24, 0xB0	; 176
    14bc:	87 bb       	out	0x17, r24	; 23
	#endif
	
	

	// Enable SPI, Master, set clock rate fck/4
	SPCR = (1<<SPE) | (1<<MSTR);
    14be:	80 e5       	ldi	r24, 0x50	; 80
    14c0:	8d b9       	out	0x0d, r24	; 13
	
	// clock rate fck/2
	SPSR = (1<<SPI2X);
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	8e b9       	out	0x0e, r24	; 14

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORT_SPI, SS_CAN_CONTROLLER_PIN);
    14c6:	c4 9a       	sbi	0x18, 4	; 24
    14c8:	08 95       	ret

000014ca <SPI_send>:
}

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    14ca:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    14cc:	77 9b       	sbis	0x0e, 7	; 14
    14ce:	fe cf       	rjmp	.-4      	; 0x14cc <SPI_send+0x2>
}
    14d0:	08 95       	ret

000014d2 <SPI_receive>:

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    14d2:	8f ef       	ldi	r24, 0xFF	; 255
    14d4:	fa df       	rcall	.-12     	; 0x14ca <SPI_send>
    14d6:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    14d8:	fe cf       	rjmp	.-4      	; 0x14d6 <SPI_receive+0x4>
    14da:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    14dc:	08 95       	ret

000014de <SPI_activateSlave>:

	return data;
}
    14de:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    14e0:	01 c0       	rjmp	.+2      	; 0x14e4 <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    14e2:	c4 98       	cbi	0x18, 4	; 24
    14e4:	08 95       	ret

000014e6 <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    14e6:	81 11       	cpse	r24, r1
    14e8:	01 c0       	rjmp	.+2      	; 0x14ec <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    14ea:	c4 9a       	sbi	0x18, 4	; 24
    14ec:	08 95       	ret

000014ee <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    14ee:	5d 9b       	sbis	0x0b, 5	; 11
    14f0:	fe cf       	rjmp	.-4      	; 0x14ee <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    14f2:	8c b9       	out	0x0c, r24	; 12
    14f4:	08 95       	ret

000014f6 <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    14f6:	5f 9b       	sbis	0x0b, 7	; 11
    14f8:	fe cf       	rjmp	.-4      	; 0x14f6 <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    14fa:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
    14fc:	08 95       	ret

000014fe <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    14fe:	ef 92       	push	r14
    1500:	ff 92       	push	r15
    1502:	0f 93       	push	r16
    1504:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    1506:	bb 27       	eor	r27, r27
    1508:	a1 2f       	mov	r26, r17
    150a:	90 2f       	mov	r25, r16
    150c:	8f 2d       	mov	r24, r15
    150e:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    1510:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1512:	88 e1       	ldi	r24, 0x18	; 24
    1514:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    1516:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	#if defined(__AVR_ATmega162__)
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    1518:	8e e8       	ldi	r24, 0x8E	; 142
    151a:	80 bd       	out	0x20, r24	; 32
	
	#if defined(__AVR_ATmega2560__)
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	#endif
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    151c:	6b e7       	ldi	r22, 0x7B	; 123
    151e:	7a e0       	ldi	r23, 0x0A	; 10
    1520:	87 e7       	ldi	r24, 0x77	; 119
    1522:	9a e0       	ldi	r25, 0x0A	; 10
    1524:	79 d1       	rcall	.+754    	; 0x1818 <fdevopen>
    1526:	1f 91       	pop	r17
    1528:	0f 91       	pop	r16
    152a:	ff 90       	pop	r15
    152c:	ef 90       	pop	r14
    152e:	08 95       	ret

00001530 <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    1530:	9b 01       	movw	r18, r22
	
	switch(channel){
    1532:	82 30       	cpi	r24, 0x02	; 2
    1534:	69 f0       	breq	.+26     	; 0x1550 <ADC_request+0x20>
    1536:	18 f4       	brcc	.+6      	; 0x153e <ADC_request+0xe>
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	31 f0       	breq	.+12     	; 0x1548 <ADC_request+0x18>
    153c:	15 c0       	rjmp	.+42     	; 0x1568 <ADC_request+0x38>
    153e:	83 30       	cpi	r24, 0x03	; 3
    1540:	59 f0       	breq	.+22     	; 0x1558 <ADC_request+0x28>
    1542:	84 30       	cpi	r24, 0x04	; 4
    1544:	69 f0       	breq	.+26     	; 0x1560 <ADC_request+0x30>
    1546:	10 c0       	rjmp	.+32     	; 0x1568 <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    1548:	64 e0       	ldi	r22, 0x04	; 4
    154a:	c9 01       	movw	r24, r18
    154c:	a5 c9       	rjmp	.-3254   	; 0x898 <saveToAddress>
    154e:	08 95       	ret
			break;
    1550:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    1552:	c9 01       	movw	r24, r18
    1554:	a1 c9       	rjmp	.-3262   	; 0x898 <saveToAddress>
    1556:	08 95       	ret
    1558:	66 e0       	ldi	r22, 0x06	; 6
			break;
    155a:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    155c:	9d c9       	rjmp	.-3270   	; 0x898 <saveToAddress>
    155e:	08 95       	ret
    1560:	67 e0       	ldi	r22, 0x07	; 7
    1562:	c9 01       	movw	r24, r18
			break;
    1564:	99 c9       	rjmp	.-3278   	; 0x898 <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    1566:	08 95       	ret
    1568:	83 e8       	ldi	r24, 0x83	; 131
    156a:	92 e0       	ldi	r25, 0x02	; 2
    156c:	9f 93       	push	r25
			break;
    156e:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    1570:	9d d1       	rcall	.+826    	; 0x18ac <printf>
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	08 95       	ret

00001578 <ADC_read>:
    1578:	8c c9       	rjmp	.-3304   	; 0x892 <readFromAddress>
    157a:	08 95       	ret

0000157c <__divmodhi4>:
			break;
    157c:	97 fb       	bst	r25, 7
    157e:	07 2e       	mov	r0, r23
    1580:	16 f4       	brtc	.+4      	; 0x1586 <__divmodhi4+0xa>
    1582:	00 94       	com	r0
    1584:	06 d0       	rcall	.+12     	; 0x1592 <__divmodhi4_neg1>
    1586:	77 fd       	sbrc	r23, 7
    1588:	08 d0       	rcall	.+16     	; 0x159a <__divmodhi4_neg2>
    158a:	0b d0       	rcall	.+22     	; 0x15a2 <__udivmodhi4>
    158c:	07 fc       	sbrc	r0, 7
    158e:	05 d0       	rcall	.+10     	; 0x159a <__divmodhi4_neg2>
    1590:	3e f4       	brtc	.+14     	; 0x15a0 <__divmodhi4_exit>

00001592 <__divmodhi4_neg1>:
    1592:	90 95       	com	r25
    1594:	81 95       	neg	r24
    1596:	9f 4f       	sbci	r25, 0xFF	; 255
    1598:	08 95       	ret

0000159a <__divmodhi4_neg2>:
    159a:	70 95       	com	r23
    159c:	61 95       	neg	r22
    159e:	7f 4f       	sbci	r23, 0xFF	; 255

000015a0 <__divmodhi4_exit>:
    15a0:	08 95       	ret

000015a2 <__udivmodhi4>:
    15a2:	aa 1b       	sub	r26, r26
    15a4:	bb 1b       	sub	r27, r27
    15a6:	51 e1       	ldi	r21, 0x11	; 17
    15a8:	07 c0       	rjmp	.+14     	; 0x15b8 <__udivmodhi4_ep>

000015aa <__udivmodhi4_loop>:
    15aa:	aa 1f       	adc	r26, r26
    15ac:	bb 1f       	adc	r27, r27
    15ae:	a6 17       	cp	r26, r22
    15b0:	b7 07       	cpc	r27, r23
    15b2:	10 f0       	brcs	.+4      	; 0x15b8 <__udivmodhi4_ep>
    15b4:	a6 1b       	sub	r26, r22
    15b6:	b7 0b       	sbc	r27, r23

000015b8 <__udivmodhi4_ep>:
    15b8:	88 1f       	adc	r24, r24
    15ba:	99 1f       	adc	r25, r25
    15bc:	5a 95       	dec	r21
    15be:	a9 f7       	brne	.-22     	; 0x15aa <__udivmodhi4_loop>
    15c0:	80 95       	com	r24
    15c2:	90 95       	com	r25
    15c4:	bc 01       	movw	r22, r24
    15c6:	cd 01       	movw	r24, r26
    15c8:	08 95       	ret

000015ca <malloc>:
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	82 30       	cpi	r24, 0x02	; 2
    15d0:	91 05       	cpc	r25, r1
    15d2:	10 f4       	brcc	.+4      	; 0x15d8 <malloc+0xe>
    15d4:	82 e0       	ldi	r24, 0x02	; 2
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	e0 91 b9 02 	lds	r30, 0x02B9
    15dc:	f0 91 ba 02 	lds	r31, 0x02BA
    15e0:	20 e0       	ldi	r18, 0x00	; 0
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	a0 e0       	ldi	r26, 0x00	; 0
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	30 97       	sbiw	r30, 0x00	; 0
    15ea:	39 f1       	breq	.+78     	; 0x163a <malloc+0x70>
    15ec:	40 81       	ld	r20, Z
    15ee:	51 81       	ldd	r21, Z+1	; 0x01
    15f0:	48 17       	cp	r20, r24
    15f2:	59 07       	cpc	r21, r25
    15f4:	b8 f0       	brcs	.+46     	; 0x1624 <malloc+0x5a>
    15f6:	48 17       	cp	r20, r24
    15f8:	59 07       	cpc	r21, r25
    15fa:	71 f4       	brne	.+28     	; 0x1618 <malloc+0x4e>
    15fc:	82 81       	ldd	r24, Z+2	; 0x02
    15fe:	93 81       	ldd	r25, Z+3	; 0x03
    1600:	10 97       	sbiw	r26, 0x00	; 0
    1602:	29 f0       	breq	.+10     	; 0x160e <malloc+0x44>
    1604:	13 96       	adiw	r26, 0x03	; 3
    1606:	9c 93       	st	X, r25
    1608:	8e 93       	st	-X, r24
    160a:	12 97       	sbiw	r26, 0x02	; 2
    160c:	2c c0       	rjmp	.+88     	; 0x1666 <malloc+0x9c>
    160e:	90 93 ba 02 	sts	0x02BA, r25
    1612:	80 93 b9 02 	sts	0x02B9, r24
    1616:	27 c0       	rjmp	.+78     	; 0x1666 <malloc+0x9c>
    1618:	21 15       	cp	r18, r1
    161a:	31 05       	cpc	r19, r1
    161c:	31 f0       	breq	.+12     	; 0x162a <malloc+0x60>
    161e:	42 17       	cp	r20, r18
    1620:	53 07       	cpc	r21, r19
    1622:	18 f0       	brcs	.+6      	; 0x162a <malloc+0x60>
    1624:	a9 01       	movw	r20, r18
    1626:	db 01       	movw	r26, r22
    1628:	01 c0       	rjmp	.+2      	; 0x162c <malloc+0x62>
    162a:	ef 01       	movw	r28, r30
    162c:	9a 01       	movw	r18, r20
    162e:	bd 01       	movw	r22, r26
    1630:	df 01       	movw	r26, r30
    1632:	02 80       	ldd	r0, Z+2	; 0x02
    1634:	f3 81       	ldd	r31, Z+3	; 0x03
    1636:	e0 2d       	mov	r30, r0
    1638:	d7 cf       	rjmp	.-82     	; 0x15e8 <malloc+0x1e>
    163a:	21 15       	cp	r18, r1
    163c:	31 05       	cpc	r19, r1
    163e:	f9 f0       	breq	.+62     	; 0x167e <malloc+0xb4>
    1640:	28 1b       	sub	r18, r24
    1642:	39 0b       	sbc	r19, r25
    1644:	24 30       	cpi	r18, 0x04	; 4
    1646:	31 05       	cpc	r19, r1
    1648:	80 f4       	brcc	.+32     	; 0x166a <malloc+0xa0>
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	9b 81       	ldd	r25, Y+3	; 0x03
    164e:	61 15       	cp	r22, r1
    1650:	71 05       	cpc	r23, r1
    1652:	21 f0       	breq	.+8      	; 0x165c <malloc+0x92>
    1654:	fb 01       	movw	r30, r22
    1656:	93 83       	std	Z+3, r25	; 0x03
    1658:	82 83       	std	Z+2, r24	; 0x02
    165a:	04 c0       	rjmp	.+8      	; 0x1664 <malloc+0x9a>
    165c:	90 93 ba 02 	sts	0x02BA, r25
    1660:	80 93 b9 02 	sts	0x02B9, r24
    1664:	fe 01       	movw	r30, r28
    1666:	32 96       	adiw	r30, 0x02	; 2
    1668:	44 c0       	rjmp	.+136    	; 0x16f2 <malloc+0x128>
    166a:	fe 01       	movw	r30, r28
    166c:	e2 0f       	add	r30, r18
    166e:	f3 1f       	adc	r31, r19
    1670:	81 93       	st	Z+, r24
    1672:	91 93       	st	Z+, r25
    1674:	22 50       	subi	r18, 0x02	; 2
    1676:	31 09       	sbc	r19, r1
    1678:	39 83       	std	Y+1, r19	; 0x01
    167a:	28 83       	st	Y, r18
    167c:	3a c0       	rjmp	.+116    	; 0x16f2 <malloc+0x128>
    167e:	20 91 b7 02 	lds	r18, 0x02B7
    1682:	30 91 b8 02 	lds	r19, 0x02B8
    1686:	23 2b       	or	r18, r19
    1688:	41 f4       	brne	.+16     	; 0x169a <malloc+0xd0>
    168a:	20 91 02 01 	lds	r18, 0x0102
    168e:	30 91 03 01 	lds	r19, 0x0103
    1692:	30 93 b8 02 	sts	0x02B8, r19
    1696:	20 93 b7 02 	sts	0x02B7, r18
    169a:	20 91 00 01 	lds	r18, 0x0100
    169e:	30 91 01 01 	lds	r19, 0x0101
    16a2:	21 15       	cp	r18, r1
    16a4:	31 05       	cpc	r19, r1
    16a6:	41 f4       	brne	.+16     	; 0x16b8 <malloc+0xee>
    16a8:	2d b7       	in	r18, 0x3d	; 61
    16aa:	3e b7       	in	r19, 0x3e	; 62
    16ac:	40 91 04 01 	lds	r20, 0x0104
    16b0:	50 91 05 01 	lds	r21, 0x0105
    16b4:	24 1b       	sub	r18, r20
    16b6:	35 0b       	sbc	r19, r21
    16b8:	e0 91 b7 02 	lds	r30, 0x02B7
    16bc:	f0 91 b8 02 	lds	r31, 0x02B8
    16c0:	e2 17       	cp	r30, r18
    16c2:	f3 07       	cpc	r31, r19
    16c4:	a0 f4       	brcc	.+40     	; 0x16ee <malloc+0x124>
    16c6:	2e 1b       	sub	r18, r30
    16c8:	3f 0b       	sbc	r19, r31
    16ca:	28 17       	cp	r18, r24
    16cc:	39 07       	cpc	r19, r25
    16ce:	78 f0       	brcs	.+30     	; 0x16ee <malloc+0x124>
    16d0:	ac 01       	movw	r20, r24
    16d2:	4e 5f       	subi	r20, 0xFE	; 254
    16d4:	5f 4f       	sbci	r21, 0xFF	; 255
    16d6:	24 17       	cp	r18, r20
    16d8:	35 07       	cpc	r19, r21
    16da:	48 f0       	brcs	.+18     	; 0x16ee <malloc+0x124>
    16dc:	4e 0f       	add	r20, r30
    16de:	5f 1f       	adc	r21, r31
    16e0:	50 93 b8 02 	sts	0x02B8, r21
    16e4:	40 93 b7 02 	sts	0x02B7, r20
    16e8:	81 93       	st	Z+, r24
    16ea:	91 93       	st	Z+, r25
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <malloc+0x128>
    16ee:	e0 e0       	ldi	r30, 0x00	; 0
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	cf 01       	movw	r24, r30
    16f4:	df 91       	pop	r29
    16f6:	cf 91       	pop	r28
    16f8:	08 95       	ret

000016fa <free>:
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	09 f4       	brne	.+2      	; 0x1704 <free+0xa>
    1702:	87 c0       	rjmp	.+270    	; 0x1812 <free+0x118>
    1704:	fc 01       	movw	r30, r24
    1706:	32 97       	sbiw	r30, 0x02	; 2
    1708:	13 82       	std	Z+3, r1	; 0x03
    170a:	12 82       	std	Z+2, r1	; 0x02
    170c:	c0 91 b9 02 	lds	r28, 0x02B9
    1710:	d0 91 ba 02 	lds	r29, 0x02BA
    1714:	20 97       	sbiw	r28, 0x00	; 0
    1716:	81 f4       	brne	.+32     	; 0x1738 <free+0x3e>
    1718:	20 81       	ld	r18, Z
    171a:	31 81       	ldd	r19, Z+1	; 0x01
    171c:	28 0f       	add	r18, r24
    171e:	39 1f       	adc	r19, r25
    1720:	80 91 b7 02 	lds	r24, 0x02B7
    1724:	90 91 b8 02 	lds	r25, 0x02B8
    1728:	82 17       	cp	r24, r18
    172a:	93 07       	cpc	r25, r19
    172c:	79 f5       	brne	.+94     	; 0x178c <free+0x92>
    172e:	f0 93 b8 02 	sts	0x02B8, r31
    1732:	e0 93 b7 02 	sts	0x02B7, r30
    1736:	6d c0       	rjmp	.+218    	; 0x1812 <free+0x118>
    1738:	de 01       	movw	r26, r28
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	ae 17       	cp	r26, r30
    1740:	bf 07       	cpc	r27, r31
    1742:	50 f4       	brcc	.+20     	; 0x1758 <free+0x5e>
    1744:	12 96       	adiw	r26, 0x02	; 2
    1746:	4d 91       	ld	r20, X+
    1748:	5c 91       	ld	r21, X
    174a:	13 97       	sbiw	r26, 0x03	; 3
    174c:	9d 01       	movw	r18, r26
    174e:	41 15       	cp	r20, r1
    1750:	51 05       	cpc	r21, r1
    1752:	09 f1       	breq	.+66     	; 0x1796 <free+0x9c>
    1754:	da 01       	movw	r26, r20
    1756:	f3 cf       	rjmp	.-26     	; 0x173e <free+0x44>
    1758:	b3 83       	std	Z+3, r27	; 0x03
    175a:	a2 83       	std	Z+2, r26	; 0x02
    175c:	40 81       	ld	r20, Z
    175e:	51 81       	ldd	r21, Z+1	; 0x01
    1760:	84 0f       	add	r24, r20
    1762:	95 1f       	adc	r25, r21
    1764:	8a 17       	cp	r24, r26
    1766:	9b 07       	cpc	r25, r27
    1768:	71 f4       	brne	.+28     	; 0x1786 <free+0x8c>
    176a:	8d 91       	ld	r24, X+
    176c:	9c 91       	ld	r25, X
    176e:	11 97       	sbiw	r26, 0x01	; 1
    1770:	84 0f       	add	r24, r20
    1772:	95 1f       	adc	r25, r21
    1774:	02 96       	adiw	r24, 0x02	; 2
    1776:	91 83       	std	Z+1, r25	; 0x01
    1778:	80 83       	st	Z, r24
    177a:	12 96       	adiw	r26, 0x02	; 2
    177c:	8d 91       	ld	r24, X+
    177e:	9c 91       	ld	r25, X
    1780:	13 97       	sbiw	r26, 0x03	; 3
    1782:	93 83       	std	Z+3, r25	; 0x03
    1784:	82 83       	std	Z+2, r24	; 0x02
    1786:	21 15       	cp	r18, r1
    1788:	31 05       	cpc	r19, r1
    178a:	29 f4       	brne	.+10     	; 0x1796 <free+0x9c>
    178c:	f0 93 ba 02 	sts	0x02BA, r31
    1790:	e0 93 b9 02 	sts	0x02B9, r30
    1794:	3e c0       	rjmp	.+124    	; 0x1812 <free+0x118>
    1796:	d9 01       	movw	r26, r18
    1798:	13 96       	adiw	r26, 0x03	; 3
    179a:	fc 93       	st	X, r31
    179c:	ee 93       	st	-X, r30
    179e:	12 97       	sbiw	r26, 0x02	; 2
    17a0:	4d 91       	ld	r20, X+
    17a2:	5d 91       	ld	r21, X+
    17a4:	a4 0f       	add	r26, r20
    17a6:	b5 1f       	adc	r27, r21
    17a8:	ea 17       	cp	r30, r26
    17aa:	fb 07       	cpc	r31, r27
    17ac:	79 f4       	brne	.+30     	; 0x17cc <free+0xd2>
    17ae:	80 81       	ld	r24, Z
    17b0:	91 81       	ldd	r25, Z+1	; 0x01
    17b2:	84 0f       	add	r24, r20
    17b4:	95 1f       	adc	r25, r21
    17b6:	02 96       	adiw	r24, 0x02	; 2
    17b8:	d9 01       	movw	r26, r18
    17ba:	11 96       	adiw	r26, 0x01	; 1
    17bc:	9c 93       	st	X, r25
    17be:	8e 93       	st	-X, r24
    17c0:	82 81       	ldd	r24, Z+2	; 0x02
    17c2:	93 81       	ldd	r25, Z+3	; 0x03
    17c4:	13 96       	adiw	r26, 0x03	; 3
    17c6:	9c 93       	st	X, r25
    17c8:	8e 93       	st	-X, r24
    17ca:	12 97       	sbiw	r26, 0x02	; 2
    17cc:	e0 e0       	ldi	r30, 0x00	; 0
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	9b 81       	ldd	r25, Y+3	; 0x03
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	19 f0       	breq	.+6      	; 0x17de <free+0xe4>
    17d8:	fe 01       	movw	r30, r28
    17da:	ec 01       	movw	r28, r24
    17dc:	f9 cf       	rjmp	.-14     	; 0x17d0 <free+0xd6>
    17de:	ce 01       	movw	r24, r28
    17e0:	02 96       	adiw	r24, 0x02	; 2
    17e2:	28 81       	ld	r18, Y
    17e4:	39 81       	ldd	r19, Y+1	; 0x01
    17e6:	82 0f       	add	r24, r18
    17e8:	93 1f       	adc	r25, r19
    17ea:	20 91 b7 02 	lds	r18, 0x02B7
    17ee:	30 91 b8 02 	lds	r19, 0x02B8
    17f2:	28 17       	cp	r18, r24
    17f4:	39 07       	cpc	r19, r25
    17f6:	69 f4       	brne	.+26     	; 0x1812 <free+0x118>
    17f8:	30 97       	sbiw	r30, 0x00	; 0
    17fa:	29 f4       	brne	.+10     	; 0x1806 <free+0x10c>
    17fc:	10 92 ba 02 	sts	0x02BA, r1
    1800:	10 92 b9 02 	sts	0x02B9, r1
    1804:	02 c0       	rjmp	.+4      	; 0x180a <free+0x110>
    1806:	13 82       	std	Z+3, r1	; 0x03
    1808:	12 82       	std	Z+2, r1	; 0x02
    180a:	d0 93 b8 02 	sts	0x02B8, r29
    180e:	c0 93 b7 02 	sts	0x02B7, r28
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	08 95       	ret

00001818 <fdevopen>:
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	ec 01       	movw	r28, r24
    1822:	8b 01       	movw	r16, r22
    1824:	00 97       	sbiw	r24, 0x00	; 0
    1826:	31 f4       	brne	.+12     	; 0x1834 <fdevopen+0x1c>
    1828:	61 15       	cp	r22, r1
    182a:	71 05       	cpc	r23, r1
    182c:	19 f4       	brne	.+6      	; 0x1834 <fdevopen+0x1c>
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	37 c0       	rjmp	.+110    	; 0x18a2 <fdevopen+0x8a>
    1834:	6e e0       	ldi	r22, 0x0E	; 14
    1836:	70 e0       	ldi	r23, 0x00	; 0
    1838:	81 e0       	ldi	r24, 0x01	; 1
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	3d d2       	rcall	.+1146   	; 0x1cb8 <calloc>
    183e:	fc 01       	movw	r30, r24
    1840:	00 97       	sbiw	r24, 0x00	; 0
    1842:	a9 f3       	breq	.-22     	; 0x182e <fdevopen+0x16>
    1844:	80 e8       	ldi	r24, 0x80	; 128
    1846:	83 83       	std	Z+3, r24	; 0x03
    1848:	01 15       	cp	r16, r1
    184a:	11 05       	cpc	r17, r1
    184c:	71 f0       	breq	.+28     	; 0x186a <fdevopen+0x52>
    184e:	13 87       	std	Z+11, r17	; 0x0b
    1850:	02 87       	std	Z+10, r16	; 0x0a
    1852:	81 e8       	ldi	r24, 0x81	; 129
    1854:	83 83       	std	Z+3, r24	; 0x03
    1856:	80 91 bb 02 	lds	r24, 0x02BB
    185a:	90 91 bc 02 	lds	r25, 0x02BC
    185e:	89 2b       	or	r24, r25
    1860:	21 f4       	brne	.+8      	; 0x186a <fdevopen+0x52>
    1862:	f0 93 bc 02 	sts	0x02BC, r31
    1866:	e0 93 bb 02 	sts	0x02BB, r30
    186a:	20 97       	sbiw	r28, 0x00	; 0
    186c:	c9 f0       	breq	.+50     	; 0x18a0 <fdevopen+0x88>
    186e:	d1 87       	std	Z+9, r29	; 0x09
    1870:	c0 87       	std	Z+8, r28	; 0x08
    1872:	83 81       	ldd	r24, Z+3	; 0x03
    1874:	82 60       	ori	r24, 0x02	; 2
    1876:	83 83       	std	Z+3, r24	; 0x03
    1878:	80 91 bd 02 	lds	r24, 0x02BD
    187c:	90 91 be 02 	lds	r25, 0x02BE
    1880:	89 2b       	or	r24, r25
    1882:	71 f4       	brne	.+28     	; 0x18a0 <fdevopen+0x88>
    1884:	f0 93 be 02 	sts	0x02BE, r31
    1888:	e0 93 bd 02 	sts	0x02BD, r30
    188c:	80 91 bf 02 	lds	r24, 0x02BF
    1890:	90 91 c0 02 	lds	r25, 0x02C0
    1894:	89 2b       	or	r24, r25
    1896:	21 f4       	brne	.+8      	; 0x18a0 <fdevopen+0x88>
    1898:	f0 93 c0 02 	sts	0x02C0, r31
    189c:	e0 93 bf 02 	sts	0x02BF, r30
    18a0:	cf 01       	movw	r24, r30
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	1f 91       	pop	r17
    18a8:	0f 91       	pop	r16
    18aa:	08 95       	ret

000018ac <printf>:
    18ac:	a0 e0       	ldi	r26, 0x00	; 0
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	eb e5       	ldi	r30, 0x5B	; 91
    18b2:	fc e0       	ldi	r31, 0x0C	; 12
    18b4:	d8 c2       	rjmp	.+1456   	; 0x1e66 <__prologue_saves__+0x20>
    18b6:	fe 01       	movw	r30, r28
    18b8:	35 96       	adiw	r30, 0x05	; 5
    18ba:	61 91       	ld	r22, Z+
    18bc:	71 91       	ld	r23, Z+
    18be:	af 01       	movw	r20, r30
    18c0:	80 91 bd 02 	lds	r24, 0x02BD
    18c4:	90 91 be 02 	lds	r25, 0x02BE
    18c8:	34 d0       	rcall	.+104    	; 0x1932 <vfprintf>
    18ca:	e2 e0       	ldi	r30, 0x02	; 2
    18cc:	e8 c2       	rjmp	.+1488   	; 0x1e9e <__epilogue_restores__+0x20>

000018ce <putchar>:
    18ce:	60 91 bd 02 	lds	r22, 0x02BD
    18d2:	70 91 be 02 	lds	r23, 0x02BE
    18d6:	27 c2       	rjmp	.+1102   	; 0x1d26 <fputc>

000018d8 <puts>:
    18d8:	0f 93       	push	r16
    18da:	1f 93       	push	r17
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	e0 91 bd 02 	lds	r30, 0x02BD
    18e4:	f0 91 be 02 	lds	r31, 0x02BE
    18e8:	23 81       	ldd	r18, Z+3	; 0x03
    18ea:	21 ff       	sbrs	r18, 1
    18ec:	1b c0       	rjmp	.+54     	; 0x1924 <puts+0x4c>
    18ee:	ec 01       	movw	r28, r24
    18f0:	00 e0       	ldi	r16, 0x00	; 0
    18f2:	10 e0       	ldi	r17, 0x00	; 0
    18f4:	89 91       	ld	r24, Y+
    18f6:	60 91 bd 02 	lds	r22, 0x02BD
    18fa:	70 91 be 02 	lds	r23, 0x02BE
    18fe:	db 01       	movw	r26, r22
    1900:	18 96       	adiw	r26, 0x08	; 8
    1902:	ed 91       	ld	r30, X+
    1904:	fc 91       	ld	r31, X
    1906:	19 97       	sbiw	r26, 0x09	; 9
    1908:	88 23       	and	r24, r24
    190a:	31 f0       	breq	.+12     	; 0x1918 <puts+0x40>
    190c:	09 95       	icall
    190e:	89 2b       	or	r24, r25
    1910:	89 f3       	breq	.-30     	; 0x18f4 <puts+0x1c>
    1912:	0f ef       	ldi	r16, 0xFF	; 255
    1914:	1f ef       	ldi	r17, 0xFF	; 255
    1916:	ee cf       	rjmp	.-36     	; 0x18f4 <puts+0x1c>
    1918:	8a e0       	ldi	r24, 0x0A	; 10
    191a:	09 95       	icall
    191c:	89 2b       	or	r24, r25
    191e:	11 f4       	brne	.+4      	; 0x1924 <puts+0x4c>
    1920:	c8 01       	movw	r24, r16
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <puts+0x50>
    1924:	8f ef       	ldi	r24, 0xFF	; 255
    1926:	9f ef       	ldi	r25, 0xFF	; 255
    1928:	df 91       	pop	r29
    192a:	cf 91       	pop	r28
    192c:	1f 91       	pop	r17
    192e:	0f 91       	pop	r16
    1930:	08 95       	ret

00001932 <vfprintf>:
    1932:	ac e0       	ldi	r26, 0x0C	; 12
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	ee e9       	ldi	r30, 0x9E	; 158
    1938:	fc e0       	ldi	r31, 0x0C	; 12
    193a:	85 c2       	rjmp	.+1290   	; 0x1e46 <__prologue_saves__>
    193c:	7c 01       	movw	r14, r24
    193e:	6b 01       	movw	r12, r22
    1940:	8a 01       	movw	r16, r20
    1942:	fc 01       	movw	r30, r24
    1944:	17 82       	std	Z+7, r1	; 0x07
    1946:	16 82       	std	Z+6, r1	; 0x06
    1948:	83 81       	ldd	r24, Z+3	; 0x03
    194a:	81 ff       	sbrs	r24, 1
    194c:	b0 c1       	rjmp	.+864    	; 0x1cae <vfprintf+0x37c>
    194e:	ce 01       	movw	r24, r28
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	4c 01       	movw	r8, r24
    1954:	f7 01       	movw	r30, r14
    1956:	93 81       	ldd	r25, Z+3	; 0x03
    1958:	f6 01       	movw	r30, r12
    195a:	93 fd       	sbrc	r25, 3
    195c:	85 91       	lpm	r24, Z+
    195e:	93 ff       	sbrs	r25, 3
    1960:	81 91       	ld	r24, Z+
    1962:	6f 01       	movw	r12, r30
    1964:	88 23       	and	r24, r24
    1966:	09 f4       	brne	.+2      	; 0x196a <vfprintf+0x38>
    1968:	9e c1       	rjmp	.+828    	; 0x1ca6 <vfprintf+0x374>
    196a:	85 32       	cpi	r24, 0x25	; 37
    196c:	39 f4       	brne	.+14     	; 0x197c <vfprintf+0x4a>
    196e:	93 fd       	sbrc	r25, 3
    1970:	85 91       	lpm	r24, Z+
    1972:	93 ff       	sbrs	r25, 3
    1974:	81 91       	ld	r24, Z+
    1976:	6f 01       	movw	r12, r30
    1978:	85 32       	cpi	r24, 0x25	; 37
    197a:	21 f4       	brne	.+8      	; 0x1984 <vfprintf+0x52>
    197c:	b7 01       	movw	r22, r14
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	d2 d1       	rcall	.+932    	; 0x1d26 <fputc>
    1982:	e8 cf       	rjmp	.-48     	; 0x1954 <vfprintf+0x22>
    1984:	51 2c       	mov	r5, r1
    1986:	31 2c       	mov	r3, r1
    1988:	20 e0       	ldi	r18, 0x00	; 0
    198a:	20 32       	cpi	r18, 0x20	; 32
    198c:	a0 f4       	brcc	.+40     	; 0x19b6 <vfprintf+0x84>
    198e:	8b 32       	cpi	r24, 0x2B	; 43
    1990:	69 f0       	breq	.+26     	; 0x19ac <vfprintf+0x7a>
    1992:	30 f4       	brcc	.+12     	; 0x19a0 <vfprintf+0x6e>
    1994:	80 32       	cpi	r24, 0x20	; 32
    1996:	59 f0       	breq	.+22     	; 0x19ae <vfprintf+0x7c>
    1998:	83 32       	cpi	r24, 0x23	; 35
    199a:	69 f4       	brne	.+26     	; 0x19b6 <vfprintf+0x84>
    199c:	20 61       	ori	r18, 0x10	; 16
    199e:	2c c0       	rjmp	.+88     	; 0x19f8 <vfprintf+0xc6>
    19a0:	8d 32       	cpi	r24, 0x2D	; 45
    19a2:	39 f0       	breq	.+14     	; 0x19b2 <vfprintf+0x80>
    19a4:	80 33       	cpi	r24, 0x30	; 48
    19a6:	39 f4       	brne	.+14     	; 0x19b6 <vfprintf+0x84>
    19a8:	21 60       	ori	r18, 0x01	; 1
    19aa:	26 c0       	rjmp	.+76     	; 0x19f8 <vfprintf+0xc6>
    19ac:	22 60       	ori	r18, 0x02	; 2
    19ae:	24 60       	ori	r18, 0x04	; 4
    19b0:	23 c0       	rjmp	.+70     	; 0x19f8 <vfprintf+0xc6>
    19b2:	28 60       	ori	r18, 0x08	; 8
    19b4:	21 c0       	rjmp	.+66     	; 0x19f8 <vfprintf+0xc6>
    19b6:	27 fd       	sbrc	r18, 7
    19b8:	27 c0       	rjmp	.+78     	; 0x1a08 <vfprintf+0xd6>
    19ba:	30 ed       	ldi	r19, 0xD0	; 208
    19bc:	38 0f       	add	r19, r24
    19be:	3a 30       	cpi	r19, 0x0A	; 10
    19c0:	78 f4       	brcc	.+30     	; 0x19e0 <vfprintf+0xae>
    19c2:	26 ff       	sbrs	r18, 6
    19c4:	06 c0       	rjmp	.+12     	; 0x19d2 <vfprintf+0xa0>
    19c6:	fa e0       	ldi	r31, 0x0A	; 10
    19c8:	5f 9e       	mul	r5, r31
    19ca:	30 0d       	add	r19, r0
    19cc:	11 24       	eor	r1, r1
    19ce:	53 2e       	mov	r5, r19
    19d0:	13 c0       	rjmp	.+38     	; 0x19f8 <vfprintf+0xc6>
    19d2:	8a e0       	ldi	r24, 0x0A	; 10
    19d4:	38 9e       	mul	r3, r24
    19d6:	30 0d       	add	r19, r0
    19d8:	11 24       	eor	r1, r1
    19da:	33 2e       	mov	r3, r19
    19dc:	20 62       	ori	r18, 0x20	; 32
    19de:	0c c0       	rjmp	.+24     	; 0x19f8 <vfprintf+0xc6>
    19e0:	8e 32       	cpi	r24, 0x2E	; 46
    19e2:	21 f4       	brne	.+8      	; 0x19ec <vfprintf+0xba>
    19e4:	26 fd       	sbrc	r18, 6
    19e6:	5f c1       	rjmp	.+702    	; 0x1ca6 <vfprintf+0x374>
    19e8:	20 64       	ori	r18, 0x40	; 64
    19ea:	06 c0       	rjmp	.+12     	; 0x19f8 <vfprintf+0xc6>
    19ec:	8c 36       	cpi	r24, 0x6C	; 108
    19ee:	11 f4       	brne	.+4      	; 0x19f4 <vfprintf+0xc2>
    19f0:	20 68       	ori	r18, 0x80	; 128
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <vfprintf+0xc6>
    19f4:	88 36       	cpi	r24, 0x68	; 104
    19f6:	41 f4       	brne	.+16     	; 0x1a08 <vfprintf+0xd6>
    19f8:	f6 01       	movw	r30, r12
    19fa:	93 fd       	sbrc	r25, 3
    19fc:	85 91       	lpm	r24, Z+
    19fe:	93 ff       	sbrs	r25, 3
    1a00:	81 91       	ld	r24, Z+
    1a02:	6f 01       	movw	r12, r30
    1a04:	81 11       	cpse	r24, r1
    1a06:	c1 cf       	rjmp	.-126    	; 0x198a <vfprintf+0x58>
    1a08:	98 2f       	mov	r25, r24
    1a0a:	9f 7d       	andi	r25, 0xDF	; 223
    1a0c:	95 54       	subi	r25, 0x45	; 69
    1a0e:	93 30       	cpi	r25, 0x03	; 3
    1a10:	28 f4       	brcc	.+10     	; 0x1a1c <vfprintf+0xea>
    1a12:	0c 5f       	subi	r16, 0xFC	; 252
    1a14:	1f 4f       	sbci	r17, 0xFF	; 255
    1a16:	ff e3       	ldi	r31, 0x3F	; 63
    1a18:	f9 83       	std	Y+1, r31	; 0x01
    1a1a:	0d c0       	rjmp	.+26     	; 0x1a36 <vfprintf+0x104>
    1a1c:	83 36       	cpi	r24, 0x63	; 99
    1a1e:	31 f0       	breq	.+12     	; 0x1a2c <vfprintf+0xfa>
    1a20:	83 37       	cpi	r24, 0x73	; 115
    1a22:	71 f0       	breq	.+28     	; 0x1a40 <vfprintf+0x10e>
    1a24:	83 35       	cpi	r24, 0x53	; 83
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <vfprintf+0xf8>
    1a28:	57 c0       	rjmp	.+174    	; 0x1ad8 <vfprintf+0x1a6>
    1a2a:	21 c0       	rjmp	.+66     	; 0x1a6e <vfprintf+0x13c>
    1a2c:	f8 01       	movw	r30, r16
    1a2e:	80 81       	ld	r24, Z
    1a30:	89 83       	std	Y+1, r24	; 0x01
    1a32:	0e 5f       	subi	r16, 0xFE	; 254
    1a34:	1f 4f       	sbci	r17, 0xFF	; 255
    1a36:	44 24       	eor	r4, r4
    1a38:	43 94       	inc	r4
    1a3a:	51 2c       	mov	r5, r1
    1a3c:	54 01       	movw	r10, r8
    1a3e:	14 c0       	rjmp	.+40     	; 0x1a68 <vfprintf+0x136>
    1a40:	38 01       	movw	r6, r16
    1a42:	f2 e0       	ldi	r31, 0x02	; 2
    1a44:	6f 0e       	add	r6, r31
    1a46:	71 1c       	adc	r7, r1
    1a48:	f8 01       	movw	r30, r16
    1a4a:	a0 80       	ld	r10, Z
    1a4c:	b1 80       	ldd	r11, Z+1	; 0x01
    1a4e:	26 ff       	sbrs	r18, 6
    1a50:	03 c0       	rjmp	.+6      	; 0x1a58 <vfprintf+0x126>
    1a52:	65 2d       	mov	r22, r5
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <vfprintf+0x12a>
    1a58:	6f ef       	ldi	r22, 0xFF	; 255
    1a5a:	7f ef       	ldi	r23, 0xFF	; 255
    1a5c:	c5 01       	movw	r24, r10
    1a5e:	2c 87       	std	Y+12, r18	; 0x0c
    1a60:	57 d1       	rcall	.+686    	; 0x1d10 <strnlen>
    1a62:	2c 01       	movw	r4, r24
    1a64:	83 01       	movw	r16, r6
    1a66:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a68:	2f 77       	andi	r18, 0x7F	; 127
    1a6a:	22 2e       	mov	r2, r18
    1a6c:	16 c0       	rjmp	.+44     	; 0x1a9a <vfprintf+0x168>
    1a6e:	38 01       	movw	r6, r16
    1a70:	f2 e0       	ldi	r31, 0x02	; 2
    1a72:	6f 0e       	add	r6, r31
    1a74:	71 1c       	adc	r7, r1
    1a76:	f8 01       	movw	r30, r16
    1a78:	a0 80       	ld	r10, Z
    1a7a:	b1 80       	ldd	r11, Z+1	; 0x01
    1a7c:	26 ff       	sbrs	r18, 6
    1a7e:	03 c0       	rjmp	.+6      	; 0x1a86 <vfprintf+0x154>
    1a80:	65 2d       	mov	r22, r5
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <vfprintf+0x158>
    1a86:	6f ef       	ldi	r22, 0xFF	; 255
    1a88:	7f ef       	ldi	r23, 0xFF	; 255
    1a8a:	c5 01       	movw	r24, r10
    1a8c:	2c 87       	std	Y+12, r18	; 0x0c
    1a8e:	2e d1       	rcall	.+604    	; 0x1cec <strnlen_P>
    1a90:	2c 01       	movw	r4, r24
    1a92:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a94:	20 68       	ori	r18, 0x80	; 128
    1a96:	22 2e       	mov	r2, r18
    1a98:	83 01       	movw	r16, r6
    1a9a:	23 fc       	sbrc	r2, 3
    1a9c:	19 c0       	rjmp	.+50     	; 0x1ad0 <vfprintf+0x19e>
    1a9e:	83 2d       	mov	r24, r3
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	48 16       	cp	r4, r24
    1aa4:	59 06       	cpc	r5, r25
    1aa6:	a0 f4       	brcc	.+40     	; 0x1ad0 <vfprintf+0x19e>
    1aa8:	b7 01       	movw	r22, r14
    1aaa:	80 e2       	ldi	r24, 0x20	; 32
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	3b d1       	rcall	.+630    	; 0x1d26 <fputc>
    1ab0:	3a 94       	dec	r3
    1ab2:	f5 cf       	rjmp	.-22     	; 0x1a9e <vfprintf+0x16c>
    1ab4:	f5 01       	movw	r30, r10
    1ab6:	27 fc       	sbrc	r2, 7
    1ab8:	85 91       	lpm	r24, Z+
    1aba:	27 fe       	sbrs	r2, 7
    1abc:	81 91       	ld	r24, Z+
    1abe:	5f 01       	movw	r10, r30
    1ac0:	b7 01       	movw	r22, r14
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	30 d1       	rcall	.+608    	; 0x1d26 <fputc>
    1ac6:	31 10       	cpse	r3, r1
    1ac8:	3a 94       	dec	r3
    1aca:	f1 e0       	ldi	r31, 0x01	; 1
    1acc:	4f 1a       	sub	r4, r31
    1ace:	51 08       	sbc	r5, r1
    1ad0:	41 14       	cp	r4, r1
    1ad2:	51 04       	cpc	r5, r1
    1ad4:	79 f7       	brne	.-34     	; 0x1ab4 <vfprintf+0x182>
    1ad6:	de c0       	rjmp	.+444    	; 0x1c94 <vfprintf+0x362>
    1ad8:	84 36       	cpi	r24, 0x64	; 100
    1ada:	11 f0       	breq	.+4      	; 0x1ae0 <vfprintf+0x1ae>
    1adc:	89 36       	cpi	r24, 0x69	; 105
    1ade:	31 f5       	brne	.+76     	; 0x1b2c <vfprintf+0x1fa>
    1ae0:	f8 01       	movw	r30, r16
    1ae2:	27 ff       	sbrs	r18, 7
    1ae4:	07 c0       	rjmp	.+14     	; 0x1af4 <vfprintf+0x1c2>
    1ae6:	60 81       	ld	r22, Z
    1ae8:	71 81       	ldd	r23, Z+1	; 0x01
    1aea:	82 81       	ldd	r24, Z+2	; 0x02
    1aec:	93 81       	ldd	r25, Z+3	; 0x03
    1aee:	0c 5f       	subi	r16, 0xFC	; 252
    1af0:	1f 4f       	sbci	r17, 0xFF	; 255
    1af2:	08 c0       	rjmp	.+16     	; 0x1b04 <vfprintf+0x1d2>
    1af4:	60 81       	ld	r22, Z
    1af6:	71 81       	ldd	r23, Z+1	; 0x01
    1af8:	88 27       	eor	r24, r24
    1afa:	77 fd       	sbrc	r23, 7
    1afc:	80 95       	com	r24
    1afe:	98 2f       	mov	r25, r24
    1b00:	0e 5f       	subi	r16, 0xFE	; 254
    1b02:	1f 4f       	sbci	r17, 0xFF	; 255
    1b04:	2f 76       	andi	r18, 0x6F	; 111
    1b06:	b2 2e       	mov	r11, r18
    1b08:	97 ff       	sbrs	r25, 7
    1b0a:	09 c0       	rjmp	.+18     	; 0x1b1e <vfprintf+0x1ec>
    1b0c:	90 95       	com	r25
    1b0e:	80 95       	com	r24
    1b10:	70 95       	com	r23
    1b12:	61 95       	neg	r22
    1b14:	7f 4f       	sbci	r23, 0xFF	; 255
    1b16:	8f 4f       	sbci	r24, 0xFF	; 255
    1b18:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1a:	20 68       	ori	r18, 0x80	; 128
    1b1c:	b2 2e       	mov	r11, r18
    1b1e:	2a e0       	ldi	r18, 0x0A	; 10
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	a4 01       	movw	r20, r8
    1b24:	32 d1       	rcall	.+612    	; 0x1d8a <__ultoa_invert>
    1b26:	a8 2e       	mov	r10, r24
    1b28:	a8 18       	sub	r10, r8
    1b2a:	43 c0       	rjmp	.+134    	; 0x1bb2 <vfprintf+0x280>
    1b2c:	85 37       	cpi	r24, 0x75	; 117
    1b2e:	29 f4       	brne	.+10     	; 0x1b3a <vfprintf+0x208>
    1b30:	2f 7e       	andi	r18, 0xEF	; 239
    1b32:	b2 2e       	mov	r11, r18
    1b34:	2a e0       	ldi	r18, 0x0A	; 10
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	25 c0       	rjmp	.+74     	; 0x1b84 <vfprintf+0x252>
    1b3a:	f2 2f       	mov	r31, r18
    1b3c:	f9 7f       	andi	r31, 0xF9	; 249
    1b3e:	bf 2e       	mov	r11, r31
    1b40:	8f 36       	cpi	r24, 0x6F	; 111
    1b42:	c1 f0       	breq	.+48     	; 0x1b74 <vfprintf+0x242>
    1b44:	18 f4       	brcc	.+6      	; 0x1b4c <vfprintf+0x21a>
    1b46:	88 35       	cpi	r24, 0x58	; 88
    1b48:	79 f0       	breq	.+30     	; 0x1b68 <vfprintf+0x236>
    1b4a:	ad c0       	rjmp	.+346    	; 0x1ca6 <vfprintf+0x374>
    1b4c:	80 37       	cpi	r24, 0x70	; 112
    1b4e:	19 f0       	breq	.+6      	; 0x1b56 <vfprintf+0x224>
    1b50:	88 37       	cpi	r24, 0x78	; 120
    1b52:	21 f0       	breq	.+8      	; 0x1b5c <vfprintf+0x22a>
    1b54:	a8 c0       	rjmp	.+336    	; 0x1ca6 <vfprintf+0x374>
    1b56:	2f 2f       	mov	r18, r31
    1b58:	20 61       	ori	r18, 0x10	; 16
    1b5a:	b2 2e       	mov	r11, r18
    1b5c:	b4 fe       	sbrs	r11, 4
    1b5e:	0d c0       	rjmp	.+26     	; 0x1b7a <vfprintf+0x248>
    1b60:	8b 2d       	mov	r24, r11
    1b62:	84 60       	ori	r24, 0x04	; 4
    1b64:	b8 2e       	mov	r11, r24
    1b66:	09 c0       	rjmp	.+18     	; 0x1b7a <vfprintf+0x248>
    1b68:	24 ff       	sbrs	r18, 4
    1b6a:	0a c0       	rjmp	.+20     	; 0x1b80 <vfprintf+0x24e>
    1b6c:	9f 2f       	mov	r25, r31
    1b6e:	96 60       	ori	r25, 0x06	; 6
    1b70:	b9 2e       	mov	r11, r25
    1b72:	06 c0       	rjmp	.+12     	; 0x1b80 <vfprintf+0x24e>
    1b74:	28 e0       	ldi	r18, 0x08	; 8
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	05 c0       	rjmp	.+10     	; 0x1b84 <vfprintf+0x252>
    1b7a:	20 e1       	ldi	r18, 0x10	; 16
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <vfprintf+0x252>
    1b80:	20 e1       	ldi	r18, 0x10	; 16
    1b82:	32 e0       	ldi	r19, 0x02	; 2
    1b84:	f8 01       	movw	r30, r16
    1b86:	b7 fe       	sbrs	r11, 7
    1b88:	07 c0       	rjmp	.+14     	; 0x1b98 <vfprintf+0x266>
    1b8a:	60 81       	ld	r22, Z
    1b8c:	71 81       	ldd	r23, Z+1	; 0x01
    1b8e:	82 81       	ldd	r24, Z+2	; 0x02
    1b90:	93 81       	ldd	r25, Z+3	; 0x03
    1b92:	0c 5f       	subi	r16, 0xFC	; 252
    1b94:	1f 4f       	sbci	r17, 0xFF	; 255
    1b96:	06 c0       	rjmp	.+12     	; 0x1ba4 <vfprintf+0x272>
    1b98:	60 81       	ld	r22, Z
    1b9a:	71 81       	ldd	r23, Z+1	; 0x01
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	0e 5f       	subi	r16, 0xFE	; 254
    1ba2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba4:	a4 01       	movw	r20, r8
    1ba6:	f1 d0       	rcall	.+482    	; 0x1d8a <__ultoa_invert>
    1ba8:	a8 2e       	mov	r10, r24
    1baa:	a8 18       	sub	r10, r8
    1bac:	fb 2d       	mov	r31, r11
    1bae:	ff 77       	andi	r31, 0x7F	; 127
    1bb0:	bf 2e       	mov	r11, r31
    1bb2:	b6 fe       	sbrs	r11, 6
    1bb4:	0b c0       	rjmp	.+22     	; 0x1bcc <vfprintf+0x29a>
    1bb6:	2b 2d       	mov	r18, r11
    1bb8:	2e 7f       	andi	r18, 0xFE	; 254
    1bba:	a5 14       	cp	r10, r5
    1bbc:	50 f4       	brcc	.+20     	; 0x1bd2 <vfprintf+0x2a0>
    1bbe:	b4 fe       	sbrs	r11, 4
    1bc0:	0a c0       	rjmp	.+20     	; 0x1bd6 <vfprintf+0x2a4>
    1bc2:	b2 fc       	sbrc	r11, 2
    1bc4:	08 c0       	rjmp	.+16     	; 0x1bd6 <vfprintf+0x2a4>
    1bc6:	2b 2d       	mov	r18, r11
    1bc8:	2e 7e       	andi	r18, 0xEE	; 238
    1bca:	05 c0       	rjmp	.+10     	; 0x1bd6 <vfprintf+0x2a4>
    1bcc:	7a 2c       	mov	r7, r10
    1bce:	2b 2d       	mov	r18, r11
    1bd0:	03 c0       	rjmp	.+6      	; 0x1bd8 <vfprintf+0x2a6>
    1bd2:	7a 2c       	mov	r7, r10
    1bd4:	01 c0       	rjmp	.+2      	; 0x1bd8 <vfprintf+0x2a6>
    1bd6:	75 2c       	mov	r7, r5
    1bd8:	24 ff       	sbrs	r18, 4
    1bda:	0d c0       	rjmp	.+26     	; 0x1bf6 <vfprintf+0x2c4>
    1bdc:	fe 01       	movw	r30, r28
    1bde:	ea 0d       	add	r30, r10
    1be0:	f1 1d       	adc	r31, r1
    1be2:	80 81       	ld	r24, Z
    1be4:	80 33       	cpi	r24, 0x30	; 48
    1be6:	11 f4       	brne	.+4      	; 0x1bec <vfprintf+0x2ba>
    1be8:	29 7e       	andi	r18, 0xE9	; 233
    1bea:	09 c0       	rjmp	.+18     	; 0x1bfe <vfprintf+0x2cc>
    1bec:	22 ff       	sbrs	r18, 2
    1bee:	06 c0       	rjmp	.+12     	; 0x1bfc <vfprintf+0x2ca>
    1bf0:	73 94       	inc	r7
    1bf2:	73 94       	inc	r7
    1bf4:	04 c0       	rjmp	.+8      	; 0x1bfe <vfprintf+0x2cc>
    1bf6:	82 2f       	mov	r24, r18
    1bf8:	86 78       	andi	r24, 0x86	; 134
    1bfa:	09 f0       	breq	.+2      	; 0x1bfe <vfprintf+0x2cc>
    1bfc:	73 94       	inc	r7
    1bfe:	23 fd       	sbrc	r18, 3
    1c00:	12 c0       	rjmp	.+36     	; 0x1c26 <vfprintf+0x2f4>
    1c02:	20 ff       	sbrs	r18, 0
    1c04:	06 c0       	rjmp	.+12     	; 0x1c12 <vfprintf+0x2e0>
    1c06:	5a 2c       	mov	r5, r10
    1c08:	73 14       	cp	r7, r3
    1c0a:	18 f4       	brcc	.+6      	; 0x1c12 <vfprintf+0x2e0>
    1c0c:	53 0c       	add	r5, r3
    1c0e:	57 18       	sub	r5, r7
    1c10:	73 2c       	mov	r7, r3
    1c12:	73 14       	cp	r7, r3
    1c14:	60 f4       	brcc	.+24     	; 0x1c2e <vfprintf+0x2fc>
    1c16:	b7 01       	movw	r22, r14
    1c18:	80 e2       	ldi	r24, 0x20	; 32
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	2c 87       	std	Y+12, r18	; 0x0c
    1c1e:	83 d0       	rcall	.+262    	; 0x1d26 <fputc>
    1c20:	73 94       	inc	r7
    1c22:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c24:	f6 cf       	rjmp	.-20     	; 0x1c12 <vfprintf+0x2e0>
    1c26:	73 14       	cp	r7, r3
    1c28:	10 f4       	brcc	.+4      	; 0x1c2e <vfprintf+0x2fc>
    1c2a:	37 18       	sub	r3, r7
    1c2c:	01 c0       	rjmp	.+2      	; 0x1c30 <vfprintf+0x2fe>
    1c2e:	31 2c       	mov	r3, r1
    1c30:	24 ff       	sbrs	r18, 4
    1c32:	11 c0       	rjmp	.+34     	; 0x1c56 <vfprintf+0x324>
    1c34:	b7 01       	movw	r22, r14
    1c36:	80 e3       	ldi	r24, 0x30	; 48
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	2c 87       	std	Y+12, r18	; 0x0c
    1c3c:	74 d0       	rcall	.+232    	; 0x1d26 <fputc>
    1c3e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c40:	22 ff       	sbrs	r18, 2
    1c42:	16 c0       	rjmp	.+44     	; 0x1c70 <vfprintf+0x33e>
    1c44:	21 ff       	sbrs	r18, 1
    1c46:	03 c0       	rjmp	.+6      	; 0x1c4e <vfprintf+0x31c>
    1c48:	88 e5       	ldi	r24, 0x58	; 88
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	02 c0       	rjmp	.+4      	; 0x1c52 <vfprintf+0x320>
    1c4e:	88 e7       	ldi	r24, 0x78	; 120
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	b7 01       	movw	r22, r14
    1c54:	0c c0       	rjmp	.+24     	; 0x1c6e <vfprintf+0x33c>
    1c56:	82 2f       	mov	r24, r18
    1c58:	86 78       	andi	r24, 0x86	; 134
    1c5a:	51 f0       	breq	.+20     	; 0x1c70 <vfprintf+0x33e>
    1c5c:	21 fd       	sbrc	r18, 1
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <vfprintf+0x332>
    1c60:	80 e2       	ldi	r24, 0x20	; 32
    1c62:	01 c0       	rjmp	.+2      	; 0x1c66 <vfprintf+0x334>
    1c64:	8b e2       	ldi	r24, 0x2B	; 43
    1c66:	27 fd       	sbrc	r18, 7
    1c68:	8d e2       	ldi	r24, 0x2D	; 45
    1c6a:	b7 01       	movw	r22, r14
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	5b d0       	rcall	.+182    	; 0x1d26 <fputc>
    1c70:	a5 14       	cp	r10, r5
    1c72:	30 f4       	brcc	.+12     	; 0x1c80 <vfprintf+0x34e>
    1c74:	b7 01       	movw	r22, r14
    1c76:	80 e3       	ldi	r24, 0x30	; 48
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	55 d0       	rcall	.+170    	; 0x1d26 <fputc>
    1c7c:	5a 94       	dec	r5
    1c7e:	f8 cf       	rjmp	.-16     	; 0x1c70 <vfprintf+0x33e>
    1c80:	aa 94       	dec	r10
    1c82:	f4 01       	movw	r30, r8
    1c84:	ea 0d       	add	r30, r10
    1c86:	f1 1d       	adc	r31, r1
    1c88:	80 81       	ld	r24, Z
    1c8a:	b7 01       	movw	r22, r14
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	4b d0       	rcall	.+150    	; 0x1d26 <fputc>
    1c90:	a1 10       	cpse	r10, r1
    1c92:	f6 cf       	rjmp	.-20     	; 0x1c80 <vfprintf+0x34e>
    1c94:	33 20       	and	r3, r3
    1c96:	09 f4       	brne	.+2      	; 0x1c9a <vfprintf+0x368>
    1c98:	5d ce       	rjmp	.-838    	; 0x1954 <vfprintf+0x22>
    1c9a:	b7 01       	movw	r22, r14
    1c9c:	80 e2       	ldi	r24, 0x20	; 32
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	42 d0       	rcall	.+132    	; 0x1d26 <fputc>
    1ca2:	3a 94       	dec	r3
    1ca4:	f7 cf       	rjmp	.-18     	; 0x1c94 <vfprintf+0x362>
    1ca6:	f7 01       	movw	r30, r14
    1ca8:	86 81       	ldd	r24, Z+6	; 0x06
    1caa:	97 81       	ldd	r25, Z+7	; 0x07
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <vfprintf+0x380>
    1cae:	8f ef       	ldi	r24, 0xFF	; 255
    1cb0:	9f ef       	ldi	r25, 0xFF	; 255
    1cb2:	2c 96       	adiw	r28, 0x0c	; 12
    1cb4:	e2 e1       	ldi	r30, 0x12	; 18
    1cb6:	e3 c0       	rjmp	.+454    	; 0x1e7e <__epilogue_restores__>

00001cb8 <calloc>:
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	86 9f       	mul	r24, r22
    1cc2:	80 01       	movw	r16, r0
    1cc4:	87 9f       	mul	r24, r23
    1cc6:	10 0d       	add	r17, r0
    1cc8:	96 9f       	mul	r25, r22
    1cca:	10 0d       	add	r17, r0
    1ccc:	11 24       	eor	r1, r1
    1cce:	c8 01       	movw	r24, r16
    1cd0:	7c dc       	rcall	.-1800   	; 0x15ca <malloc>
    1cd2:	ec 01       	movw	r28, r24
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	21 f0       	breq	.+8      	; 0x1ce0 <calloc+0x28>
    1cd8:	a8 01       	movw	r20, r16
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	70 e0       	ldi	r23, 0x00	; 0
    1cde:	11 d0       	rcall	.+34     	; 0x1d02 <memset>
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	08 95       	ret

00001cec <strnlen_P>:
    1cec:	fc 01       	movw	r30, r24
    1cee:	05 90       	lpm	r0, Z+
    1cf0:	61 50       	subi	r22, 0x01	; 1
    1cf2:	70 40       	sbci	r23, 0x00	; 0
    1cf4:	01 10       	cpse	r0, r1
    1cf6:	d8 f7       	brcc	.-10     	; 0x1cee <strnlen_P+0x2>
    1cf8:	80 95       	com	r24
    1cfa:	90 95       	com	r25
    1cfc:	8e 0f       	add	r24, r30
    1cfe:	9f 1f       	adc	r25, r31
    1d00:	08 95       	ret

00001d02 <memset>:
    1d02:	dc 01       	movw	r26, r24
    1d04:	01 c0       	rjmp	.+2      	; 0x1d08 <memset+0x6>
    1d06:	6d 93       	st	X+, r22
    1d08:	41 50       	subi	r20, 0x01	; 1
    1d0a:	50 40       	sbci	r21, 0x00	; 0
    1d0c:	e0 f7       	brcc	.-8      	; 0x1d06 <memset+0x4>
    1d0e:	08 95       	ret

00001d10 <strnlen>:
    1d10:	fc 01       	movw	r30, r24
    1d12:	61 50       	subi	r22, 0x01	; 1
    1d14:	70 40       	sbci	r23, 0x00	; 0
    1d16:	01 90       	ld	r0, Z+
    1d18:	01 10       	cpse	r0, r1
    1d1a:	d8 f7       	brcc	.-10     	; 0x1d12 <strnlen+0x2>
    1d1c:	80 95       	com	r24
    1d1e:	90 95       	com	r25
    1d20:	8e 0f       	add	r24, r30
    1d22:	9f 1f       	adc	r25, r31
    1d24:	08 95       	ret

00001d26 <fputc>:
    1d26:	0f 93       	push	r16
    1d28:	1f 93       	push	r17
    1d2a:	cf 93       	push	r28
    1d2c:	df 93       	push	r29
    1d2e:	18 2f       	mov	r17, r24
    1d30:	09 2f       	mov	r16, r25
    1d32:	eb 01       	movw	r28, r22
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	81 fd       	sbrc	r24, 1
    1d38:	03 c0       	rjmp	.+6      	; 0x1d40 <fputc+0x1a>
    1d3a:	8f ef       	ldi	r24, 0xFF	; 255
    1d3c:	9f ef       	ldi	r25, 0xFF	; 255
    1d3e:	20 c0       	rjmp	.+64     	; 0x1d80 <fputc+0x5a>
    1d40:	82 ff       	sbrs	r24, 2
    1d42:	10 c0       	rjmp	.+32     	; 0x1d64 <fputc+0x3e>
    1d44:	4e 81       	ldd	r20, Y+6	; 0x06
    1d46:	5f 81       	ldd	r21, Y+7	; 0x07
    1d48:	2c 81       	ldd	r18, Y+4	; 0x04
    1d4a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d4c:	42 17       	cp	r20, r18
    1d4e:	53 07       	cpc	r21, r19
    1d50:	7c f4       	brge	.+30     	; 0x1d70 <fputc+0x4a>
    1d52:	e8 81       	ld	r30, Y
    1d54:	f9 81       	ldd	r31, Y+1	; 0x01
    1d56:	9f 01       	movw	r18, r30
    1d58:	2f 5f       	subi	r18, 0xFF	; 255
    1d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d5c:	39 83       	std	Y+1, r19	; 0x01
    1d5e:	28 83       	st	Y, r18
    1d60:	10 83       	st	Z, r17
    1d62:	06 c0       	rjmp	.+12     	; 0x1d70 <fputc+0x4a>
    1d64:	e8 85       	ldd	r30, Y+8	; 0x08
    1d66:	f9 85       	ldd	r31, Y+9	; 0x09
    1d68:	81 2f       	mov	r24, r17
    1d6a:	09 95       	icall
    1d6c:	89 2b       	or	r24, r25
    1d6e:	29 f7       	brne	.-54     	; 0x1d3a <fputc+0x14>
    1d70:	2e 81       	ldd	r18, Y+6	; 0x06
    1d72:	3f 81       	ldd	r19, Y+7	; 0x07
    1d74:	2f 5f       	subi	r18, 0xFF	; 255
    1d76:	3f 4f       	sbci	r19, 0xFF	; 255
    1d78:	3f 83       	std	Y+7, r19	; 0x07
    1d7a:	2e 83       	std	Y+6, r18	; 0x06
    1d7c:	81 2f       	mov	r24, r17
    1d7e:	90 2f       	mov	r25, r16
    1d80:	df 91       	pop	r29
    1d82:	cf 91       	pop	r28
    1d84:	1f 91       	pop	r17
    1d86:	0f 91       	pop	r16
    1d88:	08 95       	ret

00001d8a <__ultoa_invert>:
    1d8a:	fa 01       	movw	r30, r20
    1d8c:	aa 27       	eor	r26, r26
    1d8e:	28 30       	cpi	r18, 0x08	; 8
    1d90:	51 f1       	breq	.+84     	; 0x1de6 <__ultoa_invert+0x5c>
    1d92:	20 31       	cpi	r18, 0x10	; 16
    1d94:	81 f1       	breq	.+96     	; 0x1df6 <__ultoa_invert+0x6c>
    1d96:	e8 94       	clt
    1d98:	6f 93       	push	r22
    1d9a:	6e 7f       	andi	r22, 0xFE	; 254
    1d9c:	6e 5f       	subi	r22, 0xFE	; 254
    1d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    1da0:	8f 4f       	sbci	r24, 0xFF	; 255
    1da2:	9f 4f       	sbci	r25, 0xFF	; 255
    1da4:	af 4f       	sbci	r26, 0xFF	; 255
    1da6:	b1 e0       	ldi	r27, 0x01	; 1
    1da8:	3e d0       	rcall	.+124    	; 0x1e26 <__ultoa_invert+0x9c>
    1daa:	b4 e0       	ldi	r27, 0x04	; 4
    1dac:	3c d0       	rcall	.+120    	; 0x1e26 <__ultoa_invert+0x9c>
    1dae:	67 0f       	add	r22, r23
    1db0:	78 1f       	adc	r23, r24
    1db2:	89 1f       	adc	r24, r25
    1db4:	9a 1f       	adc	r25, r26
    1db6:	a1 1d       	adc	r26, r1
    1db8:	68 0f       	add	r22, r24
    1dba:	79 1f       	adc	r23, r25
    1dbc:	8a 1f       	adc	r24, r26
    1dbe:	91 1d       	adc	r25, r1
    1dc0:	a1 1d       	adc	r26, r1
    1dc2:	6a 0f       	add	r22, r26
    1dc4:	71 1d       	adc	r23, r1
    1dc6:	81 1d       	adc	r24, r1
    1dc8:	91 1d       	adc	r25, r1
    1dca:	a1 1d       	adc	r26, r1
    1dcc:	20 d0       	rcall	.+64     	; 0x1e0e <__ultoa_invert+0x84>
    1dce:	09 f4       	brne	.+2      	; 0x1dd2 <__ultoa_invert+0x48>
    1dd0:	68 94       	set
    1dd2:	3f 91       	pop	r19
    1dd4:	2a e0       	ldi	r18, 0x0A	; 10
    1dd6:	26 9f       	mul	r18, r22
    1dd8:	11 24       	eor	r1, r1
    1dda:	30 19       	sub	r19, r0
    1ddc:	30 5d       	subi	r19, 0xD0	; 208
    1dde:	31 93       	st	Z+, r19
    1de0:	de f6       	brtc	.-74     	; 0x1d98 <__ultoa_invert+0xe>
    1de2:	cf 01       	movw	r24, r30
    1de4:	08 95       	ret
    1de6:	46 2f       	mov	r20, r22
    1de8:	47 70       	andi	r20, 0x07	; 7
    1dea:	40 5d       	subi	r20, 0xD0	; 208
    1dec:	41 93       	st	Z+, r20
    1dee:	b3 e0       	ldi	r27, 0x03	; 3
    1df0:	0f d0       	rcall	.+30     	; 0x1e10 <__ultoa_invert+0x86>
    1df2:	c9 f7       	brne	.-14     	; 0x1de6 <__ultoa_invert+0x5c>
    1df4:	f6 cf       	rjmp	.-20     	; 0x1de2 <__ultoa_invert+0x58>
    1df6:	46 2f       	mov	r20, r22
    1df8:	4f 70       	andi	r20, 0x0F	; 15
    1dfa:	40 5d       	subi	r20, 0xD0	; 208
    1dfc:	4a 33       	cpi	r20, 0x3A	; 58
    1dfe:	18 f0       	brcs	.+6      	; 0x1e06 <__ultoa_invert+0x7c>
    1e00:	49 5d       	subi	r20, 0xD9	; 217
    1e02:	31 fd       	sbrc	r19, 1
    1e04:	40 52       	subi	r20, 0x20	; 32
    1e06:	41 93       	st	Z+, r20
    1e08:	02 d0       	rcall	.+4      	; 0x1e0e <__ultoa_invert+0x84>
    1e0a:	a9 f7       	brne	.-22     	; 0x1df6 <__ultoa_invert+0x6c>
    1e0c:	ea cf       	rjmp	.-44     	; 0x1de2 <__ultoa_invert+0x58>
    1e0e:	b4 e0       	ldi	r27, 0x04	; 4
    1e10:	a6 95       	lsr	r26
    1e12:	97 95       	ror	r25
    1e14:	87 95       	ror	r24
    1e16:	77 95       	ror	r23
    1e18:	67 95       	ror	r22
    1e1a:	ba 95       	dec	r27
    1e1c:	c9 f7       	brne	.-14     	; 0x1e10 <__ultoa_invert+0x86>
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	61 05       	cpc	r22, r1
    1e22:	71 05       	cpc	r23, r1
    1e24:	08 95       	ret
    1e26:	9b 01       	movw	r18, r22
    1e28:	ac 01       	movw	r20, r24
    1e2a:	0a 2e       	mov	r0, r26
    1e2c:	06 94       	lsr	r0
    1e2e:	57 95       	ror	r21
    1e30:	47 95       	ror	r20
    1e32:	37 95       	ror	r19
    1e34:	27 95       	ror	r18
    1e36:	ba 95       	dec	r27
    1e38:	c9 f7       	brne	.-14     	; 0x1e2c <__ultoa_invert+0xa2>
    1e3a:	62 0f       	add	r22, r18
    1e3c:	73 1f       	adc	r23, r19
    1e3e:	84 1f       	adc	r24, r20
    1e40:	95 1f       	adc	r25, r21
    1e42:	a0 1d       	adc	r26, r0
    1e44:	08 95       	ret

00001e46 <__prologue_saves__>:
    1e46:	2f 92       	push	r2
    1e48:	3f 92       	push	r3
    1e4a:	4f 92       	push	r4
    1e4c:	5f 92       	push	r5
    1e4e:	6f 92       	push	r6
    1e50:	7f 92       	push	r7
    1e52:	8f 92       	push	r8
    1e54:	9f 92       	push	r9
    1e56:	af 92       	push	r10
    1e58:	bf 92       	push	r11
    1e5a:	cf 92       	push	r12
    1e5c:	df 92       	push	r13
    1e5e:	ef 92       	push	r14
    1e60:	ff 92       	push	r15
    1e62:	0f 93       	push	r16
    1e64:	1f 93       	push	r17
    1e66:	cf 93       	push	r28
    1e68:	df 93       	push	r29
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	ca 1b       	sub	r28, r26
    1e70:	db 0b       	sbc	r29, r27
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	09 94       	ijmp

00001e7e <__epilogue_restores__>:
    1e7e:	2a 88       	ldd	r2, Y+18	; 0x12
    1e80:	39 88       	ldd	r3, Y+17	; 0x11
    1e82:	48 88       	ldd	r4, Y+16	; 0x10
    1e84:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e86:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e88:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e8a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e8c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e8e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e90:	b9 84       	ldd	r11, Y+9	; 0x09
    1e92:	c8 84       	ldd	r12, Y+8	; 0x08
    1e94:	df 80       	ldd	r13, Y+7	; 0x07
    1e96:	ee 80       	ldd	r14, Y+6	; 0x06
    1e98:	fd 80       	ldd	r15, Y+5	; 0x05
    1e9a:	0c 81       	ldd	r16, Y+4	; 0x04
    1e9c:	1b 81       	ldd	r17, Y+3	; 0x03
    1e9e:	aa 81       	ldd	r26, Y+2	; 0x02
    1ea0:	b9 81       	ldd	r27, Y+1	; 0x01
    1ea2:	ce 0f       	add	r28, r30
    1ea4:	d1 1d       	adc	r29, r1
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	ed 01       	movw	r28, r26
    1eb2:	08 95       	ret

00001eb4 <_exit>:
    1eb4:	f8 94       	cli

00001eb6 <__stop_program>:
    1eb6:	ff cf       	rjmp	.-2      	; 0x1eb6 <__stop_program>
