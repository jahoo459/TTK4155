
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d8  00800100  000020fc  00002190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000031  008002d8  008002d8  00002368  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002368  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000310  00000000  00000000  000023c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000415b  00000000  00000000  000026d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012ad  00000000  00000000  0000682f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018df  00000000  00000000  00007adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007a0  00000000  00000000  000093bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ebd  00000000  00000000  00009b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000020ec  00000000  00000000  0000aa19  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003e0  00000000  00000000  0000cb05  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	23 c2       	rjmp	.+1094   	; 0x44c <__vector_1>
       6:	00 00       	nop
       8:	30 c2       	rjmp	.+1120   	; 0x46a <__vector_2>
       a:	00 00       	nop
       c:	3d c2       	rjmp	.+1146   	; 0x488 <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <JOY_calibrate+0x1a0>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ec ef       	ldi	r30, 0xFC	; 252
     37c:	f0 e2       	ldi	r31, 0x20	; 32
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a8 3d       	cpi	r26, 0xD8	; 216
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a8 ed       	ldi	r26, 0xD8	; 216
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a9 30       	cpi	r26, 0x09	; 9
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	c4 d0       	rcall	.+392    	; 0x524 <main>
     39c:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	//printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	2f 93       	push	r18
     3ae:	3f 93       	push	r19
     3b0:	4f 93       	push	r20
     3b2:	5f 93       	push	r21
     3b4:	6f 93       	push	r22
     3b6:	7f 93       	push	r23
     3b8:	8f 93       	push	r24
     3ba:	9f 93       	push	r25
     3bc:	af 93       	push	r26
     3be:	bf 93       	push	r27
     3c0:	ef 93       	push	r30
     3c2:	ff 93       	push	r31
     3c4:	8c b1       	in	r24, 0x0c	; 12
     3c6:	80 93 f9 02 	sts	0x02F9, r24
     3ca:	10 92 f8 02 	sts	0x02F8, r1
     3ce:	10 92 f6 02 	sts	0x02F6, r1
     3d2:	10 92 f7 02 	sts	0x02F7, r1
     3d6:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <uartReceive>
     3da:	60 93 f6 02 	sts	0x02F6, r22
     3de:	70 93 f7 02 	sts	0x02F7, r23
     3e2:	80 93 f8 02 	sts	0x02F8, r24
     3e6:	66 23       	and	r22, r22
     3e8:	e9 f0       	breq	.+58     	; 0x424 <__vector_19+0x82>
     3ea:	54 d7       	rcall	.+3752   	; 0x1294 <OLED_clear>
     3ec:	80 91 f6 02 	lds	r24, 0x02F6
     3f0:	1f 92       	push	r1
     3f2:	8f 93       	push	r24
     3f4:	82 e4       	ldi	r24, 0x42	; 66
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	9f 93       	push	r25
     3fa:	8f 93       	push	r24
     3fc:	8b ed       	ldi	r24, 0xDB	; 219
     3fe:	92 e0       	ldi	r25, 0x02	; 2
     400:	9f 93       	push	r25
     402:	8f 93       	push	r24
     404:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <sprintf>
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	70 e0       	ldi	r23, 0x00	; 0
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	24 d7       	rcall	.+3656   	; 0x125a <OLED_goto>
     412:	8b ed       	ldi	r24, 0xDB	; 219
     414:	92 e0       	ldi	r25, 0x02	; 2
     416:	77 d7       	rcall	.+3822   	; 0x1306 <OLED_printString>
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	0f 90       	pop	r0
     422:	0f 90       	pop	r0
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	80 93 e1 02 	sts	0x02E1, r24
     42a:	ff 91       	pop	r31
     42c:	ef 91       	pop	r30
     42e:	bf 91       	pop	r27
     430:	af 91       	pop	r26
     432:	9f 91       	pop	r25
     434:	8f 91       	pop	r24
     436:	7f 91       	pop	r23
     438:	6f 91       	pop	r22
     43a:	5f 91       	pop	r21
     43c:	4f 91       	pop	r20
     43e:	3f 91       	pop	r19
     440:	2f 91       	pop	r18
     442:	0f 90       	pop	r0
     444:	0f be       	out	0x3f, r0	; 63
     446:	0f 90       	pop	r0
     448:	1f 90       	pop	r1
     44a:	18 95       	reti

0000044c <__vector_1>:
     44c:	1f 92       	push	r1
     44e:	0f 92       	push	r0
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	0f 92       	push	r0
     454:	11 24       	eor	r1, r1
     456:	8f 93       	push	r24
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	80 93 e0 02 	sts	0x02E0, r24
     45e:	8f 91       	pop	r24
     460:	0f 90       	pop	r0
     462:	0f be       	out	0x3f, r0	; 63
     464:	0f 90       	pop	r0
     466:	1f 90       	pop	r1
     468:	18 95       	reti

0000046a <__vector_2>:
     46a:	1f 92       	push	r1
     46c:	0f 92       	push	r0
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	0f 92       	push	r0
     472:	11 24       	eor	r1, r1
     474:	8f 93       	push	r24
     476:	81 e0       	ldi	r24, 0x01	; 1
     478:	80 93 df 02 	sts	0x02DF, r24
     47c:	8f 91       	pop	r24
     47e:	0f 90       	pop	r0
     480:	0f be       	out	0x3f, r0	; 63
     482:	0f 90       	pop	r0
     484:	1f 90       	pop	r1
     486:	18 95       	reti

00000488 <__vector_3>:
     488:	1f 92       	push	r1
     48a:	0f 92       	push	r0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	0f 92       	push	r0
     490:	11 24       	eor	r1, r1
     492:	8f 93       	push	r24
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	80 93 de 02 	sts	0x02DE, r24
     49a:	8f 91       	pop	r24
     49c:	0f 90       	pop	r0
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	0f 90       	pop	r0
     4a2:	1f 90       	pop	r1
     4a4:	18 95       	reti

000004a6 <init>:
     4a6:	ef 92       	push	r14
     4a8:	ff 92       	push	r15
     4aa:	0f 93       	push	r16
     4ac:	1f 93       	push	r17
     4ae:	1f e1       	ldi	r17, 0x1F	; 31
     4b0:	e1 2e       	mov	r14, r17
     4b2:	f1 2c       	mov	r15, r1
     4b4:	00 e0       	ldi	r16, 0x00	; 0
     4b6:	10 e0       	ldi	r17, 0x00	; 0
     4b8:	20 e0       	ldi	r18, 0x00	; 0
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	4b e4       	ldi	r20, 0x4B	; 75
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	60 e8       	ldi	r22, 0x80	; 128
     4c2:	75 e2       	ldi	r23, 0x25	; 37
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 82 0b 	call	0x1704	; 0x1704 <uartInit>
     4cc:	85 e4       	ldi	r24, 0x45	; 69
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <puts>
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	40 d2       	rcall	.+1152   	; 0x958 <enableXMEM>
     4d8:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <SLI_init>
     4dc:	4f d2       	rcall	.+1182   	; 0x97c <JOY_init>
     4de:	fa d7       	rcall	.+4084   	; 0x14d4 <OLED_init>
     4e0:	0e 94 3c 0b 	call	0x1678	; 0x1678 <SPI_init>
     4e4:	42 d4       	rcall	.+2180   	; 0xd6a <MCP2515_init>
     4e6:	95 d0       	rcall	.+298    	; 0x612 <CAN_init>
     4e8:	8b b7       	in	r24, 0x3b	; 59
     4ea:	80 64       	ori	r24, 0x40	; 64
     4ec:	8b bf       	out	0x3b, r24	; 59
     4ee:	85 b7       	in	r24, 0x35	; 53
     4f0:	82 60       	ori	r24, 0x02	; 2
     4f2:	85 bf       	out	0x35, r24	; 53
     4f4:	85 b7       	in	r24, 0x35	; 53
     4f6:	8e 7f       	andi	r24, 0xFE	; 254
     4f8:	85 bf       	out	0x35, r24	; 53
     4fa:	8b 98       	cbi	0x11, 3	; 17
     4fc:	93 9a       	sbi	0x12, 3	; 18
     4fe:	8b b7       	in	r24, 0x3b	; 59
     500:	80 68       	ori	r24, 0x80	; 128
     502:	8b bf       	out	0x3b, r24	; 59
     504:	85 b7       	in	r24, 0x35	; 53
     506:	88 60       	ori	r24, 0x08	; 8
     508:	85 bf       	out	0x35, r24	; 53
     50a:	85 b7       	in	r24, 0x35	; 53
     50c:	8b 7f       	andi	r24, 0xFB	; 251
     50e:	85 bf       	out	0x35, r24	; 53
     510:	32 98       	cbi	0x06, 2	; 6
     512:	3a 98       	cbi	0x07, 2	; 7
     514:	b8 98       	cbi	0x17, 0	; 23
     516:	c0 98       	cbi	0x18, 0	; 24
     518:	78 94       	sei
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
     51e:	ff 90       	pop	r15
     520:	ef 90       	pop	r14
     522:	08 95       	ret

00000524 <main>:
/*
=======================MAIN FUNCTION=========================
*/

int main(void)
{
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	cd b7       	in	r28, 0x3d	; 61
     52a:	de b7       	in	r29, 0x3e	; 62
     52c:	a9 97       	sbiw	r28, 0x29	; 41
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	f8 94       	cli
     532:	de bf       	out	0x3e, r29	; 62
     534:	0f be       	out	0x3f, r0	; 63
     536:	cd bf       	out	0x3d, r28	; 61
	
	init();
     538:	b6 df       	rcall	.-148    	; 0x4a6 <init>

	OLED_goto(0,0);
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	8b d6       	rcall	.+3350   	; 0x125a <OLED_goto>
	OLED_printString("I'm alive");
     544:	8e e7       	ldi	r24, 0x7E	; 126
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	de d6       	rcall	.+3516   	; 0x1306 <OLED_printString>
		}
		else
		{
			ButtonRight = 0;
		}
		printf("%d\n", SliPos);
     54a:	08 e8       	ldi	r16, 0x88	; 136
     54c:	11 e0       	ldi	r17, 0x01	; 1
		
		message2send.id = 23;
		message2send.length = 3;
     54e:	0f 2e       	mov	r0, r31
     550:	f3 e0       	ldi	r31, 0x03	; 3
     552:	bf 2e       	mov	r11, r31
     554:	f0 2d       	mov	r31, r0
		
		JoyPos = JOY_getPosition().X_abs;
		SliPos = SLI_getPosition().R_per;
		if((PINE & (1<<PE2)))
		{
			ButtonRight = 1;
     556:	cc 24       	eor	r12, r12
     558:	c3 94       	inc	r12
		{
			ButtonRight = 0;
		}
		printf("%d\n", SliPos);
		
		message2send.id = 23;
     55a:	0f 2e       	mov	r0, r31
     55c:	f7 e1       	ldi	r31, 0x17	; 23
     55e:	ef 2e       	mov	r14, r31
     560:	f1 2c       	mov	r15, r1
     562:	f0 2d       	mov	r31, r0
		message2send.length = 3;
     564:	db 2c       	mov	r13, r11
    while(1)
    {

		
		
		JoyPos = JOY_getPosition().X_abs;
     566:	8d d3       	rcall	.+1818   	; 0xc82 <JOY_getPosition>
     568:	29 83       	std	Y+1, r18	; 0x01
     56a:	3a 83       	std	Y+2, r19	; 0x02
     56c:	4b 83       	std	Y+3, r20	; 0x03
     56e:	5c 83       	std	Y+4, r21	; 0x04
     570:	6d 83       	std	Y+5, r22	; 0x05
     572:	7e 83       	std	Y+6, r23	; 0x06
     574:	8f 83       	std	Y+7, r24	; 0x07
     576:	98 87       	std	Y+8, r25	; 0x08
     578:	20 93 da 02 	sts	0x02DA, r18
		SliPos = SLI_getPosition().R_per;
     57c:	0e 94 2b 0b 	call	0x1656	; 0x1656 <SLI_getPosition>
     580:	80 93 d9 02 	sts	0x02D9, r24
		if((PINE & (1<<PE2)))
     584:	2a 9b       	sbis	0x05, 2	; 5
     586:	03 c0       	rjmp	.+6      	; 0x58e <main+0x6a>
		{
			ButtonRight = 1;
     588:	c0 92 d8 02 	sts	0x02D8, r12
     58c:	02 c0       	rjmp	.+4      	; 0x592 <main+0x6e>
		}
		else
		{
			ButtonRight = 0;
     58e:	10 92 d8 02 	sts	0x02D8, r1
		}
		printf("%d\n", SliPos);
     592:	1f 92       	push	r1
     594:	8f 93       	push	r24
     596:	1f 93       	push	r17
     598:	0f 93       	push	r16
     59a:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <printf>
		
		message2send.id = 23;
     59e:	fa 86       	std	Y+10, r15	; 0x0a
     5a0:	e9 86       	std	Y+9, r14	; 0x09
		message2send.length = 3;
     5a2:	db 86       	std	Y+11, r13	; 0x0b
		message2send.data[0] = JoyPos;
     5a4:	80 91 da 02 	lds	r24, 0x02DA
     5a8:	8c 87       	std	Y+12, r24	; 0x0c
		message2send.data[1] = SliPos;
     5aa:	80 91 d9 02 	lds	r24, 0x02D9
     5ae:	8d 87       	std	Y+13, r24	; 0x0d
		message2send.data[2] = ButtonRight;
     5b0:	80 91 d8 02 	lds	r24, 0x02D8
     5b4:	8e 87       	std	Y+14, r24	; 0x0e
		
		CAN_sendMessage(&message2send, 0);
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	ce 01       	movw	r24, r28
     5ba:	09 96       	adiw	r24, 0x09	; 9
     5bc:	41 d0       	rcall	.+130    	; 0x640 <CAN_sendMessage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 ef       	ldi	r25, 0xF0	; 240
     5c2:	01 97       	sbiw	r24, 0x01	; 1
     5c4:	f1 f7       	brne	.-4      	; 0x5c2 <main+0x9e>
		_delay_ms(50);

		if(activateMenuFlag)
     5c6:	80 91 df 02 	lds	r24, 0x02DF
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	81 11       	cpse	r24, r1
		{
			MENU_activate();
     5d4:	34 d6       	rcall	.+3176   	; 0x123e <MENU_activate>
		}

		if(SPIreceivedFlag)
     5d6:	80 91 de 02 	lds	r24, 0x02DE
     5da:	88 23       	and	r24, r24
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <main+0xbc>
     5de:	c3 cf       	rjmp	.-122    	; 0x566 <main+0x42>
		{
			
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
     5e0:	6c e2       	ldi	r22, 0x2C	; 44
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	ab d3       	rcall	.+1878   	; 0xd3c <MCP2515_read>
     5e6:	83 70       	andi	r24, 0x03	; 3
     5e8:	09 f4       	brne	.+2      	; 0x5ec <main+0xc8>
     5ea:	bd cf       	rjmp	.-134    	; 0x566 <main+0x42>
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     5ec:	68 2f       	mov	r22, r24
     5ee:	ce 01       	movw	r24, r28
     5f0:	4f 96       	adiw	r24, 0x1f	; 31
     5f2:	8f d0       	rcall	.+286    	; 0x712 <CAN_receiveMessage>
     5f4:	8b e0       	ldi	r24, 0x0B	; 11
     5f6:	fe 01       	movw	r30, r28
     5f8:	7f 96       	adiw	r30, 0x1f	; 31
     5fa:	de 01       	movw	r26, r28
     5fc:	54 96       	adiw	r26, 0x14	; 20
     5fe:	01 90       	ld	r0, Z+
     600:	0d 92       	st	X+, r0
     602:	8a 95       	dec	r24
     604:	e1 f7       	brne	.-8      	; 0x5fe <main+0xda>

				CAN_printMessage(&receivedMessage);
     606:	ce 01       	movw	r24, r28
     608:	44 96       	adiw	r24, 0x14	; 20
     60a:	4c d1       	rcall	.+664    	; 0x8a4 <CAN_printMessage>
			
				SPIreceivedFlag = 0;
     60c:	10 92 de 02 	sts	0x02DE, r1
     610:	a9 cf       	rjmp	.-174    	; 0x564 <main+0x40>

00000612 <CAN_init>:
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	43 e0       	ldi	r20, 0x03	; 3
     61c:	6b e2       	ldi	r22, 0x2B	; 43
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	af d3       	rcall	.+1886   	; 0xd82 <MCP2515_write>
     624:	40 e6       	ldi	r20, 0x60	; 96
     626:	60 e6       	ldi	r22, 0x60	; 96
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	aa d3       	rcall	.+1876   	; 0xd82 <MCP2515_write>
     62e:	20 e0       	ldi	r18, 0x00	; 0
     630:	40 e8       	ldi	r20, 0x80	; 128
     632:	6f e0       	ldi	r22, 0x0F	; 15
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	b7 d3       	rcall	.+1902   	; 0xda8 <MCP2515_bitModify>
     63a:	df 91       	pop	r29
     63c:	cf 91       	pop	r28
     63e:	08 95       	ret

00000640 <CAN_sendMessage>:
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	cd b7       	in	r28, 0x3d	; 61
     646:	de b7       	in	r29, 0x3e	; 62
     648:	27 97       	sbiw	r28, 0x07	; 7
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
     654:	9e 83       	std	Y+6, r25	; 0x06
     656:	8d 83       	std	Y+5, r24	; 0x05
     658:	6f 83       	std	Y+7, r22	; 0x07
     65a:	8f 81       	ldd	r24, Y+7	; 0x07
     65c:	88 2f       	mov	r24, r24
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	00 97       	sbiw	r24, 0x00	; 0
     662:	09 f0       	breq	.+2      	; 0x666 <CAN_sendMessage+0x26>
     664:	4d c0       	rjmp	.+154    	; 0x700 <CAN_sendMessage+0xc0>
     666:	8d 81       	ldd	r24, Y+5	; 0x05
     668:	9e 81       	ldd	r25, Y+6	; 0x06
     66a:	fc 01       	movw	r30, r24
     66c:	80 81       	ld	r24, Z
     66e:	91 81       	ldd	r25, Z+1	; 0x01
     670:	9c 83       	std	Y+4, r25	; 0x04
     672:	8b 83       	std	Y+3, r24	; 0x03
     674:	8b 81       	ldd	r24, Y+3	; 0x03
     676:	82 95       	swap	r24
     678:	88 0f       	add	r24, r24
     67a:	80 7e       	andi	r24, 0xE0	; 224
     67c:	48 2f       	mov	r20, r24
     67e:	62 e3       	ldi	r22, 0x32	; 50
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	7e d3       	rcall	.+1788   	; 0xd82 <MCP2515_write>
     686:	8b 81       	ldd	r24, Y+3	; 0x03
     688:	9c 81       	ldd	r25, Y+4	; 0x04
     68a:	96 95       	lsr	r25
     68c:	87 95       	ror	r24
     68e:	96 95       	lsr	r25
     690:	87 95       	ror	r24
     692:	96 95       	lsr	r25
     694:	87 95       	ror	r24
     696:	48 2f       	mov	r20, r24
     698:	61 e3       	ldi	r22, 0x31	; 49
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	71 d3       	rcall	.+1762   	; 0xd82 <MCP2515_write>
     6a0:	8d 81       	ldd	r24, Y+5	; 0x05
     6a2:	9e 81       	ldd	r25, Y+6	; 0x06
     6a4:	fc 01       	movw	r30, r24
     6a6:	82 81       	ldd	r24, Z+2	; 0x02
     6a8:	48 2f       	mov	r20, r24
     6aa:	65 e3       	ldi	r22, 0x35	; 53
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	68 d3       	rcall	.+1744   	; 0xd82 <MCP2515_write>
     6b2:	86 e3       	ldi	r24, 0x36	; 54
     6b4:	89 83       	std	Y+1, r24	; 0x01
     6b6:	1a 82       	std	Y+2, r1	; 0x02
     6b8:	15 c0       	rjmp	.+42     	; 0x6e4 <CAN_sendMessage+0xa4>
     6ba:	8a 81       	ldd	r24, Y+2	; 0x02
     6bc:	88 2f       	mov	r24, r24
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	2d 81       	ldd	r18, Y+5	; 0x05
     6c2:	3e 81       	ldd	r19, Y+6	; 0x06
     6c4:	82 0f       	add	r24, r18
     6c6:	93 1f       	adc	r25, r19
     6c8:	03 96       	adiw	r24, 0x03	; 3
     6ca:	fc 01       	movw	r30, r24
     6cc:	80 81       	ld	r24, Z
     6ce:	48 2f       	mov	r20, r24
     6d0:	69 81       	ldd	r22, Y+1	; 0x01
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	55 d3       	rcall	.+1706   	; 0xd82 <MCP2515_write>
     6d8:	89 81       	ldd	r24, Y+1	; 0x01
     6da:	8f 5f       	subi	r24, 0xFF	; 255
     6dc:	89 83       	std	Y+1, r24	; 0x01
     6de:	8a 81       	ldd	r24, Y+2	; 0x02
     6e0:	8f 5f       	subi	r24, 0xFF	; 255
     6e2:	8a 83       	std	Y+2, r24	; 0x02
     6e4:	8d 81       	ldd	r24, Y+5	; 0x05
     6e6:	9e 81       	ldd	r25, Y+6	; 0x06
     6e8:	fc 01       	movw	r30, r24
     6ea:	92 81       	ldd	r25, Z+2	; 0x02
     6ec:	8a 81       	ldd	r24, Y+2	; 0x02
     6ee:	89 17       	cp	r24, r25
     6f0:	20 f3       	brcs	.-56     	; 0x6ba <CAN_sendMessage+0x7a>
     6f2:	2f ef       	ldi	r18, 0xFF	; 255
     6f4:	48 e0       	ldi	r20, 0x08	; 8
     6f6:	60 e3       	ldi	r22, 0x30	; 48
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	55 d3       	rcall	.+1706   	; 0xda8 <MCP2515_bitModify>
     6fe:	00 00       	nop
     700:	27 96       	adiw	r28, 0x07	; 7
     702:	0f b6       	in	r0, 0x3f	; 63
     704:	f8 94       	cli
     706:	de bf       	out	0x3e, r29	; 62
     708:	0f be       	out	0x3f, r0	; 63
     70a:	cd bf       	out	0x3d, r28	; 61
     70c:	df 91       	pop	r29
     70e:	cf 91       	pop	r28
     710:	08 95       	ret

00000712 <CAN_receiveMessage>:
     712:	0f 93       	push	r16
     714:	1f 93       	push	r17
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	cd b7       	in	r28, 0x3d	; 61
     71c:	de b7       	in	r29, 0x3e	; 62
     71e:	61 97       	sbiw	r28, 0x11	; 17
     720:	0f b6       	in	r0, 0x3f	; 63
     722:	f8 94       	cli
     724:	de bf       	out	0x3e, r29	; 62
     726:	0f be       	out	0x3f, r0	; 63
     728:	cd bf       	out	0x3d, r28	; 61
     72a:	98 8b       	std	Y+16, r25	; 0x10
     72c:	8f 87       	std	Y+15, r24	; 0x0f
     72e:	69 8b       	std	Y+17, r22	; 0x11
     730:	89 89       	ldd	r24, Y+17	; 0x11
     732:	88 2f       	mov	r24, r24
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	82 30       	cpi	r24, 0x02	; 2
     738:	91 05       	cpc	r25, r1
     73a:	09 f4       	brne	.+2      	; 0x73e <CAN_receiveMessage+0x2c>
     73c:	57 c0       	rjmp	.+174    	; 0x7ec <CAN_receiveMessage+0xda>
     73e:	83 30       	cpi	r24, 0x03	; 3
     740:	91 05       	cpc	r25, r1
     742:	21 f0       	breq	.+8      	; 0x74c <CAN_receiveMessage+0x3a>
     744:	81 30       	cpi	r24, 0x01	; 1
     746:	91 05       	cpc	r25, r1
     748:	09 f0       	breq	.+2      	; 0x74c <CAN_receiveMessage+0x3a>
     74a:	9f c0       	rjmp	.+318    	; 0x88a <CAN_receiveMessage+0x178>
     74c:	61 e6       	ldi	r22, 0x61	; 97
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	f4 d2       	rcall	.+1512   	; 0xd3c <MCP2515_read>
     754:	88 2f       	mov	r24, r24
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	9d 83       	std	Y+5, r25	; 0x05
     75a:	8c 83       	std	Y+4, r24	; 0x04
     75c:	8c 81       	ldd	r24, Y+4	; 0x04
     75e:	9d 81       	ldd	r25, Y+5	; 0x05
     760:	8c 01       	movw	r16, r24
     762:	00 0f       	add	r16, r16
     764:	11 1f       	adc	r17, r17
     766:	00 0f       	add	r16, r16
     768:	11 1f       	adc	r17, r17
     76a:	00 0f       	add	r16, r16
     76c:	11 1f       	adc	r17, r17
     76e:	62 e6       	ldi	r22, 0x62	; 98
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	e3 d2       	rcall	.+1478   	; 0xd3c <MCP2515_read>
     776:	82 95       	swap	r24
     778:	86 95       	lsr	r24
     77a:	87 70       	andi	r24, 0x07	; 7
     77c:	88 2f       	mov	r24, r24
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	80 2b       	or	r24, r16
     782:	91 2b       	or	r25, r17
     784:	9d 83       	std	Y+5, r25	; 0x05
     786:	8c 83       	std	Y+4, r24	; 0x04
     788:	65 e6       	ldi	r22, 0x65	; 101
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	d6 d2       	rcall	.+1452   	; 0xd3c <MCP2515_read>
     790:	8e 83       	std	Y+6, r24	; 0x06
     792:	86 e6       	ldi	r24, 0x66	; 102
     794:	89 83       	std	Y+1, r24	; 0x01
     796:	1a 82       	std	Y+2, r1	; 0x02
     798:	14 c0       	rjmp	.+40     	; 0x7c2 <CAN_receiveMessage+0xb0>
     79a:	8a 81       	ldd	r24, Y+2	; 0x02
     79c:	08 2f       	mov	r16, r24
     79e:	10 e0       	ldi	r17, 0x00	; 0
     7a0:	69 81       	ldd	r22, Y+1	; 0x01
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	ca d2       	rcall	.+1428   	; 0xd3c <MCP2515_read>
     7a8:	28 2f       	mov	r18, r24
     7aa:	ce 01       	movw	r24, r28
     7ac:	07 96       	adiw	r24, 0x07	; 7
     7ae:	80 0f       	add	r24, r16
     7b0:	91 1f       	adc	r25, r17
     7b2:	fc 01       	movw	r30, r24
     7b4:	20 83       	st	Z, r18
     7b6:	89 81       	ldd	r24, Y+1	; 0x01
     7b8:	8f 5f       	subi	r24, 0xFF	; 255
     7ba:	89 83       	std	Y+1, r24	; 0x01
     7bc:	8a 81       	ldd	r24, Y+2	; 0x02
     7be:	8f 5f       	subi	r24, 0xFF	; 255
     7c0:	8a 83       	std	Y+2, r24	; 0x02
     7c2:	9e 81       	ldd	r25, Y+6	; 0x06
     7c4:	8a 81       	ldd	r24, Y+2	; 0x02
     7c6:	89 17       	cp	r24, r25
     7c8:	40 f3       	brcs	.-48     	; 0x79a <CAN_receiveMessage+0x88>
     7ca:	20 e0       	ldi	r18, 0x00	; 0
     7cc:	41 e0       	ldi	r20, 0x01	; 1
     7ce:	6c e2       	ldi	r22, 0x2C	; 44
     7d0:	80 e0       	ldi	r24, 0x00	; 0
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	e9 d2       	rcall	.+1490   	; 0xda8 <MCP2515_bitModify>
     7d6:	8f 85       	ldd	r24, Y+15	; 0x0f
     7d8:	98 89       	ldd	r25, Y+16	; 0x10
     7da:	2b e0       	ldi	r18, 0x0B	; 11
     7dc:	fe 01       	movw	r30, r28
     7de:	34 96       	adiw	r30, 0x04	; 4
     7e0:	dc 01       	movw	r26, r24
     7e2:	01 90       	ld	r0, Z+
     7e4:	0d 92       	st	X+, r0
     7e6:	2a 95       	dec	r18
     7e8:	e1 f7       	brne	.-8      	; 0x7e2 <CAN_receiveMessage+0xd0>
     7ea:	4f c0       	rjmp	.+158    	; 0x88a <CAN_receiveMessage+0x178>
     7ec:	61 e7       	ldi	r22, 0x71	; 113
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	a4 d2       	rcall	.+1352   	; 0xd3c <MCP2515_read>
     7f4:	88 2f       	mov	r24, r24
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	9d 83       	std	Y+5, r25	; 0x05
     7fa:	8c 83       	std	Y+4, r24	; 0x04
     7fc:	8c 81       	ldd	r24, Y+4	; 0x04
     7fe:	9d 81       	ldd	r25, Y+5	; 0x05
     800:	8c 01       	movw	r16, r24
     802:	00 0f       	add	r16, r16
     804:	11 1f       	adc	r17, r17
     806:	00 0f       	add	r16, r16
     808:	11 1f       	adc	r17, r17
     80a:	00 0f       	add	r16, r16
     80c:	11 1f       	adc	r17, r17
     80e:	62 e7       	ldi	r22, 0x72	; 114
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	93 d2       	rcall	.+1318   	; 0xd3c <MCP2515_read>
     816:	82 95       	swap	r24
     818:	86 95       	lsr	r24
     81a:	87 70       	andi	r24, 0x07	; 7
     81c:	88 2f       	mov	r24, r24
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	80 2b       	or	r24, r16
     822:	91 2b       	or	r25, r17
     824:	9d 83       	std	Y+5, r25	; 0x05
     826:	8c 83       	std	Y+4, r24	; 0x04
     828:	65 e7       	ldi	r22, 0x75	; 117
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	86 d2       	rcall	.+1292   	; 0xd3c <MCP2515_read>
     830:	8e 83       	std	Y+6, r24	; 0x06
     832:	86 e7       	ldi	r24, 0x76	; 118
     834:	89 83       	std	Y+1, r24	; 0x01
     836:	1b 82       	std	Y+3, r1	; 0x03
     838:	14 c0       	rjmp	.+40     	; 0x862 <CAN_receiveMessage+0x150>
     83a:	8b 81       	ldd	r24, Y+3	; 0x03
     83c:	08 2f       	mov	r16, r24
     83e:	10 e0       	ldi	r17, 0x00	; 0
     840:	69 81       	ldd	r22, Y+1	; 0x01
     842:	80 e0       	ldi	r24, 0x00	; 0
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	7a d2       	rcall	.+1268   	; 0xd3c <MCP2515_read>
     848:	28 2f       	mov	r18, r24
     84a:	ce 01       	movw	r24, r28
     84c:	07 96       	adiw	r24, 0x07	; 7
     84e:	80 0f       	add	r24, r16
     850:	91 1f       	adc	r25, r17
     852:	fc 01       	movw	r30, r24
     854:	20 83       	st	Z, r18
     856:	89 81       	ldd	r24, Y+1	; 0x01
     858:	8f 5f       	subi	r24, 0xFF	; 255
     85a:	89 83       	std	Y+1, r24	; 0x01
     85c:	8b 81       	ldd	r24, Y+3	; 0x03
     85e:	8f 5f       	subi	r24, 0xFF	; 255
     860:	8b 83       	std	Y+3, r24	; 0x03
     862:	9e 81       	ldd	r25, Y+6	; 0x06
     864:	8b 81       	ldd	r24, Y+3	; 0x03
     866:	89 17       	cp	r24, r25
     868:	40 f3       	brcs	.-48     	; 0x83a <CAN_receiveMessage+0x128>
     86a:	20 e0       	ldi	r18, 0x00	; 0
     86c:	42 e0       	ldi	r20, 0x02	; 2
     86e:	6c e2       	ldi	r22, 0x2C	; 44
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	99 d2       	rcall	.+1330   	; 0xda8 <MCP2515_bitModify>
     876:	8f 85       	ldd	r24, Y+15	; 0x0f
     878:	98 89       	ldd	r25, Y+16	; 0x10
     87a:	2b e0       	ldi	r18, 0x0B	; 11
     87c:	fe 01       	movw	r30, r28
     87e:	34 96       	adiw	r30, 0x04	; 4
     880:	dc 01       	movw	r26, r24
     882:	01 90       	ld	r0, Z+
     884:	0d 92       	st	X+, r0
     886:	2a 95       	dec	r18
     888:	e1 f7       	brne	.-8      	; 0x882 <CAN_receiveMessage+0x170>
     88a:	8f 85       	ldd	r24, Y+15	; 0x0f
     88c:	98 89       	ldd	r25, Y+16	; 0x10
     88e:	61 96       	adiw	r28, 0x11	; 17
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	f8 94       	cli
     894:	de bf       	out	0x3e, r29	; 62
     896:	0f be       	out	0x3f, r0	; 63
     898:	cd bf       	out	0x3d, r28	; 61
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	1f 91       	pop	r17
     8a0:	0f 91       	pop	r16
     8a2:	08 95       	ret

000008a4 <CAN_printMessage>:
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	00 d0       	rcall	.+0      	; 0x8aa <CAN_printMessage+0x6>
     8aa:	1f 92       	push	r1
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
     8b0:	9b 83       	std	Y+3, r25	; 0x03
     8b2:	8a 83       	std	Y+2, r24	; 0x02
     8b4:	8a 81       	ldd	r24, Y+2	; 0x02
     8b6:	9b 81       	ldd	r25, Y+3	; 0x03
     8b8:	fc 01       	movw	r30, r24
     8ba:	82 81       	ldd	r24, Z+2	; 0x02
     8bc:	28 2f       	mov	r18, r24
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	8a 81       	ldd	r24, Y+2	; 0x02
     8c2:	9b 81       	ldd	r25, Y+3	; 0x03
     8c4:	fc 01       	movw	r30, r24
     8c6:	80 81       	ld	r24, Z
     8c8:	91 81       	ldd	r25, Z+1	; 0x01
     8ca:	43 2f       	mov	r20, r19
     8cc:	4f 93       	push	r20
     8ce:	2f 93       	push	r18
     8d0:	29 2f       	mov	r18, r25
     8d2:	2f 93       	push	r18
     8d4:	8f 93       	push	r24
     8d6:	82 e1       	ldi	r24, 0x12	; 18
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	89 2f       	mov	r24, r25
     8dc:	8f 93       	push	r24
     8de:	82 e1       	ldi	r24, 0x12	; 18
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	8f 93       	push	r24
     8e4:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <printf>
     8e8:	0f 90       	pop	r0
     8ea:	0f 90       	pop	r0
     8ec:	0f 90       	pop	r0
     8ee:	0f 90       	pop	r0
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	19 82       	std	Y+1, r1	; 0x01
     8f6:	1f c0       	rjmp	.+62     	; 0x936 <CAN_printMessage+0x92>
     8f8:	89 81       	ldd	r24, Y+1	; 0x01
     8fa:	88 2f       	mov	r24, r24
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	2a 81       	ldd	r18, Y+2	; 0x02
     900:	3b 81       	ldd	r19, Y+3	; 0x03
     902:	82 0f       	add	r24, r18
     904:	93 1f       	adc	r25, r19
     906:	03 96       	adiw	r24, 0x03	; 3
     908:	fc 01       	movw	r30, r24
     90a:	80 81       	ld	r24, Z
     90c:	88 2f       	mov	r24, r24
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	29 2f       	mov	r18, r25
     912:	2f 93       	push	r18
     914:	8f 93       	push	r24
     916:	8e e3       	ldi	r24, 0x3E	; 62
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	89 2f       	mov	r24, r25
     91c:	8f 93       	push	r24
     91e:	8e e3       	ldi	r24, 0x3E	; 62
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	8f 93       	push	r24
     924:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <printf>
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	89 81       	ldd	r24, Y+1	; 0x01
     932:	8f 5f       	subi	r24, 0xFF	; 255
     934:	89 83       	std	Y+1, r24	; 0x01
     936:	8a 81       	ldd	r24, Y+2	; 0x02
     938:	9b 81       	ldd	r25, Y+3	; 0x03
     93a:	fc 01       	movw	r30, r24
     93c:	92 81       	ldd	r25, Z+2	; 0x02
     93e:	89 81       	ldd	r24, Y+1	; 0x01
     940:	89 17       	cp	r24, r25
     942:	d0 f2       	brcs	.-76     	; 0x8f8 <CAN_printMessage+0x54>
     944:	8a e0       	ldi	r24, 0x0A	; 10
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <putchar>
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
     952:	df 91       	pop	r29
     954:	cf 91       	pop	r28
     956:	08 95       	ret

00000958 <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     958:	95 b7       	in	r25, 0x35	; 53
     95a:	90 68       	ori	r25, 0x80	; 128
     95c:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     95e:	96 b7       	in	r25, 0x36	; 54
     960:	98 60       	ori	r25, 0x08	; 8
     962:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     964:	88 23       	and	r24, r24
     966:	19 f0       	breq	.+6      	; 0x96e <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     968:	80 b7       	in	r24, 0x30	; 48
     96a:	80 62       	ori	r24, 0x20	; 32
     96c:	80 bf       	out	0x30, r24	; 48
     96e:	08 95       	ret

00000970 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     970:	fc 01       	movw	r30, r24
     972:	80 81       	ld	r24, Z
	return val;
}
     974:	08 95       	ret

00000976 <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     976:	fc 01       	movw	r30, r24
     978:	60 83       	st	Z, r22
     97a:	08 95       	ret

0000097c <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     97c:	10 92 e4 02 	sts	0x02E4, r1
     980:	10 92 e3 02 	sts	0x02E3, r1
	currentPosition.Y_abs = 0;
     984:	10 92 e6 02 	sts	0x02E6, r1
     988:	10 92 e5 02 	sts	0x02E5, r1
	currentPosition.X_per = 0;
     98c:	10 92 e8 02 	sts	0x02E8, r1
     990:	10 92 e7 02 	sts	0x02E7, r1
	currentPosition.Y_per = 0;
     994:	10 92 ea 02 	sts	0x02EA, r1
     998:	10 92 e9 02 	sts	0x02E9, r1
	currentDirection = CENTRE;
     99c:	10 92 e2 02 	sts	0x02E2, r1
     9a0:	08 95       	ret

000009a2 <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     9a6:	76 d4       	rcall	.+2284   	; 0x1294 <OLED_clear>
     9a8:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	54 d4       	rcall	.+2216   	; 0x125a <OLED_goto>
     9b2:	8c e8       	ldi	r24, 0x8C	; 140
     9b4:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     9b6:	a7 d4       	rcall	.+2382   	; 0x1306 <OLED_printString>
     9b8:	2f ef       	ldi	r18, 0xFF	; 255
     9ba:	8f ef       	ldi	r24, 0xFF	; 255
     9bc:	92 e0       	ldi	r25, 0x02	; 2
     9be:	21 50       	subi	r18, 0x01	; 1
     9c0:	80 40       	sbci	r24, 0x00	; 0
     9c2:	90 40       	sbci	r25, 0x00	; 0
     9c4:	e1 f7       	brne	.-8      	; 0x9be <JOY_calibrate+0x1c>
     9c6:	00 c0       	rjmp	.+0      	; 0x9c8 <JOY_calibrate+0x26>
     9c8:	00 c0       	rjmp	.+0      	; 0x9ca <JOY_calibrate+0x28>
     9ca:	c4 e1       	ldi	r28, 0x14	; 20
     9cc:	d0 e0       	ldi	r29, 0x00	; 0
     9ce:	60 91 06 01 	lds	r22, 0x0106
     9d2:	70 91 07 01 	lds	r23, 0x0107
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     9d6:	82 e0       	ldi	r24, 0x02	; 2
     9d8:	ae d6       	rcall	.+3420   	; 0x1736 <ADC_request>
     9da:	2f ef       	ldi	r18, 0xFF	; 255
     9dc:	8f e1       	ldi	r24, 0x1F	; 31
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	21 50       	subi	r18, 0x01	; 1
     9e2:	80 40       	sbci	r24, 0x00	; 0
     9e4:	90 40       	sbci	r25, 0x00	; 0
     9e6:	e1 f7       	brne	.-8      	; 0x9e0 <JOY_calibrate+0x3e>
     9e8:	00 c0       	rjmp	.+0      	; 0x9ea <JOY_calibrate+0x48>
     9ea:	00 00       	nop
     9ec:	80 91 06 01 	lds	r24, 0x0106
     9f0:	90 91 07 01 	lds	r25, 0x0107
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     9f4:	c4 d6       	rcall	.+3464   	; 0x177e <ADC_read>
     9f6:	90 91 0d 01 	lds	r25, 0x010D
     9fa:	98 17       	cp	r25, r24
     9fc:	10 f4       	brcc	.+4      	; 0xa02 <JOY_calibrate+0x60>
     9fe:	80 93 0d 01 	sts	0x010D, r24
		
		if(temp > calR) {calR = temp;}
     a02:	21 97       	sbiw	r28, 0x01	; 1
     a04:	20 97       	sbiw	r28, 0x00	; 0
     a06:	19 f7       	brne	.-58     	; 0x9ce <JOY_calibrate+0x2c>
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	81 e0       	ldi	r24, 0x01	; 1
	OLED_goto(0,0);
	OLED_printString("JOY RIGHT");
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	24 d4       	rcall	.+2120   	; 0x125a <OLED_goto>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_goto(1,0);
     a12:	86 e9       	ldi	r24, 0x96	; 150
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	77 d4       	rcall	.+2286   	; 0x1306 <OLED_printString>
     a18:	2f ef       	ldi	r18, 0xFF	; 255
     a1a:	8f ef       	ldi	r24, 0xFF	; 255
     a1c:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("JOY LEFT");
     a1e:	21 50       	subi	r18, 0x01	; 1
     a20:	80 40       	sbci	r24, 0x00	; 0
     a22:	90 40       	sbci	r25, 0x00	; 0
     a24:	e1 f7       	brne	.-8      	; 0xa1e <JOY_calibrate+0x7c>
     a26:	00 c0       	rjmp	.+0      	; 0xa28 <JOY_calibrate+0x86>
     a28:	00 c0       	rjmp	.+0      	; 0xa2a <JOY_calibrate+0x88>
     a2a:	c4 e1       	ldi	r28, 0x14	; 20
     a2c:	d0 e0       	ldi	r29, 0x00	; 0
     a2e:	60 91 06 01 	lds	r22, 0x0106
     a32:	70 91 07 01 	lds	r23, 0x0107
     a36:	82 e0       	ldi	r24, 0x02	; 2
     a38:	7e d6       	rcall	.+3324   	; 0x1736 <ADC_request>
     a3a:	2f ef       	ldi	r18, 0xFF	; 255
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     a3c:	8f e1       	ldi	r24, 0x1F	; 31
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	21 50       	subi	r18, 0x01	; 1
     a42:	80 40       	sbci	r24, 0x00	; 0
     a44:	90 40       	sbci	r25, 0x00	; 0
     a46:	e1 f7       	brne	.-8      	; 0xa40 <JOY_calibrate+0x9e>
     a48:	00 c0       	rjmp	.+0      	; 0xa4a <JOY_calibrate+0xa8>
     a4a:	00 00       	nop
     a4c:	80 91 06 01 	lds	r24, 0x0106
     a50:	90 91 07 01 	lds	r25, 0x0107
     a54:	94 d6       	rcall	.+3368   	; 0x177e <ADC_read>
     a56:	90 91 0c 01 	lds	r25, 0x010C
     a5a:	89 17       	cp	r24, r25
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     a5c:	10 f4       	brcc	.+4      	; 0xa62 <JOY_calibrate+0xc0>
     a5e:	80 93 0c 01 	sts	0x010C, r24
     a62:	21 97       	sbiw	r28, 0x01	; 1
     a64:	20 97       	sbiw	r28, 0x00	; 0
     a66:	19 f7       	brne	.-58     	; 0xa2e <JOY_calibrate+0x8c>
		
		if(temp < calL) {calL = temp;}
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	82 e0       	ldi	r24, 0x02	; 2
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	f4 d3       	rcall	.+2024   	; 0x125a <OLED_goto>
     a72:	8f e9       	ldi	r24, 0x9F	; 159
     a74:	91 e0       	ldi	r25, 0x01	; 1
	OLED_goto(1,0);
	OLED_printString("JOY LEFT");
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     a76:	47 d4       	rcall	.+2190   	; 0x1306 <OLED_printString>
     a78:	2f ef       	ldi	r18, 0xFF	; 255
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_goto(2,0);
     a7a:	8f ef       	ldi	r24, 0xFF	; 255
     a7c:	92 e0       	ldi	r25, 0x02	; 2
     a7e:	21 50       	subi	r18, 0x01	; 1
     a80:	80 40       	sbci	r24, 0x00	; 0
     a82:	90 40       	sbci	r25, 0x00	; 0
     a84:	e1 f7       	brne	.-8      	; 0xa7e <JOY_calibrate+0xdc>
	OLED_printString("JOY UP");
     a86:	00 c0       	rjmp	.+0      	; 0xa88 <JOY_calibrate+0xe6>
     a88:	00 c0       	rjmp	.+0      	; 0xa8a <JOY_calibrate+0xe8>
     a8a:	c4 e1       	ldi	r28, 0x14	; 20
     a8c:	d0 e0       	ldi	r29, 0x00	; 0
     a8e:	60 91 06 01 	lds	r22, 0x0106
     a92:	70 91 07 01 	lds	r23, 0x0107
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	4e d6       	rcall	.+3228   	; 0x1736 <ADC_request>
     a9a:	2f ef       	ldi	r18, 0xFF	; 255
     a9c:	8f e1       	ldi	r24, 0x1F	; 31
     a9e:	91 e0       	ldi	r25, 0x01	; 1
     aa0:	21 50       	subi	r18, 0x01	; 1
     aa2:	80 40       	sbci	r24, 0x00	; 0
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     aa4:	90 40       	sbci	r25, 0x00	; 0
     aa6:	e1 f7       	brne	.-8      	; 0xaa0 <JOY_calibrate+0xfe>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <JOY_calibrate+0x108>
     aaa:	00 00       	nop
     aac:	80 91 06 01 	lds	r24, 0x0106
     ab0:	90 91 07 01 	lds	r25, 0x0107
     ab4:	64 d6       	rcall	.+3272   	; 0x177e <ADC_read>
     ab6:	90 91 0b 01 	lds	r25, 0x010B
     aba:	98 17       	cp	r25, r24
     abc:	10 f4       	brcc	.+4      	; 0xac2 <JOY_calibrate+0x120>
     abe:	80 93 0b 01 	sts	0x010B, r24
     ac2:	21 97       	sbiw	r28, 0x01	; 1
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     ac4:	20 97       	sbiw	r28, 0x00	; 0
     ac6:	19 f7       	brne	.-58     	; 0xa8e <JOY_calibrate+0xec>
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	83 e0       	ldi	r24, 0x03	; 3
     ace:	90 e0       	ldi	r25, 0x00	; 0
		
		if(temp > calUp) {calUp = temp;}
     ad0:	c4 d3       	rcall	.+1928   	; 0x125a <OLED_goto>
     ad2:	86 ea       	ldi	r24, 0xA6	; 166
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	17 d4       	rcall	.+2094   	; 0x1306 <OLED_printString>
     ad8:	2f ef       	ldi	r18, 0xFF	; 255
     ada:	8f ef       	ldi	r24, 0xFF	; 255
     adc:	92 e0       	ldi	r25, 0x02	; 2
	OLED_goto(2,0);
	OLED_printString("JOY UP");
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     ade:	21 50       	subi	r18, 0x01	; 1
     ae0:	80 40       	sbci	r24, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_goto(3,0);
     ae2:	90 40       	sbci	r25, 0x00	; 0
     ae4:	e1 f7       	brne	.-8      	; 0xade <JOY_calibrate+0x13c>
     ae6:	00 c0       	rjmp	.+0      	; 0xae8 <JOY_calibrate+0x146>
     ae8:	00 c0       	rjmp	.+0      	; 0xaea <JOY_calibrate+0x148>
     aea:	c4 e1       	ldi	r28, 0x14	; 20
     aec:	d0 e0       	ldi	r29, 0x00	; 0
	OLED_printString("JOY DOWN");
     aee:	60 91 06 01 	lds	r22, 0x0106
     af2:	70 91 07 01 	lds	r23, 0x0107
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	1e d6       	rcall	.+3132   	; 0x1736 <ADC_request>
     afa:	2f ef       	ldi	r18, 0xFF	; 255
     afc:	8f e1       	ldi	r24, 0x1F	; 31
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	21 50       	subi	r18, 0x01	; 1
     b02:	80 40       	sbci	r24, 0x00	; 0
     b04:	90 40       	sbci	r25, 0x00	; 0
     b06:	e1 f7       	brne	.-8      	; 0xb00 <JOY_calibrate+0x15e>
     b08:	00 c0       	rjmp	.+0      	; 0xb0a <JOY_calibrate+0x168>
     b0a:	00 00       	nop
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     b0c:	80 91 06 01 	lds	r24, 0x0106
     b10:	90 91 07 01 	lds	r25, 0x0107
     b14:	34 d6       	rcall	.+3176   	; 0x177e <ADC_read>
     b16:	90 91 0a 01 	lds	r25, 0x010A
     b1a:	89 17       	cp	r24, r25
     b1c:	10 f4       	brcc	.+4      	; 0xb22 <JOY_calibrate+0x180>
     b1e:	80 93 0a 01 	sts	0x010A, r24
     b22:	21 97       	sbiw	r28, 0x01	; 1
     b24:	20 97       	sbiw	r28, 0x00	; 0
     b26:	19 f7       	brne	.-58     	; 0xaee <JOY_calibrate+0x14c>
     b28:	20 91 0b 01 	lds	r18, 0x010B
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     b2c:	80 91 0a 01 	lds	r24, 0x010A
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	28 1b       	sub	r18, r24
     b34:	31 09       	sbc	r19, r1
     b36:	c9 01       	movw	r24, r18
		
		if(temp < calDown) {calDown = temp;}
     b38:	99 23       	and	r25, r25
     b3a:	0c f4       	brge	.+2      	; 0xb3e <JOY_calibrate+0x19c>
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	95 95       	asr	r25
     b40:	87 95       	ror	r24
     b42:	80 93 09 01 	sts	0x0109, r24
	OLED_goto(3,0);
	OLED_printString("JOY DOWN");
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     b46:	20 91 0d 01 	lds	r18, 0x010D
	}
	
	
	//printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
	
	meanVert = (calUp - calDown)/2;
     b4a:	80 91 0c 01 	lds	r24, 0x010C
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	28 1b       	sub	r18, r24
     b52:	31 09       	sbc	r19, r1
     b54:	c9 01       	movw	r24, r18
     b56:	99 23       	and	r25, r25
     b58:	0c f4       	brge	.+2      	; 0xb5c <JOY_calibrate+0x1ba>
     b5a:	01 96       	adiw	r24, 0x01	; 1
     b5c:	95 95       	asr	r25
     b5e:	87 95       	ror	r24
     b60:	80 93 08 01 	sts	0x0108, r24
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	70 e0       	ldi	r23, 0x00	; 0
	meanHor = (calR - calL)/2;
     b68:	84 e0       	ldi	r24, 0x04	; 4
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	76 d3       	rcall	.+1772   	; 0x125a <OLED_goto>
     b6e:	8f ea       	ldi	r24, 0xAF	; 175
     b70:	91 e0       	ldi	r25, 0x01	; 1
     b72:	c9 d3       	rcall	.+1938   	; 0x1306 <OLED_printString>
     b74:	2f ef       	ldi	r18, 0xFF	; 255
     b76:	8f ef       	ldi	r24, 0xFF	; 255
     b78:	9e e0       	ldi	r25, 0x0E	; 14
     b7a:	21 50       	subi	r18, 0x01	; 1
     b7c:	80 40       	sbci	r24, 0x00	; 0
     b7e:	90 40       	sbci	r25, 0x00	; 0
     b80:	e1 f7       	brne	.-8      	; 0xb7a <JOY_calibrate+0x1d8>
     b82:	00 c0       	rjmp	.+0      	; 0xb84 <JOY_calibrate+0x1e2>
     b84:	00 00       	nop
	
	OLED_goto(4,0);
     b86:	df 91       	pop	r29
     b88:	cf 91       	pop	r28
     b8a:	08 95       	ret

00000b8c <JOY_requestCurrentPosition>:
     b8c:	88 37       	cpi	r24, 0x78	; 120
     b8e:	39 f4       	brne	.+14     	; 0xb9e <JOY_requestCurrentPosition+0x12>
     b90:	60 91 06 01 	lds	r22, 0x0106
	OLED_printString("CALIB DONE");
     b94:	70 91 07 01 	lds	r23, 0x0107
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	cd c5       	rjmp	.+2970   	; 0x1736 <ADC_request>
     b9c:	08 95       	ret
     b9e:	89 37       	cpi	r24, 0x79	; 121
     ba0:	31 f4       	brne	.+12     	; 0xbae <JOY_requestCurrentPosition+0x22>
     ba2:	60 91 06 01 	lds	r22, 0x0106
     ba6:	70 91 07 01 	lds	r23, 0x0107
     baa:	81 e0       	ldi	r24, 0x01	; 1
	//printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
	_delay_ms(1000);
}
     bac:	c4 c5       	rjmp	.+2952   	; 0x1736 <ADC_request>
     bae:	08 95       	ret

00000bb0 <JOY_updatePosition>:
     bb0:	88 37       	cpi	r24, 0x78	; 120
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
	{
		ADC_request(Y_channel, adc_ext_ram);
     bb2:	f9 f4       	brne	.+62     	; 0xbf2 <JOY_updatePosition+0x42>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     bb4:	80 91 06 01 	lds	r24, 0x0106
     bb8:	90 91 07 01 	lds	r25, 0x0107
     bbc:	e0 d5       	rcall	.+3008   	; 0x177e <ADC_read>
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	90 93 e4 02 	sts	0x02E4, r25
     bc4:	80 93 e3 02 	sts	0x02E3, r24
     bc8:	20 91 08 01 	lds	r18, 0x0108
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     bcc:	60 91 08 01 	lds	r22, 0x0108
     bd0:	ac 01       	movw	r20, r24
     bd2:	42 1b       	sub	r20, r18
     bd4:	51 09       	sbc	r21, r1
     bd6:	9a 01       	movw	r18, r20
     bd8:	44 e6       	ldi	r20, 0x64	; 100
     bda:	42 9f       	mul	r20, r18
     bdc:	c0 01       	movw	r24, r0
     bde:	43 9f       	mul	r20, r19
     be0:	90 0d       	add	r25, r0
     be2:	11 24       	eor	r1, r1
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	cd d5       	rcall	.+2970   	; 0x1782 <__divmodhi4>
     be8:	70 93 e8 02 	sts	0x02E8, r23
     bec:	60 93 e7 02 	sts	0x02E7, r22
     bf0:	08 95       	ret
     bf2:	89 37       	cpi	r24, 0x79	; 121
     bf4:	f1 f4       	brne	.+60     	; 0xc32 <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     bf6:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     bfa:	90 91 07 01 	lds	r25, 0x0107
     bfe:	bf d5       	rcall	.+2942   	; 0x177e <ADC_read>
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	90 93 e6 02 	sts	0x02E6, r25
     c06:	80 93 e5 02 	sts	0x02E5, r24
     c0a:	20 91 09 01 	lds	r18, 0x0109
     c0e:	60 91 09 01 	lds	r22, 0x0109
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     c12:	ac 01       	movw	r20, r24
     c14:	42 1b       	sub	r20, r18
     c16:	51 09       	sbc	r21, r1
     c18:	9a 01       	movw	r18, r20
     c1a:	44 e6       	ldi	r20, 0x64	; 100
     c1c:	42 9f       	mul	r20, r18
     c1e:	c0 01       	movw	r24, r0
     c20:	43 9f       	mul	r20, r19
     c22:	90 0d       	add	r25, r0
     c24:	11 24       	eor	r1, r1
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	ac d5       	rcall	.+2904   	; 0x1782 <__divmodhi4>
     c2a:	70 93 ea 02 	sts	0x02EA, r23
     c2e:	60 93 e9 02 	sts	0x02E9, r22
     c32:	08 95       	ret

00000c34 <JOY_calculateDirection>:
     c34:	80 91 e7 02 	lds	r24, 0x02E7
     c38:	90 91 e8 02 	lds	r25, 0x02E8
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     c3c:	8b 35       	cpi	r24, 0x5B	; 91
     c3e:	91 05       	cpc	r25, r1
     c40:	24 f0       	brlt	.+8      	; 0xc4a <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     c42:	83 e0       	ldi	r24, 0x03	; 3
     c44:	80 93 e2 02 	sts	0x02E2, r24
     c48:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     c4a:	86 3a       	cpi	r24, 0xA6	; 166
     c4c:	9f 4f       	sbci	r25, 0xFF	; 255
     c4e:	24 f4       	brge	.+8      	; 0xc58 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     c50:	84 e0       	ldi	r24, 0x04	; 4
     c52:	80 93 e2 02 	sts	0x02E2, r24
     c56:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     c58:	80 91 e9 02 	lds	r24, 0x02E9
     c5c:	90 91 ea 02 	lds	r25, 0x02EA
     c60:	8b 35       	cpi	r24, 0x5B	; 91
     c62:	91 05       	cpc	r25, r1
     c64:	24 f0       	brlt	.+8      	; 0xc6e <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	80 93 e2 02 	sts	0x02E2, r24
     c6c:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     c6e:	86 3a       	cpi	r24, 0xA6	; 166
     c70:	9f 4f       	sbci	r25, 0xFF	; 255
     c72:	24 f4       	brge	.+8      	; 0xc7c <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     c74:	82 e0       	ldi	r24, 0x02	; 2
     c76:	80 93 e2 02 	sts	0x02E2, r24
     c7a:	08 95       	ret
	else{currentDirection = CENTRE;}
     c7c:	10 92 e2 02 	sts	0x02E2, r1
     c80:	08 95       	ret

00000c82 <JOY_getPosition>:

//------------------------------------------------------------------------------
// This function returns the current position of the Joystick.
// It is a struct with the four parameters X_abs, Y_abs, X_per and Y_per
JOY_position_t JOY_getPosition()
{
     c82:	cf 93       	push	r28
     c84:	df 93       	push	r29
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	28 97       	sbiw	r28, 0x08	; 8
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
	JOY_requestCurrentPosition('x');
     c96:	88 e7       	ldi	r24, 0x78	; 120
     c98:	79 df       	rcall	.-270    	; 0xb8c <JOY_requestCurrentPosition>
     c9a:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c9c:	8a 95       	dec	r24
     c9e:	f1 f7       	brne	.-4      	; 0xc9c <JOY_getPosition+0x1a>
     ca0:	00 00       	nop
     ca2:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     ca4:	85 df       	rcall	.-246    	; 0xbb0 <JOY_updatePosition>
     ca6:	89 e7       	ldi	r24, 0x79	; 121
     ca8:	71 df       	rcall	.-286    	; 0xb8c <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     caa:	82 e6       	ldi	r24, 0x62	; 98
     cac:	8a 95       	dec	r24
     cae:	f1 f7       	brne	.-4      	; 0xcac <JOY_getPosition+0x2a>
     cb0:	00 00       	nop
     cb2:	89 e7       	ldi	r24, 0x79	; 121
     cb4:	7d df       	rcall	.-262    	; 0xbb0 <JOY_updatePosition>
     cb6:	88 e0       	ldi	r24, 0x08	; 8
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     cb8:	e3 ee       	ldi	r30, 0xE3	; 227
     cba:	f2 e0       	ldi	r31, 0x02	; 2
     cbc:	de 01       	movw	r26, r28
	return currentPosition;
     cbe:	11 96       	adiw	r26, 0x01	; 1
     cc0:	01 90       	ld	r0, Z+
     cc2:	0d 92       	st	X+, r0
     cc4:	8a 95       	dec	r24
     cc6:	e1 f7       	brne	.-8      	; 0xcc0 <JOY_getPosition+0x3e>
     cc8:	29 81       	ldd	r18, Y+1	; 0x01
     cca:	3a 81       	ldd	r19, Y+2	; 0x02
     ccc:	4b 81       	ldd	r20, Y+3	; 0x03
     cce:	5c 81       	ldd	r21, Y+4	; 0x04
     cd0:	6d 81       	ldd	r22, Y+5	; 0x05
     cd2:	7e 81       	ldd	r23, Y+6	; 0x06
     cd4:	8f 81       	ldd	r24, Y+7	; 0x07
     cd6:	98 85       	ldd	r25, Y+8	; 0x08
     cd8:	28 96       	adiw	r28, 0x08	; 8
     cda:	0f b6       	in	r0, 0x3f	; 63
}
     cdc:	f8 94       	cli
     cde:	de bf       	out	0x3e, r29	; 62
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	cd bf       	out	0x3d, r28	; 61
     ce4:	df 91       	pop	r29
     ce6:	cf 91       	pop	r28
     ce8:	08 95       	ret

00000cea <JOY_getDirection>:
     cea:	88 e7       	ldi	r24, 0x78	; 120
     cec:	4f df       	rcall	.-354    	; 0xb8c <JOY_requestCurrentPosition>
     cee:	82 e6       	ldi	r24, 0x62	; 98
     cf0:	8a 95       	dec	r24
     cf2:	f1 f7       	brne	.-4      	; 0xcf0 <JOY_getDirection+0x6>
     cf4:	00 00       	nop
     cf6:	88 e7       	ldi	r24, 0x78	; 120
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     cf8:	5b df       	rcall	.-330    	; 0xbb0 <JOY_updatePosition>
     cfa:	89 e7       	ldi	r24, 0x79	; 121
     cfc:	47 df       	rcall	.-370    	; 0xb8c <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     cfe:	82 e6       	ldi	r24, 0x62	; 98
     d00:	8a 95       	dec	r24
     d02:	f1 f7       	brne	.-4      	; 0xd00 <JOY_getDirection+0x16>
     d04:	00 00       	nop
     d06:	89 e7       	ldi	r24, 0x79	; 121
     d08:	53 df       	rcall	.-346    	; 0xbb0 <JOY_updatePosition>
     d0a:	94 df       	rcall	.-216    	; 0xc34 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     d0c:	80 91 e2 02 	lds	r24, 0x02E2
     d10:	08 95       	ret

00000d12 <MCP2515_reset>:
	//printf("finished MCP2515_init\n");
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
     d12:	cf 93       	push	r28
     d14:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
     d16:	c9 d4       	rcall	.+2450   	; 0x16aa <SPI_activateSlave>
     d18:	80 ec       	ldi	r24, 0xC0	; 192
	SPI_send(MCP_RESET);
     d1a:	bd d4       	rcall	.+2426   	; 0x1696 <SPI_send>
     d1c:	8c ec       	ldi	r24, 0xCC	; 204
     d1e:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <MCP2515_reset+0xe>
     d24:	00 c0       	rjmp	.+0      	; 0xd26 <MCP2515_reset+0x14>
     d26:	00 00       	nop
     d28:	8c 2f       	mov	r24, r28
     d2a:	c3 d4       	rcall	.+2438   	; 0x16b2 <SPI_deactivateSlave>
	_delay_ms(1);
	SPI_deactivateSlave(slave);
     d2c:	8f ef       	ldi	r24, 0xFF	; 255
     d2e:	9f e2       	ldi	r25, 0x2F	; 47
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	f1 f7       	brne	.-4      	; 0xd30 <MCP2515_reset+0x1e>
     d34:	00 c0       	rjmp	.+0      	; 0xd36 <MCP2515_reset+0x24>
     d36:	00 00       	nop
     d38:	cf 91       	pop	r28
     d3a:	08 95       	ret

00000d3c <MCP2515_read>:
     d3c:	cf 93       	push	r28
	_delay_ms(10);
}
     d3e:	df 93       	push	r29
     d40:	c8 2f       	mov	r28, r24

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
     d42:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
     d44:	b2 d4       	rcall	.+2404   	; 0x16aa <SPI_activateSlave>
     d46:	83 e0       	ldi	r24, 0x03	; 3
	SPI_send(MCP_READ);
     d48:	a6 d4       	rcall	.+2380   	; 0x1696 <SPI_send>
     d4a:	8c ec       	ldi	r24, 0xCC	; 204
     d4c:	94 e0       	ldi	r25, 0x04	; 4
     d4e:	01 97       	sbiw	r24, 0x01	; 1
     d50:	f1 f7       	brne	.-4      	; 0xd4e <MCP2515_read+0x12>
     d52:	00 c0       	rjmp	.+0      	; 0xd54 <MCP2515_read+0x18>
     d54:	00 00       	nop
     d56:	8d 2f       	mov	r24, r29
     d58:	9e d4       	rcall	.+2364   	; 0x1696 <SPI_send>
	_delay_ms(1);
	SPI_send(address);
     d5a:	a1 d4       	rcall	.+2370   	; 0x169e <SPI_receive>
     d5c:	d8 2f       	mov	r29, r24
     d5e:	8c 2f       	mov	r24, r28
	
	uint8_t result;
	result = SPI_receive();
     d60:	a8 d4       	rcall	.+2384   	; 0x16b2 <SPI_deactivateSlave>
     d62:	8d 2f       	mov	r24, r29
     d64:	df 91       	pop	r29
	
	SPI_deactivateSlave(slave);
     d66:	cf 91       	pop	r28
     d68:	08 95       	ret

00000d6a <MCP2515_init>:
     d6a:	80 e0       	ldi	r24, 0x00	; 0
	return result;
}
     d6c:	d2 df       	rcall	.-92     	; 0xd12 <MCP2515_reset>
     d6e:	6e e0       	ldi	r22, 0x0E	; 14
     d70:	80 e0       	ldi	r24, 0x00	; 0
     d72:	e4 df       	rcall	.-56     	; 0xd3c <MCP2515_read>
uint8_t MCP2515_init()
{
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
	// Self-test
	uint8_t value;
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
     d74:	98 2f       	mov	r25, r24
     d76:	90 7e       	andi	r25, 0xE0	; 224
	//printf("CANSTAT: %#x\n", value);
	if((value & MODE_MASK) != MODE_CONFIG) 
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 38       	cpi	r25, 0x80	; 128
     d7c:	09 f4       	brne	.+2      	; 0xd80 <MCP2515_init+0x16>
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	08 95       	ret

00000d82 <MCP2515_write>:
     d82:	1f 93       	push	r17
		return 1;
	}
	//
	//printf("finished MCP2515_init\n");
	return 0;
}
     d84:	cf 93       	push	r28
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_write(SPI_SLAVES slave, uint8_t address, uint8_t data)
{
     d86:	df 93       	push	r29
     d88:	c8 2f       	mov	r28, r24
     d8a:	16 2f       	mov	r17, r22
     d8c:	d4 2f       	mov	r29, r20
	SPI_activateSlave(slave);
     d8e:	8d d4       	rcall	.+2330   	; 0x16aa <SPI_activateSlave>
     d90:	82 e0       	ldi	r24, 0x02	; 2
	SPI_send(MCP_WRITE);
     d92:	81 d4       	rcall	.+2306   	; 0x1696 <SPI_send>
     d94:	81 2f       	mov	r24, r17
     d96:	7f d4       	rcall	.+2302   	; 0x1696 <SPI_send>
	SPI_send(address);
     d98:	8d 2f       	mov	r24, r29
     d9a:	7d d4       	rcall	.+2298   	; 0x1696 <SPI_send>
     d9c:	8c 2f       	mov	r24, r28
	SPI_send(data);
     d9e:	89 d4       	rcall	.+2322   	; 0x16b2 <SPI_deactivateSlave>
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
	SPI_deactivateSlave(slave);
     da4:	1f 91       	pop	r17
     da6:	08 95       	ret

00000da8 <MCP2515_bitModify>:
     da8:	0f 93       	push	r16
}
     daa:	1f 93       	push	r17
     dac:	cf 93       	push	r28
     dae:	df 93       	push	r29
     db0:	c8 2f       	mov	r28, r24
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_bitModify(SPI_SLAVES slave, uint8_t register2change, uint8_t mask, uint8_t newValue)
{
     db2:	06 2f       	mov	r16, r22
     db4:	14 2f       	mov	r17, r20
     db6:	d2 2f       	mov	r29, r18
	SPI_activateSlave(slave);
     db8:	78 d4       	rcall	.+2288   	; 0x16aa <SPI_activateSlave>
     dba:	85 e0       	ldi	r24, 0x05	; 5
	
	SPI_send(MCP_BITMOD);
     dbc:	6c d4       	rcall	.+2264   	; 0x1696 <SPI_send>
     dbe:	80 2f       	mov	r24, r16
     dc0:	6a d4       	rcall	.+2260   	; 0x1696 <SPI_send>
	SPI_send(register2change);
     dc2:	81 2f       	mov	r24, r17
     dc4:	68 d4       	rcall	.+2256   	; 0x1696 <SPI_send>
     dc6:	8d 2f       	mov	r24, r29
	SPI_send(mask);
     dc8:	66 d4       	rcall	.+2252   	; 0x1696 <SPI_send>
     dca:	8c 2f       	mov	r24, r28
     dcc:	72 d4       	rcall	.+2276   	; 0x16b2 <SPI_deactivateSlave>
	SPI_send(newValue);
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
	
	SPI_deactivateSlave(slave);
     dd4:	0f 91       	pop	r16
     dd6:	08 95       	ret

00000dd8 <startGame>:

static int menuFrameOffset = 10; //Columns from left frame border
//******************************************************************************************

void startGame()
{
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
	OLED_clear();
     ddc:	5b d2       	rcall	.+1206   	; 0x1294 <OLED_clear>
     dde:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     de0:	70 e0       	ldi	r23, 0x00	; 0
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	39 d2       	rcall	.+1138   	; 0x125a <OLED_goto>
     de8:	8a eb       	ldi	r24, 0xBA	; 186
     dea:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("START");
     dec:	8c d2       	rcall	.+1304   	; 0x1306 <OLED_printString>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_goto(3,0);
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	31 d2       	rcall	.+1122   	; 0x125a <OLED_goto>
     df8:	ce e0       	ldi	r28, 0x0E	; 14
     dfa:	d0 e0       	ldi	r29, 0x00	; 0
     dfc:	80 ec       	ldi	r24, 0xC0	; 192
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	82 d2       	rcall	.+1284   	; 0x1306 <OLED_printString>
     e02:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     e04:	8f e7       	ldi	r24, 0x7F	; 127
     e06:	97 e0       	ldi	r25, 0x07	; 7
     e08:	21 50       	subi	r18, 0x01	; 1
     e0a:	80 40       	sbci	r24, 0x00	; 0
     e0c:	90 40       	sbci	r25, 0x00	; 0
     e0e:	e1 f7       	brne	.-8      	; 0xe08 <startGame+0x30>
     e10:	00 c0       	rjmp	.+0      	; 0xe12 <startGame+0x3a>
     e12:	00 00       	nop
     e14:	21 97       	sbiw	r28, 0x01	; 1
     e16:	20 97       	sbiw	r28, 0x00	; 0
     e18:	89 f7       	brne	.-30     	; 0xdfc <startGame+0x24>
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	70 e0       	ldi	r23, 0x00	; 0
     e1e:	85 e0       	ldi	r24, 0x05	; 5
	OLED_goto(0,0);
	OLED_printString("START");
	
	OLED_goto(3,0);
	
	for(int i = 14; i > 0; i--)
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	1b d2       	rcall	.+1078   	; 0x125a <OLED_goto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_goto(5,0);
     e24:	82 ec       	ldi	r24, 0xC2	; 194
     e26:	91 e0       	ldi	r25, 0x01	; 1
     e28:	6e d2       	rcall	.+1244   	; 0x1306 <OLED_printString>
     e2a:	2f ef       	ldi	r18, 0xFF	; 255
     e2c:	8f ef       	ldi	r24, 0xFF	; 255
     e2e:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     e30:	21 50       	subi	r18, 0x01	; 1
     e32:	80 40       	sbci	r24, 0x00	; 0
     e34:	90 40       	sbci	r25, 0x00	; 0
     e36:	e1 f7       	brne	.-8      	; 0xe30 <startGame+0x58>
     e38:	00 c0       	rjmp	.+0      	; 0xe3a <startGame+0x62>
     e3a:	00 c0       	rjmp	.+0      	; 0xe3c <startGame+0x64>
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	08 95       	ret

00000e42 <MENU_addMenuItem>:
     e42:	cf 92       	push	r12
     e44:	df 92       	push	r13
     e46:	ef 92       	push	r14
     e48:	ff 92       	push	r15
	_delay_ms(3000);
}
     e4a:	0f 93       	push	r16
     e4c:	1f 93       	push	r17
     e4e:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     e50:	df 93       	push	r29
     e52:	8c 01       	movw	r16, r24
     e54:	7b 01       	movw	r14, r22
     e56:	6a 01       	movw	r12, r20
     e58:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     e5a:	80 91 ee 02 	lds	r24, 0x02EE
     e5e:	90 91 ef 02 	lds	r25, 0x02EF
     e62:	89 2b       	or	r24, r25
     e64:	19 f0       	breq	.+6      	; 0xe6c <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     e66:	8b ec       	ldi	r24, 0xCB	; 203
     e68:	91 e0       	ldi	r25, 0x01	; 1
     e6a:	39 d6       	rcall	.+3186   	; 0x1ade <puts>
     e6c:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	af d4       	rcall	.+2398   	; 0x17d0 <malloc>
     e72:	fc 01       	movw	r30, r24
     e74:	90 93 ef 02 	sts	0x02EF, r25
     e78:	80 93 ee 02 	sts	0x02EE, r24
     e7c:	f3 82       	std	Z+3, r15	; 0x03
     e7e:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     e80:	11 83       	std	Z+1, r17	; 0x01
     e82:	00 83       	st	Z, r16
	currItem->name = name;
     e84:	cd 2b       	or	r28, r29
     e86:	39 f0       	breq	.+14     	; 0xe96 <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     e88:	d5 82       	std	Z+5, r13	; 0x05
     e8a:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     e90:	97 83       	std	Z+7, r25	; 0x07
     e92:	86 83       	std	Z+6, r24	; 0x06
     e94:	04 c0       	rjmp	.+8      	; 0xe9e <MENU_addMenuItem+0x5c>
     e96:	15 82       	std	Z+5, r1	; 0x05
     e98:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     e9a:	17 82       	std	Z+7, r1	; 0x07
     e9c:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
	}
}
     ea2:	1f 91       	pop	r17
     ea4:	0f 91       	pop	r16
     ea6:	ff 90       	pop	r15
     ea8:	ef 90       	pop	r14
     eaa:	df 90       	pop	r13
     eac:	cf 90       	pop	r12
     eae:	08 95       	ret

00000eb0 <MENU_buildMenus>:
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     eb4:	86 e1       	ldi	r24, 0x16	; 22
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	8b d4       	rcall	.+2326   	; 0x17d0 <malloc>
     eba:	ec 01       	movw	r28, r24
     ebc:	90 93 f5 02 	sts	0x02F5, r25
     ec0:	80 93 f4 02 	sts	0x02F4, r24
     ec4:	81 ee       	ldi	r24, 0xE1	; 225
	mainMenu->menuName = "MainMenu";
     ec6:	91 e0       	ldi	r25, 0x01	; 1
     ec8:	99 83       	std	Y+1, r25	; 0x01
     eca:	88 83       	st	Y, r24
     ecc:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     ece:	1c 8a       	std	Y+20, r1	; 0x14
     ed0:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	9b 83       	std	Y+3, r25	; 0x03
     ed6:	8a 83       	std	Y+2, r24	; 0x02
     ed8:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	79 d4       	rcall	.+2290   	; 0x17d0 <malloc>
     ede:	fc 01       	movw	r30, r24
     ee0:	90 93 f3 02 	sts	0x02F3, r25
     ee4:	80 93 f2 02 	sts	0x02F2, r24
     ee8:	8a ee       	ldi	r24, 0xEA	; 234
     eea:	91 e0       	ldi	r25, 0x01	; 1
	difficultyMenu->menuName = "DifficultyMenu";
     eec:	91 83       	std	Z+1, r25	; 0x01
     eee:	80 83       	st	Z, r24
     ef0:	d5 8b       	std	Z+21, r29	; 0x15
     ef2:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     ef4:	83 e0       	ldi	r24, 0x03	; 3
     ef6:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     ef8:	93 83       	std	Z+3, r25	; 0x03
     efa:	82 83       	std	Z+2, r24	; 0x02
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	50 e0       	ldi	r21, 0x00	; 0
     f04:	be 01       	movw	r22, r28
     f06:	89 ef       	ldi	r24, 0xF9	; 249
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	9b df       	rcall	.-202    	; 0xe42 <MENU_addMenuItem>
     f0c:	60 91 f4 02 	lds	r22, 0x02F4
     f10:	70 91 f5 02 	lds	r23, 0x02F5
	mainMenu->children[0] = currItem;
     f14:	e0 91 ee 02 	lds	r30, 0x02EE
     f18:	f0 91 ef 02 	lds	r31, 0x02EF
     f1c:	db 01       	movw	r26, r22
     f1e:	15 96       	adiw	r26, 0x05	; 5
     f20:	fc 93       	st	X, r31
     f22:	ee 93       	st	-X, r30
     f24:	14 97       	sbiw	r26, 0x04	; 4
     f26:	8c ee       	ldi	r24, 0xEC	; 236
     f28:	96 e0       	ldi	r25, 0x06	; 6
     f2a:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
     f2c:	82 87       	std	Z+10, r24	; 0x0a
     f2e:	40 91 f2 02 	lds	r20, 0x02F2
     f32:	50 91 f3 02 	lds	r21, 0x02F3
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     f36:	21 e0       	ldi	r18, 0x01	; 1
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	82 e0       	ldi	r24, 0x02	; 2
     f3c:	92 e0       	ldi	r25, 0x02	; 2
     f3e:	81 df       	rcall	.-254    	; 0xe42 <MENU_addMenuItem>
     f40:	60 91 f4 02 	lds	r22, 0x02F4
     f44:	70 91 f5 02 	lds	r23, 0x02F5
	mainMenu->children[1] = currItem;
     f48:	80 91 ee 02 	lds	r24, 0x02EE
     f4c:	90 91 ef 02 	lds	r25, 0x02EF
     f50:	fb 01       	movw	r30, r22
     f52:	97 83       	std	Z+7, r25	; 0x07
     f54:	86 83       	std	Z+6, r24	; 0x06
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e0       	ldi	r20, 0x00	; 0
     f5c:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     f5e:	8d e0       	ldi	r24, 0x0D	; 13
     f60:	92 e0       	ldi	r25, 0x02	; 2
     f62:	6f df       	rcall	.-290    	; 0xe42 <MENU_addMenuItem>
     f64:	60 91 f4 02 	lds	r22, 0x02F4
     f68:	70 91 f5 02 	lds	r23, 0x02F5
     f6c:	80 91 ee 02 	lds	r24, 0x02EE
	mainMenu->children[2] = currItem;
     f70:	90 91 ef 02 	lds	r25, 0x02EF
     f74:	db 01       	movw	r26, r22
     f76:	19 96       	adiw	r26, 0x09	; 9
     f78:	9c 93       	st	X, r25
     f7a:	8e 93       	st	-X, r24
     f7c:	18 97       	sbiw	r26, 0x08	; 8
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	40 e0       	ldi	r20, 0x00	; 0
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	88 e1       	ldi	r24, 0x18	; 24
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
     f88:	92 e0       	ldi	r25, 0x02	; 2
     f8a:	5b df       	rcall	.-330    	; 0xe42 <MENU_addMenuItem>
     f8c:	60 91 f4 02 	lds	r22, 0x02F4
     f90:	70 91 f5 02 	lds	r23, 0x02F5
     f94:	e0 91 ee 02 	lds	r30, 0x02EE
	mainMenu->children[3] = currItem;
     f98:	f0 91 ef 02 	lds	r31, 0x02EF
     f9c:	db 01       	movw	r26, r22
     f9e:	1b 96       	adiw	r26, 0x0b	; 11
     fa0:	fc 93       	st	X, r31
     fa2:	ee 93       	st	-X, r30
     fa4:	1a 97       	sbiw	r26, 0x0a	; 10
     fa6:	81 ed       	ldi	r24, 0xD1	; 209
     fa8:	94 e0       	ldi	r25, 0x04	; 4
     faa:	93 87       	std	Z+11, r25	; 0x0b
     fac:	82 87       	std	Z+10, r24	; 0x0a
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	50 e0       	ldi	r21, 0x00	; 0
     fb6:	82 e2       	ldi	r24, 0x22	; 34
     fb8:	92 e0       	ldi	r25, 0x02	; 2
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
     fba:	43 df       	rcall	.-378    	; 0xe42 <MENU_addMenuItem>
     fbc:	e0 91 f4 02 	lds	r30, 0x02F4
     fc0:	f0 91 f5 02 	lds	r31, 0x02F5
     fc4:	80 91 ee 02 	lds	r24, 0x02EE
     fc8:	90 91 ef 02 	lds	r25, 0x02EF
	mainMenu->children[4] = currItem;
     fcc:	95 87       	std	Z+13, r25	; 0x0d
     fce:	84 87       	std	Z+12, r24	; 0x0c
     fd0:	10 92 ef 02 	sts	0x02EF, r1
     fd4:	10 92 ee 02 	sts	0x02EE, r1
     fd8:	60 91 f2 02 	lds	r22, 0x02F2
     fdc:	70 91 f3 02 	lds	r23, 0x02F3
	
	currItem = NULL;
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
     fe6:	50 e0       	ldi	r21, 0x00	; 0
     fe8:	87 e2       	ldi	r24, 0x27	; 39
     fea:	92 e0       	ldi	r25, 0x02	; 2
     fec:	2a df       	rcall	.-428    	; 0xe42 <MENU_addMenuItem>
     fee:	60 91 f2 02 	lds	r22, 0x02F2
     ff2:	70 91 f3 02 	lds	r23, 0x02F3
     ff6:	80 91 ee 02 	lds	r24, 0x02EE
     ffa:	90 91 ef 02 	lds	r25, 0x02EF
	difficultyMenu->children[0] = currItem;
     ffe:	fb 01       	movw	r30, r22
    1000:	95 83       	std	Z+5, r25	; 0x05
    1002:	84 83       	std	Z+4, r24	; 0x04
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	40 e0       	ldi	r20, 0x00	; 0
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	8c e2       	ldi	r24, 0x2C	; 44
    100e:	92 e0       	ldi	r25, 0x02	; 2
    1010:	18 df       	rcall	.-464    	; 0xe42 <MENU_addMenuItem>
    1012:	60 91 f2 02 	lds	r22, 0x02F2
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
    1016:	70 91 f3 02 	lds	r23, 0x02F3
    101a:	80 91 ee 02 	lds	r24, 0x02EE
    101e:	90 91 ef 02 	lds	r25, 0x02EF
    1022:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
    1024:	17 96       	adiw	r26, 0x07	; 7
    1026:	9c 93       	st	X, r25
    1028:	8e 93       	st	-X, r24
    102a:	16 97       	sbiw	r26, 0x06	; 6
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e0       	ldi	r20, 0x00	; 0
    1032:	50 e0       	ldi	r21, 0x00	; 0
    1034:	83 e3       	ldi	r24, 0x33	; 51
    1036:	92 e0       	ldi	r25, 0x02	; 2
    1038:	04 df       	rcall	.-504    	; 0xe42 <MENU_addMenuItem>
    103a:	e0 91 f2 02 	lds	r30, 0x02F2
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
    103e:	f0 91 f3 02 	lds	r31, 0x02F3
    1042:	80 91 ee 02 	lds	r24, 0x02EE
    1046:	90 91 ef 02 	lds	r25, 0x02EF
    104a:	91 87       	std	Z+9, r25	; 0x09
    104c:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
    104e:	df 91       	pop	r29
    1050:	cf 91       	pop	r28
    1052:	08 95       	ret

00001054 <MENU_printMenuItem>:
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	ec 01       	movw	r28, r24
    105a:	cb 01       	movw	r24, r22
    105c:	20 97       	sbiw	r28, 0x00	; 0
    105e:	39 f0       	breq	.+14     	; 0x106e <MENU_printMenuItem+0x1a>
    1060:	6a e0       	ldi	r22, 0x0A	; 10
}
    1062:	70 e0       	ldi	r23, 0x00	; 0
    1064:	fa d0       	rcall	.+500    	; 0x125a <OLED_goto>
    1066:	88 81       	ld	r24, Y
void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
		OLED_printString(item->name);
    1068:	99 81       	ldd	r25, Y+1	; 0x01
    106a:	4d d1       	rcall	.+666    	; 0x1306 <OLED_printString>
    106c:	07 c0       	rjmp	.+14     	; 0x107c <MENU_printMenuItem+0x28>
    106e:	88 e3       	ldi	r24, 0x38	; 56
    1070:	92 e0       	ldi	r25, 0x02	; 2
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
    1072:	9f 93       	push	r25
    1074:	8f 93       	push	r24
    1076:	1d d5       	rcall	.+2618   	; 0x1ab2 <printf>
    1078:	0f 90       	pop	r0
    107a:	0f 90       	pop	r0
    107c:	df 91       	pop	r29
    107e:	cf 91       	pop	r28
    1080:	08 95       	ret

00001082 <MENU_printMenu>:
	}
}
    1082:	cf 92       	push	r12
    1084:	df 92       	push	r13
    1086:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
    1088:	ff 92       	push	r15
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	6c 01       	movw	r12, r24
    1094:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
    1096:	fe d0       	rcall	.+508    	; 0x1294 <OLED_clear>
    1098:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	8b d1       	rcall	.+790    	; 0x13b4 <OLED_moveArrow>
    109e:	1e 14       	cp	r1, r14
    10a0:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
    10a2:	7c f4       	brge	.+30     	; 0x10c2 <MENU_printMenu+0x40>
    10a4:	86 01       	movw	r16, r12
    10a6:	0c 5f       	subi	r16, 0xFC	; 252
    10a8:	1f 4f       	sbci	r17, 0xFF	; 255
    10aa:	c0 e0       	ldi	r28, 0x00	; 0
    10ac:	d0 e0       	ldi	r29, 0x00	; 0
    10ae:	be 01       	movw	r22, r28
    10b0:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
    10b2:	81 91       	ld	r24, Z+
    10b4:	91 91       	ld	r25, Z+
    10b6:	8f 01       	movw	r16, r30
    10b8:	cd df       	rcall	.-102    	; 0x1054 <MENU_printMenuItem>
    10ba:	21 96       	adiw	r28, 0x01	; 1
    10bc:	ce 15       	cp	r28, r14
    10be:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
    10c0:	b1 f7       	brne	.-20     	; 0x10ae <MENU_printMenu+0x2c>
    10c2:	d0 92 f1 02 	sts	0x02F1, r13
    10c6:	c0 92 f0 02 	sts	0x02F0, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
    10ca:	10 92 ec 02 	sts	0x02EC, r1
    10ce:	10 92 eb 02 	sts	0x02EB, r1
	
	currentPosition = 0;
    10d2:	f6 01       	movw	r30, r12
    10d4:	84 81       	ldd	r24, Z+4	; 0x04
    10d6:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
    10d8:	90 93 ef 02 	sts	0x02EF, r25
    10dc:	80 93 ee 02 	sts	0x02EE, r24
    10e0:	df 91       	pop	r29
    10e2:	cf 91       	pop	r28
    10e4:	1f 91       	pop	r17
}
    10e6:	0f 91       	pop	r16
    10e8:	ff 90       	pop	r15
    10ea:	ef 90       	pop	r14
    10ec:	df 90       	pop	r13
    10ee:	cf 90       	pop	r12
    10f0:	08 95       	ret

000010f2 <MENU_moveUp>:
    10f2:	20 91 eb 02 	lds	r18, 0x02EB
    10f6:	30 91 ec 02 	lds	r19, 0x02EC
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
    10fa:	12 16       	cp	r1, r18
    10fc:	13 06       	cpc	r1, r19
    10fe:	bc f4       	brge	.+46     	; 0x112e <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
    1100:	c9 01       	movw	r24, r18
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	90 93 ec 02 	sts	0x02EC, r25
    1108:	80 93 eb 02 	sts	0x02EB, r24
		currItem = currentMenu->children[currentPosition];
    110c:	e0 91 f0 02 	lds	r30, 0x02F0
    1110:	f0 91 f1 02 	lds	r31, 0x02F1
    1114:	2f 5f       	subi	r18, 0xFF	; 255
    1116:	3f 4f       	sbci	r19, 0xFF	; 255
    1118:	22 0f       	add	r18, r18
    111a:	33 1f       	adc	r19, r19
    111c:	e2 0f       	add	r30, r18
    111e:	f3 1f       	adc	r31, r19
    1120:	20 81       	ld	r18, Z
    1122:	31 81       	ldd	r19, Z+1	; 0x01
    1124:	30 93 ef 02 	sts	0x02EF, r19
    1128:	20 93 ee 02 	sts	0x02EE, r18
		OLED_moveArrow(currentPosition);
    112c:	43 c1       	rjmp	.+646    	; 0x13b4 <OLED_moveArrow>
    112e:	08 95       	ret

00001130 <MENU_moveDown>:
    1130:	e0 91 f0 02 	lds	r30, 0x02F0
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
    1134:	f0 91 f1 02 	lds	r31, 0x02F1
    1138:	20 91 eb 02 	lds	r18, 0x02EB
    113c:	30 91 ec 02 	lds	r19, 0x02EC
    1140:	82 81       	ldd	r24, Z+2	; 0x02
    1142:	93 81       	ldd	r25, Z+3	; 0x03
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	28 17       	cp	r18, r24
    1148:	39 07       	cpc	r19, r25
    114a:	a4 f4       	brge	.+40     	; 0x1174 <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
    114c:	c9 01       	movw	r24, r18
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	90 93 ec 02 	sts	0x02EC, r25
    1154:	80 93 eb 02 	sts	0x02EB, r24
		currItem = currentMenu->children[currentPosition];
    1158:	2d 5f       	subi	r18, 0xFD	; 253
    115a:	3f 4f       	sbci	r19, 0xFF	; 255
    115c:	22 0f       	add	r18, r18
    115e:	33 1f       	adc	r19, r19
    1160:	e2 0f       	add	r30, r18
    1162:	f3 1f       	adc	r31, r19
    1164:	20 81       	ld	r18, Z
    1166:	31 81       	ldd	r19, Z+1	; 0x01
    1168:	30 93 ef 02 	sts	0x02EF, r19
    116c:	20 93 ee 02 	sts	0x02EE, r18
		OLED_moveArrow(currentPosition);
    1170:	21 c1       	rjmp	.+578    	; 0x13b4 <OLED_moveArrow>
    1172:	08 95       	ret
    1174:	10 92 ec 02 	sts	0x02EC, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
    1178:	10 92 eb 02 	sts	0x02EB, r1
    117c:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
    117e:	95 81       	ldd	r25, Z+5	; 0x05
    1180:	90 93 ef 02 	sts	0x02EF, r25
    1184:	80 93 ee 02 	sts	0x02EE, r24
    1188:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	13 c1       	rjmp	.+550    	; 0x13b4 <OLED_moveArrow>
    118e:	08 95       	ret

00001190 <MENU_moveLeft>:
    1190:	e0 91 f0 02 	lds	r30, 0x02F0
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
    1194:	f0 91 f1 02 	lds	r31, 0x02F1
    1198:	84 89       	ldd	r24, Z+20	; 0x14
    119a:	95 89       	ldd	r25, Z+21	; 0x15
    119c:	00 97       	sbiw	r24, 0x00	; 0
    119e:	21 f0       	breq	.+8      	; 0x11a8 <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
    11a0:	fc 01       	movw	r30, r24
    11a2:	62 81       	ldd	r22, Z+2	; 0x02
    11a4:	73 81       	ldd	r23, Z+3	; 0x03
    11a6:	6d cf       	rjmp	.-294    	; 0x1082 <MENU_printMenu>
    11a8:	08 95       	ret

000011aa <MENU_reactivate>:
    11aa:	80 91 f0 02 	lds	r24, 0x02F0
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
    11ae:	90 91 f1 02 	lds	r25, 0x02F1
    11b2:	fc 01       	movw	r30, r24
    11b4:	62 81       	ldd	r22, Z+2	; 0x02
    11b6:	73 81       	ldd	r23, Z+3	; 0x03
    11b8:	64 df       	rcall	.-312    	; 0x1082 <MENU_printMenu>
    11ba:	18 c0       	rjmp	.+48     	; 0x11ec <MENU_waitForInput>
	MENU_waitForInput();
    11bc:	08 95       	ret

000011be <MENU_moveRight>:
    11be:	e0 91 ee 02 	lds	r30, 0x02EE
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
    11c2:	f0 91 ef 02 	lds	r31, 0x02EF
    11c6:	86 81       	ldd	r24, Z+6	; 0x06
    11c8:	97 81       	ldd	r25, Z+7	; 0x07
    11ca:	89 2b       	or	r24, r25
    11cc:	39 f0       	breq	.+14     	; 0x11dc <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
    11ce:	84 81       	ldd	r24, Z+4	; 0x04
    11d0:	95 81       	ldd	r25, Z+5	; 0x05
    11d2:	fc 01       	movw	r30, r24
    11d4:	62 81       	ldd	r22, Z+2	; 0x02
    11d6:	73 81       	ldd	r23, Z+3	; 0x03
    11d8:	54 cf       	rjmp	.-344    	; 0x1082 <MENU_printMenu>
    11da:	08 95       	ret
    11dc:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
    11de:	f3 85       	ldd	r31, Z+11	; 0x0b
    11e0:	e0 2d       	mov	r30, r0
    11e2:	30 97       	sbiw	r30, 0x00	; 0
    11e4:	11 f0       	breq	.+4      	; 0x11ea <MENU_moveRight+0x2c>
    11e6:	09 95       	icall
	{
		currItem->functionPtr();
    11e8:	e0 cf       	rjmp	.-64     	; 0x11aa <MENU_reactivate>
		MENU_reactivate();
    11ea:	08 95       	ret

000011ec <MENU_waitForInput>:
    11ec:	80 91 eb 02 	lds	r24, 0x02EB
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
    11f0:	90 91 ec 02 	lds	r25, 0x02EC
    11f4:	df d0       	rcall	.+446    	; 0x13b4 <OLED_moveArrow>
    11f6:	80 91 ed 02 	lds	r24, 0x02ED
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    11fa:	88 23       	and	r24, r24
    11fc:	f9 f0       	breq	.+62     	; 0x123c <MENU_waitForInput+0x50>
    11fe:	75 dd       	rcall	.-1302   	; 0xcea <JOY_getDirection>
	{
		currDir = JOY_getDirection();
    1200:	82 30       	cpi	r24, 0x02	; 2
    1202:	71 f0       	breq	.+28     	; 0x1220 <MENU_waitForInput+0x34>
		switch(currDir){
    1204:	18 f4       	brcc	.+6      	; 0x120c <MENU_waitForInput+0x20>
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	49 f0       	breq	.+18     	; 0x121c <MENU_waitForInput+0x30>
    120a:	0b c0       	rjmp	.+22     	; 0x1222 <MENU_waitForInput+0x36>
    120c:	83 30       	cpi	r24, 0x03	; 3
    120e:	21 f0       	breq	.+8      	; 0x1218 <MENU_waitForInput+0x2c>
    1210:	84 30       	cpi	r24, 0x04	; 4
    1212:	39 f4       	brne	.+14     	; 0x1222 <MENU_waitForInput+0x36>
    1214:	bd df       	rcall	.-134    	; 0x1190 <MENU_moveLeft>
    1216:	05 c0       	rjmp	.+10     	; 0x1222 <MENU_waitForInput+0x36>
			case LEFT:
			MENU_moveLeft();
    1218:	d2 df       	rcall	.-92     	; 0x11be <MENU_moveRight>
    121a:	03 c0       	rjmp	.+6      	; 0x1222 <MENU_waitForInput+0x36>
			break;
    121c:	6a df       	rcall	.-300    	; 0x10f2 <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
    121e:	01 c0       	rjmp	.+2      	; 0x1222 <MENU_waitForInput+0x36>
    1220:	87 df       	rcall	.-242    	; 0x1130 <MENU_moveDown>
			break;
    1222:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
    1224:	8f e7       	ldi	r24, 0x7F	; 127
    1226:	94 e0       	ldi	r25, 0x04	; 4
			break;
    1228:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
    122a:	80 40       	sbci	r24, 0x00	; 0
    122c:	90 40       	sbci	r25, 0x00	; 0
    122e:	e1 f7       	brne	.-8      	; 0x1228 <MENU_waitForInput+0x3c>
    1230:	00 c0       	rjmp	.+0      	; 0x1232 <MENU_waitForInput+0x46>
    1232:	00 00       	nop
    1234:	80 91 ed 02 	lds	r24, 0x02ED
    1238:	81 11       	cpse	r24, r1
    123a:	e1 cf       	rjmp	.-62     	; 0x11fe <MENU_waitForInput+0x12>
    123c:	08 95       	ret

0000123e <MENU_activate>:
    123e:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    1240:	80 93 ed 02 	sts	0x02ED, r24
    1244:	35 de       	rcall	.-918    	; 0xeb0 <MENU_buildMenus>
    1246:	80 91 f4 02 	lds	r24, 0x02F4
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
    124a:	90 91 f5 02 	lds	r25, 0x02F5
    124e:	fc 01       	movw	r30, r24
    1250:	62 81       	ldd	r22, Z+2	; 0x02
    1252:	73 81       	ldd	r23, Z+3	; 0x03
    1254:	16 df       	rcall	.-468    	; 0x1082 <MENU_printMenu>
    1256:	ca cf       	rjmp	.-108    	; 0x11ec <MENU_waitForInput>
    1258:	08 95       	ret

0000125a <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
    125a:	26 2f       	mov	r18, r22
    125c:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
    125e:	75 95       	asr	r23
    1260:	67 95       	ror	r22
    1262:	75 95       	asr	r23
    1264:	67 95       	ror	r22
    1266:	75 95       	asr	r23
    1268:	67 95       	ror	r22
    126a:	75 95       	asr	r23
    126c:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
    126e:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
    1270:	80 55       	subi	r24, 0x50	; 80
    1272:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
    1274:	e0 91 10 01 	lds	r30, 0x0110
    1278:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    127c:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
    127e:	e0 91 10 01 	lds	r30, 0x0110
    1282:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1286:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
    1288:	e0 91 10 01 	lds	r30, 0x0110
    128c:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1290:	60 83       	st	Z, r22
    1292:	08 95       	ret

00001294 <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
    1294:	1f 93       	push	r17
    1296:	cf 93       	push	r28
    1298:	df 93       	push	r29
    129a:	c1 e0       	ldi	r28, 0x01	; 1
    129c:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    12a2:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	d8 df       	rcall	.-80     	; 0x125a <OLED_goto>
    12aa:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
    12ac:	e0 91 0e 01 	lds	r30, 0x010E
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    12b0:	f0 91 0f 01 	lds	r31, 0x010F
    12b4:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12b6:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    12b8:	80 38       	cpi	r24, 0x80	; 128
    12ba:	c1 f7       	brne	.-16     	; 0x12ac <OLED_clear+0x18>
    12bc:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
    12be:	9d 2f       	mov	r25, r29
    12c0:	21 96       	adiw	r28, 0x01	; 1
    12c2:	c9 30       	cpi	r28, 0x09	; 9
    12c4:	d1 05       	cpc	r29, r1
    12c6:	71 f7       	brne	.-36     	; 0x12a4 <OLED_clear+0x10>
    12c8:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    12ca:	cf 91       	pop	r28
    12cc:	1f 91       	pop	r17
    12ce:	08 95       	ret

000012d0 <OLED_printCharacter>:
    12d0:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	22 0f       	add	r18, r18
    12d8:	33 1f       	adc	r19, r19
    12da:	22 0f       	add	r18, r18
    12dc:	33 1f       	adc	r19, r19
    12de:	22 0f       	add	r18, r18
    12e0:	33 1f       	adc	r19, r19
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	20 59       	subi	r18, 0x90	; 144
    12e8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ea:	f9 01       	movw	r30, r18
    12ec:	e8 0f       	add	r30, r24
    12ee:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
    12f0:	e4 91       	lpm	r30, Z
    12f2:	a0 91 0e 01 	lds	r26, 0x010E
    12f6:	b0 91 0f 01 	lds	r27, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12fa:	ec 93       	st	X, r30
    12fc:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
    12fe:	88 30       	cpi	r24, 0x08	; 8
    1300:	91 05       	cpc	r25, r1
    1302:	99 f7       	brne	.-26     	; 0x12ea <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
    1304:	08 95       	ret

00001306 <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
    130e:	10 e0       	ldi	r17, 0x00	; 0
    1310:	06 c0       	rjmp	.+12     	; 0x131e <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
    1312:	fe 01       	movw	r30, r28
    1314:	e8 0f       	add	r30, r24
    1316:	f9 1f       	adc	r31, r25
    1318:	80 81       	ld	r24, Z
    131a:	da df       	rcall	.-76     	; 0x12d0 <OLED_printCharacter>
    131c:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
    131e:	81 2f       	mov	r24, r17
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	fe 01       	movw	r30, r28
    1324:	01 90       	ld	r0, Z+
    1326:	00 20       	and	r0, r0
    1328:	e9 f7       	brne	.-6      	; 0x1324 <OLED_printString+0x1e>
    132a:	31 97       	sbiw	r30, 0x01	; 1
    132c:	ec 1b       	sub	r30, r28
    132e:	fd 0b       	sbc	r31, r29
    1330:	8e 17       	cp	r24, r30
    1332:	9f 07       	cpc	r25, r31
    1334:	70 f3       	brcs	.-36     	; 0x1312 <OLED_printString+0xc>
    1336:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
    1338:	cf 91       	pop	r28
    133a:	1f 91       	pop	r17
    133c:	08 95       	ret

0000133e <OLED_printArrow>:
    133e:	e0 91 0e 01 	lds	r30, 0x010E
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
    1342:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1346:	88 e1       	ldi	r24, 0x18	; 24
    1348:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    134a:	e0 91 0e 01 	lds	r30, 0x010E
    134e:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1352:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
    1354:	e0 91 0e 01 	lds	r30, 0x010E
    1358:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    135c:	9e e7       	ldi	r25, 0x7E	; 126
    135e:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
    1360:	e0 91 0e 01 	lds	r30, 0x010E
    1364:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1368:	9c e3       	ldi	r25, 0x3C	; 60
    136a:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    136c:	e0 91 0e 01 	lds	r30, 0x010E
    1370:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1374:	80 83       	st	Z, r24
    1376:	08 95       	ret

00001378 <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    1378:	1f 93       	push	r17
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	c1 e0       	ldi	r28, 0x01	; 1
    1380:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1386:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
    1388:	60 e0       	ldi	r22, 0x00	; 0
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	66 df       	rcall	.-308    	; 0x125a <OLED_goto>
    138e:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1390:	e0 91 0e 01 	lds	r30, 0x010E
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    1394:	f0 91 0f 01 	lds	r31, 0x010F
    1398:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    139a:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    139c:	85 30       	cpi	r24, 0x05	; 5
    139e:	c1 f7       	brne	.-16     	; 0x1390 <OLED_clearArrow+0x18>
    13a0:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    13a2:	9d 2f       	mov	r25, r29
    13a4:	21 96       	adiw	r28, 0x01	; 1
    13a6:	c9 30       	cpi	r28, 0x09	; 9
    13a8:	d1 05       	cpc	r29, r1
    13aa:	71 f7       	brne	.-36     	; 0x1388 <OLED_clearArrow+0x10>
    13ac:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    13ae:	cf 91       	pop	r28
    13b0:	1f 91       	pop	r17
    13b2:	08 95       	ret

000013b4 <OLED_moveArrow>:
    13b4:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    13b6:	df 93       	push	r29
    13b8:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
    13ba:	de df       	rcall	.-68     	; 0x1378 <OLED_clearArrow>
    13bc:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
    13be:	70 e0       	ldi	r23, 0x00	; 0
    13c0:	ce 01       	movw	r24, r28
    13c2:	4b df       	rcall	.-362    	; 0x125a <OLED_goto>
    13c4:	bc df       	rcall	.-136    	; 0x133e <OLED_printArrow>
    13c6:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
    13c8:	cf 91       	pop	r28
    13ca:	08 95       	ret

000013cc <OLED_setContrast>:
}
    13cc:	e0 91 10 01 	lds	r30, 0x0110
    13d0:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13d4:	91 e8       	ldi	r25, 0x81	; 129
    13d6:	90 83       	st	Z, r25
void OLED_setContrast(uint8_t contrast)
{
	// activate contrast contol
	OLED_writeByteToOLED(oled_cmd, 0x81);
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
    13d8:	e0 91 10 01 	lds	r30, 0x0110
    13dc:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13e0:	80 83       	st	Z, r24
    13e2:	08 95       	ret

000013e4 <OLED_fadeIn>:
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
}

void OLED_fadeIn(void)
{
    13e4:	cf 93       	push	r28
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    13e6:	c0 e0       	ldi	r28, 0x00	; 0
	{
		OLED_setContrast(i);
    13e8:	8c 2f       	mov	r24, r28
    13ea:	f0 df       	rcall	.-32     	; 0x13cc <OLED_setContrast>
    13ec:	83 e3       	ldi	r24, 0x33	; 51
    13ee:	93 e1       	ldi	r25, 0x13	; 19
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	f1 f7       	brne	.-4      	; 0x13f0 <OLED_fadeIn+0xc>
    13f4:	cf 5f       	subi	r28, 0xFF	; 255
}

void OLED_fadeIn(void)
{
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    13f6:	cf 3f       	cpi	r28, 0xFF	; 255
    13f8:	b9 f7       	brne	.-18     	; 0x13e8 <OLED_fadeIn+0x4>
    13fa:	cf 91       	pop	r28
	{
		OLED_setContrast(i);
		_delay_ms(4);
	}
}
    13fc:	08 95       	ret

000013fe <OLED_splashScreen>:
    13fe:	88 e4       	ldi	r24, 0x48	; 72
	}
}

void OLED_splashScreen(void)
{
	printf("run splash screen...\n");
    1400:	92 e0       	ldi	r25, 0x02	; 2
    1402:	6d d3       	rcall	.+1754   	; 0x1ade <puts>
    1404:	80 e0       	ldi	r24, 0x00	; 0
	
	OLED_setContrast(0);
    1406:	e2 df       	rcall	.-60     	; 0x13cc <OLED_setContrast>
    1408:	2f ef       	ldi	r18, 0xFF	; 255
    140a:	8f e7       	ldi	r24, 0x7F	; 127
    140c:	97 e0       	ldi	r25, 0x07	; 7
    140e:	21 50       	subi	r18, 0x01	; 1
    1410:	80 40       	sbci	r24, 0x00	; 0
    1412:	90 40       	sbci	r25, 0x00	; 0
    1414:	e1 f7       	brne	.-8      	; 0x140e <OLED_splashScreen+0x10>
    1416:	00 c0       	rjmp	.+0      	; 0x1418 <OLED_splashScreen+0x1a>
    1418:	00 00       	nop
    141a:	64 e0       	ldi	r22, 0x04	; 4
    141c:	70 e0       	ldi	r23, 0x00	; 0
	
	_delay_ms(500);
	OLED_goto(2,4);
    141e:	82 e0       	ldi	r24, 0x02	; 2
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	1b df       	rcall	.-458    	; 0x125a <OLED_goto>
    1424:	8d e5       	ldi	r24, 0x5D	; 93
    1426:	92 e0       	ldi	r25, 0x02	; 2
    1428:	6e df       	rcall	.-292    	; 0x1306 <OLED_printString>
	OLED_printString("Group 46 Soft");
    142a:	dc df       	rcall	.-72     	; 0x13e4 <OLED_fadeIn>
    142c:	2f ef       	ldi	r18, 0xFF	; 255
    142e:	8f e7       	ldi	r24, 0x7F	; 127
    1430:	97 e0       	ldi	r25, 0x07	; 7
	OLED_fadeIn();
    1432:	21 50       	subi	r18, 0x01	; 1
    1434:	80 40       	sbci	r24, 0x00	; 0
    1436:	90 40       	sbci	r25, 0x00	; 0
    1438:	e1 f7       	brne	.-8      	; 0x1432 <OLED_splashScreen+0x34>
    143a:	00 c0       	rjmp	.+0      	; 0x143c <OLED_splashScreen+0x3e>
    143c:	00 00       	nop
    143e:	2a df       	rcall	.-428    	; 0x1294 <OLED_clear>
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	c4 df       	rcall	.-120    	; 0x13cc <OLED_setContrast>
    1444:	2f ef       	ldi	r18, 0xFF	; 255
    1446:	8f ef       	ldi	r24, 0xFF	; 255
	_delay_ms(500);
	
 	OLED_clear();
    1448:	92 e0       	ldi	r25, 0x02	; 2
    144a:	21 50       	subi	r18, 0x01	; 1
 	OLED_setContrast(0);
    144c:	80 40       	sbci	r24, 0x00	; 0
    144e:	90 40       	sbci	r25, 0x00	; 0
    1450:	e1 f7       	brne	.-8      	; 0x144a <OLED_splashScreen+0x4c>
    1452:	00 c0       	rjmp	.+0      	; 0x1454 <OLED_splashScreen+0x56>
    1454:	00 c0       	rjmp	.+0      	; 0x1456 <OLED_splashScreen+0x58>
    1456:	6c e1       	ldi	r22, 0x1C	; 28
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	83 e0       	ldi	r24, 0x03	; 3
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	fd de       	rcall	.-518    	; 0x125a <OLED_goto>
    1460:	8b e6       	ldi	r24, 0x6B	; 107
    1462:	92 e0       	ldi	r25, 0x02	; 2
 	
 	_delay_ms(200);
 	OLED_goto(3,28);
    1464:	50 df       	rcall	.-352    	; 0x1306 <OLED_printString>
    1466:	68 e1       	ldi	r22, 0x18	; 24
    1468:	70 e0       	ldi	r23, 0x00	; 0
    146a:	84 e0       	ldi	r24, 0x04	; 4
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	f5 de       	rcall	.-534    	; 0x125a <OLED_goto>
 	OLED_printString("proudly");
    1470:	83 e7       	ldi	r24, 0x73	; 115
    1472:	92 e0       	ldi	r25, 0x02	; 2
    1474:	48 df       	rcall	.-368    	; 0x1306 <OLED_printString>
    1476:	b6 df       	rcall	.-148    	; 0x13e4 <OLED_fadeIn>
 	OLED_goto(4,24);	
    1478:	2f ef       	ldi	r18, 0xFF	; 255
    147a:	8f e7       	ldi	r24, 0x7F	; 127
    147c:	97 e0       	ldi	r25, 0x07	; 7
    147e:	21 50       	subi	r18, 0x01	; 1
    1480:	80 40       	sbci	r24, 0x00	; 0
    1482:	90 40       	sbci	r25, 0x00	; 0
 	OLED_printString("presents");
    1484:	e1 f7       	brne	.-8      	; 0x147e <OLED_splashScreen+0x80>
    1486:	00 c0       	rjmp	.+0      	; 0x1488 <OLED_splashScreen+0x8a>
    1488:	00 00       	nop
    148a:	04 df       	rcall	.-504    	; 0x1294 <OLED_clear>
 	OLED_fadeIn();
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	9e df       	rcall	.-196    	; 0x13cc <OLED_setContrast>
    1490:	2f ef       	ldi	r18, 0xFF	; 255
    1492:	8f ef       	ldi	r24, 0xFF	; 255
    1494:	92 e0       	ldi	r25, 0x02	; 2
    1496:	21 50       	subi	r18, 0x01	; 1
    1498:	80 40       	sbci	r24, 0x00	; 0
    149a:	90 40       	sbci	r25, 0x00	; 0
    149c:	e1 f7       	brne	.-8      	; 0x1496 <OLED_splashScreen+0x98>
    149e:	00 c0       	rjmp	.+0      	; 0x14a0 <OLED_splashScreen+0xa2>
    14a0:	00 c0       	rjmp	.+0      	; 0x14a2 <OLED_splashScreen+0xa4>
 	_delay_ms(500);
 	
 	OLED_clear();
    14a2:	6c e1       	ldi	r22, 0x1C	; 28
    14a4:	70 e0       	ldi	r23, 0x00	; 0
 	OLED_setContrast(0);
    14a6:	83 e0       	ldi	r24, 0x03	; 3
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	d7 de       	rcall	.-594    	; 0x125a <OLED_goto>
    14ac:	8c e7       	ldi	r24, 0x7C	; 124
    14ae:	92 e0       	ldi	r25, 0x02	; 2
    14b0:	2a df       	rcall	.-428    	; 0x1306 <OLED_printString>
    14b2:	98 df       	rcall	.-208    	; 0x13e4 <OLED_fadeIn>
    14b4:	2f ef       	ldi	r18, 0xFF	; 255
    14b6:	8f ef       	ldi	r24, 0xFF	; 255
    14b8:	9e e0       	ldi	r25, 0x0E	; 14
    14ba:	21 50       	subi	r18, 0x01	; 1
    14bc:	80 40       	sbci	r24, 0x00	; 0
 	
 	_delay_ms(200);
 	OLED_goto(3, 28);
    14be:	90 40       	sbci	r25, 0x00	; 0
    14c0:	e1 f7       	brne	.-8      	; 0x14ba <OLED_splashScreen+0xbc>
    14c2:	00 c0       	rjmp	.+0      	; 0x14c4 <OLED_splashScreen+0xc6>
    14c4:	00 00       	nop
    14c6:	e6 de       	rcall	.-564    	; 0x1294 <OLED_clear>
    14c8:	80 e5       	ldi	r24, 0x50	; 80
 	OLED_printString("FIFA 18");
    14ca:	80 df       	rcall	.-256    	; 0x13cc <OLED_setContrast>
    14cc:	84 e8       	ldi	r24, 0x84	; 132
    14ce:	92 e0       	ldi	r25, 0x02	; 2
    14d0:	06 c3       	rjmp	.+1548   	; 0x1ade <puts>
 	OLED_fadeIn();
    14d2:	08 95       	ret

000014d4 <OLED_init>:
    14d4:	e0 91 10 01 	lds	r30, 0x0110
    14d8:	f0 91 11 01 	lds	r31, 0x0111
    14dc:	8e ea       	ldi	r24, 0xAE	; 174
    14de:	80 83       	st	Z, r24
    14e0:	e0 91 10 01 	lds	r30, 0x0110
    14e4:	f0 91 11 01 	lds	r31, 0x0111
 	_delay_ms(1000);
	
	// clean up
	OLED_clear();
    14e8:	81 ea       	ldi	r24, 0xA1	; 161
    14ea:	80 83       	st	Z, r24
	OLED_setContrast(0x50); // back to standard contrast
    14ec:	e0 91 10 01 	lds	r30, 0x0110
    14f0:	f0 91 11 01 	lds	r31, 0x0111
	
	printf("splash screen done...\n");
    14f4:	8a ed       	ldi	r24, 0xDA	; 218
    14f6:	80 83       	st	Z, r24
    14f8:	e0 91 10 01 	lds	r30, 0x0110
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
    14fc:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1500:	82 e1       	ldi	r24, 0x12	; 18
    1502:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    1504:	e0 91 10 01 	lds	r30, 0x0110
    1508:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    150c:	88 ec       	ldi	r24, 0xC8	; 200
    150e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    1510:	e0 91 10 01 	lds	r30, 0x0110
    1514:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1518:	88 ea       	ldi	r24, 0xA8	; 168
    151a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    151c:	e0 91 10 01 	lds	r30, 0x0110
    1520:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1524:	8f e3       	ldi	r24, 0x3F	; 63
    1526:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    1528:	e0 91 10 01 	lds	r30, 0x0110
    152c:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1530:	85 ed       	ldi	r24, 0xD5	; 213
    1532:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
    1534:	e0 91 10 01 	lds	r30, 0x0110
    1538:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    153c:	80 e8       	ldi	r24, 0x80	; 128
    153e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    1540:	e0 91 10 01 	lds	r30, 0x0110
    1544:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1548:	81 e8       	ldi	r24, 0x81	; 129
    154a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    154c:	e0 91 10 01 	lds	r30, 0x0110
    1550:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1554:	80 e5       	ldi	r24, 0x50	; 80
    1556:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    1558:	e0 91 10 01 	lds	r30, 0x0110
    155c:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1560:	89 ed       	ldi	r24, 0xD9	; 217
    1562:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
    1564:	e0 91 10 01 	lds	r30, 0x0110
    1568:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    156c:	81 e2       	ldi	r24, 0x21	; 33
    156e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    1570:	e0 91 10 01 	lds	r30, 0x0110
    1574:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1578:	80 e2       	ldi	r24, 0x20	; 32
    157a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    157c:	e0 91 10 01 	lds	r30, 0x0110
    1580:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1584:	82 e0       	ldi	r24, 0x02	; 2
    1586:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    1588:	e0 91 10 01 	lds	r30, 0x0110
    158c:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1590:	8b ed       	ldi	r24, 0xDB	; 219
    1592:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    1594:	e0 91 10 01 	lds	r30, 0x0110
    1598:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    159c:	80 e3       	ldi	r24, 0x30	; 48
    159e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    15a0:	e0 91 10 01 	lds	r30, 0x0110
    15a4:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15a8:	8d ea       	ldi	r24, 0xAD	; 173
    15aa:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    15ac:	e0 91 10 01 	lds	r30, 0x0110
    15b0:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15b4:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    15b6:	e0 91 10 01 	lds	r30, 0x0110
    15ba:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15be:	84 ea       	ldi	r24, 0xA4	; 164
    15c0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    15c2:	e0 91 10 01 	lds	r30, 0x0110
    15c6:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15ca:	86 ea       	ldi	r24, 0xA6	; 166
    15cc:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    15ce:	e0 91 10 01 	lds	r30, 0x0110
    15d2:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15d6:	8f ea       	ldi	r24, 0xAF	; 175
    15d8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    15da:	5c de       	rcall	.-840    	; 0x1294 <OLED_clear>
    15dc:	10 cf       	rjmp	.-480    	; 0x13fe <OLED_splashScreen>
	OLED_splashScreen();
    15de:	08 95       	ret

000015e0 <SLI_init>:
uint8_t SLI_startup = 1; 

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    15e0:	10 92 fb 02 	sts	0x02FB, r1
	currentSliPosition.L_abs = 0;
    15e4:	10 92 fc 02 	sts	0x02FC, r1
	currentSliPosition.R_per = 0;
    15e8:	10 92 fd 02 	sts	0x02FD, r1
	currentSliPosition.L_per = 0;
    15ec:	10 92 fe 02 	sts	0x02FE, r1
    15f0:	08 95       	ret

000015f2 <SLI_requestCurrentPosition>:

//------------------------------------------------------------------------------
// This function requests an AD conversion for the specified slider.
void SLI_requestCurrentPosition(uint8_t side)
{
	if(side == 'l')
    15f2:	8c 36       	cpi	r24, 0x6C	; 108
    15f4:	39 f4       	brne	.+14     	; 0x1604 <SLI_requestCurrentPosition+0x12>
	{
		ADC_request(L_channel, adc_ext_ram);
    15f6:	60 91 06 01 	lds	r22, 0x0106
    15fa:	70 91 07 01 	lds	r23, 0x0107
    15fe:	83 e0       	ldi	r24, 0x03	; 3
    1600:	9a c0       	rjmp	.+308    	; 0x1736 <ADC_request>
    1602:	08 95       	ret
    1604:	82 37       	cpi	r24, 0x72	; 114
	}

	else if(side == 'r')
    1606:	31 f4       	brne	.+12     	; 0x1614 <SLI_requestCurrentPosition+0x22>
    1608:	60 91 06 01 	lds	r22, 0x0106
	{
		ADC_request(R_channel, adc_ext_ram);
    160c:	70 91 07 01 	lds	r23, 0x0107
    1610:	84 e0       	ldi	r24, 0x04	; 4
    1612:	91 c0       	rjmp	.+290    	; 0x1736 <ADC_request>
    1614:	08 95       	ret

00001616 <SLI_updatePosition>:
    1616:	8c 36       	cpi	r24, 0x6C	; 108
    1618:	71 f4       	brne	.+28     	; 0x1636 <SLI_updatePosition+0x20>
// received.
void SLI_updatePosition(uint8_t side)
{
	if(side == 'l')
	{
		currentSliPosition.L_abs = ADC_read(adc_ext_ram);
    161a:	80 91 06 01 	lds	r24, 0x0106
    161e:	90 91 07 01 	lds	r25, 0x0107
    1622:	ad d0       	rcall	.+346    	; 0x177e <ADC_read>
    1624:	80 93 fc 02 	sts	0x02FC, r24
    1628:	24 e6       	ldi	r18, 0x64	; 100
		currentSliPosition.L_per = currentSliPosition.L_abs * 100 / 256;
    162a:	82 9f       	mul	r24, r18
    162c:	c0 01       	movw	r24, r0
    162e:	11 24       	eor	r1, r1
    1630:	90 93 fe 02 	sts	0x02FE, r25
    1634:	08 95       	ret
    1636:	82 37       	cpi	r24, 0x72	; 114
		//printf("CurrSliPos_L: %d, CurrSliPos_R: %d\n", currentSliPosition.L_per, currentSliPosition.R_per);
	}

	else if(side == 'r')
    1638:	69 f4       	brne	.+26     	; 0x1654 <SLI_updatePosition+0x3e>
    163a:	80 91 06 01 	lds	r24, 0x0106
	{
		currentSliPosition.R_abs = ADC_read(adc_ext_ram);
    163e:	90 91 07 01 	lds	r25, 0x0107
    1642:	9d d0       	rcall	.+314    	; 0x177e <ADC_read>
    1644:	80 93 fb 02 	sts	0x02FB, r24
    1648:	24 e6       	ldi	r18, 0x64	; 100
    164a:	82 9f       	mul	r24, r18
		currentSliPosition.R_per = currentSliPosition.R_abs * 100 / 256;
    164c:	c0 01       	movw	r24, r0
    164e:	11 24       	eor	r1, r1
    1650:	90 93 fd 02 	sts	0x02FD, r25
    1654:	08 95       	ret

00001656 <SLI_getPosition>:
    1656:	82 e7       	ldi	r24, 0x72	; 114
    1658:	cc df       	rcall	.-104    	; 0x15f2 <SLI_requestCurrentPosition>
}

//
SLI_position_t SLI_getPosition()
{
	SLI_requestCurrentPosition('r');
    165a:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    165c:	8a 95       	dec	r24
    165e:	f1 f7       	brne	.-4      	; 0x165c <SLI_getPosition+0x6>
    1660:	00 00       	nop
    1662:	82 e7       	ldi	r24, 0x72	; 114
	_delay_us(60);
	SLI_updatePosition('r');
    1664:	d8 df       	rcall	.-80     	; 0x1616 <SLI_updatePosition>
    1666:	60 91 fb 02 	lds	r22, 0x02FB
	
	return currentSliPosition;
    166a:	70 91 fc 02 	lds	r23, 0x02FC
    166e:	80 91 fd 02 	lds	r24, 0x02FD
    1672:	90 91 fe 02 	lds	r25, 0x02FE
    1676:	08 95       	ret

00001678 <SPI_init>:

void SPI_init()
{
	//init external interrupt INT2 on falling edge
	#if defined(__AVR_ATmega162__)
		set_bit(GICR, INT2);
    1678:	8b b7       	in	r24, 0x3b	; 59
    167a:	80 62       	ori	r24, 0x20	; 32
    167c:	8b bf       	out	0x3b, r24	; 59
		clear_bit(EMCUCR, ISC2);
    167e:	86 b7       	in	r24, 0x36	; 54
    1680:	8e 7f       	andi	r24, 0xFE	; 254
    1682:	86 bf       	out	0x36, r24	; 54
		
		// Set _SS, MOSI and SCK output, all others input
		DDR_SPI |= (1<<SS_CAN_CONTROLLER_PIN_MODE) | (1<<MOSI_PIN) | (1<<SCK_PIN);
    1684:	87 b3       	in	r24, 0x17	; 23
    1686:	80 6b       	ori	r24, 0xB0	; 176
    1688:	87 bb       	out	0x17, r24	; 23
	#endif
	
	

	// Enable SPI, Master, set clock rate fck/4
	SPCR = (1<<SPE) | (1<<MSTR);
    168a:	80 e5       	ldi	r24, 0x50	; 80
    168c:	8d b9       	out	0x0d, r24	; 13
	
	// clock rate fck/2
	SPSR = (1<<SPI2X);
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	8e b9       	out	0x0e, r24	; 14

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORT_SPI, SS_CAN_CONTROLLER_PIN);
    1692:	c4 9a       	sbi	0x18, 4	; 24
    1694:	08 95       	ret

00001696 <SPI_send>:
}

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    1696:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    1698:	77 9b       	sbis	0x0e, 7	; 14
    169a:	fe cf       	rjmp	.-4      	; 0x1698 <SPI_send+0x2>
}
    169c:	08 95       	ret

0000169e <SPI_receive>:

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    169e:	8f ef       	ldi	r24, 0xFF	; 255
    16a0:	fa df       	rcall	.-12     	; 0x1696 <SPI_send>
    16a2:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    16a4:	fe cf       	rjmp	.-4      	; 0x16a2 <SPI_receive+0x4>
    16a6:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    16a8:	08 95       	ret

000016aa <SPI_activateSlave>:

	return data;
}
    16aa:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    16ac:	01 c0       	rjmp	.+2      	; 0x16b0 <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    16ae:	c4 98       	cbi	0x18, 4	; 24
    16b0:	08 95       	ret

000016b2 <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    16b2:	81 11       	cpse	r24, r1
    16b4:	01 c0       	rjmp	.+2      	; 0x16b8 <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    16b6:	c4 9a       	sbi	0x18, 4	; 24
    16b8:	08 95       	ret

000016ba <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    16ba:	5d 9b       	sbis	0x0b, 5	; 11
    16bc:	fe cf       	rjmp	.-4      	; 0x16ba <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    16be:	8c b9       	out	0x0c, r24	; 12
    16c0:	08 95       	ret

000016c2 <uartReceive>:
}

UART_Message_t uartReceive()
{
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29

	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    16c8:	5f 9b       	sbis	0x0b, 7	; 11
    16ca:	fe cf       	rjmp	.-4      	; 0x16c8 <uartReceive+0x6>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    16cc:	cc b1       	in	r28, 0x0c	; 12
	uartSend(10);
    16ce:	8a e0       	ldi	r24, 0x0A	; 10
    16d0:	f4 df       	rcall	.-24     	; 0x16ba <uartSend>
    16d2:	cf 3f       	cpi	r28, 0xFF	; 255
		
	if(receivedByte == 0xff)
    16d4:	99 f4       	brne	.+38     	; 0x16fc <uartReceive+0x3a>
    16d6:	5f 9b       	sbis	0x0b, 7	; 11
	{
		UART_Message_t message;
		/* Wait for data to be received */
		while ( !(UCSR0A & (1<<RXC0)) );
    16d8:	fe cf       	rjmp	.-4      	; 0x16d6 <uartReceive+0x14>
    16da:	1c b1       	in	r17, 0x0c	; 12
		/* Get and return received data from buffer */
		message.Motor = UDR0;
    16dc:	8a e0       	ldi	r24, 0x0A	; 10
		uartSend(10);
    16de:	ed df       	rcall	.-38     	; 0x16ba <uartSend>
    16e0:	5f 9b       	sbis	0x0b, 7	; 11
    16e2:	fe cf       	rjmp	.-4      	; 0x16e0 <uartReceive+0x1e>
		/* Wait for data to be received */
		while ( !(UCSR0A & (1<<RXC0)) );
    16e4:	dc b1       	in	r29, 0x0c	; 12
    16e6:	8a e0       	ldi	r24, 0x0A	; 10
		/* Get and return received data from buffer */
		message.Servo = UDR0;
    16e8:	e8 df       	rcall	.-48     	; 0x16ba <uartSend>
		uartSend(10);
    16ea:	5f 9b       	sbis	0x0b, 7	; 11
    16ec:	fe cf       	rjmp	.-4      	; 0x16ea <uartReceive+0x28>
    16ee:	cc b1       	in	r28, 0x0c	; 12
		/* Wait for data to be received */
		while ( !(UCSR0A & (1<<RXC0)) );
    16f0:	8a e0       	ldi	r24, 0x0A	; 10
    16f2:	e3 df       	rcall	.-58     	; 0x16ba <uartSend>
		/* Get and return received data from buffer */
		message.Button = UDR0;
    16f4:	61 2f       	mov	r22, r17
		uartSend(10);
    16f6:	7d 2f       	mov	r23, r29
    16f8:	8c 2f       	mov	r24, r28
    16fa:	00 c0       	rjmp	.+0      	; 0x16fc <uartReceive+0x3a>
		
		//printf("motor: %#x \t servo: %#x \t button: %#x\n", message.Motor, message.Servo, message.Button);
		
		return message;
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	1f 91       	pop	r17
    1702:	08 95       	ret

00001704 <uartInit>:
	}

}
    1704:	ef 92       	push	r14
    1706:	ff 92       	push	r15
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    170c:	bb 27       	eor	r27, r27
    170e:	a1 2f       	mov	r26, r17
    1710:	90 2f       	mov	r25, r16
    1712:	8f 2d       	mov	r24, r15
    1714:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    1716:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1718:	88 e1       	ldi	r24, 0x18	; 24
    171a:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    171c:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	#if defined(__AVR_ATmega162__)
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    171e:	8e e8       	ldi	r24, 0x8E	; 142
    1720:	80 bd       	out	0x20, r24	; 32
	
	#if defined(__AVR_ATmega2560__)
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	#endif
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    1722:	61 e6       	ldi	r22, 0x61	; 97
    1724:	7b e0       	ldi	r23, 0x0B	; 11
    1726:	8d e5       	ldi	r24, 0x5D	; 93
    1728:	9b e0       	ldi	r25, 0x0B	; 11
    172a:	79 d1       	rcall	.+754    	; 0x1a1e <fdevopen>
    172c:	1f 91       	pop	r17
    172e:	0f 91       	pop	r16
    1730:	ff 90       	pop	r15
    1732:	ef 90       	pop	r14
    1734:	08 95       	ret

00001736 <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    1736:	9b 01       	movw	r18, r22
	
	switch(channel){
    1738:	82 30       	cpi	r24, 0x02	; 2
    173a:	69 f0       	breq	.+26     	; 0x1756 <ADC_request+0x20>
    173c:	18 f4       	brcc	.+6      	; 0x1744 <ADC_request+0xe>
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	31 f0       	breq	.+12     	; 0x174e <ADC_request+0x18>
    1742:	15 c0       	rjmp	.+42     	; 0x176e <ADC_request+0x38>
    1744:	83 30       	cpi	r24, 0x03	; 3
    1746:	59 f0       	breq	.+22     	; 0x175e <ADC_request+0x28>
    1748:	84 30       	cpi	r24, 0x04	; 4
    174a:	69 f0       	breq	.+26     	; 0x1766 <ADC_request+0x30>
    174c:	10 c0       	rjmp	.+32     	; 0x176e <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    174e:	64 e0       	ldi	r22, 0x04	; 4
    1750:	c9 01       	movw	r24, r18
    1752:	11 c9       	rjmp	.-3550   	; 0x976 <saveToAddress>
    1754:	08 95       	ret
			break;
    1756:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    1758:	c9 01       	movw	r24, r18
    175a:	0d c9       	rjmp	.-3558   	; 0x976 <saveToAddress>
    175c:	08 95       	ret
    175e:	66 e0       	ldi	r22, 0x06	; 6
			break;
    1760:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    1762:	09 c9       	rjmp	.-3566   	; 0x976 <saveToAddress>
    1764:	08 95       	ret
    1766:	67 e0       	ldi	r22, 0x07	; 7
    1768:	c9 01       	movw	r24, r18
			break;
    176a:	05 c9       	rjmp	.-3574   	; 0x976 <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    176c:	08 95       	ret
    176e:	83 ec       	ldi	r24, 0xC3	; 195
    1770:	92 e0       	ldi	r25, 0x02	; 2
    1772:	9f 93       	push	r25
			break;
    1774:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    1776:	9d d1       	rcall	.+826    	; 0x1ab2 <printf>
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	08 95       	ret

0000177e <ADC_read>:
    177e:	f8 c8       	rjmp	.-3600   	; 0x970 <readFromAddress>
    1780:	08 95       	ret

00001782 <__divmodhi4>:
			break;
    1782:	97 fb       	bst	r25, 7
    1784:	07 2e       	mov	r0, r23
    1786:	16 f4       	brtc	.+4      	; 0x178c <__divmodhi4+0xa>
    1788:	00 94       	com	r0
    178a:	06 d0       	rcall	.+12     	; 0x1798 <__divmodhi4_neg1>
    178c:	77 fd       	sbrc	r23, 7
    178e:	08 d0       	rcall	.+16     	; 0x17a0 <__divmodhi4_neg2>
    1790:	0b d0       	rcall	.+22     	; 0x17a8 <__udivmodhi4>
    1792:	07 fc       	sbrc	r0, 7
    1794:	05 d0       	rcall	.+10     	; 0x17a0 <__divmodhi4_neg2>
    1796:	3e f4       	brtc	.+14     	; 0x17a6 <__divmodhi4_exit>

00001798 <__divmodhi4_neg1>:
    1798:	90 95       	com	r25
    179a:	81 95       	neg	r24
    179c:	9f 4f       	sbci	r25, 0xFF	; 255
    179e:	08 95       	ret

000017a0 <__divmodhi4_neg2>:
    17a0:	70 95       	com	r23
    17a2:	61 95       	neg	r22
    17a4:	7f 4f       	sbci	r23, 0xFF	; 255

000017a6 <__divmodhi4_exit>:
    17a6:	08 95       	ret

000017a8 <__udivmodhi4>:
    17a8:	aa 1b       	sub	r26, r26
    17aa:	bb 1b       	sub	r27, r27
    17ac:	51 e1       	ldi	r21, 0x11	; 17
    17ae:	07 c0       	rjmp	.+14     	; 0x17be <__udivmodhi4_ep>

000017b0 <__udivmodhi4_loop>:
    17b0:	aa 1f       	adc	r26, r26
    17b2:	bb 1f       	adc	r27, r27
    17b4:	a6 17       	cp	r26, r22
    17b6:	b7 07       	cpc	r27, r23
    17b8:	10 f0       	brcs	.+4      	; 0x17be <__udivmodhi4_ep>
    17ba:	a6 1b       	sub	r26, r22
    17bc:	b7 0b       	sbc	r27, r23

000017be <__udivmodhi4_ep>:
    17be:	88 1f       	adc	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	5a 95       	dec	r21
    17c4:	a9 f7       	brne	.-22     	; 0x17b0 <__udivmodhi4_loop>
    17c6:	80 95       	com	r24
    17c8:	90 95       	com	r25
    17ca:	bc 01       	movw	r22, r24
    17cc:	cd 01       	movw	r24, r26
    17ce:	08 95       	ret

000017d0 <malloc>:
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	82 30       	cpi	r24, 0x02	; 2
    17d6:	91 05       	cpc	r25, r1
    17d8:	10 f4       	brcc	.+4      	; 0x17de <malloc+0xe>
    17da:	82 e0       	ldi	r24, 0x02	; 2
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	e0 91 01 03 	lds	r30, 0x0301
    17e2:	f0 91 02 03 	lds	r31, 0x0302
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	a0 e0       	ldi	r26, 0x00	; 0
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	30 97       	sbiw	r30, 0x00	; 0
    17f0:	39 f1       	breq	.+78     	; 0x1840 <malloc+0x70>
    17f2:	40 81       	ld	r20, Z
    17f4:	51 81       	ldd	r21, Z+1	; 0x01
    17f6:	48 17       	cp	r20, r24
    17f8:	59 07       	cpc	r21, r25
    17fa:	b8 f0       	brcs	.+46     	; 0x182a <malloc+0x5a>
    17fc:	48 17       	cp	r20, r24
    17fe:	59 07       	cpc	r21, r25
    1800:	71 f4       	brne	.+28     	; 0x181e <malloc+0x4e>
    1802:	82 81       	ldd	r24, Z+2	; 0x02
    1804:	93 81       	ldd	r25, Z+3	; 0x03
    1806:	10 97       	sbiw	r26, 0x00	; 0
    1808:	29 f0       	breq	.+10     	; 0x1814 <malloc+0x44>
    180a:	13 96       	adiw	r26, 0x03	; 3
    180c:	9c 93       	st	X, r25
    180e:	8e 93       	st	-X, r24
    1810:	12 97       	sbiw	r26, 0x02	; 2
    1812:	2c c0       	rjmp	.+88     	; 0x186c <malloc+0x9c>
    1814:	90 93 02 03 	sts	0x0302, r25
    1818:	80 93 01 03 	sts	0x0301, r24
    181c:	27 c0       	rjmp	.+78     	; 0x186c <malloc+0x9c>
    181e:	21 15       	cp	r18, r1
    1820:	31 05       	cpc	r19, r1
    1822:	31 f0       	breq	.+12     	; 0x1830 <malloc+0x60>
    1824:	42 17       	cp	r20, r18
    1826:	53 07       	cpc	r21, r19
    1828:	18 f0       	brcs	.+6      	; 0x1830 <malloc+0x60>
    182a:	a9 01       	movw	r20, r18
    182c:	db 01       	movw	r26, r22
    182e:	01 c0       	rjmp	.+2      	; 0x1832 <malloc+0x62>
    1830:	ef 01       	movw	r28, r30
    1832:	9a 01       	movw	r18, r20
    1834:	bd 01       	movw	r22, r26
    1836:	df 01       	movw	r26, r30
    1838:	02 80       	ldd	r0, Z+2	; 0x02
    183a:	f3 81       	ldd	r31, Z+3	; 0x03
    183c:	e0 2d       	mov	r30, r0
    183e:	d7 cf       	rjmp	.-82     	; 0x17ee <malloc+0x1e>
    1840:	21 15       	cp	r18, r1
    1842:	31 05       	cpc	r19, r1
    1844:	f9 f0       	breq	.+62     	; 0x1884 <malloc+0xb4>
    1846:	28 1b       	sub	r18, r24
    1848:	39 0b       	sbc	r19, r25
    184a:	24 30       	cpi	r18, 0x04	; 4
    184c:	31 05       	cpc	r19, r1
    184e:	80 f4       	brcc	.+32     	; 0x1870 <malloc+0xa0>
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	9b 81       	ldd	r25, Y+3	; 0x03
    1854:	61 15       	cp	r22, r1
    1856:	71 05       	cpc	r23, r1
    1858:	21 f0       	breq	.+8      	; 0x1862 <malloc+0x92>
    185a:	fb 01       	movw	r30, r22
    185c:	93 83       	std	Z+3, r25	; 0x03
    185e:	82 83       	std	Z+2, r24	; 0x02
    1860:	04 c0       	rjmp	.+8      	; 0x186a <malloc+0x9a>
    1862:	90 93 02 03 	sts	0x0302, r25
    1866:	80 93 01 03 	sts	0x0301, r24
    186a:	fe 01       	movw	r30, r28
    186c:	32 96       	adiw	r30, 0x02	; 2
    186e:	44 c0       	rjmp	.+136    	; 0x18f8 <malloc+0x128>
    1870:	fe 01       	movw	r30, r28
    1872:	e2 0f       	add	r30, r18
    1874:	f3 1f       	adc	r31, r19
    1876:	81 93       	st	Z+, r24
    1878:	91 93       	st	Z+, r25
    187a:	22 50       	subi	r18, 0x02	; 2
    187c:	31 09       	sbc	r19, r1
    187e:	39 83       	std	Y+1, r19	; 0x01
    1880:	28 83       	st	Y, r18
    1882:	3a c0       	rjmp	.+116    	; 0x18f8 <malloc+0x128>
    1884:	20 91 ff 02 	lds	r18, 0x02FF
    1888:	30 91 00 03 	lds	r19, 0x0300
    188c:	23 2b       	or	r18, r19
    188e:	41 f4       	brne	.+16     	; 0x18a0 <malloc+0xd0>
    1890:	20 91 02 01 	lds	r18, 0x0102
    1894:	30 91 03 01 	lds	r19, 0x0103
    1898:	30 93 00 03 	sts	0x0300, r19
    189c:	20 93 ff 02 	sts	0x02FF, r18
    18a0:	20 91 00 01 	lds	r18, 0x0100
    18a4:	30 91 01 01 	lds	r19, 0x0101
    18a8:	21 15       	cp	r18, r1
    18aa:	31 05       	cpc	r19, r1
    18ac:	41 f4       	brne	.+16     	; 0x18be <malloc+0xee>
    18ae:	2d b7       	in	r18, 0x3d	; 61
    18b0:	3e b7       	in	r19, 0x3e	; 62
    18b2:	40 91 04 01 	lds	r20, 0x0104
    18b6:	50 91 05 01 	lds	r21, 0x0105
    18ba:	24 1b       	sub	r18, r20
    18bc:	35 0b       	sbc	r19, r21
    18be:	e0 91 ff 02 	lds	r30, 0x02FF
    18c2:	f0 91 00 03 	lds	r31, 0x0300
    18c6:	e2 17       	cp	r30, r18
    18c8:	f3 07       	cpc	r31, r19
    18ca:	a0 f4       	brcc	.+40     	; 0x18f4 <malloc+0x124>
    18cc:	2e 1b       	sub	r18, r30
    18ce:	3f 0b       	sbc	r19, r31
    18d0:	28 17       	cp	r18, r24
    18d2:	39 07       	cpc	r19, r25
    18d4:	78 f0       	brcs	.+30     	; 0x18f4 <malloc+0x124>
    18d6:	ac 01       	movw	r20, r24
    18d8:	4e 5f       	subi	r20, 0xFE	; 254
    18da:	5f 4f       	sbci	r21, 0xFF	; 255
    18dc:	24 17       	cp	r18, r20
    18de:	35 07       	cpc	r19, r21
    18e0:	48 f0       	brcs	.+18     	; 0x18f4 <malloc+0x124>
    18e2:	4e 0f       	add	r20, r30
    18e4:	5f 1f       	adc	r21, r31
    18e6:	50 93 00 03 	sts	0x0300, r21
    18ea:	40 93 ff 02 	sts	0x02FF, r20
    18ee:	81 93       	st	Z+, r24
    18f0:	91 93       	st	Z+, r25
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <malloc+0x128>
    18f4:	e0 e0       	ldi	r30, 0x00	; 0
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	cf 01       	movw	r24, r30
    18fa:	df 91       	pop	r29
    18fc:	cf 91       	pop	r28
    18fe:	08 95       	ret

00001900 <free>:
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	09 f4       	brne	.+2      	; 0x190a <free+0xa>
    1908:	87 c0       	rjmp	.+270    	; 0x1a18 <free+0x118>
    190a:	fc 01       	movw	r30, r24
    190c:	32 97       	sbiw	r30, 0x02	; 2
    190e:	13 82       	std	Z+3, r1	; 0x03
    1910:	12 82       	std	Z+2, r1	; 0x02
    1912:	c0 91 01 03 	lds	r28, 0x0301
    1916:	d0 91 02 03 	lds	r29, 0x0302
    191a:	20 97       	sbiw	r28, 0x00	; 0
    191c:	81 f4       	brne	.+32     	; 0x193e <free+0x3e>
    191e:	20 81       	ld	r18, Z
    1920:	31 81       	ldd	r19, Z+1	; 0x01
    1922:	28 0f       	add	r18, r24
    1924:	39 1f       	adc	r19, r25
    1926:	80 91 ff 02 	lds	r24, 0x02FF
    192a:	90 91 00 03 	lds	r25, 0x0300
    192e:	82 17       	cp	r24, r18
    1930:	93 07       	cpc	r25, r19
    1932:	79 f5       	brne	.+94     	; 0x1992 <free+0x92>
    1934:	f0 93 00 03 	sts	0x0300, r31
    1938:	e0 93 ff 02 	sts	0x02FF, r30
    193c:	6d c0       	rjmp	.+218    	; 0x1a18 <free+0x118>
    193e:	de 01       	movw	r26, r28
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	ae 17       	cp	r26, r30
    1946:	bf 07       	cpc	r27, r31
    1948:	50 f4       	brcc	.+20     	; 0x195e <free+0x5e>
    194a:	12 96       	adiw	r26, 0x02	; 2
    194c:	4d 91       	ld	r20, X+
    194e:	5c 91       	ld	r21, X
    1950:	13 97       	sbiw	r26, 0x03	; 3
    1952:	9d 01       	movw	r18, r26
    1954:	41 15       	cp	r20, r1
    1956:	51 05       	cpc	r21, r1
    1958:	09 f1       	breq	.+66     	; 0x199c <free+0x9c>
    195a:	da 01       	movw	r26, r20
    195c:	f3 cf       	rjmp	.-26     	; 0x1944 <free+0x44>
    195e:	b3 83       	std	Z+3, r27	; 0x03
    1960:	a2 83       	std	Z+2, r26	; 0x02
    1962:	40 81       	ld	r20, Z
    1964:	51 81       	ldd	r21, Z+1	; 0x01
    1966:	84 0f       	add	r24, r20
    1968:	95 1f       	adc	r25, r21
    196a:	8a 17       	cp	r24, r26
    196c:	9b 07       	cpc	r25, r27
    196e:	71 f4       	brne	.+28     	; 0x198c <free+0x8c>
    1970:	8d 91       	ld	r24, X+
    1972:	9c 91       	ld	r25, X
    1974:	11 97       	sbiw	r26, 0x01	; 1
    1976:	84 0f       	add	r24, r20
    1978:	95 1f       	adc	r25, r21
    197a:	02 96       	adiw	r24, 0x02	; 2
    197c:	91 83       	std	Z+1, r25	; 0x01
    197e:	80 83       	st	Z, r24
    1980:	12 96       	adiw	r26, 0x02	; 2
    1982:	8d 91       	ld	r24, X+
    1984:	9c 91       	ld	r25, X
    1986:	13 97       	sbiw	r26, 0x03	; 3
    1988:	93 83       	std	Z+3, r25	; 0x03
    198a:	82 83       	std	Z+2, r24	; 0x02
    198c:	21 15       	cp	r18, r1
    198e:	31 05       	cpc	r19, r1
    1990:	29 f4       	brne	.+10     	; 0x199c <free+0x9c>
    1992:	f0 93 02 03 	sts	0x0302, r31
    1996:	e0 93 01 03 	sts	0x0301, r30
    199a:	3e c0       	rjmp	.+124    	; 0x1a18 <free+0x118>
    199c:	d9 01       	movw	r26, r18
    199e:	13 96       	adiw	r26, 0x03	; 3
    19a0:	fc 93       	st	X, r31
    19a2:	ee 93       	st	-X, r30
    19a4:	12 97       	sbiw	r26, 0x02	; 2
    19a6:	4d 91       	ld	r20, X+
    19a8:	5d 91       	ld	r21, X+
    19aa:	a4 0f       	add	r26, r20
    19ac:	b5 1f       	adc	r27, r21
    19ae:	ea 17       	cp	r30, r26
    19b0:	fb 07       	cpc	r31, r27
    19b2:	79 f4       	brne	.+30     	; 0x19d2 <free+0xd2>
    19b4:	80 81       	ld	r24, Z
    19b6:	91 81       	ldd	r25, Z+1	; 0x01
    19b8:	84 0f       	add	r24, r20
    19ba:	95 1f       	adc	r25, r21
    19bc:	02 96       	adiw	r24, 0x02	; 2
    19be:	d9 01       	movw	r26, r18
    19c0:	11 96       	adiw	r26, 0x01	; 1
    19c2:	9c 93       	st	X, r25
    19c4:	8e 93       	st	-X, r24
    19c6:	82 81       	ldd	r24, Z+2	; 0x02
    19c8:	93 81       	ldd	r25, Z+3	; 0x03
    19ca:	13 96       	adiw	r26, 0x03	; 3
    19cc:	9c 93       	st	X, r25
    19ce:	8e 93       	st	-X, r24
    19d0:	12 97       	sbiw	r26, 0x02	; 2
    19d2:	e0 e0       	ldi	r30, 0x00	; 0
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	9b 81       	ldd	r25, Y+3	; 0x03
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	19 f0       	breq	.+6      	; 0x19e4 <free+0xe4>
    19de:	fe 01       	movw	r30, r28
    19e0:	ec 01       	movw	r28, r24
    19e2:	f9 cf       	rjmp	.-14     	; 0x19d6 <free+0xd6>
    19e4:	ce 01       	movw	r24, r28
    19e6:	02 96       	adiw	r24, 0x02	; 2
    19e8:	28 81       	ld	r18, Y
    19ea:	39 81       	ldd	r19, Y+1	; 0x01
    19ec:	82 0f       	add	r24, r18
    19ee:	93 1f       	adc	r25, r19
    19f0:	20 91 ff 02 	lds	r18, 0x02FF
    19f4:	30 91 00 03 	lds	r19, 0x0300
    19f8:	28 17       	cp	r18, r24
    19fa:	39 07       	cpc	r19, r25
    19fc:	69 f4       	brne	.+26     	; 0x1a18 <free+0x118>
    19fe:	30 97       	sbiw	r30, 0x00	; 0
    1a00:	29 f4       	brne	.+10     	; 0x1a0c <free+0x10c>
    1a02:	10 92 02 03 	sts	0x0302, r1
    1a06:	10 92 01 03 	sts	0x0301, r1
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <free+0x110>
    1a0c:	13 82       	std	Z+3, r1	; 0x03
    1a0e:	12 82       	std	Z+2, r1	; 0x02
    1a10:	d0 93 00 03 	sts	0x0300, r29
    1a14:	c0 93 ff 02 	sts	0x02FF, r28
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	08 95       	ret

00001a1e <fdevopen>:
    1a1e:	0f 93       	push	r16
    1a20:	1f 93       	push	r17
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	ec 01       	movw	r28, r24
    1a28:	8b 01       	movw	r16, r22
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	31 f4       	brne	.+12     	; 0x1a3a <fdevopen+0x1c>
    1a2e:	61 15       	cp	r22, r1
    1a30:	71 05       	cpc	r23, r1
    1a32:	19 f4       	brne	.+6      	; 0x1a3a <fdevopen+0x1c>
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	37 c0       	rjmp	.+110    	; 0x1aa8 <fdevopen+0x8a>
    1a3a:	6e e0       	ldi	r22, 0x0E	; 14
    1a3c:	70 e0       	ldi	r23, 0x00	; 0
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	5c d2       	rcall	.+1208   	; 0x1efc <calloc>
    1a44:	fc 01       	movw	r30, r24
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	a9 f3       	breq	.-22     	; 0x1a34 <fdevopen+0x16>
    1a4a:	80 e8       	ldi	r24, 0x80	; 128
    1a4c:	83 83       	std	Z+3, r24	; 0x03
    1a4e:	01 15       	cp	r16, r1
    1a50:	11 05       	cpc	r17, r1
    1a52:	71 f0       	breq	.+28     	; 0x1a70 <fdevopen+0x52>
    1a54:	13 87       	std	Z+11, r17	; 0x0b
    1a56:	02 87       	std	Z+10, r16	; 0x0a
    1a58:	81 e8       	ldi	r24, 0x81	; 129
    1a5a:	83 83       	std	Z+3, r24	; 0x03
    1a5c:	80 91 03 03 	lds	r24, 0x0303
    1a60:	90 91 04 03 	lds	r25, 0x0304
    1a64:	89 2b       	or	r24, r25
    1a66:	21 f4       	brne	.+8      	; 0x1a70 <fdevopen+0x52>
    1a68:	f0 93 04 03 	sts	0x0304, r31
    1a6c:	e0 93 03 03 	sts	0x0303, r30
    1a70:	20 97       	sbiw	r28, 0x00	; 0
    1a72:	c9 f0       	breq	.+50     	; 0x1aa6 <fdevopen+0x88>
    1a74:	d1 87       	std	Z+9, r29	; 0x09
    1a76:	c0 87       	std	Z+8, r28	; 0x08
    1a78:	83 81       	ldd	r24, Z+3	; 0x03
    1a7a:	82 60       	ori	r24, 0x02	; 2
    1a7c:	83 83       	std	Z+3, r24	; 0x03
    1a7e:	80 91 05 03 	lds	r24, 0x0305
    1a82:	90 91 06 03 	lds	r25, 0x0306
    1a86:	89 2b       	or	r24, r25
    1a88:	71 f4       	brne	.+28     	; 0x1aa6 <fdevopen+0x88>
    1a8a:	f0 93 06 03 	sts	0x0306, r31
    1a8e:	e0 93 05 03 	sts	0x0305, r30
    1a92:	80 91 07 03 	lds	r24, 0x0307
    1a96:	90 91 08 03 	lds	r25, 0x0308
    1a9a:	89 2b       	or	r24, r25
    1a9c:	21 f4       	brne	.+8      	; 0x1aa6 <fdevopen+0x88>
    1a9e:	f0 93 08 03 	sts	0x0308, r31
    1aa2:	e0 93 07 03 	sts	0x0307, r30
    1aa6:	cf 01       	movw	r24, r30
    1aa8:	df 91       	pop	r29
    1aaa:	cf 91       	pop	r28
    1aac:	1f 91       	pop	r17
    1aae:	0f 91       	pop	r16
    1ab0:	08 95       	ret

00001ab2 <printf>:
    1ab2:	a0 e0       	ldi	r26, 0x00	; 0
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	ee e5       	ldi	r30, 0x5E	; 94
    1ab8:	fd e0       	ldi	r31, 0x0D	; 13
    1aba:	f7 c2       	rjmp	.+1518   	; 0x20aa <__prologue_saves__+0x20>
    1abc:	fe 01       	movw	r30, r28
    1abe:	35 96       	adiw	r30, 0x05	; 5
    1ac0:	61 91       	ld	r22, Z+
    1ac2:	71 91       	ld	r23, Z+
    1ac4:	af 01       	movw	r20, r30
    1ac6:	80 91 05 03 	lds	r24, 0x0305
    1aca:	90 91 06 03 	lds	r25, 0x0306
    1ace:	53 d0       	rcall	.+166    	; 0x1b76 <vfprintf>
    1ad0:	e2 e0       	ldi	r30, 0x02	; 2
    1ad2:	07 c3       	rjmp	.+1550   	; 0x20e2 <__epilogue_restores__+0x20>

00001ad4 <putchar>:
    1ad4:	60 91 05 03 	lds	r22, 0x0305
    1ad8:	70 91 06 03 	lds	r23, 0x0306
    1adc:	46 c2       	rjmp	.+1164   	; 0x1f6a <fputc>

00001ade <puts>:
    1ade:	0f 93       	push	r16
    1ae0:	1f 93       	push	r17
    1ae2:	cf 93       	push	r28
    1ae4:	df 93       	push	r29
    1ae6:	e0 91 05 03 	lds	r30, 0x0305
    1aea:	f0 91 06 03 	lds	r31, 0x0306
    1aee:	23 81       	ldd	r18, Z+3	; 0x03
    1af0:	21 ff       	sbrs	r18, 1
    1af2:	1b c0       	rjmp	.+54     	; 0x1b2a <puts+0x4c>
    1af4:	ec 01       	movw	r28, r24
    1af6:	00 e0       	ldi	r16, 0x00	; 0
    1af8:	10 e0       	ldi	r17, 0x00	; 0
    1afa:	89 91       	ld	r24, Y+
    1afc:	60 91 05 03 	lds	r22, 0x0305
    1b00:	70 91 06 03 	lds	r23, 0x0306
    1b04:	db 01       	movw	r26, r22
    1b06:	18 96       	adiw	r26, 0x08	; 8
    1b08:	ed 91       	ld	r30, X+
    1b0a:	fc 91       	ld	r31, X
    1b0c:	19 97       	sbiw	r26, 0x09	; 9
    1b0e:	88 23       	and	r24, r24
    1b10:	31 f0       	breq	.+12     	; 0x1b1e <puts+0x40>
    1b12:	09 95       	icall
    1b14:	89 2b       	or	r24, r25
    1b16:	89 f3       	breq	.-30     	; 0x1afa <puts+0x1c>
    1b18:	0f ef       	ldi	r16, 0xFF	; 255
    1b1a:	1f ef       	ldi	r17, 0xFF	; 255
    1b1c:	ee cf       	rjmp	.-36     	; 0x1afa <puts+0x1c>
    1b1e:	8a e0       	ldi	r24, 0x0A	; 10
    1b20:	09 95       	icall
    1b22:	89 2b       	or	r24, r25
    1b24:	11 f4       	brne	.+4      	; 0x1b2a <puts+0x4c>
    1b26:	c8 01       	movw	r24, r16
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <puts+0x50>
    1b2a:	8f ef       	ldi	r24, 0xFF	; 255
    1b2c:	9f ef       	ldi	r25, 0xFF	; 255
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	1f 91       	pop	r17
    1b34:	0f 91       	pop	r16
    1b36:	08 95       	ret

00001b38 <sprintf>:
    1b38:	ae e0       	ldi	r26, 0x0E	; 14
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e1 ea       	ldi	r30, 0xA1	; 161
    1b3e:	fd e0       	ldi	r31, 0x0D	; 13
    1b40:	b2 c2       	rjmp	.+1380   	; 0x20a6 <__prologue_saves__+0x1c>
    1b42:	0d 89       	ldd	r16, Y+21	; 0x15
    1b44:	1e 89       	ldd	r17, Y+22	; 0x16
    1b46:	86 e0       	ldi	r24, 0x06	; 6
    1b48:	8c 83       	std	Y+4, r24	; 0x04
    1b4a:	1a 83       	std	Y+2, r17	; 0x02
    1b4c:	09 83       	std	Y+1, r16	; 0x01
    1b4e:	8f ef       	ldi	r24, 0xFF	; 255
    1b50:	9f e7       	ldi	r25, 0x7F	; 127
    1b52:	9e 83       	std	Y+6, r25	; 0x06
    1b54:	8d 83       	std	Y+5, r24	; 0x05
    1b56:	ae 01       	movw	r20, r28
    1b58:	47 5e       	subi	r20, 0xE7	; 231
    1b5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b5c:	6f 89       	ldd	r22, Y+23	; 0x17
    1b5e:	78 8d       	ldd	r23, Y+24	; 0x18
    1b60:	ce 01       	movw	r24, r28
    1b62:	01 96       	adiw	r24, 0x01	; 1
    1b64:	08 d0       	rcall	.+16     	; 0x1b76 <vfprintf>
    1b66:	ef 81       	ldd	r30, Y+7	; 0x07
    1b68:	f8 85       	ldd	r31, Y+8	; 0x08
    1b6a:	e0 0f       	add	r30, r16
    1b6c:	f1 1f       	adc	r31, r17
    1b6e:	10 82       	st	Z, r1
    1b70:	2e 96       	adiw	r28, 0x0e	; 14
    1b72:	e4 e0       	ldi	r30, 0x04	; 4
    1b74:	b4 c2       	rjmp	.+1384   	; 0x20de <__epilogue_restores__+0x1c>

00001b76 <vfprintf>:
    1b76:	ac e0       	ldi	r26, 0x0C	; 12
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e0 ec       	ldi	r30, 0xC0	; 192
    1b7c:	fd e0       	ldi	r31, 0x0D	; 13
    1b7e:	85 c2       	rjmp	.+1290   	; 0x208a <__prologue_saves__>
    1b80:	7c 01       	movw	r14, r24
    1b82:	6b 01       	movw	r12, r22
    1b84:	8a 01       	movw	r16, r20
    1b86:	fc 01       	movw	r30, r24
    1b88:	17 82       	std	Z+7, r1	; 0x07
    1b8a:	16 82       	std	Z+6, r1	; 0x06
    1b8c:	83 81       	ldd	r24, Z+3	; 0x03
    1b8e:	81 ff       	sbrs	r24, 1
    1b90:	b0 c1       	rjmp	.+864    	; 0x1ef2 <vfprintf+0x37c>
    1b92:	ce 01       	movw	r24, r28
    1b94:	01 96       	adiw	r24, 0x01	; 1
    1b96:	4c 01       	movw	r8, r24
    1b98:	f7 01       	movw	r30, r14
    1b9a:	93 81       	ldd	r25, Z+3	; 0x03
    1b9c:	f6 01       	movw	r30, r12
    1b9e:	93 fd       	sbrc	r25, 3
    1ba0:	85 91       	lpm	r24, Z+
    1ba2:	93 ff       	sbrs	r25, 3
    1ba4:	81 91       	ld	r24, Z+
    1ba6:	6f 01       	movw	r12, r30
    1ba8:	88 23       	and	r24, r24
    1baa:	09 f4       	brne	.+2      	; 0x1bae <vfprintf+0x38>
    1bac:	9e c1       	rjmp	.+828    	; 0x1eea <vfprintf+0x374>
    1bae:	85 32       	cpi	r24, 0x25	; 37
    1bb0:	39 f4       	brne	.+14     	; 0x1bc0 <vfprintf+0x4a>
    1bb2:	93 fd       	sbrc	r25, 3
    1bb4:	85 91       	lpm	r24, Z+
    1bb6:	93 ff       	sbrs	r25, 3
    1bb8:	81 91       	ld	r24, Z+
    1bba:	6f 01       	movw	r12, r30
    1bbc:	85 32       	cpi	r24, 0x25	; 37
    1bbe:	21 f4       	brne	.+8      	; 0x1bc8 <vfprintf+0x52>
    1bc0:	b7 01       	movw	r22, r14
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	d2 d1       	rcall	.+932    	; 0x1f6a <fputc>
    1bc6:	e8 cf       	rjmp	.-48     	; 0x1b98 <vfprintf+0x22>
    1bc8:	51 2c       	mov	r5, r1
    1bca:	31 2c       	mov	r3, r1
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	20 32       	cpi	r18, 0x20	; 32
    1bd0:	a0 f4       	brcc	.+40     	; 0x1bfa <vfprintf+0x84>
    1bd2:	8b 32       	cpi	r24, 0x2B	; 43
    1bd4:	69 f0       	breq	.+26     	; 0x1bf0 <vfprintf+0x7a>
    1bd6:	30 f4       	brcc	.+12     	; 0x1be4 <vfprintf+0x6e>
    1bd8:	80 32       	cpi	r24, 0x20	; 32
    1bda:	59 f0       	breq	.+22     	; 0x1bf2 <vfprintf+0x7c>
    1bdc:	83 32       	cpi	r24, 0x23	; 35
    1bde:	69 f4       	brne	.+26     	; 0x1bfa <vfprintf+0x84>
    1be0:	20 61       	ori	r18, 0x10	; 16
    1be2:	2c c0       	rjmp	.+88     	; 0x1c3c <vfprintf+0xc6>
    1be4:	8d 32       	cpi	r24, 0x2D	; 45
    1be6:	39 f0       	breq	.+14     	; 0x1bf6 <vfprintf+0x80>
    1be8:	80 33       	cpi	r24, 0x30	; 48
    1bea:	39 f4       	brne	.+14     	; 0x1bfa <vfprintf+0x84>
    1bec:	21 60       	ori	r18, 0x01	; 1
    1bee:	26 c0       	rjmp	.+76     	; 0x1c3c <vfprintf+0xc6>
    1bf0:	22 60       	ori	r18, 0x02	; 2
    1bf2:	24 60       	ori	r18, 0x04	; 4
    1bf4:	23 c0       	rjmp	.+70     	; 0x1c3c <vfprintf+0xc6>
    1bf6:	28 60       	ori	r18, 0x08	; 8
    1bf8:	21 c0       	rjmp	.+66     	; 0x1c3c <vfprintf+0xc6>
    1bfa:	27 fd       	sbrc	r18, 7
    1bfc:	27 c0       	rjmp	.+78     	; 0x1c4c <vfprintf+0xd6>
    1bfe:	30 ed       	ldi	r19, 0xD0	; 208
    1c00:	38 0f       	add	r19, r24
    1c02:	3a 30       	cpi	r19, 0x0A	; 10
    1c04:	78 f4       	brcc	.+30     	; 0x1c24 <vfprintf+0xae>
    1c06:	26 ff       	sbrs	r18, 6
    1c08:	06 c0       	rjmp	.+12     	; 0x1c16 <vfprintf+0xa0>
    1c0a:	fa e0       	ldi	r31, 0x0A	; 10
    1c0c:	5f 9e       	mul	r5, r31
    1c0e:	30 0d       	add	r19, r0
    1c10:	11 24       	eor	r1, r1
    1c12:	53 2e       	mov	r5, r19
    1c14:	13 c0       	rjmp	.+38     	; 0x1c3c <vfprintf+0xc6>
    1c16:	8a e0       	ldi	r24, 0x0A	; 10
    1c18:	38 9e       	mul	r3, r24
    1c1a:	30 0d       	add	r19, r0
    1c1c:	11 24       	eor	r1, r1
    1c1e:	33 2e       	mov	r3, r19
    1c20:	20 62       	ori	r18, 0x20	; 32
    1c22:	0c c0       	rjmp	.+24     	; 0x1c3c <vfprintf+0xc6>
    1c24:	8e 32       	cpi	r24, 0x2E	; 46
    1c26:	21 f4       	brne	.+8      	; 0x1c30 <vfprintf+0xba>
    1c28:	26 fd       	sbrc	r18, 6
    1c2a:	5f c1       	rjmp	.+702    	; 0x1eea <vfprintf+0x374>
    1c2c:	20 64       	ori	r18, 0x40	; 64
    1c2e:	06 c0       	rjmp	.+12     	; 0x1c3c <vfprintf+0xc6>
    1c30:	8c 36       	cpi	r24, 0x6C	; 108
    1c32:	11 f4       	brne	.+4      	; 0x1c38 <vfprintf+0xc2>
    1c34:	20 68       	ori	r18, 0x80	; 128
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <vfprintf+0xc6>
    1c38:	88 36       	cpi	r24, 0x68	; 104
    1c3a:	41 f4       	brne	.+16     	; 0x1c4c <vfprintf+0xd6>
    1c3c:	f6 01       	movw	r30, r12
    1c3e:	93 fd       	sbrc	r25, 3
    1c40:	85 91       	lpm	r24, Z+
    1c42:	93 ff       	sbrs	r25, 3
    1c44:	81 91       	ld	r24, Z+
    1c46:	6f 01       	movw	r12, r30
    1c48:	81 11       	cpse	r24, r1
    1c4a:	c1 cf       	rjmp	.-126    	; 0x1bce <vfprintf+0x58>
    1c4c:	98 2f       	mov	r25, r24
    1c4e:	9f 7d       	andi	r25, 0xDF	; 223
    1c50:	95 54       	subi	r25, 0x45	; 69
    1c52:	93 30       	cpi	r25, 0x03	; 3
    1c54:	28 f4       	brcc	.+10     	; 0x1c60 <vfprintf+0xea>
    1c56:	0c 5f       	subi	r16, 0xFC	; 252
    1c58:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5a:	ff e3       	ldi	r31, 0x3F	; 63
    1c5c:	f9 83       	std	Y+1, r31	; 0x01
    1c5e:	0d c0       	rjmp	.+26     	; 0x1c7a <vfprintf+0x104>
    1c60:	83 36       	cpi	r24, 0x63	; 99
    1c62:	31 f0       	breq	.+12     	; 0x1c70 <vfprintf+0xfa>
    1c64:	83 37       	cpi	r24, 0x73	; 115
    1c66:	71 f0       	breq	.+28     	; 0x1c84 <vfprintf+0x10e>
    1c68:	83 35       	cpi	r24, 0x53	; 83
    1c6a:	09 f0       	breq	.+2      	; 0x1c6e <vfprintf+0xf8>
    1c6c:	57 c0       	rjmp	.+174    	; 0x1d1c <vfprintf+0x1a6>
    1c6e:	21 c0       	rjmp	.+66     	; 0x1cb2 <vfprintf+0x13c>
    1c70:	f8 01       	movw	r30, r16
    1c72:	80 81       	ld	r24, Z
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	0e 5f       	subi	r16, 0xFE	; 254
    1c78:	1f 4f       	sbci	r17, 0xFF	; 255
    1c7a:	44 24       	eor	r4, r4
    1c7c:	43 94       	inc	r4
    1c7e:	51 2c       	mov	r5, r1
    1c80:	54 01       	movw	r10, r8
    1c82:	14 c0       	rjmp	.+40     	; 0x1cac <vfprintf+0x136>
    1c84:	38 01       	movw	r6, r16
    1c86:	f2 e0       	ldi	r31, 0x02	; 2
    1c88:	6f 0e       	add	r6, r31
    1c8a:	71 1c       	adc	r7, r1
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	a0 80       	ld	r10, Z
    1c90:	b1 80       	ldd	r11, Z+1	; 0x01
    1c92:	26 ff       	sbrs	r18, 6
    1c94:	03 c0       	rjmp	.+6      	; 0x1c9c <vfprintf+0x126>
    1c96:	65 2d       	mov	r22, r5
    1c98:	70 e0       	ldi	r23, 0x00	; 0
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <vfprintf+0x12a>
    1c9c:	6f ef       	ldi	r22, 0xFF	; 255
    1c9e:	7f ef       	ldi	r23, 0xFF	; 255
    1ca0:	c5 01       	movw	r24, r10
    1ca2:	2c 87       	std	Y+12, r18	; 0x0c
    1ca4:	57 d1       	rcall	.+686    	; 0x1f54 <strnlen>
    1ca6:	2c 01       	movw	r4, r24
    1ca8:	83 01       	movw	r16, r6
    1caa:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cac:	2f 77       	andi	r18, 0x7F	; 127
    1cae:	22 2e       	mov	r2, r18
    1cb0:	16 c0       	rjmp	.+44     	; 0x1cde <vfprintf+0x168>
    1cb2:	38 01       	movw	r6, r16
    1cb4:	f2 e0       	ldi	r31, 0x02	; 2
    1cb6:	6f 0e       	add	r6, r31
    1cb8:	71 1c       	adc	r7, r1
    1cba:	f8 01       	movw	r30, r16
    1cbc:	a0 80       	ld	r10, Z
    1cbe:	b1 80       	ldd	r11, Z+1	; 0x01
    1cc0:	26 ff       	sbrs	r18, 6
    1cc2:	03 c0       	rjmp	.+6      	; 0x1cca <vfprintf+0x154>
    1cc4:	65 2d       	mov	r22, r5
    1cc6:	70 e0       	ldi	r23, 0x00	; 0
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <vfprintf+0x158>
    1cca:	6f ef       	ldi	r22, 0xFF	; 255
    1ccc:	7f ef       	ldi	r23, 0xFF	; 255
    1cce:	c5 01       	movw	r24, r10
    1cd0:	2c 87       	std	Y+12, r18	; 0x0c
    1cd2:	2e d1       	rcall	.+604    	; 0x1f30 <strnlen_P>
    1cd4:	2c 01       	movw	r4, r24
    1cd6:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cd8:	20 68       	ori	r18, 0x80	; 128
    1cda:	22 2e       	mov	r2, r18
    1cdc:	83 01       	movw	r16, r6
    1cde:	23 fc       	sbrc	r2, 3
    1ce0:	19 c0       	rjmp	.+50     	; 0x1d14 <vfprintf+0x19e>
    1ce2:	83 2d       	mov	r24, r3
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	48 16       	cp	r4, r24
    1ce8:	59 06       	cpc	r5, r25
    1cea:	a0 f4       	brcc	.+40     	; 0x1d14 <vfprintf+0x19e>
    1cec:	b7 01       	movw	r22, r14
    1cee:	80 e2       	ldi	r24, 0x20	; 32
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	3b d1       	rcall	.+630    	; 0x1f6a <fputc>
    1cf4:	3a 94       	dec	r3
    1cf6:	f5 cf       	rjmp	.-22     	; 0x1ce2 <vfprintf+0x16c>
    1cf8:	f5 01       	movw	r30, r10
    1cfa:	27 fc       	sbrc	r2, 7
    1cfc:	85 91       	lpm	r24, Z+
    1cfe:	27 fe       	sbrs	r2, 7
    1d00:	81 91       	ld	r24, Z+
    1d02:	5f 01       	movw	r10, r30
    1d04:	b7 01       	movw	r22, r14
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	30 d1       	rcall	.+608    	; 0x1f6a <fputc>
    1d0a:	31 10       	cpse	r3, r1
    1d0c:	3a 94       	dec	r3
    1d0e:	f1 e0       	ldi	r31, 0x01	; 1
    1d10:	4f 1a       	sub	r4, r31
    1d12:	51 08       	sbc	r5, r1
    1d14:	41 14       	cp	r4, r1
    1d16:	51 04       	cpc	r5, r1
    1d18:	79 f7       	brne	.-34     	; 0x1cf8 <vfprintf+0x182>
    1d1a:	de c0       	rjmp	.+444    	; 0x1ed8 <vfprintf+0x362>
    1d1c:	84 36       	cpi	r24, 0x64	; 100
    1d1e:	11 f0       	breq	.+4      	; 0x1d24 <vfprintf+0x1ae>
    1d20:	89 36       	cpi	r24, 0x69	; 105
    1d22:	31 f5       	brne	.+76     	; 0x1d70 <vfprintf+0x1fa>
    1d24:	f8 01       	movw	r30, r16
    1d26:	27 ff       	sbrs	r18, 7
    1d28:	07 c0       	rjmp	.+14     	; 0x1d38 <vfprintf+0x1c2>
    1d2a:	60 81       	ld	r22, Z
    1d2c:	71 81       	ldd	r23, Z+1	; 0x01
    1d2e:	82 81       	ldd	r24, Z+2	; 0x02
    1d30:	93 81       	ldd	r25, Z+3	; 0x03
    1d32:	0c 5f       	subi	r16, 0xFC	; 252
    1d34:	1f 4f       	sbci	r17, 0xFF	; 255
    1d36:	08 c0       	rjmp	.+16     	; 0x1d48 <vfprintf+0x1d2>
    1d38:	60 81       	ld	r22, Z
    1d3a:	71 81       	ldd	r23, Z+1	; 0x01
    1d3c:	88 27       	eor	r24, r24
    1d3e:	77 fd       	sbrc	r23, 7
    1d40:	80 95       	com	r24
    1d42:	98 2f       	mov	r25, r24
    1d44:	0e 5f       	subi	r16, 0xFE	; 254
    1d46:	1f 4f       	sbci	r17, 0xFF	; 255
    1d48:	2f 76       	andi	r18, 0x6F	; 111
    1d4a:	b2 2e       	mov	r11, r18
    1d4c:	97 ff       	sbrs	r25, 7
    1d4e:	09 c0       	rjmp	.+18     	; 0x1d62 <vfprintf+0x1ec>
    1d50:	90 95       	com	r25
    1d52:	80 95       	com	r24
    1d54:	70 95       	com	r23
    1d56:	61 95       	neg	r22
    1d58:	7f 4f       	sbci	r23, 0xFF	; 255
    1d5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1d5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d5e:	20 68       	ori	r18, 0x80	; 128
    1d60:	b2 2e       	mov	r11, r18
    1d62:	2a e0       	ldi	r18, 0x0A	; 10
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	a4 01       	movw	r20, r8
    1d68:	32 d1       	rcall	.+612    	; 0x1fce <__ultoa_invert>
    1d6a:	a8 2e       	mov	r10, r24
    1d6c:	a8 18       	sub	r10, r8
    1d6e:	43 c0       	rjmp	.+134    	; 0x1df6 <vfprintf+0x280>
    1d70:	85 37       	cpi	r24, 0x75	; 117
    1d72:	29 f4       	brne	.+10     	; 0x1d7e <vfprintf+0x208>
    1d74:	2f 7e       	andi	r18, 0xEF	; 239
    1d76:	b2 2e       	mov	r11, r18
    1d78:	2a e0       	ldi	r18, 0x0A	; 10
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	25 c0       	rjmp	.+74     	; 0x1dc8 <vfprintf+0x252>
    1d7e:	f2 2f       	mov	r31, r18
    1d80:	f9 7f       	andi	r31, 0xF9	; 249
    1d82:	bf 2e       	mov	r11, r31
    1d84:	8f 36       	cpi	r24, 0x6F	; 111
    1d86:	c1 f0       	breq	.+48     	; 0x1db8 <vfprintf+0x242>
    1d88:	18 f4       	brcc	.+6      	; 0x1d90 <vfprintf+0x21a>
    1d8a:	88 35       	cpi	r24, 0x58	; 88
    1d8c:	79 f0       	breq	.+30     	; 0x1dac <vfprintf+0x236>
    1d8e:	ad c0       	rjmp	.+346    	; 0x1eea <vfprintf+0x374>
    1d90:	80 37       	cpi	r24, 0x70	; 112
    1d92:	19 f0       	breq	.+6      	; 0x1d9a <vfprintf+0x224>
    1d94:	88 37       	cpi	r24, 0x78	; 120
    1d96:	21 f0       	breq	.+8      	; 0x1da0 <vfprintf+0x22a>
    1d98:	a8 c0       	rjmp	.+336    	; 0x1eea <vfprintf+0x374>
    1d9a:	2f 2f       	mov	r18, r31
    1d9c:	20 61       	ori	r18, 0x10	; 16
    1d9e:	b2 2e       	mov	r11, r18
    1da0:	b4 fe       	sbrs	r11, 4
    1da2:	0d c0       	rjmp	.+26     	; 0x1dbe <vfprintf+0x248>
    1da4:	8b 2d       	mov	r24, r11
    1da6:	84 60       	ori	r24, 0x04	; 4
    1da8:	b8 2e       	mov	r11, r24
    1daa:	09 c0       	rjmp	.+18     	; 0x1dbe <vfprintf+0x248>
    1dac:	24 ff       	sbrs	r18, 4
    1dae:	0a c0       	rjmp	.+20     	; 0x1dc4 <vfprintf+0x24e>
    1db0:	9f 2f       	mov	r25, r31
    1db2:	96 60       	ori	r25, 0x06	; 6
    1db4:	b9 2e       	mov	r11, r25
    1db6:	06 c0       	rjmp	.+12     	; 0x1dc4 <vfprintf+0x24e>
    1db8:	28 e0       	ldi	r18, 0x08	; 8
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	05 c0       	rjmp	.+10     	; 0x1dc8 <vfprintf+0x252>
    1dbe:	20 e1       	ldi	r18, 0x10	; 16
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	02 c0       	rjmp	.+4      	; 0x1dc8 <vfprintf+0x252>
    1dc4:	20 e1       	ldi	r18, 0x10	; 16
    1dc6:	32 e0       	ldi	r19, 0x02	; 2
    1dc8:	f8 01       	movw	r30, r16
    1dca:	b7 fe       	sbrs	r11, 7
    1dcc:	07 c0       	rjmp	.+14     	; 0x1ddc <vfprintf+0x266>
    1dce:	60 81       	ld	r22, Z
    1dd0:	71 81       	ldd	r23, Z+1	; 0x01
    1dd2:	82 81       	ldd	r24, Z+2	; 0x02
    1dd4:	93 81       	ldd	r25, Z+3	; 0x03
    1dd6:	0c 5f       	subi	r16, 0xFC	; 252
    1dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dda:	06 c0       	rjmp	.+12     	; 0x1de8 <vfprintf+0x272>
    1ddc:	60 81       	ld	r22, Z
    1dde:	71 81       	ldd	r23, Z+1	; 0x01
    1de0:	80 e0       	ldi	r24, 0x00	; 0
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	0e 5f       	subi	r16, 0xFE	; 254
    1de6:	1f 4f       	sbci	r17, 0xFF	; 255
    1de8:	a4 01       	movw	r20, r8
    1dea:	f1 d0       	rcall	.+482    	; 0x1fce <__ultoa_invert>
    1dec:	a8 2e       	mov	r10, r24
    1dee:	a8 18       	sub	r10, r8
    1df0:	fb 2d       	mov	r31, r11
    1df2:	ff 77       	andi	r31, 0x7F	; 127
    1df4:	bf 2e       	mov	r11, r31
    1df6:	b6 fe       	sbrs	r11, 6
    1df8:	0b c0       	rjmp	.+22     	; 0x1e10 <vfprintf+0x29a>
    1dfa:	2b 2d       	mov	r18, r11
    1dfc:	2e 7f       	andi	r18, 0xFE	; 254
    1dfe:	a5 14       	cp	r10, r5
    1e00:	50 f4       	brcc	.+20     	; 0x1e16 <vfprintf+0x2a0>
    1e02:	b4 fe       	sbrs	r11, 4
    1e04:	0a c0       	rjmp	.+20     	; 0x1e1a <vfprintf+0x2a4>
    1e06:	b2 fc       	sbrc	r11, 2
    1e08:	08 c0       	rjmp	.+16     	; 0x1e1a <vfprintf+0x2a4>
    1e0a:	2b 2d       	mov	r18, r11
    1e0c:	2e 7e       	andi	r18, 0xEE	; 238
    1e0e:	05 c0       	rjmp	.+10     	; 0x1e1a <vfprintf+0x2a4>
    1e10:	7a 2c       	mov	r7, r10
    1e12:	2b 2d       	mov	r18, r11
    1e14:	03 c0       	rjmp	.+6      	; 0x1e1c <vfprintf+0x2a6>
    1e16:	7a 2c       	mov	r7, r10
    1e18:	01 c0       	rjmp	.+2      	; 0x1e1c <vfprintf+0x2a6>
    1e1a:	75 2c       	mov	r7, r5
    1e1c:	24 ff       	sbrs	r18, 4
    1e1e:	0d c0       	rjmp	.+26     	; 0x1e3a <vfprintf+0x2c4>
    1e20:	fe 01       	movw	r30, r28
    1e22:	ea 0d       	add	r30, r10
    1e24:	f1 1d       	adc	r31, r1
    1e26:	80 81       	ld	r24, Z
    1e28:	80 33       	cpi	r24, 0x30	; 48
    1e2a:	11 f4       	brne	.+4      	; 0x1e30 <vfprintf+0x2ba>
    1e2c:	29 7e       	andi	r18, 0xE9	; 233
    1e2e:	09 c0       	rjmp	.+18     	; 0x1e42 <vfprintf+0x2cc>
    1e30:	22 ff       	sbrs	r18, 2
    1e32:	06 c0       	rjmp	.+12     	; 0x1e40 <vfprintf+0x2ca>
    1e34:	73 94       	inc	r7
    1e36:	73 94       	inc	r7
    1e38:	04 c0       	rjmp	.+8      	; 0x1e42 <vfprintf+0x2cc>
    1e3a:	82 2f       	mov	r24, r18
    1e3c:	86 78       	andi	r24, 0x86	; 134
    1e3e:	09 f0       	breq	.+2      	; 0x1e42 <vfprintf+0x2cc>
    1e40:	73 94       	inc	r7
    1e42:	23 fd       	sbrc	r18, 3
    1e44:	12 c0       	rjmp	.+36     	; 0x1e6a <vfprintf+0x2f4>
    1e46:	20 ff       	sbrs	r18, 0
    1e48:	06 c0       	rjmp	.+12     	; 0x1e56 <vfprintf+0x2e0>
    1e4a:	5a 2c       	mov	r5, r10
    1e4c:	73 14       	cp	r7, r3
    1e4e:	18 f4       	brcc	.+6      	; 0x1e56 <vfprintf+0x2e0>
    1e50:	53 0c       	add	r5, r3
    1e52:	57 18       	sub	r5, r7
    1e54:	73 2c       	mov	r7, r3
    1e56:	73 14       	cp	r7, r3
    1e58:	60 f4       	brcc	.+24     	; 0x1e72 <vfprintf+0x2fc>
    1e5a:	b7 01       	movw	r22, r14
    1e5c:	80 e2       	ldi	r24, 0x20	; 32
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	2c 87       	std	Y+12, r18	; 0x0c
    1e62:	83 d0       	rcall	.+262    	; 0x1f6a <fputc>
    1e64:	73 94       	inc	r7
    1e66:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e68:	f6 cf       	rjmp	.-20     	; 0x1e56 <vfprintf+0x2e0>
    1e6a:	73 14       	cp	r7, r3
    1e6c:	10 f4       	brcc	.+4      	; 0x1e72 <vfprintf+0x2fc>
    1e6e:	37 18       	sub	r3, r7
    1e70:	01 c0       	rjmp	.+2      	; 0x1e74 <vfprintf+0x2fe>
    1e72:	31 2c       	mov	r3, r1
    1e74:	24 ff       	sbrs	r18, 4
    1e76:	11 c0       	rjmp	.+34     	; 0x1e9a <vfprintf+0x324>
    1e78:	b7 01       	movw	r22, r14
    1e7a:	80 e3       	ldi	r24, 0x30	; 48
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	2c 87       	std	Y+12, r18	; 0x0c
    1e80:	74 d0       	rcall	.+232    	; 0x1f6a <fputc>
    1e82:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e84:	22 ff       	sbrs	r18, 2
    1e86:	16 c0       	rjmp	.+44     	; 0x1eb4 <vfprintf+0x33e>
    1e88:	21 ff       	sbrs	r18, 1
    1e8a:	03 c0       	rjmp	.+6      	; 0x1e92 <vfprintf+0x31c>
    1e8c:	88 e5       	ldi	r24, 0x58	; 88
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	02 c0       	rjmp	.+4      	; 0x1e96 <vfprintf+0x320>
    1e92:	88 e7       	ldi	r24, 0x78	; 120
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	b7 01       	movw	r22, r14
    1e98:	0c c0       	rjmp	.+24     	; 0x1eb2 <vfprintf+0x33c>
    1e9a:	82 2f       	mov	r24, r18
    1e9c:	86 78       	andi	r24, 0x86	; 134
    1e9e:	51 f0       	breq	.+20     	; 0x1eb4 <vfprintf+0x33e>
    1ea0:	21 fd       	sbrc	r18, 1
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <vfprintf+0x332>
    1ea4:	80 e2       	ldi	r24, 0x20	; 32
    1ea6:	01 c0       	rjmp	.+2      	; 0x1eaa <vfprintf+0x334>
    1ea8:	8b e2       	ldi	r24, 0x2B	; 43
    1eaa:	27 fd       	sbrc	r18, 7
    1eac:	8d e2       	ldi	r24, 0x2D	; 45
    1eae:	b7 01       	movw	r22, r14
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	5b d0       	rcall	.+182    	; 0x1f6a <fputc>
    1eb4:	a5 14       	cp	r10, r5
    1eb6:	30 f4       	brcc	.+12     	; 0x1ec4 <vfprintf+0x34e>
    1eb8:	b7 01       	movw	r22, r14
    1eba:	80 e3       	ldi	r24, 0x30	; 48
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	55 d0       	rcall	.+170    	; 0x1f6a <fputc>
    1ec0:	5a 94       	dec	r5
    1ec2:	f8 cf       	rjmp	.-16     	; 0x1eb4 <vfprintf+0x33e>
    1ec4:	aa 94       	dec	r10
    1ec6:	f4 01       	movw	r30, r8
    1ec8:	ea 0d       	add	r30, r10
    1eca:	f1 1d       	adc	r31, r1
    1ecc:	80 81       	ld	r24, Z
    1ece:	b7 01       	movw	r22, r14
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	4b d0       	rcall	.+150    	; 0x1f6a <fputc>
    1ed4:	a1 10       	cpse	r10, r1
    1ed6:	f6 cf       	rjmp	.-20     	; 0x1ec4 <vfprintf+0x34e>
    1ed8:	33 20       	and	r3, r3
    1eda:	09 f4       	brne	.+2      	; 0x1ede <vfprintf+0x368>
    1edc:	5d ce       	rjmp	.-838    	; 0x1b98 <vfprintf+0x22>
    1ede:	b7 01       	movw	r22, r14
    1ee0:	80 e2       	ldi	r24, 0x20	; 32
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	42 d0       	rcall	.+132    	; 0x1f6a <fputc>
    1ee6:	3a 94       	dec	r3
    1ee8:	f7 cf       	rjmp	.-18     	; 0x1ed8 <vfprintf+0x362>
    1eea:	f7 01       	movw	r30, r14
    1eec:	86 81       	ldd	r24, Z+6	; 0x06
    1eee:	97 81       	ldd	r25, Z+7	; 0x07
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <vfprintf+0x380>
    1ef2:	8f ef       	ldi	r24, 0xFF	; 255
    1ef4:	9f ef       	ldi	r25, 0xFF	; 255
    1ef6:	2c 96       	adiw	r28, 0x0c	; 12
    1ef8:	e2 e1       	ldi	r30, 0x12	; 18
    1efa:	e3 c0       	rjmp	.+454    	; 0x20c2 <__epilogue_restores__>

00001efc <calloc>:
    1efc:	0f 93       	push	r16
    1efe:	1f 93       	push	r17
    1f00:	cf 93       	push	r28
    1f02:	df 93       	push	r29
    1f04:	86 9f       	mul	r24, r22
    1f06:	80 01       	movw	r16, r0
    1f08:	87 9f       	mul	r24, r23
    1f0a:	10 0d       	add	r17, r0
    1f0c:	96 9f       	mul	r25, r22
    1f0e:	10 0d       	add	r17, r0
    1f10:	11 24       	eor	r1, r1
    1f12:	c8 01       	movw	r24, r16
    1f14:	5d dc       	rcall	.-1862   	; 0x17d0 <malloc>
    1f16:	ec 01       	movw	r28, r24
    1f18:	00 97       	sbiw	r24, 0x00	; 0
    1f1a:	21 f0       	breq	.+8      	; 0x1f24 <calloc+0x28>
    1f1c:	a8 01       	movw	r20, r16
    1f1e:	60 e0       	ldi	r22, 0x00	; 0
    1f20:	70 e0       	ldi	r23, 0x00	; 0
    1f22:	11 d0       	rcall	.+34     	; 0x1f46 <memset>
    1f24:	ce 01       	movw	r24, r28
    1f26:	df 91       	pop	r29
    1f28:	cf 91       	pop	r28
    1f2a:	1f 91       	pop	r17
    1f2c:	0f 91       	pop	r16
    1f2e:	08 95       	ret

00001f30 <strnlen_P>:
    1f30:	fc 01       	movw	r30, r24
    1f32:	05 90       	lpm	r0, Z+
    1f34:	61 50       	subi	r22, 0x01	; 1
    1f36:	70 40       	sbci	r23, 0x00	; 0
    1f38:	01 10       	cpse	r0, r1
    1f3a:	d8 f7       	brcc	.-10     	; 0x1f32 <strnlen_P+0x2>
    1f3c:	80 95       	com	r24
    1f3e:	90 95       	com	r25
    1f40:	8e 0f       	add	r24, r30
    1f42:	9f 1f       	adc	r25, r31
    1f44:	08 95       	ret

00001f46 <memset>:
    1f46:	dc 01       	movw	r26, r24
    1f48:	01 c0       	rjmp	.+2      	; 0x1f4c <memset+0x6>
    1f4a:	6d 93       	st	X+, r22
    1f4c:	41 50       	subi	r20, 0x01	; 1
    1f4e:	50 40       	sbci	r21, 0x00	; 0
    1f50:	e0 f7       	brcc	.-8      	; 0x1f4a <memset+0x4>
    1f52:	08 95       	ret

00001f54 <strnlen>:
    1f54:	fc 01       	movw	r30, r24
    1f56:	61 50       	subi	r22, 0x01	; 1
    1f58:	70 40       	sbci	r23, 0x00	; 0
    1f5a:	01 90       	ld	r0, Z+
    1f5c:	01 10       	cpse	r0, r1
    1f5e:	d8 f7       	brcc	.-10     	; 0x1f56 <strnlen+0x2>
    1f60:	80 95       	com	r24
    1f62:	90 95       	com	r25
    1f64:	8e 0f       	add	r24, r30
    1f66:	9f 1f       	adc	r25, r31
    1f68:	08 95       	ret

00001f6a <fputc>:
    1f6a:	0f 93       	push	r16
    1f6c:	1f 93       	push	r17
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    1f72:	18 2f       	mov	r17, r24
    1f74:	09 2f       	mov	r16, r25
    1f76:	eb 01       	movw	r28, r22
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	81 fd       	sbrc	r24, 1
    1f7c:	03 c0       	rjmp	.+6      	; 0x1f84 <fputc+0x1a>
    1f7e:	8f ef       	ldi	r24, 0xFF	; 255
    1f80:	9f ef       	ldi	r25, 0xFF	; 255
    1f82:	20 c0       	rjmp	.+64     	; 0x1fc4 <fputc+0x5a>
    1f84:	82 ff       	sbrs	r24, 2
    1f86:	10 c0       	rjmp	.+32     	; 0x1fa8 <fputc+0x3e>
    1f88:	4e 81       	ldd	r20, Y+6	; 0x06
    1f8a:	5f 81       	ldd	r21, Y+7	; 0x07
    1f8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f8e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f90:	42 17       	cp	r20, r18
    1f92:	53 07       	cpc	r21, r19
    1f94:	7c f4       	brge	.+30     	; 0x1fb4 <fputc+0x4a>
    1f96:	e8 81       	ld	r30, Y
    1f98:	f9 81       	ldd	r31, Y+1	; 0x01
    1f9a:	9f 01       	movw	r18, r30
    1f9c:	2f 5f       	subi	r18, 0xFF	; 255
    1f9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa0:	39 83       	std	Y+1, r19	; 0x01
    1fa2:	28 83       	st	Y, r18
    1fa4:	10 83       	st	Z, r17
    1fa6:	06 c0       	rjmp	.+12     	; 0x1fb4 <fputc+0x4a>
    1fa8:	e8 85       	ldd	r30, Y+8	; 0x08
    1faa:	f9 85       	ldd	r31, Y+9	; 0x09
    1fac:	81 2f       	mov	r24, r17
    1fae:	09 95       	icall
    1fb0:	89 2b       	or	r24, r25
    1fb2:	29 f7       	brne	.-54     	; 0x1f7e <fputc+0x14>
    1fb4:	2e 81       	ldd	r18, Y+6	; 0x06
    1fb6:	3f 81       	ldd	r19, Y+7	; 0x07
    1fb8:	2f 5f       	subi	r18, 0xFF	; 255
    1fba:	3f 4f       	sbci	r19, 0xFF	; 255
    1fbc:	3f 83       	std	Y+7, r19	; 0x07
    1fbe:	2e 83       	std	Y+6, r18	; 0x06
    1fc0:	81 2f       	mov	r24, r17
    1fc2:	90 2f       	mov	r25, r16
    1fc4:	df 91       	pop	r29
    1fc6:	cf 91       	pop	r28
    1fc8:	1f 91       	pop	r17
    1fca:	0f 91       	pop	r16
    1fcc:	08 95       	ret

00001fce <__ultoa_invert>:
    1fce:	fa 01       	movw	r30, r20
    1fd0:	aa 27       	eor	r26, r26
    1fd2:	28 30       	cpi	r18, 0x08	; 8
    1fd4:	51 f1       	breq	.+84     	; 0x202a <__ultoa_invert+0x5c>
    1fd6:	20 31       	cpi	r18, 0x10	; 16
    1fd8:	81 f1       	breq	.+96     	; 0x203a <__ultoa_invert+0x6c>
    1fda:	e8 94       	clt
    1fdc:	6f 93       	push	r22
    1fde:	6e 7f       	andi	r22, 0xFE	; 254
    1fe0:	6e 5f       	subi	r22, 0xFE	; 254
    1fe2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe8:	af 4f       	sbci	r26, 0xFF	; 255
    1fea:	b1 e0       	ldi	r27, 0x01	; 1
    1fec:	3e d0       	rcall	.+124    	; 0x206a <__ultoa_invert+0x9c>
    1fee:	b4 e0       	ldi	r27, 0x04	; 4
    1ff0:	3c d0       	rcall	.+120    	; 0x206a <__ultoa_invert+0x9c>
    1ff2:	67 0f       	add	r22, r23
    1ff4:	78 1f       	adc	r23, r24
    1ff6:	89 1f       	adc	r24, r25
    1ff8:	9a 1f       	adc	r25, r26
    1ffa:	a1 1d       	adc	r26, r1
    1ffc:	68 0f       	add	r22, r24
    1ffe:	79 1f       	adc	r23, r25
    2000:	8a 1f       	adc	r24, r26
    2002:	91 1d       	adc	r25, r1
    2004:	a1 1d       	adc	r26, r1
    2006:	6a 0f       	add	r22, r26
    2008:	71 1d       	adc	r23, r1
    200a:	81 1d       	adc	r24, r1
    200c:	91 1d       	adc	r25, r1
    200e:	a1 1d       	adc	r26, r1
    2010:	20 d0       	rcall	.+64     	; 0x2052 <__ultoa_invert+0x84>
    2012:	09 f4       	brne	.+2      	; 0x2016 <__ultoa_invert+0x48>
    2014:	68 94       	set
    2016:	3f 91       	pop	r19
    2018:	2a e0       	ldi	r18, 0x0A	; 10
    201a:	26 9f       	mul	r18, r22
    201c:	11 24       	eor	r1, r1
    201e:	30 19       	sub	r19, r0
    2020:	30 5d       	subi	r19, 0xD0	; 208
    2022:	31 93       	st	Z+, r19
    2024:	de f6       	brtc	.-74     	; 0x1fdc <__ultoa_invert+0xe>
    2026:	cf 01       	movw	r24, r30
    2028:	08 95       	ret
    202a:	46 2f       	mov	r20, r22
    202c:	47 70       	andi	r20, 0x07	; 7
    202e:	40 5d       	subi	r20, 0xD0	; 208
    2030:	41 93       	st	Z+, r20
    2032:	b3 e0       	ldi	r27, 0x03	; 3
    2034:	0f d0       	rcall	.+30     	; 0x2054 <__ultoa_invert+0x86>
    2036:	c9 f7       	brne	.-14     	; 0x202a <__ultoa_invert+0x5c>
    2038:	f6 cf       	rjmp	.-20     	; 0x2026 <__ultoa_invert+0x58>
    203a:	46 2f       	mov	r20, r22
    203c:	4f 70       	andi	r20, 0x0F	; 15
    203e:	40 5d       	subi	r20, 0xD0	; 208
    2040:	4a 33       	cpi	r20, 0x3A	; 58
    2042:	18 f0       	brcs	.+6      	; 0x204a <__ultoa_invert+0x7c>
    2044:	49 5d       	subi	r20, 0xD9	; 217
    2046:	31 fd       	sbrc	r19, 1
    2048:	40 52       	subi	r20, 0x20	; 32
    204a:	41 93       	st	Z+, r20
    204c:	02 d0       	rcall	.+4      	; 0x2052 <__ultoa_invert+0x84>
    204e:	a9 f7       	brne	.-22     	; 0x203a <__ultoa_invert+0x6c>
    2050:	ea cf       	rjmp	.-44     	; 0x2026 <__ultoa_invert+0x58>
    2052:	b4 e0       	ldi	r27, 0x04	; 4
    2054:	a6 95       	lsr	r26
    2056:	97 95       	ror	r25
    2058:	87 95       	ror	r24
    205a:	77 95       	ror	r23
    205c:	67 95       	ror	r22
    205e:	ba 95       	dec	r27
    2060:	c9 f7       	brne	.-14     	; 0x2054 <__ultoa_invert+0x86>
    2062:	00 97       	sbiw	r24, 0x00	; 0
    2064:	61 05       	cpc	r22, r1
    2066:	71 05       	cpc	r23, r1
    2068:	08 95       	ret
    206a:	9b 01       	movw	r18, r22
    206c:	ac 01       	movw	r20, r24
    206e:	0a 2e       	mov	r0, r26
    2070:	06 94       	lsr	r0
    2072:	57 95       	ror	r21
    2074:	47 95       	ror	r20
    2076:	37 95       	ror	r19
    2078:	27 95       	ror	r18
    207a:	ba 95       	dec	r27
    207c:	c9 f7       	brne	.-14     	; 0x2070 <__ultoa_invert+0xa2>
    207e:	62 0f       	add	r22, r18
    2080:	73 1f       	adc	r23, r19
    2082:	84 1f       	adc	r24, r20
    2084:	95 1f       	adc	r25, r21
    2086:	a0 1d       	adc	r26, r0
    2088:	08 95       	ret

0000208a <__prologue_saves__>:
    208a:	2f 92       	push	r2
    208c:	3f 92       	push	r3
    208e:	4f 92       	push	r4
    2090:	5f 92       	push	r5
    2092:	6f 92       	push	r6
    2094:	7f 92       	push	r7
    2096:	8f 92       	push	r8
    2098:	9f 92       	push	r9
    209a:	af 92       	push	r10
    209c:	bf 92       	push	r11
    209e:	cf 92       	push	r12
    20a0:	df 92       	push	r13
    20a2:	ef 92       	push	r14
    20a4:	ff 92       	push	r15
    20a6:	0f 93       	push	r16
    20a8:	1f 93       	push	r17
    20aa:	cf 93       	push	r28
    20ac:	df 93       	push	r29
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
    20b2:	ca 1b       	sub	r28, r26
    20b4:	db 0b       	sbc	r29, r27
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	f8 94       	cli
    20ba:	de bf       	out	0x3e, r29	; 62
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	cd bf       	out	0x3d, r28	; 61
    20c0:	09 94       	ijmp

000020c2 <__epilogue_restores__>:
    20c2:	2a 88       	ldd	r2, Y+18	; 0x12
    20c4:	39 88       	ldd	r3, Y+17	; 0x11
    20c6:	48 88       	ldd	r4, Y+16	; 0x10
    20c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    20ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    20cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    20ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    20d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    20d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    20d4:	b9 84       	ldd	r11, Y+9	; 0x09
    20d6:	c8 84       	ldd	r12, Y+8	; 0x08
    20d8:	df 80       	ldd	r13, Y+7	; 0x07
    20da:	ee 80       	ldd	r14, Y+6	; 0x06
    20dc:	fd 80       	ldd	r15, Y+5	; 0x05
    20de:	0c 81       	ldd	r16, Y+4	; 0x04
    20e0:	1b 81       	ldd	r17, Y+3	; 0x03
    20e2:	aa 81       	ldd	r26, Y+2	; 0x02
    20e4:	b9 81       	ldd	r27, Y+1	; 0x01
    20e6:	ce 0f       	add	r28, r30
    20e8:	d1 1d       	adc	r29, r1
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	f8 94       	cli
    20ee:	de bf       	out	0x3e, r29	; 62
    20f0:	0f be       	out	0x3f, r0	; 63
    20f2:	cd bf       	out	0x3d, r28	; 61
    20f4:	ed 01       	movw	r28, r26
    20f6:	08 95       	ret

000020f8 <_exit>:
    20f8:	f8 94       	cli

000020fa <__stop_program>:
    20fa:	ff cf       	rjmp	.-2      	; 0x20fa <__stop_program>
