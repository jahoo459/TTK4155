
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b8  00800100  00001c72  00001d06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  008003b8  008003b8  00001fbe  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001fbe  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000300  00000000  00000000  0000201a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000377b  00000000  00000000  0000231a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011ce  00000000  00000000  00005a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001700  00000000  00000000  00006c63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000770  00000000  00000000  00008364  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e12  00000000  00000000  00008ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b72  00000000  00000000  000098e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a8  00000000  00000000  0000b458  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	fa c1       	rjmp	.+1012   	; 0x402 <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <MCP2515_bitModify+0x20>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e2 e7       	ldi	r30, 0x72	; 114
     37c:	fc e1       	ldi	r31, 0x1C	; 28
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a8 3b       	cpi	r26, 0xB8	; 184
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a8 eb       	ldi	r26, 0xB8	; 184
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a1 3e       	cpi	r26, 0xE1	; 225
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	7e d0       	rcall	.+252    	; 0x498 <main>
     39c:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 d1 03 	sts	0x03D1, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 bc 03 	sts	0x03BC, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 bb 03 	sts	0x03BB, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 b9 03 	sts	0x03B9, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_3>:
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	8f 93       	push	r24
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 b8 03 	sts	0x03B8, r24
     414:	8f 91       	pop	r24
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <init>:
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	1f e1       	ldi	r17, 0x1F	; 31
     42a:	e1 2e       	mov	r14, r17
     42c:	f1 2c       	mov	r15, r1
     42e:	00 e0       	ldi	r16, 0x00	; 0
     430:	10 e0       	ldi	r17, 0x00	; 0
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	4b e4       	ldi	r20, 0x4B	; 75
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e8       	ldi	r22, 0x80	; 128
     43c:	75 e2       	ldi	r23, 0x25	; 37
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	3f d7       	rcall	.+3710   	; 0x12c2 <uartInit>
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	25 d1       	rcall	.+586    	; 0x692 <enableXMEM>
     448:	05 d7       	rcall	.+3594   	; 0x1254 <SLI_init>
     44a:	35 d1       	rcall	.+618    	; 0x6b6 <JOY_init>
     44c:	00 d6       	rcall	.+3072   	; 0x104e <OLED_init>
     44e:	0b d7       	rcall	.+3606   	; 0x1266 <SPI_init>
     450:	8b b7       	in	r24, 0x3b	; 59
     452:	80 64       	ori	r24, 0x40	; 64
     454:	8b bf       	out	0x3b, r24	; 59
     456:	85 b7       	in	r24, 0x35	; 53
     458:	82 60       	ori	r24, 0x02	; 2
     45a:	85 bf       	out	0x35, r24	; 53
     45c:	85 b7       	in	r24, 0x35	; 53
     45e:	8e 7f       	andi	r24, 0xFE	; 254
     460:	85 bf       	out	0x35, r24	; 53
     462:	8b 98       	cbi	0x11, 3	; 17
     464:	93 9a       	sbi	0x12, 3	; 18
     466:	8b b7       	in	r24, 0x3b	; 59
     468:	80 68       	ori	r24, 0x80	; 128
     46a:	8b bf       	out	0x3b, r24	; 59
     46c:	85 b7       	in	r24, 0x35	; 53
     46e:	88 60       	ori	r24, 0x08	; 8
     470:	85 bf       	out	0x35, r24	; 53
     472:	85 b7       	in	r24, 0x35	; 53
     474:	8b 7f       	andi	r24, 0xFB	; 251
     476:	85 bf       	out	0x35, r24	; 53
     478:	32 98       	cbi	0x06, 2	; 6
     47a:	3a 98       	cbi	0x07, 2	; 7
     47c:	b8 98       	cbi	0x17, 0	; 23
     47e:	c0 98       	cbi	0x18, 0	; 24
     480:	86 b7       	in	r24, 0x36	; 54
     482:	8e 7f       	andi	r24, 0xFE	; 254
     484:	86 bf       	out	0x36, r24	; 54
     486:	8b b7       	in	r24, 0x3b	; 59
     488:	81 60       	ori	r24, 0x01	; 1
     48a:	8b bf       	out	0x3b, r24	; 59
     48c:	78 94       	sei
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	ff 90       	pop	r15
     494:	ef 90       	pop	r14
     496:	08 95       	ret

00000498 <main>:
/*
=======================MAIN FUNCTION=========================
*/

int main(void)
{
     498:	cf 93       	push	r28
     49a:	df 93       	push	r29
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     4a0:	2b 97       	sbiw	r28, 0x0b	; 11
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	de bf       	out	0x3e, r29	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	cd bf       	out	0x3d, r28	; 61
	init();
     4ac:	b9 df       	rcall	.-142    	; 0x420 <init>

	MCP2515_init();
     4ae:	fd d2       	rcall	.+1530   	; 0xaaa <MCP2515_init>
	CAN_init();
     4b0:	70 d0       	rcall	.+224    	; 0x592 <CAN_init>
	
	struct can_message message2send;
	message2send.id = 0b11111111111;
     4b2:	8f ef       	ldi	r24, 0xFF	; 255
     4b4:	97 e0       	ldi	r25, 0x07	; 7
     4b6:	9a 83       	std	Y+2, r25	; 0x02
     4b8:	89 83       	std	Y+1, r24	; 0x01
	message2send.length = 2;
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	8b 83       	std	Y+3, r24	; 0x03
	message2send.data[0] = '@';
     4be:	80 e4       	ldi	r24, 0x40	; 64
     4c0:	8c 83       	std	Y+4, r24	; 0x04
	message2send.data[1] = '~';
     4c2:	8e e7       	ldi	r24, 0x7E	; 126
     4c4:	8d 83       	std	Y+5, r24	; 0x05
	
	CAN_sendMessage(&message2send, 0);
     4c6:	60 e0       	ldi	r22, 0x00	; 0
     4c8:	ce 01       	movw	r24, r28
     4ca:	01 96       	adiw	r24, 0x01	; 1
     4cc:	79 d0       	rcall	.+242    	; 0x5c0 <CAN_sendMessage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ce:	2f ef       	ldi	r18, 0xFF	; 255
     4d0:	8f e7       	ldi	r24, 0x7F	; 127
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	21 50       	subi	r18, 0x01	; 1
     4d6:	80 40       	sbci	r24, 0x00	; 0
     4d8:	90 40       	sbci	r25, 0x00	; 0
     4da:	e1 f7       	brne	.-8      	; 0x4d4 <main+0x3c>
     4dc:	00 c0       	rjmp	.+0      	; 0x4de <main+0x46>
     4de:	00 c0       	rjmp	.+0      	; 0x4e0 <main+0x48>
	_delay_ms(100);
		
	struct can_message receivedMessage;
	
	receivedMessage.id = MCP2515_read(SS_CAN_CONTROLLER, MCP_RXB0SIDH);	
     4e0:	61 e6       	ldi	r22, 0x61	; 97
     4e2:	80 e0       	ldi	r24, 0x00	; 0
     4e4:	d1 d2       	rcall	.+1442   	; 0xa88 <MCP2515_read>
     4e6:	18 2f       	mov	r17, r24
	receivedMessage.id = receivedMessage.id<<3 | (MCP2515_read(SS_CAN_CONTROLLER, MCP_RXB0SIDL)>>5);
     4e8:	62 e6       	ldi	r22, 0x62	; 98
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	cd d2       	rcall	.+1434   	; 0xa88 <MCP2515_read>
     4ee:	28 2f       	mov	r18, r24
     4f0:	22 95       	swap	r18
     4f2:	26 95       	lsr	r18
     4f4:	27 70       	andi	r18, 0x07	; 7
	CAN_sendMessage(&message2send, 0);
	_delay_ms(100);
		
	struct can_message receivedMessage;
	
	receivedMessage.id = MCP2515_read(SS_CAN_CONTROLLER, MCP_RXB0SIDH);	
     4f6:	81 2f       	mov	r24, r17
     4f8:	90 e0       	ldi	r25, 0x00	; 0
	receivedMessage.id = receivedMessage.id<<3 | (MCP2515_read(SS_CAN_CONTROLLER, MCP_RXB0SIDL)>>5);
     4fa:	88 0f       	add	r24, r24
     4fc:	99 1f       	adc	r25, r25
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	88 0f       	add	r24, r24
     504:	99 1f       	adc	r25, r25
     506:	82 2b       	or	r24, r18
	printf("id: %d\n",receivedMessage.id);
     508:	9f 93       	push	r25
     50a:	8f 93       	push	r24
     50c:	8f e9       	ldi	r24, 0x9F	; 159
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	9f 93       	push	r25
     512:	8f 93       	push	r24
     514:	0e 94 38 0b 	call	0x1670	; 0x1670 <printf>
	
	receivedMessage.length = MCP2515_read(SS_CAN_CONTROLLER, MCP_RXB0DLC);
     518:	65 e6       	ldi	r22, 0x65	; 101
     51a:	80 e0       	ldi	r24, 0x00	; 0
     51c:	b5 d2       	rcall	.+1386   	; 0xa88 <MCP2515_read>
     51e:	18 2f       	mov	r17, r24
	printf("length: %d\n", receivedMessage.length);
     520:	1f 92       	push	r1
     522:	8f 93       	push	r24
     524:	27 ea       	ldi	r18, 0xA7	; 167
     526:	31 e0       	ldi	r19, 0x01	; 1
     528:	3f 93       	push	r19
     52a:	2f 93       	push	r18
     52c:	0e 94 38 0b 	call	0x1670	; 0x1670 <printf>
	
	uint8_t dataRegister = MCP_RXB0D0;
	for(uint8_t i = 0; i < receivedMessage.length; i++)
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	f8 94       	cli
     534:	de bf       	out	0x3e, r29	; 62
     536:	0f be       	out	0x3f, r0	; 63
     538:	cd bf       	out	0x3d, r28	; 61
     53a:	11 23       	and	r17, r17
     53c:	d9 f0       	breq	.+54     	; 0x574 <__stack+0x75>
     53e:	0f 2e       	mov	r0, r31
     540:	f6 e6       	ldi	r31, 0x66	; 102
     542:	ef 2e       	mov	r14, r31
     544:	f0 2d       	mov	r31, r0
     546:	e1 0e       	add	r14, r17
	printf("id: %d\n",receivedMessage.id);
	
	receivedMessage.length = MCP2515_read(SS_CAN_CONTROLLER, MCP_RXB0DLC);
	printf("length: %d\n", receivedMessage.length);
	
	uint8_t dataRegister = MCP_RXB0D0;
     548:	0f 2e       	mov	r0, r31
     54a:	f6 e6       	ldi	r31, 0x66	; 102
     54c:	ff 2e       	mov	r15, r31
     54e:	f0 2d       	mov	r31, r0
	for(uint8_t i = 0; i < receivedMessage.length; i++)
	{
		receivedMessage.data[i] = MCP2515_read(SS_CAN_CONTROLLER, dataRegister);
		printf("data: %c\n", receivedMessage.data[i]);
     550:	03 eb       	ldi	r16, 0xB3	; 179
     552:	11 e0       	ldi	r17, 0x01	; 1
	printf("length: %d\n", receivedMessage.length);
	
	uint8_t dataRegister = MCP_RXB0D0;
	for(uint8_t i = 0; i < receivedMessage.length; i++)
	{
		receivedMessage.data[i] = MCP2515_read(SS_CAN_CONTROLLER, dataRegister);
     554:	6f 2d       	mov	r22, r15
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	97 d2       	rcall	.+1326   	; 0xa88 <MCP2515_read>
		printf("data: %c\n", receivedMessage.data[i]);
     55a:	1f 92       	push	r1
     55c:	8f 93       	push	r24
     55e:	1f 93       	push	r17
     560:	0f 93       	push	r16
     562:	0e 94 38 0b 	call	0x1670	; 0x1670 <printf>
		dataRegister++;
     566:	f3 94       	inc	r15
	
	receivedMessage.length = MCP2515_read(SS_CAN_CONTROLLER, MCP_RXB0DLC);
	printf("length: %d\n", receivedMessage.length);
	
	uint8_t dataRegister = MCP_RXB0D0;
	for(uint8_t i = 0; i < receivedMessage.length; i++)
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	0f 90       	pop	r0
     570:	fe 10       	cpse	r15, r14
     572:	f0 cf       	rjmp	.-32     	; 0x554 <__stack+0x55>
	}
	
    while(1)
    {
		// statusMultifunctionBoard();
		JOY_getDirection();
     574:	60 d2       	rcall	.+1216   	; 0xa36 <JOY_getDirection>

		// todo: remove! will be included in the menu driver later
		if(JOYcalibFlag)
     576:	80 91 ba 03 	lds	r24, 0x03BA
     57a:	88 23       	and	r24, r24
     57c:	19 f0       	breq	.+6      	; 0x584 <__stack+0x85>
		{
			//run joystick calibration
			JOY_calibrate();
     57e:	ae d0       	rcall	.+348    	; 0x6dc <JOY_calibrate>
			JOYcalibFlag = 0;
     580:	10 92 ba 03 	sts	0x03BA, r1
		}

		if(activateMenuFlag)
     584:	80 91 b9 03 	lds	r24, 0x03B9
     588:	81 11       	cpse	r24, r1
		{
			MENU_activate();
     58a:	18 d5       	rcall	.+2608   	; 0xfbc <MENU_activate>
		}

		if(SPI_ReceivedByte)
     58c:	80 91 d2 03 	lds	r24, 0x03D2
		{
			//TODO: check which slave caused the interrupt. SS_CAN_CONTROLLER assumed now
// 			SPI_ReceivedByte = SPI_receive(SS_CAN_CONTROLLER);
// 			printf("SPI received byte: %d\n", SPI_ReceivedByte);
		}
    }
     590:	f1 cf       	rjmp	.-30     	; 0x574 <__stack+0x75>

00000592 <CAN_init>:
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	cd b7       	in	r28, 0x3d	; 61
     598:	de b7       	in	r29, 0x3e	; 62
     59a:	43 e0       	ldi	r20, 0x03	; 3
     59c:	6b e2       	ldi	r22, 0x2B	; 43
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	ac d2       	rcall	.+1368   	; 0xafc <MCP2515_write>
     5a4:	40 e6       	ldi	r20, 0x60	; 96
     5a6:	60 e6       	ldi	r22, 0x60	; 96
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	a7 d2       	rcall	.+1358   	; 0xafc <MCP2515_write>
     5ae:	20 e4       	ldi	r18, 0x40	; 64
     5b0:	40 ec       	ldi	r20, 0xC0	; 192
     5b2:	6f e0       	ldi	r22, 0x0F	; 15
     5b4:	80 e0       	ldi	r24, 0x00	; 0
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	b4 d2       	rcall	.+1384   	; 0xb22 <MCP2515_bitModify>
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <CAN_sendMessage>:
     5c0:	cf 93       	push	r28
     5c2:	df 93       	push	r29
     5c4:	cd b7       	in	r28, 0x3d	; 61
     5c6:	de b7       	in	r29, 0x3e	; 62
     5c8:	27 97       	sbiw	r28, 0x07	; 7
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	f8 94       	cli
     5ce:	de bf       	out	0x3e, r29	; 62
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	cd bf       	out	0x3d, r28	; 61
     5d4:	9e 83       	std	Y+6, r25	; 0x06
     5d6:	8d 83       	std	Y+5, r24	; 0x05
     5d8:	6f 83       	std	Y+7, r22	; 0x07
     5da:	8f 81       	ldd	r24, Y+7	; 0x07
     5dc:	88 2f       	mov	r24, r24
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	00 97       	sbiw	r24, 0x00	; 0
     5e2:	09 f0       	breq	.+2      	; 0x5e6 <CAN_sendMessage+0x26>
     5e4:	4d c0       	rjmp	.+154    	; 0x680 <CAN_sendMessage+0xc0>
     5e6:	8d 81       	ldd	r24, Y+5	; 0x05
     5e8:	9e 81       	ldd	r25, Y+6	; 0x06
     5ea:	fc 01       	movw	r30, r24
     5ec:	80 81       	ld	r24, Z
     5ee:	91 81       	ldd	r25, Z+1	; 0x01
     5f0:	9c 83       	std	Y+4, r25	; 0x04
     5f2:	8b 83       	std	Y+3, r24	; 0x03
     5f4:	8b 81       	ldd	r24, Y+3	; 0x03
     5f6:	82 95       	swap	r24
     5f8:	88 0f       	add	r24, r24
     5fa:	80 7e       	andi	r24, 0xE0	; 224
     5fc:	48 2f       	mov	r20, r24
     5fe:	62 e3       	ldi	r22, 0x32	; 50
     600:	80 e0       	ldi	r24, 0x00	; 0
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	7b d2       	rcall	.+1270   	; 0xafc <MCP2515_write>
     606:	8b 81       	ldd	r24, Y+3	; 0x03
     608:	9c 81       	ldd	r25, Y+4	; 0x04
     60a:	96 95       	lsr	r25
     60c:	87 95       	ror	r24
     60e:	96 95       	lsr	r25
     610:	87 95       	ror	r24
     612:	96 95       	lsr	r25
     614:	87 95       	ror	r24
     616:	48 2f       	mov	r20, r24
     618:	61 e3       	ldi	r22, 0x31	; 49
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	6e d2       	rcall	.+1244   	; 0xafc <MCP2515_write>
     620:	8d 81       	ldd	r24, Y+5	; 0x05
     622:	9e 81       	ldd	r25, Y+6	; 0x06
     624:	fc 01       	movw	r30, r24
     626:	82 81       	ldd	r24, Z+2	; 0x02
     628:	48 2f       	mov	r20, r24
     62a:	65 e3       	ldi	r22, 0x35	; 53
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	65 d2       	rcall	.+1226   	; 0xafc <MCP2515_write>
     632:	86 e3       	ldi	r24, 0x36	; 54
     634:	89 83       	std	Y+1, r24	; 0x01
     636:	1a 82       	std	Y+2, r1	; 0x02
     638:	15 c0       	rjmp	.+42     	; 0x664 <CAN_sendMessage+0xa4>
     63a:	8a 81       	ldd	r24, Y+2	; 0x02
     63c:	88 2f       	mov	r24, r24
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	2d 81       	ldd	r18, Y+5	; 0x05
     642:	3e 81       	ldd	r19, Y+6	; 0x06
     644:	82 0f       	add	r24, r18
     646:	93 1f       	adc	r25, r19
     648:	03 96       	adiw	r24, 0x03	; 3
     64a:	fc 01       	movw	r30, r24
     64c:	80 81       	ld	r24, Z
     64e:	48 2f       	mov	r20, r24
     650:	69 81       	ldd	r22, Y+1	; 0x01
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	52 d2       	rcall	.+1188   	; 0xafc <MCP2515_write>
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	8f 5f       	subi	r24, 0xFF	; 255
     65c:	89 83       	std	Y+1, r24	; 0x01
     65e:	8a 81       	ldd	r24, Y+2	; 0x02
     660:	8f 5f       	subi	r24, 0xFF	; 255
     662:	8a 83       	std	Y+2, r24	; 0x02
     664:	8d 81       	ldd	r24, Y+5	; 0x05
     666:	9e 81       	ldd	r25, Y+6	; 0x06
     668:	fc 01       	movw	r30, r24
     66a:	92 81       	ldd	r25, Z+2	; 0x02
     66c:	8a 81       	ldd	r24, Y+2	; 0x02
     66e:	89 17       	cp	r24, r25
     670:	20 f3       	brcs	.-56     	; 0x63a <CAN_sendMessage+0x7a>
     672:	28 e0       	ldi	r18, 0x08	; 8
     674:	48 e0       	ldi	r20, 0x08	; 8
     676:	60 e3       	ldi	r22, 0x30	; 48
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	52 d2       	rcall	.+1188   	; 0xb22 <MCP2515_bitModify>
     67e:	00 00       	nop
     680:	27 96       	adiw	r28, 0x07	; 7
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	08 95       	ret

00000692 <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     692:	95 b7       	in	r25, 0x35	; 53
     694:	90 68       	ori	r25, 0x80	; 128
     696:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     698:	96 b7       	in	r25, 0x36	; 54
     69a:	98 60       	ori	r25, 0x08	; 8
     69c:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     69e:	88 23       	and	r24, r24
     6a0:	19 f0       	breq	.+6      	; 0x6a8 <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     6a2:	80 b7       	in	r24, 0x30	; 48
     6a4:	80 62       	ori	r24, 0x20	; 32
     6a6:	80 bf       	out	0x30, r24	; 48
     6a8:	08 95       	ret

000006aa <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     6aa:	fc 01       	movw	r30, r24
     6ac:	80 81       	ld	r24, Z
	return val;
}
     6ae:	08 95       	ret

000006b0 <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     6b0:	fc 01       	movw	r30, r24
     6b2:	60 83       	st	Z, r22
     6b4:	08 95       	ret

000006b6 <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     6b6:	10 92 bf 03 	sts	0x03BF, r1
     6ba:	10 92 be 03 	sts	0x03BE, r1
	currentPosition.Y_abs = 0;
     6be:	10 92 c1 03 	sts	0x03C1, r1
     6c2:	10 92 c0 03 	sts	0x03C0, r1
	currentPosition.X_per = 0;
     6c6:	10 92 c3 03 	sts	0x03C3, r1
     6ca:	10 92 c2 03 	sts	0x03C2, r1
	currentPosition.Y_per = 0;
     6ce:	10 92 c5 03 	sts	0x03C5, r1
     6d2:	10 92 c4 03 	sts	0x03C4, r1
	currentDirection = CENTRE;
     6d6:	10 92 bd 03 	sts	0x03BD, r1
     6da:	08 95       	ret

000006dc <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     6e0:	98 d4       	rcall	.+2352   	; 0x1012 <OLED_clear>
     6e2:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	76 d4       	rcall	.+2284   	; 0xfd8 <OLED_goto>
     6ec:	8d eb       	ldi	r24, 0xBD	; 189
     6ee:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     6f0:	4e d5       	rcall	.+2716   	; 0x118e <OLED_printString>
     6f2:	87 ec       	ldi	r24, 0xC7	; 199
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	cd d7       	rcall	.+3994   	; 0x1692 <puts>
	printf("Move JOY to the right\n");
     6f8:	2f ef       	ldi	r18, 0xFF	; 255
     6fa:	4f ef       	ldi	r20, 0xFF	; 255
     6fc:	52 e0       	ldi	r21, 0x02	; 2
     6fe:	21 50       	subi	r18, 0x01	; 1
     700:	40 40       	sbci	r20, 0x00	; 0
     702:	50 40       	sbci	r21, 0x00	; 0
     704:	e1 f7       	brne	.-8      	; 0x6fe <JOY_calibrate+0x22>
     706:	00 c0       	rjmp	.+0      	; 0x708 <JOY_calibrate+0x2c>
     708:	00 c0       	rjmp	.+0      	; 0x70a <JOY_calibrate+0x2e>
     70a:	c4 e1       	ldi	r28, 0x14	; 20
     70c:	d0 e0       	ldi	r29, 0x00	; 0
     70e:	60 91 06 01 	lds	r22, 0x0106
     712:	70 91 07 01 	lds	r23, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     716:	82 e0       	ldi	r24, 0x02	; 2
     718:	ed d5       	rcall	.+3034   	; 0x12f4 <ADC_request>
     71a:	8f ef       	ldi	r24, 0xFF	; 255
     71c:	9f e1       	ldi	r25, 0x1F	; 31
     71e:	21 e0       	ldi	r18, 0x01	; 1
     720:	81 50       	subi	r24, 0x01	; 1
     722:	90 40       	sbci	r25, 0x00	; 0
     724:	20 40       	sbci	r18, 0x00	; 0
     726:	e1 f7       	brne	.-8      	; 0x720 <JOY_calibrate+0x44>
     728:	00 c0       	rjmp	.+0      	; 0x72a <JOY_calibrate+0x4e>
     72a:	00 00       	nop
     72c:	80 91 06 01 	lds	r24, 0x0106
     730:	90 91 07 01 	lds	r25, 0x0107
     734:	03 d6       	rcall	.+3078   	; 0x133c <ADC_read>
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     736:	90 91 0d 01 	lds	r25, 0x010D
     73a:	98 17       	cp	r25, r24
     73c:	10 f4       	brcc	.+4      	; 0x742 <JOY_calibrate+0x66>
     73e:	80 93 0d 01 	sts	0x010D, r24
		
		if(temp > calR) {calR = temp;}
     742:	21 97       	sbiw	r28, 0x01	; 1
     744:	20 97       	sbiw	r28, 0x00	; 0
     746:	19 f7       	brne	.-58     	; 0x70e <JOY_calibrate+0x32>
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	90 e0       	ldi	r25, 0x00	; 0
	OLED_goto(0,0);
	OLED_printString("JOY RIGHT");
	printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     750:	43 d4       	rcall	.+2182   	; 0xfd8 <OLED_goto>
     752:	8d ed       	ldi	r24, 0xDD	; 221
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_goto(1,0);
     754:	91 e0       	ldi	r25, 0x01	; 1
     756:	1b d5       	rcall	.+2614   	; 0x118e <OLED_printString>
     758:	86 ee       	ldi	r24, 0xE6	; 230
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	9a d7       	rcall	.+3892   	; 0x1692 <puts>
     75e:	4f ef       	ldi	r20, 0xFF	; 255
	OLED_printString("JOY LEFT");
     760:	5f ef       	ldi	r21, 0xFF	; 255
     762:	82 e0       	ldi	r24, 0x02	; 2
     764:	41 50       	subi	r20, 0x01	; 1
     766:	50 40       	sbci	r21, 0x00	; 0
	printf("Move JOY to the left\n");
     768:	80 40       	sbci	r24, 0x00	; 0
     76a:	e1 f7       	brne	.-8      	; 0x764 <JOY_calibrate+0x88>
     76c:	00 c0       	rjmp	.+0      	; 0x76e <JOY_calibrate+0x92>
     76e:	00 c0       	rjmp	.+0      	; 0x770 <JOY_calibrate+0x94>
     770:	c4 e1       	ldi	r28, 0x14	; 20
     772:	d0 e0       	ldi	r29, 0x00	; 0
     774:	60 91 06 01 	lds	r22, 0x0106
     778:	70 91 07 01 	lds	r23, 0x0107
     77c:	82 e0       	ldi	r24, 0x02	; 2
     77e:	ba d5       	rcall	.+2932   	; 0x12f4 <ADC_request>
     780:	9f ef       	ldi	r25, 0xFF	; 255
     782:	2f e1       	ldi	r18, 0x1F	; 31
     784:	41 e0       	ldi	r20, 0x01	; 1
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     786:	91 50       	subi	r25, 0x01	; 1
     788:	20 40       	sbci	r18, 0x00	; 0
     78a:	40 40       	sbci	r20, 0x00	; 0
     78c:	e1 f7       	brne	.-8      	; 0x786 <JOY_calibrate+0xaa>
     78e:	00 c0       	rjmp	.+0      	; 0x790 <JOY_calibrate+0xb4>
     790:	00 00       	nop
     792:	80 91 06 01 	lds	r24, 0x0106
     796:	90 91 07 01 	lds	r25, 0x0107
     79a:	d0 d5       	rcall	.+2976   	; 0x133c <ADC_read>
     79c:	90 91 0c 01 	lds	r25, 0x010C
     7a0:	89 17       	cp	r24, r25
     7a2:	10 f4       	brcc	.+4      	; 0x7a8 <JOY_calibrate+0xcc>
     7a4:	80 93 0c 01 	sts	0x010C, r24
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     7a8:	21 97       	sbiw	r28, 0x01	; 1
     7aa:	20 97       	sbiw	r28, 0x00	; 0
     7ac:	19 f7       	brne	.-58     	; 0x774 <JOY_calibrate+0x98>
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	70 e0       	ldi	r23, 0x00	; 0
		
		if(temp < calL) {calL = temp;}
     7b2:	82 e0       	ldi	r24, 0x02	; 2
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	10 d4       	rcall	.+2080   	; 0xfd8 <OLED_goto>
     7b8:	8b ef       	ldi	r24, 0xFB	; 251
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	e8 d4       	rcall	.+2512   	; 0x118e <OLED_printString>
     7be:	82 e0       	ldi	r24, 0x02	; 2
	OLED_goto(1,0);
	OLED_printString("JOY LEFT");
	printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     7c0:	92 e0       	ldi	r25, 0x02	; 2
     7c2:	67 d7       	rcall	.+3790   	; 0x1692 <puts>
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_goto(2,0);
     7c4:	5f ef       	ldi	r21, 0xFF	; 255
     7c6:	8f ef       	ldi	r24, 0xFF	; 255
     7c8:	92 e0       	ldi	r25, 0x02	; 2
     7ca:	51 50       	subi	r21, 0x01	; 1
     7cc:	80 40       	sbci	r24, 0x00	; 0
     7ce:	90 40       	sbci	r25, 0x00	; 0
	OLED_printString("JOY UP");
     7d0:	e1 f7       	brne	.-8      	; 0x7ca <JOY_calibrate+0xee>
     7d2:	00 c0       	rjmp	.+0      	; 0x7d4 <JOY_calibrate+0xf8>
     7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <JOY_calibrate+0xfa>
     7d6:	c4 e1       	ldi	r28, 0x14	; 20
	printf("Move JOY up\n");
     7d8:	d0 e0       	ldi	r29, 0x00	; 0
     7da:	60 91 06 01 	lds	r22, 0x0106
     7de:	70 91 07 01 	lds	r23, 0x0107
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	87 d5       	rcall	.+2830   	; 0x12f4 <ADC_request>
     7e6:	2f ef       	ldi	r18, 0xFF	; 255
     7e8:	4f e1       	ldi	r20, 0x1F	; 31
     7ea:	51 e0       	ldi	r21, 0x01	; 1
     7ec:	21 50       	subi	r18, 0x01	; 1
     7ee:	40 40       	sbci	r20, 0x00	; 0
     7f0:	50 40       	sbci	r21, 0x00	; 0
     7f2:	e1 f7       	brne	.-8      	; 0x7ec <JOY_calibrate+0x110>
     7f4:	00 c0       	rjmp	.+0      	; 0x7f6 <JOY_calibrate+0x11a>
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     7f6:	00 00       	nop
     7f8:	80 91 06 01 	lds	r24, 0x0106
     7fc:	90 91 07 01 	lds	r25, 0x0107
     800:	9d d5       	rcall	.+2874   	; 0x133c <ADC_read>
     802:	90 91 0b 01 	lds	r25, 0x010B
     806:	98 17       	cp	r25, r24
     808:	10 f4       	brcc	.+4      	; 0x80e <JOY_calibrate+0x132>
     80a:	80 93 0b 01 	sts	0x010B, r24
     80e:	21 97       	sbiw	r28, 0x01	; 1
     810:	20 97       	sbiw	r28, 0x00	; 0
     812:	19 f7       	brne	.-58     	; 0x7da <JOY_calibrate+0xfe>
     814:	60 e0       	ldi	r22, 0x00	; 0
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     816:	70 e0       	ldi	r23, 0x00	; 0
     818:	83 e0       	ldi	r24, 0x03	; 3
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	dd d3       	rcall	.+1978   	; 0xfd8 <OLED_goto>
     81e:	8e e0       	ldi	r24, 0x0E	; 14
     820:	92 e0       	ldi	r25, 0x02	; 2
		
		if(temp > calUp) {calUp = temp;}
     822:	b5 d4       	rcall	.+2410   	; 0x118e <OLED_printString>
     824:	87 e1       	ldi	r24, 0x17	; 23
     826:	92 e0       	ldi	r25, 0x02	; 2
     828:	34 d7       	rcall	.+3688   	; 0x1692 <puts>
     82a:	8f ef       	ldi	r24, 0xFF	; 255
     82c:	9f ef       	ldi	r25, 0xFF	; 255
     82e:	22 e0       	ldi	r18, 0x02	; 2
	OLED_goto(2,0);
	OLED_printString("JOY UP");
	printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     830:	81 50       	subi	r24, 0x01	; 1
     832:	90 40       	sbci	r25, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_goto(3,0);
     834:	20 40       	sbci	r18, 0x00	; 0
     836:	e1 f7       	brne	.-8      	; 0x830 <JOY_calibrate+0x154>
     838:	00 c0       	rjmp	.+0      	; 0x83a <JOY_calibrate+0x15e>
     83a:	00 c0       	rjmp	.+0      	; 0x83c <JOY_calibrate+0x160>
     83c:	c4 e1       	ldi	r28, 0x14	; 20
     83e:	d0 e0       	ldi	r29, 0x00	; 0
	OLED_printString("JOY DOWN");
     840:	60 91 06 01 	lds	r22, 0x0106
     844:	70 91 07 01 	lds	r23, 0x0107
	printf("Move JOY down\n");
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	54 d5       	rcall	.+2728   	; 0x12f4 <ADC_request>
     84c:	4f ef       	ldi	r20, 0xFF	; 255
     84e:	5f e1       	ldi	r21, 0x1F	; 31
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	41 50       	subi	r20, 0x01	; 1
     854:	50 40       	sbci	r21, 0x00	; 0
     856:	80 40       	sbci	r24, 0x00	; 0
     858:	e1 f7       	brne	.-8      	; 0x852 <JOY_calibrate+0x176>
     85a:	00 c0       	rjmp	.+0      	; 0x85c <JOY_calibrate+0x180>
     85c:	00 00       	nop
     85e:	80 91 06 01 	lds	r24, 0x0106
     862:	90 91 07 01 	lds	r25, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     866:	6a d5       	rcall	.+2772   	; 0x133c <ADC_read>
     868:	90 91 0a 01 	lds	r25, 0x010A
     86c:	89 17       	cp	r24, r25
     86e:	10 f4       	brcc	.+4      	; 0x874 <JOY_calibrate+0x198>
     870:	80 93 0a 01 	sts	0x010A, r24
     874:	21 97       	sbiw	r28, 0x01	; 1
     876:	20 97       	sbiw	r28, 0x00	; 0
     878:	19 f7       	brne	.-58     	; 0x840 <JOY_calibrate+0x164>
     87a:	30 91 0a 01 	lds	r19, 0x010A
     87e:	20 91 0b 01 	lds	r18, 0x010B
     882:	90 91 0c 01 	lds	r25, 0x010C
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     886:	80 91 0d 01 	lds	r24, 0x010D
     88a:	1f 92       	push	r1
     88c:	3f 93       	push	r19
     88e:	1f 92       	push	r1
     890:	2f 93       	push	r18
		
		if(temp < calDown) {calDown = temp;}
     892:	1f 92       	push	r1
     894:	9f 93       	push	r25
     896:	1f 92       	push	r1
     898:	8f 93       	push	r24
     89a:	85 e2       	ldi	r24, 0x25	; 37
     89c:	92 e0       	ldi	r25, 0x02	; 2
     89e:	9f 93       	push	r25
	OLED_goto(3,0);
	OLED_printString("JOY DOWN");
	printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     8a0:	8f 93       	push	r24
     8a2:	e6 d6       	rcall	.+3532   	; 0x1670 <printf>
		
		if(temp < calDown) {calDown = temp;}
	}
	
	
	printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
     8a4:	20 91 0b 01 	lds	r18, 0x010B
     8a8:	80 91 0a 01 	lds	r24, 0x010A
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	28 1b       	sub	r18, r24
     8b0:	31 09       	sbc	r19, r1
     8b2:	c9 01       	movw	r24, r18
     8b4:	4d b7       	in	r20, 0x3d	; 61
     8b6:	5e b7       	in	r21, 0x3e	; 62
     8b8:	46 5f       	subi	r20, 0xF6	; 246
     8ba:	5f 4f       	sbci	r21, 0xFF	; 255
     8bc:	0f b6       	in	r0, 0x3f	; 63
     8be:	f8 94       	cli
     8c0:	5e bf       	out	0x3e, r21	; 62
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	4d bf       	out	0x3d, r20	; 61
     8c6:	99 23       	and	r25, r25
     8c8:	0c f4       	brge	.+2      	; 0x8cc <JOY_calibrate+0x1f0>
     8ca:	01 96       	adiw	r24, 0x01	; 1
     8cc:	95 95       	asr	r25
     8ce:	87 95       	ror	r24
	
	meanVert = (calUp - calDown)/2;
     8d0:	80 93 09 01 	sts	0x0109, r24
     8d4:	20 91 0d 01 	lds	r18, 0x010D
     8d8:	80 91 0c 01 	lds	r24, 0x010C
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	28 1b       	sub	r18, r24
     8e0:	31 09       	sbc	r19, r1
     8e2:	c9 01       	movw	r24, r18
     8e4:	99 23       	and	r25, r25
     8e6:	0c f4       	brge	.+2      	; 0x8ea <JOY_calibrate+0x20e>
     8e8:	01 96       	adiw	r24, 0x01	; 1
     8ea:	95 95       	asr	r25
     8ec:	87 95       	ror	r24
     8ee:	80 93 08 01 	sts	0x0108, r24
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	84 e0       	ldi	r24, 0x04	; 4
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	6e d3       	rcall	.+1756   	; 0xfd8 <OLED_goto>
     8fc:	8f e4       	ldi	r24, 0x4F	; 79
     8fe:	92 e0       	ldi	r25, 0x02	; 2
	meanHor = (calR - calL)/2;
     900:	46 d4       	rcall	.+2188   	; 0x118e <OLED_printString>
     902:	90 91 08 01 	lds	r25, 0x0108
     906:	80 91 09 01 	lds	r24, 0x0109
     90a:	1f 92       	push	r1
     90c:	9f 93       	push	r25
     90e:	1f 92       	push	r1
     910:	8f 93       	push	r24
     912:	8a e5       	ldi	r24, 0x5A	; 90
     914:	92 e0       	ldi	r25, 0x02	; 2
     916:	9f 93       	push	r25
     918:	8f 93       	push	r24
     91a:	aa d6       	rcall	.+3412   	; 0x1670 <printf>
     91c:	5f ef       	ldi	r21, 0xFF	; 255
	
	OLED_goto(4,0);
     91e:	8f ef       	ldi	r24, 0xFF	; 255
     920:	9e e0       	ldi	r25, 0x0E	; 14
     922:	51 50       	subi	r21, 0x01	; 1
     924:	80 40       	sbci	r24, 0x00	; 0
     926:	90 40       	sbci	r25, 0x00	; 0
     928:	e1 f7       	brne	.-8      	; 0x922 <JOY_calibrate+0x246>
	OLED_printString("CALIB DONE");
     92a:	00 c0       	rjmp	.+0      	; 0x92c <JOY_calibrate+0x250>
     92c:	00 00       	nop
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
	printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	df 91       	pop	r29
     93c:	cf 91       	pop	r28
     93e:	08 95       	ret

00000940 <JOY_requestCurrentPosition>:
     940:	88 37       	cpi	r24, 0x78	; 120
     942:	39 f4       	brne	.+14     	; 0x952 <JOY_requestCurrentPosition+0x12>
     944:	60 91 06 01 	lds	r22, 0x0106
     948:	70 91 07 01 	lds	r23, 0x0107
     94c:	82 e0       	ldi	r24, 0x02	; 2
     94e:	d2 c4       	rjmp	.+2468   	; 0x12f4 <ADC_request>
     950:	08 95       	ret
     952:	89 37       	cpi	r24, 0x79	; 121
     954:	31 f4       	brne	.+12     	; 0x962 <JOY_requestCurrentPosition+0x22>
     956:	60 91 06 01 	lds	r22, 0x0106
     95a:	70 91 07 01 	lds	r23, 0x0107
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	c9 c4       	rjmp	.+2450   	; 0x12f4 <ADC_request>
     962:	08 95       	ret

00000964 <JOY_updatePosition>:
     964:	88 37       	cpi	r24, 0x78	; 120
     966:	f9 f4       	brne	.+62     	; 0x9a6 <JOY_updatePosition+0x42>
     968:	80 91 06 01 	lds	r24, 0x0106
	_delay_ms(1000);
}
     96c:	90 91 07 01 	lds	r25, 0x0107
     970:	e5 d4       	rcall	.+2506   	; 0x133c <ADC_read>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	90 93 bf 03 	sts	0x03BF, r25
     978:	80 93 be 03 	sts	0x03BE, r24
     97c:	20 91 08 01 	lds	r18, 0x0108
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     980:	60 91 08 01 	lds	r22, 0x0108
     984:	ac 01       	movw	r20, r24
     986:	42 1b       	sub	r20, r18
     988:	51 09       	sbc	r21, r1
     98a:	9a 01       	movw	r18, r20
     98c:	44 e6       	ldi	r20, 0x64	; 100
     98e:	42 9f       	mul	r20, r18
     990:	c0 01       	movw	r24, r0
     992:	43 9f       	mul	r20, r19
     994:	90 0d       	add	r25, r0
     996:	11 24       	eor	r1, r1
     998:	70 e0       	ldi	r23, 0x00	; 0
     99a:	d2 d4       	rcall	.+2468   	; 0x1340 <__divmodhi4>
     99c:	70 93 c3 03 	sts	0x03C3, r23
     9a0:	60 93 c2 03 	sts	0x03C2, r22
     9a4:	08 95       	ret
     9a6:	89 37       	cpi	r24, 0x79	; 121
     9a8:	f1 f4       	brne	.+60     	; 0x9e6 <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     9aa:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     9ae:	90 91 07 01 	lds	r25, 0x0107
     9b2:	c4 d4       	rcall	.+2440   	; 0x133c <ADC_read>
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	90 93 c1 03 	sts	0x03C1, r25
     9ba:	80 93 c0 03 	sts	0x03C0, r24
     9be:	20 91 09 01 	lds	r18, 0x0109
     9c2:	60 91 09 01 	lds	r22, 0x0109
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     9c6:	ac 01       	movw	r20, r24
     9c8:	42 1b       	sub	r20, r18
     9ca:	51 09       	sbc	r21, r1
     9cc:	9a 01       	movw	r18, r20
     9ce:	44 e6       	ldi	r20, 0x64	; 100
     9d0:	42 9f       	mul	r20, r18
     9d2:	c0 01       	movw	r24, r0
     9d4:	43 9f       	mul	r20, r19
     9d6:	90 0d       	add	r25, r0
     9d8:	11 24       	eor	r1, r1
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	b1 d4       	rcall	.+2402   	; 0x1340 <__divmodhi4>
     9de:	70 93 c5 03 	sts	0x03C5, r23
     9e2:	60 93 c4 03 	sts	0x03C4, r22
     9e6:	08 95       	ret

000009e8 <JOY_calculateDirection>:
     9e8:	80 91 c2 03 	lds	r24, 0x03C2
     9ec:	90 91 c3 03 	lds	r25, 0x03C3
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     9f0:	8b 35       	cpi	r24, 0x5B	; 91
     9f2:	91 05       	cpc	r25, r1
     9f4:	24 f0       	brlt	.+8      	; 0x9fe <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     9f6:	83 e0       	ldi	r24, 0x03	; 3
     9f8:	80 93 bd 03 	sts	0x03BD, r24
     9fc:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     9fe:	86 3a       	cpi	r24, 0xA6	; 166
     a00:	9f 4f       	sbci	r25, 0xFF	; 255
     a02:	24 f4       	brge	.+8      	; 0xa0c <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     a04:	84 e0       	ldi	r24, 0x04	; 4
     a06:	80 93 bd 03 	sts	0x03BD, r24
     a0a:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     a0c:	80 91 c4 03 	lds	r24, 0x03C4
     a10:	90 91 c5 03 	lds	r25, 0x03C5
     a14:	8b 35       	cpi	r24, 0x5B	; 91
     a16:	91 05       	cpc	r25, r1
     a18:	24 f0       	brlt	.+8      	; 0xa22 <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	80 93 bd 03 	sts	0x03BD, r24
     a20:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     a22:	86 3a       	cpi	r24, 0xA6	; 166
     a24:	9f 4f       	sbci	r25, 0xFF	; 255
     a26:	24 f4       	brge	.+8      	; 0xa30 <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	80 93 bd 03 	sts	0x03BD, r24
     a2e:	08 95       	ret
	else{currentDirection = CENTRE;}
     a30:	10 92 bd 03 	sts	0x03BD, r1
     a34:	08 95       	ret

00000a36 <JOY_getDirection>:
// Before the value is returned, the values of position in x and y direction are 
// requested from the ADC and written to the currentPosition and 
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
     a36:	88 e7       	ldi	r24, 0x78	; 120
     a38:	83 df       	rcall	.-250    	; 0x940 <JOY_requestCurrentPosition>
     a3a:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a3c:	8a 95       	dec	r24
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <JOY_getDirection+0x6>
     a40:	00 00       	nop
     a42:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     a44:	8f df       	rcall	.-226    	; 0x964 <JOY_updatePosition>
     a46:	89 e7       	ldi	r24, 0x79	; 121
     a48:	7b df       	rcall	.-266    	; 0x940 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     a4a:	82 e6       	ldi	r24, 0x62	; 98
     a4c:	8a 95       	dec	r24
     a4e:	f1 f7       	brne	.-4      	; 0xa4c <JOY_getDirection+0x16>
     a50:	00 00       	nop
     a52:	89 e7       	ldi	r24, 0x79	; 121
     a54:	87 df       	rcall	.-242    	; 0x964 <JOY_updatePosition>
     a56:	c8 df       	rcall	.-112    	; 0x9e8 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     a58:	80 91 bd 03 	lds	r24, 0x03BD
     a5c:	08 95       	ret

00000a5e <MCP2515_reset>:
	printf("finished MCP2515_init\n");
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
     a5e:	cf 93       	push	r28
     a60:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
     a62:	1f d4       	rcall	.+2110   	; 0x12a2 <SPI_activateSlave>
     a64:	80 ec       	ldi	r24, 0xC0	; 192
	SPI_send(MCP_RESET);
     a66:	08 d4       	rcall	.+2064   	; 0x1278 <SPI_send>
     a68:	8c ec       	ldi	r24, 0xCC	; 204
     a6a:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a6c:	01 97       	sbiw	r24, 0x01	; 1
     a6e:	f1 f7       	brne	.-4      	; 0xa6c <MCP2515_reset+0xe>
     a70:	00 c0       	rjmp	.+0      	; 0xa72 <MCP2515_reset+0x14>
     a72:	00 00       	nop
     a74:	8c 2f       	mov	r24, r28
     a76:	19 d4       	rcall	.+2098   	; 0x12aa <SPI_deactivateSlave>
	_delay_ms(1);
	SPI_deactivateSlave(slave);
     a78:	8f ef       	ldi	r24, 0xFF	; 255
     a7a:	9f e2       	ldi	r25, 0x2F	; 47
     a7c:	01 97       	sbiw	r24, 0x01	; 1
     a7e:	f1 f7       	brne	.-4      	; 0xa7c <MCP2515_reset+0x1e>
     a80:	00 c0       	rjmp	.+0      	; 0xa82 <MCP2515_reset+0x24>
     a82:	00 00       	nop
     a84:	cf 91       	pop	r28
     a86:	08 95       	ret

00000a88 <MCP2515_read>:
     a88:	cf 93       	push	r28
	_delay_ms(10);
}
     a8a:	df 93       	push	r29
     a8c:	c8 2f       	mov	r28, r24

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
     a8e:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
     a90:	08 d4       	rcall	.+2064   	; 0x12a2 <SPI_activateSlave>
     a92:	83 e0       	ldi	r24, 0x03	; 3
	SPI_send(MCP_READ);
     a94:	f1 d3       	rcall	.+2018   	; 0x1278 <SPI_send>
     a96:	8d 2f       	mov	r24, r29
     a98:	ef d3       	rcall	.+2014   	; 0x1278 <SPI_send>
	SPI_send(address);
     a9a:	fd d3       	rcall	.+2042   	; 0x1296 <SPI_receive>
     a9c:	d8 2f       	mov	r29, r24
     a9e:	8c 2f       	mov	r24, r28
	
	uint8_t result;
	result = SPI_receive();
     aa0:	04 d4       	rcall	.+2056   	; 0x12aa <SPI_deactivateSlave>
     aa2:	8d 2f       	mov	r24, r29
     aa4:	df 91       	pop	r29
	
	SPI_deactivateSlave(slave);
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <MCP2515_init>:
     aaa:	cf 93       	push	r28
	return result;
}
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	d7 df       	rcall	.-82     	; 0xa5e <MCP2515_reset>
     ab0:	6e e0       	ldi	r22, 0x0E	; 14
     ab2:	80 e0       	ldi	r24, 0x00	; 0
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
	
	//printf("MCP_CANSTAT: %d\n", MCP2515_read(MCP_CANSTAT, SS_CAN_CONTROLLER));
	
	// Self-test
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
     ab4:	e9 df       	rcall	.-46     	; 0xa88 <MCP2515_read>
     ab6:	c8 2f       	mov	r28, r24
     ab8:	1f 92       	push	r1
     aba:	8f 93       	push	r24
	printf("CANSTAT: %#x\n", value);
     abc:	2f e7       	ldi	r18, 0x7F	; 127
     abe:	32 e0       	ldi	r19, 0x02	; 2
     ac0:	3f 93       	push	r19
     ac2:	2f 93       	push	r18
     ac4:	d5 d5       	rcall	.+2986   	; 0x1670 <printf>
     ac6:	8c 2f       	mov	r24, r28
     ac8:	80 7e       	andi	r24, 0xE0	; 224
     aca:	0f 90       	pop	r0
	if((value & MODE_MASK) != MODE_CONFIG) 
     acc:	0f 90       	pop	r0
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	80 38       	cpi	r24, 0x80	; 128
     ad4:	69 f0       	breq	.+26     	; 0xaf0 <MCP2515_init+0x46>
     ad6:	1f 92       	push	r1
     ad8:	cf 93       	push	r28
     ada:	8d e8       	ldi	r24, 0x8D	; 141
	{
		printf("MCP2515 is NOT in configuration mode after reset! Value: %d\n", value);
     adc:	92 e0       	ldi	r25, 0x02	; 2
     ade:	9f 93       	push	r25
     ae0:	8f 93       	push	r24
     ae2:	c6 d5       	rcall	.+2956   	; 0x1670 <printf>
     ae4:	0f 90       	pop	r0
     ae6:	0f 90       	pop	r0
     ae8:	0f 90       	pop	r0
     aea:	0f 90       	pop	r0
		return 1;
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	04 c0       	rjmp	.+8      	; 0xaf8 <MCP2515_init+0x4e>
     af0:	8a ec       	ldi	r24, 0xCA	; 202
     af2:	92 e0       	ldi	r25, 0x02	; 2
     af4:	ce d5       	rcall	.+2972   	; 0x1692 <puts>
     af6:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	printf("finished MCP2515_init\n");
     af8:	cf 91       	pop	r28
     afa:	08 95       	ret

00000afc <MCP2515_write>:
     afc:	1f 93       	push	r17
     afe:	cf 93       	push	r28
	return 0;
     b00:	df 93       	push	r29
}
     b02:	c8 2f       	mov	r28, r24
     b04:	16 2f       	mov	r17, r22
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_write(SPI_SLAVES slave, uint8_t address, uint8_t data)
{
     b06:	d4 2f       	mov	r29, r20
	SPI_activateSlave(slave);
     b08:	cc d3       	rcall	.+1944   	; 0x12a2 <SPI_activateSlave>
     b0a:	82 e0       	ldi	r24, 0x02	; 2
	SPI_send(MCP_WRITE);
     b0c:	b5 d3       	rcall	.+1898   	; 0x1278 <SPI_send>
     b0e:	81 2f       	mov	r24, r17
     b10:	b3 d3       	rcall	.+1894   	; 0x1278 <SPI_send>
	SPI_send(address);
     b12:	8d 2f       	mov	r24, r29
     b14:	b1 d3       	rcall	.+1890   	; 0x1278 <SPI_send>
     b16:	8c 2f       	mov	r24, r28
	SPI_send(data);
     b18:	c8 d3       	rcall	.+1936   	; 0x12aa <SPI_deactivateSlave>
     b1a:	df 91       	pop	r29
     b1c:	cf 91       	pop	r28
	SPI_deactivateSlave(slave);
     b1e:	1f 91       	pop	r17
     b20:	08 95       	ret

00000b22 <MCP2515_bitModify>:
     b22:	0f 93       	push	r16
}
     b24:	1f 93       	push	r17
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	c8 2f       	mov	r28, r24
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_bitModify(SPI_SLAVES slave, uint8_t register2change, uint8_t mask, uint8_t newValue)
{
     b2c:	06 2f       	mov	r16, r22
     b2e:	14 2f       	mov	r17, r20
     b30:	d2 2f       	mov	r29, r18
	SPI_activateSlave(slave);
     b32:	b7 d3       	rcall	.+1902   	; 0x12a2 <SPI_activateSlave>
     b34:	85 e0       	ldi	r24, 0x05	; 5
	
	SPI_send(MCP_BITMOD);
     b36:	a0 d3       	rcall	.+1856   	; 0x1278 <SPI_send>
     b38:	80 2f       	mov	r24, r16
     b3a:	9e d3       	rcall	.+1852   	; 0x1278 <SPI_send>
	SPI_send(register2change);
     b3c:	81 2f       	mov	r24, r17
     b3e:	9c d3       	rcall	.+1848   	; 0x1278 <SPI_send>
     b40:	8d 2f       	mov	r24, r29
	SPI_send(mask);
     b42:	9a d3       	rcall	.+1844   	; 0x1278 <SPI_send>
     b44:	8c 2f       	mov	r24, r28
     b46:	b1 d3       	rcall	.+1890   	; 0x12aa <SPI_deactivateSlave>
	SPI_send(newValue);
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	1f 91       	pop	r17
	
	SPI_deactivateSlave(slave);
     b4e:	0f 91       	pop	r16
     b50:	08 95       	ret

00000b52 <startGame>:

int menuFrameOffset = 10; //Columns from left frame border
//******************************************************************************************

void startGame()
{
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
	OLED_clear();
     b56:	5d d2       	rcall	.+1210   	; 0x1012 <OLED_clear>
     b58:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     b5a:	70 e0       	ldi	r23, 0x00	; 0
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	3b d2       	rcall	.+1142   	; 0xfd8 <OLED_goto>
     b62:	86 ef       	ldi	r24, 0xF6	; 246
     b64:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("START");
     b66:	13 d3       	rcall	.+1574   	; 0x118e <OLED_printString>
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_goto(3,0);
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	33 d2       	rcall	.+1126   	; 0xfd8 <OLED_goto>
     b72:	ce e0       	ldi	r28, 0x0E	; 14
     b74:	d0 e0       	ldi	r29, 0x00	; 0
     b76:	8c ef       	ldi	r24, 0xFC	; 252
     b78:	92 e0       	ldi	r25, 0x02	; 2
     b7a:	09 d3       	rcall	.+1554   	; 0x118e <OLED_printString>
     b7c:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     b7e:	8f e7       	ldi	r24, 0x7F	; 127
     b80:	97 e0       	ldi	r25, 0x07	; 7
     b82:	21 50       	subi	r18, 0x01	; 1
     b84:	80 40       	sbci	r24, 0x00	; 0
     b86:	90 40       	sbci	r25, 0x00	; 0
     b88:	e1 f7       	brne	.-8      	; 0xb82 <startGame+0x30>
     b8a:	00 c0       	rjmp	.+0      	; 0xb8c <startGame+0x3a>
     b8c:	00 00       	nop
     b8e:	21 97       	sbiw	r28, 0x01	; 1
     b90:	20 97       	sbiw	r28, 0x00	; 0
     b92:	89 f7       	brne	.-30     	; 0xb76 <startGame+0x24>
     b94:	60 e0       	ldi	r22, 0x00	; 0
     b96:	70 e0       	ldi	r23, 0x00	; 0
     b98:	85 e0       	ldi	r24, 0x05	; 5
	OLED_goto(0,0);
	OLED_printString("START");
	
	OLED_goto(3,0);
	
	for(int i = 14; i > 0; i--)
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	1d d2       	rcall	.+1082   	; 0xfd8 <OLED_goto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_goto(5,0);
     b9e:	8e ef       	ldi	r24, 0xFE	; 254
     ba0:	92 e0       	ldi	r25, 0x02	; 2
     ba2:	f5 d2       	rcall	.+1514   	; 0x118e <OLED_printString>
     ba4:	2f ef       	ldi	r18, 0xFF	; 255
     ba6:	8f ef       	ldi	r24, 0xFF	; 255
     ba8:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     baa:	21 50       	subi	r18, 0x01	; 1
     bac:	80 40       	sbci	r24, 0x00	; 0
     bae:	90 40       	sbci	r25, 0x00	; 0
     bb0:	e1 f7       	brne	.-8      	; 0xbaa <startGame+0x58>
     bb2:	00 c0       	rjmp	.+0      	; 0xbb4 <startGame+0x62>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <startGame+0x64>
     bb6:	df 91       	pop	r29
     bb8:	cf 91       	pop	r28
     bba:	08 95       	ret

00000bbc <MENU_addMenuItem>:
     bbc:	cf 92       	push	r12
     bbe:	df 92       	push	r13
     bc0:	ef 92       	push	r14
     bc2:	ff 92       	push	r15
	_delay_ms(3000);
}
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     bca:	df 93       	push	r29
     bcc:	8c 01       	movw	r16, r24
     bce:	7b 01       	movw	r14, r22
     bd0:	6a 01       	movw	r12, r20
     bd2:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     bd4:	80 91 c9 03 	lds	r24, 0x03C9
     bd8:	90 91 ca 03 	lds	r25, 0x03CA
     bdc:	89 2b       	or	r24, r25
     bde:	19 f0       	breq	.+6      	; 0xbe6 <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     be0:	87 e0       	ldi	r24, 0x07	; 7
     be2:	93 e0       	ldi	r25, 0x03	; 3
     be4:	56 d5       	rcall	.+2732   	; 0x1692 <puts>
     be6:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	d1 d3       	rcall	.+1954   	; 0x138e <malloc>
     bec:	fc 01       	movw	r30, r24
     bee:	90 93 ca 03 	sts	0x03CA, r25
     bf2:	80 93 c9 03 	sts	0x03C9, r24
     bf6:	f3 82       	std	Z+3, r15	; 0x03
     bf8:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     bfa:	11 83       	std	Z+1, r17	; 0x01
     bfc:	00 83       	st	Z, r16
	currItem->name = name;
     bfe:	cd 2b       	or	r28, r29
     c00:	39 f0       	breq	.+14     	; 0xc10 <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     c02:	d5 82       	std	Z+5, r13	; 0x05
     c04:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     c0a:	97 83       	std	Z+7, r25	; 0x07
     c0c:	86 83       	std	Z+6, r24	; 0x06
     c0e:	04 c0       	rjmp	.+8      	; 0xc18 <MENU_addMenuItem+0x5c>
     c10:	15 82       	std	Z+5, r1	; 0x05
     c12:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     c14:	17 82       	std	Z+7, r1	; 0x07
     c16:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
	}
}
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	ff 90       	pop	r15
     c22:	ef 90       	pop	r14
     c24:	df 90       	pop	r13
     c26:	cf 90       	pop	r12
     c28:	08 95       	ret

00000c2a <MENU_buildMenus>:
     c2a:	cf 93       	push	r28
     c2c:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     c2e:	86 e1       	ldi	r24, 0x16	; 22
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	ad d3       	rcall	.+1882   	; 0x138e <malloc>
     c34:	ec 01       	movw	r28, r24
     c36:	90 93 d0 03 	sts	0x03D0, r25
     c3a:	80 93 cf 03 	sts	0x03CF, r24
     c3e:	8d e1       	ldi	r24, 0x1D	; 29
	mainMenu->menuName = "MainMenu";
     c40:	93 e0       	ldi	r25, 0x03	; 3
     c42:	99 83       	std	Y+1, r25	; 0x01
     c44:	88 83       	st	Y, r24
     c46:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     c48:	1c 8a       	std	Y+20, r1	; 0x14
     c4a:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	9b 83       	std	Y+3, r25	; 0x03
     c50:	8a 83       	std	Y+2, r24	; 0x02
     c52:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	9b d3       	rcall	.+1846   	; 0x138e <malloc>
     c58:	fc 01       	movw	r30, r24
     c5a:	90 93 ce 03 	sts	0x03CE, r25
     c5e:	80 93 cd 03 	sts	0x03CD, r24
     c62:	86 e2       	ldi	r24, 0x26	; 38
     c64:	93 e0       	ldi	r25, 0x03	; 3
	difficultyMenu->menuName = "DifficultyMenu";
     c66:	91 83       	std	Z+1, r25	; 0x01
     c68:	80 83       	st	Z, r24
     c6a:	d5 8b       	std	Z+21, r29	; 0x15
     c6c:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     c6e:	83 e0       	ldi	r24, 0x03	; 3
     c70:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     c72:	93 83       	std	Z+3, r25	; 0x03
     c74:	82 83       	std	Z+2, r24	; 0x02
     c76:	20 e0       	ldi	r18, 0x00	; 0
     c78:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	50 e0       	ldi	r21, 0x00	; 0
     c7e:	be 01       	movw	r22, r28
     c80:	85 e3       	ldi	r24, 0x35	; 53
     c82:	93 e0       	ldi	r25, 0x03	; 3
     c84:	9b df       	rcall	.-202    	; 0xbbc <MENU_addMenuItem>
     c86:	60 91 cf 03 	lds	r22, 0x03CF
     c8a:	70 91 d0 03 	lds	r23, 0x03D0
	mainMenu->children[0] = currItem;
     c8e:	e0 91 c9 03 	lds	r30, 0x03C9
     c92:	f0 91 ca 03 	lds	r31, 0x03CA
     c96:	db 01       	movw	r26, r22
     c98:	15 96       	adiw	r26, 0x05	; 5
     c9a:	fc 93       	st	X, r31
     c9c:	ee 93       	st	-X, r30
     c9e:	14 97       	sbiw	r26, 0x04	; 4
     ca0:	89 ea       	ldi	r24, 0xA9	; 169
     ca2:	95 e0       	ldi	r25, 0x05	; 5
     ca4:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
     ca6:	82 87       	std	Z+10, r24	; 0x0a
     ca8:	40 91 cd 03 	lds	r20, 0x03CD
     cac:	50 91 ce 03 	lds	r21, 0x03CE
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     cb0:	21 e0       	ldi	r18, 0x01	; 1
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	8e e3       	ldi	r24, 0x3E	; 62
     cb6:	93 e0       	ldi	r25, 0x03	; 3
     cb8:	81 df       	rcall	.-254    	; 0xbbc <MENU_addMenuItem>
     cba:	60 91 cf 03 	lds	r22, 0x03CF
     cbe:	70 91 d0 03 	lds	r23, 0x03D0
	mainMenu->children[1] = currItem;
     cc2:	80 91 c9 03 	lds	r24, 0x03C9
     cc6:	90 91 ca 03 	lds	r25, 0x03CA
     cca:	fb 01       	movw	r30, r22
     ccc:	97 83       	std	Z+7, r25	; 0x07
     cce:	86 83       	std	Z+6, r24	; 0x06
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	40 e0       	ldi	r20, 0x00	; 0
     cd6:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     cd8:	89 e4       	ldi	r24, 0x49	; 73
     cda:	93 e0       	ldi	r25, 0x03	; 3
     cdc:	6f df       	rcall	.-290    	; 0xbbc <MENU_addMenuItem>
     cde:	60 91 cf 03 	lds	r22, 0x03CF
     ce2:	70 91 d0 03 	lds	r23, 0x03D0
     ce6:	80 91 c9 03 	lds	r24, 0x03C9
	mainMenu->children[2] = currItem;
     cea:	90 91 ca 03 	lds	r25, 0x03CA
     cee:	db 01       	movw	r26, r22
     cf0:	19 96       	adiw	r26, 0x09	; 9
     cf2:	9c 93       	st	X, r25
     cf4:	8e 93       	st	-X, r24
     cf6:	18 97       	sbiw	r26, 0x08	; 8
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	50 e0       	ldi	r21, 0x00	; 0
     d00:	84 e5       	ldi	r24, 0x54	; 84
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
     d02:	93 e0       	ldi	r25, 0x03	; 3
     d04:	5b df       	rcall	.-330    	; 0xbbc <MENU_addMenuItem>
     d06:	60 91 cf 03 	lds	r22, 0x03CF
     d0a:	70 91 d0 03 	lds	r23, 0x03D0
     d0e:	e0 91 c9 03 	lds	r30, 0x03C9
	mainMenu->children[3] = currItem;
     d12:	f0 91 ca 03 	lds	r31, 0x03CA
     d16:	db 01       	movw	r26, r22
     d18:	1b 96       	adiw	r26, 0x0b	; 11
     d1a:	fc 93       	st	X, r31
     d1c:	ee 93       	st	-X, r30
     d1e:	1a 97       	sbiw	r26, 0x0a	; 10
     d20:	8e e6       	ldi	r24, 0x6E	; 110
     d22:	93 e0       	ldi	r25, 0x03	; 3
     d24:	93 87       	std	Z+11, r25	; 0x0b
     d26:	82 87       	std	Z+10, r24	; 0x0a
     d28:	20 e0       	ldi	r18, 0x00	; 0
     d2a:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
     d2c:	40 e0       	ldi	r20, 0x00	; 0
     d2e:	50 e0       	ldi	r21, 0x00	; 0
     d30:	8e e5       	ldi	r24, 0x5E	; 94
     d32:	93 e0       	ldi	r25, 0x03	; 3
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
     d34:	43 df       	rcall	.-378    	; 0xbbc <MENU_addMenuItem>
     d36:	e0 91 cf 03 	lds	r30, 0x03CF
     d3a:	f0 91 d0 03 	lds	r31, 0x03D0
     d3e:	80 91 c9 03 	lds	r24, 0x03C9
     d42:	90 91 ca 03 	lds	r25, 0x03CA
	mainMenu->children[4] = currItem;
     d46:	95 87       	std	Z+13, r25	; 0x0d
     d48:	84 87       	std	Z+12, r24	; 0x0c
     d4a:	10 92 ca 03 	sts	0x03CA, r1
     d4e:	10 92 c9 03 	sts	0x03C9, r1
     d52:	60 91 cd 03 	lds	r22, 0x03CD
     d56:	70 91 ce 03 	lds	r23, 0x03CE
	
	currItem = NULL;
     d5a:	20 e0       	ldi	r18, 0x00	; 0
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
     d60:	50 e0       	ldi	r21, 0x00	; 0
     d62:	83 e6       	ldi	r24, 0x63	; 99
     d64:	93 e0       	ldi	r25, 0x03	; 3
     d66:	2a df       	rcall	.-428    	; 0xbbc <MENU_addMenuItem>
     d68:	60 91 cd 03 	lds	r22, 0x03CD
     d6c:	70 91 ce 03 	lds	r23, 0x03CE
     d70:	80 91 c9 03 	lds	r24, 0x03C9
     d74:	90 91 ca 03 	lds	r25, 0x03CA
	difficultyMenu->children[0] = currItem;
     d78:	fb 01       	movw	r30, r22
     d7a:	95 83       	std	Z+5, r25	; 0x05
     d7c:	84 83       	std	Z+4, r24	; 0x04
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	50 e0       	ldi	r21, 0x00	; 0
     d86:	88 e6       	ldi	r24, 0x68	; 104
     d88:	93 e0       	ldi	r25, 0x03	; 3
     d8a:	18 df       	rcall	.-464    	; 0xbbc <MENU_addMenuItem>
     d8c:	60 91 cd 03 	lds	r22, 0x03CD
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
     d90:	70 91 ce 03 	lds	r23, 0x03CE
     d94:	80 91 c9 03 	lds	r24, 0x03C9
     d98:	90 91 ca 03 	lds	r25, 0x03CA
     d9c:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
     d9e:	17 96       	adiw	r26, 0x07	; 7
     da0:	9c 93       	st	X, r25
     da2:	8e 93       	st	-X, r24
     da4:	16 97       	sbiw	r26, 0x06	; 6
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	40 e0       	ldi	r20, 0x00	; 0
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	8f e6       	ldi	r24, 0x6F	; 111
     db0:	93 e0       	ldi	r25, 0x03	; 3
     db2:	04 df       	rcall	.-504    	; 0xbbc <MENU_addMenuItem>
     db4:	e0 91 cd 03 	lds	r30, 0x03CD
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
     db8:	f0 91 ce 03 	lds	r31, 0x03CE
     dbc:	80 91 c9 03 	lds	r24, 0x03C9
     dc0:	90 91 ca 03 	lds	r25, 0x03CA
     dc4:	91 87       	std	Z+9, r25	; 0x09
     dc6:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	08 95       	ret

00000dce <MENU_printMenuItem>:
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	ec 01       	movw	r28, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	20 97       	sbiw	r28, 0x00	; 0
     dd8:	49 f0       	breq	.+18     	; 0xdec <MENU_printMenuItem+0x1e>
     dda:	60 91 0e 01 	lds	r22, 0x010E
}
     dde:	70 91 0f 01 	lds	r23, 0x010F

void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
     de2:	fa d0       	rcall	.+500    	; 0xfd8 <OLED_goto>
     de4:	88 81       	ld	r24, Y
		OLED_printString(item->name);
     de6:	99 81       	ldd	r25, Y+1	; 0x01
     de8:	d2 d1       	rcall	.+932    	; 0x118e <OLED_printString>
     dea:	07 c0       	rjmp	.+14     	; 0xdfa <MENU_printMenuItem+0x2c>
     dec:	84 e7       	ldi	r24, 0x74	; 116
     dee:	93 e0       	ldi	r25, 0x03	; 3
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
     df0:	9f 93       	push	r25
     df2:	8f 93       	push	r24
     df4:	3d d4       	rcall	.+2170   	; 0x1670 <printf>
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <MENU_printMenu>:
	}
}
     e00:	cf 92       	push	r12
     e02:	df 92       	push	r13
     e04:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
     e06:	ff 92       	push	r15
     e08:	0f 93       	push	r16
     e0a:	1f 93       	push	r17
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	6c 01       	movw	r12, r24
     e12:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
     e14:	fe d0       	rcall	.+508    	; 0x1012 <OLED_clear>
     e16:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	10 d2       	rcall	.+1056   	; 0x123c <OLED_moveArrow>
     e1c:	1e 14       	cp	r1, r14
     e1e:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
     e20:	7c f4       	brge	.+30     	; 0xe40 <MENU_printMenu+0x40>
     e22:	86 01       	movw	r16, r12
     e24:	0c 5f       	subi	r16, 0xFC	; 252
     e26:	1f 4f       	sbci	r17, 0xFF	; 255
     e28:	c0 e0       	ldi	r28, 0x00	; 0
     e2a:	d0 e0       	ldi	r29, 0x00	; 0
     e2c:	be 01       	movw	r22, r28
     e2e:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
     e30:	81 91       	ld	r24, Z+
     e32:	91 91       	ld	r25, Z+
     e34:	8f 01       	movw	r16, r30
     e36:	cb df       	rcall	.-106    	; 0xdce <MENU_printMenuItem>
     e38:	21 96       	adiw	r28, 0x01	; 1
     e3a:	ce 15       	cp	r28, r14
     e3c:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
     e3e:	b1 f7       	brne	.-20     	; 0xe2c <MENU_printMenu+0x2c>
     e40:	d0 92 cc 03 	sts	0x03CC, r13
     e44:	c0 92 cb 03 	sts	0x03CB, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
     e48:	10 92 c7 03 	sts	0x03C7, r1
     e4c:	10 92 c6 03 	sts	0x03C6, r1
	
	currentPosition = 0;
     e50:	f6 01       	movw	r30, r12
     e52:	84 81       	ldd	r24, Z+4	; 0x04
     e54:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
     e56:	90 93 ca 03 	sts	0x03CA, r25
     e5a:	80 93 c9 03 	sts	0x03C9, r24
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
}
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	df 90       	pop	r13
     e6c:	cf 90       	pop	r12
     e6e:	08 95       	ret

00000e70 <MENU_moveUp>:
     e70:	20 91 c6 03 	lds	r18, 0x03C6
     e74:	30 91 c7 03 	lds	r19, 0x03C7
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
     e78:	12 16       	cp	r1, r18
     e7a:	13 06       	cpc	r1, r19
     e7c:	bc f4       	brge	.+46     	; 0xeac <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
     e7e:	c9 01       	movw	r24, r18
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	90 93 c7 03 	sts	0x03C7, r25
     e86:	80 93 c6 03 	sts	0x03C6, r24
		currItem = currentMenu->children[currentPosition];
     e8a:	e0 91 cb 03 	lds	r30, 0x03CB
     e8e:	f0 91 cc 03 	lds	r31, 0x03CC
     e92:	2f 5f       	subi	r18, 0xFF	; 255
     e94:	3f 4f       	sbci	r19, 0xFF	; 255
     e96:	22 0f       	add	r18, r18
     e98:	33 1f       	adc	r19, r19
     e9a:	e2 0f       	add	r30, r18
     e9c:	f3 1f       	adc	r31, r19
     e9e:	20 81       	ld	r18, Z
     ea0:	31 81       	ldd	r19, Z+1	; 0x01
     ea2:	30 93 ca 03 	sts	0x03CA, r19
     ea6:	20 93 c9 03 	sts	0x03C9, r18
		OLED_moveArrow(currentPosition);
     eaa:	c8 c1       	rjmp	.+912    	; 0x123c <OLED_moveArrow>
     eac:	08 95       	ret

00000eae <MENU_moveDown>:
     eae:	e0 91 cb 03 	lds	r30, 0x03CB
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
     eb2:	f0 91 cc 03 	lds	r31, 0x03CC
     eb6:	20 91 c6 03 	lds	r18, 0x03C6
     eba:	30 91 c7 03 	lds	r19, 0x03C7
     ebe:	82 81       	ldd	r24, Z+2	; 0x02
     ec0:	93 81       	ldd	r25, Z+3	; 0x03
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	28 17       	cp	r18, r24
     ec6:	39 07       	cpc	r19, r25
     ec8:	a4 f4       	brge	.+40     	; 0xef2 <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
     eca:	c9 01       	movw	r24, r18
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	90 93 c7 03 	sts	0x03C7, r25
     ed2:	80 93 c6 03 	sts	0x03C6, r24
		currItem = currentMenu->children[currentPosition];
     ed6:	2d 5f       	subi	r18, 0xFD	; 253
     ed8:	3f 4f       	sbci	r19, 0xFF	; 255
     eda:	22 0f       	add	r18, r18
     edc:	33 1f       	adc	r19, r19
     ede:	e2 0f       	add	r30, r18
     ee0:	f3 1f       	adc	r31, r19
     ee2:	20 81       	ld	r18, Z
     ee4:	31 81       	ldd	r19, Z+1	; 0x01
     ee6:	30 93 ca 03 	sts	0x03CA, r19
     eea:	20 93 c9 03 	sts	0x03C9, r18
		OLED_moveArrow(currentPosition);
     eee:	a6 c1       	rjmp	.+844    	; 0x123c <OLED_moveArrow>
     ef0:	08 95       	ret
     ef2:	10 92 c7 03 	sts	0x03C7, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
     ef6:	10 92 c6 03 	sts	0x03C6, r1
     efa:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
     efc:	95 81       	ldd	r25, Z+5	; 0x05
     efe:	90 93 ca 03 	sts	0x03CA, r25
     f02:	80 93 c9 03 	sts	0x03C9, r24
     f06:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	98 c1       	rjmp	.+816    	; 0x123c <OLED_moveArrow>
     f0c:	08 95       	ret

00000f0e <MENU_moveLeft>:
     f0e:	e0 91 cb 03 	lds	r30, 0x03CB
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
     f12:	f0 91 cc 03 	lds	r31, 0x03CC
     f16:	84 89       	ldd	r24, Z+20	; 0x14
     f18:	95 89       	ldd	r25, Z+21	; 0x15
     f1a:	00 97       	sbiw	r24, 0x00	; 0
     f1c:	21 f0       	breq	.+8      	; 0xf26 <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
     f1e:	fc 01       	movw	r30, r24
     f20:	62 81       	ldd	r22, Z+2	; 0x02
     f22:	73 81       	ldd	r23, Z+3	; 0x03
     f24:	6d cf       	rjmp	.-294    	; 0xe00 <MENU_printMenu>
     f26:	08 95       	ret

00000f28 <MENU_reactivate>:
     f28:	80 91 cb 03 	lds	r24, 0x03CB
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
     f2c:	90 91 cc 03 	lds	r25, 0x03CC
     f30:	fc 01       	movw	r30, r24
     f32:	62 81       	ldd	r22, Z+2	; 0x02
     f34:	73 81       	ldd	r23, Z+3	; 0x03
     f36:	64 df       	rcall	.-312    	; 0xe00 <MENU_printMenu>
     f38:	18 c0       	rjmp	.+48     	; 0xf6a <MENU_waitForInput>
	MENU_waitForInput();
     f3a:	08 95       	ret

00000f3c <MENU_moveRight>:
     f3c:	e0 91 c9 03 	lds	r30, 0x03C9
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
     f40:	f0 91 ca 03 	lds	r31, 0x03CA
     f44:	86 81       	ldd	r24, Z+6	; 0x06
     f46:	97 81       	ldd	r25, Z+7	; 0x07
     f48:	89 2b       	or	r24, r25
     f4a:	39 f0       	breq	.+14     	; 0xf5a <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
     f4c:	84 81       	ldd	r24, Z+4	; 0x04
     f4e:	95 81       	ldd	r25, Z+5	; 0x05
     f50:	fc 01       	movw	r30, r24
     f52:	62 81       	ldd	r22, Z+2	; 0x02
     f54:	73 81       	ldd	r23, Z+3	; 0x03
     f56:	54 cf       	rjmp	.-344    	; 0xe00 <MENU_printMenu>
     f58:	08 95       	ret
     f5a:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
     f5c:	f3 85       	ldd	r31, Z+11	; 0x0b
     f5e:	e0 2d       	mov	r30, r0
     f60:	30 97       	sbiw	r30, 0x00	; 0
     f62:	11 f0       	breq	.+4      	; 0xf68 <MENU_moveRight+0x2c>
     f64:	09 95       	icall
	{
		currItem->functionPtr();
     f66:	e0 cf       	rjmp	.-64     	; 0xf28 <MENU_reactivate>
		MENU_reactivate();
     f68:	08 95       	ret

00000f6a <MENU_waitForInput>:
     f6a:	80 91 c6 03 	lds	r24, 0x03C6
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
     f6e:	90 91 c7 03 	lds	r25, 0x03C7
     f72:	64 d1       	rcall	.+712    	; 0x123c <OLED_moveArrow>
     f74:	80 91 c8 03 	lds	r24, 0x03C8
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
     f78:	88 23       	and	r24, r24
     f7a:	f9 f0       	breq	.+62     	; 0xfba <MENU_waitForInput+0x50>
     f7c:	5c dd       	rcall	.-1352   	; 0xa36 <JOY_getDirection>
	{
		currDir = JOY_getDirection();
     f7e:	82 30       	cpi	r24, 0x02	; 2
     f80:	71 f0       	breq	.+28     	; 0xf9e <MENU_waitForInput+0x34>
		switch(currDir){
     f82:	18 f4       	brcc	.+6      	; 0xf8a <MENU_waitForInput+0x20>
     f84:	81 30       	cpi	r24, 0x01	; 1
     f86:	49 f0       	breq	.+18     	; 0xf9a <MENU_waitForInput+0x30>
     f88:	0b c0       	rjmp	.+22     	; 0xfa0 <MENU_waitForInput+0x36>
     f8a:	83 30       	cpi	r24, 0x03	; 3
     f8c:	21 f0       	breq	.+8      	; 0xf96 <MENU_waitForInput+0x2c>
     f8e:	84 30       	cpi	r24, 0x04	; 4
     f90:	39 f4       	brne	.+14     	; 0xfa0 <MENU_waitForInput+0x36>
     f92:	bd df       	rcall	.-134    	; 0xf0e <MENU_moveLeft>
     f94:	05 c0       	rjmp	.+10     	; 0xfa0 <MENU_waitForInput+0x36>
			case LEFT:
			MENU_moveLeft();
     f96:	d2 df       	rcall	.-92     	; 0xf3c <MENU_moveRight>
     f98:	03 c0       	rjmp	.+6      	; 0xfa0 <MENU_waitForInput+0x36>
			break;
     f9a:	6a df       	rcall	.-300    	; 0xe70 <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
     f9c:	01 c0       	rjmp	.+2      	; 0xfa0 <MENU_waitForInput+0x36>
     f9e:	87 df       	rcall	.-242    	; 0xeae <MENU_moveDown>
			break;
     fa0:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
     fa2:	8f e7       	ldi	r24, 0x7F	; 127
     fa4:	94 e0       	ldi	r25, 0x04	; 4
			break;
     fa6:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
     fa8:	80 40       	sbci	r24, 0x00	; 0
     faa:	90 40       	sbci	r25, 0x00	; 0
     fac:	e1 f7       	brne	.-8      	; 0xfa6 <MENU_waitForInput+0x3c>
     fae:	00 c0       	rjmp	.+0      	; 0xfb0 <MENU_waitForInput+0x46>
     fb0:	00 00       	nop
     fb2:	80 91 c8 03 	lds	r24, 0x03C8
     fb6:	81 11       	cpse	r24, r1
     fb8:	e1 cf       	rjmp	.-62     	; 0xf7c <MENU_waitForInput+0x12>
     fba:	08 95       	ret

00000fbc <MENU_activate>:
     fbc:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
     fbe:	80 93 c8 03 	sts	0x03C8, r24
     fc2:	33 de       	rcall	.-922    	; 0xc2a <MENU_buildMenus>
     fc4:	80 91 cf 03 	lds	r24, 0x03CF
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
     fc8:	90 91 d0 03 	lds	r25, 0x03D0
     fcc:	fc 01       	movw	r30, r24
     fce:	62 81       	ldd	r22, Z+2	; 0x02
     fd0:	73 81       	ldd	r23, Z+3	; 0x03
     fd2:	16 df       	rcall	.-468    	; 0xe00 <MENU_printMenu>
     fd4:	ca cf       	rjmp	.-108    	; 0xf6a <MENU_waitForInput>
     fd6:	08 95       	ret

00000fd8 <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
     fd8:	26 2f       	mov	r18, r22
     fda:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
     fdc:	75 95       	asr	r23
     fde:	67 95       	ror	r22
     fe0:	75 95       	asr	r23
     fe2:	67 95       	ror	r22
     fe4:	75 95       	asr	r23
     fe6:	67 95       	ror	r22
     fe8:	75 95       	asr	r23
     fea:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
     fec:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
     fee:	80 55       	subi	r24, 0x50	; 80
     ff0:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
     ff2:	e0 91 12 01 	lds	r30, 0x0112
     ff6:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ffa:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
     ffc:	e0 91 12 01 	lds	r30, 0x0112
    1000:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1004:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
    1006:	e0 91 12 01 	lds	r30, 0x0112
    100a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    100e:	60 83       	st	Z, r22
    1010:	08 95       	ret

00001012 <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
    1012:	1f 93       	push	r17
    1014:	cf 93       	push	r28
    1016:	df 93       	push	r29
    1018:	c1 e0       	ldi	r28, 0x01	; 1
    101a:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1020:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	d8 df       	rcall	.-80     	; 0xfd8 <OLED_goto>
    1028:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
    102a:	e0 91 10 01 	lds	r30, 0x0110
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    102e:	f0 91 11 01 	lds	r31, 0x0111
    1032:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1034:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1036:	80 38       	cpi	r24, 0x80	; 128
    1038:	c1 f7       	brne	.-16     	; 0x102a <OLED_clear+0x18>
    103a:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
    103c:	9d 2f       	mov	r25, r29
    103e:	21 96       	adiw	r28, 0x01	; 1
    1040:	c9 30       	cpi	r28, 0x09	; 9
    1042:	d1 05       	cpc	r29, r1
    1044:	71 f7       	brne	.-36     	; 0x1022 <OLED_clear+0x10>
    1046:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    1048:	cf 91       	pop	r28
    104a:	1f 91       	pop	r17
    104c:	08 95       	ret

0000104e <OLED_init>:
    104e:	e0 91 12 01 	lds	r30, 0x0112
//------------------------------------------------------------------------------
// Default initialization routine of the OLED display.

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
    1052:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1056:	8e ea       	ldi	r24, 0xAE	; 174
    1058:	80 83       	st	Z, r24
// Default initialization routine of the OLED display.

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
    105a:	e0 91 12 01 	lds	r30, 0x0112
    105e:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1062:	81 ea       	ldi	r24, 0xA1	; 161
    1064:	80 83       	st	Z, r24

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
    1066:	e0 91 12 01 	lds	r30, 0x0112
    106a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    106e:	8a ed       	ldi	r24, 0xDA	; 218
    1070:	80 83       	st	Z, r24
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
    1072:	e0 91 12 01 	lds	r30, 0x0112
    1076:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    107a:	82 e1       	ldi	r24, 0x12	; 18
    107c:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    107e:	e0 91 12 01 	lds	r30, 0x0112
    1082:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1086:	88 ec       	ldi	r24, 0xC8	; 200
    1088:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    108a:	e0 91 12 01 	lds	r30, 0x0112
    108e:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1092:	88 ea       	ldi	r24, 0xA8	; 168
    1094:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    1096:	e0 91 12 01 	lds	r30, 0x0112
    109a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    109e:	8f e3       	ldi	r24, 0x3F	; 63
    10a0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    10a2:	e0 91 12 01 	lds	r30, 0x0112
    10a6:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10aa:	85 ed       	ldi	r24, 0xD5	; 213
    10ac:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
    10ae:	e0 91 12 01 	lds	r30, 0x0112
    10b2:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10b6:	80 e8       	ldi	r24, 0x80	; 128
    10b8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    10ba:	e0 91 12 01 	lds	r30, 0x0112
    10be:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10c2:	81 e8       	ldi	r24, 0x81	; 129
    10c4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    10c6:	e0 91 12 01 	lds	r30, 0x0112
    10ca:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10ce:	80 e5       	ldi	r24, 0x50	; 80
    10d0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    10d2:	e0 91 12 01 	lds	r30, 0x0112
    10d6:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10da:	89 ed       	ldi	r24, 0xD9	; 217
    10dc:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
    10de:	e0 91 12 01 	lds	r30, 0x0112
    10e2:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10e6:	81 e2       	ldi	r24, 0x21	; 33
    10e8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    10ea:	e0 91 12 01 	lds	r30, 0x0112
    10ee:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10f2:	80 e2       	ldi	r24, 0x20	; 32
    10f4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    10f6:	e0 91 12 01 	lds	r30, 0x0112
    10fa:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    1102:	e0 91 12 01 	lds	r30, 0x0112
    1106:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    110a:	8b ed       	ldi	r24, 0xDB	; 219
    110c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    110e:	e0 91 12 01 	lds	r30, 0x0112
    1112:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1116:	80 e3       	ldi	r24, 0x30	; 48
    1118:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    111a:	e0 91 12 01 	lds	r30, 0x0112
    111e:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1122:	8d ea       	ldi	r24, 0xAD	; 173
    1124:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    1126:	e0 91 12 01 	lds	r30, 0x0112
    112a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    112e:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    1130:	e0 91 12 01 	lds	r30, 0x0112
    1134:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1138:	84 ea       	ldi	r24, 0xA4	; 164
    113a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    113c:	e0 91 12 01 	lds	r30, 0x0112
    1140:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1144:	86 ea       	ldi	r24, 0xA6	; 166
    1146:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    1148:	e0 91 12 01 	lds	r30, 0x0112
    114c:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1150:	8f ea       	ldi	r24, 0xAF	; 175
    1152:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    1154:	5e cf       	rjmp	.-324    	; 0x1012 <OLED_clear>
    1156:	08 95       	ret

00001158 <OLED_printCharacter>:
    1158:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	22 0f       	add	r18, r18
    1160:	33 1f       	adc	r19, r19
    1162:	22 0f       	add	r18, r18
    1164:	33 1f       	adc	r19, r19
    1166:	22 0f       	add	r18, r18
    1168:	33 1f       	adc	r19, r19
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	20 59       	subi	r18, 0x90	; 144
    1170:	3f 4f       	sbci	r19, 0xFF	; 255
    1172:	f9 01       	movw	r30, r18
    1174:	e8 0f       	add	r30, r24
    1176:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
    1178:	e4 91       	lpm	r30, Z
    117a:	a0 91 10 01 	lds	r26, 0x0110
    117e:	b0 91 11 01 	lds	r27, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1182:	ec 93       	st	X, r30
    1184:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
    1186:	88 30       	cpi	r24, 0x08	; 8
    1188:	91 05       	cpc	r25, r1
    118a:	99 f7       	brne	.-26     	; 0x1172 <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
    118c:	08 95       	ret

0000118e <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
    118e:	1f 93       	push	r17
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
    1196:	10 e0       	ldi	r17, 0x00	; 0
    1198:	06 c0       	rjmp	.+12     	; 0x11a6 <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
    119a:	fe 01       	movw	r30, r28
    119c:	e8 0f       	add	r30, r24
    119e:	f9 1f       	adc	r31, r25
    11a0:	80 81       	ld	r24, Z
    11a2:	da df       	rcall	.-76     	; 0x1158 <OLED_printCharacter>
    11a4:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
    11a6:	81 2f       	mov	r24, r17
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	fe 01       	movw	r30, r28
    11ac:	01 90       	ld	r0, Z+
    11ae:	00 20       	and	r0, r0
    11b0:	e9 f7       	brne	.-6      	; 0x11ac <OLED_printString+0x1e>
    11b2:	31 97       	sbiw	r30, 0x01	; 1
    11b4:	ec 1b       	sub	r30, r28
    11b6:	fd 0b       	sbc	r31, r29
    11b8:	8e 17       	cp	r24, r30
    11ba:	9f 07       	cpc	r25, r31
    11bc:	70 f3       	brcs	.-36     	; 0x119a <OLED_printString+0xc>
    11be:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	08 95       	ret

000011c6 <OLED_printArrow>:
    11c6:	e0 91 10 01 	lds	r30, 0x0110
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
    11ca:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    11ce:	88 e1       	ldi	r24, 0x18	; 24
    11d0:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    11d2:	e0 91 10 01 	lds	r30, 0x0110
    11d6:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    11da:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
    11dc:	e0 91 10 01 	lds	r30, 0x0110
    11e0:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    11e4:	9e e7       	ldi	r25, 0x7E	; 126
    11e6:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
    11e8:	e0 91 10 01 	lds	r30, 0x0110
    11ec:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    11f0:	9c e3       	ldi	r25, 0x3C	; 60
    11f2:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    11f4:	e0 91 10 01 	lds	r30, 0x0110
    11f8:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    11fc:	80 83       	st	Z, r24
    11fe:	08 95       	ret

00001200 <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	c1 e0       	ldi	r28, 0x01	; 1
    1208:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    120e:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	e1 de       	rcall	.-574    	; 0xfd8 <OLED_goto>
    1216:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1218:	e0 91 10 01 	lds	r30, 0x0110
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    121c:	f0 91 11 01 	lds	r31, 0x0111
    1220:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1222:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1224:	85 30       	cpi	r24, 0x05	; 5
    1226:	c1 f7       	brne	.-16     	; 0x1218 <OLED_clearArrow+0x18>
    1228:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    122a:	9d 2f       	mov	r25, r29
    122c:	21 96       	adiw	r28, 0x01	; 1
    122e:	c9 30       	cpi	r28, 0x09	; 9
    1230:	d1 05       	cpc	r29, r1
    1232:	71 f7       	brne	.-36     	; 0x1210 <OLED_clearArrow+0x10>
    1234:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    1236:	cf 91       	pop	r28
    1238:	1f 91       	pop	r17
    123a:	08 95       	ret

0000123c <OLED_moveArrow>:
    123c:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    123e:	df 93       	push	r29
    1240:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
    1242:	de df       	rcall	.-68     	; 0x1200 <OLED_clearArrow>
    1244:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	ce 01       	movw	r24, r28
    124a:	c6 de       	rcall	.-628    	; 0xfd8 <OLED_goto>
    124c:	bc df       	rcall	.-136    	; 0x11c6 <OLED_printArrow>
    124e:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
    1250:	cf 91       	pop	r28
    1252:	08 95       	ret

00001254 <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    1254:	10 92 d3 03 	sts	0x03D3, r1
	currentSliPosition.L_abs = 0;
    1258:	10 92 d4 03 	sts	0x03D4, r1
	currentSliPosition.R_per = 0;
    125c:	10 92 d5 03 	sts	0x03D5, r1
	currentSliPosition.L_per = 0;
    1260:	10 92 d6 03 	sts	0x03D6, r1
    1264:	08 95       	ret

00001266 <SPI_init>:
#define UNSELECT_CAN_CONTROLLER_SLAVE set_bit(PORTB, SS_CAN_CONTROLLER_PIN)


void SPI_init()
{
	printf("\n\nInitializing SPI\n");
    1266:	84 e8       	ldi	r24, 0x84	; 132
    1268:	93 e0       	ldi	r25, 0x03	; 3
    126a:	13 d2       	rcall	.+1062   	; 0x1692 <puts>
    126c:	80 eb       	ldi	r24, 0xB0	; 176
	// Set _SS, MOSI and SCK output, all others input
	//DDRB = (1<<SS_CAN_CONTROLLER_PIN) | (1<<DDB5) | (1<<DDB7);
	DDRB = (1<<DDB4) | (1<<DDB5) | (1<<DDB7);
    126e:	87 bb       	out	0x17, r24	; 23
    1270:	81 e5       	ldi	r24, 0x51	; 81

 	//Enable SPI, Master, set clock rate fck/16
 	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
    1272:	8d b9       	out	0x0d, r24	; 13
    1274:	c4 9a       	sbi	0x18, 4	; 24

	// clock rate fck/2
	//SPSR = (1<<SPI2X);

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORTB, SS_CAN_CONTROLLER_PIN);
    1276:	08 95       	ret

00001278 <SPI_send>:
    1278:	8f b9       	out	0x0f, r24	; 15

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
	printf("Sendind %d\n", cData);
    127a:	1f 92       	push	r1
    127c:	8f 93       	push	r24
    127e:	87 e9       	ldi	r24, 0x97	; 151
    1280:	93 e0       	ldi	r25, 0x03	; 3
    1282:	9f 93       	push	r25
    1284:	8f 93       	push	r24
    1286:	f4 d1       	rcall	.+1000   	; 0x1670 <printf>
    1288:	0f 90       	pop	r0

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	77 9b       	sbis	0x0e, 7	; 14
    1292:	fe cf       	rjmp	.-4      	; 0x1290 <SPI_send+0x18>
    1294:	08 95       	ret

00001296 <SPI_receive>:
}
    1296:	8f ef       	ldi	r24, 0xFF	; 255

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    1298:	ef df       	rcall	.-34     	; 0x1278 <SPI_send>
    129a:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    129c:	fe cf       	rjmp	.-4      	; 0x129a <SPI_receive+0x4>
    129e:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    12a0:	08 95       	ret

000012a2 <SPI_activateSlave>:

	return data;
}
    12a2:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    12a6:	c4 98       	cbi	0x18, 4	; 24
    12a8:	08 95       	ret

000012aa <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    12aa:	81 11       	cpse	r24, r1
    12ac:	01 c0       	rjmp	.+2      	; 0x12b0 <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    12ae:	c4 9a       	sbi	0x18, 4	; 24
    12b0:	08 95       	ret

000012b2 <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    12b2:	5d 9b       	sbis	0x0b, 5	; 11
    12b4:	fe cf       	rjmp	.-4      	; 0x12b2 <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    12b6:	8c b9       	out	0x0c, r24	; 12
    12b8:	08 95       	ret

000012ba <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    12ba:	5f 9b       	sbis	0x0b, 7	; 11
    12bc:	fe cf       	rjmp	.-4      	; 0x12ba <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    12be:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
    12c0:	08 95       	ret

000012c2 <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    12c2:	ef 92       	push	r14
    12c4:	ff 92       	push	r15
    12c6:	0f 93       	push	r16
    12c8:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    12ca:	bb 27       	eor	r27, r27
    12cc:	a1 2f       	mov	r26, r17
    12ce:	90 2f       	mov	r25, r16
    12d0:	8f 2d       	mov	r24, r15
    12d2:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    12d4:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    12d6:	88 e1       	ldi	r24, 0x18	; 24
    12d8:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    12da:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    12dc:	8e e8       	ldi	r24, 0x8E	; 142
    12de:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    12e0:	6d e5       	ldi	r22, 0x5D	; 93
    12e2:	79 e0       	ldi	r23, 0x09	; 9
    12e4:	89 e5       	ldi	r24, 0x59	; 89
    12e6:	99 e0       	ldi	r25, 0x09	; 9
    12e8:	79 d1       	rcall	.+754    	; 0x15dc <fdevopen>
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	ef 90       	pop	r14
    12f2:	08 95       	ret

000012f4 <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    12f4:	9b 01       	movw	r18, r22
	
	switch(channel){
    12f6:	82 30       	cpi	r24, 0x02	; 2
    12f8:	69 f0       	breq	.+26     	; 0x1314 <ADC_request+0x20>
    12fa:	18 f4       	brcc	.+6      	; 0x1302 <ADC_request+0xe>
    12fc:	81 30       	cpi	r24, 0x01	; 1
    12fe:	31 f0       	breq	.+12     	; 0x130c <ADC_request+0x18>
    1300:	15 c0       	rjmp	.+42     	; 0x132c <ADC_request+0x38>
    1302:	83 30       	cpi	r24, 0x03	; 3
    1304:	59 f0       	breq	.+22     	; 0x131c <ADC_request+0x28>
    1306:	84 30       	cpi	r24, 0x04	; 4
    1308:	69 f0       	breq	.+26     	; 0x1324 <ADC_request+0x30>
    130a:	10 c0       	rjmp	.+32     	; 0x132c <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    130c:	64 e0       	ldi	r22, 0x04	; 4
    130e:	c9 01       	movw	r24, r18
    1310:	cf c9       	rjmp	.-3170   	; 0x6b0 <saveToAddress>
    1312:	08 95       	ret
			break;
    1314:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    1316:	c9 01       	movw	r24, r18
    1318:	cb c9       	rjmp	.-3178   	; 0x6b0 <saveToAddress>
    131a:	08 95       	ret
    131c:	66 e0       	ldi	r22, 0x06	; 6
			break;
    131e:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    1320:	c7 c9       	rjmp	.-3186   	; 0x6b0 <saveToAddress>
    1322:	08 95       	ret
    1324:	67 e0       	ldi	r22, 0x07	; 7
    1326:	c9 01       	movw	r24, r18
			break;
    1328:	c3 c9       	rjmp	.-3194   	; 0x6b0 <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    132a:	08 95       	ret
    132c:	83 ea       	ldi	r24, 0xA3	; 163
    132e:	93 e0       	ldi	r25, 0x03	; 3
    1330:	9f 93       	push	r25
			break;
    1332:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    1334:	9d d1       	rcall	.+826    	; 0x1670 <printf>
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	08 95       	ret

0000133c <ADC_read>:
    133c:	b6 c9       	rjmp	.-3220   	; 0x6aa <readFromAddress>
    133e:	08 95       	ret

00001340 <__divmodhi4>:
			break;
    1340:	97 fb       	bst	r25, 7
    1342:	07 2e       	mov	r0, r23
    1344:	16 f4       	brtc	.+4      	; 0x134a <__divmodhi4+0xa>
    1346:	00 94       	com	r0
    1348:	06 d0       	rcall	.+12     	; 0x1356 <__divmodhi4_neg1>
    134a:	77 fd       	sbrc	r23, 7
    134c:	08 d0       	rcall	.+16     	; 0x135e <__divmodhi4_neg2>
    134e:	0b d0       	rcall	.+22     	; 0x1366 <__udivmodhi4>
    1350:	07 fc       	sbrc	r0, 7
    1352:	05 d0       	rcall	.+10     	; 0x135e <__divmodhi4_neg2>
    1354:	3e f4       	brtc	.+14     	; 0x1364 <__divmodhi4_exit>

00001356 <__divmodhi4_neg1>:
    1356:	90 95       	com	r25
    1358:	81 95       	neg	r24
    135a:	9f 4f       	sbci	r25, 0xFF	; 255
    135c:	08 95       	ret

0000135e <__divmodhi4_neg2>:
    135e:	70 95       	com	r23
    1360:	61 95       	neg	r22
    1362:	7f 4f       	sbci	r23, 0xFF	; 255

00001364 <__divmodhi4_exit>:
    1364:	08 95       	ret

00001366 <__udivmodhi4>:
    1366:	aa 1b       	sub	r26, r26
    1368:	bb 1b       	sub	r27, r27
    136a:	51 e1       	ldi	r21, 0x11	; 17
    136c:	07 c0       	rjmp	.+14     	; 0x137c <__udivmodhi4_ep>

0000136e <__udivmodhi4_loop>:
    136e:	aa 1f       	adc	r26, r26
    1370:	bb 1f       	adc	r27, r27
    1372:	a6 17       	cp	r26, r22
    1374:	b7 07       	cpc	r27, r23
    1376:	10 f0       	brcs	.+4      	; 0x137c <__udivmodhi4_ep>
    1378:	a6 1b       	sub	r26, r22
    137a:	b7 0b       	sbc	r27, r23

0000137c <__udivmodhi4_ep>:
    137c:	88 1f       	adc	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	5a 95       	dec	r21
    1382:	a9 f7       	brne	.-22     	; 0x136e <__udivmodhi4_loop>
    1384:	80 95       	com	r24
    1386:	90 95       	com	r25
    1388:	bc 01       	movw	r22, r24
    138a:	cd 01       	movw	r24, r26
    138c:	08 95       	ret

0000138e <malloc>:
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	82 30       	cpi	r24, 0x02	; 2
    1394:	91 05       	cpc	r25, r1
    1396:	10 f4       	brcc	.+4      	; 0x139c <malloc+0xe>
    1398:	82 e0       	ldi	r24, 0x02	; 2
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	e0 91 d9 03 	lds	r30, 0x03D9
    13a0:	f0 91 da 03 	lds	r31, 0x03DA
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	a0 e0       	ldi	r26, 0x00	; 0
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	30 97       	sbiw	r30, 0x00	; 0
    13ae:	39 f1       	breq	.+78     	; 0x13fe <malloc+0x70>
    13b0:	40 81       	ld	r20, Z
    13b2:	51 81       	ldd	r21, Z+1	; 0x01
    13b4:	48 17       	cp	r20, r24
    13b6:	59 07       	cpc	r21, r25
    13b8:	b8 f0       	brcs	.+46     	; 0x13e8 <malloc+0x5a>
    13ba:	48 17       	cp	r20, r24
    13bc:	59 07       	cpc	r21, r25
    13be:	71 f4       	brne	.+28     	; 0x13dc <malloc+0x4e>
    13c0:	82 81       	ldd	r24, Z+2	; 0x02
    13c2:	93 81       	ldd	r25, Z+3	; 0x03
    13c4:	10 97       	sbiw	r26, 0x00	; 0
    13c6:	29 f0       	breq	.+10     	; 0x13d2 <malloc+0x44>
    13c8:	13 96       	adiw	r26, 0x03	; 3
    13ca:	9c 93       	st	X, r25
    13cc:	8e 93       	st	-X, r24
    13ce:	12 97       	sbiw	r26, 0x02	; 2
    13d0:	2c c0       	rjmp	.+88     	; 0x142a <malloc+0x9c>
    13d2:	90 93 da 03 	sts	0x03DA, r25
    13d6:	80 93 d9 03 	sts	0x03D9, r24
    13da:	27 c0       	rjmp	.+78     	; 0x142a <malloc+0x9c>
    13dc:	21 15       	cp	r18, r1
    13de:	31 05       	cpc	r19, r1
    13e0:	31 f0       	breq	.+12     	; 0x13ee <malloc+0x60>
    13e2:	42 17       	cp	r20, r18
    13e4:	53 07       	cpc	r21, r19
    13e6:	18 f0       	brcs	.+6      	; 0x13ee <malloc+0x60>
    13e8:	a9 01       	movw	r20, r18
    13ea:	db 01       	movw	r26, r22
    13ec:	01 c0       	rjmp	.+2      	; 0x13f0 <malloc+0x62>
    13ee:	ef 01       	movw	r28, r30
    13f0:	9a 01       	movw	r18, r20
    13f2:	bd 01       	movw	r22, r26
    13f4:	df 01       	movw	r26, r30
    13f6:	02 80       	ldd	r0, Z+2	; 0x02
    13f8:	f3 81       	ldd	r31, Z+3	; 0x03
    13fa:	e0 2d       	mov	r30, r0
    13fc:	d7 cf       	rjmp	.-82     	; 0x13ac <malloc+0x1e>
    13fe:	21 15       	cp	r18, r1
    1400:	31 05       	cpc	r19, r1
    1402:	f9 f0       	breq	.+62     	; 0x1442 <malloc+0xb4>
    1404:	28 1b       	sub	r18, r24
    1406:	39 0b       	sbc	r19, r25
    1408:	24 30       	cpi	r18, 0x04	; 4
    140a:	31 05       	cpc	r19, r1
    140c:	80 f4       	brcc	.+32     	; 0x142e <malloc+0xa0>
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	9b 81       	ldd	r25, Y+3	; 0x03
    1412:	61 15       	cp	r22, r1
    1414:	71 05       	cpc	r23, r1
    1416:	21 f0       	breq	.+8      	; 0x1420 <malloc+0x92>
    1418:	fb 01       	movw	r30, r22
    141a:	93 83       	std	Z+3, r25	; 0x03
    141c:	82 83       	std	Z+2, r24	; 0x02
    141e:	04 c0       	rjmp	.+8      	; 0x1428 <malloc+0x9a>
    1420:	90 93 da 03 	sts	0x03DA, r25
    1424:	80 93 d9 03 	sts	0x03D9, r24
    1428:	fe 01       	movw	r30, r28
    142a:	32 96       	adiw	r30, 0x02	; 2
    142c:	44 c0       	rjmp	.+136    	; 0x14b6 <malloc+0x128>
    142e:	fe 01       	movw	r30, r28
    1430:	e2 0f       	add	r30, r18
    1432:	f3 1f       	adc	r31, r19
    1434:	81 93       	st	Z+, r24
    1436:	91 93       	st	Z+, r25
    1438:	22 50       	subi	r18, 0x02	; 2
    143a:	31 09       	sbc	r19, r1
    143c:	39 83       	std	Y+1, r19	; 0x01
    143e:	28 83       	st	Y, r18
    1440:	3a c0       	rjmp	.+116    	; 0x14b6 <malloc+0x128>
    1442:	20 91 d7 03 	lds	r18, 0x03D7
    1446:	30 91 d8 03 	lds	r19, 0x03D8
    144a:	23 2b       	or	r18, r19
    144c:	41 f4       	brne	.+16     	; 0x145e <malloc+0xd0>
    144e:	20 91 02 01 	lds	r18, 0x0102
    1452:	30 91 03 01 	lds	r19, 0x0103
    1456:	30 93 d8 03 	sts	0x03D8, r19
    145a:	20 93 d7 03 	sts	0x03D7, r18
    145e:	20 91 00 01 	lds	r18, 0x0100
    1462:	30 91 01 01 	lds	r19, 0x0101
    1466:	21 15       	cp	r18, r1
    1468:	31 05       	cpc	r19, r1
    146a:	41 f4       	brne	.+16     	; 0x147c <malloc+0xee>
    146c:	2d b7       	in	r18, 0x3d	; 61
    146e:	3e b7       	in	r19, 0x3e	; 62
    1470:	40 91 04 01 	lds	r20, 0x0104
    1474:	50 91 05 01 	lds	r21, 0x0105
    1478:	24 1b       	sub	r18, r20
    147a:	35 0b       	sbc	r19, r21
    147c:	e0 91 d7 03 	lds	r30, 0x03D7
    1480:	f0 91 d8 03 	lds	r31, 0x03D8
    1484:	e2 17       	cp	r30, r18
    1486:	f3 07       	cpc	r31, r19
    1488:	a0 f4       	brcc	.+40     	; 0x14b2 <malloc+0x124>
    148a:	2e 1b       	sub	r18, r30
    148c:	3f 0b       	sbc	r19, r31
    148e:	28 17       	cp	r18, r24
    1490:	39 07       	cpc	r19, r25
    1492:	78 f0       	brcs	.+30     	; 0x14b2 <malloc+0x124>
    1494:	ac 01       	movw	r20, r24
    1496:	4e 5f       	subi	r20, 0xFE	; 254
    1498:	5f 4f       	sbci	r21, 0xFF	; 255
    149a:	24 17       	cp	r18, r20
    149c:	35 07       	cpc	r19, r21
    149e:	48 f0       	brcs	.+18     	; 0x14b2 <malloc+0x124>
    14a0:	4e 0f       	add	r20, r30
    14a2:	5f 1f       	adc	r21, r31
    14a4:	50 93 d8 03 	sts	0x03D8, r21
    14a8:	40 93 d7 03 	sts	0x03D7, r20
    14ac:	81 93       	st	Z+, r24
    14ae:	91 93       	st	Z+, r25
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <malloc+0x128>
    14b2:	e0 e0       	ldi	r30, 0x00	; 0
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	cf 01       	movw	r24, r30
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	08 95       	ret

000014be <free>:
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	00 97       	sbiw	r24, 0x00	; 0
    14c4:	09 f4       	brne	.+2      	; 0x14c8 <free+0xa>
    14c6:	87 c0       	rjmp	.+270    	; 0x15d6 <free+0x118>
    14c8:	fc 01       	movw	r30, r24
    14ca:	32 97       	sbiw	r30, 0x02	; 2
    14cc:	13 82       	std	Z+3, r1	; 0x03
    14ce:	12 82       	std	Z+2, r1	; 0x02
    14d0:	c0 91 d9 03 	lds	r28, 0x03D9
    14d4:	d0 91 da 03 	lds	r29, 0x03DA
    14d8:	20 97       	sbiw	r28, 0x00	; 0
    14da:	81 f4       	brne	.+32     	; 0x14fc <free+0x3e>
    14dc:	20 81       	ld	r18, Z
    14de:	31 81       	ldd	r19, Z+1	; 0x01
    14e0:	28 0f       	add	r18, r24
    14e2:	39 1f       	adc	r19, r25
    14e4:	80 91 d7 03 	lds	r24, 0x03D7
    14e8:	90 91 d8 03 	lds	r25, 0x03D8
    14ec:	82 17       	cp	r24, r18
    14ee:	93 07       	cpc	r25, r19
    14f0:	79 f5       	brne	.+94     	; 0x1550 <free+0x92>
    14f2:	f0 93 d8 03 	sts	0x03D8, r31
    14f6:	e0 93 d7 03 	sts	0x03D7, r30
    14fa:	6d c0       	rjmp	.+218    	; 0x15d6 <free+0x118>
    14fc:	de 01       	movw	r26, r28
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	ae 17       	cp	r26, r30
    1504:	bf 07       	cpc	r27, r31
    1506:	50 f4       	brcc	.+20     	; 0x151c <free+0x5e>
    1508:	12 96       	adiw	r26, 0x02	; 2
    150a:	4d 91       	ld	r20, X+
    150c:	5c 91       	ld	r21, X
    150e:	13 97       	sbiw	r26, 0x03	; 3
    1510:	9d 01       	movw	r18, r26
    1512:	41 15       	cp	r20, r1
    1514:	51 05       	cpc	r21, r1
    1516:	09 f1       	breq	.+66     	; 0x155a <free+0x9c>
    1518:	da 01       	movw	r26, r20
    151a:	f3 cf       	rjmp	.-26     	; 0x1502 <free+0x44>
    151c:	b3 83       	std	Z+3, r27	; 0x03
    151e:	a2 83       	std	Z+2, r26	; 0x02
    1520:	40 81       	ld	r20, Z
    1522:	51 81       	ldd	r21, Z+1	; 0x01
    1524:	84 0f       	add	r24, r20
    1526:	95 1f       	adc	r25, r21
    1528:	8a 17       	cp	r24, r26
    152a:	9b 07       	cpc	r25, r27
    152c:	71 f4       	brne	.+28     	; 0x154a <free+0x8c>
    152e:	8d 91       	ld	r24, X+
    1530:	9c 91       	ld	r25, X
    1532:	11 97       	sbiw	r26, 0x01	; 1
    1534:	84 0f       	add	r24, r20
    1536:	95 1f       	adc	r25, r21
    1538:	02 96       	adiw	r24, 0x02	; 2
    153a:	91 83       	std	Z+1, r25	; 0x01
    153c:	80 83       	st	Z, r24
    153e:	12 96       	adiw	r26, 0x02	; 2
    1540:	8d 91       	ld	r24, X+
    1542:	9c 91       	ld	r25, X
    1544:	13 97       	sbiw	r26, 0x03	; 3
    1546:	93 83       	std	Z+3, r25	; 0x03
    1548:	82 83       	std	Z+2, r24	; 0x02
    154a:	21 15       	cp	r18, r1
    154c:	31 05       	cpc	r19, r1
    154e:	29 f4       	brne	.+10     	; 0x155a <free+0x9c>
    1550:	f0 93 da 03 	sts	0x03DA, r31
    1554:	e0 93 d9 03 	sts	0x03D9, r30
    1558:	3e c0       	rjmp	.+124    	; 0x15d6 <free+0x118>
    155a:	d9 01       	movw	r26, r18
    155c:	13 96       	adiw	r26, 0x03	; 3
    155e:	fc 93       	st	X, r31
    1560:	ee 93       	st	-X, r30
    1562:	12 97       	sbiw	r26, 0x02	; 2
    1564:	4d 91       	ld	r20, X+
    1566:	5d 91       	ld	r21, X+
    1568:	a4 0f       	add	r26, r20
    156a:	b5 1f       	adc	r27, r21
    156c:	ea 17       	cp	r30, r26
    156e:	fb 07       	cpc	r31, r27
    1570:	79 f4       	brne	.+30     	; 0x1590 <free+0xd2>
    1572:	80 81       	ld	r24, Z
    1574:	91 81       	ldd	r25, Z+1	; 0x01
    1576:	84 0f       	add	r24, r20
    1578:	95 1f       	adc	r25, r21
    157a:	02 96       	adiw	r24, 0x02	; 2
    157c:	d9 01       	movw	r26, r18
    157e:	11 96       	adiw	r26, 0x01	; 1
    1580:	9c 93       	st	X, r25
    1582:	8e 93       	st	-X, r24
    1584:	82 81       	ldd	r24, Z+2	; 0x02
    1586:	93 81       	ldd	r25, Z+3	; 0x03
    1588:	13 96       	adiw	r26, 0x03	; 3
    158a:	9c 93       	st	X, r25
    158c:	8e 93       	st	-X, r24
    158e:	12 97       	sbiw	r26, 0x02	; 2
    1590:	e0 e0       	ldi	r30, 0x00	; 0
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	8a 81       	ldd	r24, Y+2	; 0x02
    1596:	9b 81       	ldd	r25, Y+3	; 0x03
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	19 f0       	breq	.+6      	; 0x15a2 <free+0xe4>
    159c:	fe 01       	movw	r30, r28
    159e:	ec 01       	movw	r28, r24
    15a0:	f9 cf       	rjmp	.-14     	; 0x1594 <free+0xd6>
    15a2:	ce 01       	movw	r24, r28
    15a4:	02 96       	adiw	r24, 0x02	; 2
    15a6:	28 81       	ld	r18, Y
    15a8:	39 81       	ldd	r19, Y+1	; 0x01
    15aa:	82 0f       	add	r24, r18
    15ac:	93 1f       	adc	r25, r19
    15ae:	20 91 d7 03 	lds	r18, 0x03D7
    15b2:	30 91 d8 03 	lds	r19, 0x03D8
    15b6:	28 17       	cp	r18, r24
    15b8:	39 07       	cpc	r19, r25
    15ba:	69 f4       	brne	.+26     	; 0x15d6 <free+0x118>
    15bc:	30 97       	sbiw	r30, 0x00	; 0
    15be:	29 f4       	brne	.+10     	; 0x15ca <free+0x10c>
    15c0:	10 92 da 03 	sts	0x03DA, r1
    15c4:	10 92 d9 03 	sts	0x03D9, r1
    15c8:	02 c0       	rjmp	.+4      	; 0x15ce <free+0x110>
    15ca:	13 82       	std	Z+3, r1	; 0x03
    15cc:	12 82       	std	Z+2, r1	; 0x02
    15ce:	d0 93 d8 03 	sts	0x03D8, r29
    15d2:	c0 93 d7 03 	sts	0x03D7, r28
    15d6:	df 91       	pop	r29
    15d8:	cf 91       	pop	r28
    15da:	08 95       	ret

000015dc <fdevopen>:
    15dc:	0f 93       	push	r16
    15de:	1f 93       	push	r17
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	ec 01       	movw	r28, r24
    15e6:	8b 01       	movw	r16, r22
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	31 f4       	brne	.+12     	; 0x15f8 <fdevopen+0x1c>
    15ec:	61 15       	cp	r22, r1
    15ee:	71 05       	cpc	r23, r1
    15f0:	19 f4       	brne	.+6      	; 0x15f8 <fdevopen+0x1c>
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	37 c0       	rjmp	.+110    	; 0x1666 <fdevopen+0x8a>
    15f8:	6e e0       	ldi	r22, 0x0E	; 14
    15fa:	70 e0       	ldi	r23, 0x00	; 0
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	38 d2       	rcall	.+1136   	; 0x1a72 <calloc>
    1602:	fc 01       	movw	r30, r24
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	a9 f3       	breq	.-22     	; 0x15f2 <fdevopen+0x16>
    1608:	80 e8       	ldi	r24, 0x80	; 128
    160a:	83 83       	std	Z+3, r24	; 0x03
    160c:	01 15       	cp	r16, r1
    160e:	11 05       	cpc	r17, r1
    1610:	71 f0       	breq	.+28     	; 0x162e <fdevopen+0x52>
    1612:	13 87       	std	Z+11, r17	; 0x0b
    1614:	02 87       	std	Z+10, r16	; 0x0a
    1616:	81 e8       	ldi	r24, 0x81	; 129
    1618:	83 83       	std	Z+3, r24	; 0x03
    161a:	80 91 db 03 	lds	r24, 0x03DB
    161e:	90 91 dc 03 	lds	r25, 0x03DC
    1622:	89 2b       	or	r24, r25
    1624:	21 f4       	brne	.+8      	; 0x162e <fdevopen+0x52>
    1626:	f0 93 dc 03 	sts	0x03DC, r31
    162a:	e0 93 db 03 	sts	0x03DB, r30
    162e:	20 97       	sbiw	r28, 0x00	; 0
    1630:	c9 f0       	breq	.+50     	; 0x1664 <fdevopen+0x88>
    1632:	d1 87       	std	Z+9, r29	; 0x09
    1634:	c0 87       	std	Z+8, r28	; 0x08
    1636:	83 81       	ldd	r24, Z+3	; 0x03
    1638:	82 60       	ori	r24, 0x02	; 2
    163a:	83 83       	std	Z+3, r24	; 0x03
    163c:	80 91 dd 03 	lds	r24, 0x03DD
    1640:	90 91 de 03 	lds	r25, 0x03DE
    1644:	89 2b       	or	r24, r25
    1646:	71 f4       	brne	.+28     	; 0x1664 <fdevopen+0x88>
    1648:	f0 93 de 03 	sts	0x03DE, r31
    164c:	e0 93 dd 03 	sts	0x03DD, r30
    1650:	80 91 df 03 	lds	r24, 0x03DF
    1654:	90 91 e0 03 	lds	r25, 0x03E0
    1658:	89 2b       	or	r24, r25
    165a:	21 f4       	brne	.+8      	; 0x1664 <fdevopen+0x88>
    165c:	f0 93 e0 03 	sts	0x03E0, r31
    1660:	e0 93 df 03 	sts	0x03DF, r30
    1664:	cf 01       	movw	r24, r30
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	1f 91       	pop	r17
    166c:	0f 91       	pop	r16
    166e:	08 95       	ret

00001670 <printf>:
    1670:	a0 e0       	ldi	r26, 0x00	; 0
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	ed e3       	ldi	r30, 0x3D	; 61
    1676:	fb e0       	ldi	r31, 0x0B	; 11
    1678:	d3 c2       	rjmp	.+1446   	; 0x1c20 <__prologue_saves__+0x20>
    167a:	fe 01       	movw	r30, r28
    167c:	35 96       	adiw	r30, 0x05	; 5
    167e:	61 91       	ld	r22, Z+
    1680:	71 91       	ld	r23, Z+
    1682:	af 01       	movw	r20, r30
    1684:	80 91 dd 03 	lds	r24, 0x03DD
    1688:	90 91 de 03 	lds	r25, 0x03DE
    168c:	2f d0       	rcall	.+94     	; 0x16ec <vfprintf>
    168e:	e2 e0       	ldi	r30, 0x02	; 2
    1690:	e3 c2       	rjmp	.+1478   	; 0x1c58 <__epilogue_restores__+0x20>

00001692 <puts>:
    1692:	0f 93       	push	r16
    1694:	1f 93       	push	r17
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	e0 91 dd 03 	lds	r30, 0x03DD
    169e:	f0 91 de 03 	lds	r31, 0x03DE
    16a2:	23 81       	ldd	r18, Z+3	; 0x03
    16a4:	21 ff       	sbrs	r18, 1
    16a6:	1b c0       	rjmp	.+54     	; 0x16de <puts+0x4c>
    16a8:	ec 01       	movw	r28, r24
    16aa:	00 e0       	ldi	r16, 0x00	; 0
    16ac:	10 e0       	ldi	r17, 0x00	; 0
    16ae:	89 91       	ld	r24, Y+
    16b0:	60 91 dd 03 	lds	r22, 0x03DD
    16b4:	70 91 de 03 	lds	r23, 0x03DE
    16b8:	db 01       	movw	r26, r22
    16ba:	18 96       	adiw	r26, 0x08	; 8
    16bc:	ed 91       	ld	r30, X+
    16be:	fc 91       	ld	r31, X
    16c0:	19 97       	sbiw	r26, 0x09	; 9
    16c2:	88 23       	and	r24, r24
    16c4:	31 f0       	breq	.+12     	; 0x16d2 <puts+0x40>
    16c6:	09 95       	icall
    16c8:	89 2b       	or	r24, r25
    16ca:	89 f3       	breq	.-30     	; 0x16ae <puts+0x1c>
    16cc:	0f ef       	ldi	r16, 0xFF	; 255
    16ce:	1f ef       	ldi	r17, 0xFF	; 255
    16d0:	ee cf       	rjmp	.-36     	; 0x16ae <puts+0x1c>
    16d2:	8a e0       	ldi	r24, 0x0A	; 10
    16d4:	09 95       	icall
    16d6:	89 2b       	or	r24, r25
    16d8:	11 f4       	brne	.+4      	; 0x16de <puts+0x4c>
    16da:	c8 01       	movw	r24, r16
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <puts+0x50>
    16de:	8f ef       	ldi	r24, 0xFF	; 255
    16e0:	9f ef       	ldi	r25, 0xFF	; 255
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	0f 91       	pop	r16
    16ea:	08 95       	ret

000016ec <vfprintf>:
    16ec:	ac e0       	ldi	r26, 0x0C	; 12
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	eb e7       	ldi	r30, 0x7B	; 123
    16f2:	fb e0       	ldi	r31, 0x0B	; 11
    16f4:	85 c2       	rjmp	.+1290   	; 0x1c00 <__prologue_saves__>
    16f6:	7c 01       	movw	r14, r24
    16f8:	6b 01       	movw	r12, r22
    16fa:	8a 01       	movw	r16, r20
    16fc:	fc 01       	movw	r30, r24
    16fe:	17 82       	std	Z+7, r1	; 0x07
    1700:	16 82       	std	Z+6, r1	; 0x06
    1702:	83 81       	ldd	r24, Z+3	; 0x03
    1704:	81 ff       	sbrs	r24, 1
    1706:	b0 c1       	rjmp	.+864    	; 0x1a68 <vfprintf+0x37c>
    1708:	ce 01       	movw	r24, r28
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	4c 01       	movw	r8, r24
    170e:	f7 01       	movw	r30, r14
    1710:	93 81       	ldd	r25, Z+3	; 0x03
    1712:	f6 01       	movw	r30, r12
    1714:	93 fd       	sbrc	r25, 3
    1716:	85 91       	lpm	r24, Z+
    1718:	93 ff       	sbrs	r25, 3
    171a:	81 91       	ld	r24, Z+
    171c:	6f 01       	movw	r12, r30
    171e:	88 23       	and	r24, r24
    1720:	09 f4       	brne	.+2      	; 0x1724 <vfprintf+0x38>
    1722:	9e c1       	rjmp	.+828    	; 0x1a60 <vfprintf+0x374>
    1724:	85 32       	cpi	r24, 0x25	; 37
    1726:	39 f4       	brne	.+14     	; 0x1736 <vfprintf+0x4a>
    1728:	93 fd       	sbrc	r25, 3
    172a:	85 91       	lpm	r24, Z+
    172c:	93 ff       	sbrs	r25, 3
    172e:	81 91       	ld	r24, Z+
    1730:	6f 01       	movw	r12, r30
    1732:	85 32       	cpi	r24, 0x25	; 37
    1734:	21 f4       	brne	.+8      	; 0x173e <vfprintf+0x52>
    1736:	b7 01       	movw	r22, r14
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	d2 d1       	rcall	.+932    	; 0x1ae0 <fputc>
    173c:	e8 cf       	rjmp	.-48     	; 0x170e <vfprintf+0x22>
    173e:	51 2c       	mov	r5, r1
    1740:	31 2c       	mov	r3, r1
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	20 32       	cpi	r18, 0x20	; 32
    1746:	a0 f4       	brcc	.+40     	; 0x1770 <vfprintf+0x84>
    1748:	8b 32       	cpi	r24, 0x2B	; 43
    174a:	69 f0       	breq	.+26     	; 0x1766 <vfprintf+0x7a>
    174c:	30 f4       	brcc	.+12     	; 0x175a <vfprintf+0x6e>
    174e:	80 32       	cpi	r24, 0x20	; 32
    1750:	59 f0       	breq	.+22     	; 0x1768 <vfprintf+0x7c>
    1752:	83 32       	cpi	r24, 0x23	; 35
    1754:	69 f4       	brne	.+26     	; 0x1770 <vfprintf+0x84>
    1756:	20 61       	ori	r18, 0x10	; 16
    1758:	2c c0       	rjmp	.+88     	; 0x17b2 <vfprintf+0xc6>
    175a:	8d 32       	cpi	r24, 0x2D	; 45
    175c:	39 f0       	breq	.+14     	; 0x176c <vfprintf+0x80>
    175e:	80 33       	cpi	r24, 0x30	; 48
    1760:	39 f4       	brne	.+14     	; 0x1770 <vfprintf+0x84>
    1762:	21 60       	ori	r18, 0x01	; 1
    1764:	26 c0       	rjmp	.+76     	; 0x17b2 <vfprintf+0xc6>
    1766:	22 60       	ori	r18, 0x02	; 2
    1768:	24 60       	ori	r18, 0x04	; 4
    176a:	23 c0       	rjmp	.+70     	; 0x17b2 <vfprintf+0xc6>
    176c:	28 60       	ori	r18, 0x08	; 8
    176e:	21 c0       	rjmp	.+66     	; 0x17b2 <vfprintf+0xc6>
    1770:	27 fd       	sbrc	r18, 7
    1772:	27 c0       	rjmp	.+78     	; 0x17c2 <vfprintf+0xd6>
    1774:	30 ed       	ldi	r19, 0xD0	; 208
    1776:	38 0f       	add	r19, r24
    1778:	3a 30       	cpi	r19, 0x0A	; 10
    177a:	78 f4       	brcc	.+30     	; 0x179a <vfprintf+0xae>
    177c:	26 ff       	sbrs	r18, 6
    177e:	06 c0       	rjmp	.+12     	; 0x178c <vfprintf+0xa0>
    1780:	fa e0       	ldi	r31, 0x0A	; 10
    1782:	5f 9e       	mul	r5, r31
    1784:	30 0d       	add	r19, r0
    1786:	11 24       	eor	r1, r1
    1788:	53 2e       	mov	r5, r19
    178a:	13 c0       	rjmp	.+38     	; 0x17b2 <vfprintf+0xc6>
    178c:	8a e0       	ldi	r24, 0x0A	; 10
    178e:	38 9e       	mul	r3, r24
    1790:	30 0d       	add	r19, r0
    1792:	11 24       	eor	r1, r1
    1794:	33 2e       	mov	r3, r19
    1796:	20 62       	ori	r18, 0x20	; 32
    1798:	0c c0       	rjmp	.+24     	; 0x17b2 <vfprintf+0xc6>
    179a:	8e 32       	cpi	r24, 0x2E	; 46
    179c:	21 f4       	brne	.+8      	; 0x17a6 <vfprintf+0xba>
    179e:	26 fd       	sbrc	r18, 6
    17a0:	5f c1       	rjmp	.+702    	; 0x1a60 <vfprintf+0x374>
    17a2:	20 64       	ori	r18, 0x40	; 64
    17a4:	06 c0       	rjmp	.+12     	; 0x17b2 <vfprintf+0xc6>
    17a6:	8c 36       	cpi	r24, 0x6C	; 108
    17a8:	11 f4       	brne	.+4      	; 0x17ae <vfprintf+0xc2>
    17aa:	20 68       	ori	r18, 0x80	; 128
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <vfprintf+0xc6>
    17ae:	88 36       	cpi	r24, 0x68	; 104
    17b0:	41 f4       	brne	.+16     	; 0x17c2 <vfprintf+0xd6>
    17b2:	f6 01       	movw	r30, r12
    17b4:	93 fd       	sbrc	r25, 3
    17b6:	85 91       	lpm	r24, Z+
    17b8:	93 ff       	sbrs	r25, 3
    17ba:	81 91       	ld	r24, Z+
    17bc:	6f 01       	movw	r12, r30
    17be:	81 11       	cpse	r24, r1
    17c0:	c1 cf       	rjmp	.-126    	; 0x1744 <vfprintf+0x58>
    17c2:	98 2f       	mov	r25, r24
    17c4:	9f 7d       	andi	r25, 0xDF	; 223
    17c6:	95 54       	subi	r25, 0x45	; 69
    17c8:	93 30       	cpi	r25, 0x03	; 3
    17ca:	28 f4       	brcc	.+10     	; 0x17d6 <vfprintf+0xea>
    17cc:	0c 5f       	subi	r16, 0xFC	; 252
    17ce:	1f 4f       	sbci	r17, 0xFF	; 255
    17d0:	ff e3       	ldi	r31, 0x3F	; 63
    17d2:	f9 83       	std	Y+1, r31	; 0x01
    17d4:	0d c0       	rjmp	.+26     	; 0x17f0 <vfprintf+0x104>
    17d6:	83 36       	cpi	r24, 0x63	; 99
    17d8:	31 f0       	breq	.+12     	; 0x17e6 <vfprintf+0xfa>
    17da:	83 37       	cpi	r24, 0x73	; 115
    17dc:	71 f0       	breq	.+28     	; 0x17fa <vfprintf+0x10e>
    17de:	83 35       	cpi	r24, 0x53	; 83
    17e0:	09 f0       	breq	.+2      	; 0x17e4 <vfprintf+0xf8>
    17e2:	57 c0       	rjmp	.+174    	; 0x1892 <vfprintf+0x1a6>
    17e4:	21 c0       	rjmp	.+66     	; 0x1828 <vfprintf+0x13c>
    17e6:	f8 01       	movw	r30, r16
    17e8:	80 81       	ld	r24, Z
    17ea:	89 83       	std	Y+1, r24	; 0x01
    17ec:	0e 5f       	subi	r16, 0xFE	; 254
    17ee:	1f 4f       	sbci	r17, 0xFF	; 255
    17f0:	44 24       	eor	r4, r4
    17f2:	43 94       	inc	r4
    17f4:	51 2c       	mov	r5, r1
    17f6:	54 01       	movw	r10, r8
    17f8:	14 c0       	rjmp	.+40     	; 0x1822 <vfprintf+0x136>
    17fa:	38 01       	movw	r6, r16
    17fc:	f2 e0       	ldi	r31, 0x02	; 2
    17fe:	6f 0e       	add	r6, r31
    1800:	71 1c       	adc	r7, r1
    1802:	f8 01       	movw	r30, r16
    1804:	a0 80       	ld	r10, Z
    1806:	b1 80       	ldd	r11, Z+1	; 0x01
    1808:	26 ff       	sbrs	r18, 6
    180a:	03 c0       	rjmp	.+6      	; 0x1812 <vfprintf+0x126>
    180c:	65 2d       	mov	r22, r5
    180e:	70 e0       	ldi	r23, 0x00	; 0
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <vfprintf+0x12a>
    1812:	6f ef       	ldi	r22, 0xFF	; 255
    1814:	7f ef       	ldi	r23, 0xFF	; 255
    1816:	c5 01       	movw	r24, r10
    1818:	2c 87       	std	Y+12, r18	; 0x0c
    181a:	57 d1       	rcall	.+686    	; 0x1aca <strnlen>
    181c:	2c 01       	movw	r4, r24
    181e:	83 01       	movw	r16, r6
    1820:	2c 85       	ldd	r18, Y+12	; 0x0c
    1822:	2f 77       	andi	r18, 0x7F	; 127
    1824:	22 2e       	mov	r2, r18
    1826:	16 c0       	rjmp	.+44     	; 0x1854 <vfprintf+0x168>
    1828:	38 01       	movw	r6, r16
    182a:	f2 e0       	ldi	r31, 0x02	; 2
    182c:	6f 0e       	add	r6, r31
    182e:	71 1c       	adc	r7, r1
    1830:	f8 01       	movw	r30, r16
    1832:	a0 80       	ld	r10, Z
    1834:	b1 80       	ldd	r11, Z+1	; 0x01
    1836:	26 ff       	sbrs	r18, 6
    1838:	03 c0       	rjmp	.+6      	; 0x1840 <vfprintf+0x154>
    183a:	65 2d       	mov	r22, r5
    183c:	70 e0       	ldi	r23, 0x00	; 0
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <vfprintf+0x158>
    1840:	6f ef       	ldi	r22, 0xFF	; 255
    1842:	7f ef       	ldi	r23, 0xFF	; 255
    1844:	c5 01       	movw	r24, r10
    1846:	2c 87       	std	Y+12, r18	; 0x0c
    1848:	2e d1       	rcall	.+604    	; 0x1aa6 <strnlen_P>
    184a:	2c 01       	movw	r4, r24
    184c:	2c 85       	ldd	r18, Y+12	; 0x0c
    184e:	20 68       	ori	r18, 0x80	; 128
    1850:	22 2e       	mov	r2, r18
    1852:	83 01       	movw	r16, r6
    1854:	23 fc       	sbrc	r2, 3
    1856:	19 c0       	rjmp	.+50     	; 0x188a <vfprintf+0x19e>
    1858:	83 2d       	mov	r24, r3
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	48 16       	cp	r4, r24
    185e:	59 06       	cpc	r5, r25
    1860:	a0 f4       	brcc	.+40     	; 0x188a <vfprintf+0x19e>
    1862:	b7 01       	movw	r22, r14
    1864:	80 e2       	ldi	r24, 0x20	; 32
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	3b d1       	rcall	.+630    	; 0x1ae0 <fputc>
    186a:	3a 94       	dec	r3
    186c:	f5 cf       	rjmp	.-22     	; 0x1858 <vfprintf+0x16c>
    186e:	f5 01       	movw	r30, r10
    1870:	27 fc       	sbrc	r2, 7
    1872:	85 91       	lpm	r24, Z+
    1874:	27 fe       	sbrs	r2, 7
    1876:	81 91       	ld	r24, Z+
    1878:	5f 01       	movw	r10, r30
    187a:	b7 01       	movw	r22, r14
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	30 d1       	rcall	.+608    	; 0x1ae0 <fputc>
    1880:	31 10       	cpse	r3, r1
    1882:	3a 94       	dec	r3
    1884:	f1 e0       	ldi	r31, 0x01	; 1
    1886:	4f 1a       	sub	r4, r31
    1888:	51 08       	sbc	r5, r1
    188a:	41 14       	cp	r4, r1
    188c:	51 04       	cpc	r5, r1
    188e:	79 f7       	brne	.-34     	; 0x186e <vfprintf+0x182>
    1890:	de c0       	rjmp	.+444    	; 0x1a4e <vfprintf+0x362>
    1892:	84 36       	cpi	r24, 0x64	; 100
    1894:	11 f0       	breq	.+4      	; 0x189a <vfprintf+0x1ae>
    1896:	89 36       	cpi	r24, 0x69	; 105
    1898:	31 f5       	brne	.+76     	; 0x18e6 <vfprintf+0x1fa>
    189a:	f8 01       	movw	r30, r16
    189c:	27 ff       	sbrs	r18, 7
    189e:	07 c0       	rjmp	.+14     	; 0x18ae <vfprintf+0x1c2>
    18a0:	60 81       	ld	r22, Z
    18a2:	71 81       	ldd	r23, Z+1	; 0x01
    18a4:	82 81       	ldd	r24, Z+2	; 0x02
    18a6:	93 81       	ldd	r25, Z+3	; 0x03
    18a8:	0c 5f       	subi	r16, 0xFC	; 252
    18aa:	1f 4f       	sbci	r17, 0xFF	; 255
    18ac:	08 c0       	rjmp	.+16     	; 0x18be <vfprintf+0x1d2>
    18ae:	60 81       	ld	r22, Z
    18b0:	71 81       	ldd	r23, Z+1	; 0x01
    18b2:	88 27       	eor	r24, r24
    18b4:	77 fd       	sbrc	r23, 7
    18b6:	80 95       	com	r24
    18b8:	98 2f       	mov	r25, r24
    18ba:	0e 5f       	subi	r16, 0xFE	; 254
    18bc:	1f 4f       	sbci	r17, 0xFF	; 255
    18be:	2f 76       	andi	r18, 0x6F	; 111
    18c0:	b2 2e       	mov	r11, r18
    18c2:	97 ff       	sbrs	r25, 7
    18c4:	09 c0       	rjmp	.+18     	; 0x18d8 <vfprintf+0x1ec>
    18c6:	90 95       	com	r25
    18c8:	80 95       	com	r24
    18ca:	70 95       	com	r23
    18cc:	61 95       	neg	r22
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255
    18d0:	8f 4f       	sbci	r24, 0xFF	; 255
    18d2:	9f 4f       	sbci	r25, 0xFF	; 255
    18d4:	20 68       	ori	r18, 0x80	; 128
    18d6:	b2 2e       	mov	r11, r18
    18d8:	2a e0       	ldi	r18, 0x0A	; 10
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	a4 01       	movw	r20, r8
    18de:	32 d1       	rcall	.+612    	; 0x1b44 <__ultoa_invert>
    18e0:	a8 2e       	mov	r10, r24
    18e2:	a8 18       	sub	r10, r8
    18e4:	43 c0       	rjmp	.+134    	; 0x196c <vfprintf+0x280>
    18e6:	85 37       	cpi	r24, 0x75	; 117
    18e8:	29 f4       	brne	.+10     	; 0x18f4 <vfprintf+0x208>
    18ea:	2f 7e       	andi	r18, 0xEF	; 239
    18ec:	b2 2e       	mov	r11, r18
    18ee:	2a e0       	ldi	r18, 0x0A	; 10
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	25 c0       	rjmp	.+74     	; 0x193e <vfprintf+0x252>
    18f4:	f2 2f       	mov	r31, r18
    18f6:	f9 7f       	andi	r31, 0xF9	; 249
    18f8:	bf 2e       	mov	r11, r31
    18fa:	8f 36       	cpi	r24, 0x6F	; 111
    18fc:	c1 f0       	breq	.+48     	; 0x192e <vfprintf+0x242>
    18fe:	18 f4       	brcc	.+6      	; 0x1906 <vfprintf+0x21a>
    1900:	88 35       	cpi	r24, 0x58	; 88
    1902:	79 f0       	breq	.+30     	; 0x1922 <vfprintf+0x236>
    1904:	ad c0       	rjmp	.+346    	; 0x1a60 <vfprintf+0x374>
    1906:	80 37       	cpi	r24, 0x70	; 112
    1908:	19 f0       	breq	.+6      	; 0x1910 <vfprintf+0x224>
    190a:	88 37       	cpi	r24, 0x78	; 120
    190c:	21 f0       	breq	.+8      	; 0x1916 <vfprintf+0x22a>
    190e:	a8 c0       	rjmp	.+336    	; 0x1a60 <vfprintf+0x374>
    1910:	2f 2f       	mov	r18, r31
    1912:	20 61       	ori	r18, 0x10	; 16
    1914:	b2 2e       	mov	r11, r18
    1916:	b4 fe       	sbrs	r11, 4
    1918:	0d c0       	rjmp	.+26     	; 0x1934 <vfprintf+0x248>
    191a:	8b 2d       	mov	r24, r11
    191c:	84 60       	ori	r24, 0x04	; 4
    191e:	b8 2e       	mov	r11, r24
    1920:	09 c0       	rjmp	.+18     	; 0x1934 <vfprintf+0x248>
    1922:	24 ff       	sbrs	r18, 4
    1924:	0a c0       	rjmp	.+20     	; 0x193a <vfprintf+0x24e>
    1926:	9f 2f       	mov	r25, r31
    1928:	96 60       	ori	r25, 0x06	; 6
    192a:	b9 2e       	mov	r11, r25
    192c:	06 c0       	rjmp	.+12     	; 0x193a <vfprintf+0x24e>
    192e:	28 e0       	ldi	r18, 0x08	; 8
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	05 c0       	rjmp	.+10     	; 0x193e <vfprintf+0x252>
    1934:	20 e1       	ldi	r18, 0x10	; 16
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	02 c0       	rjmp	.+4      	; 0x193e <vfprintf+0x252>
    193a:	20 e1       	ldi	r18, 0x10	; 16
    193c:	32 e0       	ldi	r19, 0x02	; 2
    193e:	f8 01       	movw	r30, r16
    1940:	b7 fe       	sbrs	r11, 7
    1942:	07 c0       	rjmp	.+14     	; 0x1952 <vfprintf+0x266>
    1944:	60 81       	ld	r22, Z
    1946:	71 81       	ldd	r23, Z+1	; 0x01
    1948:	82 81       	ldd	r24, Z+2	; 0x02
    194a:	93 81       	ldd	r25, Z+3	; 0x03
    194c:	0c 5f       	subi	r16, 0xFC	; 252
    194e:	1f 4f       	sbci	r17, 0xFF	; 255
    1950:	06 c0       	rjmp	.+12     	; 0x195e <vfprintf+0x272>
    1952:	60 81       	ld	r22, Z
    1954:	71 81       	ldd	r23, Z+1	; 0x01
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 5f       	subi	r16, 0xFE	; 254
    195c:	1f 4f       	sbci	r17, 0xFF	; 255
    195e:	a4 01       	movw	r20, r8
    1960:	f1 d0       	rcall	.+482    	; 0x1b44 <__ultoa_invert>
    1962:	a8 2e       	mov	r10, r24
    1964:	a8 18       	sub	r10, r8
    1966:	fb 2d       	mov	r31, r11
    1968:	ff 77       	andi	r31, 0x7F	; 127
    196a:	bf 2e       	mov	r11, r31
    196c:	b6 fe       	sbrs	r11, 6
    196e:	0b c0       	rjmp	.+22     	; 0x1986 <vfprintf+0x29a>
    1970:	2b 2d       	mov	r18, r11
    1972:	2e 7f       	andi	r18, 0xFE	; 254
    1974:	a5 14       	cp	r10, r5
    1976:	50 f4       	brcc	.+20     	; 0x198c <vfprintf+0x2a0>
    1978:	b4 fe       	sbrs	r11, 4
    197a:	0a c0       	rjmp	.+20     	; 0x1990 <vfprintf+0x2a4>
    197c:	b2 fc       	sbrc	r11, 2
    197e:	08 c0       	rjmp	.+16     	; 0x1990 <vfprintf+0x2a4>
    1980:	2b 2d       	mov	r18, r11
    1982:	2e 7e       	andi	r18, 0xEE	; 238
    1984:	05 c0       	rjmp	.+10     	; 0x1990 <vfprintf+0x2a4>
    1986:	7a 2c       	mov	r7, r10
    1988:	2b 2d       	mov	r18, r11
    198a:	03 c0       	rjmp	.+6      	; 0x1992 <vfprintf+0x2a6>
    198c:	7a 2c       	mov	r7, r10
    198e:	01 c0       	rjmp	.+2      	; 0x1992 <vfprintf+0x2a6>
    1990:	75 2c       	mov	r7, r5
    1992:	24 ff       	sbrs	r18, 4
    1994:	0d c0       	rjmp	.+26     	; 0x19b0 <vfprintf+0x2c4>
    1996:	fe 01       	movw	r30, r28
    1998:	ea 0d       	add	r30, r10
    199a:	f1 1d       	adc	r31, r1
    199c:	80 81       	ld	r24, Z
    199e:	80 33       	cpi	r24, 0x30	; 48
    19a0:	11 f4       	brne	.+4      	; 0x19a6 <vfprintf+0x2ba>
    19a2:	29 7e       	andi	r18, 0xE9	; 233
    19a4:	09 c0       	rjmp	.+18     	; 0x19b8 <vfprintf+0x2cc>
    19a6:	22 ff       	sbrs	r18, 2
    19a8:	06 c0       	rjmp	.+12     	; 0x19b6 <vfprintf+0x2ca>
    19aa:	73 94       	inc	r7
    19ac:	73 94       	inc	r7
    19ae:	04 c0       	rjmp	.+8      	; 0x19b8 <vfprintf+0x2cc>
    19b0:	82 2f       	mov	r24, r18
    19b2:	86 78       	andi	r24, 0x86	; 134
    19b4:	09 f0       	breq	.+2      	; 0x19b8 <vfprintf+0x2cc>
    19b6:	73 94       	inc	r7
    19b8:	23 fd       	sbrc	r18, 3
    19ba:	12 c0       	rjmp	.+36     	; 0x19e0 <vfprintf+0x2f4>
    19bc:	20 ff       	sbrs	r18, 0
    19be:	06 c0       	rjmp	.+12     	; 0x19cc <vfprintf+0x2e0>
    19c0:	5a 2c       	mov	r5, r10
    19c2:	73 14       	cp	r7, r3
    19c4:	18 f4       	brcc	.+6      	; 0x19cc <vfprintf+0x2e0>
    19c6:	53 0c       	add	r5, r3
    19c8:	57 18       	sub	r5, r7
    19ca:	73 2c       	mov	r7, r3
    19cc:	73 14       	cp	r7, r3
    19ce:	60 f4       	brcc	.+24     	; 0x19e8 <vfprintf+0x2fc>
    19d0:	b7 01       	movw	r22, r14
    19d2:	80 e2       	ldi	r24, 0x20	; 32
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	2c 87       	std	Y+12, r18	; 0x0c
    19d8:	83 d0       	rcall	.+262    	; 0x1ae0 <fputc>
    19da:	73 94       	inc	r7
    19dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    19de:	f6 cf       	rjmp	.-20     	; 0x19cc <vfprintf+0x2e0>
    19e0:	73 14       	cp	r7, r3
    19e2:	10 f4       	brcc	.+4      	; 0x19e8 <vfprintf+0x2fc>
    19e4:	37 18       	sub	r3, r7
    19e6:	01 c0       	rjmp	.+2      	; 0x19ea <vfprintf+0x2fe>
    19e8:	31 2c       	mov	r3, r1
    19ea:	24 ff       	sbrs	r18, 4
    19ec:	11 c0       	rjmp	.+34     	; 0x1a10 <vfprintf+0x324>
    19ee:	b7 01       	movw	r22, r14
    19f0:	80 e3       	ldi	r24, 0x30	; 48
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	2c 87       	std	Y+12, r18	; 0x0c
    19f6:	74 d0       	rcall	.+232    	; 0x1ae0 <fputc>
    19f8:	2c 85       	ldd	r18, Y+12	; 0x0c
    19fa:	22 ff       	sbrs	r18, 2
    19fc:	16 c0       	rjmp	.+44     	; 0x1a2a <vfprintf+0x33e>
    19fe:	21 ff       	sbrs	r18, 1
    1a00:	03 c0       	rjmp	.+6      	; 0x1a08 <vfprintf+0x31c>
    1a02:	88 e5       	ldi	r24, 0x58	; 88
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <vfprintf+0x320>
    1a08:	88 e7       	ldi	r24, 0x78	; 120
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	b7 01       	movw	r22, r14
    1a0e:	0c c0       	rjmp	.+24     	; 0x1a28 <vfprintf+0x33c>
    1a10:	82 2f       	mov	r24, r18
    1a12:	86 78       	andi	r24, 0x86	; 134
    1a14:	51 f0       	breq	.+20     	; 0x1a2a <vfprintf+0x33e>
    1a16:	21 fd       	sbrc	r18, 1
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <vfprintf+0x332>
    1a1a:	80 e2       	ldi	r24, 0x20	; 32
    1a1c:	01 c0       	rjmp	.+2      	; 0x1a20 <vfprintf+0x334>
    1a1e:	8b e2       	ldi	r24, 0x2B	; 43
    1a20:	27 fd       	sbrc	r18, 7
    1a22:	8d e2       	ldi	r24, 0x2D	; 45
    1a24:	b7 01       	movw	r22, r14
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	5b d0       	rcall	.+182    	; 0x1ae0 <fputc>
    1a2a:	a5 14       	cp	r10, r5
    1a2c:	30 f4       	brcc	.+12     	; 0x1a3a <vfprintf+0x34e>
    1a2e:	b7 01       	movw	r22, r14
    1a30:	80 e3       	ldi	r24, 0x30	; 48
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	55 d0       	rcall	.+170    	; 0x1ae0 <fputc>
    1a36:	5a 94       	dec	r5
    1a38:	f8 cf       	rjmp	.-16     	; 0x1a2a <vfprintf+0x33e>
    1a3a:	aa 94       	dec	r10
    1a3c:	f4 01       	movw	r30, r8
    1a3e:	ea 0d       	add	r30, r10
    1a40:	f1 1d       	adc	r31, r1
    1a42:	80 81       	ld	r24, Z
    1a44:	b7 01       	movw	r22, r14
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	4b d0       	rcall	.+150    	; 0x1ae0 <fputc>
    1a4a:	a1 10       	cpse	r10, r1
    1a4c:	f6 cf       	rjmp	.-20     	; 0x1a3a <vfprintf+0x34e>
    1a4e:	33 20       	and	r3, r3
    1a50:	09 f4       	brne	.+2      	; 0x1a54 <vfprintf+0x368>
    1a52:	5d ce       	rjmp	.-838    	; 0x170e <vfprintf+0x22>
    1a54:	b7 01       	movw	r22, r14
    1a56:	80 e2       	ldi	r24, 0x20	; 32
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	42 d0       	rcall	.+132    	; 0x1ae0 <fputc>
    1a5c:	3a 94       	dec	r3
    1a5e:	f7 cf       	rjmp	.-18     	; 0x1a4e <vfprintf+0x362>
    1a60:	f7 01       	movw	r30, r14
    1a62:	86 81       	ldd	r24, Z+6	; 0x06
    1a64:	97 81       	ldd	r25, Z+7	; 0x07
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <vfprintf+0x380>
    1a68:	8f ef       	ldi	r24, 0xFF	; 255
    1a6a:	9f ef       	ldi	r25, 0xFF	; 255
    1a6c:	2c 96       	adiw	r28, 0x0c	; 12
    1a6e:	e2 e1       	ldi	r30, 0x12	; 18
    1a70:	e3 c0       	rjmp	.+454    	; 0x1c38 <__epilogue_restores__>

00001a72 <calloc>:
    1a72:	0f 93       	push	r16
    1a74:	1f 93       	push	r17
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	86 9f       	mul	r24, r22
    1a7c:	80 01       	movw	r16, r0
    1a7e:	87 9f       	mul	r24, r23
    1a80:	10 0d       	add	r17, r0
    1a82:	96 9f       	mul	r25, r22
    1a84:	10 0d       	add	r17, r0
    1a86:	11 24       	eor	r1, r1
    1a88:	c8 01       	movw	r24, r16
    1a8a:	81 dc       	rcall	.-1790   	; 0x138e <malloc>
    1a8c:	ec 01       	movw	r28, r24
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	21 f0       	breq	.+8      	; 0x1a9a <calloc+0x28>
    1a92:	a8 01       	movw	r20, r16
    1a94:	60 e0       	ldi	r22, 0x00	; 0
    1a96:	70 e0       	ldi	r23, 0x00	; 0
    1a98:	11 d0       	rcall	.+34     	; 0x1abc <memset>
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	df 91       	pop	r29
    1a9e:	cf 91       	pop	r28
    1aa0:	1f 91       	pop	r17
    1aa2:	0f 91       	pop	r16
    1aa4:	08 95       	ret

00001aa6 <strnlen_P>:
    1aa6:	fc 01       	movw	r30, r24
    1aa8:	05 90       	lpm	r0, Z+
    1aaa:	61 50       	subi	r22, 0x01	; 1
    1aac:	70 40       	sbci	r23, 0x00	; 0
    1aae:	01 10       	cpse	r0, r1
    1ab0:	d8 f7       	brcc	.-10     	; 0x1aa8 <strnlen_P+0x2>
    1ab2:	80 95       	com	r24
    1ab4:	90 95       	com	r25
    1ab6:	8e 0f       	add	r24, r30
    1ab8:	9f 1f       	adc	r25, r31
    1aba:	08 95       	ret

00001abc <memset>:
    1abc:	dc 01       	movw	r26, r24
    1abe:	01 c0       	rjmp	.+2      	; 0x1ac2 <memset+0x6>
    1ac0:	6d 93       	st	X+, r22
    1ac2:	41 50       	subi	r20, 0x01	; 1
    1ac4:	50 40       	sbci	r21, 0x00	; 0
    1ac6:	e0 f7       	brcc	.-8      	; 0x1ac0 <memset+0x4>
    1ac8:	08 95       	ret

00001aca <strnlen>:
    1aca:	fc 01       	movw	r30, r24
    1acc:	61 50       	subi	r22, 0x01	; 1
    1ace:	70 40       	sbci	r23, 0x00	; 0
    1ad0:	01 90       	ld	r0, Z+
    1ad2:	01 10       	cpse	r0, r1
    1ad4:	d8 f7       	brcc	.-10     	; 0x1acc <strnlen+0x2>
    1ad6:	80 95       	com	r24
    1ad8:	90 95       	com	r25
    1ada:	8e 0f       	add	r24, r30
    1adc:	9f 1f       	adc	r25, r31
    1ade:	08 95       	ret

00001ae0 <fputc>:
    1ae0:	0f 93       	push	r16
    1ae2:	1f 93       	push	r17
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	18 2f       	mov	r17, r24
    1aea:	09 2f       	mov	r16, r25
    1aec:	eb 01       	movw	r28, r22
    1aee:	8b 81       	ldd	r24, Y+3	; 0x03
    1af0:	81 fd       	sbrc	r24, 1
    1af2:	03 c0       	rjmp	.+6      	; 0x1afa <fputc+0x1a>
    1af4:	8f ef       	ldi	r24, 0xFF	; 255
    1af6:	9f ef       	ldi	r25, 0xFF	; 255
    1af8:	20 c0       	rjmp	.+64     	; 0x1b3a <fputc+0x5a>
    1afa:	82 ff       	sbrs	r24, 2
    1afc:	10 c0       	rjmp	.+32     	; 0x1b1e <fputc+0x3e>
    1afe:	4e 81       	ldd	r20, Y+6	; 0x06
    1b00:	5f 81       	ldd	r21, Y+7	; 0x07
    1b02:	2c 81       	ldd	r18, Y+4	; 0x04
    1b04:	3d 81       	ldd	r19, Y+5	; 0x05
    1b06:	42 17       	cp	r20, r18
    1b08:	53 07       	cpc	r21, r19
    1b0a:	7c f4       	brge	.+30     	; 0x1b2a <fputc+0x4a>
    1b0c:	e8 81       	ld	r30, Y
    1b0e:	f9 81       	ldd	r31, Y+1	; 0x01
    1b10:	9f 01       	movw	r18, r30
    1b12:	2f 5f       	subi	r18, 0xFF	; 255
    1b14:	3f 4f       	sbci	r19, 0xFF	; 255
    1b16:	39 83       	std	Y+1, r19	; 0x01
    1b18:	28 83       	st	Y, r18
    1b1a:	10 83       	st	Z, r17
    1b1c:	06 c0       	rjmp	.+12     	; 0x1b2a <fputc+0x4a>
    1b1e:	e8 85       	ldd	r30, Y+8	; 0x08
    1b20:	f9 85       	ldd	r31, Y+9	; 0x09
    1b22:	81 2f       	mov	r24, r17
    1b24:	09 95       	icall
    1b26:	89 2b       	or	r24, r25
    1b28:	29 f7       	brne	.-54     	; 0x1af4 <fputc+0x14>
    1b2a:	2e 81       	ldd	r18, Y+6	; 0x06
    1b2c:	3f 81       	ldd	r19, Y+7	; 0x07
    1b2e:	2f 5f       	subi	r18, 0xFF	; 255
    1b30:	3f 4f       	sbci	r19, 0xFF	; 255
    1b32:	3f 83       	std	Y+7, r19	; 0x07
    1b34:	2e 83       	std	Y+6, r18	; 0x06
    1b36:	81 2f       	mov	r24, r17
    1b38:	90 2f       	mov	r25, r16
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	1f 91       	pop	r17
    1b40:	0f 91       	pop	r16
    1b42:	08 95       	ret

00001b44 <__ultoa_invert>:
    1b44:	fa 01       	movw	r30, r20
    1b46:	aa 27       	eor	r26, r26
    1b48:	28 30       	cpi	r18, 0x08	; 8
    1b4a:	51 f1       	breq	.+84     	; 0x1ba0 <__ultoa_invert+0x5c>
    1b4c:	20 31       	cpi	r18, 0x10	; 16
    1b4e:	81 f1       	breq	.+96     	; 0x1bb0 <__ultoa_invert+0x6c>
    1b50:	e8 94       	clt
    1b52:	6f 93       	push	r22
    1b54:	6e 7f       	andi	r22, 0xFE	; 254
    1b56:	6e 5f       	subi	r22, 0xFE	; 254
    1b58:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5a:	8f 4f       	sbci	r24, 0xFF	; 255
    1b5c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5e:	af 4f       	sbci	r26, 0xFF	; 255
    1b60:	b1 e0       	ldi	r27, 0x01	; 1
    1b62:	3e d0       	rcall	.+124    	; 0x1be0 <__ultoa_invert+0x9c>
    1b64:	b4 e0       	ldi	r27, 0x04	; 4
    1b66:	3c d0       	rcall	.+120    	; 0x1be0 <__ultoa_invert+0x9c>
    1b68:	67 0f       	add	r22, r23
    1b6a:	78 1f       	adc	r23, r24
    1b6c:	89 1f       	adc	r24, r25
    1b6e:	9a 1f       	adc	r25, r26
    1b70:	a1 1d       	adc	r26, r1
    1b72:	68 0f       	add	r22, r24
    1b74:	79 1f       	adc	r23, r25
    1b76:	8a 1f       	adc	r24, r26
    1b78:	91 1d       	adc	r25, r1
    1b7a:	a1 1d       	adc	r26, r1
    1b7c:	6a 0f       	add	r22, r26
    1b7e:	71 1d       	adc	r23, r1
    1b80:	81 1d       	adc	r24, r1
    1b82:	91 1d       	adc	r25, r1
    1b84:	a1 1d       	adc	r26, r1
    1b86:	20 d0       	rcall	.+64     	; 0x1bc8 <__ultoa_invert+0x84>
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <__ultoa_invert+0x48>
    1b8a:	68 94       	set
    1b8c:	3f 91       	pop	r19
    1b8e:	2a e0       	ldi	r18, 0x0A	; 10
    1b90:	26 9f       	mul	r18, r22
    1b92:	11 24       	eor	r1, r1
    1b94:	30 19       	sub	r19, r0
    1b96:	30 5d       	subi	r19, 0xD0	; 208
    1b98:	31 93       	st	Z+, r19
    1b9a:	de f6       	brtc	.-74     	; 0x1b52 <__ultoa_invert+0xe>
    1b9c:	cf 01       	movw	r24, r30
    1b9e:	08 95       	ret
    1ba0:	46 2f       	mov	r20, r22
    1ba2:	47 70       	andi	r20, 0x07	; 7
    1ba4:	40 5d       	subi	r20, 0xD0	; 208
    1ba6:	41 93       	st	Z+, r20
    1ba8:	b3 e0       	ldi	r27, 0x03	; 3
    1baa:	0f d0       	rcall	.+30     	; 0x1bca <__ultoa_invert+0x86>
    1bac:	c9 f7       	brne	.-14     	; 0x1ba0 <__ultoa_invert+0x5c>
    1bae:	f6 cf       	rjmp	.-20     	; 0x1b9c <__ultoa_invert+0x58>
    1bb0:	46 2f       	mov	r20, r22
    1bb2:	4f 70       	andi	r20, 0x0F	; 15
    1bb4:	40 5d       	subi	r20, 0xD0	; 208
    1bb6:	4a 33       	cpi	r20, 0x3A	; 58
    1bb8:	18 f0       	brcs	.+6      	; 0x1bc0 <__ultoa_invert+0x7c>
    1bba:	49 5d       	subi	r20, 0xD9	; 217
    1bbc:	31 fd       	sbrc	r19, 1
    1bbe:	40 52       	subi	r20, 0x20	; 32
    1bc0:	41 93       	st	Z+, r20
    1bc2:	02 d0       	rcall	.+4      	; 0x1bc8 <__ultoa_invert+0x84>
    1bc4:	a9 f7       	brne	.-22     	; 0x1bb0 <__ultoa_invert+0x6c>
    1bc6:	ea cf       	rjmp	.-44     	; 0x1b9c <__ultoa_invert+0x58>
    1bc8:	b4 e0       	ldi	r27, 0x04	; 4
    1bca:	a6 95       	lsr	r26
    1bcc:	97 95       	ror	r25
    1bce:	87 95       	ror	r24
    1bd0:	77 95       	ror	r23
    1bd2:	67 95       	ror	r22
    1bd4:	ba 95       	dec	r27
    1bd6:	c9 f7       	brne	.-14     	; 0x1bca <__ultoa_invert+0x86>
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	61 05       	cpc	r22, r1
    1bdc:	71 05       	cpc	r23, r1
    1bde:	08 95       	ret
    1be0:	9b 01       	movw	r18, r22
    1be2:	ac 01       	movw	r20, r24
    1be4:	0a 2e       	mov	r0, r26
    1be6:	06 94       	lsr	r0
    1be8:	57 95       	ror	r21
    1bea:	47 95       	ror	r20
    1bec:	37 95       	ror	r19
    1bee:	27 95       	ror	r18
    1bf0:	ba 95       	dec	r27
    1bf2:	c9 f7       	brne	.-14     	; 0x1be6 <__ultoa_invert+0xa2>
    1bf4:	62 0f       	add	r22, r18
    1bf6:	73 1f       	adc	r23, r19
    1bf8:	84 1f       	adc	r24, r20
    1bfa:	95 1f       	adc	r25, r21
    1bfc:	a0 1d       	adc	r26, r0
    1bfe:	08 95       	ret

00001c00 <__prologue_saves__>:
    1c00:	2f 92       	push	r2
    1c02:	3f 92       	push	r3
    1c04:	4f 92       	push	r4
    1c06:	5f 92       	push	r5
    1c08:	6f 92       	push	r6
    1c0a:	7f 92       	push	r7
    1c0c:	8f 92       	push	r8
    1c0e:	9f 92       	push	r9
    1c10:	af 92       	push	r10
    1c12:	bf 92       	push	r11
    1c14:	cf 92       	push	r12
    1c16:	df 92       	push	r13
    1c18:	ef 92       	push	r14
    1c1a:	ff 92       	push	r15
    1c1c:	0f 93       	push	r16
    1c1e:	1f 93       	push	r17
    1c20:	cf 93       	push	r28
    1c22:	df 93       	push	r29
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
    1c28:	ca 1b       	sub	r28, r26
    1c2a:	db 0b       	sbc	r29, r27
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	f8 94       	cli
    1c30:	de bf       	out	0x3e, r29	; 62
    1c32:	0f be       	out	0x3f, r0	; 63
    1c34:	cd bf       	out	0x3d, r28	; 61
    1c36:	09 94       	ijmp

00001c38 <__epilogue_restores__>:
    1c38:	2a 88       	ldd	r2, Y+18	; 0x12
    1c3a:	39 88       	ldd	r3, Y+17	; 0x11
    1c3c:	48 88       	ldd	r4, Y+16	; 0x10
    1c3e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1c40:	6e 84       	ldd	r6, Y+14	; 0x0e
    1c42:	7d 84       	ldd	r7, Y+13	; 0x0d
    1c44:	8c 84       	ldd	r8, Y+12	; 0x0c
    1c46:	9b 84       	ldd	r9, Y+11	; 0x0b
    1c48:	aa 84       	ldd	r10, Y+10	; 0x0a
    1c4a:	b9 84       	ldd	r11, Y+9	; 0x09
    1c4c:	c8 84       	ldd	r12, Y+8	; 0x08
    1c4e:	df 80       	ldd	r13, Y+7	; 0x07
    1c50:	ee 80       	ldd	r14, Y+6	; 0x06
    1c52:	fd 80       	ldd	r15, Y+5	; 0x05
    1c54:	0c 81       	ldd	r16, Y+4	; 0x04
    1c56:	1b 81       	ldd	r17, Y+3	; 0x03
    1c58:	aa 81       	ldd	r26, Y+2	; 0x02
    1c5a:	b9 81       	ldd	r27, Y+1	; 0x01
    1c5c:	ce 0f       	add	r28, r30
    1c5e:	d1 1d       	adc	r29, r1
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	f8 94       	cli
    1c64:	de bf       	out	0x3e, r29	; 62
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	cd bf       	out	0x3d, r28	; 61
    1c6a:	ed 01       	movw	r28, r26
    1c6c:	08 95       	ret

00001c6e <_exit>:
    1c6e:	f8 94       	cli

00001c70 <__stop_program>:
    1c70:	ff cf       	rjmp	.-2      	; 0x1c70 <__stop_program>
