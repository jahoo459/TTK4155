
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000029a  00800100  00001a9a  00001b2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  0080039a  0080039a  00001dc8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001dc8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000300  00000000  00000000  00001e24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003601  00000000  00000000  00002124  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000111c  00000000  00000000  00005725  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000015e8  00000000  00000000  00006841  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000770  00000000  00000000  00007e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000dae  00000000  00000000  0000859c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001af4  00000000  00000000  0000934a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000290  00000000  00000000  0000ae3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	fa c1       	rjmp	.+1012   	; 0x402 <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <MENU_buildMenus+0xf0>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ea e9       	ldi	r30, 0x9A	; 154
     37c:	fa e1       	ldi	r31, 0x1A	; 26
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 39       	cpi	r26, 0x9A	; 154
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	aa e9       	ldi	r26, 0x9A	; 154
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a3 3c       	cpi	r26, 0xC3	; 195
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	7e d0       	rcall	.+252    	; 0x498 <main>
     39c:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 b3 03 	sts	0x03B3, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 9e 03 	sts	0x039E, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 9d 03 	sts	0x039D, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 9b 03 	sts	0x039B, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_3>:
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	8f 93       	push	r24
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 9a 03 	sts	0x039A, r24
     414:	8f 91       	pop	r24
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <init>:
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	1f e1       	ldi	r17, 0x1F	; 31
     42a:	e1 2e       	mov	r14, r17
     42c:	f1 2c       	mov	r15, r1
     42e:	00 e0       	ldi	r16, 0x00	; 0
     430:	10 e0       	ldi	r17, 0x00	; 0
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	4b e4       	ldi	r20, 0x4B	; 75
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e8       	ldi	r22, 0x80	; 128
     43c:	75 e2       	ldi	r23, 0x25	; 37
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	53 d6       	rcall	.+3238   	; 0x10ea <uartInit>
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	4c d0       	rcall	.+152    	; 0x4e0 <enableXMEM>
     448:	19 d6       	rcall	.+3122   	; 0x107c <SLI_init>
     44a:	5c d0       	rcall	.+184    	; 0x504 <JOY_init>
     44c:	14 d5       	rcall	.+2600   	; 0xe76 <OLED_init>
     44e:	1f d6       	rcall	.+3134   	; 0x108e <SPI_init>
     450:	8b b7       	in	r24, 0x3b	; 59
     452:	80 64       	ori	r24, 0x40	; 64
     454:	8b bf       	out	0x3b, r24	; 59
     456:	85 b7       	in	r24, 0x35	; 53
     458:	82 60       	ori	r24, 0x02	; 2
     45a:	85 bf       	out	0x35, r24	; 53
     45c:	85 b7       	in	r24, 0x35	; 53
     45e:	8e 7f       	andi	r24, 0xFE	; 254
     460:	85 bf       	out	0x35, r24	; 53
     462:	8b 98       	cbi	0x11, 3	; 17
     464:	93 9a       	sbi	0x12, 3	; 18
     466:	8b b7       	in	r24, 0x3b	; 59
     468:	80 68       	ori	r24, 0x80	; 128
     46a:	8b bf       	out	0x3b, r24	; 59
     46c:	85 b7       	in	r24, 0x35	; 53
     46e:	88 60       	ori	r24, 0x08	; 8
     470:	85 bf       	out	0x35, r24	; 53
     472:	85 b7       	in	r24, 0x35	; 53
     474:	8b 7f       	andi	r24, 0xFB	; 251
     476:	85 bf       	out	0x35, r24	; 53
     478:	32 98       	cbi	0x06, 2	; 6
     47a:	3a 98       	cbi	0x07, 2	; 7
     47c:	b8 98       	cbi	0x17, 0	; 23
     47e:	c0 98       	cbi	0x18, 0	; 24
     480:	86 b7       	in	r24, 0x36	; 54
     482:	8e 7f       	andi	r24, 0xFE	; 254
     484:	86 bf       	out	0x36, r24	; 54
     486:	8b b7       	in	r24, 0x3b	; 59
     488:	81 60       	ori	r24, 0x01	; 1
     48a:	8b bf       	out	0x3b, r24	; 59
     48c:	78 94       	sei
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	ff 90       	pop	r15
     494:	ef 90       	pop	r14
     496:	08 95       	ret

00000498 <main>:
=======================MAIN FUNCTION=========================
*/

int main(void)
{
	init();
     498:	c3 df       	rcall	.-122    	; 0x420 <init>

	MCP2515_init();
     49a:	2e d2       	rcall	.+1116   	; 0x8f8 <MCP2515_init>
	MCP2515_bitModify(SS_CAN_CONTROLLER, MCP_CANCTRL, 0xc0, 0x40);
     49c:	20 e4       	ldi	r18, 0x40	; 64
     49e:	40 ec       	ldi	r20, 0xC0	; 192
     4a0:	6f e0       	ldi	r22, 0x0F	; 15
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	52 d2       	rcall	.+1188   	; 0x94a <MCP2515_bitModify>

	printf("CANSTAT: %#x\n", MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT));
     4a6:	6e e0       	ldi	r22, 0x0E	; 14
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	15 d2       	rcall	.+1066   	; 0x8d6 <MCP2515_read>
     4ac:	1f 92       	push	r1
     4ae:	8f 93       	push	r24
     4b0:	8f e9       	ldi	r24, 0x9F	; 159
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	9f 93       	push	r25
     4b6:	8f 93       	push	r24
     4b8:	ef d7       	rcall	.+4062   	; 0x1498 <printf>
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
     4be:	0f 90       	pop	r0
     4c0:	0f 90       	pop	r0
	
    while(1)
    {
		// statusMultifunctionBoard();
		JOY_getDirection();
     4c2:	e0 d1       	rcall	.+960    	; 0x884 <JOY_getDirection>

		// todo: remove! will be included in the menu driver later
		if(JOYcalibFlag)
     4c4:	80 91 9c 03 	lds	r24, 0x039C
     4c8:	88 23       	and	r24, r24
     4ca:	19 f0       	breq	.+6      	; 0x4d2 <main+0x3a>
		{
			//run joystick calibration
			JOY_calibrate();
     4cc:	2e d0       	rcall	.+92     	; 0x52a <JOY_calibrate>
			JOYcalibFlag = 0;
     4ce:	10 92 9c 03 	sts	0x039C, r1
		}

		if(activateMenuFlag)
     4d2:	80 91 9b 03 	lds	r24, 0x039B
     4d6:	81 11       	cpse	r24, r1
		{
			MENU_activate();
     4d8:	85 d4       	rcall	.+2314   	; 0xde4 <MENU_activate>
		}

		if(SPI_ReceivedByte)
     4da:	80 91 b4 03 	lds	r24, 0x03B4
		{
			//TODO: check which slave caused the interrupt. SS_CAN_CONTROLLER assumed now
// 			SPI_ReceivedByte = SPI_receive(SS_CAN_CONTROLLER);
// 			printf("SPI received byte: %d\n", SPI_ReceivedByte);
		}
    }
     4de:	f1 cf       	rjmp	.-30     	; 0x4c2 <main+0x2a>

000004e0 <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     4e0:	95 b7       	in	r25, 0x35	; 53
     4e2:	90 68       	ori	r25, 0x80	; 128
     4e4:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     4e6:	96 b7       	in	r25, 0x36	; 54
     4e8:	98 60       	ori	r25, 0x08	; 8
     4ea:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     4ec:	88 23       	and	r24, r24
     4ee:	19 f0       	breq	.+6      	; 0x4f6 <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     4f0:	80 b7       	in	r24, 0x30	; 48
     4f2:	80 62       	ori	r24, 0x20	; 32
     4f4:	80 bf       	out	0x30, r24	; 48
     4f6:	08 95       	ret

000004f8 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     4f8:	fc 01       	movw	r30, r24
     4fa:	80 81       	ld	r24, Z
	return val;
}
     4fc:	08 95       	ret

000004fe <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     4fe:	fc 01       	movw	r30, r24
     500:	60 83       	st	Z, r22
     502:	08 95       	ret

00000504 <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     504:	10 92 a1 03 	sts	0x03A1, r1
     508:	10 92 a0 03 	sts	0x03A0, r1
	currentPosition.Y_abs = 0;
     50c:	10 92 a3 03 	sts	0x03A3, r1
     510:	10 92 a2 03 	sts	0x03A2, r1
	currentPosition.X_per = 0;
     514:	10 92 a5 03 	sts	0x03A5, r1
     518:	10 92 a4 03 	sts	0x03A4, r1
	currentPosition.Y_per = 0;
     51c:	10 92 a7 03 	sts	0x03A7, r1
     520:	10 92 a6 03 	sts	0x03A6, r1
	currentDirection = CENTRE;
     524:	10 92 9f 03 	sts	0x039F, r1
     528:	08 95       	ret

0000052a <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     52e:	85 d4       	rcall	.+2314   	; 0xe3a <OLED_clear>
     530:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     532:	70 e0       	ldi	r23, 0x00	; 0
     534:	80 e0       	ldi	r24, 0x00	; 0
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	63 d4       	rcall	.+2246   	; 0xe00 <OLED_goto>
     53a:	8d ea       	ldi	r24, 0xAD	; 173
     53c:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     53e:	3b d5       	rcall	.+2678   	; 0xfb6 <OLED_printString>
     540:	87 eb       	ldi	r24, 0xB7	; 183
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	ba d7       	rcall	.+3956   	; 0x14ba <puts>
	printf("Move JOY to the right\n");
     546:	2f ef       	ldi	r18, 0xFF	; 255
     548:	4f ef       	ldi	r20, 0xFF	; 255
     54a:	52 e0       	ldi	r21, 0x02	; 2
     54c:	21 50       	subi	r18, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     54e:	40 40       	sbci	r20, 0x00	; 0
     550:	50 40       	sbci	r21, 0x00	; 0
     552:	e1 f7       	brne	.-8      	; 0x54c <JOY_calibrate+0x22>
     554:	00 c0       	rjmp	.+0      	; 0x556 <JOY_calibrate+0x2c>
     556:	00 c0       	rjmp	.+0      	; 0x558 <JOY_calibrate+0x2e>
     558:	c4 e1       	ldi	r28, 0x14	; 20
     55a:	d0 e0       	ldi	r29, 0x00	; 0
     55c:	60 91 06 01 	lds	r22, 0x0106
     560:	70 91 07 01 	lds	r23, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     564:	82 e0       	ldi	r24, 0x02	; 2
     566:	da d5       	rcall	.+2996   	; 0x111c <ADC_request>
     568:	8f ef       	ldi	r24, 0xFF	; 255
     56a:	9f e1       	ldi	r25, 0x1F	; 31
     56c:	21 e0       	ldi	r18, 0x01	; 1
     56e:	81 50       	subi	r24, 0x01	; 1
     570:	90 40       	sbci	r25, 0x00	; 0
     572:	20 40       	sbci	r18, 0x00	; 0
     574:	e1 f7       	brne	.-8      	; 0x56e <JOY_calibrate+0x44>
     576:	00 c0       	rjmp	.+0      	; 0x578 <JOY_calibrate+0x4e>
     578:	00 00       	nop
     57a:	80 91 06 01 	lds	r24, 0x0106
     57e:	90 91 07 01 	lds	r25, 0x0107
     582:	f0 d5       	rcall	.+3040   	; 0x1164 <ADC_read>
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     584:	90 91 0d 01 	lds	r25, 0x010D
     588:	98 17       	cp	r25, r24
     58a:	10 f4       	brcc	.+4      	; 0x590 <JOY_calibrate+0x66>
     58c:	80 93 0d 01 	sts	0x010D, r24
		
		if(temp > calR) {calR = temp;}
     590:	21 97       	sbiw	r28, 0x01	; 1
     592:	20 97       	sbiw	r28, 0x00	; 0
     594:	19 f7       	brne	.-58     	; 0x55c <JOY_calibrate+0x32>
     596:	60 e0       	ldi	r22, 0x00	; 0
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	90 e0       	ldi	r25, 0x00	; 0
	OLED_goto(0,0);
	OLED_printString("JOY RIGHT");
	printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     59e:	30 d4       	rcall	.+2144   	; 0xe00 <OLED_goto>
     5a0:	8d ec       	ldi	r24, 0xCD	; 205
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_goto(1,0);
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	08 d5       	rcall	.+2576   	; 0xfb6 <OLED_printString>
     5a6:	86 ed       	ldi	r24, 0xD6	; 214
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	87 d7       	rcall	.+3854   	; 0x14ba <puts>
     5ac:	4f ef       	ldi	r20, 0xFF	; 255
	OLED_printString("JOY LEFT");
     5ae:	5f ef       	ldi	r21, 0xFF	; 255
     5b0:	82 e0       	ldi	r24, 0x02	; 2
     5b2:	41 50       	subi	r20, 0x01	; 1
     5b4:	50 40       	sbci	r21, 0x00	; 0
	printf("Move JOY to the left\n");
     5b6:	80 40       	sbci	r24, 0x00	; 0
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <JOY_calibrate+0x88>
     5ba:	00 c0       	rjmp	.+0      	; 0x5bc <JOY_calibrate+0x92>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <JOY_calibrate+0x94>
     5be:	c4 e1       	ldi	r28, 0x14	; 20
     5c0:	d0 e0       	ldi	r29, 0x00	; 0
     5c2:	60 91 06 01 	lds	r22, 0x0106
     5c6:	70 91 07 01 	lds	r23, 0x0107
     5ca:	82 e0       	ldi	r24, 0x02	; 2
     5cc:	a7 d5       	rcall	.+2894   	; 0x111c <ADC_request>
     5ce:	9f ef       	ldi	r25, 0xFF	; 255
     5d0:	2f e1       	ldi	r18, 0x1F	; 31
     5d2:	41 e0       	ldi	r20, 0x01	; 1
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     5d4:	91 50       	subi	r25, 0x01	; 1
     5d6:	20 40       	sbci	r18, 0x00	; 0
     5d8:	40 40       	sbci	r20, 0x00	; 0
     5da:	e1 f7       	brne	.-8      	; 0x5d4 <JOY_calibrate+0xaa>
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <JOY_calibrate+0xb4>
     5de:	00 00       	nop
     5e0:	80 91 06 01 	lds	r24, 0x0106
     5e4:	90 91 07 01 	lds	r25, 0x0107
     5e8:	bd d5       	rcall	.+2938   	; 0x1164 <ADC_read>
     5ea:	90 91 0c 01 	lds	r25, 0x010C
     5ee:	89 17       	cp	r24, r25
     5f0:	10 f4       	brcc	.+4      	; 0x5f6 <JOY_calibrate+0xcc>
     5f2:	80 93 0c 01 	sts	0x010C, r24
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     5f6:	21 97       	sbiw	r28, 0x01	; 1
     5f8:	20 97       	sbiw	r28, 0x00	; 0
     5fa:	19 f7       	brne	.-58     	; 0x5c2 <JOY_calibrate+0x98>
     5fc:	60 e0       	ldi	r22, 0x00	; 0
     5fe:	70 e0       	ldi	r23, 0x00	; 0
		
		if(temp < calL) {calL = temp;}
     600:	82 e0       	ldi	r24, 0x02	; 2
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	fd d3       	rcall	.+2042   	; 0xe00 <OLED_goto>
     606:	8b ee       	ldi	r24, 0xEB	; 235
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	d5 d4       	rcall	.+2474   	; 0xfb6 <OLED_printString>
     60c:	82 ef       	ldi	r24, 0xF2	; 242
	OLED_goto(1,0);
	OLED_printString("JOY LEFT");
	printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	54 d7       	rcall	.+3752   	; 0x14ba <puts>
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_goto(2,0);
     612:	5f ef       	ldi	r21, 0xFF	; 255
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	92 e0       	ldi	r25, 0x02	; 2
     618:	51 50       	subi	r21, 0x01	; 1
     61a:	80 40       	sbci	r24, 0x00	; 0
     61c:	90 40       	sbci	r25, 0x00	; 0
	OLED_printString("JOY UP");
     61e:	e1 f7       	brne	.-8      	; 0x618 <JOY_calibrate+0xee>
     620:	00 c0       	rjmp	.+0      	; 0x622 <JOY_calibrate+0xf8>
     622:	00 c0       	rjmp	.+0      	; 0x624 <JOY_calibrate+0xfa>
     624:	c4 e1       	ldi	r28, 0x14	; 20
	printf("Move JOY up\n");
     626:	d0 e0       	ldi	r29, 0x00	; 0
     628:	60 91 06 01 	lds	r22, 0x0106
     62c:	70 91 07 01 	lds	r23, 0x0107
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	74 d5       	rcall	.+2792   	; 0x111c <ADC_request>
     634:	2f ef       	ldi	r18, 0xFF	; 255
     636:	4f e1       	ldi	r20, 0x1F	; 31
     638:	51 e0       	ldi	r21, 0x01	; 1
     63a:	21 50       	subi	r18, 0x01	; 1
     63c:	40 40       	sbci	r20, 0x00	; 0
     63e:	50 40       	sbci	r21, 0x00	; 0
     640:	e1 f7       	brne	.-8      	; 0x63a <JOY_calibrate+0x110>
     642:	00 c0       	rjmp	.+0      	; 0x644 <JOY_calibrate+0x11a>
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     644:	00 00       	nop
     646:	80 91 06 01 	lds	r24, 0x0106
     64a:	90 91 07 01 	lds	r25, 0x0107
     64e:	8a d5       	rcall	.+2836   	; 0x1164 <ADC_read>
     650:	90 91 0b 01 	lds	r25, 0x010B
     654:	98 17       	cp	r25, r24
     656:	10 f4       	brcc	.+4      	; 0x65c <JOY_calibrate+0x132>
     658:	80 93 0b 01 	sts	0x010B, r24
     65c:	21 97       	sbiw	r28, 0x01	; 1
     65e:	20 97       	sbiw	r28, 0x00	; 0
     660:	19 f7       	brne	.-58     	; 0x628 <JOY_calibrate+0xfe>
     662:	60 e0       	ldi	r22, 0x00	; 0
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	83 e0       	ldi	r24, 0x03	; 3
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	ca d3       	rcall	.+1940   	; 0xe00 <OLED_goto>
     66c:	8e ef       	ldi	r24, 0xFE	; 254
     66e:	91 e0       	ldi	r25, 0x01	; 1
		
		if(temp > calUp) {calUp = temp;}
     670:	a2 d4       	rcall	.+2372   	; 0xfb6 <OLED_printString>
     672:	87 e0       	ldi	r24, 0x07	; 7
     674:	92 e0       	ldi	r25, 0x02	; 2
     676:	21 d7       	rcall	.+3650   	; 0x14ba <puts>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	9f ef       	ldi	r25, 0xFF	; 255
     67c:	22 e0       	ldi	r18, 0x02	; 2
	OLED_goto(2,0);
	OLED_printString("JOY UP");
	printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     67e:	81 50       	subi	r24, 0x01	; 1
     680:	90 40       	sbci	r25, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_goto(3,0);
     682:	20 40       	sbci	r18, 0x00	; 0
     684:	e1 f7       	brne	.-8      	; 0x67e <JOY_calibrate+0x154>
     686:	00 c0       	rjmp	.+0      	; 0x688 <JOY_calibrate+0x15e>
     688:	00 c0       	rjmp	.+0      	; 0x68a <JOY_calibrate+0x160>
     68a:	c4 e1       	ldi	r28, 0x14	; 20
     68c:	d0 e0       	ldi	r29, 0x00	; 0
	OLED_printString("JOY DOWN");
     68e:	60 91 06 01 	lds	r22, 0x0106
     692:	70 91 07 01 	lds	r23, 0x0107
	printf("Move JOY down\n");
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	41 d5       	rcall	.+2690   	; 0x111c <ADC_request>
     69a:	4f ef       	ldi	r20, 0xFF	; 255
     69c:	5f e1       	ldi	r21, 0x1F	; 31
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	41 50       	subi	r20, 0x01	; 1
     6a2:	50 40       	sbci	r21, 0x00	; 0
     6a4:	80 40       	sbci	r24, 0x00	; 0
     6a6:	e1 f7       	brne	.-8      	; 0x6a0 <JOY_calibrate+0x176>
     6a8:	00 c0       	rjmp	.+0      	; 0x6aa <JOY_calibrate+0x180>
     6aa:	00 00       	nop
     6ac:	80 91 06 01 	lds	r24, 0x0106
     6b0:	90 91 07 01 	lds	r25, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     6b4:	57 d5       	rcall	.+2734   	; 0x1164 <ADC_read>
     6b6:	90 91 0a 01 	lds	r25, 0x010A
     6ba:	89 17       	cp	r24, r25
     6bc:	10 f4       	brcc	.+4      	; 0x6c2 <JOY_calibrate+0x198>
     6be:	80 93 0a 01 	sts	0x010A, r24
     6c2:	21 97       	sbiw	r28, 0x01	; 1
     6c4:	20 97       	sbiw	r28, 0x00	; 0
     6c6:	19 f7       	brne	.-58     	; 0x68e <JOY_calibrate+0x164>
     6c8:	30 91 0a 01 	lds	r19, 0x010A
     6cc:	20 91 0b 01 	lds	r18, 0x010B
     6d0:	90 91 0c 01 	lds	r25, 0x010C
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     6d4:	80 91 0d 01 	lds	r24, 0x010D
     6d8:	1f 92       	push	r1
     6da:	3f 93       	push	r19
     6dc:	1f 92       	push	r1
     6de:	2f 93       	push	r18
		
		if(temp < calDown) {calDown = temp;}
     6e0:	1f 92       	push	r1
     6e2:	9f 93       	push	r25
     6e4:	1f 92       	push	r1
     6e6:	8f 93       	push	r24
     6e8:	85 e1       	ldi	r24, 0x15	; 21
     6ea:	92 e0       	ldi	r25, 0x02	; 2
     6ec:	9f 93       	push	r25
	OLED_goto(3,0);
	OLED_printString("JOY DOWN");
	printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     6ee:	8f 93       	push	r24
     6f0:	d3 d6       	rcall	.+3494   	; 0x1498 <printf>
		
		if(temp < calDown) {calDown = temp;}
	}
	
	
	printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
     6f2:	20 91 0b 01 	lds	r18, 0x010B
     6f6:	80 91 0a 01 	lds	r24, 0x010A
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	28 1b       	sub	r18, r24
     6fe:	31 09       	sbc	r19, r1
     700:	c9 01       	movw	r24, r18
     702:	4d b7       	in	r20, 0x3d	; 61
     704:	5e b7       	in	r21, 0x3e	; 62
     706:	46 5f       	subi	r20, 0xF6	; 246
     708:	5f 4f       	sbci	r21, 0xFF	; 255
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	f8 94       	cli
     70e:	5e bf       	out	0x3e, r21	; 62
     710:	0f be       	out	0x3f, r0	; 63
     712:	4d bf       	out	0x3d, r20	; 61
     714:	99 23       	and	r25, r25
     716:	0c f4       	brge	.+2      	; 0x71a <JOY_calibrate+0x1f0>
     718:	01 96       	adiw	r24, 0x01	; 1
     71a:	95 95       	asr	r25
     71c:	87 95       	ror	r24
	
	meanVert = (calUp - calDown)/2;
     71e:	80 93 09 01 	sts	0x0109, r24
     722:	20 91 0d 01 	lds	r18, 0x010D
     726:	80 91 0c 01 	lds	r24, 0x010C
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	28 1b       	sub	r18, r24
     72e:	31 09       	sbc	r19, r1
     730:	c9 01       	movw	r24, r18
     732:	99 23       	and	r25, r25
     734:	0c f4       	brge	.+2      	; 0x738 <JOY_calibrate+0x20e>
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	95 95       	asr	r25
     73a:	87 95       	ror	r24
     73c:	80 93 08 01 	sts	0x0108, r24
     740:	60 e0       	ldi	r22, 0x00	; 0
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	84 e0       	ldi	r24, 0x04	; 4
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	5b d3       	rcall	.+1718   	; 0xe00 <OLED_goto>
     74a:	8f e3       	ldi	r24, 0x3F	; 63
     74c:	92 e0       	ldi	r25, 0x02	; 2
	meanHor = (calR - calL)/2;
     74e:	33 d4       	rcall	.+2150   	; 0xfb6 <OLED_printString>
     750:	90 91 08 01 	lds	r25, 0x0108
     754:	80 91 09 01 	lds	r24, 0x0109
     758:	1f 92       	push	r1
     75a:	9f 93       	push	r25
     75c:	1f 92       	push	r1
     75e:	8f 93       	push	r24
     760:	8a e4       	ldi	r24, 0x4A	; 74
     762:	92 e0       	ldi	r25, 0x02	; 2
     764:	9f 93       	push	r25
     766:	8f 93       	push	r24
     768:	97 d6       	rcall	.+3374   	; 0x1498 <printf>
     76a:	5f ef       	ldi	r21, 0xFF	; 255
	
	OLED_goto(4,0);
     76c:	8f ef       	ldi	r24, 0xFF	; 255
     76e:	9e e0       	ldi	r25, 0x0E	; 14
     770:	51 50       	subi	r21, 0x01	; 1
     772:	80 40       	sbci	r24, 0x00	; 0
     774:	90 40       	sbci	r25, 0x00	; 0
     776:	e1 f7       	brne	.-8      	; 0x770 <JOY_calibrate+0x246>
	OLED_printString("CALIB DONE");
     778:	00 c0       	rjmp	.+0      	; 0x77a <JOY_calibrate+0x250>
     77a:	00 00       	nop
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
	printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <JOY_requestCurrentPosition>:
     78e:	88 37       	cpi	r24, 0x78	; 120
     790:	39 f4       	brne	.+14     	; 0x7a0 <JOY_requestCurrentPosition+0x12>
     792:	60 91 06 01 	lds	r22, 0x0106
     796:	70 91 07 01 	lds	r23, 0x0107
     79a:	82 e0       	ldi	r24, 0x02	; 2
     79c:	bf c4       	rjmp	.+2430   	; 0x111c <ADC_request>
     79e:	08 95       	ret
     7a0:	89 37       	cpi	r24, 0x79	; 121
     7a2:	31 f4       	brne	.+12     	; 0x7b0 <JOY_requestCurrentPosition+0x22>
     7a4:	60 91 06 01 	lds	r22, 0x0106
     7a8:	70 91 07 01 	lds	r23, 0x0107
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	b6 c4       	rjmp	.+2412   	; 0x111c <ADC_request>
     7b0:	08 95       	ret

000007b2 <JOY_updatePosition>:
     7b2:	88 37       	cpi	r24, 0x78	; 120
     7b4:	f9 f4       	brne	.+62     	; 0x7f4 <JOY_updatePosition+0x42>
     7b6:	80 91 06 01 	lds	r24, 0x0106
	_delay_ms(1000);
}
     7ba:	90 91 07 01 	lds	r25, 0x0107
     7be:	d2 d4       	rcall	.+2468   	; 0x1164 <ADC_read>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	90 93 a1 03 	sts	0x03A1, r25
     7c6:	80 93 a0 03 	sts	0x03A0, r24
     7ca:	20 91 08 01 	lds	r18, 0x0108
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     7ce:	60 91 08 01 	lds	r22, 0x0108
     7d2:	ac 01       	movw	r20, r24
     7d4:	42 1b       	sub	r20, r18
     7d6:	51 09       	sbc	r21, r1
     7d8:	9a 01       	movw	r18, r20
     7da:	44 e6       	ldi	r20, 0x64	; 100
     7dc:	42 9f       	mul	r20, r18
     7de:	c0 01       	movw	r24, r0
     7e0:	43 9f       	mul	r20, r19
     7e2:	90 0d       	add	r25, r0
     7e4:	11 24       	eor	r1, r1
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	bf d4       	rcall	.+2430   	; 0x1168 <__divmodhi4>
     7ea:	70 93 a5 03 	sts	0x03A5, r23
     7ee:	60 93 a4 03 	sts	0x03A4, r22
     7f2:	08 95       	ret
     7f4:	89 37       	cpi	r24, 0x79	; 121
     7f6:	f1 f4       	brne	.+60     	; 0x834 <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     7f8:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     7fc:	90 91 07 01 	lds	r25, 0x0107
     800:	b1 d4       	rcall	.+2402   	; 0x1164 <ADC_read>
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	90 93 a3 03 	sts	0x03A3, r25
     808:	80 93 a2 03 	sts	0x03A2, r24
     80c:	20 91 09 01 	lds	r18, 0x0109
     810:	60 91 09 01 	lds	r22, 0x0109
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     814:	ac 01       	movw	r20, r24
     816:	42 1b       	sub	r20, r18
     818:	51 09       	sbc	r21, r1
     81a:	9a 01       	movw	r18, r20
     81c:	44 e6       	ldi	r20, 0x64	; 100
     81e:	42 9f       	mul	r20, r18
     820:	c0 01       	movw	r24, r0
     822:	43 9f       	mul	r20, r19
     824:	90 0d       	add	r25, r0
     826:	11 24       	eor	r1, r1
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	9e d4       	rcall	.+2364   	; 0x1168 <__divmodhi4>
     82c:	70 93 a7 03 	sts	0x03A7, r23
     830:	60 93 a6 03 	sts	0x03A6, r22
     834:	08 95       	ret

00000836 <JOY_calculateDirection>:
     836:	80 91 a4 03 	lds	r24, 0x03A4
     83a:	90 91 a5 03 	lds	r25, 0x03A5
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     83e:	8b 35       	cpi	r24, 0x5B	; 91
     840:	91 05       	cpc	r25, r1
     842:	24 f0       	brlt	.+8      	; 0x84c <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     844:	83 e0       	ldi	r24, 0x03	; 3
     846:	80 93 9f 03 	sts	0x039F, r24
     84a:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     84c:	86 3a       	cpi	r24, 0xA6	; 166
     84e:	9f 4f       	sbci	r25, 0xFF	; 255
     850:	24 f4       	brge	.+8      	; 0x85a <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     852:	84 e0       	ldi	r24, 0x04	; 4
     854:	80 93 9f 03 	sts	0x039F, r24
     858:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     85a:	80 91 a6 03 	lds	r24, 0x03A6
     85e:	90 91 a7 03 	lds	r25, 0x03A7
     862:	8b 35       	cpi	r24, 0x5B	; 91
     864:	91 05       	cpc	r25, r1
     866:	24 f0       	brlt	.+8      	; 0x870 <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	80 93 9f 03 	sts	0x039F, r24
     86e:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     870:	86 3a       	cpi	r24, 0xA6	; 166
     872:	9f 4f       	sbci	r25, 0xFF	; 255
     874:	24 f4       	brge	.+8      	; 0x87e <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     876:	82 e0       	ldi	r24, 0x02	; 2
     878:	80 93 9f 03 	sts	0x039F, r24
     87c:	08 95       	ret
	else{currentDirection = CENTRE;}
     87e:	10 92 9f 03 	sts	0x039F, r1
     882:	08 95       	ret

00000884 <JOY_getDirection>:
// Before the value is returned, the values of position in x and y direction are 
// requested from the ADC and written to the currentPosition and 
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
     884:	88 e7       	ldi	r24, 0x78	; 120
     886:	83 df       	rcall	.-250    	; 0x78e <JOY_requestCurrentPosition>
     888:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     88a:	8a 95       	dec	r24
     88c:	f1 f7       	brne	.-4      	; 0x88a <JOY_getDirection+0x6>
     88e:	00 00       	nop
     890:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     892:	8f df       	rcall	.-226    	; 0x7b2 <JOY_updatePosition>
     894:	89 e7       	ldi	r24, 0x79	; 121
     896:	7b df       	rcall	.-266    	; 0x78e <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     898:	82 e6       	ldi	r24, 0x62	; 98
     89a:	8a 95       	dec	r24
     89c:	f1 f7       	brne	.-4      	; 0x89a <JOY_getDirection+0x16>
     89e:	00 00       	nop
     8a0:	89 e7       	ldi	r24, 0x79	; 121
     8a2:	87 df       	rcall	.-242    	; 0x7b2 <JOY_updatePosition>
     8a4:	c8 df       	rcall	.-112    	; 0x836 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     8a6:	80 91 9f 03 	lds	r24, 0x039F
     8aa:	08 95       	ret

000008ac <MCP2515_reset>:
	printf("finished MCP2515_init\n");
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
     8ac:	cf 93       	push	r28
     8ae:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
     8b0:	0c d4       	rcall	.+2072   	; 0x10ca <SPI_activateSlave>
     8b2:	80 ec       	ldi	r24, 0xC0	; 192
	SPI_send(MCP_RESET);
     8b4:	f5 d3       	rcall	.+2026   	; 0x10a0 <SPI_send>
     8b6:	8c ec       	ldi	r24, 0xCC	; 204
     8b8:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8ba:	01 97       	sbiw	r24, 0x01	; 1
     8bc:	f1 f7       	brne	.-4      	; 0x8ba <MCP2515_reset+0xe>
     8be:	00 c0       	rjmp	.+0      	; 0x8c0 <MCP2515_reset+0x14>
     8c0:	00 00       	nop
     8c2:	8c 2f       	mov	r24, r28
     8c4:	06 d4       	rcall	.+2060   	; 0x10d2 <SPI_deactivateSlave>
	_delay_ms(1);
	SPI_deactivateSlave(slave);
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
     8c8:	9f e2       	ldi	r25, 0x2F	; 47
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	f1 f7       	brne	.-4      	; 0x8ca <MCP2515_reset+0x1e>
     8ce:	00 c0       	rjmp	.+0      	; 0x8d0 <MCP2515_reset+0x24>
     8d0:	00 00       	nop
     8d2:	cf 91       	pop	r28
     8d4:	08 95       	ret

000008d6 <MCP2515_read>:
     8d6:	cf 93       	push	r28
	_delay_ms(10);
}
     8d8:	df 93       	push	r29
     8da:	c8 2f       	mov	r28, r24

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
     8dc:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
     8de:	f5 d3       	rcall	.+2026   	; 0x10ca <SPI_activateSlave>
     8e0:	83 e0       	ldi	r24, 0x03	; 3
	SPI_send(MCP_READ);
     8e2:	de d3       	rcall	.+1980   	; 0x10a0 <SPI_send>
     8e4:	8d 2f       	mov	r24, r29
     8e6:	dc d3       	rcall	.+1976   	; 0x10a0 <SPI_send>
	SPI_send(address);
     8e8:	ea d3       	rcall	.+2004   	; 0x10be <SPI_receive>
     8ea:	d8 2f       	mov	r29, r24
     8ec:	8c 2f       	mov	r24, r28
	
	uint8_t result;
	result = SPI_receive();
     8ee:	f1 d3       	rcall	.+2018   	; 0x10d2 <SPI_deactivateSlave>
     8f0:	8d 2f       	mov	r24, r29
     8f2:	df 91       	pop	r29
	
	SPI_deactivateSlave(slave);
     8f4:	cf 91       	pop	r28
     8f6:	08 95       	ret

000008f8 <MCP2515_init>:
     8f8:	cf 93       	push	r28
	return result;
}
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	d7 df       	rcall	.-82     	; 0x8ac <MCP2515_reset>
     8fe:	6e e0       	ldi	r22, 0x0E	; 14
     900:	80 e0       	ldi	r24, 0x00	; 0
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
	
	//printf("MCP_CANSTAT: %d\n", MCP2515_read(MCP_CANSTAT, SS_CAN_CONTROLLER));
	
	// Self-test
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
     902:	e9 df       	rcall	.-46     	; 0x8d6 <MCP2515_read>
     904:	c8 2f       	mov	r28, r24
     906:	1f 92       	push	r1
     908:	8f 93       	push	r24
	printf("CANSTAT: %#x\n", value);
     90a:	2f e9       	ldi	r18, 0x9F	; 159
     90c:	31 e0       	ldi	r19, 0x01	; 1
     90e:	3f 93       	push	r19
     910:	2f 93       	push	r18
     912:	c2 d5       	rcall	.+2948   	; 0x1498 <printf>
     914:	8c 2f       	mov	r24, r28
     916:	80 7e       	andi	r24, 0xE0	; 224
     918:	0f 90       	pop	r0
	if((value & MODE_MASK) != MODE_CONFIG) 
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	80 38       	cpi	r24, 0x80	; 128
     922:	69 f0       	breq	.+26     	; 0x93e <MCP2515_init+0x46>
     924:	1f 92       	push	r1
     926:	cf 93       	push	r28
     928:	8f e6       	ldi	r24, 0x6F	; 111
	{
		printf("MCP2515 is NOT in configuration mode after reset! Value: %d\n", value);
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	9f 93       	push	r25
     92e:	8f 93       	push	r24
     930:	b3 d5       	rcall	.+2918   	; 0x1498 <printf>
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
		return 1;
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	04 c0       	rjmp	.+8      	; 0x946 <MCP2515_init+0x4e>
     93e:	8c ea       	ldi	r24, 0xAC	; 172
     940:	92 e0       	ldi	r25, 0x02	; 2
     942:	bb d5       	rcall	.+2934   	; 0x14ba <puts>
     944:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	printf("finished MCP2515_init\n");
     946:	cf 91       	pop	r28
     948:	08 95       	ret

0000094a <MCP2515_bitModify>:
     94a:	0f 93       	push	r16
     94c:	1f 93       	push	r17
	return 0;
     94e:	cf 93       	push	r28
}
     950:	df 93       	push	r29
     952:	c8 2f       	mov	r28, r24
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_bitModify(SPI_SLAVES slave, uint8_t register2change, uint8_t mask, uint8_t newValue)
{
     954:	06 2f       	mov	r16, r22
     956:	14 2f       	mov	r17, r20
     958:	d2 2f       	mov	r29, r18
	SPI_activateSlave(slave);
     95a:	b7 d3       	rcall	.+1902   	; 0x10ca <SPI_activateSlave>
     95c:	85 e0       	ldi	r24, 0x05	; 5
	
	SPI_send(MCP_BITMOD);
     95e:	a0 d3       	rcall	.+1856   	; 0x10a0 <SPI_send>
     960:	80 2f       	mov	r24, r16
     962:	9e d3       	rcall	.+1852   	; 0x10a0 <SPI_send>
	SPI_send(register2change);
     964:	81 2f       	mov	r24, r17
     966:	9c d3       	rcall	.+1848   	; 0x10a0 <SPI_send>
     968:	8d 2f       	mov	r24, r29
	SPI_send(mask);
     96a:	9a d3       	rcall	.+1844   	; 0x10a0 <SPI_send>
     96c:	8c 2f       	mov	r24, r28
     96e:	b1 d3       	rcall	.+1890   	; 0x10d2 <SPI_deactivateSlave>
	SPI_send(newValue);
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	1f 91       	pop	r17
	
	SPI_deactivateSlave(slave);
     976:	0f 91       	pop	r16
     978:	08 95       	ret

0000097a <startGame>:

int menuFrameOffset = 10; //Columns from left frame border
//******************************************************************************************

void startGame()
{
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
	OLED_clear();
     97e:	5d d2       	rcall	.+1210   	; 0xe3a <OLED_clear>
     980:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	3b d2       	rcall	.+1142   	; 0xe00 <OLED_goto>
     98a:	88 ed       	ldi	r24, 0xD8	; 216
     98c:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("START");
     98e:	13 d3       	rcall	.+1574   	; 0xfb6 <OLED_printString>
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	70 e0       	ldi	r23, 0x00	; 0
     994:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_goto(3,0);
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	33 d2       	rcall	.+1126   	; 0xe00 <OLED_goto>
     99a:	ce e0       	ldi	r28, 0x0E	; 14
     99c:	d0 e0       	ldi	r29, 0x00	; 0
     99e:	8e ed       	ldi	r24, 0xDE	; 222
     9a0:	92 e0       	ldi	r25, 0x02	; 2
     9a2:	09 d3       	rcall	.+1554   	; 0xfb6 <OLED_printString>
     9a4:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     9a6:	8f e7       	ldi	r24, 0x7F	; 127
     9a8:	97 e0       	ldi	r25, 0x07	; 7
     9aa:	21 50       	subi	r18, 0x01	; 1
     9ac:	80 40       	sbci	r24, 0x00	; 0
     9ae:	90 40       	sbci	r25, 0x00	; 0
     9b0:	e1 f7       	brne	.-8      	; 0x9aa <startGame+0x30>
     9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <startGame+0x3a>
     9b4:	00 00       	nop
     9b6:	21 97       	sbiw	r28, 0x01	; 1
     9b8:	20 97       	sbiw	r28, 0x00	; 0
     9ba:	89 f7       	brne	.-30     	; 0x99e <startGame+0x24>
     9bc:	60 e0       	ldi	r22, 0x00	; 0
     9be:	70 e0       	ldi	r23, 0x00	; 0
     9c0:	85 e0       	ldi	r24, 0x05	; 5
	OLED_goto(0,0);
	OLED_printString("START");
	
	OLED_goto(3,0);
	
	for(int i = 14; i > 0; i--)
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	1d d2       	rcall	.+1082   	; 0xe00 <OLED_goto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_goto(5,0);
     9c6:	80 ee       	ldi	r24, 0xE0	; 224
     9c8:	92 e0       	ldi	r25, 0x02	; 2
     9ca:	f5 d2       	rcall	.+1514   	; 0xfb6 <OLED_printString>
     9cc:	2f ef       	ldi	r18, 0xFF	; 255
     9ce:	8f ef       	ldi	r24, 0xFF	; 255
     9d0:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     9d2:	21 50       	subi	r18, 0x01	; 1
     9d4:	80 40       	sbci	r24, 0x00	; 0
     9d6:	90 40       	sbci	r25, 0x00	; 0
     9d8:	e1 f7       	brne	.-8      	; 0x9d2 <startGame+0x58>
     9da:	00 c0       	rjmp	.+0      	; 0x9dc <startGame+0x62>
     9dc:	00 c0       	rjmp	.+0      	; 0x9de <startGame+0x64>
     9de:	df 91       	pop	r29
     9e0:	cf 91       	pop	r28
     9e2:	08 95       	ret

000009e4 <MENU_addMenuItem>:
     9e4:	cf 92       	push	r12
     9e6:	df 92       	push	r13
     9e8:	ef 92       	push	r14
     9ea:	ff 92       	push	r15
	_delay_ms(3000);
}
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
     9f0:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     9f2:	df 93       	push	r29
     9f4:	8c 01       	movw	r16, r24
     9f6:	7b 01       	movw	r14, r22
     9f8:	6a 01       	movw	r12, r20
     9fa:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     9fc:	80 91 ab 03 	lds	r24, 0x03AB
     a00:	90 91 ac 03 	lds	r25, 0x03AC
     a04:	89 2b       	or	r24, r25
     a06:	19 f0       	breq	.+6      	; 0xa0e <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     a08:	89 ee       	ldi	r24, 0xE9	; 233
     a0a:	92 e0       	ldi	r25, 0x02	; 2
     a0c:	56 d5       	rcall	.+2732   	; 0x14ba <puts>
     a0e:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	d1 d3       	rcall	.+1954   	; 0x11b6 <malloc>
     a14:	fc 01       	movw	r30, r24
     a16:	90 93 ac 03 	sts	0x03AC, r25
     a1a:	80 93 ab 03 	sts	0x03AB, r24
     a1e:	f3 82       	std	Z+3, r15	; 0x03
     a20:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     a22:	11 83       	std	Z+1, r17	; 0x01
     a24:	00 83       	st	Z, r16
	currItem->name = name;
     a26:	cd 2b       	or	r28, r29
     a28:	39 f0       	breq	.+14     	; 0xa38 <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     a2a:	d5 82       	std	Z+5, r13	; 0x05
     a2c:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     a32:	97 83       	std	Z+7, r25	; 0x07
     a34:	86 83       	std	Z+6, r24	; 0x06
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <MENU_addMenuItem+0x5c>
     a38:	15 82       	std	Z+5, r1	; 0x05
     a3a:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     a3c:	17 82       	std	Z+7, r1	; 0x07
     a3e:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
	}
}
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	ff 90       	pop	r15
     a4a:	ef 90       	pop	r14
     a4c:	df 90       	pop	r13
     a4e:	cf 90       	pop	r12
     a50:	08 95       	ret

00000a52 <MENU_buildMenus>:
     a52:	cf 93       	push	r28
     a54:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     a56:	86 e1       	ldi	r24, 0x16	; 22
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	ad d3       	rcall	.+1882   	; 0x11b6 <malloc>
     a5c:	ec 01       	movw	r28, r24
     a5e:	90 93 b2 03 	sts	0x03B2, r25
     a62:	80 93 b1 03 	sts	0x03B1, r24
     a66:	8f ef       	ldi	r24, 0xFF	; 255
	mainMenu->menuName = "MainMenu";
     a68:	92 e0       	ldi	r25, 0x02	; 2
     a6a:	99 83       	std	Y+1, r25	; 0x01
     a6c:	88 83       	st	Y, r24
     a6e:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     a70:	1c 8a       	std	Y+20, r1	; 0x14
     a72:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	9b 83       	std	Y+3, r25	; 0x03
     a78:	8a 83       	std	Y+2, r24	; 0x02
     a7a:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	9b d3       	rcall	.+1846   	; 0x11b6 <malloc>
     a80:	fc 01       	movw	r30, r24
     a82:	90 93 b0 03 	sts	0x03B0, r25
     a86:	80 93 af 03 	sts	0x03AF, r24
     a8a:	88 e0       	ldi	r24, 0x08	; 8
     a8c:	93 e0       	ldi	r25, 0x03	; 3
	difficultyMenu->menuName = "DifficultyMenu";
     a8e:	91 83       	std	Z+1, r25	; 0x01
     a90:	80 83       	st	Z, r24
     a92:	d5 8b       	std	Z+21, r29	; 0x15
     a94:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     a96:	83 e0       	ldi	r24, 0x03	; 3
     a98:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     a9a:	93 83       	std	Z+3, r25	; 0x03
     a9c:	82 83       	std	Z+2, r24	; 0x02
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     aa2:	40 e0       	ldi	r20, 0x00	; 0
     aa4:	50 e0       	ldi	r21, 0x00	; 0
     aa6:	be 01       	movw	r22, r28
     aa8:	87 e1       	ldi	r24, 0x17	; 23
     aaa:	93 e0       	ldi	r25, 0x03	; 3
     aac:	9b df       	rcall	.-202    	; 0x9e4 <MENU_addMenuItem>
     aae:	60 91 b1 03 	lds	r22, 0x03B1
     ab2:	70 91 b2 03 	lds	r23, 0x03B2
	mainMenu->children[0] = currItem;
     ab6:	e0 91 ab 03 	lds	r30, 0x03AB
     aba:	f0 91 ac 03 	lds	r31, 0x03AC
     abe:	db 01       	movw	r26, r22
     ac0:	15 96       	adiw	r26, 0x05	; 5
     ac2:	fc 93       	st	X, r31
     ac4:	ee 93       	st	-X, r30
     ac6:	14 97       	sbiw	r26, 0x04	; 4
     ac8:	8d eb       	ldi	r24, 0xBD	; 189
     aca:	94 e0       	ldi	r25, 0x04	; 4
     acc:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
     ace:	82 87       	std	Z+10, r24	; 0x0a
     ad0:	40 91 af 03 	lds	r20, 0x03AF
     ad4:	50 91 b0 03 	lds	r21, 0x03B0
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     ad8:	21 e0       	ldi	r18, 0x01	; 1
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	80 e2       	ldi	r24, 0x20	; 32
     ade:	93 e0       	ldi	r25, 0x03	; 3
     ae0:	81 df       	rcall	.-254    	; 0x9e4 <MENU_addMenuItem>
     ae2:	60 91 b1 03 	lds	r22, 0x03B1
     ae6:	70 91 b2 03 	lds	r23, 0x03B2
	mainMenu->children[1] = currItem;
     aea:	80 91 ab 03 	lds	r24, 0x03AB
     aee:	90 91 ac 03 	lds	r25, 0x03AC
     af2:	fb 01       	movw	r30, r22
     af4:	97 83       	std	Z+7, r25	; 0x07
     af6:	86 83       	std	Z+6, r24	; 0x06
     af8:	20 e0       	ldi	r18, 0x00	; 0
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     b00:	8b e2       	ldi	r24, 0x2B	; 43
     b02:	93 e0       	ldi	r25, 0x03	; 3
     b04:	6f df       	rcall	.-290    	; 0x9e4 <MENU_addMenuItem>
     b06:	60 91 b1 03 	lds	r22, 0x03B1
     b0a:	70 91 b2 03 	lds	r23, 0x03B2
     b0e:	80 91 ab 03 	lds	r24, 0x03AB
	mainMenu->children[2] = currItem;
     b12:	90 91 ac 03 	lds	r25, 0x03AC
     b16:	db 01       	movw	r26, r22
     b18:	19 96       	adiw	r26, 0x09	; 9
     b1a:	9c 93       	st	X, r25
     b1c:	8e 93       	st	-X, r24
     b1e:	18 97       	sbiw	r26, 0x08	; 8
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	40 e0       	ldi	r20, 0x00	; 0
     b26:	50 e0       	ldi	r21, 0x00	; 0
     b28:	86 e3       	ldi	r24, 0x36	; 54
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
     b2a:	93 e0       	ldi	r25, 0x03	; 3
     b2c:	5b df       	rcall	.-330    	; 0x9e4 <MENU_addMenuItem>
     b2e:	60 91 b1 03 	lds	r22, 0x03B1
     b32:	70 91 b2 03 	lds	r23, 0x03B2
     b36:	e0 91 ab 03 	lds	r30, 0x03AB
	mainMenu->children[3] = currItem;
     b3a:	f0 91 ac 03 	lds	r31, 0x03AC
     b3e:	db 01       	movw	r26, r22
     b40:	1b 96       	adiw	r26, 0x0b	; 11
     b42:	fc 93       	st	X, r31
     b44:	ee 93       	st	-X, r30
     b46:	1a 97       	sbiw	r26, 0x0a	; 10
     b48:	85 e9       	ldi	r24, 0x95	; 149
     b4a:	92 e0       	ldi	r25, 0x02	; 2
     b4c:	93 87       	std	Z+11, r25	; 0x0b
     b4e:	82 87       	std	Z+10, r24	; 0x0a
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	80 e4       	ldi	r24, 0x40	; 64
     b5a:	93 e0       	ldi	r25, 0x03	; 3
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
     b5c:	43 df       	rcall	.-378    	; 0x9e4 <MENU_addMenuItem>
     b5e:	e0 91 b1 03 	lds	r30, 0x03B1
     b62:	f0 91 b2 03 	lds	r31, 0x03B2
     b66:	80 91 ab 03 	lds	r24, 0x03AB
     b6a:	90 91 ac 03 	lds	r25, 0x03AC
	mainMenu->children[4] = currItem;
     b6e:	95 87       	std	Z+13, r25	; 0x0d
     b70:	84 87       	std	Z+12, r24	; 0x0c
     b72:	10 92 ac 03 	sts	0x03AC, r1
     b76:	10 92 ab 03 	sts	0x03AB, r1
     b7a:	60 91 af 03 	lds	r22, 0x03AF
     b7e:	70 91 b0 03 	lds	r23, 0x03B0
	
	currItem = NULL;
     b82:	20 e0       	ldi	r18, 0x00	; 0
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
     b88:	50 e0       	ldi	r21, 0x00	; 0
     b8a:	85 e4       	ldi	r24, 0x45	; 69
     b8c:	93 e0       	ldi	r25, 0x03	; 3
     b8e:	2a df       	rcall	.-428    	; 0x9e4 <MENU_addMenuItem>
     b90:	60 91 af 03 	lds	r22, 0x03AF
     b94:	70 91 b0 03 	lds	r23, 0x03B0
     b98:	80 91 ab 03 	lds	r24, 0x03AB
     b9c:	90 91 ac 03 	lds	r25, 0x03AC
	difficultyMenu->children[0] = currItem;
     ba0:	fb 01       	movw	r30, r22
     ba2:	95 83       	std	Z+5, r25	; 0x05
     ba4:	84 83       	std	Z+4, r24	; 0x04
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	40 e0       	ldi	r20, 0x00	; 0
     bac:	50 e0       	ldi	r21, 0x00	; 0
     bae:	8a e4       	ldi	r24, 0x4A	; 74
     bb0:	93 e0       	ldi	r25, 0x03	; 3
     bb2:	18 df       	rcall	.-464    	; 0x9e4 <MENU_addMenuItem>
     bb4:	60 91 af 03 	lds	r22, 0x03AF
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
     bb8:	70 91 b0 03 	lds	r23, 0x03B0
     bbc:	80 91 ab 03 	lds	r24, 0x03AB
     bc0:	90 91 ac 03 	lds	r25, 0x03AC
     bc4:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
     bc6:	17 96       	adiw	r26, 0x07	; 7
     bc8:	9c 93       	st	X, r25
     bca:	8e 93       	st	-X, r24
     bcc:	16 97       	sbiw	r26, 0x06	; 6
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	40 e0       	ldi	r20, 0x00	; 0
     bd4:	50 e0       	ldi	r21, 0x00	; 0
     bd6:	81 e5       	ldi	r24, 0x51	; 81
     bd8:	93 e0       	ldi	r25, 0x03	; 3
     bda:	04 df       	rcall	.-504    	; 0x9e4 <MENU_addMenuItem>
     bdc:	e0 91 af 03 	lds	r30, 0x03AF
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
     be0:	f0 91 b0 03 	lds	r31, 0x03B0
     be4:	80 91 ab 03 	lds	r24, 0x03AB
     be8:	90 91 ac 03 	lds	r25, 0x03AC
     bec:	91 87       	std	Z+9, r25	; 0x09
     bee:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	08 95       	ret

00000bf6 <MENU_printMenuItem>:
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	ec 01       	movw	r28, r24
     bfc:	cb 01       	movw	r24, r22
     bfe:	20 97       	sbiw	r28, 0x00	; 0
     c00:	49 f0       	breq	.+18     	; 0xc14 <MENU_printMenuItem+0x1e>
     c02:	60 91 0e 01 	lds	r22, 0x010E
}
     c06:	70 91 0f 01 	lds	r23, 0x010F

void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
     c0a:	fa d0       	rcall	.+500    	; 0xe00 <OLED_goto>
     c0c:	88 81       	ld	r24, Y
		OLED_printString(item->name);
     c0e:	99 81       	ldd	r25, Y+1	; 0x01
     c10:	d2 d1       	rcall	.+932    	; 0xfb6 <OLED_printString>
     c12:	07 c0       	rjmp	.+14     	; 0xc22 <MENU_printMenuItem+0x2c>
     c14:	86 e5       	ldi	r24, 0x56	; 86
     c16:	93 e0       	ldi	r25, 0x03	; 3
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
     c18:	9f 93       	push	r25
     c1a:	8f 93       	push	r24
     c1c:	3d d4       	rcall	.+2170   	; 0x1498 <printf>
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	08 95       	ret

00000c28 <MENU_printMenu>:
	}
}
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	6c 01       	movw	r12, r24
     c3a:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
     c3c:	fe d0       	rcall	.+508    	; 0xe3a <OLED_clear>
     c3e:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	10 d2       	rcall	.+1056   	; 0x1064 <OLED_moveArrow>
     c44:	1e 14       	cp	r1, r14
     c46:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
     c48:	7c f4       	brge	.+30     	; 0xc68 <MENU_printMenu+0x40>
     c4a:	86 01       	movw	r16, r12
     c4c:	0c 5f       	subi	r16, 0xFC	; 252
     c4e:	1f 4f       	sbci	r17, 0xFF	; 255
     c50:	c0 e0       	ldi	r28, 0x00	; 0
     c52:	d0 e0       	ldi	r29, 0x00	; 0
     c54:	be 01       	movw	r22, r28
     c56:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
     c58:	81 91       	ld	r24, Z+
     c5a:	91 91       	ld	r25, Z+
     c5c:	8f 01       	movw	r16, r30
     c5e:	cb df       	rcall	.-106    	; 0xbf6 <MENU_printMenuItem>
     c60:	21 96       	adiw	r28, 0x01	; 1
     c62:	ce 15       	cp	r28, r14
     c64:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
     c66:	b1 f7       	brne	.-20     	; 0xc54 <MENU_printMenu+0x2c>
     c68:	d0 92 ae 03 	sts	0x03AE, r13
     c6c:	c0 92 ad 03 	sts	0x03AD, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
     c70:	10 92 a9 03 	sts	0x03A9, r1
     c74:	10 92 a8 03 	sts	0x03A8, r1
	
	currentPosition = 0;
     c78:	f6 01       	movw	r30, r12
     c7a:	84 81       	ldd	r24, Z+4	; 0x04
     c7c:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
     c7e:	90 93 ac 03 	sts	0x03AC, r25
     c82:	80 93 ab 03 	sts	0x03AB, r24
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	1f 91       	pop	r17
}
     c8c:	0f 91       	pop	r16
     c8e:	ff 90       	pop	r15
     c90:	ef 90       	pop	r14
     c92:	df 90       	pop	r13
     c94:	cf 90       	pop	r12
     c96:	08 95       	ret

00000c98 <MENU_moveUp>:
     c98:	20 91 a8 03 	lds	r18, 0x03A8
     c9c:	30 91 a9 03 	lds	r19, 0x03A9
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
     ca0:	12 16       	cp	r1, r18
     ca2:	13 06       	cpc	r1, r19
     ca4:	bc f4       	brge	.+46     	; 0xcd4 <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
     ca6:	c9 01       	movw	r24, r18
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	90 93 a9 03 	sts	0x03A9, r25
     cae:	80 93 a8 03 	sts	0x03A8, r24
		currItem = currentMenu->children[currentPosition];
     cb2:	e0 91 ad 03 	lds	r30, 0x03AD
     cb6:	f0 91 ae 03 	lds	r31, 0x03AE
     cba:	2f 5f       	subi	r18, 0xFF	; 255
     cbc:	3f 4f       	sbci	r19, 0xFF	; 255
     cbe:	22 0f       	add	r18, r18
     cc0:	33 1f       	adc	r19, r19
     cc2:	e2 0f       	add	r30, r18
     cc4:	f3 1f       	adc	r31, r19
     cc6:	20 81       	ld	r18, Z
     cc8:	31 81       	ldd	r19, Z+1	; 0x01
     cca:	30 93 ac 03 	sts	0x03AC, r19
     cce:	20 93 ab 03 	sts	0x03AB, r18
		OLED_moveArrow(currentPosition);
     cd2:	c8 c1       	rjmp	.+912    	; 0x1064 <OLED_moveArrow>
     cd4:	08 95       	ret

00000cd6 <MENU_moveDown>:
     cd6:	e0 91 ad 03 	lds	r30, 0x03AD
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
     cda:	f0 91 ae 03 	lds	r31, 0x03AE
     cde:	20 91 a8 03 	lds	r18, 0x03A8
     ce2:	30 91 a9 03 	lds	r19, 0x03A9
     ce6:	82 81       	ldd	r24, Z+2	; 0x02
     ce8:	93 81       	ldd	r25, Z+3	; 0x03
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	28 17       	cp	r18, r24
     cee:	39 07       	cpc	r19, r25
     cf0:	a4 f4       	brge	.+40     	; 0xd1a <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
     cf2:	c9 01       	movw	r24, r18
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	90 93 a9 03 	sts	0x03A9, r25
     cfa:	80 93 a8 03 	sts	0x03A8, r24
		currItem = currentMenu->children[currentPosition];
     cfe:	2d 5f       	subi	r18, 0xFD	; 253
     d00:	3f 4f       	sbci	r19, 0xFF	; 255
     d02:	22 0f       	add	r18, r18
     d04:	33 1f       	adc	r19, r19
     d06:	e2 0f       	add	r30, r18
     d08:	f3 1f       	adc	r31, r19
     d0a:	20 81       	ld	r18, Z
     d0c:	31 81       	ldd	r19, Z+1	; 0x01
     d0e:	30 93 ac 03 	sts	0x03AC, r19
     d12:	20 93 ab 03 	sts	0x03AB, r18
		OLED_moveArrow(currentPosition);
     d16:	a6 c1       	rjmp	.+844    	; 0x1064 <OLED_moveArrow>
     d18:	08 95       	ret
     d1a:	10 92 a9 03 	sts	0x03A9, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
     d1e:	10 92 a8 03 	sts	0x03A8, r1
     d22:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
     d24:	95 81       	ldd	r25, Z+5	; 0x05
     d26:	90 93 ac 03 	sts	0x03AC, r25
     d2a:	80 93 ab 03 	sts	0x03AB, r24
     d2e:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	98 c1       	rjmp	.+816    	; 0x1064 <OLED_moveArrow>
     d34:	08 95       	ret

00000d36 <MENU_moveLeft>:
     d36:	e0 91 ad 03 	lds	r30, 0x03AD
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
     d3a:	f0 91 ae 03 	lds	r31, 0x03AE
     d3e:	84 89       	ldd	r24, Z+20	; 0x14
     d40:	95 89       	ldd	r25, Z+21	; 0x15
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	21 f0       	breq	.+8      	; 0xd4e <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
     d46:	fc 01       	movw	r30, r24
     d48:	62 81       	ldd	r22, Z+2	; 0x02
     d4a:	73 81       	ldd	r23, Z+3	; 0x03
     d4c:	6d cf       	rjmp	.-294    	; 0xc28 <MENU_printMenu>
     d4e:	08 95       	ret

00000d50 <MENU_reactivate>:
     d50:	80 91 ad 03 	lds	r24, 0x03AD
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
     d54:	90 91 ae 03 	lds	r25, 0x03AE
     d58:	fc 01       	movw	r30, r24
     d5a:	62 81       	ldd	r22, Z+2	; 0x02
     d5c:	73 81       	ldd	r23, Z+3	; 0x03
     d5e:	64 df       	rcall	.-312    	; 0xc28 <MENU_printMenu>
     d60:	18 c0       	rjmp	.+48     	; 0xd92 <MENU_waitForInput>
	MENU_waitForInput();
     d62:	08 95       	ret

00000d64 <MENU_moveRight>:
     d64:	e0 91 ab 03 	lds	r30, 0x03AB
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
     d68:	f0 91 ac 03 	lds	r31, 0x03AC
     d6c:	86 81       	ldd	r24, Z+6	; 0x06
     d6e:	97 81       	ldd	r25, Z+7	; 0x07
     d70:	89 2b       	or	r24, r25
     d72:	39 f0       	breq	.+14     	; 0xd82 <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
     d74:	84 81       	ldd	r24, Z+4	; 0x04
     d76:	95 81       	ldd	r25, Z+5	; 0x05
     d78:	fc 01       	movw	r30, r24
     d7a:	62 81       	ldd	r22, Z+2	; 0x02
     d7c:	73 81       	ldd	r23, Z+3	; 0x03
     d7e:	54 cf       	rjmp	.-344    	; 0xc28 <MENU_printMenu>
     d80:	08 95       	ret
     d82:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
     d84:	f3 85       	ldd	r31, Z+11	; 0x0b
     d86:	e0 2d       	mov	r30, r0
     d88:	30 97       	sbiw	r30, 0x00	; 0
     d8a:	11 f0       	breq	.+4      	; 0xd90 <MENU_moveRight+0x2c>
     d8c:	09 95       	icall
	{
		currItem->functionPtr();
     d8e:	e0 cf       	rjmp	.-64     	; 0xd50 <MENU_reactivate>
		MENU_reactivate();
     d90:	08 95       	ret

00000d92 <MENU_waitForInput>:
     d92:	80 91 a8 03 	lds	r24, 0x03A8
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
     d96:	90 91 a9 03 	lds	r25, 0x03A9
     d9a:	64 d1       	rcall	.+712    	; 0x1064 <OLED_moveArrow>
     d9c:	80 91 aa 03 	lds	r24, 0x03AA
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
     da0:	88 23       	and	r24, r24
     da2:	f9 f0       	breq	.+62     	; 0xde2 <MENU_waitForInput+0x50>
     da4:	6f dd       	rcall	.-1314   	; 0x884 <JOY_getDirection>
	{
		currDir = JOY_getDirection();
     da6:	82 30       	cpi	r24, 0x02	; 2
     da8:	71 f0       	breq	.+28     	; 0xdc6 <MENU_waitForInput+0x34>
		switch(currDir){
     daa:	18 f4       	brcc	.+6      	; 0xdb2 <MENU_waitForInput+0x20>
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	49 f0       	breq	.+18     	; 0xdc2 <MENU_waitForInput+0x30>
     db0:	0b c0       	rjmp	.+22     	; 0xdc8 <MENU_waitForInput+0x36>
     db2:	83 30       	cpi	r24, 0x03	; 3
     db4:	21 f0       	breq	.+8      	; 0xdbe <MENU_waitForInput+0x2c>
     db6:	84 30       	cpi	r24, 0x04	; 4
     db8:	39 f4       	brne	.+14     	; 0xdc8 <MENU_waitForInput+0x36>
     dba:	bd df       	rcall	.-134    	; 0xd36 <MENU_moveLeft>
     dbc:	05 c0       	rjmp	.+10     	; 0xdc8 <MENU_waitForInput+0x36>
			case LEFT:
			MENU_moveLeft();
     dbe:	d2 df       	rcall	.-92     	; 0xd64 <MENU_moveRight>
     dc0:	03 c0       	rjmp	.+6      	; 0xdc8 <MENU_waitForInput+0x36>
			break;
     dc2:	6a df       	rcall	.-300    	; 0xc98 <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
     dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <MENU_waitForInput+0x36>
     dc6:	87 df       	rcall	.-242    	; 0xcd6 <MENU_moveDown>
			break;
     dc8:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
     dca:	8f e7       	ldi	r24, 0x7F	; 127
     dcc:	94 e0       	ldi	r25, 0x04	; 4
			break;
     dce:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
     dd0:	80 40       	sbci	r24, 0x00	; 0
     dd2:	90 40       	sbci	r25, 0x00	; 0
     dd4:	e1 f7       	brne	.-8      	; 0xdce <MENU_waitForInput+0x3c>
     dd6:	00 c0       	rjmp	.+0      	; 0xdd8 <MENU_waitForInput+0x46>
     dd8:	00 00       	nop
     dda:	80 91 aa 03 	lds	r24, 0x03AA
     dde:	81 11       	cpse	r24, r1
     de0:	e1 cf       	rjmp	.-62     	; 0xda4 <MENU_waitForInput+0x12>
     de2:	08 95       	ret

00000de4 <MENU_activate>:
     de4:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
     de6:	80 93 aa 03 	sts	0x03AA, r24
     dea:	33 de       	rcall	.-922    	; 0xa52 <MENU_buildMenus>
     dec:	80 91 b1 03 	lds	r24, 0x03B1
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
     df0:	90 91 b2 03 	lds	r25, 0x03B2
     df4:	fc 01       	movw	r30, r24
     df6:	62 81       	ldd	r22, Z+2	; 0x02
     df8:	73 81       	ldd	r23, Z+3	; 0x03
     dfa:	16 df       	rcall	.-468    	; 0xc28 <MENU_printMenu>
     dfc:	ca cf       	rjmp	.-108    	; 0xd92 <MENU_waitForInput>
     dfe:	08 95       	ret

00000e00 <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
     e00:	26 2f       	mov	r18, r22
     e02:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
     e04:	75 95       	asr	r23
     e06:	67 95       	ror	r22
     e08:	75 95       	asr	r23
     e0a:	67 95       	ror	r22
     e0c:	75 95       	asr	r23
     e0e:	67 95       	ror	r22
     e10:	75 95       	asr	r23
     e12:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
     e14:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
     e16:	80 55       	subi	r24, 0x50	; 80
     e18:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
     e1a:	e0 91 12 01 	lds	r30, 0x0112
     e1e:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e22:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
     e24:	e0 91 12 01 	lds	r30, 0x0112
     e28:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e2c:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
     e2e:	e0 91 12 01 	lds	r30, 0x0112
     e32:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e36:	60 83       	st	Z, r22
     e38:	08 95       	ret

00000e3a <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
     e3a:	1f 93       	push	r17
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	c1 e0       	ldi	r28, 0x01	; 1
     e42:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
     e48:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	d8 df       	rcall	.-80     	; 0xe00 <OLED_goto>
     e50:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
     e52:	e0 91 10 01 	lds	r30, 0x0110
		{
			OLED_writeByteToOLED(oled_data, 0x00);
     e56:	f0 91 11 01 	lds	r31, 0x0111
     e5a:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e5c:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
     e5e:	80 38       	cpi	r24, 0x80	; 128
     e60:	c1 f7       	brne	.-16     	; 0xe52 <OLED_clear+0x18>
     e62:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
     e64:	9d 2f       	mov	r25, r29
     e66:	21 96       	adiw	r28, 0x01	; 1
     e68:	c9 30       	cpi	r28, 0x09	; 9
     e6a:	d1 05       	cpc	r29, r1
     e6c:	71 f7       	brne	.-36     	; 0xe4a <OLED_clear+0x10>
     e6e:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
     e70:	cf 91       	pop	r28
     e72:	1f 91       	pop	r17
     e74:	08 95       	ret

00000e76 <OLED_init>:
     e76:	e0 91 12 01 	lds	r30, 0x0112
//------------------------------------------------------------------------------
// Default initialization routine of the OLED display.

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
     e7a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e7e:	8e ea       	ldi	r24, 0xAE	; 174
     e80:	80 83       	st	Z, r24
// Default initialization routine of the OLED display.

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
     e82:	e0 91 12 01 	lds	r30, 0x0112
     e86:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e8a:	81 ea       	ldi	r24, 0xA1	; 161
     e8c:	80 83       	st	Z, r24

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
     e8e:	e0 91 12 01 	lds	r30, 0x0112
     e92:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e96:	8a ed       	ldi	r24, 0xDA	; 218
     e98:	80 83       	st	Z, r24
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
     e9a:	e0 91 12 01 	lds	r30, 0x0112
     e9e:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ea2:	82 e1       	ldi	r24, 0x12	; 18
     ea4:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
     ea6:	e0 91 12 01 	lds	r30, 0x0112
     eaa:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     eae:	88 ec       	ldi	r24, 0xC8	; 200
     eb0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
     eb2:	e0 91 12 01 	lds	r30, 0x0112
     eb6:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     eba:	88 ea       	ldi	r24, 0xA8	; 168
     ebc:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
     ebe:	e0 91 12 01 	lds	r30, 0x0112
     ec2:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ec6:	8f e3       	ldi	r24, 0x3F	; 63
     ec8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
     eca:	e0 91 12 01 	lds	r30, 0x0112
     ece:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ed2:	85 ed       	ldi	r24, 0xD5	; 213
     ed4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
     ed6:	e0 91 12 01 	lds	r30, 0x0112
     eda:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ede:	80 e8       	ldi	r24, 0x80	; 128
     ee0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
     ee2:	e0 91 12 01 	lds	r30, 0x0112
     ee6:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     eea:	81 e8       	ldi	r24, 0x81	; 129
     eec:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
     eee:	e0 91 12 01 	lds	r30, 0x0112
     ef2:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ef6:	80 e5       	ldi	r24, 0x50	; 80
     ef8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
     efa:	e0 91 12 01 	lds	r30, 0x0112
     efe:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f02:	89 ed       	ldi	r24, 0xD9	; 217
     f04:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
     f06:	e0 91 12 01 	lds	r30, 0x0112
     f0a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f0e:	81 e2       	ldi	r24, 0x21	; 33
     f10:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
     f12:	e0 91 12 01 	lds	r30, 0x0112
     f16:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f1a:	80 e2       	ldi	r24, 0x20	; 32
     f1c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
     f1e:	e0 91 12 01 	lds	r30, 0x0112
     f22:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f26:	82 e0       	ldi	r24, 0x02	; 2
     f28:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
     f2a:	e0 91 12 01 	lds	r30, 0x0112
     f2e:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f32:	8b ed       	ldi	r24, 0xDB	; 219
     f34:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
     f36:	e0 91 12 01 	lds	r30, 0x0112
     f3a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f3e:	80 e3       	ldi	r24, 0x30	; 48
     f40:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
     f42:	e0 91 12 01 	lds	r30, 0x0112
     f46:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f4a:	8d ea       	ldi	r24, 0xAD	; 173
     f4c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
     f4e:	e0 91 12 01 	lds	r30, 0x0112
     f52:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f56:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
     f58:	e0 91 12 01 	lds	r30, 0x0112
     f5c:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f60:	84 ea       	ldi	r24, 0xA4	; 164
     f62:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
     f64:	e0 91 12 01 	lds	r30, 0x0112
     f68:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f6c:	86 ea       	ldi	r24, 0xA6	; 166
     f6e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
     f70:	e0 91 12 01 	lds	r30, 0x0112
     f74:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f78:	8f ea       	ldi	r24, 0xAF	; 175
     f7a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
     f7c:	5e cf       	rjmp	.-324    	; 0xe3a <OLED_clear>
     f7e:	08 95       	ret

00000f80 <OLED_printCharacter>:
     f80:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	22 0f       	add	r18, r18
     f88:	33 1f       	adc	r19, r19
     f8a:	22 0f       	add	r18, r18
     f8c:	33 1f       	adc	r19, r19
     f8e:	22 0f       	add	r18, r18
     f90:	33 1f       	adc	r19, r19
     f92:	80 e0       	ldi	r24, 0x00	; 0
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	20 59       	subi	r18, 0x90	; 144
     f98:	3f 4f       	sbci	r19, 0xFF	; 255
     f9a:	f9 01       	movw	r30, r18
     f9c:	e8 0f       	add	r30, r24
     f9e:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
     fa0:	e4 91       	lpm	r30, Z
     fa2:	a0 91 10 01 	lds	r26, 0x0110
     fa6:	b0 91 11 01 	lds	r27, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     faa:	ec 93       	st	X, r30
     fac:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
     fae:	88 30       	cpi	r24, 0x08	; 8
     fb0:	91 05       	cpc	r25, r1
     fb2:	99 f7       	brne	.-26     	; 0xf9a <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
     fb4:	08 95       	ret

00000fb6 <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
     fbe:	10 e0       	ldi	r17, 0x00	; 0
     fc0:	06 c0       	rjmp	.+12     	; 0xfce <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
     fc2:	fe 01       	movw	r30, r28
     fc4:	e8 0f       	add	r30, r24
     fc6:	f9 1f       	adc	r31, r25
     fc8:	80 81       	ld	r24, Z
     fca:	da df       	rcall	.-76     	; 0xf80 <OLED_printCharacter>
     fcc:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
     fce:	81 2f       	mov	r24, r17
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	fe 01       	movw	r30, r28
     fd4:	01 90       	ld	r0, Z+
     fd6:	00 20       	and	r0, r0
     fd8:	e9 f7       	brne	.-6      	; 0xfd4 <OLED_printString+0x1e>
     fda:	31 97       	sbiw	r30, 0x01	; 1
     fdc:	ec 1b       	sub	r30, r28
     fde:	fd 0b       	sbc	r31, r29
     fe0:	8e 17       	cp	r24, r30
     fe2:	9f 07       	cpc	r25, r31
     fe4:	70 f3       	brcs	.-36     	; 0xfc2 <OLED_printString+0xc>
     fe6:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	08 95       	ret

00000fee <OLED_printArrow>:
     fee:	e0 91 10 01 	lds	r30, 0x0110
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
     ff2:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ff6:	88 e1       	ldi	r24, 0x18	; 24
     ff8:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
     ffa:	e0 91 10 01 	lds	r30, 0x0110
     ffe:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1002:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
    1004:	e0 91 10 01 	lds	r30, 0x0110
    1008:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    100c:	9e e7       	ldi	r25, 0x7E	; 126
    100e:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
    1010:	e0 91 10 01 	lds	r30, 0x0110
    1014:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1018:	9c e3       	ldi	r25, 0x3C	; 60
    101a:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    101c:	e0 91 10 01 	lds	r30, 0x0110
    1020:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1024:	80 83       	st	Z, r24
    1026:	08 95       	ret

00001028 <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    1028:	1f 93       	push	r17
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	c1 e0       	ldi	r28, 0x01	; 1
    1030:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1036:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	e1 de       	rcall	.-574    	; 0xe00 <OLED_goto>
    103e:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1040:	e0 91 10 01 	lds	r30, 0x0110
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    1044:	f0 91 11 01 	lds	r31, 0x0111
    1048:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    104a:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    104c:	85 30       	cpi	r24, 0x05	; 5
    104e:	c1 f7       	brne	.-16     	; 0x1040 <OLED_clearArrow+0x18>
    1050:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1052:	9d 2f       	mov	r25, r29
    1054:	21 96       	adiw	r28, 0x01	; 1
    1056:	c9 30       	cpi	r28, 0x09	; 9
    1058:	d1 05       	cpc	r29, r1
    105a:	71 f7       	brne	.-36     	; 0x1038 <OLED_clearArrow+0x10>
    105c:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	08 95       	ret

00001064 <OLED_moveArrow>:
    1064:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    1066:	df 93       	push	r29
    1068:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
    106a:	de df       	rcall	.-68     	; 0x1028 <OLED_clearArrow>
    106c:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
    106e:	70 e0       	ldi	r23, 0x00	; 0
    1070:	ce 01       	movw	r24, r28
    1072:	c6 de       	rcall	.-628    	; 0xe00 <OLED_goto>
    1074:	bc df       	rcall	.-136    	; 0xfee <OLED_printArrow>
    1076:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
    1078:	cf 91       	pop	r28
    107a:	08 95       	ret

0000107c <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    107c:	10 92 b5 03 	sts	0x03B5, r1
	currentSliPosition.L_abs = 0;
    1080:	10 92 b6 03 	sts	0x03B6, r1
	currentSliPosition.R_per = 0;
    1084:	10 92 b7 03 	sts	0x03B7, r1
	currentSliPosition.L_per = 0;
    1088:	10 92 b8 03 	sts	0x03B8, r1
    108c:	08 95       	ret

0000108e <SPI_init>:
#define UNSELECT_CAN_CONTROLLER_SLAVE set_bit(PORTB, SS_CAN_CONTROLLER_PIN)


void SPI_init()
{
	printf("\n\nInitializing SPI\n");
    108e:	86 e6       	ldi	r24, 0x66	; 102
    1090:	93 e0       	ldi	r25, 0x03	; 3
    1092:	13 d2       	rcall	.+1062   	; 0x14ba <puts>
    1094:	80 eb       	ldi	r24, 0xB0	; 176
	// Set _SS, MOSI and SCK output, all others input
	//DDRB = (1<<SS_CAN_CONTROLLER_PIN) | (1<<DDB5) | (1<<DDB7);
	DDRB = (1<<DDB4) | (1<<DDB5) | (1<<DDB7);
    1096:	87 bb       	out	0x17, r24	; 23
    1098:	81 e5       	ldi	r24, 0x51	; 81

 	//Enable SPI, Master, set clock rate fck/16
 	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
    109a:	8d b9       	out	0x0d, r24	; 13
    109c:	c4 9a       	sbi	0x18, 4	; 24

	// clock rate fck/2
	//SPSR = (1<<SPI2X);

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORTB, SS_CAN_CONTROLLER_PIN);
    109e:	08 95       	ret

000010a0 <SPI_send>:
    10a0:	8f b9       	out	0x0f, r24	; 15

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
	printf("Sendind %d\n", cData);
    10a2:	1f 92       	push	r1
    10a4:	8f 93       	push	r24
    10a6:	89 e7       	ldi	r24, 0x79	; 121
    10a8:	93 e0       	ldi	r25, 0x03	; 3
    10aa:	9f 93       	push	r25
    10ac:	8f 93       	push	r24
    10ae:	f4 d1       	rcall	.+1000   	; 0x1498 <printf>
    10b0:	0f 90       	pop	r0

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	77 9b       	sbis	0x0e, 7	; 14
    10ba:	fe cf       	rjmp	.-4      	; 0x10b8 <SPI_send+0x18>
    10bc:	08 95       	ret

000010be <SPI_receive>:
}
    10be:	8f ef       	ldi	r24, 0xFF	; 255

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    10c0:	ef df       	rcall	.-34     	; 0x10a0 <SPI_send>
    10c2:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    10c4:	fe cf       	rjmp	.-4      	; 0x10c2 <SPI_receive+0x4>
    10c6:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    10c8:	08 95       	ret

000010ca <SPI_activateSlave>:

	return data;
}
    10ca:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    10cc:	01 c0       	rjmp	.+2      	; 0x10d0 <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    10ce:	c4 98       	cbi	0x18, 4	; 24
    10d0:	08 95       	ret

000010d2 <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    10d2:	81 11       	cpse	r24, r1
    10d4:	01 c0       	rjmp	.+2      	; 0x10d8 <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    10d6:	c4 9a       	sbi	0x18, 4	; 24
    10d8:	08 95       	ret

000010da <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    10da:	5d 9b       	sbis	0x0b, 5	; 11
    10dc:	fe cf       	rjmp	.-4      	; 0x10da <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    10de:	8c b9       	out	0x0c, r24	; 12
    10e0:	08 95       	ret

000010e2 <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    10e2:	5f 9b       	sbis	0x0b, 7	; 11
    10e4:	fe cf       	rjmp	.-4      	; 0x10e2 <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    10e6:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
    10e8:	08 95       	ret

000010ea <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    10ea:	ef 92       	push	r14
    10ec:	ff 92       	push	r15
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    10f2:	bb 27       	eor	r27, r27
    10f4:	a1 2f       	mov	r26, r17
    10f6:	90 2f       	mov	r25, r16
    10f8:	8f 2d       	mov	r24, r15
    10fa:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    10fc:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    10fe:	88 e1       	ldi	r24, 0x18	; 24
    1100:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    1102:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    1104:	8e e8       	ldi	r24, 0x8E	; 142
    1106:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    1108:	61 e7       	ldi	r22, 0x71	; 113
    110a:	78 e0       	ldi	r23, 0x08	; 8
    110c:	8d e6       	ldi	r24, 0x6D	; 109
    110e:	98 e0       	ldi	r25, 0x08	; 8
    1110:	79 d1       	rcall	.+754    	; 0x1404 <fdevopen>
    1112:	1f 91       	pop	r17
    1114:	0f 91       	pop	r16
    1116:	ff 90       	pop	r15
    1118:	ef 90       	pop	r14
    111a:	08 95       	ret

0000111c <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    111c:	9b 01       	movw	r18, r22
	
	switch(channel){
    111e:	82 30       	cpi	r24, 0x02	; 2
    1120:	69 f0       	breq	.+26     	; 0x113c <ADC_request+0x20>
    1122:	18 f4       	brcc	.+6      	; 0x112a <ADC_request+0xe>
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	31 f0       	breq	.+12     	; 0x1134 <ADC_request+0x18>
    1128:	15 c0       	rjmp	.+42     	; 0x1154 <ADC_request+0x38>
    112a:	83 30       	cpi	r24, 0x03	; 3
    112c:	59 f0       	breq	.+22     	; 0x1144 <ADC_request+0x28>
    112e:	84 30       	cpi	r24, 0x04	; 4
    1130:	69 f0       	breq	.+26     	; 0x114c <ADC_request+0x30>
    1132:	10 c0       	rjmp	.+32     	; 0x1154 <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    1134:	64 e0       	ldi	r22, 0x04	; 4
    1136:	c9 01       	movw	r24, r18
    1138:	e2 c9       	rjmp	.-3132   	; 0x4fe <saveToAddress>
    113a:	08 95       	ret
			break;
    113c:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    113e:	c9 01       	movw	r24, r18
    1140:	de c9       	rjmp	.-3140   	; 0x4fe <saveToAddress>
    1142:	08 95       	ret
    1144:	66 e0       	ldi	r22, 0x06	; 6
			break;
    1146:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    1148:	da c9       	rjmp	.-3148   	; 0x4fe <saveToAddress>
    114a:	08 95       	ret
    114c:	67 e0       	ldi	r22, 0x07	; 7
    114e:	c9 01       	movw	r24, r18
			break;
    1150:	d6 c9       	rjmp	.-3156   	; 0x4fe <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    1152:	08 95       	ret
    1154:	85 e8       	ldi	r24, 0x85	; 133
    1156:	93 e0       	ldi	r25, 0x03	; 3
    1158:	9f 93       	push	r25
			break;
    115a:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    115c:	9d d1       	rcall	.+826    	; 0x1498 <printf>
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	08 95       	ret

00001164 <ADC_read>:
    1164:	c9 c9       	rjmp	.-3182   	; 0x4f8 <readFromAddress>
    1166:	08 95       	ret

00001168 <__divmodhi4>:
			break;
    1168:	97 fb       	bst	r25, 7
    116a:	07 2e       	mov	r0, r23
    116c:	16 f4       	brtc	.+4      	; 0x1172 <__divmodhi4+0xa>
    116e:	00 94       	com	r0
    1170:	06 d0       	rcall	.+12     	; 0x117e <__divmodhi4_neg1>
    1172:	77 fd       	sbrc	r23, 7
    1174:	08 d0       	rcall	.+16     	; 0x1186 <__divmodhi4_neg2>
    1176:	0b d0       	rcall	.+22     	; 0x118e <__udivmodhi4>
    1178:	07 fc       	sbrc	r0, 7
    117a:	05 d0       	rcall	.+10     	; 0x1186 <__divmodhi4_neg2>
    117c:	3e f4       	brtc	.+14     	; 0x118c <__divmodhi4_exit>

0000117e <__divmodhi4_neg1>:
    117e:	90 95       	com	r25
    1180:	81 95       	neg	r24
    1182:	9f 4f       	sbci	r25, 0xFF	; 255
    1184:	08 95       	ret

00001186 <__divmodhi4_neg2>:
    1186:	70 95       	com	r23
    1188:	61 95       	neg	r22
    118a:	7f 4f       	sbci	r23, 0xFF	; 255

0000118c <__divmodhi4_exit>:
    118c:	08 95       	ret

0000118e <__udivmodhi4>:
    118e:	aa 1b       	sub	r26, r26
    1190:	bb 1b       	sub	r27, r27
    1192:	51 e1       	ldi	r21, 0x11	; 17
    1194:	07 c0       	rjmp	.+14     	; 0x11a4 <__udivmodhi4_ep>

00001196 <__udivmodhi4_loop>:
    1196:	aa 1f       	adc	r26, r26
    1198:	bb 1f       	adc	r27, r27
    119a:	a6 17       	cp	r26, r22
    119c:	b7 07       	cpc	r27, r23
    119e:	10 f0       	brcs	.+4      	; 0x11a4 <__udivmodhi4_ep>
    11a0:	a6 1b       	sub	r26, r22
    11a2:	b7 0b       	sbc	r27, r23

000011a4 <__udivmodhi4_ep>:
    11a4:	88 1f       	adc	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	5a 95       	dec	r21
    11aa:	a9 f7       	brne	.-22     	; 0x1196 <__udivmodhi4_loop>
    11ac:	80 95       	com	r24
    11ae:	90 95       	com	r25
    11b0:	bc 01       	movw	r22, r24
    11b2:	cd 01       	movw	r24, r26
    11b4:	08 95       	ret

000011b6 <malloc>:
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	82 30       	cpi	r24, 0x02	; 2
    11bc:	91 05       	cpc	r25, r1
    11be:	10 f4       	brcc	.+4      	; 0x11c4 <malloc+0xe>
    11c0:	82 e0       	ldi	r24, 0x02	; 2
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	e0 91 bb 03 	lds	r30, 0x03BB
    11c8:	f0 91 bc 03 	lds	r31, 0x03BC
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	a0 e0       	ldi	r26, 0x00	; 0
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	30 97       	sbiw	r30, 0x00	; 0
    11d6:	39 f1       	breq	.+78     	; 0x1226 <malloc+0x70>
    11d8:	40 81       	ld	r20, Z
    11da:	51 81       	ldd	r21, Z+1	; 0x01
    11dc:	48 17       	cp	r20, r24
    11de:	59 07       	cpc	r21, r25
    11e0:	b8 f0       	brcs	.+46     	; 0x1210 <malloc+0x5a>
    11e2:	48 17       	cp	r20, r24
    11e4:	59 07       	cpc	r21, r25
    11e6:	71 f4       	brne	.+28     	; 0x1204 <malloc+0x4e>
    11e8:	82 81       	ldd	r24, Z+2	; 0x02
    11ea:	93 81       	ldd	r25, Z+3	; 0x03
    11ec:	10 97       	sbiw	r26, 0x00	; 0
    11ee:	29 f0       	breq	.+10     	; 0x11fa <malloc+0x44>
    11f0:	13 96       	adiw	r26, 0x03	; 3
    11f2:	9c 93       	st	X, r25
    11f4:	8e 93       	st	-X, r24
    11f6:	12 97       	sbiw	r26, 0x02	; 2
    11f8:	2c c0       	rjmp	.+88     	; 0x1252 <malloc+0x9c>
    11fa:	90 93 bc 03 	sts	0x03BC, r25
    11fe:	80 93 bb 03 	sts	0x03BB, r24
    1202:	27 c0       	rjmp	.+78     	; 0x1252 <malloc+0x9c>
    1204:	21 15       	cp	r18, r1
    1206:	31 05       	cpc	r19, r1
    1208:	31 f0       	breq	.+12     	; 0x1216 <malloc+0x60>
    120a:	42 17       	cp	r20, r18
    120c:	53 07       	cpc	r21, r19
    120e:	18 f0       	brcs	.+6      	; 0x1216 <malloc+0x60>
    1210:	a9 01       	movw	r20, r18
    1212:	db 01       	movw	r26, r22
    1214:	01 c0       	rjmp	.+2      	; 0x1218 <malloc+0x62>
    1216:	ef 01       	movw	r28, r30
    1218:	9a 01       	movw	r18, r20
    121a:	bd 01       	movw	r22, r26
    121c:	df 01       	movw	r26, r30
    121e:	02 80       	ldd	r0, Z+2	; 0x02
    1220:	f3 81       	ldd	r31, Z+3	; 0x03
    1222:	e0 2d       	mov	r30, r0
    1224:	d7 cf       	rjmp	.-82     	; 0x11d4 <malloc+0x1e>
    1226:	21 15       	cp	r18, r1
    1228:	31 05       	cpc	r19, r1
    122a:	f9 f0       	breq	.+62     	; 0x126a <malloc+0xb4>
    122c:	28 1b       	sub	r18, r24
    122e:	39 0b       	sbc	r19, r25
    1230:	24 30       	cpi	r18, 0x04	; 4
    1232:	31 05       	cpc	r19, r1
    1234:	80 f4       	brcc	.+32     	; 0x1256 <malloc+0xa0>
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	9b 81       	ldd	r25, Y+3	; 0x03
    123a:	61 15       	cp	r22, r1
    123c:	71 05       	cpc	r23, r1
    123e:	21 f0       	breq	.+8      	; 0x1248 <malloc+0x92>
    1240:	fb 01       	movw	r30, r22
    1242:	93 83       	std	Z+3, r25	; 0x03
    1244:	82 83       	std	Z+2, r24	; 0x02
    1246:	04 c0       	rjmp	.+8      	; 0x1250 <malloc+0x9a>
    1248:	90 93 bc 03 	sts	0x03BC, r25
    124c:	80 93 bb 03 	sts	0x03BB, r24
    1250:	fe 01       	movw	r30, r28
    1252:	32 96       	adiw	r30, 0x02	; 2
    1254:	44 c0       	rjmp	.+136    	; 0x12de <malloc+0x128>
    1256:	fe 01       	movw	r30, r28
    1258:	e2 0f       	add	r30, r18
    125a:	f3 1f       	adc	r31, r19
    125c:	81 93       	st	Z+, r24
    125e:	91 93       	st	Z+, r25
    1260:	22 50       	subi	r18, 0x02	; 2
    1262:	31 09       	sbc	r19, r1
    1264:	39 83       	std	Y+1, r19	; 0x01
    1266:	28 83       	st	Y, r18
    1268:	3a c0       	rjmp	.+116    	; 0x12de <malloc+0x128>
    126a:	20 91 b9 03 	lds	r18, 0x03B9
    126e:	30 91 ba 03 	lds	r19, 0x03BA
    1272:	23 2b       	or	r18, r19
    1274:	41 f4       	brne	.+16     	; 0x1286 <malloc+0xd0>
    1276:	20 91 02 01 	lds	r18, 0x0102
    127a:	30 91 03 01 	lds	r19, 0x0103
    127e:	30 93 ba 03 	sts	0x03BA, r19
    1282:	20 93 b9 03 	sts	0x03B9, r18
    1286:	20 91 00 01 	lds	r18, 0x0100
    128a:	30 91 01 01 	lds	r19, 0x0101
    128e:	21 15       	cp	r18, r1
    1290:	31 05       	cpc	r19, r1
    1292:	41 f4       	brne	.+16     	; 0x12a4 <malloc+0xee>
    1294:	2d b7       	in	r18, 0x3d	; 61
    1296:	3e b7       	in	r19, 0x3e	; 62
    1298:	40 91 04 01 	lds	r20, 0x0104
    129c:	50 91 05 01 	lds	r21, 0x0105
    12a0:	24 1b       	sub	r18, r20
    12a2:	35 0b       	sbc	r19, r21
    12a4:	e0 91 b9 03 	lds	r30, 0x03B9
    12a8:	f0 91 ba 03 	lds	r31, 0x03BA
    12ac:	e2 17       	cp	r30, r18
    12ae:	f3 07       	cpc	r31, r19
    12b0:	a0 f4       	brcc	.+40     	; 0x12da <malloc+0x124>
    12b2:	2e 1b       	sub	r18, r30
    12b4:	3f 0b       	sbc	r19, r31
    12b6:	28 17       	cp	r18, r24
    12b8:	39 07       	cpc	r19, r25
    12ba:	78 f0       	brcs	.+30     	; 0x12da <malloc+0x124>
    12bc:	ac 01       	movw	r20, r24
    12be:	4e 5f       	subi	r20, 0xFE	; 254
    12c0:	5f 4f       	sbci	r21, 0xFF	; 255
    12c2:	24 17       	cp	r18, r20
    12c4:	35 07       	cpc	r19, r21
    12c6:	48 f0       	brcs	.+18     	; 0x12da <malloc+0x124>
    12c8:	4e 0f       	add	r20, r30
    12ca:	5f 1f       	adc	r21, r31
    12cc:	50 93 ba 03 	sts	0x03BA, r21
    12d0:	40 93 b9 03 	sts	0x03B9, r20
    12d4:	81 93       	st	Z+, r24
    12d6:	91 93       	st	Z+, r25
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <malloc+0x128>
    12da:	e0 e0       	ldi	r30, 0x00	; 0
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	cf 01       	movw	r24, r30
    12e0:	df 91       	pop	r29
    12e2:	cf 91       	pop	r28
    12e4:	08 95       	ret

000012e6 <free>:
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <free+0xa>
    12ee:	87 c0       	rjmp	.+270    	; 0x13fe <free+0x118>
    12f0:	fc 01       	movw	r30, r24
    12f2:	32 97       	sbiw	r30, 0x02	; 2
    12f4:	13 82       	std	Z+3, r1	; 0x03
    12f6:	12 82       	std	Z+2, r1	; 0x02
    12f8:	c0 91 bb 03 	lds	r28, 0x03BB
    12fc:	d0 91 bc 03 	lds	r29, 0x03BC
    1300:	20 97       	sbiw	r28, 0x00	; 0
    1302:	81 f4       	brne	.+32     	; 0x1324 <free+0x3e>
    1304:	20 81       	ld	r18, Z
    1306:	31 81       	ldd	r19, Z+1	; 0x01
    1308:	28 0f       	add	r18, r24
    130a:	39 1f       	adc	r19, r25
    130c:	80 91 b9 03 	lds	r24, 0x03B9
    1310:	90 91 ba 03 	lds	r25, 0x03BA
    1314:	82 17       	cp	r24, r18
    1316:	93 07       	cpc	r25, r19
    1318:	79 f5       	brne	.+94     	; 0x1378 <free+0x92>
    131a:	f0 93 ba 03 	sts	0x03BA, r31
    131e:	e0 93 b9 03 	sts	0x03B9, r30
    1322:	6d c0       	rjmp	.+218    	; 0x13fe <free+0x118>
    1324:	de 01       	movw	r26, r28
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	ae 17       	cp	r26, r30
    132c:	bf 07       	cpc	r27, r31
    132e:	50 f4       	brcc	.+20     	; 0x1344 <free+0x5e>
    1330:	12 96       	adiw	r26, 0x02	; 2
    1332:	4d 91       	ld	r20, X+
    1334:	5c 91       	ld	r21, X
    1336:	13 97       	sbiw	r26, 0x03	; 3
    1338:	9d 01       	movw	r18, r26
    133a:	41 15       	cp	r20, r1
    133c:	51 05       	cpc	r21, r1
    133e:	09 f1       	breq	.+66     	; 0x1382 <free+0x9c>
    1340:	da 01       	movw	r26, r20
    1342:	f3 cf       	rjmp	.-26     	; 0x132a <free+0x44>
    1344:	b3 83       	std	Z+3, r27	; 0x03
    1346:	a2 83       	std	Z+2, r26	; 0x02
    1348:	40 81       	ld	r20, Z
    134a:	51 81       	ldd	r21, Z+1	; 0x01
    134c:	84 0f       	add	r24, r20
    134e:	95 1f       	adc	r25, r21
    1350:	8a 17       	cp	r24, r26
    1352:	9b 07       	cpc	r25, r27
    1354:	71 f4       	brne	.+28     	; 0x1372 <free+0x8c>
    1356:	8d 91       	ld	r24, X+
    1358:	9c 91       	ld	r25, X
    135a:	11 97       	sbiw	r26, 0x01	; 1
    135c:	84 0f       	add	r24, r20
    135e:	95 1f       	adc	r25, r21
    1360:	02 96       	adiw	r24, 0x02	; 2
    1362:	91 83       	std	Z+1, r25	; 0x01
    1364:	80 83       	st	Z, r24
    1366:	12 96       	adiw	r26, 0x02	; 2
    1368:	8d 91       	ld	r24, X+
    136a:	9c 91       	ld	r25, X
    136c:	13 97       	sbiw	r26, 0x03	; 3
    136e:	93 83       	std	Z+3, r25	; 0x03
    1370:	82 83       	std	Z+2, r24	; 0x02
    1372:	21 15       	cp	r18, r1
    1374:	31 05       	cpc	r19, r1
    1376:	29 f4       	brne	.+10     	; 0x1382 <free+0x9c>
    1378:	f0 93 bc 03 	sts	0x03BC, r31
    137c:	e0 93 bb 03 	sts	0x03BB, r30
    1380:	3e c0       	rjmp	.+124    	; 0x13fe <free+0x118>
    1382:	d9 01       	movw	r26, r18
    1384:	13 96       	adiw	r26, 0x03	; 3
    1386:	fc 93       	st	X, r31
    1388:	ee 93       	st	-X, r30
    138a:	12 97       	sbiw	r26, 0x02	; 2
    138c:	4d 91       	ld	r20, X+
    138e:	5d 91       	ld	r21, X+
    1390:	a4 0f       	add	r26, r20
    1392:	b5 1f       	adc	r27, r21
    1394:	ea 17       	cp	r30, r26
    1396:	fb 07       	cpc	r31, r27
    1398:	79 f4       	brne	.+30     	; 0x13b8 <free+0xd2>
    139a:	80 81       	ld	r24, Z
    139c:	91 81       	ldd	r25, Z+1	; 0x01
    139e:	84 0f       	add	r24, r20
    13a0:	95 1f       	adc	r25, r21
    13a2:	02 96       	adiw	r24, 0x02	; 2
    13a4:	d9 01       	movw	r26, r18
    13a6:	11 96       	adiw	r26, 0x01	; 1
    13a8:	9c 93       	st	X, r25
    13aa:	8e 93       	st	-X, r24
    13ac:	82 81       	ldd	r24, Z+2	; 0x02
    13ae:	93 81       	ldd	r25, Z+3	; 0x03
    13b0:	13 96       	adiw	r26, 0x03	; 3
    13b2:	9c 93       	st	X, r25
    13b4:	8e 93       	st	-X, r24
    13b6:	12 97       	sbiw	r26, 0x02	; 2
    13b8:	e0 e0       	ldi	r30, 0x00	; 0
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	9b 81       	ldd	r25, Y+3	; 0x03
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	19 f0       	breq	.+6      	; 0x13ca <free+0xe4>
    13c4:	fe 01       	movw	r30, r28
    13c6:	ec 01       	movw	r28, r24
    13c8:	f9 cf       	rjmp	.-14     	; 0x13bc <free+0xd6>
    13ca:	ce 01       	movw	r24, r28
    13cc:	02 96       	adiw	r24, 0x02	; 2
    13ce:	28 81       	ld	r18, Y
    13d0:	39 81       	ldd	r19, Y+1	; 0x01
    13d2:	82 0f       	add	r24, r18
    13d4:	93 1f       	adc	r25, r19
    13d6:	20 91 b9 03 	lds	r18, 0x03B9
    13da:	30 91 ba 03 	lds	r19, 0x03BA
    13de:	28 17       	cp	r18, r24
    13e0:	39 07       	cpc	r19, r25
    13e2:	69 f4       	brne	.+26     	; 0x13fe <free+0x118>
    13e4:	30 97       	sbiw	r30, 0x00	; 0
    13e6:	29 f4       	brne	.+10     	; 0x13f2 <free+0x10c>
    13e8:	10 92 bc 03 	sts	0x03BC, r1
    13ec:	10 92 bb 03 	sts	0x03BB, r1
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <free+0x110>
    13f2:	13 82       	std	Z+3, r1	; 0x03
    13f4:	12 82       	std	Z+2, r1	; 0x02
    13f6:	d0 93 ba 03 	sts	0x03BA, r29
    13fa:	c0 93 b9 03 	sts	0x03B9, r28
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	08 95       	ret

00001404 <fdevopen>:
    1404:	0f 93       	push	r16
    1406:	1f 93       	push	r17
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	ec 01       	movw	r28, r24
    140e:	8b 01       	movw	r16, r22
    1410:	00 97       	sbiw	r24, 0x00	; 0
    1412:	31 f4       	brne	.+12     	; 0x1420 <fdevopen+0x1c>
    1414:	61 15       	cp	r22, r1
    1416:	71 05       	cpc	r23, r1
    1418:	19 f4       	brne	.+6      	; 0x1420 <fdevopen+0x1c>
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	37 c0       	rjmp	.+110    	; 0x148e <fdevopen+0x8a>
    1420:	6e e0       	ldi	r22, 0x0E	; 14
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	38 d2       	rcall	.+1136   	; 0x189a <calloc>
    142a:	fc 01       	movw	r30, r24
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	a9 f3       	breq	.-22     	; 0x141a <fdevopen+0x16>
    1430:	80 e8       	ldi	r24, 0x80	; 128
    1432:	83 83       	std	Z+3, r24	; 0x03
    1434:	01 15       	cp	r16, r1
    1436:	11 05       	cpc	r17, r1
    1438:	71 f0       	breq	.+28     	; 0x1456 <fdevopen+0x52>
    143a:	13 87       	std	Z+11, r17	; 0x0b
    143c:	02 87       	std	Z+10, r16	; 0x0a
    143e:	81 e8       	ldi	r24, 0x81	; 129
    1440:	83 83       	std	Z+3, r24	; 0x03
    1442:	80 91 bd 03 	lds	r24, 0x03BD
    1446:	90 91 be 03 	lds	r25, 0x03BE
    144a:	89 2b       	or	r24, r25
    144c:	21 f4       	brne	.+8      	; 0x1456 <fdevopen+0x52>
    144e:	f0 93 be 03 	sts	0x03BE, r31
    1452:	e0 93 bd 03 	sts	0x03BD, r30
    1456:	20 97       	sbiw	r28, 0x00	; 0
    1458:	c9 f0       	breq	.+50     	; 0x148c <fdevopen+0x88>
    145a:	d1 87       	std	Z+9, r29	; 0x09
    145c:	c0 87       	std	Z+8, r28	; 0x08
    145e:	83 81       	ldd	r24, Z+3	; 0x03
    1460:	82 60       	ori	r24, 0x02	; 2
    1462:	83 83       	std	Z+3, r24	; 0x03
    1464:	80 91 bf 03 	lds	r24, 0x03BF
    1468:	90 91 c0 03 	lds	r25, 0x03C0
    146c:	89 2b       	or	r24, r25
    146e:	71 f4       	brne	.+28     	; 0x148c <fdevopen+0x88>
    1470:	f0 93 c0 03 	sts	0x03C0, r31
    1474:	e0 93 bf 03 	sts	0x03BF, r30
    1478:	80 91 c1 03 	lds	r24, 0x03C1
    147c:	90 91 c2 03 	lds	r25, 0x03C2
    1480:	89 2b       	or	r24, r25
    1482:	21 f4       	brne	.+8      	; 0x148c <fdevopen+0x88>
    1484:	f0 93 c2 03 	sts	0x03C2, r31
    1488:	e0 93 c1 03 	sts	0x03C1, r30
    148c:	cf 01       	movw	r24, r30
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	1f 91       	pop	r17
    1494:	0f 91       	pop	r16
    1496:	08 95       	ret

00001498 <printf>:
    1498:	a0 e0       	ldi	r26, 0x00	; 0
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e1 e5       	ldi	r30, 0x51	; 81
    149e:	fa e0       	ldi	r31, 0x0A	; 10
    14a0:	d3 c2       	rjmp	.+1446   	; 0x1a48 <__prologue_saves__+0x20>
    14a2:	fe 01       	movw	r30, r28
    14a4:	35 96       	adiw	r30, 0x05	; 5
    14a6:	61 91       	ld	r22, Z+
    14a8:	71 91       	ld	r23, Z+
    14aa:	af 01       	movw	r20, r30
    14ac:	80 91 bf 03 	lds	r24, 0x03BF
    14b0:	90 91 c0 03 	lds	r25, 0x03C0
    14b4:	2f d0       	rcall	.+94     	; 0x1514 <vfprintf>
    14b6:	e2 e0       	ldi	r30, 0x02	; 2
    14b8:	e3 c2       	rjmp	.+1478   	; 0x1a80 <__epilogue_restores__+0x20>

000014ba <puts>:
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	e0 91 bf 03 	lds	r30, 0x03BF
    14c6:	f0 91 c0 03 	lds	r31, 0x03C0
    14ca:	23 81       	ldd	r18, Z+3	; 0x03
    14cc:	21 ff       	sbrs	r18, 1
    14ce:	1b c0       	rjmp	.+54     	; 0x1506 <puts+0x4c>
    14d0:	ec 01       	movw	r28, r24
    14d2:	00 e0       	ldi	r16, 0x00	; 0
    14d4:	10 e0       	ldi	r17, 0x00	; 0
    14d6:	89 91       	ld	r24, Y+
    14d8:	60 91 bf 03 	lds	r22, 0x03BF
    14dc:	70 91 c0 03 	lds	r23, 0x03C0
    14e0:	db 01       	movw	r26, r22
    14e2:	18 96       	adiw	r26, 0x08	; 8
    14e4:	ed 91       	ld	r30, X+
    14e6:	fc 91       	ld	r31, X
    14e8:	19 97       	sbiw	r26, 0x09	; 9
    14ea:	88 23       	and	r24, r24
    14ec:	31 f0       	breq	.+12     	; 0x14fa <puts+0x40>
    14ee:	09 95       	icall
    14f0:	89 2b       	or	r24, r25
    14f2:	89 f3       	breq	.-30     	; 0x14d6 <puts+0x1c>
    14f4:	0f ef       	ldi	r16, 0xFF	; 255
    14f6:	1f ef       	ldi	r17, 0xFF	; 255
    14f8:	ee cf       	rjmp	.-36     	; 0x14d6 <puts+0x1c>
    14fa:	8a e0       	ldi	r24, 0x0A	; 10
    14fc:	09 95       	icall
    14fe:	89 2b       	or	r24, r25
    1500:	11 f4       	brne	.+4      	; 0x1506 <puts+0x4c>
    1502:	c8 01       	movw	r24, r16
    1504:	02 c0       	rjmp	.+4      	; 0x150a <puts+0x50>
    1506:	8f ef       	ldi	r24, 0xFF	; 255
    1508:	9f ef       	ldi	r25, 0xFF	; 255
    150a:	df 91       	pop	r29
    150c:	cf 91       	pop	r28
    150e:	1f 91       	pop	r17
    1510:	0f 91       	pop	r16
    1512:	08 95       	ret

00001514 <vfprintf>:
    1514:	ac e0       	ldi	r26, 0x0C	; 12
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	ef e8       	ldi	r30, 0x8F	; 143
    151a:	fa e0       	ldi	r31, 0x0A	; 10
    151c:	85 c2       	rjmp	.+1290   	; 0x1a28 <__prologue_saves__>
    151e:	7c 01       	movw	r14, r24
    1520:	6b 01       	movw	r12, r22
    1522:	8a 01       	movw	r16, r20
    1524:	fc 01       	movw	r30, r24
    1526:	17 82       	std	Z+7, r1	; 0x07
    1528:	16 82       	std	Z+6, r1	; 0x06
    152a:	83 81       	ldd	r24, Z+3	; 0x03
    152c:	81 ff       	sbrs	r24, 1
    152e:	b0 c1       	rjmp	.+864    	; 0x1890 <vfprintf+0x37c>
    1530:	ce 01       	movw	r24, r28
    1532:	01 96       	adiw	r24, 0x01	; 1
    1534:	4c 01       	movw	r8, r24
    1536:	f7 01       	movw	r30, r14
    1538:	93 81       	ldd	r25, Z+3	; 0x03
    153a:	f6 01       	movw	r30, r12
    153c:	93 fd       	sbrc	r25, 3
    153e:	85 91       	lpm	r24, Z+
    1540:	93 ff       	sbrs	r25, 3
    1542:	81 91       	ld	r24, Z+
    1544:	6f 01       	movw	r12, r30
    1546:	88 23       	and	r24, r24
    1548:	09 f4       	brne	.+2      	; 0x154c <vfprintf+0x38>
    154a:	9e c1       	rjmp	.+828    	; 0x1888 <vfprintf+0x374>
    154c:	85 32       	cpi	r24, 0x25	; 37
    154e:	39 f4       	brne	.+14     	; 0x155e <vfprintf+0x4a>
    1550:	93 fd       	sbrc	r25, 3
    1552:	85 91       	lpm	r24, Z+
    1554:	93 ff       	sbrs	r25, 3
    1556:	81 91       	ld	r24, Z+
    1558:	6f 01       	movw	r12, r30
    155a:	85 32       	cpi	r24, 0x25	; 37
    155c:	21 f4       	brne	.+8      	; 0x1566 <vfprintf+0x52>
    155e:	b7 01       	movw	r22, r14
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	d2 d1       	rcall	.+932    	; 0x1908 <fputc>
    1564:	e8 cf       	rjmp	.-48     	; 0x1536 <vfprintf+0x22>
    1566:	51 2c       	mov	r5, r1
    1568:	31 2c       	mov	r3, r1
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	20 32       	cpi	r18, 0x20	; 32
    156e:	a0 f4       	brcc	.+40     	; 0x1598 <vfprintf+0x84>
    1570:	8b 32       	cpi	r24, 0x2B	; 43
    1572:	69 f0       	breq	.+26     	; 0x158e <vfprintf+0x7a>
    1574:	30 f4       	brcc	.+12     	; 0x1582 <vfprintf+0x6e>
    1576:	80 32       	cpi	r24, 0x20	; 32
    1578:	59 f0       	breq	.+22     	; 0x1590 <vfprintf+0x7c>
    157a:	83 32       	cpi	r24, 0x23	; 35
    157c:	69 f4       	brne	.+26     	; 0x1598 <vfprintf+0x84>
    157e:	20 61       	ori	r18, 0x10	; 16
    1580:	2c c0       	rjmp	.+88     	; 0x15da <vfprintf+0xc6>
    1582:	8d 32       	cpi	r24, 0x2D	; 45
    1584:	39 f0       	breq	.+14     	; 0x1594 <vfprintf+0x80>
    1586:	80 33       	cpi	r24, 0x30	; 48
    1588:	39 f4       	brne	.+14     	; 0x1598 <vfprintf+0x84>
    158a:	21 60       	ori	r18, 0x01	; 1
    158c:	26 c0       	rjmp	.+76     	; 0x15da <vfprintf+0xc6>
    158e:	22 60       	ori	r18, 0x02	; 2
    1590:	24 60       	ori	r18, 0x04	; 4
    1592:	23 c0       	rjmp	.+70     	; 0x15da <vfprintf+0xc6>
    1594:	28 60       	ori	r18, 0x08	; 8
    1596:	21 c0       	rjmp	.+66     	; 0x15da <vfprintf+0xc6>
    1598:	27 fd       	sbrc	r18, 7
    159a:	27 c0       	rjmp	.+78     	; 0x15ea <vfprintf+0xd6>
    159c:	30 ed       	ldi	r19, 0xD0	; 208
    159e:	38 0f       	add	r19, r24
    15a0:	3a 30       	cpi	r19, 0x0A	; 10
    15a2:	78 f4       	brcc	.+30     	; 0x15c2 <vfprintf+0xae>
    15a4:	26 ff       	sbrs	r18, 6
    15a6:	06 c0       	rjmp	.+12     	; 0x15b4 <vfprintf+0xa0>
    15a8:	fa e0       	ldi	r31, 0x0A	; 10
    15aa:	5f 9e       	mul	r5, r31
    15ac:	30 0d       	add	r19, r0
    15ae:	11 24       	eor	r1, r1
    15b0:	53 2e       	mov	r5, r19
    15b2:	13 c0       	rjmp	.+38     	; 0x15da <vfprintf+0xc6>
    15b4:	8a e0       	ldi	r24, 0x0A	; 10
    15b6:	38 9e       	mul	r3, r24
    15b8:	30 0d       	add	r19, r0
    15ba:	11 24       	eor	r1, r1
    15bc:	33 2e       	mov	r3, r19
    15be:	20 62       	ori	r18, 0x20	; 32
    15c0:	0c c0       	rjmp	.+24     	; 0x15da <vfprintf+0xc6>
    15c2:	8e 32       	cpi	r24, 0x2E	; 46
    15c4:	21 f4       	brne	.+8      	; 0x15ce <vfprintf+0xba>
    15c6:	26 fd       	sbrc	r18, 6
    15c8:	5f c1       	rjmp	.+702    	; 0x1888 <vfprintf+0x374>
    15ca:	20 64       	ori	r18, 0x40	; 64
    15cc:	06 c0       	rjmp	.+12     	; 0x15da <vfprintf+0xc6>
    15ce:	8c 36       	cpi	r24, 0x6C	; 108
    15d0:	11 f4       	brne	.+4      	; 0x15d6 <vfprintf+0xc2>
    15d2:	20 68       	ori	r18, 0x80	; 128
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <vfprintf+0xc6>
    15d6:	88 36       	cpi	r24, 0x68	; 104
    15d8:	41 f4       	brne	.+16     	; 0x15ea <vfprintf+0xd6>
    15da:	f6 01       	movw	r30, r12
    15dc:	93 fd       	sbrc	r25, 3
    15de:	85 91       	lpm	r24, Z+
    15e0:	93 ff       	sbrs	r25, 3
    15e2:	81 91       	ld	r24, Z+
    15e4:	6f 01       	movw	r12, r30
    15e6:	81 11       	cpse	r24, r1
    15e8:	c1 cf       	rjmp	.-126    	; 0x156c <vfprintf+0x58>
    15ea:	98 2f       	mov	r25, r24
    15ec:	9f 7d       	andi	r25, 0xDF	; 223
    15ee:	95 54       	subi	r25, 0x45	; 69
    15f0:	93 30       	cpi	r25, 0x03	; 3
    15f2:	28 f4       	brcc	.+10     	; 0x15fe <vfprintf+0xea>
    15f4:	0c 5f       	subi	r16, 0xFC	; 252
    15f6:	1f 4f       	sbci	r17, 0xFF	; 255
    15f8:	ff e3       	ldi	r31, 0x3F	; 63
    15fa:	f9 83       	std	Y+1, r31	; 0x01
    15fc:	0d c0       	rjmp	.+26     	; 0x1618 <vfprintf+0x104>
    15fe:	83 36       	cpi	r24, 0x63	; 99
    1600:	31 f0       	breq	.+12     	; 0x160e <vfprintf+0xfa>
    1602:	83 37       	cpi	r24, 0x73	; 115
    1604:	71 f0       	breq	.+28     	; 0x1622 <vfprintf+0x10e>
    1606:	83 35       	cpi	r24, 0x53	; 83
    1608:	09 f0       	breq	.+2      	; 0x160c <vfprintf+0xf8>
    160a:	57 c0       	rjmp	.+174    	; 0x16ba <vfprintf+0x1a6>
    160c:	21 c0       	rjmp	.+66     	; 0x1650 <vfprintf+0x13c>
    160e:	f8 01       	movw	r30, r16
    1610:	80 81       	ld	r24, Z
    1612:	89 83       	std	Y+1, r24	; 0x01
    1614:	0e 5f       	subi	r16, 0xFE	; 254
    1616:	1f 4f       	sbci	r17, 0xFF	; 255
    1618:	44 24       	eor	r4, r4
    161a:	43 94       	inc	r4
    161c:	51 2c       	mov	r5, r1
    161e:	54 01       	movw	r10, r8
    1620:	14 c0       	rjmp	.+40     	; 0x164a <vfprintf+0x136>
    1622:	38 01       	movw	r6, r16
    1624:	f2 e0       	ldi	r31, 0x02	; 2
    1626:	6f 0e       	add	r6, r31
    1628:	71 1c       	adc	r7, r1
    162a:	f8 01       	movw	r30, r16
    162c:	a0 80       	ld	r10, Z
    162e:	b1 80       	ldd	r11, Z+1	; 0x01
    1630:	26 ff       	sbrs	r18, 6
    1632:	03 c0       	rjmp	.+6      	; 0x163a <vfprintf+0x126>
    1634:	65 2d       	mov	r22, r5
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	02 c0       	rjmp	.+4      	; 0x163e <vfprintf+0x12a>
    163a:	6f ef       	ldi	r22, 0xFF	; 255
    163c:	7f ef       	ldi	r23, 0xFF	; 255
    163e:	c5 01       	movw	r24, r10
    1640:	2c 87       	std	Y+12, r18	; 0x0c
    1642:	57 d1       	rcall	.+686    	; 0x18f2 <strnlen>
    1644:	2c 01       	movw	r4, r24
    1646:	83 01       	movw	r16, r6
    1648:	2c 85       	ldd	r18, Y+12	; 0x0c
    164a:	2f 77       	andi	r18, 0x7F	; 127
    164c:	22 2e       	mov	r2, r18
    164e:	16 c0       	rjmp	.+44     	; 0x167c <vfprintf+0x168>
    1650:	38 01       	movw	r6, r16
    1652:	f2 e0       	ldi	r31, 0x02	; 2
    1654:	6f 0e       	add	r6, r31
    1656:	71 1c       	adc	r7, r1
    1658:	f8 01       	movw	r30, r16
    165a:	a0 80       	ld	r10, Z
    165c:	b1 80       	ldd	r11, Z+1	; 0x01
    165e:	26 ff       	sbrs	r18, 6
    1660:	03 c0       	rjmp	.+6      	; 0x1668 <vfprintf+0x154>
    1662:	65 2d       	mov	r22, r5
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	02 c0       	rjmp	.+4      	; 0x166c <vfprintf+0x158>
    1668:	6f ef       	ldi	r22, 0xFF	; 255
    166a:	7f ef       	ldi	r23, 0xFF	; 255
    166c:	c5 01       	movw	r24, r10
    166e:	2c 87       	std	Y+12, r18	; 0x0c
    1670:	2e d1       	rcall	.+604    	; 0x18ce <strnlen_P>
    1672:	2c 01       	movw	r4, r24
    1674:	2c 85       	ldd	r18, Y+12	; 0x0c
    1676:	20 68       	ori	r18, 0x80	; 128
    1678:	22 2e       	mov	r2, r18
    167a:	83 01       	movw	r16, r6
    167c:	23 fc       	sbrc	r2, 3
    167e:	19 c0       	rjmp	.+50     	; 0x16b2 <vfprintf+0x19e>
    1680:	83 2d       	mov	r24, r3
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	48 16       	cp	r4, r24
    1686:	59 06       	cpc	r5, r25
    1688:	a0 f4       	brcc	.+40     	; 0x16b2 <vfprintf+0x19e>
    168a:	b7 01       	movw	r22, r14
    168c:	80 e2       	ldi	r24, 0x20	; 32
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	3b d1       	rcall	.+630    	; 0x1908 <fputc>
    1692:	3a 94       	dec	r3
    1694:	f5 cf       	rjmp	.-22     	; 0x1680 <vfprintf+0x16c>
    1696:	f5 01       	movw	r30, r10
    1698:	27 fc       	sbrc	r2, 7
    169a:	85 91       	lpm	r24, Z+
    169c:	27 fe       	sbrs	r2, 7
    169e:	81 91       	ld	r24, Z+
    16a0:	5f 01       	movw	r10, r30
    16a2:	b7 01       	movw	r22, r14
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	30 d1       	rcall	.+608    	; 0x1908 <fputc>
    16a8:	31 10       	cpse	r3, r1
    16aa:	3a 94       	dec	r3
    16ac:	f1 e0       	ldi	r31, 0x01	; 1
    16ae:	4f 1a       	sub	r4, r31
    16b0:	51 08       	sbc	r5, r1
    16b2:	41 14       	cp	r4, r1
    16b4:	51 04       	cpc	r5, r1
    16b6:	79 f7       	brne	.-34     	; 0x1696 <vfprintf+0x182>
    16b8:	de c0       	rjmp	.+444    	; 0x1876 <vfprintf+0x362>
    16ba:	84 36       	cpi	r24, 0x64	; 100
    16bc:	11 f0       	breq	.+4      	; 0x16c2 <vfprintf+0x1ae>
    16be:	89 36       	cpi	r24, 0x69	; 105
    16c0:	31 f5       	brne	.+76     	; 0x170e <vfprintf+0x1fa>
    16c2:	f8 01       	movw	r30, r16
    16c4:	27 ff       	sbrs	r18, 7
    16c6:	07 c0       	rjmp	.+14     	; 0x16d6 <vfprintf+0x1c2>
    16c8:	60 81       	ld	r22, Z
    16ca:	71 81       	ldd	r23, Z+1	; 0x01
    16cc:	82 81       	ldd	r24, Z+2	; 0x02
    16ce:	93 81       	ldd	r25, Z+3	; 0x03
    16d0:	0c 5f       	subi	r16, 0xFC	; 252
    16d2:	1f 4f       	sbci	r17, 0xFF	; 255
    16d4:	08 c0       	rjmp	.+16     	; 0x16e6 <vfprintf+0x1d2>
    16d6:	60 81       	ld	r22, Z
    16d8:	71 81       	ldd	r23, Z+1	; 0x01
    16da:	88 27       	eor	r24, r24
    16dc:	77 fd       	sbrc	r23, 7
    16de:	80 95       	com	r24
    16e0:	98 2f       	mov	r25, r24
    16e2:	0e 5f       	subi	r16, 0xFE	; 254
    16e4:	1f 4f       	sbci	r17, 0xFF	; 255
    16e6:	2f 76       	andi	r18, 0x6F	; 111
    16e8:	b2 2e       	mov	r11, r18
    16ea:	97 ff       	sbrs	r25, 7
    16ec:	09 c0       	rjmp	.+18     	; 0x1700 <vfprintf+0x1ec>
    16ee:	90 95       	com	r25
    16f0:	80 95       	com	r24
    16f2:	70 95       	com	r23
    16f4:	61 95       	neg	r22
    16f6:	7f 4f       	sbci	r23, 0xFF	; 255
    16f8:	8f 4f       	sbci	r24, 0xFF	; 255
    16fa:	9f 4f       	sbci	r25, 0xFF	; 255
    16fc:	20 68       	ori	r18, 0x80	; 128
    16fe:	b2 2e       	mov	r11, r18
    1700:	2a e0       	ldi	r18, 0x0A	; 10
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	a4 01       	movw	r20, r8
    1706:	32 d1       	rcall	.+612    	; 0x196c <__ultoa_invert>
    1708:	a8 2e       	mov	r10, r24
    170a:	a8 18       	sub	r10, r8
    170c:	43 c0       	rjmp	.+134    	; 0x1794 <vfprintf+0x280>
    170e:	85 37       	cpi	r24, 0x75	; 117
    1710:	29 f4       	brne	.+10     	; 0x171c <vfprintf+0x208>
    1712:	2f 7e       	andi	r18, 0xEF	; 239
    1714:	b2 2e       	mov	r11, r18
    1716:	2a e0       	ldi	r18, 0x0A	; 10
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	25 c0       	rjmp	.+74     	; 0x1766 <vfprintf+0x252>
    171c:	f2 2f       	mov	r31, r18
    171e:	f9 7f       	andi	r31, 0xF9	; 249
    1720:	bf 2e       	mov	r11, r31
    1722:	8f 36       	cpi	r24, 0x6F	; 111
    1724:	c1 f0       	breq	.+48     	; 0x1756 <vfprintf+0x242>
    1726:	18 f4       	brcc	.+6      	; 0x172e <vfprintf+0x21a>
    1728:	88 35       	cpi	r24, 0x58	; 88
    172a:	79 f0       	breq	.+30     	; 0x174a <vfprintf+0x236>
    172c:	ad c0       	rjmp	.+346    	; 0x1888 <vfprintf+0x374>
    172e:	80 37       	cpi	r24, 0x70	; 112
    1730:	19 f0       	breq	.+6      	; 0x1738 <vfprintf+0x224>
    1732:	88 37       	cpi	r24, 0x78	; 120
    1734:	21 f0       	breq	.+8      	; 0x173e <vfprintf+0x22a>
    1736:	a8 c0       	rjmp	.+336    	; 0x1888 <vfprintf+0x374>
    1738:	2f 2f       	mov	r18, r31
    173a:	20 61       	ori	r18, 0x10	; 16
    173c:	b2 2e       	mov	r11, r18
    173e:	b4 fe       	sbrs	r11, 4
    1740:	0d c0       	rjmp	.+26     	; 0x175c <vfprintf+0x248>
    1742:	8b 2d       	mov	r24, r11
    1744:	84 60       	ori	r24, 0x04	; 4
    1746:	b8 2e       	mov	r11, r24
    1748:	09 c0       	rjmp	.+18     	; 0x175c <vfprintf+0x248>
    174a:	24 ff       	sbrs	r18, 4
    174c:	0a c0       	rjmp	.+20     	; 0x1762 <vfprintf+0x24e>
    174e:	9f 2f       	mov	r25, r31
    1750:	96 60       	ori	r25, 0x06	; 6
    1752:	b9 2e       	mov	r11, r25
    1754:	06 c0       	rjmp	.+12     	; 0x1762 <vfprintf+0x24e>
    1756:	28 e0       	ldi	r18, 0x08	; 8
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	05 c0       	rjmp	.+10     	; 0x1766 <vfprintf+0x252>
    175c:	20 e1       	ldi	r18, 0x10	; 16
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <vfprintf+0x252>
    1762:	20 e1       	ldi	r18, 0x10	; 16
    1764:	32 e0       	ldi	r19, 0x02	; 2
    1766:	f8 01       	movw	r30, r16
    1768:	b7 fe       	sbrs	r11, 7
    176a:	07 c0       	rjmp	.+14     	; 0x177a <vfprintf+0x266>
    176c:	60 81       	ld	r22, Z
    176e:	71 81       	ldd	r23, Z+1	; 0x01
    1770:	82 81       	ldd	r24, Z+2	; 0x02
    1772:	93 81       	ldd	r25, Z+3	; 0x03
    1774:	0c 5f       	subi	r16, 0xFC	; 252
    1776:	1f 4f       	sbci	r17, 0xFF	; 255
    1778:	06 c0       	rjmp	.+12     	; 0x1786 <vfprintf+0x272>
    177a:	60 81       	ld	r22, Z
    177c:	71 81       	ldd	r23, Z+1	; 0x01
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	0e 5f       	subi	r16, 0xFE	; 254
    1784:	1f 4f       	sbci	r17, 0xFF	; 255
    1786:	a4 01       	movw	r20, r8
    1788:	f1 d0       	rcall	.+482    	; 0x196c <__ultoa_invert>
    178a:	a8 2e       	mov	r10, r24
    178c:	a8 18       	sub	r10, r8
    178e:	fb 2d       	mov	r31, r11
    1790:	ff 77       	andi	r31, 0x7F	; 127
    1792:	bf 2e       	mov	r11, r31
    1794:	b6 fe       	sbrs	r11, 6
    1796:	0b c0       	rjmp	.+22     	; 0x17ae <vfprintf+0x29a>
    1798:	2b 2d       	mov	r18, r11
    179a:	2e 7f       	andi	r18, 0xFE	; 254
    179c:	a5 14       	cp	r10, r5
    179e:	50 f4       	brcc	.+20     	; 0x17b4 <vfprintf+0x2a0>
    17a0:	b4 fe       	sbrs	r11, 4
    17a2:	0a c0       	rjmp	.+20     	; 0x17b8 <vfprintf+0x2a4>
    17a4:	b2 fc       	sbrc	r11, 2
    17a6:	08 c0       	rjmp	.+16     	; 0x17b8 <vfprintf+0x2a4>
    17a8:	2b 2d       	mov	r18, r11
    17aa:	2e 7e       	andi	r18, 0xEE	; 238
    17ac:	05 c0       	rjmp	.+10     	; 0x17b8 <vfprintf+0x2a4>
    17ae:	7a 2c       	mov	r7, r10
    17b0:	2b 2d       	mov	r18, r11
    17b2:	03 c0       	rjmp	.+6      	; 0x17ba <vfprintf+0x2a6>
    17b4:	7a 2c       	mov	r7, r10
    17b6:	01 c0       	rjmp	.+2      	; 0x17ba <vfprintf+0x2a6>
    17b8:	75 2c       	mov	r7, r5
    17ba:	24 ff       	sbrs	r18, 4
    17bc:	0d c0       	rjmp	.+26     	; 0x17d8 <vfprintf+0x2c4>
    17be:	fe 01       	movw	r30, r28
    17c0:	ea 0d       	add	r30, r10
    17c2:	f1 1d       	adc	r31, r1
    17c4:	80 81       	ld	r24, Z
    17c6:	80 33       	cpi	r24, 0x30	; 48
    17c8:	11 f4       	brne	.+4      	; 0x17ce <vfprintf+0x2ba>
    17ca:	29 7e       	andi	r18, 0xE9	; 233
    17cc:	09 c0       	rjmp	.+18     	; 0x17e0 <vfprintf+0x2cc>
    17ce:	22 ff       	sbrs	r18, 2
    17d0:	06 c0       	rjmp	.+12     	; 0x17de <vfprintf+0x2ca>
    17d2:	73 94       	inc	r7
    17d4:	73 94       	inc	r7
    17d6:	04 c0       	rjmp	.+8      	; 0x17e0 <vfprintf+0x2cc>
    17d8:	82 2f       	mov	r24, r18
    17da:	86 78       	andi	r24, 0x86	; 134
    17dc:	09 f0       	breq	.+2      	; 0x17e0 <vfprintf+0x2cc>
    17de:	73 94       	inc	r7
    17e0:	23 fd       	sbrc	r18, 3
    17e2:	12 c0       	rjmp	.+36     	; 0x1808 <vfprintf+0x2f4>
    17e4:	20 ff       	sbrs	r18, 0
    17e6:	06 c0       	rjmp	.+12     	; 0x17f4 <vfprintf+0x2e0>
    17e8:	5a 2c       	mov	r5, r10
    17ea:	73 14       	cp	r7, r3
    17ec:	18 f4       	brcc	.+6      	; 0x17f4 <vfprintf+0x2e0>
    17ee:	53 0c       	add	r5, r3
    17f0:	57 18       	sub	r5, r7
    17f2:	73 2c       	mov	r7, r3
    17f4:	73 14       	cp	r7, r3
    17f6:	60 f4       	brcc	.+24     	; 0x1810 <vfprintf+0x2fc>
    17f8:	b7 01       	movw	r22, r14
    17fa:	80 e2       	ldi	r24, 0x20	; 32
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	2c 87       	std	Y+12, r18	; 0x0c
    1800:	83 d0       	rcall	.+262    	; 0x1908 <fputc>
    1802:	73 94       	inc	r7
    1804:	2c 85       	ldd	r18, Y+12	; 0x0c
    1806:	f6 cf       	rjmp	.-20     	; 0x17f4 <vfprintf+0x2e0>
    1808:	73 14       	cp	r7, r3
    180a:	10 f4       	brcc	.+4      	; 0x1810 <vfprintf+0x2fc>
    180c:	37 18       	sub	r3, r7
    180e:	01 c0       	rjmp	.+2      	; 0x1812 <vfprintf+0x2fe>
    1810:	31 2c       	mov	r3, r1
    1812:	24 ff       	sbrs	r18, 4
    1814:	11 c0       	rjmp	.+34     	; 0x1838 <vfprintf+0x324>
    1816:	b7 01       	movw	r22, r14
    1818:	80 e3       	ldi	r24, 0x30	; 48
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	2c 87       	std	Y+12, r18	; 0x0c
    181e:	74 d0       	rcall	.+232    	; 0x1908 <fputc>
    1820:	2c 85       	ldd	r18, Y+12	; 0x0c
    1822:	22 ff       	sbrs	r18, 2
    1824:	16 c0       	rjmp	.+44     	; 0x1852 <vfprintf+0x33e>
    1826:	21 ff       	sbrs	r18, 1
    1828:	03 c0       	rjmp	.+6      	; 0x1830 <vfprintf+0x31c>
    182a:	88 e5       	ldi	r24, 0x58	; 88
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <vfprintf+0x320>
    1830:	88 e7       	ldi	r24, 0x78	; 120
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	b7 01       	movw	r22, r14
    1836:	0c c0       	rjmp	.+24     	; 0x1850 <vfprintf+0x33c>
    1838:	82 2f       	mov	r24, r18
    183a:	86 78       	andi	r24, 0x86	; 134
    183c:	51 f0       	breq	.+20     	; 0x1852 <vfprintf+0x33e>
    183e:	21 fd       	sbrc	r18, 1
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <vfprintf+0x332>
    1842:	80 e2       	ldi	r24, 0x20	; 32
    1844:	01 c0       	rjmp	.+2      	; 0x1848 <vfprintf+0x334>
    1846:	8b e2       	ldi	r24, 0x2B	; 43
    1848:	27 fd       	sbrc	r18, 7
    184a:	8d e2       	ldi	r24, 0x2D	; 45
    184c:	b7 01       	movw	r22, r14
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	5b d0       	rcall	.+182    	; 0x1908 <fputc>
    1852:	a5 14       	cp	r10, r5
    1854:	30 f4       	brcc	.+12     	; 0x1862 <vfprintf+0x34e>
    1856:	b7 01       	movw	r22, r14
    1858:	80 e3       	ldi	r24, 0x30	; 48
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	55 d0       	rcall	.+170    	; 0x1908 <fputc>
    185e:	5a 94       	dec	r5
    1860:	f8 cf       	rjmp	.-16     	; 0x1852 <vfprintf+0x33e>
    1862:	aa 94       	dec	r10
    1864:	f4 01       	movw	r30, r8
    1866:	ea 0d       	add	r30, r10
    1868:	f1 1d       	adc	r31, r1
    186a:	80 81       	ld	r24, Z
    186c:	b7 01       	movw	r22, r14
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	4b d0       	rcall	.+150    	; 0x1908 <fputc>
    1872:	a1 10       	cpse	r10, r1
    1874:	f6 cf       	rjmp	.-20     	; 0x1862 <vfprintf+0x34e>
    1876:	33 20       	and	r3, r3
    1878:	09 f4       	brne	.+2      	; 0x187c <vfprintf+0x368>
    187a:	5d ce       	rjmp	.-838    	; 0x1536 <vfprintf+0x22>
    187c:	b7 01       	movw	r22, r14
    187e:	80 e2       	ldi	r24, 0x20	; 32
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	42 d0       	rcall	.+132    	; 0x1908 <fputc>
    1884:	3a 94       	dec	r3
    1886:	f7 cf       	rjmp	.-18     	; 0x1876 <vfprintf+0x362>
    1888:	f7 01       	movw	r30, r14
    188a:	86 81       	ldd	r24, Z+6	; 0x06
    188c:	97 81       	ldd	r25, Z+7	; 0x07
    188e:	02 c0       	rjmp	.+4      	; 0x1894 <vfprintf+0x380>
    1890:	8f ef       	ldi	r24, 0xFF	; 255
    1892:	9f ef       	ldi	r25, 0xFF	; 255
    1894:	2c 96       	adiw	r28, 0x0c	; 12
    1896:	e2 e1       	ldi	r30, 0x12	; 18
    1898:	e3 c0       	rjmp	.+454    	; 0x1a60 <__epilogue_restores__>

0000189a <calloc>:
    189a:	0f 93       	push	r16
    189c:	1f 93       	push	r17
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	86 9f       	mul	r24, r22
    18a4:	80 01       	movw	r16, r0
    18a6:	87 9f       	mul	r24, r23
    18a8:	10 0d       	add	r17, r0
    18aa:	96 9f       	mul	r25, r22
    18ac:	10 0d       	add	r17, r0
    18ae:	11 24       	eor	r1, r1
    18b0:	c8 01       	movw	r24, r16
    18b2:	81 dc       	rcall	.-1790   	; 0x11b6 <malloc>
    18b4:	ec 01       	movw	r28, r24
    18b6:	00 97       	sbiw	r24, 0x00	; 0
    18b8:	21 f0       	breq	.+8      	; 0x18c2 <calloc+0x28>
    18ba:	a8 01       	movw	r20, r16
    18bc:	60 e0       	ldi	r22, 0x00	; 0
    18be:	70 e0       	ldi	r23, 0x00	; 0
    18c0:	11 d0       	rcall	.+34     	; 0x18e4 <memset>
    18c2:	ce 01       	movw	r24, r28
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	1f 91       	pop	r17
    18ca:	0f 91       	pop	r16
    18cc:	08 95       	ret

000018ce <strnlen_P>:
    18ce:	fc 01       	movw	r30, r24
    18d0:	05 90       	lpm	r0, Z+
    18d2:	61 50       	subi	r22, 0x01	; 1
    18d4:	70 40       	sbci	r23, 0x00	; 0
    18d6:	01 10       	cpse	r0, r1
    18d8:	d8 f7       	brcc	.-10     	; 0x18d0 <strnlen_P+0x2>
    18da:	80 95       	com	r24
    18dc:	90 95       	com	r25
    18de:	8e 0f       	add	r24, r30
    18e0:	9f 1f       	adc	r25, r31
    18e2:	08 95       	ret

000018e4 <memset>:
    18e4:	dc 01       	movw	r26, r24
    18e6:	01 c0       	rjmp	.+2      	; 0x18ea <memset+0x6>
    18e8:	6d 93       	st	X+, r22
    18ea:	41 50       	subi	r20, 0x01	; 1
    18ec:	50 40       	sbci	r21, 0x00	; 0
    18ee:	e0 f7       	brcc	.-8      	; 0x18e8 <memset+0x4>
    18f0:	08 95       	ret

000018f2 <strnlen>:
    18f2:	fc 01       	movw	r30, r24
    18f4:	61 50       	subi	r22, 0x01	; 1
    18f6:	70 40       	sbci	r23, 0x00	; 0
    18f8:	01 90       	ld	r0, Z+
    18fa:	01 10       	cpse	r0, r1
    18fc:	d8 f7       	brcc	.-10     	; 0x18f4 <strnlen+0x2>
    18fe:	80 95       	com	r24
    1900:	90 95       	com	r25
    1902:	8e 0f       	add	r24, r30
    1904:	9f 1f       	adc	r25, r31
    1906:	08 95       	ret

00001908 <fputc>:
    1908:	0f 93       	push	r16
    190a:	1f 93       	push	r17
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	18 2f       	mov	r17, r24
    1912:	09 2f       	mov	r16, r25
    1914:	eb 01       	movw	r28, r22
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	81 fd       	sbrc	r24, 1
    191a:	03 c0       	rjmp	.+6      	; 0x1922 <fputc+0x1a>
    191c:	8f ef       	ldi	r24, 0xFF	; 255
    191e:	9f ef       	ldi	r25, 0xFF	; 255
    1920:	20 c0       	rjmp	.+64     	; 0x1962 <fputc+0x5a>
    1922:	82 ff       	sbrs	r24, 2
    1924:	10 c0       	rjmp	.+32     	; 0x1946 <fputc+0x3e>
    1926:	4e 81       	ldd	r20, Y+6	; 0x06
    1928:	5f 81       	ldd	r21, Y+7	; 0x07
    192a:	2c 81       	ldd	r18, Y+4	; 0x04
    192c:	3d 81       	ldd	r19, Y+5	; 0x05
    192e:	42 17       	cp	r20, r18
    1930:	53 07       	cpc	r21, r19
    1932:	7c f4       	brge	.+30     	; 0x1952 <fputc+0x4a>
    1934:	e8 81       	ld	r30, Y
    1936:	f9 81       	ldd	r31, Y+1	; 0x01
    1938:	9f 01       	movw	r18, r30
    193a:	2f 5f       	subi	r18, 0xFF	; 255
    193c:	3f 4f       	sbci	r19, 0xFF	; 255
    193e:	39 83       	std	Y+1, r19	; 0x01
    1940:	28 83       	st	Y, r18
    1942:	10 83       	st	Z, r17
    1944:	06 c0       	rjmp	.+12     	; 0x1952 <fputc+0x4a>
    1946:	e8 85       	ldd	r30, Y+8	; 0x08
    1948:	f9 85       	ldd	r31, Y+9	; 0x09
    194a:	81 2f       	mov	r24, r17
    194c:	09 95       	icall
    194e:	89 2b       	or	r24, r25
    1950:	29 f7       	brne	.-54     	; 0x191c <fputc+0x14>
    1952:	2e 81       	ldd	r18, Y+6	; 0x06
    1954:	3f 81       	ldd	r19, Y+7	; 0x07
    1956:	2f 5f       	subi	r18, 0xFF	; 255
    1958:	3f 4f       	sbci	r19, 0xFF	; 255
    195a:	3f 83       	std	Y+7, r19	; 0x07
    195c:	2e 83       	std	Y+6, r18	; 0x06
    195e:	81 2f       	mov	r24, r17
    1960:	90 2f       	mov	r25, r16
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	08 95       	ret

0000196c <__ultoa_invert>:
    196c:	fa 01       	movw	r30, r20
    196e:	aa 27       	eor	r26, r26
    1970:	28 30       	cpi	r18, 0x08	; 8
    1972:	51 f1       	breq	.+84     	; 0x19c8 <__ultoa_invert+0x5c>
    1974:	20 31       	cpi	r18, 0x10	; 16
    1976:	81 f1       	breq	.+96     	; 0x19d8 <__ultoa_invert+0x6c>
    1978:	e8 94       	clt
    197a:	6f 93       	push	r22
    197c:	6e 7f       	andi	r22, 0xFE	; 254
    197e:	6e 5f       	subi	r22, 0xFE	; 254
    1980:	7f 4f       	sbci	r23, 0xFF	; 255
    1982:	8f 4f       	sbci	r24, 0xFF	; 255
    1984:	9f 4f       	sbci	r25, 0xFF	; 255
    1986:	af 4f       	sbci	r26, 0xFF	; 255
    1988:	b1 e0       	ldi	r27, 0x01	; 1
    198a:	3e d0       	rcall	.+124    	; 0x1a08 <__ultoa_invert+0x9c>
    198c:	b4 e0       	ldi	r27, 0x04	; 4
    198e:	3c d0       	rcall	.+120    	; 0x1a08 <__ultoa_invert+0x9c>
    1990:	67 0f       	add	r22, r23
    1992:	78 1f       	adc	r23, r24
    1994:	89 1f       	adc	r24, r25
    1996:	9a 1f       	adc	r25, r26
    1998:	a1 1d       	adc	r26, r1
    199a:	68 0f       	add	r22, r24
    199c:	79 1f       	adc	r23, r25
    199e:	8a 1f       	adc	r24, r26
    19a0:	91 1d       	adc	r25, r1
    19a2:	a1 1d       	adc	r26, r1
    19a4:	6a 0f       	add	r22, r26
    19a6:	71 1d       	adc	r23, r1
    19a8:	81 1d       	adc	r24, r1
    19aa:	91 1d       	adc	r25, r1
    19ac:	a1 1d       	adc	r26, r1
    19ae:	20 d0       	rcall	.+64     	; 0x19f0 <__ultoa_invert+0x84>
    19b0:	09 f4       	brne	.+2      	; 0x19b4 <__ultoa_invert+0x48>
    19b2:	68 94       	set
    19b4:	3f 91       	pop	r19
    19b6:	2a e0       	ldi	r18, 0x0A	; 10
    19b8:	26 9f       	mul	r18, r22
    19ba:	11 24       	eor	r1, r1
    19bc:	30 19       	sub	r19, r0
    19be:	30 5d       	subi	r19, 0xD0	; 208
    19c0:	31 93       	st	Z+, r19
    19c2:	de f6       	brtc	.-74     	; 0x197a <__ultoa_invert+0xe>
    19c4:	cf 01       	movw	r24, r30
    19c6:	08 95       	ret
    19c8:	46 2f       	mov	r20, r22
    19ca:	47 70       	andi	r20, 0x07	; 7
    19cc:	40 5d       	subi	r20, 0xD0	; 208
    19ce:	41 93       	st	Z+, r20
    19d0:	b3 e0       	ldi	r27, 0x03	; 3
    19d2:	0f d0       	rcall	.+30     	; 0x19f2 <__ultoa_invert+0x86>
    19d4:	c9 f7       	brne	.-14     	; 0x19c8 <__ultoa_invert+0x5c>
    19d6:	f6 cf       	rjmp	.-20     	; 0x19c4 <__ultoa_invert+0x58>
    19d8:	46 2f       	mov	r20, r22
    19da:	4f 70       	andi	r20, 0x0F	; 15
    19dc:	40 5d       	subi	r20, 0xD0	; 208
    19de:	4a 33       	cpi	r20, 0x3A	; 58
    19e0:	18 f0       	brcs	.+6      	; 0x19e8 <__ultoa_invert+0x7c>
    19e2:	49 5d       	subi	r20, 0xD9	; 217
    19e4:	31 fd       	sbrc	r19, 1
    19e6:	40 52       	subi	r20, 0x20	; 32
    19e8:	41 93       	st	Z+, r20
    19ea:	02 d0       	rcall	.+4      	; 0x19f0 <__ultoa_invert+0x84>
    19ec:	a9 f7       	brne	.-22     	; 0x19d8 <__ultoa_invert+0x6c>
    19ee:	ea cf       	rjmp	.-44     	; 0x19c4 <__ultoa_invert+0x58>
    19f0:	b4 e0       	ldi	r27, 0x04	; 4
    19f2:	a6 95       	lsr	r26
    19f4:	97 95       	ror	r25
    19f6:	87 95       	ror	r24
    19f8:	77 95       	ror	r23
    19fa:	67 95       	ror	r22
    19fc:	ba 95       	dec	r27
    19fe:	c9 f7       	brne	.-14     	; 0x19f2 <__ultoa_invert+0x86>
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	61 05       	cpc	r22, r1
    1a04:	71 05       	cpc	r23, r1
    1a06:	08 95       	ret
    1a08:	9b 01       	movw	r18, r22
    1a0a:	ac 01       	movw	r20, r24
    1a0c:	0a 2e       	mov	r0, r26
    1a0e:	06 94       	lsr	r0
    1a10:	57 95       	ror	r21
    1a12:	47 95       	ror	r20
    1a14:	37 95       	ror	r19
    1a16:	27 95       	ror	r18
    1a18:	ba 95       	dec	r27
    1a1a:	c9 f7       	brne	.-14     	; 0x1a0e <__ultoa_invert+0xa2>
    1a1c:	62 0f       	add	r22, r18
    1a1e:	73 1f       	adc	r23, r19
    1a20:	84 1f       	adc	r24, r20
    1a22:	95 1f       	adc	r25, r21
    1a24:	a0 1d       	adc	r26, r0
    1a26:	08 95       	ret

00001a28 <__prologue_saves__>:
    1a28:	2f 92       	push	r2
    1a2a:	3f 92       	push	r3
    1a2c:	4f 92       	push	r4
    1a2e:	5f 92       	push	r5
    1a30:	6f 92       	push	r6
    1a32:	7f 92       	push	r7
    1a34:	8f 92       	push	r8
    1a36:	9f 92       	push	r9
    1a38:	af 92       	push	r10
    1a3a:	bf 92       	push	r11
    1a3c:	cf 92       	push	r12
    1a3e:	df 92       	push	r13
    1a40:	ef 92       	push	r14
    1a42:	ff 92       	push	r15
    1a44:	0f 93       	push	r16
    1a46:	1f 93       	push	r17
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	cd b7       	in	r28, 0x3d	; 61
    1a4e:	de b7       	in	r29, 0x3e	; 62
    1a50:	ca 1b       	sub	r28, r26
    1a52:	db 0b       	sbc	r29, r27
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	de bf       	out	0x3e, r29	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	cd bf       	out	0x3d, r28	; 61
    1a5e:	09 94       	ijmp

00001a60 <__epilogue_restores__>:
    1a60:	2a 88       	ldd	r2, Y+18	; 0x12
    1a62:	39 88       	ldd	r3, Y+17	; 0x11
    1a64:	48 88       	ldd	r4, Y+16	; 0x10
    1a66:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a68:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a6a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a6c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a6e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a70:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a72:	b9 84       	ldd	r11, Y+9	; 0x09
    1a74:	c8 84       	ldd	r12, Y+8	; 0x08
    1a76:	df 80       	ldd	r13, Y+7	; 0x07
    1a78:	ee 80       	ldd	r14, Y+6	; 0x06
    1a7a:	fd 80       	ldd	r15, Y+5	; 0x05
    1a7c:	0c 81       	ldd	r16, Y+4	; 0x04
    1a7e:	1b 81       	ldd	r17, Y+3	; 0x03
    1a80:	aa 81       	ldd	r26, Y+2	; 0x02
    1a82:	b9 81       	ldd	r27, Y+1	; 0x01
    1a84:	ce 0f       	add	r28, r30
    1a86:	d1 1d       	adc	r29, r1
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	f8 94       	cli
    1a8c:	de bf       	out	0x3e, r29	; 62
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	cd bf       	out	0x3d, r28	; 61
    1a92:	ed 01       	movw	r28, r26
    1a94:	08 95       	ret

00001a96 <_exit>:
    1a96:	f8 94       	cli

00001a98 <__stop_program>:
    1a98:	ff cf       	rjmp	.-2      	; 0x1a98 <__stop_program>
