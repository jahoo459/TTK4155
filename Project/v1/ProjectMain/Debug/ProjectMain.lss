
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015a  00800100  0000211a  000021ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000211a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  0080025a  0080025a  00002308  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002308  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000330  00000000  00000000  00002364  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000430d  00000000  00000000  00002694  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001280  00000000  00000000  000069a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018d4  00000000  00000000  00007c21  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000824  00000000  00000000  000094f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000f55  00000000  00000000  00009d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002223  00000000  00000000  0000ac71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000450  00000000  00000000  0000ce94  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	fa c1       	rjmp	.+1012   	; 0x402 <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ef c1       	rjmp	.+990    	; 0x420 <__vector_16>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <JOY_calibrate+0x180>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ea e1       	ldi	r30, 0x1A	; 26
     37c:	f1 e2       	ldi	r31, 0x21	; 33
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 35       	cpi	r26, 0x5A	; 90
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	aa e5       	ldi	r26, 0x5A	; 90
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ae 38       	cpi	r26, 0x8E	; 142
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	b1 d0       	rcall	.+354    	; 0x4fe <main>
     39c:	0c 94 8b 10 	jmp	0x2116	; 0x2116 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	//printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 7e 02 	sts	0x027E, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 67 02 	sts	0x0267, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 66 02 	sts	0x0266, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 64 02 	sts	0x0264, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_3>:
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	8f 93       	push	r24
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 62 02 	sts	0x0262, r24
     414:	8f 91       	pop	r24
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <__vector_16>:
     420:	1f 92       	push	r1
     422:	0f 92       	push	r0
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	0f 92       	push	r0
     428:	11 24       	eor	r1, r1
     42a:	2f 93       	push	r18
     42c:	3f 93       	push	r19
     42e:	4f 93       	push	r20
     430:	5f 93       	push	r21
     432:	6f 93       	push	r22
     434:	7f 93       	push	r23
     436:	8f 93       	push	r24
     438:	9f 93       	push	r25
     43a:	af 93       	push	r26
     43c:	bf 93       	push	r27
     43e:	ef 93       	push	r30
     440:	ff 93       	push	r31
     442:	dd d7       	rcall	.+4026   	; 0x13fe <OLED_updateScreen>
     444:	80 91 63 02 	lds	r24, 0x0263
     448:	8f 5f       	subi	r24, 0xFF	; 255
     44a:	80 93 63 02 	sts	0x0263, r24
     44e:	80 91 63 02 	lds	r24, 0x0263
     452:	8c 30       	cpi	r24, 0x0C	; 12
     454:	21 f4       	brne	.+8      	; 0x45e <__vector_16+0x3e>
     456:	0e 94 77 0b 	call	0x16ee	; 0x16ee <OLED_setAnimationTick>
     45a:	10 92 63 02 	sts	0x0263, r1
     45e:	ff 91       	pop	r31
     460:	ef 91       	pop	r30
     462:	bf 91       	pop	r27
     464:	af 91       	pop	r26
     466:	9f 91       	pop	r25
     468:	8f 91       	pop	r24
     46a:	7f 91       	pop	r23
     46c:	6f 91       	pop	r22
     46e:	5f 91       	pop	r21
     470:	4f 91       	pop	r20
     472:	3f 91       	pop	r19
     474:	2f 91       	pop	r18
     476:	0f 90       	pop	r0
     478:	0f be       	out	0x3f, r0	; 63
     47a:	0f 90       	pop	r0
     47c:	1f 90       	pop	r1
     47e:	18 95       	reti

00000480 <init>:
     480:	ef 92       	push	r14
     482:	ff 92       	push	r15
     484:	0f 93       	push	r16
     486:	1f 93       	push	r17
     488:	1f e1       	ldi	r17, 0x1F	; 31
     48a:	e1 2e       	mov	r14, r17
     48c:	f1 2c       	mov	r15, r1
     48e:	00 e0       	ldi	r16, 0x00	; 0
     490:	10 e0       	ldi	r17, 0x00	; 0
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	4b e4       	ldi	r20, 0x4B	; 75
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	60 e8       	ldi	r22, 0x80	; 128
     49c:	75 e2       	ldi	r23, 0x25	; 37
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 b0 0b 	call	0x1760	; 0x1760 <uartInit>
     4a6:	88 e4       	ldi	r24, 0x48	; 72
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <puts>
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	63 d2       	rcall	.+1222   	; 0x978 <enableXMEM>
     4b2:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <SLI_init>
     4b6:	72 d2       	rcall	.+1252   	; 0x99c <JOY_init>
     4b8:	f8 d6       	rcall	.+3568   	; 0x12aa <OLED_init>
     4ba:	0e 94 87 0b 	call	0x170e	; 0x170e <SPI_init>
     4be:	65 d4       	rcall	.+2250   	; 0xd8a <MCP2515_init>
     4c0:	b8 d0       	rcall	.+368    	; 0x632 <CAN_init>
     4c2:	8b b7       	in	r24, 0x3b	; 59
     4c4:	80 64       	ori	r24, 0x40	; 64
     4c6:	8b bf       	out	0x3b, r24	; 59
     4c8:	85 b7       	in	r24, 0x35	; 53
     4ca:	82 60       	ori	r24, 0x02	; 2
     4cc:	85 bf       	out	0x35, r24	; 53
     4ce:	85 b7       	in	r24, 0x35	; 53
     4d0:	8e 7f       	andi	r24, 0xFE	; 254
     4d2:	85 bf       	out	0x35, r24	; 53
     4d4:	8b 98       	cbi	0x11, 3	; 17
     4d6:	93 9a       	sbi	0x12, 3	; 18
     4d8:	8b b7       	in	r24, 0x3b	; 59
     4da:	80 68       	ori	r24, 0x80	; 128
     4dc:	8b bf       	out	0x3b, r24	; 59
     4de:	85 b7       	in	r24, 0x35	; 53
     4e0:	88 60       	ori	r24, 0x08	; 8
     4e2:	85 bf       	out	0x35, r24	; 53
     4e4:	85 b7       	in	r24, 0x35	; 53
     4e6:	8b 7f       	andi	r24, 0xFB	; 251
     4e8:	85 bf       	out	0x35, r24	; 53
     4ea:	32 98       	cbi	0x06, 2	; 6
     4ec:	3a 98       	cbi	0x07, 2	; 7
     4ee:	b8 98       	cbi	0x17, 0	; 23
     4f0:	c0 98       	cbi	0x18, 0	; 24
     4f2:	78 94       	sei
     4f4:	1f 91       	pop	r17
     4f6:	0f 91       	pop	r16
     4f8:	ff 90       	pop	r15
     4fa:	ef 90       	pop	r14
     4fc:	08 95       	ret

000004fe <main>:
/*
=======================MAIN FUNCTION=========================
*/

int main(void)
{
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
     506:	a1 97       	sbiw	r28, 0x21	; 33
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	de bf       	out	0x3e, r29	; 62
     50e:	0f be       	out	0x3f, r0	; 63
     510:	cd bf       	out	0x3d, r28	; 61
	
	init();
     512:	b6 df       	rcall	.-148    	; 0x480 <init>
	
	OLED_bufferGoto(0,0);
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	92 d7       	rcall	.+3876   	; 0x1442 <OLED_bufferGoto>
	OLED_printString("I'm alive");
     51e:	8e e7       	ldi	r24, 0x7E	; 126
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	ce d7       	rcall	.+3996   	; 0x14c0 <OLED_printString>
	OLED_bufferGoto(1,0);
     524:	60 e0       	ldi	r22, 0x00	; 0
     526:	70 e0       	ldi	r23, 0x00	; 0
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	8a d7       	rcall	.+3860   	; 0x1442 <OLED_bufferGoto>
	OLED_printString("I'm alive");
     52e:	8e e7       	ldi	r24, 0x7E	; 126
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	c6 d7       	rcall	.+3980   	; 0x14c0 <OLED_printString>
	OLED_bufferGoto(2,0);
     534:	60 e0       	ldi	r22, 0x00	; 0
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	82 e0       	ldi	r24, 0x02	; 2
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	82 d7       	rcall	.+3844   	; 0x1442 <OLED_bufferGoto>
	OLED_printString("I'm alive");
     53e:	8e e7       	ldi	r24, 0x7E	; 126
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	be d7       	rcall	.+3964   	; 0x14c0 <OLED_printString>
	OLED_bufferGoto(3,0);
     544:	60 e0       	ldi	r22, 0x00	; 0
     546:	70 e0       	ldi	r23, 0x00	; 0
     548:	83 e0       	ldi	r24, 0x03	; 3
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	7a d7       	rcall	.+3828   	; 0x1442 <OLED_bufferGoto>
	OLED_printString("I'm alive");
     54e:	8e e7       	ldi	r24, 0x7E	; 126
     550:	91 e0       	ldi	r25, 0x01	; 1
     552:	b6 d7       	rcall	.+3948   	; 0x14c0 <OLED_printString>
	OLED_bufferGoto(4,0);
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	84 e0       	ldi	r24, 0x04	; 4
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	72 d7       	rcall	.+3812   	; 0x1442 <OLED_bufferGoto>
	OLED_printString("I'm alive");
     55e:	8e e7       	ldi	r24, 0x7E	; 126
     560:	91 e0       	ldi	r25, 0x01	; 1
     562:	ae d7       	rcall	.+3932   	; 0x14c0 <OLED_printString>
	OLED_bufferGoto(5,0);
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	85 e0       	ldi	r24, 0x05	; 5
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	6a d7       	rcall	.+3796   	; 0x1442 <OLED_bufferGoto>
	OLED_printString("I'm alive");
     56e:	8e e7       	ldi	r24, 0x7E	; 126
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	a6 d7       	rcall	.+3916   	; 0x14c0 <OLED_printString>
	OLED_bufferGoto(6,0);
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	86 e0       	ldi	r24, 0x06	; 6
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	62 d7       	rcall	.+3780   	; 0x1442 <OLED_bufferGoto>
	OLED_printString("I'm alive");
     57e:	8e e7       	ldi	r24, 0x7E	; 126
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	9e d7       	rcall	.+3900   	; 0x14c0 <OLED_printString>
	OLED_bufferGoto(7,0);
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	87 e0       	ldi	r24, 0x07	; 7
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	5a d7       	rcall	.+3764   	; 0x1442 <OLED_bufferGoto>
	OLED_printString("I'm alive");
     58e:	8e e7       	ldi	r24, 0x7E	; 126
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	96 d7       	rcall	.+3884   	; 0x14c0 <OLED_printString>
	
	saveToAddress(0x1fc0, 0x99);
     594:	69 e9       	ldi	r22, 0x99	; 153
     596:	80 ec       	ldi	r24, 0xC0	; 192
     598:	9f e1       	ldi	r25, 0x1F	; 31
     59a:	fd d1       	rcall	.+1018   	; 0x996 <saveToAddress>
	saveToAddress(0x1fff, 0x80);
     59c:	60 e8       	ldi	r22, 0x80	; 128
     59e:	8f ef       	ldi	r24, 0xFF	; 255
     5a0:	9f e1       	ldi	r25, 0x1F	; 31
     5a2:	f9 d1       	rcall	.+1010   	; 0x996 <saveToAddress>
	
	
	
    while(1)
    {
		currPos = JOY_getPosition();
     5a4:	0a e5       	ldi	r16, 0x5A	; 90
     5a6:	12 e0       	ldi	r17, 0x02	; 2
		
		message2send.id = 23;
     5a8:	0f 2e       	mov	r0, r31
     5aa:	f7 e1       	ldi	r31, 0x17	; 23
     5ac:	ef 2e       	mov	r14, r31
     5ae:	f1 2c       	mov	r15, r1
     5b0:	f0 2d       	mov	r31, r0
		message2send.length = 1;
     5b2:	dd 24       	eor	r13, r13
     5b4:	d3 94       	inc	r13
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     5b6:	0f 2e       	mov	r0, r31
     5b8:	fb e0       	ldi	r31, 0x0B	; 11
     5ba:	cf 2e       	mov	r12, r31
     5bc:	f0 2d       	mov	r31, r0
	
	
	
    while(1)
    {
		currPos = JOY_getPosition();
     5be:	71 d3       	rcall	.+1762   	; 0xca2 <JOY_getPosition>
     5c0:	f8 01       	movw	r30, r16
     5c2:	20 83       	st	Z, r18
     5c4:	31 83       	std	Z+1, r19	; 0x01
     5c6:	42 83       	std	Z+2, r20	; 0x02
     5c8:	53 83       	std	Z+3, r21	; 0x03
     5ca:	64 83       	std	Z+4, r22	; 0x04
     5cc:	75 83       	std	Z+5, r23	; 0x05
     5ce:	86 83       	std	Z+6, r24	; 0x06
     5d0:	97 83       	std	Z+7, r25	; 0x07
		
		message2send.id = 23;
     5d2:	fa 82       	std	Y+2, r15	; 0x02
     5d4:	e9 82       	std	Y+1, r14	; 0x01
		message2send.length = 1;
     5d6:	db 82       	std	Y+3, r13	; 0x03
		message2send.data[0] = currPos.X_abs;
     5d8:	2c 83       	std	Y+4, r18	; 0x04
		
		CAN_sendMessage(&message2send, 0);
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	ce 01       	movw	r24, r28
     5de:	01 96       	adiw	r24, 0x01	; 1
     5e0:	3f d0       	rcall	.+126    	; 0x660 <CAN_sendMessage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 ef       	ldi	r25, 0xF0	; 240
     5e6:	01 97       	sbiw	r24, 0x01	; 1
     5e8:	f1 f7       	brne	.-4      	; 0x5e6 <__stack+0xe7>
		_delay_ms(50);

		if(refreshOLEDFlag)
     5ea:	80 91 65 02 	lds	r24, 0x0265
     5ee:	81 11       	cpse	r24, r1
		{	
			OLED_updateScreen();
     5f0:	06 d7       	rcall	.+3596   	; 0x13fe <OLED_updateScreen>
		}

		if(activateMenuFlag)
     5f2:	80 91 64 02 	lds	r24, 0x0264
     5f6:	81 11       	cpse	r24, r1
		{
			MENU_activate();
     5f8:	32 d6       	rcall	.+3172   	; 0x125e <MENU_activate>
		}

		if(SPIreceivedFlag)
     5fa:	80 91 62 02 	lds	r24, 0x0262
     5fe:	88 23       	and	r24, r24
     600:	f1 f2       	breq	.-68     	; 0x5be <__stack+0xbf>
		{
			
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
     602:	6c e2       	ldi	r22, 0x2C	; 44
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	aa d3       	rcall	.+1876   	; 0xd5c <MCP2515_read>
     608:	83 70       	andi	r24, 0x03	; 3
     60a:	c9 f2       	breq	.-78     	; 0x5be <__stack+0xbf>
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     60c:	68 2f       	mov	r22, r24
     60e:	ce 01       	movw	r24, r28
     610:	47 96       	adiw	r24, 0x17	; 23
     612:	8f d0       	rcall	.+286    	; 0x732 <CAN_receiveMessage>
     614:	fe 01       	movw	r30, r28
     616:	77 96       	adiw	r30, 0x17	; 23
     618:	de 01       	movw	r26, r28
     61a:	1c 96       	adiw	r26, 0x0c	; 12
     61c:	8c 2d       	mov	r24, r12
     61e:	01 90       	ld	r0, Z+
     620:	0d 92       	st	X+, r0
     622:	8a 95       	dec	r24
     624:	e1 f7       	brne	.-8      	; 0x61e <__stack+0x11f>

				CAN_printMessage(&receivedMessage);
     626:	ce 01       	movw	r24, r28
     628:	0c 96       	adiw	r24, 0x0c	; 12
     62a:	4c d1       	rcall	.+664    	; 0x8c4 <CAN_printMessage>
			
				SPIreceivedFlag = 0;
     62c:	10 92 62 02 	sts	0x0262, r1
     630:	c6 cf       	rjmp	.-116    	; 0x5be <__stack+0xbf>

00000632 <CAN_init>:
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	cd b7       	in	r28, 0x3d	; 61
     638:	de b7       	in	r29, 0x3e	; 62
     63a:	43 e0       	ldi	r20, 0x03	; 3
     63c:	6b e2       	ldi	r22, 0x2B	; 43
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	af d3       	rcall	.+1886   	; 0xda2 <MCP2515_write>
     644:	40 e6       	ldi	r20, 0x60	; 96
     646:	60 e6       	ldi	r22, 0x60	; 96
     648:	80 e0       	ldi	r24, 0x00	; 0
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	aa d3       	rcall	.+1876   	; 0xda2 <MCP2515_write>
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	40 e8       	ldi	r20, 0x80	; 128
     652:	6f e0       	ldi	r22, 0x0F	; 15
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	b7 d3       	rcall	.+1902   	; 0xdc8 <MCP2515_bitModify>
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	08 95       	ret

00000660 <CAN_sendMessage>:
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	cd b7       	in	r28, 0x3d	; 61
     666:	de b7       	in	r29, 0x3e	; 62
     668:	27 97       	sbiw	r28, 0x07	; 7
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	de bf       	out	0x3e, r29	; 62
     670:	0f be       	out	0x3f, r0	; 63
     672:	cd bf       	out	0x3d, r28	; 61
     674:	9e 83       	std	Y+6, r25	; 0x06
     676:	8d 83       	std	Y+5, r24	; 0x05
     678:	6f 83       	std	Y+7, r22	; 0x07
     67a:	8f 81       	ldd	r24, Y+7	; 0x07
     67c:	88 2f       	mov	r24, r24
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	00 97       	sbiw	r24, 0x00	; 0
     682:	09 f0       	breq	.+2      	; 0x686 <CAN_sendMessage+0x26>
     684:	4d c0       	rjmp	.+154    	; 0x720 <CAN_sendMessage+0xc0>
     686:	8d 81       	ldd	r24, Y+5	; 0x05
     688:	9e 81       	ldd	r25, Y+6	; 0x06
     68a:	fc 01       	movw	r30, r24
     68c:	80 81       	ld	r24, Z
     68e:	91 81       	ldd	r25, Z+1	; 0x01
     690:	9c 83       	std	Y+4, r25	; 0x04
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	8b 81       	ldd	r24, Y+3	; 0x03
     696:	82 95       	swap	r24
     698:	88 0f       	add	r24, r24
     69a:	80 7e       	andi	r24, 0xE0	; 224
     69c:	48 2f       	mov	r20, r24
     69e:	62 e3       	ldi	r22, 0x32	; 50
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	7e d3       	rcall	.+1788   	; 0xda2 <MCP2515_write>
     6a6:	8b 81       	ldd	r24, Y+3	; 0x03
     6a8:	9c 81       	ldd	r25, Y+4	; 0x04
     6aa:	96 95       	lsr	r25
     6ac:	87 95       	ror	r24
     6ae:	96 95       	lsr	r25
     6b0:	87 95       	ror	r24
     6b2:	96 95       	lsr	r25
     6b4:	87 95       	ror	r24
     6b6:	48 2f       	mov	r20, r24
     6b8:	61 e3       	ldi	r22, 0x31	; 49
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	71 d3       	rcall	.+1762   	; 0xda2 <MCP2515_write>
     6c0:	8d 81       	ldd	r24, Y+5	; 0x05
     6c2:	9e 81       	ldd	r25, Y+6	; 0x06
     6c4:	fc 01       	movw	r30, r24
     6c6:	82 81       	ldd	r24, Z+2	; 0x02
     6c8:	48 2f       	mov	r20, r24
     6ca:	65 e3       	ldi	r22, 0x35	; 53
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	68 d3       	rcall	.+1744   	; 0xda2 <MCP2515_write>
     6d2:	86 e3       	ldi	r24, 0x36	; 54
     6d4:	89 83       	std	Y+1, r24	; 0x01
     6d6:	1a 82       	std	Y+2, r1	; 0x02
     6d8:	15 c0       	rjmp	.+42     	; 0x704 <CAN_sendMessage+0xa4>
     6da:	8a 81       	ldd	r24, Y+2	; 0x02
     6dc:	88 2f       	mov	r24, r24
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	2d 81       	ldd	r18, Y+5	; 0x05
     6e2:	3e 81       	ldd	r19, Y+6	; 0x06
     6e4:	82 0f       	add	r24, r18
     6e6:	93 1f       	adc	r25, r19
     6e8:	03 96       	adiw	r24, 0x03	; 3
     6ea:	fc 01       	movw	r30, r24
     6ec:	80 81       	ld	r24, Z
     6ee:	48 2f       	mov	r20, r24
     6f0:	69 81       	ldd	r22, Y+1	; 0x01
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	55 d3       	rcall	.+1706   	; 0xda2 <MCP2515_write>
     6f8:	89 81       	ldd	r24, Y+1	; 0x01
     6fa:	8f 5f       	subi	r24, 0xFF	; 255
     6fc:	89 83       	std	Y+1, r24	; 0x01
     6fe:	8a 81       	ldd	r24, Y+2	; 0x02
     700:	8f 5f       	subi	r24, 0xFF	; 255
     702:	8a 83       	std	Y+2, r24	; 0x02
     704:	8d 81       	ldd	r24, Y+5	; 0x05
     706:	9e 81       	ldd	r25, Y+6	; 0x06
     708:	fc 01       	movw	r30, r24
     70a:	92 81       	ldd	r25, Z+2	; 0x02
     70c:	8a 81       	ldd	r24, Y+2	; 0x02
     70e:	89 17       	cp	r24, r25
     710:	20 f3       	brcs	.-56     	; 0x6da <CAN_sendMessage+0x7a>
     712:	2f ef       	ldi	r18, 0xFF	; 255
     714:	48 e0       	ldi	r20, 0x08	; 8
     716:	60 e3       	ldi	r22, 0x30	; 48
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	55 d3       	rcall	.+1706   	; 0xdc8 <MCP2515_bitModify>
     71e:	00 00       	nop
     720:	27 96       	adiw	r28, 0x07	; 7
     722:	0f b6       	in	r0, 0x3f	; 63
     724:	f8 94       	cli
     726:	de bf       	out	0x3e, r29	; 62
     728:	0f be       	out	0x3f, r0	; 63
     72a:	cd bf       	out	0x3d, r28	; 61
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <CAN_receiveMessage>:
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	cf 93       	push	r28
     738:	df 93       	push	r29
     73a:	cd b7       	in	r28, 0x3d	; 61
     73c:	de b7       	in	r29, 0x3e	; 62
     73e:	61 97       	sbiw	r28, 0x11	; 17
     740:	0f b6       	in	r0, 0x3f	; 63
     742:	f8 94       	cli
     744:	de bf       	out	0x3e, r29	; 62
     746:	0f be       	out	0x3f, r0	; 63
     748:	cd bf       	out	0x3d, r28	; 61
     74a:	98 8b       	std	Y+16, r25	; 0x10
     74c:	8f 87       	std	Y+15, r24	; 0x0f
     74e:	69 8b       	std	Y+17, r22	; 0x11
     750:	89 89       	ldd	r24, Y+17	; 0x11
     752:	88 2f       	mov	r24, r24
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	82 30       	cpi	r24, 0x02	; 2
     758:	91 05       	cpc	r25, r1
     75a:	09 f4       	brne	.+2      	; 0x75e <CAN_receiveMessage+0x2c>
     75c:	57 c0       	rjmp	.+174    	; 0x80c <CAN_receiveMessage+0xda>
     75e:	83 30       	cpi	r24, 0x03	; 3
     760:	91 05       	cpc	r25, r1
     762:	21 f0       	breq	.+8      	; 0x76c <CAN_receiveMessage+0x3a>
     764:	81 30       	cpi	r24, 0x01	; 1
     766:	91 05       	cpc	r25, r1
     768:	09 f0       	breq	.+2      	; 0x76c <CAN_receiveMessage+0x3a>
     76a:	9f c0       	rjmp	.+318    	; 0x8aa <CAN_receiveMessage+0x178>
     76c:	61 e6       	ldi	r22, 0x61	; 97
     76e:	80 e0       	ldi	r24, 0x00	; 0
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	f4 d2       	rcall	.+1512   	; 0xd5c <MCP2515_read>
     774:	88 2f       	mov	r24, r24
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	9d 83       	std	Y+5, r25	; 0x05
     77a:	8c 83       	std	Y+4, r24	; 0x04
     77c:	8c 81       	ldd	r24, Y+4	; 0x04
     77e:	9d 81       	ldd	r25, Y+5	; 0x05
     780:	8c 01       	movw	r16, r24
     782:	00 0f       	add	r16, r16
     784:	11 1f       	adc	r17, r17
     786:	00 0f       	add	r16, r16
     788:	11 1f       	adc	r17, r17
     78a:	00 0f       	add	r16, r16
     78c:	11 1f       	adc	r17, r17
     78e:	62 e6       	ldi	r22, 0x62	; 98
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	e3 d2       	rcall	.+1478   	; 0xd5c <MCP2515_read>
     796:	82 95       	swap	r24
     798:	86 95       	lsr	r24
     79a:	87 70       	andi	r24, 0x07	; 7
     79c:	88 2f       	mov	r24, r24
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	80 2b       	or	r24, r16
     7a2:	91 2b       	or	r25, r17
     7a4:	9d 83       	std	Y+5, r25	; 0x05
     7a6:	8c 83       	std	Y+4, r24	; 0x04
     7a8:	65 e6       	ldi	r22, 0x65	; 101
     7aa:	80 e0       	ldi	r24, 0x00	; 0
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	d6 d2       	rcall	.+1452   	; 0xd5c <MCP2515_read>
     7b0:	8e 83       	std	Y+6, r24	; 0x06
     7b2:	86 e6       	ldi	r24, 0x66	; 102
     7b4:	89 83       	std	Y+1, r24	; 0x01
     7b6:	1a 82       	std	Y+2, r1	; 0x02
     7b8:	14 c0       	rjmp	.+40     	; 0x7e2 <CAN_receiveMessage+0xb0>
     7ba:	8a 81       	ldd	r24, Y+2	; 0x02
     7bc:	08 2f       	mov	r16, r24
     7be:	10 e0       	ldi	r17, 0x00	; 0
     7c0:	69 81       	ldd	r22, Y+1	; 0x01
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	ca d2       	rcall	.+1428   	; 0xd5c <MCP2515_read>
     7c8:	28 2f       	mov	r18, r24
     7ca:	ce 01       	movw	r24, r28
     7cc:	07 96       	adiw	r24, 0x07	; 7
     7ce:	80 0f       	add	r24, r16
     7d0:	91 1f       	adc	r25, r17
     7d2:	fc 01       	movw	r30, r24
     7d4:	20 83       	st	Z, r18
     7d6:	89 81       	ldd	r24, Y+1	; 0x01
     7d8:	8f 5f       	subi	r24, 0xFF	; 255
     7da:	89 83       	std	Y+1, r24	; 0x01
     7dc:	8a 81       	ldd	r24, Y+2	; 0x02
     7de:	8f 5f       	subi	r24, 0xFF	; 255
     7e0:	8a 83       	std	Y+2, r24	; 0x02
     7e2:	9e 81       	ldd	r25, Y+6	; 0x06
     7e4:	8a 81       	ldd	r24, Y+2	; 0x02
     7e6:	89 17       	cp	r24, r25
     7e8:	40 f3       	brcs	.-48     	; 0x7ba <CAN_receiveMessage+0x88>
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	41 e0       	ldi	r20, 0x01	; 1
     7ee:	6c e2       	ldi	r22, 0x2C	; 44
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	e9 d2       	rcall	.+1490   	; 0xdc8 <MCP2515_bitModify>
     7f6:	8f 85       	ldd	r24, Y+15	; 0x0f
     7f8:	98 89       	ldd	r25, Y+16	; 0x10
     7fa:	2b e0       	ldi	r18, 0x0B	; 11
     7fc:	fe 01       	movw	r30, r28
     7fe:	34 96       	adiw	r30, 0x04	; 4
     800:	dc 01       	movw	r26, r24
     802:	01 90       	ld	r0, Z+
     804:	0d 92       	st	X+, r0
     806:	2a 95       	dec	r18
     808:	e1 f7       	brne	.-8      	; 0x802 <CAN_receiveMessage+0xd0>
     80a:	4f c0       	rjmp	.+158    	; 0x8aa <CAN_receiveMessage+0x178>
     80c:	61 e7       	ldi	r22, 0x71	; 113
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	a4 d2       	rcall	.+1352   	; 0xd5c <MCP2515_read>
     814:	88 2f       	mov	r24, r24
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	9d 83       	std	Y+5, r25	; 0x05
     81a:	8c 83       	std	Y+4, r24	; 0x04
     81c:	8c 81       	ldd	r24, Y+4	; 0x04
     81e:	9d 81       	ldd	r25, Y+5	; 0x05
     820:	8c 01       	movw	r16, r24
     822:	00 0f       	add	r16, r16
     824:	11 1f       	adc	r17, r17
     826:	00 0f       	add	r16, r16
     828:	11 1f       	adc	r17, r17
     82a:	00 0f       	add	r16, r16
     82c:	11 1f       	adc	r17, r17
     82e:	62 e7       	ldi	r22, 0x72	; 114
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	93 d2       	rcall	.+1318   	; 0xd5c <MCP2515_read>
     836:	82 95       	swap	r24
     838:	86 95       	lsr	r24
     83a:	87 70       	andi	r24, 0x07	; 7
     83c:	88 2f       	mov	r24, r24
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	80 2b       	or	r24, r16
     842:	91 2b       	or	r25, r17
     844:	9d 83       	std	Y+5, r25	; 0x05
     846:	8c 83       	std	Y+4, r24	; 0x04
     848:	65 e7       	ldi	r22, 0x75	; 117
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	86 d2       	rcall	.+1292   	; 0xd5c <MCP2515_read>
     850:	8e 83       	std	Y+6, r24	; 0x06
     852:	86 e7       	ldi	r24, 0x76	; 118
     854:	89 83       	std	Y+1, r24	; 0x01
     856:	1b 82       	std	Y+3, r1	; 0x03
     858:	14 c0       	rjmp	.+40     	; 0x882 <CAN_receiveMessage+0x150>
     85a:	8b 81       	ldd	r24, Y+3	; 0x03
     85c:	08 2f       	mov	r16, r24
     85e:	10 e0       	ldi	r17, 0x00	; 0
     860:	69 81       	ldd	r22, Y+1	; 0x01
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	7a d2       	rcall	.+1268   	; 0xd5c <MCP2515_read>
     868:	28 2f       	mov	r18, r24
     86a:	ce 01       	movw	r24, r28
     86c:	07 96       	adiw	r24, 0x07	; 7
     86e:	80 0f       	add	r24, r16
     870:	91 1f       	adc	r25, r17
     872:	fc 01       	movw	r30, r24
     874:	20 83       	st	Z, r18
     876:	89 81       	ldd	r24, Y+1	; 0x01
     878:	8f 5f       	subi	r24, 0xFF	; 255
     87a:	89 83       	std	Y+1, r24	; 0x01
     87c:	8b 81       	ldd	r24, Y+3	; 0x03
     87e:	8f 5f       	subi	r24, 0xFF	; 255
     880:	8b 83       	std	Y+3, r24	; 0x03
     882:	9e 81       	ldd	r25, Y+6	; 0x06
     884:	8b 81       	ldd	r24, Y+3	; 0x03
     886:	89 17       	cp	r24, r25
     888:	40 f3       	brcs	.-48     	; 0x85a <CAN_receiveMessage+0x128>
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	42 e0       	ldi	r20, 0x02	; 2
     88e:	6c e2       	ldi	r22, 0x2C	; 44
     890:	80 e0       	ldi	r24, 0x00	; 0
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	99 d2       	rcall	.+1330   	; 0xdc8 <MCP2515_bitModify>
     896:	8f 85       	ldd	r24, Y+15	; 0x0f
     898:	98 89       	ldd	r25, Y+16	; 0x10
     89a:	2b e0       	ldi	r18, 0x0B	; 11
     89c:	fe 01       	movw	r30, r28
     89e:	34 96       	adiw	r30, 0x04	; 4
     8a0:	dc 01       	movw	r26, r24
     8a2:	01 90       	ld	r0, Z+
     8a4:	0d 92       	st	X+, r0
     8a6:	2a 95       	dec	r18
     8a8:	e1 f7       	brne	.-8      	; 0x8a2 <CAN_receiveMessage+0x170>
     8aa:	8f 85       	ldd	r24, Y+15	; 0x0f
     8ac:	98 89       	ldd	r25, Y+16	; 0x10
     8ae:	61 96       	adiw	r28, 0x11	; 17
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	1f 91       	pop	r17
     8c0:	0f 91       	pop	r16
     8c2:	08 95       	ret

000008c4 <CAN_printMessage>:
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	00 d0       	rcall	.+0      	; 0x8ca <CAN_printMessage+0x6>
     8ca:	1f 92       	push	r1
     8cc:	cd b7       	in	r28, 0x3d	; 61
     8ce:	de b7       	in	r29, 0x3e	; 62
     8d0:	9b 83       	std	Y+3, r25	; 0x03
     8d2:	8a 83       	std	Y+2, r24	; 0x02
     8d4:	8a 81       	ldd	r24, Y+2	; 0x02
     8d6:	9b 81       	ldd	r25, Y+3	; 0x03
     8d8:	fc 01       	movw	r30, r24
     8da:	82 81       	ldd	r24, Z+2	; 0x02
     8dc:	28 2f       	mov	r18, r24
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	8a 81       	ldd	r24, Y+2	; 0x02
     8e2:	9b 81       	ldd	r25, Y+3	; 0x03
     8e4:	fc 01       	movw	r30, r24
     8e6:	80 81       	ld	r24, Z
     8e8:	91 81       	ldd	r25, Z+1	; 0x01
     8ea:	43 2f       	mov	r20, r19
     8ec:	4f 93       	push	r20
     8ee:	2f 93       	push	r18
     8f0:	29 2f       	mov	r18, r25
     8f2:	2f 93       	push	r18
     8f4:	8f 93       	push	r24
     8f6:	88 e1       	ldi	r24, 0x18	; 24
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	89 2f       	mov	r24, r25
     8fc:	8f 93       	push	r24
     8fe:	88 e1       	ldi	r24, 0x18	; 24
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	8f 93       	push	r24
     904:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <printf>
     908:	0f 90       	pop	r0
     90a:	0f 90       	pop	r0
     90c:	0f 90       	pop	r0
     90e:	0f 90       	pop	r0
     910:	0f 90       	pop	r0
     912:	0f 90       	pop	r0
     914:	19 82       	std	Y+1, r1	; 0x01
     916:	1f c0       	rjmp	.+62     	; 0x956 <CAN_printMessage+0x92>
     918:	89 81       	ldd	r24, Y+1	; 0x01
     91a:	88 2f       	mov	r24, r24
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	2a 81       	ldd	r18, Y+2	; 0x02
     920:	3b 81       	ldd	r19, Y+3	; 0x03
     922:	82 0f       	add	r24, r18
     924:	93 1f       	adc	r25, r19
     926:	03 96       	adiw	r24, 0x03	; 3
     928:	fc 01       	movw	r30, r24
     92a:	80 81       	ld	r24, Z
     92c:	88 2f       	mov	r24, r24
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	29 2f       	mov	r18, r25
     932:	2f 93       	push	r18
     934:	8f 93       	push	r24
     936:	84 e4       	ldi	r24, 0x44	; 68
     938:	91 e0       	ldi	r25, 0x01	; 1
     93a:	89 2f       	mov	r24, r25
     93c:	8f 93       	push	r24
     93e:	84 e4       	ldi	r24, 0x44	; 68
     940:	91 e0       	ldi	r25, 0x01	; 1
     942:	8f 93       	push	r24
     944:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <printf>
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	89 81       	ldd	r24, Y+1	; 0x01
     952:	8f 5f       	subi	r24, 0xFF	; 255
     954:	89 83       	std	Y+1, r24	; 0x01
     956:	8a 81       	ldd	r24, Y+2	; 0x02
     958:	9b 81       	ldd	r25, Y+3	; 0x03
     95a:	fc 01       	movw	r30, r24
     95c:	92 81       	ldd	r25, Z+2	; 0x02
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	89 17       	cp	r24, r25
     962:	d0 f2       	brcs	.-76     	; 0x918 <CAN_printMessage+0x54>
     964:	8a e0       	ldi	r24, 0x0A	; 10
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <putchar>
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	08 95       	ret

00000978 <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     978:	95 b7       	in	r25, 0x35	; 53
     97a:	90 68       	ori	r25, 0x80	; 128
     97c:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     97e:	96 b7       	in	r25, 0x36	; 54
     980:	98 60       	ori	r25, 0x08	; 8
     982:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     984:	88 23       	and	r24, r24
     986:	19 f0       	breq	.+6      	; 0x98e <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     988:	80 b7       	in	r24, 0x30	; 48
     98a:	80 62       	ori	r24, 0x20	; 32
     98c:	80 bf       	out	0x30, r24	; 48
     98e:	08 95       	ret

00000990 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     990:	fc 01       	movw	r30, r24
     992:	80 81       	ld	r24, Z
	return val;
}
     994:	08 95       	ret

00000996 <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     996:	fc 01       	movw	r30, r24
     998:	60 83       	st	Z, r22
     99a:	08 95       	ret

0000099c <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     99c:	10 92 6a 02 	sts	0x026A, r1
     9a0:	10 92 69 02 	sts	0x0269, r1
	currentPosition.Y_abs = 0;
     9a4:	10 92 6c 02 	sts	0x026C, r1
     9a8:	10 92 6b 02 	sts	0x026B, r1
	currentPosition.X_per = 0;
     9ac:	10 92 6e 02 	sts	0x026E, r1
     9b0:	10 92 6d 02 	sts	0x026D, r1
	currentPosition.Y_per = 0;
     9b4:	10 92 70 02 	sts	0x0270, r1
     9b8:	10 92 6f 02 	sts	0x026F, r1
	currentDirection = CENTRE;
     9bc:	10 92 68 02 	sts	0x0268, r1
     9c0:	08 95       	ret

000009c2 <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     9c6:	59 d4       	rcall	.+2226   	; 0x127a <OLED_clear>
     9c8:	60 e0       	ldi	r22, 0x00	; 0
	OLED_bufferGoto(0,0);
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	38 d5       	rcall	.+2672   	; 0x1442 <OLED_bufferGoto>
     9d2:	88 e8       	ldi	r24, 0x88	; 136
     9d4:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     9d6:	74 d5       	rcall	.+2792   	; 0x14c0 <OLED_printString>
     9d8:	2f ef       	ldi	r18, 0xFF	; 255
     9da:	8f ef       	ldi	r24, 0xFF	; 255
     9dc:	92 e0       	ldi	r25, 0x02	; 2
     9de:	21 50       	subi	r18, 0x01	; 1
     9e0:	80 40       	sbci	r24, 0x00	; 0
     9e2:	90 40       	sbci	r25, 0x00	; 0
     9e4:	e1 f7       	brne	.-8      	; 0x9de <JOY_calibrate+0x1c>
     9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <JOY_calibrate+0x26>
     9e8:	00 c0       	rjmp	.+0      	; 0x9ea <JOY_calibrate+0x28>
     9ea:	c4 e1       	ldi	r28, 0x14	; 20
     9ec:	d0 e0       	ldi	r29, 0x00	; 0
     9ee:	60 91 06 01 	lds	r22, 0x0106
     9f2:	70 91 07 01 	lds	r23, 0x0107
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     9f6:	82 e0       	ldi	r24, 0x02	; 2
     9f8:	cc d6       	rcall	.+3480   	; 0x1792 <ADC_request>
     9fa:	2f ef       	ldi	r18, 0xFF	; 255
     9fc:	8f e1       	ldi	r24, 0x1F	; 31
     9fe:	91 e0       	ldi	r25, 0x01	; 1
     a00:	21 50       	subi	r18, 0x01	; 1
     a02:	80 40       	sbci	r24, 0x00	; 0
     a04:	90 40       	sbci	r25, 0x00	; 0
     a06:	e1 f7       	brne	.-8      	; 0xa00 <JOY_calibrate+0x3e>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <JOY_calibrate+0x48>
     a0a:	00 00       	nop
     a0c:	80 91 06 01 	lds	r24, 0x0106
     a10:	90 91 07 01 	lds	r25, 0x0107
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     a14:	e2 d6       	rcall	.+3524   	; 0x17da <ADC_read>
     a16:	90 91 0d 01 	lds	r25, 0x010D
     a1a:	98 17       	cp	r25, r24
     a1c:	10 f4       	brcc	.+4      	; 0xa22 <JOY_calibrate+0x60>
     a1e:	80 93 0d 01 	sts	0x010D, r24
		
		if(temp > calR) {calR = temp;}
     a22:	21 97       	sbiw	r28, 0x01	; 1
     a24:	20 97       	sbiw	r28, 0x00	; 0
     a26:	19 f7       	brne	.-58     	; 0x9ee <JOY_calibrate+0x2c>
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	81 e0       	ldi	r24, 0x01	; 1
	OLED_bufferGoto(0,0);
	OLED_printString("JOY RIGHT");
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	08 d5       	rcall	.+2576   	; 0x1442 <OLED_bufferGoto>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_bufferGoto(1,0);
     a32:	82 e9       	ldi	r24, 0x92	; 146
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	44 d5       	rcall	.+2696   	; 0x14c0 <OLED_printString>
     a38:	2f ef       	ldi	r18, 0xFF	; 255
     a3a:	8f ef       	ldi	r24, 0xFF	; 255
     a3c:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("JOY LEFT");
     a3e:	21 50       	subi	r18, 0x01	; 1
     a40:	80 40       	sbci	r24, 0x00	; 0
     a42:	90 40       	sbci	r25, 0x00	; 0
     a44:	e1 f7       	brne	.-8      	; 0xa3e <JOY_calibrate+0x7c>
     a46:	00 c0       	rjmp	.+0      	; 0xa48 <JOY_calibrate+0x86>
     a48:	00 c0       	rjmp	.+0      	; 0xa4a <JOY_calibrate+0x88>
     a4a:	c4 e1       	ldi	r28, 0x14	; 20
     a4c:	d0 e0       	ldi	r29, 0x00	; 0
     a4e:	60 91 06 01 	lds	r22, 0x0106
     a52:	70 91 07 01 	lds	r23, 0x0107
     a56:	82 e0       	ldi	r24, 0x02	; 2
     a58:	9c d6       	rcall	.+3384   	; 0x1792 <ADC_request>
     a5a:	2f ef       	ldi	r18, 0xFF	; 255
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     a5c:	8f e1       	ldi	r24, 0x1F	; 31
     a5e:	91 e0       	ldi	r25, 0x01	; 1
     a60:	21 50       	subi	r18, 0x01	; 1
     a62:	80 40       	sbci	r24, 0x00	; 0
     a64:	90 40       	sbci	r25, 0x00	; 0
     a66:	e1 f7       	brne	.-8      	; 0xa60 <JOY_calibrate+0x9e>
     a68:	00 c0       	rjmp	.+0      	; 0xa6a <JOY_calibrate+0xa8>
     a6a:	00 00       	nop
     a6c:	80 91 06 01 	lds	r24, 0x0106
     a70:	90 91 07 01 	lds	r25, 0x0107
     a74:	b2 d6       	rcall	.+3428   	; 0x17da <ADC_read>
     a76:	90 91 0c 01 	lds	r25, 0x010C
     a7a:	89 17       	cp	r24, r25
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     a7c:	10 f4       	brcc	.+4      	; 0xa82 <JOY_calibrate+0xc0>
     a7e:	80 93 0c 01 	sts	0x010C, r24
     a82:	21 97       	sbiw	r28, 0x01	; 1
     a84:	20 97       	sbiw	r28, 0x00	; 0
     a86:	19 f7       	brne	.-58     	; 0xa4e <JOY_calibrate+0x8c>
		
		if(temp < calL) {calL = temp;}
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	82 e0       	ldi	r24, 0x02	; 2
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	d8 d4       	rcall	.+2480   	; 0x1442 <OLED_bufferGoto>
     a92:	8b e9       	ldi	r24, 0x9B	; 155
     a94:	91 e0       	ldi	r25, 0x01	; 1
	OLED_bufferGoto(1,0);
	OLED_printString("JOY LEFT");
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     a96:	14 d5       	rcall	.+2600   	; 0x14c0 <OLED_printString>
     a98:	2f ef       	ldi	r18, 0xFF	; 255
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_bufferGoto(2,0);
     a9a:	8f ef       	ldi	r24, 0xFF	; 255
     a9c:	92 e0       	ldi	r25, 0x02	; 2
     a9e:	21 50       	subi	r18, 0x01	; 1
     aa0:	80 40       	sbci	r24, 0x00	; 0
     aa2:	90 40       	sbci	r25, 0x00	; 0
     aa4:	e1 f7       	brne	.-8      	; 0xa9e <JOY_calibrate+0xdc>
	OLED_printString("JOY UP");
     aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <JOY_calibrate+0xe6>
     aa8:	00 c0       	rjmp	.+0      	; 0xaaa <JOY_calibrate+0xe8>
     aaa:	c4 e1       	ldi	r28, 0x14	; 20
     aac:	d0 e0       	ldi	r29, 0x00	; 0
     aae:	60 91 06 01 	lds	r22, 0x0106
     ab2:	70 91 07 01 	lds	r23, 0x0107
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	6c d6       	rcall	.+3288   	; 0x1792 <ADC_request>
     aba:	2f ef       	ldi	r18, 0xFF	; 255
     abc:	8f e1       	ldi	r24, 0x1F	; 31
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	21 50       	subi	r18, 0x01	; 1
     ac2:	80 40       	sbci	r24, 0x00	; 0
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     ac4:	90 40       	sbci	r25, 0x00	; 0
     ac6:	e1 f7       	brne	.-8      	; 0xac0 <JOY_calibrate+0xfe>
     ac8:	00 c0       	rjmp	.+0      	; 0xaca <JOY_calibrate+0x108>
     aca:	00 00       	nop
     acc:	80 91 06 01 	lds	r24, 0x0106
     ad0:	90 91 07 01 	lds	r25, 0x0107
     ad4:	82 d6       	rcall	.+3332   	; 0x17da <ADC_read>
     ad6:	90 91 0b 01 	lds	r25, 0x010B
     ada:	98 17       	cp	r25, r24
     adc:	10 f4       	brcc	.+4      	; 0xae2 <JOY_calibrate+0x120>
     ade:	80 93 0b 01 	sts	0x010B, r24
     ae2:	21 97       	sbiw	r28, 0x01	; 1
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     ae4:	20 97       	sbiw	r28, 0x00	; 0
     ae6:	19 f7       	brne	.-58     	; 0xaae <JOY_calibrate+0xec>
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	83 e0       	ldi	r24, 0x03	; 3
     aee:	90 e0       	ldi	r25, 0x00	; 0
		
		if(temp > calUp) {calUp = temp;}
     af0:	a8 d4       	rcall	.+2384   	; 0x1442 <OLED_bufferGoto>
     af2:	82 ea       	ldi	r24, 0xA2	; 162
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	e4 d4       	rcall	.+2504   	; 0x14c0 <OLED_printString>
     af8:	2f ef       	ldi	r18, 0xFF	; 255
     afa:	8f ef       	ldi	r24, 0xFF	; 255
     afc:	92 e0       	ldi	r25, 0x02	; 2
	OLED_bufferGoto(2,0);
	OLED_printString("JOY UP");
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     afe:	21 50       	subi	r18, 0x01	; 1
     b00:	80 40       	sbci	r24, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_bufferGoto(3,0);
     b02:	90 40       	sbci	r25, 0x00	; 0
     b04:	e1 f7       	brne	.-8      	; 0xafe <JOY_calibrate+0x13c>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <JOY_calibrate+0x146>
     b08:	00 c0       	rjmp	.+0      	; 0xb0a <JOY_calibrate+0x148>
     b0a:	c4 e1       	ldi	r28, 0x14	; 20
     b0c:	d0 e0       	ldi	r29, 0x00	; 0
	OLED_printString("JOY DOWN");
     b0e:	60 91 06 01 	lds	r22, 0x0106
     b12:	70 91 07 01 	lds	r23, 0x0107
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	3c d6       	rcall	.+3192   	; 0x1792 <ADC_request>
     b1a:	2f ef       	ldi	r18, 0xFF	; 255
     b1c:	8f e1       	ldi	r24, 0x1F	; 31
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	21 50       	subi	r18, 0x01	; 1
     b22:	80 40       	sbci	r24, 0x00	; 0
     b24:	90 40       	sbci	r25, 0x00	; 0
     b26:	e1 f7       	brne	.-8      	; 0xb20 <JOY_calibrate+0x15e>
     b28:	00 c0       	rjmp	.+0      	; 0xb2a <JOY_calibrate+0x168>
     b2a:	00 00       	nop
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     b2c:	80 91 06 01 	lds	r24, 0x0106
     b30:	90 91 07 01 	lds	r25, 0x0107
     b34:	52 d6       	rcall	.+3236   	; 0x17da <ADC_read>
     b36:	90 91 0a 01 	lds	r25, 0x010A
     b3a:	89 17       	cp	r24, r25
     b3c:	10 f4       	brcc	.+4      	; 0xb42 <JOY_calibrate+0x180>
     b3e:	80 93 0a 01 	sts	0x010A, r24
     b42:	21 97       	sbiw	r28, 0x01	; 1
     b44:	20 97       	sbiw	r28, 0x00	; 0
     b46:	19 f7       	brne	.-58     	; 0xb0e <JOY_calibrate+0x14c>
     b48:	20 91 0b 01 	lds	r18, 0x010B
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     b4c:	80 91 0a 01 	lds	r24, 0x010A
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	28 1b       	sub	r18, r24
     b54:	31 09       	sbc	r19, r1
     b56:	c9 01       	movw	r24, r18
		
		if(temp < calDown) {calDown = temp;}
     b58:	99 23       	and	r25, r25
     b5a:	0c f4       	brge	.+2      	; 0xb5e <JOY_calibrate+0x19c>
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	95 95       	asr	r25
     b60:	87 95       	ror	r24
     b62:	80 93 09 01 	sts	0x0109, r24
	OLED_bufferGoto(3,0);
	OLED_printString("JOY DOWN");
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     b66:	20 91 0d 01 	lds	r18, 0x010D
	}
	
	
	//printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
	
	meanVert = (calUp - calDown)/2;
     b6a:	80 91 0c 01 	lds	r24, 0x010C
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	28 1b       	sub	r18, r24
     b72:	31 09       	sbc	r19, r1
     b74:	c9 01       	movw	r24, r18
     b76:	99 23       	and	r25, r25
     b78:	0c f4       	brge	.+2      	; 0xb7c <JOY_calibrate+0x1ba>
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	95 95       	asr	r25
     b7e:	87 95       	ror	r24
     b80:	80 93 08 01 	sts	0x0108, r24
     b84:	60 e0       	ldi	r22, 0x00	; 0
     b86:	70 e0       	ldi	r23, 0x00	; 0
	meanHor = (calR - calL)/2;
     b88:	84 e0       	ldi	r24, 0x04	; 4
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	5a d4       	rcall	.+2228   	; 0x1442 <OLED_bufferGoto>
     b8e:	8b ea       	ldi	r24, 0xAB	; 171
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	96 d4       	rcall	.+2348   	; 0x14c0 <OLED_printString>
     b94:	2f ef       	ldi	r18, 0xFF	; 255
     b96:	8f ef       	ldi	r24, 0xFF	; 255
     b98:	9e e0       	ldi	r25, 0x0E	; 14
     b9a:	21 50       	subi	r18, 0x01	; 1
     b9c:	80 40       	sbci	r24, 0x00	; 0
     b9e:	90 40       	sbci	r25, 0x00	; 0
     ba0:	e1 f7       	brne	.-8      	; 0xb9a <JOY_calibrate+0x1d8>
     ba2:	00 c0       	rjmp	.+0      	; 0xba4 <JOY_calibrate+0x1e2>
     ba4:	00 00       	nop
	
	OLED_bufferGoto(4,0);
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	08 95       	ret

00000bac <JOY_requestCurrentPosition>:
     bac:	88 37       	cpi	r24, 0x78	; 120
     bae:	39 f4       	brne	.+14     	; 0xbbe <JOY_requestCurrentPosition+0x12>
     bb0:	60 91 06 01 	lds	r22, 0x0106
	OLED_printString("CALIB DONE");
     bb4:	70 91 07 01 	lds	r23, 0x0107
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	eb c5       	rjmp	.+3030   	; 0x1792 <ADC_request>
     bbc:	08 95       	ret
     bbe:	89 37       	cpi	r24, 0x79	; 121
     bc0:	31 f4       	brne	.+12     	; 0xbce <JOY_requestCurrentPosition+0x22>
     bc2:	60 91 06 01 	lds	r22, 0x0106
     bc6:	70 91 07 01 	lds	r23, 0x0107
     bca:	81 e0       	ldi	r24, 0x01	; 1
	//printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
	_delay_ms(1000);
}
     bcc:	e2 c5       	rjmp	.+3012   	; 0x1792 <ADC_request>
     bce:	08 95       	ret

00000bd0 <JOY_updatePosition>:
     bd0:	88 37       	cpi	r24, 0x78	; 120
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
	{
		ADC_request(Y_channel, adc_ext_ram);
     bd2:	f9 f4       	brne	.+62     	; 0xc12 <JOY_updatePosition+0x42>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     bd4:	80 91 06 01 	lds	r24, 0x0106
     bd8:	90 91 07 01 	lds	r25, 0x0107
     bdc:	fe d5       	rcall	.+3068   	; 0x17da <ADC_read>
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	90 93 6a 02 	sts	0x026A, r25
     be4:	80 93 69 02 	sts	0x0269, r24
     be8:	20 91 08 01 	lds	r18, 0x0108
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     bec:	60 91 08 01 	lds	r22, 0x0108
     bf0:	ac 01       	movw	r20, r24
     bf2:	42 1b       	sub	r20, r18
     bf4:	51 09       	sbc	r21, r1
     bf6:	9a 01       	movw	r18, r20
     bf8:	44 e6       	ldi	r20, 0x64	; 100
     bfa:	42 9f       	mul	r20, r18
     bfc:	c0 01       	movw	r24, r0
     bfe:	43 9f       	mul	r20, r19
     c00:	90 0d       	add	r25, r0
     c02:	11 24       	eor	r1, r1
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	eb d5       	rcall	.+3030   	; 0x17de <__divmodhi4>
     c08:	70 93 6e 02 	sts	0x026E, r23
     c0c:	60 93 6d 02 	sts	0x026D, r22
     c10:	08 95       	ret
     c12:	89 37       	cpi	r24, 0x79	; 121
     c14:	f1 f4       	brne	.+60     	; 0xc52 <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     c16:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     c1a:	90 91 07 01 	lds	r25, 0x0107
     c1e:	dd d5       	rcall	.+3002   	; 0x17da <ADC_read>
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	90 93 6c 02 	sts	0x026C, r25
     c26:	80 93 6b 02 	sts	0x026B, r24
     c2a:	20 91 09 01 	lds	r18, 0x0109
     c2e:	60 91 09 01 	lds	r22, 0x0109
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     c32:	ac 01       	movw	r20, r24
     c34:	42 1b       	sub	r20, r18
     c36:	51 09       	sbc	r21, r1
     c38:	9a 01       	movw	r18, r20
     c3a:	44 e6       	ldi	r20, 0x64	; 100
     c3c:	42 9f       	mul	r20, r18
     c3e:	c0 01       	movw	r24, r0
     c40:	43 9f       	mul	r20, r19
     c42:	90 0d       	add	r25, r0
     c44:	11 24       	eor	r1, r1
     c46:	70 e0       	ldi	r23, 0x00	; 0
     c48:	ca d5       	rcall	.+2964   	; 0x17de <__divmodhi4>
     c4a:	70 93 70 02 	sts	0x0270, r23
     c4e:	60 93 6f 02 	sts	0x026F, r22
     c52:	08 95       	ret

00000c54 <JOY_calculateDirection>:
     c54:	80 91 6d 02 	lds	r24, 0x026D
     c58:	90 91 6e 02 	lds	r25, 0x026E
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     c5c:	8b 35       	cpi	r24, 0x5B	; 91
     c5e:	91 05       	cpc	r25, r1
     c60:	24 f0       	brlt	.+8      	; 0xc6a <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     c62:	83 e0       	ldi	r24, 0x03	; 3
     c64:	80 93 68 02 	sts	0x0268, r24
     c68:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     c6a:	86 3a       	cpi	r24, 0xA6	; 166
     c6c:	9f 4f       	sbci	r25, 0xFF	; 255
     c6e:	24 f4       	brge	.+8      	; 0xc78 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     c70:	84 e0       	ldi	r24, 0x04	; 4
     c72:	80 93 68 02 	sts	0x0268, r24
     c76:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     c78:	80 91 6f 02 	lds	r24, 0x026F
     c7c:	90 91 70 02 	lds	r25, 0x0270
     c80:	8b 35       	cpi	r24, 0x5B	; 91
     c82:	91 05       	cpc	r25, r1
     c84:	24 f0       	brlt	.+8      	; 0xc8e <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	80 93 68 02 	sts	0x0268, r24
     c8c:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     c8e:	86 3a       	cpi	r24, 0xA6	; 166
     c90:	9f 4f       	sbci	r25, 0xFF	; 255
     c92:	24 f4       	brge	.+8      	; 0xc9c <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	80 93 68 02 	sts	0x0268, r24
     c9a:	08 95       	ret
	else{currentDirection = CENTRE;}
     c9c:	10 92 68 02 	sts	0x0268, r1
     ca0:	08 95       	ret

00000ca2 <JOY_getPosition>:

//------------------------------------------------------------------------------
// This function returns the current position of the Joystick.
// It is a struct with the four parameters X_abs, Y_abs, X_per and Y_per
JOY_position_t JOY_getPosition()
{
     ca2:	cf 93       	push	r28
     ca4:	df 93       	push	r29
     ca6:	cd b7       	in	r28, 0x3d	; 61
     ca8:	de b7       	in	r29, 0x3e	; 62
     caa:	28 97       	sbiw	r28, 0x08	; 8
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	de bf       	out	0x3e, r29	; 62
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	cd bf       	out	0x3d, r28	; 61
	JOY_requestCurrentPosition('x');
     cb6:	88 e7       	ldi	r24, 0x78	; 120
     cb8:	79 df       	rcall	.-270    	; 0xbac <JOY_requestCurrentPosition>
     cba:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cbc:	8a 95       	dec	r24
     cbe:	f1 f7       	brne	.-4      	; 0xcbc <JOY_getPosition+0x1a>
     cc0:	00 00       	nop
     cc2:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     cc4:	85 df       	rcall	.-246    	; 0xbd0 <JOY_updatePosition>
     cc6:	89 e7       	ldi	r24, 0x79	; 121
     cc8:	71 df       	rcall	.-286    	; 0xbac <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     cca:	82 e6       	ldi	r24, 0x62	; 98
     ccc:	8a 95       	dec	r24
     cce:	f1 f7       	brne	.-4      	; 0xccc <JOY_getPosition+0x2a>
     cd0:	00 00       	nop
     cd2:	89 e7       	ldi	r24, 0x79	; 121
     cd4:	7d df       	rcall	.-262    	; 0xbd0 <JOY_updatePosition>
     cd6:	88 e0       	ldi	r24, 0x08	; 8
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     cd8:	e9 e6       	ldi	r30, 0x69	; 105
     cda:	f2 e0       	ldi	r31, 0x02	; 2
     cdc:	de 01       	movw	r26, r28
	return currentPosition;
     cde:	11 96       	adiw	r26, 0x01	; 1
     ce0:	01 90       	ld	r0, Z+
     ce2:	0d 92       	st	X+, r0
     ce4:	8a 95       	dec	r24
     ce6:	e1 f7       	brne	.-8      	; 0xce0 <JOY_getPosition+0x3e>
     ce8:	29 81       	ldd	r18, Y+1	; 0x01
     cea:	3a 81       	ldd	r19, Y+2	; 0x02
     cec:	4b 81       	ldd	r20, Y+3	; 0x03
     cee:	5c 81       	ldd	r21, Y+4	; 0x04
     cf0:	6d 81       	ldd	r22, Y+5	; 0x05
     cf2:	7e 81       	ldd	r23, Y+6	; 0x06
     cf4:	8f 81       	ldd	r24, Y+7	; 0x07
     cf6:	98 85       	ldd	r25, Y+8	; 0x08
     cf8:	28 96       	adiw	r28, 0x08	; 8
     cfa:	0f b6       	in	r0, 0x3f	; 63
}
     cfc:	f8 94       	cli
     cfe:	de bf       	out	0x3e, r29	; 62
     d00:	0f be       	out	0x3f, r0	; 63
     d02:	cd bf       	out	0x3d, r28	; 61
     d04:	df 91       	pop	r29
     d06:	cf 91       	pop	r28
     d08:	08 95       	ret

00000d0a <JOY_getDirection>:
     d0a:	88 e7       	ldi	r24, 0x78	; 120
     d0c:	4f df       	rcall	.-354    	; 0xbac <JOY_requestCurrentPosition>
     d0e:	82 e6       	ldi	r24, 0x62	; 98
     d10:	8a 95       	dec	r24
     d12:	f1 f7       	brne	.-4      	; 0xd10 <JOY_getDirection+0x6>
     d14:	00 00       	nop
     d16:	88 e7       	ldi	r24, 0x78	; 120
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     d18:	5b df       	rcall	.-330    	; 0xbd0 <JOY_updatePosition>
     d1a:	89 e7       	ldi	r24, 0x79	; 121
     d1c:	47 df       	rcall	.-370    	; 0xbac <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     d1e:	82 e6       	ldi	r24, 0x62	; 98
     d20:	8a 95       	dec	r24
     d22:	f1 f7       	brne	.-4      	; 0xd20 <JOY_getDirection+0x16>
     d24:	00 00       	nop
     d26:	89 e7       	ldi	r24, 0x79	; 121
     d28:	53 df       	rcall	.-346    	; 0xbd0 <JOY_updatePosition>
     d2a:	94 df       	rcall	.-216    	; 0xc54 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     d2c:	80 91 68 02 	lds	r24, 0x0268
     d30:	08 95       	ret

00000d32 <MCP2515_reset>:
	//printf("finished MCP2515_init\n");
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
     d32:	cf 93       	push	r28
     d34:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
     d36:	04 d5       	rcall	.+2568   	; 0x1740 <SPI_activateSlave>
     d38:	80 ec       	ldi	r24, 0xC0	; 192
	SPI_send(MCP_RESET);
     d3a:	f8 d4       	rcall	.+2544   	; 0x172c <SPI_send>
     d3c:	8c ec       	ldi	r24, 0xCC	; 204
     d3e:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	f1 f7       	brne	.-4      	; 0xd40 <MCP2515_reset+0xe>
     d44:	00 c0       	rjmp	.+0      	; 0xd46 <MCP2515_reset+0x14>
     d46:	00 00       	nop
     d48:	8c 2f       	mov	r24, r28
     d4a:	fe d4       	rcall	.+2556   	; 0x1748 <SPI_deactivateSlave>
	_delay_ms(1);
	SPI_deactivateSlave(slave);
     d4c:	8f ef       	ldi	r24, 0xFF	; 255
     d4e:	9f e2       	ldi	r25, 0x2F	; 47
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	f1 f7       	brne	.-4      	; 0xd50 <MCP2515_reset+0x1e>
     d54:	00 c0       	rjmp	.+0      	; 0xd56 <MCP2515_reset+0x24>
     d56:	00 00       	nop
     d58:	cf 91       	pop	r28
     d5a:	08 95       	ret

00000d5c <MCP2515_read>:
     d5c:	cf 93       	push	r28
	_delay_ms(10);
}
     d5e:	df 93       	push	r29
     d60:	c8 2f       	mov	r28, r24

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
     d62:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
     d64:	ed d4       	rcall	.+2522   	; 0x1740 <SPI_activateSlave>
     d66:	83 e0       	ldi	r24, 0x03	; 3
	SPI_send(MCP_READ);
     d68:	e1 d4       	rcall	.+2498   	; 0x172c <SPI_send>
     d6a:	8c ec       	ldi	r24, 0xCC	; 204
     d6c:	94 e0       	ldi	r25, 0x04	; 4
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	f1 f7       	brne	.-4      	; 0xd6e <MCP2515_read+0x12>
     d72:	00 c0       	rjmp	.+0      	; 0xd74 <MCP2515_read+0x18>
     d74:	00 00       	nop
     d76:	8d 2f       	mov	r24, r29
     d78:	d9 d4       	rcall	.+2482   	; 0x172c <SPI_send>
	_delay_ms(1);
	SPI_send(address);
     d7a:	dc d4       	rcall	.+2488   	; 0x1734 <SPI_receive>
     d7c:	d8 2f       	mov	r29, r24
     d7e:	8c 2f       	mov	r24, r28
	
	uint8_t result;
	result = SPI_receive();
     d80:	e3 d4       	rcall	.+2502   	; 0x1748 <SPI_deactivateSlave>
     d82:	8d 2f       	mov	r24, r29
     d84:	df 91       	pop	r29
	
	SPI_deactivateSlave(slave);
     d86:	cf 91       	pop	r28
     d88:	08 95       	ret

00000d8a <MCP2515_init>:
     d8a:	80 e0       	ldi	r24, 0x00	; 0
	return result;
}
     d8c:	d2 df       	rcall	.-92     	; 0xd32 <MCP2515_reset>
     d8e:	6e e0       	ldi	r22, 0x0E	; 14
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	e4 df       	rcall	.-56     	; 0xd5c <MCP2515_read>
uint8_t MCP2515_init()
{
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
	// Self-test
	uint8_t value;
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
     d94:	98 2f       	mov	r25, r24
     d96:	90 7e       	andi	r25, 0xE0	; 224
	//printf("CANSTAT: %#x\n", value);
	if((value & MODE_MASK) != MODE_CONFIG) 
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 38       	cpi	r25, 0x80	; 128
     d9c:	09 f4       	brne	.+2      	; 0xda0 <MCP2515_init+0x16>
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	08 95       	ret

00000da2 <MCP2515_write>:
     da2:	1f 93       	push	r17
		return 1;
	}
	//
	//printf("finished MCP2515_init\n");
	return 0;
}
     da4:	cf 93       	push	r28
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_write(SPI_SLAVES slave, uint8_t address, uint8_t data)
{
     da6:	df 93       	push	r29
     da8:	c8 2f       	mov	r28, r24
     daa:	16 2f       	mov	r17, r22
     dac:	d4 2f       	mov	r29, r20
	SPI_activateSlave(slave);
     dae:	c8 d4       	rcall	.+2448   	; 0x1740 <SPI_activateSlave>
     db0:	82 e0       	ldi	r24, 0x02	; 2
	SPI_send(MCP_WRITE);
     db2:	bc d4       	rcall	.+2424   	; 0x172c <SPI_send>
     db4:	81 2f       	mov	r24, r17
     db6:	ba d4       	rcall	.+2420   	; 0x172c <SPI_send>
	SPI_send(address);
     db8:	8d 2f       	mov	r24, r29
     dba:	b8 d4       	rcall	.+2416   	; 0x172c <SPI_send>
     dbc:	8c 2f       	mov	r24, r28
	SPI_send(data);
     dbe:	c4 d4       	rcall	.+2440   	; 0x1748 <SPI_deactivateSlave>
     dc0:	df 91       	pop	r29
     dc2:	cf 91       	pop	r28
	SPI_deactivateSlave(slave);
     dc4:	1f 91       	pop	r17
     dc6:	08 95       	ret

00000dc8 <MCP2515_bitModify>:
     dc8:	0f 93       	push	r16
}
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	c8 2f       	mov	r28, r24
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_bitModify(SPI_SLAVES slave, uint8_t register2change, uint8_t mask, uint8_t newValue)
{
     dd2:	06 2f       	mov	r16, r22
     dd4:	14 2f       	mov	r17, r20
     dd6:	d2 2f       	mov	r29, r18
	SPI_activateSlave(slave);
     dd8:	b3 d4       	rcall	.+2406   	; 0x1740 <SPI_activateSlave>
     dda:	85 e0       	ldi	r24, 0x05	; 5
	
	SPI_send(MCP_BITMOD);
     ddc:	a7 d4       	rcall	.+2382   	; 0x172c <SPI_send>
     dde:	80 2f       	mov	r24, r16
     de0:	a5 d4       	rcall	.+2378   	; 0x172c <SPI_send>
	SPI_send(register2change);
     de2:	81 2f       	mov	r24, r17
     de4:	a3 d4       	rcall	.+2374   	; 0x172c <SPI_send>
     de6:	8d 2f       	mov	r24, r29
	SPI_send(mask);
     de8:	a1 d4       	rcall	.+2370   	; 0x172c <SPI_send>
     dea:	8c 2f       	mov	r24, r28
     dec:	ad d4       	rcall	.+2394   	; 0x1748 <SPI_deactivateSlave>
	SPI_send(newValue);
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
	
	SPI_deactivateSlave(slave);
     df4:	0f 91       	pop	r16
     df6:	08 95       	ret

00000df8 <startGame>:

static int menuFrameOffset = 10; //Columns from left frame border
//******************************************************************************************

void startGame()
{
     df8:	cf 93       	push	r28
     dfa:	df 93       	push	r29
	OLED_clear();
     dfc:	3e d2       	rcall	.+1148   	; 0x127a <OLED_clear>
     dfe:	60 e0       	ldi	r22, 0x00	; 0
	OLED_bufferGoto(0,0);
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	1d d3       	rcall	.+1594   	; 0x1442 <OLED_bufferGoto>
     e08:	86 eb       	ldi	r24, 0xB6	; 182
     e0a:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("START");
     e0c:	59 d3       	rcall	.+1714   	; 0x14c0 <OLED_printString>
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_bufferGoto(3,0);
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	15 d3       	rcall	.+1578   	; 0x1442 <OLED_bufferGoto>
     e18:	ce e0       	ldi	r28, 0x0E	; 14
     e1a:	d0 e0       	ldi	r29, 0x00	; 0
     e1c:	8c eb       	ldi	r24, 0xBC	; 188
     e1e:	91 e0       	ldi	r25, 0x01	; 1
     e20:	4f d3       	rcall	.+1694   	; 0x14c0 <OLED_printString>
     e22:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     e24:	8f e7       	ldi	r24, 0x7F	; 127
     e26:	97 e0       	ldi	r25, 0x07	; 7
     e28:	21 50       	subi	r18, 0x01	; 1
     e2a:	80 40       	sbci	r24, 0x00	; 0
     e2c:	90 40       	sbci	r25, 0x00	; 0
     e2e:	e1 f7       	brne	.-8      	; 0xe28 <startGame+0x30>
     e30:	00 c0       	rjmp	.+0      	; 0xe32 <startGame+0x3a>
     e32:	00 00       	nop
     e34:	21 97       	sbiw	r28, 0x01	; 1
     e36:	20 97       	sbiw	r28, 0x00	; 0
     e38:	89 f7       	brne	.-30     	; 0xe1c <startGame+0x24>
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	70 e0       	ldi	r23, 0x00	; 0
     e3e:	85 e0       	ldi	r24, 0x05	; 5
	OLED_bufferGoto(0,0);
	OLED_printString("START");
	
	OLED_bufferGoto(3,0);
	
	for(int i = 14; i > 0; i--)
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	ff d2       	rcall	.+1534   	; 0x1442 <OLED_bufferGoto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_bufferGoto(5,0);
     e44:	8e eb       	ldi	r24, 0xBE	; 190
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	3b d3       	rcall	.+1654   	; 0x14c0 <OLED_printString>
     e4a:	2f ef       	ldi	r18, 0xFF	; 255
     e4c:	8f ef       	ldi	r24, 0xFF	; 255
     e4e:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     e50:	21 50       	subi	r18, 0x01	; 1
     e52:	80 40       	sbci	r24, 0x00	; 0
     e54:	90 40       	sbci	r25, 0x00	; 0
     e56:	e1 f7       	brne	.-8      	; 0xe50 <startGame+0x58>
     e58:	00 c0       	rjmp	.+0      	; 0xe5a <startGame+0x62>
     e5a:	00 c0       	rjmp	.+0      	; 0xe5c <startGame+0x64>
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	08 95       	ret

00000e62 <MENU_addMenuItem>:
     e62:	cf 92       	push	r12
     e64:	df 92       	push	r13
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
	_delay_ms(3000);
}
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     e70:	df 93       	push	r29
     e72:	8c 01       	movw	r16, r24
     e74:	7b 01       	movw	r14, r22
     e76:	6a 01       	movw	r12, r20
     e78:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     e7a:	80 91 74 02 	lds	r24, 0x0274
     e7e:	90 91 75 02 	lds	r25, 0x0275
     e82:	89 2b       	or	r24, r25
     e84:	19 f0       	breq	.+6      	; 0xe8c <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     e86:	87 ec       	ldi	r24, 0xC7	; 199
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	57 d6       	rcall	.+3246   	; 0x1b3a <puts>
     e8c:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	cd d4       	rcall	.+2458   	; 0x182c <malloc>
     e92:	fc 01       	movw	r30, r24
     e94:	90 93 75 02 	sts	0x0275, r25
     e98:	80 93 74 02 	sts	0x0274, r24
     e9c:	f3 82       	std	Z+3, r15	; 0x03
     e9e:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     ea0:	11 83       	std	Z+1, r17	; 0x01
     ea2:	00 83       	st	Z, r16
	currItem->name = name;
     ea4:	cd 2b       	or	r28, r29
     ea6:	39 f0       	breq	.+14     	; 0xeb6 <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     ea8:	d5 82       	std	Z+5, r13	; 0x05
     eaa:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     eac:	81 e0       	ldi	r24, 0x01	; 1
     eae:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     eb0:	97 83       	std	Z+7, r25	; 0x07
     eb2:	86 83       	std	Z+6, r24	; 0x06
     eb4:	04 c0       	rjmp	.+8      	; 0xebe <MENU_addMenuItem+0x5c>
     eb6:	15 82       	std	Z+5, r1	; 0x05
     eb8:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     eba:	17 82       	std	Z+7, r1	; 0x07
     ebc:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
	}
}
     ec2:	1f 91       	pop	r17
     ec4:	0f 91       	pop	r16
     ec6:	ff 90       	pop	r15
     ec8:	ef 90       	pop	r14
     eca:	df 90       	pop	r13
     ecc:	cf 90       	pop	r12
     ece:	08 95       	ret

00000ed0 <MENU_buildMenus>:
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     ed4:	86 e1       	ldi	r24, 0x16	; 22
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	a9 d4       	rcall	.+2386   	; 0x182c <malloc>
     eda:	ec 01       	movw	r28, r24
     edc:	90 93 7b 02 	sts	0x027B, r25
     ee0:	80 93 7a 02 	sts	0x027A, r24
     ee4:	8d ed       	ldi	r24, 0xDD	; 221
	mainMenu->menuName = "MainMenu";
     ee6:	91 e0       	ldi	r25, 0x01	; 1
     ee8:	99 83       	std	Y+1, r25	; 0x01
     eea:	88 83       	st	Y, r24
     eec:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     eee:	1c 8a       	std	Y+20, r1	; 0x14
     ef0:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	9b 83       	std	Y+3, r25	; 0x03
     ef6:	8a 83       	std	Y+2, r24	; 0x02
     ef8:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	97 d4       	rcall	.+2350   	; 0x182c <malloc>
     efe:	fc 01       	movw	r30, r24
     f00:	90 93 79 02 	sts	0x0279, r25
     f04:	80 93 78 02 	sts	0x0278, r24
     f08:	86 ee       	ldi	r24, 0xE6	; 230
     f0a:	91 e0       	ldi	r25, 0x01	; 1
	difficultyMenu->menuName = "DifficultyMenu";
     f0c:	91 83       	std	Z+1, r25	; 0x01
     f0e:	80 83       	st	Z, r24
     f10:	d5 8b       	std	Z+21, r29	; 0x15
     f12:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     f14:	83 e0       	ldi	r24, 0x03	; 3
     f16:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     f18:	93 83       	std	Z+3, r25	; 0x03
     f1a:	82 83       	std	Z+2, r24	; 0x02
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     f20:	40 e0       	ldi	r20, 0x00	; 0
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	be 01       	movw	r22, r28
     f26:	85 ef       	ldi	r24, 0xF5	; 245
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	9b df       	rcall	.-202    	; 0xe62 <MENU_addMenuItem>
     f2c:	60 91 7a 02 	lds	r22, 0x027A
     f30:	70 91 7b 02 	lds	r23, 0x027B
	mainMenu->children[0] = currItem;
     f34:	e0 91 74 02 	lds	r30, 0x0274
     f38:	f0 91 75 02 	lds	r31, 0x0275
     f3c:	db 01       	movw	r26, r22
     f3e:	15 96       	adiw	r26, 0x05	; 5
     f40:	fc 93       	st	X, r31
     f42:	ee 93       	st	-X, r30
     f44:	14 97       	sbiw	r26, 0x04	; 4
     f46:	8c ef       	ldi	r24, 0xFC	; 252
     f48:	96 e0       	ldi	r25, 0x06	; 6
     f4a:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
     f4c:	82 87       	std	Z+10, r24	; 0x0a
     f4e:	40 91 78 02 	lds	r20, 0x0278
     f52:	50 91 79 02 	lds	r21, 0x0279
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     f56:	21 e0       	ldi	r18, 0x01	; 1
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	8e ef       	ldi	r24, 0xFE	; 254
     f5c:	91 e0       	ldi	r25, 0x01	; 1
     f5e:	81 df       	rcall	.-254    	; 0xe62 <MENU_addMenuItem>
     f60:	60 91 7a 02 	lds	r22, 0x027A
     f64:	70 91 7b 02 	lds	r23, 0x027B
	mainMenu->children[1] = currItem;
     f68:	80 91 74 02 	lds	r24, 0x0274
     f6c:	90 91 75 02 	lds	r25, 0x0275
     f70:	fb 01       	movw	r30, r22
     f72:	97 83       	std	Z+7, r25	; 0x07
     f74:	86 83       	std	Z+6, r24	; 0x06
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	40 e0       	ldi	r20, 0x00	; 0
     f7c:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     f7e:	89 e0       	ldi	r24, 0x09	; 9
     f80:	92 e0       	ldi	r25, 0x02	; 2
     f82:	6f df       	rcall	.-290    	; 0xe62 <MENU_addMenuItem>
     f84:	60 91 7a 02 	lds	r22, 0x027A
     f88:	70 91 7b 02 	lds	r23, 0x027B
     f8c:	80 91 74 02 	lds	r24, 0x0274
	mainMenu->children[2] = currItem;
     f90:	90 91 75 02 	lds	r25, 0x0275
     f94:	db 01       	movw	r26, r22
     f96:	19 96       	adiw	r26, 0x09	; 9
     f98:	9c 93       	st	X, r25
     f9a:	8e 93       	st	-X, r24
     f9c:	18 97       	sbiw	r26, 0x08	; 8
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	84 e1       	ldi	r24, 0x14	; 20
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
     fa8:	92 e0       	ldi	r25, 0x02	; 2
     faa:	5b df       	rcall	.-330    	; 0xe62 <MENU_addMenuItem>
     fac:	60 91 7a 02 	lds	r22, 0x027A
     fb0:	70 91 7b 02 	lds	r23, 0x027B
     fb4:	e0 91 74 02 	lds	r30, 0x0274
	mainMenu->children[3] = currItem;
     fb8:	f0 91 75 02 	lds	r31, 0x0275
     fbc:	db 01       	movw	r26, r22
     fbe:	1b 96       	adiw	r26, 0x0b	; 11
     fc0:	fc 93       	st	X, r31
     fc2:	ee 93       	st	-X, r30
     fc4:	1a 97       	sbiw	r26, 0x0a	; 10
     fc6:	81 ee       	ldi	r24, 0xE1	; 225
     fc8:	94 e0       	ldi	r25, 0x04	; 4
     fca:	93 87       	std	Z+11, r25	; 0x0b
     fcc:	82 87       	std	Z+10, r24	; 0x0a
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
     fd2:	40 e0       	ldi	r20, 0x00	; 0
     fd4:	50 e0       	ldi	r21, 0x00	; 0
     fd6:	8e e1       	ldi	r24, 0x1E	; 30
     fd8:	92 e0       	ldi	r25, 0x02	; 2
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
     fda:	43 df       	rcall	.-378    	; 0xe62 <MENU_addMenuItem>
     fdc:	e0 91 7a 02 	lds	r30, 0x027A
     fe0:	f0 91 7b 02 	lds	r31, 0x027B
     fe4:	80 91 74 02 	lds	r24, 0x0274
     fe8:	90 91 75 02 	lds	r25, 0x0275
	mainMenu->children[4] = currItem;
     fec:	95 87       	std	Z+13, r25	; 0x0d
     fee:	84 87       	std	Z+12, r24	; 0x0c
     ff0:	10 92 75 02 	sts	0x0275, r1
     ff4:	10 92 74 02 	sts	0x0274, r1
     ff8:	60 91 78 02 	lds	r22, 0x0278
     ffc:	70 91 79 02 	lds	r23, 0x0279
	
	currItem = NULL;
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
    1006:	50 e0       	ldi	r21, 0x00	; 0
    1008:	83 e2       	ldi	r24, 0x23	; 35
    100a:	92 e0       	ldi	r25, 0x02	; 2
    100c:	2a df       	rcall	.-428    	; 0xe62 <MENU_addMenuItem>
    100e:	60 91 78 02 	lds	r22, 0x0278
    1012:	70 91 79 02 	lds	r23, 0x0279
    1016:	80 91 74 02 	lds	r24, 0x0274
    101a:	90 91 75 02 	lds	r25, 0x0275
	difficultyMenu->children[0] = currItem;
    101e:	fb 01       	movw	r30, r22
    1020:	95 83       	std	Z+5, r25	; 0x05
    1022:	84 83       	std	Z+4, r24	; 0x04
    1024:	20 e0       	ldi	r18, 0x00	; 0
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	40 e0       	ldi	r20, 0x00	; 0
    102a:	50 e0       	ldi	r21, 0x00	; 0
    102c:	88 e2       	ldi	r24, 0x28	; 40
    102e:	92 e0       	ldi	r25, 0x02	; 2
    1030:	18 df       	rcall	.-464    	; 0xe62 <MENU_addMenuItem>
    1032:	60 91 78 02 	lds	r22, 0x0278
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
    1036:	70 91 79 02 	lds	r23, 0x0279
    103a:	80 91 74 02 	lds	r24, 0x0274
    103e:	90 91 75 02 	lds	r25, 0x0275
    1042:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
    1044:	17 96       	adiw	r26, 0x07	; 7
    1046:	9c 93       	st	X, r25
    1048:	8e 93       	st	-X, r24
    104a:	16 97       	sbiw	r26, 0x06	; 6
    104c:	20 e0       	ldi	r18, 0x00	; 0
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	40 e0       	ldi	r20, 0x00	; 0
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	8f e2       	ldi	r24, 0x2F	; 47
    1056:	92 e0       	ldi	r25, 0x02	; 2
    1058:	04 df       	rcall	.-504    	; 0xe62 <MENU_addMenuItem>
    105a:	e0 91 78 02 	lds	r30, 0x0278
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
    105e:	f0 91 79 02 	lds	r31, 0x0279
    1062:	80 91 74 02 	lds	r24, 0x0274
    1066:	90 91 75 02 	lds	r25, 0x0275
    106a:	91 87       	std	Z+9, r25	; 0x09
    106c:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	08 95       	ret

00001074 <MENU_printMenuItem>:
    1074:	cf 93       	push	r28
    1076:	df 93       	push	r29
    1078:	ec 01       	movw	r28, r24
    107a:	cb 01       	movw	r24, r22
    107c:	20 97       	sbiw	r28, 0x00	; 0
    107e:	39 f0       	breq	.+14     	; 0x108e <MENU_printMenuItem+0x1a>
    1080:	6a e0       	ldi	r22, 0x0A	; 10
}
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	de d1       	rcall	.+956    	; 0x1442 <OLED_bufferGoto>
    1086:	88 81       	ld	r24, Y
void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_bufferGoto(lineNumber, menuFrameOffset);
		OLED_printString(item->name);
    1088:	99 81       	ldd	r25, Y+1	; 0x01
    108a:	1a d2       	rcall	.+1076   	; 0x14c0 <OLED_printString>
    108c:	07 c0       	rjmp	.+14     	; 0x109c <MENU_printMenuItem+0x28>
    108e:	84 e3       	ldi	r24, 0x34	; 52
    1090:	92 e0       	ldi	r25, 0x02	; 2
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
    1092:	9f 93       	push	r25
    1094:	8f 93       	push	r24
    1096:	3b d5       	rcall	.+2678   	; 0x1b0e <printf>
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	08 95       	ret

000010a2 <MENU_printMenu>:
	}
}
    10a2:	cf 92       	push	r12
    10a4:	df 92       	push	r13
    10a6:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
    10a8:	ff 92       	push	r15
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	6c 01       	movw	r12, r24
    10b4:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
    10b6:	e1 d0       	rcall	.+450    	; 0x127a <OLED_clear>
    10b8:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	88 d2       	rcall	.+1296   	; 0x15ce <OLED_moveArrow>
    10be:	1e 14       	cp	r1, r14
    10c0:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
    10c2:	7c f4       	brge	.+30     	; 0x10e2 <MENU_printMenu+0x40>
    10c4:	86 01       	movw	r16, r12
    10c6:	0c 5f       	subi	r16, 0xFC	; 252
    10c8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ca:	c0 e0       	ldi	r28, 0x00	; 0
    10cc:	d0 e0       	ldi	r29, 0x00	; 0
    10ce:	be 01       	movw	r22, r28
    10d0:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
    10d2:	81 91       	ld	r24, Z+
    10d4:	91 91       	ld	r25, Z+
    10d6:	8f 01       	movw	r16, r30
    10d8:	cd df       	rcall	.-102    	; 0x1074 <MENU_printMenuItem>
    10da:	21 96       	adiw	r28, 0x01	; 1
    10dc:	ce 15       	cp	r28, r14
    10de:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
    10e0:	b1 f7       	brne	.-20     	; 0x10ce <MENU_printMenu+0x2c>
    10e2:	d0 92 77 02 	sts	0x0277, r13
    10e6:	c0 92 76 02 	sts	0x0276, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
    10ea:	10 92 72 02 	sts	0x0272, r1
    10ee:	10 92 71 02 	sts	0x0271, r1
	
	currentPosition = 0;
    10f2:	f6 01       	movw	r30, r12
    10f4:	84 81       	ldd	r24, Z+4	; 0x04
    10f6:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
    10f8:	90 93 75 02 	sts	0x0275, r25
    10fc:	80 93 74 02 	sts	0x0274, r24
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
}
    1106:	0f 91       	pop	r16
    1108:	ff 90       	pop	r15
    110a:	ef 90       	pop	r14
    110c:	df 90       	pop	r13
    110e:	cf 90       	pop	r12
    1110:	08 95       	ret

00001112 <MENU_moveUp>:
    1112:	20 91 71 02 	lds	r18, 0x0271
    1116:	30 91 72 02 	lds	r19, 0x0272
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
    111a:	12 16       	cp	r1, r18
    111c:	13 06       	cpc	r1, r19
    111e:	bc f4       	brge	.+46     	; 0x114e <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
    1120:	c9 01       	movw	r24, r18
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	90 93 72 02 	sts	0x0272, r25
    1128:	80 93 71 02 	sts	0x0271, r24
		currItem = currentMenu->children[currentPosition];
    112c:	e0 91 76 02 	lds	r30, 0x0276
    1130:	f0 91 77 02 	lds	r31, 0x0277
    1134:	2f 5f       	subi	r18, 0xFF	; 255
    1136:	3f 4f       	sbci	r19, 0xFF	; 255
    1138:	22 0f       	add	r18, r18
    113a:	33 1f       	adc	r19, r19
    113c:	e2 0f       	add	r30, r18
    113e:	f3 1f       	adc	r31, r19
    1140:	20 81       	ld	r18, Z
    1142:	31 81       	ldd	r19, Z+1	; 0x01
    1144:	30 93 75 02 	sts	0x0275, r19
    1148:	20 93 74 02 	sts	0x0274, r18
		OLED_moveArrow(currentPosition);
    114c:	40 c2       	rjmp	.+1152   	; 0x15ce <OLED_moveArrow>
    114e:	08 95       	ret

00001150 <MENU_moveDown>:
    1150:	e0 91 76 02 	lds	r30, 0x0276
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
    1154:	f0 91 77 02 	lds	r31, 0x0277
    1158:	20 91 71 02 	lds	r18, 0x0271
    115c:	30 91 72 02 	lds	r19, 0x0272
    1160:	82 81       	ldd	r24, Z+2	; 0x02
    1162:	93 81       	ldd	r25, Z+3	; 0x03
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	28 17       	cp	r18, r24
    1168:	39 07       	cpc	r19, r25
    116a:	a4 f4       	brge	.+40     	; 0x1194 <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
    116c:	c9 01       	movw	r24, r18
    116e:	01 96       	adiw	r24, 0x01	; 1
    1170:	90 93 72 02 	sts	0x0272, r25
    1174:	80 93 71 02 	sts	0x0271, r24
		currItem = currentMenu->children[currentPosition];
    1178:	2d 5f       	subi	r18, 0xFD	; 253
    117a:	3f 4f       	sbci	r19, 0xFF	; 255
    117c:	22 0f       	add	r18, r18
    117e:	33 1f       	adc	r19, r19
    1180:	e2 0f       	add	r30, r18
    1182:	f3 1f       	adc	r31, r19
    1184:	20 81       	ld	r18, Z
    1186:	31 81       	ldd	r19, Z+1	; 0x01
    1188:	30 93 75 02 	sts	0x0275, r19
    118c:	20 93 74 02 	sts	0x0274, r18
		OLED_moveArrow(currentPosition);
    1190:	1e c2       	rjmp	.+1084   	; 0x15ce <OLED_moveArrow>
    1192:	08 95       	ret
    1194:	10 92 72 02 	sts	0x0272, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
    1198:	10 92 71 02 	sts	0x0271, r1
    119c:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
    119e:	95 81       	ldd	r25, Z+5	; 0x05
    11a0:	90 93 75 02 	sts	0x0275, r25
    11a4:	80 93 74 02 	sts	0x0274, r24
    11a8:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	10 c2       	rjmp	.+1056   	; 0x15ce <OLED_moveArrow>
    11ae:	08 95       	ret

000011b0 <MENU_moveLeft>:
    11b0:	e0 91 76 02 	lds	r30, 0x0276
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
    11b4:	f0 91 77 02 	lds	r31, 0x0277
    11b8:	84 89       	ldd	r24, Z+20	; 0x14
    11ba:	95 89       	ldd	r25, Z+21	; 0x15
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	21 f0       	breq	.+8      	; 0x11c8 <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
    11c0:	fc 01       	movw	r30, r24
    11c2:	62 81       	ldd	r22, Z+2	; 0x02
    11c4:	73 81       	ldd	r23, Z+3	; 0x03
    11c6:	6d cf       	rjmp	.-294    	; 0x10a2 <MENU_printMenu>
    11c8:	08 95       	ret

000011ca <MENU_reactivate>:
    11ca:	80 91 76 02 	lds	r24, 0x0276
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
    11ce:	90 91 77 02 	lds	r25, 0x0277
    11d2:	fc 01       	movw	r30, r24
    11d4:	62 81       	ldd	r22, Z+2	; 0x02
    11d6:	73 81       	ldd	r23, Z+3	; 0x03
    11d8:	64 df       	rcall	.-312    	; 0x10a2 <MENU_printMenu>
    11da:	18 c0       	rjmp	.+48     	; 0x120c <MENU_waitForInput>
	MENU_waitForInput();
    11dc:	08 95       	ret

000011de <MENU_moveRight>:
    11de:	e0 91 74 02 	lds	r30, 0x0274
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
    11e2:	f0 91 75 02 	lds	r31, 0x0275
    11e6:	86 81       	ldd	r24, Z+6	; 0x06
    11e8:	97 81       	ldd	r25, Z+7	; 0x07
    11ea:	89 2b       	or	r24, r25
    11ec:	39 f0       	breq	.+14     	; 0x11fc <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
    11ee:	84 81       	ldd	r24, Z+4	; 0x04
    11f0:	95 81       	ldd	r25, Z+5	; 0x05
    11f2:	fc 01       	movw	r30, r24
    11f4:	62 81       	ldd	r22, Z+2	; 0x02
    11f6:	73 81       	ldd	r23, Z+3	; 0x03
    11f8:	54 cf       	rjmp	.-344    	; 0x10a2 <MENU_printMenu>
    11fa:	08 95       	ret
    11fc:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
    11fe:	f3 85       	ldd	r31, Z+11	; 0x0b
    1200:	e0 2d       	mov	r30, r0
    1202:	30 97       	sbiw	r30, 0x00	; 0
    1204:	11 f0       	breq	.+4      	; 0x120a <MENU_moveRight+0x2c>
    1206:	09 95       	icall
	{
		currItem->functionPtr();
    1208:	e0 cf       	rjmp	.-64     	; 0x11ca <MENU_reactivate>
		MENU_reactivate();
    120a:	08 95       	ret

0000120c <MENU_waitForInput>:
    120c:	80 91 71 02 	lds	r24, 0x0271
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
    1210:	90 91 72 02 	lds	r25, 0x0272
    1214:	dc d1       	rcall	.+952    	; 0x15ce <OLED_moveArrow>
    1216:	80 91 73 02 	lds	r24, 0x0273
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    121a:	88 23       	and	r24, r24
    121c:	f9 f0       	breq	.+62     	; 0x125c <MENU_waitForInput+0x50>
    121e:	75 dd       	rcall	.-1302   	; 0xd0a <JOY_getDirection>
	{
		currDir = JOY_getDirection();
    1220:	82 30       	cpi	r24, 0x02	; 2
    1222:	71 f0       	breq	.+28     	; 0x1240 <MENU_waitForInput+0x34>
		switch(currDir){
    1224:	18 f4       	brcc	.+6      	; 0x122c <MENU_waitForInput+0x20>
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	49 f0       	breq	.+18     	; 0x123c <MENU_waitForInput+0x30>
    122a:	0b c0       	rjmp	.+22     	; 0x1242 <MENU_waitForInput+0x36>
    122c:	83 30       	cpi	r24, 0x03	; 3
    122e:	21 f0       	breq	.+8      	; 0x1238 <MENU_waitForInput+0x2c>
    1230:	84 30       	cpi	r24, 0x04	; 4
    1232:	39 f4       	brne	.+14     	; 0x1242 <MENU_waitForInput+0x36>
    1234:	bd df       	rcall	.-134    	; 0x11b0 <MENU_moveLeft>
    1236:	05 c0       	rjmp	.+10     	; 0x1242 <MENU_waitForInput+0x36>
			case LEFT:
			MENU_moveLeft();
    1238:	d2 df       	rcall	.-92     	; 0x11de <MENU_moveRight>
    123a:	03 c0       	rjmp	.+6      	; 0x1242 <MENU_waitForInput+0x36>
			break;
    123c:	6a df       	rcall	.-300    	; 0x1112 <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
    123e:	01 c0       	rjmp	.+2      	; 0x1242 <MENU_waitForInput+0x36>
    1240:	87 df       	rcall	.-242    	; 0x1150 <MENU_moveDown>
			break;
    1242:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
    1244:	8f e7       	ldi	r24, 0x7F	; 127
    1246:	94 e0       	ldi	r25, 0x04	; 4
			break;
    1248:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
    124a:	80 40       	sbci	r24, 0x00	; 0
    124c:	90 40       	sbci	r25, 0x00	; 0
    124e:	e1 f7       	brne	.-8      	; 0x1248 <MENU_waitForInput+0x3c>
    1250:	00 c0       	rjmp	.+0      	; 0x1252 <MENU_waitForInput+0x46>
    1252:	00 00       	nop
    1254:	80 91 73 02 	lds	r24, 0x0273
    1258:	81 11       	cpse	r24, r1
    125a:	e1 cf       	rjmp	.-62     	; 0x121e <MENU_waitForInput+0x12>
    125c:	08 95       	ret

0000125e <MENU_activate>:
    125e:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    1260:	80 93 73 02 	sts	0x0273, r24
    1264:	35 de       	rcall	.-918    	; 0xed0 <MENU_buildMenus>
    1266:	80 91 7a 02 	lds	r24, 0x027A
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
    126a:	90 91 7b 02 	lds	r25, 0x027B
    126e:	fc 01       	movw	r30, r24
    1270:	62 81       	ldd	r22, Z+2	; 0x02
    1272:	73 81       	ldd	r23, Z+3	; 0x03
    1274:	16 df       	rcall	.-468    	; 0x10a2 <MENU_printMenu>
    1276:	ca cf       	rjmp	.-108    	; 0x120c <MENU_waitForInput>
    1278:	08 95       	ret

0000127a <OLED_clear>:
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	// clear OLED buffer
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    127a:	80 91 10 01 	lds	r24, 0x0110
    127e:	90 91 11 01 	lds	r25, 0x0111
    1282:	89 2b       	or	r24, r25
    1284:	89 f0       	breq	.+34     	; 0x12a8 <OLED_clear+0x2e>
    1286:	80 e0       	ldi	r24, 0x00	; 0
    1288:	90 e0       	ldi	r25, 0x00	; 0
	{
		oled_buffer[i] = 0x00;
    128a:	e0 91 12 01 	lds	r30, 0x0112
    128e:	f0 91 13 01 	lds	r31, 0x0113
    1292:	e8 0f       	add	r30, r24
    1294:	f9 1f       	adc	r31, r25
    1296:	10 82       	st	Z, r1
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	// clear OLED buffer
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    1298:	01 96       	adiw	r24, 0x01	; 1
    129a:	20 91 10 01 	lds	r18, 0x0110
    129e:	30 91 11 01 	lds	r19, 0x0111
    12a2:	82 17       	cp	r24, r18
    12a4:	93 07       	cpc	r25, r19
    12a6:	88 f3       	brcs	.-30     	; 0x128a <OLED_clear+0x10>
    12a8:	08 95       	ret

000012aa <OLED_init>:

//------------------------------------------------------------------------------
// Default initialization routine of the OLED display.

void OLED_init(void)
{
    12aa:	cf 93       	push	r28
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
    12ac:	e0 91 16 01 	lds	r30, 0x0116
    12b0:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12b4:	8e ea       	ldi	r24, 0xAE	; 174
    12b6:	80 83       	st	Z, r24
// Default initialization routine of the OLED display.

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
    12b8:	e0 91 16 01 	lds	r30, 0x0116
    12bc:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12c0:	81 ea       	ldi	r24, 0xA1	; 161
    12c2:	80 83       	st	Z, r24

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
    12c4:	e0 91 16 01 	lds	r30, 0x0116
    12c8:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12cc:	8a ed       	ldi	r24, 0xDA	; 218
    12ce:	80 83       	st	Z, r24
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
    12d0:	e0 91 16 01 	lds	r30, 0x0116
    12d4:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12d8:	82 e1       	ldi	r24, 0x12	; 18
    12da:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    12dc:	e0 91 16 01 	lds	r30, 0x0116
    12e0:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12e4:	88 ec       	ldi	r24, 0xC8	; 200
    12e6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    12e8:	e0 91 16 01 	lds	r30, 0x0116
    12ec:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12f0:	88 ea       	ldi	r24, 0xA8	; 168
    12f2:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    12f4:	e0 91 16 01 	lds	r30, 0x0116
    12f8:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12fc:	8f e3       	ldi	r24, 0x3F	; 63
    12fe:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    1300:	e0 91 16 01 	lds	r30, 0x0116
    1304:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1308:	85 ed       	ldi	r24, 0xD5	; 213
    130a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
    130c:	e0 91 16 01 	lds	r30, 0x0116
    1310:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1314:	80 e8       	ldi	r24, 0x80	; 128
    1316:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    1318:	e0 91 16 01 	lds	r30, 0x0116
    131c:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1320:	81 e8       	ldi	r24, 0x81	; 129
    1322:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    1324:	e0 91 16 01 	lds	r30, 0x0116
    1328:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    132c:	c0 e5       	ldi	r28, 0x50	; 80
    132e:	c0 83       	st	Z, r28
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    1330:	e0 91 16 01 	lds	r30, 0x0116
    1334:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1338:	89 ed       	ldi	r24, 0xD9	; 217
    133a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
    133c:	e0 91 16 01 	lds	r30, 0x0116
    1340:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1344:	81 e2       	ldi	r24, 0x21	; 33
    1346:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    1348:	e0 91 16 01 	lds	r30, 0x0116
    134c:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1350:	80 e2       	ldi	r24, 0x20	; 32
    1352:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
    1354:	e0 91 16 01 	lds	r30, 0x0116
    1358:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    135c:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    135e:	e0 91 16 01 	lds	r30, 0x0116
    1362:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1366:	8b ed       	ldi	r24, 0xDB	; 219
    1368:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    136a:	e0 91 16 01 	lds	r30, 0x0116
    136e:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1372:	80 e3       	ldi	r24, 0x30	; 48
    1374:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    1376:	e0 91 16 01 	lds	r30, 0x0116
    137a:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    137e:	8d ea       	ldi	r24, 0xAD	; 173
    1380:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    1382:	e0 91 16 01 	lds	r30, 0x0116
    1386:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    138a:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    138c:	e0 91 16 01 	lds	r30, 0x0116
    1390:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1394:	84 ea       	ldi	r24, 0xA4	; 164
    1396:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    1398:	e0 91 16 01 	lds	r30, 0x0116
    139c:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13a0:	86 ea       	ldi	r24, 0xA6	; 166
    13a2:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    13a4:	e0 91 16 01 	lds	r30, 0x0116
    13a8:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13ac:	8f ea       	ldi	r24, 0xAF	; 175
    13ae:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    13b0:	64 df       	rcall	.-312    	; 0x127a <OLED_clear>
    13b2:	83 b7       	in	r24, 0x33	; 51
	//OLED_splashScreen();
	//OLED_flyingArrows();
	
	// setup 8-bit counter0 without PWM
	// setting Mode of Operation to CTC and Prescaler to div/1024
	TCCR0 |= (1<<WGM01) | (1<<CS02) | (1<<CS00);
    13b4:	8d 60       	ori	r24, 0x0D	; 13
    13b6:	83 bf       	out	0x33, r24	; 51
    13b8:	89 b7       	in	r24, 0x39	; 57
	// Output Compare Interrupt Enable
	TIMSK |= (1<<OCIE0);
    13ba:	81 60       	ori	r24, 0x01	; 1
    13bc:	89 bf       	out	0x39, r24	; 57
    13be:	c1 bf       	out	0x31, r28	; 49
	// 17ms Counter cycle (4800Hz -> 80 cycles)
	OCR0 = 80;
    13c0:	cf 91       	pop	r28
	
}
    13c2:	08 95       	ret

000013c4 <OLED_goto>:
    13c4:	26 2f       	mov	r18, r22

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
    13c6:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
    13c8:	75 95       	asr	r23
    13ca:	67 95       	ror	r22
    13cc:	75 95       	asr	r23
    13ce:	67 95       	ror	r22
    13d0:	75 95       	asr	r23
    13d2:	67 95       	ror	r22
    13d4:	75 95       	asr	r23
    13d6:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
    13d8:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
    13da:	80 55       	subi	r24, 0x50	; 80
    13dc:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
    13de:	e0 91 16 01 	lds	r30, 0x0116
    13e2:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13e6:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
    13e8:	e0 91 16 01 	lds	r30, 0x0116
    13ec:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13f0:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
    13f2:	e0 91 16 01 	lds	r30, 0x0116
    13f6:	f0 91 17 01 	lds	r31, 0x0117
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13fa:	60 83       	st	Z, r22
    13fc:	08 95       	ret

000013fe <OLED_updateScreen>:
	// set horizontal addressing mode
// 	OLED_writeByteToOLED(oled_cmd, 0x20); // set memory addressing mode
// 	OLED_writeByteToOLED(oled_cmd, 0x00); // set horizontal addressing mode ~ 0d
// 	
	// write OLED buffer to OLED Memory
	OLED_goto(0,0); // todo: start writing in top left corner (maybe not further needed)
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	de df       	rcall	.-68     	; 0x13c4 <OLED_goto>
    1408:	80 91 10 01 	lds	r24, 0x0110
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    140c:	90 91 11 01 	lds	r25, 0x0111
    1410:	89 2b       	or	r24, r25
    1412:	b1 f0       	breq	.+44     	; 0x1440 <OLED_updateScreen+0x42>
    1414:	80 e0       	ldi	r24, 0x00	; 0
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	e0 91 12 01 	lds	r30, 0x0112
	{
		OLED_writeByteToOLED(oled_data, oled_buffer[i]);
    141c:	f0 91 13 01 	lds	r31, 0x0113
    1420:	e8 0f       	add	r30, r24
    1422:	f9 1f       	adc	r31, r25
    1424:	20 81       	ld	r18, Z
    1426:	e0 91 14 01 	lds	r30, 0x0114
    142a:	f0 91 15 01 	lds	r31, 0x0115
    142e:	20 83       	st	Z, r18
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1430:	01 96       	adiw	r24, 0x01	; 1
// 	OLED_writeByteToOLED(oled_cmd, 0x20); // set memory addressing mode
// 	OLED_writeByteToOLED(oled_cmd, 0x00); // set horizontal addressing mode ~ 0d
// 	
	// write OLED buffer to OLED Memory
	OLED_goto(0,0); // todo: start writing in top left corner (maybe not further needed)
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    1432:	20 91 10 01 	lds	r18, 0x0110
    1436:	30 91 11 01 	lds	r19, 0x0111
    143a:	82 17       	cp	r24, r18
    143c:	93 07       	cpc	r25, r19
    143e:	60 f3       	brcs	.-40     	; 0x1418 <OLED_updateScreen+0x1a>
    1440:	08 95       	ret

00001442 <OLED_bufferGoto>:
    1442:	96 95       	lsr	r25
}

void OLED_bufferGoto(int row, int column)
{
	// change pointer in OLED SRAM buffer
	oled_buffer_position = oled_buffer + (row * 0x80) + column;
    1444:	98 2f       	mov	r25, r24
    1446:	88 27       	eor	r24, r24
    1448:	97 95       	ror	r25
    144a:	87 95       	ror	r24
    144c:	68 0f       	add	r22, r24
    144e:	79 1f       	adc	r23, r25
    1450:	80 91 12 01 	lds	r24, 0x0112
    1454:	90 91 13 01 	lds	r25, 0x0113
    1458:	68 0f       	add	r22, r24
    145a:	79 1f       	adc	r23, r25
    145c:	70 93 0f 01 	sts	0x010F, r23
    1460:	60 93 0e 01 	sts	0x010E, r22
    1464:	08 95       	ret

00001466 <OLED_printCharacter>:
// SPACE (' '). As SPACE corresponds to position 32 in the ASCII table, this 
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
	character = character-32; // map character to font table
    146e:	80 52       	subi	r24, 0x20	; 32
    1470:	08 2f       	mov	r16, r24
    1472:	10 e0       	ldi	r17, 0x00	; 0
    1474:	00 0f       	add	r16, r16
    1476:	11 1f       	adc	r17, r17
    1478:	00 0f       	add	r16, r16
    147a:	11 1f       	adc	r17, r17
    147c:	00 0f       	add	r16, r16
    147e:	11 1f       	adc	r17, r17
    1480:	c0 e0       	ldi	r28, 0x00	; 0
    1482:	d0 e0       	ldi	r29, 0x00	; 0
    1484:	00 59       	subi	r16, 0x90	; 144
    1486:	1f 4f       	sbci	r17, 0xFF	; 255
    1488:	f8 01       	movw	r30, r16
    148a:	ec 0f       	add	r30, r28
    148c:	fd 1f       	adc	r31, r29
	
	// print 8 columns into OLED Buffer in SRAM
	for(uint8_t i = 0; i < 8; i++)
	{
		saveToAddress(oled_buffer_position, pgm_read_byte(&font8[character][i]));
    148e:	64 91       	lpm	r22, Z
    1490:	70 e0       	ldi	r23, 0x00	; 0
    1492:	80 91 0e 01 	lds	r24, 0x010E
    1496:	90 91 0f 01 	lds	r25, 0x010F
    149a:	7d da       	rcall	.-2822   	; 0x996 <saveToAddress>
    149c:	80 91 0e 01 	lds	r24, 0x010E
		oled_buffer_position++;
    14a0:	90 91 0f 01 	lds	r25, 0x010F
    14a4:	01 96       	adiw	r24, 0x01	; 1
    14a6:	90 93 0f 01 	sts	0x010F, r25
    14aa:	80 93 0e 01 	sts	0x010E, r24
    14ae:	21 96       	adiw	r28, 0x01	; 1
    14b0:	c8 30       	cpi	r28, 0x08	; 8
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED Buffer in SRAM
	for(uint8_t i = 0; i < 8; i++)
    14b2:	d1 05       	cpc	r29, r1
    14b4:	49 f7       	brne	.-46     	; 0x1488 <OLED_printCharacter+0x22>
    14b6:	df 91       	pop	r29
	// print 8 columns into OLED RAM
// 	for(uint8_t i = 0; i < 8; i++)
// 	{
// 		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
// 	}
}
    14b8:	cf 91       	pop	r28
    14ba:	1f 91       	pop	r17
    14bc:	0f 91       	pop	r16
    14be:	08 95       	ret

000014c0 <OLED_printString>:
    14c0:	1f 93       	push	r17

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
    14c6:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
    14c8:	10 e0       	ldi	r17, 0x00	; 0
    14ca:	06 c0       	rjmp	.+12     	; 0x14d8 <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
    14cc:	fe 01       	movw	r30, r28
    14ce:	e8 0f       	add	r30, r24
    14d0:	f9 1f       	adc	r31, r25
    14d2:	80 81       	ld	r24, Z
    14d4:	c8 df       	rcall	.-112    	; 0x1466 <OLED_printCharacter>
    14d6:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
    14d8:	81 2f       	mov	r24, r17
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	fe 01       	movw	r30, r28
    14de:	01 90       	ld	r0, Z+
    14e0:	00 20       	and	r0, r0
    14e2:	e9 f7       	brne	.-6      	; 0x14de <OLED_printString+0x1e>
    14e4:	31 97       	sbiw	r30, 0x01	; 1
    14e6:	ec 1b       	sub	r30, r28
    14e8:	fd 0b       	sbc	r31, r29
    14ea:	8e 17       	cp	r24, r30
    14ec:	9f 07       	cpc	r25, r31
    14ee:	70 f3       	brcs	.-36     	; 0x14cc <OLED_printString+0xc>
    14f0:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	08 95       	ret

000014f8 <OLED_printArrow>:
    14f8:	68 e1       	ldi	r22, 0x18	; 24
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	// write arrow to oled sram buffer
	saveToAddress(oled_buffer_position, 0b00011000);
    14fa:	70 e0       	ldi	r23, 0x00	; 0
    14fc:	80 91 0e 01 	lds	r24, 0x010E
    1500:	90 91 0f 01 	lds	r25, 0x010F
    1504:	48 da       	rcall	.-2928   	; 0x996 <saveToAddress>
    1506:	80 91 0e 01 	lds	r24, 0x010E
	oled_buffer_position++;
    150a:	90 91 0f 01 	lds	r25, 0x010F
    150e:	01 96       	adiw	r24, 0x01	; 1
    1510:	90 93 0f 01 	sts	0x010F, r25
    1514:	80 93 0e 01 	sts	0x010E, r24
    1518:	68 e1       	ldi	r22, 0x18	; 24
	saveToAddress(oled_buffer_position, 0b00011000);
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	3c da       	rcall	.-2952   	; 0x996 <saveToAddress>
    151e:	80 91 0e 01 	lds	r24, 0x010E
	oled_buffer_position++;
    1522:	90 91 0f 01 	lds	r25, 0x010F
    1526:	01 96       	adiw	r24, 0x01	; 1
    1528:	90 93 0f 01 	sts	0x010F, r25
    152c:	80 93 0e 01 	sts	0x010E, r24
    1530:	6e e7       	ldi	r22, 0x7E	; 126
    1532:	70 e0       	ldi	r23, 0x00	; 0
	saveToAddress(oled_buffer_position, 0b01111110);
    1534:	30 da       	rcall	.-2976   	; 0x996 <saveToAddress>
    1536:	80 91 0e 01 	lds	r24, 0x010E
    153a:	90 91 0f 01 	lds	r25, 0x010F
	oled_buffer_position++;
    153e:	01 96       	adiw	r24, 0x01	; 1
    1540:	90 93 0f 01 	sts	0x010F, r25
    1544:	80 93 0e 01 	sts	0x010E, r24
    1548:	6c e3       	ldi	r22, 0x3C	; 60
    154a:	70 e0       	ldi	r23, 0x00	; 0
    154c:	24 da       	rcall	.-3000   	; 0x996 <saveToAddress>
	saveToAddress(oled_buffer_position, 0b00111100);
    154e:	80 91 0e 01 	lds	r24, 0x010E
    1552:	90 91 0f 01 	lds	r25, 0x010F
	oled_buffer_position++;
    1556:	01 96       	adiw	r24, 0x01	; 1
    1558:	90 93 0f 01 	sts	0x010F, r25
    155c:	80 93 0e 01 	sts	0x010E, r24
    1560:	68 e1       	ldi	r22, 0x18	; 24
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	18 da       	rcall	.-3024   	; 0x996 <saveToAddress>
    1566:	80 91 0e 01 	lds	r24, 0x010E
	saveToAddress(oled_buffer_position, 0b00011000);
    156a:	90 91 0f 01 	lds	r25, 0x010F
    156e:	01 96       	adiw	r24, 0x01	; 1
	oled_buffer_position++;
    1570:	90 93 0f 01 	sts	0x010F, r25
    1574:	80 93 0e 01 	sts	0x010E, r24
    1578:	08 95       	ret

0000157a <OLED_clearArrow>:
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	c1 e0       	ldi	r28, 0x01	; 1
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    1584:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_bufferGoto(count_row,0); // move to first column in row
    158a:	05 e0       	ldi	r16, 0x05	; 5
    158c:	60 e0       	ldi	r22, 0x00	; 0
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	58 df       	rcall	.-336    	; 0x1442 <OLED_bufferGoto>
    1592:	10 2f       	mov	r17, r16
    1594:	60 e0       	ldi	r22, 0x00	; 0

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < ARROW_WIDTH; count_column++)
		{
			saveToAddress(oled_buffer_position, 0x00);
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	80 91 0e 01 	lds	r24, 0x010E
    159c:	90 91 0f 01 	lds	r25, 0x010F
    15a0:	fa d9       	rcall	.-3084   	; 0x996 <saveToAddress>
    15a2:	80 91 0e 01 	lds	r24, 0x010E
			oled_buffer_position++;
    15a6:	90 91 0f 01 	lds	r25, 0x010F
    15aa:	01 96       	adiw	r24, 0x01	; 1
    15ac:	90 93 0f 01 	sts	0x010F, r25
    15b0:	80 93 0e 01 	sts	0x010E, r24
    15b4:	11 50       	subi	r17, 0x01	; 1
    15b6:	71 f7       	brne	.-36     	; 0x1594 <OLED_clearArrow+0x1a>
    15b8:	8c 2f       	mov	r24, r28
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_bufferGoto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < ARROW_WIDTH; count_column++)
    15ba:	9d 2f       	mov	r25, r29
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
    15bc:	21 96       	adiw	r28, 0x01	; 1
    15be:	c9 30       	cpi	r28, 0x09	; 9
    15c0:	d1 05       	cpc	r29, r1
    15c2:	21 f7       	brne	.-56     	; 0x158c <OLED_clearArrow+0x12>
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
// 		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
// 		{
// 			OLED_writeByteToOLED(oled_data, 0x00);
// 		}
// 	}
}
    15c8:	1f 91       	pop	r17
    15ca:	0f 91       	pop	r16
    15cc:	08 95       	ret

000015ce <OLED_moveArrow>:
    15ce:	5f 92       	push	r5
    15d0:	6f 92       	push	r6
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    15d2:	7f 92       	push	r7
    15d4:	8f 92       	push	r8
    15d6:	9f 92       	push	r9
    15d8:	af 92       	push	r10
    15da:	bf 92       	push	r11
    15dc:	cf 92       	push	r12
    15de:	df 92       	push	r13
    15e0:	ef 92       	push	r14
    15e2:	ff 92       	push	r15
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	2a 97       	sbiw	r28, 0x0a	; 10
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
	// determine moving direction
	uint8_t move_up = 0;
	if(joy_counter == arrow_position)
    15fc:	89 2b       	or	r24, r25
    15fe:	41 f4       	brne	.+16     	; 0x1610 <OLED_moveArrow+0x42>
	{
		OLED_clearArrow(); // clear the arrow space
    1600:	bc df       	rcall	.-136    	; 0x157a <OLED_clearArrow>
    1602:	60 e0       	ldi	r22, 0x00	; 0
		//OLED_goto(joy_counter,0); // move cursor to specified row
		OLED_bufferGoto(joy_counter, 0);
    1604:	70 e0       	ldi	r23, 0x00	; 0
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	1b df       	rcall	.-458    	; 0x1442 <OLED_bufferGoto>
    160c:	75 df       	rcall	.-278    	; 0x14f8 <OLED_printArrow>
    160e:	59 c0       	rjmp	.+178    	; 0x16c2 <OLED_moveArrow+0xf4>
		OLED_printArrow(); // print arrow
    1610:	85 e0       	ldi	r24, 0x05	; 5
    1612:	fe 01       	movw	r30, r28
    1614:	36 96       	adiw	r30, 0x06	; 6
	}
	else
	{
		//printf("%#x %#x %#x %#x %#x \n", readFromAddress(0x1c00), readFromAddress(0x1c01), readFromAddress(0x1c02), readFromAddress(0x1c03), readFromAddress(0x1c04));
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
    1616:	df 01       	movw	r26, r30
    1618:	98 2f       	mov	r25, r24
    161a:	1d 92       	st	X+, r1
    161c:	9a 95       	dec	r25
    161e:	e9 f7       	brne	.-6      	; 0x161a <OLED_moveArrow+0x4c>
    1620:	35 97       	sbiw	r30, 0x05	; 5
    1622:	df 01       	movw	r26, r30
    1624:	1d 92       	st	X+, r1
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
    1626:	8a 95       	dec	r24
    1628:	e9 f7       	brne	.-6      	; 0x1624 <OLED_moveArrow+0x56>
    162a:	c1 2c       	mov	r12, r1
    162c:	d1 2c       	mov	r13, r1
    162e:	61 2c       	mov	r6, r1
    1630:	71 2c       	mov	r7, r1
    1632:	3f c0       	rjmp	.+126    	; 0x16b2 <OLED_moveArrow+0xe4>
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    1634:	9a 2c       	mov	r9, r10
    1636:	8b 2c       	mov	r8, r11
    1638:	b8 01       	movw	r22, r16
		for(uint8_t i = 0; i < 8; i++)
		{
			
			for(uint8_t j = 0; j < ARROW_WIDTH; j++)
			{
				OLED_bufferGoto(i, j);
    163a:	8a 2d       	mov	r24, r10
    163c:	9b 2d       	mov	r25, r11
    163e:	01 df       	rcall	.-510    	; 0x1442 <OLED_bufferGoto>
    1640:	80 91 0e 01 	lds	r24, 0x010E
    1644:	90 91 0f 01 	lds	r25, 0x010F
				buffer_current[j] = readFromAddress(oled_buffer_position); // save state of current row
    1648:	a3 d9       	rcall	.-3258   	; 0x990 <readFromAddress>
    164a:	f7 01       	movw	r30, r14
    164c:	81 93       	st	Z+, r24
    164e:	7f 01       	movw	r14, r30
    1650:	0f 5f       	subi	r16, 0xFF	; 255
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
    1654:	05 30       	cpi	r16, 0x05	; 5
    1656:	11 05       	cpc	r17, r1
    1658:	69 f7       	brne	.-38     	; 0x1634 <OLED_moveArrow+0x66>
    165a:	ce 01       	movw	r24, r28
    165c:	06 96       	adiw	r24, 0x06	; 6
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
		for(uint8_t i = 0; i < 8; i++)
		{
			
			for(uint8_t j = 0; j < ARROW_WIDTH; j++)
    165e:	7c 01       	movw	r14, r24
    1660:	de 01       	movw	r26, r28
    1662:	11 96       	adiw	r26, 0x01	; 1
    1664:	5d 01       	movw	r10, r26
    1666:	06 2d       	mov	r16, r6
    1668:	17 2d       	mov	r17, r7
    166a:	b8 01       	movw	r22, r16
    166c:	89 2d       	mov	r24, r9
    166e:	98 2d       	mov	r25, r8
    1670:	e8 de       	rcall	.-560    	; 0x1442 <OLED_bufferGoto>
    1672:	f5 01       	movw	r30, r10
				buffer_current[j] = readFromAddress(oled_buffer_position); // save state of current row
			}
			
			for(uint8_t k = 0; k < ARROW_WIDTH; k++)
			{				
				OLED_bufferGoto(i, k);
    1674:	51 90       	ld	r5, Z+
    1676:	5f 01       	movw	r10, r30
    1678:	d7 01       	movw	r26, r14
    167a:	6c 91       	ld	r22, X
    167c:	b0 e8       	ldi	r27, 0x80	; 128
				saveToAddress(oled_buffer_position, buffer_current[k]>>1 | buffer_dummy[k]<<7); // move current row 1 down + combine with lowest from above
    167e:	6b 9f       	mul	r22, r27
    1680:	b0 01       	movw	r22, r0
    1682:	11 24       	eor	r1, r1
    1684:	85 2d       	mov	r24, r5
    1686:	86 95       	lsr	r24
    1688:	68 2b       	or	r22, r24
    168a:	80 91 0e 01 	lds	r24, 0x010E
    168e:	90 91 0f 01 	lds	r25, 0x010F
    1692:	81 d9       	rcall	.-3326   	; 0x996 <saveToAddress>
    1694:	f7 01       	movw	r30, r14
    1696:	51 92       	st	Z+, r5
    1698:	7f 01       	movw	r14, r30
    169a:	0f 5f       	subi	r16, 0xFF	; 255
    169c:	1f 4f       	sbci	r17, 0xFF	; 255
    169e:	05 30       	cpi	r16, 0x05	; 5
    16a0:	11 05       	cpc	r17, r1
				buffer_dummy[k] = buffer_current[k]; // current row is reference for next row
    16a2:	19 f7       	brne	.-58     	; 0x166a <OLED_moveArrow+0x9c>
    16a4:	ff ef       	ldi	r31, 0xFF	; 255
    16a6:	cf 1a       	sub	r12, r31
    16a8:	df 0a       	sbc	r13, r31
    16aa:	88 e0       	ldi	r24, 0x08	; 8
			{
				OLED_bufferGoto(i, j);
				buffer_current[j] = readFromAddress(oled_buffer_position); // save state of current row
			}
			
			for(uint8_t k = 0; k < ARROW_WIDTH; k++)
    16ac:	c8 16       	cp	r12, r24
    16ae:	d1 04       	cpc	r13, r1
    16b0:	41 f0       	breq	.+16     	; 0x16c2 <OLED_moveArrow+0xf4>
    16b2:	de 01       	movw	r26, r28
    16b4:	11 96       	adiw	r26, 0x01	; 1
    16b6:	7d 01       	movw	r14, r26
	else
	{
		//printf("%#x %#x %#x %#x %#x \n", readFromAddress(0x1c00), readFromAddress(0x1c01), readFromAddress(0x1c02), readFromAddress(0x1c03), readFromAddress(0x1c04));
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
		for(uint8_t i = 0; i < 8; i++)
    16b8:	06 2d       	mov	r16, r6
    16ba:	17 2d       	mov	r17, r7
    16bc:	ac 2c       	mov	r10, r12
    16be:	bd 2c       	mov	r11, r13
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    16c0:	b9 cf       	rjmp	.-142    	; 0x1634 <OLED_moveArrow+0x66>
    16c2:	2a 96       	adiw	r28, 0x0a	; 10
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	f8 94       	cli
    16c8:	de bf       	out	0x3e, r29	; 62
		for(uint8_t i = 0; i < 8; i++)
		{
			
			for(uint8_t j = 0; j < ARROW_WIDTH; j++)
			{
				OLED_bufferGoto(i, j);
    16ca:	0f be       	out	0x3f, r0	; 63
    16cc:	cd bf       	out	0x3d, r28	; 61
    16ce:	df 91       	pop	r29
		}
	}
	
	
	
}
    16d0:	cf 91       	pop	r28
    16d2:	1f 91       	pop	r17
    16d4:	0f 91       	pop	r16
    16d6:	ff 90       	pop	r15
    16d8:	ef 90       	pop	r14
    16da:	df 90       	pop	r13
    16dc:	cf 90       	pop	r12
    16de:	bf 90       	pop	r11
    16e0:	af 90       	pop	r10
    16e2:	9f 90       	pop	r9
    16e4:	8f 90       	pop	r8
    16e6:	7f 90       	pop	r7
    16e8:	6f 90       	pop	r6
    16ea:	5f 90       	pop	r5
    16ec:	08 95       	ret

000016ee <OLED_setAnimationTick>:
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	90 93 7d 02 	sts	0x027D, r25
    16f6:	80 93 7c 02 	sts	0x027C, r24
    16fa:	08 95       	ret

000016fc <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    16fc:	10 92 80 02 	sts	0x0280, r1
	currentSliPosition.L_abs = 0;
    1700:	10 92 81 02 	sts	0x0281, r1
	currentSliPosition.R_per = 0;
    1704:	10 92 82 02 	sts	0x0282, r1
	currentSliPosition.L_per = 0;
    1708:	10 92 83 02 	sts	0x0283, r1
    170c:	08 95       	ret

0000170e <SPI_init>:

void SPI_init()
{
	//init external interrupt INT2 on falling edge
	#if defined(__AVR_ATmega162__)
		set_bit(GICR, INT2);
    170e:	8b b7       	in	r24, 0x3b	; 59
    1710:	80 62       	ori	r24, 0x20	; 32
    1712:	8b bf       	out	0x3b, r24	; 59
		clear_bit(EMCUCR, ISC2);
    1714:	86 b7       	in	r24, 0x36	; 54
    1716:	8e 7f       	andi	r24, 0xFE	; 254
    1718:	86 bf       	out	0x36, r24	; 54
		
		// Set _SS, MOSI and SCK output, all others input
		DDR_SPI |= (1<<SS_CAN_CONTROLLER_PIN_MODE) | (1<<MOSI_PIN) | (1<<SCK_PIN);
    171a:	87 b3       	in	r24, 0x17	; 23
    171c:	80 6b       	ori	r24, 0xB0	; 176
    171e:	87 bb       	out	0x17, r24	; 23
	#endif
	
	

	// Enable SPI, Master, set clock rate fck/4
	SPCR = (1<<SPE) | (1<<MSTR);
    1720:	80 e5       	ldi	r24, 0x50	; 80
    1722:	8d b9       	out	0x0d, r24	; 13
	
	// clock rate fck/2
	SPSR = (1<<SPI2X);
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	8e b9       	out	0x0e, r24	; 14

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORT_SPI, SS_CAN_CONTROLLER_PIN);
    1728:	c4 9a       	sbi	0x18, 4	; 24
    172a:	08 95       	ret

0000172c <SPI_send>:
}

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    172c:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    172e:	77 9b       	sbis	0x0e, 7	; 14
    1730:	fe cf       	rjmp	.-4      	; 0x172e <SPI_send+0x2>
}
    1732:	08 95       	ret

00001734 <SPI_receive>:

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    1734:	8f ef       	ldi	r24, 0xFF	; 255
    1736:	fa df       	rcall	.-12     	; 0x172c <SPI_send>
    1738:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    173a:	fe cf       	rjmp	.-4      	; 0x1738 <SPI_receive+0x4>
    173c:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    173e:	08 95       	ret

00001740 <SPI_activateSlave>:

	return data;
}
    1740:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    1742:	01 c0       	rjmp	.+2      	; 0x1746 <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    1744:	c4 98       	cbi	0x18, 4	; 24
    1746:	08 95       	ret

00001748 <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    1748:	81 11       	cpse	r24, r1
    174a:	01 c0       	rjmp	.+2      	; 0x174e <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    174c:	c4 9a       	sbi	0x18, 4	; 24
    174e:	08 95       	ret

00001750 <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1750:	5d 9b       	sbis	0x0b, 5	; 11
    1752:	fe cf       	rjmp	.-4      	; 0x1750 <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    1754:	8c b9       	out	0x0c, r24	; 12
    1756:	08 95       	ret

00001758 <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    1758:	5f 9b       	sbis	0x0b, 7	; 11
    175a:	fe cf       	rjmp	.-4      	; 0x1758 <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    175c:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
    175e:	08 95       	ret

00001760 <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    1760:	ef 92       	push	r14
    1762:	ff 92       	push	r15
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    1768:	bb 27       	eor	r27, r27
    176a:	a1 2f       	mov	r26, r17
    176c:	90 2f       	mov	r25, r16
    176e:	8f 2d       	mov	r24, r15
    1770:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    1772:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1774:	88 e1       	ldi	r24, 0x18	; 24
    1776:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    1778:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	#if defined(__AVR_ATmega162__)
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    177a:	8e e8       	ldi	r24, 0x8E	; 142
    177c:	80 bd       	out	0x20, r24	; 32
	
	#if defined(__AVR_ATmega2560__)
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	#endif
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    177e:	6c ea       	ldi	r22, 0xAC	; 172
    1780:	7b e0       	ldi	r23, 0x0B	; 11
    1782:	88 ea       	ldi	r24, 0xA8	; 168
    1784:	9b e0       	ldi	r25, 0x0B	; 11
    1786:	79 d1       	rcall	.+754    	; 0x1a7a <fdevopen>
    1788:	1f 91       	pop	r17
    178a:	0f 91       	pop	r16
    178c:	ff 90       	pop	r15
    178e:	ef 90       	pop	r14
    1790:	08 95       	ret

00001792 <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    1792:	9b 01       	movw	r18, r22
	
	switch(channel){
    1794:	82 30       	cpi	r24, 0x02	; 2
    1796:	69 f0       	breq	.+26     	; 0x17b2 <ADC_request+0x20>
    1798:	18 f4       	brcc	.+6      	; 0x17a0 <ADC_request+0xe>
    179a:	81 30       	cpi	r24, 0x01	; 1
    179c:	31 f0       	breq	.+12     	; 0x17aa <ADC_request+0x18>
    179e:	15 c0       	rjmp	.+42     	; 0x17ca <ADC_request+0x38>
    17a0:	83 30       	cpi	r24, 0x03	; 3
    17a2:	59 f0       	breq	.+22     	; 0x17ba <ADC_request+0x28>
    17a4:	84 30       	cpi	r24, 0x04	; 4
    17a6:	69 f0       	breq	.+26     	; 0x17c2 <ADC_request+0x30>
    17a8:	10 c0       	rjmp	.+32     	; 0x17ca <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    17aa:	64 e0       	ldi	r22, 0x04	; 4
    17ac:	c9 01       	movw	r24, r18
    17ae:	f3 c8       	rjmp	.-3610   	; 0x996 <saveToAddress>
    17b0:	08 95       	ret
			break;
    17b2:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    17b4:	c9 01       	movw	r24, r18
    17b6:	ef c8       	rjmp	.-3618   	; 0x996 <saveToAddress>
    17b8:	08 95       	ret
    17ba:	66 e0       	ldi	r22, 0x06	; 6
			break;
    17bc:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    17be:	eb c8       	rjmp	.-3626   	; 0x996 <saveToAddress>
    17c0:	08 95       	ret
    17c2:	67 e0       	ldi	r22, 0x07	; 7
    17c4:	c9 01       	movw	r24, r18
			break;
    17c6:	e7 c8       	rjmp	.-3634   	; 0x996 <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    17c8:	08 95       	ret
    17ca:	84 e4       	ldi	r24, 0x44	; 68
    17cc:	92 e0       	ldi	r25, 0x02	; 2
    17ce:	9f 93       	push	r25
			break;
    17d0:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    17d2:	9d d1       	rcall	.+826    	; 0x1b0e <printf>
    17d4:	0f 90       	pop	r0
    17d6:	0f 90       	pop	r0
    17d8:	08 95       	ret

000017da <ADC_read>:
    17da:	da c8       	rjmp	.-3660   	; 0x990 <readFromAddress>
    17dc:	08 95       	ret

000017de <__divmodhi4>:
			break;
    17de:	97 fb       	bst	r25, 7
    17e0:	07 2e       	mov	r0, r23
    17e2:	16 f4       	brtc	.+4      	; 0x17e8 <__divmodhi4+0xa>
    17e4:	00 94       	com	r0
    17e6:	06 d0       	rcall	.+12     	; 0x17f4 <__divmodhi4_neg1>
    17e8:	77 fd       	sbrc	r23, 7
    17ea:	08 d0       	rcall	.+16     	; 0x17fc <__divmodhi4_neg2>
    17ec:	0b d0       	rcall	.+22     	; 0x1804 <__udivmodhi4>
    17ee:	07 fc       	sbrc	r0, 7
    17f0:	05 d0       	rcall	.+10     	; 0x17fc <__divmodhi4_neg2>
    17f2:	3e f4       	brtc	.+14     	; 0x1802 <__divmodhi4_exit>

000017f4 <__divmodhi4_neg1>:
    17f4:	90 95       	com	r25
    17f6:	81 95       	neg	r24
    17f8:	9f 4f       	sbci	r25, 0xFF	; 255
    17fa:	08 95       	ret

000017fc <__divmodhi4_neg2>:
    17fc:	70 95       	com	r23
    17fe:	61 95       	neg	r22
    1800:	7f 4f       	sbci	r23, 0xFF	; 255

00001802 <__divmodhi4_exit>:
    1802:	08 95       	ret

00001804 <__udivmodhi4>:
    1804:	aa 1b       	sub	r26, r26
    1806:	bb 1b       	sub	r27, r27
    1808:	51 e1       	ldi	r21, 0x11	; 17
    180a:	07 c0       	rjmp	.+14     	; 0x181a <__udivmodhi4_ep>

0000180c <__udivmodhi4_loop>:
    180c:	aa 1f       	adc	r26, r26
    180e:	bb 1f       	adc	r27, r27
    1810:	a6 17       	cp	r26, r22
    1812:	b7 07       	cpc	r27, r23
    1814:	10 f0       	brcs	.+4      	; 0x181a <__udivmodhi4_ep>
    1816:	a6 1b       	sub	r26, r22
    1818:	b7 0b       	sbc	r27, r23

0000181a <__udivmodhi4_ep>:
    181a:	88 1f       	adc	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	5a 95       	dec	r21
    1820:	a9 f7       	brne	.-22     	; 0x180c <__udivmodhi4_loop>
    1822:	80 95       	com	r24
    1824:	90 95       	com	r25
    1826:	bc 01       	movw	r22, r24
    1828:	cd 01       	movw	r24, r26
    182a:	08 95       	ret

0000182c <malloc>:
    182c:	cf 93       	push	r28
    182e:	df 93       	push	r29
    1830:	82 30       	cpi	r24, 0x02	; 2
    1832:	91 05       	cpc	r25, r1
    1834:	10 f4       	brcc	.+4      	; 0x183a <malloc+0xe>
    1836:	82 e0       	ldi	r24, 0x02	; 2
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	e0 91 86 02 	lds	r30, 0x0286
    183e:	f0 91 87 02 	lds	r31, 0x0287
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	a0 e0       	ldi	r26, 0x00	; 0
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	30 97       	sbiw	r30, 0x00	; 0
    184c:	39 f1       	breq	.+78     	; 0x189c <malloc+0x70>
    184e:	40 81       	ld	r20, Z
    1850:	51 81       	ldd	r21, Z+1	; 0x01
    1852:	48 17       	cp	r20, r24
    1854:	59 07       	cpc	r21, r25
    1856:	b8 f0       	brcs	.+46     	; 0x1886 <malloc+0x5a>
    1858:	48 17       	cp	r20, r24
    185a:	59 07       	cpc	r21, r25
    185c:	71 f4       	brne	.+28     	; 0x187a <malloc+0x4e>
    185e:	82 81       	ldd	r24, Z+2	; 0x02
    1860:	93 81       	ldd	r25, Z+3	; 0x03
    1862:	10 97       	sbiw	r26, 0x00	; 0
    1864:	29 f0       	breq	.+10     	; 0x1870 <malloc+0x44>
    1866:	13 96       	adiw	r26, 0x03	; 3
    1868:	9c 93       	st	X, r25
    186a:	8e 93       	st	-X, r24
    186c:	12 97       	sbiw	r26, 0x02	; 2
    186e:	2c c0       	rjmp	.+88     	; 0x18c8 <malloc+0x9c>
    1870:	90 93 87 02 	sts	0x0287, r25
    1874:	80 93 86 02 	sts	0x0286, r24
    1878:	27 c0       	rjmp	.+78     	; 0x18c8 <malloc+0x9c>
    187a:	21 15       	cp	r18, r1
    187c:	31 05       	cpc	r19, r1
    187e:	31 f0       	breq	.+12     	; 0x188c <malloc+0x60>
    1880:	42 17       	cp	r20, r18
    1882:	53 07       	cpc	r21, r19
    1884:	18 f0       	brcs	.+6      	; 0x188c <malloc+0x60>
    1886:	a9 01       	movw	r20, r18
    1888:	db 01       	movw	r26, r22
    188a:	01 c0       	rjmp	.+2      	; 0x188e <malloc+0x62>
    188c:	ef 01       	movw	r28, r30
    188e:	9a 01       	movw	r18, r20
    1890:	bd 01       	movw	r22, r26
    1892:	df 01       	movw	r26, r30
    1894:	02 80       	ldd	r0, Z+2	; 0x02
    1896:	f3 81       	ldd	r31, Z+3	; 0x03
    1898:	e0 2d       	mov	r30, r0
    189a:	d7 cf       	rjmp	.-82     	; 0x184a <malloc+0x1e>
    189c:	21 15       	cp	r18, r1
    189e:	31 05       	cpc	r19, r1
    18a0:	f9 f0       	breq	.+62     	; 0x18e0 <malloc+0xb4>
    18a2:	28 1b       	sub	r18, r24
    18a4:	39 0b       	sbc	r19, r25
    18a6:	24 30       	cpi	r18, 0x04	; 4
    18a8:	31 05       	cpc	r19, r1
    18aa:	80 f4       	brcc	.+32     	; 0x18cc <malloc+0xa0>
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	9b 81       	ldd	r25, Y+3	; 0x03
    18b0:	61 15       	cp	r22, r1
    18b2:	71 05       	cpc	r23, r1
    18b4:	21 f0       	breq	.+8      	; 0x18be <malloc+0x92>
    18b6:	fb 01       	movw	r30, r22
    18b8:	93 83       	std	Z+3, r25	; 0x03
    18ba:	82 83       	std	Z+2, r24	; 0x02
    18bc:	04 c0       	rjmp	.+8      	; 0x18c6 <malloc+0x9a>
    18be:	90 93 87 02 	sts	0x0287, r25
    18c2:	80 93 86 02 	sts	0x0286, r24
    18c6:	fe 01       	movw	r30, r28
    18c8:	32 96       	adiw	r30, 0x02	; 2
    18ca:	44 c0       	rjmp	.+136    	; 0x1954 <malloc+0x128>
    18cc:	fe 01       	movw	r30, r28
    18ce:	e2 0f       	add	r30, r18
    18d0:	f3 1f       	adc	r31, r19
    18d2:	81 93       	st	Z+, r24
    18d4:	91 93       	st	Z+, r25
    18d6:	22 50       	subi	r18, 0x02	; 2
    18d8:	31 09       	sbc	r19, r1
    18da:	39 83       	std	Y+1, r19	; 0x01
    18dc:	28 83       	st	Y, r18
    18de:	3a c0       	rjmp	.+116    	; 0x1954 <malloc+0x128>
    18e0:	20 91 84 02 	lds	r18, 0x0284
    18e4:	30 91 85 02 	lds	r19, 0x0285
    18e8:	23 2b       	or	r18, r19
    18ea:	41 f4       	brne	.+16     	; 0x18fc <malloc+0xd0>
    18ec:	20 91 02 01 	lds	r18, 0x0102
    18f0:	30 91 03 01 	lds	r19, 0x0103
    18f4:	30 93 85 02 	sts	0x0285, r19
    18f8:	20 93 84 02 	sts	0x0284, r18
    18fc:	20 91 00 01 	lds	r18, 0x0100
    1900:	30 91 01 01 	lds	r19, 0x0101
    1904:	21 15       	cp	r18, r1
    1906:	31 05       	cpc	r19, r1
    1908:	41 f4       	brne	.+16     	; 0x191a <malloc+0xee>
    190a:	2d b7       	in	r18, 0x3d	; 61
    190c:	3e b7       	in	r19, 0x3e	; 62
    190e:	40 91 04 01 	lds	r20, 0x0104
    1912:	50 91 05 01 	lds	r21, 0x0105
    1916:	24 1b       	sub	r18, r20
    1918:	35 0b       	sbc	r19, r21
    191a:	e0 91 84 02 	lds	r30, 0x0284
    191e:	f0 91 85 02 	lds	r31, 0x0285
    1922:	e2 17       	cp	r30, r18
    1924:	f3 07       	cpc	r31, r19
    1926:	a0 f4       	brcc	.+40     	; 0x1950 <malloc+0x124>
    1928:	2e 1b       	sub	r18, r30
    192a:	3f 0b       	sbc	r19, r31
    192c:	28 17       	cp	r18, r24
    192e:	39 07       	cpc	r19, r25
    1930:	78 f0       	brcs	.+30     	; 0x1950 <malloc+0x124>
    1932:	ac 01       	movw	r20, r24
    1934:	4e 5f       	subi	r20, 0xFE	; 254
    1936:	5f 4f       	sbci	r21, 0xFF	; 255
    1938:	24 17       	cp	r18, r20
    193a:	35 07       	cpc	r19, r21
    193c:	48 f0       	brcs	.+18     	; 0x1950 <malloc+0x124>
    193e:	4e 0f       	add	r20, r30
    1940:	5f 1f       	adc	r21, r31
    1942:	50 93 85 02 	sts	0x0285, r21
    1946:	40 93 84 02 	sts	0x0284, r20
    194a:	81 93       	st	Z+, r24
    194c:	91 93       	st	Z+, r25
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <malloc+0x128>
    1950:	e0 e0       	ldi	r30, 0x00	; 0
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	cf 01       	movw	r24, r30
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	08 95       	ret

0000195c <free>:
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	00 97       	sbiw	r24, 0x00	; 0
    1962:	09 f4       	brne	.+2      	; 0x1966 <free+0xa>
    1964:	87 c0       	rjmp	.+270    	; 0x1a74 <free+0x118>
    1966:	fc 01       	movw	r30, r24
    1968:	32 97       	sbiw	r30, 0x02	; 2
    196a:	13 82       	std	Z+3, r1	; 0x03
    196c:	12 82       	std	Z+2, r1	; 0x02
    196e:	c0 91 86 02 	lds	r28, 0x0286
    1972:	d0 91 87 02 	lds	r29, 0x0287
    1976:	20 97       	sbiw	r28, 0x00	; 0
    1978:	81 f4       	brne	.+32     	; 0x199a <free+0x3e>
    197a:	20 81       	ld	r18, Z
    197c:	31 81       	ldd	r19, Z+1	; 0x01
    197e:	28 0f       	add	r18, r24
    1980:	39 1f       	adc	r19, r25
    1982:	80 91 84 02 	lds	r24, 0x0284
    1986:	90 91 85 02 	lds	r25, 0x0285
    198a:	82 17       	cp	r24, r18
    198c:	93 07       	cpc	r25, r19
    198e:	79 f5       	brne	.+94     	; 0x19ee <free+0x92>
    1990:	f0 93 85 02 	sts	0x0285, r31
    1994:	e0 93 84 02 	sts	0x0284, r30
    1998:	6d c0       	rjmp	.+218    	; 0x1a74 <free+0x118>
    199a:	de 01       	movw	r26, r28
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	ae 17       	cp	r26, r30
    19a2:	bf 07       	cpc	r27, r31
    19a4:	50 f4       	brcc	.+20     	; 0x19ba <free+0x5e>
    19a6:	12 96       	adiw	r26, 0x02	; 2
    19a8:	4d 91       	ld	r20, X+
    19aa:	5c 91       	ld	r21, X
    19ac:	13 97       	sbiw	r26, 0x03	; 3
    19ae:	9d 01       	movw	r18, r26
    19b0:	41 15       	cp	r20, r1
    19b2:	51 05       	cpc	r21, r1
    19b4:	09 f1       	breq	.+66     	; 0x19f8 <free+0x9c>
    19b6:	da 01       	movw	r26, r20
    19b8:	f3 cf       	rjmp	.-26     	; 0x19a0 <free+0x44>
    19ba:	b3 83       	std	Z+3, r27	; 0x03
    19bc:	a2 83       	std	Z+2, r26	; 0x02
    19be:	40 81       	ld	r20, Z
    19c0:	51 81       	ldd	r21, Z+1	; 0x01
    19c2:	84 0f       	add	r24, r20
    19c4:	95 1f       	adc	r25, r21
    19c6:	8a 17       	cp	r24, r26
    19c8:	9b 07       	cpc	r25, r27
    19ca:	71 f4       	brne	.+28     	; 0x19e8 <free+0x8c>
    19cc:	8d 91       	ld	r24, X+
    19ce:	9c 91       	ld	r25, X
    19d0:	11 97       	sbiw	r26, 0x01	; 1
    19d2:	84 0f       	add	r24, r20
    19d4:	95 1f       	adc	r25, r21
    19d6:	02 96       	adiw	r24, 0x02	; 2
    19d8:	91 83       	std	Z+1, r25	; 0x01
    19da:	80 83       	st	Z, r24
    19dc:	12 96       	adiw	r26, 0x02	; 2
    19de:	8d 91       	ld	r24, X+
    19e0:	9c 91       	ld	r25, X
    19e2:	13 97       	sbiw	r26, 0x03	; 3
    19e4:	93 83       	std	Z+3, r25	; 0x03
    19e6:	82 83       	std	Z+2, r24	; 0x02
    19e8:	21 15       	cp	r18, r1
    19ea:	31 05       	cpc	r19, r1
    19ec:	29 f4       	brne	.+10     	; 0x19f8 <free+0x9c>
    19ee:	f0 93 87 02 	sts	0x0287, r31
    19f2:	e0 93 86 02 	sts	0x0286, r30
    19f6:	3e c0       	rjmp	.+124    	; 0x1a74 <free+0x118>
    19f8:	d9 01       	movw	r26, r18
    19fa:	13 96       	adiw	r26, 0x03	; 3
    19fc:	fc 93       	st	X, r31
    19fe:	ee 93       	st	-X, r30
    1a00:	12 97       	sbiw	r26, 0x02	; 2
    1a02:	4d 91       	ld	r20, X+
    1a04:	5d 91       	ld	r21, X+
    1a06:	a4 0f       	add	r26, r20
    1a08:	b5 1f       	adc	r27, r21
    1a0a:	ea 17       	cp	r30, r26
    1a0c:	fb 07       	cpc	r31, r27
    1a0e:	79 f4       	brne	.+30     	; 0x1a2e <free+0xd2>
    1a10:	80 81       	ld	r24, Z
    1a12:	91 81       	ldd	r25, Z+1	; 0x01
    1a14:	84 0f       	add	r24, r20
    1a16:	95 1f       	adc	r25, r21
    1a18:	02 96       	adiw	r24, 0x02	; 2
    1a1a:	d9 01       	movw	r26, r18
    1a1c:	11 96       	adiw	r26, 0x01	; 1
    1a1e:	9c 93       	st	X, r25
    1a20:	8e 93       	st	-X, r24
    1a22:	82 81       	ldd	r24, Z+2	; 0x02
    1a24:	93 81       	ldd	r25, Z+3	; 0x03
    1a26:	13 96       	adiw	r26, 0x03	; 3
    1a28:	9c 93       	st	X, r25
    1a2a:	8e 93       	st	-X, r24
    1a2c:	12 97       	sbiw	r26, 0x02	; 2
    1a2e:	e0 e0       	ldi	r30, 0x00	; 0
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	9b 81       	ldd	r25, Y+3	; 0x03
    1a36:	00 97       	sbiw	r24, 0x00	; 0
    1a38:	19 f0       	breq	.+6      	; 0x1a40 <free+0xe4>
    1a3a:	fe 01       	movw	r30, r28
    1a3c:	ec 01       	movw	r28, r24
    1a3e:	f9 cf       	rjmp	.-14     	; 0x1a32 <free+0xd6>
    1a40:	ce 01       	movw	r24, r28
    1a42:	02 96       	adiw	r24, 0x02	; 2
    1a44:	28 81       	ld	r18, Y
    1a46:	39 81       	ldd	r19, Y+1	; 0x01
    1a48:	82 0f       	add	r24, r18
    1a4a:	93 1f       	adc	r25, r19
    1a4c:	20 91 84 02 	lds	r18, 0x0284
    1a50:	30 91 85 02 	lds	r19, 0x0285
    1a54:	28 17       	cp	r18, r24
    1a56:	39 07       	cpc	r19, r25
    1a58:	69 f4       	brne	.+26     	; 0x1a74 <free+0x118>
    1a5a:	30 97       	sbiw	r30, 0x00	; 0
    1a5c:	29 f4       	brne	.+10     	; 0x1a68 <free+0x10c>
    1a5e:	10 92 87 02 	sts	0x0287, r1
    1a62:	10 92 86 02 	sts	0x0286, r1
    1a66:	02 c0       	rjmp	.+4      	; 0x1a6c <free+0x110>
    1a68:	13 82       	std	Z+3, r1	; 0x03
    1a6a:	12 82       	std	Z+2, r1	; 0x02
    1a6c:	d0 93 85 02 	sts	0x0285, r29
    1a70:	c0 93 84 02 	sts	0x0284, r28
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	08 95       	ret

00001a7a <fdevopen>:
    1a7a:	0f 93       	push	r16
    1a7c:	1f 93       	push	r17
    1a7e:	cf 93       	push	r28
    1a80:	df 93       	push	r29
    1a82:	ec 01       	movw	r28, r24
    1a84:	8b 01       	movw	r16, r22
    1a86:	00 97       	sbiw	r24, 0x00	; 0
    1a88:	31 f4       	brne	.+12     	; 0x1a96 <fdevopen+0x1c>
    1a8a:	61 15       	cp	r22, r1
    1a8c:	71 05       	cpc	r23, r1
    1a8e:	19 f4       	brne	.+6      	; 0x1a96 <fdevopen+0x1c>
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	37 c0       	rjmp	.+110    	; 0x1b04 <fdevopen+0x8a>
    1a96:	6e e0       	ldi	r22, 0x0E	; 14
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	3d d2       	rcall	.+1146   	; 0x1f1a <calloc>
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	a9 f3       	breq	.-22     	; 0x1a90 <fdevopen+0x16>
    1aa6:	80 e8       	ldi	r24, 0x80	; 128
    1aa8:	83 83       	std	Z+3, r24	; 0x03
    1aaa:	01 15       	cp	r16, r1
    1aac:	11 05       	cpc	r17, r1
    1aae:	71 f0       	breq	.+28     	; 0x1acc <fdevopen+0x52>
    1ab0:	13 87       	std	Z+11, r17	; 0x0b
    1ab2:	02 87       	std	Z+10, r16	; 0x0a
    1ab4:	81 e8       	ldi	r24, 0x81	; 129
    1ab6:	83 83       	std	Z+3, r24	; 0x03
    1ab8:	80 91 88 02 	lds	r24, 0x0288
    1abc:	90 91 89 02 	lds	r25, 0x0289
    1ac0:	89 2b       	or	r24, r25
    1ac2:	21 f4       	brne	.+8      	; 0x1acc <fdevopen+0x52>
    1ac4:	f0 93 89 02 	sts	0x0289, r31
    1ac8:	e0 93 88 02 	sts	0x0288, r30
    1acc:	20 97       	sbiw	r28, 0x00	; 0
    1ace:	c9 f0       	breq	.+50     	; 0x1b02 <fdevopen+0x88>
    1ad0:	d1 87       	std	Z+9, r29	; 0x09
    1ad2:	c0 87       	std	Z+8, r28	; 0x08
    1ad4:	83 81       	ldd	r24, Z+3	; 0x03
    1ad6:	82 60       	ori	r24, 0x02	; 2
    1ad8:	83 83       	std	Z+3, r24	; 0x03
    1ada:	80 91 8a 02 	lds	r24, 0x028A
    1ade:	90 91 8b 02 	lds	r25, 0x028B
    1ae2:	89 2b       	or	r24, r25
    1ae4:	71 f4       	brne	.+28     	; 0x1b02 <fdevopen+0x88>
    1ae6:	f0 93 8b 02 	sts	0x028B, r31
    1aea:	e0 93 8a 02 	sts	0x028A, r30
    1aee:	80 91 8c 02 	lds	r24, 0x028C
    1af2:	90 91 8d 02 	lds	r25, 0x028D
    1af6:	89 2b       	or	r24, r25
    1af8:	21 f4       	brne	.+8      	; 0x1b02 <fdevopen+0x88>
    1afa:	f0 93 8d 02 	sts	0x028D, r31
    1afe:	e0 93 8c 02 	sts	0x028C, r30
    1b02:	cf 01       	movw	r24, r30
    1b04:	df 91       	pop	r29
    1b06:	cf 91       	pop	r28
    1b08:	1f 91       	pop	r17
    1b0a:	0f 91       	pop	r16
    1b0c:	08 95       	ret

00001b0e <printf>:
    1b0e:	a0 e0       	ldi	r26, 0x00	; 0
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	ec e8       	ldi	r30, 0x8C	; 140
    1b14:	fd e0       	ldi	r31, 0x0D	; 13
    1b16:	d8 c2       	rjmp	.+1456   	; 0x20c8 <__prologue_saves__+0x20>
    1b18:	fe 01       	movw	r30, r28
    1b1a:	35 96       	adiw	r30, 0x05	; 5
    1b1c:	61 91       	ld	r22, Z+
    1b1e:	71 91       	ld	r23, Z+
    1b20:	af 01       	movw	r20, r30
    1b22:	80 91 8a 02 	lds	r24, 0x028A
    1b26:	90 91 8b 02 	lds	r25, 0x028B
    1b2a:	34 d0       	rcall	.+104    	; 0x1b94 <vfprintf>
    1b2c:	e2 e0       	ldi	r30, 0x02	; 2
    1b2e:	e8 c2       	rjmp	.+1488   	; 0x2100 <__epilogue_restores__+0x20>

00001b30 <putchar>:
    1b30:	60 91 8a 02 	lds	r22, 0x028A
    1b34:	70 91 8b 02 	lds	r23, 0x028B
    1b38:	27 c2       	rjmp	.+1102   	; 0x1f88 <fputc>

00001b3a <puts>:
    1b3a:	0f 93       	push	r16
    1b3c:	1f 93       	push	r17
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
    1b42:	e0 91 8a 02 	lds	r30, 0x028A
    1b46:	f0 91 8b 02 	lds	r31, 0x028B
    1b4a:	23 81       	ldd	r18, Z+3	; 0x03
    1b4c:	21 ff       	sbrs	r18, 1
    1b4e:	1b c0       	rjmp	.+54     	; 0x1b86 <puts+0x4c>
    1b50:	ec 01       	movw	r28, r24
    1b52:	00 e0       	ldi	r16, 0x00	; 0
    1b54:	10 e0       	ldi	r17, 0x00	; 0
    1b56:	89 91       	ld	r24, Y+
    1b58:	60 91 8a 02 	lds	r22, 0x028A
    1b5c:	70 91 8b 02 	lds	r23, 0x028B
    1b60:	db 01       	movw	r26, r22
    1b62:	18 96       	adiw	r26, 0x08	; 8
    1b64:	ed 91       	ld	r30, X+
    1b66:	fc 91       	ld	r31, X
    1b68:	19 97       	sbiw	r26, 0x09	; 9
    1b6a:	88 23       	and	r24, r24
    1b6c:	31 f0       	breq	.+12     	; 0x1b7a <puts+0x40>
    1b6e:	09 95       	icall
    1b70:	89 2b       	or	r24, r25
    1b72:	89 f3       	breq	.-30     	; 0x1b56 <puts+0x1c>
    1b74:	0f ef       	ldi	r16, 0xFF	; 255
    1b76:	1f ef       	ldi	r17, 0xFF	; 255
    1b78:	ee cf       	rjmp	.-36     	; 0x1b56 <puts+0x1c>
    1b7a:	8a e0       	ldi	r24, 0x0A	; 10
    1b7c:	09 95       	icall
    1b7e:	89 2b       	or	r24, r25
    1b80:	11 f4       	brne	.+4      	; 0x1b86 <puts+0x4c>
    1b82:	c8 01       	movw	r24, r16
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <puts+0x50>
    1b86:	8f ef       	ldi	r24, 0xFF	; 255
    1b88:	9f ef       	ldi	r25, 0xFF	; 255
    1b8a:	df 91       	pop	r29
    1b8c:	cf 91       	pop	r28
    1b8e:	1f 91       	pop	r17
    1b90:	0f 91       	pop	r16
    1b92:	08 95       	ret

00001b94 <vfprintf>:
    1b94:	ac e0       	ldi	r26, 0x0C	; 12
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	ef ec       	ldi	r30, 0xCF	; 207
    1b9a:	fd e0       	ldi	r31, 0x0D	; 13
    1b9c:	85 c2       	rjmp	.+1290   	; 0x20a8 <__prologue_saves__>
    1b9e:	7c 01       	movw	r14, r24
    1ba0:	6b 01       	movw	r12, r22
    1ba2:	8a 01       	movw	r16, r20
    1ba4:	fc 01       	movw	r30, r24
    1ba6:	17 82       	std	Z+7, r1	; 0x07
    1ba8:	16 82       	std	Z+6, r1	; 0x06
    1baa:	83 81       	ldd	r24, Z+3	; 0x03
    1bac:	81 ff       	sbrs	r24, 1
    1bae:	b0 c1       	rjmp	.+864    	; 0x1f10 <vfprintf+0x37c>
    1bb0:	ce 01       	movw	r24, r28
    1bb2:	01 96       	adiw	r24, 0x01	; 1
    1bb4:	4c 01       	movw	r8, r24
    1bb6:	f7 01       	movw	r30, r14
    1bb8:	93 81       	ldd	r25, Z+3	; 0x03
    1bba:	f6 01       	movw	r30, r12
    1bbc:	93 fd       	sbrc	r25, 3
    1bbe:	85 91       	lpm	r24, Z+
    1bc0:	93 ff       	sbrs	r25, 3
    1bc2:	81 91       	ld	r24, Z+
    1bc4:	6f 01       	movw	r12, r30
    1bc6:	88 23       	and	r24, r24
    1bc8:	09 f4       	brne	.+2      	; 0x1bcc <vfprintf+0x38>
    1bca:	9e c1       	rjmp	.+828    	; 0x1f08 <vfprintf+0x374>
    1bcc:	85 32       	cpi	r24, 0x25	; 37
    1bce:	39 f4       	brne	.+14     	; 0x1bde <vfprintf+0x4a>
    1bd0:	93 fd       	sbrc	r25, 3
    1bd2:	85 91       	lpm	r24, Z+
    1bd4:	93 ff       	sbrs	r25, 3
    1bd6:	81 91       	ld	r24, Z+
    1bd8:	6f 01       	movw	r12, r30
    1bda:	85 32       	cpi	r24, 0x25	; 37
    1bdc:	21 f4       	brne	.+8      	; 0x1be6 <vfprintf+0x52>
    1bde:	b7 01       	movw	r22, r14
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	d2 d1       	rcall	.+932    	; 0x1f88 <fputc>
    1be4:	e8 cf       	rjmp	.-48     	; 0x1bb6 <vfprintf+0x22>
    1be6:	51 2c       	mov	r5, r1
    1be8:	31 2c       	mov	r3, r1
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	20 32       	cpi	r18, 0x20	; 32
    1bee:	a0 f4       	brcc	.+40     	; 0x1c18 <vfprintf+0x84>
    1bf0:	8b 32       	cpi	r24, 0x2B	; 43
    1bf2:	69 f0       	breq	.+26     	; 0x1c0e <vfprintf+0x7a>
    1bf4:	30 f4       	brcc	.+12     	; 0x1c02 <vfprintf+0x6e>
    1bf6:	80 32       	cpi	r24, 0x20	; 32
    1bf8:	59 f0       	breq	.+22     	; 0x1c10 <vfprintf+0x7c>
    1bfa:	83 32       	cpi	r24, 0x23	; 35
    1bfc:	69 f4       	brne	.+26     	; 0x1c18 <vfprintf+0x84>
    1bfe:	20 61       	ori	r18, 0x10	; 16
    1c00:	2c c0       	rjmp	.+88     	; 0x1c5a <vfprintf+0xc6>
    1c02:	8d 32       	cpi	r24, 0x2D	; 45
    1c04:	39 f0       	breq	.+14     	; 0x1c14 <vfprintf+0x80>
    1c06:	80 33       	cpi	r24, 0x30	; 48
    1c08:	39 f4       	brne	.+14     	; 0x1c18 <vfprintf+0x84>
    1c0a:	21 60       	ori	r18, 0x01	; 1
    1c0c:	26 c0       	rjmp	.+76     	; 0x1c5a <vfprintf+0xc6>
    1c0e:	22 60       	ori	r18, 0x02	; 2
    1c10:	24 60       	ori	r18, 0x04	; 4
    1c12:	23 c0       	rjmp	.+70     	; 0x1c5a <vfprintf+0xc6>
    1c14:	28 60       	ori	r18, 0x08	; 8
    1c16:	21 c0       	rjmp	.+66     	; 0x1c5a <vfprintf+0xc6>
    1c18:	27 fd       	sbrc	r18, 7
    1c1a:	27 c0       	rjmp	.+78     	; 0x1c6a <vfprintf+0xd6>
    1c1c:	30 ed       	ldi	r19, 0xD0	; 208
    1c1e:	38 0f       	add	r19, r24
    1c20:	3a 30       	cpi	r19, 0x0A	; 10
    1c22:	78 f4       	brcc	.+30     	; 0x1c42 <vfprintf+0xae>
    1c24:	26 ff       	sbrs	r18, 6
    1c26:	06 c0       	rjmp	.+12     	; 0x1c34 <vfprintf+0xa0>
    1c28:	fa e0       	ldi	r31, 0x0A	; 10
    1c2a:	5f 9e       	mul	r5, r31
    1c2c:	30 0d       	add	r19, r0
    1c2e:	11 24       	eor	r1, r1
    1c30:	53 2e       	mov	r5, r19
    1c32:	13 c0       	rjmp	.+38     	; 0x1c5a <vfprintf+0xc6>
    1c34:	8a e0       	ldi	r24, 0x0A	; 10
    1c36:	38 9e       	mul	r3, r24
    1c38:	30 0d       	add	r19, r0
    1c3a:	11 24       	eor	r1, r1
    1c3c:	33 2e       	mov	r3, r19
    1c3e:	20 62       	ori	r18, 0x20	; 32
    1c40:	0c c0       	rjmp	.+24     	; 0x1c5a <vfprintf+0xc6>
    1c42:	8e 32       	cpi	r24, 0x2E	; 46
    1c44:	21 f4       	brne	.+8      	; 0x1c4e <vfprintf+0xba>
    1c46:	26 fd       	sbrc	r18, 6
    1c48:	5f c1       	rjmp	.+702    	; 0x1f08 <vfprintf+0x374>
    1c4a:	20 64       	ori	r18, 0x40	; 64
    1c4c:	06 c0       	rjmp	.+12     	; 0x1c5a <vfprintf+0xc6>
    1c4e:	8c 36       	cpi	r24, 0x6C	; 108
    1c50:	11 f4       	brne	.+4      	; 0x1c56 <vfprintf+0xc2>
    1c52:	20 68       	ori	r18, 0x80	; 128
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <vfprintf+0xc6>
    1c56:	88 36       	cpi	r24, 0x68	; 104
    1c58:	41 f4       	brne	.+16     	; 0x1c6a <vfprintf+0xd6>
    1c5a:	f6 01       	movw	r30, r12
    1c5c:	93 fd       	sbrc	r25, 3
    1c5e:	85 91       	lpm	r24, Z+
    1c60:	93 ff       	sbrs	r25, 3
    1c62:	81 91       	ld	r24, Z+
    1c64:	6f 01       	movw	r12, r30
    1c66:	81 11       	cpse	r24, r1
    1c68:	c1 cf       	rjmp	.-126    	; 0x1bec <vfprintf+0x58>
    1c6a:	98 2f       	mov	r25, r24
    1c6c:	9f 7d       	andi	r25, 0xDF	; 223
    1c6e:	95 54       	subi	r25, 0x45	; 69
    1c70:	93 30       	cpi	r25, 0x03	; 3
    1c72:	28 f4       	brcc	.+10     	; 0x1c7e <vfprintf+0xea>
    1c74:	0c 5f       	subi	r16, 0xFC	; 252
    1c76:	1f 4f       	sbci	r17, 0xFF	; 255
    1c78:	ff e3       	ldi	r31, 0x3F	; 63
    1c7a:	f9 83       	std	Y+1, r31	; 0x01
    1c7c:	0d c0       	rjmp	.+26     	; 0x1c98 <vfprintf+0x104>
    1c7e:	83 36       	cpi	r24, 0x63	; 99
    1c80:	31 f0       	breq	.+12     	; 0x1c8e <vfprintf+0xfa>
    1c82:	83 37       	cpi	r24, 0x73	; 115
    1c84:	71 f0       	breq	.+28     	; 0x1ca2 <vfprintf+0x10e>
    1c86:	83 35       	cpi	r24, 0x53	; 83
    1c88:	09 f0       	breq	.+2      	; 0x1c8c <vfprintf+0xf8>
    1c8a:	57 c0       	rjmp	.+174    	; 0x1d3a <vfprintf+0x1a6>
    1c8c:	21 c0       	rjmp	.+66     	; 0x1cd0 <vfprintf+0x13c>
    1c8e:	f8 01       	movw	r30, r16
    1c90:	80 81       	ld	r24, Z
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	0e 5f       	subi	r16, 0xFE	; 254
    1c96:	1f 4f       	sbci	r17, 0xFF	; 255
    1c98:	44 24       	eor	r4, r4
    1c9a:	43 94       	inc	r4
    1c9c:	51 2c       	mov	r5, r1
    1c9e:	54 01       	movw	r10, r8
    1ca0:	14 c0       	rjmp	.+40     	; 0x1cca <vfprintf+0x136>
    1ca2:	38 01       	movw	r6, r16
    1ca4:	f2 e0       	ldi	r31, 0x02	; 2
    1ca6:	6f 0e       	add	r6, r31
    1ca8:	71 1c       	adc	r7, r1
    1caa:	f8 01       	movw	r30, r16
    1cac:	a0 80       	ld	r10, Z
    1cae:	b1 80       	ldd	r11, Z+1	; 0x01
    1cb0:	26 ff       	sbrs	r18, 6
    1cb2:	03 c0       	rjmp	.+6      	; 0x1cba <vfprintf+0x126>
    1cb4:	65 2d       	mov	r22, r5
    1cb6:	70 e0       	ldi	r23, 0x00	; 0
    1cb8:	02 c0       	rjmp	.+4      	; 0x1cbe <vfprintf+0x12a>
    1cba:	6f ef       	ldi	r22, 0xFF	; 255
    1cbc:	7f ef       	ldi	r23, 0xFF	; 255
    1cbe:	c5 01       	movw	r24, r10
    1cc0:	2c 87       	std	Y+12, r18	; 0x0c
    1cc2:	57 d1       	rcall	.+686    	; 0x1f72 <strnlen>
    1cc4:	2c 01       	movw	r4, r24
    1cc6:	83 01       	movw	r16, r6
    1cc8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cca:	2f 77       	andi	r18, 0x7F	; 127
    1ccc:	22 2e       	mov	r2, r18
    1cce:	16 c0       	rjmp	.+44     	; 0x1cfc <vfprintf+0x168>
    1cd0:	38 01       	movw	r6, r16
    1cd2:	f2 e0       	ldi	r31, 0x02	; 2
    1cd4:	6f 0e       	add	r6, r31
    1cd6:	71 1c       	adc	r7, r1
    1cd8:	f8 01       	movw	r30, r16
    1cda:	a0 80       	ld	r10, Z
    1cdc:	b1 80       	ldd	r11, Z+1	; 0x01
    1cde:	26 ff       	sbrs	r18, 6
    1ce0:	03 c0       	rjmp	.+6      	; 0x1ce8 <vfprintf+0x154>
    1ce2:	65 2d       	mov	r22, r5
    1ce4:	70 e0       	ldi	r23, 0x00	; 0
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <vfprintf+0x158>
    1ce8:	6f ef       	ldi	r22, 0xFF	; 255
    1cea:	7f ef       	ldi	r23, 0xFF	; 255
    1cec:	c5 01       	movw	r24, r10
    1cee:	2c 87       	std	Y+12, r18	; 0x0c
    1cf0:	2e d1       	rcall	.+604    	; 0x1f4e <strnlen_P>
    1cf2:	2c 01       	movw	r4, r24
    1cf4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cf6:	20 68       	ori	r18, 0x80	; 128
    1cf8:	22 2e       	mov	r2, r18
    1cfa:	83 01       	movw	r16, r6
    1cfc:	23 fc       	sbrc	r2, 3
    1cfe:	19 c0       	rjmp	.+50     	; 0x1d32 <vfprintf+0x19e>
    1d00:	83 2d       	mov	r24, r3
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	48 16       	cp	r4, r24
    1d06:	59 06       	cpc	r5, r25
    1d08:	a0 f4       	brcc	.+40     	; 0x1d32 <vfprintf+0x19e>
    1d0a:	b7 01       	movw	r22, r14
    1d0c:	80 e2       	ldi	r24, 0x20	; 32
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	3b d1       	rcall	.+630    	; 0x1f88 <fputc>
    1d12:	3a 94       	dec	r3
    1d14:	f5 cf       	rjmp	.-22     	; 0x1d00 <vfprintf+0x16c>
    1d16:	f5 01       	movw	r30, r10
    1d18:	27 fc       	sbrc	r2, 7
    1d1a:	85 91       	lpm	r24, Z+
    1d1c:	27 fe       	sbrs	r2, 7
    1d1e:	81 91       	ld	r24, Z+
    1d20:	5f 01       	movw	r10, r30
    1d22:	b7 01       	movw	r22, r14
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	30 d1       	rcall	.+608    	; 0x1f88 <fputc>
    1d28:	31 10       	cpse	r3, r1
    1d2a:	3a 94       	dec	r3
    1d2c:	f1 e0       	ldi	r31, 0x01	; 1
    1d2e:	4f 1a       	sub	r4, r31
    1d30:	51 08       	sbc	r5, r1
    1d32:	41 14       	cp	r4, r1
    1d34:	51 04       	cpc	r5, r1
    1d36:	79 f7       	brne	.-34     	; 0x1d16 <vfprintf+0x182>
    1d38:	de c0       	rjmp	.+444    	; 0x1ef6 <vfprintf+0x362>
    1d3a:	84 36       	cpi	r24, 0x64	; 100
    1d3c:	11 f0       	breq	.+4      	; 0x1d42 <vfprintf+0x1ae>
    1d3e:	89 36       	cpi	r24, 0x69	; 105
    1d40:	31 f5       	brne	.+76     	; 0x1d8e <vfprintf+0x1fa>
    1d42:	f8 01       	movw	r30, r16
    1d44:	27 ff       	sbrs	r18, 7
    1d46:	07 c0       	rjmp	.+14     	; 0x1d56 <vfprintf+0x1c2>
    1d48:	60 81       	ld	r22, Z
    1d4a:	71 81       	ldd	r23, Z+1	; 0x01
    1d4c:	82 81       	ldd	r24, Z+2	; 0x02
    1d4e:	93 81       	ldd	r25, Z+3	; 0x03
    1d50:	0c 5f       	subi	r16, 0xFC	; 252
    1d52:	1f 4f       	sbci	r17, 0xFF	; 255
    1d54:	08 c0       	rjmp	.+16     	; 0x1d66 <vfprintf+0x1d2>
    1d56:	60 81       	ld	r22, Z
    1d58:	71 81       	ldd	r23, Z+1	; 0x01
    1d5a:	88 27       	eor	r24, r24
    1d5c:	77 fd       	sbrc	r23, 7
    1d5e:	80 95       	com	r24
    1d60:	98 2f       	mov	r25, r24
    1d62:	0e 5f       	subi	r16, 0xFE	; 254
    1d64:	1f 4f       	sbci	r17, 0xFF	; 255
    1d66:	2f 76       	andi	r18, 0x6F	; 111
    1d68:	b2 2e       	mov	r11, r18
    1d6a:	97 ff       	sbrs	r25, 7
    1d6c:	09 c0       	rjmp	.+18     	; 0x1d80 <vfprintf+0x1ec>
    1d6e:	90 95       	com	r25
    1d70:	80 95       	com	r24
    1d72:	70 95       	com	r23
    1d74:	61 95       	neg	r22
    1d76:	7f 4f       	sbci	r23, 0xFF	; 255
    1d78:	8f 4f       	sbci	r24, 0xFF	; 255
    1d7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7c:	20 68       	ori	r18, 0x80	; 128
    1d7e:	b2 2e       	mov	r11, r18
    1d80:	2a e0       	ldi	r18, 0x0A	; 10
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	a4 01       	movw	r20, r8
    1d86:	32 d1       	rcall	.+612    	; 0x1fec <__ultoa_invert>
    1d88:	a8 2e       	mov	r10, r24
    1d8a:	a8 18       	sub	r10, r8
    1d8c:	43 c0       	rjmp	.+134    	; 0x1e14 <vfprintf+0x280>
    1d8e:	85 37       	cpi	r24, 0x75	; 117
    1d90:	29 f4       	brne	.+10     	; 0x1d9c <vfprintf+0x208>
    1d92:	2f 7e       	andi	r18, 0xEF	; 239
    1d94:	b2 2e       	mov	r11, r18
    1d96:	2a e0       	ldi	r18, 0x0A	; 10
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	25 c0       	rjmp	.+74     	; 0x1de6 <vfprintf+0x252>
    1d9c:	f2 2f       	mov	r31, r18
    1d9e:	f9 7f       	andi	r31, 0xF9	; 249
    1da0:	bf 2e       	mov	r11, r31
    1da2:	8f 36       	cpi	r24, 0x6F	; 111
    1da4:	c1 f0       	breq	.+48     	; 0x1dd6 <vfprintf+0x242>
    1da6:	18 f4       	brcc	.+6      	; 0x1dae <vfprintf+0x21a>
    1da8:	88 35       	cpi	r24, 0x58	; 88
    1daa:	79 f0       	breq	.+30     	; 0x1dca <vfprintf+0x236>
    1dac:	ad c0       	rjmp	.+346    	; 0x1f08 <vfprintf+0x374>
    1dae:	80 37       	cpi	r24, 0x70	; 112
    1db0:	19 f0       	breq	.+6      	; 0x1db8 <vfprintf+0x224>
    1db2:	88 37       	cpi	r24, 0x78	; 120
    1db4:	21 f0       	breq	.+8      	; 0x1dbe <vfprintf+0x22a>
    1db6:	a8 c0       	rjmp	.+336    	; 0x1f08 <vfprintf+0x374>
    1db8:	2f 2f       	mov	r18, r31
    1dba:	20 61       	ori	r18, 0x10	; 16
    1dbc:	b2 2e       	mov	r11, r18
    1dbe:	b4 fe       	sbrs	r11, 4
    1dc0:	0d c0       	rjmp	.+26     	; 0x1ddc <vfprintf+0x248>
    1dc2:	8b 2d       	mov	r24, r11
    1dc4:	84 60       	ori	r24, 0x04	; 4
    1dc6:	b8 2e       	mov	r11, r24
    1dc8:	09 c0       	rjmp	.+18     	; 0x1ddc <vfprintf+0x248>
    1dca:	24 ff       	sbrs	r18, 4
    1dcc:	0a c0       	rjmp	.+20     	; 0x1de2 <vfprintf+0x24e>
    1dce:	9f 2f       	mov	r25, r31
    1dd0:	96 60       	ori	r25, 0x06	; 6
    1dd2:	b9 2e       	mov	r11, r25
    1dd4:	06 c0       	rjmp	.+12     	; 0x1de2 <vfprintf+0x24e>
    1dd6:	28 e0       	ldi	r18, 0x08	; 8
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	05 c0       	rjmp	.+10     	; 0x1de6 <vfprintf+0x252>
    1ddc:	20 e1       	ldi	r18, 0x10	; 16
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <vfprintf+0x252>
    1de2:	20 e1       	ldi	r18, 0x10	; 16
    1de4:	32 e0       	ldi	r19, 0x02	; 2
    1de6:	f8 01       	movw	r30, r16
    1de8:	b7 fe       	sbrs	r11, 7
    1dea:	07 c0       	rjmp	.+14     	; 0x1dfa <vfprintf+0x266>
    1dec:	60 81       	ld	r22, Z
    1dee:	71 81       	ldd	r23, Z+1	; 0x01
    1df0:	82 81       	ldd	r24, Z+2	; 0x02
    1df2:	93 81       	ldd	r25, Z+3	; 0x03
    1df4:	0c 5f       	subi	r16, 0xFC	; 252
    1df6:	1f 4f       	sbci	r17, 0xFF	; 255
    1df8:	06 c0       	rjmp	.+12     	; 0x1e06 <vfprintf+0x272>
    1dfa:	60 81       	ld	r22, Z
    1dfc:	71 81       	ldd	r23, Z+1	; 0x01
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	0e 5f       	subi	r16, 0xFE	; 254
    1e04:	1f 4f       	sbci	r17, 0xFF	; 255
    1e06:	a4 01       	movw	r20, r8
    1e08:	f1 d0       	rcall	.+482    	; 0x1fec <__ultoa_invert>
    1e0a:	a8 2e       	mov	r10, r24
    1e0c:	a8 18       	sub	r10, r8
    1e0e:	fb 2d       	mov	r31, r11
    1e10:	ff 77       	andi	r31, 0x7F	; 127
    1e12:	bf 2e       	mov	r11, r31
    1e14:	b6 fe       	sbrs	r11, 6
    1e16:	0b c0       	rjmp	.+22     	; 0x1e2e <vfprintf+0x29a>
    1e18:	2b 2d       	mov	r18, r11
    1e1a:	2e 7f       	andi	r18, 0xFE	; 254
    1e1c:	a5 14       	cp	r10, r5
    1e1e:	50 f4       	brcc	.+20     	; 0x1e34 <vfprintf+0x2a0>
    1e20:	b4 fe       	sbrs	r11, 4
    1e22:	0a c0       	rjmp	.+20     	; 0x1e38 <vfprintf+0x2a4>
    1e24:	b2 fc       	sbrc	r11, 2
    1e26:	08 c0       	rjmp	.+16     	; 0x1e38 <vfprintf+0x2a4>
    1e28:	2b 2d       	mov	r18, r11
    1e2a:	2e 7e       	andi	r18, 0xEE	; 238
    1e2c:	05 c0       	rjmp	.+10     	; 0x1e38 <vfprintf+0x2a4>
    1e2e:	7a 2c       	mov	r7, r10
    1e30:	2b 2d       	mov	r18, r11
    1e32:	03 c0       	rjmp	.+6      	; 0x1e3a <vfprintf+0x2a6>
    1e34:	7a 2c       	mov	r7, r10
    1e36:	01 c0       	rjmp	.+2      	; 0x1e3a <vfprintf+0x2a6>
    1e38:	75 2c       	mov	r7, r5
    1e3a:	24 ff       	sbrs	r18, 4
    1e3c:	0d c0       	rjmp	.+26     	; 0x1e58 <vfprintf+0x2c4>
    1e3e:	fe 01       	movw	r30, r28
    1e40:	ea 0d       	add	r30, r10
    1e42:	f1 1d       	adc	r31, r1
    1e44:	80 81       	ld	r24, Z
    1e46:	80 33       	cpi	r24, 0x30	; 48
    1e48:	11 f4       	brne	.+4      	; 0x1e4e <vfprintf+0x2ba>
    1e4a:	29 7e       	andi	r18, 0xE9	; 233
    1e4c:	09 c0       	rjmp	.+18     	; 0x1e60 <vfprintf+0x2cc>
    1e4e:	22 ff       	sbrs	r18, 2
    1e50:	06 c0       	rjmp	.+12     	; 0x1e5e <vfprintf+0x2ca>
    1e52:	73 94       	inc	r7
    1e54:	73 94       	inc	r7
    1e56:	04 c0       	rjmp	.+8      	; 0x1e60 <vfprintf+0x2cc>
    1e58:	82 2f       	mov	r24, r18
    1e5a:	86 78       	andi	r24, 0x86	; 134
    1e5c:	09 f0       	breq	.+2      	; 0x1e60 <vfprintf+0x2cc>
    1e5e:	73 94       	inc	r7
    1e60:	23 fd       	sbrc	r18, 3
    1e62:	12 c0       	rjmp	.+36     	; 0x1e88 <vfprintf+0x2f4>
    1e64:	20 ff       	sbrs	r18, 0
    1e66:	06 c0       	rjmp	.+12     	; 0x1e74 <vfprintf+0x2e0>
    1e68:	5a 2c       	mov	r5, r10
    1e6a:	73 14       	cp	r7, r3
    1e6c:	18 f4       	brcc	.+6      	; 0x1e74 <vfprintf+0x2e0>
    1e6e:	53 0c       	add	r5, r3
    1e70:	57 18       	sub	r5, r7
    1e72:	73 2c       	mov	r7, r3
    1e74:	73 14       	cp	r7, r3
    1e76:	60 f4       	brcc	.+24     	; 0x1e90 <vfprintf+0x2fc>
    1e78:	b7 01       	movw	r22, r14
    1e7a:	80 e2       	ldi	r24, 0x20	; 32
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	2c 87       	std	Y+12, r18	; 0x0c
    1e80:	83 d0       	rcall	.+262    	; 0x1f88 <fputc>
    1e82:	73 94       	inc	r7
    1e84:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e86:	f6 cf       	rjmp	.-20     	; 0x1e74 <vfprintf+0x2e0>
    1e88:	73 14       	cp	r7, r3
    1e8a:	10 f4       	brcc	.+4      	; 0x1e90 <vfprintf+0x2fc>
    1e8c:	37 18       	sub	r3, r7
    1e8e:	01 c0       	rjmp	.+2      	; 0x1e92 <vfprintf+0x2fe>
    1e90:	31 2c       	mov	r3, r1
    1e92:	24 ff       	sbrs	r18, 4
    1e94:	11 c0       	rjmp	.+34     	; 0x1eb8 <vfprintf+0x324>
    1e96:	b7 01       	movw	r22, r14
    1e98:	80 e3       	ldi	r24, 0x30	; 48
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	2c 87       	std	Y+12, r18	; 0x0c
    1e9e:	74 d0       	rcall	.+232    	; 0x1f88 <fputc>
    1ea0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ea2:	22 ff       	sbrs	r18, 2
    1ea4:	16 c0       	rjmp	.+44     	; 0x1ed2 <vfprintf+0x33e>
    1ea6:	21 ff       	sbrs	r18, 1
    1ea8:	03 c0       	rjmp	.+6      	; 0x1eb0 <vfprintf+0x31c>
    1eaa:	88 e5       	ldi	r24, 0x58	; 88
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	02 c0       	rjmp	.+4      	; 0x1eb4 <vfprintf+0x320>
    1eb0:	88 e7       	ldi	r24, 0x78	; 120
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	b7 01       	movw	r22, r14
    1eb6:	0c c0       	rjmp	.+24     	; 0x1ed0 <vfprintf+0x33c>
    1eb8:	82 2f       	mov	r24, r18
    1eba:	86 78       	andi	r24, 0x86	; 134
    1ebc:	51 f0       	breq	.+20     	; 0x1ed2 <vfprintf+0x33e>
    1ebe:	21 fd       	sbrc	r18, 1
    1ec0:	02 c0       	rjmp	.+4      	; 0x1ec6 <vfprintf+0x332>
    1ec2:	80 e2       	ldi	r24, 0x20	; 32
    1ec4:	01 c0       	rjmp	.+2      	; 0x1ec8 <vfprintf+0x334>
    1ec6:	8b e2       	ldi	r24, 0x2B	; 43
    1ec8:	27 fd       	sbrc	r18, 7
    1eca:	8d e2       	ldi	r24, 0x2D	; 45
    1ecc:	b7 01       	movw	r22, r14
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	5b d0       	rcall	.+182    	; 0x1f88 <fputc>
    1ed2:	a5 14       	cp	r10, r5
    1ed4:	30 f4       	brcc	.+12     	; 0x1ee2 <vfprintf+0x34e>
    1ed6:	b7 01       	movw	r22, r14
    1ed8:	80 e3       	ldi	r24, 0x30	; 48
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	55 d0       	rcall	.+170    	; 0x1f88 <fputc>
    1ede:	5a 94       	dec	r5
    1ee0:	f8 cf       	rjmp	.-16     	; 0x1ed2 <vfprintf+0x33e>
    1ee2:	aa 94       	dec	r10
    1ee4:	f4 01       	movw	r30, r8
    1ee6:	ea 0d       	add	r30, r10
    1ee8:	f1 1d       	adc	r31, r1
    1eea:	80 81       	ld	r24, Z
    1eec:	b7 01       	movw	r22, r14
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	4b d0       	rcall	.+150    	; 0x1f88 <fputc>
    1ef2:	a1 10       	cpse	r10, r1
    1ef4:	f6 cf       	rjmp	.-20     	; 0x1ee2 <vfprintf+0x34e>
    1ef6:	33 20       	and	r3, r3
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <vfprintf+0x368>
    1efa:	5d ce       	rjmp	.-838    	; 0x1bb6 <vfprintf+0x22>
    1efc:	b7 01       	movw	r22, r14
    1efe:	80 e2       	ldi	r24, 0x20	; 32
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	42 d0       	rcall	.+132    	; 0x1f88 <fputc>
    1f04:	3a 94       	dec	r3
    1f06:	f7 cf       	rjmp	.-18     	; 0x1ef6 <vfprintf+0x362>
    1f08:	f7 01       	movw	r30, r14
    1f0a:	86 81       	ldd	r24, Z+6	; 0x06
    1f0c:	97 81       	ldd	r25, Z+7	; 0x07
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <vfprintf+0x380>
    1f10:	8f ef       	ldi	r24, 0xFF	; 255
    1f12:	9f ef       	ldi	r25, 0xFF	; 255
    1f14:	2c 96       	adiw	r28, 0x0c	; 12
    1f16:	e2 e1       	ldi	r30, 0x12	; 18
    1f18:	e3 c0       	rjmp	.+454    	; 0x20e0 <__epilogue_restores__>

00001f1a <calloc>:
    1f1a:	0f 93       	push	r16
    1f1c:	1f 93       	push	r17
    1f1e:	cf 93       	push	r28
    1f20:	df 93       	push	r29
    1f22:	86 9f       	mul	r24, r22
    1f24:	80 01       	movw	r16, r0
    1f26:	87 9f       	mul	r24, r23
    1f28:	10 0d       	add	r17, r0
    1f2a:	96 9f       	mul	r25, r22
    1f2c:	10 0d       	add	r17, r0
    1f2e:	11 24       	eor	r1, r1
    1f30:	c8 01       	movw	r24, r16
    1f32:	7c dc       	rcall	.-1800   	; 0x182c <malloc>
    1f34:	ec 01       	movw	r28, r24
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	21 f0       	breq	.+8      	; 0x1f42 <calloc+0x28>
    1f3a:	a8 01       	movw	r20, r16
    1f3c:	60 e0       	ldi	r22, 0x00	; 0
    1f3e:	70 e0       	ldi	r23, 0x00	; 0
    1f40:	11 d0       	rcall	.+34     	; 0x1f64 <memset>
    1f42:	ce 01       	movw	r24, r28
    1f44:	df 91       	pop	r29
    1f46:	cf 91       	pop	r28
    1f48:	1f 91       	pop	r17
    1f4a:	0f 91       	pop	r16
    1f4c:	08 95       	ret

00001f4e <strnlen_P>:
    1f4e:	fc 01       	movw	r30, r24
    1f50:	05 90       	lpm	r0, Z+
    1f52:	61 50       	subi	r22, 0x01	; 1
    1f54:	70 40       	sbci	r23, 0x00	; 0
    1f56:	01 10       	cpse	r0, r1
    1f58:	d8 f7       	brcc	.-10     	; 0x1f50 <strnlen_P+0x2>
    1f5a:	80 95       	com	r24
    1f5c:	90 95       	com	r25
    1f5e:	8e 0f       	add	r24, r30
    1f60:	9f 1f       	adc	r25, r31
    1f62:	08 95       	ret

00001f64 <memset>:
    1f64:	dc 01       	movw	r26, r24
    1f66:	01 c0       	rjmp	.+2      	; 0x1f6a <memset+0x6>
    1f68:	6d 93       	st	X+, r22
    1f6a:	41 50       	subi	r20, 0x01	; 1
    1f6c:	50 40       	sbci	r21, 0x00	; 0
    1f6e:	e0 f7       	brcc	.-8      	; 0x1f68 <memset+0x4>
    1f70:	08 95       	ret

00001f72 <strnlen>:
    1f72:	fc 01       	movw	r30, r24
    1f74:	61 50       	subi	r22, 0x01	; 1
    1f76:	70 40       	sbci	r23, 0x00	; 0
    1f78:	01 90       	ld	r0, Z+
    1f7a:	01 10       	cpse	r0, r1
    1f7c:	d8 f7       	brcc	.-10     	; 0x1f74 <strnlen+0x2>
    1f7e:	80 95       	com	r24
    1f80:	90 95       	com	r25
    1f82:	8e 0f       	add	r24, r30
    1f84:	9f 1f       	adc	r25, r31
    1f86:	08 95       	ret

00001f88 <fputc>:
    1f88:	0f 93       	push	r16
    1f8a:	1f 93       	push	r17
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
    1f90:	18 2f       	mov	r17, r24
    1f92:	09 2f       	mov	r16, r25
    1f94:	eb 01       	movw	r28, r22
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	81 fd       	sbrc	r24, 1
    1f9a:	03 c0       	rjmp	.+6      	; 0x1fa2 <fputc+0x1a>
    1f9c:	8f ef       	ldi	r24, 0xFF	; 255
    1f9e:	9f ef       	ldi	r25, 0xFF	; 255
    1fa0:	20 c0       	rjmp	.+64     	; 0x1fe2 <fputc+0x5a>
    1fa2:	82 ff       	sbrs	r24, 2
    1fa4:	10 c0       	rjmp	.+32     	; 0x1fc6 <fputc+0x3e>
    1fa6:	4e 81       	ldd	r20, Y+6	; 0x06
    1fa8:	5f 81       	ldd	r21, Y+7	; 0x07
    1faa:	2c 81       	ldd	r18, Y+4	; 0x04
    1fac:	3d 81       	ldd	r19, Y+5	; 0x05
    1fae:	42 17       	cp	r20, r18
    1fb0:	53 07       	cpc	r21, r19
    1fb2:	7c f4       	brge	.+30     	; 0x1fd2 <fputc+0x4a>
    1fb4:	e8 81       	ld	r30, Y
    1fb6:	f9 81       	ldd	r31, Y+1	; 0x01
    1fb8:	9f 01       	movw	r18, r30
    1fba:	2f 5f       	subi	r18, 0xFF	; 255
    1fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    1fbe:	39 83       	std	Y+1, r19	; 0x01
    1fc0:	28 83       	st	Y, r18
    1fc2:	10 83       	st	Z, r17
    1fc4:	06 c0       	rjmp	.+12     	; 0x1fd2 <fputc+0x4a>
    1fc6:	e8 85       	ldd	r30, Y+8	; 0x08
    1fc8:	f9 85       	ldd	r31, Y+9	; 0x09
    1fca:	81 2f       	mov	r24, r17
    1fcc:	09 95       	icall
    1fce:	89 2b       	or	r24, r25
    1fd0:	29 f7       	brne	.-54     	; 0x1f9c <fputc+0x14>
    1fd2:	2e 81       	ldd	r18, Y+6	; 0x06
    1fd4:	3f 81       	ldd	r19, Y+7	; 0x07
    1fd6:	2f 5f       	subi	r18, 0xFF	; 255
    1fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fda:	3f 83       	std	Y+7, r19	; 0x07
    1fdc:	2e 83       	std	Y+6, r18	; 0x06
    1fde:	81 2f       	mov	r24, r17
    1fe0:	90 2f       	mov	r25, r16
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	1f 91       	pop	r17
    1fe8:	0f 91       	pop	r16
    1fea:	08 95       	ret

00001fec <__ultoa_invert>:
    1fec:	fa 01       	movw	r30, r20
    1fee:	aa 27       	eor	r26, r26
    1ff0:	28 30       	cpi	r18, 0x08	; 8
    1ff2:	51 f1       	breq	.+84     	; 0x2048 <__ultoa_invert+0x5c>
    1ff4:	20 31       	cpi	r18, 0x10	; 16
    1ff6:	81 f1       	breq	.+96     	; 0x2058 <__ultoa_invert+0x6c>
    1ff8:	e8 94       	clt
    1ffa:	6f 93       	push	r22
    1ffc:	6e 7f       	andi	r22, 0xFE	; 254
    1ffe:	6e 5f       	subi	r22, 0xFE	; 254
    2000:	7f 4f       	sbci	r23, 0xFF	; 255
    2002:	8f 4f       	sbci	r24, 0xFF	; 255
    2004:	9f 4f       	sbci	r25, 0xFF	; 255
    2006:	af 4f       	sbci	r26, 0xFF	; 255
    2008:	b1 e0       	ldi	r27, 0x01	; 1
    200a:	3e d0       	rcall	.+124    	; 0x2088 <__ultoa_invert+0x9c>
    200c:	b4 e0       	ldi	r27, 0x04	; 4
    200e:	3c d0       	rcall	.+120    	; 0x2088 <__ultoa_invert+0x9c>
    2010:	67 0f       	add	r22, r23
    2012:	78 1f       	adc	r23, r24
    2014:	89 1f       	adc	r24, r25
    2016:	9a 1f       	adc	r25, r26
    2018:	a1 1d       	adc	r26, r1
    201a:	68 0f       	add	r22, r24
    201c:	79 1f       	adc	r23, r25
    201e:	8a 1f       	adc	r24, r26
    2020:	91 1d       	adc	r25, r1
    2022:	a1 1d       	adc	r26, r1
    2024:	6a 0f       	add	r22, r26
    2026:	71 1d       	adc	r23, r1
    2028:	81 1d       	adc	r24, r1
    202a:	91 1d       	adc	r25, r1
    202c:	a1 1d       	adc	r26, r1
    202e:	20 d0       	rcall	.+64     	; 0x2070 <__ultoa_invert+0x84>
    2030:	09 f4       	brne	.+2      	; 0x2034 <__ultoa_invert+0x48>
    2032:	68 94       	set
    2034:	3f 91       	pop	r19
    2036:	2a e0       	ldi	r18, 0x0A	; 10
    2038:	26 9f       	mul	r18, r22
    203a:	11 24       	eor	r1, r1
    203c:	30 19       	sub	r19, r0
    203e:	30 5d       	subi	r19, 0xD0	; 208
    2040:	31 93       	st	Z+, r19
    2042:	de f6       	brtc	.-74     	; 0x1ffa <__ultoa_invert+0xe>
    2044:	cf 01       	movw	r24, r30
    2046:	08 95       	ret
    2048:	46 2f       	mov	r20, r22
    204a:	47 70       	andi	r20, 0x07	; 7
    204c:	40 5d       	subi	r20, 0xD0	; 208
    204e:	41 93       	st	Z+, r20
    2050:	b3 e0       	ldi	r27, 0x03	; 3
    2052:	0f d0       	rcall	.+30     	; 0x2072 <__ultoa_invert+0x86>
    2054:	c9 f7       	brne	.-14     	; 0x2048 <__ultoa_invert+0x5c>
    2056:	f6 cf       	rjmp	.-20     	; 0x2044 <__ultoa_invert+0x58>
    2058:	46 2f       	mov	r20, r22
    205a:	4f 70       	andi	r20, 0x0F	; 15
    205c:	40 5d       	subi	r20, 0xD0	; 208
    205e:	4a 33       	cpi	r20, 0x3A	; 58
    2060:	18 f0       	brcs	.+6      	; 0x2068 <__ultoa_invert+0x7c>
    2062:	49 5d       	subi	r20, 0xD9	; 217
    2064:	31 fd       	sbrc	r19, 1
    2066:	40 52       	subi	r20, 0x20	; 32
    2068:	41 93       	st	Z+, r20
    206a:	02 d0       	rcall	.+4      	; 0x2070 <__ultoa_invert+0x84>
    206c:	a9 f7       	brne	.-22     	; 0x2058 <__ultoa_invert+0x6c>
    206e:	ea cf       	rjmp	.-44     	; 0x2044 <__ultoa_invert+0x58>
    2070:	b4 e0       	ldi	r27, 0x04	; 4
    2072:	a6 95       	lsr	r26
    2074:	97 95       	ror	r25
    2076:	87 95       	ror	r24
    2078:	77 95       	ror	r23
    207a:	67 95       	ror	r22
    207c:	ba 95       	dec	r27
    207e:	c9 f7       	brne	.-14     	; 0x2072 <__ultoa_invert+0x86>
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	61 05       	cpc	r22, r1
    2084:	71 05       	cpc	r23, r1
    2086:	08 95       	ret
    2088:	9b 01       	movw	r18, r22
    208a:	ac 01       	movw	r20, r24
    208c:	0a 2e       	mov	r0, r26
    208e:	06 94       	lsr	r0
    2090:	57 95       	ror	r21
    2092:	47 95       	ror	r20
    2094:	37 95       	ror	r19
    2096:	27 95       	ror	r18
    2098:	ba 95       	dec	r27
    209a:	c9 f7       	brne	.-14     	; 0x208e <__ultoa_invert+0xa2>
    209c:	62 0f       	add	r22, r18
    209e:	73 1f       	adc	r23, r19
    20a0:	84 1f       	adc	r24, r20
    20a2:	95 1f       	adc	r25, r21
    20a4:	a0 1d       	adc	r26, r0
    20a6:	08 95       	ret

000020a8 <__prologue_saves__>:
    20a8:	2f 92       	push	r2
    20aa:	3f 92       	push	r3
    20ac:	4f 92       	push	r4
    20ae:	5f 92       	push	r5
    20b0:	6f 92       	push	r6
    20b2:	7f 92       	push	r7
    20b4:	8f 92       	push	r8
    20b6:	9f 92       	push	r9
    20b8:	af 92       	push	r10
    20ba:	bf 92       	push	r11
    20bc:	cf 92       	push	r12
    20be:	df 92       	push	r13
    20c0:	ef 92       	push	r14
    20c2:	ff 92       	push	r15
    20c4:	0f 93       	push	r16
    20c6:	1f 93       	push	r17
    20c8:	cf 93       	push	r28
    20ca:	df 93       	push	r29
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	ca 1b       	sub	r28, r26
    20d2:	db 0b       	sbc	r29, r27
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	09 94       	ijmp

000020e0 <__epilogue_restores__>:
    20e0:	2a 88       	ldd	r2, Y+18	; 0x12
    20e2:	39 88       	ldd	r3, Y+17	; 0x11
    20e4:	48 88       	ldd	r4, Y+16	; 0x10
    20e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    20e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    20ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    20ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    20ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    20f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    20f2:	b9 84       	ldd	r11, Y+9	; 0x09
    20f4:	c8 84       	ldd	r12, Y+8	; 0x08
    20f6:	df 80       	ldd	r13, Y+7	; 0x07
    20f8:	ee 80       	ldd	r14, Y+6	; 0x06
    20fa:	fd 80       	ldd	r15, Y+5	; 0x05
    20fc:	0c 81       	ldd	r16, Y+4	; 0x04
    20fe:	1b 81       	ldd	r17, Y+3	; 0x03
    2100:	aa 81       	ldd	r26, Y+2	; 0x02
    2102:	b9 81       	ldd	r27, Y+1	; 0x01
    2104:	ce 0f       	add	r28, r30
    2106:	d1 1d       	adc	r29, r1
    2108:	0f b6       	in	r0, 0x3f	; 63
    210a:	f8 94       	cli
    210c:	de bf       	out	0x3e, r29	; 62
    210e:	0f be       	out	0x3f, r0	; 63
    2110:	cd bf       	out	0x3d, r28	; 61
    2112:	ed 01       	movw	r28, r26
    2114:	08 95       	ret

00002116 <_exit>:
    2116:	f8 94       	cli

00002118 <__stop_program>:
    2118:	ff cf       	rjmp	.-2      	; 0x2118 <__stop_program>
