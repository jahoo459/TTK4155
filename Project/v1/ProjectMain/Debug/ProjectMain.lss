
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001fa  00800100  000023e8  0000247c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  008002fa  008002fa  00002676  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002676  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000340  00000000  00000000  000026d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000456e  00000000  00000000  00002a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000140e  00000000  00000000  00006f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001ab8  00000000  00000000  0000838e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000898  00000000  00000000  00009e48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000fa3  00000000  00000000  0000a6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000023ee  00000000  00000000  0000b683  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000400  00000000  00000000  0000da71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	1c c2       	rjmp	.+1080   	; 0x43e <__vector_1>
       6:	00 00       	nop
       8:	29 c2       	rjmp	.+1106   	; 0x45c <__vector_2>
       a:	00 00       	nop
       c:	36 c2       	rjmp	.+1132   	; 0x47a <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <Game_play+0x7e>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e8 ee       	ldi	r30, 0xE8	; 232
     37c:	f3 e2       	ldi	r31, 0x23	; 35
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 3f       	cpi	r26, 0xFA	; 250
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	aa ef       	ldi	r26, 0xFA	; 250
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a4 34       	cpi	r26, 0x44	; 68
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	be d0       	rcall	.+380    	; 0x518 <main>
     39c:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
			retrieval_errors++;
		}
	}

	//printf("SRAM test completed with\n %4d errors in write phase and\n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	2f 93       	push	r18
     3ae:	3f 93       	push	r19
     3b0:	4f 93       	push	r20
     3b2:	5f 93       	push	r21
     3b4:	6f 93       	push	r22
     3b6:	7f 93       	push	r23
     3b8:	8f 93       	push	r24
     3ba:	9f 93       	push	r25
     3bc:	af 93       	push	r26
     3be:	bf 93       	push	r27
     3c0:	ef 93       	push	r30
     3c2:	ff 93       	push	r31
     3c4:	0e 94 ef 0c 	call	0x19de	; 0x19de <uartReceive>
     3c8:	80 93 2a 03 	sts	0x032A, r24
     3cc:	90 91 04 03 	lds	r25, 0x0304
     3d0:	99 23       	and	r25, r25
     3d2:	d1 f0       	breq	.+52     	; 0x408 <__vector_19+0x66>
     3d4:	90 91 03 03 	lds	r25, 0x0303
     3d8:	91 30       	cpi	r25, 0x01	; 1
     3da:	39 f0       	breq	.+14     	; 0x3ea <__vector_19+0x48>
     3dc:	18 f0       	brcs	.+6      	; 0x3e4 <__vector_19+0x42>
     3de:	92 30       	cpi	r25, 0x02	; 2
     3e0:	39 f0       	breq	.+14     	; 0x3f0 <__vector_19+0x4e>
     3e2:	0d c0       	rjmp	.+26     	; 0x3fe <__vector_19+0x5c>
     3e4:	80 93 27 03 	sts	0x0327, r24
     3e8:	0a c0       	rjmp	.+20     	; 0x3fe <__vector_19+0x5c>
     3ea:	80 93 28 03 	sts	0x0328, r24
     3ee:	07 c0       	rjmp	.+14     	; 0x3fe <__vector_19+0x5c>
     3f0:	80 93 29 03 	sts	0x0329, r24
     3f4:	10 92 04 03 	sts	0x0304, r1
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	90 93 ff 02 	sts	0x02FF, r25
     3fe:	90 91 03 03 	lds	r25, 0x0303
     402:	9f 5f       	subi	r25, 0xFF	; 255
     404:	90 93 03 03 	sts	0x0303, r25
     408:	8f 3f       	cpi	r24, 0xFF	; 255
     40a:	29 f4       	brne	.+10     	; 0x416 <__vector_19+0x74>
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	80 93 04 03 	sts	0x0304, r24
     412:	10 92 03 03 	sts	0x0303, r1
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	80 93 05 03 	sts	0x0305, r24
     41c:	ff 91       	pop	r31
     41e:	ef 91       	pop	r30
     420:	bf 91       	pop	r27
     422:	af 91       	pop	r26
     424:	9f 91       	pop	r25
     426:	8f 91       	pop	r24
     428:	7f 91       	pop	r23
     42a:	6f 91       	pop	r22
     42c:	5f 91       	pop	r21
     42e:	4f 91       	pop	r20
     430:	3f 91       	pop	r19
     432:	2f 91       	pop	r18
     434:	0f 90       	pop	r0
     436:	0f be       	out	0x3f, r0	; 63
     438:	0f 90       	pop	r0
     43a:	1f 90       	pop	r1
     43c:	18 95       	reti

0000043e <__vector_1>:
     43e:	1f 92       	push	r1
     440:	0f 92       	push	r0
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	0f 92       	push	r0
     446:	11 24       	eor	r1, r1
     448:	8f 93       	push	r24
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	80 93 fe 02 	sts	0x02FE, r24
     450:	8f 91       	pop	r24
     452:	0f 90       	pop	r0
     454:	0f be       	out	0x3f, r0	; 63
     456:	0f 90       	pop	r0
     458:	1f 90       	pop	r1
     45a:	18 95       	reti

0000045c <__vector_2>:
     45c:	1f 92       	push	r1
     45e:	0f 92       	push	r0
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	0f 92       	push	r0
     464:	11 24       	eor	r1, r1
     466:	8f 93       	push	r24
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	80 93 fd 02 	sts	0x02FD, r24
     46e:	8f 91       	pop	r24
     470:	0f 90       	pop	r0
     472:	0f be       	out	0x3f, r0	; 63
     474:	0f 90       	pop	r0
     476:	1f 90       	pop	r1
     478:	18 95       	reti

0000047a <__vector_3>:
     47a:	1f 92       	push	r1
     47c:	0f 92       	push	r0
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	0f 92       	push	r0
     482:	11 24       	eor	r1, r1
     484:	8f 93       	push	r24
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	80 93 fa 02 	sts	0x02FA, r24
     48c:	8f 91       	pop	r24
     48e:	0f 90       	pop	r0
     490:	0f be       	out	0x3f, r0	; 63
     492:	0f 90       	pop	r0
     494:	1f 90       	pop	r1
     496:	18 95       	reti

00000498 <init>:

void init()
{
     498:	ef 92       	push	r14
     49a:	ff 92       	push	r15
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
	// call initialization subroutines
	uartInit(BAUDRATE, FOSC, UBRR); printf("\n======================STARTUP==========================\n");
     4a0:	1f e1       	ldi	r17, 0x1F	; 31
     4a2:	e1 2e       	mov	r14, r17
     4a4:	f1 2c       	mov	r15, r1
     4a6:	00 e0       	ldi	r16, 0x00	; 0
     4a8:	10 e0       	ldi	r17, 0x00	; 0
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	4b e4       	ldi	r20, 0x4B	; 75
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	60 e8       	ldi	r22, 0x80	; 128
     4b4:	75 e2       	ldi	r23, 0x25	; 37
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <uartInit>
     4be:	83 e4       	ldi	r24, 0x43	; 67
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <puts>
	enableXMEM(1);
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	68 d2       	rcall	.+1232   	; 0x99a <enableXMEM>
	SLI_init();
     4ca:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <SLI_init>
	JOY_init();
     4ce:	de d3       	rcall	.+1980   	; 0xc8c <JOY_init>
	OLED_init();
     4d0:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <OLED_init>
	SPI_init();
     4d4:	0e 94 ca 0c 	call	0x1994	; 0x1994 <SPI_init>
	MCP2515_init();
     4d8:	d0 d5       	rcall	.+2976   	; 0x107a <MCP2515_init>
	CAN_init();
     4da:	bc d0       	rcall	.+376    	; 0x654 <CAN_init>
	
	// setup interrupts
	// init external interrupt INT0 on falling edge
	set_bit(GICR, INT0);
     4dc:	8b b7       	in	r24, 0x3b	; 59
     4de:	80 64       	ori	r24, 0x40	; 64
     4e0:	8b bf       	out	0x3b, r24	; 59
	set_bit(MCUCR, ISC01);
     4e2:	85 b7       	in	r24, 0x35	; 53
     4e4:	82 60       	ori	r24, 0x02	; 2
     4e6:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     4e8:	85 b7       	in	r24, 0x35	; 53
     4ea:	8e 7f       	andi	r24, 0xFE	; 254
     4ec:	85 bf       	out	0x35, r24	; 53
	
	// Pull-up on PD3
	clear_bit(DDRD, PD3);
     4ee:	8b 98       	cbi	0x11, 3	; 17
	set_bit(PORTD, PD3);
     4f0:	93 9a       	sbi	0x12, 3	; 18
	
	// init external interrupt INT1 on falling edge
	set_bit(GICR, INT1);
     4f2:	8b b7       	in	r24, 0x3b	; 59
     4f4:	80 68       	ori	r24, 0x80	; 128
     4f6:	8b bf       	out	0x3b, r24	; 59
	set_bit(MCUCR, ISC11);
     4f8:	85 b7       	in	r24, 0x35	; 53
     4fa:	88 60       	ori	r24, 0x08	; 8
     4fc:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC10);
     4fe:	85 b7       	in	r24, 0x35	; 53
     500:	8b 7f       	andi	r24, 0xFB	; 251
     502:	85 bf       	out	0x35, r24	; 53
	
		
	// PE2
	clear_bit(DDRE, PE2);
     504:	32 98       	cbi	0x06, 2	; 6
	clear_bit(PORTE, PE2);
     506:	3a 98       	cbi	0x07, 2	; 7
	// PB0
	clear_bit(DDRB, PB0);
     508:	b8 98       	cbi	0x17, 0	; 23
	clear_bit(PORTB, PB0);
     50a:	c0 98       	cbi	0x18, 0	; 24

	// activate interrupts
	sei();
     50c:	78 94       	sei

	// call SRAM Test
	//SRAM_test();
}
     50e:	1f 91       	pop	r17
     510:	0f 91       	pop	r16
     512:	ff 90       	pop	r15
     514:	ef 90       	pop	r14
     516:	08 95       	ret

00000518 <main>:
*/

int main(void)
{
	
	init();
     518:	bf df       	rcall	.-130    	; 0x498 <init>
	//activateMenuFlag = 1; // display the main menu
		
	
	

	uartMsg = 0;
     51a:	10 92 2a 03 	sts	0x032A, r1
	uartMouseSteeringMessage.Motor = 0;
     51e:	10 92 27 03 	sts	0x0327, r1
	uartMouseSteeringMessage.Servo = 0;
     522:	10 92 28 03 	sts	0x0328, r1
	uartMouseSteeringMessage.Button = 0;
     526:	10 92 29 03 	sts	0x0329, r1
// 		CAN_sendMessage(&message2send, 0);
// 		_delay_ms(50);

		if(activateMenuFlag && menuAlreadyBuiltFlag == 0)
		{
			activeState = MENU;
     52a:	55 24       	eor	r5, r5
     52c:	53 94       	inc	r5
// 		}
		
		if(updateCmdDispFlag)
		{
			OLED_clear();
			sprintf(str, "%d", uartMouseSteeringMessage.Motor);
     52e:	0f 2e       	mov	r0, r31
     530:	f7 e2       	ldi	r31, 0x27	; 39
     532:	af 2e       	mov	r10, r31
     534:	f3 e0       	ldi	r31, 0x03	; 3
     536:	bf 2e       	mov	r11, r31
     538:	f0 2d       	mov	r31, r0
     53a:	0c e7       	ldi	r16, 0x7C	; 124
     53c:	11 e0       	ldi	r17, 0x01	; 1
     53e:	c0 e0       	ldi	r28, 0x00	; 0
     540:	d3 e0       	ldi	r29, 0x03	; 3
			OLED_goto(0,0);
			OLED_printString(str);
			
			sprintf(str, "%d", uartMouseSteeringMessage.Servo);
     542:	0f 2e       	mov	r0, r31
     544:	f8 e2       	ldi	r31, 0x28	; 40
     546:	cf 2e       	mov	r12, r31
     548:	f3 e0       	ldi	r31, 0x03	; 3
     54a:	df 2e       	mov	r13, r31
     54c:	f0 2d       	mov	r31, r0
			OLED_goto(1,0);
			OLED_printString(str);
			
			sprintf(str, "%d", uartMouseSteeringMessage.Button);
     54e:	0f 2e       	mov	r0, r31
     550:	f9 e2       	ldi	r31, 0x29	; 41
     552:	8f 2e       	mov	r8, r31
     554:	f3 e0       	ldi	r31, 0x03	; 3
     556:	9f 2e       	mov	r9, r31
     558:	f0 2d       	mov	r31, r0
		if(activateMenuFlag && menuAlreadyBuiltFlag == 0)
		{
			activeState = MENU;
			MENU_activate(&activeState);

			menuAlreadyBuiltFlag = 1;
     55a:	ee 24       	eor	r14, r14
     55c:	e3 94       	inc	r14
     55e:	f1 2c       	mov	r15, r1
// 		}
		
		if(updateCmdDispFlag)
		{
			OLED_clear();
			sprintf(str, "%d", uartMouseSteeringMessage.Motor);
     560:	6c 2e       	mov	r6, r28
     562:	7d 2e       	mov	r7, r29
// 		message2send.data[2] = ButtonRight;
// 		
// 		CAN_sendMessage(&message2send, 0);
// 		_delay_ms(50);

		if(activateMenuFlag && menuAlreadyBuiltFlag == 0)
     564:	80 91 fd 02 	lds	r24, 0x02FD
     568:	88 23       	and	r24, r24
     56a:	89 f0       	breq	.+34     	; 0x58e <main+0x76>
     56c:	80 91 fb 02 	lds	r24, 0x02FB
     570:	90 91 fc 02 	lds	r25, 0x02FC
     574:	89 2b       	or	r24, r25
     576:	59 f4       	brne	.+22     	; 0x58e <main+0x76>
		{
			activeState = MENU;
     578:	50 92 08 01 	sts	0x0108, r5
			MENU_activate(&activeState);
     57c:	88 e0       	ldi	r24, 0x08	; 8
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	e8 d7       	rcall	.+4048   	; 0x1552 <MENU_activate>

			menuAlreadyBuiltFlag = 1;
     582:	f0 92 fc 02 	sts	0x02FC, r15
     586:	e0 92 fb 02 	sts	0x02FB, r14
			activateMenuFlag = 0;
     58a:	10 92 fd 02 	sts	0x02FD, r1
		}

		if(activateMenuFlag && menuAlreadyBuiltFlag == 1)
     58e:	80 91 fd 02 	lds	r24, 0x02FD
     592:	88 23       	and	r24, r24
     594:	61 f0       	breq	.+24     	; 0x5ae <main+0x96>
     596:	20 91 fb 02 	lds	r18, 0x02FB
     59a:	30 91 fc 02 	lds	r19, 0x02FC
     59e:	21 30       	cpi	r18, 0x01	; 1
     5a0:	31 05       	cpc	r19, r1
     5a2:	29 f4       	brne	.+10     	; 0x5ae <main+0x96>
		{
			activeState = MENU;
     5a4:	50 92 08 01 	sts	0x0108, r5
			MENU_reactivate();	
     5a8:	7c d7       	rcall	.+3832   	; 0x14a2 <MENU_reactivate>
			activateMenuFlag = 0;
     5aa:	10 92 fd 02 	sts	0x02FD, r1
// 				SPIreceivedFlag = 0;
// 			
// 			}
// 		}
		
		if(updateCmdDispFlag)
     5ae:	80 91 ff 02 	lds	r24, 0x02FF
     5b2:	88 23       	and	r24, r24
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <main+0xa0>
     5b6:	42 c0       	rjmp	.+132    	; 0x63c <main+0x124>
		{
			OLED_clear();
     5b8:	fb d7       	rcall	.+4086   	; 0x15b0 <OLED_clear>
			sprintf(str, "%d", uartMouseSteeringMessage.Motor);
     5ba:	f5 01       	movw	r30, r10
     5bc:	80 81       	ld	r24, Z
     5be:	1f 92       	push	r1
     5c0:	8f 93       	push	r24
     5c2:	1f 93       	push	r17
     5c4:	0f 93       	push	r16
     5c6:	df 93       	push	r29
     5c8:	cf 93       	push	r28
     5ca:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <sprintf>
			OLED_goto(0,0);
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	70 e0       	ldi	r23, 0x00	; 0
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	cf d7       	rcall	.+3998   	; 0x1576 <OLED_goto>
			OLED_printString(str);
     5d8:	86 2d       	mov	r24, r6
     5da:	97 2d       	mov	r25, r7
     5dc:	0e 94 11 0b 	call	0x1622	; 0x1622 <OLED_printString>
			
			sprintf(str, "%d", uartMouseSteeringMessage.Servo);
     5e0:	f6 01       	movw	r30, r12
     5e2:	80 81       	ld	r24, Z
     5e4:	1f 92       	push	r1
     5e6:	8f 93       	push	r24
     5e8:	1f 93       	push	r17
     5ea:	0f 93       	push	r16
     5ec:	df 93       	push	r29
     5ee:	cf 93       	push	r28
     5f0:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <sprintf>
			OLED_goto(1,0);
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	c7 01       	movw	r24, r14
     5fa:	bd d7       	rcall	.+3962   	; 0x1576 <OLED_goto>
			OLED_printString(str);
     5fc:	86 2d       	mov	r24, r6
     5fe:	97 2d       	mov	r25, r7
     600:	0e 94 11 0b 	call	0x1622	; 0x1622 <OLED_printString>
			
			sprintf(str, "%d", uartMouseSteeringMessage.Button);
     604:	f4 01       	movw	r30, r8
     606:	80 81       	ld	r24, Z
     608:	1f 92       	push	r1
     60a:	8f 93       	push	r24
     60c:	1f 93       	push	r17
     60e:	0f 93       	push	r16
     610:	df 93       	push	r29
     612:	cf 93       	push	r28
     614:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <sprintf>
			OLED_goto(2,0);
     618:	60 e0       	ldi	r22, 0x00	; 0
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	82 e0       	ldi	r24, 0x02	; 2
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	aa d7       	rcall	.+3924   	; 0x1576 <OLED_goto>
			OLED_printString(str);
     622:	86 2d       	mov	r24, r6
     624:	97 2d       	mov	r25, r7
     626:	fd d7       	rcall	.+4090   	; 0x1622 <OLED_printString>
				
			updateCmdDispFlag = 0;
     628:	10 92 ff 02 	sts	0x02FF, r1
     62c:	ed b7       	in	r30, 0x3d	; 61
     62e:	fe b7       	in	r31, 0x3e	; 62
     630:	72 96       	adiw	r30, 0x12	; 18
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	fe bf       	out	0x3e, r31	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	ed bf       	out	0x3d, r30	; 61
		}
		
		if(activeState == GAME)
     63c:	80 91 08 01 	lds	r24, 0x0108
     640:	81 11       	cpse	r24, r1
     642:	90 cf       	rjmp	.-224    	; 0x564 <main+0x4c>
		{
			Game_init();
     644:	bc d1       	rcall	.+888    	; 0x9be <Game_init>
			Game_play(&SPIreceivedFlag);
     646:	8a ef       	ldi	r24, 0xFA	; 250
     648:	92 e0       	ldi	r25, 0x02	; 2
     64a:	3c d2       	rcall	.+1144   	; 0xac4 <Game_play>
			activeState = IDLE;
     64c:	82 e0       	ldi	r24, 0x02	; 2
     64e:	80 93 08 01 	sts	0x0108, r24
     652:	88 cf       	rjmp	.-240    	; 0x564 <main+0x4c>

00000654 <CAN_init>:
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	cd b7       	in	r28, 0x3d	; 61
     65a:	de b7       	in	r29, 0x3e	; 62
     65c:	43 e0       	ldi	r20, 0x03	; 3
     65e:	6b e2       	ldi	r22, 0x2B	; 43
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	16 d5       	rcall	.+2604   	; 0x1092 <MCP2515_write>
     666:	40 e6       	ldi	r20, 0x60	; 96
     668:	60 e6       	ldi	r22, 0x60	; 96
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	11 d5       	rcall	.+2594   	; 0x1092 <MCP2515_write>
     670:	20 e0       	ldi	r18, 0x00	; 0
     672:	40 e8       	ldi	r20, 0x80	; 128
     674:	6f e0       	ldi	r22, 0x0F	; 15
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	1e d5       	rcall	.+2620   	; 0x10b8 <MCP2515_bitModify>
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <CAN_sendMessage>:
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	27 97       	sbiw	r28, 0x07	; 7
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	f8 94       	cli
     690:	de bf       	out	0x3e, r29	; 62
     692:	0f be       	out	0x3f, r0	; 63
     694:	cd bf       	out	0x3d, r28	; 61
     696:	9e 83       	std	Y+6, r25	; 0x06
     698:	8d 83       	std	Y+5, r24	; 0x05
     69a:	6f 83       	std	Y+7, r22	; 0x07
     69c:	8f 81       	ldd	r24, Y+7	; 0x07
     69e:	88 2f       	mov	r24, r24
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	00 97       	sbiw	r24, 0x00	; 0
     6a4:	09 f0       	breq	.+2      	; 0x6a8 <CAN_sendMessage+0x26>
     6a6:	4d c0       	rjmp	.+154    	; 0x742 <CAN_sendMessage+0xc0>
     6a8:	8d 81       	ldd	r24, Y+5	; 0x05
     6aa:	9e 81       	ldd	r25, Y+6	; 0x06
     6ac:	fc 01       	movw	r30, r24
     6ae:	80 81       	ld	r24, Z
     6b0:	91 81       	ldd	r25, Z+1	; 0x01
     6b2:	9c 83       	std	Y+4, r25	; 0x04
     6b4:	8b 83       	std	Y+3, r24	; 0x03
     6b6:	8b 81       	ldd	r24, Y+3	; 0x03
     6b8:	82 95       	swap	r24
     6ba:	88 0f       	add	r24, r24
     6bc:	80 7e       	andi	r24, 0xE0	; 224
     6be:	48 2f       	mov	r20, r24
     6c0:	62 e3       	ldi	r22, 0x32	; 50
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	e5 d4       	rcall	.+2506   	; 0x1092 <MCP2515_write>
     6c8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ca:	9c 81       	ldd	r25, Y+4	; 0x04
     6cc:	96 95       	lsr	r25
     6ce:	87 95       	ror	r24
     6d0:	96 95       	lsr	r25
     6d2:	87 95       	ror	r24
     6d4:	96 95       	lsr	r25
     6d6:	87 95       	ror	r24
     6d8:	48 2f       	mov	r20, r24
     6da:	61 e3       	ldi	r22, 0x31	; 49
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	d8 d4       	rcall	.+2480   	; 0x1092 <MCP2515_write>
     6e2:	8d 81       	ldd	r24, Y+5	; 0x05
     6e4:	9e 81       	ldd	r25, Y+6	; 0x06
     6e6:	fc 01       	movw	r30, r24
     6e8:	82 81       	ldd	r24, Z+2	; 0x02
     6ea:	48 2f       	mov	r20, r24
     6ec:	65 e3       	ldi	r22, 0x35	; 53
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	cf d4       	rcall	.+2462   	; 0x1092 <MCP2515_write>
     6f4:	86 e3       	ldi	r24, 0x36	; 54
     6f6:	89 83       	std	Y+1, r24	; 0x01
     6f8:	1a 82       	std	Y+2, r1	; 0x02
     6fa:	15 c0       	rjmp	.+42     	; 0x726 <CAN_sendMessage+0xa4>
     6fc:	8a 81       	ldd	r24, Y+2	; 0x02
     6fe:	88 2f       	mov	r24, r24
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	2d 81       	ldd	r18, Y+5	; 0x05
     704:	3e 81       	ldd	r19, Y+6	; 0x06
     706:	82 0f       	add	r24, r18
     708:	93 1f       	adc	r25, r19
     70a:	03 96       	adiw	r24, 0x03	; 3
     70c:	fc 01       	movw	r30, r24
     70e:	80 81       	ld	r24, Z
     710:	48 2f       	mov	r20, r24
     712:	69 81       	ldd	r22, Y+1	; 0x01
     714:	80 e0       	ldi	r24, 0x00	; 0
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	bc d4       	rcall	.+2424   	; 0x1092 <MCP2515_write>
     71a:	89 81       	ldd	r24, Y+1	; 0x01
     71c:	8f 5f       	subi	r24, 0xFF	; 255
     71e:	89 83       	std	Y+1, r24	; 0x01
     720:	8a 81       	ldd	r24, Y+2	; 0x02
     722:	8f 5f       	subi	r24, 0xFF	; 255
     724:	8a 83       	std	Y+2, r24	; 0x02
     726:	8d 81       	ldd	r24, Y+5	; 0x05
     728:	9e 81       	ldd	r25, Y+6	; 0x06
     72a:	fc 01       	movw	r30, r24
     72c:	92 81       	ldd	r25, Z+2	; 0x02
     72e:	8a 81       	ldd	r24, Y+2	; 0x02
     730:	89 17       	cp	r24, r25
     732:	20 f3       	brcs	.-56     	; 0x6fc <CAN_sendMessage+0x7a>
     734:	2f ef       	ldi	r18, 0xFF	; 255
     736:	48 e0       	ldi	r20, 0x08	; 8
     738:	60 e3       	ldi	r22, 0x30	; 48
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	bc d4       	rcall	.+2424   	; 0x10b8 <MCP2515_bitModify>
     740:	00 00       	nop
     742:	27 96       	adiw	r28, 0x07	; 7
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	f8 94       	cli
     748:	de bf       	out	0x3e, r29	; 62
     74a:	0f be       	out	0x3f, r0	; 63
     74c:	cd bf       	out	0x3d, r28	; 61
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	08 95       	ret

00000754 <CAN_receiveMessage>:
     754:	0f 93       	push	r16
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	cd b7       	in	r28, 0x3d	; 61
     75e:	de b7       	in	r29, 0x3e	; 62
     760:	61 97       	sbiw	r28, 0x11	; 17
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	de bf       	out	0x3e, r29	; 62
     768:	0f be       	out	0x3f, r0	; 63
     76a:	cd bf       	out	0x3d, r28	; 61
     76c:	98 8b       	std	Y+16, r25	; 0x10
     76e:	8f 87       	std	Y+15, r24	; 0x0f
     770:	69 8b       	std	Y+17, r22	; 0x11
     772:	89 89       	ldd	r24, Y+17	; 0x11
     774:	88 2f       	mov	r24, r24
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	82 30       	cpi	r24, 0x02	; 2
     77a:	91 05       	cpc	r25, r1
     77c:	09 f4       	brne	.+2      	; 0x780 <CAN_receiveMessage+0x2c>
     77e:	57 c0       	rjmp	.+174    	; 0x82e <CAN_receiveMessage+0xda>
     780:	83 30       	cpi	r24, 0x03	; 3
     782:	91 05       	cpc	r25, r1
     784:	21 f0       	breq	.+8      	; 0x78e <CAN_receiveMessage+0x3a>
     786:	81 30       	cpi	r24, 0x01	; 1
     788:	91 05       	cpc	r25, r1
     78a:	09 f0       	breq	.+2      	; 0x78e <CAN_receiveMessage+0x3a>
     78c:	9f c0       	rjmp	.+318    	; 0x8cc <CAN_receiveMessage+0x178>
     78e:	61 e6       	ldi	r22, 0x61	; 97
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	5b d4       	rcall	.+2230   	; 0x104c <MCP2515_read>
     796:	88 2f       	mov	r24, r24
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	9d 83       	std	Y+5, r25	; 0x05
     79c:	8c 83       	std	Y+4, r24	; 0x04
     79e:	8c 81       	ldd	r24, Y+4	; 0x04
     7a0:	9d 81       	ldd	r25, Y+5	; 0x05
     7a2:	8c 01       	movw	r16, r24
     7a4:	00 0f       	add	r16, r16
     7a6:	11 1f       	adc	r17, r17
     7a8:	00 0f       	add	r16, r16
     7aa:	11 1f       	adc	r17, r17
     7ac:	00 0f       	add	r16, r16
     7ae:	11 1f       	adc	r17, r17
     7b0:	62 e6       	ldi	r22, 0x62	; 98
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	4a d4       	rcall	.+2196   	; 0x104c <MCP2515_read>
     7b8:	82 95       	swap	r24
     7ba:	86 95       	lsr	r24
     7bc:	87 70       	andi	r24, 0x07	; 7
     7be:	88 2f       	mov	r24, r24
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	80 2b       	or	r24, r16
     7c4:	91 2b       	or	r25, r17
     7c6:	9d 83       	std	Y+5, r25	; 0x05
     7c8:	8c 83       	std	Y+4, r24	; 0x04
     7ca:	65 e6       	ldi	r22, 0x65	; 101
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	3d d4       	rcall	.+2170   	; 0x104c <MCP2515_read>
     7d2:	8e 83       	std	Y+6, r24	; 0x06
     7d4:	86 e6       	ldi	r24, 0x66	; 102
     7d6:	89 83       	std	Y+1, r24	; 0x01
     7d8:	1a 82       	std	Y+2, r1	; 0x02
     7da:	14 c0       	rjmp	.+40     	; 0x804 <CAN_receiveMessage+0xb0>
     7dc:	8a 81       	ldd	r24, Y+2	; 0x02
     7de:	08 2f       	mov	r16, r24
     7e0:	10 e0       	ldi	r17, 0x00	; 0
     7e2:	69 81       	ldd	r22, Y+1	; 0x01
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	31 d4       	rcall	.+2146   	; 0x104c <MCP2515_read>
     7ea:	28 2f       	mov	r18, r24
     7ec:	ce 01       	movw	r24, r28
     7ee:	07 96       	adiw	r24, 0x07	; 7
     7f0:	80 0f       	add	r24, r16
     7f2:	91 1f       	adc	r25, r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	20 83       	st	Z, r18
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	8f 5f       	subi	r24, 0xFF	; 255
     7fc:	89 83       	std	Y+1, r24	; 0x01
     7fe:	8a 81       	ldd	r24, Y+2	; 0x02
     800:	8f 5f       	subi	r24, 0xFF	; 255
     802:	8a 83       	std	Y+2, r24	; 0x02
     804:	9e 81       	ldd	r25, Y+6	; 0x06
     806:	8a 81       	ldd	r24, Y+2	; 0x02
     808:	89 17       	cp	r24, r25
     80a:	40 f3       	brcs	.-48     	; 0x7dc <CAN_receiveMessage+0x88>
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	41 e0       	ldi	r20, 0x01	; 1
     810:	6c e2       	ldi	r22, 0x2C	; 44
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	50 d4       	rcall	.+2208   	; 0x10b8 <MCP2515_bitModify>
     818:	8f 85       	ldd	r24, Y+15	; 0x0f
     81a:	98 89       	ldd	r25, Y+16	; 0x10
     81c:	2b e0       	ldi	r18, 0x0B	; 11
     81e:	fe 01       	movw	r30, r28
     820:	34 96       	adiw	r30, 0x04	; 4
     822:	dc 01       	movw	r26, r24
     824:	01 90       	ld	r0, Z+
     826:	0d 92       	st	X+, r0
     828:	2a 95       	dec	r18
     82a:	e1 f7       	brne	.-8      	; 0x824 <CAN_receiveMessage+0xd0>
     82c:	4f c0       	rjmp	.+158    	; 0x8cc <CAN_receiveMessage+0x178>
     82e:	61 e7       	ldi	r22, 0x71	; 113
     830:	80 e0       	ldi	r24, 0x00	; 0
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	0b d4       	rcall	.+2070   	; 0x104c <MCP2515_read>
     836:	88 2f       	mov	r24, r24
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	9d 83       	std	Y+5, r25	; 0x05
     83c:	8c 83       	std	Y+4, r24	; 0x04
     83e:	8c 81       	ldd	r24, Y+4	; 0x04
     840:	9d 81       	ldd	r25, Y+5	; 0x05
     842:	8c 01       	movw	r16, r24
     844:	00 0f       	add	r16, r16
     846:	11 1f       	adc	r17, r17
     848:	00 0f       	add	r16, r16
     84a:	11 1f       	adc	r17, r17
     84c:	00 0f       	add	r16, r16
     84e:	11 1f       	adc	r17, r17
     850:	62 e7       	ldi	r22, 0x72	; 114
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	fa d3       	rcall	.+2036   	; 0x104c <MCP2515_read>
     858:	82 95       	swap	r24
     85a:	86 95       	lsr	r24
     85c:	87 70       	andi	r24, 0x07	; 7
     85e:	88 2f       	mov	r24, r24
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	80 2b       	or	r24, r16
     864:	91 2b       	or	r25, r17
     866:	9d 83       	std	Y+5, r25	; 0x05
     868:	8c 83       	std	Y+4, r24	; 0x04
     86a:	65 e7       	ldi	r22, 0x75	; 117
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	ed d3       	rcall	.+2010   	; 0x104c <MCP2515_read>
     872:	8e 83       	std	Y+6, r24	; 0x06
     874:	86 e7       	ldi	r24, 0x76	; 118
     876:	89 83       	std	Y+1, r24	; 0x01
     878:	1b 82       	std	Y+3, r1	; 0x03
     87a:	14 c0       	rjmp	.+40     	; 0x8a4 <CAN_receiveMessage+0x150>
     87c:	8b 81       	ldd	r24, Y+3	; 0x03
     87e:	08 2f       	mov	r16, r24
     880:	10 e0       	ldi	r17, 0x00	; 0
     882:	69 81       	ldd	r22, Y+1	; 0x01
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	e1 d3       	rcall	.+1986   	; 0x104c <MCP2515_read>
     88a:	28 2f       	mov	r18, r24
     88c:	ce 01       	movw	r24, r28
     88e:	07 96       	adiw	r24, 0x07	; 7
     890:	80 0f       	add	r24, r16
     892:	91 1f       	adc	r25, r17
     894:	fc 01       	movw	r30, r24
     896:	20 83       	st	Z, r18
     898:	89 81       	ldd	r24, Y+1	; 0x01
     89a:	8f 5f       	subi	r24, 0xFF	; 255
     89c:	89 83       	std	Y+1, r24	; 0x01
     89e:	8b 81       	ldd	r24, Y+3	; 0x03
     8a0:	8f 5f       	subi	r24, 0xFF	; 255
     8a2:	8b 83       	std	Y+3, r24	; 0x03
     8a4:	9e 81       	ldd	r25, Y+6	; 0x06
     8a6:	8b 81       	ldd	r24, Y+3	; 0x03
     8a8:	89 17       	cp	r24, r25
     8aa:	40 f3       	brcs	.-48     	; 0x87c <CAN_receiveMessage+0x128>
     8ac:	20 e0       	ldi	r18, 0x00	; 0
     8ae:	42 e0       	ldi	r20, 0x02	; 2
     8b0:	6c e2       	ldi	r22, 0x2C	; 44
     8b2:	80 e0       	ldi	r24, 0x00	; 0
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	00 d4       	rcall	.+2048   	; 0x10b8 <MCP2515_bitModify>
     8b8:	8f 85       	ldd	r24, Y+15	; 0x0f
     8ba:	98 89       	ldd	r25, Y+16	; 0x10
     8bc:	2b e0       	ldi	r18, 0x0B	; 11
     8be:	fe 01       	movw	r30, r28
     8c0:	34 96       	adiw	r30, 0x04	; 4
     8c2:	dc 01       	movw	r26, r24
     8c4:	01 90       	ld	r0, Z+
     8c6:	0d 92       	st	X+, r0
     8c8:	2a 95       	dec	r18
     8ca:	e1 f7       	brne	.-8      	; 0x8c4 <CAN_receiveMessage+0x170>
     8cc:	8f 85       	ldd	r24, Y+15	; 0x0f
     8ce:	98 89       	ldd	r25, Y+16	; 0x10
     8d0:	61 96       	adiw	r28, 0x11	; 17
     8d2:	0f b6       	in	r0, 0x3f	; 63
     8d4:	f8 94       	cli
     8d6:	de bf       	out	0x3e, r29	; 62
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	cd bf       	out	0x3d, r28	; 61
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	08 95       	ret

000008e6 <CAN_printMessage>:
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	00 d0       	rcall	.+0      	; 0x8ec <CAN_printMessage+0x6>
     8ec:	1f 92       	push	r1
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
     8f2:	9b 83       	std	Y+3, r25	; 0x03
     8f4:	8a 83       	std	Y+2, r24	; 0x02
     8f6:	8a 81       	ldd	r24, Y+2	; 0x02
     8f8:	9b 81       	ldd	r25, Y+3	; 0x03
     8fa:	fc 01       	movw	r30, r24
     8fc:	82 81       	ldd	r24, Z+2	; 0x02
     8fe:	28 2f       	mov	r18, r24
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	8a 81       	ldd	r24, Y+2	; 0x02
     904:	9b 81       	ldd	r25, Y+3	; 0x03
     906:	fc 01       	movw	r30, r24
     908:	80 81       	ld	r24, Z
     90a:	91 81       	ldd	r25, Z+1	; 0x01
     90c:	43 2f       	mov	r20, r19
     90e:	4f 93       	push	r20
     910:	2f 93       	push	r18
     912:	29 2f       	mov	r18, r25
     914:	2f 93       	push	r18
     916:	8f 93       	push	r24
     918:	83 e1       	ldi	r24, 0x13	; 19
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	89 2f       	mov	r24, r25
     91e:	8f 93       	push	r24
     920:	83 e1       	ldi	r24, 0x13	; 19
     922:	91 e0       	ldi	r25, 0x01	; 1
     924:	8f 93       	push	r24
     926:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <printf>
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	19 82       	std	Y+1, r1	; 0x01
     938:	1f c0       	rjmp	.+62     	; 0x978 <CAN_printMessage+0x92>
     93a:	89 81       	ldd	r24, Y+1	; 0x01
     93c:	88 2f       	mov	r24, r24
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	2a 81       	ldd	r18, Y+2	; 0x02
     942:	3b 81       	ldd	r19, Y+3	; 0x03
     944:	82 0f       	add	r24, r18
     946:	93 1f       	adc	r25, r19
     948:	03 96       	adiw	r24, 0x03	; 3
     94a:	fc 01       	movw	r30, r24
     94c:	80 81       	ld	r24, Z
     94e:	88 2f       	mov	r24, r24
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	29 2f       	mov	r18, r25
     954:	2f 93       	push	r18
     956:	8f 93       	push	r24
     958:	8f e3       	ldi	r24, 0x3F	; 63
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	89 2f       	mov	r24, r25
     95e:	8f 93       	push	r24
     960:	8f e3       	ldi	r24, 0x3F	; 63
     962:	91 e0       	ldi	r25, 0x01	; 1
     964:	8f 93       	push	r24
     966:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <printf>
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	0f 90       	pop	r0
     972:	89 81       	ldd	r24, Y+1	; 0x01
     974:	8f 5f       	subi	r24, 0xFF	; 255
     976:	89 83       	std	Y+1, r24	; 0x01
     978:	8a 81       	ldd	r24, Y+2	; 0x02
     97a:	9b 81       	ldd	r25, Y+3	; 0x03
     97c:	fc 01       	movw	r30, r24
     97e:	92 81       	ldd	r25, Z+2	; 0x02
     980:	89 81       	ldd	r24, Y+1	; 0x01
     982:	89 17       	cp	r24, r25
     984:	d0 f2       	brcs	.-76     	; 0x93a <CAN_printMessage+0x54>
     986:	8a e0       	ldi	r24, 0x0A	; 10
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <putchar>
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	08 95       	ret

0000099a <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     99a:	95 b7       	in	r25, 0x35	; 53
     99c:	90 68       	ori	r25, 0x80	; 128
     99e:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     9a0:	96 b7       	in	r25, 0x36	; 54
     9a2:	98 60       	ori	r25, 0x08	; 8
     9a4:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     9a6:	88 23       	and	r24, r24
     9a8:	19 f0       	breq	.+6      	; 0x9b0 <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     9aa:	80 b7       	in	r24, 0x30	; 48
     9ac:	80 62       	ori	r24, 0x20	; 32
     9ae:	80 bf       	out	0x30, r24	; 48
     9b0:	08 95       	ret

000009b2 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     9b2:	fc 01       	movw	r30, r24
     9b4:	80 81       	ld	r24, Z
	return val;
}
     9b6:	08 95       	ret

000009b8 <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     9b8:	fc 01       	movw	r30, r24
     9ba:	60 83       	st	Z, r22
     9bc:	08 95       	ret

000009be <Game_init>:
static uint8_t JoyPos;
static uint8_t SliPos;
static uint8_t ButtonRight;

void Game_init()
{
     9be:	0f 93       	push	r16
     9c0:	1f 93       	push	r17
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
	// declare score and lives
	score = 0;
     9c6:	10 92 0b 03 	sts	0x030B, r1
     9ca:	10 92 0a 03 	sts	0x030A, r1
	lives = 3;
     9ce:	83 e0       	ldi	r24, 0x03	; 3
     9d0:	80 93 09 03 	sts	0x0309, r24
	
	// write Title to Screen
	OLED_clear();
     9d4:	ed d5       	rcall	.+3034   	; 0x15b0 <OLED_clear>
     9d6:	64 e0       	ldi	r22, 0x04	; 4
	OLED_goto(0,4);
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	cb d5       	rcall	.+2966   	; 0x1576 <OLED_goto>
     9e0:	8f e7       	ldi	r24, 0x7F	; 127
     9e2:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("** Ping-Pong **");
     9e4:	1e d6       	rcall	.+3132   	; 0x1622 <OLED_printString>
     9e6:	64 e1       	ldi	r22, 0x14	; 20
     9e8:	70 e0       	ldi	r23, 0x00	; 0
     9ea:	83 e0       	ldi	r24, 0x03	; 3
		
	// write to Screen
	OLED_goto(3,LIVES_POS-16);
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	c3 d5       	rcall	.+2950   	; 0x1576 <OLED_goto>
     9f0:	8f e8       	ldi	r24, 0x8F	; 143
     9f2:	91 e0       	ldi	r25, 0x01	; 1
     9f4:	16 d6       	rcall	.+3116   	; 0x1622 <OLED_printString>
     9f6:	6b e3       	ldi	r22, 0x3B	; 59
	OLED_printString("Lives");
     9f8:	70 e0       	ldi	r23, 0x00	; 0
     9fa:	83 e0       	ldi	r24, 0x03	; 3
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	bb d5       	rcall	.+2934   	; 0x1576 <OLED_goto>
	OLED_goto(3,SCORE_POS-16);
     a00:	85 e9       	ldi	r24, 0x95	; 149
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	0e d6       	rcall	.+3100   	; 0x1622 <OLED_printString>
     a06:	64 e2       	ldi	r22, 0x24	; 36
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	84 e0       	ldi	r24, 0x04	; 4
	OLED_printString("Score");
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	b3 d5       	rcall	.+2918   	; 0x1576 <OLED_goto>
     a10:	80 91 09 03 	lds	r24, 0x0309
		
	// write Numbers
	OLED_goto(4, LIVES_POS);
     a14:	1f 92       	push	r1
     a16:	8f 93       	push	r24
     a18:	0c e7       	ldi	r16, 0x7C	; 124
     a1a:	11 e0       	ldi	r17, 0x01	; 1
     a1c:	1f 93       	push	r17
     a1e:	0f 93       	push	r16
	sprintf(str, "%d", lives);
     a20:	cc e0       	ldi	r28, 0x0C	; 12
     a22:	d3 e0       	ldi	r29, 0x03	; 3
     a24:	df 93       	push	r29
     a26:	cf 93       	push	r28
     a28:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <sprintf>
     a2c:	ce 01       	movw	r24, r28
     a2e:	f9 d5       	rcall	.+3058   	; 0x1622 <OLED_printString>
     a30:	6b e4       	ldi	r22, 0x4B	; 75
     a32:	70 e0       	ldi	r23, 0x00	; 0
     a34:	84 e0       	ldi	r24, 0x04	; 4
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	9e d5       	rcall	.+2876   	; 0x1576 <OLED_goto>
     a3a:	80 91 0b 03 	lds	r24, 0x030B
	OLED_printString(str);
     a3e:	8f 93       	push	r24
     a40:	80 91 0a 03 	lds	r24, 0x030A
	OLED_goto(4, SCORE_POS);
     a44:	8f 93       	push	r24
     a46:	1f 93       	push	r17
     a48:	0f 93       	push	r16
     a4a:	df 93       	push	r29
     a4c:	cf 93       	push	r28
	sprintf(str, "%d", score);
     a4e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <sprintf>
     a52:	ce 01       	movw	r24, r28
     a54:	e6 d5       	rcall	.+3020   	; 0x1622 <OLED_printString>
     a56:	8d b7       	in	r24, 0x3d	; 61
     a58:	9e b7       	in	r25, 0x3e	; 62
     a5a:	0c 96       	adiw	r24, 0x0c	; 12
     a5c:	0f b6       	in	r0, 0x3f	; 63
     a5e:	f8 94       	cli
     a60:	9e bf       	out	0x3e, r25	; 62
     a62:	0f be       	out	0x3f, r0	; 63
     a64:	8d bf       	out	0x3d, r24	; 61
	OLED_printString(str);	
     a66:	df 91       	pop	r29
     a68:	cf 91       	pop	r28
     a6a:	1f 91       	pop	r17
     a6c:	0f 91       	pop	r16
     a6e:	08 95       	ret

00000a70 <Game_updateLives>:
     a70:	80 91 09 03 	lds	r24, 0x0309
     a74:	81 50       	subi	r24, 0x01	; 1
     a76:	80 93 09 03 	sts	0x0309, r24
     a7a:	64 e2       	ldi	r22, 0x24	; 36
}
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	84 e0       	ldi	r24, 0x04	; 4
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	79 d5       	rcall	.+2802   	; 0x1576 <OLED_goto>
     a84:	80 91 09 03 	lds	r24, 0x0309

void Game_updateLives()
{
	lives--;
	OLED_goto(4, LIVES_POS);
	sprintf(str, "%d", lives);
     a88:	1f 92       	push	r1
     a8a:	8f 93       	push	r24
     a8c:	8c e7       	ldi	r24, 0x7C	; 124
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	9f 93       	push	r25
     a92:	8f 93       	push	r24
     a94:	8c e0       	ldi	r24, 0x0C	; 12
     a96:	93 e0       	ldi	r25, 0x03	; 3
     a98:	9f 93       	push	r25
     a9a:	8f 93       	push	r24
     a9c:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <sprintf>
     aa0:	8c e0       	ldi	r24, 0x0C	; 12
	OLED_printString(str);
     aa2:	93 e0       	ldi	r25, 0x03	; 3
     aa4:	be d5       	rcall	.+2940   	; 0x1622 <OLED_printString>
     aa6:	6e e1       	ldi	r22, 0x1E	; 30
     aa8:	70 e0       	ldi	r23, 0x00	; 0
	
	OLED_goto(7, 30);
     aaa:	87 e0       	ldi	r24, 0x07	; 7
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	63 d5       	rcall	.+2758   	; 0x1576 <OLED_goto>
     ab0:	8b e9       	ldi	r24, 0x9B	; 155
     ab2:	91 e0       	ldi	r25, 0x01	; 1
     ab4:	b6 d5       	rcall	.+2924   	; 0x1622 <OLED_printString>
	OLED_printString("Wait");
     ab6:	0f 90       	pop	r0
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	0f 90       	pop	r0
     ac0:	0f 90       	pop	r0
     ac2:	08 95       	ret

00000ac4 <Game_play>:
     ac4:	2f 92       	push	r2
     ac6:	3f 92       	push	r3
     ac8:	4f 92       	push	r4
     aca:	5f 92       	push	r5
}

void Game_play(uint8_t* SPIreceivedFlag)
{
     acc:	6f 92       	push	r6
     ace:	7f 92       	push	r7
     ad0:	8f 92       	push	r8
     ad2:	9f 92       	push	r9
     ad4:	af 92       	push	r10
     ad6:	bf 92       	push	r11
     ad8:	cf 92       	push	r12
     ada:	df 92       	push	r13
     adc:	ef 92       	push	r14
     ade:	ff 92       	push	r15
     ae0:	0f 93       	push	r16
     ae2:	1f 93       	push	r17
     ae4:	cf 93       	push	r28
     ae6:	df 93       	push	r29
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
     aec:	6e 97       	sbiw	r28, 0x1e	; 30
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
     af8:	7c 01       	movw	r14, r24
		{
			ButtonRight = 0;
		}
		
		// send Positions to Node 2
		message2send.id = 23;
     afa:	0b e2       	ldi	r16, 0x2B	; 43
     afc:	13 e0       	ldi	r17, 0x03	; 3
     afe:	0f 2e       	mov	r0, r31
     b00:	f7 e1       	ldi	r31, 0x17	; 23
     b02:	8f 2e       	mov	r8, r31
     b04:	91 2c       	mov	r9, r1
     b06:	f0 2d       	mov	r31, r0
		message2send.length = 3;
     b08:	0f 2e       	mov	r0, r31
     b0a:	fd e2       	ldi	r31, 0x2D	; 45
     b0c:	af 2e       	mov	r10, r31
     b0e:	f3 e0       	ldi	r31, 0x03	; 3
     b10:	bf 2e       	mov	r11, r31
     b12:	f0 2d       	mov	r31, r0
		message2send.data[0] = JoyPos;
     b14:	0f 2e       	mov	r0, r31
     b16:	fe e2       	ldi	r31, 0x2E	; 46
     b18:	cf 2e       	mov	r12, r31
     b1a:	f3 e0       	ldi	r31, 0x03	; 3
     b1c:	df 2e       	mov	r13, r31
     b1e:	f0 2d       	mov	r31, r0
		message2send.data[1] = SliPos;
     b20:	0f 2e       	mov	r0, r31
     b22:	ff e2       	ldi	r31, 0x2F	; 47
     b24:	6f 2e       	mov	r6, r31
     b26:	f3 e0       	ldi	r31, 0x03	; 3
     b28:	7f 2e       	mov	r7, r31
     b2a:	f0 2d       	mov	r31, r0
		message2send.data[2] = ButtonRight;
     b2c:	0f 2e       	mov	r0, r31
     b2e:	f0 e3       	ldi	r31, 0x30	; 48
     b30:	4f 2e       	mov	r4, r31
     b32:	f3 e0       	ldi	r31, 0x03	; 3
     b34:	5f 2e       	mov	r5, r31
     b36:	f0 2d       	mov	r31, r0
		{
			ButtonRight = 0;
		}
		
		// send Positions to Node 2
		message2send.id = 23;
     b38:	20 2e       	mov	r2, r16
     b3a:	31 2e       	mov	r3, r17
	OLED_printString("Wait");
}

void Game_play(uint8_t* SPIreceivedFlag)
{
	while(lives > 0)
     b3c:	5a c0       	rjmp	.+180    	; 0xbf2 <Game_play+0x12e>
	{
		// call for Joystick and Slider positions
		JoyPos = JOY_getPosition().X_abs;
     b3e:	29 d2       	rcall	.+1106   	; 0xf92 <JOY_getPosition>
     b40:	29 83       	std	Y+1, r18	; 0x01
     b42:	3a 83       	std	Y+2, r19	; 0x02
     b44:	4b 83       	std	Y+3, r20	; 0x03
     b46:	5c 83       	std	Y+4, r21	; 0x04
     b48:	6d 83       	std	Y+5, r22	; 0x05
     b4a:	7e 83       	std	Y+6, r23	; 0x06
     b4c:	8f 83       	std	Y+7, r24	; 0x07
     b4e:	98 87       	std	Y+8, r25	; 0x08
     b50:	20 93 08 03 	sts	0x0308, r18
     b54:	0e d7       	rcall	.+3612   	; 0x1972 <SLI_getPosition>
		SliPos = SLI_getPosition().R_per;
     b56:	80 93 07 03 	sts	0x0307, r24
     b5a:	2a 9b       	sbis	0x05, 2	; 5
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <Game_play+0xa2>
		
		// Check for pushed Button
		if((PINE & (1<<PE2)))
     b5e:	21 e0       	ldi	r18, 0x01	; 1
     b60:	20 93 06 03 	sts	0x0306, r18
		{
			ButtonRight = 1;
     b64:	02 c0       	rjmp	.+4      	; 0xb6a <Game_play+0xa6>
     b66:	10 92 06 03 	sts	0x0306, r1
		}
		else
		{
			ButtonRight = 0;
     b6a:	f8 01       	movw	r30, r16
     b6c:	91 82       	std	Z+1, r9	; 0x01
		}
		
		// send Positions to Node 2
		message2send.id = 23;
     b6e:	80 82       	st	Z, r8
     b70:	23 e0       	ldi	r18, 0x03	; 3
     b72:	f5 01       	movw	r30, r10
		message2send.length = 3;
     b74:	20 83       	st	Z, r18
     b76:	90 91 08 03 	lds	r25, 0x0308
		message2send.data[0] = JoyPos;
     b7a:	f6 01       	movw	r30, r12
     b7c:	90 83       	st	Z, r25
     b7e:	f3 01       	movw	r30, r6
     b80:	80 83       	st	Z, r24
		message2send.data[1] = SliPos;
     b82:	80 91 06 03 	lds	r24, 0x0306
		message2send.data[2] = ButtonRight;
     b86:	f2 01       	movw	r30, r4
     b88:	80 83       	st	Z, r24
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	82 2d       	mov	r24, r2
		
		CAN_sendMessage(&message2send, 0);
     b8e:	93 2d       	mov	r25, r3
     b90:	78 dd       	rcall	.-1296   	; 0x682 <CAN_sendMessage>
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 ef       	ldi	r25, 0xF0	; 240
     b96:	01 97       	sbiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b98:	f1 f7       	brne	.-4      	; 0xb96 <Game_play+0xd2>
     b9a:	f7 01       	movw	r30, r14
     b9c:	80 81       	ld	r24, Z
     b9e:	88 23       	and	r24, r24
		_delay_ms(50);
		
		// CAN reception
		if(*SPIreceivedFlag)
     ba0:	41 f1       	breq	.+80     	; 0xbf2 <Game_play+0x12e>
     ba2:	6c e2       	ldi	r22, 0x2C	; 44
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	52 d2       	rcall	.+1188   	; 0x104c <MCP2515_read>
		{
		
		 	uint8_t receiveBufferStatus;
		 	// check for message reception
		 	if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
     ba8:	83 70       	andi	r24, 0x03	; 3
     baa:	19 f1       	breq	.+70     	; 0xbf2 <Game_play+0x12e>
     bac:	68 2f       	mov	r22, r24
     bae:	ce 01       	movw	r24, r28
     bb0:	44 96       	adiw	r24, 0x14	; 20
     bb2:	d0 dd       	rcall	.-1120   	; 0x754 <CAN_receiveMessage>
		 	{
		 		struct can_message receivedMessage;
		 		receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     bb4:	8b e0       	ldi	r24, 0x0B	; 11
     bb6:	fe 01       	movw	r30, r28
     bb8:	74 96       	adiw	r30, 0x14	; 20
     bba:	de 01       	movw	r26, r28
     bbc:	19 96       	adiw	r26, 0x09	; 9
     bbe:	01 90       	ld	r0, Z+
     bc0:	0d 92       	st	X+, r0
     bc2:	8a 95       	dec	r24
     bc4:	e1 f7       	brne	.-8      	; 0xbbe <Game_play+0xfa>
     bc6:	ce 01       	movw	r24, r28
     bc8:	09 96       	adiw	r24, 0x09	; 9
     bca:	8d de       	rcall	.-742    	; 0x8e6 <CAN_printMessage>
     bcc:	89 85       	ldd	r24, Y+9	; 0x09
     bce:	9a 85       	ldd	r25, Y+10	; 0x0a
		
		 		CAN_printMessage(&receivedMessage);
     bd0:	45 97       	sbiw	r24, 0x15	; 21
     bd2:	09 f4       	brne	.+2      	; 0xbd6 <Game_play+0x112>
     bd4:	4d df       	rcall	.-358    	; 0xa70 <Game_updateLives>
     bd6:	89 85       	ldd	r24, Y+9	; 0x09
		
		 		if(receivedMessage.id == 21)
     bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bda:	0d 97       	sbiw	r24, 0x0d	; 13
     bdc:	41 f4       	brne	.+16     	; 0xbee <Game_play+0x12a>
     bde:	6e e1       	ldi	r22, 0x1E	; 30
		 		{
		 			Game_updateLives();
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	87 e0       	ldi	r24, 0x07	; 7
		 		}
				 
				if(receivedMessage.id == 13)
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	c7 d4       	rcall	.+2446   	; 0x1576 <OLED_goto>
     be8:	80 ea       	ldi	r24, 0xA0	; 160
     bea:	91 e0       	ldi	r25, 0x01	; 1
				{
					OLED_goto(7, 30);
     bec:	1a d5       	rcall	.+2612   	; 0x1622 <OLED_printString>
     bee:	f7 01       	movw	r30, r14
     bf0:	10 82       	st	Z, r1
     bf2:	80 91 09 03 	lds	r24, 0x0309
     bf6:	81 11       	cpse	r24, r1
					OLED_printString("    ");
     bf8:	a2 cf       	rjmp	.-188    	; 0xb3e <Game_play+0x7a>
     bfa:	da d4       	rcall	.+2484   	; 0x15b0 <OLED_clear>
     bfc:	65 e0       	ldi	r22, 0x05	; 5
     bfe:	70 e0       	ldi	r23, 0x00	; 0
				}
		
		 		*SPIreceivedFlag = 0;
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	90 e0       	ldi	r25, 0x00	; 0
	OLED_printString("Wait");
}

void Game_play(uint8_t* SPIreceivedFlag)
{
	while(lives > 0)
     c04:	b8 d4       	rcall	.+2416   	; 0x1576 <OLED_goto>
     c06:	85 ea       	ldi	r24, 0xA5	; 165
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	0b d5       	rcall	.+2582   	; 0x1622 <OLED_printString>
		 		*SPIreceivedFlag = 0;
		 	}
		}
	}
	
	OLED_clear();
     c0c:	65 e0       	ldi	r22, 0x05	; 5
     c0e:	70 e0       	ldi	r23, 0x00	; 0
	OLED_goto(3,5);
     c10:	85 e0       	ldi	r24, 0x05	; 5
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	b0 d4       	rcall	.+2400   	; 0x1576 <OLED_goto>
     c16:	80 91 0b 03 	lds	r24, 0x030B
     c1a:	8f 93       	push	r24
	OLED_printString("GAME OVER");
     c1c:	80 91 0a 03 	lds	r24, 0x030A
     c20:	8f 93       	push	r24
     c22:	8c e7       	ldi	r24, 0x7C	; 124
	OLED_goto(5,5);
     c24:	91 e0       	ldi	r25, 0x01	; 1
     c26:	9f 93       	push	r25
     c28:	8f 93       	push	r24
     c2a:	8c e0       	ldi	r24, 0x0C	; 12
     c2c:	93 e0       	ldi	r25, 0x03	; 3
     c2e:	9f 93       	push	r25
	sprintf(str, "%d", score);
     c30:	8f 93       	push	r24
     c32:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <sprintf>
     c36:	8c e0       	ldi	r24, 0x0C	; 12
     c38:	93 e0       	ldi	r25, 0x03	; 3
     c3a:	f3 d4       	rcall	.+2534   	; 0x1622 <OLED_printString>
     c3c:	ff ef       	ldi	r31, 0xFF	; 255
     c3e:	2f ef       	ldi	r18, 0xFF	; 255
     c40:	8d e1       	ldi	r24, 0x1D	; 29
     c42:	f1 50       	subi	r31, 0x01	; 1
     c44:	20 40       	sbci	r18, 0x00	; 0
     c46:	80 40       	sbci	r24, 0x00	; 0
     c48:	e1 f7       	brne	.-8      	; 0xc42 <Game_play+0x17e>
     c4a:	00 c0       	rjmp	.+0      	; 0xc4c <Game_play+0x188>
     c4c:	00 00       	nop
     c4e:	0f 90       	pop	r0
	OLED_printString(str);
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	0f 90       	pop	r0
     c56:	0f 90       	pop	r0
     c58:	0f 90       	pop	r0
     c5a:	6e 96       	adiw	r28, 0x1e	; 30
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	ff 90       	pop	r15
     c70:	ef 90       	pop	r14
     c72:	df 90       	pop	r13
     c74:	cf 90       	pop	r12
	
	_delay_ms(2000);
     c76:	bf 90       	pop	r11
     c78:	af 90       	pop	r10
     c7a:	9f 90       	pop	r9
     c7c:	8f 90       	pop	r8
     c7e:	7f 90       	pop	r7
     c80:	6f 90       	pop	r6
     c82:	5f 90       	pop	r5
     c84:	4f 90       	pop	r4
     c86:	3f 90       	pop	r3
     c88:	2f 90       	pop	r2
     c8a:	08 95       	ret

00000c8c <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     c8c:	10 92 11 03 	sts	0x0311, r1
     c90:	10 92 10 03 	sts	0x0310, r1
	currentPosition.Y_abs = 0;
     c94:	10 92 13 03 	sts	0x0313, r1
     c98:	10 92 12 03 	sts	0x0312, r1
	currentPosition.X_per = 0;
     c9c:	10 92 15 03 	sts	0x0315, r1
     ca0:	10 92 14 03 	sts	0x0314, r1
	currentPosition.Y_per = 0;
     ca4:	10 92 17 03 	sts	0x0317, r1
     ca8:	10 92 16 03 	sts	0x0316, r1
	currentDirection = CENTRE;
     cac:	10 92 0f 03 	sts	0x030F, r1
     cb0:	08 95       	ret

00000cb2 <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     cb6:	7c d4       	rcall	.+2296   	; 0x15b0 <OLED_clear>
     cb8:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	5a d4       	rcall	.+2228   	; 0x1576 <OLED_goto>
     cc2:	8f ea       	ldi	r24, 0xAF	; 175
     cc4:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     cc6:	ad d4       	rcall	.+2394   	; 0x1622 <OLED_printString>
     cc8:	2f ef       	ldi	r18, 0xFF	; 255
     cca:	8f ef       	ldi	r24, 0xFF	; 255
     ccc:	92 e0       	ldi	r25, 0x02	; 2
     cce:	21 50       	subi	r18, 0x01	; 1
     cd0:	80 40       	sbci	r24, 0x00	; 0
     cd2:	90 40       	sbci	r25, 0x00	; 0
     cd4:	e1 f7       	brne	.-8      	; 0xcce <JOY_calibrate+0x1c>
     cd6:	00 c0       	rjmp	.+0      	; 0xcd8 <JOY_calibrate+0x26>
     cd8:	00 c0       	rjmp	.+0      	; 0xcda <JOY_calibrate+0x28>
     cda:	c4 e1       	ldi	r28, 0x14	; 20
     cdc:	d0 e0       	ldi	r29, 0x00	; 0
     cde:	60 91 06 01 	lds	r22, 0x0106
     ce2:	70 91 07 01 	lds	r23, 0x0107
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     ce6:	82 e0       	ldi	r24, 0x02	; 2
     ce8:	97 d6       	rcall	.+3374   	; 0x1a18 <ADC_request>
     cea:	2f ef       	ldi	r18, 0xFF	; 255
     cec:	8f e1       	ldi	r24, 0x1F	; 31
     cee:	91 e0       	ldi	r25, 0x01	; 1
     cf0:	21 50       	subi	r18, 0x01	; 1
     cf2:	80 40       	sbci	r24, 0x00	; 0
     cf4:	90 40       	sbci	r25, 0x00	; 0
     cf6:	e1 f7       	brne	.-8      	; 0xcf0 <JOY_calibrate+0x3e>
     cf8:	00 c0       	rjmp	.+0      	; 0xcfa <JOY_calibrate+0x48>
     cfa:	00 00       	nop
     cfc:	80 91 06 01 	lds	r24, 0x0106
     d00:	90 91 07 01 	lds	r25, 0x0107
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     d04:	b1 d6       	rcall	.+3426   	; 0x1a68 <ADC_read>
     d06:	90 91 0e 01 	lds	r25, 0x010E
     d0a:	98 17       	cp	r25, r24
     d0c:	10 f4       	brcc	.+4      	; 0xd12 <JOY_calibrate+0x60>
     d0e:	80 93 0e 01 	sts	0x010E, r24
		
		if(temp > calR) {calR = temp;}
     d12:	21 97       	sbiw	r28, 0x01	; 1
     d14:	20 97       	sbiw	r28, 0x00	; 0
     d16:	19 f7       	brne	.-58     	; 0xcde <JOY_calibrate+0x2c>
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	81 e0       	ldi	r24, 0x01	; 1
	OLED_goto(0,0);
	OLED_printString("JOY RIGHT");
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	2a d4       	rcall	.+2132   	; 0x1576 <OLED_goto>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_goto(1,0);
     d22:	89 eb       	ldi	r24, 0xB9	; 185
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	7d d4       	rcall	.+2298   	; 0x1622 <OLED_printString>
     d28:	2f ef       	ldi	r18, 0xFF	; 255
     d2a:	8f ef       	ldi	r24, 0xFF	; 255
     d2c:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("JOY LEFT");
     d2e:	21 50       	subi	r18, 0x01	; 1
     d30:	80 40       	sbci	r24, 0x00	; 0
     d32:	90 40       	sbci	r25, 0x00	; 0
     d34:	e1 f7       	brne	.-8      	; 0xd2e <JOY_calibrate+0x7c>
     d36:	00 c0       	rjmp	.+0      	; 0xd38 <JOY_calibrate+0x86>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <JOY_calibrate+0x88>
     d3a:	c4 e1       	ldi	r28, 0x14	; 20
     d3c:	d0 e0       	ldi	r29, 0x00	; 0
     d3e:	60 91 06 01 	lds	r22, 0x0106
     d42:	70 91 07 01 	lds	r23, 0x0107
     d46:	82 e0       	ldi	r24, 0x02	; 2
     d48:	67 d6       	rcall	.+3278   	; 0x1a18 <ADC_request>
     d4a:	2f ef       	ldi	r18, 0xFF	; 255
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     d4c:	8f e1       	ldi	r24, 0x1F	; 31
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	21 50       	subi	r18, 0x01	; 1
     d52:	80 40       	sbci	r24, 0x00	; 0
     d54:	90 40       	sbci	r25, 0x00	; 0
     d56:	e1 f7       	brne	.-8      	; 0xd50 <JOY_calibrate+0x9e>
     d58:	00 c0       	rjmp	.+0      	; 0xd5a <JOY_calibrate+0xa8>
     d5a:	00 00       	nop
     d5c:	80 91 06 01 	lds	r24, 0x0106
     d60:	90 91 07 01 	lds	r25, 0x0107
     d64:	81 d6       	rcall	.+3330   	; 0x1a68 <ADC_read>
     d66:	90 91 0d 01 	lds	r25, 0x010D
     d6a:	89 17       	cp	r24, r25
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     d6c:	10 f4       	brcc	.+4      	; 0xd72 <JOY_calibrate+0xc0>
     d6e:	80 93 0d 01 	sts	0x010D, r24
     d72:	21 97       	sbiw	r28, 0x01	; 1
     d74:	20 97       	sbiw	r28, 0x00	; 0
     d76:	19 f7       	brne	.-58     	; 0xd3e <JOY_calibrate+0x8c>
		
		if(temp < calL) {calL = temp;}
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	82 e0       	ldi	r24, 0x02	; 2
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	fa d3       	rcall	.+2036   	; 0x1576 <OLED_goto>
     d82:	82 ec       	ldi	r24, 0xC2	; 194
     d84:	91 e0       	ldi	r25, 0x01	; 1
	OLED_goto(1,0);
	OLED_printString("JOY LEFT");
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     d86:	4d d4       	rcall	.+2202   	; 0x1622 <OLED_printString>
     d88:	2f ef       	ldi	r18, 0xFF	; 255
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_goto(2,0);
     d8a:	8f ef       	ldi	r24, 0xFF	; 255
     d8c:	92 e0       	ldi	r25, 0x02	; 2
     d8e:	21 50       	subi	r18, 0x01	; 1
     d90:	80 40       	sbci	r24, 0x00	; 0
     d92:	90 40       	sbci	r25, 0x00	; 0
     d94:	e1 f7       	brne	.-8      	; 0xd8e <JOY_calibrate+0xdc>
	OLED_printString("JOY UP");
     d96:	00 c0       	rjmp	.+0      	; 0xd98 <JOY_calibrate+0xe6>
     d98:	00 c0       	rjmp	.+0      	; 0xd9a <JOY_calibrate+0xe8>
     d9a:	c4 e1       	ldi	r28, 0x14	; 20
     d9c:	d0 e0       	ldi	r29, 0x00	; 0
     d9e:	60 91 06 01 	lds	r22, 0x0106
     da2:	70 91 07 01 	lds	r23, 0x0107
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	37 d6       	rcall	.+3182   	; 0x1a18 <ADC_request>
     daa:	2f ef       	ldi	r18, 0xFF	; 255
     dac:	8f e1       	ldi	r24, 0x1F	; 31
     dae:	91 e0       	ldi	r25, 0x01	; 1
     db0:	21 50       	subi	r18, 0x01	; 1
     db2:	80 40       	sbci	r24, 0x00	; 0
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     db4:	90 40       	sbci	r25, 0x00	; 0
     db6:	e1 f7       	brne	.-8      	; 0xdb0 <JOY_calibrate+0xfe>
     db8:	00 c0       	rjmp	.+0      	; 0xdba <JOY_calibrate+0x108>
     dba:	00 00       	nop
     dbc:	80 91 06 01 	lds	r24, 0x0106
     dc0:	90 91 07 01 	lds	r25, 0x0107
     dc4:	51 d6       	rcall	.+3234   	; 0x1a68 <ADC_read>
     dc6:	90 91 0c 01 	lds	r25, 0x010C
     dca:	98 17       	cp	r25, r24
     dcc:	10 f4       	brcc	.+4      	; 0xdd2 <JOY_calibrate+0x120>
     dce:	80 93 0c 01 	sts	0x010C, r24
     dd2:	21 97       	sbiw	r28, 0x01	; 1
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     dd4:	20 97       	sbiw	r28, 0x00	; 0
     dd6:	19 f7       	brne	.-58     	; 0xd9e <JOY_calibrate+0xec>
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	70 e0       	ldi	r23, 0x00	; 0
     ddc:	83 e0       	ldi	r24, 0x03	; 3
     dde:	90 e0       	ldi	r25, 0x00	; 0
		
		if(temp > calUp) {calUp = temp;}
     de0:	ca d3       	rcall	.+1940   	; 0x1576 <OLED_goto>
     de2:	89 ec       	ldi	r24, 0xC9	; 201
     de4:	91 e0       	ldi	r25, 0x01	; 1
     de6:	1d d4       	rcall	.+2106   	; 0x1622 <OLED_printString>
     de8:	2f ef       	ldi	r18, 0xFF	; 255
     dea:	8f ef       	ldi	r24, 0xFF	; 255
     dec:	92 e0       	ldi	r25, 0x02	; 2
	OLED_goto(2,0);
	OLED_printString("JOY UP");
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     dee:	21 50       	subi	r18, 0x01	; 1
     df0:	80 40       	sbci	r24, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_goto(3,0);
     df2:	90 40       	sbci	r25, 0x00	; 0
     df4:	e1 f7       	brne	.-8      	; 0xdee <JOY_calibrate+0x13c>
     df6:	00 c0       	rjmp	.+0      	; 0xdf8 <JOY_calibrate+0x146>
     df8:	00 c0       	rjmp	.+0      	; 0xdfa <JOY_calibrate+0x148>
     dfa:	c4 e1       	ldi	r28, 0x14	; 20
     dfc:	d0 e0       	ldi	r29, 0x00	; 0
	OLED_printString("JOY DOWN");
     dfe:	60 91 06 01 	lds	r22, 0x0106
     e02:	70 91 07 01 	lds	r23, 0x0107
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	07 d6       	rcall	.+3086   	; 0x1a18 <ADC_request>
     e0a:	2f ef       	ldi	r18, 0xFF	; 255
     e0c:	8f e1       	ldi	r24, 0x1F	; 31
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	21 50       	subi	r18, 0x01	; 1
     e12:	80 40       	sbci	r24, 0x00	; 0
     e14:	90 40       	sbci	r25, 0x00	; 0
     e16:	e1 f7       	brne	.-8      	; 0xe10 <JOY_calibrate+0x15e>
     e18:	00 c0       	rjmp	.+0      	; 0xe1a <JOY_calibrate+0x168>
     e1a:	00 00       	nop
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     e1c:	80 91 06 01 	lds	r24, 0x0106
     e20:	90 91 07 01 	lds	r25, 0x0107
     e24:	21 d6       	rcall	.+3138   	; 0x1a68 <ADC_read>
     e26:	90 91 0b 01 	lds	r25, 0x010B
     e2a:	89 17       	cp	r24, r25
     e2c:	10 f4       	brcc	.+4      	; 0xe32 <JOY_calibrate+0x180>
     e2e:	80 93 0b 01 	sts	0x010B, r24
     e32:	21 97       	sbiw	r28, 0x01	; 1
     e34:	20 97       	sbiw	r28, 0x00	; 0
     e36:	19 f7       	brne	.-58     	; 0xdfe <JOY_calibrate+0x14c>
     e38:	20 91 0c 01 	lds	r18, 0x010C
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     e3c:	80 91 0b 01 	lds	r24, 0x010B
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	28 1b       	sub	r18, r24
     e44:	31 09       	sbc	r19, r1
     e46:	c9 01       	movw	r24, r18
		
		if(temp < calDown) {calDown = temp;}
     e48:	99 23       	and	r25, r25
     e4a:	0c f4       	brge	.+2      	; 0xe4e <JOY_calibrate+0x19c>
     e4c:	01 96       	adiw	r24, 0x01	; 1
     e4e:	95 95       	asr	r25
     e50:	87 95       	ror	r24
     e52:	80 93 0a 01 	sts	0x010A, r24
	OLED_goto(3,0);
	OLED_printString("JOY DOWN");
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     e56:	20 91 0e 01 	lds	r18, 0x010E
	}
	
	
	//printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
	
	meanVert = (calUp - calDown)/2;
     e5a:	80 91 0d 01 	lds	r24, 0x010D
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	28 1b       	sub	r18, r24
     e62:	31 09       	sbc	r19, r1
     e64:	c9 01       	movw	r24, r18
     e66:	99 23       	and	r25, r25
     e68:	0c f4       	brge	.+2      	; 0xe6c <JOY_calibrate+0x1ba>
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	95 95       	asr	r25
     e6e:	87 95       	ror	r24
     e70:	80 93 09 01 	sts	0x0109, r24
     e74:	60 e0       	ldi	r22, 0x00	; 0
     e76:	70 e0       	ldi	r23, 0x00	; 0
	meanHor = (calR - calL)/2;
     e78:	84 e0       	ldi	r24, 0x04	; 4
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	7c d3       	rcall	.+1784   	; 0x1576 <OLED_goto>
     e7e:	82 ed       	ldi	r24, 0xD2	; 210
     e80:	91 e0       	ldi	r25, 0x01	; 1
     e82:	cf d3       	rcall	.+1950   	; 0x1622 <OLED_printString>
     e84:	2f ef       	ldi	r18, 0xFF	; 255
     e86:	8f ef       	ldi	r24, 0xFF	; 255
     e88:	9e e0       	ldi	r25, 0x0E	; 14
     e8a:	21 50       	subi	r18, 0x01	; 1
     e8c:	80 40       	sbci	r24, 0x00	; 0
     e8e:	90 40       	sbci	r25, 0x00	; 0
     e90:	e1 f7       	brne	.-8      	; 0xe8a <JOY_calibrate+0x1d8>
     e92:	00 c0       	rjmp	.+0      	; 0xe94 <JOY_calibrate+0x1e2>
     e94:	00 00       	nop
	
	OLED_goto(4,0);
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	08 95       	ret

00000e9c <JOY_requestCurrentPosition>:
     e9c:	88 37       	cpi	r24, 0x78	; 120
     e9e:	39 f4       	brne	.+14     	; 0xeae <JOY_requestCurrentPosition+0x12>
     ea0:	60 91 06 01 	lds	r22, 0x0106
	OLED_printString("CALIB DONE");
     ea4:	70 91 07 01 	lds	r23, 0x0107
     ea8:	82 e0       	ldi	r24, 0x02	; 2
     eaa:	b6 c5       	rjmp	.+2924   	; 0x1a18 <ADC_request>
     eac:	08 95       	ret
     eae:	89 37       	cpi	r24, 0x79	; 121
     eb0:	31 f4       	brne	.+12     	; 0xebe <JOY_requestCurrentPosition+0x22>
     eb2:	60 91 06 01 	lds	r22, 0x0106
     eb6:	70 91 07 01 	lds	r23, 0x0107
     eba:	81 e0       	ldi	r24, 0x01	; 1
	//printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
	_delay_ms(1000);
}
     ebc:	ad c5       	rjmp	.+2906   	; 0x1a18 <ADC_request>
     ebe:	08 95       	ret

00000ec0 <JOY_updatePosition>:
     ec0:	88 37       	cpi	r24, 0x78	; 120
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
	{
		ADC_request(Y_channel, adc_ext_ram);
     ec2:	f9 f4       	brne	.+62     	; 0xf02 <JOY_updatePosition+0x42>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     ec4:	80 91 06 01 	lds	r24, 0x0106
     ec8:	90 91 07 01 	lds	r25, 0x0107
     ecc:	cd d5       	rcall	.+2970   	; 0x1a68 <ADC_read>
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	90 93 11 03 	sts	0x0311, r25
     ed4:	80 93 10 03 	sts	0x0310, r24
     ed8:	20 91 09 01 	lds	r18, 0x0109
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     edc:	60 91 09 01 	lds	r22, 0x0109
     ee0:	ac 01       	movw	r20, r24
     ee2:	42 1b       	sub	r20, r18
     ee4:	51 09       	sbc	r21, r1
     ee6:	9a 01       	movw	r18, r20
     ee8:	44 e6       	ldi	r20, 0x64	; 100
     eea:	42 9f       	mul	r20, r18
     eec:	c0 01       	movw	r24, r0
     eee:	43 9f       	mul	r20, r19
     ef0:	90 0d       	add	r25, r0
     ef2:	11 24       	eor	r1, r1
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	bb d5       	rcall	.+2934   	; 0x1a6e <__divmodhi4>
     ef8:	70 93 15 03 	sts	0x0315, r23
     efc:	60 93 14 03 	sts	0x0314, r22
     f00:	08 95       	ret
     f02:	89 37       	cpi	r24, 0x79	; 121
     f04:	f1 f4       	brne	.+60     	; 0xf42 <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     f06:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     f0a:	90 91 07 01 	lds	r25, 0x0107
     f0e:	ac d5       	rcall	.+2904   	; 0x1a68 <ADC_read>
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	90 93 13 03 	sts	0x0313, r25
     f16:	80 93 12 03 	sts	0x0312, r24
     f1a:	20 91 0a 01 	lds	r18, 0x010A
     f1e:	60 91 0a 01 	lds	r22, 0x010A
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     f22:	ac 01       	movw	r20, r24
     f24:	42 1b       	sub	r20, r18
     f26:	51 09       	sbc	r21, r1
     f28:	9a 01       	movw	r18, r20
     f2a:	44 e6       	ldi	r20, 0x64	; 100
     f2c:	42 9f       	mul	r20, r18
     f2e:	c0 01       	movw	r24, r0
     f30:	43 9f       	mul	r20, r19
     f32:	90 0d       	add	r25, r0
     f34:	11 24       	eor	r1, r1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	9a d5       	rcall	.+2868   	; 0x1a6e <__divmodhi4>
     f3a:	70 93 17 03 	sts	0x0317, r23
     f3e:	60 93 16 03 	sts	0x0316, r22
     f42:	08 95       	ret

00000f44 <JOY_calculateDirection>:
     f44:	80 91 14 03 	lds	r24, 0x0314
     f48:	90 91 15 03 	lds	r25, 0x0315
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     f4c:	8b 35       	cpi	r24, 0x5B	; 91
     f4e:	91 05       	cpc	r25, r1
     f50:	24 f0       	brlt	.+8      	; 0xf5a <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     f52:	83 e0       	ldi	r24, 0x03	; 3
     f54:	80 93 0f 03 	sts	0x030F, r24
     f58:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     f5a:	86 3a       	cpi	r24, 0xA6	; 166
     f5c:	9f 4f       	sbci	r25, 0xFF	; 255
     f5e:	24 f4       	brge	.+8      	; 0xf68 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     f60:	84 e0       	ldi	r24, 0x04	; 4
     f62:	80 93 0f 03 	sts	0x030F, r24
     f66:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     f68:	80 91 16 03 	lds	r24, 0x0316
     f6c:	90 91 17 03 	lds	r25, 0x0317
     f70:	8b 35       	cpi	r24, 0x5B	; 91
     f72:	91 05       	cpc	r25, r1
     f74:	24 f0       	brlt	.+8      	; 0xf7e <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	80 93 0f 03 	sts	0x030F, r24
     f7c:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     f7e:	86 3a       	cpi	r24, 0xA6	; 166
     f80:	9f 4f       	sbci	r25, 0xFF	; 255
     f82:	24 f4       	brge	.+8      	; 0xf8c <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     f84:	82 e0       	ldi	r24, 0x02	; 2
     f86:	80 93 0f 03 	sts	0x030F, r24
     f8a:	08 95       	ret
	else{currentDirection = CENTRE;}
     f8c:	10 92 0f 03 	sts	0x030F, r1
     f90:	08 95       	ret

00000f92 <JOY_getPosition>:

//------------------------------------------------------------------------------
// This function returns the current position of the Joystick.
// It is a struct with the four parameters X_abs, Y_abs, X_per and Y_per
JOY_position_t JOY_getPosition()
{
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	cd b7       	in	r28, 0x3d	; 61
     f98:	de b7       	in	r29, 0x3e	; 62
     f9a:	28 97       	sbiw	r28, 0x08	; 8
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	de bf       	out	0x3e, r29	; 62
     fa2:	0f be       	out	0x3f, r0	; 63
     fa4:	cd bf       	out	0x3d, r28	; 61
	JOY_requestCurrentPosition('x');
     fa6:	88 e7       	ldi	r24, 0x78	; 120
     fa8:	79 df       	rcall	.-270    	; 0xe9c <JOY_requestCurrentPosition>
     faa:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fac:	8a 95       	dec	r24
     fae:	f1 f7       	brne	.-4      	; 0xfac <JOY_getPosition+0x1a>
     fb0:	00 00       	nop
     fb2:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     fb4:	85 df       	rcall	.-246    	; 0xec0 <JOY_updatePosition>
     fb6:	89 e7       	ldi	r24, 0x79	; 121
     fb8:	71 df       	rcall	.-286    	; 0xe9c <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     fba:	82 e6       	ldi	r24, 0x62	; 98
     fbc:	8a 95       	dec	r24
     fbe:	f1 f7       	brne	.-4      	; 0xfbc <JOY_getPosition+0x2a>
     fc0:	00 00       	nop
     fc2:	89 e7       	ldi	r24, 0x79	; 121
     fc4:	7d df       	rcall	.-262    	; 0xec0 <JOY_updatePosition>
     fc6:	88 e0       	ldi	r24, 0x08	; 8
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     fc8:	e0 e1       	ldi	r30, 0x10	; 16
     fca:	f3 e0       	ldi	r31, 0x03	; 3
     fcc:	de 01       	movw	r26, r28
	return currentPosition;
     fce:	11 96       	adiw	r26, 0x01	; 1
     fd0:	01 90       	ld	r0, Z+
     fd2:	0d 92       	st	X+, r0
     fd4:	8a 95       	dec	r24
     fd6:	e1 f7       	brne	.-8      	; 0xfd0 <JOY_getPosition+0x3e>
     fd8:	29 81       	ldd	r18, Y+1	; 0x01
     fda:	3a 81       	ldd	r19, Y+2	; 0x02
     fdc:	4b 81       	ldd	r20, Y+3	; 0x03
     fde:	5c 81       	ldd	r21, Y+4	; 0x04
     fe0:	6d 81       	ldd	r22, Y+5	; 0x05
     fe2:	7e 81       	ldd	r23, Y+6	; 0x06
     fe4:	8f 81       	ldd	r24, Y+7	; 0x07
     fe6:	98 85       	ldd	r25, Y+8	; 0x08
     fe8:	28 96       	adiw	r28, 0x08	; 8
     fea:	0f b6       	in	r0, 0x3f	; 63
}
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
     ff4:	df 91       	pop	r29
     ff6:	cf 91       	pop	r28
     ff8:	08 95       	ret

00000ffa <JOY_getDirection>:
     ffa:	88 e7       	ldi	r24, 0x78	; 120
     ffc:	4f df       	rcall	.-354    	; 0xe9c <JOY_requestCurrentPosition>
     ffe:	82 e6       	ldi	r24, 0x62	; 98
    1000:	8a 95       	dec	r24
    1002:	f1 f7       	brne	.-4      	; 0x1000 <JOY_getDirection+0x6>
    1004:	00 00       	nop
    1006:	88 e7       	ldi	r24, 0x78	; 120
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
	_delay_us(delayConversion);
	JOY_updatePosition('x');
    1008:	5b df       	rcall	.-330    	; 0xec0 <JOY_updatePosition>
    100a:	89 e7       	ldi	r24, 0x79	; 121
    100c:	47 df       	rcall	.-370    	; 0xe9c <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
    100e:	82 e6       	ldi	r24, 0x62	; 98
    1010:	8a 95       	dec	r24
    1012:	f1 f7       	brne	.-4      	; 0x1010 <JOY_getDirection+0x16>
    1014:	00 00       	nop
    1016:	89 e7       	ldi	r24, 0x79	; 121
    1018:	53 df       	rcall	.-346    	; 0xec0 <JOY_updatePosition>
    101a:	94 df       	rcall	.-216    	; 0xf44 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
    101c:	80 91 0f 03 	lds	r24, 0x030F
    1020:	08 95       	ret

00001022 <MCP2515_reset>:
	//printf("finished MCP2515_init\n");
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
    1022:	cf 93       	push	r28
    1024:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
    1026:	cf d4       	rcall	.+2462   	; 0x19c6 <SPI_activateSlave>
    1028:	80 ec       	ldi	r24, 0xC0	; 192
	SPI_send(MCP_RESET);
    102a:	c3 d4       	rcall	.+2438   	; 0x19b2 <SPI_send>
    102c:	8c ec       	ldi	r24, 0xCC	; 204
    102e:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	f1 f7       	brne	.-4      	; 0x1030 <MCP2515_reset+0xe>
    1034:	00 c0       	rjmp	.+0      	; 0x1036 <MCP2515_reset+0x14>
    1036:	00 00       	nop
    1038:	8c 2f       	mov	r24, r28
    103a:	c9 d4       	rcall	.+2450   	; 0x19ce <SPI_deactivateSlave>
	_delay_ms(1);
	SPI_deactivateSlave(slave);
    103c:	8f ef       	ldi	r24, 0xFF	; 255
    103e:	9f e2       	ldi	r25, 0x2F	; 47
    1040:	01 97       	sbiw	r24, 0x01	; 1
    1042:	f1 f7       	brne	.-4      	; 0x1040 <MCP2515_reset+0x1e>
    1044:	00 c0       	rjmp	.+0      	; 0x1046 <MCP2515_reset+0x24>
    1046:	00 00       	nop
    1048:	cf 91       	pop	r28
    104a:	08 95       	ret

0000104c <MCP2515_read>:
    104c:	cf 93       	push	r28
	_delay_ms(10);
}
    104e:	df 93       	push	r29
    1050:	c8 2f       	mov	r28, r24

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
    1052:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
    1054:	b8 d4       	rcall	.+2416   	; 0x19c6 <SPI_activateSlave>
    1056:	83 e0       	ldi	r24, 0x03	; 3
	SPI_send(MCP_READ);
    1058:	ac d4       	rcall	.+2392   	; 0x19b2 <SPI_send>
    105a:	8c ec       	ldi	r24, 0xCC	; 204
    105c:	94 e0       	ldi	r25, 0x04	; 4
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	f1 f7       	brne	.-4      	; 0x105e <MCP2515_read+0x12>
    1062:	00 c0       	rjmp	.+0      	; 0x1064 <MCP2515_read+0x18>
    1064:	00 00       	nop
    1066:	8d 2f       	mov	r24, r29
    1068:	a4 d4       	rcall	.+2376   	; 0x19b2 <SPI_send>
	_delay_ms(1);
	SPI_send(address);
    106a:	a7 d4       	rcall	.+2382   	; 0x19ba <SPI_receive>
    106c:	d8 2f       	mov	r29, r24
    106e:	8c 2f       	mov	r24, r28
	
	uint8_t result;
	result = SPI_receive();
    1070:	ae d4       	rcall	.+2396   	; 0x19ce <SPI_deactivateSlave>
    1072:	8d 2f       	mov	r24, r29
    1074:	df 91       	pop	r29
	
	SPI_deactivateSlave(slave);
    1076:	cf 91       	pop	r28
    1078:	08 95       	ret

0000107a <MCP2515_init>:
    107a:	80 e0       	ldi	r24, 0x00	; 0
	return result;
}
    107c:	d2 df       	rcall	.-92     	; 0x1022 <MCP2515_reset>
    107e:	6e e0       	ldi	r22, 0x0E	; 14
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	e4 df       	rcall	.-56     	; 0x104c <MCP2515_read>
uint8_t MCP2515_init()
{
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
	// Self-test
	uint8_t value;
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
    1084:	98 2f       	mov	r25, r24
    1086:	90 7e       	andi	r25, 0xE0	; 224
	//printf("CANSTAT: %#x\n", value);
	if((value & MODE_MASK) != MODE_CONFIG) 
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 38       	cpi	r25, 0x80	; 128
    108c:	09 f4       	brne	.+2      	; 0x1090 <MCP2515_init+0x16>
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	08 95       	ret

00001092 <MCP2515_write>:
    1092:	1f 93       	push	r17
		return 1;
	}
	//
	//printf("finished MCP2515_init\n");
	return 0;
}
    1094:	cf 93       	push	r28
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_write(SPI_SLAVES slave, uint8_t address, uint8_t data)
{
    1096:	df 93       	push	r29
    1098:	c8 2f       	mov	r28, r24
    109a:	16 2f       	mov	r17, r22
    109c:	d4 2f       	mov	r29, r20
	SPI_activateSlave(slave);
    109e:	93 d4       	rcall	.+2342   	; 0x19c6 <SPI_activateSlave>
    10a0:	82 e0       	ldi	r24, 0x02	; 2
	SPI_send(MCP_WRITE);
    10a2:	87 d4       	rcall	.+2318   	; 0x19b2 <SPI_send>
    10a4:	81 2f       	mov	r24, r17
    10a6:	85 d4       	rcall	.+2314   	; 0x19b2 <SPI_send>
	SPI_send(address);
    10a8:	8d 2f       	mov	r24, r29
    10aa:	83 d4       	rcall	.+2310   	; 0x19b2 <SPI_send>
    10ac:	8c 2f       	mov	r24, r28
	SPI_send(data);
    10ae:	8f d4       	rcall	.+2334   	; 0x19ce <SPI_deactivateSlave>
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
	SPI_deactivateSlave(slave);
    10b4:	1f 91       	pop	r17
    10b6:	08 95       	ret

000010b8 <MCP2515_bitModify>:
    10b8:	0f 93       	push	r16
}
    10ba:	1f 93       	push	r17
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	c8 2f       	mov	r28, r24
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_bitModify(SPI_SLAVES slave, uint8_t register2change, uint8_t mask, uint8_t newValue)
{
    10c2:	06 2f       	mov	r16, r22
    10c4:	14 2f       	mov	r17, r20
    10c6:	d2 2f       	mov	r29, r18
	SPI_activateSlave(slave);
    10c8:	7e d4       	rcall	.+2300   	; 0x19c6 <SPI_activateSlave>
    10ca:	85 e0       	ldi	r24, 0x05	; 5
	
	SPI_send(MCP_BITMOD);
    10cc:	72 d4       	rcall	.+2276   	; 0x19b2 <SPI_send>
    10ce:	80 2f       	mov	r24, r16
    10d0:	70 d4       	rcall	.+2272   	; 0x19b2 <SPI_send>
	SPI_send(register2change);
    10d2:	81 2f       	mov	r24, r17
    10d4:	6e d4       	rcall	.+2268   	; 0x19b2 <SPI_send>
    10d6:	8d 2f       	mov	r24, r29
	SPI_send(mask);
    10d8:	6c d4       	rcall	.+2264   	; 0x19b2 <SPI_send>
    10da:	8c 2f       	mov	r24, r28
    10dc:	78 d4       	rcall	.+2288   	; 0x19ce <SPI_deactivateSlave>
	SPI_send(newValue);
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	1f 91       	pop	r17
	
	SPI_deactivateSlave(slave);
    10e4:	0f 91       	pop	r16
    10e6:	08 95       	ret

000010e8 <startGame>:
static OP_STATE* actualState;
//******************************************************************************************

void startGame()
{
	*actualState = GAME;
    10e8:	e0 91 18 03 	lds	r30, 0x0318
    10ec:	f0 91 19 03 	lds	r31, 0x0319
    10f0:	10 82       	st	Z, r1
	OLED_clear();
    10f2:	5e d2       	rcall	.+1212   	; 0x15b0 <OLED_clear>
    10f4:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	3c d2       	rcall	.+1144   	; 0x1576 <OLED_goto>
    10fe:	8d ed       	ldi	r24, 0xDD	; 221
    1100:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("START");
    1102:	8f d2       	rcall	.+1310   	; 0x1622 <OLED_printString>
    1104:	2f ef       	ldi	r18, 0xFF	; 255
    1106:	8f e7       	ldi	r24, 0x7F	; 127
    1108:	97 e0       	ldi	r25, 0x07	; 7
    110a:	21 50       	subi	r18, 0x01	; 1
    110c:	80 40       	sbci	r24, 0x00	; 0
    110e:	90 40       	sbci	r25, 0x00	; 0
    1110:	e1 f7       	brne	.-8      	; 0x110a <startGame+0x22>
    1112:	00 c0       	rjmp	.+0      	; 0x1114 <startGame+0x2c>
    1114:	00 00       	nop
    1116:	60 e0       	ldi	r22, 0x00	; 0
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	85 e0       	ldi	r24, 0x05	; 5
// 		OLED_printString("*");
// 		_delay_ms(500);
// 	}

	_delay_ms(500);
	OLED_goto(5,0);
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	2b d2       	rcall	.+1110   	; 0x1576 <OLED_goto>
    1120:	83 ee       	ldi	r24, 0xE3	; 227
    1122:	91 e0       	ldi	r25, 0x01	; 1
    1124:	7e d2       	rcall	.+1276   	; 0x1622 <OLED_printString>
    1126:	2f ef       	ldi	r18, 0xFF	; 255
	OLED_printString("YUPII :)");
    1128:	8f ef       	ldi	r24, 0xFF	; 255
    112a:	9c e2       	ldi	r25, 0x2C	; 44
    112c:	21 50       	subi	r18, 0x01	; 1
    112e:	80 40       	sbci	r24, 0x00	; 0
    1130:	90 40       	sbci	r25, 0x00	; 0
    1132:	e1 f7       	brne	.-8      	; 0x112c <startGame+0x44>
    1134:	00 c0       	rjmp	.+0      	; 0x1136 <startGame+0x4e>
    1136:	00 c0       	rjmp	.+0      	; 0x1138 <startGame+0x50>
    1138:	08 95       	ret

0000113a <MENU_addMenuItem>:
    113a:	cf 92       	push	r12
    113c:	df 92       	push	r13
    113e:	ef 92       	push	r14
    1140:	ff 92       	push	r15
    1142:	0f 93       	push	r16
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
    1144:	1f 93       	push	r17
    1146:	cf 93       	push	r28
    1148:	df 93       	push	r29
    114a:	8c 01       	movw	r16, r24
    114c:	7b 01       	movw	r14, r22
    114e:	6a 01       	movw	r12, r20
    1150:	e9 01       	movw	r28, r18
	if(currItem != NULL)
    1152:	80 91 1d 03 	lds	r24, 0x031D
    1156:	90 91 1e 03 	lds	r25, 0x031E
    115a:	89 2b       	or	r24, r25
    115c:	19 f0       	breq	.+6      	; 0x1164 <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
    115e:	8c ee       	ldi	r24, 0xEC	; 236
    1160:	91 e0       	ldi	r25, 0x01	; 1
    1162:	33 d6       	rcall	.+3174   	; 0x1dca <puts>
    1164:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	a9 d4       	rcall	.+2386   	; 0x1abc <malloc>
    116a:	fc 01       	movw	r30, r24
    116c:	90 93 1e 03 	sts	0x031E, r25
    1170:	80 93 1d 03 	sts	0x031D, r24
    1174:	f3 82       	std	Z+3, r15	; 0x03
    1176:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
    1178:	11 83       	std	Z+1, r17	; 0x01
    117a:	00 83       	st	Z, r16
	currItem->name = name;
    117c:	cd 2b       	or	r28, r29
    117e:	39 f0       	breq	.+14     	; 0x118e <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
    1180:	d5 82       	std	Z+5, r13	; 0x05
    1182:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
    1188:	97 83       	std	Z+7, r25	; 0x07
    118a:	86 83       	std	Z+6, r24	; 0x06
    118c:	04 c0       	rjmp	.+8      	; 0x1196 <MENU_addMenuItem+0x5c>
    118e:	15 82       	std	Z+5, r1	; 0x05
    1190:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
    1192:	17 82       	std	Z+7, r1	; 0x07
    1194:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
	}
}
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	ff 90       	pop	r15
    11a0:	ef 90       	pop	r14
    11a2:	df 90       	pop	r13
    11a4:	cf 90       	pop	r12
    11a6:	08 95       	ret

000011a8 <MENU_buildMenus>:
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
    11ac:	86 e1       	ldi	r24, 0x16	; 22
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	85 d4       	rcall	.+2314   	; 0x1abc <malloc>
    11b2:	ec 01       	movw	r28, r24
    11b4:	90 93 24 03 	sts	0x0324, r25
    11b8:	80 93 23 03 	sts	0x0323, r24
    11bc:	82 e0       	ldi	r24, 0x02	; 2
	mainMenu->menuName = "MainMenu";
    11be:	92 e0       	ldi	r25, 0x02	; 2
    11c0:	99 83       	std	Y+1, r25	; 0x01
    11c2:	88 83       	st	Y, r24
    11c4:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
    11c6:	1c 8a       	std	Y+20, r1	; 0x14
    11c8:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	9b 83       	std	Y+3, r25	; 0x03
    11ce:	8a 83       	std	Y+2, r24	; 0x02
    11d0:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	73 d4       	rcall	.+2278   	; 0x1abc <malloc>
    11d6:	fc 01       	movw	r30, r24
    11d8:	90 93 22 03 	sts	0x0322, r25
    11dc:	80 93 21 03 	sts	0x0321, r24
    11e0:	8b e0       	ldi	r24, 0x0B	; 11
    11e2:	92 e0       	ldi	r25, 0x02	; 2
	difficultyMenu->menuName = "DifficultyMenu";
    11e4:	91 83       	std	Z+1, r25	; 0x01
    11e6:	80 83       	st	Z, r24
    11e8:	d5 8b       	std	Z+21, r29	; 0x15
    11ea:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
    11ec:	83 e0       	ldi	r24, 0x03	; 3
    11ee:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
    11f0:	93 83       	std	Z+3, r25	; 0x03
    11f2:	82 83       	std	Z+2, r24	; 0x02
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	be 01       	movw	r22, r28
    11fe:	8a e1       	ldi	r24, 0x1A	; 26
    1200:	92 e0       	ldi	r25, 0x02	; 2
    1202:	9b df       	rcall	.-202    	; 0x113a <MENU_addMenuItem>
    1204:	60 91 23 03 	lds	r22, 0x0323
    1208:	70 91 24 03 	lds	r23, 0x0324
	mainMenu->children[0] = currItem;
    120c:	e0 91 1d 03 	lds	r30, 0x031D
    1210:	f0 91 1e 03 	lds	r31, 0x031E
    1214:	db 01       	movw	r26, r22
    1216:	15 96       	adiw	r26, 0x05	; 5
    1218:	fc 93       	st	X, r31
    121a:	ee 93       	st	-X, r30
    121c:	14 97       	sbiw	r26, 0x04	; 4
    121e:	84 e7       	ldi	r24, 0x74	; 116
    1220:	98 e0       	ldi	r25, 0x08	; 8
    1222:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
    1224:	82 87       	std	Z+10, r24	; 0x0a
    1226:	40 91 21 03 	lds	r20, 0x0321
    122a:	50 91 22 03 	lds	r21, 0x0322
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
    122e:	21 e0       	ldi	r18, 0x01	; 1
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	83 e2       	ldi	r24, 0x23	; 35
    1234:	92 e0       	ldi	r25, 0x02	; 2
    1236:	81 df       	rcall	.-254    	; 0x113a <MENU_addMenuItem>
    1238:	60 91 23 03 	lds	r22, 0x0323
    123c:	70 91 24 03 	lds	r23, 0x0324
	mainMenu->children[1] = currItem;
    1240:	80 91 1d 03 	lds	r24, 0x031D
    1244:	90 91 1e 03 	lds	r25, 0x031E
    1248:	fb 01       	movw	r30, r22
    124a:	97 83       	std	Z+7, r25	; 0x07
    124c:	86 83       	std	Z+6, r24	; 0x06
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	40 e0       	ldi	r20, 0x00	; 0
    1254:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
    1256:	8e e2       	ldi	r24, 0x2E	; 46
    1258:	92 e0       	ldi	r25, 0x02	; 2
    125a:	6f df       	rcall	.-290    	; 0x113a <MENU_addMenuItem>
    125c:	60 91 23 03 	lds	r22, 0x0323
    1260:	70 91 24 03 	lds	r23, 0x0324
    1264:	80 91 1d 03 	lds	r24, 0x031D
	mainMenu->children[2] = currItem;
    1268:	90 91 1e 03 	lds	r25, 0x031E
    126c:	db 01       	movw	r26, r22
    126e:	19 96       	adiw	r26, 0x09	; 9
    1270:	9c 93       	st	X, r25
    1272:	8e 93       	st	-X, r24
    1274:	18 97       	sbiw	r26, 0x08	; 8
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 e0       	ldi	r20, 0x00	; 0
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	89 e3       	ldi	r24, 0x39	; 57
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
    1280:	92 e0       	ldi	r25, 0x02	; 2
    1282:	5b df       	rcall	.-330    	; 0x113a <MENU_addMenuItem>
    1284:	60 91 23 03 	lds	r22, 0x0323
    1288:	70 91 24 03 	lds	r23, 0x0324
    128c:	e0 91 1d 03 	lds	r30, 0x031D
	mainMenu->children[3] = currItem;
    1290:	f0 91 1e 03 	lds	r31, 0x031E
    1294:	db 01       	movw	r26, r22
    1296:	1b 96       	adiw	r26, 0x0b	; 11
    1298:	fc 93       	st	X, r31
    129a:	ee 93       	st	-X, r30
    129c:	1a 97       	sbiw	r26, 0x0a	; 10
    129e:	89 e5       	ldi	r24, 0x59	; 89
    12a0:	96 e0       	ldi	r25, 0x06	; 6
    12a2:	93 87       	std	Z+11, r25	; 0x0b
    12a4:	82 87       	std	Z+10, r24	; 0x0a
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
    12aa:	40 e0       	ldi	r20, 0x00	; 0
    12ac:	50 e0       	ldi	r21, 0x00	; 0
    12ae:	83 e4       	ldi	r24, 0x43	; 67
    12b0:	92 e0       	ldi	r25, 0x02	; 2
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
    12b2:	43 df       	rcall	.-378    	; 0x113a <MENU_addMenuItem>
    12b4:	e0 91 23 03 	lds	r30, 0x0323
    12b8:	f0 91 24 03 	lds	r31, 0x0324
    12bc:	80 91 1d 03 	lds	r24, 0x031D
    12c0:	90 91 1e 03 	lds	r25, 0x031E
	mainMenu->children[4] = currItem;
    12c4:	95 87       	std	Z+13, r25	; 0x0d
    12c6:	84 87       	std	Z+12, r24	; 0x0c
    12c8:	10 92 1e 03 	sts	0x031E, r1
    12cc:	10 92 1d 03 	sts	0x031D, r1
    12d0:	60 91 21 03 	lds	r22, 0x0321
    12d4:	70 91 22 03 	lds	r23, 0x0322
	
	currItem = NULL;
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	88 e4       	ldi	r24, 0x48	; 72
    12e2:	92 e0       	ldi	r25, 0x02	; 2
    12e4:	2a df       	rcall	.-428    	; 0x113a <MENU_addMenuItem>
    12e6:	60 91 21 03 	lds	r22, 0x0321
    12ea:	70 91 22 03 	lds	r23, 0x0322
    12ee:	80 91 1d 03 	lds	r24, 0x031D
    12f2:	90 91 1e 03 	lds	r25, 0x031E
	difficultyMenu->children[0] = currItem;
    12f6:	fb 01       	movw	r30, r22
    12f8:	95 83       	std	Z+5, r25	; 0x05
    12fa:	84 83       	std	Z+4, r24	; 0x04
    12fc:	20 e0       	ldi	r18, 0x00	; 0
    12fe:	30 e0       	ldi	r19, 0x00	; 0
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	50 e0       	ldi	r21, 0x00	; 0
    1304:	8d e4       	ldi	r24, 0x4D	; 77
    1306:	92 e0       	ldi	r25, 0x02	; 2
    1308:	18 df       	rcall	.-464    	; 0x113a <MENU_addMenuItem>
    130a:	60 91 21 03 	lds	r22, 0x0321
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
    130e:	70 91 22 03 	lds	r23, 0x0322
    1312:	80 91 1d 03 	lds	r24, 0x031D
    1316:	90 91 1e 03 	lds	r25, 0x031E
    131a:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
    131c:	17 96       	adiw	r26, 0x07	; 7
    131e:	9c 93       	st	X, r25
    1320:	8e 93       	st	-X, r24
    1322:	16 97       	sbiw	r26, 0x06	; 6
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	40 e0       	ldi	r20, 0x00	; 0
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	84 e5       	ldi	r24, 0x54	; 84
    132e:	92 e0       	ldi	r25, 0x02	; 2
    1330:	04 df       	rcall	.-504    	; 0x113a <MENU_addMenuItem>
    1332:	e0 91 21 03 	lds	r30, 0x0321
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
    1336:	f0 91 22 03 	lds	r31, 0x0322
    133a:	80 91 1d 03 	lds	r24, 0x031D
    133e:	90 91 1e 03 	lds	r25, 0x031E
    1342:	91 87       	std	Z+9, r25	; 0x09
    1344:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	08 95       	ret

0000134c <MENU_printMenuItem>:
    134c:	cf 93       	push	r28
    134e:	df 93       	push	r29
    1350:	ec 01       	movw	r28, r24
    1352:	cb 01       	movw	r24, r22
    1354:	20 97       	sbiw	r28, 0x00	; 0
    1356:	39 f0       	breq	.+14     	; 0x1366 <MENU_printMenuItem+0x1a>
    1358:	6a e0       	ldi	r22, 0x0A	; 10
}
    135a:	70 e0       	ldi	r23, 0x00	; 0
    135c:	0c d1       	rcall	.+536    	; 0x1576 <OLED_goto>
    135e:	88 81       	ld	r24, Y
void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
		OLED_printString(item->name);
    1360:	99 81       	ldd	r25, Y+1	; 0x01
    1362:	5f d1       	rcall	.+702    	; 0x1622 <OLED_printString>
    1364:	07 c0       	rjmp	.+14     	; 0x1374 <MENU_printMenuItem+0x28>
    1366:	89 e5       	ldi	r24, 0x59	; 89
    1368:	92 e0       	ldi	r25, 0x02	; 2
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
    136a:	9f 93       	push	r25
    136c:	8f 93       	push	r24
    136e:	17 d5       	rcall	.+2606   	; 0x1d9e <printf>
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	08 95       	ret

0000137a <MENU_printMenu>:
	}
}
    137a:	cf 92       	push	r12
    137c:	df 92       	push	r13
    137e:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
    1380:	ff 92       	push	r15
    1382:	0f 93       	push	r16
    1384:	1f 93       	push	r17
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	6c 01       	movw	r12, r24
    138c:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
    138e:	10 d1       	rcall	.+544    	; 0x15b0 <OLED_clear>
    1390:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	9d d1       	rcall	.+826    	; 0x16d0 <OLED_moveArrow>
    1396:	1e 14       	cp	r1, r14
    1398:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
    139a:	7c f4       	brge	.+30     	; 0x13ba <MENU_printMenu+0x40>
    139c:	86 01       	movw	r16, r12
    139e:	0c 5f       	subi	r16, 0xFC	; 252
    13a0:	1f 4f       	sbci	r17, 0xFF	; 255
    13a2:	c0 e0       	ldi	r28, 0x00	; 0
    13a4:	d0 e0       	ldi	r29, 0x00	; 0
    13a6:	be 01       	movw	r22, r28
    13a8:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
    13aa:	81 91       	ld	r24, Z+
    13ac:	91 91       	ld	r25, Z+
    13ae:	8f 01       	movw	r16, r30
    13b0:	cd df       	rcall	.-102    	; 0x134c <MENU_printMenuItem>
    13b2:	21 96       	adiw	r28, 0x01	; 1
    13b4:	ce 15       	cp	r28, r14
    13b6:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
    13b8:	b1 f7       	brne	.-20     	; 0x13a6 <MENU_printMenu+0x2c>
    13ba:	d0 92 20 03 	sts	0x0320, r13
    13be:	c0 92 1f 03 	sts	0x031F, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
    13c2:	10 92 1b 03 	sts	0x031B, r1
    13c6:	10 92 1a 03 	sts	0x031A, r1
	
	currentPosition = 0;
    13ca:	f6 01       	movw	r30, r12
    13cc:	84 81       	ldd	r24, Z+4	; 0x04
    13ce:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
    13d0:	90 93 1e 03 	sts	0x031E, r25
    13d4:	80 93 1d 03 	sts	0x031D, r24
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	1f 91       	pop	r17
}
    13de:	0f 91       	pop	r16
    13e0:	ff 90       	pop	r15
    13e2:	ef 90       	pop	r14
    13e4:	df 90       	pop	r13
    13e6:	cf 90       	pop	r12
    13e8:	08 95       	ret

000013ea <MENU_moveUp>:
    13ea:	20 91 1a 03 	lds	r18, 0x031A
    13ee:	30 91 1b 03 	lds	r19, 0x031B
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
    13f2:	12 16       	cp	r1, r18
    13f4:	13 06       	cpc	r1, r19
    13f6:	bc f4       	brge	.+46     	; 0x1426 <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
    13f8:	c9 01       	movw	r24, r18
    13fa:	01 97       	sbiw	r24, 0x01	; 1
    13fc:	90 93 1b 03 	sts	0x031B, r25
    1400:	80 93 1a 03 	sts	0x031A, r24
		currItem = currentMenu->children[currentPosition];
    1404:	e0 91 1f 03 	lds	r30, 0x031F
    1408:	f0 91 20 03 	lds	r31, 0x0320
    140c:	2f 5f       	subi	r18, 0xFF	; 255
    140e:	3f 4f       	sbci	r19, 0xFF	; 255
    1410:	22 0f       	add	r18, r18
    1412:	33 1f       	adc	r19, r19
    1414:	e2 0f       	add	r30, r18
    1416:	f3 1f       	adc	r31, r19
    1418:	20 81       	ld	r18, Z
    141a:	31 81       	ldd	r19, Z+1	; 0x01
    141c:	30 93 1e 03 	sts	0x031E, r19
    1420:	20 93 1d 03 	sts	0x031D, r18
		OLED_moveArrow(currentPosition);
    1424:	55 c1       	rjmp	.+682    	; 0x16d0 <OLED_moveArrow>
    1426:	08 95       	ret

00001428 <MENU_moveDown>:
    1428:	e0 91 1f 03 	lds	r30, 0x031F
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
    142c:	f0 91 20 03 	lds	r31, 0x0320
    1430:	20 91 1a 03 	lds	r18, 0x031A
    1434:	30 91 1b 03 	lds	r19, 0x031B
    1438:	82 81       	ldd	r24, Z+2	; 0x02
    143a:	93 81       	ldd	r25, Z+3	; 0x03
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	28 17       	cp	r18, r24
    1440:	39 07       	cpc	r19, r25
    1442:	a4 f4       	brge	.+40     	; 0x146c <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
    1444:	c9 01       	movw	r24, r18
    1446:	01 96       	adiw	r24, 0x01	; 1
    1448:	90 93 1b 03 	sts	0x031B, r25
    144c:	80 93 1a 03 	sts	0x031A, r24
		currItem = currentMenu->children[currentPosition];
    1450:	2d 5f       	subi	r18, 0xFD	; 253
    1452:	3f 4f       	sbci	r19, 0xFF	; 255
    1454:	22 0f       	add	r18, r18
    1456:	33 1f       	adc	r19, r19
    1458:	e2 0f       	add	r30, r18
    145a:	f3 1f       	adc	r31, r19
    145c:	20 81       	ld	r18, Z
    145e:	31 81       	ldd	r19, Z+1	; 0x01
    1460:	30 93 1e 03 	sts	0x031E, r19
    1464:	20 93 1d 03 	sts	0x031D, r18
		OLED_moveArrow(currentPosition);
    1468:	33 c1       	rjmp	.+614    	; 0x16d0 <OLED_moveArrow>
    146a:	08 95       	ret
    146c:	10 92 1b 03 	sts	0x031B, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
    1470:	10 92 1a 03 	sts	0x031A, r1
    1474:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
    1476:	95 81       	ldd	r25, Z+5	; 0x05
    1478:	90 93 1e 03 	sts	0x031E, r25
    147c:	80 93 1d 03 	sts	0x031D, r24
    1480:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	25 c1       	rjmp	.+586    	; 0x16d0 <OLED_moveArrow>
    1486:	08 95       	ret

00001488 <MENU_moveLeft>:
    1488:	e0 91 1f 03 	lds	r30, 0x031F
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
    148c:	f0 91 20 03 	lds	r31, 0x0320
    1490:	84 89       	ldd	r24, Z+20	; 0x14
    1492:	95 89       	ldd	r25, Z+21	; 0x15
    1494:	00 97       	sbiw	r24, 0x00	; 0
    1496:	21 f0       	breq	.+8      	; 0x14a0 <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
    1498:	fc 01       	movw	r30, r24
    149a:	62 81       	ldd	r22, Z+2	; 0x02
    149c:	73 81       	ldd	r23, Z+3	; 0x03
    149e:	6d cf       	rjmp	.-294    	; 0x137a <MENU_printMenu>
    14a0:	08 95       	ret

000014a2 <MENU_reactivate>:
    14a2:	80 91 1f 03 	lds	r24, 0x031F
	//MENU_clearMemory();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
    14a6:	90 91 20 03 	lds	r25, 0x0320
    14aa:	fc 01       	movw	r30, r24
    14ac:	62 81       	ldd	r22, Z+2	; 0x02
    14ae:	73 81       	ldd	r23, Z+3	; 0x03
    14b0:	64 df       	rcall	.-312    	; 0x137a <MENU_printMenu>
    14b2:	18 c0       	rjmp	.+48     	; 0x14e4 <MENU_waitForInput>
	MENU_waitForInput();
    14b4:	08 95       	ret

000014b6 <MENU_moveRight>:
    14b6:	e0 91 1d 03 	lds	r30, 0x031D
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
    14ba:	f0 91 1e 03 	lds	r31, 0x031E
    14be:	86 81       	ldd	r24, Z+6	; 0x06
    14c0:	97 81       	ldd	r25, Z+7	; 0x07
    14c2:	89 2b       	or	r24, r25
    14c4:	39 f0       	breq	.+14     	; 0x14d4 <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
    14c6:	84 81       	ldd	r24, Z+4	; 0x04
    14c8:	95 81       	ldd	r25, Z+5	; 0x05
    14ca:	fc 01       	movw	r30, r24
    14cc:	62 81       	ldd	r22, Z+2	; 0x02
    14ce:	73 81       	ldd	r23, Z+3	; 0x03
    14d0:	54 cf       	rjmp	.-344    	; 0x137a <MENU_printMenu>
    14d2:	08 95       	ret
    14d4:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
    14d6:	f3 85       	ldd	r31, Z+11	; 0x0b
    14d8:	e0 2d       	mov	r30, r0
    14da:	30 97       	sbiw	r30, 0x00	; 0
    14dc:	11 f0       	breq	.+4      	; 0x14e2 <MENU_moveRight+0x2c>
    14de:	09 95       	icall
	{
		currItem->functionPtr();
    14e0:	e0 cf       	rjmp	.-64     	; 0x14a2 <MENU_reactivate>
		MENU_reactivate();
    14e2:	08 95       	ret

000014e4 <MENU_waitForInput>:
    14e4:	80 91 1a 03 	lds	r24, 0x031A
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
    14e8:	90 91 1b 03 	lds	r25, 0x031B
    14ec:	f1 d0       	rcall	.+482    	; 0x16d0 <OLED_moveArrow>
    14ee:	80 91 1c 03 	lds	r24, 0x031C
	JOY_direction_t currDir;
	
	while(menuActiveFlag && *actualState == MENU)
    14f2:	88 23       	and	r24, r24
    14f4:	69 f1       	breq	.+90     	; 0x1550 <MENU_waitForInput+0x6c>
    14f6:	e0 91 18 03 	lds	r30, 0x0318
    14fa:	f0 91 19 03 	lds	r31, 0x0319
    14fe:	80 81       	ld	r24, Z
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	31 f5       	brne	.+76     	; 0x1550 <MENU_waitForInput+0x6c>
    1504:	7a dd       	rcall	.-1292   	; 0xffa <JOY_getDirection>
	{
		currDir = JOY_getDirection();
    1506:	82 30       	cpi	r24, 0x02	; 2
    1508:	71 f0       	breq	.+28     	; 0x1526 <MENU_waitForInput+0x42>
		switch(currDir){
    150a:	18 f4       	brcc	.+6      	; 0x1512 <MENU_waitForInput+0x2e>
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	49 f0       	breq	.+18     	; 0x1522 <MENU_waitForInput+0x3e>
    1510:	0b c0       	rjmp	.+22     	; 0x1528 <MENU_waitForInput+0x44>
    1512:	83 30       	cpi	r24, 0x03	; 3
    1514:	21 f0       	breq	.+8      	; 0x151e <MENU_waitForInput+0x3a>
    1516:	84 30       	cpi	r24, 0x04	; 4
    1518:	39 f4       	brne	.+14     	; 0x1528 <MENU_waitForInput+0x44>
    151a:	b6 df       	rcall	.-148    	; 0x1488 <MENU_moveLeft>
    151c:	05 c0       	rjmp	.+10     	; 0x1528 <MENU_waitForInput+0x44>
			case LEFT:
			MENU_moveLeft();
    151e:	cb df       	rcall	.-106    	; 0x14b6 <MENU_moveRight>
    1520:	03 c0       	rjmp	.+6      	; 0x1528 <MENU_waitForInput+0x44>
			break;
    1522:	63 df       	rcall	.-314    	; 0x13ea <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
    1524:	01 c0       	rjmp	.+2      	; 0x1528 <MENU_waitForInput+0x44>
    1526:	80 df       	rcall	.-256    	; 0x1428 <MENU_moveDown>
			break;
    1528:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
    152a:	8f e7       	ldi	r24, 0x7F	; 127
    152c:	94 e0       	ldi	r25, 0x04	; 4
			break;
    152e:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
    1530:	80 40       	sbci	r24, 0x00	; 0
    1532:	90 40       	sbci	r25, 0x00	; 0
    1534:	e1 f7       	brne	.-8      	; 0x152e <MENU_waitForInput+0x4a>
    1536:	00 c0       	rjmp	.+0      	; 0x1538 <MENU_waitForInput+0x54>
    1538:	00 00       	nop
    153a:	80 91 1c 03 	lds	r24, 0x031C
    153e:	88 23       	and	r24, r24
    1540:	39 f0       	breq	.+14     	; 0x1550 <MENU_waitForInput+0x6c>
    1542:	e0 91 18 03 	lds	r30, 0x0318
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag && *actualState == MENU)
    1546:	f0 91 19 03 	lds	r31, 0x0319
    154a:	80 81       	ld	r24, Z
    154c:	81 30       	cpi	r24, 0x01	; 1
    154e:	d1 f2       	breq	.-76     	; 0x1504 <MENU_waitForInput+0x20>
    1550:	08 95       	ret

00001552 <MENU_activate>:
    1552:	90 93 19 03 	sts	0x0319, r25
    1556:	80 93 18 03 	sts	0x0318, r24
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	80 93 1c 03 	sts	0x031C, r24
void MENU_activate(OP_STATE* state)
{
	actualState = state;
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
    1560:	23 de       	rcall	.-954    	; 0x11a8 <MENU_buildMenus>
    1562:	80 91 23 03 	lds	r24, 0x0323
	MENU_printMenu(mainMenu, mainMenu->noChilds);
    1566:	90 91 24 03 	lds	r25, 0x0324
    156a:	fc 01       	movw	r30, r24
    156c:	62 81       	ldd	r22, Z+2	; 0x02
    156e:	73 81       	ldd	r23, Z+3	; 0x03
    1570:	04 df       	rcall	.-504    	; 0x137a <MENU_printMenu>
    1572:	b8 cf       	rjmp	.-144    	; 0x14e4 <MENU_waitForInput>
    1574:	08 95       	ret

00001576 <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
    1576:	26 2f       	mov	r18, r22
    1578:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
    157a:	75 95       	asr	r23
    157c:	67 95       	ror	r22
    157e:	75 95       	asr	r23
    1580:	67 95       	ror	r22
    1582:	75 95       	asr	r23
    1584:	67 95       	ror	r22
    1586:	75 95       	asr	r23
    1588:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
    158a:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
    158c:	80 55       	subi	r24, 0x50	; 80
    158e:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
    1590:	e0 91 11 01 	lds	r30, 0x0111
    1594:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1598:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
    159a:	e0 91 11 01 	lds	r30, 0x0111
    159e:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15a2:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
    15a4:	e0 91 11 01 	lds	r30, 0x0111
    15a8:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15ac:	60 83       	st	Z, r22
    15ae:	08 95       	ret

000015b0 <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
    15b0:	1f 93       	push	r17
    15b2:	cf 93       	push	r28
    15b4:	df 93       	push	r29
    15b6:	c1 e0       	ldi	r28, 0x01	; 1
    15b8:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    15be:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	d8 df       	rcall	.-80     	; 0x1576 <OLED_goto>
    15c6:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
    15c8:	e0 91 0f 01 	lds	r30, 0x010F
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    15cc:	f0 91 10 01 	lds	r31, 0x0110
    15d0:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15d2:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    15d4:	80 38       	cpi	r24, 0x80	; 128
    15d6:	c1 f7       	brne	.-16     	; 0x15c8 <OLED_clear+0x18>
    15d8:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
    15da:	9d 2f       	mov	r25, r29
    15dc:	21 96       	adiw	r28, 0x01	; 1
    15de:	c9 30       	cpi	r28, 0x09	; 9
    15e0:	d1 05       	cpc	r29, r1
    15e2:	71 f7       	brne	.-36     	; 0x15c0 <OLED_clear+0x10>
    15e4:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    15e6:	cf 91       	pop	r28
    15e8:	1f 91       	pop	r17
    15ea:	08 95       	ret

000015ec <OLED_printCharacter>:
    15ec:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	22 0f       	add	r18, r18
    15f4:	33 1f       	adc	r19, r19
    15f6:	22 0f       	add	r18, r18
    15f8:	33 1f       	adc	r19, r19
    15fa:	22 0f       	add	r18, r18
    15fc:	33 1f       	adc	r19, r19
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	20 59       	subi	r18, 0x90	; 144
    1604:	3f 4f       	sbci	r19, 0xFF	; 255
    1606:	f9 01       	movw	r30, r18
    1608:	e8 0f       	add	r30, r24
    160a:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
    160c:	e4 91       	lpm	r30, Z
    160e:	a0 91 0f 01 	lds	r26, 0x010F
    1612:	b0 91 10 01 	lds	r27, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1616:	ec 93       	st	X, r30
    1618:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
    161a:	88 30       	cpi	r24, 0x08	; 8
    161c:	91 05       	cpc	r25, r1
    161e:	99 f7       	brne	.-26     	; 0x1606 <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
    1620:	08 95       	ret

00001622 <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
    162a:	10 e0       	ldi	r17, 0x00	; 0
    162c:	06 c0       	rjmp	.+12     	; 0x163a <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
    162e:	fe 01       	movw	r30, r28
    1630:	e8 0f       	add	r30, r24
    1632:	f9 1f       	adc	r31, r25
    1634:	80 81       	ld	r24, Z
    1636:	da df       	rcall	.-76     	; 0x15ec <OLED_printCharacter>
    1638:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
    163a:	81 2f       	mov	r24, r17
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	fe 01       	movw	r30, r28
    1640:	01 90       	ld	r0, Z+
    1642:	00 20       	and	r0, r0
    1644:	e9 f7       	brne	.-6      	; 0x1640 <OLED_printString+0x1e>
    1646:	31 97       	sbiw	r30, 0x01	; 1
    1648:	ec 1b       	sub	r30, r28
    164a:	fd 0b       	sbc	r31, r29
    164c:	8e 17       	cp	r24, r30
    164e:	9f 07       	cpc	r25, r31
    1650:	70 f3       	brcs	.-36     	; 0x162e <OLED_printString+0xc>
    1652:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
    1654:	cf 91       	pop	r28
    1656:	1f 91       	pop	r17
    1658:	08 95       	ret

0000165a <OLED_printArrow>:
    165a:	e0 91 0f 01 	lds	r30, 0x010F
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
    165e:	f0 91 10 01 	lds	r31, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1662:	88 e1       	ldi	r24, 0x18	; 24
    1664:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    1666:	e0 91 0f 01 	lds	r30, 0x010F
    166a:	f0 91 10 01 	lds	r31, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    166e:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
    1670:	e0 91 0f 01 	lds	r30, 0x010F
    1674:	f0 91 10 01 	lds	r31, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1678:	9e e7       	ldi	r25, 0x7E	; 126
    167a:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
    167c:	e0 91 0f 01 	lds	r30, 0x010F
    1680:	f0 91 10 01 	lds	r31, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1684:	9c e3       	ldi	r25, 0x3C	; 60
    1686:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    1688:	e0 91 0f 01 	lds	r30, 0x010F
    168c:	f0 91 10 01 	lds	r31, 0x0110
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1690:	80 83       	st	Z, r24
    1692:	08 95       	ret

00001694 <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    1694:	1f 93       	push	r17
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	c1 e0       	ldi	r28, 0x01	; 1
    169c:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    16a2:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	70 e0       	ldi	r23, 0x00	; 0
    16a8:	66 df       	rcall	.-308    	; 0x1576 <OLED_goto>
    16aa:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    16ac:	e0 91 0f 01 	lds	r30, 0x010F
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    16b0:	f0 91 10 01 	lds	r31, 0x0110
    16b4:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16b6:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    16b8:	85 30       	cpi	r24, 0x05	; 5
    16ba:	c1 f7       	brne	.-16     	; 0x16ac <OLED_clearArrow+0x18>
    16bc:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    16be:	9d 2f       	mov	r25, r29
    16c0:	21 96       	adiw	r28, 0x01	; 1
    16c2:	c9 30       	cpi	r28, 0x09	; 9
    16c4:	d1 05       	cpc	r29, r1
    16c6:	71 f7       	brne	.-36     	; 0x16a4 <OLED_clearArrow+0x10>
    16c8:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    16ca:	cf 91       	pop	r28
    16cc:	1f 91       	pop	r17
    16ce:	08 95       	ret

000016d0 <OLED_moveArrow>:
    16d0:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    16d2:	df 93       	push	r29
    16d4:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
    16d6:	de df       	rcall	.-68     	; 0x1694 <OLED_clearArrow>
    16d8:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
    16da:	70 e0       	ldi	r23, 0x00	; 0
    16dc:	ce 01       	movw	r24, r28
    16de:	4b df       	rcall	.-362    	; 0x1576 <OLED_goto>
    16e0:	bc df       	rcall	.-136    	; 0x165a <OLED_printArrow>
    16e2:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
    16e4:	cf 91       	pop	r28
    16e6:	08 95       	ret

000016e8 <OLED_setContrast>:
}
    16e8:	e0 91 11 01 	lds	r30, 0x0111
    16ec:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16f0:	91 e8       	ldi	r25, 0x81	; 129
    16f2:	90 83       	st	Z, r25
void OLED_setContrast(uint8_t contrast)
{
	// activate contrast contol
	OLED_writeByteToOLED(oled_cmd, 0x81);
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
    16f4:	e0 91 11 01 	lds	r30, 0x0111
    16f8:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    16fc:	80 83       	st	Z, r24
    16fe:	08 95       	ret

00001700 <OLED_fadeIn>:
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
}

void OLED_fadeIn(void)
{
    1700:	cf 93       	push	r28
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    1702:	c0 e0       	ldi	r28, 0x00	; 0
	{
		OLED_setContrast(i);
    1704:	8c 2f       	mov	r24, r28
    1706:	f0 df       	rcall	.-32     	; 0x16e8 <OLED_setContrast>
    1708:	83 e3       	ldi	r24, 0x33	; 51
    170a:	93 e1       	ldi	r25, 0x13	; 19
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <OLED_fadeIn+0xc>
    1710:	cf 5f       	subi	r28, 0xFF	; 255
}

void OLED_fadeIn(void)
{
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    1712:	cf 3f       	cpi	r28, 0xFF	; 255
    1714:	b9 f7       	brne	.-18     	; 0x1704 <OLED_fadeIn+0x4>
    1716:	cf 91       	pop	r28
	{
		OLED_setContrast(i);
		_delay_ms(4);
	}
}
    1718:	08 95       	ret

0000171a <OLED_splashScreen>:
    171a:	89 e6       	ldi	r24, 0x69	; 105
	}
}

void OLED_splashScreen(void)
{
	printf("run splash screen...\n");
    171c:	92 e0       	ldi	r25, 0x02	; 2
    171e:	55 d3       	rcall	.+1706   	; 0x1dca <puts>
    1720:	80 e0       	ldi	r24, 0x00	; 0
	
	OLED_setContrast(0);
    1722:	e2 df       	rcall	.-60     	; 0x16e8 <OLED_setContrast>
    1724:	2f ef       	ldi	r18, 0xFF	; 255
    1726:	8f e7       	ldi	r24, 0x7F	; 127
    1728:	97 e0       	ldi	r25, 0x07	; 7
    172a:	21 50       	subi	r18, 0x01	; 1
    172c:	80 40       	sbci	r24, 0x00	; 0
    172e:	90 40       	sbci	r25, 0x00	; 0
    1730:	e1 f7       	brne	.-8      	; 0x172a <OLED_splashScreen+0x10>
    1732:	00 c0       	rjmp	.+0      	; 0x1734 <OLED_splashScreen+0x1a>
    1734:	00 00       	nop
    1736:	64 e0       	ldi	r22, 0x04	; 4
    1738:	70 e0       	ldi	r23, 0x00	; 0
	
	_delay_ms(500);
	OLED_goto(2,4);
    173a:	82 e0       	ldi	r24, 0x02	; 2
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	1b df       	rcall	.-458    	; 0x1576 <OLED_goto>
    1740:	8e e7       	ldi	r24, 0x7E	; 126
    1742:	92 e0       	ldi	r25, 0x02	; 2
    1744:	6e df       	rcall	.-292    	; 0x1622 <OLED_printString>
	OLED_printString("Group 46 Soft");
    1746:	dc df       	rcall	.-72     	; 0x1700 <OLED_fadeIn>
    1748:	2f ef       	ldi	r18, 0xFF	; 255
    174a:	8f e7       	ldi	r24, 0x7F	; 127
    174c:	97 e0       	ldi	r25, 0x07	; 7
	OLED_fadeIn();
    174e:	21 50       	subi	r18, 0x01	; 1
    1750:	80 40       	sbci	r24, 0x00	; 0
    1752:	90 40       	sbci	r25, 0x00	; 0
    1754:	e1 f7       	brne	.-8      	; 0x174e <OLED_splashScreen+0x34>
    1756:	00 c0       	rjmp	.+0      	; 0x1758 <OLED_splashScreen+0x3e>
    1758:	00 00       	nop
    175a:	2a df       	rcall	.-428    	; 0x15b0 <OLED_clear>
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	c4 df       	rcall	.-120    	; 0x16e8 <OLED_setContrast>
    1760:	2f ef       	ldi	r18, 0xFF	; 255
    1762:	8f ef       	ldi	r24, 0xFF	; 255
	_delay_ms(500);
	
 	OLED_clear();
    1764:	92 e0       	ldi	r25, 0x02	; 2
    1766:	21 50       	subi	r18, 0x01	; 1
 	OLED_setContrast(0);
    1768:	80 40       	sbci	r24, 0x00	; 0
    176a:	90 40       	sbci	r25, 0x00	; 0
    176c:	e1 f7       	brne	.-8      	; 0x1766 <OLED_splashScreen+0x4c>
    176e:	00 c0       	rjmp	.+0      	; 0x1770 <OLED_splashScreen+0x56>
    1770:	00 c0       	rjmp	.+0      	; 0x1772 <OLED_splashScreen+0x58>
    1772:	6c e1       	ldi	r22, 0x1C	; 28
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	83 e0       	ldi	r24, 0x03	; 3
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	fd de       	rcall	.-518    	; 0x1576 <OLED_goto>
    177c:	8c e8       	ldi	r24, 0x8C	; 140
    177e:	92 e0       	ldi	r25, 0x02	; 2
 	
 	_delay_ms(200);
 	OLED_goto(3,28);
    1780:	50 df       	rcall	.-352    	; 0x1622 <OLED_printString>
    1782:	68 e1       	ldi	r22, 0x18	; 24
    1784:	70 e0       	ldi	r23, 0x00	; 0
    1786:	84 e0       	ldi	r24, 0x04	; 4
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	f5 de       	rcall	.-534    	; 0x1576 <OLED_goto>
 	OLED_printString("proudly");
    178c:	84 e9       	ldi	r24, 0x94	; 148
    178e:	92 e0       	ldi	r25, 0x02	; 2
    1790:	48 df       	rcall	.-368    	; 0x1622 <OLED_printString>
    1792:	b6 df       	rcall	.-148    	; 0x1700 <OLED_fadeIn>
 	OLED_goto(4,24);	
    1794:	2f ef       	ldi	r18, 0xFF	; 255
    1796:	8f e7       	ldi	r24, 0x7F	; 127
    1798:	97 e0       	ldi	r25, 0x07	; 7
    179a:	21 50       	subi	r18, 0x01	; 1
    179c:	80 40       	sbci	r24, 0x00	; 0
    179e:	90 40       	sbci	r25, 0x00	; 0
 	OLED_printString("presents");
    17a0:	e1 f7       	brne	.-8      	; 0x179a <OLED_splashScreen+0x80>
    17a2:	00 c0       	rjmp	.+0      	; 0x17a4 <OLED_splashScreen+0x8a>
    17a4:	00 00       	nop
    17a6:	04 df       	rcall	.-504    	; 0x15b0 <OLED_clear>
 	OLED_fadeIn();
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	9e df       	rcall	.-196    	; 0x16e8 <OLED_setContrast>
    17ac:	2f ef       	ldi	r18, 0xFF	; 255
    17ae:	8f ef       	ldi	r24, 0xFF	; 255
    17b0:	92 e0       	ldi	r25, 0x02	; 2
    17b2:	21 50       	subi	r18, 0x01	; 1
    17b4:	80 40       	sbci	r24, 0x00	; 0
    17b6:	90 40       	sbci	r25, 0x00	; 0
    17b8:	e1 f7       	brne	.-8      	; 0x17b2 <OLED_splashScreen+0x98>
    17ba:	00 c0       	rjmp	.+0      	; 0x17bc <OLED_splashScreen+0xa2>
    17bc:	00 c0       	rjmp	.+0      	; 0x17be <OLED_splashScreen+0xa4>
 	_delay_ms(500);
 	
 	OLED_clear();
    17be:	6c e1       	ldi	r22, 0x1C	; 28
    17c0:	70 e0       	ldi	r23, 0x00	; 0
 	OLED_setContrast(0);
    17c2:	83 e0       	ldi	r24, 0x03	; 3
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	d7 de       	rcall	.-594    	; 0x1576 <OLED_goto>
    17c8:	8d e9       	ldi	r24, 0x9D	; 157
    17ca:	92 e0       	ldi	r25, 0x02	; 2
    17cc:	2a df       	rcall	.-428    	; 0x1622 <OLED_printString>
    17ce:	98 df       	rcall	.-208    	; 0x1700 <OLED_fadeIn>
    17d0:	2f ef       	ldi	r18, 0xFF	; 255
    17d2:	8f ef       	ldi	r24, 0xFF	; 255
    17d4:	9e e0       	ldi	r25, 0x0E	; 14
    17d6:	21 50       	subi	r18, 0x01	; 1
    17d8:	80 40       	sbci	r24, 0x00	; 0
 	
 	_delay_ms(200);
 	OLED_goto(3, 28);
    17da:	90 40       	sbci	r25, 0x00	; 0
    17dc:	e1 f7       	brne	.-8      	; 0x17d6 <OLED_splashScreen+0xbc>
    17de:	00 c0       	rjmp	.+0      	; 0x17e0 <OLED_splashScreen+0xc6>
    17e0:	00 00       	nop
    17e2:	e6 de       	rcall	.-564    	; 0x15b0 <OLED_clear>
    17e4:	80 e5       	ldi	r24, 0x50	; 80
 	OLED_printString("FIFA 18");
    17e6:	80 df       	rcall	.-256    	; 0x16e8 <OLED_setContrast>
    17e8:	85 ea       	ldi	r24, 0xA5	; 165
    17ea:	92 e0       	ldi	r25, 0x02	; 2
    17ec:	ee c2       	rjmp	.+1500   	; 0x1dca <puts>
 	OLED_fadeIn();
    17ee:	08 95       	ret

000017f0 <OLED_init>:
    17f0:	e0 91 11 01 	lds	r30, 0x0111
    17f4:	f0 91 12 01 	lds	r31, 0x0112
    17f8:	8e ea       	ldi	r24, 0xAE	; 174
    17fa:	80 83       	st	Z, r24
    17fc:	e0 91 11 01 	lds	r30, 0x0111
    1800:	f0 91 12 01 	lds	r31, 0x0112
 	_delay_ms(1000);
	
	// clean up
	OLED_clear();
    1804:	81 ea       	ldi	r24, 0xA1	; 161
    1806:	80 83       	st	Z, r24
	OLED_setContrast(0x50); // back to standard contrast
    1808:	e0 91 11 01 	lds	r30, 0x0111
    180c:	f0 91 12 01 	lds	r31, 0x0112
	
	printf("splash screen done...\n");
    1810:	8a ed       	ldi	r24, 0xDA	; 218
    1812:	80 83       	st	Z, r24
    1814:	e0 91 11 01 	lds	r30, 0x0111
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
    1818:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    181c:	82 e1       	ldi	r24, 0x12	; 18
    181e:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    1820:	e0 91 11 01 	lds	r30, 0x0111
    1824:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1828:	88 ec       	ldi	r24, 0xC8	; 200
    182a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    182c:	e0 91 11 01 	lds	r30, 0x0111
    1830:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1834:	88 ea       	ldi	r24, 0xA8	; 168
    1836:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    1838:	e0 91 11 01 	lds	r30, 0x0111
    183c:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1840:	8f e3       	ldi	r24, 0x3F	; 63
    1842:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    1844:	e0 91 11 01 	lds	r30, 0x0111
    1848:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    184c:	85 ed       	ldi	r24, 0xD5	; 213
    184e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
    1850:	e0 91 11 01 	lds	r30, 0x0111
    1854:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1858:	80 e8       	ldi	r24, 0x80	; 128
    185a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    185c:	e0 91 11 01 	lds	r30, 0x0111
    1860:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1864:	81 e8       	ldi	r24, 0x81	; 129
    1866:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    1868:	e0 91 11 01 	lds	r30, 0x0111
    186c:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1870:	80 e5       	ldi	r24, 0x50	; 80
    1872:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    1874:	e0 91 11 01 	lds	r30, 0x0111
    1878:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    187c:	89 ed       	ldi	r24, 0xD9	; 217
    187e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
    1880:	e0 91 11 01 	lds	r30, 0x0111
    1884:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1888:	81 e2       	ldi	r24, 0x21	; 33
    188a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    188c:	e0 91 11 01 	lds	r30, 0x0111
    1890:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1894:	80 e2       	ldi	r24, 0x20	; 32
    1896:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    1898:	e0 91 11 01 	lds	r30, 0x0111
    189c:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18a0:	82 e0       	ldi	r24, 0x02	; 2
    18a2:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    18a4:	e0 91 11 01 	lds	r30, 0x0111
    18a8:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18ac:	8b ed       	ldi	r24, 0xDB	; 219
    18ae:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    18b0:	e0 91 11 01 	lds	r30, 0x0111
    18b4:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18b8:	80 e3       	ldi	r24, 0x30	; 48
    18ba:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    18bc:	e0 91 11 01 	lds	r30, 0x0111
    18c0:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18c4:	8d ea       	ldi	r24, 0xAD	; 173
    18c6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    18c8:	e0 91 11 01 	lds	r30, 0x0111
    18cc:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18d0:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    18d2:	e0 91 11 01 	lds	r30, 0x0111
    18d6:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18da:	84 ea       	ldi	r24, 0xA4	; 164
    18dc:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    18de:	e0 91 11 01 	lds	r30, 0x0111
    18e2:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18e6:	86 ea       	ldi	r24, 0xA6	; 166
    18e8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    18ea:	e0 91 11 01 	lds	r30, 0x0111
    18ee:	f0 91 12 01 	lds	r31, 0x0112
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    18f2:	8f ea       	ldi	r24, 0xAF	; 175
    18f4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    18f6:	5c de       	rcall	.-840    	; 0x15b0 <OLED_clear>
    18f8:	10 cf       	rjmp	.-480    	; 0x171a <OLED_splashScreen>
	OLED_splashScreen();
    18fa:	08 95       	ret

000018fc <SLI_init>:
uint8_t SLI_startup = 1; 

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    18fc:	10 92 36 03 	sts	0x0336, r1
	currentSliPosition.L_abs = 0;
    1900:	10 92 37 03 	sts	0x0337, r1
	currentSliPosition.R_per = 0;
    1904:	10 92 38 03 	sts	0x0338, r1
	currentSliPosition.L_per = 0;
    1908:	10 92 39 03 	sts	0x0339, r1
    190c:	08 95       	ret

0000190e <SLI_requestCurrentPosition>:

//------------------------------------------------------------------------------
// This function requests an AD conversion for the specified slider.
void SLI_requestCurrentPosition(uint8_t side)
{
	if(side == 'l')
    190e:	8c 36       	cpi	r24, 0x6C	; 108
    1910:	39 f4       	brne	.+14     	; 0x1920 <SLI_requestCurrentPosition+0x12>
	{
		ADC_request(L_channel, adc_ext_ram);
    1912:	60 91 06 01 	lds	r22, 0x0106
    1916:	70 91 07 01 	lds	r23, 0x0107
    191a:	83 e0       	ldi	r24, 0x03	; 3
    191c:	7d c0       	rjmp	.+250    	; 0x1a18 <ADC_request>
    191e:	08 95       	ret
    1920:	82 37       	cpi	r24, 0x72	; 114
	}

	else if(side == 'r')
    1922:	31 f4       	brne	.+12     	; 0x1930 <SLI_requestCurrentPosition+0x22>
    1924:	60 91 06 01 	lds	r22, 0x0106
	{
		ADC_request(R_channel, adc_ext_ram);
    1928:	70 91 07 01 	lds	r23, 0x0107
    192c:	84 e0       	ldi	r24, 0x04	; 4
    192e:	74 c0       	rjmp	.+232    	; 0x1a18 <ADC_request>
    1930:	08 95       	ret

00001932 <SLI_updatePosition>:
    1932:	8c 36       	cpi	r24, 0x6C	; 108
    1934:	71 f4       	brne	.+28     	; 0x1952 <SLI_updatePosition+0x20>
// received.
void SLI_updatePosition(uint8_t side)
{
	if(side == 'l')
	{
		currentSliPosition.L_abs = ADC_read(adc_ext_ram);
    1936:	80 91 06 01 	lds	r24, 0x0106
    193a:	90 91 07 01 	lds	r25, 0x0107
    193e:	94 d0       	rcall	.+296    	; 0x1a68 <ADC_read>
    1940:	80 93 37 03 	sts	0x0337, r24
    1944:	24 e6       	ldi	r18, 0x64	; 100
		currentSliPosition.L_per = currentSliPosition.L_abs * 100 / 256;
    1946:	82 9f       	mul	r24, r18
    1948:	c0 01       	movw	r24, r0
    194a:	11 24       	eor	r1, r1
    194c:	90 93 39 03 	sts	0x0339, r25
    1950:	08 95       	ret
    1952:	82 37       	cpi	r24, 0x72	; 114
		//printf("CurrSliPos_L: %d, CurrSliPos_R: %d\n", currentSliPosition.L_per, currentSliPosition.R_per);
	}

	else if(side == 'r')
    1954:	69 f4       	brne	.+26     	; 0x1970 <SLI_updatePosition+0x3e>
    1956:	80 91 06 01 	lds	r24, 0x0106
	{
		currentSliPosition.R_abs = ADC_read(adc_ext_ram);
    195a:	90 91 07 01 	lds	r25, 0x0107
    195e:	84 d0       	rcall	.+264    	; 0x1a68 <ADC_read>
    1960:	80 93 36 03 	sts	0x0336, r24
    1964:	24 e6       	ldi	r18, 0x64	; 100
    1966:	82 9f       	mul	r24, r18
		currentSliPosition.R_per = currentSliPosition.R_abs * 100 / 256;
    1968:	c0 01       	movw	r24, r0
    196a:	11 24       	eor	r1, r1
    196c:	90 93 38 03 	sts	0x0338, r25
    1970:	08 95       	ret

00001972 <SLI_getPosition>:
    1972:	82 e7       	ldi	r24, 0x72	; 114
    1974:	cc df       	rcall	.-104    	; 0x190e <SLI_requestCurrentPosition>
}

//
SLI_position_t SLI_getPosition()
{
	SLI_requestCurrentPosition('r');
    1976:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1978:	8a 95       	dec	r24
    197a:	f1 f7       	brne	.-4      	; 0x1978 <SLI_getPosition+0x6>
    197c:	00 00       	nop
    197e:	82 e7       	ldi	r24, 0x72	; 114
	_delay_us(60);
	SLI_updatePosition('r');
    1980:	d8 df       	rcall	.-80     	; 0x1932 <SLI_updatePosition>
    1982:	60 91 36 03 	lds	r22, 0x0336
	
	return currentSliPosition;
    1986:	70 91 37 03 	lds	r23, 0x0337
    198a:	80 91 38 03 	lds	r24, 0x0338
    198e:	90 91 39 03 	lds	r25, 0x0339
    1992:	08 95       	ret

00001994 <SPI_init>:

void SPI_init()
{
	//init external interrupt INT2 on falling edge
	#if defined(__AVR_ATmega162__)
		set_bit(GICR, INT2);
    1994:	8b b7       	in	r24, 0x3b	; 59
    1996:	80 62       	ori	r24, 0x20	; 32
    1998:	8b bf       	out	0x3b, r24	; 59
		clear_bit(EMCUCR, ISC2);
    199a:	86 b7       	in	r24, 0x36	; 54
    199c:	8e 7f       	andi	r24, 0xFE	; 254
    199e:	86 bf       	out	0x36, r24	; 54
		
		// Set _SS, MOSI and SCK output, all others input
		DDR_SPI |= (1<<SS_CAN_CONTROLLER_PIN_MODE) | (1<<MOSI_PIN) | (1<<SCK_PIN);
    19a0:	87 b3       	in	r24, 0x17	; 23
    19a2:	80 6b       	ori	r24, 0xB0	; 176
    19a4:	87 bb       	out	0x17, r24	; 23
	#endif
	
	

	// Enable SPI, Master, set clock rate fck/4
	SPCR = (1<<SPE) | (1<<MSTR);
    19a6:	80 e5       	ldi	r24, 0x50	; 80
    19a8:	8d b9       	out	0x0d, r24	; 13
	
	// clock rate fck/2
	SPSR = (1<<SPI2X);
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	8e b9       	out	0x0e, r24	; 14

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORT_SPI, SS_CAN_CONTROLLER_PIN);
    19ae:	c4 9a       	sbi	0x18, 4	; 24
    19b0:	08 95       	ret

000019b2 <SPI_send>:
}

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    19b2:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    19b4:	77 9b       	sbis	0x0e, 7	; 14
    19b6:	fe cf       	rjmp	.-4      	; 0x19b4 <SPI_send+0x2>
}
    19b8:	08 95       	ret

000019ba <SPI_receive>:

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    19ba:	8f ef       	ldi	r24, 0xFF	; 255
    19bc:	fa df       	rcall	.-12     	; 0x19b2 <SPI_send>
    19be:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    19c0:	fe cf       	rjmp	.-4      	; 0x19be <SPI_receive+0x4>
    19c2:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    19c4:	08 95       	ret

000019c6 <SPI_activateSlave>:

	return data;
}
    19c6:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    19c8:	01 c0       	rjmp	.+2      	; 0x19cc <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    19ca:	c4 98       	cbi	0x18, 4	; 24
    19cc:	08 95       	ret

000019ce <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    19ce:	81 11       	cpse	r24, r1
    19d0:	01 c0       	rjmp	.+2      	; 0x19d4 <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    19d2:	c4 9a       	sbi	0x18, 4	; 24
    19d4:	08 95       	ret

000019d6 <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    19d6:	5d 9b       	sbis	0x0b, 5	; 11
    19d8:	fe cf       	rjmp	.-4      	; 0x19d6 <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    19da:	8c b9       	out	0x0c, r24	; 12
    19dc:	08 95       	ret

000019de <uartReceive>:
//UART_Message_t uartReceive()
uint8_t uartReceive()
{

	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    19de:	5f 9b       	sbis	0x0b, 7	; 11
    19e0:	fe cf       	rjmp	.-4      	; 0x19de <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    19e2:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;

}
    19e4:	08 95       	ret

000019e6 <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    19e6:	ef 92       	push	r14
    19e8:	ff 92       	push	r15
    19ea:	0f 93       	push	r16
    19ec:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    19ee:	bb 27       	eor	r27, r27
    19f0:	a1 2f       	mov	r26, r17
    19f2:	90 2f       	mov	r25, r16
    19f4:	8f 2d       	mov	r24, r15
    19f6:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    19f8:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    19fa:	88 e1       	ldi	r24, 0x18	; 24
    19fc:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    19fe:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	#if defined(__AVR_ATmega162__)
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    1a00:	8e e8       	ldi	r24, 0x8E	; 142
    1a02:	80 bd       	out	0x20, r24	; 32
	
	#if defined(__AVR_ATmega2560__)
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	#endif
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    1a04:	6f ee       	ldi	r22, 0xEF	; 239
    1a06:	7c e0       	ldi	r23, 0x0C	; 12
    1a08:	8b ee       	ldi	r24, 0xEB	; 235
    1a0a:	9c e0       	ldi	r25, 0x0C	; 12
    1a0c:	7e d1       	rcall	.+764    	; 0x1d0a <fdevopen>
    1a0e:	1f 91       	pop	r17
    1a10:	0f 91       	pop	r16
    1a12:	ff 90       	pop	r15
    1a14:	ef 90       	pop	r14
    1a16:	08 95       	ret

00001a18 <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    1a18:	9b 01       	movw	r18, r22
	
	switch(channel){
    1a1a:	82 30       	cpi	r24, 0x02	; 2
    1a1c:	71 f0       	breq	.+28     	; 0x1a3a <ADC_request+0x22>
    1a1e:	18 f4       	brcc	.+6      	; 0x1a26 <ADC_request+0xe>
    1a20:	81 30       	cpi	r24, 0x01	; 1
    1a22:	31 f0       	breq	.+12     	; 0x1a30 <ADC_request+0x18>
    1a24:	19 c0       	rjmp	.+50     	; 0x1a58 <ADC_request+0x40>
    1a26:	83 30       	cpi	r24, 0x03	; 3
    1a28:	69 f0       	breq	.+26     	; 0x1a44 <ADC_request+0x2c>
    1a2a:	84 30       	cpi	r24, 0x04	; 4
    1a2c:	81 f0       	breq	.+32     	; 0x1a4e <ADC_request+0x36>
    1a2e:	14 c0       	rjmp	.+40     	; 0x1a58 <ADC_request+0x40>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    1a30:	64 e0       	ldi	r22, 0x04	; 4
    1a32:	c9 01       	movw	r24, r18
    1a34:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <saveToAddress>
			break;
    1a38:	08 95       	ret
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    1a3a:	65 e0       	ldi	r22, 0x05	; 5
    1a3c:	c9 01       	movw	r24, r18
    1a3e:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <saveToAddress>
			break;
    1a42:	08 95       	ret
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    1a44:	66 e0       	ldi	r22, 0x06	; 6
    1a46:	c9 01       	movw	r24, r18
    1a48:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <saveToAddress>
			break;
    1a4c:	08 95       	ret
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    1a4e:	67 e0       	ldi	r22, 0x07	; 7
    1a50:	c9 01       	movw	r24, r18
    1a52:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <saveToAddress>
			break;
    1a56:	08 95       	ret
			
		default:
			printf("Problems with ADC...");
    1a58:	84 ee       	ldi	r24, 0xE4	; 228
    1a5a:	92 e0       	ldi	r25, 0x02	; 2
    1a5c:	9f 93       	push	r25
    1a5e:	8f 93       	push	r24
    1a60:	9e d1       	rcall	.+828    	; 0x1d9e <printf>
    1a62:	0f 90       	pop	r0
			break;
    1a64:	0f 90       	pop	r0
    1a66:	08 95       	ret

00001a68 <ADC_read>:
    1a68:	0c 94 d9 04 	jmp	0x9b2	; 0x9b2 <readFromAddress>
}

uint8_t ADC_read(volatile char *ADC_ADDRESS)
{
	return (uint8_t)readFromAddress(ADC_ADDRESS);
}
    1a6c:	08 95       	ret

00001a6e <__divmodhi4>:
    1a6e:	97 fb       	bst	r25, 7
    1a70:	07 2e       	mov	r0, r23
    1a72:	16 f4       	brtc	.+4      	; 0x1a78 <__divmodhi4+0xa>
    1a74:	00 94       	com	r0
    1a76:	06 d0       	rcall	.+12     	; 0x1a84 <__divmodhi4_neg1>
    1a78:	77 fd       	sbrc	r23, 7
    1a7a:	08 d0       	rcall	.+16     	; 0x1a8c <__divmodhi4_neg2>
    1a7c:	0b d0       	rcall	.+22     	; 0x1a94 <__udivmodhi4>
    1a7e:	07 fc       	sbrc	r0, 7
    1a80:	05 d0       	rcall	.+10     	; 0x1a8c <__divmodhi4_neg2>
    1a82:	3e f4       	brtc	.+14     	; 0x1a92 <__divmodhi4_exit>

00001a84 <__divmodhi4_neg1>:
    1a84:	90 95       	com	r25
    1a86:	81 95       	neg	r24
    1a88:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8a:	08 95       	ret

00001a8c <__divmodhi4_neg2>:
    1a8c:	70 95       	com	r23
    1a8e:	61 95       	neg	r22
    1a90:	7f 4f       	sbci	r23, 0xFF	; 255

00001a92 <__divmodhi4_exit>:
    1a92:	08 95       	ret

00001a94 <__udivmodhi4>:
    1a94:	aa 1b       	sub	r26, r26
    1a96:	bb 1b       	sub	r27, r27
    1a98:	51 e1       	ldi	r21, 0x11	; 17
    1a9a:	07 c0       	rjmp	.+14     	; 0x1aaa <__udivmodhi4_ep>

00001a9c <__udivmodhi4_loop>:
    1a9c:	aa 1f       	adc	r26, r26
    1a9e:	bb 1f       	adc	r27, r27
    1aa0:	a6 17       	cp	r26, r22
    1aa2:	b7 07       	cpc	r27, r23
    1aa4:	10 f0       	brcs	.+4      	; 0x1aaa <__udivmodhi4_ep>
    1aa6:	a6 1b       	sub	r26, r22
    1aa8:	b7 0b       	sbc	r27, r23

00001aaa <__udivmodhi4_ep>:
    1aaa:	88 1f       	adc	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	5a 95       	dec	r21
    1ab0:	a9 f7       	brne	.-22     	; 0x1a9c <__udivmodhi4_loop>
    1ab2:	80 95       	com	r24
    1ab4:	90 95       	com	r25
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	cd 01       	movw	r24, r26
    1aba:	08 95       	ret

00001abc <malloc>:
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	82 30       	cpi	r24, 0x02	; 2
    1ac2:	91 05       	cpc	r25, r1
    1ac4:	10 f4       	brcc	.+4      	; 0x1aca <malloc+0xe>
    1ac6:	82 e0       	ldi	r24, 0x02	; 2
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	e0 91 3c 03 	lds	r30, 0x033C
    1ace:	f0 91 3d 03 	lds	r31, 0x033D
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	a0 e0       	ldi	r26, 0x00	; 0
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	30 97       	sbiw	r30, 0x00	; 0
    1adc:	39 f1       	breq	.+78     	; 0x1b2c <malloc+0x70>
    1ade:	40 81       	ld	r20, Z
    1ae0:	51 81       	ldd	r21, Z+1	; 0x01
    1ae2:	48 17       	cp	r20, r24
    1ae4:	59 07       	cpc	r21, r25
    1ae6:	b8 f0       	brcs	.+46     	; 0x1b16 <malloc+0x5a>
    1ae8:	48 17       	cp	r20, r24
    1aea:	59 07       	cpc	r21, r25
    1aec:	71 f4       	brne	.+28     	; 0x1b0a <malloc+0x4e>
    1aee:	82 81       	ldd	r24, Z+2	; 0x02
    1af0:	93 81       	ldd	r25, Z+3	; 0x03
    1af2:	10 97       	sbiw	r26, 0x00	; 0
    1af4:	29 f0       	breq	.+10     	; 0x1b00 <malloc+0x44>
    1af6:	13 96       	adiw	r26, 0x03	; 3
    1af8:	9c 93       	st	X, r25
    1afa:	8e 93       	st	-X, r24
    1afc:	12 97       	sbiw	r26, 0x02	; 2
    1afe:	2c c0       	rjmp	.+88     	; 0x1b58 <malloc+0x9c>
    1b00:	90 93 3d 03 	sts	0x033D, r25
    1b04:	80 93 3c 03 	sts	0x033C, r24
    1b08:	27 c0       	rjmp	.+78     	; 0x1b58 <malloc+0x9c>
    1b0a:	21 15       	cp	r18, r1
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	31 f0       	breq	.+12     	; 0x1b1c <malloc+0x60>
    1b10:	42 17       	cp	r20, r18
    1b12:	53 07       	cpc	r21, r19
    1b14:	18 f0       	brcs	.+6      	; 0x1b1c <malloc+0x60>
    1b16:	a9 01       	movw	r20, r18
    1b18:	db 01       	movw	r26, r22
    1b1a:	01 c0       	rjmp	.+2      	; 0x1b1e <malloc+0x62>
    1b1c:	ef 01       	movw	r28, r30
    1b1e:	9a 01       	movw	r18, r20
    1b20:	bd 01       	movw	r22, r26
    1b22:	df 01       	movw	r26, r30
    1b24:	02 80       	ldd	r0, Z+2	; 0x02
    1b26:	f3 81       	ldd	r31, Z+3	; 0x03
    1b28:	e0 2d       	mov	r30, r0
    1b2a:	d7 cf       	rjmp	.-82     	; 0x1ada <malloc+0x1e>
    1b2c:	21 15       	cp	r18, r1
    1b2e:	31 05       	cpc	r19, r1
    1b30:	f9 f0       	breq	.+62     	; 0x1b70 <malloc+0xb4>
    1b32:	28 1b       	sub	r18, r24
    1b34:	39 0b       	sbc	r19, r25
    1b36:	24 30       	cpi	r18, 0x04	; 4
    1b38:	31 05       	cpc	r19, r1
    1b3a:	80 f4       	brcc	.+32     	; 0x1b5c <malloc+0xa0>
    1b3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b40:	61 15       	cp	r22, r1
    1b42:	71 05       	cpc	r23, r1
    1b44:	21 f0       	breq	.+8      	; 0x1b4e <malloc+0x92>
    1b46:	fb 01       	movw	r30, r22
    1b48:	93 83       	std	Z+3, r25	; 0x03
    1b4a:	82 83       	std	Z+2, r24	; 0x02
    1b4c:	04 c0       	rjmp	.+8      	; 0x1b56 <malloc+0x9a>
    1b4e:	90 93 3d 03 	sts	0x033D, r25
    1b52:	80 93 3c 03 	sts	0x033C, r24
    1b56:	fe 01       	movw	r30, r28
    1b58:	32 96       	adiw	r30, 0x02	; 2
    1b5a:	44 c0       	rjmp	.+136    	; 0x1be4 <malloc+0x128>
    1b5c:	fe 01       	movw	r30, r28
    1b5e:	e2 0f       	add	r30, r18
    1b60:	f3 1f       	adc	r31, r19
    1b62:	81 93       	st	Z+, r24
    1b64:	91 93       	st	Z+, r25
    1b66:	22 50       	subi	r18, 0x02	; 2
    1b68:	31 09       	sbc	r19, r1
    1b6a:	39 83       	std	Y+1, r19	; 0x01
    1b6c:	28 83       	st	Y, r18
    1b6e:	3a c0       	rjmp	.+116    	; 0x1be4 <malloc+0x128>
    1b70:	20 91 3a 03 	lds	r18, 0x033A
    1b74:	30 91 3b 03 	lds	r19, 0x033B
    1b78:	23 2b       	or	r18, r19
    1b7a:	41 f4       	brne	.+16     	; 0x1b8c <malloc+0xd0>
    1b7c:	20 91 02 01 	lds	r18, 0x0102
    1b80:	30 91 03 01 	lds	r19, 0x0103
    1b84:	30 93 3b 03 	sts	0x033B, r19
    1b88:	20 93 3a 03 	sts	0x033A, r18
    1b8c:	20 91 00 01 	lds	r18, 0x0100
    1b90:	30 91 01 01 	lds	r19, 0x0101
    1b94:	21 15       	cp	r18, r1
    1b96:	31 05       	cpc	r19, r1
    1b98:	41 f4       	brne	.+16     	; 0x1baa <malloc+0xee>
    1b9a:	2d b7       	in	r18, 0x3d	; 61
    1b9c:	3e b7       	in	r19, 0x3e	; 62
    1b9e:	40 91 04 01 	lds	r20, 0x0104
    1ba2:	50 91 05 01 	lds	r21, 0x0105
    1ba6:	24 1b       	sub	r18, r20
    1ba8:	35 0b       	sbc	r19, r21
    1baa:	e0 91 3a 03 	lds	r30, 0x033A
    1bae:	f0 91 3b 03 	lds	r31, 0x033B
    1bb2:	e2 17       	cp	r30, r18
    1bb4:	f3 07       	cpc	r31, r19
    1bb6:	a0 f4       	brcc	.+40     	; 0x1be0 <malloc+0x124>
    1bb8:	2e 1b       	sub	r18, r30
    1bba:	3f 0b       	sbc	r19, r31
    1bbc:	28 17       	cp	r18, r24
    1bbe:	39 07       	cpc	r19, r25
    1bc0:	78 f0       	brcs	.+30     	; 0x1be0 <malloc+0x124>
    1bc2:	ac 01       	movw	r20, r24
    1bc4:	4e 5f       	subi	r20, 0xFE	; 254
    1bc6:	5f 4f       	sbci	r21, 0xFF	; 255
    1bc8:	24 17       	cp	r18, r20
    1bca:	35 07       	cpc	r19, r21
    1bcc:	48 f0       	brcs	.+18     	; 0x1be0 <malloc+0x124>
    1bce:	4e 0f       	add	r20, r30
    1bd0:	5f 1f       	adc	r21, r31
    1bd2:	50 93 3b 03 	sts	0x033B, r21
    1bd6:	40 93 3a 03 	sts	0x033A, r20
    1bda:	81 93       	st	Z+, r24
    1bdc:	91 93       	st	Z+, r25
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <malloc+0x128>
    1be0:	e0 e0       	ldi	r30, 0x00	; 0
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	cf 01       	movw	r24, r30
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	08 95       	ret

00001bec <free>:
    1bec:	cf 93       	push	r28
    1bee:	df 93       	push	r29
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	09 f4       	brne	.+2      	; 0x1bf6 <free+0xa>
    1bf4:	87 c0       	rjmp	.+270    	; 0x1d04 <free+0x118>
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	32 97       	sbiw	r30, 0x02	; 2
    1bfa:	13 82       	std	Z+3, r1	; 0x03
    1bfc:	12 82       	std	Z+2, r1	; 0x02
    1bfe:	c0 91 3c 03 	lds	r28, 0x033C
    1c02:	d0 91 3d 03 	lds	r29, 0x033D
    1c06:	20 97       	sbiw	r28, 0x00	; 0
    1c08:	81 f4       	brne	.+32     	; 0x1c2a <free+0x3e>
    1c0a:	20 81       	ld	r18, Z
    1c0c:	31 81       	ldd	r19, Z+1	; 0x01
    1c0e:	28 0f       	add	r18, r24
    1c10:	39 1f       	adc	r19, r25
    1c12:	80 91 3a 03 	lds	r24, 0x033A
    1c16:	90 91 3b 03 	lds	r25, 0x033B
    1c1a:	82 17       	cp	r24, r18
    1c1c:	93 07       	cpc	r25, r19
    1c1e:	79 f5       	brne	.+94     	; 0x1c7e <free+0x92>
    1c20:	f0 93 3b 03 	sts	0x033B, r31
    1c24:	e0 93 3a 03 	sts	0x033A, r30
    1c28:	6d c0       	rjmp	.+218    	; 0x1d04 <free+0x118>
    1c2a:	de 01       	movw	r26, r28
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	ae 17       	cp	r26, r30
    1c32:	bf 07       	cpc	r27, r31
    1c34:	50 f4       	brcc	.+20     	; 0x1c4a <free+0x5e>
    1c36:	12 96       	adiw	r26, 0x02	; 2
    1c38:	4d 91       	ld	r20, X+
    1c3a:	5c 91       	ld	r21, X
    1c3c:	13 97       	sbiw	r26, 0x03	; 3
    1c3e:	9d 01       	movw	r18, r26
    1c40:	41 15       	cp	r20, r1
    1c42:	51 05       	cpc	r21, r1
    1c44:	09 f1       	breq	.+66     	; 0x1c88 <free+0x9c>
    1c46:	da 01       	movw	r26, r20
    1c48:	f3 cf       	rjmp	.-26     	; 0x1c30 <free+0x44>
    1c4a:	b3 83       	std	Z+3, r27	; 0x03
    1c4c:	a2 83       	std	Z+2, r26	; 0x02
    1c4e:	40 81       	ld	r20, Z
    1c50:	51 81       	ldd	r21, Z+1	; 0x01
    1c52:	84 0f       	add	r24, r20
    1c54:	95 1f       	adc	r25, r21
    1c56:	8a 17       	cp	r24, r26
    1c58:	9b 07       	cpc	r25, r27
    1c5a:	71 f4       	brne	.+28     	; 0x1c78 <free+0x8c>
    1c5c:	8d 91       	ld	r24, X+
    1c5e:	9c 91       	ld	r25, X
    1c60:	11 97       	sbiw	r26, 0x01	; 1
    1c62:	84 0f       	add	r24, r20
    1c64:	95 1f       	adc	r25, r21
    1c66:	02 96       	adiw	r24, 0x02	; 2
    1c68:	91 83       	std	Z+1, r25	; 0x01
    1c6a:	80 83       	st	Z, r24
    1c6c:	12 96       	adiw	r26, 0x02	; 2
    1c6e:	8d 91       	ld	r24, X+
    1c70:	9c 91       	ld	r25, X
    1c72:	13 97       	sbiw	r26, 0x03	; 3
    1c74:	93 83       	std	Z+3, r25	; 0x03
    1c76:	82 83       	std	Z+2, r24	; 0x02
    1c78:	21 15       	cp	r18, r1
    1c7a:	31 05       	cpc	r19, r1
    1c7c:	29 f4       	brne	.+10     	; 0x1c88 <free+0x9c>
    1c7e:	f0 93 3d 03 	sts	0x033D, r31
    1c82:	e0 93 3c 03 	sts	0x033C, r30
    1c86:	3e c0       	rjmp	.+124    	; 0x1d04 <free+0x118>
    1c88:	d9 01       	movw	r26, r18
    1c8a:	13 96       	adiw	r26, 0x03	; 3
    1c8c:	fc 93       	st	X, r31
    1c8e:	ee 93       	st	-X, r30
    1c90:	12 97       	sbiw	r26, 0x02	; 2
    1c92:	4d 91       	ld	r20, X+
    1c94:	5d 91       	ld	r21, X+
    1c96:	a4 0f       	add	r26, r20
    1c98:	b5 1f       	adc	r27, r21
    1c9a:	ea 17       	cp	r30, r26
    1c9c:	fb 07       	cpc	r31, r27
    1c9e:	79 f4       	brne	.+30     	; 0x1cbe <free+0xd2>
    1ca0:	80 81       	ld	r24, Z
    1ca2:	91 81       	ldd	r25, Z+1	; 0x01
    1ca4:	84 0f       	add	r24, r20
    1ca6:	95 1f       	adc	r25, r21
    1ca8:	02 96       	adiw	r24, 0x02	; 2
    1caa:	d9 01       	movw	r26, r18
    1cac:	11 96       	adiw	r26, 0x01	; 1
    1cae:	9c 93       	st	X, r25
    1cb0:	8e 93       	st	-X, r24
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	13 96       	adiw	r26, 0x03	; 3
    1cb8:	9c 93       	st	X, r25
    1cba:	8e 93       	st	-X, r24
    1cbc:	12 97       	sbiw	r26, 0x02	; 2
    1cbe:	e0 e0       	ldi	r30, 0x00	; 0
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc6:	00 97       	sbiw	r24, 0x00	; 0
    1cc8:	19 f0       	breq	.+6      	; 0x1cd0 <free+0xe4>
    1cca:	fe 01       	movw	r30, r28
    1ccc:	ec 01       	movw	r28, r24
    1cce:	f9 cf       	rjmp	.-14     	; 0x1cc2 <free+0xd6>
    1cd0:	ce 01       	movw	r24, r28
    1cd2:	02 96       	adiw	r24, 0x02	; 2
    1cd4:	28 81       	ld	r18, Y
    1cd6:	39 81       	ldd	r19, Y+1	; 0x01
    1cd8:	82 0f       	add	r24, r18
    1cda:	93 1f       	adc	r25, r19
    1cdc:	20 91 3a 03 	lds	r18, 0x033A
    1ce0:	30 91 3b 03 	lds	r19, 0x033B
    1ce4:	28 17       	cp	r18, r24
    1ce6:	39 07       	cpc	r19, r25
    1ce8:	69 f4       	brne	.+26     	; 0x1d04 <free+0x118>
    1cea:	30 97       	sbiw	r30, 0x00	; 0
    1cec:	29 f4       	brne	.+10     	; 0x1cf8 <free+0x10c>
    1cee:	10 92 3d 03 	sts	0x033D, r1
    1cf2:	10 92 3c 03 	sts	0x033C, r1
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <free+0x110>
    1cf8:	13 82       	std	Z+3, r1	; 0x03
    1cfa:	12 82       	std	Z+2, r1	; 0x02
    1cfc:	d0 93 3b 03 	sts	0x033B, r29
    1d00:	c0 93 3a 03 	sts	0x033A, r28
    1d04:	df 91       	pop	r29
    1d06:	cf 91       	pop	r28
    1d08:	08 95       	ret

00001d0a <fdevopen>:
    1d0a:	0f 93       	push	r16
    1d0c:	1f 93       	push	r17
    1d0e:	cf 93       	push	r28
    1d10:	df 93       	push	r29
    1d12:	ec 01       	movw	r28, r24
    1d14:	8b 01       	movw	r16, r22
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	31 f4       	brne	.+12     	; 0x1d26 <fdevopen+0x1c>
    1d1a:	61 15       	cp	r22, r1
    1d1c:	71 05       	cpc	r23, r1
    1d1e:	19 f4       	brne	.+6      	; 0x1d26 <fdevopen+0x1c>
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	37 c0       	rjmp	.+110    	; 0x1d94 <fdevopen+0x8a>
    1d26:	6e e0       	ldi	r22, 0x0E	; 14
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	5c d2       	rcall	.+1208   	; 0x21e8 <calloc>
    1d30:	fc 01       	movw	r30, r24
    1d32:	00 97       	sbiw	r24, 0x00	; 0
    1d34:	a9 f3       	breq	.-22     	; 0x1d20 <fdevopen+0x16>
    1d36:	80 e8       	ldi	r24, 0x80	; 128
    1d38:	83 83       	std	Z+3, r24	; 0x03
    1d3a:	01 15       	cp	r16, r1
    1d3c:	11 05       	cpc	r17, r1
    1d3e:	71 f0       	breq	.+28     	; 0x1d5c <fdevopen+0x52>
    1d40:	13 87       	std	Z+11, r17	; 0x0b
    1d42:	02 87       	std	Z+10, r16	; 0x0a
    1d44:	81 e8       	ldi	r24, 0x81	; 129
    1d46:	83 83       	std	Z+3, r24	; 0x03
    1d48:	80 91 3e 03 	lds	r24, 0x033E
    1d4c:	90 91 3f 03 	lds	r25, 0x033F
    1d50:	89 2b       	or	r24, r25
    1d52:	21 f4       	brne	.+8      	; 0x1d5c <fdevopen+0x52>
    1d54:	f0 93 3f 03 	sts	0x033F, r31
    1d58:	e0 93 3e 03 	sts	0x033E, r30
    1d5c:	20 97       	sbiw	r28, 0x00	; 0
    1d5e:	c9 f0       	breq	.+50     	; 0x1d92 <fdevopen+0x88>
    1d60:	d1 87       	std	Z+9, r29	; 0x09
    1d62:	c0 87       	std	Z+8, r28	; 0x08
    1d64:	83 81       	ldd	r24, Z+3	; 0x03
    1d66:	82 60       	ori	r24, 0x02	; 2
    1d68:	83 83       	std	Z+3, r24	; 0x03
    1d6a:	80 91 40 03 	lds	r24, 0x0340
    1d6e:	90 91 41 03 	lds	r25, 0x0341
    1d72:	89 2b       	or	r24, r25
    1d74:	71 f4       	brne	.+28     	; 0x1d92 <fdevopen+0x88>
    1d76:	f0 93 41 03 	sts	0x0341, r31
    1d7a:	e0 93 40 03 	sts	0x0340, r30
    1d7e:	80 91 42 03 	lds	r24, 0x0342
    1d82:	90 91 43 03 	lds	r25, 0x0343
    1d86:	89 2b       	or	r24, r25
    1d88:	21 f4       	brne	.+8      	; 0x1d92 <fdevopen+0x88>
    1d8a:	f0 93 43 03 	sts	0x0343, r31
    1d8e:	e0 93 42 03 	sts	0x0342, r30
    1d92:	cf 01       	movw	r24, r30
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	08 95       	ret

00001d9e <printf>:
    1d9e:	a0 e0       	ldi	r26, 0x00	; 0
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e4 ed       	ldi	r30, 0xD4	; 212
    1da4:	fe e0       	ldi	r31, 0x0E	; 14
    1da6:	f7 c2       	rjmp	.+1518   	; 0x2396 <__prologue_saves__+0x20>
    1da8:	fe 01       	movw	r30, r28
    1daa:	35 96       	adiw	r30, 0x05	; 5
    1dac:	61 91       	ld	r22, Z+
    1dae:	71 91       	ld	r23, Z+
    1db0:	af 01       	movw	r20, r30
    1db2:	80 91 40 03 	lds	r24, 0x0340
    1db6:	90 91 41 03 	lds	r25, 0x0341
    1dba:	53 d0       	rcall	.+166    	; 0x1e62 <vfprintf>
    1dbc:	e2 e0       	ldi	r30, 0x02	; 2
    1dbe:	07 c3       	rjmp	.+1550   	; 0x23ce <__epilogue_restores__+0x20>

00001dc0 <putchar>:
    1dc0:	60 91 40 03 	lds	r22, 0x0340
    1dc4:	70 91 41 03 	lds	r23, 0x0341
    1dc8:	46 c2       	rjmp	.+1164   	; 0x2256 <fputc>

00001dca <puts>:
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	e0 91 40 03 	lds	r30, 0x0340
    1dd6:	f0 91 41 03 	lds	r31, 0x0341
    1dda:	23 81       	ldd	r18, Z+3	; 0x03
    1ddc:	21 ff       	sbrs	r18, 1
    1dde:	1b c0       	rjmp	.+54     	; 0x1e16 <puts+0x4c>
    1de0:	ec 01       	movw	r28, r24
    1de2:	00 e0       	ldi	r16, 0x00	; 0
    1de4:	10 e0       	ldi	r17, 0x00	; 0
    1de6:	89 91       	ld	r24, Y+
    1de8:	60 91 40 03 	lds	r22, 0x0340
    1dec:	70 91 41 03 	lds	r23, 0x0341
    1df0:	db 01       	movw	r26, r22
    1df2:	18 96       	adiw	r26, 0x08	; 8
    1df4:	ed 91       	ld	r30, X+
    1df6:	fc 91       	ld	r31, X
    1df8:	19 97       	sbiw	r26, 0x09	; 9
    1dfa:	88 23       	and	r24, r24
    1dfc:	31 f0       	breq	.+12     	; 0x1e0a <puts+0x40>
    1dfe:	09 95       	icall
    1e00:	89 2b       	or	r24, r25
    1e02:	89 f3       	breq	.-30     	; 0x1de6 <puts+0x1c>
    1e04:	0f ef       	ldi	r16, 0xFF	; 255
    1e06:	1f ef       	ldi	r17, 0xFF	; 255
    1e08:	ee cf       	rjmp	.-36     	; 0x1de6 <puts+0x1c>
    1e0a:	8a e0       	ldi	r24, 0x0A	; 10
    1e0c:	09 95       	icall
    1e0e:	89 2b       	or	r24, r25
    1e10:	11 f4       	brne	.+4      	; 0x1e16 <puts+0x4c>
    1e12:	c8 01       	movw	r24, r16
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <puts+0x50>
    1e16:	8f ef       	ldi	r24, 0xFF	; 255
    1e18:	9f ef       	ldi	r25, 0xFF	; 255
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	1f 91       	pop	r17
    1e20:	0f 91       	pop	r16
    1e22:	08 95       	ret

00001e24 <sprintf>:
    1e24:	ae e0       	ldi	r26, 0x0E	; 14
    1e26:	b0 e0       	ldi	r27, 0x00	; 0
    1e28:	e7 e1       	ldi	r30, 0x17	; 23
    1e2a:	ff e0       	ldi	r31, 0x0F	; 15
    1e2c:	b2 c2       	rjmp	.+1380   	; 0x2392 <__prologue_saves__+0x1c>
    1e2e:	0d 89       	ldd	r16, Y+21	; 0x15
    1e30:	1e 89       	ldd	r17, Y+22	; 0x16
    1e32:	86 e0       	ldi	r24, 0x06	; 6
    1e34:	8c 83       	std	Y+4, r24	; 0x04
    1e36:	1a 83       	std	Y+2, r17	; 0x02
    1e38:	09 83       	std	Y+1, r16	; 0x01
    1e3a:	8f ef       	ldi	r24, 0xFF	; 255
    1e3c:	9f e7       	ldi	r25, 0x7F	; 127
    1e3e:	9e 83       	std	Y+6, r25	; 0x06
    1e40:	8d 83       	std	Y+5, r24	; 0x05
    1e42:	ae 01       	movw	r20, r28
    1e44:	47 5e       	subi	r20, 0xE7	; 231
    1e46:	5f 4f       	sbci	r21, 0xFF	; 255
    1e48:	6f 89       	ldd	r22, Y+23	; 0x17
    1e4a:	78 8d       	ldd	r23, Y+24	; 0x18
    1e4c:	ce 01       	movw	r24, r28
    1e4e:	01 96       	adiw	r24, 0x01	; 1
    1e50:	08 d0       	rcall	.+16     	; 0x1e62 <vfprintf>
    1e52:	ef 81       	ldd	r30, Y+7	; 0x07
    1e54:	f8 85       	ldd	r31, Y+8	; 0x08
    1e56:	e0 0f       	add	r30, r16
    1e58:	f1 1f       	adc	r31, r17
    1e5a:	10 82       	st	Z, r1
    1e5c:	2e 96       	adiw	r28, 0x0e	; 14
    1e5e:	e4 e0       	ldi	r30, 0x04	; 4
    1e60:	b4 c2       	rjmp	.+1384   	; 0x23ca <__epilogue_restores__+0x1c>

00001e62 <vfprintf>:
    1e62:	ac e0       	ldi	r26, 0x0C	; 12
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e6 e3       	ldi	r30, 0x36	; 54
    1e68:	ff e0       	ldi	r31, 0x0F	; 15
    1e6a:	85 c2       	rjmp	.+1290   	; 0x2376 <__prologue_saves__>
    1e6c:	7c 01       	movw	r14, r24
    1e6e:	6b 01       	movw	r12, r22
    1e70:	8a 01       	movw	r16, r20
    1e72:	fc 01       	movw	r30, r24
    1e74:	17 82       	std	Z+7, r1	; 0x07
    1e76:	16 82       	std	Z+6, r1	; 0x06
    1e78:	83 81       	ldd	r24, Z+3	; 0x03
    1e7a:	81 ff       	sbrs	r24, 1
    1e7c:	b0 c1       	rjmp	.+864    	; 0x21de <vfprintf+0x37c>
    1e7e:	ce 01       	movw	r24, r28
    1e80:	01 96       	adiw	r24, 0x01	; 1
    1e82:	4c 01       	movw	r8, r24
    1e84:	f7 01       	movw	r30, r14
    1e86:	93 81       	ldd	r25, Z+3	; 0x03
    1e88:	f6 01       	movw	r30, r12
    1e8a:	93 fd       	sbrc	r25, 3
    1e8c:	85 91       	lpm	r24, Z+
    1e8e:	93 ff       	sbrs	r25, 3
    1e90:	81 91       	ld	r24, Z+
    1e92:	6f 01       	movw	r12, r30
    1e94:	88 23       	and	r24, r24
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <vfprintf+0x38>
    1e98:	9e c1       	rjmp	.+828    	; 0x21d6 <vfprintf+0x374>
    1e9a:	85 32       	cpi	r24, 0x25	; 37
    1e9c:	39 f4       	brne	.+14     	; 0x1eac <vfprintf+0x4a>
    1e9e:	93 fd       	sbrc	r25, 3
    1ea0:	85 91       	lpm	r24, Z+
    1ea2:	93 ff       	sbrs	r25, 3
    1ea4:	81 91       	ld	r24, Z+
    1ea6:	6f 01       	movw	r12, r30
    1ea8:	85 32       	cpi	r24, 0x25	; 37
    1eaa:	21 f4       	brne	.+8      	; 0x1eb4 <vfprintf+0x52>
    1eac:	b7 01       	movw	r22, r14
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	d2 d1       	rcall	.+932    	; 0x2256 <fputc>
    1eb2:	e8 cf       	rjmp	.-48     	; 0x1e84 <vfprintf+0x22>
    1eb4:	51 2c       	mov	r5, r1
    1eb6:	31 2c       	mov	r3, r1
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	20 32       	cpi	r18, 0x20	; 32
    1ebc:	a0 f4       	brcc	.+40     	; 0x1ee6 <vfprintf+0x84>
    1ebe:	8b 32       	cpi	r24, 0x2B	; 43
    1ec0:	69 f0       	breq	.+26     	; 0x1edc <vfprintf+0x7a>
    1ec2:	30 f4       	brcc	.+12     	; 0x1ed0 <vfprintf+0x6e>
    1ec4:	80 32       	cpi	r24, 0x20	; 32
    1ec6:	59 f0       	breq	.+22     	; 0x1ede <vfprintf+0x7c>
    1ec8:	83 32       	cpi	r24, 0x23	; 35
    1eca:	69 f4       	brne	.+26     	; 0x1ee6 <vfprintf+0x84>
    1ecc:	20 61       	ori	r18, 0x10	; 16
    1ece:	2c c0       	rjmp	.+88     	; 0x1f28 <vfprintf+0xc6>
    1ed0:	8d 32       	cpi	r24, 0x2D	; 45
    1ed2:	39 f0       	breq	.+14     	; 0x1ee2 <vfprintf+0x80>
    1ed4:	80 33       	cpi	r24, 0x30	; 48
    1ed6:	39 f4       	brne	.+14     	; 0x1ee6 <vfprintf+0x84>
    1ed8:	21 60       	ori	r18, 0x01	; 1
    1eda:	26 c0       	rjmp	.+76     	; 0x1f28 <vfprintf+0xc6>
    1edc:	22 60       	ori	r18, 0x02	; 2
    1ede:	24 60       	ori	r18, 0x04	; 4
    1ee0:	23 c0       	rjmp	.+70     	; 0x1f28 <vfprintf+0xc6>
    1ee2:	28 60       	ori	r18, 0x08	; 8
    1ee4:	21 c0       	rjmp	.+66     	; 0x1f28 <vfprintf+0xc6>
    1ee6:	27 fd       	sbrc	r18, 7
    1ee8:	27 c0       	rjmp	.+78     	; 0x1f38 <vfprintf+0xd6>
    1eea:	30 ed       	ldi	r19, 0xD0	; 208
    1eec:	38 0f       	add	r19, r24
    1eee:	3a 30       	cpi	r19, 0x0A	; 10
    1ef0:	78 f4       	brcc	.+30     	; 0x1f10 <vfprintf+0xae>
    1ef2:	26 ff       	sbrs	r18, 6
    1ef4:	06 c0       	rjmp	.+12     	; 0x1f02 <vfprintf+0xa0>
    1ef6:	fa e0       	ldi	r31, 0x0A	; 10
    1ef8:	5f 9e       	mul	r5, r31
    1efa:	30 0d       	add	r19, r0
    1efc:	11 24       	eor	r1, r1
    1efe:	53 2e       	mov	r5, r19
    1f00:	13 c0       	rjmp	.+38     	; 0x1f28 <vfprintf+0xc6>
    1f02:	8a e0       	ldi	r24, 0x0A	; 10
    1f04:	38 9e       	mul	r3, r24
    1f06:	30 0d       	add	r19, r0
    1f08:	11 24       	eor	r1, r1
    1f0a:	33 2e       	mov	r3, r19
    1f0c:	20 62       	ori	r18, 0x20	; 32
    1f0e:	0c c0       	rjmp	.+24     	; 0x1f28 <vfprintf+0xc6>
    1f10:	8e 32       	cpi	r24, 0x2E	; 46
    1f12:	21 f4       	brne	.+8      	; 0x1f1c <vfprintf+0xba>
    1f14:	26 fd       	sbrc	r18, 6
    1f16:	5f c1       	rjmp	.+702    	; 0x21d6 <vfprintf+0x374>
    1f18:	20 64       	ori	r18, 0x40	; 64
    1f1a:	06 c0       	rjmp	.+12     	; 0x1f28 <vfprintf+0xc6>
    1f1c:	8c 36       	cpi	r24, 0x6C	; 108
    1f1e:	11 f4       	brne	.+4      	; 0x1f24 <vfprintf+0xc2>
    1f20:	20 68       	ori	r18, 0x80	; 128
    1f22:	02 c0       	rjmp	.+4      	; 0x1f28 <vfprintf+0xc6>
    1f24:	88 36       	cpi	r24, 0x68	; 104
    1f26:	41 f4       	brne	.+16     	; 0x1f38 <vfprintf+0xd6>
    1f28:	f6 01       	movw	r30, r12
    1f2a:	93 fd       	sbrc	r25, 3
    1f2c:	85 91       	lpm	r24, Z+
    1f2e:	93 ff       	sbrs	r25, 3
    1f30:	81 91       	ld	r24, Z+
    1f32:	6f 01       	movw	r12, r30
    1f34:	81 11       	cpse	r24, r1
    1f36:	c1 cf       	rjmp	.-126    	; 0x1eba <vfprintf+0x58>
    1f38:	98 2f       	mov	r25, r24
    1f3a:	9f 7d       	andi	r25, 0xDF	; 223
    1f3c:	95 54       	subi	r25, 0x45	; 69
    1f3e:	93 30       	cpi	r25, 0x03	; 3
    1f40:	28 f4       	brcc	.+10     	; 0x1f4c <vfprintf+0xea>
    1f42:	0c 5f       	subi	r16, 0xFC	; 252
    1f44:	1f 4f       	sbci	r17, 0xFF	; 255
    1f46:	ff e3       	ldi	r31, 0x3F	; 63
    1f48:	f9 83       	std	Y+1, r31	; 0x01
    1f4a:	0d c0       	rjmp	.+26     	; 0x1f66 <vfprintf+0x104>
    1f4c:	83 36       	cpi	r24, 0x63	; 99
    1f4e:	31 f0       	breq	.+12     	; 0x1f5c <vfprintf+0xfa>
    1f50:	83 37       	cpi	r24, 0x73	; 115
    1f52:	71 f0       	breq	.+28     	; 0x1f70 <vfprintf+0x10e>
    1f54:	83 35       	cpi	r24, 0x53	; 83
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <vfprintf+0xf8>
    1f58:	57 c0       	rjmp	.+174    	; 0x2008 <vfprintf+0x1a6>
    1f5a:	21 c0       	rjmp	.+66     	; 0x1f9e <vfprintf+0x13c>
    1f5c:	f8 01       	movw	r30, r16
    1f5e:	80 81       	ld	r24, Z
    1f60:	89 83       	std	Y+1, r24	; 0x01
    1f62:	0e 5f       	subi	r16, 0xFE	; 254
    1f64:	1f 4f       	sbci	r17, 0xFF	; 255
    1f66:	44 24       	eor	r4, r4
    1f68:	43 94       	inc	r4
    1f6a:	51 2c       	mov	r5, r1
    1f6c:	54 01       	movw	r10, r8
    1f6e:	14 c0       	rjmp	.+40     	; 0x1f98 <vfprintf+0x136>
    1f70:	38 01       	movw	r6, r16
    1f72:	f2 e0       	ldi	r31, 0x02	; 2
    1f74:	6f 0e       	add	r6, r31
    1f76:	71 1c       	adc	r7, r1
    1f78:	f8 01       	movw	r30, r16
    1f7a:	a0 80       	ld	r10, Z
    1f7c:	b1 80       	ldd	r11, Z+1	; 0x01
    1f7e:	26 ff       	sbrs	r18, 6
    1f80:	03 c0       	rjmp	.+6      	; 0x1f88 <vfprintf+0x126>
    1f82:	65 2d       	mov	r22, r5
    1f84:	70 e0       	ldi	r23, 0x00	; 0
    1f86:	02 c0       	rjmp	.+4      	; 0x1f8c <vfprintf+0x12a>
    1f88:	6f ef       	ldi	r22, 0xFF	; 255
    1f8a:	7f ef       	ldi	r23, 0xFF	; 255
    1f8c:	c5 01       	movw	r24, r10
    1f8e:	2c 87       	std	Y+12, r18	; 0x0c
    1f90:	57 d1       	rcall	.+686    	; 0x2240 <strnlen>
    1f92:	2c 01       	movw	r4, r24
    1f94:	83 01       	movw	r16, r6
    1f96:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f98:	2f 77       	andi	r18, 0x7F	; 127
    1f9a:	22 2e       	mov	r2, r18
    1f9c:	16 c0       	rjmp	.+44     	; 0x1fca <vfprintf+0x168>
    1f9e:	38 01       	movw	r6, r16
    1fa0:	f2 e0       	ldi	r31, 0x02	; 2
    1fa2:	6f 0e       	add	r6, r31
    1fa4:	71 1c       	adc	r7, r1
    1fa6:	f8 01       	movw	r30, r16
    1fa8:	a0 80       	ld	r10, Z
    1faa:	b1 80       	ldd	r11, Z+1	; 0x01
    1fac:	26 ff       	sbrs	r18, 6
    1fae:	03 c0       	rjmp	.+6      	; 0x1fb6 <vfprintf+0x154>
    1fb0:	65 2d       	mov	r22, r5
    1fb2:	70 e0       	ldi	r23, 0x00	; 0
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <vfprintf+0x158>
    1fb6:	6f ef       	ldi	r22, 0xFF	; 255
    1fb8:	7f ef       	ldi	r23, 0xFF	; 255
    1fba:	c5 01       	movw	r24, r10
    1fbc:	2c 87       	std	Y+12, r18	; 0x0c
    1fbe:	2e d1       	rcall	.+604    	; 0x221c <strnlen_P>
    1fc0:	2c 01       	movw	r4, r24
    1fc2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1fc4:	20 68       	ori	r18, 0x80	; 128
    1fc6:	22 2e       	mov	r2, r18
    1fc8:	83 01       	movw	r16, r6
    1fca:	23 fc       	sbrc	r2, 3
    1fcc:	19 c0       	rjmp	.+50     	; 0x2000 <vfprintf+0x19e>
    1fce:	83 2d       	mov	r24, r3
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	48 16       	cp	r4, r24
    1fd4:	59 06       	cpc	r5, r25
    1fd6:	a0 f4       	brcc	.+40     	; 0x2000 <vfprintf+0x19e>
    1fd8:	b7 01       	movw	r22, r14
    1fda:	80 e2       	ldi	r24, 0x20	; 32
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	3b d1       	rcall	.+630    	; 0x2256 <fputc>
    1fe0:	3a 94       	dec	r3
    1fe2:	f5 cf       	rjmp	.-22     	; 0x1fce <vfprintf+0x16c>
    1fe4:	f5 01       	movw	r30, r10
    1fe6:	27 fc       	sbrc	r2, 7
    1fe8:	85 91       	lpm	r24, Z+
    1fea:	27 fe       	sbrs	r2, 7
    1fec:	81 91       	ld	r24, Z+
    1fee:	5f 01       	movw	r10, r30
    1ff0:	b7 01       	movw	r22, r14
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	30 d1       	rcall	.+608    	; 0x2256 <fputc>
    1ff6:	31 10       	cpse	r3, r1
    1ff8:	3a 94       	dec	r3
    1ffa:	f1 e0       	ldi	r31, 0x01	; 1
    1ffc:	4f 1a       	sub	r4, r31
    1ffe:	51 08       	sbc	r5, r1
    2000:	41 14       	cp	r4, r1
    2002:	51 04       	cpc	r5, r1
    2004:	79 f7       	brne	.-34     	; 0x1fe4 <vfprintf+0x182>
    2006:	de c0       	rjmp	.+444    	; 0x21c4 <vfprintf+0x362>
    2008:	84 36       	cpi	r24, 0x64	; 100
    200a:	11 f0       	breq	.+4      	; 0x2010 <vfprintf+0x1ae>
    200c:	89 36       	cpi	r24, 0x69	; 105
    200e:	31 f5       	brne	.+76     	; 0x205c <vfprintf+0x1fa>
    2010:	f8 01       	movw	r30, r16
    2012:	27 ff       	sbrs	r18, 7
    2014:	07 c0       	rjmp	.+14     	; 0x2024 <vfprintf+0x1c2>
    2016:	60 81       	ld	r22, Z
    2018:	71 81       	ldd	r23, Z+1	; 0x01
    201a:	82 81       	ldd	r24, Z+2	; 0x02
    201c:	93 81       	ldd	r25, Z+3	; 0x03
    201e:	0c 5f       	subi	r16, 0xFC	; 252
    2020:	1f 4f       	sbci	r17, 0xFF	; 255
    2022:	08 c0       	rjmp	.+16     	; 0x2034 <vfprintf+0x1d2>
    2024:	60 81       	ld	r22, Z
    2026:	71 81       	ldd	r23, Z+1	; 0x01
    2028:	88 27       	eor	r24, r24
    202a:	77 fd       	sbrc	r23, 7
    202c:	80 95       	com	r24
    202e:	98 2f       	mov	r25, r24
    2030:	0e 5f       	subi	r16, 0xFE	; 254
    2032:	1f 4f       	sbci	r17, 0xFF	; 255
    2034:	2f 76       	andi	r18, 0x6F	; 111
    2036:	b2 2e       	mov	r11, r18
    2038:	97 ff       	sbrs	r25, 7
    203a:	09 c0       	rjmp	.+18     	; 0x204e <vfprintf+0x1ec>
    203c:	90 95       	com	r25
    203e:	80 95       	com	r24
    2040:	70 95       	com	r23
    2042:	61 95       	neg	r22
    2044:	7f 4f       	sbci	r23, 0xFF	; 255
    2046:	8f 4f       	sbci	r24, 0xFF	; 255
    2048:	9f 4f       	sbci	r25, 0xFF	; 255
    204a:	20 68       	ori	r18, 0x80	; 128
    204c:	b2 2e       	mov	r11, r18
    204e:	2a e0       	ldi	r18, 0x0A	; 10
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	a4 01       	movw	r20, r8
    2054:	32 d1       	rcall	.+612    	; 0x22ba <__ultoa_invert>
    2056:	a8 2e       	mov	r10, r24
    2058:	a8 18       	sub	r10, r8
    205a:	43 c0       	rjmp	.+134    	; 0x20e2 <vfprintf+0x280>
    205c:	85 37       	cpi	r24, 0x75	; 117
    205e:	29 f4       	brne	.+10     	; 0x206a <vfprintf+0x208>
    2060:	2f 7e       	andi	r18, 0xEF	; 239
    2062:	b2 2e       	mov	r11, r18
    2064:	2a e0       	ldi	r18, 0x0A	; 10
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	25 c0       	rjmp	.+74     	; 0x20b4 <vfprintf+0x252>
    206a:	f2 2f       	mov	r31, r18
    206c:	f9 7f       	andi	r31, 0xF9	; 249
    206e:	bf 2e       	mov	r11, r31
    2070:	8f 36       	cpi	r24, 0x6F	; 111
    2072:	c1 f0       	breq	.+48     	; 0x20a4 <vfprintf+0x242>
    2074:	18 f4       	brcc	.+6      	; 0x207c <vfprintf+0x21a>
    2076:	88 35       	cpi	r24, 0x58	; 88
    2078:	79 f0       	breq	.+30     	; 0x2098 <vfprintf+0x236>
    207a:	ad c0       	rjmp	.+346    	; 0x21d6 <vfprintf+0x374>
    207c:	80 37       	cpi	r24, 0x70	; 112
    207e:	19 f0       	breq	.+6      	; 0x2086 <vfprintf+0x224>
    2080:	88 37       	cpi	r24, 0x78	; 120
    2082:	21 f0       	breq	.+8      	; 0x208c <vfprintf+0x22a>
    2084:	a8 c0       	rjmp	.+336    	; 0x21d6 <vfprintf+0x374>
    2086:	2f 2f       	mov	r18, r31
    2088:	20 61       	ori	r18, 0x10	; 16
    208a:	b2 2e       	mov	r11, r18
    208c:	b4 fe       	sbrs	r11, 4
    208e:	0d c0       	rjmp	.+26     	; 0x20aa <vfprintf+0x248>
    2090:	8b 2d       	mov	r24, r11
    2092:	84 60       	ori	r24, 0x04	; 4
    2094:	b8 2e       	mov	r11, r24
    2096:	09 c0       	rjmp	.+18     	; 0x20aa <vfprintf+0x248>
    2098:	24 ff       	sbrs	r18, 4
    209a:	0a c0       	rjmp	.+20     	; 0x20b0 <vfprintf+0x24e>
    209c:	9f 2f       	mov	r25, r31
    209e:	96 60       	ori	r25, 0x06	; 6
    20a0:	b9 2e       	mov	r11, r25
    20a2:	06 c0       	rjmp	.+12     	; 0x20b0 <vfprintf+0x24e>
    20a4:	28 e0       	ldi	r18, 0x08	; 8
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	05 c0       	rjmp	.+10     	; 0x20b4 <vfprintf+0x252>
    20aa:	20 e1       	ldi	r18, 0x10	; 16
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	02 c0       	rjmp	.+4      	; 0x20b4 <vfprintf+0x252>
    20b0:	20 e1       	ldi	r18, 0x10	; 16
    20b2:	32 e0       	ldi	r19, 0x02	; 2
    20b4:	f8 01       	movw	r30, r16
    20b6:	b7 fe       	sbrs	r11, 7
    20b8:	07 c0       	rjmp	.+14     	; 0x20c8 <vfprintf+0x266>
    20ba:	60 81       	ld	r22, Z
    20bc:	71 81       	ldd	r23, Z+1	; 0x01
    20be:	82 81       	ldd	r24, Z+2	; 0x02
    20c0:	93 81       	ldd	r25, Z+3	; 0x03
    20c2:	0c 5f       	subi	r16, 0xFC	; 252
    20c4:	1f 4f       	sbci	r17, 0xFF	; 255
    20c6:	06 c0       	rjmp	.+12     	; 0x20d4 <vfprintf+0x272>
    20c8:	60 81       	ld	r22, Z
    20ca:	71 81       	ldd	r23, Z+1	; 0x01
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	0e 5f       	subi	r16, 0xFE	; 254
    20d2:	1f 4f       	sbci	r17, 0xFF	; 255
    20d4:	a4 01       	movw	r20, r8
    20d6:	f1 d0       	rcall	.+482    	; 0x22ba <__ultoa_invert>
    20d8:	a8 2e       	mov	r10, r24
    20da:	a8 18       	sub	r10, r8
    20dc:	fb 2d       	mov	r31, r11
    20de:	ff 77       	andi	r31, 0x7F	; 127
    20e0:	bf 2e       	mov	r11, r31
    20e2:	b6 fe       	sbrs	r11, 6
    20e4:	0b c0       	rjmp	.+22     	; 0x20fc <vfprintf+0x29a>
    20e6:	2b 2d       	mov	r18, r11
    20e8:	2e 7f       	andi	r18, 0xFE	; 254
    20ea:	a5 14       	cp	r10, r5
    20ec:	50 f4       	brcc	.+20     	; 0x2102 <vfprintf+0x2a0>
    20ee:	b4 fe       	sbrs	r11, 4
    20f0:	0a c0       	rjmp	.+20     	; 0x2106 <vfprintf+0x2a4>
    20f2:	b2 fc       	sbrc	r11, 2
    20f4:	08 c0       	rjmp	.+16     	; 0x2106 <vfprintf+0x2a4>
    20f6:	2b 2d       	mov	r18, r11
    20f8:	2e 7e       	andi	r18, 0xEE	; 238
    20fa:	05 c0       	rjmp	.+10     	; 0x2106 <vfprintf+0x2a4>
    20fc:	7a 2c       	mov	r7, r10
    20fe:	2b 2d       	mov	r18, r11
    2100:	03 c0       	rjmp	.+6      	; 0x2108 <vfprintf+0x2a6>
    2102:	7a 2c       	mov	r7, r10
    2104:	01 c0       	rjmp	.+2      	; 0x2108 <vfprintf+0x2a6>
    2106:	75 2c       	mov	r7, r5
    2108:	24 ff       	sbrs	r18, 4
    210a:	0d c0       	rjmp	.+26     	; 0x2126 <vfprintf+0x2c4>
    210c:	fe 01       	movw	r30, r28
    210e:	ea 0d       	add	r30, r10
    2110:	f1 1d       	adc	r31, r1
    2112:	80 81       	ld	r24, Z
    2114:	80 33       	cpi	r24, 0x30	; 48
    2116:	11 f4       	brne	.+4      	; 0x211c <vfprintf+0x2ba>
    2118:	29 7e       	andi	r18, 0xE9	; 233
    211a:	09 c0       	rjmp	.+18     	; 0x212e <vfprintf+0x2cc>
    211c:	22 ff       	sbrs	r18, 2
    211e:	06 c0       	rjmp	.+12     	; 0x212c <vfprintf+0x2ca>
    2120:	73 94       	inc	r7
    2122:	73 94       	inc	r7
    2124:	04 c0       	rjmp	.+8      	; 0x212e <vfprintf+0x2cc>
    2126:	82 2f       	mov	r24, r18
    2128:	86 78       	andi	r24, 0x86	; 134
    212a:	09 f0       	breq	.+2      	; 0x212e <vfprintf+0x2cc>
    212c:	73 94       	inc	r7
    212e:	23 fd       	sbrc	r18, 3
    2130:	12 c0       	rjmp	.+36     	; 0x2156 <vfprintf+0x2f4>
    2132:	20 ff       	sbrs	r18, 0
    2134:	06 c0       	rjmp	.+12     	; 0x2142 <vfprintf+0x2e0>
    2136:	5a 2c       	mov	r5, r10
    2138:	73 14       	cp	r7, r3
    213a:	18 f4       	brcc	.+6      	; 0x2142 <vfprintf+0x2e0>
    213c:	53 0c       	add	r5, r3
    213e:	57 18       	sub	r5, r7
    2140:	73 2c       	mov	r7, r3
    2142:	73 14       	cp	r7, r3
    2144:	60 f4       	brcc	.+24     	; 0x215e <vfprintf+0x2fc>
    2146:	b7 01       	movw	r22, r14
    2148:	80 e2       	ldi	r24, 0x20	; 32
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	2c 87       	std	Y+12, r18	; 0x0c
    214e:	83 d0       	rcall	.+262    	; 0x2256 <fputc>
    2150:	73 94       	inc	r7
    2152:	2c 85       	ldd	r18, Y+12	; 0x0c
    2154:	f6 cf       	rjmp	.-20     	; 0x2142 <vfprintf+0x2e0>
    2156:	73 14       	cp	r7, r3
    2158:	10 f4       	brcc	.+4      	; 0x215e <vfprintf+0x2fc>
    215a:	37 18       	sub	r3, r7
    215c:	01 c0       	rjmp	.+2      	; 0x2160 <vfprintf+0x2fe>
    215e:	31 2c       	mov	r3, r1
    2160:	24 ff       	sbrs	r18, 4
    2162:	11 c0       	rjmp	.+34     	; 0x2186 <vfprintf+0x324>
    2164:	b7 01       	movw	r22, r14
    2166:	80 e3       	ldi	r24, 0x30	; 48
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	2c 87       	std	Y+12, r18	; 0x0c
    216c:	74 d0       	rcall	.+232    	; 0x2256 <fputc>
    216e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2170:	22 ff       	sbrs	r18, 2
    2172:	16 c0       	rjmp	.+44     	; 0x21a0 <vfprintf+0x33e>
    2174:	21 ff       	sbrs	r18, 1
    2176:	03 c0       	rjmp	.+6      	; 0x217e <vfprintf+0x31c>
    2178:	88 e5       	ldi	r24, 0x58	; 88
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	02 c0       	rjmp	.+4      	; 0x2182 <vfprintf+0x320>
    217e:	88 e7       	ldi	r24, 0x78	; 120
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	b7 01       	movw	r22, r14
    2184:	0c c0       	rjmp	.+24     	; 0x219e <vfprintf+0x33c>
    2186:	82 2f       	mov	r24, r18
    2188:	86 78       	andi	r24, 0x86	; 134
    218a:	51 f0       	breq	.+20     	; 0x21a0 <vfprintf+0x33e>
    218c:	21 fd       	sbrc	r18, 1
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <vfprintf+0x332>
    2190:	80 e2       	ldi	r24, 0x20	; 32
    2192:	01 c0       	rjmp	.+2      	; 0x2196 <vfprintf+0x334>
    2194:	8b e2       	ldi	r24, 0x2B	; 43
    2196:	27 fd       	sbrc	r18, 7
    2198:	8d e2       	ldi	r24, 0x2D	; 45
    219a:	b7 01       	movw	r22, r14
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	5b d0       	rcall	.+182    	; 0x2256 <fputc>
    21a0:	a5 14       	cp	r10, r5
    21a2:	30 f4       	brcc	.+12     	; 0x21b0 <vfprintf+0x34e>
    21a4:	b7 01       	movw	r22, r14
    21a6:	80 e3       	ldi	r24, 0x30	; 48
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	55 d0       	rcall	.+170    	; 0x2256 <fputc>
    21ac:	5a 94       	dec	r5
    21ae:	f8 cf       	rjmp	.-16     	; 0x21a0 <vfprintf+0x33e>
    21b0:	aa 94       	dec	r10
    21b2:	f4 01       	movw	r30, r8
    21b4:	ea 0d       	add	r30, r10
    21b6:	f1 1d       	adc	r31, r1
    21b8:	80 81       	ld	r24, Z
    21ba:	b7 01       	movw	r22, r14
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	4b d0       	rcall	.+150    	; 0x2256 <fputc>
    21c0:	a1 10       	cpse	r10, r1
    21c2:	f6 cf       	rjmp	.-20     	; 0x21b0 <vfprintf+0x34e>
    21c4:	33 20       	and	r3, r3
    21c6:	09 f4       	brne	.+2      	; 0x21ca <vfprintf+0x368>
    21c8:	5d ce       	rjmp	.-838    	; 0x1e84 <vfprintf+0x22>
    21ca:	b7 01       	movw	r22, r14
    21cc:	80 e2       	ldi	r24, 0x20	; 32
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	42 d0       	rcall	.+132    	; 0x2256 <fputc>
    21d2:	3a 94       	dec	r3
    21d4:	f7 cf       	rjmp	.-18     	; 0x21c4 <vfprintf+0x362>
    21d6:	f7 01       	movw	r30, r14
    21d8:	86 81       	ldd	r24, Z+6	; 0x06
    21da:	97 81       	ldd	r25, Z+7	; 0x07
    21dc:	02 c0       	rjmp	.+4      	; 0x21e2 <vfprintf+0x380>
    21de:	8f ef       	ldi	r24, 0xFF	; 255
    21e0:	9f ef       	ldi	r25, 0xFF	; 255
    21e2:	2c 96       	adiw	r28, 0x0c	; 12
    21e4:	e2 e1       	ldi	r30, 0x12	; 18
    21e6:	e3 c0       	rjmp	.+454    	; 0x23ae <__epilogue_restores__>

000021e8 <calloc>:
    21e8:	0f 93       	push	r16
    21ea:	1f 93       	push	r17
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	86 9f       	mul	r24, r22
    21f2:	80 01       	movw	r16, r0
    21f4:	87 9f       	mul	r24, r23
    21f6:	10 0d       	add	r17, r0
    21f8:	96 9f       	mul	r25, r22
    21fa:	10 0d       	add	r17, r0
    21fc:	11 24       	eor	r1, r1
    21fe:	c8 01       	movw	r24, r16
    2200:	5d dc       	rcall	.-1862   	; 0x1abc <malloc>
    2202:	ec 01       	movw	r28, r24
    2204:	00 97       	sbiw	r24, 0x00	; 0
    2206:	21 f0       	breq	.+8      	; 0x2210 <calloc+0x28>
    2208:	a8 01       	movw	r20, r16
    220a:	60 e0       	ldi	r22, 0x00	; 0
    220c:	70 e0       	ldi	r23, 0x00	; 0
    220e:	11 d0       	rcall	.+34     	; 0x2232 <memset>
    2210:	ce 01       	movw	r24, r28
    2212:	df 91       	pop	r29
    2214:	cf 91       	pop	r28
    2216:	1f 91       	pop	r17
    2218:	0f 91       	pop	r16
    221a:	08 95       	ret

0000221c <strnlen_P>:
    221c:	fc 01       	movw	r30, r24
    221e:	05 90       	lpm	r0, Z+
    2220:	61 50       	subi	r22, 0x01	; 1
    2222:	70 40       	sbci	r23, 0x00	; 0
    2224:	01 10       	cpse	r0, r1
    2226:	d8 f7       	brcc	.-10     	; 0x221e <strnlen_P+0x2>
    2228:	80 95       	com	r24
    222a:	90 95       	com	r25
    222c:	8e 0f       	add	r24, r30
    222e:	9f 1f       	adc	r25, r31
    2230:	08 95       	ret

00002232 <memset>:
    2232:	dc 01       	movw	r26, r24
    2234:	01 c0       	rjmp	.+2      	; 0x2238 <memset+0x6>
    2236:	6d 93       	st	X+, r22
    2238:	41 50       	subi	r20, 0x01	; 1
    223a:	50 40       	sbci	r21, 0x00	; 0
    223c:	e0 f7       	brcc	.-8      	; 0x2236 <memset+0x4>
    223e:	08 95       	ret

00002240 <strnlen>:
    2240:	fc 01       	movw	r30, r24
    2242:	61 50       	subi	r22, 0x01	; 1
    2244:	70 40       	sbci	r23, 0x00	; 0
    2246:	01 90       	ld	r0, Z+
    2248:	01 10       	cpse	r0, r1
    224a:	d8 f7       	brcc	.-10     	; 0x2242 <strnlen+0x2>
    224c:	80 95       	com	r24
    224e:	90 95       	com	r25
    2250:	8e 0f       	add	r24, r30
    2252:	9f 1f       	adc	r25, r31
    2254:	08 95       	ret

00002256 <fputc>:
    2256:	0f 93       	push	r16
    2258:	1f 93       	push	r17
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
    225e:	18 2f       	mov	r17, r24
    2260:	09 2f       	mov	r16, r25
    2262:	eb 01       	movw	r28, r22
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	81 fd       	sbrc	r24, 1
    2268:	03 c0       	rjmp	.+6      	; 0x2270 <fputc+0x1a>
    226a:	8f ef       	ldi	r24, 0xFF	; 255
    226c:	9f ef       	ldi	r25, 0xFF	; 255
    226e:	20 c0       	rjmp	.+64     	; 0x22b0 <fputc+0x5a>
    2270:	82 ff       	sbrs	r24, 2
    2272:	10 c0       	rjmp	.+32     	; 0x2294 <fputc+0x3e>
    2274:	4e 81       	ldd	r20, Y+6	; 0x06
    2276:	5f 81       	ldd	r21, Y+7	; 0x07
    2278:	2c 81       	ldd	r18, Y+4	; 0x04
    227a:	3d 81       	ldd	r19, Y+5	; 0x05
    227c:	42 17       	cp	r20, r18
    227e:	53 07       	cpc	r21, r19
    2280:	7c f4       	brge	.+30     	; 0x22a0 <fputc+0x4a>
    2282:	e8 81       	ld	r30, Y
    2284:	f9 81       	ldd	r31, Y+1	; 0x01
    2286:	9f 01       	movw	r18, r30
    2288:	2f 5f       	subi	r18, 0xFF	; 255
    228a:	3f 4f       	sbci	r19, 0xFF	; 255
    228c:	39 83       	std	Y+1, r19	; 0x01
    228e:	28 83       	st	Y, r18
    2290:	10 83       	st	Z, r17
    2292:	06 c0       	rjmp	.+12     	; 0x22a0 <fputc+0x4a>
    2294:	e8 85       	ldd	r30, Y+8	; 0x08
    2296:	f9 85       	ldd	r31, Y+9	; 0x09
    2298:	81 2f       	mov	r24, r17
    229a:	09 95       	icall
    229c:	89 2b       	or	r24, r25
    229e:	29 f7       	brne	.-54     	; 0x226a <fputc+0x14>
    22a0:	2e 81       	ldd	r18, Y+6	; 0x06
    22a2:	3f 81       	ldd	r19, Y+7	; 0x07
    22a4:	2f 5f       	subi	r18, 0xFF	; 255
    22a6:	3f 4f       	sbci	r19, 0xFF	; 255
    22a8:	3f 83       	std	Y+7, r19	; 0x07
    22aa:	2e 83       	std	Y+6, r18	; 0x06
    22ac:	81 2f       	mov	r24, r17
    22ae:	90 2f       	mov	r25, r16
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	1f 91       	pop	r17
    22b6:	0f 91       	pop	r16
    22b8:	08 95       	ret

000022ba <__ultoa_invert>:
    22ba:	fa 01       	movw	r30, r20
    22bc:	aa 27       	eor	r26, r26
    22be:	28 30       	cpi	r18, 0x08	; 8
    22c0:	51 f1       	breq	.+84     	; 0x2316 <__ultoa_invert+0x5c>
    22c2:	20 31       	cpi	r18, 0x10	; 16
    22c4:	81 f1       	breq	.+96     	; 0x2326 <__ultoa_invert+0x6c>
    22c6:	e8 94       	clt
    22c8:	6f 93       	push	r22
    22ca:	6e 7f       	andi	r22, 0xFE	; 254
    22cc:	6e 5f       	subi	r22, 0xFE	; 254
    22ce:	7f 4f       	sbci	r23, 0xFF	; 255
    22d0:	8f 4f       	sbci	r24, 0xFF	; 255
    22d2:	9f 4f       	sbci	r25, 0xFF	; 255
    22d4:	af 4f       	sbci	r26, 0xFF	; 255
    22d6:	b1 e0       	ldi	r27, 0x01	; 1
    22d8:	3e d0       	rcall	.+124    	; 0x2356 <__ultoa_invert+0x9c>
    22da:	b4 e0       	ldi	r27, 0x04	; 4
    22dc:	3c d0       	rcall	.+120    	; 0x2356 <__ultoa_invert+0x9c>
    22de:	67 0f       	add	r22, r23
    22e0:	78 1f       	adc	r23, r24
    22e2:	89 1f       	adc	r24, r25
    22e4:	9a 1f       	adc	r25, r26
    22e6:	a1 1d       	adc	r26, r1
    22e8:	68 0f       	add	r22, r24
    22ea:	79 1f       	adc	r23, r25
    22ec:	8a 1f       	adc	r24, r26
    22ee:	91 1d       	adc	r25, r1
    22f0:	a1 1d       	adc	r26, r1
    22f2:	6a 0f       	add	r22, r26
    22f4:	71 1d       	adc	r23, r1
    22f6:	81 1d       	adc	r24, r1
    22f8:	91 1d       	adc	r25, r1
    22fa:	a1 1d       	adc	r26, r1
    22fc:	20 d0       	rcall	.+64     	; 0x233e <__ultoa_invert+0x84>
    22fe:	09 f4       	brne	.+2      	; 0x2302 <__ultoa_invert+0x48>
    2300:	68 94       	set
    2302:	3f 91       	pop	r19
    2304:	2a e0       	ldi	r18, 0x0A	; 10
    2306:	26 9f       	mul	r18, r22
    2308:	11 24       	eor	r1, r1
    230a:	30 19       	sub	r19, r0
    230c:	30 5d       	subi	r19, 0xD0	; 208
    230e:	31 93       	st	Z+, r19
    2310:	de f6       	brtc	.-74     	; 0x22c8 <__ultoa_invert+0xe>
    2312:	cf 01       	movw	r24, r30
    2314:	08 95       	ret
    2316:	46 2f       	mov	r20, r22
    2318:	47 70       	andi	r20, 0x07	; 7
    231a:	40 5d       	subi	r20, 0xD0	; 208
    231c:	41 93       	st	Z+, r20
    231e:	b3 e0       	ldi	r27, 0x03	; 3
    2320:	0f d0       	rcall	.+30     	; 0x2340 <__ultoa_invert+0x86>
    2322:	c9 f7       	brne	.-14     	; 0x2316 <__ultoa_invert+0x5c>
    2324:	f6 cf       	rjmp	.-20     	; 0x2312 <__ultoa_invert+0x58>
    2326:	46 2f       	mov	r20, r22
    2328:	4f 70       	andi	r20, 0x0F	; 15
    232a:	40 5d       	subi	r20, 0xD0	; 208
    232c:	4a 33       	cpi	r20, 0x3A	; 58
    232e:	18 f0       	brcs	.+6      	; 0x2336 <__ultoa_invert+0x7c>
    2330:	49 5d       	subi	r20, 0xD9	; 217
    2332:	31 fd       	sbrc	r19, 1
    2334:	40 52       	subi	r20, 0x20	; 32
    2336:	41 93       	st	Z+, r20
    2338:	02 d0       	rcall	.+4      	; 0x233e <__ultoa_invert+0x84>
    233a:	a9 f7       	brne	.-22     	; 0x2326 <__ultoa_invert+0x6c>
    233c:	ea cf       	rjmp	.-44     	; 0x2312 <__ultoa_invert+0x58>
    233e:	b4 e0       	ldi	r27, 0x04	; 4
    2340:	a6 95       	lsr	r26
    2342:	97 95       	ror	r25
    2344:	87 95       	ror	r24
    2346:	77 95       	ror	r23
    2348:	67 95       	ror	r22
    234a:	ba 95       	dec	r27
    234c:	c9 f7       	brne	.-14     	; 0x2340 <__ultoa_invert+0x86>
    234e:	00 97       	sbiw	r24, 0x00	; 0
    2350:	61 05       	cpc	r22, r1
    2352:	71 05       	cpc	r23, r1
    2354:	08 95       	ret
    2356:	9b 01       	movw	r18, r22
    2358:	ac 01       	movw	r20, r24
    235a:	0a 2e       	mov	r0, r26
    235c:	06 94       	lsr	r0
    235e:	57 95       	ror	r21
    2360:	47 95       	ror	r20
    2362:	37 95       	ror	r19
    2364:	27 95       	ror	r18
    2366:	ba 95       	dec	r27
    2368:	c9 f7       	brne	.-14     	; 0x235c <__ultoa_invert+0xa2>
    236a:	62 0f       	add	r22, r18
    236c:	73 1f       	adc	r23, r19
    236e:	84 1f       	adc	r24, r20
    2370:	95 1f       	adc	r25, r21
    2372:	a0 1d       	adc	r26, r0
    2374:	08 95       	ret

00002376 <__prologue_saves__>:
    2376:	2f 92       	push	r2
    2378:	3f 92       	push	r3
    237a:	4f 92       	push	r4
    237c:	5f 92       	push	r5
    237e:	6f 92       	push	r6
    2380:	7f 92       	push	r7
    2382:	8f 92       	push	r8
    2384:	9f 92       	push	r9
    2386:	af 92       	push	r10
    2388:	bf 92       	push	r11
    238a:	cf 92       	push	r12
    238c:	df 92       	push	r13
    238e:	ef 92       	push	r14
    2390:	ff 92       	push	r15
    2392:	0f 93       	push	r16
    2394:	1f 93       	push	r17
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
    239e:	ca 1b       	sub	r28, r26
    23a0:	db 0b       	sbc	r29, r27
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	de bf       	out	0x3e, r29	; 62
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	cd bf       	out	0x3d, r28	; 61
    23ac:	09 94       	ijmp

000023ae <__epilogue_restores__>:
    23ae:	2a 88       	ldd	r2, Y+18	; 0x12
    23b0:	39 88       	ldd	r3, Y+17	; 0x11
    23b2:	48 88       	ldd	r4, Y+16	; 0x10
    23b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    23b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    23b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    23ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    23bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    23be:	aa 84       	ldd	r10, Y+10	; 0x0a
    23c0:	b9 84       	ldd	r11, Y+9	; 0x09
    23c2:	c8 84       	ldd	r12, Y+8	; 0x08
    23c4:	df 80       	ldd	r13, Y+7	; 0x07
    23c6:	ee 80       	ldd	r14, Y+6	; 0x06
    23c8:	fd 80       	ldd	r15, Y+5	; 0x05
    23ca:	0c 81       	ldd	r16, Y+4	; 0x04
    23cc:	1b 81       	ldd	r17, Y+3	; 0x03
    23ce:	aa 81       	ldd	r26, Y+2	; 0x02
    23d0:	b9 81       	ldd	r27, Y+1	; 0x01
    23d2:	ce 0f       	add	r28, r30
    23d4:	d1 1d       	adc	r29, r1
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	cd bf       	out	0x3d, r28	; 61
    23e0:	ed 01       	movw	r28, r26
    23e2:	08 95       	ret

000023e4 <_exit>:
    23e4:	f8 94       	cli

000023e6 <__stop_program>:
    23e6:	ff cf       	rjmp	.-2      	; 0x23e6 <__stop_program>
