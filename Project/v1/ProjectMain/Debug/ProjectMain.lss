
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000168  00800100  00001550  000015e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001550  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001b  00800268  00800268  0000174c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000174c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c8  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e18  00000000  00000000  00001970  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000af6  00000000  00000000  00003788  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d11  00000000  00000000  0000427e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000400  00000000  00000000  00004f90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000095b  00000000  00000000  00005390  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f4c  00000000  00000000  00005ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000188  00000000  00000000  00006c37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	c9 c1       	rjmp	.+914    	; 0x3a0 <__bad_interrupt>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <OLED_clearArrow+0x2a>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e0 e5       	ldi	r30, 0x50	; 80
     37c:	f5 e1       	ldi	r31, 0x15	; 21
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a8 36       	cpi	r26, 0x68	; 104
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a8 e6       	ldi	r26, 0x68	; 104
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a3 38       	cpi	r26, 0x83	; 131
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	8e d0       	rcall	.+284    	; 0x4b8 <main>
     39c:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
			retrieval_errors++;
		}
	}
	
	printf("SRAM test completed with\n %4d errors in write phase and\n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 74 02 	sts	0x0274, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 6a 02 	sts	0x026A, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 69 02 	sts	0x0269, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 68 02 	sts	0x0268, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <statusMultifunctionBoard>:

// print status variables of Multifunction Board
void statusMultifunctionBoard(){
     402:	ff 92       	push	r15
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
     410:	28 97       	sbiw	r28, 0x08	; 8
     412:	0f b6       	in	r0, 0x3f	; 63
     414:	f8 94       	cli
     416:	de bf       	out	0x3e, r29	; 62
     418:	0f be       	out	0x3f, r0	; 63
     41a:	cd bf       	out	0x3d, r28	; 61
	JOY_position_t currentJoyPosition;
	currentJoyPosition = JOY_getPosition();
     41c:	31 d2       	rcall	.+1122   	; 0x880 <JOY_getPosition>
     41e:	29 83       	std	Y+1, r18	; 0x01
     420:	3a 83       	std	Y+2, r19	; 0x02
     422:	4b 83       	std	Y+3, r20	; 0x03
     424:	5c 83       	std	Y+4, r21	; 0x04
     426:	6d 83       	std	Y+5, r22	; 0x05
     428:	7e 83       	std	Y+6, r23	; 0x06
     42a:	8f 83       	std	Y+7, r24	; 0x07
     42c:	98 87       	std	Y+8, r25	; 0x08

	JOY_direction_t currentJoyDirection;
	currentJoyDirection = JOY_getDirection();
     42e:	4c d2       	rcall	.+1176   	; 0x8c8 <JOY_getDirection>
     430:	f8 2e       	mov	r15, r24

	SLI_position_t currentSliPosition;
	currentSliPosition = SLI_getPosition();
     432:	a5 d3       	rcall	.+1866   	; 0xb7e <SLI_getPosition>
	uint8_t rightButton = 0;

	char directions[] = {'C', 'U', 'D', 'R', 'L'};
	char* dir;
	
	if((PINB & (1<<PB0)))
     434:	b0 9b       	sbis	0x16, 0	; 22
		{
			//printf("Left button clicked ");
			leftButton = 1;
		}
		else if((PINE & (1<<PE2)))
     436:	85 b1       	in	r24, 0x05	; 5
		{
			//printf("Right button clicked ");
			rightButton = 1;
		}
		
	switch(currentJoyDirection)
     438:	82 e0       	ldi	r24, 0x02	; 2
     43a:	f8 16       	cp	r15, r24
     43c:	91 f0       	breq	.+36     	; 0x462 <statusMultifunctionBoard+0x60>
     43e:	8f 15       	cp	r24, r15
     440:	30 f0       	brcs	.+12     	; 0x44e <statusMultifunctionBoard+0x4c>
     442:	ff 20       	and	r15, r15
     444:	b9 f0       	breq	.+46     	; 0x474 <statusMultifunctionBoard+0x72>
     446:	91 e0       	ldi	r25, 0x01	; 1
     448:	f9 16       	cp	r15, r25
     44a:	41 f0       	breq	.+16     	; 0x45c <statusMultifunctionBoard+0x5a>
     44c:	15 c0       	rjmp	.+42     	; 0x478 <statusMultifunctionBoard+0x76>
     44e:	83 e0       	ldi	r24, 0x03	; 3
     450:	f8 16       	cp	r15, r24
     452:	51 f0       	breq	.+20     	; 0x468 <statusMultifunctionBoard+0x66>
     454:	94 e0       	ldi	r25, 0x04	; 4
     456:	f9 16       	cp	r15, r25
     458:	51 f0       	breq	.+20     	; 0x46e <statusMultifunctionBoard+0x6c>
     45a:	0e c0       	rjmp	.+28     	; 0x478 <statusMultifunctionBoard+0x76>

		dir = "CENTER";
		break;

		case 1:
		dir = "UP";
     45c:	07 e8       	ldi	r16, 0x87	; 135
     45e:	11 e0       	ldi	r17, 0x01	; 1
		break;
     460:	0b c0       	rjmp	.+22     	; 0x478 <statusMultifunctionBoard+0x76>

		case 2:
		dir = "DOWN";
     462:	0a e8       	ldi	r16, 0x8A	; 138
     464:	11 e0       	ldi	r17, 0x01	; 1
		break;
     466:	08 c0       	rjmp	.+16     	; 0x478 <statusMultifunctionBoard+0x76>

		case 3:
		dir = "RIGHT";
     468:	0f e8       	ldi	r16, 0x8F	; 143
     46a:	11 e0       	ldi	r17, 0x01	; 1
		break;
     46c:	05 c0       	rjmp	.+10     	; 0x478 <statusMultifunctionBoard+0x76>

		case 4:
		dir = "LEFT";
     46e:	05 e9       	ldi	r16, 0x95	; 149
     470:	11 e0       	ldi	r17, 0x01	; 1
		break;
     472:	02 c0       	rjmp	.+4      	; 0x478 <statusMultifunctionBoard+0x76>
		
	switch(currentJoyDirection)
	{
		case 0:

		dir = "CENTER";
     474:	00 e8       	ldi	r16, 0x80	; 128
     476:	11 e0       	ldi	r17, 0x01	; 1
		dir = "LEFT";
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
     478:	88 85       	ldd	r24, Y+8	; 0x08
     47a:	8f 93       	push	r24
     47c:	8f 81       	ldd	r24, Y+7	; 0x07
     47e:	8f 93       	push	r24
     480:	8e 81       	ldd	r24, Y+6	; 0x06
     482:	8f 93       	push	r24
     484:	8d 81       	ldd	r24, Y+5	; 0x05
     486:	8f 93       	push	r24
     488:	1f 93       	push	r17
     48a:	0f 93       	push	r16
     48c:	8a e9       	ldi	r24, 0x9A	; 154
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	9f 93       	push	r25
     492:	8f 93       	push	r24
     494:	35 d4       	rcall	.+2154   	; 0xd00 <printf>
     496:	0f b6       	in	r0, 0x3f	; 63
     498:	f8 94       	cli
     49a:	de bf       	out	0x3e, r29	; 62
     49c:	0f be       	out	0x3f, r0	; 63
     49e:	cd bf       	out	0x3d, r28	; 61
}
     4a0:	28 96       	adiw	r28, 0x08	; 8
     4a2:	0f b6       	in	r0, 0x3f	; 63
     4a4:	f8 94       	cli
     4a6:	de bf       	out	0x3e, r29	; 62
     4a8:	0f be       	out	0x3f, r0	; 63
     4aa:	cd bf       	out	0x3d, r28	; 61
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	1f 91       	pop	r17
     4b2:	0f 91       	pop	r16
     4b4:	ff 90       	pop	r15
     4b6:	08 95       	ret

000004b8 <main>:
//#define ADDRESS 0x1400

int main(void)
{	
	// todo: write init() that calls all other init functions
	uartInit(BAUDRATE, FOSC, UBRR);
     4b8:	1f e1       	ldi	r17, 0x1F	; 31
     4ba:	e1 2e       	mov	r14, r17
     4bc:	f1 2c       	mov	r15, r1
     4be:	00 e0       	ldi	r16, 0x00	; 0
     4c0:	10 e0       	ldi	r17, 0x00	; 0
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	4b e4       	ldi	r20, 0x4B	; 75
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	60 e8       	ldi	r22, 0x80	; 128
     4cc:	75 e2       	ldi	r23, 0x25	; 37
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	66 d3       	rcall	.+1740   	; 0xba0 <uartInit>
	enableXMEM(1);
     4d4:	81 e0       	ldi	r24, 0x01	; 1
     4d6:	34 d0       	rcall	.+104    	; 0x540 <enableXMEM>
	SLI_init();
     4d8:	49 d3       	rcall	.+1682   	; 0xb6c <SLI_init>
	JOY_init();
     4da:	44 d0       	rcall	.+136    	; 0x564 <JOY_init>
	
	//init external interrupt INT0 on falling edge
	set_bit(GICR, INT0);
     4dc:	8b b7       	in	r24, 0x3b	; 59
     4de:	80 64       	ori	r24, 0x40	; 64
     4e0:	8b bf       	out	0x3b, r24	; 59
	set_bit(MCUCR, ISC01);
     4e2:	85 b7       	in	r24, 0x35	; 53
     4e4:	82 60       	ori	r24, 0x02	; 2
     4e6:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     4e8:	85 b7       	in	r24, 0x35	; 53
     4ea:	8e 7f       	andi	r24, 0xFE	; 254
     4ec:	85 bf       	out	0x35, r24	; 53
	
	//Pull-up on PD3
	clear_bit(DDRD, PD3);
     4ee:	8b 98       	cbi	0x11, 3	; 17
	set_bit(PORTD, PD3);
     4f0:	93 9a       	sbi	0x12, 3	; 18
	
	//init external interrupt INT1 on falling edge
	set_bit(GICR, INT1);
     4f2:	8b b7       	in	r24, 0x3b	; 59
     4f4:	80 68       	ori	r24, 0x80	; 128
     4f6:	8b bf       	out	0x3b, r24	; 59
	set_bit(MCUCR, ISC11);
     4f8:	85 b7       	in	r24, 0x35	; 53
     4fa:	88 60       	ori	r24, 0x08	; 8
     4fc:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC10);
     4fe:	85 b7       	in	r24, 0x35	; 53
     500:	8b 7f       	andi	r24, 0xFB	; 251
     502:	85 bf       	out	0x35, r24	; 53
	////init external interrupt INT2 on falling edge
	//set_bit(GICR, INT2);
	//clear_bit(EMCUCR, ISC2);
	
	//PE2
	clear_bit(DDRE, PE2);
     504:	32 98       	cbi	0x06, 2	; 6
	clear_bit(PORTE, PE2);
     506:	3a 98       	cbi	0x07, 2	; 7
	
	//PB0
	clear_bit(DDRB, PB0);
     508:	b8 98       	cbi	0x17, 0	; 23
	clear_bit(PORTB, PB0);
     50a:	c0 98       	cbi	0x18, 0	; 24
	

	
	sei();
     50c:	78 94       	sei

	//SRAM_test();
	JOY_requestCurrentPosition('x');
     50e:	88 e7       	ldi	r24, 0x78	; 120
     510:	3c d1       	rcall	.+632    	; 0x78a <JOY_requestCurrentPosition>
	OLED_init();
     512:	29 d2       	rcall	.+1106   	; 0x966 <OLED_init>

	//MENU_init();
	//MENU_activate();
	
	OLED_goto(1, 0);
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	70 e0       	ldi	r23, 0x00	; 0
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	e9 d1       	rcall	.+978    	; 0x8f0 <OLED_goto>
	OLED_printString("Hello World...");
     51e:	80 eb       	ldi	r24, 0xB0	; 176
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	c1 d2       	rcall	.+1410   	; 0xaa6 <OLED_printString>
	OLED_printArrow();
     524:	dc d2       	rcall	.+1464   	; 0xade <OLED_printArrow>
	OLED_moveArrow(3);
     526:	83 e0       	ldi	r24, 0x03	; 3
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	14 d3       	rcall	.+1576   	; 0xb54 <OLED_moveArrow>

    while(1)
    {	
		statusMultifunctionBoard();
     52c:	6a df       	rcall	.-300    	; 0x402 <statusMultifunctionBoard>
		JOY_getDirection();
     52e:	cc d1       	rcall	.+920    	; 0x8c8 <JOY_getDirection>

		// todo: remove! will be included in the menu driver later
		if(JOYcalibFlag)
     530:	80 91 68 02 	lds	r24, 0x0268
     534:	88 23       	and	r24, r24
     536:	d1 f3       	breq	.-12     	; 0x52c <__stack+0x2d>
		{
			//run joystick calibration
			JOY_calibrate();
     538:	28 d0       	rcall	.+80     	; 0x58a <JOY_calibrate>
			JOYcalibFlag = 0;
     53a:	10 92 68 02 	sts	0x0268, r1
     53e:	f6 cf       	rjmp	.-20     	; 0x52c <__stack+0x2d>

00000540 <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     540:	95 b7       	in	r25, 0x35	; 53
     542:	90 68       	ori	r25, 0x80	; 128
     544:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     546:	96 b7       	in	r25, 0x36	; 54
     548:	98 60       	ori	r25, 0x08	; 8
     54a:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     54c:	88 23       	and	r24, r24
     54e:	19 f0       	breq	.+6      	; 0x556 <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     550:	80 b7       	in	r24, 0x30	; 48
     552:	80 62       	ori	r24, 0x20	; 32
     554:	80 bf       	out	0x30, r24	; 48
     556:	08 95       	ret

00000558 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     558:	fc 01       	movw	r30, r24
     55a:	80 81       	ld	r24, Z
	return val;
}
     55c:	08 95       	ret

0000055e <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     55e:	fc 01       	movw	r30, r24
     560:	60 83       	st	Z, r22
     562:	08 95       	ret

00000564 <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     564:	10 92 6d 02 	sts	0x026D, r1
     568:	10 92 6c 02 	sts	0x026C, r1
	currentPosition.Y_abs = 0;
     56c:	10 92 6f 02 	sts	0x026F, r1
     570:	10 92 6e 02 	sts	0x026E, r1
	currentPosition.X_per = 0;
     574:	10 92 71 02 	sts	0x0271, r1
     578:	10 92 70 02 	sts	0x0270, r1
	currentPosition.Y_per = 0;
     57c:	10 92 73 02 	sts	0x0273, r1
     580:	10 92 72 02 	sts	0x0272, r1
	currentDirection = CENTRE;
     584:	10 92 6b 02 	sts	0x026B, r1
     588:	08 95       	ret

0000058a <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
	uint8_t temp = 0;
	
	printf("Move JOY to the right\n");
     58e:	8f eb       	ldi	r24, 0xBF	; 191
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	c7 d3       	rcall	.+1934   	; 0xd22 <puts>
     594:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     596:	4f ef       	ldi	r20, 0xFF	; 255
     598:	52 e0       	ldi	r21, 0x02	; 2
     59a:	21 50       	subi	r18, 0x01	; 1
     59c:	40 40       	sbci	r20, 0x00	; 0
     59e:	50 40       	sbci	r21, 0x00	; 0
     5a0:	e1 f7       	brne	.-8      	; 0x59a <JOY_calibrate+0x10>
     5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <JOY_calibrate+0x1a>
     5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <JOY_calibrate+0x1c>
     5a6:	c4 e1       	ldi	r28, 0x14	; 20
     5a8:	d0 e0       	ldi	r29, 0x00	; 0
     5aa:	60 91 06 01 	lds	r22, 0x0106
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     5ae:	70 91 07 01 	lds	r23, 0x0107
     5b2:	82 e0       	ldi	r24, 0x02	; 2
     5b4:	0e d3       	rcall	.+1564   	; 0xbd2 <ADC_request>
     5b6:	8f ef       	ldi	r24, 0xFF	; 255
     5b8:	9f e1       	ldi	r25, 0x1F	; 31
     5ba:	21 e0       	ldi	r18, 0x01	; 1
     5bc:	81 50       	subi	r24, 0x01	; 1
     5be:	90 40       	sbci	r25, 0x00	; 0
     5c0:	20 40       	sbci	r18, 0x00	; 0
     5c2:	e1 f7       	brne	.-8      	; 0x5bc <JOY_calibrate+0x32>
     5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <JOY_calibrate+0x3c>
     5c6:	00 00       	nop
     5c8:	80 91 06 01 	lds	r24, 0x0106
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     5cc:	90 91 07 01 	lds	r25, 0x0107
     5d0:	24 d3       	rcall	.+1608   	; 0xc1a <ADC_read>
     5d2:	90 91 0d 01 	lds	r25, 0x010D
     5d6:	98 17       	cp	r25, r24
		
		if(temp > calR) {calR = temp;}
     5d8:	10 f4       	brcc	.+4      	; 0x5de <JOY_calibrate+0x54>
     5da:	80 93 0d 01 	sts	0x010D, r24
     5de:	21 97       	sbiw	r28, 0x01	; 1
     5e0:	20 97       	sbiw	r28, 0x00	; 0
     5e2:	19 f7       	brne	.-58     	; 0x5aa <JOY_calibrate+0x20>
     5e4:	85 ed       	ldi	r24, 0xD5	; 213
	uint8_t temp = 0;
	
	printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	9c d3       	rcall	.+1848   	; 0xd22 <puts>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	printf("Move JOY to the left\n");
     5ea:	4f ef       	ldi	r20, 0xFF	; 255
     5ec:	5f ef       	ldi	r21, 0xFF	; 255
     5ee:	82 e0       	ldi	r24, 0x02	; 2
     5f0:	41 50       	subi	r20, 0x01	; 1
     5f2:	50 40       	sbci	r21, 0x00	; 0
     5f4:	80 40       	sbci	r24, 0x00	; 0
     5f6:	e1 f7       	brne	.-8      	; 0x5f0 <JOY_calibrate+0x66>
     5f8:	00 c0       	rjmp	.+0      	; 0x5fa <JOY_calibrate+0x70>
     5fa:	00 c0       	rjmp	.+0      	; 0x5fc <JOY_calibrate+0x72>
     5fc:	c4 e1       	ldi	r28, 0x14	; 20
     5fe:	d0 e0       	ldi	r29, 0x00	; 0
     600:	60 91 06 01 	lds	r22, 0x0106
     604:	70 91 07 01 	lds	r23, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     608:	82 e0       	ldi	r24, 0x02	; 2
     60a:	e3 d2       	rcall	.+1478   	; 0xbd2 <ADC_request>
     60c:	9f ef       	ldi	r25, 0xFF	; 255
     60e:	2f e1       	ldi	r18, 0x1F	; 31
     610:	41 e0       	ldi	r20, 0x01	; 1
     612:	91 50       	subi	r25, 0x01	; 1
     614:	20 40       	sbci	r18, 0x00	; 0
     616:	40 40       	sbci	r20, 0x00	; 0
     618:	e1 f7       	brne	.-8      	; 0x612 <JOY_calibrate+0x88>
     61a:	00 c0       	rjmp	.+0      	; 0x61c <JOY_calibrate+0x92>
     61c:	00 00       	nop
     61e:	80 91 06 01 	lds	r24, 0x0106
     622:	90 91 07 01 	lds	r25, 0x0107
     626:	f9 d2       	rcall	.+1522   	; 0xc1a <ADC_read>
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     628:	90 91 0c 01 	lds	r25, 0x010C
     62c:	89 17       	cp	r24, r25
     62e:	10 f4       	brcc	.+4      	; 0x634 <JOY_calibrate+0xaa>
     630:	80 93 0c 01 	sts	0x010C, r24
		
		if(temp < calL) {calL = temp;}
     634:	21 97       	sbiw	r28, 0x01	; 1
     636:	20 97       	sbiw	r28, 0x00	; 0
     638:	19 f7       	brne	.-58     	; 0x600 <JOY_calibrate+0x76>
     63a:	8a ee       	ldi	r24, 0xEA	; 234
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	71 d3       	rcall	.+1762   	; 0xd22 <puts>
     640:	5f ef       	ldi	r21, 0xFF	; 255
	}
	
	printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     642:	8f ef       	ldi	r24, 0xFF	; 255
     644:	92 e0       	ldi	r25, 0x02	; 2
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	printf("Move JOY up\n");
     646:	51 50       	subi	r21, 0x01	; 1
     648:	80 40       	sbci	r24, 0x00	; 0
     64a:	90 40       	sbci	r25, 0x00	; 0
     64c:	e1 f7       	brne	.-8      	; 0x646 <JOY_calibrate+0xbc>
     64e:	00 c0       	rjmp	.+0      	; 0x650 <JOY_calibrate+0xc6>
     650:	00 c0       	rjmp	.+0      	; 0x652 <JOY_calibrate+0xc8>
     652:	c4 e1       	ldi	r28, 0x14	; 20
     654:	d0 e0       	ldi	r29, 0x00	; 0
     656:	60 91 06 01 	lds	r22, 0x0106
     65a:	70 91 07 01 	lds	r23, 0x0107
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	b8 d2       	rcall	.+1392   	; 0xbd2 <ADC_request>
     662:	2f ef       	ldi	r18, 0xFF	; 255
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     664:	4f e1       	ldi	r20, 0x1F	; 31
     666:	51 e0       	ldi	r21, 0x01	; 1
     668:	21 50       	subi	r18, 0x01	; 1
     66a:	40 40       	sbci	r20, 0x00	; 0
     66c:	50 40       	sbci	r21, 0x00	; 0
     66e:	e1 f7       	brne	.-8      	; 0x668 <JOY_calibrate+0xde>
     670:	00 c0       	rjmp	.+0      	; 0x672 <JOY_calibrate+0xe8>
     672:	00 00       	nop
     674:	80 91 06 01 	lds	r24, 0x0106
     678:	90 91 07 01 	lds	r25, 0x0107
     67c:	ce d2       	rcall	.+1436   	; 0xc1a <ADC_read>
     67e:	90 91 0b 01 	lds	r25, 0x010B
     682:	98 17       	cp	r25, r24
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     684:	10 f4       	brcc	.+4      	; 0x68a <JOY_calibrate+0x100>
     686:	80 93 0b 01 	sts	0x010B, r24
     68a:	21 97       	sbiw	r28, 0x01	; 1
     68c:	20 97       	sbiw	r28, 0x00	; 0
     68e:	19 f7       	brne	.-58     	; 0x656 <JOY_calibrate+0xcc>
		
		if(temp > calUp) {calUp = temp;}
     690:	86 ef       	ldi	r24, 0xF6	; 246
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	46 d3       	rcall	.+1676   	; 0xd22 <puts>
     696:	8f ef       	ldi	r24, 0xFF	; 255
     698:	9f ef       	ldi	r25, 0xFF	; 255
     69a:	22 e0       	ldi	r18, 0x02	; 2
     69c:	81 50       	subi	r24, 0x01	; 1
	}
	
	printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     69e:	90 40       	sbci	r25, 0x00	; 0
     6a0:	20 40       	sbci	r18, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	printf("Move JOY down\n");
     6a2:	e1 f7       	brne	.-8      	; 0x69c <JOY_calibrate+0x112>
     6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <JOY_calibrate+0x11c>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <JOY_calibrate+0x11e>
     6a8:	c4 e1       	ldi	r28, 0x14	; 20
     6aa:	d0 e0       	ldi	r29, 0x00	; 0
     6ac:	60 91 06 01 	lds	r22, 0x0106
     6b0:	70 91 07 01 	lds	r23, 0x0107
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	8d d2       	rcall	.+1306   	; 0xbd2 <ADC_request>
     6b8:	4f ef       	ldi	r20, 0xFF	; 255
     6ba:	5f e1       	ldi	r21, 0x1F	; 31
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	41 50       	subi	r20, 0x01	; 1
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     6c0:	50 40       	sbci	r21, 0x00	; 0
     6c2:	80 40       	sbci	r24, 0x00	; 0
     6c4:	e1 f7       	brne	.-8      	; 0x6be <JOY_calibrate+0x134>
     6c6:	00 c0       	rjmp	.+0      	; 0x6c8 <JOY_calibrate+0x13e>
     6c8:	00 00       	nop
     6ca:	80 91 06 01 	lds	r24, 0x0106
     6ce:	90 91 07 01 	lds	r25, 0x0107
     6d2:	a3 d2       	rcall	.+1350   	; 0xc1a <ADC_read>
     6d4:	90 91 0a 01 	lds	r25, 0x010A
     6d8:	89 17       	cp	r24, r25
     6da:	10 f4       	brcc	.+4      	; 0x6e0 <JOY_calibrate+0x156>
     6dc:	80 93 0a 01 	sts	0x010A, r24
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     6e0:	21 97       	sbiw	r28, 0x01	; 1
     6e2:	20 97       	sbiw	r28, 0x00	; 0
     6e4:	19 f7       	brne	.-58     	; 0x6ac <JOY_calibrate+0x122>
     6e6:	30 91 0a 01 	lds	r19, 0x010A
     6ea:	20 91 0b 01 	lds	r18, 0x010B
		
		if(temp < calDown) {calDown = temp;}
     6ee:	90 91 0c 01 	lds	r25, 0x010C
     6f2:	80 91 0d 01 	lds	r24, 0x010D
     6f6:	1f 92       	push	r1
     6f8:	3f 93       	push	r19
	}
	
	printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     6fa:	1f 92       	push	r1
     6fc:	2f 93       	push	r18
		
		if(temp < calDown) {calDown = temp;}
	}
	
	
	printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
     6fe:	1f 92       	push	r1
     700:	9f 93       	push	r25
     702:	1f 92       	push	r1
     704:	8f 93       	push	r24
     706:	84 e0       	ldi	r24, 0x04	; 4
     708:	92 e0       	ldi	r25, 0x02	; 2
     70a:	9f 93       	push	r25
     70c:	8f 93       	push	r24
     70e:	f8 d2       	rcall	.+1520   	; 0xd00 <printf>
     710:	20 91 0b 01 	lds	r18, 0x010B
     714:	80 91 0a 01 	lds	r24, 0x010A
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	28 1b       	sub	r18, r24
     71c:	31 09       	sbc	r19, r1
     71e:	c9 01       	movw	r24, r18
     720:	4d b7       	in	r20, 0x3d	; 61
     722:	5e b7       	in	r21, 0x3e	; 62
     724:	46 5f       	subi	r20, 0xF6	; 246
     726:	5f 4f       	sbci	r21, 0xFF	; 255
     728:	0f b6       	in	r0, 0x3f	; 63
	
	meanVert = (calUp - calDown)/2;
     72a:	f8 94       	cli
     72c:	5e bf       	out	0x3e, r21	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	4d bf       	out	0x3d, r20	; 61
     732:	99 23       	and	r25, r25
     734:	0c f4       	brge	.+2      	; 0x738 <JOY_calibrate+0x1ae>
     736:	01 96       	adiw	r24, 0x01	; 1
     738:	95 95       	asr	r25
     73a:	87 95       	ror	r24
     73c:	80 93 09 01 	sts	0x0109, r24
     740:	20 91 0d 01 	lds	r18, 0x010D
     744:	80 91 0c 01 	lds	r24, 0x010C
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	28 1b       	sub	r18, r24
     74c:	31 09       	sbc	r19, r1
     74e:	c9 01       	movw	r24, r18
     750:	99 23       	and	r25, r25
     752:	0c f4       	brge	.+2      	; 0x756 <JOY_calibrate+0x1cc>
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	95 95       	asr	r25
     758:	87 95       	ror	r24
	meanHor = (calR - calL)/2;
     75a:	80 93 08 01 	sts	0x0108, r24
     75e:	90 91 08 01 	lds	r25, 0x0108
     762:	80 91 09 01 	lds	r24, 0x0109
     766:	1f 92       	push	r1
     768:	9f 93       	push	r25
     76a:	1f 92       	push	r1
     76c:	8f 93       	push	r24
     76e:	8e e2       	ldi	r24, 0x2E	; 46
     770:	92 e0       	ldi	r25, 0x02	; 2
     772:	9f 93       	push	r25
     774:	8f 93       	push	r24
     776:	c4 d2       	rcall	.+1416   	; 0xd00 <printf>
	
	printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	08 95       	ret

0000078a <JOY_requestCurrentPosition>:
     78a:	88 37       	cpi	r24, 0x78	; 120
     78c:	39 f4       	brne	.+14     	; 0x79c <JOY_requestCurrentPosition+0x12>
     78e:	60 91 06 01 	lds	r22, 0x0106
     792:	70 91 07 01 	lds	r23, 0x0107
     796:	82 e0       	ldi	r24, 0x02	; 2
     798:	1c c2       	rjmp	.+1080   	; 0xbd2 <ADC_request>
     79a:	08 95       	ret
     79c:	89 37       	cpi	r24, 0x79	; 121
     79e:	31 f4       	brne	.+12     	; 0x7ac <JOY_requestCurrentPosition+0x22>
}
     7a0:	60 91 06 01 	lds	r22, 0x0106
     7a4:	70 91 07 01 	lds	r23, 0x0107
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
	{
		ADC_request(Y_channel, adc_ext_ram);
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	13 c2       	rjmp	.+1062   	; 0xbd2 <ADC_request>
     7ac:	08 95       	ret

000007ae <JOY_updatePosition>:
     7ae:	88 37       	cpi	r24, 0x78	; 120
     7b0:	f9 f4       	brne	.+62     	; 0x7f0 <JOY_updatePosition+0x42>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     7b2:	80 91 06 01 	lds	r24, 0x0106
     7b6:	90 91 07 01 	lds	r25, 0x0107
     7ba:	2f d2       	rcall	.+1118   	; 0xc1a <ADC_read>
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	90 93 6d 02 	sts	0x026D, r25
     7c2:	80 93 6c 02 	sts	0x026C, r24
     7c6:	20 91 08 01 	lds	r18, 0x0108
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     7ca:	60 91 08 01 	lds	r22, 0x0108
     7ce:	ac 01       	movw	r20, r24
     7d0:	42 1b       	sub	r20, r18
     7d2:	51 09       	sbc	r21, r1
     7d4:	9a 01       	movw	r18, r20
     7d6:	44 e6       	ldi	r20, 0x64	; 100
     7d8:	42 9f       	mul	r20, r18
     7da:	c0 01       	movw	r24, r0
     7dc:	43 9f       	mul	r20, r19
     7de:	90 0d       	add	r25, r0
     7e0:	11 24       	eor	r1, r1
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	1c d2       	rcall	.+1080   	; 0xc1e <__divmodhi4>
     7e6:	70 93 71 02 	sts	0x0271, r23
     7ea:	60 93 70 02 	sts	0x0270, r22
     7ee:	08 95       	ret
     7f0:	89 37       	cpi	r24, 0x79	; 121
     7f2:	f1 f4       	brne	.+60     	; 0x830 <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     7f4:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     7f8:	90 91 07 01 	lds	r25, 0x0107
     7fc:	0e d2       	rcall	.+1052   	; 0xc1a <ADC_read>
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	90 93 6f 02 	sts	0x026F, r25
     804:	80 93 6e 02 	sts	0x026E, r24
     808:	20 91 09 01 	lds	r18, 0x0109
     80c:	60 91 09 01 	lds	r22, 0x0109
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     810:	ac 01       	movw	r20, r24
     812:	42 1b       	sub	r20, r18
     814:	51 09       	sbc	r21, r1
     816:	9a 01       	movw	r18, r20
     818:	44 e6       	ldi	r20, 0x64	; 100
     81a:	42 9f       	mul	r20, r18
     81c:	c0 01       	movw	r24, r0
     81e:	43 9f       	mul	r20, r19
     820:	90 0d       	add	r25, r0
     822:	11 24       	eor	r1, r1
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	fb d1       	rcall	.+1014   	; 0xc1e <__divmodhi4>
     828:	70 93 73 02 	sts	0x0273, r23
     82c:	60 93 72 02 	sts	0x0272, r22
     830:	08 95       	ret

00000832 <JOY_calculateDirection>:
     832:	80 91 70 02 	lds	r24, 0x0270
     836:	90 91 71 02 	lds	r25, 0x0271
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     83a:	8b 35       	cpi	r24, 0x5B	; 91
     83c:	91 05       	cpc	r25, r1
     83e:	24 f0       	brlt	.+8      	; 0x848 <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     840:	83 e0       	ldi	r24, 0x03	; 3
     842:	80 93 6b 02 	sts	0x026B, r24
     846:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     848:	86 3a       	cpi	r24, 0xA6	; 166
     84a:	9f 4f       	sbci	r25, 0xFF	; 255
     84c:	24 f4       	brge	.+8      	; 0x856 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     84e:	84 e0       	ldi	r24, 0x04	; 4
     850:	80 93 6b 02 	sts	0x026B, r24
     854:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     856:	80 91 72 02 	lds	r24, 0x0272
     85a:	90 91 73 02 	lds	r25, 0x0273
     85e:	8b 35       	cpi	r24, 0x5B	; 91
     860:	91 05       	cpc	r25, r1
     862:	24 f0       	brlt	.+8      	; 0x86c <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	80 93 6b 02 	sts	0x026B, r24
     86a:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     86c:	86 3a       	cpi	r24, 0xA6	; 166
     86e:	9f 4f       	sbci	r25, 0xFF	; 255
     870:	24 f4       	brge	.+8      	; 0x87a <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     872:	82 e0       	ldi	r24, 0x02	; 2
     874:	80 93 6b 02 	sts	0x026B, r24
     878:	08 95       	ret
	else{currentDirection = CENTRE;}
     87a:	10 92 6b 02 	sts	0x026B, r1
     87e:	08 95       	ret

00000880 <JOY_getPosition>:

//------------------------------------------------------------------------------
// This function returns the current position of the Joystick.
// It is a struct with the four parameters X_abs, Y_abs, X_per and Y_per
JOY_position_t JOY_getPosition()
{
     880:	cf 93       	push	r28
     882:	df 93       	push	r29
     884:	cd b7       	in	r28, 0x3d	; 61
     886:	de b7       	in	r29, 0x3e	; 62
     888:	28 97       	sbiw	r28, 0x08	; 8
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	f8 94       	cli
     88e:	de bf       	out	0x3e, r29	; 62
     890:	0f be       	out	0x3f, r0	; 63
     892:	cd bf       	out	0x3d, r28	; 61
	return currentPosition;
     894:	88 e0       	ldi	r24, 0x08	; 8
     896:	ec e6       	ldi	r30, 0x6C	; 108
     898:	f2 e0       	ldi	r31, 0x02	; 2
     89a:	de 01       	movw	r26, r28
     89c:	11 96       	adiw	r26, 0x01	; 1
     89e:	01 90       	ld	r0, Z+
     8a0:	0d 92       	st	X+, r0
     8a2:	8a 95       	dec	r24
     8a4:	e1 f7       	brne	.-8      	; 0x89e <JOY_getPosition+0x1e>
     8a6:	29 81       	ldd	r18, Y+1	; 0x01
     8a8:	3a 81       	ldd	r19, Y+2	; 0x02
     8aa:	4b 81       	ldd	r20, Y+3	; 0x03
     8ac:	5c 81       	ldd	r21, Y+4	; 0x04
     8ae:	6d 81       	ldd	r22, Y+5	; 0x05
     8b0:	7e 81       	ldd	r23, Y+6	; 0x06
}
     8b2:	8f 81       	ldd	r24, Y+7	; 0x07
     8b4:	98 85       	ldd	r25, Y+8	; 0x08
     8b6:	28 96       	adiw	r28, 0x08	; 8
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	f8 94       	cli
     8bc:	de bf       	out	0x3e, r29	; 62
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	cd bf       	out	0x3d, r28	; 61
     8c2:	df 91       	pop	r29
     8c4:	cf 91       	pop	r28
     8c6:	08 95       	ret

000008c8 <JOY_getDirection>:
// Before the value is returned, the values of position in x and y direction are 
// requested from the ADC and written to the currentPosition and 
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
     8c8:	88 e7       	ldi	r24, 0x78	; 120
     8ca:	5f df       	rcall	.-322    	; 0x78a <JOY_requestCurrentPosition>
     8cc:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8ce:	8a 95       	dec	r24
     8d0:	f1 f7       	brne	.-4      	; 0x8ce <JOY_getDirection+0x6>
     8d2:	00 00       	nop
     8d4:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     8d6:	6b df       	rcall	.-298    	; 0x7ae <JOY_updatePosition>
     8d8:	89 e7       	ldi	r24, 0x79	; 121
     8da:	57 df       	rcall	.-338    	; 0x78a <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     8dc:	82 e6       	ldi	r24, 0x62	; 98
     8de:	8a 95       	dec	r24
     8e0:	f1 f7       	brne	.-4      	; 0x8de <JOY_getDirection+0x16>
     8e2:	00 00       	nop
     8e4:	89 e7       	ldi	r24, 0x79	; 121
     8e6:	63 df       	rcall	.-314    	; 0x7ae <JOY_updatePosition>
     8e8:	a4 df       	rcall	.-184    	; 0x832 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     8ea:	80 91 6b 02 	lds	r24, 0x026B
     8ee:	08 95       	ret

000008f0 <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
     8f0:	26 2f       	mov	r18, r22
     8f2:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
     8f4:	75 95       	asr	r23
     8f6:	67 95       	ror	r22
     8f8:	75 95       	asr	r23
     8fa:	67 95       	ror	r22
     8fc:	75 95       	asr	r23
     8fe:	67 95       	ror	r22
     900:	75 95       	asr	r23
     902:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
     904:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
     906:	80 55       	subi	r24, 0x50	; 80
     908:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
     90a:	e0 91 10 01 	lds	r30, 0x0110
     90e:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     912:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
     914:	e0 91 10 01 	lds	r30, 0x0110
     918:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     91c:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
     91e:	e0 91 10 01 	lds	r30, 0x0110
     922:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     926:	60 83       	st	Z, r22
     928:	08 95       	ret

0000092a <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
     92a:	1f 93       	push	r17
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	c1 e0       	ldi	r28, 0x01	; 1
     932:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
     938:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
     93a:	60 e0       	ldi	r22, 0x00	; 0
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	d8 df       	rcall	.-80     	; 0x8f0 <OLED_goto>
     940:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
     942:	e0 91 0e 01 	lds	r30, 0x010E
		{
			OLED_writeByteToOLED(oled_data, 0x00);
     946:	f0 91 0f 01 	lds	r31, 0x010F
     94a:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     94c:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
     94e:	80 38       	cpi	r24, 0x80	; 128
     950:	c1 f7       	brne	.-16     	; 0x942 <OLED_clear+0x18>
     952:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
     954:	9d 2f       	mov	r25, r29
     956:	21 96       	adiw	r28, 0x01	; 1
     958:	c9 30       	cpi	r28, 0x09	; 9
     95a:	d1 05       	cpc	r29, r1
     95c:	71 f7       	brne	.-36     	; 0x93a <OLED_clear+0x10>
     95e:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
     964:	08 95       	ret

00000966 <OLED_init>:
     966:	e0 91 10 01 	lds	r30, 0x0110
//------------------------------------------------------------------------------
// Default initialization routine of the OLED display.

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
     96a:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     96e:	8e ea       	ldi	r24, 0xAE	; 174
     970:	80 83       	st	Z, r24
// Default initialization routine of the OLED display.

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
     972:	e0 91 10 01 	lds	r30, 0x0110
     976:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     97a:	81 ea       	ldi	r24, 0xA1	; 161
     97c:	80 83       	st	Z, r24

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
     97e:	e0 91 10 01 	lds	r30, 0x0110
     982:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     986:	8a ed       	ldi	r24, 0xDA	; 218
     988:	80 83       	st	Z, r24
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
     98a:	e0 91 10 01 	lds	r30, 0x0110
     98e:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     992:	82 e1       	ldi	r24, 0x12	; 18
     994:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
     996:	e0 91 10 01 	lds	r30, 0x0110
     99a:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     99e:	88 ec       	ldi	r24, 0xC8	; 200
     9a0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
     9a2:	e0 91 10 01 	lds	r30, 0x0110
     9a6:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     9aa:	88 ea       	ldi	r24, 0xA8	; 168
     9ac:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
     9ae:	e0 91 10 01 	lds	r30, 0x0110
     9b2:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     9b6:	8f e3       	ldi	r24, 0x3F	; 63
     9b8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
     9ba:	e0 91 10 01 	lds	r30, 0x0110
     9be:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     9c2:	85 ed       	ldi	r24, 0xD5	; 213
     9c4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
     9c6:	e0 91 10 01 	lds	r30, 0x0110
     9ca:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     9ce:	80 e8       	ldi	r24, 0x80	; 128
     9d0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
     9d2:	e0 91 10 01 	lds	r30, 0x0110
     9d6:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     9da:	81 e8       	ldi	r24, 0x81	; 129
     9dc:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
     9de:	e0 91 10 01 	lds	r30, 0x0110
     9e2:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     9e6:	80 e5       	ldi	r24, 0x50	; 80
     9e8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
     9ea:	e0 91 10 01 	lds	r30, 0x0110
     9ee:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     9f2:	89 ed       	ldi	r24, 0xD9	; 217
     9f4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
     9f6:	e0 91 10 01 	lds	r30, 0x0110
     9fa:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     9fe:	81 e2       	ldi	r24, 0x21	; 33
     a00:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
     a02:	e0 91 10 01 	lds	r30, 0x0110
     a06:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a0a:	80 e2       	ldi	r24, 0x20	; 32
     a0c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
     a0e:	e0 91 10 01 	lds	r30, 0x0110
     a12:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a16:	82 e0       	ldi	r24, 0x02	; 2
     a18:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
     a1a:	e0 91 10 01 	lds	r30, 0x0110
     a1e:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a22:	8b ed       	ldi	r24, 0xDB	; 219
     a24:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
     a26:	e0 91 10 01 	lds	r30, 0x0110
     a2a:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a2e:	80 e3       	ldi	r24, 0x30	; 48
     a30:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
     a32:	e0 91 10 01 	lds	r30, 0x0110
     a36:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a3a:	8d ea       	ldi	r24, 0xAD	; 173
     a3c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
     a3e:	e0 91 10 01 	lds	r30, 0x0110
     a42:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a46:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
     a48:	e0 91 10 01 	lds	r30, 0x0110
     a4c:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a50:	84 ea       	ldi	r24, 0xA4	; 164
     a52:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
     a54:	e0 91 10 01 	lds	r30, 0x0110
     a58:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a5c:	86 ea       	ldi	r24, 0xA6	; 166
     a5e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
     a60:	e0 91 10 01 	lds	r30, 0x0110
     a64:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a68:	8f ea       	ldi	r24, 0xAF	; 175
     a6a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
     a6c:	5e cf       	rjmp	.-324    	; 0x92a <OLED_clear>
     a6e:	08 95       	ret

00000a70 <OLED_printCharacter>:
     a70:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
     a72:	28 2f       	mov	r18, r24
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	22 0f       	add	r18, r18
     a78:	33 1f       	adc	r19, r19
     a7a:	22 0f       	add	r18, r18
     a7c:	33 1f       	adc	r19, r19
     a7e:	22 0f       	add	r18, r18
     a80:	33 1f       	adc	r19, r19
     a82:	80 e0       	ldi	r24, 0x00	; 0
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	20 59       	subi	r18, 0x90	; 144
     a88:	3f 4f       	sbci	r19, 0xFF	; 255
     a8a:	f9 01       	movw	r30, r18
     a8c:	e8 0f       	add	r30, r24
     a8e:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
     a90:	e4 91       	lpm	r30, Z
     a92:	a0 91 0e 01 	lds	r26, 0x010E
     a96:	b0 91 0f 01 	lds	r27, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a9a:	ec 93       	st	X, r30
     a9c:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
     a9e:	88 30       	cpi	r24, 0x08	; 8
     aa0:	91 05       	cpc	r25, r1
     aa2:	99 f7       	brne	.-26     	; 0xa8a <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
     aa4:	08 95       	ret

00000aa6 <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
     aa6:	1f 93       	push	r17
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
     aae:	10 e0       	ldi	r17, 0x00	; 0
     ab0:	06 c0       	rjmp	.+12     	; 0xabe <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
     ab2:	fe 01       	movw	r30, r28
     ab4:	e8 0f       	add	r30, r24
     ab6:	f9 1f       	adc	r31, r25
     ab8:	80 81       	ld	r24, Z
     aba:	da df       	rcall	.-76     	; 0xa70 <OLED_printCharacter>
     abc:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
     abe:	81 2f       	mov	r24, r17
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	fe 01       	movw	r30, r28
     ac4:	01 90       	ld	r0, Z+
     ac6:	00 20       	and	r0, r0
     ac8:	e9 f7       	brne	.-6      	; 0xac4 <OLED_printString+0x1e>
     aca:	31 97       	sbiw	r30, 0x01	; 1
     acc:	ec 1b       	sub	r30, r28
     ace:	fd 0b       	sbc	r31, r29
     ad0:	8e 17       	cp	r24, r30
     ad2:	9f 07       	cpc	r25, r31
     ad4:	70 f3       	brcs	.-36     	; 0xab2 <OLED_printString+0xc>
     ad6:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	08 95       	ret

00000ade <OLED_printArrow>:
     ade:	e0 91 0e 01 	lds	r30, 0x010E
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
     ae2:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ae6:	88 e1       	ldi	r24, 0x18	; 24
     ae8:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
     aea:	e0 91 0e 01 	lds	r30, 0x010E
     aee:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     af2:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
     af4:	e0 91 0e 01 	lds	r30, 0x010E
     af8:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     afc:	9e e7       	ldi	r25, 0x7E	; 126
     afe:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
     b00:	e0 91 0e 01 	lds	r30, 0x010E
     b04:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b08:	9c e3       	ldi	r25, 0x3C	; 60
     b0a:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
     b0c:	e0 91 0e 01 	lds	r30, 0x010E
     b10:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b14:	80 83       	st	Z, r24
     b16:	08 95       	ret

00000b18 <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
     b1e:	c1 e0       	ldi	r28, 0x01	; 1
     b20:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
     b26:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
     b28:	60 e0       	ldi	r22, 0x00	; 0
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	e1 de       	rcall	.-574    	; 0x8f0 <OLED_goto>
     b2e:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
     b30:	e0 91 0e 01 	lds	r30, 0x010E
		{
			OLED_writeByteToOLED(oled_data, 0x00);
     b34:	f0 91 0f 01 	lds	r31, 0x010F
     b38:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b3a:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
     b3c:	85 30       	cpi	r24, 0x05	; 5
     b3e:	c1 f7       	brne	.-16     	; 0xb30 <OLED_clearArrow+0x18>
     b40:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
     b42:	9d 2f       	mov	r25, r29
     b44:	21 96       	adiw	r28, 0x01	; 1
     b46:	c9 30       	cpi	r28, 0x09	; 9
     b48:	d1 05       	cpc	r29, r1
     b4a:	71 f7       	brne	.-36     	; 0xb28 <OLED_clearArrow+0x10>
     b4c:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	08 95       	ret

00000b54 <OLED_moveArrow>:
     b54:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
     b56:	df 93       	push	r29
     b58:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
     b5a:	de df       	rcall	.-68     	; 0xb18 <OLED_clearArrow>
     b5c:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	ce 01       	movw	r24, r28
     b62:	c6 de       	rcall	.-628    	; 0x8f0 <OLED_goto>
     b64:	bc df       	rcall	.-136    	; 0xade <OLED_printArrow>
     b66:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
     b68:	cf 91       	pop	r28
     b6a:	08 95       	ret

00000b6c <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
     b6c:	10 92 75 02 	sts	0x0275, r1
	currentSliPosition.L_abs = 0;
     b70:	10 92 76 02 	sts	0x0276, r1
	currentSliPosition.R_per = 0;
     b74:	10 92 77 02 	sts	0x0277, r1
	currentSliPosition.L_per = 0;
     b78:	10 92 78 02 	sts	0x0278, r1
     b7c:	08 95       	ret

00000b7e <SLI_getPosition>:
}

//
SLI_position_t SLI_getPosition()
{
	return currentSliPosition;
     b7e:	60 91 75 02 	lds	r22, 0x0275
     b82:	70 91 76 02 	lds	r23, 0x0276
     b86:	80 91 77 02 	lds	r24, 0x0277
     b8a:	90 91 78 02 	lds	r25, 0x0278
     b8e:	08 95       	ret

00000b90 <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     b90:	5d 9b       	sbis	0x0b, 5	; 11
     b92:	fe cf       	rjmp	.-4      	; 0xb90 <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
     b94:	8c b9       	out	0x0c, r24	; 12
     b96:	08 95       	ret

00000b98 <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
     b98:	5f 9b       	sbis	0x0b, 7	; 11
     b9a:	fe cf       	rjmp	.-4      	; 0xb98 <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
     b9c:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
     b9e:	08 95       	ret

00000ba0 <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
     ba8:	bb 27       	eor	r27, r27
     baa:	a1 2f       	mov	r26, r17
     bac:	90 2f       	mov	r25, r16
     bae:	8f 2d       	mov	r24, r15
     bb0:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
     bb2:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     bb4:	88 e1       	ldi	r24, 0x18	; 24
     bb6:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
     bb8:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     bba:	8e e8       	ldi	r24, 0x8E	; 142
     bbc:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
     bbe:	6c ec       	ldi	r22, 0xCC	; 204
     bc0:	75 e0       	ldi	r23, 0x05	; 5
     bc2:	88 ec       	ldi	r24, 0xC8	; 200
     bc4:	95 e0       	ldi	r25, 0x05	; 5
     bc6:	52 d0       	rcall	.+164    	; 0xc6c <fdevopen>
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	ff 90       	pop	r15
     bce:	ef 90       	pop	r14
     bd0:	08 95       	ret

00000bd2 <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
     bd2:	9b 01       	movw	r18, r22
	
	switch(channel){
     bd4:	82 30       	cpi	r24, 0x02	; 2
     bd6:	69 f0       	breq	.+26     	; 0xbf2 <ADC_request+0x20>
     bd8:	18 f4       	brcc	.+6      	; 0xbe0 <ADC_request+0xe>
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	31 f0       	breq	.+12     	; 0xbea <ADC_request+0x18>
     bde:	15 c0       	rjmp	.+42     	; 0xc0a <ADC_request+0x38>
     be0:	83 30       	cpi	r24, 0x03	; 3
     be2:	59 f0       	breq	.+22     	; 0xbfa <ADC_request+0x28>
     be4:	84 30       	cpi	r24, 0x04	; 4
     be6:	69 f0       	breq	.+26     	; 0xc02 <ADC_request+0x30>
     be8:	10 c0       	rjmp	.+32     	; 0xc0a <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
     bea:	64 e0       	ldi	r22, 0x04	; 4
     bec:	c9 01       	movw	r24, r18
     bee:	b7 cc       	rjmp	.-1682   	; 0x55e <saveToAddress>
     bf0:	08 95       	ret
			break;
     bf2:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
     bf4:	c9 01       	movw	r24, r18
     bf6:	b3 cc       	rjmp	.-1690   	; 0x55e <saveToAddress>
     bf8:	08 95       	ret
     bfa:	66 e0       	ldi	r22, 0x06	; 6
			break;
     bfc:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
     bfe:	af cc       	rjmp	.-1698   	; 0x55e <saveToAddress>
     c00:	08 95       	ret
     c02:	67 e0       	ldi	r22, 0x07	; 7
     c04:	c9 01       	movw	r24, r18
			break;
     c06:	ab cc       	rjmp	.-1706   	; 0x55e <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
     c08:	08 95       	ret
     c0a:	83 e5       	ldi	r24, 0x53	; 83
     c0c:	92 e0       	ldi	r25, 0x02	; 2
     c0e:	9f 93       	push	r25
			break;
     c10:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
     c12:	76 d0       	rcall	.+236    	; 0xd00 <printf>
     c14:	0f 90       	pop	r0
     c16:	0f 90       	pop	r0
     c18:	08 95       	ret

00000c1a <ADC_read>:
     c1a:	9e cc       	rjmp	.-1732   	; 0x558 <readFromAddress>
     c1c:	08 95       	ret

00000c1e <__divmodhi4>:
			break;
     c1e:	97 fb       	bst	r25, 7
     c20:	07 2e       	mov	r0, r23
     c22:	16 f4       	brtc	.+4      	; 0xc28 <__divmodhi4+0xa>
     c24:	00 94       	com	r0
     c26:	06 d0       	rcall	.+12     	; 0xc34 <__divmodhi4_neg1>
     c28:	77 fd       	sbrc	r23, 7
     c2a:	08 d0       	rcall	.+16     	; 0xc3c <__divmodhi4_neg2>
     c2c:	0b d0       	rcall	.+22     	; 0xc44 <__udivmodhi4>
     c2e:	07 fc       	sbrc	r0, 7
     c30:	05 d0       	rcall	.+10     	; 0xc3c <__divmodhi4_neg2>
     c32:	3e f4       	brtc	.+14     	; 0xc42 <__divmodhi4_exit>

00000c34 <__divmodhi4_neg1>:
     c34:	90 95       	com	r25
     c36:	81 95       	neg	r24
     c38:	9f 4f       	sbci	r25, 0xFF	; 255
     c3a:	08 95       	ret

00000c3c <__divmodhi4_neg2>:
     c3c:	70 95       	com	r23
     c3e:	61 95       	neg	r22
     c40:	7f 4f       	sbci	r23, 0xFF	; 255

00000c42 <__divmodhi4_exit>:
     c42:	08 95       	ret

00000c44 <__udivmodhi4>:
     c44:	aa 1b       	sub	r26, r26
     c46:	bb 1b       	sub	r27, r27
     c48:	51 e1       	ldi	r21, 0x11	; 17
     c4a:	07 c0       	rjmp	.+14     	; 0xc5a <__udivmodhi4_ep>

00000c4c <__udivmodhi4_loop>:
     c4c:	aa 1f       	adc	r26, r26
     c4e:	bb 1f       	adc	r27, r27
     c50:	a6 17       	cp	r26, r22
     c52:	b7 07       	cpc	r27, r23
     c54:	10 f0       	brcs	.+4      	; 0xc5a <__udivmodhi4_ep>
     c56:	a6 1b       	sub	r26, r22
     c58:	b7 0b       	sbc	r27, r23

00000c5a <__udivmodhi4_ep>:
     c5a:	88 1f       	adc	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	5a 95       	dec	r21
     c60:	a9 f7       	brne	.-22     	; 0xc4c <__udivmodhi4_loop>
     c62:	80 95       	com	r24
     c64:	90 95       	com	r25
     c66:	bc 01       	movw	r22, r24
     c68:	cd 01       	movw	r24, r26
     c6a:	08 95       	ret

00000c6c <fdevopen>:
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	ec 01       	movw	r28, r24
     c76:	8b 01       	movw	r16, r22
     c78:	00 97       	sbiw	r24, 0x00	; 0
     c7a:	31 f4       	brne	.+12     	; 0xc88 <fdevopen+0x1c>
     c7c:	61 15       	cp	r22, r1
     c7e:	71 05       	cpc	r23, r1
     c80:	19 f4       	brne	.+6      	; 0xc88 <fdevopen+0x1c>
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	37 c0       	rjmp	.+110    	; 0xcf6 <fdevopen+0x8a>
     c88:	6e e0       	ldi	r22, 0x0E	; 14
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	38 d2       	rcall	.+1136   	; 0x1102 <calloc>
     c92:	fc 01       	movw	r30, r24
     c94:	00 97       	sbiw	r24, 0x00	; 0
     c96:	a9 f3       	breq	.-22     	; 0xc82 <fdevopen+0x16>
     c98:	80 e8       	ldi	r24, 0x80	; 128
     c9a:	83 83       	std	Z+3, r24	; 0x03
     c9c:	01 15       	cp	r16, r1
     c9e:	11 05       	cpc	r17, r1
     ca0:	71 f0       	breq	.+28     	; 0xcbe <fdevopen+0x52>
     ca2:	13 87       	std	Z+11, r17	; 0x0b
     ca4:	02 87       	std	Z+10, r16	; 0x0a
     ca6:	81 e8       	ldi	r24, 0x81	; 129
     ca8:	83 83       	std	Z+3, r24	; 0x03
     caa:	80 91 79 02 	lds	r24, 0x0279
     cae:	90 91 7a 02 	lds	r25, 0x027A
     cb2:	89 2b       	or	r24, r25
     cb4:	21 f4       	brne	.+8      	; 0xcbe <fdevopen+0x52>
     cb6:	f0 93 7a 02 	sts	0x027A, r31
     cba:	e0 93 79 02 	sts	0x0279, r30
     cbe:	20 97       	sbiw	r28, 0x00	; 0
     cc0:	c9 f0       	breq	.+50     	; 0xcf4 <fdevopen+0x88>
     cc2:	d1 87       	std	Z+9, r29	; 0x09
     cc4:	c0 87       	std	Z+8, r28	; 0x08
     cc6:	83 81       	ldd	r24, Z+3	; 0x03
     cc8:	82 60       	ori	r24, 0x02	; 2
     cca:	83 83       	std	Z+3, r24	; 0x03
     ccc:	80 91 7b 02 	lds	r24, 0x027B
     cd0:	90 91 7c 02 	lds	r25, 0x027C
     cd4:	89 2b       	or	r24, r25
     cd6:	71 f4       	brne	.+28     	; 0xcf4 <fdevopen+0x88>
     cd8:	f0 93 7c 02 	sts	0x027C, r31
     cdc:	e0 93 7b 02 	sts	0x027B, r30
     ce0:	80 91 7d 02 	lds	r24, 0x027D
     ce4:	90 91 7e 02 	lds	r25, 0x027E
     ce8:	89 2b       	or	r24, r25
     cea:	21 f4       	brne	.+8      	; 0xcf4 <fdevopen+0x88>
     cec:	f0 93 7e 02 	sts	0x027E, r31
     cf0:	e0 93 7d 02 	sts	0x027D, r30
     cf4:	cf 01       	movw	r24, r30
     cf6:	df 91       	pop	r29
     cf8:	cf 91       	pop	r28
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	08 95       	ret

00000d00 <printf>:
     d00:	a0 e0       	ldi	r26, 0x00	; 0
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e5 e8       	ldi	r30, 0x85	; 133
     d06:	f6 e0       	ldi	r31, 0x06	; 6
     d08:	fa c3       	rjmp	.+2036   	; 0x14fe <__prologue_saves__+0x20>
     d0a:	fe 01       	movw	r30, r28
     d0c:	35 96       	adiw	r30, 0x05	; 5
     d0e:	61 91       	ld	r22, Z+
     d10:	71 91       	ld	r23, Z+
     d12:	af 01       	movw	r20, r30
     d14:	80 91 7b 02 	lds	r24, 0x027B
     d18:	90 91 7c 02 	lds	r25, 0x027C
     d1c:	2f d0       	rcall	.+94     	; 0xd7c <vfprintf>
     d1e:	e2 e0       	ldi	r30, 0x02	; 2
     d20:	0a c4       	rjmp	.+2068   	; 0x1536 <__epilogue_restores__+0x20>

00000d22 <puts>:
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	e0 91 7b 02 	lds	r30, 0x027B
     d2e:	f0 91 7c 02 	lds	r31, 0x027C
     d32:	23 81       	ldd	r18, Z+3	; 0x03
     d34:	21 ff       	sbrs	r18, 1
     d36:	1b c0       	rjmp	.+54     	; 0xd6e <puts+0x4c>
     d38:	ec 01       	movw	r28, r24
     d3a:	00 e0       	ldi	r16, 0x00	; 0
     d3c:	10 e0       	ldi	r17, 0x00	; 0
     d3e:	89 91       	ld	r24, Y+
     d40:	60 91 7b 02 	lds	r22, 0x027B
     d44:	70 91 7c 02 	lds	r23, 0x027C
     d48:	db 01       	movw	r26, r22
     d4a:	18 96       	adiw	r26, 0x08	; 8
     d4c:	ed 91       	ld	r30, X+
     d4e:	fc 91       	ld	r31, X
     d50:	19 97       	sbiw	r26, 0x09	; 9
     d52:	88 23       	and	r24, r24
     d54:	31 f0       	breq	.+12     	; 0xd62 <puts+0x40>
     d56:	09 95       	icall
     d58:	89 2b       	or	r24, r25
     d5a:	89 f3       	breq	.-30     	; 0xd3e <puts+0x1c>
     d5c:	0f ef       	ldi	r16, 0xFF	; 255
     d5e:	1f ef       	ldi	r17, 0xFF	; 255
     d60:	ee cf       	rjmp	.-36     	; 0xd3e <puts+0x1c>
     d62:	8a e0       	ldi	r24, 0x0A	; 10
     d64:	09 95       	icall
     d66:	89 2b       	or	r24, r25
     d68:	11 f4       	brne	.+4      	; 0xd6e <puts+0x4c>
     d6a:	c8 01       	movw	r24, r16
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <puts+0x50>
     d6e:	8f ef       	ldi	r24, 0xFF	; 255
     d70:	9f ef       	ldi	r25, 0xFF	; 255
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	1f 91       	pop	r17
     d78:	0f 91       	pop	r16
     d7a:	08 95       	ret

00000d7c <vfprintf>:
     d7c:	ac e0       	ldi	r26, 0x0C	; 12
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e3 ec       	ldi	r30, 0xC3	; 195
     d82:	f6 e0       	ldi	r31, 0x06	; 6
     d84:	ac c3       	rjmp	.+1880   	; 0x14de <__prologue_saves__>
     d86:	7c 01       	movw	r14, r24
     d88:	6b 01       	movw	r12, r22
     d8a:	8a 01       	movw	r16, r20
     d8c:	fc 01       	movw	r30, r24
     d8e:	17 82       	std	Z+7, r1	; 0x07
     d90:	16 82       	std	Z+6, r1	; 0x06
     d92:	83 81       	ldd	r24, Z+3	; 0x03
     d94:	81 ff       	sbrs	r24, 1
     d96:	b0 c1       	rjmp	.+864    	; 0x10f8 <vfprintf+0x37c>
     d98:	ce 01       	movw	r24, r28
     d9a:	01 96       	adiw	r24, 0x01	; 1
     d9c:	4c 01       	movw	r8, r24
     d9e:	f7 01       	movw	r30, r14
     da0:	93 81       	ldd	r25, Z+3	; 0x03
     da2:	f6 01       	movw	r30, r12
     da4:	93 fd       	sbrc	r25, 3
     da6:	85 91       	lpm	r24, Z+
     da8:	93 ff       	sbrs	r25, 3
     daa:	81 91       	ld	r24, Z+
     dac:	6f 01       	movw	r12, r30
     dae:	88 23       	and	r24, r24
     db0:	09 f4       	brne	.+2      	; 0xdb4 <vfprintf+0x38>
     db2:	9e c1       	rjmp	.+828    	; 0x10f0 <vfprintf+0x374>
     db4:	85 32       	cpi	r24, 0x25	; 37
     db6:	39 f4       	brne	.+14     	; 0xdc6 <vfprintf+0x4a>
     db8:	93 fd       	sbrc	r25, 3
     dba:	85 91       	lpm	r24, Z+
     dbc:	93 ff       	sbrs	r25, 3
     dbe:	81 91       	ld	r24, Z+
     dc0:	6f 01       	movw	r12, r30
     dc2:	85 32       	cpi	r24, 0x25	; 37
     dc4:	21 f4       	brne	.+8      	; 0xdce <vfprintf+0x52>
     dc6:	b7 01       	movw	r22, r14
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	f9 d2       	rcall	.+1522   	; 0x13be <fputc>
     dcc:	e8 cf       	rjmp	.-48     	; 0xd9e <vfprintf+0x22>
     dce:	51 2c       	mov	r5, r1
     dd0:	31 2c       	mov	r3, r1
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	20 32       	cpi	r18, 0x20	; 32
     dd6:	a0 f4       	brcc	.+40     	; 0xe00 <vfprintf+0x84>
     dd8:	8b 32       	cpi	r24, 0x2B	; 43
     dda:	69 f0       	breq	.+26     	; 0xdf6 <vfprintf+0x7a>
     ddc:	30 f4       	brcc	.+12     	; 0xdea <vfprintf+0x6e>
     dde:	80 32       	cpi	r24, 0x20	; 32
     de0:	59 f0       	breq	.+22     	; 0xdf8 <vfprintf+0x7c>
     de2:	83 32       	cpi	r24, 0x23	; 35
     de4:	69 f4       	brne	.+26     	; 0xe00 <vfprintf+0x84>
     de6:	20 61       	ori	r18, 0x10	; 16
     de8:	2c c0       	rjmp	.+88     	; 0xe42 <vfprintf+0xc6>
     dea:	8d 32       	cpi	r24, 0x2D	; 45
     dec:	39 f0       	breq	.+14     	; 0xdfc <vfprintf+0x80>
     dee:	80 33       	cpi	r24, 0x30	; 48
     df0:	39 f4       	brne	.+14     	; 0xe00 <vfprintf+0x84>
     df2:	21 60       	ori	r18, 0x01	; 1
     df4:	26 c0       	rjmp	.+76     	; 0xe42 <vfprintf+0xc6>
     df6:	22 60       	ori	r18, 0x02	; 2
     df8:	24 60       	ori	r18, 0x04	; 4
     dfa:	23 c0       	rjmp	.+70     	; 0xe42 <vfprintf+0xc6>
     dfc:	28 60       	ori	r18, 0x08	; 8
     dfe:	21 c0       	rjmp	.+66     	; 0xe42 <vfprintf+0xc6>
     e00:	27 fd       	sbrc	r18, 7
     e02:	27 c0       	rjmp	.+78     	; 0xe52 <vfprintf+0xd6>
     e04:	30 ed       	ldi	r19, 0xD0	; 208
     e06:	38 0f       	add	r19, r24
     e08:	3a 30       	cpi	r19, 0x0A	; 10
     e0a:	78 f4       	brcc	.+30     	; 0xe2a <vfprintf+0xae>
     e0c:	26 ff       	sbrs	r18, 6
     e0e:	06 c0       	rjmp	.+12     	; 0xe1c <vfprintf+0xa0>
     e10:	fa e0       	ldi	r31, 0x0A	; 10
     e12:	5f 9e       	mul	r5, r31
     e14:	30 0d       	add	r19, r0
     e16:	11 24       	eor	r1, r1
     e18:	53 2e       	mov	r5, r19
     e1a:	13 c0       	rjmp	.+38     	; 0xe42 <vfprintf+0xc6>
     e1c:	8a e0       	ldi	r24, 0x0A	; 10
     e1e:	38 9e       	mul	r3, r24
     e20:	30 0d       	add	r19, r0
     e22:	11 24       	eor	r1, r1
     e24:	33 2e       	mov	r3, r19
     e26:	20 62       	ori	r18, 0x20	; 32
     e28:	0c c0       	rjmp	.+24     	; 0xe42 <vfprintf+0xc6>
     e2a:	8e 32       	cpi	r24, 0x2E	; 46
     e2c:	21 f4       	brne	.+8      	; 0xe36 <vfprintf+0xba>
     e2e:	26 fd       	sbrc	r18, 6
     e30:	5f c1       	rjmp	.+702    	; 0x10f0 <vfprintf+0x374>
     e32:	20 64       	ori	r18, 0x40	; 64
     e34:	06 c0       	rjmp	.+12     	; 0xe42 <vfprintf+0xc6>
     e36:	8c 36       	cpi	r24, 0x6C	; 108
     e38:	11 f4       	brne	.+4      	; 0xe3e <vfprintf+0xc2>
     e3a:	20 68       	ori	r18, 0x80	; 128
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <vfprintf+0xc6>
     e3e:	88 36       	cpi	r24, 0x68	; 104
     e40:	41 f4       	brne	.+16     	; 0xe52 <vfprintf+0xd6>
     e42:	f6 01       	movw	r30, r12
     e44:	93 fd       	sbrc	r25, 3
     e46:	85 91       	lpm	r24, Z+
     e48:	93 ff       	sbrs	r25, 3
     e4a:	81 91       	ld	r24, Z+
     e4c:	6f 01       	movw	r12, r30
     e4e:	81 11       	cpse	r24, r1
     e50:	c1 cf       	rjmp	.-126    	; 0xdd4 <vfprintf+0x58>
     e52:	98 2f       	mov	r25, r24
     e54:	9f 7d       	andi	r25, 0xDF	; 223
     e56:	95 54       	subi	r25, 0x45	; 69
     e58:	93 30       	cpi	r25, 0x03	; 3
     e5a:	28 f4       	brcc	.+10     	; 0xe66 <vfprintf+0xea>
     e5c:	0c 5f       	subi	r16, 0xFC	; 252
     e5e:	1f 4f       	sbci	r17, 0xFF	; 255
     e60:	ff e3       	ldi	r31, 0x3F	; 63
     e62:	f9 83       	std	Y+1, r31	; 0x01
     e64:	0d c0       	rjmp	.+26     	; 0xe80 <vfprintf+0x104>
     e66:	83 36       	cpi	r24, 0x63	; 99
     e68:	31 f0       	breq	.+12     	; 0xe76 <vfprintf+0xfa>
     e6a:	83 37       	cpi	r24, 0x73	; 115
     e6c:	71 f0       	breq	.+28     	; 0xe8a <vfprintf+0x10e>
     e6e:	83 35       	cpi	r24, 0x53	; 83
     e70:	09 f0       	breq	.+2      	; 0xe74 <vfprintf+0xf8>
     e72:	57 c0       	rjmp	.+174    	; 0xf22 <vfprintf+0x1a6>
     e74:	21 c0       	rjmp	.+66     	; 0xeb8 <vfprintf+0x13c>
     e76:	f8 01       	movw	r30, r16
     e78:	80 81       	ld	r24, Z
     e7a:	89 83       	std	Y+1, r24	; 0x01
     e7c:	0e 5f       	subi	r16, 0xFE	; 254
     e7e:	1f 4f       	sbci	r17, 0xFF	; 255
     e80:	44 24       	eor	r4, r4
     e82:	43 94       	inc	r4
     e84:	51 2c       	mov	r5, r1
     e86:	54 01       	movw	r10, r8
     e88:	14 c0       	rjmp	.+40     	; 0xeb2 <vfprintf+0x136>
     e8a:	38 01       	movw	r6, r16
     e8c:	f2 e0       	ldi	r31, 0x02	; 2
     e8e:	6f 0e       	add	r6, r31
     e90:	71 1c       	adc	r7, r1
     e92:	f8 01       	movw	r30, r16
     e94:	a0 80       	ld	r10, Z
     e96:	b1 80       	ldd	r11, Z+1	; 0x01
     e98:	26 ff       	sbrs	r18, 6
     e9a:	03 c0       	rjmp	.+6      	; 0xea2 <vfprintf+0x126>
     e9c:	65 2d       	mov	r22, r5
     e9e:	70 e0       	ldi	r23, 0x00	; 0
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <vfprintf+0x12a>
     ea2:	6f ef       	ldi	r22, 0xFF	; 255
     ea4:	7f ef       	ldi	r23, 0xFF	; 255
     ea6:	c5 01       	movw	r24, r10
     ea8:	2c 87       	std	Y+12, r18	; 0x0c
     eaa:	7e d2       	rcall	.+1276   	; 0x13a8 <strnlen>
     eac:	2c 01       	movw	r4, r24
     eae:	83 01       	movw	r16, r6
     eb0:	2c 85       	ldd	r18, Y+12	; 0x0c
     eb2:	2f 77       	andi	r18, 0x7F	; 127
     eb4:	22 2e       	mov	r2, r18
     eb6:	16 c0       	rjmp	.+44     	; 0xee4 <vfprintf+0x168>
     eb8:	38 01       	movw	r6, r16
     eba:	f2 e0       	ldi	r31, 0x02	; 2
     ebc:	6f 0e       	add	r6, r31
     ebe:	71 1c       	adc	r7, r1
     ec0:	f8 01       	movw	r30, r16
     ec2:	a0 80       	ld	r10, Z
     ec4:	b1 80       	ldd	r11, Z+1	; 0x01
     ec6:	26 ff       	sbrs	r18, 6
     ec8:	03 c0       	rjmp	.+6      	; 0xed0 <vfprintf+0x154>
     eca:	65 2d       	mov	r22, r5
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <vfprintf+0x158>
     ed0:	6f ef       	ldi	r22, 0xFF	; 255
     ed2:	7f ef       	ldi	r23, 0xFF	; 255
     ed4:	c5 01       	movw	r24, r10
     ed6:	2c 87       	std	Y+12, r18	; 0x0c
     ed8:	55 d2       	rcall	.+1194   	; 0x1384 <strnlen_P>
     eda:	2c 01       	movw	r4, r24
     edc:	2c 85       	ldd	r18, Y+12	; 0x0c
     ede:	20 68       	ori	r18, 0x80	; 128
     ee0:	22 2e       	mov	r2, r18
     ee2:	83 01       	movw	r16, r6
     ee4:	23 fc       	sbrc	r2, 3
     ee6:	19 c0       	rjmp	.+50     	; 0xf1a <vfprintf+0x19e>
     ee8:	83 2d       	mov	r24, r3
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	48 16       	cp	r4, r24
     eee:	59 06       	cpc	r5, r25
     ef0:	a0 f4       	brcc	.+40     	; 0xf1a <vfprintf+0x19e>
     ef2:	b7 01       	movw	r22, r14
     ef4:	80 e2       	ldi	r24, 0x20	; 32
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	62 d2       	rcall	.+1220   	; 0x13be <fputc>
     efa:	3a 94       	dec	r3
     efc:	f5 cf       	rjmp	.-22     	; 0xee8 <vfprintf+0x16c>
     efe:	f5 01       	movw	r30, r10
     f00:	27 fc       	sbrc	r2, 7
     f02:	85 91       	lpm	r24, Z+
     f04:	27 fe       	sbrs	r2, 7
     f06:	81 91       	ld	r24, Z+
     f08:	5f 01       	movw	r10, r30
     f0a:	b7 01       	movw	r22, r14
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	57 d2       	rcall	.+1198   	; 0x13be <fputc>
     f10:	31 10       	cpse	r3, r1
     f12:	3a 94       	dec	r3
     f14:	f1 e0       	ldi	r31, 0x01	; 1
     f16:	4f 1a       	sub	r4, r31
     f18:	51 08       	sbc	r5, r1
     f1a:	41 14       	cp	r4, r1
     f1c:	51 04       	cpc	r5, r1
     f1e:	79 f7       	brne	.-34     	; 0xefe <vfprintf+0x182>
     f20:	de c0       	rjmp	.+444    	; 0x10de <vfprintf+0x362>
     f22:	84 36       	cpi	r24, 0x64	; 100
     f24:	11 f0       	breq	.+4      	; 0xf2a <vfprintf+0x1ae>
     f26:	89 36       	cpi	r24, 0x69	; 105
     f28:	31 f5       	brne	.+76     	; 0xf76 <vfprintf+0x1fa>
     f2a:	f8 01       	movw	r30, r16
     f2c:	27 ff       	sbrs	r18, 7
     f2e:	07 c0       	rjmp	.+14     	; 0xf3e <vfprintf+0x1c2>
     f30:	60 81       	ld	r22, Z
     f32:	71 81       	ldd	r23, Z+1	; 0x01
     f34:	82 81       	ldd	r24, Z+2	; 0x02
     f36:	93 81       	ldd	r25, Z+3	; 0x03
     f38:	0c 5f       	subi	r16, 0xFC	; 252
     f3a:	1f 4f       	sbci	r17, 0xFF	; 255
     f3c:	08 c0       	rjmp	.+16     	; 0xf4e <vfprintf+0x1d2>
     f3e:	60 81       	ld	r22, Z
     f40:	71 81       	ldd	r23, Z+1	; 0x01
     f42:	88 27       	eor	r24, r24
     f44:	77 fd       	sbrc	r23, 7
     f46:	80 95       	com	r24
     f48:	98 2f       	mov	r25, r24
     f4a:	0e 5f       	subi	r16, 0xFE	; 254
     f4c:	1f 4f       	sbci	r17, 0xFF	; 255
     f4e:	2f 76       	andi	r18, 0x6F	; 111
     f50:	b2 2e       	mov	r11, r18
     f52:	97 ff       	sbrs	r25, 7
     f54:	09 c0       	rjmp	.+18     	; 0xf68 <vfprintf+0x1ec>
     f56:	90 95       	com	r25
     f58:	80 95       	com	r24
     f5a:	70 95       	com	r23
     f5c:	61 95       	neg	r22
     f5e:	7f 4f       	sbci	r23, 0xFF	; 255
     f60:	8f 4f       	sbci	r24, 0xFF	; 255
     f62:	9f 4f       	sbci	r25, 0xFF	; 255
     f64:	20 68       	ori	r18, 0x80	; 128
     f66:	b2 2e       	mov	r11, r18
     f68:	2a e0       	ldi	r18, 0x0A	; 10
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	a4 01       	movw	r20, r8
     f6e:	59 d2       	rcall	.+1202   	; 0x1422 <__ultoa_invert>
     f70:	a8 2e       	mov	r10, r24
     f72:	a8 18       	sub	r10, r8
     f74:	43 c0       	rjmp	.+134    	; 0xffc <vfprintf+0x280>
     f76:	85 37       	cpi	r24, 0x75	; 117
     f78:	29 f4       	brne	.+10     	; 0xf84 <vfprintf+0x208>
     f7a:	2f 7e       	andi	r18, 0xEF	; 239
     f7c:	b2 2e       	mov	r11, r18
     f7e:	2a e0       	ldi	r18, 0x0A	; 10
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	25 c0       	rjmp	.+74     	; 0xfce <vfprintf+0x252>
     f84:	f2 2f       	mov	r31, r18
     f86:	f9 7f       	andi	r31, 0xF9	; 249
     f88:	bf 2e       	mov	r11, r31
     f8a:	8f 36       	cpi	r24, 0x6F	; 111
     f8c:	c1 f0       	breq	.+48     	; 0xfbe <vfprintf+0x242>
     f8e:	18 f4       	brcc	.+6      	; 0xf96 <vfprintf+0x21a>
     f90:	88 35       	cpi	r24, 0x58	; 88
     f92:	79 f0       	breq	.+30     	; 0xfb2 <vfprintf+0x236>
     f94:	ad c0       	rjmp	.+346    	; 0x10f0 <vfprintf+0x374>
     f96:	80 37       	cpi	r24, 0x70	; 112
     f98:	19 f0       	breq	.+6      	; 0xfa0 <vfprintf+0x224>
     f9a:	88 37       	cpi	r24, 0x78	; 120
     f9c:	21 f0       	breq	.+8      	; 0xfa6 <vfprintf+0x22a>
     f9e:	a8 c0       	rjmp	.+336    	; 0x10f0 <vfprintf+0x374>
     fa0:	2f 2f       	mov	r18, r31
     fa2:	20 61       	ori	r18, 0x10	; 16
     fa4:	b2 2e       	mov	r11, r18
     fa6:	b4 fe       	sbrs	r11, 4
     fa8:	0d c0       	rjmp	.+26     	; 0xfc4 <vfprintf+0x248>
     faa:	8b 2d       	mov	r24, r11
     fac:	84 60       	ori	r24, 0x04	; 4
     fae:	b8 2e       	mov	r11, r24
     fb0:	09 c0       	rjmp	.+18     	; 0xfc4 <vfprintf+0x248>
     fb2:	24 ff       	sbrs	r18, 4
     fb4:	0a c0       	rjmp	.+20     	; 0xfca <vfprintf+0x24e>
     fb6:	9f 2f       	mov	r25, r31
     fb8:	96 60       	ori	r25, 0x06	; 6
     fba:	b9 2e       	mov	r11, r25
     fbc:	06 c0       	rjmp	.+12     	; 0xfca <vfprintf+0x24e>
     fbe:	28 e0       	ldi	r18, 0x08	; 8
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	05 c0       	rjmp	.+10     	; 0xfce <vfprintf+0x252>
     fc4:	20 e1       	ldi	r18, 0x10	; 16
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <vfprintf+0x252>
     fca:	20 e1       	ldi	r18, 0x10	; 16
     fcc:	32 e0       	ldi	r19, 0x02	; 2
     fce:	f8 01       	movw	r30, r16
     fd0:	b7 fe       	sbrs	r11, 7
     fd2:	07 c0       	rjmp	.+14     	; 0xfe2 <vfprintf+0x266>
     fd4:	60 81       	ld	r22, Z
     fd6:	71 81       	ldd	r23, Z+1	; 0x01
     fd8:	82 81       	ldd	r24, Z+2	; 0x02
     fda:	93 81       	ldd	r25, Z+3	; 0x03
     fdc:	0c 5f       	subi	r16, 0xFC	; 252
     fde:	1f 4f       	sbci	r17, 0xFF	; 255
     fe0:	06 c0       	rjmp	.+12     	; 0xfee <vfprintf+0x272>
     fe2:	60 81       	ld	r22, Z
     fe4:	71 81       	ldd	r23, Z+1	; 0x01
     fe6:	80 e0       	ldi	r24, 0x00	; 0
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 5f       	subi	r16, 0xFE	; 254
     fec:	1f 4f       	sbci	r17, 0xFF	; 255
     fee:	a4 01       	movw	r20, r8
     ff0:	18 d2       	rcall	.+1072   	; 0x1422 <__ultoa_invert>
     ff2:	a8 2e       	mov	r10, r24
     ff4:	a8 18       	sub	r10, r8
     ff6:	fb 2d       	mov	r31, r11
     ff8:	ff 77       	andi	r31, 0x7F	; 127
     ffa:	bf 2e       	mov	r11, r31
     ffc:	b6 fe       	sbrs	r11, 6
     ffe:	0b c0       	rjmp	.+22     	; 0x1016 <vfprintf+0x29a>
    1000:	2b 2d       	mov	r18, r11
    1002:	2e 7f       	andi	r18, 0xFE	; 254
    1004:	a5 14       	cp	r10, r5
    1006:	50 f4       	brcc	.+20     	; 0x101c <vfprintf+0x2a0>
    1008:	b4 fe       	sbrs	r11, 4
    100a:	0a c0       	rjmp	.+20     	; 0x1020 <vfprintf+0x2a4>
    100c:	b2 fc       	sbrc	r11, 2
    100e:	08 c0       	rjmp	.+16     	; 0x1020 <vfprintf+0x2a4>
    1010:	2b 2d       	mov	r18, r11
    1012:	2e 7e       	andi	r18, 0xEE	; 238
    1014:	05 c0       	rjmp	.+10     	; 0x1020 <vfprintf+0x2a4>
    1016:	7a 2c       	mov	r7, r10
    1018:	2b 2d       	mov	r18, r11
    101a:	03 c0       	rjmp	.+6      	; 0x1022 <vfprintf+0x2a6>
    101c:	7a 2c       	mov	r7, r10
    101e:	01 c0       	rjmp	.+2      	; 0x1022 <vfprintf+0x2a6>
    1020:	75 2c       	mov	r7, r5
    1022:	24 ff       	sbrs	r18, 4
    1024:	0d c0       	rjmp	.+26     	; 0x1040 <vfprintf+0x2c4>
    1026:	fe 01       	movw	r30, r28
    1028:	ea 0d       	add	r30, r10
    102a:	f1 1d       	adc	r31, r1
    102c:	80 81       	ld	r24, Z
    102e:	80 33       	cpi	r24, 0x30	; 48
    1030:	11 f4       	brne	.+4      	; 0x1036 <vfprintf+0x2ba>
    1032:	29 7e       	andi	r18, 0xE9	; 233
    1034:	09 c0       	rjmp	.+18     	; 0x1048 <vfprintf+0x2cc>
    1036:	22 ff       	sbrs	r18, 2
    1038:	06 c0       	rjmp	.+12     	; 0x1046 <vfprintf+0x2ca>
    103a:	73 94       	inc	r7
    103c:	73 94       	inc	r7
    103e:	04 c0       	rjmp	.+8      	; 0x1048 <vfprintf+0x2cc>
    1040:	82 2f       	mov	r24, r18
    1042:	86 78       	andi	r24, 0x86	; 134
    1044:	09 f0       	breq	.+2      	; 0x1048 <vfprintf+0x2cc>
    1046:	73 94       	inc	r7
    1048:	23 fd       	sbrc	r18, 3
    104a:	12 c0       	rjmp	.+36     	; 0x1070 <vfprintf+0x2f4>
    104c:	20 ff       	sbrs	r18, 0
    104e:	06 c0       	rjmp	.+12     	; 0x105c <vfprintf+0x2e0>
    1050:	5a 2c       	mov	r5, r10
    1052:	73 14       	cp	r7, r3
    1054:	18 f4       	brcc	.+6      	; 0x105c <vfprintf+0x2e0>
    1056:	53 0c       	add	r5, r3
    1058:	57 18       	sub	r5, r7
    105a:	73 2c       	mov	r7, r3
    105c:	73 14       	cp	r7, r3
    105e:	60 f4       	brcc	.+24     	; 0x1078 <vfprintf+0x2fc>
    1060:	b7 01       	movw	r22, r14
    1062:	80 e2       	ldi	r24, 0x20	; 32
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	2c 87       	std	Y+12, r18	; 0x0c
    1068:	aa d1       	rcall	.+852    	; 0x13be <fputc>
    106a:	73 94       	inc	r7
    106c:	2c 85       	ldd	r18, Y+12	; 0x0c
    106e:	f6 cf       	rjmp	.-20     	; 0x105c <vfprintf+0x2e0>
    1070:	73 14       	cp	r7, r3
    1072:	10 f4       	brcc	.+4      	; 0x1078 <vfprintf+0x2fc>
    1074:	37 18       	sub	r3, r7
    1076:	01 c0       	rjmp	.+2      	; 0x107a <vfprintf+0x2fe>
    1078:	31 2c       	mov	r3, r1
    107a:	24 ff       	sbrs	r18, 4
    107c:	11 c0       	rjmp	.+34     	; 0x10a0 <vfprintf+0x324>
    107e:	b7 01       	movw	r22, r14
    1080:	80 e3       	ldi	r24, 0x30	; 48
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	2c 87       	std	Y+12, r18	; 0x0c
    1086:	9b d1       	rcall	.+822    	; 0x13be <fputc>
    1088:	2c 85       	ldd	r18, Y+12	; 0x0c
    108a:	22 ff       	sbrs	r18, 2
    108c:	16 c0       	rjmp	.+44     	; 0x10ba <vfprintf+0x33e>
    108e:	21 ff       	sbrs	r18, 1
    1090:	03 c0       	rjmp	.+6      	; 0x1098 <vfprintf+0x31c>
    1092:	88 e5       	ldi	r24, 0x58	; 88
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 c0       	rjmp	.+4      	; 0x109c <vfprintf+0x320>
    1098:	88 e7       	ldi	r24, 0x78	; 120
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	b7 01       	movw	r22, r14
    109e:	0c c0       	rjmp	.+24     	; 0x10b8 <vfprintf+0x33c>
    10a0:	82 2f       	mov	r24, r18
    10a2:	86 78       	andi	r24, 0x86	; 134
    10a4:	51 f0       	breq	.+20     	; 0x10ba <vfprintf+0x33e>
    10a6:	21 fd       	sbrc	r18, 1
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <vfprintf+0x332>
    10aa:	80 e2       	ldi	r24, 0x20	; 32
    10ac:	01 c0       	rjmp	.+2      	; 0x10b0 <vfprintf+0x334>
    10ae:	8b e2       	ldi	r24, 0x2B	; 43
    10b0:	27 fd       	sbrc	r18, 7
    10b2:	8d e2       	ldi	r24, 0x2D	; 45
    10b4:	b7 01       	movw	r22, r14
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	82 d1       	rcall	.+772    	; 0x13be <fputc>
    10ba:	a5 14       	cp	r10, r5
    10bc:	30 f4       	brcc	.+12     	; 0x10ca <vfprintf+0x34e>
    10be:	b7 01       	movw	r22, r14
    10c0:	80 e3       	ldi	r24, 0x30	; 48
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	7c d1       	rcall	.+760    	; 0x13be <fputc>
    10c6:	5a 94       	dec	r5
    10c8:	f8 cf       	rjmp	.-16     	; 0x10ba <vfprintf+0x33e>
    10ca:	aa 94       	dec	r10
    10cc:	f4 01       	movw	r30, r8
    10ce:	ea 0d       	add	r30, r10
    10d0:	f1 1d       	adc	r31, r1
    10d2:	80 81       	ld	r24, Z
    10d4:	b7 01       	movw	r22, r14
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	72 d1       	rcall	.+740    	; 0x13be <fputc>
    10da:	a1 10       	cpse	r10, r1
    10dc:	f6 cf       	rjmp	.-20     	; 0x10ca <vfprintf+0x34e>
    10de:	33 20       	and	r3, r3
    10e0:	09 f4       	brne	.+2      	; 0x10e4 <vfprintf+0x368>
    10e2:	5d ce       	rjmp	.-838    	; 0xd9e <vfprintf+0x22>
    10e4:	b7 01       	movw	r22, r14
    10e6:	80 e2       	ldi	r24, 0x20	; 32
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	69 d1       	rcall	.+722    	; 0x13be <fputc>
    10ec:	3a 94       	dec	r3
    10ee:	f7 cf       	rjmp	.-18     	; 0x10de <vfprintf+0x362>
    10f0:	f7 01       	movw	r30, r14
    10f2:	86 81       	ldd	r24, Z+6	; 0x06
    10f4:	97 81       	ldd	r25, Z+7	; 0x07
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <vfprintf+0x380>
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	9f ef       	ldi	r25, 0xFF	; 255
    10fc:	2c 96       	adiw	r28, 0x0c	; 12
    10fe:	e2 e1       	ldi	r30, 0x12	; 18
    1100:	0a c2       	rjmp	.+1044   	; 0x1516 <__epilogue_restores__>

00001102 <calloc>:
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	86 9f       	mul	r24, r22
    110c:	80 01       	movw	r16, r0
    110e:	87 9f       	mul	r24, r23
    1110:	10 0d       	add	r17, r0
    1112:	96 9f       	mul	r25, r22
    1114:	10 0d       	add	r17, r0
    1116:	11 24       	eor	r1, r1
    1118:	c8 01       	movw	r24, r16
    111a:	0d d0       	rcall	.+26     	; 0x1136 <malloc>
    111c:	ec 01       	movw	r28, r24
    111e:	00 97       	sbiw	r24, 0x00	; 0
    1120:	21 f0       	breq	.+8      	; 0x112a <calloc+0x28>
    1122:	a8 01       	movw	r20, r16
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	38 d1       	rcall	.+624    	; 0x139a <memset>
    112a:	ce 01       	movw	r24, r28
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	08 95       	ret

00001136 <malloc>:
    1136:	cf 93       	push	r28
    1138:	df 93       	push	r29
    113a:	82 30       	cpi	r24, 0x02	; 2
    113c:	91 05       	cpc	r25, r1
    113e:	10 f4       	brcc	.+4      	; 0x1144 <malloc+0xe>
    1140:	82 e0       	ldi	r24, 0x02	; 2
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	e0 91 81 02 	lds	r30, 0x0281
    1148:	f0 91 82 02 	lds	r31, 0x0282
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	a0 e0       	ldi	r26, 0x00	; 0
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	30 97       	sbiw	r30, 0x00	; 0
    1156:	39 f1       	breq	.+78     	; 0x11a6 <malloc+0x70>
    1158:	40 81       	ld	r20, Z
    115a:	51 81       	ldd	r21, Z+1	; 0x01
    115c:	48 17       	cp	r20, r24
    115e:	59 07       	cpc	r21, r25
    1160:	b8 f0       	brcs	.+46     	; 0x1190 <malloc+0x5a>
    1162:	48 17       	cp	r20, r24
    1164:	59 07       	cpc	r21, r25
    1166:	71 f4       	brne	.+28     	; 0x1184 <malloc+0x4e>
    1168:	82 81       	ldd	r24, Z+2	; 0x02
    116a:	93 81       	ldd	r25, Z+3	; 0x03
    116c:	10 97       	sbiw	r26, 0x00	; 0
    116e:	29 f0       	breq	.+10     	; 0x117a <malloc+0x44>
    1170:	13 96       	adiw	r26, 0x03	; 3
    1172:	9c 93       	st	X, r25
    1174:	8e 93       	st	-X, r24
    1176:	12 97       	sbiw	r26, 0x02	; 2
    1178:	2c c0       	rjmp	.+88     	; 0x11d2 <malloc+0x9c>
    117a:	90 93 82 02 	sts	0x0282, r25
    117e:	80 93 81 02 	sts	0x0281, r24
    1182:	27 c0       	rjmp	.+78     	; 0x11d2 <malloc+0x9c>
    1184:	21 15       	cp	r18, r1
    1186:	31 05       	cpc	r19, r1
    1188:	31 f0       	breq	.+12     	; 0x1196 <malloc+0x60>
    118a:	42 17       	cp	r20, r18
    118c:	53 07       	cpc	r21, r19
    118e:	18 f0       	brcs	.+6      	; 0x1196 <malloc+0x60>
    1190:	a9 01       	movw	r20, r18
    1192:	db 01       	movw	r26, r22
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <malloc+0x62>
    1196:	ef 01       	movw	r28, r30
    1198:	9a 01       	movw	r18, r20
    119a:	bd 01       	movw	r22, r26
    119c:	df 01       	movw	r26, r30
    119e:	02 80       	ldd	r0, Z+2	; 0x02
    11a0:	f3 81       	ldd	r31, Z+3	; 0x03
    11a2:	e0 2d       	mov	r30, r0
    11a4:	d7 cf       	rjmp	.-82     	; 0x1154 <malloc+0x1e>
    11a6:	21 15       	cp	r18, r1
    11a8:	31 05       	cpc	r19, r1
    11aa:	f9 f0       	breq	.+62     	; 0x11ea <malloc+0xb4>
    11ac:	28 1b       	sub	r18, r24
    11ae:	39 0b       	sbc	r19, r25
    11b0:	24 30       	cpi	r18, 0x04	; 4
    11b2:	31 05       	cpc	r19, r1
    11b4:	80 f4       	brcc	.+32     	; 0x11d6 <malloc+0xa0>
    11b6:	8a 81       	ldd	r24, Y+2	; 0x02
    11b8:	9b 81       	ldd	r25, Y+3	; 0x03
    11ba:	61 15       	cp	r22, r1
    11bc:	71 05       	cpc	r23, r1
    11be:	21 f0       	breq	.+8      	; 0x11c8 <malloc+0x92>
    11c0:	fb 01       	movw	r30, r22
    11c2:	93 83       	std	Z+3, r25	; 0x03
    11c4:	82 83       	std	Z+2, r24	; 0x02
    11c6:	04 c0       	rjmp	.+8      	; 0x11d0 <malloc+0x9a>
    11c8:	90 93 82 02 	sts	0x0282, r25
    11cc:	80 93 81 02 	sts	0x0281, r24
    11d0:	fe 01       	movw	r30, r28
    11d2:	32 96       	adiw	r30, 0x02	; 2
    11d4:	44 c0       	rjmp	.+136    	; 0x125e <malloc+0x128>
    11d6:	fe 01       	movw	r30, r28
    11d8:	e2 0f       	add	r30, r18
    11da:	f3 1f       	adc	r31, r19
    11dc:	81 93       	st	Z+, r24
    11de:	91 93       	st	Z+, r25
    11e0:	22 50       	subi	r18, 0x02	; 2
    11e2:	31 09       	sbc	r19, r1
    11e4:	39 83       	std	Y+1, r19	; 0x01
    11e6:	28 83       	st	Y, r18
    11e8:	3a c0       	rjmp	.+116    	; 0x125e <malloc+0x128>
    11ea:	20 91 7f 02 	lds	r18, 0x027F
    11ee:	30 91 80 02 	lds	r19, 0x0280
    11f2:	23 2b       	or	r18, r19
    11f4:	41 f4       	brne	.+16     	; 0x1206 <malloc+0xd0>
    11f6:	20 91 02 01 	lds	r18, 0x0102
    11fa:	30 91 03 01 	lds	r19, 0x0103
    11fe:	30 93 80 02 	sts	0x0280, r19
    1202:	20 93 7f 02 	sts	0x027F, r18
    1206:	20 91 00 01 	lds	r18, 0x0100
    120a:	30 91 01 01 	lds	r19, 0x0101
    120e:	21 15       	cp	r18, r1
    1210:	31 05       	cpc	r19, r1
    1212:	41 f4       	brne	.+16     	; 0x1224 <malloc+0xee>
    1214:	2d b7       	in	r18, 0x3d	; 61
    1216:	3e b7       	in	r19, 0x3e	; 62
    1218:	40 91 04 01 	lds	r20, 0x0104
    121c:	50 91 05 01 	lds	r21, 0x0105
    1220:	24 1b       	sub	r18, r20
    1222:	35 0b       	sbc	r19, r21
    1224:	e0 91 7f 02 	lds	r30, 0x027F
    1228:	f0 91 80 02 	lds	r31, 0x0280
    122c:	e2 17       	cp	r30, r18
    122e:	f3 07       	cpc	r31, r19
    1230:	a0 f4       	brcc	.+40     	; 0x125a <malloc+0x124>
    1232:	2e 1b       	sub	r18, r30
    1234:	3f 0b       	sbc	r19, r31
    1236:	28 17       	cp	r18, r24
    1238:	39 07       	cpc	r19, r25
    123a:	78 f0       	brcs	.+30     	; 0x125a <malloc+0x124>
    123c:	ac 01       	movw	r20, r24
    123e:	4e 5f       	subi	r20, 0xFE	; 254
    1240:	5f 4f       	sbci	r21, 0xFF	; 255
    1242:	24 17       	cp	r18, r20
    1244:	35 07       	cpc	r19, r21
    1246:	48 f0       	brcs	.+18     	; 0x125a <malloc+0x124>
    1248:	4e 0f       	add	r20, r30
    124a:	5f 1f       	adc	r21, r31
    124c:	50 93 80 02 	sts	0x0280, r21
    1250:	40 93 7f 02 	sts	0x027F, r20
    1254:	81 93       	st	Z+, r24
    1256:	91 93       	st	Z+, r25
    1258:	02 c0       	rjmp	.+4      	; 0x125e <malloc+0x128>
    125a:	e0 e0       	ldi	r30, 0x00	; 0
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	cf 01       	movw	r24, r30
    1260:	df 91       	pop	r29
    1262:	cf 91       	pop	r28
    1264:	08 95       	ret

00001266 <free>:
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	09 f4       	brne	.+2      	; 0x1270 <free+0xa>
    126e:	87 c0       	rjmp	.+270    	; 0x137e <free+0x118>
    1270:	fc 01       	movw	r30, r24
    1272:	32 97       	sbiw	r30, 0x02	; 2
    1274:	13 82       	std	Z+3, r1	; 0x03
    1276:	12 82       	std	Z+2, r1	; 0x02
    1278:	c0 91 81 02 	lds	r28, 0x0281
    127c:	d0 91 82 02 	lds	r29, 0x0282
    1280:	20 97       	sbiw	r28, 0x00	; 0
    1282:	81 f4       	brne	.+32     	; 0x12a4 <free+0x3e>
    1284:	20 81       	ld	r18, Z
    1286:	31 81       	ldd	r19, Z+1	; 0x01
    1288:	28 0f       	add	r18, r24
    128a:	39 1f       	adc	r19, r25
    128c:	80 91 7f 02 	lds	r24, 0x027F
    1290:	90 91 80 02 	lds	r25, 0x0280
    1294:	82 17       	cp	r24, r18
    1296:	93 07       	cpc	r25, r19
    1298:	79 f5       	brne	.+94     	; 0x12f8 <free+0x92>
    129a:	f0 93 80 02 	sts	0x0280, r31
    129e:	e0 93 7f 02 	sts	0x027F, r30
    12a2:	6d c0       	rjmp	.+218    	; 0x137e <free+0x118>
    12a4:	de 01       	movw	r26, r28
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	ae 17       	cp	r26, r30
    12ac:	bf 07       	cpc	r27, r31
    12ae:	50 f4       	brcc	.+20     	; 0x12c4 <free+0x5e>
    12b0:	12 96       	adiw	r26, 0x02	; 2
    12b2:	4d 91       	ld	r20, X+
    12b4:	5c 91       	ld	r21, X
    12b6:	13 97       	sbiw	r26, 0x03	; 3
    12b8:	9d 01       	movw	r18, r26
    12ba:	41 15       	cp	r20, r1
    12bc:	51 05       	cpc	r21, r1
    12be:	09 f1       	breq	.+66     	; 0x1302 <free+0x9c>
    12c0:	da 01       	movw	r26, r20
    12c2:	f3 cf       	rjmp	.-26     	; 0x12aa <free+0x44>
    12c4:	b3 83       	std	Z+3, r27	; 0x03
    12c6:	a2 83       	std	Z+2, r26	; 0x02
    12c8:	40 81       	ld	r20, Z
    12ca:	51 81       	ldd	r21, Z+1	; 0x01
    12cc:	84 0f       	add	r24, r20
    12ce:	95 1f       	adc	r25, r21
    12d0:	8a 17       	cp	r24, r26
    12d2:	9b 07       	cpc	r25, r27
    12d4:	71 f4       	brne	.+28     	; 0x12f2 <free+0x8c>
    12d6:	8d 91       	ld	r24, X+
    12d8:	9c 91       	ld	r25, X
    12da:	11 97       	sbiw	r26, 0x01	; 1
    12dc:	84 0f       	add	r24, r20
    12de:	95 1f       	adc	r25, r21
    12e0:	02 96       	adiw	r24, 0x02	; 2
    12e2:	91 83       	std	Z+1, r25	; 0x01
    12e4:	80 83       	st	Z, r24
    12e6:	12 96       	adiw	r26, 0x02	; 2
    12e8:	8d 91       	ld	r24, X+
    12ea:	9c 91       	ld	r25, X
    12ec:	13 97       	sbiw	r26, 0x03	; 3
    12ee:	93 83       	std	Z+3, r25	; 0x03
    12f0:	82 83       	std	Z+2, r24	; 0x02
    12f2:	21 15       	cp	r18, r1
    12f4:	31 05       	cpc	r19, r1
    12f6:	29 f4       	brne	.+10     	; 0x1302 <free+0x9c>
    12f8:	f0 93 82 02 	sts	0x0282, r31
    12fc:	e0 93 81 02 	sts	0x0281, r30
    1300:	3e c0       	rjmp	.+124    	; 0x137e <free+0x118>
    1302:	d9 01       	movw	r26, r18
    1304:	13 96       	adiw	r26, 0x03	; 3
    1306:	fc 93       	st	X, r31
    1308:	ee 93       	st	-X, r30
    130a:	12 97       	sbiw	r26, 0x02	; 2
    130c:	4d 91       	ld	r20, X+
    130e:	5d 91       	ld	r21, X+
    1310:	a4 0f       	add	r26, r20
    1312:	b5 1f       	adc	r27, r21
    1314:	ea 17       	cp	r30, r26
    1316:	fb 07       	cpc	r31, r27
    1318:	79 f4       	brne	.+30     	; 0x1338 <free+0xd2>
    131a:	80 81       	ld	r24, Z
    131c:	91 81       	ldd	r25, Z+1	; 0x01
    131e:	84 0f       	add	r24, r20
    1320:	95 1f       	adc	r25, r21
    1322:	02 96       	adiw	r24, 0x02	; 2
    1324:	d9 01       	movw	r26, r18
    1326:	11 96       	adiw	r26, 0x01	; 1
    1328:	9c 93       	st	X, r25
    132a:	8e 93       	st	-X, r24
    132c:	82 81       	ldd	r24, Z+2	; 0x02
    132e:	93 81       	ldd	r25, Z+3	; 0x03
    1330:	13 96       	adiw	r26, 0x03	; 3
    1332:	9c 93       	st	X, r25
    1334:	8e 93       	st	-X, r24
    1336:	12 97       	sbiw	r26, 0x02	; 2
    1338:	e0 e0       	ldi	r30, 0x00	; 0
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	9b 81       	ldd	r25, Y+3	; 0x03
    1340:	00 97       	sbiw	r24, 0x00	; 0
    1342:	19 f0       	breq	.+6      	; 0x134a <free+0xe4>
    1344:	fe 01       	movw	r30, r28
    1346:	ec 01       	movw	r28, r24
    1348:	f9 cf       	rjmp	.-14     	; 0x133c <free+0xd6>
    134a:	ce 01       	movw	r24, r28
    134c:	02 96       	adiw	r24, 0x02	; 2
    134e:	28 81       	ld	r18, Y
    1350:	39 81       	ldd	r19, Y+1	; 0x01
    1352:	82 0f       	add	r24, r18
    1354:	93 1f       	adc	r25, r19
    1356:	20 91 7f 02 	lds	r18, 0x027F
    135a:	30 91 80 02 	lds	r19, 0x0280
    135e:	28 17       	cp	r18, r24
    1360:	39 07       	cpc	r19, r25
    1362:	69 f4       	brne	.+26     	; 0x137e <free+0x118>
    1364:	30 97       	sbiw	r30, 0x00	; 0
    1366:	29 f4       	brne	.+10     	; 0x1372 <free+0x10c>
    1368:	10 92 82 02 	sts	0x0282, r1
    136c:	10 92 81 02 	sts	0x0281, r1
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <free+0x110>
    1372:	13 82       	std	Z+3, r1	; 0x03
    1374:	12 82       	std	Z+2, r1	; 0x02
    1376:	d0 93 80 02 	sts	0x0280, r29
    137a:	c0 93 7f 02 	sts	0x027F, r28
    137e:	df 91       	pop	r29
    1380:	cf 91       	pop	r28
    1382:	08 95       	ret

00001384 <strnlen_P>:
    1384:	fc 01       	movw	r30, r24
    1386:	05 90       	lpm	r0, Z+
    1388:	61 50       	subi	r22, 0x01	; 1
    138a:	70 40       	sbci	r23, 0x00	; 0
    138c:	01 10       	cpse	r0, r1
    138e:	d8 f7       	brcc	.-10     	; 0x1386 <strnlen_P+0x2>
    1390:	80 95       	com	r24
    1392:	90 95       	com	r25
    1394:	8e 0f       	add	r24, r30
    1396:	9f 1f       	adc	r25, r31
    1398:	08 95       	ret

0000139a <memset>:
    139a:	dc 01       	movw	r26, r24
    139c:	01 c0       	rjmp	.+2      	; 0x13a0 <memset+0x6>
    139e:	6d 93       	st	X+, r22
    13a0:	41 50       	subi	r20, 0x01	; 1
    13a2:	50 40       	sbci	r21, 0x00	; 0
    13a4:	e0 f7       	brcc	.-8      	; 0x139e <memset+0x4>
    13a6:	08 95       	ret

000013a8 <strnlen>:
    13a8:	fc 01       	movw	r30, r24
    13aa:	61 50       	subi	r22, 0x01	; 1
    13ac:	70 40       	sbci	r23, 0x00	; 0
    13ae:	01 90       	ld	r0, Z+
    13b0:	01 10       	cpse	r0, r1
    13b2:	d8 f7       	brcc	.-10     	; 0x13aa <strnlen+0x2>
    13b4:	80 95       	com	r24
    13b6:	90 95       	com	r25
    13b8:	8e 0f       	add	r24, r30
    13ba:	9f 1f       	adc	r25, r31
    13bc:	08 95       	ret

000013be <fputc>:
    13be:	0f 93       	push	r16
    13c0:	1f 93       	push	r17
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	18 2f       	mov	r17, r24
    13c8:	09 2f       	mov	r16, r25
    13ca:	eb 01       	movw	r28, r22
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	81 fd       	sbrc	r24, 1
    13d0:	03 c0       	rjmp	.+6      	; 0x13d8 <fputc+0x1a>
    13d2:	8f ef       	ldi	r24, 0xFF	; 255
    13d4:	9f ef       	ldi	r25, 0xFF	; 255
    13d6:	20 c0       	rjmp	.+64     	; 0x1418 <fputc+0x5a>
    13d8:	82 ff       	sbrs	r24, 2
    13da:	10 c0       	rjmp	.+32     	; 0x13fc <fputc+0x3e>
    13dc:	4e 81       	ldd	r20, Y+6	; 0x06
    13de:	5f 81       	ldd	r21, Y+7	; 0x07
    13e0:	2c 81       	ldd	r18, Y+4	; 0x04
    13e2:	3d 81       	ldd	r19, Y+5	; 0x05
    13e4:	42 17       	cp	r20, r18
    13e6:	53 07       	cpc	r21, r19
    13e8:	7c f4       	brge	.+30     	; 0x1408 <fputc+0x4a>
    13ea:	e8 81       	ld	r30, Y
    13ec:	f9 81       	ldd	r31, Y+1	; 0x01
    13ee:	9f 01       	movw	r18, r30
    13f0:	2f 5f       	subi	r18, 0xFF	; 255
    13f2:	3f 4f       	sbci	r19, 0xFF	; 255
    13f4:	39 83       	std	Y+1, r19	; 0x01
    13f6:	28 83       	st	Y, r18
    13f8:	10 83       	st	Z, r17
    13fa:	06 c0       	rjmp	.+12     	; 0x1408 <fputc+0x4a>
    13fc:	e8 85       	ldd	r30, Y+8	; 0x08
    13fe:	f9 85       	ldd	r31, Y+9	; 0x09
    1400:	81 2f       	mov	r24, r17
    1402:	09 95       	icall
    1404:	89 2b       	or	r24, r25
    1406:	29 f7       	brne	.-54     	; 0x13d2 <fputc+0x14>
    1408:	2e 81       	ldd	r18, Y+6	; 0x06
    140a:	3f 81       	ldd	r19, Y+7	; 0x07
    140c:	2f 5f       	subi	r18, 0xFF	; 255
    140e:	3f 4f       	sbci	r19, 0xFF	; 255
    1410:	3f 83       	std	Y+7, r19	; 0x07
    1412:	2e 83       	std	Y+6, r18	; 0x06
    1414:	81 2f       	mov	r24, r17
    1416:	90 2f       	mov	r25, r16
    1418:	df 91       	pop	r29
    141a:	cf 91       	pop	r28
    141c:	1f 91       	pop	r17
    141e:	0f 91       	pop	r16
    1420:	08 95       	ret

00001422 <__ultoa_invert>:
    1422:	fa 01       	movw	r30, r20
    1424:	aa 27       	eor	r26, r26
    1426:	28 30       	cpi	r18, 0x08	; 8
    1428:	51 f1       	breq	.+84     	; 0x147e <__ultoa_invert+0x5c>
    142a:	20 31       	cpi	r18, 0x10	; 16
    142c:	81 f1       	breq	.+96     	; 0x148e <__ultoa_invert+0x6c>
    142e:	e8 94       	clt
    1430:	6f 93       	push	r22
    1432:	6e 7f       	andi	r22, 0xFE	; 254
    1434:	6e 5f       	subi	r22, 0xFE	; 254
    1436:	7f 4f       	sbci	r23, 0xFF	; 255
    1438:	8f 4f       	sbci	r24, 0xFF	; 255
    143a:	9f 4f       	sbci	r25, 0xFF	; 255
    143c:	af 4f       	sbci	r26, 0xFF	; 255
    143e:	b1 e0       	ldi	r27, 0x01	; 1
    1440:	3e d0       	rcall	.+124    	; 0x14be <__ultoa_invert+0x9c>
    1442:	b4 e0       	ldi	r27, 0x04	; 4
    1444:	3c d0       	rcall	.+120    	; 0x14be <__ultoa_invert+0x9c>
    1446:	67 0f       	add	r22, r23
    1448:	78 1f       	adc	r23, r24
    144a:	89 1f       	adc	r24, r25
    144c:	9a 1f       	adc	r25, r26
    144e:	a1 1d       	adc	r26, r1
    1450:	68 0f       	add	r22, r24
    1452:	79 1f       	adc	r23, r25
    1454:	8a 1f       	adc	r24, r26
    1456:	91 1d       	adc	r25, r1
    1458:	a1 1d       	adc	r26, r1
    145a:	6a 0f       	add	r22, r26
    145c:	71 1d       	adc	r23, r1
    145e:	81 1d       	adc	r24, r1
    1460:	91 1d       	adc	r25, r1
    1462:	a1 1d       	adc	r26, r1
    1464:	20 d0       	rcall	.+64     	; 0x14a6 <__ultoa_invert+0x84>
    1466:	09 f4       	brne	.+2      	; 0x146a <__ultoa_invert+0x48>
    1468:	68 94       	set
    146a:	3f 91       	pop	r19
    146c:	2a e0       	ldi	r18, 0x0A	; 10
    146e:	26 9f       	mul	r18, r22
    1470:	11 24       	eor	r1, r1
    1472:	30 19       	sub	r19, r0
    1474:	30 5d       	subi	r19, 0xD0	; 208
    1476:	31 93       	st	Z+, r19
    1478:	de f6       	brtc	.-74     	; 0x1430 <__ultoa_invert+0xe>
    147a:	cf 01       	movw	r24, r30
    147c:	08 95       	ret
    147e:	46 2f       	mov	r20, r22
    1480:	47 70       	andi	r20, 0x07	; 7
    1482:	40 5d       	subi	r20, 0xD0	; 208
    1484:	41 93       	st	Z+, r20
    1486:	b3 e0       	ldi	r27, 0x03	; 3
    1488:	0f d0       	rcall	.+30     	; 0x14a8 <__ultoa_invert+0x86>
    148a:	c9 f7       	brne	.-14     	; 0x147e <__ultoa_invert+0x5c>
    148c:	f6 cf       	rjmp	.-20     	; 0x147a <__ultoa_invert+0x58>
    148e:	46 2f       	mov	r20, r22
    1490:	4f 70       	andi	r20, 0x0F	; 15
    1492:	40 5d       	subi	r20, 0xD0	; 208
    1494:	4a 33       	cpi	r20, 0x3A	; 58
    1496:	18 f0       	brcs	.+6      	; 0x149e <__ultoa_invert+0x7c>
    1498:	49 5d       	subi	r20, 0xD9	; 217
    149a:	31 fd       	sbrc	r19, 1
    149c:	40 52       	subi	r20, 0x20	; 32
    149e:	41 93       	st	Z+, r20
    14a0:	02 d0       	rcall	.+4      	; 0x14a6 <__ultoa_invert+0x84>
    14a2:	a9 f7       	brne	.-22     	; 0x148e <__ultoa_invert+0x6c>
    14a4:	ea cf       	rjmp	.-44     	; 0x147a <__ultoa_invert+0x58>
    14a6:	b4 e0       	ldi	r27, 0x04	; 4
    14a8:	a6 95       	lsr	r26
    14aa:	97 95       	ror	r25
    14ac:	87 95       	ror	r24
    14ae:	77 95       	ror	r23
    14b0:	67 95       	ror	r22
    14b2:	ba 95       	dec	r27
    14b4:	c9 f7       	brne	.-14     	; 0x14a8 <__ultoa_invert+0x86>
    14b6:	00 97       	sbiw	r24, 0x00	; 0
    14b8:	61 05       	cpc	r22, r1
    14ba:	71 05       	cpc	r23, r1
    14bc:	08 95       	ret
    14be:	9b 01       	movw	r18, r22
    14c0:	ac 01       	movw	r20, r24
    14c2:	0a 2e       	mov	r0, r26
    14c4:	06 94       	lsr	r0
    14c6:	57 95       	ror	r21
    14c8:	47 95       	ror	r20
    14ca:	37 95       	ror	r19
    14cc:	27 95       	ror	r18
    14ce:	ba 95       	dec	r27
    14d0:	c9 f7       	brne	.-14     	; 0x14c4 <__ultoa_invert+0xa2>
    14d2:	62 0f       	add	r22, r18
    14d4:	73 1f       	adc	r23, r19
    14d6:	84 1f       	adc	r24, r20
    14d8:	95 1f       	adc	r25, r21
    14da:	a0 1d       	adc	r26, r0
    14dc:	08 95       	ret

000014de <__prologue_saves__>:
    14de:	2f 92       	push	r2
    14e0:	3f 92       	push	r3
    14e2:	4f 92       	push	r4
    14e4:	5f 92       	push	r5
    14e6:	6f 92       	push	r6
    14e8:	7f 92       	push	r7
    14ea:	8f 92       	push	r8
    14ec:	9f 92       	push	r9
    14ee:	af 92       	push	r10
    14f0:	bf 92       	push	r11
    14f2:	cf 92       	push	r12
    14f4:	df 92       	push	r13
    14f6:	ef 92       	push	r14
    14f8:	ff 92       	push	r15
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	ca 1b       	sub	r28, r26
    1508:	db 0b       	sbc	r29, r27
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	09 94       	ijmp

00001516 <__epilogue_restores__>:
    1516:	2a 88       	ldd	r2, Y+18	; 0x12
    1518:	39 88       	ldd	r3, Y+17	; 0x11
    151a:	48 88       	ldd	r4, Y+16	; 0x10
    151c:	5f 84       	ldd	r5, Y+15	; 0x0f
    151e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1520:	7d 84       	ldd	r7, Y+13	; 0x0d
    1522:	8c 84       	ldd	r8, Y+12	; 0x0c
    1524:	9b 84       	ldd	r9, Y+11	; 0x0b
    1526:	aa 84       	ldd	r10, Y+10	; 0x0a
    1528:	b9 84       	ldd	r11, Y+9	; 0x09
    152a:	c8 84       	ldd	r12, Y+8	; 0x08
    152c:	df 80       	ldd	r13, Y+7	; 0x07
    152e:	ee 80       	ldd	r14, Y+6	; 0x06
    1530:	fd 80       	ldd	r15, Y+5	; 0x05
    1532:	0c 81       	ldd	r16, Y+4	; 0x04
    1534:	1b 81       	ldd	r17, Y+3	; 0x03
    1536:	aa 81       	ldd	r26, Y+2	; 0x02
    1538:	b9 81       	ldd	r27, Y+1	; 0x01
    153a:	ce 0f       	add	r28, r30
    153c:	d1 1d       	adc	r29, r1
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
    1548:	ed 01       	movw	r28, r26
    154a:	08 95       	ret

0000154c <_exit>:
    154c:	f8 94       	cli

0000154e <__stop_program>:
    154e:	ff cf       	rjmp	.-2      	; 0x154e <__stop_program>
