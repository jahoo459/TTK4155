
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d2  00800100  00001f36  00001fca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  008002d2  008002d2  0000219c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000219c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000310  00000000  00000000  000021f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003e94  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011fa  00000000  00000000  0000639c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000017ae  00000000  00000000  00007596  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000744  00000000  00000000  00008d44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e77  00000000  00000000  00009488  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001f6c  00000000  00000000  0000a2ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000410  00000000  00000000  0000c26b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	fa c1       	rjmp	.+1012   	; 0x402 <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <JOY_updatePosition+0x5a>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e6 e3       	ldi	r30, 0x36	; 54
     37c:	ff e1       	ldi	r31, 0x1F	; 31
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a2 3d       	cpi	r26, 0xD2	; 210
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a2 ed       	ldi	r26, 0xD2	; 210
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a2 30       	cpi	r26, 0x02	; 2
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	81 d0       	rcall	.+258    	; 0x49e <main>
     39c:	0c 94 99 0f 	jmp	0x1f32	; 0x1f32 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	//printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 f2 02 	sts	0x02F2, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 dd 02 	sts	0x02DD, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 dc 02 	sts	0x02DC, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 db 02 	sts	0x02DB, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_3>:
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	8f 93       	push	r24
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 da 02 	sts	0x02DA, r24
     414:	8f 91       	pop	r24
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <init>:
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	1f e1       	ldi	r17, 0x1F	; 31
     42a:	e1 2e       	mov	r14, r17
     42c:	f1 2c       	mov	r15, r1
     42e:	00 e0       	ldi	r16, 0x00	; 0
     430:	10 e0       	ldi	r17, 0x00	; 0
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	4b e4       	ldi	r20, 0x4B	; 75
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e8       	ldi	r22, 0x80	; 128
     43c:	75 e2       	ldi	r23, 0x25	; 37
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 be 0a 	call	0x157c	; 0x157c <uartInit>
     446:	82 e4       	ldi	r24, 0x42	; 66
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <puts>
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	1f d2       	rcall	.+1086   	; 0x890 <enableXMEM>
     452:	0e 94 8c 0a 	call	0x1518	; 0x1518 <SLI_init>
     456:	2e d2       	rcall	.+1116   	; 0x8b4 <JOY_init>
     458:	d9 d7       	rcall	.+4018   	; 0x140c <OLED_init>
     45a:	0e 94 95 0a 	call	0x152a	; 0x152a <SPI_init>
     45e:	21 d4       	rcall	.+2114   	; 0xca2 <MCP2515_init>
     460:	74 d0       	rcall	.+232    	; 0x54a <CAN_init>
     462:	8b b7       	in	r24, 0x3b	; 59
     464:	80 64       	ori	r24, 0x40	; 64
     466:	8b bf       	out	0x3b, r24	; 59
     468:	85 b7       	in	r24, 0x35	; 53
     46a:	82 60       	ori	r24, 0x02	; 2
     46c:	85 bf       	out	0x35, r24	; 53
     46e:	85 b7       	in	r24, 0x35	; 53
     470:	8e 7f       	andi	r24, 0xFE	; 254
     472:	85 bf       	out	0x35, r24	; 53
     474:	8b 98       	cbi	0x11, 3	; 17
     476:	93 9a       	sbi	0x12, 3	; 18
     478:	8b b7       	in	r24, 0x3b	; 59
     47a:	80 68       	ori	r24, 0x80	; 128
     47c:	8b bf       	out	0x3b, r24	; 59
     47e:	85 b7       	in	r24, 0x35	; 53
     480:	88 60       	ori	r24, 0x08	; 8
     482:	85 bf       	out	0x35, r24	; 53
     484:	85 b7       	in	r24, 0x35	; 53
     486:	8b 7f       	andi	r24, 0xFB	; 251
     488:	85 bf       	out	0x35, r24	; 53
     48a:	32 98       	cbi	0x06, 2	; 6
     48c:	3a 98       	cbi	0x07, 2	; 7
     48e:	b8 98       	cbi	0x17, 0	; 23
     490:	c0 98       	cbi	0x18, 0	; 24
     492:	78 94       	sei
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	ff 90       	pop	r15
     49a:	ef 90       	pop	r14
     49c:	08 95       	ret

0000049e <main>:
/*
=======================MAIN FUNCTION=========================
*/

int main(void)
{
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	a1 97       	sbiw	r28, 0x21	; 33
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
	
	init();
     4b2:	b6 df       	rcall	.-148    	; 0x420 <init>

	OLED_goto(0,0);
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	6a d6       	rcall	.+3284   	; 0x1192 <OLED_goto>
	OLED_printString("I'm alive");
     4be:	8b e7       	ldi	r24, 0x7B	; 123
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	bd d6       	rcall	.+3450   	; 0x123e <OLED_printString>
	
	
	
    while(1)
    {
		currPos = JOY_getPosition();
     4c4:	02 ed       	ldi	r16, 0xD2	; 210
     4c6:	12 e0       	ldi	r17, 0x02	; 2
		
		message2send.id = 23;
     4c8:	0f 2e       	mov	r0, r31
     4ca:	f7 e1       	ldi	r31, 0x17	; 23
     4cc:	ef 2e       	mov	r14, r31
     4ce:	f1 2c       	mov	r15, r1
     4d0:	f0 2d       	mov	r31, r0
		message2send.length = 1;
     4d2:	dd 24       	eor	r13, r13
     4d4:	d3 94       	inc	r13
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     4d6:	0f 2e       	mov	r0, r31
     4d8:	fb e0       	ldi	r31, 0x0B	; 11
     4da:	cf 2e       	mov	r12, r31
     4dc:	f0 2d       	mov	r31, r0
	
	
	
    while(1)
    {
		currPos = JOY_getPosition();
     4de:	6d d3       	rcall	.+1754   	; 0xbba <JOY_getPosition>
     4e0:	f8 01       	movw	r30, r16
     4e2:	20 83       	st	Z, r18
     4e4:	31 83       	std	Z+1, r19	; 0x01
     4e6:	42 83       	std	Z+2, r20	; 0x02
     4e8:	53 83       	std	Z+3, r21	; 0x03
     4ea:	64 83       	std	Z+4, r22	; 0x04
     4ec:	75 83       	std	Z+5, r23	; 0x05
     4ee:	86 83       	std	Z+6, r24	; 0x06
     4f0:	97 83       	std	Z+7, r25	; 0x07
		
		message2send.id = 23;
     4f2:	fa 82       	std	Y+2, r15	; 0x02
     4f4:	e9 82       	std	Y+1, r14	; 0x01
		message2send.length = 1;
     4f6:	db 82       	std	Y+3, r13	; 0x03
		message2send.data[0] = currPos.X_abs;
     4f8:	2c 83       	std	Y+4, r18	; 0x04
		
		CAN_sendMessage(&message2send, 0);
     4fa:	60 e0       	ldi	r22, 0x00	; 0
     4fc:	ce 01       	movw	r24, r28
     4fe:	01 96       	adiw	r24, 0x01	; 1
     500:	3b d0       	rcall	.+118    	; 0x578 <CAN_sendMessage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	90 ef       	ldi	r25, 0xF0	; 240
     506:	01 97       	sbiw	r24, 0x01	; 1
     508:	f1 f7       	brne	.-4      	; 0x506 <__stack+0x7>
		_delay_ms(50);

		if(activateMenuFlag)
     50a:	80 91 db 02 	lds	r24, 0x02DB
     50e:	81 11       	cpse	r24, r1
		{
			MENU_activate();
     510:	32 d6       	rcall	.+3172   	; 0x1176 <MENU_activate>
		}

		if(SPIreceivedFlag)
     512:	80 91 da 02 	lds	r24, 0x02DA
     516:	88 23       	and	r24, r24
     518:	11 f3       	breq	.-60     	; 0x4de <main+0x40>
		{
			
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
     51a:	6c e2       	ldi	r22, 0x2C	; 44
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	aa d3       	rcall	.+1876   	; 0xc74 <MCP2515_read>
     520:	83 70       	andi	r24, 0x03	; 3
     522:	e9 f2       	breq	.-70     	; 0x4de <main+0x40>
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     524:	68 2f       	mov	r22, r24
     526:	ce 01       	movw	r24, r28
     528:	47 96       	adiw	r24, 0x17	; 23
     52a:	8f d0       	rcall	.+286    	; 0x64a <CAN_receiveMessage>
     52c:	fe 01       	movw	r30, r28
     52e:	77 96       	adiw	r30, 0x17	; 23
     530:	de 01       	movw	r26, r28
     532:	1c 96       	adiw	r26, 0x0c	; 12
     534:	8c 2d       	mov	r24, r12
     536:	01 90       	ld	r0, Z+
     538:	0d 92       	st	X+, r0
     53a:	8a 95       	dec	r24
     53c:	e1 f7       	brne	.-8      	; 0x536 <__stack+0x37>

				CAN_printMessage(&receivedMessage);
     53e:	ce 01       	movw	r24, r28
     540:	0c 96       	adiw	r24, 0x0c	; 12
     542:	4c d1       	rcall	.+664    	; 0x7dc <CAN_printMessage>
			
				SPIreceivedFlag = 0;
     544:	10 92 da 02 	sts	0x02DA, r1
     548:	ca cf       	rjmp	.-108    	; 0x4de <main+0x40>

0000054a <CAN_init>:
     54a:	cf 93       	push	r28
     54c:	df 93       	push	r29
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
     552:	43 e0       	ldi	r20, 0x03	; 3
     554:	6b e2       	ldi	r22, 0x2B	; 43
     556:	80 e0       	ldi	r24, 0x00	; 0
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	af d3       	rcall	.+1886   	; 0xcba <MCP2515_write>
     55c:	40 e6       	ldi	r20, 0x60	; 96
     55e:	60 e6       	ldi	r22, 0x60	; 96
     560:	80 e0       	ldi	r24, 0x00	; 0
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	aa d3       	rcall	.+1876   	; 0xcba <MCP2515_write>
     566:	20 e0       	ldi	r18, 0x00	; 0
     568:	40 e8       	ldi	r20, 0x80	; 128
     56a:	6f e0       	ldi	r22, 0x0F	; 15
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	b7 d3       	rcall	.+1902   	; 0xce0 <MCP2515_bitModify>
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	08 95       	ret

00000578 <CAN_sendMessage>:
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	cd b7       	in	r28, 0x3d	; 61
     57e:	de b7       	in	r29, 0x3e	; 62
     580:	27 97       	sbiw	r28, 0x07	; 7
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	f8 94       	cli
     586:	de bf       	out	0x3e, r29	; 62
     588:	0f be       	out	0x3f, r0	; 63
     58a:	cd bf       	out	0x3d, r28	; 61
     58c:	9e 83       	std	Y+6, r25	; 0x06
     58e:	8d 83       	std	Y+5, r24	; 0x05
     590:	6f 83       	std	Y+7, r22	; 0x07
     592:	8f 81       	ldd	r24, Y+7	; 0x07
     594:	88 2f       	mov	r24, r24
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	00 97       	sbiw	r24, 0x00	; 0
     59a:	09 f0       	breq	.+2      	; 0x59e <CAN_sendMessage+0x26>
     59c:	4d c0       	rjmp	.+154    	; 0x638 <CAN_sendMessage+0xc0>
     59e:	8d 81       	ldd	r24, Y+5	; 0x05
     5a0:	9e 81       	ldd	r25, Y+6	; 0x06
     5a2:	fc 01       	movw	r30, r24
     5a4:	80 81       	ld	r24, Z
     5a6:	91 81       	ldd	r25, Z+1	; 0x01
     5a8:	9c 83       	std	Y+4, r25	; 0x04
     5aa:	8b 83       	std	Y+3, r24	; 0x03
     5ac:	8b 81       	ldd	r24, Y+3	; 0x03
     5ae:	82 95       	swap	r24
     5b0:	88 0f       	add	r24, r24
     5b2:	80 7e       	andi	r24, 0xE0	; 224
     5b4:	48 2f       	mov	r20, r24
     5b6:	62 e3       	ldi	r22, 0x32	; 50
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	7e d3       	rcall	.+1788   	; 0xcba <MCP2515_write>
     5be:	8b 81       	ldd	r24, Y+3	; 0x03
     5c0:	9c 81       	ldd	r25, Y+4	; 0x04
     5c2:	96 95       	lsr	r25
     5c4:	87 95       	ror	r24
     5c6:	96 95       	lsr	r25
     5c8:	87 95       	ror	r24
     5ca:	96 95       	lsr	r25
     5cc:	87 95       	ror	r24
     5ce:	48 2f       	mov	r20, r24
     5d0:	61 e3       	ldi	r22, 0x31	; 49
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	71 d3       	rcall	.+1762   	; 0xcba <MCP2515_write>
     5d8:	8d 81       	ldd	r24, Y+5	; 0x05
     5da:	9e 81       	ldd	r25, Y+6	; 0x06
     5dc:	fc 01       	movw	r30, r24
     5de:	82 81       	ldd	r24, Z+2	; 0x02
     5e0:	48 2f       	mov	r20, r24
     5e2:	65 e3       	ldi	r22, 0x35	; 53
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	68 d3       	rcall	.+1744   	; 0xcba <MCP2515_write>
     5ea:	86 e3       	ldi	r24, 0x36	; 54
     5ec:	89 83       	std	Y+1, r24	; 0x01
     5ee:	1a 82       	std	Y+2, r1	; 0x02
     5f0:	15 c0       	rjmp	.+42     	; 0x61c <CAN_sendMessage+0xa4>
     5f2:	8a 81       	ldd	r24, Y+2	; 0x02
     5f4:	88 2f       	mov	r24, r24
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	2d 81       	ldd	r18, Y+5	; 0x05
     5fa:	3e 81       	ldd	r19, Y+6	; 0x06
     5fc:	82 0f       	add	r24, r18
     5fe:	93 1f       	adc	r25, r19
     600:	03 96       	adiw	r24, 0x03	; 3
     602:	fc 01       	movw	r30, r24
     604:	80 81       	ld	r24, Z
     606:	48 2f       	mov	r20, r24
     608:	69 81       	ldd	r22, Y+1	; 0x01
     60a:	80 e0       	ldi	r24, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	55 d3       	rcall	.+1706   	; 0xcba <MCP2515_write>
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	8f 5f       	subi	r24, 0xFF	; 255
     614:	89 83       	std	Y+1, r24	; 0x01
     616:	8a 81       	ldd	r24, Y+2	; 0x02
     618:	8f 5f       	subi	r24, 0xFF	; 255
     61a:	8a 83       	std	Y+2, r24	; 0x02
     61c:	8d 81       	ldd	r24, Y+5	; 0x05
     61e:	9e 81       	ldd	r25, Y+6	; 0x06
     620:	fc 01       	movw	r30, r24
     622:	92 81       	ldd	r25, Z+2	; 0x02
     624:	8a 81       	ldd	r24, Y+2	; 0x02
     626:	89 17       	cp	r24, r25
     628:	20 f3       	brcs	.-56     	; 0x5f2 <CAN_sendMessage+0x7a>
     62a:	2f ef       	ldi	r18, 0xFF	; 255
     62c:	48 e0       	ldi	r20, 0x08	; 8
     62e:	60 e3       	ldi	r22, 0x30	; 48
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	55 d3       	rcall	.+1706   	; 0xce0 <MCP2515_bitModify>
     636:	00 00       	nop
     638:	27 96       	adiw	r28, 0x07	; 7
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	f8 94       	cli
     63e:	de bf       	out	0x3e, r29	; 62
     640:	0f be       	out	0x3f, r0	; 63
     642:	cd bf       	out	0x3d, r28	; 61
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <CAN_receiveMessage>:
     64a:	0f 93       	push	r16
     64c:	1f 93       	push	r17
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	cd b7       	in	r28, 0x3d	; 61
     654:	de b7       	in	r29, 0x3e	; 62
     656:	61 97       	sbiw	r28, 0x11	; 17
     658:	0f b6       	in	r0, 0x3f	; 63
     65a:	f8 94       	cli
     65c:	de bf       	out	0x3e, r29	; 62
     65e:	0f be       	out	0x3f, r0	; 63
     660:	cd bf       	out	0x3d, r28	; 61
     662:	98 8b       	std	Y+16, r25	; 0x10
     664:	8f 87       	std	Y+15, r24	; 0x0f
     666:	69 8b       	std	Y+17, r22	; 0x11
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	88 2f       	mov	r24, r24
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	82 30       	cpi	r24, 0x02	; 2
     670:	91 05       	cpc	r25, r1
     672:	09 f4       	brne	.+2      	; 0x676 <CAN_receiveMessage+0x2c>
     674:	57 c0       	rjmp	.+174    	; 0x724 <CAN_receiveMessage+0xda>
     676:	83 30       	cpi	r24, 0x03	; 3
     678:	91 05       	cpc	r25, r1
     67a:	21 f0       	breq	.+8      	; 0x684 <CAN_receiveMessage+0x3a>
     67c:	81 30       	cpi	r24, 0x01	; 1
     67e:	91 05       	cpc	r25, r1
     680:	09 f0       	breq	.+2      	; 0x684 <CAN_receiveMessage+0x3a>
     682:	9f c0       	rjmp	.+318    	; 0x7c2 <CAN_receiveMessage+0x178>
     684:	61 e6       	ldi	r22, 0x61	; 97
     686:	80 e0       	ldi	r24, 0x00	; 0
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	f4 d2       	rcall	.+1512   	; 0xc74 <MCP2515_read>
     68c:	88 2f       	mov	r24, r24
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	9d 83       	std	Y+5, r25	; 0x05
     692:	8c 83       	std	Y+4, r24	; 0x04
     694:	8c 81       	ldd	r24, Y+4	; 0x04
     696:	9d 81       	ldd	r25, Y+5	; 0x05
     698:	8c 01       	movw	r16, r24
     69a:	00 0f       	add	r16, r16
     69c:	11 1f       	adc	r17, r17
     69e:	00 0f       	add	r16, r16
     6a0:	11 1f       	adc	r17, r17
     6a2:	00 0f       	add	r16, r16
     6a4:	11 1f       	adc	r17, r17
     6a6:	62 e6       	ldi	r22, 0x62	; 98
     6a8:	80 e0       	ldi	r24, 0x00	; 0
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	e3 d2       	rcall	.+1478   	; 0xc74 <MCP2515_read>
     6ae:	82 95       	swap	r24
     6b0:	86 95       	lsr	r24
     6b2:	87 70       	andi	r24, 0x07	; 7
     6b4:	88 2f       	mov	r24, r24
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	80 2b       	or	r24, r16
     6ba:	91 2b       	or	r25, r17
     6bc:	9d 83       	std	Y+5, r25	; 0x05
     6be:	8c 83       	std	Y+4, r24	; 0x04
     6c0:	65 e6       	ldi	r22, 0x65	; 101
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	d6 d2       	rcall	.+1452   	; 0xc74 <MCP2515_read>
     6c8:	8e 83       	std	Y+6, r24	; 0x06
     6ca:	86 e6       	ldi	r24, 0x66	; 102
     6cc:	89 83       	std	Y+1, r24	; 0x01
     6ce:	1a 82       	std	Y+2, r1	; 0x02
     6d0:	14 c0       	rjmp	.+40     	; 0x6fa <CAN_receiveMessage+0xb0>
     6d2:	8a 81       	ldd	r24, Y+2	; 0x02
     6d4:	08 2f       	mov	r16, r24
     6d6:	10 e0       	ldi	r17, 0x00	; 0
     6d8:	69 81       	ldd	r22, Y+1	; 0x01
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	ca d2       	rcall	.+1428   	; 0xc74 <MCP2515_read>
     6e0:	28 2f       	mov	r18, r24
     6e2:	ce 01       	movw	r24, r28
     6e4:	07 96       	adiw	r24, 0x07	; 7
     6e6:	80 0f       	add	r24, r16
     6e8:	91 1f       	adc	r25, r17
     6ea:	fc 01       	movw	r30, r24
     6ec:	20 83       	st	Z, r18
     6ee:	89 81       	ldd	r24, Y+1	; 0x01
     6f0:	8f 5f       	subi	r24, 0xFF	; 255
     6f2:	89 83       	std	Y+1, r24	; 0x01
     6f4:	8a 81       	ldd	r24, Y+2	; 0x02
     6f6:	8f 5f       	subi	r24, 0xFF	; 255
     6f8:	8a 83       	std	Y+2, r24	; 0x02
     6fa:	9e 81       	ldd	r25, Y+6	; 0x06
     6fc:	8a 81       	ldd	r24, Y+2	; 0x02
     6fe:	89 17       	cp	r24, r25
     700:	40 f3       	brcs	.-48     	; 0x6d2 <CAN_receiveMessage+0x88>
     702:	20 e0       	ldi	r18, 0x00	; 0
     704:	41 e0       	ldi	r20, 0x01	; 1
     706:	6c e2       	ldi	r22, 0x2C	; 44
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	e9 d2       	rcall	.+1490   	; 0xce0 <MCP2515_bitModify>
     70e:	8f 85       	ldd	r24, Y+15	; 0x0f
     710:	98 89       	ldd	r25, Y+16	; 0x10
     712:	2b e0       	ldi	r18, 0x0B	; 11
     714:	fe 01       	movw	r30, r28
     716:	34 96       	adiw	r30, 0x04	; 4
     718:	dc 01       	movw	r26, r24
     71a:	01 90       	ld	r0, Z+
     71c:	0d 92       	st	X+, r0
     71e:	2a 95       	dec	r18
     720:	e1 f7       	brne	.-8      	; 0x71a <CAN_receiveMessage+0xd0>
     722:	4f c0       	rjmp	.+158    	; 0x7c2 <CAN_receiveMessage+0x178>
     724:	61 e7       	ldi	r22, 0x71	; 113
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	a4 d2       	rcall	.+1352   	; 0xc74 <MCP2515_read>
     72c:	88 2f       	mov	r24, r24
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	9d 83       	std	Y+5, r25	; 0x05
     732:	8c 83       	std	Y+4, r24	; 0x04
     734:	8c 81       	ldd	r24, Y+4	; 0x04
     736:	9d 81       	ldd	r25, Y+5	; 0x05
     738:	8c 01       	movw	r16, r24
     73a:	00 0f       	add	r16, r16
     73c:	11 1f       	adc	r17, r17
     73e:	00 0f       	add	r16, r16
     740:	11 1f       	adc	r17, r17
     742:	00 0f       	add	r16, r16
     744:	11 1f       	adc	r17, r17
     746:	62 e7       	ldi	r22, 0x72	; 114
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	93 d2       	rcall	.+1318   	; 0xc74 <MCP2515_read>
     74e:	82 95       	swap	r24
     750:	86 95       	lsr	r24
     752:	87 70       	andi	r24, 0x07	; 7
     754:	88 2f       	mov	r24, r24
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	80 2b       	or	r24, r16
     75a:	91 2b       	or	r25, r17
     75c:	9d 83       	std	Y+5, r25	; 0x05
     75e:	8c 83       	std	Y+4, r24	; 0x04
     760:	65 e7       	ldi	r22, 0x75	; 117
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	86 d2       	rcall	.+1292   	; 0xc74 <MCP2515_read>
     768:	8e 83       	std	Y+6, r24	; 0x06
     76a:	86 e7       	ldi	r24, 0x76	; 118
     76c:	89 83       	std	Y+1, r24	; 0x01
     76e:	1b 82       	std	Y+3, r1	; 0x03
     770:	14 c0       	rjmp	.+40     	; 0x79a <CAN_receiveMessage+0x150>
     772:	8b 81       	ldd	r24, Y+3	; 0x03
     774:	08 2f       	mov	r16, r24
     776:	10 e0       	ldi	r17, 0x00	; 0
     778:	69 81       	ldd	r22, Y+1	; 0x01
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	7a d2       	rcall	.+1268   	; 0xc74 <MCP2515_read>
     780:	28 2f       	mov	r18, r24
     782:	ce 01       	movw	r24, r28
     784:	07 96       	adiw	r24, 0x07	; 7
     786:	80 0f       	add	r24, r16
     788:	91 1f       	adc	r25, r17
     78a:	fc 01       	movw	r30, r24
     78c:	20 83       	st	Z, r18
     78e:	89 81       	ldd	r24, Y+1	; 0x01
     790:	8f 5f       	subi	r24, 0xFF	; 255
     792:	89 83       	std	Y+1, r24	; 0x01
     794:	8b 81       	ldd	r24, Y+3	; 0x03
     796:	8f 5f       	subi	r24, 0xFF	; 255
     798:	8b 83       	std	Y+3, r24	; 0x03
     79a:	9e 81       	ldd	r25, Y+6	; 0x06
     79c:	8b 81       	ldd	r24, Y+3	; 0x03
     79e:	89 17       	cp	r24, r25
     7a0:	40 f3       	brcs	.-48     	; 0x772 <CAN_receiveMessage+0x128>
     7a2:	20 e0       	ldi	r18, 0x00	; 0
     7a4:	42 e0       	ldi	r20, 0x02	; 2
     7a6:	6c e2       	ldi	r22, 0x2C	; 44
     7a8:	80 e0       	ldi	r24, 0x00	; 0
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	99 d2       	rcall	.+1330   	; 0xce0 <MCP2515_bitModify>
     7ae:	8f 85       	ldd	r24, Y+15	; 0x0f
     7b0:	98 89       	ldd	r25, Y+16	; 0x10
     7b2:	2b e0       	ldi	r18, 0x0B	; 11
     7b4:	fe 01       	movw	r30, r28
     7b6:	34 96       	adiw	r30, 0x04	; 4
     7b8:	dc 01       	movw	r26, r24
     7ba:	01 90       	ld	r0, Z+
     7bc:	0d 92       	st	X+, r0
     7be:	2a 95       	dec	r18
     7c0:	e1 f7       	brne	.-8      	; 0x7ba <CAN_receiveMessage+0x170>
     7c2:	8f 85       	ldd	r24, Y+15	; 0x0f
     7c4:	98 89       	ldd	r25, Y+16	; 0x10
     7c6:	61 96       	adiw	r28, 0x11	; 17
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	cd bf       	out	0x3d, r28	; 61
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	08 95       	ret

000007dc <CAN_printMessage>:
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	00 d0       	rcall	.+0      	; 0x7e2 <CAN_printMessage+0x6>
     7e2:	1f 92       	push	r1
     7e4:	cd b7       	in	r28, 0x3d	; 61
     7e6:	de b7       	in	r29, 0x3e	; 62
     7e8:	9b 83       	std	Y+3, r25	; 0x03
     7ea:	8a 83       	std	Y+2, r24	; 0x02
     7ec:	8a 81       	ldd	r24, Y+2	; 0x02
     7ee:	9b 81       	ldd	r25, Y+3	; 0x03
     7f0:	fc 01       	movw	r30, r24
     7f2:	82 81       	ldd	r24, Z+2	; 0x02
     7f4:	28 2f       	mov	r18, r24
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	8a 81       	ldd	r24, Y+2	; 0x02
     7fa:	9b 81       	ldd	r25, Y+3	; 0x03
     7fc:	fc 01       	movw	r30, r24
     7fe:	80 81       	ld	r24, Z
     800:	91 81       	ldd	r25, Z+1	; 0x01
     802:	43 2f       	mov	r20, r19
     804:	4f 93       	push	r20
     806:	2f 93       	push	r18
     808:	29 2f       	mov	r18, r25
     80a:	2f 93       	push	r18
     80c:	8f 93       	push	r24
     80e:	82 e1       	ldi	r24, 0x12	; 18
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	89 2f       	mov	r24, r25
     814:	8f 93       	push	r24
     816:	82 e1       	ldi	r24, 0x12	; 18
     818:	91 e0       	ldi	r25, 0x01	; 1
     81a:	8f 93       	push	r24
     81c:	0e 94 95 0c 	call	0x192a	; 0x192a <printf>
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	0f 90       	pop	r0
     828:	0f 90       	pop	r0
     82a:	0f 90       	pop	r0
     82c:	19 82       	std	Y+1, r1	; 0x01
     82e:	1f c0       	rjmp	.+62     	; 0x86e <CAN_printMessage+0x92>
     830:	89 81       	ldd	r24, Y+1	; 0x01
     832:	88 2f       	mov	r24, r24
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	2a 81       	ldd	r18, Y+2	; 0x02
     838:	3b 81       	ldd	r19, Y+3	; 0x03
     83a:	82 0f       	add	r24, r18
     83c:	93 1f       	adc	r25, r19
     83e:	03 96       	adiw	r24, 0x03	; 3
     840:	fc 01       	movw	r30, r24
     842:	80 81       	ld	r24, Z
     844:	88 2f       	mov	r24, r24
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	29 2f       	mov	r18, r25
     84a:	2f 93       	push	r18
     84c:	8f 93       	push	r24
     84e:	8e e3       	ldi	r24, 0x3E	; 62
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	89 2f       	mov	r24, r25
     854:	8f 93       	push	r24
     856:	8e e3       	ldi	r24, 0x3E	; 62
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	8f 93       	push	r24
     85c:	0e 94 95 0c 	call	0x192a	; 0x192a <printf>
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	89 81       	ldd	r24, Y+1	; 0x01
     86a:	8f 5f       	subi	r24, 0xFF	; 255
     86c:	89 83       	std	Y+1, r24	; 0x01
     86e:	8a 81       	ldd	r24, Y+2	; 0x02
     870:	9b 81       	ldd	r25, Y+3	; 0x03
     872:	fc 01       	movw	r30, r24
     874:	92 81       	ldd	r25, Z+2	; 0x02
     876:	89 81       	ldd	r24, Y+1	; 0x01
     878:	89 17       	cp	r24, r25
     87a:	d0 f2       	brcs	.-76     	; 0x830 <CAN_printMessage+0x54>
     87c:	8a e0       	ldi	r24, 0x0A	; 10
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 a6 0c 	call	0x194c	; 0x194c <putchar>
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	08 95       	ret

00000890 <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     890:	95 b7       	in	r25, 0x35	; 53
     892:	90 68       	ori	r25, 0x80	; 128
     894:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     896:	96 b7       	in	r25, 0x36	; 54
     898:	98 60       	ori	r25, 0x08	; 8
     89a:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     89c:	88 23       	and	r24, r24
     89e:	19 f0       	breq	.+6      	; 0x8a6 <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     8a0:	80 b7       	in	r24, 0x30	; 48
     8a2:	80 62       	ori	r24, 0x20	; 32
     8a4:	80 bf       	out	0x30, r24	; 48
     8a6:	08 95       	ret

000008a8 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     8a8:	fc 01       	movw	r30, r24
     8aa:	80 81       	ld	r24, Z
	return val;
}
     8ac:	08 95       	ret

000008ae <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     8ae:	fc 01       	movw	r30, r24
     8b0:	60 83       	st	Z, r22
     8b2:	08 95       	ret

000008b4 <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     8b4:	10 92 e0 02 	sts	0x02E0, r1
     8b8:	10 92 df 02 	sts	0x02DF, r1
	currentPosition.Y_abs = 0;
     8bc:	10 92 e2 02 	sts	0x02E2, r1
     8c0:	10 92 e1 02 	sts	0x02E1, r1
	currentPosition.X_per = 0;
     8c4:	10 92 e4 02 	sts	0x02E4, r1
     8c8:	10 92 e3 02 	sts	0x02E3, r1
	currentPosition.Y_per = 0;
     8cc:	10 92 e6 02 	sts	0x02E6, r1
     8d0:	10 92 e5 02 	sts	0x02E5, r1
	currentDirection = CENTRE;
     8d4:	10 92 de 02 	sts	0x02DE, r1
     8d8:	08 95       	ret

000008da <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     8de:	76 d4       	rcall	.+2284   	; 0x11cc <OLED_clear>
     8e0:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	80 e0       	ldi	r24, 0x00	; 0
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	54 d4       	rcall	.+2216   	; 0x1192 <OLED_goto>
     8ea:	85 e8       	ldi	r24, 0x85	; 133
     8ec:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     8ee:	a7 d4       	rcall	.+2382   	; 0x123e <OLED_printString>
     8f0:	2f ef       	ldi	r18, 0xFF	; 255
     8f2:	8f ef       	ldi	r24, 0xFF	; 255
     8f4:	92 e0       	ldi	r25, 0x02	; 2
     8f6:	21 50       	subi	r18, 0x01	; 1
     8f8:	80 40       	sbci	r24, 0x00	; 0
     8fa:	90 40       	sbci	r25, 0x00	; 0
     8fc:	e1 f7       	brne	.-8      	; 0x8f6 <JOY_calibrate+0x1c>
     8fe:	00 c0       	rjmp	.+0      	; 0x900 <JOY_calibrate+0x26>
     900:	00 c0       	rjmp	.+0      	; 0x902 <JOY_calibrate+0x28>
     902:	c4 e1       	ldi	r28, 0x14	; 20
     904:	d0 e0       	ldi	r29, 0x00	; 0
     906:	60 91 06 01 	lds	r22, 0x0106
     90a:	70 91 07 01 	lds	r23, 0x0107
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     90e:	82 e0       	ldi	r24, 0x02	; 2
     910:	4e d6       	rcall	.+3228   	; 0x15ae <ADC_request>
     912:	2f ef       	ldi	r18, 0xFF	; 255
     914:	8f e1       	ldi	r24, 0x1F	; 31
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	21 50       	subi	r18, 0x01	; 1
     91a:	80 40       	sbci	r24, 0x00	; 0
     91c:	90 40       	sbci	r25, 0x00	; 0
     91e:	e1 f7       	brne	.-8      	; 0x918 <JOY_calibrate+0x3e>
     920:	00 c0       	rjmp	.+0      	; 0x922 <JOY_calibrate+0x48>
     922:	00 00       	nop
     924:	80 91 06 01 	lds	r24, 0x0106
     928:	90 91 07 01 	lds	r25, 0x0107
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     92c:	64 d6       	rcall	.+3272   	; 0x15f6 <ADC_read>
     92e:	90 91 0d 01 	lds	r25, 0x010D
     932:	98 17       	cp	r25, r24
     934:	10 f4       	brcc	.+4      	; 0x93a <JOY_calibrate+0x60>
     936:	80 93 0d 01 	sts	0x010D, r24
		
		if(temp > calR) {calR = temp;}
     93a:	21 97       	sbiw	r28, 0x01	; 1
     93c:	20 97       	sbiw	r28, 0x00	; 0
     93e:	19 f7       	brne	.-58     	; 0x906 <JOY_calibrate+0x2c>
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	81 e0       	ldi	r24, 0x01	; 1
	OLED_goto(0,0);
	OLED_printString("JOY RIGHT");
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	24 d4       	rcall	.+2120   	; 0x1192 <OLED_goto>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_goto(1,0);
     94a:	8f e8       	ldi	r24, 0x8F	; 143
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	77 d4       	rcall	.+2286   	; 0x123e <OLED_printString>
     950:	2f ef       	ldi	r18, 0xFF	; 255
     952:	8f ef       	ldi	r24, 0xFF	; 255
     954:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("JOY LEFT");
     956:	21 50       	subi	r18, 0x01	; 1
     958:	80 40       	sbci	r24, 0x00	; 0
     95a:	90 40       	sbci	r25, 0x00	; 0
     95c:	e1 f7       	brne	.-8      	; 0x956 <JOY_calibrate+0x7c>
     95e:	00 c0       	rjmp	.+0      	; 0x960 <JOY_calibrate+0x86>
     960:	00 c0       	rjmp	.+0      	; 0x962 <JOY_calibrate+0x88>
     962:	c4 e1       	ldi	r28, 0x14	; 20
     964:	d0 e0       	ldi	r29, 0x00	; 0
     966:	60 91 06 01 	lds	r22, 0x0106
     96a:	70 91 07 01 	lds	r23, 0x0107
     96e:	82 e0       	ldi	r24, 0x02	; 2
     970:	1e d6       	rcall	.+3132   	; 0x15ae <ADC_request>
     972:	2f ef       	ldi	r18, 0xFF	; 255
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     974:	8f e1       	ldi	r24, 0x1F	; 31
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	21 50       	subi	r18, 0x01	; 1
     97a:	80 40       	sbci	r24, 0x00	; 0
     97c:	90 40       	sbci	r25, 0x00	; 0
     97e:	e1 f7       	brne	.-8      	; 0x978 <JOY_calibrate+0x9e>
     980:	00 c0       	rjmp	.+0      	; 0x982 <JOY_calibrate+0xa8>
     982:	00 00       	nop
     984:	80 91 06 01 	lds	r24, 0x0106
     988:	90 91 07 01 	lds	r25, 0x0107
     98c:	34 d6       	rcall	.+3176   	; 0x15f6 <ADC_read>
     98e:	90 91 0c 01 	lds	r25, 0x010C
     992:	89 17       	cp	r24, r25
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     994:	10 f4       	brcc	.+4      	; 0x99a <JOY_calibrate+0xc0>
     996:	80 93 0c 01 	sts	0x010C, r24
     99a:	21 97       	sbiw	r28, 0x01	; 1
     99c:	20 97       	sbiw	r28, 0x00	; 0
     99e:	19 f7       	brne	.-58     	; 0x966 <JOY_calibrate+0x8c>
		
		if(temp < calL) {calL = temp;}
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	82 e0       	ldi	r24, 0x02	; 2
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	f4 d3       	rcall	.+2024   	; 0x1192 <OLED_goto>
     9aa:	88 e9       	ldi	r24, 0x98	; 152
     9ac:	91 e0       	ldi	r25, 0x01	; 1
	OLED_goto(1,0);
	OLED_printString("JOY LEFT");
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     9ae:	47 d4       	rcall	.+2190   	; 0x123e <OLED_printString>
     9b0:	2f ef       	ldi	r18, 0xFF	; 255
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_goto(2,0);
     9b2:	8f ef       	ldi	r24, 0xFF	; 255
     9b4:	92 e0       	ldi	r25, 0x02	; 2
     9b6:	21 50       	subi	r18, 0x01	; 1
     9b8:	80 40       	sbci	r24, 0x00	; 0
     9ba:	90 40       	sbci	r25, 0x00	; 0
     9bc:	e1 f7       	brne	.-8      	; 0x9b6 <JOY_calibrate+0xdc>
	OLED_printString("JOY UP");
     9be:	00 c0       	rjmp	.+0      	; 0x9c0 <JOY_calibrate+0xe6>
     9c0:	00 c0       	rjmp	.+0      	; 0x9c2 <JOY_calibrate+0xe8>
     9c2:	c4 e1       	ldi	r28, 0x14	; 20
     9c4:	d0 e0       	ldi	r29, 0x00	; 0
     9c6:	60 91 06 01 	lds	r22, 0x0106
     9ca:	70 91 07 01 	lds	r23, 0x0107
     9ce:	81 e0       	ldi	r24, 0x01	; 1
     9d0:	ee d5       	rcall	.+3036   	; 0x15ae <ADC_request>
     9d2:	2f ef       	ldi	r18, 0xFF	; 255
     9d4:	8f e1       	ldi	r24, 0x1F	; 31
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	21 50       	subi	r18, 0x01	; 1
     9da:	80 40       	sbci	r24, 0x00	; 0
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     9dc:	90 40       	sbci	r25, 0x00	; 0
     9de:	e1 f7       	brne	.-8      	; 0x9d8 <JOY_calibrate+0xfe>
     9e0:	00 c0       	rjmp	.+0      	; 0x9e2 <JOY_calibrate+0x108>
     9e2:	00 00       	nop
     9e4:	80 91 06 01 	lds	r24, 0x0106
     9e8:	90 91 07 01 	lds	r25, 0x0107
     9ec:	04 d6       	rcall	.+3080   	; 0x15f6 <ADC_read>
     9ee:	90 91 0b 01 	lds	r25, 0x010B
     9f2:	98 17       	cp	r25, r24
     9f4:	10 f4       	brcc	.+4      	; 0x9fa <JOY_calibrate+0x120>
     9f6:	80 93 0b 01 	sts	0x010B, r24
     9fa:	21 97       	sbiw	r28, 0x01	; 1
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     9fc:	20 97       	sbiw	r28, 0x00	; 0
     9fe:	19 f7       	brne	.-58     	; 0x9c6 <JOY_calibrate+0xec>
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	90 e0       	ldi	r25, 0x00	; 0
		
		if(temp > calUp) {calUp = temp;}
     a08:	c4 d3       	rcall	.+1928   	; 0x1192 <OLED_goto>
     a0a:	8f e9       	ldi	r24, 0x9F	; 159
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	17 d4       	rcall	.+2094   	; 0x123e <OLED_printString>
     a10:	2f ef       	ldi	r18, 0xFF	; 255
     a12:	8f ef       	ldi	r24, 0xFF	; 255
     a14:	92 e0       	ldi	r25, 0x02	; 2
	OLED_goto(2,0);
	OLED_printString("JOY UP");
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     a16:	21 50       	subi	r18, 0x01	; 1
     a18:	80 40       	sbci	r24, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_goto(3,0);
     a1a:	90 40       	sbci	r25, 0x00	; 0
     a1c:	e1 f7       	brne	.-8      	; 0xa16 <JOY_calibrate+0x13c>
     a1e:	00 c0       	rjmp	.+0      	; 0xa20 <JOY_calibrate+0x146>
     a20:	00 c0       	rjmp	.+0      	; 0xa22 <JOY_calibrate+0x148>
     a22:	c4 e1       	ldi	r28, 0x14	; 20
     a24:	d0 e0       	ldi	r29, 0x00	; 0
	OLED_printString("JOY DOWN");
     a26:	60 91 06 01 	lds	r22, 0x0106
     a2a:	70 91 07 01 	lds	r23, 0x0107
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	be d5       	rcall	.+2940   	; 0x15ae <ADC_request>
     a32:	2f ef       	ldi	r18, 0xFF	; 255
     a34:	8f e1       	ldi	r24, 0x1F	; 31
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	21 50       	subi	r18, 0x01	; 1
     a3a:	80 40       	sbci	r24, 0x00	; 0
     a3c:	90 40       	sbci	r25, 0x00	; 0
     a3e:	e1 f7       	brne	.-8      	; 0xa38 <JOY_calibrate+0x15e>
     a40:	00 c0       	rjmp	.+0      	; 0xa42 <JOY_calibrate+0x168>
     a42:	00 00       	nop
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     a44:	80 91 06 01 	lds	r24, 0x0106
     a48:	90 91 07 01 	lds	r25, 0x0107
     a4c:	d4 d5       	rcall	.+2984   	; 0x15f6 <ADC_read>
     a4e:	90 91 0a 01 	lds	r25, 0x010A
     a52:	89 17       	cp	r24, r25
     a54:	10 f4       	brcc	.+4      	; 0xa5a <JOY_calibrate+0x180>
     a56:	80 93 0a 01 	sts	0x010A, r24
     a5a:	21 97       	sbiw	r28, 0x01	; 1
     a5c:	20 97       	sbiw	r28, 0x00	; 0
     a5e:	19 f7       	brne	.-58     	; 0xa26 <JOY_calibrate+0x14c>
     a60:	20 91 0b 01 	lds	r18, 0x010B
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     a64:	80 91 0a 01 	lds	r24, 0x010A
     a68:	30 e0       	ldi	r19, 0x00	; 0
     a6a:	28 1b       	sub	r18, r24
     a6c:	31 09       	sbc	r19, r1
     a6e:	c9 01       	movw	r24, r18
		
		if(temp < calDown) {calDown = temp;}
     a70:	99 23       	and	r25, r25
     a72:	0c f4       	brge	.+2      	; 0xa76 <JOY_calibrate+0x19c>
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	95 95       	asr	r25
     a78:	87 95       	ror	r24
     a7a:	80 93 09 01 	sts	0x0109, r24
	OLED_goto(3,0);
	OLED_printString("JOY DOWN");
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     a7e:	20 91 0d 01 	lds	r18, 0x010D
	}
	
	
	//printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
	
	meanVert = (calUp - calDown)/2;
     a82:	80 91 0c 01 	lds	r24, 0x010C
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	28 1b       	sub	r18, r24
     a8a:	31 09       	sbc	r19, r1
     a8c:	c9 01       	movw	r24, r18
     a8e:	99 23       	and	r25, r25
     a90:	0c f4       	brge	.+2      	; 0xa94 <JOY_calibrate+0x1ba>
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	95 95       	asr	r25
     a96:	87 95       	ror	r24
     a98:	80 93 08 01 	sts	0x0108, r24
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	70 e0       	ldi	r23, 0x00	; 0
	meanHor = (calR - calL)/2;
     aa0:	84 e0       	ldi	r24, 0x04	; 4
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	76 d3       	rcall	.+1772   	; 0x1192 <OLED_goto>
     aa6:	88 ea       	ldi	r24, 0xA8	; 168
     aa8:	91 e0       	ldi	r25, 0x01	; 1
     aaa:	c9 d3       	rcall	.+1938   	; 0x123e <OLED_printString>
     aac:	2f ef       	ldi	r18, 0xFF	; 255
     aae:	8f ef       	ldi	r24, 0xFF	; 255
     ab0:	9e e0       	ldi	r25, 0x0E	; 14
     ab2:	21 50       	subi	r18, 0x01	; 1
     ab4:	80 40       	sbci	r24, 0x00	; 0
     ab6:	90 40       	sbci	r25, 0x00	; 0
     ab8:	e1 f7       	brne	.-8      	; 0xab2 <JOY_calibrate+0x1d8>
     aba:	00 c0       	rjmp	.+0      	; 0xabc <JOY_calibrate+0x1e2>
     abc:	00 00       	nop
	
	OLED_goto(4,0);
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	08 95       	ret

00000ac4 <JOY_requestCurrentPosition>:
     ac4:	88 37       	cpi	r24, 0x78	; 120
     ac6:	39 f4       	brne	.+14     	; 0xad6 <JOY_requestCurrentPosition+0x12>
     ac8:	60 91 06 01 	lds	r22, 0x0106
	OLED_printString("CALIB DONE");
     acc:	70 91 07 01 	lds	r23, 0x0107
     ad0:	82 e0       	ldi	r24, 0x02	; 2
     ad2:	6d c5       	rjmp	.+2778   	; 0x15ae <ADC_request>
     ad4:	08 95       	ret
     ad6:	89 37       	cpi	r24, 0x79	; 121
     ad8:	31 f4       	brne	.+12     	; 0xae6 <JOY_requestCurrentPosition+0x22>
     ada:	60 91 06 01 	lds	r22, 0x0106
     ade:	70 91 07 01 	lds	r23, 0x0107
     ae2:	81 e0       	ldi	r24, 0x01	; 1
	//printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
	_delay_ms(1000);
}
     ae4:	64 c5       	rjmp	.+2760   	; 0x15ae <ADC_request>
     ae6:	08 95       	ret

00000ae8 <JOY_updatePosition>:
     ae8:	88 37       	cpi	r24, 0x78	; 120
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
	{
		ADC_request(Y_channel, adc_ext_ram);
     aea:	f9 f4       	brne	.+62     	; 0xb2a <JOY_updatePosition+0x42>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     aec:	80 91 06 01 	lds	r24, 0x0106
     af0:	90 91 07 01 	lds	r25, 0x0107
     af4:	80 d5       	rcall	.+2816   	; 0x15f6 <ADC_read>
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	90 93 e0 02 	sts	0x02E0, r25
     afc:	80 93 df 02 	sts	0x02DF, r24
     b00:	20 91 08 01 	lds	r18, 0x0108
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     b04:	60 91 08 01 	lds	r22, 0x0108
     b08:	ac 01       	movw	r20, r24
     b0a:	42 1b       	sub	r20, r18
     b0c:	51 09       	sbc	r21, r1
     b0e:	9a 01       	movw	r18, r20
     b10:	44 e6       	ldi	r20, 0x64	; 100
     b12:	42 9f       	mul	r20, r18
     b14:	c0 01       	movw	r24, r0
     b16:	43 9f       	mul	r20, r19
     b18:	90 0d       	add	r25, r0
     b1a:	11 24       	eor	r1, r1
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	6d d5       	rcall	.+2778   	; 0x15fa <__divmodhi4>
     b20:	70 93 e4 02 	sts	0x02E4, r23
     b24:	60 93 e3 02 	sts	0x02E3, r22
     b28:	08 95       	ret
     b2a:	89 37       	cpi	r24, 0x79	; 121
     b2c:	f1 f4       	brne	.+60     	; 0xb6a <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     b2e:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     b32:	90 91 07 01 	lds	r25, 0x0107
     b36:	5f d5       	rcall	.+2750   	; 0x15f6 <ADC_read>
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	90 93 e2 02 	sts	0x02E2, r25
     b3e:	80 93 e1 02 	sts	0x02E1, r24
     b42:	20 91 09 01 	lds	r18, 0x0109
     b46:	60 91 09 01 	lds	r22, 0x0109
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     b4a:	ac 01       	movw	r20, r24
     b4c:	42 1b       	sub	r20, r18
     b4e:	51 09       	sbc	r21, r1
     b50:	9a 01       	movw	r18, r20
     b52:	44 e6       	ldi	r20, 0x64	; 100
     b54:	42 9f       	mul	r20, r18
     b56:	c0 01       	movw	r24, r0
     b58:	43 9f       	mul	r20, r19
     b5a:	90 0d       	add	r25, r0
     b5c:	11 24       	eor	r1, r1
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	4c d5       	rcall	.+2712   	; 0x15fa <__divmodhi4>
     b62:	70 93 e6 02 	sts	0x02E6, r23
     b66:	60 93 e5 02 	sts	0x02E5, r22
     b6a:	08 95       	ret

00000b6c <JOY_calculateDirection>:
     b6c:	80 91 e3 02 	lds	r24, 0x02E3
     b70:	90 91 e4 02 	lds	r25, 0x02E4
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     b74:	8b 35       	cpi	r24, 0x5B	; 91
     b76:	91 05       	cpc	r25, r1
     b78:	24 f0       	brlt	.+8      	; 0xb82 <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     b7a:	83 e0       	ldi	r24, 0x03	; 3
     b7c:	80 93 de 02 	sts	0x02DE, r24
     b80:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     b82:	86 3a       	cpi	r24, 0xA6	; 166
     b84:	9f 4f       	sbci	r25, 0xFF	; 255
     b86:	24 f4       	brge	.+8      	; 0xb90 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     b88:	84 e0       	ldi	r24, 0x04	; 4
     b8a:	80 93 de 02 	sts	0x02DE, r24
     b8e:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     b90:	80 91 e5 02 	lds	r24, 0x02E5
     b94:	90 91 e6 02 	lds	r25, 0x02E6
     b98:	8b 35       	cpi	r24, 0x5B	; 91
     b9a:	91 05       	cpc	r25, r1
     b9c:	24 f0       	brlt	.+8      	; 0xba6 <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	80 93 de 02 	sts	0x02DE, r24
     ba4:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     ba6:	86 3a       	cpi	r24, 0xA6	; 166
     ba8:	9f 4f       	sbci	r25, 0xFF	; 255
     baa:	24 f4       	brge	.+8      	; 0xbb4 <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     bac:	82 e0       	ldi	r24, 0x02	; 2
     bae:	80 93 de 02 	sts	0x02DE, r24
     bb2:	08 95       	ret
	else{currentDirection = CENTRE;}
     bb4:	10 92 de 02 	sts	0x02DE, r1
     bb8:	08 95       	ret

00000bba <JOY_getPosition>:

//------------------------------------------------------------------------------
// This function returns the current position of the Joystick.
// It is a struct with the four parameters X_abs, Y_abs, X_per and Y_per
JOY_position_t JOY_getPosition()
{
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	28 97       	sbiw	r28, 0x08	; 8
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	f8 94       	cli
     bc8:	de bf       	out	0x3e, r29	; 62
     bca:	0f be       	out	0x3f, r0	; 63
     bcc:	cd bf       	out	0x3d, r28	; 61
	JOY_requestCurrentPosition('x');
     bce:	88 e7       	ldi	r24, 0x78	; 120
     bd0:	79 df       	rcall	.-270    	; 0xac4 <JOY_requestCurrentPosition>
     bd2:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bd4:	8a 95       	dec	r24
     bd6:	f1 f7       	brne	.-4      	; 0xbd4 <JOY_getPosition+0x1a>
     bd8:	00 00       	nop
     bda:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     bdc:	85 df       	rcall	.-246    	; 0xae8 <JOY_updatePosition>
     bde:	89 e7       	ldi	r24, 0x79	; 121
     be0:	71 df       	rcall	.-286    	; 0xac4 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     be2:	82 e6       	ldi	r24, 0x62	; 98
     be4:	8a 95       	dec	r24
     be6:	f1 f7       	brne	.-4      	; 0xbe4 <JOY_getPosition+0x2a>
     be8:	00 00       	nop
     bea:	89 e7       	ldi	r24, 0x79	; 121
     bec:	7d df       	rcall	.-262    	; 0xae8 <JOY_updatePosition>
     bee:	88 e0       	ldi	r24, 0x08	; 8
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     bf0:	ef ed       	ldi	r30, 0xDF	; 223
     bf2:	f2 e0       	ldi	r31, 0x02	; 2
     bf4:	de 01       	movw	r26, r28
	return currentPosition;
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	01 90       	ld	r0, Z+
     bfa:	0d 92       	st	X+, r0
     bfc:	8a 95       	dec	r24
     bfe:	e1 f7       	brne	.-8      	; 0xbf8 <JOY_getPosition+0x3e>
     c00:	29 81       	ldd	r18, Y+1	; 0x01
     c02:	3a 81       	ldd	r19, Y+2	; 0x02
     c04:	4b 81       	ldd	r20, Y+3	; 0x03
     c06:	5c 81       	ldd	r21, Y+4	; 0x04
     c08:	6d 81       	ldd	r22, Y+5	; 0x05
     c0a:	7e 81       	ldd	r23, Y+6	; 0x06
     c0c:	8f 81       	ldd	r24, Y+7	; 0x07
     c0e:	98 85       	ldd	r25, Y+8	; 0x08
     c10:	28 96       	adiw	r28, 0x08	; 8
     c12:	0f b6       	in	r0, 0x3f	; 63
}
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	08 95       	ret

00000c22 <JOY_getDirection>:
     c22:	88 e7       	ldi	r24, 0x78	; 120
     c24:	4f df       	rcall	.-354    	; 0xac4 <JOY_requestCurrentPosition>
     c26:	82 e6       	ldi	r24, 0x62	; 98
     c28:	8a 95       	dec	r24
     c2a:	f1 f7       	brne	.-4      	; 0xc28 <JOY_getDirection+0x6>
     c2c:	00 00       	nop
     c2e:	88 e7       	ldi	r24, 0x78	; 120
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     c30:	5b df       	rcall	.-330    	; 0xae8 <JOY_updatePosition>
     c32:	89 e7       	ldi	r24, 0x79	; 121
     c34:	47 df       	rcall	.-370    	; 0xac4 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     c36:	82 e6       	ldi	r24, 0x62	; 98
     c38:	8a 95       	dec	r24
     c3a:	f1 f7       	brne	.-4      	; 0xc38 <JOY_getDirection+0x16>
     c3c:	00 00       	nop
     c3e:	89 e7       	ldi	r24, 0x79	; 121
     c40:	53 df       	rcall	.-346    	; 0xae8 <JOY_updatePosition>
     c42:	94 df       	rcall	.-216    	; 0xb6c <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     c44:	80 91 de 02 	lds	r24, 0x02DE
     c48:	08 95       	ret

00000c4a <MCP2515_reset>:
	//printf("finished MCP2515_init\n");
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
     c4a:	cf 93       	push	r28
     c4c:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
     c4e:	86 d4       	rcall	.+2316   	; 0x155c <SPI_activateSlave>
     c50:	80 ec       	ldi	r24, 0xC0	; 192
	SPI_send(MCP_RESET);
     c52:	7a d4       	rcall	.+2292   	; 0x1548 <SPI_send>
     c54:	8c ec       	ldi	r24, 0xCC	; 204
     c56:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <MCP2515_reset+0xe>
     c5c:	00 c0       	rjmp	.+0      	; 0xc5e <MCP2515_reset+0x14>
     c5e:	00 00       	nop
     c60:	8c 2f       	mov	r24, r28
     c62:	80 d4       	rcall	.+2304   	; 0x1564 <SPI_deactivateSlave>
	_delay_ms(1);
	SPI_deactivateSlave(slave);
     c64:	8f ef       	ldi	r24, 0xFF	; 255
     c66:	9f e2       	ldi	r25, 0x2F	; 47
     c68:	01 97       	sbiw	r24, 0x01	; 1
     c6a:	f1 f7       	brne	.-4      	; 0xc68 <MCP2515_reset+0x1e>
     c6c:	00 c0       	rjmp	.+0      	; 0xc6e <MCP2515_reset+0x24>
     c6e:	00 00       	nop
     c70:	cf 91       	pop	r28
     c72:	08 95       	ret

00000c74 <MCP2515_read>:
     c74:	cf 93       	push	r28
	_delay_ms(10);
}
     c76:	df 93       	push	r29
     c78:	c8 2f       	mov	r28, r24

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
     c7a:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
     c7c:	6f d4       	rcall	.+2270   	; 0x155c <SPI_activateSlave>
     c7e:	83 e0       	ldi	r24, 0x03	; 3
	SPI_send(MCP_READ);
     c80:	63 d4       	rcall	.+2246   	; 0x1548 <SPI_send>
     c82:	8c ec       	ldi	r24, 0xCC	; 204
     c84:	94 e0       	ldi	r25, 0x04	; 4
     c86:	01 97       	sbiw	r24, 0x01	; 1
     c88:	f1 f7       	brne	.-4      	; 0xc86 <MCP2515_read+0x12>
     c8a:	00 c0       	rjmp	.+0      	; 0xc8c <MCP2515_read+0x18>
     c8c:	00 00       	nop
     c8e:	8d 2f       	mov	r24, r29
     c90:	5b d4       	rcall	.+2230   	; 0x1548 <SPI_send>
	_delay_ms(1);
	SPI_send(address);
     c92:	5e d4       	rcall	.+2236   	; 0x1550 <SPI_receive>
     c94:	d8 2f       	mov	r29, r24
     c96:	8c 2f       	mov	r24, r28
	
	uint8_t result;
	result = SPI_receive();
     c98:	65 d4       	rcall	.+2250   	; 0x1564 <SPI_deactivateSlave>
     c9a:	8d 2f       	mov	r24, r29
     c9c:	df 91       	pop	r29
	
	SPI_deactivateSlave(slave);
     c9e:	cf 91       	pop	r28
     ca0:	08 95       	ret

00000ca2 <MCP2515_init>:
     ca2:	80 e0       	ldi	r24, 0x00	; 0
	return result;
}
     ca4:	d2 df       	rcall	.-92     	; 0xc4a <MCP2515_reset>
     ca6:	6e e0       	ldi	r22, 0x0E	; 14
     ca8:	80 e0       	ldi	r24, 0x00	; 0
     caa:	e4 df       	rcall	.-56     	; 0xc74 <MCP2515_read>
uint8_t MCP2515_init()
{
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
	// Self-test
	uint8_t value;
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
     cac:	98 2f       	mov	r25, r24
     cae:	90 7e       	andi	r25, 0xE0	; 224
	//printf("CANSTAT: %#x\n", value);
	if((value & MODE_MASK) != MODE_CONFIG) 
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 38       	cpi	r25, 0x80	; 128
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <MCP2515_init+0x16>
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	08 95       	ret

00000cba <MCP2515_write>:
     cba:	1f 93       	push	r17
		return 1;
	}
	//
	//printf("finished MCP2515_init\n");
	return 0;
}
     cbc:	cf 93       	push	r28
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_write(SPI_SLAVES slave, uint8_t address, uint8_t data)
{
     cbe:	df 93       	push	r29
     cc0:	c8 2f       	mov	r28, r24
     cc2:	16 2f       	mov	r17, r22
     cc4:	d4 2f       	mov	r29, r20
	SPI_activateSlave(slave);
     cc6:	4a d4       	rcall	.+2196   	; 0x155c <SPI_activateSlave>
     cc8:	82 e0       	ldi	r24, 0x02	; 2
	SPI_send(MCP_WRITE);
     cca:	3e d4       	rcall	.+2172   	; 0x1548 <SPI_send>
     ccc:	81 2f       	mov	r24, r17
     cce:	3c d4       	rcall	.+2168   	; 0x1548 <SPI_send>
	SPI_send(address);
     cd0:	8d 2f       	mov	r24, r29
     cd2:	3a d4       	rcall	.+2164   	; 0x1548 <SPI_send>
     cd4:	8c 2f       	mov	r24, r28
	SPI_send(data);
     cd6:	46 d4       	rcall	.+2188   	; 0x1564 <SPI_deactivateSlave>
     cd8:	df 91       	pop	r29
     cda:	cf 91       	pop	r28
	SPI_deactivateSlave(slave);
     cdc:	1f 91       	pop	r17
     cde:	08 95       	ret

00000ce0 <MCP2515_bitModify>:
     ce0:	0f 93       	push	r16
}
     ce2:	1f 93       	push	r17
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	c8 2f       	mov	r28, r24
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_bitModify(SPI_SLAVES slave, uint8_t register2change, uint8_t mask, uint8_t newValue)
{
     cea:	06 2f       	mov	r16, r22
     cec:	14 2f       	mov	r17, r20
     cee:	d2 2f       	mov	r29, r18
	SPI_activateSlave(slave);
     cf0:	35 d4       	rcall	.+2154   	; 0x155c <SPI_activateSlave>
     cf2:	85 e0       	ldi	r24, 0x05	; 5
	
	SPI_send(MCP_BITMOD);
     cf4:	29 d4       	rcall	.+2130   	; 0x1548 <SPI_send>
     cf6:	80 2f       	mov	r24, r16
     cf8:	27 d4       	rcall	.+2126   	; 0x1548 <SPI_send>
	SPI_send(register2change);
     cfa:	81 2f       	mov	r24, r17
     cfc:	25 d4       	rcall	.+2122   	; 0x1548 <SPI_send>
     cfe:	8d 2f       	mov	r24, r29
	SPI_send(mask);
     d00:	23 d4       	rcall	.+2118   	; 0x1548 <SPI_send>
     d02:	8c 2f       	mov	r24, r28
     d04:	2f d4       	rcall	.+2142   	; 0x1564 <SPI_deactivateSlave>
	SPI_send(newValue);
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
	
	SPI_deactivateSlave(slave);
     d0c:	0f 91       	pop	r16
     d0e:	08 95       	ret

00000d10 <startGame>:

static int menuFrameOffset = 10; //Columns from left frame border
//******************************************************************************************

void startGame()
{
     d10:	cf 93       	push	r28
     d12:	df 93       	push	r29
	OLED_clear();
     d14:	5b d2       	rcall	.+1206   	; 0x11cc <OLED_clear>
     d16:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	39 d2       	rcall	.+1138   	; 0x1192 <OLED_goto>
     d20:	83 eb       	ldi	r24, 0xB3	; 179
     d22:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("START");
     d24:	8c d2       	rcall	.+1304   	; 0x123e <OLED_printString>
     d26:	60 e0       	ldi	r22, 0x00	; 0
     d28:	70 e0       	ldi	r23, 0x00	; 0
     d2a:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_goto(3,0);
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	31 d2       	rcall	.+1122   	; 0x1192 <OLED_goto>
     d30:	ce e0       	ldi	r28, 0x0E	; 14
     d32:	d0 e0       	ldi	r29, 0x00	; 0
     d34:	89 eb       	ldi	r24, 0xB9	; 185
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	82 d2       	rcall	.+1284   	; 0x123e <OLED_printString>
     d3a:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     d3c:	8f e7       	ldi	r24, 0x7F	; 127
     d3e:	97 e0       	ldi	r25, 0x07	; 7
     d40:	21 50       	subi	r18, 0x01	; 1
     d42:	80 40       	sbci	r24, 0x00	; 0
     d44:	90 40       	sbci	r25, 0x00	; 0
     d46:	e1 f7       	brne	.-8      	; 0xd40 <startGame+0x30>
     d48:	00 c0       	rjmp	.+0      	; 0xd4a <startGame+0x3a>
     d4a:	00 00       	nop
     d4c:	21 97       	sbiw	r28, 0x01	; 1
     d4e:	20 97       	sbiw	r28, 0x00	; 0
     d50:	89 f7       	brne	.-30     	; 0xd34 <startGame+0x24>
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	85 e0       	ldi	r24, 0x05	; 5
	OLED_goto(0,0);
	OLED_printString("START");
	
	OLED_goto(3,0);
	
	for(int i = 14; i > 0; i--)
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	1b d2       	rcall	.+1078   	; 0x1192 <OLED_goto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_goto(5,0);
     d5c:	8b eb       	ldi	r24, 0xBB	; 187
     d5e:	91 e0       	ldi	r25, 0x01	; 1
     d60:	6e d2       	rcall	.+1244   	; 0x123e <OLED_printString>
     d62:	2f ef       	ldi	r18, 0xFF	; 255
     d64:	8f ef       	ldi	r24, 0xFF	; 255
     d66:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     d68:	21 50       	subi	r18, 0x01	; 1
     d6a:	80 40       	sbci	r24, 0x00	; 0
     d6c:	90 40       	sbci	r25, 0x00	; 0
     d6e:	e1 f7       	brne	.-8      	; 0xd68 <startGame+0x58>
     d70:	00 c0       	rjmp	.+0      	; 0xd72 <startGame+0x62>
     d72:	00 c0       	rjmp	.+0      	; 0xd74 <startGame+0x64>
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	08 95       	ret

00000d7a <MENU_addMenuItem>:
     d7a:	cf 92       	push	r12
     d7c:	df 92       	push	r13
     d7e:	ef 92       	push	r14
     d80:	ff 92       	push	r15
	_delay_ms(3000);
}
     d82:	0f 93       	push	r16
     d84:	1f 93       	push	r17
     d86:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     d88:	df 93       	push	r29
     d8a:	8c 01       	movw	r16, r24
     d8c:	7b 01       	movw	r14, r22
     d8e:	6a 01       	movw	r12, r20
     d90:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     d92:	80 91 ea 02 	lds	r24, 0x02EA
     d96:	90 91 eb 02 	lds	r25, 0x02EB
     d9a:	89 2b       	or	r24, r25
     d9c:	19 f0       	breq	.+6      	; 0xda4 <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     d9e:	84 ec       	ldi	r24, 0xC4	; 196
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	d9 d5       	rcall	.+2994   	; 0x1956 <puts>
     da4:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	4f d4       	rcall	.+2206   	; 0x1648 <malloc>
     daa:	fc 01       	movw	r30, r24
     dac:	90 93 eb 02 	sts	0x02EB, r25
     db0:	80 93 ea 02 	sts	0x02EA, r24
     db4:	f3 82       	std	Z+3, r15	; 0x03
     db6:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     db8:	11 83       	std	Z+1, r17	; 0x01
     dba:	00 83       	st	Z, r16
	currItem->name = name;
     dbc:	cd 2b       	or	r28, r29
     dbe:	39 f0       	breq	.+14     	; 0xdce <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     dc0:	d5 82       	std	Z+5, r13	; 0x05
     dc2:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     dc8:	97 83       	std	Z+7, r25	; 0x07
     dca:	86 83       	std	Z+6, r24	; 0x06
     dcc:	04 c0       	rjmp	.+8      	; 0xdd6 <MENU_addMenuItem+0x5c>
     dce:	15 82       	std	Z+5, r1	; 0x05
     dd0:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     dd2:	17 82       	std	Z+7, r1	; 0x07
     dd4:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
	}
}
     dda:	1f 91       	pop	r17
     ddc:	0f 91       	pop	r16
     dde:	ff 90       	pop	r15
     de0:	ef 90       	pop	r14
     de2:	df 90       	pop	r13
     de4:	cf 90       	pop	r12
     de6:	08 95       	ret

00000de8 <MENU_buildMenus>:
     de8:	cf 93       	push	r28
     dea:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     dec:	86 e1       	ldi	r24, 0x16	; 22
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	2b d4       	rcall	.+2134   	; 0x1648 <malloc>
     df2:	ec 01       	movw	r28, r24
     df4:	90 93 f1 02 	sts	0x02F1, r25
     df8:	80 93 f0 02 	sts	0x02F0, r24
     dfc:	8a ed       	ldi	r24, 0xDA	; 218
	mainMenu->menuName = "MainMenu";
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	99 83       	std	Y+1, r25	; 0x01
     e02:	88 83       	st	Y, r24
     e04:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     e06:	1c 8a       	std	Y+20, r1	; 0x14
     e08:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	9b 83       	std	Y+3, r25	; 0x03
     e0e:	8a 83       	std	Y+2, r24	; 0x02
     e10:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	19 d4       	rcall	.+2098   	; 0x1648 <malloc>
     e16:	fc 01       	movw	r30, r24
     e18:	90 93 ef 02 	sts	0x02EF, r25
     e1c:	80 93 ee 02 	sts	0x02EE, r24
     e20:	83 ee       	ldi	r24, 0xE3	; 227
     e22:	91 e0       	ldi	r25, 0x01	; 1
	difficultyMenu->menuName = "DifficultyMenu";
     e24:	91 83       	std	Z+1, r25	; 0x01
     e26:	80 83       	st	Z, r24
     e28:	d5 8b       	std	Z+21, r29	; 0x15
     e2a:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     e2c:	83 e0       	ldi	r24, 0x03	; 3
     e2e:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     e30:	93 83       	std	Z+3, r25	; 0x03
     e32:	82 83       	std	Z+2, r24	; 0x02
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     e38:	40 e0       	ldi	r20, 0x00	; 0
     e3a:	50 e0       	ldi	r21, 0x00	; 0
     e3c:	be 01       	movw	r22, r28
     e3e:	82 ef       	ldi	r24, 0xF2	; 242
     e40:	91 e0       	ldi	r25, 0x01	; 1
     e42:	9b df       	rcall	.-202    	; 0xd7a <MENU_addMenuItem>
     e44:	60 91 f0 02 	lds	r22, 0x02F0
     e48:	70 91 f1 02 	lds	r23, 0x02F1
	mainMenu->children[0] = currItem;
     e4c:	e0 91 ea 02 	lds	r30, 0x02EA
     e50:	f0 91 eb 02 	lds	r31, 0x02EB
     e54:	db 01       	movw	r26, r22
     e56:	15 96       	adiw	r26, 0x05	; 5
     e58:	fc 93       	st	X, r31
     e5a:	ee 93       	st	-X, r30
     e5c:	14 97       	sbiw	r26, 0x04	; 4
     e5e:	88 e8       	ldi	r24, 0x88	; 136
     e60:	96 e0       	ldi	r25, 0x06	; 6
     e62:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
     e64:	82 87       	std	Z+10, r24	; 0x0a
     e66:	40 91 ee 02 	lds	r20, 0x02EE
     e6a:	50 91 ef 02 	lds	r21, 0x02EF
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     e6e:	21 e0       	ldi	r18, 0x01	; 1
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	8b ef       	ldi	r24, 0xFB	; 251
     e74:	91 e0       	ldi	r25, 0x01	; 1
     e76:	81 df       	rcall	.-254    	; 0xd7a <MENU_addMenuItem>
     e78:	60 91 f0 02 	lds	r22, 0x02F0
     e7c:	70 91 f1 02 	lds	r23, 0x02F1
	mainMenu->children[1] = currItem;
     e80:	80 91 ea 02 	lds	r24, 0x02EA
     e84:	90 91 eb 02 	lds	r25, 0x02EB
     e88:	fb 01       	movw	r30, r22
     e8a:	97 83       	std	Z+7, r25	; 0x07
     e8c:	86 83       	std	Z+6, r24	; 0x06
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	40 e0       	ldi	r20, 0x00	; 0
     e94:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     e96:	86 e0       	ldi	r24, 0x06	; 6
     e98:	92 e0       	ldi	r25, 0x02	; 2
     e9a:	6f df       	rcall	.-290    	; 0xd7a <MENU_addMenuItem>
     e9c:	60 91 f0 02 	lds	r22, 0x02F0
     ea0:	70 91 f1 02 	lds	r23, 0x02F1
     ea4:	80 91 ea 02 	lds	r24, 0x02EA
	mainMenu->children[2] = currItem;
     ea8:	90 91 eb 02 	lds	r25, 0x02EB
     eac:	db 01       	movw	r26, r22
     eae:	19 96       	adiw	r26, 0x09	; 9
     eb0:	9c 93       	st	X, r25
     eb2:	8e 93       	st	-X, r24
     eb4:	18 97       	sbiw	r26, 0x08	; 8
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e0       	ldi	r20, 0x00	; 0
     ebc:	50 e0       	ldi	r21, 0x00	; 0
     ebe:	81 e1       	ldi	r24, 0x11	; 17
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
     ec0:	92 e0       	ldi	r25, 0x02	; 2
     ec2:	5b df       	rcall	.-330    	; 0xd7a <MENU_addMenuItem>
     ec4:	60 91 f0 02 	lds	r22, 0x02F0
     ec8:	70 91 f1 02 	lds	r23, 0x02F1
     ecc:	e0 91 ea 02 	lds	r30, 0x02EA
	mainMenu->children[3] = currItem;
     ed0:	f0 91 eb 02 	lds	r31, 0x02EB
     ed4:	db 01       	movw	r26, r22
     ed6:	1b 96       	adiw	r26, 0x0b	; 11
     ed8:	fc 93       	st	X, r31
     eda:	ee 93       	st	-X, r30
     edc:	1a 97       	sbiw	r26, 0x0a	; 10
     ede:	8d e6       	ldi	r24, 0x6D	; 109
     ee0:	94 e0       	ldi	r25, 0x04	; 4
     ee2:	93 87       	std	Z+11, r25	; 0x0b
     ee4:	82 87       	std	Z+10, r24	; 0x0a
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
     eea:	40 e0       	ldi	r20, 0x00	; 0
     eec:	50 e0       	ldi	r21, 0x00	; 0
     eee:	8b e1       	ldi	r24, 0x1B	; 27
     ef0:	92 e0       	ldi	r25, 0x02	; 2
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
     ef2:	43 df       	rcall	.-378    	; 0xd7a <MENU_addMenuItem>
     ef4:	e0 91 f0 02 	lds	r30, 0x02F0
     ef8:	f0 91 f1 02 	lds	r31, 0x02F1
     efc:	80 91 ea 02 	lds	r24, 0x02EA
     f00:	90 91 eb 02 	lds	r25, 0x02EB
	mainMenu->children[4] = currItem;
     f04:	95 87       	std	Z+13, r25	; 0x0d
     f06:	84 87       	std	Z+12, r24	; 0x0c
     f08:	10 92 eb 02 	sts	0x02EB, r1
     f0c:	10 92 ea 02 	sts	0x02EA, r1
     f10:	60 91 ee 02 	lds	r22, 0x02EE
     f14:	70 91 ef 02 	lds	r23, 0x02EF
	
	currItem = NULL;
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	80 e2       	ldi	r24, 0x20	; 32
     f22:	92 e0       	ldi	r25, 0x02	; 2
     f24:	2a df       	rcall	.-428    	; 0xd7a <MENU_addMenuItem>
     f26:	60 91 ee 02 	lds	r22, 0x02EE
     f2a:	70 91 ef 02 	lds	r23, 0x02EF
     f2e:	80 91 ea 02 	lds	r24, 0x02EA
     f32:	90 91 eb 02 	lds	r25, 0x02EB
	difficultyMenu->children[0] = currItem;
     f36:	fb 01       	movw	r30, r22
     f38:	95 83       	std	Z+5, r25	; 0x05
     f3a:	84 83       	std	Z+4, r24	; 0x04
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	40 e0       	ldi	r20, 0x00	; 0
     f42:	50 e0       	ldi	r21, 0x00	; 0
     f44:	85 e2       	ldi	r24, 0x25	; 37
     f46:	92 e0       	ldi	r25, 0x02	; 2
     f48:	18 df       	rcall	.-464    	; 0xd7a <MENU_addMenuItem>
     f4a:	60 91 ee 02 	lds	r22, 0x02EE
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
     f4e:	70 91 ef 02 	lds	r23, 0x02EF
     f52:	80 91 ea 02 	lds	r24, 0x02EA
     f56:	90 91 eb 02 	lds	r25, 0x02EB
     f5a:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
     f5c:	17 96       	adiw	r26, 0x07	; 7
     f5e:	9c 93       	st	X, r25
     f60:	8e 93       	st	-X, r24
     f62:	16 97       	sbiw	r26, 0x06	; 6
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 e0       	ldi	r20, 0x00	; 0
     f6a:	50 e0       	ldi	r21, 0x00	; 0
     f6c:	8c e2       	ldi	r24, 0x2C	; 44
     f6e:	92 e0       	ldi	r25, 0x02	; 2
     f70:	04 df       	rcall	.-504    	; 0xd7a <MENU_addMenuItem>
     f72:	e0 91 ee 02 	lds	r30, 0x02EE
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
     f76:	f0 91 ef 02 	lds	r31, 0x02EF
     f7a:	80 91 ea 02 	lds	r24, 0x02EA
     f7e:	90 91 eb 02 	lds	r25, 0x02EB
     f82:	91 87       	std	Z+9, r25	; 0x09
     f84:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	08 95       	ret

00000f8c <MENU_printMenuItem>:
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	ec 01       	movw	r28, r24
     f92:	cb 01       	movw	r24, r22
     f94:	20 97       	sbiw	r28, 0x00	; 0
     f96:	39 f0       	breq	.+14     	; 0xfa6 <MENU_printMenuItem+0x1a>
     f98:	6a e0       	ldi	r22, 0x0A	; 10
}
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	fa d0       	rcall	.+500    	; 0x1192 <OLED_goto>
     f9e:	88 81       	ld	r24, Y
void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
		OLED_printString(item->name);
     fa0:	99 81       	ldd	r25, Y+1	; 0x01
     fa2:	4d d1       	rcall	.+666    	; 0x123e <OLED_printString>
     fa4:	07 c0       	rjmp	.+14     	; 0xfb4 <MENU_printMenuItem+0x28>
     fa6:	81 e3       	ldi	r24, 0x31	; 49
     fa8:	92 e0       	ldi	r25, 0x02	; 2
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
     faa:	9f 93       	push	r25
     fac:	8f 93       	push	r24
     fae:	bd d4       	rcall	.+2426   	; 0x192a <printf>
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	08 95       	ret

00000fba <MENU_printMenu>:
	}
}
     fba:	cf 92       	push	r12
     fbc:	df 92       	push	r13
     fbe:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
     fc0:	ff 92       	push	r15
     fc2:	0f 93       	push	r16
     fc4:	1f 93       	push	r17
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	6c 01       	movw	r12, r24
     fcc:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
     fce:	fe d0       	rcall	.+508    	; 0x11cc <OLED_clear>
     fd0:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	8b d1       	rcall	.+790    	; 0x12ec <OLED_moveArrow>
     fd6:	1e 14       	cp	r1, r14
     fd8:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
     fda:	7c f4       	brge	.+30     	; 0xffa <MENU_printMenu+0x40>
     fdc:	86 01       	movw	r16, r12
     fde:	0c 5f       	subi	r16, 0xFC	; 252
     fe0:	1f 4f       	sbci	r17, 0xFF	; 255
     fe2:	c0 e0       	ldi	r28, 0x00	; 0
     fe4:	d0 e0       	ldi	r29, 0x00	; 0
     fe6:	be 01       	movw	r22, r28
     fe8:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
     fea:	81 91       	ld	r24, Z+
     fec:	91 91       	ld	r25, Z+
     fee:	8f 01       	movw	r16, r30
     ff0:	cd df       	rcall	.-102    	; 0xf8c <MENU_printMenuItem>
     ff2:	21 96       	adiw	r28, 0x01	; 1
     ff4:	ce 15       	cp	r28, r14
     ff6:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
     ff8:	b1 f7       	brne	.-20     	; 0xfe6 <MENU_printMenu+0x2c>
     ffa:	d0 92 ed 02 	sts	0x02ED, r13
     ffe:	c0 92 ec 02 	sts	0x02EC, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
    1002:	10 92 e8 02 	sts	0x02E8, r1
    1006:	10 92 e7 02 	sts	0x02E7, r1
	
	currentPosition = 0;
    100a:	f6 01       	movw	r30, r12
    100c:	84 81       	ldd	r24, Z+4	; 0x04
    100e:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
    1010:	90 93 eb 02 	sts	0x02EB, r25
    1014:	80 93 ea 02 	sts	0x02EA, r24
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	1f 91       	pop	r17
}
    101e:	0f 91       	pop	r16
    1020:	ff 90       	pop	r15
    1022:	ef 90       	pop	r14
    1024:	df 90       	pop	r13
    1026:	cf 90       	pop	r12
    1028:	08 95       	ret

0000102a <MENU_moveUp>:
    102a:	20 91 e7 02 	lds	r18, 0x02E7
    102e:	30 91 e8 02 	lds	r19, 0x02E8
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
    1032:	12 16       	cp	r1, r18
    1034:	13 06       	cpc	r1, r19
    1036:	bc f4       	brge	.+46     	; 0x1066 <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
    1038:	c9 01       	movw	r24, r18
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	90 93 e8 02 	sts	0x02E8, r25
    1040:	80 93 e7 02 	sts	0x02E7, r24
		currItem = currentMenu->children[currentPosition];
    1044:	e0 91 ec 02 	lds	r30, 0x02EC
    1048:	f0 91 ed 02 	lds	r31, 0x02ED
    104c:	2f 5f       	subi	r18, 0xFF	; 255
    104e:	3f 4f       	sbci	r19, 0xFF	; 255
    1050:	22 0f       	add	r18, r18
    1052:	33 1f       	adc	r19, r19
    1054:	e2 0f       	add	r30, r18
    1056:	f3 1f       	adc	r31, r19
    1058:	20 81       	ld	r18, Z
    105a:	31 81       	ldd	r19, Z+1	; 0x01
    105c:	30 93 eb 02 	sts	0x02EB, r19
    1060:	20 93 ea 02 	sts	0x02EA, r18
		OLED_moveArrow(currentPosition);
    1064:	43 c1       	rjmp	.+646    	; 0x12ec <OLED_moveArrow>
    1066:	08 95       	ret

00001068 <MENU_moveDown>:
    1068:	e0 91 ec 02 	lds	r30, 0x02EC
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
    106c:	f0 91 ed 02 	lds	r31, 0x02ED
    1070:	20 91 e7 02 	lds	r18, 0x02E7
    1074:	30 91 e8 02 	lds	r19, 0x02E8
    1078:	82 81       	ldd	r24, Z+2	; 0x02
    107a:	93 81       	ldd	r25, Z+3	; 0x03
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	28 17       	cp	r18, r24
    1080:	39 07       	cpc	r19, r25
    1082:	a4 f4       	brge	.+40     	; 0x10ac <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
    1084:	c9 01       	movw	r24, r18
    1086:	01 96       	adiw	r24, 0x01	; 1
    1088:	90 93 e8 02 	sts	0x02E8, r25
    108c:	80 93 e7 02 	sts	0x02E7, r24
		currItem = currentMenu->children[currentPosition];
    1090:	2d 5f       	subi	r18, 0xFD	; 253
    1092:	3f 4f       	sbci	r19, 0xFF	; 255
    1094:	22 0f       	add	r18, r18
    1096:	33 1f       	adc	r19, r19
    1098:	e2 0f       	add	r30, r18
    109a:	f3 1f       	adc	r31, r19
    109c:	20 81       	ld	r18, Z
    109e:	31 81       	ldd	r19, Z+1	; 0x01
    10a0:	30 93 eb 02 	sts	0x02EB, r19
    10a4:	20 93 ea 02 	sts	0x02EA, r18
		OLED_moveArrow(currentPosition);
    10a8:	21 c1       	rjmp	.+578    	; 0x12ec <OLED_moveArrow>
    10aa:	08 95       	ret
    10ac:	10 92 e8 02 	sts	0x02E8, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
    10b0:	10 92 e7 02 	sts	0x02E7, r1
    10b4:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
    10b6:	95 81       	ldd	r25, Z+5	; 0x05
    10b8:	90 93 eb 02 	sts	0x02EB, r25
    10bc:	80 93 ea 02 	sts	0x02EA, r24
    10c0:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	13 c1       	rjmp	.+550    	; 0x12ec <OLED_moveArrow>
    10c6:	08 95       	ret

000010c8 <MENU_moveLeft>:
    10c8:	e0 91 ec 02 	lds	r30, 0x02EC
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
    10cc:	f0 91 ed 02 	lds	r31, 0x02ED
    10d0:	84 89       	ldd	r24, Z+20	; 0x14
    10d2:	95 89       	ldd	r25, Z+21	; 0x15
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	21 f0       	breq	.+8      	; 0x10e0 <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
    10d8:	fc 01       	movw	r30, r24
    10da:	62 81       	ldd	r22, Z+2	; 0x02
    10dc:	73 81       	ldd	r23, Z+3	; 0x03
    10de:	6d cf       	rjmp	.-294    	; 0xfba <MENU_printMenu>
    10e0:	08 95       	ret

000010e2 <MENU_reactivate>:
    10e2:	80 91 ec 02 	lds	r24, 0x02EC
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
    10e6:	90 91 ed 02 	lds	r25, 0x02ED
    10ea:	fc 01       	movw	r30, r24
    10ec:	62 81       	ldd	r22, Z+2	; 0x02
    10ee:	73 81       	ldd	r23, Z+3	; 0x03
    10f0:	64 df       	rcall	.-312    	; 0xfba <MENU_printMenu>
    10f2:	18 c0       	rjmp	.+48     	; 0x1124 <MENU_waitForInput>
	MENU_waitForInput();
    10f4:	08 95       	ret

000010f6 <MENU_moveRight>:
    10f6:	e0 91 ea 02 	lds	r30, 0x02EA
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
    10fa:	f0 91 eb 02 	lds	r31, 0x02EB
    10fe:	86 81       	ldd	r24, Z+6	; 0x06
    1100:	97 81       	ldd	r25, Z+7	; 0x07
    1102:	89 2b       	or	r24, r25
    1104:	39 f0       	breq	.+14     	; 0x1114 <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
    1106:	84 81       	ldd	r24, Z+4	; 0x04
    1108:	95 81       	ldd	r25, Z+5	; 0x05
    110a:	fc 01       	movw	r30, r24
    110c:	62 81       	ldd	r22, Z+2	; 0x02
    110e:	73 81       	ldd	r23, Z+3	; 0x03
    1110:	54 cf       	rjmp	.-344    	; 0xfba <MENU_printMenu>
    1112:	08 95       	ret
    1114:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
    1116:	f3 85       	ldd	r31, Z+11	; 0x0b
    1118:	e0 2d       	mov	r30, r0
    111a:	30 97       	sbiw	r30, 0x00	; 0
    111c:	11 f0       	breq	.+4      	; 0x1122 <MENU_moveRight+0x2c>
    111e:	09 95       	icall
	{
		currItem->functionPtr();
    1120:	e0 cf       	rjmp	.-64     	; 0x10e2 <MENU_reactivate>
		MENU_reactivate();
    1122:	08 95       	ret

00001124 <MENU_waitForInput>:
    1124:	80 91 e7 02 	lds	r24, 0x02E7
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
    1128:	90 91 e8 02 	lds	r25, 0x02E8
    112c:	df d0       	rcall	.+446    	; 0x12ec <OLED_moveArrow>
    112e:	80 91 e9 02 	lds	r24, 0x02E9
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    1132:	88 23       	and	r24, r24
    1134:	f9 f0       	breq	.+62     	; 0x1174 <MENU_waitForInput+0x50>
    1136:	75 dd       	rcall	.-1302   	; 0xc22 <JOY_getDirection>
	{
		currDir = JOY_getDirection();
    1138:	82 30       	cpi	r24, 0x02	; 2
    113a:	71 f0       	breq	.+28     	; 0x1158 <MENU_waitForInput+0x34>
		switch(currDir){
    113c:	18 f4       	brcc	.+6      	; 0x1144 <MENU_waitForInput+0x20>
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	49 f0       	breq	.+18     	; 0x1154 <MENU_waitForInput+0x30>
    1142:	0b c0       	rjmp	.+22     	; 0x115a <MENU_waitForInput+0x36>
    1144:	83 30       	cpi	r24, 0x03	; 3
    1146:	21 f0       	breq	.+8      	; 0x1150 <MENU_waitForInput+0x2c>
    1148:	84 30       	cpi	r24, 0x04	; 4
    114a:	39 f4       	brne	.+14     	; 0x115a <MENU_waitForInput+0x36>
    114c:	bd df       	rcall	.-134    	; 0x10c8 <MENU_moveLeft>
    114e:	05 c0       	rjmp	.+10     	; 0x115a <MENU_waitForInput+0x36>
			case LEFT:
			MENU_moveLeft();
    1150:	d2 df       	rcall	.-92     	; 0x10f6 <MENU_moveRight>
    1152:	03 c0       	rjmp	.+6      	; 0x115a <MENU_waitForInput+0x36>
			break;
    1154:	6a df       	rcall	.-300    	; 0x102a <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
    1156:	01 c0       	rjmp	.+2      	; 0x115a <MENU_waitForInput+0x36>
    1158:	87 df       	rcall	.-242    	; 0x1068 <MENU_moveDown>
			break;
    115a:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
    115c:	8f e7       	ldi	r24, 0x7F	; 127
    115e:	94 e0       	ldi	r25, 0x04	; 4
			break;
    1160:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
    1162:	80 40       	sbci	r24, 0x00	; 0
    1164:	90 40       	sbci	r25, 0x00	; 0
    1166:	e1 f7       	brne	.-8      	; 0x1160 <MENU_waitForInput+0x3c>
    1168:	00 c0       	rjmp	.+0      	; 0x116a <MENU_waitForInput+0x46>
    116a:	00 00       	nop
    116c:	80 91 e9 02 	lds	r24, 0x02E9
    1170:	81 11       	cpse	r24, r1
    1172:	e1 cf       	rjmp	.-62     	; 0x1136 <MENU_waitForInput+0x12>
    1174:	08 95       	ret

00001176 <MENU_activate>:
    1176:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    1178:	80 93 e9 02 	sts	0x02E9, r24
    117c:	35 de       	rcall	.-918    	; 0xde8 <MENU_buildMenus>
    117e:	80 91 f0 02 	lds	r24, 0x02F0
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
    1182:	90 91 f1 02 	lds	r25, 0x02F1
    1186:	fc 01       	movw	r30, r24
    1188:	62 81       	ldd	r22, Z+2	; 0x02
    118a:	73 81       	ldd	r23, Z+3	; 0x03
    118c:	16 df       	rcall	.-468    	; 0xfba <MENU_printMenu>
    118e:	ca cf       	rjmp	.-108    	; 0x1124 <MENU_waitForInput>
    1190:	08 95       	ret

00001192 <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
    1192:	26 2f       	mov	r18, r22
    1194:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
    1196:	75 95       	asr	r23
    1198:	67 95       	ror	r22
    119a:	75 95       	asr	r23
    119c:	67 95       	ror	r22
    119e:	75 95       	asr	r23
    11a0:	67 95       	ror	r22
    11a2:	75 95       	asr	r23
    11a4:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
    11a6:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
    11a8:	80 55       	subi	r24, 0x50	; 80
    11aa:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
    11ac:	e0 91 10 01 	lds	r30, 0x0110
    11b0:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    11b4:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
    11b6:	e0 91 10 01 	lds	r30, 0x0110
    11ba:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    11be:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
    11c0:	e0 91 10 01 	lds	r30, 0x0110
    11c4:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    11c8:	60 83       	st	Z, r22
    11ca:	08 95       	ret

000011cc <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
    11cc:	1f 93       	push	r17
    11ce:	cf 93       	push	r28
    11d0:	df 93       	push	r29
    11d2:	c1 e0       	ldi	r28, 0x01	; 1
    11d4:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    11da:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	d8 df       	rcall	.-80     	; 0x1192 <OLED_goto>
    11e2:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
    11e4:	e0 91 0e 01 	lds	r30, 0x010E
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    11e8:	f0 91 0f 01 	lds	r31, 0x010F
    11ec:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    11ee:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    11f0:	80 38       	cpi	r24, 0x80	; 128
    11f2:	c1 f7       	brne	.-16     	; 0x11e4 <OLED_clear+0x18>
    11f4:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
    11f6:	9d 2f       	mov	r25, r29
    11f8:	21 96       	adiw	r28, 0x01	; 1
    11fa:	c9 30       	cpi	r28, 0x09	; 9
    11fc:	d1 05       	cpc	r29, r1
    11fe:	71 f7       	brne	.-36     	; 0x11dc <OLED_clear+0x10>
    1200:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    1202:	cf 91       	pop	r28
    1204:	1f 91       	pop	r17
    1206:	08 95       	ret

00001208 <OLED_printCharacter>:
    1208:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	22 0f       	add	r18, r18
    1210:	33 1f       	adc	r19, r19
    1212:	22 0f       	add	r18, r18
    1214:	33 1f       	adc	r19, r19
    1216:	22 0f       	add	r18, r18
    1218:	33 1f       	adc	r19, r19
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	20 59       	subi	r18, 0x90	; 144
    1220:	3f 4f       	sbci	r19, 0xFF	; 255
    1222:	f9 01       	movw	r30, r18
    1224:	e8 0f       	add	r30, r24
    1226:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
    1228:	e4 91       	lpm	r30, Z
    122a:	a0 91 0e 01 	lds	r26, 0x010E
    122e:	b0 91 0f 01 	lds	r27, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1232:	ec 93       	st	X, r30
    1234:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
    1236:	88 30       	cpi	r24, 0x08	; 8
    1238:	91 05       	cpc	r25, r1
    123a:	99 f7       	brne	.-26     	; 0x1222 <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
    123c:	08 95       	ret

0000123e <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
    123e:	1f 93       	push	r17
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
    1246:	10 e0       	ldi	r17, 0x00	; 0
    1248:	06 c0       	rjmp	.+12     	; 0x1256 <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
    124a:	fe 01       	movw	r30, r28
    124c:	e8 0f       	add	r30, r24
    124e:	f9 1f       	adc	r31, r25
    1250:	80 81       	ld	r24, Z
    1252:	da df       	rcall	.-76     	; 0x1208 <OLED_printCharacter>
    1254:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
    1256:	81 2f       	mov	r24, r17
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	fe 01       	movw	r30, r28
    125c:	01 90       	ld	r0, Z+
    125e:	00 20       	and	r0, r0
    1260:	e9 f7       	brne	.-6      	; 0x125c <OLED_printString+0x1e>
    1262:	31 97       	sbiw	r30, 0x01	; 1
    1264:	ec 1b       	sub	r30, r28
    1266:	fd 0b       	sbc	r31, r29
    1268:	8e 17       	cp	r24, r30
    126a:	9f 07       	cpc	r25, r31
    126c:	70 f3       	brcs	.-36     	; 0x124a <OLED_printString+0xc>
    126e:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
    1270:	cf 91       	pop	r28
    1272:	1f 91       	pop	r17
    1274:	08 95       	ret

00001276 <OLED_printArrow>:
    1276:	e0 91 0e 01 	lds	r30, 0x010E
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
    127a:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    127e:	88 e1       	ldi	r24, 0x18	; 24
    1280:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    1282:	e0 91 0e 01 	lds	r30, 0x010E
    1286:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    128a:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
    128c:	e0 91 0e 01 	lds	r30, 0x010E
    1290:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1294:	9e e7       	ldi	r25, 0x7E	; 126
    1296:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
    1298:	e0 91 0e 01 	lds	r30, 0x010E
    129c:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12a0:	9c e3       	ldi	r25, 0x3C	; 60
    12a2:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    12a4:	e0 91 0e 01 	lds	r30, 0x010E
    12a8:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12ac:	80 83       	st	Z, r24
    12ae:	08 95       	ret

000012b0 <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    12b0:	1f 93       	push	r17
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	c1 e0       	ldi	r28, 0x01	; 1
    12b8:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    12be:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
    12c0:	60 e0       	ldi	r22, 0x00	; 0
    12c2:	70 e0       	ldi	r23, 0x00	; 0
    12c4:	66 df       	rcall	.-308    	; 0x1192 <OLED_goto>
    12c6:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    12c8:	e0 91 0e 01 	lds	r30, 0x010E
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    12cc:	f0 91 0f 01 	lds	r31, 0x010F
    12d0:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12d2:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    12d4:	85 30       	cpi	r24, 0x05	; 5
    12d6:	c1 f7       	brne	.-16     	; 0x12c8 <OLED_clearArrow+0x18>
    12d8:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    12da:	9d 2f       	mov	r25, r29
    12dc:	21 96       	adiw	r28, 0x01	; 1
    12de:	c9 30       	cpi	r28, 0x09	; 9
    12e0:	d1 05       	cpc	r29, r1
    12e2:	71 f7       	brne	.-36     	; 0x12c0 <OLED_clearArrow+0x10>
    12e4:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    12e6:	cf 91       	pop	r28
    12e8:	1f 91       	pop	r17
    12ea:	08 95       	ret

000012ec <OLED_moveArrow>:
    12ec:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    12ee:	df 93       	push	r29
    12f0:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
    12f2:	de df       	rcall	.-68     	; 0x12b0 <OLED_clearArrow>
    12f4:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	ce 01       	movw	r24, r28
    12fa:	4b df       	rcall	.-362    	; 0x1192 <OLED_goto>
    12fc:	bc df       	rcall	.-136    	; 0x1276 <OLED_printArrow>
    12fe:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
    1300:	cf 91       	pop	r28
    1302:	08 95       	ret

00001304 <OLED_setContrast>:
}
    1304:	e0 91 10 01 	lds	r30, 0x0110
    1308:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    130c:	91 e8       	ldi	r25, 0x81	; 129
    130e:	90 83       	st	Z, r25
void OLED_setContrast(uint8_t contrast)
{
	// activate contrast contol
	OLED_writeByteToOLED(oled_cmd, 0x81);
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
    1310:	e0 91 10 01 	lds	r30, 0x0110
    1314:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1318:	80 83       	st	Z, r24
    131a:	08 95       	ret

0000131c <OLED_fadeIn>:
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
}

void OLED_fadeIn(void)
{
    131c:	cf 93       	push	r28
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    131e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		OLED_setContrast(i);
    1320:	8c 2f       	mov	r24, r28
    1322:	f0 df       	rcall	.-32     	; 0x1304 <OLED_setContrast>
    1324:	83 e3       	ldi	r24, 0x33	; 51
    1326:	93 e1       	ldi	r25, 0x13	; 19
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	f1 f7       	brne	.-4      	; 0x1328 <OLED_fadeIn+0xc>
    132c:	cf 5f       	subi	r28, 0xFF	; 255
}

void OLED_fadeIn(void)
{
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    132e:	cf 3f       	cpi	r28, 0xFF	; 255
    1330:	b9 f7       	brne	.-18     	; 0x1320 <OLED_fadeIn+0x4>
    1332:	cf 91       	pop	r28
	{
		OLED_setContrast(i);
		_delay_ms(4);
	}
}
    1334:	08 95       	ret

00001336 <OLED_splashScreen>:
    1336:	81 e4       	ldi	r24, 0x41	; 65
	}
}

void OLED_splashScreen(void)
{
	printf("run splash screen...\n");
    1338:	92 e0       	ldi	r25, 0x02	; 2
    133a:	0d d3       	rcall	.+1562   	; 0x1956 <puts>
    133c:	80 e0       	ldi	r24, 0x00	; 0
	
	OLED_setContrast(0);
    133e:	e2 df       	rcall	.-60     	; 0x1304 <OLED_setContrast>
    1340:	2f ef       	ldi	r18, 0xFF	; 255
    1342:	8f e7       	ldi	r24, 0x7F	; 127
    1344:	97 e0       	ldi	r25, 0x07	; 7
    1346:	21 50       	subi	r18, 0x01	; 1
    1348:	80 40       	sbci	r24, 0x00	; 0
    134a:	90 40       	sbci	r25, 0x00	; 0
    134c:	e1 f7       	brne	.-8      	; 0x1346 <OLED_splashScreen+0x10>
    134e:	00 c0       	rjmp	.+0      	; 0x1350 <OLED_splashScreen+0x1a>
    1350:	00 00       	nop
    1352:	64 e0       	ldi	r22, 0x04	; 4
    1354:	70 e0       	ldi	r23, 0x00	; 0
	
	_delay_ms(500);
	OLED_goto(2,4);
    1356:	82 e0       	ldi	r24, 0x02	; 2
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	1b df       	rcall	.-458    	; 0x1192 <OLED_goto>
    135c:	86 e5       	ldi	r24, 0x56	; 86
    135e:	92 e0       	ldi	r25, 0x02	; 2
    1360:	6e df       	rcall	.-292    	; 0x123e <OLED_printString>
	OLED_printString("Group 46 Soft");
    1362:	dc df       	rcall	.-72     	; 0x131c <OLED_fadeIn>
    1364:	2f ef       	ldi	r18, 0xFF	; 255
    1366:	8f e7       	ldi	r24, 0x7F	; 127
    1368:	97 e0       	ldi	r25, 0x07	; 7
	OLED_fadeIn();
    136a:	21 50       	subi	r18, 0x01	; 1
    136c:	80 40       	sbci	r24, 0x00	; 0
    136e:	90 40       	sbci	r25, 0x00	; 0
    1370:	e1 f7       	brne	.-8      	; 0x136a <OLED_splashScreen+0x34>
    1372:	00 c0       	rjmp	.+0      	; 0x1374 <OLED_splashScreen+0x3e>
    1374:	00 00       	nop
    1376:	2a df       	rcall	.-428    	; 0x11cc <OLED_clear>
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	c4 df       	rcall	.-120    	; 0x1304 <OLED_setContrast>
    137c:	2f ef       	ldi	r18, 0xFF	; 255
    137e:	8f ef       	ldi	r24, 0xFF	; 255
	_delay_ms(500);
	
 	OLED_clear();
    1380:	92 e0       	ldi	r25, 0x02	; 2
    1382:	21 50       	subi	r18, 0x01	; 1
 	OLED_setContrast(0);
    1384:	80 40       	sbci	r24, 0x00	; 0
    1386:	90 40       	sbci	r25, 0x00	; 0
    1388:	e1 f7       	brne	.-8      	; 0x1382 <OLED_splashScreen+0x4c>
    138a:	00 c0       	rjmp	.+0      	; 0x138c <OLED_splashScreen+0x56>
    138c:	00 c0       	rjmp	.+0      	; 0x138e <OLED_splashScreen+0x58>
    138e:	6c e1       	ldi	r22, 0x1C	; 28
    1390:	70 e0       	ldi	r23, 0x00	; 0
    1392:	83 e0       	ldi	r24, 0x03	; 3
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	fd de       	rcall	.-518    	; 0x1192 <OLED_goto>
    1398:	84 e6       	ldi	r24, 0x64	; 100
    139a:	92 e0       	ldi	r25, 0x02	; 2
 	
 	_delay_ms(200);
 	OLED_goto(3,28);
    139c:	50 df       	rcall	.-352    	; 0x123e <OLED_printString>
    139e:	68 e1       	ldi	r22, 0x18	; 24
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	84 e0       	ldi	r24, 0x04	; 4
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	f5 de       	rcall	.-534    	; 0x1192 <OLED_goto>
 	OLED_printString("proudly");
    13a8:	8c e6       	ldi	r24, 0x6C	; 108
    13aa:	92 e0       	ldi	r25, 0x02	; 2
    13ac:	48 df       	rcall	.-368    	; 0x123e <OLED_printString>
    13ae:	b6 df       	rcall	.-148    	; 0x131c <OLED_fadeIn>
 	OLED_goto(4,24);	
    13b0:	2f ef       	ldi	r18, 0xFF	; 255
    13b2:	8f e7       	ldi	r24, 0x7F	; 127
    13b4:	97 e0       	ldi	r25, 0x07	; 7
    13b6:	21 50       	subi	r18, 0x01	; 1
    13b8:	80 40       	sbci	r24, 0x00	; 0
    13ba:	90 40       	sbci	r25, 0x00	; 0
 	OLED_printString("presents");
    13bc:	e1 f7       	brne	.-8      	; 0x13b6 <OLED_splashScreen+0x80>
    13be:	00 c0       	rjmp	.+0      	; 0x13c0 <OLED_splashScreen+0x8a>
    13c0:	00 00       	nop
    13c2:	04 df       	rcall	.-504    	; 0x11cc <OLED_clear>
 	OLED_fadeIn();
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	9e df       	rcall	.-196    	; 0x1304 <OLED_setContrast>
    13c8:	2f ef       	ldi	r18, 0xFF	; 255
    13ca:	8f ef       	ldi	r24, 0xFF	; 255
    13cc:	92 e0       	ldi	r25, 0x02	; 2
    13ce:	21 50       	subi	r18, 0x01	; 1
    13d0:	80 40       	sbci	r24, 0x00	; 0
    13d2:	90 40       	sbci	r25, 0x00	; 0
    13d4:	e1 f7       	brne	.-8      	; 0x13ce <OLED_splashScreen+0x98>
    13d6:	00 c0       	rjmp	.+0      	; 0x13d8 <OLED_splashScreen+0xa2>
    13d8:	00 c0       	rjmp	.+0      	; 0x13da <OLED_splashScreen+0xa4>
 	_delay_ms(500);
 	
 	OLED_clear();
    13da:	6c e1       	ldi	r22, 0x1C	; 28
    13dc:	70 e0       	ldi	r23, 0x00	; 0
 	OLED_setContrast(0);
    13de:	83 e0       	ldi	r24, 0x03	; 3
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	d7 de       	rcall	.-594    	; 0x1192 <OLED_goto>
    13e4:	85 e7       	ldi	r24, 0x75	; 117
    13e6:	92 e0       	ldi	r25, 0x02	; 2
    13e8:	2a df       	rcall	.-428    	; 0x123e <OLED_printString>
    13ea:	98 df       	rcall	.-208    	; 0x131c <OLED_fadeIn>
    13ec:	2f ef       	ldi	r18, 0xFF	; 255
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	9e e0       	ldi	r25, 0x0E	; 14
    13f2:	21 50       	subi	r18, 0x01	; 1
    13f4:	80 40       	sbci	r24, 0x00	; 0
 	
 	_delay_ms(200);
 	OLED_goto(3, 28);
    13f6:	90 40       	sbci	r25, 0x00	; 0
    13f8:	e1 f7       	brne	.-8      	; 0x13f2 <OLED_splashScreen+0xbc>
    13fa:	00 c0       	rjmp	.+0      	; 0x13fc <OLED_splashScreen+0xc6>
    13fc:	00 00       	nop
    13fe:	e6 de       	rcall	.-564    	; 0x11cc <OLED_clear>
    1400:	80 e5       	ldi	r24, 0x50	; 80
 	OLED_printString("FIFA 18");
    1402:	80 df       	rcall	.-256    	; 0x1304 <OLED_setContrast>
    1404:	8d e7       	ldi	r24, 0x7D	; 125
    1406:	92 e0       	ldi	r25, 0x02	; 2
    1408:	a6 c2       	rjmp	.+1356   	; 0x1956 <puts>
 	OLED_fadeIn();
    140a:	08 95       	ret

0000140c <OLED_init>:
    140c:	e0 91 10 01 	lds	r30, 0x0110
    1410:	f0 91 11 01 	lds	r31, 0x0111
    1414:	8e ea       	ldi	r24, 0xAE	; 174
    1416:	80 83       	st	Z, r24
    1418:	e0 91 10 01 	lds	r30, 0x0110
    141c:	f0 91 11 01 	lds	r31, 0x0111
 	_delay_ms(1000);
	
	// clean up
	OLED_clear();
    1420:	81 ea       	ldi	r24, 0xA1	; 161
    1422:	80 83       	st	Z, r24
	OLED_setContrast(0x50); // back to standard contrast
    1424:	e0 91 10 01 	lds	r30, 0x0110
    1428:	f0 91 11 01 	lds	r31, 0x0111
	
	printf("splash screen done...\n");
    142c:	8a ed       	ldi	r24, 0xDA	; 218
    142e:	80 83       	st	Z, r24
    1430:	e0 91 10 01 	lds	r30, 0x0110
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
    1434:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1438:	82 e1       	ldi	r24, 0x12	; 18
    143a:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    143c:	e0 91 10 01 	lds	r30, 0x0110
    1440:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1444:	88 ec       	ldi	r24, 0xC8	; 200
    1446:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    1448:	e0 91 10 01 	lds	r30, 0x0110
    144c:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1450:	88 ea       	ldi	r24, 0xA8	; 168
    1452:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    1454:	e0 91 10 01 	lds	r30, 0x0110
    1458:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    145c:	8f e3       	ldi	r24, 0x3F	; 63
    145e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    1460:	e0 91 10 01 	lds	r30, 0x0110
    1464:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1468:	85 ed       	ldi	r24, 0xD5	; 213
    146a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
    146c:	e0 91 10 01 	lds	r30, 0x0110
    1470:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1474:	80 e8       	ldi	r24, 0x80	; 128
    1476:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    1478:	e0 91 10 01 	lds	r30, 0x0110
    147c:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1480:	81 e8       	ldi	r24, 0x81	; 129
    1482:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    1484:	e0 91 10 01 	lds	r30, 0x0110
    1488:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    148c:	80 e5       	ldi	r24, 0x50	; 80
    148e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    1490:	e0 91 10 01 	lds	r30, 0x0110
    1494:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1498:	89 ed       	ldi	r24, 0xD9	; 217
    149a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
    149c:	e0 91 10 01 	lds	r30, 0x0110
    14a0:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14a4:	81 e2       	ldi	r24, 0x21	; 33
    14a6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    14a8:	e0 91 10 01 	lds	r30, 0x0110
    14ac:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14b0:	80 e2       	ldi	r24, 0x20	; 32
    14b2:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    14b4:	e0 91 10 01 	lds	r30, 0x0110
    14b8:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14bc:	82 e0       	ldi	r24, 0x02	; 2
    14be:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    14c0:	e0 91 10 01 	lds	r30, 0x0110
    14c4:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14c8:	8b ed       	ldi	r24, 0xDB	; 219
    14ca:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    14cc:	e0 91 10 01 	lds	r30, 0x0110
    14d0:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14d4:	80 e3       	ldi	r24, 0x30	; 48
    14d6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    14d8:	e0 91 10 01 	lds	r30, 0x0110
    14dc:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14e0:	8d ea       	ldi	r24, 0xAD	; 173
    14e2:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    14e4:	e0 91 10 01 	lds	r30, 0x0110
    14e8:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14ec:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    14ee:	e0 91 10 01 	lds	r30, 0x0110
    14f2:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14f6:	84 ea       	ldi	r24, 0xA4	; 164
    14f8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    14fa:	e0 91 10 01 	lds	r30, 0x0110
    14fe:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1502:	86 ea       	ldi	r24, 0xA6	; 166
    1504:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    1506:	e0 91 10 01 	lds	r30, 0x0110
    150a:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    150e:	8f ea       	ldi	r24, 0xAF	; 175
    1510:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    1512:	5c de       	rcall	.-840    	; 0x11cc <OLED_clear>
    1514:	10 cf       	rjmp	.-480    	; 0x1336 <OLED_splashScreen>
	OLED_splashScreen();
    1516:	08 95       	ret

00001518 <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    1518:	10 92 f4 02 	sts	0x02F4, r1
	currentSliPosition.L_abs = 0;
    151c:	10 92 f5 02 	sts	0x02F5, r1
	currentSliPosition.R_per = 0;
    1520:	10 92 f6 02 	sts	0x02F6, r1
	currentSliPosition.L_per = 0;
    1524:	10 92 f7 02 	sts	0x02F7, r1
    1528:	08 95       	ret

0000152a <SPI_init>:

void SPI_init()
{
	//init external interrupt INT2 on falling edge
	#if defined(__AVR_ATmega162__)
		set_bit(GICR, INT2);
    152a:	8b b7       	in	r24, 0x3b	; 59
    152c:	80 62       	ori	r24, 0x20	; 32
    152e:	8b bf       	out	0x3b, r24	; 59
		clear_bit(EMCUCR, ISC2);
    1530:	86 b7       	in	r24, 0x36	; 54
    1532:	8e 7f       	andi	r24, 0xFE	; 254
    1534:	86 bf       	out	0x36, r24	; 54
		
		// Set _SS, MOSI and SCK output, all others input
		DDR_SPI |= (1<<SS_CAN_CONTROLLER_PIN_MODE) | (1<<MOSI_PIN) | (1<<SCK_PIN);
    1536:	87 b3       	in	r24, 0x17	; 23
    1538:	80 6b       	ori	r24, 0xB0	; 176
    153a:	87 bb       	out	0x17, r24	; 23
	#endif
	
	

	// Enable SPI, Master, set clock rate fck/4
	SPCR = (1<<SPE) | (1<<MSTR);
    153c:	80 e5       	ldi	r24, 0x50	; 80
    153e:	8d b9       	out	0x0d, r24	; 13
	
	// clock rate fck/2
	SPSR = (1<<SPI2X);
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	8e b9       	out	0x0e, r24	; 14

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORT_SPI, SS_CAN_CONTROLLER_PIN);
    1544:	c4 9a       	sbi	0x18, 4	; 24
    1546:	08 95       	ret

00001548 <SPI_send>:
}

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    1548:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    154a:	77 9b       	sbis	0x0e, 7	; 14
    154c:	fe cf       	rjmp	.-4      	; 0x154a <SPI_send+0x2>
}
    154e:	08 95       	ret

00001550 <SPI_receive>:

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    1550:	8f ef       	ldi	r24, 0xFF	; 255
    1552:	fa df       	rcall	.-12     	; 0x1548 <SPI_send>
    1554:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    1556:	fe cf       	rjmp	.-4      	; 0x1554 <SPI_receive+0x4>
    1558:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    155a:	08 95       	ret

0000155c <SPI_activateSlave>:

	return data;
}
    155c:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    155e:	01 c0       	rjmp	.+2      	; 0x1562 <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    1560:	c4 98       	cbi	0x18, 4	; 24
    1562:	08 95       	ret

00001564 <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    1564:	81 11       	cpse	r24, r1
    1566:	01 c0       	rjmp	.+2      	; 0x156a <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    1568:	c4 9a       	sbi	0x18, 4	; 24
    156a:	08 95       	ret

0000156c <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    156c:	5d 9b       	sbis	0x0b, 5	; 11
    156e:	fe cf       	rjmp	.-4      	; 0x156c <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    1570:	8c b9       	out	0x0c, r24	; 12
    1572:	08 95       	ret

00001574 <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    1574:	5f 9b       	sbis	0x0b, 7	; 11
    1576:	fe cf       	rjmp	.-4      	; 0x1574 <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    1578:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
    157a:	08 95       	ret

0000157c <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    157c:	ef 92       	push	r14
    157e:	ff 92       	push	r15
    1580:	0f 93       	push	r16
    1582:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    1584:	bb 27       	eor	r27, r27
    1586:	a1 2f       	mov	r26, r17
    1588:	90 2f       	mov	r25, r16
    158a:	8f 2d       	mov	r24, r15
    158c:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    158e:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1590:	88 e1       	ldi	r24, 0x18	; 24
    1592:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    1594:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	#if defined(__AVR_ATmega162__)
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    1596:	8e e8       	ldi	r24, 0x8E	; 142
    1598:	80 bd       	out	0x20, r24	; 32
	
	#if defined(__AVR_ATmega2560__)
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	#endif
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    159a:	6a eb       	ldi	r22, 0xBA	; 186
    159c:	7a e0       	ldi	r23, 0x0A	; 10
    159e:	86 eb       	ldi	r24, 0xB6	; 182
    15a0:	9a e0       	ldi	r25, 0x0A	; 10
    15a2:	79 d1       	rcall	.+754    	; 0x1896 <fdevopen>
    15a4:	1f 91       	pop	r17
    15a6:	0f 91       	pop	r16
    15a8:	ff 90       	pop	r15
    15aa:	ef 90       	pop	r14
    15ac:	08 95       	ret

000015ae <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    15ae:	9b 01       	movw	r18, r22
	
	switch(channel){
    15b0:	82 30       	cpi	r24, 0x02	; 2
    15b2:	69 f0       	breq	.+26     	; 0x15ce <ADC_request+0x20>
    15b4:	18 f4       	brcc	.+6      	; 0x15bc <ADC_request+0xe>
    15b6:	81 30       	cpi	r24, 0x01	; 1
    15b8:	31 f0       	breq	.+12     	; 0x15c6 <ADC_request+0x18>
    15ba:	15 c0       	rjmp	.+42     	; 0x15e6 <ADC_request+0x38>
    15bc:	83 30       	cpi	r24, 0x03	; 3
    15be:	59 f0       	breq	.+22     	; 0x15d6 <ADC_request+0x28>
    15c0:	84 30       	cpi	r24, 0x04	; 4
    15c2:	69 f0       	breq	.+26     	; 0x15de <ADC_request+0x30>
    15c4:	10 c0       	rjmp	.+32     	; 0x15e6 <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    15c6:	64 e0       	ldi	r22, 0x04	; 4
    15c8:	c9 01       	movw	r24, r18
    15ca:	71 c9       	rjmp	.-3358   	; 0x8ae <saveToAddress>
    15cc:	08 95       	ret
			break;
    15ce:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    15d0:	c9 01       	movw	r24, r18
    15d2:	6d c9       	rjmp	.-3366   	; 0x8ae <saveToAddress>
    15d4:	08 95       	ret
    15d6:	66 e0       	ldi	r22, 0x06	; 6
			break;
    15d8:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    15da:	69 c9       	rjmp	.-3374   	; 0x8ae <saveToAddress>
    15dc:	08 95       	ret
    15de:	67 e0       	ldi	r22, 0x07	; 7
    15e0:	c9 01       	movw	r24, r18
			break;
    15e2:	65 c9       	rjmp	.-3382   	; 0x8ae <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    15e4:	08 95       	ret
    15e6:	8c eb       	ldi	r24, 0xBC	; 188
    15e8:	92 e0       	ldi	r25, 0x02	; 2
    15ea:	9f 93       	push	r25
			break;
    15ec:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    15ee:	9d d1       	rcall	.+826    	; 0x192a <printf>
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	08 95       	ret

000015f6 <ADC_read>:
    15f6:	58 c9       	rjmp	.-3408   	; 0x8a8 <readFromAddress>
    15f8:	08 95       	ret

000015fa <__divmodhi4>:
			break;
    15fa:	97 fb       	bst	r25, 7
    15fc:	07 2e       	mov	r0, r23
    15fe:	16 f4       	brtc	.+4      	; 0x1604 <__divmodhi4+0xa>
    1600:	00 94       	com	r0
    1602:	06 d0       	rcall	.+12     	; 0x1610 <__divmodhi4_neg1>
    1604:	77 fd       	sbrc	r23, 7
    1606:	08 d0       	rcall	.+16     	; 0x1618 <__divmodhi4_neg2>
    1608:	0b d0       	rcall	.+22     	; 0x1620 <__udivmodhi4>
    160a:	07 fc       	sbrc	r0, 7
    160c:	05 d0       	rcall	.+10     	; 0x1618 <__divmodhi4_neg2>
    160e:	3e f4       	brtc	.+14     	; 0x161e <__divmodhi4_exit>

00001610 <__divmodhi4_neg1>:
    1610:	90 95       	com	r25
    1612:	81 95       	neg	r24
    1614:	9f 4f       	sbci	r25, 0xFF	; 255
    1616:	08 95       	ret

00001618 <__divmodhi4_neg2>:
    1618:	70 95       	com	r23
    161a:	61 95       	neg	r22
    161c:	7f 4f       	sbci	r23, 0xFF	; 255

0000161e <__divmodhi4_exit>:
    161e:	08 95       	ret

00001620 <__udivmodhi4>:
    1620:	aa 1b       	sub	r26, r26
    1622:	bb 1b       	sub	r27, r27
    1624:	51 e1       	ldi	r21, 0x11	; 17
    1626:	07 c0       	rjmp	.+14     	; 0x1636 <__udivmodhi4_ep>

00001628 <__udivmodhi4_loop>:
    1628:	aa 1f       	adc	r26, r26
    162a:	bb 1f       	adc	r27, r27
    162c:	a6 17       	cp	r26, r22
    162e:	b7 07       	cpc	r27, r23
    1630:	10 f0       	brcs	.+4      	; 0x1636 <__udivmodhi4_ep>
    1632:	a6 1b       	sub	r26, r22
    1634:	b7 0b       	sbc	r27, r23

00001636 <__udivmodhi4_ep>:
    1636:	88 1f       	adc	r24, r24
    1638:	99 1f       	adc	r25, r25
    163a:	5a 95       	dec	r21
    163c:	a9 f7       	brne	.-22     	; 0x1628 <__udivmodhi4_loop>
    163e:	80 95       	com	r24
    1640:	90 95       	com	r25
    1642:	bc 01       	movw	r22, r24
    1644:	cd 01       	movw	r24, r26
    1646:	08 95       	ret

00001648 <malloc>:
    1648:	cf 93       	push	r28
    164a:	df 93       	push	r29
    164c:	82 30       	cpi	r24, 0x02	; 2
    164e:	91 05       	cpc	r25, r1
    1650:	10 f4       	brcc	.+4      	; 0x1656 <malloc+0xe>
    1652:	82 e0       	ldi	r24, 0x02	; 2
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	e0 91 fa 02 	lds	r30, 0x02FA
    165a:	f0 91 fb 02 	lds	r31, 0x02FB
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	a0 e0       	ldi	r26, 0x00	; 0
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	30 97       	sbiw	r30, 0x00	; 0
    1668:	39 f1       	breq	.+78     	; 0x16b8 <malloc+0x70>
    166a:	40 81       	ld	r20, Z
    166c:	51 81       	ldd	r21, Z+1	; 0x01
    166e:	48 17       	cp	r20, r24
    1670:	59 07       	cpc	r21, r25
    1672:	b8 f0       	brcs	.+46     	; 0x16a2 <malloc+0x5a>
    1674:	48 17       	cp	r20, r24
    1676:	59 07       	cpc	r21, r25
    1678:	71 f4       	brne	.+28     	; 0x1696 <malloc+0x4e>
    167a:	82 81       	ldd	r24, Z+2	; 0x02
    167c:	93 81       	ldd	r25, Z+3	; 0x03
    167e:	10 97       	sbiw	r26, 0x00	; 0
    1680:	29 f0       	breq	.+10     	; 0x168c <malloc+0x44>
    1682:	13 96       	adiw	r26, 0x03	; 3
    1684:	9c 93       	st	X, r25
    1686:	8e 93       	st	-X, r24
    1688:	12 97       	sbiw	r26, 0x02	; 2
    168a:	2c c0       	rjmp	.+88     	; 0x16e4 <malloc+0x9c>
    168c:	90 93 fb 02 	sts	0x02FB, r25
    1690:	80 93 fa 02 	sts	0x02FA, r24
    1694:	27 c0       	rjmp	.+78     	; 0x16e4 <malloc+0x9c>
    1696:	21 15       	cp	r18, r1
    1698:	31 05       	cpc	r19, r1
    169a:	31 f0       	breq	.+12     	; 0x16a8 <malloc+0x60>
    169c:	42 17       	cp	r20, r18
    169e:	53 07       	cpc	r21, r19
    16a0:	18 f0       	brcs	.+6      	; 0x16a8 <malloc+0x60>
    16a2:	a9 01       	movw	r20, r18
    16a4:	db 01       	movw	r26, r22
    16a6:	01 c0       	rjmp	.+2      	; 0x16aa <malloc+0x62>
    16a8:	ef 01       	movw	r28, r30
    16aa:	9a 01       	movw	r18, r20
    16ac:	bd 01       	movw	r22, r26
    16ae:	df 01       	movw	r26, r30
    16b0:	02 80       	ldd	r0, Z+2	; 0x02
    16b2:	f3 81       	ldd	r31, Z+3	; 0x03
    16b4:	e0 2d       	mov	r30, r0
    16b6:	d7 cf       	rjmp	.-82     	; 0x1666 <malloc+0x1e>
    16b8:	21 15       	cp	r18, r1
    16ba:	31 05       	cpc	r19, r1
    16bc:	f9 f0       	breq	.+62     	; 0x16fc <malloc+0xb4>
    16be:	28 1b       	sub	r18, r24
    16c0:	39 0b       	sbc	r19, r25
    16c2:	24 30       	cpi	r18, 0x04	; 4
    16c4:	31 05       	cpc	r19, r1
    16c6:	80 f4       	brcc	.+32     	; 0x16e8 <malloc+0xa0>
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	9b 81       	ldd	r25, Y+3	; 0x03
    16cc:	61 15       	cp	r22, r1
    16ce:	71 05       	cpc	r23, r1
    16d0:	21 f0       	breq	.+8      	; 0x16da <malloc+0x92>
    16d2:	fb 01       	movw	r30, r22
    16d4:	93 83       	std	Z+3, r25	; 0x03
    16d6:	82 83       	std	Z+2, r24	; 0x02
    16d8:	04 c0       	rjmp	.+8      	; 0x16e2 <malloc+0x9a>
    16da:	90 93 fb 02 	sts	0x02FB, r25
    16de:	80 93 fa 02 	sts	0x02FA, r24
    16e2:	fe 01       	movw	r30, r28
    16e4:	32 96       	adiw	r30, 0x02	; 2
    16e6:	44 c0       	rjmp	.+136    	; 0x1770 <malloc+0x128>
    16e8:	fe 01       	movw	r30, r28
    16ea:	e2 0f       	add	r30, r18
    16ec:	f3 1f       	adc	r31, r19
    16ee:	81 93       	st	Z+, r24
    16f0:	91 93       	st	Z+, r25
    16f2:	22 50       	subi	r18, 0x02	; 2
    16f4:	31 09       	sbc	r19, r1
    16f6:	39 83       	std	Y+1, r19	; 0x01
    16f8:	28 83       	st	Y, r18
    16fa:	3a c0       	rjmp	.+116    	; 0x1770 <malloc+0x128>
    16fc:	20 91 f8 02 	lds	r18, 0x02F8
    1700:	30 91 f9 02 	lds	r19, 0x02F9
    1704:	23 2b       	or	r18, r19
    1706:	41 f4       	brne	.+16     	; 0x1718 <malloc+0xd0>
    1708:	20 91 02 01 	lds	r18, 0x0102
    170c:	30 91 03 01 	lds	r19, 0x0103
    1710:	30 93 f9 02 	sts	0x02F9, r19
    1714:	20 93 f8 02 	sts	0x02F8, r18
    1718:	20 91 00 01 	lds	r18, 0x0100
    171c:	30 91 01 01 	lds	r19, 0x0101
    1720:	21 15       	cp	r18, r1
    1722:	31 05       	cpc	r19, r1
    1724:	41 f4       	brne	.+16     	; 0x1736 <malloc+0xee>
    1726:	2d b7       	in	r18, 0x3d	; 61
    1728:	3e b7       	in	r19, 0x3e	; 62
    172a:	40 91 04 01 	lds	r20, 0x0104
    172e:	50 91 05 01 	lds	r21, 0x0105
    1732:	24 1b       	sub	r18, r20
    1734:	35 0b       	sbc	r19, r21
    1736:	e0 91 f8 02 	lds	r30, 0x02F8
    173a:	f0 91 f9 02 	lds	r31, 0x02F9
    173e:	e2 17       	cp	r30, r18
    1740:	f3 07       	cpc	r31, r19
    1742:	a0 f4       	brcc	.+40     	; 0x176c <malloc+0x124>
    1744:	2e 1b       	sub	r18, r30
    1746:	3f 0b       	sbc	r19, r31
    1748:	28 17       	cp	r18, r24
    174a:	39 07       	cpc	r19, r25
    174c:	78 f0       	brcs	.+30     	; 0x176c <malloc+0x124>
    174e:	ac 01       	movw	r20, r24
    1750:	4e 5f       	subi	r20, 0xFE	; 254
    1752:	5f 4f       	sbci	r21, 0xFF	; 255
    1754:	24 17       	cp	r18, r20
    1756:	35 07       	cpc	r19, r21
    1758:	48 f0       	brcs	.+18     	; 0x176c <malloc+0x124>
    175a:	4e 0f       	add	r20, r30
    175c:	5f 1f       	adc	r21, r31
    175e:	50 93 f9 02 	sts	0x02F9, r21
    1762:	40 93 f8 02 	sts	0x02F8, r20
    1766:	81 93       	st	Z+, r24
    1768:	91 93       	st	Z+, r25
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <malloc+0x128>
    176c:	e0 e0       	ldi	r30, 0x00	; 0
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	cf 01       	movw	r24, r30
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	08 95       	ret

00001778 <free>:
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	09 f4       	brne	.+2      	; 0x1782 <free+0xa>
    1780:	87 c0       	rjmp	.+270    	; 0x1890 <free+0x118>
    1782:	fc 01       	movw	r30, r24
    1784:	32 97       	sbiw	r30, 0x02	; 2
    1786:	13 82       	std	Z+3, r1	; 0x03
    1788:	12 82       	std	Z+2, r1	; 0x02
    178a:	c0 91 fa 02 	lds	r28, 0x02FA
    178e:	d0 91 fb 02 	lds	r29, 0x02FB
    1792:	20 97       	sbiw	r28, 0x00	; 0
    1794:	81 f4       	brne	.+32     	; 0x17b6 <free+0x3e>
    1796:	20 81       	ld	r18, Z
    1798:	31 81       	ldd	r19, Z+1	; 0x01
    179a:	28 0f       	add	r18, r24
    179c:	39 1f       	adc	r19, r25
    179e:	80 91 f8 02 	lds	r24, 0x02F8
    17a2:	90 91 f9 02 	lds	r25, 0x02F9
    17a6:	82 17       	cp	r24, r18
    17a8:	93 07       	cpc	r25, r19
    17aa:	79 f5       	brne	.+94     	; 0x180a <free+0x92>
    17ac:	f0 93 f9 02 	sts	0x02F9, r31
    17b0:	e0 93 f8 02 	sts	0x02F8, r30
    17b4:	6d c0       	rjmp	.+218    	; 0x1890 <free+0x118>
    17b6:	de 01       	movw	r26, r28
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	ae 17       	cp	r26, r30
    17be:	bf 07       	cpc	r27, r31
    17c0:	50 f4       	brcc	.+20     	; 0x17d6 <free+0x5e>
    17c2:	12 96       	adiw	r26, 0x02	; 2
    17c4:	4d 91       	ld	r20, X+
    17c6:	5c 91       	ld	r21, X
    17c8:	13 97       	sbiw	r26, 0x03	; 3
    17ca:	9d 01       	movw	r18, r26
    17cc:	41 15       	cp	r20, r1
    17ce:	51 05       	cpc	r21, r1
    17d0:	09 f1       	breq	.+66     	; 0x1814 <free+0x9c>
    17d2:	da 01       	movw	r26, r20
    17d4:	f3 cf       	rjmp	.-26     	; 0x17bc <free+0x44>
    17d6:	b3 83       	std	Z+3, r27	; 0x03
    17d8:	a2 83       	std	Z+2, r26	; 0x02
    17da:	40 81       	ld	r20, Z
    17dc:	51 81       	ldd	r21, Z+1	; 0x01
    17de:	84 0f       	add	r24, r20
    17e0:	95 1f       	adc	r25, r21
    17e2:	8a 17       	cp	r24, r26
    17e4:	9b 07       	cpc	r25, r27
    17e6:	71 f4       	brne	.+28     	; 0x1804 <free+0x8c>
    17e8:	8d 91       	ld	r24, X+
    17ea:	9c 91       	ld	r25, X
    17ec:	11 97       	sbiw	r26, 0x01	; 1
    17ee:	84 0f       	add	r24, r20
    17f0:	95 1f       	adc	r25, r21
    17f2:	02 96       	adiw	r24, 0x02	; 2
    17f4:	91 83       	std	Z+1, r25	; 0x01
    17f6:	80 83       	st	Z, r24
    17f8:	12 96       	adiw	r26, 0x02	; 2
    17fa:	8d 91       	ld	r24, X+
    17fc:	9c 91       	ld	r25, X
    17fe:	13 97       	sbiw	r26, 0x03	; 3
    1800:	93 83       	std	Z+3, r25	; 0x03
    1802:	82 83       	std	Z+2, r24	; 0x02
    1804:	21 15       	cp	r18, r1
    1806:	31 05       	cpc	r19, r1
    1808:	29 f4       	brne	.+10     	; 0x1814 <free+0x9c>
    180a:	f0 93 fb 02 	sts	0x02FB, r31
    180e:	e0 93 fa 02 	sts	0x02FA, r30
    1812:	3e c0       	rjmp	.+124    	; 0x1890 <free+0x118>
    1814:	d9 01       	movw	r26, r18
    1816:	13 96       	adiw	r26, 0x03	; 3
    1818:	fc 93       	st	X, r31
    181a:	ee 93       	st	-X, r30
    181c:	12 97       	sbiw	r26, 0x02	; 2
    181e:	4d 91       	ld	r20, X+
    1820:	5d 91       	ld	r21, X+
    1822:	a4 0f       	add	r26, r20
    1824:	b5 1f       	adc	r27, r21
    1826:	ea 17       	cp	r30, r26
    1828:	fb 07       	cpc	r31, r27
    182a:	79 f4       	brne	.+30     	; 0x184a <free+0xd2>
    182c:	80 81       	ld	r24, Z
    182e:	91 81       	ldd	r25, Z+1	; 0x01
    1830:	84 0f       	add	r24, r20
    1832:	95 1f       	adc	r25, r21
    1834:	02 96       	adiw	r24, 0x02	; 2
    1836:	d9 01       	movw	r26, r18
    1838:	11 96       	adiw	r26, 0x01	; 1
    183a:	9c 93       	st	X, r25
    183c:	8e 93       	st	-X, r24
    183e:	82 81       	ldd	r24, Z+2	; 0x02
    1840:	93 81       	ldd	r25, Z+3	; 0x03
    1842:	13 96       	adiw	r26, 0x03	; 3
    1844:	9c 93       	st	X, r25
    1846:	8e 93       	st	-X, r24
    1848:	12 97       	sbiw	r26, 0x02	; 2
    184a:	e0 e0       	ldi	r30, 0x00	; 0
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	9b 81       	ldd	r25, Y+3	; 0x03
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	19 f0       	breq	.+6      	; 0x185c <free+0xe4>
    1856:	fe 01       	movw	r30, r28
    1858:	ec 01       	movw	r28, r24
    185a:	f9 cf       	rjmp	.-14     	; 0x184e <free+0xd6>
    185c:	ce 01       	movw	r24, r28
    185e:	02 96       	adiw	r24, 0x02	; 2
    1860:	28 81       	ld	r18, Y
    1862:	39 81       	ldd	r19, Y+1	; 0x01
    1864:	82 0f       	add	r24, r18
    1866:	93 1f       	adc	r25, r19
    1868:	20 91 f8 02 	lds	r18, 0x02F8
    186c:	30 91 f9 02 	lds	r19, 0x02F9
    1870:	28 17       	cp	r18, r24
    1872:	39 07       	cpc	r19, r25
    1874:	69 f4       	brne	.+26     	; 0x1890 <free+0x118>
    1876:	30 97       	sbiw	r30, 0x00	; 0
    1878:	29 f4       	brne	.+10     	; 0x1884 <free+0x10c>
    187a:	10 92 fb 02 	sts	0x02FB, r1
    187e:	10 92 fa 02 	sts	0x02FA, r1
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <free+0x110>
    1884:	13 82       	std	Z+3, r1	; 0x03
    1886:	12 82       	std	Z+2, r1	; 0x02
    1888:	d0 93 f9 02 	sts	0x02F9, r29
    188c:	c0 93 f8 02 	sts	0x02F8, r28
    1890:	df 91       	pop	r29
    1892:	cf 91       	pop	r28
    1894:	08 95       	ret

00001896 <fdevopen>:
    1896:	0f 93       	push	r16
    1898:	1f 93       	push	r17
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	ec 01       	movw	r28, r24
    18a0:	8b 01       	movw	r16, r22
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	31 f4       	brne	.+12     	; 0x18b2 <fdevopen+0x1c>
    18a6:	61 15       	cp	r22, r1
    18a8:	71 05       	cpc	r23, r1
    18aa:	19 f4       	brne	.+6      	; 0x18b2 <fdevopen+0x1c>
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	37 c0       	rjmp	.+110    	; 0x1920 <fdevopen+0x8a>
    18b2:	6e e0       	ldi	r22, 0x0E	; 14
    18b4:	70 e0       	ldi	r23, 0x00	; 0
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	3d d2       	rcall	.+1146   	; 0x1d36 <calloc>
    18bc:	fc 01       	movw	r30, r24
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	a9 f3       	breq	.-22     	; 0x18ac <fdevopen+0x16>
    18c2:	80 e8       	ldi	r24, 0x80	; 128
    18c4:	83 83       	std	Z+3, r24	; 0x03
    18c6:	01 15       	cp	r16, r1
    18c8:	11 05       	cpc	r17, r1
    18ca:	71 f0       	breq	.+28     	; 0x18e8 <fdevopen+0x52>
    18cc:	13 87       	std	Z+11, r17	; 0x0b
    18ce:	02 87       	std	Z+10, r16	; 0x0a
    18d0:	81 e8       	ldi	r24, 0x81	; 129
    18d2:	83 83       	std	Z+3, r24	; 0x03
    18d4:	80 91 fc 02 	lds	r24, 0x02FC
    18d8:	90 91 fd 02 	lds	r25, 0x02FD
    18dc:	89 2b       	or	r24, r25
    18de:	21 f4       	brne	.+8      	; 0x18e8 <fdevopen+0x52>
    18e0:	f0 93 fd 02 	sts	0x02FD, r31
    18e4:	e0 93 fc 02 	sts	0x02FC, r30
    18e8:	20 97       	sbiw	r28, 0x00	; 0
    18ea:	c9 f0       	breq	.+50     	; 0x191e <fdevopen+0x88>
    18ec:	d1 87       	std	Z+9, r29	; 0x09
    18ee:	c0 87       	std	Z+8, r28	; 0x08
    18f0:	83 81       	ldd	r24, Z+3	; 0x03
    18f2:	82 60       	ori	r24, 0x02	; 2
    18f4:	83 83       	std	Z+3, r24	; 0x03
    18f6:	80 91 fe 02 	lds	r24, 0x02FE
    18fa:	90 91 ff 02 	lds	r25, 0x02FF
    18fe:	89 2b       	or	r24, r25
    1900:	71 f4       	brne	.+28     	; 0x191e <fdevopen+0x88>
    1902:	f0 93 ff 02 	sts	0x02FF, r31
    1906:	e0 93 fe 02 	sts	0x02FE, r30
    190a:	80 91 00 03 	lds	r24, 0x0300
    190e:	90 91 01 03 	lds	r25, 0x0301
    1912:	89 2b       	or	r24, r25
    1914:	21 f4       	brne	.+8      	; 0x191e <fdevopen+0x88>
    1916:	f0 93 01 03 	sts	0x0301, r31
    191a:	e0 93 00 03 	sts	0x0300, r30
    191e:	cf 01       	movw	r24, r30
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	1f 91       	pop	r17
    1926:	0f 91       	pop	r16
    1928:	08 95       	ret

0000192a <printf>:
    192a:	a0 e0       	ldi	r26, 0x00	; 0
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	ea e9       	ldi	r30, 0x9A	; 154
    1930:	fc e0       	ldi	r31, 0x0C	; 12
    1932:	d8 c2       	rjmp	.+1456   	; 0x1ee4 <__prologue_saves__+0x20>
    1934:	fe 01       	movw	r30, r28
    1936:	35 96       	adiw	r30, 0x05	; 5
    1938:	61 91       	ld	r22, Z+
    193a:	71 91       	ld	r23, Z+
    193c:	af 01       	movw	r20, r30
    193e:	80 91 fe 02 	lds	r24, 0x02FE
    1942:	90 91 ff 02 	lds	r25, 0x02FF
    1946:	34 d0       	rcall	.+104    	; 0x19b0 <vfprintf>
    1948:	e2 e0       	ldi	r30, 0x02	; 2
    194a:	e8 c2       	rjmp	.+1488   	; 0x1f1c <__epilogue_restores__+0x20>

0000194c <putchar>:
    194c:	60 91 fe 02 	lds	r22, 0x02FE
    1950:	70 91 ff 02 	lds	r23, 0x02FF
    1954:	27 c2       	rjmp	.+1102   	; 0x1da4 <fputc>

00001956 <puts>:
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
    195e:	e0 91 fe 02 	lds	r30, 0x02FE
    1962:	f0 91 ff 02 	lds	r31, 0x02FF
    1966:	23 81       	ldd	r18, Z+3	; 0x03
    1968:	21 ff       	sbrs	r18, 1
    196a:	1b c0       	rjmp	.+54     	; 0x19a2 <puts+0x4c>
    196c:	ec 01       	movw	r28, r24
    196e:	00 e0       	ldi	r16, 0x00	; 0
    1970:	10 e0       	ldi	r17, 0x00	; 0
    1972:	89 91       	ld	r24, Y+
    1974:	60 91 fe 02 	lds	r22, 0x02FE
    1978:	70 91 ff 02 	lds	r23, 0x02FF
    197c:	db 01       	movw	r26, r22
    197e:	18 96       	adiw	r26, 0x08	; 8
    1980:	ed 91       	ld	r30, X+
    1982:	fc 91       	ld	r31, X
    1984:	19 97       	sbiw	r26, 0x09	; 9
    1986:	88 23       	and	r24, r24
    1988:	31 f0       	breq	.+12     	; 0x1996 <puts+0x40>
    198a:	09 95       	icall
    198c:	89 2b       	or	r24, r25
    198e:	89 f3       	breq	.-30     	; 0x1972 <puts+0x1c>
    1990:	0f ef       	ldi	r16, 0xFF	; 255
    1992:	1f ef       	ldi	r17, 0xFF	; 255
    1994:	ee cf       	rjmp	.-36     	; 0x1972 <puts+0x1c>
    1996:	8a e0       	ldi	r24, 0x0A	; 10
    1998:	09 95       	icall
    199a:	89 2b       	or	r24, r25
    199c:	11 f4       	brne	.+4      	; 0x19a2 <puts+0x4c>
    199e:	c8 01       	movw	r24, r16
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <puts+0x50>
    19a2:	8f ef       	ldi	r24, 0xFF	; 255
    19a4:	9f ef       	ldi	r25, 0xFF	; 255
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	1f 91       	pop	r17
    19ac:	0f 91       	pop	r16
    19ae:	08 95       	ret

000019b0 <vfprintf>:
    19b0:	ac e0       	ldi	r26, 0x0C	; 12
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	ed ed       	ldi	r30, 0xDD	; 221
    19b6:	fc e0       	ldi	r31, 0x0C	; 12
    19b8:	85 c2       	rjmp	.+1290   	; 0x1ec4 <__prologue_saves__>
    19ba:	7c 01       	movw	r14, r24
    19bc:	6b 01       	movw	r12, r22
    19be:	8a 01       	movw	r16, r20
    19c0:	fc 01       	movw	r30, r24
    19c2:	17 82       	std	Z+7, r1	; 0x07
    19c4:	16 82       	std	Z+6, r1	; 0x06
    19c6:	83 81       	ldd	r24, Z+3	; 0x03
    19c8:	81 ff       	sbrs	r24, 1
    19ca:	b0 c1       	rjmp	.+864    	; 0x1d2c <vfprintf+0x37c>
    19cc:	ce 01       	movw	r24, r28
    19ce:	01 96       	adiw	r24, 0x01	; 1
    19d0:	4c 01       	movw	r8, r24
    19d2:	f7 01       	movw	r30, r14
    19d4:	93 81       	ldd	r25, Z+3	; 0x03
    19d6:	f6 01       	movw	r30, r12
    19d8:	93 fd       	sbrc	r25, 3
    19da:	85 91       	lpm	r24, Z+
    19dc:	93 ff       	sbrs	r25, 3
    19de:	81 91       	ld	r24, Z+
    19e0:	6f 01       	movw	r12, r30
    19e2:	88 23       	and	r24, r24
    19e4:	09 f4       	brne	.+2      	; 0x19e8 <vfprintf+0x38>
    19e6:	9e c1       	rjmp	.+828    	; 0x1d24 <vfprintf+0x374>
    19e8:	85 32       	cpi	r24, 0x25	; 37
    19ea:	39 f4       	brne	.+14     	; 0x19fa <vfprintf+0x4a>
    19ec:	93 fd       	sbrc	r25, 3
    19ee:	85 91       	lpm	r24, Z+
    19f0:	93 ff       	sbrs	r25, 3
    19f2:	81 91       	ld	r24, Z+
    19f4:	6f 01       	movw	r12, r30
    19f6:	85 32       	cpi	r24, 0x25	; 37
    19f8:	21 f4       	brne	.+8      	; 0x1a02 <vfprintf+0x52>
    19fa:	b7 01       	movw	r22, r14
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	d2 d1       	rcall	.+932    	; 0x1da4 <fputc>
    1a00:	e8 cf       	rjmp	.-48     	; 0x19d2 <vfprintf+0x22>
    1a02:	51 2c       	mov	r5, r1
    1a04:	31 2c       	mov	r3, r1
    1a06:	20 e0       	ldi	r18, 0x00	; 0
    1a08:	20 32       	cpi	r18, 0x20	; 32
    1a0a:	a0 f4       	brcc	.+40     	; 0x1a34 <vfprintf+0x84>
    1a0c:	8b 32       	cpi	r24, 0x2B	; 43
    1a0e:	69 f0       	breq	.+26     	; 0x1a2a <vfprintf+0x7a>
    1a10:	30 f4       	brcc	.+12     	; 0x1a1e <vfprintf+0x6e>
    1a12:	80 32       	cpi	r24, 0x20	; 32
    1a14:	59 f0       	breq	.+22     	; 0x1a2c <vfprintf+0x7c>
    1a16:	83 32       	cpi	r24, 0x23	; 35
    1a18:	69 f4       	brne	.+26     	; 0x1a34 <vfprintf+0x84>
    1a1a:	20 61       	ori	r18, 0x10	; 16
    1a1c:	2c c0       	rjmp	.+88     	; 0x1a76 <vfprintf+0xc6>
    1a1e:	8d 32       	cpi	r24, 0x2D	; 45
    1a20:	39 f0       	breq	.+14     	; 0x1a30 <vfprintf+0x80>
    1a22:	80 33       	cpi	r24, 0x30	; 48
    1a24:	39 f4       	brne	.+14     	; 0x1a34 <vfprintf+0x84>
    1a26:	21 60       	ori	r18, 0x01	; 1
    1a28:	26 c0       	rjmp	.+76     	; 0x1a76 <vfprintf+0xc6>
    1a2a:	22 60       	ori	r18, 0x02	; 2
    1a2c:	24 60       	ori	r18, 0x04	; 4
    1a2e:	23 c0       	rjmp	.+70     	; 0x1a76 <vfprintf+0xc6>
    1a30:	28 60       	ori	r18, 0x08	; 8
    1a32:	21 c0       	rjmp	.+66     	; 0x1a76 <vfprintf+0xc6>
    1a34:	27 fd       	sbrc	r18, 7
    1a36:	27 c0       	rjmp	.+78     	; 0x1a86 <vfprintf+0xd6>
    1a38:	30 ed       	ldi	r19, 0xD0	; 208
    1a3a:	38 0f       	add	r19, r24
    1a3c:	3a 30       	cpi	r19, 0x0A	; 10
    1a3e:	78 f4       	brcc	.+30     	; 0x1a5e <vfprintf+0xae>
    1a40:	26 ff       	sbrs	r18, 6
    1a42:	06 c0       	rjmp	.+12     	; 0x1a50 <vfprintf+0xa0>
    1a44:	fa e0       	ldi	r31, 0x0A	; 10
    1a46:	5f 9e       	mul	r5, r31
    1a48:	30 0d       	add	r19, r0
    1a4a:	11 24       	eor	r1, r1
    1a4c:	53 2e       	mov	r5, r19
    1a4e:	13 c0       	rjmp	.+38     	; 0x1a76 <vfprintf+0xc6>
    1a50:	8a e0       	ldi	r24, 0x0A	; 10
    1a52:	38 9e       	mul	r3, r24
    1a54:	30 0d       	add	r19, r0
    1a56:	11 24       	eor	r1, r1
    1a58:	33 2e       	mov	r3, r19
    1a5a:	20 62       	ori	r18, 0x20	; 32
    1a5c:	0c c0       	rjmp	.+24     	; 0x1a76 <vfprintf+0xc6>
    1a5e:	8e 32       	cpi	r24, 0x2E	; 46
    1a60:	21 f4       	brne	.+8      	; 0x1a6a <vfprintf+0xba>
    1a62:	26 fd       	sbrc	r18, 6
    1a64:	5f c1       	rjmp	.+702    	; 0x1d24 <vfprintf+0x374>
    1a66:	20 64       	ori	r18, 0x40	; 64
    1a68:	06 c0       	rjmp	.+12     	; 0x1a76 <vfprintf+0xc6>
    1a6a:	8c 36       	cpi	r24, 0x6C	; 108
    1a6c:	11 f4       	brne	.+4      	; 0x1a72 <vfprintf+0xc2>
    1a6e:	20 68       	ori	r18, 0x80	; 128
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <vfprintf+0xc6>
    1a72:	88 36       	cpi	r24, 0x68	; 104
    1a74:	41 f4       	brne	.+16     	; 0x1a86 <vfprintf+0xd6>
    1a76:	f6 01       	movw	r30, r12
    1a78:	93 fd       	sbrc	r25, 3
    1a7a:	85 91       	lpm	r24, Z+
    1a7c:	93 ff       	sbrs	r25, 3
    1a7e:	81 91       	ld	r24, Z+
    1a80:	6f 01       	movw	r12, r30
    1a82:	81 11       	cpse	r24, r1
    1a84:	c1 cf       	rjmp	.-126    	; 0x1a08 <vfprintf+0x58>
    1a86:	98 2f       	mov	r25, r24
    1a88:	9f 7d       	andi	r25, 0xDF	; 223
    1a8a:	95 54       	subi	r25, 0x45	; 69
    1a8c:	93 30       	cpi	r25, 0x03	; 3
    1a8e:	28 f4       	brcc	.+10     	; 0x1a9a <vfprintf+0xea>
    1a90:	0c 5f       	subi	r16, 0xFC	; 252
    1a92:	1f 4f       	sbci	r17, 0xFF	; 255
    1a94:	ff e3       	ldi	r31, 0x3F	; 63
    1a96:	f9 83       	std	Y+1, r31	; 0x01
    1a98:	0d c0       	rjmp	.+26     	; 0x1ab4 <vfprintf+0x104>
    1a9a:	83 36       	cpi	r24, 0x63	; 99
    1a9c:	31 f0       	breq	.+12     	; 0x1aaa <vfprintf+0xfa>
    1a9e:	83 37       	cpi	r24, 0x73	; 115
    1aa0:	71 f0       	breq	.+28     	; 0x1abe <vfprintf+0x10e>
    1aa2:	83 35       	cpi	r24, 0x53	; 83
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <vfprintf+0xf8>
    1aa6:	57 c0       	rjmp	.+174    	; 0x1b56 <vfprintf+0x1a6>
    1aa8:	21 c0       	rjmp	.+66     	; 0x1aec <vfprintf+0x13c>
    1aaa:	f8 01       	movw	r30, r16
    1aac:	80 81       	ld	r24, Z
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	0e 5f       	subi	r16, 0xFE	; 254
    1ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab4:	44 24       	eor	r4, r4
    1ab6:	43 94       	inc	r4
    1ab8:	51 2c       	mov	r5, r1
    1aba:	54 01       	movw	r10, r8
    1abc:	14 c0       	rjmp	.+40     	; 0x1ae6 <vfprintf+0x136>
    1abe:	38 01       	movw	r6, r16
    1ac0:	f2 e0       	ldi	r31, 0x02	; 2
    1ac2:	6f 0e       	add	r6, r31
    1ac4:	71 1c       	adc	r7, r1
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	a0 80       	ld	r10, Z
    1aca:	b1 80       	ldd	r11, Z+1	; 0x01
    1acc:	26 ff       	sbrs	r18, 6
    1ace:	03 c0       	rjmp	.+6      	; 0x1ad6 <vfprintf+0x126>
    1ad0:	65 2d       	mov	r22, r5
    1ad2:	70 e0       	ldi	r23, 0x00	; 0
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <vfprintf+0x12a>
    1ad6:	6f ef       	ldi	r22, 0xFF	; 255
    1ad8:	7f ef       	ldi	r23, 0xFF	; 255
    1ada:	c5 01       	movw	r24, r10
    1adc:	2c 87       	std	Y+12, r18	; 0x0c
    1ade:	57 d1       	rcall	.+686    	; 0x1d8e <strnlen>
    1ae0:	2c 01       	movw	r4, r24
    1ae2:	83 01       	movw	r16, r6
    1ae4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ae6:	2f 77       	andi	r18, 0x7F	; 127
    1ae8:	22 2e       	mov	r2, r18
    1aea:	16 c0       	rjmp	.+44     	; 0x1b18 <vfprintf+0x168>
    1aec:	38 01       	movw	r6, r16
    1aee:	f2 e0       	ldi	r31, 0x02	; 2
    1af0:	6f 0e       	add	r6, r31
    1af2:	71 1c       	adc	r7, r1
    1af4:	f8 01       	movw	r30, r16
    1af6:	a0 80       	ld	r10, Z
    1af8:	b1 80       	ldd	r11, Z+1	; 0x01
    1afa:	26 ff       	sbrs	r18, 6
    1afc:	03 c0       	rjmp	.+6      	; 0x1b04 <vfprintf+0x154>
    1afe:	65 2d       	mov	r22, r5
    1b00:	70 e0       	ldi	r23, 0x00	; 0
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <vfprintf+0x158>
    1b04:	6f ef       	ldi	r22, 0xFF	; 255
    1b06:	7f ef       	ldi	r23, 0xFF	; 255
    1b08:	c5 01       	movw	r24, r10
    1b0a:	2c 87       	std	Y+12, r18	; 0x0c
    1b0c:	2e d1       	rcall	.+604    	; 0x1d6a <strnlen_P>
    1b0e:	2c 01       	movw	r4, r24
    1b10:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b12:	20 68       	ori	r18, 0x80	; 128
    1b14:	22 2e       	mov	r2, r18
    1b16:	83 01       	movw	r16, r6
    1b18:	23 fc       	sbrc	r2, 3
    1b1a:	19 c0       	rjmp	.+50     	; 0x1b4e <vfprintf+0x19e>
    1b1c:	83 2d       	mov	r24, r3
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	48 16       	cp	r4, r24
    1b22:	59 06       	cpc	r5, r25
    1b24:	a0 f4       	brcc	.+40     	; 0x1b4e <vfprintf+0x19e>
    1b26:	b7 01       	movw	r22, r14
    1b28:	80 e2       	ldi	r24, 0x20	; 32
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	3b d1       	rcall	.+630    	; 0x1da4 <fputc>
    1b2e:	3a 94       	dec	r3
    1b30:	f5 cf       	rjmp	.-22     	; 0x1b1c <vfprintf+0x16c>
    1b32:	f5 01       	movw	r30, r10
    1b34:	27 fc       	sbrc	r2, 7
    1b36:	85 91       	lpm	r24, Z+
    1b38:	27 fe       	sbrs	r2, 7
    1b3a:	81 91       	ld	r24, Z+
    1b3c:	5f 01       	movw	r10, r30
    1b3e:	b7 01       	movw	r22, r14
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	30 d1       	rcall	.+608    	; 0x1da4 <fputc>
    1b44:	31 10       	cpse	r3, r1
    1b46:	3a 94       	dec	r3
    1b48:	f1 e0       	ldi	r31, 0x01	; 1
    1b4a:	4f 1a       	sub	r4, r31
    1b4c:	51 08       	sbc	r5, r1
    1b4e:	41 14       	cp	r4, r1
    1b50:	51 04       	cpc	r5, r1
    1b52:	79 f7       	brne	.-34     	; 0x1b32 <vfprintf+0x182>
    1b54:	de c0       	rjmp	.+444    	; 0x1d12 <vfprintf+0x362>
    1b56:	84 36       	cpi	r24, 0x64	; 100
    1b58:	11 f0       	breq	.+4      	; 0x1b5e <vfprintf+0x1ae>
    1b5a:	89 36       	cpi	r24, 0x69	; 105
    1b5c:	31 f5       	brne	.+76     	; 0x1baa <vfprintf+0x1fa>
    1b5e:	f8 01       	movw	r30, r16
    1b60:	27 ff       	sbrs	r18, 7
    1b62:	07 c0       	rjmp	.+14     	; 0x1b72 <vfprintf+0x1c2>
    1b64:	60 81       	ld	r22, Z
    1b66:	71 81       	ldd	r23, Z+1	; 0x01
    1b68:	82 81       	ldd	r24, Z+2	; 0x02
    1b6a:	93 81       	ldd	r25, Z+3	; 0x03
    1b6c:	0c 5f       	subi	r16, 0xFC	; 252
    1b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b70:	08 c0       	rjmp	.+16     	; 0x1b82 <vfprintf+0x1d2>
    1b72:	60 81       	ld	r22, Z
    1b74:	71 81       	ldd	r23, Z+1	; 0x01
    1b76:	88 27       	eor	r24, r24
    1b78:	77 fd       	sbrc	r23, 7
    1b7a:	80 95       	com	r24
    1b7c:	98 2f       	mov	r25, r24
    1b7e:	0e 5f       	subi	r16, 0xFE	; 254
    1b80:	1f 4f       	sbci	r17, 0xFF	; 255
    1b82:	2f 76       	andi	r18, 0x6F	; 111
    1b84:	b2 2e       	mov	r11, r18
    1b86:	97 ff       	sbrs	r25, 7
    1b88:	09 c0       	rjmp	.+18     	; 0x1b9c <vfprintf+0x1ec>
    1b8a:	90 95       	com	r25
    1b8c:	80 95       	com	r24
    1b8e:	70 95       	com	r23
    1b90:	61 95       	neg	r22
    1b92:	7f 4f       	sbci	r23, 0xFF	; 255
    1b94:	8f 4f       	sbci	r24, 0xFF	; 255
    1b96:	9f 4f       	sbci	r25, 0xFF	; 255
    1b98:	20 68       	ori	r18, 0x80	; 128
    1b9a:	b2 2e       	mov	r11, r18
    1b9c:	2a e0       	ldi	r18, 0x0A	; 10
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	a4 01       	movw	r20, r8
    1ba2:	32 d1       	rcall	.+612    	; 0x1e08 <__ultoa_invert>
    1ba4:	a8 2e       	mov	r10, r24
    1ba6:	a8 18       	sub	r10, r8
    1ba8:	43 c0       	rjmp	.+134    	; 0x1c30 <vfprintf+0x280>
    1baa:	85 37       	cpi	r24, 0x75	; 117
    1bac:	29 f4       	brne	.+10     	; 0x1bb8 <vfprintf+0x208>
    1bae:	2f 7e       	andi	r18, 0xEF	; 239
    1bb0:	b2 2e       	mov	r11, r18
    1bb2:	2a e0       	ldi	r18, 0x0A	; 10
    1bb4:	30 e0       	ldi	r19, 0x00	; 0
    1bb6:	25 c0       	rjmp	.+74     	; 0x1c02 <vfprintf+0x252>
    1bb8:	f2 2f       	mov	r31, r18
    1bba:	f9 7f       	andi	r31, 0xF9	; 249
    1bbc:	bf 2e       	mov	r11, r31
    1bbe:	8f 36       	cpi	r24, 0x6F	; 111
    1bc0:	c1 f0       	breq	.+48     	; 0x1bf2 <vfprintf+0x242>
    1bc2:	18 f4       	brcc	.+6      	; 0x1bca <vfprintf+0x21a>
    1bc4:	88 35       	cpi	r24, 0x58	; 88
    1bc6:	79 f0       	breq	.+30     	; 0x1be6 <vfprintf+0x236>
    1bc8:	ad c0       	rjmp	.+346    	; 0x1d24 <vfprintf+0x374>
    1bca:	80 37       	cpi	r24, 0x70	; 112
    1bcc:	19 f0       	breq	.+6      	; 0x1bd4 <vfprintf+0x224>
    1bce:	88 37       	cpi	r24, 0x78	; 120
    1bd0:	21 f0       	breq	.+8      	; 0x1bda <vfprintf+0x22a>
    1bd2:	a8 c0       	rjmp	.+336    	; 0x1d24 <vfprintf+0x374>
    1bd4:	2f 2f       	mov	r18, r31
    1bd6:	20 61       	ori	r18, 0x10	; 16
    1bd8:	b2 2e       	mov	r11, r18
    1bda:	b4 fe       	sbrs	r11, 4
    1bdc:	0d c0       	rjmp	.+26     	; 0x1bf8 <vfprintf+0x248>
    1bde:	8b 2d       	mov	r24, r11
    1be0:	84 60       	ori	r24, 0x04	; 4
    1be2:	b8 2e       	mov	r11, r24
    1be4:	09 c0       	rjmp	.+18     	; 0x1bf8 <vfprintf+0x248>
    1be6:	24 ff       	sbrs	r18, 4
    1be8:	0a c0       	rjmp	.+20     	; 0x1bfe <vfprintf+0x24e>
    1bea:	9f 2f       	mov	r25, r31
    1bec:	96 60       	ori	r25, 0x06	; 6
    1bee:	b9 2e       	mov	r11, r25
    1bf0:	06 c0       	rjmp	.+12     	; 0x1bfe <vfprintf+0x24e>
    1bf2:	28 e0       	ldi	r18, 0x08	; 8
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	05 c0       	rjmp	.+10     	; 0x1c02 <vfprintf+0x252>
    1bf8:	20 e1       	ldi	r18, 0x10	; 16
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	02 c0       	rjmp	.+4      	; 0x1c02 <vfprintf+0x252>
    1bfe:	20 e1       	ldi	r18, 0x10	; 16
    1c00:	32 e0       	ldi	r19, 0x02	; 2
    1c02:	f8 01       	movw	r30, r16
    1c04:	b7 fe       	sbrs	r11, 7
    1c06:	07 c0       	rjmp	.+14     	; 0x1c16 <vfprintf+0x266>
    1c08:	60 81       	ld	r22, Z
    1c0a:	71 81       	ldd	r23, Z+1	; 0x01
    1c0c:	82 81       	ldd	r24, Z+2	; 0x02
    1c0e:	93 81       	ldd	r25, Z+3	; 0x03
    1c10:	0c 5f       	subi	r16, 0xFC	; 252
    1c12:	1f 4f       	sbci	r17, 0xFF	; 255
    1c14:	06 c0       	rjmp	.+12     	; 0x1c22 <vfprintf+0x272>
    1c16:	60 81       	ld	r22, Z
    1c18:	71 81       	ldd	r23, Z+1	; 0x01
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	0e 5f       	subi	r16, 0xFE	; 254
    1c20:	1f 4f       	sbci	r17, 0xFF	; 255
    1c22:	a4 01       	movw	r20, r8
    1c24:	f1 d0       	rcall	.+482    	; 0x1e08 <__ultoa_invert>
    1c26:	a8 2e       	mov	r10, r24
    1c28:	a8 18       	sub	r10, r8
    1c2a:	fb 2d       	mov	r31, r11
    1c2c:	ff 77       	andi	r31, 0x7F	; 127
    1c2e:	bf 2e       	mov	r11, r31
    1c30:	b6 fe       	sbrs	r11, 6
    1c32:	0b c0       	rjmp	.+22     	; 0x1c4a <vfprintf+0x29a>
    1c34:	2b 2d       	mov	r18, r11
    1c36:	2e 7f       	andi	r18, 0xFE	; 254
    1c38:	a5 14       	cp	r10, r5
    1c3a:	50 f4       	brcc	.+20     	; 0x1c50 <vfprintf+0x2a0>
    1c3c:	b4 fe       	sbrs	r11, 4
    1c3e:	0a c0       	rjmp	.+20     	; 0x1c54 <vfprintf+0x2a4>
    1c40:	b2 fc       	sbrc	r11, 2
    1c42:	08 c0       	rjmp	.+16     	; 0x1c54 <vfprintf+0x2a4>
    1c44:	2b 2d       	mov	r18, r11
    1c46:	2e 7e       	andi	r18, 0xEE	; 238
    1c48:	05 c0       	rjmp	.+10     	; 0x1c54 <vfprintf+0x2a4>
    1c4a:	7a 2c       	mov	r7, r10
    1c4c:	2b 2d       	mov	r18, r11
    1c4e:	03 c0       	rjmp	.+6      	; 0x1c56 <vfprintf+0x2a6>
    1c50:	7a 2c       	mov	r7, r10
    1c52:	01 c0       	rjmp	.+2      	; 0x1c56 <vfprintf+0x2a6>
    1c54:	75 2c       	mov	r7, r5
    1c56:	24 ff       	sbrs	r18, 4
    1c58:	0d c0       	rjmp	.+26     	; 0x1c74 <vfprintf+0x2c4>
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	ea 0d       	add	r30, r10
    1c5e:	f1 1d       	adc	r31, r1
    1c60:	80 81       	ld	r24, Z
    1c62:	80 33       	cpi	r24, 0x30	; 48
    1c64:	11 f4       	brne	.+4      	; 0x1c6a <vfprintf+0x2ba>
    1c66:	29 7e       	andi	r18, 0xE9	; 233
    1c68:	09 c0       	rjmp	.+18     	; 0x1c7c <vfprintf+0x2cc>
    1c6a:	22 ff       	sbrs	r18, 2
    1c6c:	06 c0       	rjmp	.+12     	; 0x1c7a <vfprintf+0x2ca>
    1c6e:	73 94       	inc	r7
    1c70:	73 94       	inc	r7
    1c72:	04 c0       	rjmp	.+8      	; 0x1c7c <vfprintf+0x2cc>
    1c74:	82 2f       	mov	r24, r18
    1c76:	86 78       	andi	r24, 0x86	; 134
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <vfprintf+0x2cc>
    1c7a:	73 94       	inc	r7
    1c7c:	23 fd       	sbrc	r18, 3
    1c7e:	12 c0       	rjmp	.+36     	; 0x1ca4 <vfprintf+0x2f4>
    1c80:	20 ff       	sbrs	r18, 0
    1c82:	06 c0       	rjmp	.+12     	; 0x1c90 <vfprintf+0x2e0>
    1c84:	5a 2c       	mov	r5, r10
    1c86:	73 14       	cp	r7, r3
    1c88:	18 f4       	brcc	.+6      	; 0x1c90 <vfprintf+0x2e0>
    1c8a:	53 0c       	add	r5, r3
    1c8c:	57 18       	sub	r5, r7
    1c8e:	73 2c       	mov	r7, r3
    1c90:	73 14       	cp	r7, r3
    1c92:	60 f4       	brcc	.+24     	; 0x1cac <vfprintf+0x2fc>
    1c94:	b7 01       	movw	r22, r14
    1c96:	80 e2       	ldi	r24, 0x20	; 32
    1c98:	90 e0       	ldi	r25, 0x00	; 0
    1c9a:	2c 87       	std	Y+12, r18	; 0x0c
    1c9c:	83 d0       	rcall	.+262    	; 0x1da4 <fputc>
    1c9e:	73 94       	inc	r7
    1ca0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ca2:	f6 cf       	rjmp	.-20     	; 0x1c90 <vfprintf+0x2e0>
    1ca4:	73 14       	cp	r7, r3
    1ca6:	10 f4       	brcc	.+4      	; 0x1cac <vfprintf+0x2fc>
    1ca8:	37 18       	sub	r3, r7
    1caa:	01 c0       	rjmp	.+2      	; 0x1cae <vfprintf+0x2fe>
    1cac:	31 2c       	mov	r3, r1
    1cae:	24 ff       	sbrs	r18, 4
    1cb0:	11 c0       	rjmp	.+34     	; 0x1cd4 <vfprintf+0x324>
    1cb2:	b7 01       	movw	r22, r14
    1cb4:	80 e3       	ldi	r24, 0x30	; 48
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	2c 87       	std	Y+12, r18	; 0x0c
    1cba:	74 d0       	rcall	.+232    	; 0x1da4 <fputc>
    1cbc:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cbe:	22 ff       	sbrs	r18, 2
    1cc0:	16 c0       	rjmp	.+44     	; 0x1cee <vfprintf+0x33e>
    1cc2:	21 ff       	sbrs	r18, 1
    1cc4:	03 c0       	rjmp	.+6      	; 0x1ccc <vfprintf+0x31c>
    1cc6:	88 e5       	ldi	r24, 0x58	; 88
    1cc8:	90 e0       	ldi	r25, 0x00	; 0
    1cca:	02 c0       	rjmp	.+4      	; 0x1cd0 <vfprintf+0x320>
    1ccc:	88 e7       	ldi	r24, 0x78	; 120
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	b7 01       	movw	r22, r14
    1cd2:	0c c0       	rjmp	.+24     	; 0x1cec <vfprintf+0x33c>
    1cd4:	82 2f       	mov	r24, r18
    1cd6:	86 78       	andi	r24, 0x86	; 134
    1cd8:	51 f0       	breq	.+20     	; 0x1cee <vfprintf+0x33e>
    1cda:	21 fd       	sbrc	r18, 1
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <vfprintf+0x332>
    1cde:	80 e2       	ldi	r24, 0x20	; 32
    1ce0:	01 c0       	rjmp	.+2      	; 0x1ce4 <vfprintf+0x334>
    1ce2:	8b e2       	ldi	r24, 0x2B	; 43
    1ce4:	27 fd       	sbrc	r18, 7
    1ce6:	8d e2       	ldi	r24, 0x2D	; 45
    1ce8:	b7 01       	movw	r22, r14
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	5b d0       	rcall	.+182    	; 0x1da4 <fputc>
    1cee:	a5 14       	cp	r10, r5
    1cf0:	30 f4       	brcc	.+12     	; 0x1cfe <vfprintf+0x34e>
    1cf2:	b7 01       	movw	r22, r14
    1cf4:	80 e3       	ldi	r24, 0x30	; 48
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	55 d0       	rcall	.+170    	; 0x1da4 <fputc>
    1cfa:	5a 94       	dec	r5
    1cfc:	f8 cf       	rjmp	.-16     	; 0x1cee <vfprintf+0x33e>
    1cfe:	aa 94       	dec	r10
    1d00:	f4 01       	movw	r30, r8
    1d02:	ea 0d       	add	r30, r10
    1d04:	f1 1d       	adc	r31, r1
    1d06:	80 81       	ld	r24, Z
    1d08:	b7 01       	movw	r22, r14
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	4b d0       	rcall	.+150    	; 0x1da4 <fputc>
    1d0e:	a1 10       	cpse	r10, r1
    1d10:	f6 cf       	rjmp	.-20     	; 0x1cfe <vfprintf+0x34e>
    1d12:	33 20       	and	r3, r3
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <vfprintf+0x368>
    1d16:	5d ce       	rjmp	.-838    	; 0x19d2 <vfprintf+0x22>
    1d18:	b7 01       	movw	r22, r14
    1d1a:	80 e2       	ldi	r24, 0x20	; 32
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	42 d0       	rcall	.+132    	; 0x1da4 <fputc>
    1d20:	3a 94       	dec	r3
    1d22:	f7 cf       	rjmp	.-18     	; 0x1d12 <vfprintf+0x362>
    1d24:	f7 01       	movw	r30, r14
    1d26:	86 81       	ldd	r24, Z+6	; 0x06
    1d28:	97 81       	ldd	r25, Z+7	; 0x07
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <vfprintf+0x380>
    1d2c:	8f ef       	ldi	r24, 0xFF	; 255
    1d2e:	9f ef       	ldi	r25, 0xFF	; 255
    1d30:	2c 96       	adiw	r28, 0x0c	; 12
    1d32:	e2 e1       	ldi	r30, 0x12	; 18
    1d34:	e3 c0       	rjmp	.+454    	; 0x1efc <__epilogue_restores__>

00001d36 <calloc>:
    1d36:	0f 93       	push	r16
    1d38:	1f 93       	push	r17
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	86 9f       	mul	r24, r22
    1d40:	80 01       	movw	r16, r0
    1d42:	87 9f       	mul	r24, r23
    1d44:	10 0d       	add	r17, r0
    1d46:	96 9f       	mul	r25, r22
    1d48:	10 0d       	add	r17, r0
    1d4a:	11 24       	eor	r1, r1
    1d4c:	c8 01       	movw	r24, r16
    1d4e:	7c dc       	rcall	.-1800   	; 0x1648 <malloc>
    1d50:	ec 01       	movw	r28, r24
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	21 f0       	breq	.+8      	; 0x1d5e <calloc+0x28>
    1d56:	a8 01       	movw	r20, r16
    1d58:	60 e0       	ldi	r22, 0x00	; 0
    1d5a:	70 e0       	ldi	r23, 0x00	; 0
    1d5c:	11 d0       	rcall	.+34     	; 0x1d80 <memset>
    1d5e:	ce 01       	movw	r24, r28
    1d60:	df 91       	pop	r29
    1d62:	cf 91       	pop	r28
    1d64:	1f 91       	pop	r17
    1d66:	0f 91       	pop	r16
    1d68:	08 95       	ret

00001d6a <strnlen_P>:
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	05 90       	lpm	r0, Z+
    1d6e:	61 50       	subi	r22, 0x01	; 1
    1d70:	70 40       	sbci	r23, 0x00	; 0
    1d72:	01 10       	cpse	r0, r1
    1d74:	d8 f7       	brcc	.-10     	; 0x1d6c <strnlen_P+0x2>
    1d76:	80 95       	com	r24
    1d78:	90 95       	com	r25
    1d7a:	8e 0f       	add	r24, r30
    1d7c:	9f 1f       	adc	r25, r31
    1d7e:	08 95       	ret

00001d80 <memset>:
    1d80:	dc 01       	movw	r26, r24
    1d82:	01 c0       	rjmp	.+2      	; 0x1d86 <memset+0x6>
    1d84:	6d 93       	st	X+, r22
    1d86:	41 50       	subi	r20, 0x01	; 1
    1d88:	50 40       	sbci	r21, 0x00	; 0
    1d8a:	e0 f7       	brcc	.-8      	; 0x1d84 <memset+0x4>
    1d8c:	08 95       	ret

00001d8e <strnlen>:
    1d8e:	fc 01       	movw	r30, r24
    1d90:	61 50       	subi	r22, 0x01	; 1
    1d92:	70 40       	sbci	r23, 0x00	; 0
    1d94:	01 90       	ld	r0, Z+
    1d96:	01 10       	cpse	r0, r1
    1d98:	d8 f7       	brcc	.-10     	; 0x1d90 <strnlen+0x2>
    1d9a:	80 95       	com	r24
    1d9c:	90 95       	com	r25
    1d9e:	8e 0f       	add	r24, r30
    1da0:	9f 1f       	adc	r25, r31
    1da2:	08 95       	ret

00001da4 <fputc>:
    1da4:	0f 93       	push	r16
    1da6:	1f 93       	push	r17
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	18 2f       	mov	r17, r24
    1dae:	09 2f       	mov	r16, r25
    1db0:	eb 01       	movw	r28, r22
    1db2:	8b 81       	ldd	r24, Y+3	; 0x03
    1db4:	81 fd       	sbrc	r24, 1
    1db6:	03 c0       	rjmp	.+6      	; 0x1dbe <fputc+0x1a>
    1db8:	8f ef       	ldi	r24, 0xFF	; 255
    1dba:	9f ef       	ldi	r25, 0xFF	; 255
    1dbc:	20 c0       	rjmp	.+64     	; 0x1dfe <fputc+0x5a>
    1dbe:	82 ff       	sbrs	r24, 2
    1dc0:	10 c0       	rjmp	.+32     	; 0x1de2 <fputc+0x3e>
    1dc2:	4e 81       	ldd	r20, Y+6	; 0x06
    1dc4:	5f 81       	ldd	r21, Y+7	; 0x07
    1dc6:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dca:	42 17       	cp	r20, r18
    1dcc:	53 07       	cpc	r21, r19
    1dce:	7c f4       	brge	.+30     	; 0x1dee <fputc+0x4a>
    1dd0:	e8 81       	ld	r30, Y
    1dd2:	f9 81       	ldd	r31, Y+1	; 0x01
    1dd4:	9f 01       	movw	r18, r30
    1dd6:	2f 5f       	subi	r18, 0xFF	; 255
    1dd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dda:	39 83       	std	Y+1, r19	; 0x01
    1ddc:	28 83       	st	Y, r18
    1dde:	10 83       	st	Z, r17
    1de0:	06 c0       	rjmp	.+12     	; 0x1dee <fputc+0x4a>
    1de2:	e8 85       	ldd	r30, Y+8	; 0x08
    1de4:	f9 85       	ldd	r31, Y+9	; 0x09
    1de6:	81 2f       	mov	r24, r17
    1de8:	09 95       	icall
    1dea:	89 2b       	or	r24, r25
    1dec:	29 f7       	brne	.-54     	; 0x1db8 <fputc+0x14>
    1dee:	2e 81       	ldd	r18, Y+6	; 0x06
    1df0:	3f 81       	ldd	r19, Y+7	; 0x07
    1df2:	2f 5f       	subi	r18, 0xFF	; 255
    1df4:	3f 4f       	sbci	r19, 0xFF	; 255
    1df6:	3f 83       	std	Y+7, r19	; 0x07
    1df8:	2e 83       	std	Y+6, r18	; 0x06
    1dfa:	81 2f       	mov	r24, r17
    1dfc:	90 2f       	mov	r25, r16
    1dfe:	df 91       	pop	r29
    1e00:	cf 91       	pop	r28
    1e02:	1f 91       	pop	r17
    1e04:	0f 91       	pop	r16
    1e06:	08 95       	ret

00001e08 <__ultoa_invert>:
    1e08:	fa 01       	movw	r30, r20
    1e0a:	aa 27       	eor	r26, r26
    1e0c:	28 30       	cpi	r18, 0x08	; 8
    1e0e:	51 f1       	breq	.+84     	; 0x1e64 <__ultoa_invert+0x5c>
    1e10:	20 31       	cpi	r18, 0x10	; 16
    1e12:	81 f1       	breq	.+96     	; 0x1e74 <__ultoa_invert+0x6c>
    1e14:	e8 94       	clt
    1e16:	6f 93       	push	r22
    1e18:	6e 7f       	andi	r22, 0xFE	; 254
    1e1a:	6e 5f       	subi	r22, 0xFE	; 254
    1e1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1e:	8f 4f       	sbci	r24, 0xFF	; 255
    1e20:	9f 4f       	sbci	r25, 0xFF	; 255
    1e22:	af 4f       	sbci	r26, 0xFF	; 255
    1e24:	b1 e0       	ldi	r27, 0x01	; 1
    1e26:	3e d0       	rcall	.+124    	; 0x1ea4 <__ultoa_invert+0x9c>
    1e28:	b4 e0       	ldi	r27, 0x04	; 4
    1e2a:	3c d0       	rcall	.+120    	; 0x1ea4 <__ultoa_invert+0x9c>
    1e2c:	67 0f       	add	r22, r23
    1e2e:	78 1f       	adc	r23, r24
    1e30:	89 1f       	adc	r24, r25
    1e32:	9a 1f       	adc	r25, r26
    1e34:	a1 1d       	adc	r26, r1
    1e36:	68 0f       	add	r22, r24
    1e38:	79 1f       	adc	r23, r25
    1e3a:	8a 1f       	adc	r24, r26
    1e3c:	91 1d       	adc	r25, r1
    1e3e:	a1 1d       	adc	r26, r1
    1e40:	6a 0f       	add	r22, r26
    1e42:	71 1d       	adc	r23, r1
    1e44:	81 1d       	adc	r24, r1
    1e46:	91 1d       	adc	r25, r1
    1e48:	a1 1d       	adc	r26, r1
    1e4a:	20 d0       	rcall	.+64     	; 0x1e8c <__ultoa_invert+0x84>
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <__ultoa_invert+0x48>
    1e4e:	68 94       	set
    1e50:	3f 91       	pop	r19
    1e52:	2a e0       	ldi	r18, 0x0A	; 10
    1e54:	26 9f       	mul	r18, r22
    1e56:	11 24       	eor	r1, r1
    1e58:	30 19       	sub	r19, r0
    1e5a:	30 5d       	subi	r19, 0xD0	; 208
    1e5c:	31 93       	st	Z+, r19
    1e5e:	de f6       	brtc	.-74     	; 0x1e16 <__ultoa_invert+0xe>
    1e60:	cf 01       	movw	r24, r30
    1e62:	08 95       	ret
    1e64:	46 2f       	mov	r20, r22
    1e66:	47 70       	andi	r20, 0x07	; 7
    1e68:	40 5d       	subi	r20, 0xD0	; 208
    1e6a:	41 93       	st	Z+, r20
    1e6c:	b3 e0       	ldi	r27, 0x03	; 3
    1e6e:	0f d0       	rcall	.+30     	; 0x1e8e <__ultoa_invert+0x86>
    1e70:	c9 f7       	brne	.-14     	; 0x1e64 <__ultoa_invert+0x5c>
    1e72:	f6 cf       	rjmp	.-20     	; 0x1e60 <__ultoa_invert+0x58>
    1e74:	46 2f       	mov	r20, r22
    1e76:	4f 70       	andi	r20, 0x0F	; 15
    1e78:	40 5d       	subi	r20, 0xD0	; 208
    1e7a:	4a 33       	cpi	r20, 0x3A	; 58
    1e7c:	18 f0       	brcs	.+6      	; 0x1e84 <__ultoa_invert+0x7c>
    1e7e:	49 5d       	subi	r20, 0xD9	; 217
    1e80:	31 fd       	sbrc	r19, 1
    1e82:	40 52       	subi	r20, 0x20	; 32
    1e84:	41 93       	st	Z+, r20
    1e86:	02 d0       	rcall	.+4      	; 0x1e8c <__ultoa_invert+0x84>
    1e88:	a9 f7       	brne	.-22     	; 0x1e74 <__ultoa_invert+0x6c>
    1e8a:	ea cf       	rjmp	.-44     	; 0x1e60 <__ultoa_invert+0x58>
    1e8c:	b4 e0       	ldi	r27, 0x04	; 4
    1e8e:	a6 95       	lsr	r26
    1e90:	97 95       	ror	r25
    1e92:	87 95       	ror	r24
    1e94:	77 95       	ror	r23
    1e96:	67 95       	ror	r22
    1e98:	ba 95       	dec	r27
    1e9a:	c9 f7       	brne	.-14     	; 0x1e8e <__ultoa_invert+0x86>
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	61 05       	cpc	r22, r1
    1ea0:	71 05       	cpc	r23, r1
    1ea2:	08 95       	ret
    1ea4:	9b 01       	movw	r18, r22
    1ea6:	ac 01       	movw	r20, r24
    1ea8:	0a 2e       	mov	r0, r26
    1eaa:	06 94       	lsr	r0
    1eac:	57 95       	ror	r21
    1eae:	47 95       	ror	r20
    1eb0:	37 95       	ror	r19
    1eb2:	27 95       	ror	r18
    1eb4:	ba 95       	dec	r27
    1eb6:	c9 f7       	brne	.-14     	; 0x1eaa <__ultoa_invert+0xa2>
    1eb8:	62 0f       	add	r22, r18
    1eba:	73 1f       	adc	r23, r19
    1ebc:	84 1f       	adc	r24, r20
    1ebe:	95 1f       	adc	r25, r21
    1ec0:	a0 1d       	adc	r26, r0
    1ec2:	08 95       	ret

00001ec4 <__prologue_saves__>:
    1ec4:	2f 92       	push	r2
    1ec6:	3f 92       	push	r3
    1ec8:	4f 92       	push	r4
    1eca:	5f 92       	push	r5
    1ecc:	6f 92       	push	r6
    1ece:	7f 92       	push	r7
    1ed0:	8f 92       	push	r8
    1ed2:	9f 92       	push	r9
    1ed4:	af 92       	push	r10
    1ed6:	bf 92       	push	r11
    1ed8:	cf 92       	push	r12
    1eda:	df 92       	push	r13
    1edc:	ef 92       	push	r14
    1ede:	ff 92       	push	r15
    1ee0:	0f 93       	push	r16
    1ee2:	1f 93       	push	r17
    1ee4:	cf 93       	push	r28
    1ee6:	df 93       	push	r29
    1ee8:	cd b7       	in	r28, 0x3d	; 61
    1eea:	de b7       	in	r29, 0x3e	; 62
    1eec:	ca 1b       	sub	r28, r26
    1eee:	db 0b       	sbc	r29, r27
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	de bf       	out	0x3e, r29	; 62
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	cd bf       	out	0x3d, r28	; 61
    1efa:	09 94       	ijmp

00001efc <__epilogue_restores__>:
    1efc:	2a 88       	ldd	r2, Y+18	; 0x12
    1efe:	39 88       	ldd	r3, Y+17	; 0x11
    1f00:	48 88       	ldd	r4, Y+16	; 0x10
    1f02:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f04:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f06:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f08:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f0a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f0c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f0e:	b9 84       	ldd	r11, Y+9	; 0x09
    1f10:	c8 84       	ldd	r12, Y+8	; 0x08
    1f12:	df 80       	ldd	r13, Y+7	; 0x07
    1f14:	ee 80       	ldd	r14, Y+6	; 0x06
    1f16:	fd 80       	ldd	r15, Y+5	; 0x05
    1f18:	0c 81       	ldd	r16, Y+4	; 0x04
    1f1a:	1b 81       	ldd	r17, Y+3	; 0x03
    1f1c:	aa 81       	ldd	r26, Y+2	; 0x02
    1f1e:	b9 81       	ldd	r27, Y+1	; 0x01
    1f20:	ce 0f       	add	r28, r30
    1f22:	d1 1d       	adc	r29, r1
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	f8 94       	cli
    1f28:	de bf       	out	0x3e, r29	; 62
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	cd bf       	out	0x3d, r28	; 61
    1f2e:	ed 01       	movw	r28, r26
    1f30:	08 95       	ret

00001f32 <_exit>:
    1f32:	f8 94       	cli

00001f34 <__stop_program>:
    1f34:	ff cf       	rjmp	.-2      	; 0x1f34 <__stop_program>
