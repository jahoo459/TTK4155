
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d8  00800100  00003052  000030e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003052  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005b  008002d8  008002d8  000032be  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000032be  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000380  00000000  00000000  0000331a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004bfc  00000000  00000000  0000369a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014ab  00000000  00000000  00008296  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b5c  00000000  00000000  00009741  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000a04  00000000  00000000  0000b2a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001101  00000000  00000000  0000bca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000263a  00000000  00000000  0000cda5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000438  00000000  00000000  0000f3df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c1       	rjmp	.+900    	; 0x386 <__ctors_end>
       2:	00 00       	nop
       4:	41 c2       	rjmp	.+1154   	; 0x488 <__vector_1>
       6:	00 00       	nop
       8:	4e c2       	rjmp	.+1180   	; 0x4a6 <__vector_2>
       a:	00 00       	nop
       c:	5b c2       	rjmp	.+1206   	; 0x4c4 <__vector_3>
       e:	00 00       	nop
      10:	d6 c1       	rjmp	.+940    	; 0x3be <__bad_interrupt>
      12:	00 00       	nop
      14:	d4 c1       	rjmp	.+936    	; 0x3be <__bad_interrupt>
      16:	00 00       	nop
      18:	d2 c1       	rjmp	.+932    	; 0x3be <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d0 c1       	rjmp	.+928    	; 0x3be <__bad_interrupt>
      1e:	00 00       	nop
      20:	ce c1       	rjmp	.+924    	; 0x3be <__bad_interrupt>
      22:	00 00       	nop
      24:	cc c1       	rjmp	.+920    	; 0x3be <__bad_interrupt>
      26:	00 00       	nop
      28:	ca c1       	rjmp	.+916    	; 0x3be <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c8 c1       	rjmp	.+912    	; 0x3be <__bad_interrupt>
      2e:	00 00       	nop
      30:	c6 c1       	rjmp	.+908    	; 0x3be <__bad_interrupt>
      32:	00 00       	nop
      34:	c4 c1       	rjmp	.+904    	; 0x3be <__bad_interrupt>
      36:	00 00       	nop
      38:	c2 c1       	rjmp	.+900    	; 0x3be <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c0 c1       	rjmp	.+896    	; 0x3be <__bad_interrupt>
      3e:	00 00       	nop
      40:	50 c2       	rjmp	.+1184   	; 0x4e2 <__vector_16>
      42:	00 00       	nop
      44:	bc c1       	rjmp	.+888    	; 0x3be <__bad_interrupt>
      46:	00 00       	nop
      48:	ba c1       	rjmp	.+884    	; 0x3be <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b9 c1       	rjmp	.+882    	; 0x3c0 <__vector_19>
      4e:	00 00       	nop
      50:	b6 c1       	rjmp	.+876    	; 0x3be <__bad_interrupt>
      52:	00 00       	nop
      54:	b4 c1       	rjmp	.+872    	; 0x3be <__bad_interrupt>
      56:	00 00       	nop
      58:	b2 c1       	rjmp	.+868    	; 0x3be <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b0 c1       	rjmp	.+864    	; 0x3be <__bad_interrupt>
      5e:	00 00       	nop
      60:	ae c1       	rjmp	.+860    	; 0x3be <__bad_interrupt>
      62:	00 00       	nop
      64:	ac c1       	rjmp	.+856    	; 0x3be <__bad_interrupt>
      66:	00 00       	nop
      68:	aa c1       	rjmp	.+852    	; 0x3be <__bad_interrupt>
      6a:	00 00       	nop
      6c:	a8 c1       	rjmp	.+848    	; 0x3be <__bad_interrupt>
      6e:	00 00       	nop
      70:	05 a8       	ldd	r0, Z+53	; 0x35
      72:	4c cd       	rjmp	.-1384   	; 0xfffffb0c <__eeprom_end+0xff7efb0c>
      74:	b2 d4       	rcall	.+2404   	; 0x9da <Game_init+0x28>
      76:	4e b9       	out	0x0e, r20	; 14
      78:	38 36       	cpi	r19, 0x68	; 104
      7a:	a9 02       	muls	r26, r25
      7c:	0c 50       	subi	r16, 0x0C	; 12
      7e:	b9 91       	ld	r27, Y+
      80:	86 88       	ldd	r8, Z+22	; 0x16
      82:	08 3c       	cpi	r16, 0xC8	; 200
      84:	a6 aa       	std	Z+54, r10	; 0x36
      86:	aa 2a       	or	r10, r26
      88:	be 00       	.word	0x00be	; ????
      8a:	00 00       	nop
      8c:	80 3f       	cpi	r24, 0xF0	; 240

0000008e <__trampolines_end>:
	...
      96:	00 06       	cpc	r0, r16
      98:	5f 5f       	subi	r21, 0xFF	; 255
      9a:	06 00       	.word	0x0006	; ????
      9c:	00 00       	nop
      9e:	00 07       	cpc	r16, r16
      a0:	07 00       	.word	0x0007	; ????
      a2:	07 07       	cpc	r16, r23
      a4:	00 00       	nop
      a6:	14 7f       	andi	r17, 0xF4	; 244
      a8:	7f 14       	cp	r7, r15
      aa:	7f 7f       	andi	r23, 0xFF	; 255
      ac:	14 00       	.word	0x0014	; ????
      ae:	24 2e       	mov	r2, r20
      b0:	6b 6b       	ori	r22, 0xBB	; 187
      b2:	3a 12       	cpse	r3, r26
      b4:	00 00       	nop
      b6:	46 66       	ori	r20, 0x66	; 102
      b8:	30 18       	sub	r3, r0
      ba:	0c 66       	ori	r16, 0x6C	; 108
      bc:	62 00       	.word	0x0062	; ????
      be:	30 7a       	andi	r19, 0xA0	; 160
      c0:	4f 5d       	subi	r20, 0xDF	; 223
      c2:	37 7a       	andi	r19, 0xA7	; 167
      c4:	48 00       	.word	0x0048	; ????
      c6:	04 07       	cpc	r16, r20
      c8:	03 00       	.word	0x0003	; ????
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	00 1c       	adc	r0, r0
      d0:	3e 63       	ori	r19, 0x3E	; 62
      d2:	41 00       	.word	0x0041	; ????
      d4:	00 00       	nop
      d6:	00 41       	sbci	r16, 0x10	; 16
      d8:	63 3e       	cpi	r22, 0xE3	; 227
      da:	1c 00       	.word	0x001c	; ????
      dc:	00 00       	nop
      de:	08 2a       	or	r0, r24
      e0:	3e 1c       	adc	r3, r14
      e2:	1c 3e       	cpi	r17, 0xEC	; 236
      e4:	2a 08       	sbc	r2, r10
      e6:	08 08       	sbc	r0, r8
      e8:	3e 3e       	cpi	r19, 0xEE	; 238
      ea:	08 08       	sbc	r0, r8
      ec:	00 00       	nop
      ee:	00 a0       	ldd	r0, Z+32	; 0x20
      f0:	e0 60       	ori	r30, 0x00	; 0
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	08 08       	sbc	r0, r8
      f8:	08 08       	sbc	r0, r8
      fa:	08 08       	sbc	r0, r8
      fc:	00 00       	nop
      fe:	00 00       	nop
     100:	60 60       	ori	r22, 0x00	; 0
     102:	00 00       	nop
     104:	00 00       	nop
     106:	60 30       	cpi	r22, 0x00	; 0
     108:	18 0c       	add	r1, r8
     10a:	06 03       	mulsu	r16, r22
     10c:	01 00       	.word	0x0001	; ????
     10e:	3e 7f       	andi	r19, 0xFE	; 254
     110:	59 4d       	sbci	r21, 0xD9	; 217
     112:	7f 3e       	cpi	r23, 0xEF	; 239
     114:	00 00       	nop
     116:	42 42       	sbci	r20, 0x22	; 34
     118:	7f 7f       	andi	r23, 0xFF	; 255
     11a:	40 40       	sbci	r20, 0x00	; 0
     11c:	00 00       	nop
     11e:	62 73       	andi	r22, 0x32	; 50
     120:	59 49       	sbci	r21, 0x99	; 153
     122:	6f 66       	ori	r22, 0x6F	; 111
     124:	00 00       	nop
     126:	22 63       	ori	r18, 0x32	; 50
     128:	49 49       	sbci	r20, 0x99	; 153
     12a:	7f 36       	cpi	r23, 0x6F	; 111
     12c:	00 00       	nop
     12e:	18 1c       	adc	r1, r8
     130:	16 13       	cpse	r17, r22
     132:	7f 7f       	andi	r23, 0xFF	; 255
     134:	10 00       	.word	0x0010	; ????
     136:	27 67       	ori	r18, 0x77	; 119
     138:	45 45       	sbci	r20, 0x55	; 85
     13a:	7d 39       	cpi	r23, 0x9D	; 157
     13c:	00 00       	nop
     13e:	3c 7e       	andi	r19, 0xEC	; 236
     140:	4b 49       	sbci	r20, 0x9B	; 155
     142:	79 30       	cpi	r23, 0x09	; 9
     144:	00 00       	nop
     146:	03 63       	ori	r16, 0x33	; 51
     148:	71 19       	sub	r23, r1
     14a:	0f 07       	cpc	r16, r31
     14c:	00 00       	nop
     14e:	36 7f       	andi	r19, 0xF6	; 246
     150:	49 49       	sbci	r20, 0x99	; 153
     152:	7f 36       	cpi	r23, 0x6F	; 111
     154:	00 00       	nop
     156:	06 4f       	sbci	r16, 0xF6	; 246
     158:	49 69       	ori	r20, 0x99	; 153
     15a:	3f 1e       	adc	r3, r31
     15c:	00 00       	nop
     15e:	00 00       	nop
     160:	6c 6c       	ori	r22, 0xCC	; 204
     162:	00 00       	nop
     164:	00 00       	nop
     166:	00 a0       	ldd	r0, Z+32	; 0x20
     168:	ec 6c       	ori	r30, 0xCC	; 204
     16a:	00 00       	nop
     16c:	00 00       	nop
     16e:	08 1c       	adc	r0, r8
     170:	36 63       	ori	r19, 0x36	; 54
     172:	41 00       	.word	0x0041	; ????
     174:	00 00       	nop
     176:	14 14       	cp	r1, r4
     178:	14 14       	cp	r1, r4
     17a:	14 14       	cp	r1, r4
     17c:	00 00       	nop
     17e:	00 41       	sbci	r16, 0x10	; 16
     180:	63 36       	cpi	r22, 0x63	; 99
     182:	1c 08       	sbc	r1, r12
     184:	00 00       	nop
     186:	02 03       	mulsu	r16, r18
     188:	51 59       	subi	r21, 0x91	; 145
     18a:	0f 06       	cpc	r0, r31
     18c:	00 00       	nop
     18e:	3e 7f       	andi	r19, 0xFE	; 254
     190:	41 5d       	subi	r20, 0xD1	; 209
     192:	5d 1f       	adc	r21, r29
     194:	1e 00       	.word	0x001e	; ????
     196:	7c 7e       	andi	r23, 0xEC	; 236
     198:	13 13       	cpse	r17, r19
     19a:	7e 7c       	andi	r23, 0xCE	; 206
     19c:	00 00       	nop
     19e:	41 7f       	andi	r20, 0xF1	; 241
     1a0:	7f 49       	sbci	r23, 0x9F	; 159
     1a2:	49 7f       	andi	r20, 0xF9	; 249
     1a4:	36 00       	.word	0x0036	; ????
     1a6:	1c 3e       	cpi	r17, 0xEC	; 236
     1a8:	63 41       	sbci	r22, 0x13	; 19
     1aa:	41 63       	ori	r20, 0x31	; 49
     1ac:	22 00       	.word	0x0022	; ????
     1ae:	41 7f       	andi	r20, 0xF1	; 241
     1b0:	7f 41       	sbci	r23, 0x1F	; 31
     1b2:	63 7f       	andi	r22, 0xF3	; 243
     1b4:	1c 00       	.word	0x001c	; ????
     1b6:	41 7f       	andi	r20, 0xF1	; 241
     1b8:	7f 49       	sbci	r23, 0x9F	; 159
     1ba:	5d 41       	sbci	r21, 0x1D	; 29
     1bc:	63 00       	.word	0x0063	; ????
     1be:	41 7f       	andi	r20, 0xF1	; 241
     1c0:	7f 49       	sbci	r23, 0x9F	; 159
     1c2:	1d 01       	movw	r2, r26
     1c4:	03 00       	.word	0x0003	; ????
     1c6:	1c 3e       	cpi	r17, 0xEC	; 236
     1c8:	63 41       	sbci	r22, 0x13	; 19
     1ca:	51 73       	andi	r21, 0x31	; 49
     1cc:	72 00       	.word	0x0072	; ????
     1ce:	7f 7f       	andi	r23, 0xFF	; 255
     1d0:	08 08       	sbc	r0, r8
     1d2:	7f 7f       	andi	r23, 0xFF	; 255
     1d4:	00 00       	nop
     1d6:	00 41       	sbci	r16, 0x10	; 16
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	41 00       	.word	0x0041	; ????
     1dc:	00 00       	nop
     1de:	30 70       	andi	r19, 0x00	; 0
     1e0:	40 41       	sbci	r20, 0x10	; 16
     1e2:	7f 3f       	cpi	r23, 0xFF	; 255
     1e4:	01 00       	.word	0x0001	; ????
     1e6:	41 7f       	andi	r20, 0xF1	; 241
     1e8:	7f 08       	sbc	r7, r15
     1ea:	1c 77       	andi	r17, 0x7C	; 124
     1ec:	63 00       	.word	0x0063	; ????
     1ee:	41 7f       	andi	r20, 0xF1	; 241
     1f0:	7f 41       	sbci	r23, 0x1F	; 31
     1f2:	40 60       	ori	r20, 0x00	; 0
     1f4:	70 00       	.word	0x0070	; ????
     1f6:	7f 7f       	andi	r23, 0xFF	; 255
     1f8:	06 0c       	add	r0, r6
     1fa:	06 7f       	andi	r16, 0xF6	; 246
     1fc:	7f 00       	.word	0x007f	; ????
     1fe:	7f 7f       	andi	r23, 0xFF	; 255
     200:	06 0c       	add	r0, r6
     202:	18 7f       	andi	r17, 0xF8	; 248
     204:	7f 00       	.word	0x007f	; ????
     206:	1c 3e       	cpi	r17, 0xEC	; 236
     208:	63 41       	sbci	r22, 0x13	; 19
     20a:	63 3e       	cpi	r22, 0xE3	; 227
     20c:	1c 00       	.word	0x001c	; ????
     20e:	41 7f       	andi	r20, 0xF1	; 241
     210:	7f 49       	sbci	r23, 0x9F	; 159
     212:	09 0f       	add	r16, r25
     214:	06 00       	.word	0x0006	; ????
     216:	1e 3f       	cpi	r17, 0xFE	; 254
     218:	21 71       	andi	r18, 0x11	; 17
     21a:	7f 5e       	subi	r23, 0xEF	; 239
     21c:	00 00       	nop
     21e:	41 7f       	andi	r20, 0xF1	; 241
     220:	7f 19       	sub	r23, r15
     222:	39 6f       	ori	r19, 0xF9	; 249
     224:	46 00       	.word	0x0046	; ????
     226:	26 67       	ori	r18, 0x76	; 118
     228:	4d 59       	subi	r20, 0x9D	; 157
     22a:	7b 32       	cpi	r23, 0x2B	; 43
     22c:	00 00       	nop
     22e:	03 41       	sbci	r16, 0x13	; 19
     230:	7f 7f       	andi	r23, 0xFF	; 255
     232:	41 03       	mulsu	r20, r17
     234:	00 00       	nop
     236:	7f 7f       	andi	r23, 0xFF	; 255
     238:	40 40       	sbci	r20, 0x00	; 0
     23a:	7f 7f       	andi	r23, 0xFF	; 255
     23c:	00 00       	nop
     23e:	1f 3f       	cpi	r17, 0xFF	; 255
     240:	60 60       	ori	r22, 0x00	; 0
     242:	3f 1f       	adc	r19, r31
     244:	00 00       	nop
     246:	7f 7f       	andi	r23, 0xFF	; 255
     248:	30 18       	sub	r3, r0
     24a:	30 7f       	andi	r19, 0xF0	; 240
     24c:	7f 00       	.word	0x007f	; ????
     24e:	63 77       	andi	r22, 0x73	; 115
     250:	1c 08       	sbc	r1, r12
     252:	1c 77       	andi	r17, 0x7C	; 124
     254:	63 00       	.word	0x0063	; ????
     256:	07 4f       	sbci	r16, 0xF7	; 247
     258:	78 78       	andi	r23, 0x88	; 136
     25a:	4f 07       	cpc	r20, r31
     25c:	00 00       	nop
     25e:	67 73       	andi	r22, 0x37	; 55
     260:	59 4d       	sbci	r21, 0xD9	; 217
     262:	47 63       	ori	r20, 0x37	; 55
     264:	71 00       	.word	0x0071	; ????
     266:	00 7f       	andi	r16, 0xF0	; 240
     268:	7f 41       	sbci	r23, 0x1F	; 31
     26a:	41 00       	.word	0x0041	; ????
     26c:	00 00       	nop
     26e:	01 03       	mulsu	r16, r17
     270:	06 0c       	add	r0, r6
     272:	18 30       	cpi	r17, 0x08	; 8
     274:	60 00       	.word	0x0060	; ????
     276:	00 41       	sbci	r16, 0x10	; 16
     278:	41 7f       	andi	r20, 0xF1	; 241
     27a:	7f 00       	.word	0x007f	; ????
     27c:	00 00       	nop
     27e:	08 0c       	add	r0, r8
     280:	06 03       	mulsu	r16, r22
     282:	06 0c       	add	r0, r6
     284:	08 00       	.word	0x0008	; ????
     286:	80 80       	ld	r8, Z
     288:	80 80       	ld	r8, Z
     28a:	80 80       	ld	r8, Z
     28c:	80 80       	ld	r8, Z
     28e:	00 00       	nop
     290:	03 07       	cpc	r16, r19
     292:	04 00       	.word	0x0004	; ????
     294:	00 00       	nop
     296:	20 74       	andi	r18, 0x40	; 64
     298:	54 54       	subi	r21, 0x44	; 68
     29a:	3c 78       	andi	r19, 0x8C	; 140
     29c:	40 00       	.word	0x0040	; ????
     29e:	41 3f       	cpi	r20, 0xF1	; 241
     2a0:	7f 44       	sbci	r23, 0x4F	; 79
     2a2:	44 7c       	andi	r20, 0xC4	; 196
     2a4:	38 00       	.word	0x0038	; ????
     2a6:	38 7c       	andi	r19, 0xC8	; 200
     2a8:	44 44       	sbci	r20, 0x44	; 68
     2aa:	6c 28       	or	r6, r12
     2ac:	00 00       	nop
     2ae:	30 78       	andi	r19, 0x80	; 128
     2b0:	48 49       	sbci	r20, 0x98	; 152
     2b2:	3f 7f       	andi	r19, 0xFF	; 255
     2b4:	40 00       	.word	0x0040	; ????
     2b6:	38 7c       	andi	r19, 0xC8	; 200
     2b8:	54 54       	subi	r21, 0x44	; 68
     2ba:	5c 18       	sub	r5, r12
     2bc:	00 00       	nop
     2be:	48 7e       	andi	r20, 0xE8	; 232
     2c0:	7f 49       	sbci	r23, 0x9F	; 159
     2c2:	03 02       	muls	r16, r19
     2c4:	00 00       	nop
     2c6:	98 bc       	out	0x28, r9	; 40
     2c8:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ca:	f8 7c       	andi	r31, 0xC8	; 200
     2cc:	04 00       	.word	0x0004	; ????
     2ce:	41 7f       	andi	r20, 0xF1	; 241
     2d0:	7f 08       	sbc	r7, r15
     2d2:	04 7c       	andi	r16, 0xC4	; 196
     2d4:	78 00       	.word	0x0078	; ????
     2d6:	00 44       	sbci	r16, 0x40	; 64
     2d8:	7d 7d       	andi	r23, 0xDD	; 221
     2da:	40 00       	.word	0x0040	; ????
     2dc:	00 00       	nop
     2de:	40 c4       	rjmp	.+2176   	; 0xb60 <Game_play+0x54>
     2e0:	84 fd       	sbrc	r24, 4
     2e2:	7d 00       	.word	0x007d	; ????
     2e4:	00 00       	nop
     2e6:	41 7f       	andi	r20, 0xF1	; 241
     2e8:	7f 10       	cpse	r7, r15
     2ea:	38 6c       	ori	r19, 0xC8	; 200
     2ec:	44 00       	.word	0x0044	; ????
     2ee:	00 41       	sbci	r16, 0x10	; 16
     2f0:	7f 7f       	andi	r23, 0xFF	; 255
     2f2:	40 00       	.word	0x0040	; ????
     2f4:	00 00       	nop
     2f6:	7c 7c       	andi	r23, 0xCC	; 204
     2f8:	0c 18       	sub	r0, r12
     2fa:	0c 7c       	andi	r16, 0xCC	; 204
     2fc:	78 00       	.word	0x0078	; ????
     2fe:	7c 7c       	andi	r23, 0xCC	; 204
     300:	04 04       	cpc	r0, r4
     302:	7c 78       	andi	r23, 0x8C	; 140
     304:	00 00       	nop
     306:	38 7c       	andi	r19, 0xC8	; 200
     308:	44 44       	sbci	r20, 0x44	; 68
     30a:	7c 38       	cpi	r23, 0x8C	; 140
     30c:	00 00       	nop
     30e:	84 fc       	sbrc	r8, 4
     310:	f8 a4       	ldd	r15, Y+40	; 0x28
     312:	24 3c       	cpi	r18, 0xC4	; 196
     314:	18 00       	.word	0x0018	; ????
     316:	18 3c       	cpi	r17, 0xC8	; 200
     318:	24 a4       	ldd	r2, Z+44	; 0x2c
     31a:	f8 fc       	.word	0xfcf8	; ????
     31c:	84 00       	.word	0x0084	; ????
     31e:	44 7c       	andi	r20, 0xC4	; 196
     320:	78 44       	sbci	r23, 0x48	; 72
     322:	1c 18       	sub	r1, r12
     324:	00 00       	nop
     326:	48 5c       	subi	r20, 0xC8	; 200
     328:	54 54       	subi	r21, 0x44	; 68
     32a:	74 24       	eor	r7, r4
     32c:	00 00       	nop
     32e:	00 04       	cpc	r0, r0
     330:	3e 7f       	andi	r19, 0xFE	; 254
     332:	44 24       	eor	r4, r4
     334:	00 00       	nop
     336:	3c 7c       	andi	r19, 0xCC	; 204
     338:	40 40       	sbci	r20, 0x00	; 0
     33a:	3c 7c       	andi	r19, 0xCC	; 204
     33c:	40 00       	.word	0x0040	; ????
     33e:	1c 3c       	cpi	r17, 0xCC	; 204
     340:	60 60       	ori	r22, 0x00	; 0
     342:	3c 1c       	adc	r3, r12
     344:	00 00       	nop
     346:	3c 7c       	andi	r19, 0xCC	; 204
     348:	60 30       	cpi	r22, 0x00	; 0
     34a:	60 7c       	andi	r22, 0xC0	; 192
     34c:	3c 00       	.word	0x003c	; ????
     34e:	44 6c       	ori	r20, 0xC4	; 196
     350:	38 10       	cpse	r3, r8
     352:	38 6c       	ori	r19, 0xC8	; 200
     354:	44 00       	.word	0x0044	; ????
     356:	9c bc       	out	0x2c, r9	; 44
     358:	a0 a0       	ldd	r10, Z+32	; 0x20
     35a:	fc 7c       	andi	r31, 0xCC	; 204
     35c:	00 00       	nop
     35e:	4c 64       	ori	r20, 0x4C	; 76
     360:	74 5c       	subi	r23, 0xC4	; 196
     362:	4c 64       	ori	r20, 0x4C	; 76
     364:	00 00       	nop
     366:	08 08       	sbc	r0, r8
     368:	3e 77       	andi	r19, 0x7E	; 126
     36a:	41 41       	sbci	r20, 0x11	; 17
     36c:	00 00       	nop
     36e:	00 00       	nop
     370:	00 77       	andi	r16, 0x70	; 112
     372:	77 00       	.word	0x0077	; ????
     374:	00 00       	nop
     376:	41 41       	sbci	r20, 0x11	; 17
     378:	77 3e       	cpi	r23, 0xE7	; 231
     37a:	08 08       	sbc	r0, r8
     37c:	00 00       	nop
     37e:	02 03       	mulsu	r16, r18
     380:	01 03       	mulsu	r16, r17
     382:	02 03       	mulsu	r16, r18
     384:	01 00       	.word	0x0001	; ????

00000386 <__ctors_end>:
     386:	11 24       	eor	r1, r1
     388:	1f be       	out	0x3f, r1	; 63
     38a:	cf ef       	ldi	r28, 0xFF	; 255
     38c:	d4 e0       	ldi	r29, 0x04	; 4
     38e:	de bf       	out	0x3e, r29	; 62
     390:	cd bf       	out	0x3d, r28	; 61

00000392 <__do_copy_data>:
     392:	12 e0       	ldi	r17, 0x02	; 2
     394:	a0 e0       	ldi	r26, 0x00	; 0
     396:	b1 e0       	ldi	r27, 0x01	; 1
     398:	e2 e5       	ldi	r30, 0x52	; 82
     39a:	f0 e3       	ldi	r31, 0x30	; 48
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <__do_copy_data+0x10>
     39e:	05 90       	lpm	r0, Z+
     3a0:	0d 92       	st	X+, r0
     3a2:	a8 3d       	cpi	r26, 0xD8	; 216
     3a4:	b1 07       	cpc	r27, r17
     3a6:	d9 f7       	brne	.-10     	; 0x39e <__do_copy_data+0xc>

000003a8 <__do_clear_bss>:
     3a8:	23 e0       	ldi	r18, 0x03	; 3
     3aa:	a8 ed       	ldi	r26, 0xD8	; 216
     3ac:	b2 e0       	ldi	r27, 0x02	; 2
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <.do_clear_bss_start>

000003b0 <.do_clear_bss_loop>:
     3b0:	1d 92       	st	X+, r1

000003b2 <.do_clear_bss_start>:
     3b2:	a3 33       	cpi	r26, 0x33	; 51
     3b4:	b2 07       	cpc	r27, r18
     3b6:	e1 f7       	brne	.-8      	; 0x3b0 <.do_clear_bss_loop>
     3b8:	0a d1       	rcall	.+532    	; 0x5ce <main>
     3ba:	0c 94 27 18 	jmp	0x304e	; 0x304e <_exit>

000003be <__bad_interrupt>:
     3be:	20 ce       	rjmp	.-960    	; 0x0 <__vectors>

000003c0 <__vector_19>:
		 {
			 //printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			 retrieval_errors++;
		 }
	 }
 }
     3c0:	1f 92       	push	r1
     3c2:	0f 92       	push	r0
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	0f 92       	push	r0
     3c8:	11 24       	eor	r1, r1
     3ca:	2f 93       	push	r18
     3cc:	3f 93       	push	r19
     3ce:	4f 93       	push	r20
     3d0:	5f 93       	push	r21
     3d2:	6f 93       	push	r22
     3d4:	7f 93       	push	r23
     3d6:	8f 93       	push	r24
     3d8:	9f 93       	push	r25
     3da:	af 93       	push	r26
     3dc:	bf 93       	push	r27
     3de:	ef 93       	push	r30
     3e0:	ff 93       	push	r31
     3e2:	0e 94 ef 10 	call	0x21de	; 0x21de <uartReceive>
     3e6:	80 93 0e 03 	sts	0x030E, r24
     3ea:	90 91 e2 02 	lds	r25, 0x02E2
     3ee:	99 23       	and	r25, r25
     3f0:	f9 f0       	breq	.+62     	; 0x430 <__vector_19+0x70>
     3f2:	90 91 e1 02 	lds	r25, 0x02E1
     3f6:	91 30       	cpi	r25, 0x01	; 1
     3f8:	61 f0       	breq	.+24     	; 0x412 <__vector_19+0x52>
     3fa:	18 f0       	brcs	.+6      	; 0x402 <__vector_19+0x42>
     3fc:	92 30       	cpi	r25, 0x02	; 2
     3fe:	89 f0       	breq	.+34     	; 0x422 <__vector_19+0x62>
     400:	17 c0       	rjmp	.+46     	; 0x430 <__vector_19+0x70>
     402:	80 93 0b 03 	sts	0x030B, r24
     406:	10 92 e2 02 	sts	0x02E2, r1
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	90 93 e0 02 	sts	0x02E0, r25
     410:	0f c0       	rjmp	.+30     	; 0x430 <__vector_19+0x70>
     412:	80 93 0c 03 	sts	0x030C, r24
     416:	10 92 e2 02 	sts	0x02E2, r1
     41a:	91 e0       	ldi	r25, 0x01	; 1
     41c:	90 93 e0 02 	sts	0x02E0, r25
     420:	07 c0       	rjmp	.+14     	; 0x430 <__vector_19+0x70>
     422:	80 93 0d 03 	sts	0x030D, r24
     426:	10 92 e2 02 	sts	0x02E2, r1
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	90 93 e0 02 	sts	0x02E0, r25
     430:	8f 3f       	cpi	r24, 0xFF	; 255
     432:	31 f4       	brne	.+12     	; 0x440 <__vector_19+0x80>
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	80 93 e2 02 	sts	0x02E2, r24
     43a:	10 92 e1 02 	sts	0x02E1, r1
     43e:	10 c0       	rjmp	.+32     	; 0x460 <__vector_19+0xa0>
     440:	8e 3f       	cpi	r24, 0xFE	; 254
     442:	31 f4       	brne	.+12     	; 0x450 <__vector_19+0x90>
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	80 93 e2 02 	sts	0x02E2, r24
     44a:	80 93 e1 02 	sts	0x02E1, r24
     44e:	08 c0       	rjmp	.+16     	; 0x460 <__vector_19+0xa0>
     450:	8d 3f       	cpi	r24, 0xFD	; 253
     452:	31 f4       	brne	.+12     	; 0x460 <__vector_19+0xa0>
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	80 93 e2 02 	sts	0x02E2, r24
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	80 93 e1 02 	sts	0x02E1, r24
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	80 93 e3 02 	sts	0x02E3, r24
     466:	ff 91       	pop	r31
     468:	ef 91       	pop	r30
     46a:	bf 91       	pop	r27
     46c:	af 91       	pop	r26
     46e:	9f 91       	pop	r25
     470:	8f 91       	pop	r24
     472:	7f 91       	pop	r23
     474:	6f 91       	pop	r22
     476:	5f 91       	pop	r21
     478:	4f 91       	pop	r20
     47a:	3f 91       	pop	r19
     47c:	2f 91       	pop	r18
     47e:	0f 90       	pop	r0
     480:	0f be       	out	0x3f, r0	; 63
     482:	0f 90       	pop	r0
     484:	1f 90       	pop	r1
     486:	18 95       	reti

00000488 <__vector_1>:
     488:	1f 92       	push	r1
     48a:	0f 92       	push	r0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	0f 92       	push	r0
     490:	11 24       	eor	r1, r1
     492:	8f 93       	push	r24
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	80 93 df 02 	sts	0x02DF, r24
     49a:	8f 91       	pop	r24
     49c:	0f 90       	pop	r0
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	0f 90       	pop	r0
     4a2:	1f 90       	pop	r1
     4a4:	18 95       	reti

000004a6 <__vector_2>:
     4a6:	1f 92       	push	r1
     4a8:	0f 92       	push	r0
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	0f 92       	push	r0
     4ae:	11 24       	eor	r1, r1
     4b0:	8f 93       	push	r24
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	80 93 de 02 	sts	0x02DE, r24
     4b8:	8f 91       	pop	r24
     4ba:	0f 90       	pop	r0
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	0f 90       	pop	r0
     4c0:	1f 90       	pop	r1
     4c2:	18 95       	reti

000004c4 <__vector_3>:
     4c4:	1f 92       	push	r1
     4c6:	0f 92       	push	r0
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	0f 92       	push	r0
     4cc:	11 24       	eor	r1, r1
     4ce:	8f 93       	push	r24
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	80 93 da 02 	sts	0x02DA, r24
     4d6:	8f 91       	pop	r24
     4d8:	0f 90       	pop	r0
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	0f 90       	pop	r0
     4de:	1f 90       	pop	r1
     4e0:	18 95       	reti

000004e2 <__vector_16>:
     4e2:	1f 92       	push	r1
     4e4:	0f 92       	push	r0
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	0f 92       	push	r0
     4ea:	11 24       	eor	r1, r1
     4ec:	2f 93       	push	r18
     4ee:	3f 93       	push	r19
     4f0:	4f 93       	push	r20
     4f2:	5f 93       	push	r21
     4f4:	6f 93       	push	r22
     4f6:	7f 93       	push	r23
     4f8:	8f 93       	push	r24
     4fa:	9f 93       	push	r25
     4fc:	af 93       	push	r26
     4fe:	bf 93       	push	r27
     500:	ef 93       	push	r30
     502:	ff 93       	push	r31
     504:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <OLED_updateScreen>
     508:	80 91 d9 02 	lds	r24, 0x02D9
     50c:	8f 5f       	subi	r24, 0xFF	; 255
     50e:	80 93 d9 02 	sts	0x02D9, r24
     512:	80 91 d8 02 	lds	r24, 0x02D8
     516:	8f 5f       	subi	r24, 0xFF	; 255
     518:	80 93 d8 02 	sts	0x02D8, r24
     51c:	80 91 d9 02 	lds	r24, 0x02D9
     520:	82 30       	cpi	r24, 0x02	; 2
     522:	21 f4       	brne	.+8      	; 0x52c <__stack+0x2d>
     524:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <OLED_setAnimationTick>
     528:	10 92 d9 02 	sts	0x02D9, r1
     52c:	ff 91       	pop	r31
     52e:	ef 91       	pop	r30
     530:	bf 91       	pop	r27
     532:	af 91       	pop	r26
     534:	9f 91       	pop	r25
     536:	8f 91       	pop	r24
     538:	7f 91       	pop	r23
     53a:	6f 91       	pop	r22
     53c:	5f 91       	pop	r21
     53e:	4f 91       	pop	r20
     540:	3f 91       	pop	r19
     542:	2f 91       	pop	r18
     544:	0f 90       	pop	r0
     546:	0f be       	out	0x3f, r0	; 63
     548:	0f 90       	pop	r0
     54a:	1f 90       	pop	r1
     54c:	18 95       	reti

0000054e <init>:

 void init()
 {
     54e:	ef 92       	push	r14
     550:	ff 92       	push	r15
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
	 // call initialization subroutines
	 uartInit(BAUDRATE, FOSC, UBRR); printf("\n======================STARTUP==========================\n");
     556:	1f e1       	ldi	r17, 0x1F	; 31
     558:	e1 2e       	mov	r14, r17
     55a:	f1 2c       	mov	r15, r1
     55c:	00 e0       	ldi	r16, 0x00	; 0
     55e:	10 e0       	ldi	r17, 0x00	; 0
     560:	20 e0       	ldi	r18, 0x00	; 0
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	4b e4       	ldi	r20, 0x4B	; 75
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	60 e8       	ldi	r22, 0x80	; 128
     56a:	75 e2       	ldi	r23, 0x25	; 37
     56c:	80 e0       	ldi	r24, 0x00	; 0
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <uartInit>
     574:	8a e4       	ldi	r24, 0x4A	; 74
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <puts>
	 enableXMEM(1);
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	07 d2       	rcall	.+1038   	; 0x98e <enableXMEM>
	 SLI_init();
     580:	0e 94 7e 10 	call	0x20fc	; 0x20fc <SLI_init>
	 JOY_init();
     584:	cf d3       	rcall	.+1950   	; 0xd24 <JOY_init>
	 OLED_init();
     586:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <OLED_init>
	 SPI_init();
     58a:	0e 94 ca 10 	call	0x2194	; 0x2194 <SPI_init>
	 MCP2515_init();
     58e:	d7 d5       	rcall	.+2990   	; 0x113e <MCP2515_init>
	 CAN_init();
     590:	5b d0       	rcall	.+182    	; 0x648 <CAN_init>
	 
	 // setup interrupts
	 // init external interrupt INT0 on falling edge
	 set_bit(GICR, INT0);
     592:	8b b7       	in	r24, 0x3b	; 59
     594:	80 64       	ori	r24, 0x40	; 64
     596:	8b bf       	out	0x3b, r24	; 59
	 set_bit(MCUCR, ISC01);
     598:	85 b7       	in	r24, 0x35	; 53
     59a:	82 60       	ori	r24, 0x02	; 2
     59c:	85 bf       	out	0x35, r24	; 53
	 clear_bit(MCUCR, ISC00);
     59e:	85 b7       	in	r24, 0x35	; 53
     5a0:	8e 7f       	andi	r24, 0xFE	; 254
     5a2:	85 bf       	out	0x35, r24	; 53
	 
	 // Pull-up on PD3
	 clear_bit(DDRD, PD3);
     5a4:	8b 98       	cbi	0x11, 3	; 17
	 set_bit(PORTD, PD3);
     5a6:	93 9a       	sbi	0x12, 3	; 18
	 
	 // init external interrupt INT1 on falling edge
	 set_bit(GICR, INT1);
     5a8:	8b b7       	in	r24, 0x3b	; 59
     5aa:	80 68       	ori	r24, 0x80	; 128
     5ac:	8b bf       	out	0x3b, r24	; 59
	 set_bit(MCUCR, ISC11);
     5ae:	85 b7       	in	r24, 0x35	; 53
     5b0:	88 60       	ori	r24, 0x08	; 8
     5b2:	85 bf       	out	0x35, r24	; 53
	 clear_bit(MCUCR, ISC10);
     5b4:	85 b7       	in	r24, 0x35	; 53
     5b6:	8b 7f       	andi	r24, 0xFB	; 251
     5b8:	85 bf       	out	0x35, r24	; 53
	 
	 // PE2
	 clear_bit(DDRE, PE2);
     5ba:	32 98       	cbi	0x06, 2	; 6
	 clear_bit(PORTE, PE2);
     5bc:	3a 98       	cbi	0x07, 2	; 7
	 // PB0
	 clear_bit(DDRB, PB0);
     5be:	b8 98       	cbi	0x17, 0	; 23
	 clear_bit(PORTB, PB0);
     5c0:	c0 98       	cbi	0x18, 0	; 24

	 // activate interrupts
	 sei();
     5c2:	78 94       	sei
 }
     5c4:	1f 91       	pop	r17
     5c6:	0f 91       	pop	r16
     5c8:	ff 90       	pop	r15
     5ca:	ef 90       	pop	r14
     5cc:	08 95       	ret

000005ce <main>:
*/

int main(void)
{
	
	init();
     5ce:	bf df       	rcall	.-130    	; 0x54e <init>
	
    while(1)
    {
		if(activateMenuFlag && menuAlreadyBuiltFlag == 0)
		{
			activeState = MENU;
     5d0:	11 e0       	ldi	r17, 0x01	; 1
			MENU_activate(&activeState, &inputMode);

			menuAlreadyBuiltFlag = 1;
     5d2:	c1 e0       	ldi	r28, 0x01	; 1
     5d4:	d0 e0       	ldi	r29, 0x00	; 0
		if(activeState == GAME)
		{
			Game_init();
			
			Game_play(&SPIreceivedFlag, &updateCmdDispFlag, &uartMouseSteeringMessage, &inputMode);
			activeState = IDLE;
     5d6:	02 e0       	ldi	r16, 0x02	; 2
	
	init();
	
    while(1)
    {
		if(activateMenuFlag && menuAlreadyBuiltFlag == 0)
     5d8:	80 91 de 02 	lds	r24, 0x02DE
     5dc:	88 23       	and	r24, r24
     5de:	a1 f0       	breq	.+40     	; 0x608 <main+0x3a>
     5e0:	80 91 db 02 	lds	r24, 0x02DB
     5e4:	90 91 dc 02 	lds	r25, 0x02DC
     5e8:	89 2b       	or	r24, r25
     5ea:	71 f4       	brne	.+28     	; 0x608 <main+0x3a>
		{
			activeState = MENU;
     5ec:	10 93 08 01 	sts	0x0108, r17
			MENU_activate(&activeState, &inputMode);
     5f0:	6d ed       	ldi	r22, 0xDD	; 221
     5f2:	72 e0       	ldi	r23, 0x02	; 2
     5f4:	88 e0       	ldi	r24, 0x08	; 8
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	0e 94 29 0b 	call	0x1652	; 0x1652 <MENU_activate>

			menuAlreadyBuiltFlag = 1;
     5fc:	d0 93 dc 02 	sts	0x02DC, r29
     600:	c0 93 db 02 	sts	0x02DB, r28
			activateMenuFlag = 0;
     604:	10 92 de 02 	sts	0x02DE, r1
		}

		if(activateMenuFlag && menuAlreadyBuiltFlag == 1)
     608:	80 91 de 02 	lds	r24, 0x02DE
     60c:	88 23       	and	r24, r24
     60e:	59 f0       	breq	.+22     	; 0x626 <main+0x58>
     610:	80 91 db 02 	lds	r24, 0x02DB
     614:	90 91 dc 02 	lds	r25, 0x02DC
     618:	01 97       	sbiw	r24, 0x01	; 1
     61a:	29 f4       	brne	.+10     	; 0x626 <main+0x58>
		{
			activeState = MENU;
     61c:	10 93 08 01 	sts	0x0108, r17
			MENU_reactivate();	
     620:	ca d7       	rcall	.+3988   	; 0x15b6 <MENU_reactivate>
			activateMenuFlag = 0;
     622:	10 92 de 02 	sts	0x02DE, r1
		}
		
		if(activeState == GAME)
     626:	80 91 08 01 	lds	r24, 0x0108
     62a:	81 11       	cpse	r24, r1
     62c:	d5 cf       	rjmp	.-86     	; 0x5d8 <main+0xa>
		{
			Game_init();
     62e:	c1 d1       	rcall	.+898    	; 0x9b2 <Game_init>
			
			Game_play(&SPIreceivedFlag, &updateCmdDispFlag, &uartMouseSteeringMessage, &inputMode);
     630:	2d ed       	ldi	r18, 0xDD	; 221
     632:	32 e0       	ldi	r19, 0x02	; 2
     634:	4b e0       	ldi	r20, 0x0B	; 11
     636:	53 e0       	ldi	r21, 0x03	; 3
     638:	60 ee       	ldi	r22, 0xE0	; 224
     63a:	72 e0       	ldi	r23, 0x02	; 2
     63c:	8a ed       	ldi	r24, 0xDA	; 218
     63e:	92 e0       	ldi	r25, 0x02	; 2
     640:	65 d2       	rcall	.+1226   	; 0xb0c <Game_play>
			activeState = IDLE;
     642:	00 93 08 01 	sts	0x0108, r16
     646:	c8 cf       	rjmp	.-112    	; 0x5d8 <main+0xa>

00000648 <CAN_init>:
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	cd b7       	in	r28, 0x3d	; 61
     64e:	de b7       	in	r29, 0x3e	; 62
     650:	43 e0       	ldi	r20, 0x03	; 3
     652:	6b e2       	ldi	r22, 0x2B	; 43
     654:	80 e0       	ldi	r24, 0x00	; 0
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	7e d5       	rcall	.+2812   	; 0x1156 <MCP2515_write>
     65a:	40 e6       	ldi	r20, 0x60	; 96
     65c:	60 e6       	ldi	r22, 0x60	; 96
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	79 d5       	rcall	.+2802   	; 0x1156 <MCP2515_write>
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	40 e8       	ldi	r20, 0x80	; 128
     668:	6f e0       	ldi	r22, 0x0F	; 15
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	8b d5       	rcall	.+2838   	; 0x1186 <MCP2515_bitModify>
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	08 95       	ret

00000676 <CAN_sendMessage>:
     676:	cf 93       	push	r28
     678:	df 93       	push	r29
     67a:	cd b7       	in	r28, 0x3d	; 61
     67c:	de b7       	in	r29, 0x3e	; 62
     67e:	27 97       	sbiw	r28, 0x07	; 7
     680:	0f b6       	in	r0, 0x3f	; 63
     682:	f8 94       	cli
     684:	de bf       	out	0x3e, r29	; 62
     686:	0f be       	out	0x3f, r0	; 63
     688:	cd bf       	out	0x3d, r28	; 61
     68a:	9e 83       	std	Y+6, r25	; 0x06
     68c:	8d 83       	std	Y+5, r24	; 0x05
     68e:	6f 83       	std	Y+7, r22	; 0x07
     690:	8f 81       	ldd	r24, Y+7	; 0x07
     692:	88 2f       	mov	r24, r24
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	00 97       	sbiw	r24, 0x00	; 0
     698:	09 f0       	breq	.+2      	; 0x69c <CAN_sendMessage+0x26>
     69a:	4d c0       	rjmp	.+154    	; 0x736 <CAN_sendMessage+0xc0>
     69c:	8d 81       	ldd	r24, Y+5	; 0x05
     69e:	9e 81       	ldd	r25, Y+6	; 0x06
     6a0:	fc 01       	movw	r30, r24
     6a2:	80 81       	ld	r24, Z
     6a4:	91 81       	ldd	r25, Z+1	; 0x01
     6a6:	9c 83       	std	Y+4, r25	; 0x04
     6a8:	8b 83       	std	Y+3, r24	; 0x03
     6aa:	8b 81       	ldd	r24, Y+3	; 0x03
     6ac:	82 95       	swap	r24
     6ae:	88 0f       	add	r24, r24
     6b0:	80 7e       	andi	r24, 0xE0	; 224
     6b2:	48 2f       	mov	r20, r24
     6b4:	62 e3       	ldi	r22, 0x32	; 50
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	4d d5       	rcall	.+2714   	; 0x1156 <MCP2515_write>
     6bc:	8b 81       	ldd	r24, Y+3	; 0x03
     6be:	9c 81       	ldd	r25, Y+4	; 0x04
     6c0:	96 95       	lsr	r25
     6c2:	87 95       	ror	r24
     6c4:	96 95       	lsr	r25
     6c6:	87 95       	ror	r24
     6c8:	96 95       	lsr	r25
     6ca:	87 95       	ror	r24
     6cc:	48 2f       	mov	r20, r24
     6ce:	61 e3       	ldi	r22, 0x31	; 49
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	40 d5       	rcall	.+2688   	; 0x1156 <MCP2515_write>
     6d6:	8d 81       	ldd	r24, Y+5	; 0x05
     6d8:	9e 81       	ldd	r25, Y+6	; 0x06
     6da:	fc 01       	movw	r30, r24
     6dc:	82 81       	ldd	r24, Z+2	; 0x02
     6de:	48 2f       	mov	r20, r24
     6e0:	65 e3       	ldi	r22, 0x35	; 53
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	37 d5       	rcall	.+2670   	; 0x1156 <MCP2515_write>
     6e8:	86 e3       	ldi	r24, 0x36	; 54
     6ea:	89 83       	std	Y+1, r24	; 0x01
     6ec:	1a 82       	std	Y+2, r1	; 0x02
     6ee:	15 c0       	rjmp	.+42     	; 0x71a <CAN_sendMessage+0xa4>
     6f0:	8a 81       	ldd	r24, Y+2	; 0x02
     6f2:	88 2f       	mov	r24, r24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	2d 81       	ldd	r18, Y+5	; 0x05
     6f8:	3e 81       	ldd	r19, Y+6	; 0x06
     6fa:	82 0f       	add	r24, r18
     6fc:	93 1f       	adc	r25, r19
     6fe:	03 96       	adiw	r24, 0x03	; 3
     700:	fc 01       	movw	r30, r24
     702:	80 81       	ld	r24, Z
     704:	48 2f       	mov	r20, r24
     706:	69 81       	ldd	r22, Y+1	; 0x01
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	24 d5       	rcall	.+2632   	; 0x1156 <MCP2515_write>
     70e:	89 81       	ldd	r24, Y+1	; 0x01
     710:	8f 5f       	subi	r24, 0xFF	; 255
     712:	89 83       	std	Y+1, r24	; 0x01
     714:	8a 81       	ldd	r24, Y+2	; 0x02
     716:	8f 5f       	subi	r24, 0xFF	; 255
     718:	8a 83       	std	Y+2, r24	; 0x02
     71a:	8d 81       	ldd	r24, Y+5	; 0x05
     71c:	9e 81       	ldd	r25, Y+6	; 0x06
     71e:	fc 01       	movw	r30, r24
     720:	92 81       	ldd	r25, Z+2	; 0x02
     722:	8a 81       	ldd	r24, Y+2	; 0x02
     724:	89 17       	cp	r24, r25
     726:	20 f3       	brcs	.-56     	; 0x6f0 <CAN_sendMessage+0x7a>
     728:	2f ef       	ldi	r18, 0xFF	; 255
     72a:	48 e0       	ldi	r20, 0x08	; 8
     72c:	60 e3       	ldi	r22, 0x30	; 48
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	29 d5       	rcall	.+2642   	; 0x1186 <MCP2515_bitModify>
     734:	00 00       	nop
     736:	27 96       	adiw	r28, 0x07	; 7
     738:	0f b6       	in	r0, 0x3f	; 63
     73a:	f8 94       	cli
     73c:	de bf       	out	0x3e, r29	; 62
     73e:	0f be       	out	0x3f, r0	; 63
     740:	cd bf       	out	0x3d, r28	; 61
     742:	df 91       	pop	r29
     744:	cf 91       	pop	r28
     746:	08 95       	ret

00000748 <CAN_receiveMessage>:
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	cd b7       	in	r28, 0x3d	; 61
     752:	de b7       	in	r29, 0x3e	; 62
     754:	61 97       	sbiw	r28, 0x11	; 17
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
     760:	98 8b       	std	Y+16, r25	; 0x10
     762:	8f 87       	std	Y+15, r24	; 0x0f
     764:	69 8b       	std	Y+17, r22	; 0x11
     766:	89 89       	ldd	r24, Y+17	; 0x11
     768:	88 2f       	mov	r24, r24
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	82 30       	cpi	r24, 0x02	; 2
     76e:	91 05       	cpc	r25, r1
     770:	09 f4       	brne	.+2      	; 0x774 <CAN_receiveMessage+0x2c>
     772:	57 c0       	rjmp	.+174    	; 0x822 <CAN_receiveMessage+0xda>
     774:	83 30       	cpi	r24, 0x03	; 3
     776:	91 05       	cpc	r25, r1
     778:	21 f0       	breq	.+8      	; 0x782 <CAN_receiveMessage+0x3a>
     77a:	81 30       	cpi	r24, 0x01	; 1
     77c:	91 05       	cpc	r25, r1
     77e:	09 f0       	breq	.+2      	; 0x782 <CAN_receiveMessage+0x3a>
     780:	9f c0       	rjmp	.+318    	; 0x8c0 <CAN_receiveMessage+0x178>
     782:	61 e6       	ldi	r22, 0x61	; 97
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	be d4       	rcall	.+2428   	; 0x1106 <MCP2515_read>
     78a:	88 2f       	mov	r24, r24
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	9d 83       	std	Y+5, r25	; 0x05
     790:	8c 83       	std	Y+4, r24	; 0x04
     792:	8c 81       	ldd	r24, Y+4	; 0x04
     794:	9d 81       	ldd	r25, Y+5	; 0x05
     796:	8c 01       	movw	r16, r24
     798:	00 0f       	add	r16, r16
     79a:	11 1f       	adc	r17, r17
     79c:	00 0f       	add	r16, r16
     79e:	11 1f       	adc	r17, r17
     7a0:	00 0f       	add	r16, r16
     7a2:	11 1f       	adc	r17, r17
     7a4:	62 e6       	ldi	r22, 0x62	; 98
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	ad d4       	rcall	.+2394   	; 0x1106 <MCP2515_read>
     7ac:	82 95       	swap	r24
     7ae:	86 95       	lsr	r24
     7b0:	87 70       	andi	r24, 0x07	; 7
     7b2:	88 2f       	mov	r24, r24
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	80 2b       	or	r24, r16
     7b8:	91 2b       	or	r25, r17
     7ba:	9d 83       	std	Y+5, r25	; 0x05
     7bc:	8c 83       	std	Y+4, r24	; 0x04
     7be:	65 e6       	ldi	r22, 0x65	; 101
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	a0 d4       	rcall	.+2368   	; 0x1106 <MCP2515_read>
     7c6:	8e 83       	std	Y+6, r24	; 0x06
     7c8:	86 e6       	ldi	r24, 0x66	; 102
     7ca:	89 83       	std	Y+1, r24	; 0x01
     7cc:	1a 82       	std	Y+2, r1	; 0x02
     7ce:	14 c0       	rjmp	.+40     	; 0x7f8 <CAN_receiveMessage+0xb0>
     7d0:	8a 81       	ldd	r24, Y+2	; 0x02
     7d2:	08 2f       	mov	r16, r24
     7d4:	10 e0       	ldi	r17, 0x00	; 0
     7d6:	69 81       	ldd	r22, Y+1	; 0x01
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	94 d4       	rcall	.+2344   	; 0x1106 <MCP2515_read>
     7de:	28 2f       	mov	r18, r24
     7e0:	ce 01       	movw	r24, r28
     7e2:	07 96       	adiw	r24, 0x07	; 7
     7e4:	80 0f       	add	r24, r16
     7e6:	91 1f       	adc	r25, r17
     7e8:	fc 01       	movw	r30, r24
     7ea:	20 83       	st	Z, r18
     7ec:	89 81       	ldd	r24, Y+1	; 0x01
     7ee:	8f 5f       	subi	r24, 0xFF	; 255
     7f0:	89 83       	std	Y+1, r24	; 0x01
     7f2:	8a 81       	ldd	r24, Y+2	; 0x02
     7f4:	8f 5f       	subi	r24, 0xFF	; 255
     7f6:	8a 83       	std	Y+2, r24	; 0x02
     7f8:	9e 81       	ldd	r25, Y+6	; 0x06
     7fa:	8a 81       	ldd	r24, Y+2	; 0x02
     7fc:	89 17       	cp	r24, r25
     7fe:	40 f3       	brcs	.-48     	; 0x7d0 <CAN_receiveMessage+0x88>
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	41 e0       	ldi	r20, 0x01	; 1
     804:	6c e2       	ldi	r22, 0x2C	; 44
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	bd d4       	rcall	.+2426   	; 0x1186 <MCP2515_bitModify>
     80c:	8f 85       	ldd	r24, Y+15	; 0x0f
     80e:	98 89       	ldd	r25, Y+16	; 0x10
     810:	2b e0       	ldi	r18, 0x0B	; 11
     812:	fe 01       	movw	r30, r28
     814:	34 96       	adiw	r30, 0x04	; 4
     816:	dc 01       	movw	r26, r24
     818:	01 90       	ld	r0, Z+
     81a:	0d 92       	st	X+, r0
     81c:	2a 95       	dec	r18
     81e:	e1 f7       	brne	.-8      	; 0x818 <CAN_receiveMessage+0xd0>
     820:	4f c0       	rjmp	.+158    	; 0x8c0 <CAN_receiveMessage+0x178>
     822:	61 e7       	ldi	r22, 0x71	; 113
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	6e d4       	rcall	.+2268   	; 0x1106 <MCP2515_read>
     82a:	88 2f       	mov	r24, r24
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	9d 83       	std	Y+5, r25	; 0x05
     830:	8c 83       	std	Y+4, r24	; 0x04
     832:	8c 81       	ldd	r24, Y+4	; 0x04
     834:	9d 81       	ldd	r25, Y+5	; 0x05
     836:	8c 01       	movw	r16, r24
     838:	00 0f       	add	r16, r16
     83a:	11 1f       	adc	r17, r17
     83c:	00 0f       	add	r16, r16
     83e:	11 1f       	adc	r17, r17
     840:	00 0f       	add	r16, r16
     842:	11 1f       	adc	r17, r17
     844:	62 e7       	ldi	r22, 0x72	; 114
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	5d d4       	rcall	.+2234   	; 0x1106 <MCP2515_read>
     84c:	82 95       	swap	r24
     84e:	86 95       	lsr	r24
     850:	87 70       	andi	r24, 0x07	; 7
     852:	88 2f       	mov	r24, r24
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	80 2b       	or	r24, r16
     858:	91 2b       	or	r25, r17
     85a:	9d 83       	std	Y+5, r25	; 0x05
     85c:	8c 83       	std	Y+4, r24	; 0x04
     85e:	65 e7       	ldi	r22, 0x75	; 117
     860:	80 e0       	ldi	r24, 0x00	; 0
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	50 d4       	rcall	.+2208   	; 0x1106 <MCP2515_read>
     866:	8e 83       	std	Y+6, r24	; 0x06
     868:	86 e7       	ldi	r24, 0x76	; 118
     86a:	89 83       	std	Y+1, r24	; 0x01
     86c:	1b 82       	std	Y+3, r1	; 0x03
     86e:	14 c0       	rjmp	.+40     	; 0x898 <CAN_receiveMessage+0x150>
     870:	8b 81       	ldd	r24, Y+3	; 0x03
     872:	08 2f       	mov	r16, r24
     874:	10 e0       	ldi	r17, 0x00	; 0
     876:	69 81       	ldd	r22, Y+1	; 0x01
     878:	80 e0       	ldi	r24, 0x00	; 0
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	44 d4       	rcall	.+2184   	; 0x1106 <MCP2515_read>
     87e:	28 2f       	mov	r18, r24
     880:	ce 01       	movw	r24, r28
     882:	07 96       	adiw	r24, 0x07	; 7
     884:	80 0f       	add	r24, r16
     886:	91 1f       	adc	r25, r17
     888:	fc 01       	movw	r30, r24
     88a:	20 83       	st	Z, r18
     88c:	89 81       	ldd	r24, Y+1	; 0x01
     88e:	8f 5f       	subi	r24, 0xFF	; 255
     890:	89 83       	std	Y+1, r24	; 0x01
     892:	8b 81       	ldd	r24, Y+3	; 0x03
     894:	8f 5f       	subi	r24, 0xFF	; 255
     896:	8b 83       	std	Y+3, r24	; 0x03
     898:	9e 81       	ldd	r25, Y+6	; 0x06
     89a:	8b 81       	ldd	r24, Y+3	; 0x03
     89c:	89 17       	cp	r24, r25
     89e:	40 f3       	brcs	.-48     	; 0x870 <CAN_receiveMessage+0x128>
     8a0:	20 e0       	ldi	r18, 0x00	; 0
     8a2:	42 e0       	ldi	r20, 0x02	; 2
     8a4:	6c e2       	ldi	r22, 0x2C	; 44
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	6d d4       	rcall	.+2266   	; 0x1186 <MCP2515_bitModify>
     8ac:	8f 85       	ldd	r24, Y+15	; 0x0f
     8ae:	98 89       	ldd	r25, Y+16	; 0x10
     8b0:	2b e0       	ldi	r18, 0x0B	; 11
     8b2:	fe 01       	movw	r30, r28
     8b4:	34 96       	adiw	r30, 0x04	; 4
     8b6:	dc 01       	movw	r26, r24
     8b8:	01 90       	ld	r0, Z+
     8ba:	0d 92       	st	X+, r0
     8bc:	2a 95       	dec	r18
     8be:	e1 f7       	brne	.-8      	; 0x8b8 <CAN_receiveMessage+0x170>
     8c0:	8f 85       	ldd	r24, Y+15	; 0x0f
     8c2:	98 89       	ldd	r25, Y+16	; 0x10
     8c4:	61 96       	adiw	r28, 0x11	; 17
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	df 91       	pop	r29
     8d2:	cf 91       	pop	r28
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	08 95       	ret

000008da <CAN_printMessage>:
     8da:	cf 93       	push	r28
     8dc:	df 93       	push	r29
     8de:	00 d0       	rcall	.+0      	; 0x8e0 <CAN_printMessage+0x6>
     8e0:	1f 92       	push	r1
     8e2:	cd b7       	in	r28, 0x3d	; 61
     8e4:	de b7       	in	r29, 0x3e	; 62
     8e6:	9b 83       	std	Y+3, r25	; 0x03
     8e8:	8a 83       	std	Y+2, r24	; 0x02
     8ea:	8a 81       	ldd	r24, Y+2	; 0x02
     8ec:	9b 81       	ldd	r25, Y+3	; 0x03
     8ee:	fc 01       	movw	r30, r24
     8f0:	82 81       	ldd	r24, Z+2	; 0x02
     8f2:	28 2f       	mov	r18, r24
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	8a 81       	ldd	r24, Y+2	; 0x02
     8f8:	9b 81       	ldd	r25, Y+3	; 0x03
     8fa:	fc 01       	movw	r30, r24
     8fc:	80 81       	ld	r24, Z
     8fe:	91 81       	ldd	r25, Z+1	; 0x01
     900:	43 2f       	mov	r20, r19
     902:	4f 93       	push	r20
     904:	2f 93       	push	r18
     906:	29 2f       	mov	r18, r25
     908:	2f 93       	push	r18
     90a:	8f 93       	push	r24
     90c:	8a e1       	ldi	r24, 0x1A	; 26
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	89 2f       	mov	r24, r25
     912:	8f 93       	push	r24
     914:	8a e1       	ldi	r24, 0x1A	; 26
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	8f 93       	push	r24
     91a:	0e 94 04 15 	call	0x2a08	; 0x2a08 <printf>
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
     92a:	19 82       	std	Y+1, r1	; 0x01
     92c:	1f c0       	rjmp	.+62     	; 0x96c <CAN_printMessage+0x92>
     92e:	89 81       	ldd	r24, Y+1	; 0x01
     930:	88 2f       	mov	r24, r24
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	2a 81       	ldd	r18, Y+2	; 0x02
     936:	3b 81       	ldd	r19, Y+3	; 0x03
     938:	82 0f       	add	r24, r18
     93a:	93 1f       	adc	r25, r19
     93c:	03 96       	adiw	r24, 0x03	; 3
     93e:	fc 01       	movw	r30, r24
     940:	80 81       	ld	r24, Z
     942:	88 2f       	mov	r24, r24
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	29 2f       	mov	r18, r25
     948:	2f 93       	push	r18
     94a:	8f 93       	push	r24
     94c:	86 e4       	ldi	r24, 0x46	; 70
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	89 2f       	mov	r24, r25
     952:	8f 93       	push	r24
     954:	86 e4       	ldi	r24, 0x46	; 70
     956:	91 e0       	ldi	r25, 0x01	; 1
     958:	8f 93       	push	r24
     95a:	0e 94 04 15 	call	0x2a08	; 0x2a08 <printf>
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	0f 90       	pop	r0
     964:	0f 90       	pop	r0
     966:	89 81       	ldd	r24, Y+1	; 0x01
     968:	8f 5f       	subi	r24, 0xFF	; 255
     96a:	89 83       	std	Y+1, r24	; 0x01
     96c:	8a 81       	ldd	r24, Y+2	; 0x02
     96e:	9b 81       	ldd	r25, Y+3	; 0x03
     970:	fc 01       	movw	r30, r24
     972:	92 81       	ldd	r25, Z+2	; 0x02
     974:	89 81       	ldd	r24, Y+1	; 0x01
     976:	89 17       	cp	r24, r25
     978:	d0 f2       	brcs	.-76     	; 0x92e <CAN_printMessage+0x54>
     97a:	8a e0       	ldi	r24, 0x0A	; 10
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <putchar>
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	08 95       	ret

0000098e <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     98e:	95 b7       	in	r25, 0x35	; 53
     990:	90 68       	ori	r25, 0x80	; 128
     992:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     994:	96 b7       	in	r25, 0x36	; 54
     996:	98 60       	ori	r25, 0x08	; 8
     998:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     99a:	88 23       	and	r24, r24
     99c:	19 f0       	breq	.+6      	; 0x9a4 <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     99e:	80 b7       	in	r24, 0x30	; 48
     9a0:	80 62       	ori	r24, 0x20	; 32
     9a2:	80 bf       	out	0x30, r24	; 48
     9a4:	08 95       	ret

000009a6 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     9a6:	fc 01       	movw	r30, r24
     9a8:	80 81       	ld	r24, Z
	return val;
}
     9aa:	08 95       	ret

000009ac <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     9ac:	fc 01       	movw	r30, r24
     9ae:	60 83       	st	Z, r22
     9b0:	08 95       	ret

000009b2 <Game_init>:
static uint8_t JoyPos;
static uint8_t SliPos;
static uint8_t ButtonRight;

void Game_init()
{
     9b2:	0f 93       	push	r16
     9b4:	1f 93       	push	r17
     9b6:	cf 93       	push	r28
     9b8:	df 93       	push	r29
	// declare score and lives
	score = 0;
     9ba:	10 92 e9 02 	sts	0x02E9, r1
     9be:	10 92 e8 02 	sts	0x02E8, r1
	lives = 3;
     9c2:	83 e0       	ldi	r24, 0x03	; 3
     9c4:	80 93 e7 02 	sts	0x02E7, r24
	
	// write Title to Screen
	OLED_clear();
     9c8:	cd d6       	rcall	.+3482   	; 0x1764 <OLED_clear>
     9ca:	64 e0       	ldi	r22, 0x04	; 4
	OLED_bufferGoto(0,4);
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	1f d7       	rcall	.+3646   	; 0x1812 <OLED_bufferGoto>
     9d4:	83 e8       	ldi	r24, 0x83	; 131
     9d6:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("** Ping-Pong **");
     9d8:	7b d7       	rcall	.+3830   	; 0x18d0 <OLED_printString>
     9da:	63 e1       	ldi	r22, 0x13	; 19
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	83 e0       	ldi	r24, 0x03	; 3
		
	// write to Screen
	OLED_bufferGoto(3,LIVES_POS-16);
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	17 d7       	rcall	.+3630   	; 0x1812 <OLED_bufferGoto>
     9e4:	83 e9       	ldi	r24, 0x93	; 147
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	73 d7       	rcall	.+3814   	; 0x18d0 <OLED_printString>
     9ea:	6c e4       	ldi	r22, 0x4C	; 76
	OLED_printString("Lives");
     9ec:	70 e0       	ldi	r23, 0x00	; 0
     9ee:	83 e0       	ldi	r24, 0x03	; 3
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	0f d7       	rcall	.+3614   	; 0x1812 <OLED_bufferGoto>
	OLED_bufferGoto(3,SCORE_POS-8);
     9f4:	89 e9       	ldi	r24, 0x99	; 153
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	6b d7       	rcall	.+3798   	; 0x18d0 <OLED_printString>
     9fa:	63 e2       	ldi	r22, 0x23	; 35
     9fc:	70 e0       	ldi	r23, 0x00	; 0
     9fe:	85 e0       	ldi	r24, 0x05	; 5
	OLED_printString("Score");
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	07 d7       	rcall	.+3598   	; 0x1812 <OLED_bufferGoto>
     a04:	80 91 e7 02 	lds	r24, 0x02E7
		
	// write Numbers
	OLED_bufferGoto(5, LIVES_POS);
     a08:	1f 92       	push	r1
     a0a:	8f 93       	push	r24
     a0c:	0f e9       	ldi	r16, 0x9F	; 159
     a0e:	11 e0       	ldi	r17, 0x01	; 1
     a10:	1f 93       	push	r17
     a12:	0f 93       	push	r16
	sprintf(str, "%d", lives);
     a14:	ca ee       	ldi	r28, 0xEA	; 234
     a16:	d2 e0       	ldi	r29, 0x02	; 2
     a18:	df 93       	push	r29
     a1a:	cf 93       	push	r28
     a1c:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <sprintf>
     a20:	ce 01       	movw	r24, r28
     a22:	56 d7       	rcall	.+3756   	; 0x18d0 <OLED_printString>
     a24:	64 e5       	ldi	r22, 0x54	; 84
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	85 e0       	ldi	r24, 0x05	; 5
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	f2 d6       	rcall	.+3556   	; 0x1812 <OLED_bufferGoto>
     a2e:	80 91 e9 02 	lds	r24, 0x02E9
	OLED_printString(str);
     a32:	8f 93       	push	r24
     a34:	80 91 e8 02 	lds	r24, 0x02E8
	OLED_bufferGoto(5, SCORE_POS);
     a38:	8f 93       	push	r24
     a3a:	1f 93       	push	r17
     a3c:	0f 93       	push	r16
     a3e:	df 93       	push	r29
     a40:	cf 93       	push	r28
	sprintf(str, "%d", score);
     a42:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <sprintf>
     a46:	ce 01       	movw	r24, r28
     a48:	43 d7       	rcall	.+3718   	; 0x18d0 <OLED_printString>
     a4a:	8d b7       	in	r24, 0x3d	; 61
     a4c:	9e b7       	in	r25, 0x3e	; 62
     a4e:	0c 96       	adiw	r24, 0x0c	; 12
     a50:	0f b6       	in	r0, 0x3f	; 63
     a52:	f8 94       	cli
     a54:	9e bf       	out	0x3e, r25	; 62
     a56:	0f be       	out	0x3f, r0	; 63
     a58:	8d bf       	out	0x3d, r24	; 61
	OLED_printString(str);	
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	1f 91       	pop	r17
     a60:	0f 91       	pop	r16
     a62:	08 95       	ret

00000a64 <Game_updateLives>:
     a64:	80 91 e7 02 	lds	r24, 0x02E7
     a68:	81 50       	subi	r24, 0x01	; 1
     a6a:	80 93 e7 02 	sts	0x02E7, r24
     a6e:	63 e2       	ldi	r22, 0x23	; 35
}
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	85 e0       	ldi	r24, 0x05	; 5
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	cd d6       	rcall	.+3482   	; 0x1812 <OLED_bufferGoto>
     a78:	80 91 e7 02 	lds	r24, 0x02E7

void Game_updateLives()
{
	lives--;
	OLED_bufferGoto(5, LIVES_POS);
	sprintf(str, "%d", lives);
     a7c:	1f 92       	push	r1
     a7e:	8f 93       	push	r24
     a80:	8f e9       	ldi	r24, 0x9F	; 159
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	9f 93       	push	r25
     a86:	8f 93       	push	r24
     a88:	8a ee       	ldi	r24, 0xEA	; 234
     a8a:	92 e0       	ldi	r25, 0x02	; 2
     a8c:	9f 93       	push	r25
     a8e:	8f 93       	push	r24
     a90:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <sprintf>
     a94:	8a ee       	ldi	r24, 0xEA	; 234
	OLED_printString(str);
     a96:	92 e0       	ldi	r25, 0x02	; 2
     a98:	1b d7       	rcall	.+3638   	; 0x18d0 <OLED_printString>
     a9a:	60 e3       	ldi	r22, 0x30	; 48
     a9c:	70 e0       	ldi	r23, 0x00	; 0
	
	OLED_bufferGoto(7, 48);
     a9e:	87 e0       	ldi	r24, 0x07	; 7
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	b7 d6       	rcall	.+3438   	; 0x1812 <OLED_bufferGoto>
     aa4:	82 ea       	ldi	r24, 0xA2	; 162
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	13 d7       	rcall	.+3622   	; 0x18d0 <OLED_printString>
	OLED_printString("Wait");
     aaa:	10 92 09 01 	sts	0x0109, r1
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
	updateScoreFlag = 0;
     ab2:	0f 90       	pop	r0
     ab4:	0f 90       	pop	r0
     ab6:	0f 90       	pop	r0
     ab8:	0f 90       	pop	r0
     aba:	08 95       	ret

00000abc <Game_updateScore>:
     abc:	80 91 e8 02 	lds	r24, 0x02E8
     ac0:	90 91 e9 02 	lds	r25, 0x02E9
}

void Game_updateScore()
{
	score++;
     ac4:	01 96       	adiw	r24, 0x01	; 1
     ac6:	90 93 e9 02 	sts	0x02E9, r25
     aca:	80 93 e8 02 	sts	0x02E8, r24
	OLED_bufferGoto(5, SCORE_POS);
     ace:	64 e5       	ldi	r22, 0x54	; 84
     ad0:	70 e0       	ldi	r23, 0x00	; 0
     ad2:	85 e0       	ldi	r24, 0x05	; 5
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	9d d6       	rcall	.+3386   	; 0x1812 <OLED_bufferGoto>
     ad8:	80 91 e9 02 	lds	r24, 0x02E9
	sprintf(str, "%d", score);
     adc:	8f 93       	push	r24
     ade:	80 91 e8 02 	lds	r24, 0x02E8
     ae2:	8f 93       	push	r24
     ae4:	8f e9       	ldi	r24, 0x9F	; 159
     ae6:	91 e0       	ldi	r25, 0x01	; 1
     ae8:	9f 93       	push	r25
     aea:	8f 93       	push	r24
     aec:	8a ee       	ldi	r24, 0xEA	; 234
     aee:	92 e0       	ldi	r25, 0x02	; 2
     af0:	9f 93       	push	r25
     af2:	8f 93       	push	r24
     af4:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <sprintf>
     af8:	8a ee       	ldi	r24, 0xEA	; 234
	OLED_printString(str);
     afa:	92 e0       	ldi	r25, 0x02	; 2
     afc:	e9 d6       	rcall	.+3538   	; 0x18d0 <OLED_printString>
     afe:	0f 90       	pop	r0
     b00:	0f 90       	pop	r0
     b02:	0f 90       	pop	r0
     b04:	0f 90       	pop	r0
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	08 95       	ret

00000b0c <Game_play>:
     b0c:	2f 92       	push	r2
     b0e:	3f 92       	push	r3
}

void Game_play(uint8_t* SPIreceivedFlag, uint8_t* updateCmdDispFlag, UART_Message_t* uartMouseSteeringMessage, INPUT_MODE* inputMode)
{
     b10:	4f 92       	push	r4
     b12:	5f 92       	push	r5
     b14:	6f 92       	push	r6
     b16:	7f 92       	push	r7
     b18:	8f 92       	push	r8
     b1a:	9f 92       	push	r9
     b1c:	af 92       	push	r10
     b1e:	bf 92       	push	r11
     b20:	cf 92       	push	r12
     b22:	df 92       	push	r13
     b24:	ef 92       	push	r14
     b26:	ff 92       	push	r15
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
     b34:	a0 97       	sbiw	r28, 0x20	; 32
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	f8 94       	cli
     b3a:	de bf       	out	0x3e, r29	; 62
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	cd bf       	out	0x3d, r28	; 61
     b40:	8a 01       	movw	r16, r20
     b42:	79 01       	movw	r14, r18
		{
			ButtonRight = 0;
		}
		
		// send Positions to Node 2
		message2send.id = 23;
     b44:	0f 2e       	mov	r0, r31
     b46:	fa e1       	ldi	r31, 0x1A	; 26
     b48:	8f 2e       	mov	r8, r31
     b4a:	f3 e0       	ldi	r31, 0x03	; 3
     b4c:	9f 2e       	mov	r9, r31
     b4e:	f0 2d       	mov	r31, r0
     b50:	0f 2e       	mov	r0, r31
     b52:	f7 e1       	ldi	r31, 0x17	; 23
     b54:	6f 2e       	mov	r6, r31
     b56:	71 2c       	mov	r7, r1
     b58:	f0 2d       	mov	r31, r0
     b5a:	38 2c       	mov	r3, r8
     b5c:	98 a2       	std	Y+32, r9	; 0x20
     b5e:	8f 8e       	std	Y+31, r8	; 0x1f
     b60:	43 2c       	mov	r4, r3
     b62:	1c 01       	movw	r2, r24
	OLED_printString(str);
}

void Game_play(uint8_t* SPIreceivedFlag, uint8_t* updateCmdDispFlag, UART_Message_t* uartMouseSteeringMessage, INPUT_MODE* inputMode)
{
	while(lives > 0)
     b64:	78 c0       	rjmp	.+240    	; 0xc56 <Game_play+0x14a>
	{
		if(updateScoreFlag)
     b66:	80 91 09 01 	lds	r24, 0x0109
     b6a:	81 11       	cpse	r24, r1
		{
			Game_updateScore();
     b6c:	a7 df       	rcall	.-178    	; 0xabc <Game_updateScore>
     b6e:	6b d2       	rcall	.+1238   	; 0x1046 <JOY_getPosition>
		}
				
		// call for Joystick and Slider positions
		JoyPos = JOY_getPosition().X_abs;
     b70:	29 83       	std	Y+1, r18	; 0x01
     b72:	3a 83       	std	Y+2, r19	; 0x02
     b74:	4b 83       	std	Y+3, r20	; 0x03
     b76:	5c 83       	std	Y+4, r21	; 0x04
     b78:	6d 83       	std	Y+5, r22	; 0x05
     b7a:	7e 83       	std	Y+6, r23	; 0x06
     b7c:	8f 83       	std	Y+7, r24	; 0x07
     b7e:	98 87       	std	Y+8, r25	; 0x08
     b80:	20 93 e6 02 	sts	0x02E6, r18
     b84:	0e 94 b9 10 	call	0x2172	; 0x2172 <SLI_getPosition>
		SliPos = SLI_getPosition().R_per;
     b88:	80 93 e5 02 	sts	0x02E5, r24
     b8c:	2a 9b       	sbis	0x05, 2	; 5
     b8e:	03 c0       	rjmp	.+6      	; 0xb96 <Game_play+0x8a>
		
		// Check for pushed Button
		if((PINE & (1<<PE2)))
     b90:	50 92 e4 02 	sts	0x02E4, r5
		{
			ButtonRight = 1;
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <Game_play+0x8e>
     b96:	10 92 e4 02 	sts	0x02E4, r1
		}
		else
		{
			ButtonRight = 0;
     b9a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     b9c:	f8 a1       	ldd	r31, Y+32	; 0x20
		}
		
		// send Positions to Node 2
		message2send.id = 23;
     b9e:	71 82       	std	Z+1, r7	; 0x01
     ba0:	60 82       	st	Z, r6
     ba2:	ec e1       	ldi	r30, 0x1C	; 28
     ba4:	f3 e0       	ldi	r31, 0x03	; 3
		message2send.length = 7;
     ba6:	80 82       	st	Z, r8
     ba8:	90 91 e6 02 	lds	r25, 0x02E6
		message2send.data[0] = JoyPos;
     bac:	ed e1       	ldi	r30, 0x1D	; 29
     bae:	f3 e0       	ldi	r31, 0x03	; 3
     bb0:	90 83       	st	Z, r25
     bb2:	ee e1       	ldi	r30, 0x1E	; 30
     bb4:	f3 e0       	ldi	r31, 0x03	; 3
		message2send.data[1] = SliPos;
     bb6:	80 83       	st	Z, r24
     bb8:	80 91 e4 02 	lds	r24, 0x02E4
		message2send.data[2] = ButtonRight;
     bbc:	ef e1       	ldi	r30, 0x1F	; 31
     bbe:	f3 e0       	ldi	r31, 0x03	; 3
     bc0:	80 83       	st	Z, r24
     bc2:	f8 01       	movw	r30, r16
     bc4:	80 81       	ld	r24, Z
		message2send.data[3] = uartMouseSteeringMessage->Motor;
     bc6:	e0 e2       	ldi	r30, 0x20	; 32
     bc8:	f3 e0       	ldi	r31, 0x03	; 3
     bca:	80 83       	st	Z, r24
     bcc:	f8 01       	movw	r30, r16
     bce:	81 81       	ldd	r24, Z+1	; 0x01
		message2send.data[4] = uartMouseSteeringMessage->Servo;
     bd0:	f6 01       	movw	r30, r12
     bd2:	80 83       	st	Z, r24
     bd4:	f8 01       	movw	r30, r16
     bd6:	82 81       	ldd	r24, Z+2	; 0x02
		message2send.data[5] = uartMouseSteeringMessage->Button;
     bd8:	f5 01       	movw	r30, r10
     bda:	80 83       	st	Z, r24
     bdc:	f7 01       	movw	r30, r14
     bde:	80 81       	ld	r24, Z
		message2send.data[6] = *inputMode;
     be0:	e3 e2       	ldi	r30, 0x23	; 35
     be2:	f3 e0       	ldi	r31, 0x03	; 3
     be4:	80 83       	st	Z, r24
     be6:	60 e0       	ldi	r22, 0x00	; 0
     be8:	84 2d       	mov	r24, r4

		CAN_sendMessage(&message2send, 0);
     bea:	99 2d       	mov	r25, r9
     bec:	44 dd       	rcall	.-1400   	; 0x676 <CAN_sendMessage>
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	90 ef       	ldi	r25, 0xF0	; 240
     bf2:	01 97       	sbiw	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     bf4:	f1 f7       	brne	.-4      	; 0xbf2 <Game_play+0xe6>
     bf6:	f1 01       	movw	r30, r2
     bf8:	80 81       	ld	r24, Z
     bfa:	88 23       	and	r24, r24
		_delay_ms(50);
		
		// CAN reception
		if(*SPIreceivedFlag)
     bfc:	09 f4       	brne	.+2      	; 0xc00 <Game_play+0xf4>
     bfe:	3d c0       	rjmp	.+122    	; 0xc7a <Game_play+0x16e>
     c00:	6c e2       	ldi	r22, 0x2C	; 44
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	80 d2       	rcall	.+1280   	; 0x1106 <MCP2515_read>
		{
		 	uint8_t receiveBufferStatus;
		 	// check for message reception
		 	if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
     c06:	83 70       	andi	r24, 0x03	; 3
     c08:	31 f1       	breq	.+76     	; 0xc56 <Game_play+0x14a>
     c0a:	68 2f       	mov	r22, r24
     c0c:	ce 01       	movw	r24, r28
     c0e:	44 96       	adiw	r24, 0x14	; 20
     c10:	9b dd       	rcall	.-1226   	; 0x748 <CAN_receiveMessage>
		 	{
		 		struct can_message receivedMessage;
		 		receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     c12:	8b e0       	ldi	r24, 0x0B	; 11
     c14:	fe 01       	movw	r30, r28
     c16:	74 96       	adiw	r30, 0x14	; 20
     c18:	de 01       	movw	r26, r28
     c1a:	19 96       	adiw	r26, 0x09	; 9
     c1c:	01 90       	ld	r0, Z+
     c1e:	0d 92       	st	X+, r0
     c20:	8a 95       	dec	r24
     c22:	e1 f7       	brne	.-8      	; 0xc1c <Game_play+0x110>
     c24:	ce 01       	movw	r24, r28
     c26:	09 96       	adiw	r24, 0x09	; 9
     c28:	58 de       	rcall	.-848    	; 0x8da <CAN_printMessage>
     c2a:	89 85       	ldd	r24, Y+9	; 0x09
     c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
		
		 		CAN_printMessage(&receivedMessage);
     c2e:	45 97       	sbiw	r24, 0x15	; 21
     c30:	09 f4       	brne	.+2      	; 0xc34 <Game_play+0x128>
     c32:	18 df       	rcall	.-464    	; 0xa64 <Game_updateLives>
     c34:	89 85       	ldd	r24, Y+9	; 0x09
		
		 		if(receivedMessage.id == 21)
     c36:	9a 85       	ldd	r25, Y+10	; 0x0a
     c38:	0d 97       	sbiw	r24, 0x0d	; 13
     c3a:	59 f4       	brne	.+22     	; 0xc52 <Game_play+0x146>
     c3c:	60 e3       	ldi	r22, 0x30	; 48
		 		{
		 			Game_updateLives();
     c3e:	70 e0       	ldi	r23, 0x00	; 0
     c40:	87 e0       	ldi	r24, 0x07	; 7
		 		}
				 
				if(receivedMessage.id == 13)
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	e6 d5       	rcall	.+3020   	; 0x1812 <OLED_bufferGoto>
     c46:	87 ea       	ldi	r24, 0xA7	; 167
     c48:	91 e0       	ldi	r25, 0x01	; 1
				{
					OLED_bufferGoto(7, 48);
     c4a:	42 d6       	rcall	.+3204   	; 0x18d0 <OLED_printString>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	80 93 09 01 	sts	0x0109, r24
     c52:	f1 01       	movw	r30, r2
     c54:	10 82       	st	Z, r1
					OLED_printString("    ");
     c56:	55 24       	eor	r5, r5
     c58:	53 94       	inc	r5
     c5a:	0f 2e       	mov	r0, r31
     c5c:	f7 e0       	ldi	r31, 0x07	; 7
					updateScoreFlag = 1;
     c5e:	8f 2e       	mov	r8, r31
     c60:	f0 2d       	mov	r31, r0
     c62:	0f 2e       	mov	r0, r31
				}
		
		 		*SPIreceivedFlag = 0;
     c64:	f1 e2       	ldi	r31, 0x21	; 33
     c66:	cf 2e       	mov	r12, r31
		SliPos = SLI_getPosition().R_per;
		
		// Check for pushed Button
		if((PINE & (1<<PE2)))
		{
			ButtonRight = 1;
     c68:	f3 e0       	ldi	r31, 0x03	; 3
     c6a:	df 2e       	mov	r13, r31
			ButtonRight = 0;
		}
		
		// send Positions to Node 2
		message2send.id = 23;
		message2send.length = 7;
     c6c:	f0 2d       	mov	r31, r0
     c6e:	0f 2e       	mov	r0, r31
     c70:	f2 e2       	ldi	r31, 0x22	; 34
     c72:	af 2e       	mov	r10, r31
		message2send.data[0] = JoyPos;
		message2send.data[1] = SliPos;
		message2send.data[2] = ButtonRight;
		message2send.data[3] = uartMouseSteeringMessage->Motor;
		message2send.data[4] = uartMouseSteeringMessage->Servo;
     c74:	f3 e0       	ldi	r31, 0x03	; 3
     c76:	bf 2e       	mov	r11, r31
     c78:	f0 2d       	mov	r31, r0
     c7a:	20 91 e7 02 	lds	r18, 0x02E7
     c7e:	21 11       	cpse	r18, r1
		message2send.data[5] = uartMouseSteeringMessage->Button;
     c80:	72 cf       	rjmp	.-284    	; 0xb66 <Game_play+0x5a>
     c82:	70 d5       	rcall	.+2784   	; 0x1764 <OLED_clear>
     c84:	6c e1       	ldi	r22, 0x1C	; 28
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	82 e0       	ldi	r24, 0x02	; 2
     c8a:	90 e0       	ldi	r25, 0x00	; 0
	OLED_printString(str);
}

void Game_play(uint8_t* SPIreceivedFlag, uint8_t* updateCmdDispFlag, UART_Message_t* uartMouseSteeringMessage, INPUT_MODE* inputMode)
{
	while(lives > 0)
     c8c:	c2 d5       	rcall	.+2948   	; 0x1812 <OLED_bufferGoto>
     c8e:	8c ea       	ldi	r24, 0xAC	; 172
     c90:	91 e0       	ldi	r25, 0x01	; 1
     c92:	1e d6       	rcall	.+3132   	; 0x18d0 <OLED_printString>
		 		*SPIreceivedFlag = 0;
		 	}
		}
	}
	
	OLED_clear();
     c94:	6c e2       	ldi	r22, 0x2C	; 44
     c96:	70 e0       	ldi	r23, 0x00	; 0
	OLED_bufferGoto(2,28);
     c98:	84 e0       	ldi	r24, 0x04	; 4
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	ba d5       	rcall	.+2932   	; 0x1812 <OLED_bufferGoto>
     c9e:	86 eb       	ldi	r24, 0xB6	; 182
     ca0:	91 e0       	ldi	r25, 0x01	; 1
     ca2:	16 d6       	rcall	.+3116   	; 0x18d0 <OLED_printString>
	OLED_printString("GAME OVER");
     ca4:	64 e3       	ldi	r22, 0x34	; 52
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	85 e0       	ldi	r24, 0x05	; 5
     caa:	90 e0       	ldi	r25, 0x00	; 0
	OLED_bufferGoto(4,44);
     cac:	b2 d5       	rcall	.+2916   	; 0x1812 <OLED_bufferGoto>
     cae:	80 91 e9 02 	lds	r24, 0x02E9
     cb2:	8f 93       	push	r24
     cb4:	80 91 e8 02 	lds	r24, 0x02E8
	OLED_printString("SCORE");
     cb8:	8f 93       	push	r24
     cba:	8f e9       	ldi	r24, 0x9F	; 159
     cbc:	91 e0       	ldi	r25, 0x01	; 1
     cbe:	9f 93       	push	r25
	OLED_bufferGoto(5,52);
     cc0:	8f 93       	push	r24
     cc2:	8a ee       	ldi	r24, 0xEA	; 234
     cc4:	92 e0       	ldi	r25, 0x02	; 2
     cc6:	9f 93       	push	r25
     cc8:	8f 93       	push	r24
     cca:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <sprintf>
	sprintf(str, "%d", score);
     cce:	8a ee       	ldi	r24, 0xEA	; 234
     cd0:	92 e0       	ldi	r25, 0x02	; 2
     cd2:	fe d5       	rcall	.+3068   	; 0x18d0 <OLED_printString>
     cd4:	ff ef       	ldi	r31, 0xFF	; 255
     cd6:	2f ef       	ldi	r18, 0xFF	; 255
     cd8:	8d e1       	ldi	r24, 0x1D	; 29
     cda:	f1 50       	subi	r31, 0x01	; 1
     cdc:	20 40       	sbci	r18, 0x00	; 0
     cde:	80 40       	sbci	r24, 0x00	; 0
     ce0:	e1 f7       	brne	.-8      	; 0xcda <Game_play+0x1ce>
     ce2:	00 c0       	rjmp	.+0      	; 0xce4 <Game_play+0x1d8>
     ce4:	00 00       	nop
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
	OLED_printString(str);
     cec:	0f 90       	pop	r0
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	a0 96       	adiw	r28, 0x20	; 32
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	f8 94       	cli
     cf8:	de bf       	out	0x3e, r29	; 62
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	cd bf       	out	0x3d, r28	; 61
     cfe:	df 91       	pop	r29
     d00:	cf 91       	pop	r28
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	ff 90       	pop	r15
     d08:	ef 90       	pop	r14
     d0a:	df 90       	pop	r13
     d0c:	cf 90       	pop	r12
     d0e:	bf 90       	pop	r11
     d10:	af 90       	pop	r10
	
	_delay_ms(2000);
     d12:	9f 90       	pop	r9
     d14:	8f 90       	pop	r8
     d16:	7f 90       	pop	r7
     d18:	6f 90       	pop	r6
     d1a:	5f 90       	pop	r5
     d1c:	4f 90       	pop	r4
     d1e:	3f 90       	pop	r3
     d20:	2f 90       	pop	r2
     d22:	08 95       	ret

00000d24 <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     d24:	10 92 ef 02 	sts	0x02EF, r1
     d28:	10 92 ee 02 	sts	0x02EE, r1
	currentPosition.Y_abs = 0;
     d2c:	10 92 f1 02 	sts	0x02F1, r1
     d30:	10 92 f0 02 	sts	0x02F0, r1
	currentPosition.X_per = 0;
     d34:	10 92 f3 02 	sts	0x02F3, r1
     d38:	10 92 f2 02 	sts	0x02F2, r1
	currentPosition.Y_per = 0;
     d3c:	10 92 f5 02 	sts	0x02F5, r1
     d40:	10 92 f4 02 	sts	0x02F4, r1
	currentDirection = CENTRE;
     d44:	10 92 ed 02 	sts	0x02ED, r1
     d48:	08 95       	ret

00000d4a <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     d4e:	0a d5       	rcall	.+2580   	; 0x1764 <OLED_clear>
     d50:	60 e0       	ldi	r22, 0x00	; 0
	OLED_bufferGoto(0,0);
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	5c d5       	rcall	.+2744   	; 0x1812 <OLED_bufferGoto>
     d5a:	8c eb       	ldi	r24, 0xBC	; 188
     d5c:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     d5e:	b8 d5       	rcall	.+2928   	; 0x18d0 <OLED_printString>
     d60:	2f ef       	ldi	r18, 0xFF	; 255
     d62:	8f ef       	ldi	r24, 0xFF	; 255
     d64:	92 e0       	ldi	r25, 0x02	; 2
     d66:	21 50       	subi	r18, 0x01	; 1
     d68:	80 40       	sbci	r24, 0x00	; 0
     d6a:	90 40       	sbci	r25, 0x00	; 0
     d6c:	e1 f7       	brne	.-8      	; 0xd66 <JOY_calibrate+0x1c>
     d6e:	00 c0       	rjmp	.+0      	; 0xd70 <JOY_calibrate+0x26>
     d70:	00 c0       	rjmp	.+0      	; 0xd72 <JOY_calibrate+0x28>
     d72:	c4 e1       	ldi	r28, 0x14	; 20
     d74:	d0 e0       	ldi	r29, 0x00	; 0
     d76:	60 91 06 01 	lds	r22, 0x0106
     d7a:	70 91 07 01 	lds	r23, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	0e 94 41 13 	call	0x2682	; 0x2682 <ADC_request>
     d84:	2f ef       	ldi	r18, 0xFF	; 255
     d86:	8f e1       	ldi	r24, 0x1F	; 31
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	21 50       	subi	r18, 0x01	; 1
     d8c:	80 40       	sbci	r24, 0x00	; 0
     d8e:	90 40       	sbci	r25, 0x00	; 0
     d90:	e1 f7       	brne	.-8      	; 0xd8a <JOY_calibrate+0x40>
     d92:	00 c0       	rjmp	.+0      	; 0xd94 <JOY_calibrate+0x4a>
     d94:	00 00       	nop
     d96:	80 91 06 01 	lds	r24, 0x0106
     d9a:	90 91 07 01 	lds	r25, 0x0107
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     d9e:	0e 94 69 13 	call	0x26d2	; 0x26d2 <ADC_read>
     da2:	90 91 0f 01 	lds	r25, 0x010F
     da6:	98 17       	cp	r25, r24
		
		if(temp > calR) {calR = temp;}
     da8:	10 f4       	brcc	.+4      	; 0xdae <JOY_calibrate+0x64>
     daa:	80 93 0f 01 	sts	0x010F, r24
     dae:	21 97       	sbiw	r28, 0x01	; 1
     db0:	20 97       	sbiw	r28, 0x00	; 0
     db2:	09 f7       	brne	.-62     	; 0xd76 <JOY_calibrate+0x2c>
     db4:	60 e0       	ldi	r22, 0x00	; 0
	OLED_clear();
	OLED_bufferGoto(0,0);
	OLED_printString("JOY RIGHT");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_bufferGoto(1,0);
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	2a d5       	rcall	.+2644   	; 0x1812 <OLED_bufferGoto>
     dbe:	86 ec       	ldi	r24, 0xC6	; 198
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	86 d5       	rcall	.+2828   	; 0x18d0 <OLED_printString>
     dc4:	2f ef       	ldi	r18, 0xFF	; 255
	OLED_printString("JOY LEFT");
     dc6:	8f ef       	ldi	r24, 0xFF	; 255
     dc8:	92 e0       	ldi	r25, 0x02	; 2
     dca:	21 50       	subi	r18, 0x01	; 1
     dcc:	80 40       	sbci	r24, 0x00	; 0
     dce:	90 40       	sbci	r25, 0x00	; 0
     dd0:	e1 f7       	brne	.-8      	; 0xdca <JOY_calibrate+0x80>
     dd2:	00 c0       	rjmp	.+0      	; 0xdd4 <JOY_calibrate+0x8a>
     dd4:	00 c0       	rjmp	.+0      	; 0xdd6 <JOY_calibrate+0x8c>
     dd6:	c4 e1       	ldi	r28, 0x14	; 20
     dd8:	d0 e0       	ldi	r29, 0x00	; 0
     dda:	60 91 06 01 	lds	r22, 0x0106
     dde:	70 91 07 01 	lds	r23, 0x0107
     de2:	82 e0       	ldi	r24, 0x02	; 2
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     de4:	0e 94 41 13 	call	0x2682	; 0x2682 <ADC_request>
     de8:	2f ef       	ldi	r18, 0xFF	; 255
     dea:	8f e1       	ldi	r24, 0x1F	; 31
     dec:	91 e0       	ldi	r25, 0x01	; 1
     dee:	21 50       	subi	r18, 0x01	; 1
     df0:	80 40       	sbci	r24, 0x00	; 0
     df2:	90 40       	sbci	r25, 0x00	; 0
     df4:	e1 f7       	brne	.-8      	; 0xdee <JOY_calibrate+0xa4>
     df6:	00 c0       	rjmp	.+0      	; 0xdf8 <JOY_calibrate+0xae>
     df8:	00 00       	nop
     dfa:	80 91 06 01 	lds	r24, 0x0106
     dfe:	90 91 07 01 	lds	r25, 0x0107
     e02:	0e 94 69 13 	call	0x26d2	; 0x26d2 <ADC_read>
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     e06:	90 91 0e 01 	lds	r25, 0x010E
     e0a:	89 17       	cp	r24, r25
     e0c:	10 f4       	brcc	.+4      	; 0xe12 <JOY_calibrate+0xc8>
     e0e:	80 93 0e 01 	sts	0x010E, r24
		
		if(temp < calL) {calL = temp;}
     e12:	21 97       	sbiw	r28, 0x01	; 1
     e14:	20 97       	sbiw	r28, 0x00	; 0
     e16:	09 f7       	brne	.-62     	; 0xdda <JOY_calibrate+0x90>
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	82 e0       	ldi	r24, 0x02	; 2
	
	OLED_bufferGoto(1,0);
	OLED_printString("JOY LEFT");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	f8 d4       	rcall	.+2544   	; 0x1812 <OLED_bufferGoto>
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_bufferGoto(2,0);
     e22:	8f ec       	ldi	r24, 0xCF	; 207
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	54 d5       	rcall	.+2728   	; 0x18d0 <OLED_printString>
     e28:	2f ef       	ldi	r18, 0xFF	; 255
     e2a:	8f ef       	ldi	r24, 0xFF	; 255
     e2c:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("JOY UP");
     e2e:	21 50       	subi	r18, 0x01	; 1
     e30:	80 40       	sbci	r24, 0x00	; 0
     e32:	90 40       	sbci	r25, 0x00	; 0
     e34:	e1 f7       	brne	.-8      	; 0xe2e <JOY_calibrate+0xe4>
     e36:	00 c0       	rjmp	.+0      	; 0xe38 <JOY_calibrate+0xee>
     e38:	00 c0       	rjmp	.+0      	; 0xe3a <JOY_calibrate+0xf0>
     e3a:	c4 e1       	ldi	r28, 0x14	; 20
     e3c:	d0 e0       	ldi	r29, 0x00	; 0
     e3e:	60 91 06 01 	lds	r22, 0x0106
     e42:	70 91 07 01 	lds	r23, 0x0107
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	0e 94 41 13 	call	0x2682	; 0x2682 <ADC_request>
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     e4c:	2f ef       	ldi	r18, 0xFF	; 255
     e4e:	8f e1       	ldi	r24, 0x1F	; 31
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	21 50       	subi	r18, 0x01	; 1
     e54:	80 40       	sbci	r24, 0x00	; 0
     e56:	90 40       	sbci	r25, 0x00	; 0
     e58:	e1 f7       	brne	.-8      	; 0xe52 <JOY_calibrate+0x108>
     e5a:	00 c0       	rjmp	.+0      	; 0xe5c <JOY_calibrate+0x112>
     e5c:	00 00       	nop
     e5e:	80 91 06 01 	lds	r24, 0x0106
     e62:	90 91 07 01 	lds	r25, 0x0107
     e66:	0e 94 69 13 	call	0x26d2	; 0x26d2 <ADC_read>
     e6a:	90 91 0d 01 	lds	r25, 0x010D
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     e6e:	98 17       	cp	r25, r24
     e70:	10 f4       	brcc	.+4      	; 0xe76 <JOY_calibrate+0x12c>
     e72:	80 93 0d 01 	sts	0x010D, r24
     e76:	21 97       	sbiw	r28, 0x01	; 1
		
		if(temp > calUp) {calUp = temp;}
     e78:	20 97       	sbiw	r28, 0x00	; 0
     e7a:	09 f7       	brne	.-62     	; 0xe3e <JOY_calibrate+0xf4>
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	83 e0       	ldi	r24, 0x03	; 3
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	c6 d4       	rcall	.+2444   	; 0x1812 <OLED_bufferGoto>
	
	OLED_bufferGoto(2,0);
	OLED_printString("JOY UP");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     e86:	86 ed       	ldi	r24, 0xD6	; 214
     e88:	91 e0       	ldi	r25, 0x01	; 1
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_bufferGoto(3,0);
     e8a:	22 d5       	rcall	.+2628   	; 0x18d0 <OLED_printString>
     e8c:	2f ef       	ldi	r18, 0xFF	; 255
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	92 e0       	ldi	r25, 0x02	; 2
     e92:	21 50       	subi	r18, 0x01	; 1
     e94:	80 40       	sbci	r24, 0x00	; 0
	OLED_printString("JOY DOWN");
     e96:	90 40       	sbci	r25, 0x00	; 0
     e98:	e1 f7       	brne	.-8      	; 0xe92 <JOY_calibrate+0x148>
     e9a:	00 c0       	rjmp	.+0      	; 0xe9c <JOY_calibrate+0x152>
     e9c:	00 c0       	rjmp	.+0      	; 0xe9e <JOY_calibrate+0x154>
     e9e:	c4 e1       	ldi	r28, 0x14	; 20
     ea0:	d0 e0       	ldi	r29, 0x00	; 0
     ea2:	60 91 06 01 	lds	r22, 0x0106
     ea6:	70 91 07 01 	lds	r23, 0x0107
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	0e 94 41 13 	call	0x2682	; 0x2682 <ADC_request>
     eb0:	2f ef       	ldi	r18, 0xFF	; 255
     eb2:	8f e1       	ldi	r24, 0x1F	; 31
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     eb4:	91 e0       	ldi	r25, 0x01	; 1
     eb6:	21 50       	subi	r18, 0x01	; 1
     eb8:	80 40       	sbci	r24, 0x00	; 0
     eba:	90 40       	sbci	r25, 0x00	; 0
     ebc:	e1 f7       	brne	.-8      	; 0xeb6 <JOY_calibrate+0x16c>
     ebe:	00 c0       	rjmp	.+0      	; 0xec0 <JOY_calibrate+0x176>
     ec0:	00 00       	nop
     ec2:	80 91 06 01 	lds	r24, 0x0106
     ec6:	90 91 07 01 	lds	r25, 0x0107
     eca:	0e 94 69 13 	call	0x26d2	; 0x26d2 <ADC_read>
     ece:	90 91 0c 01 	lds	r25, 0x010C
     ed2:	89 17       	cp	r24, r25
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     ed4:	10 f4       	brcc	.+4      	; 0xeda <JOY_calibrate+0x190>
     ed6:	80 93 0c 01 	sts	0x010C, r24
     eda:	21 97       	sbiw	r28, 0x01	; 1
     edc:	20 97       	sbiw	r28, 0x00	; 0
     ede:	09 f7       	brne	.-62     	; 0xea2 <JOY_calibrate+0x158>
		
		if(temp < calDown) {calDown = temp;}
     ee0:	20 91 0d 01 	lds	r18, 0x010D
     ee4:	80 91 0c 01 	lds	r24, 0x010C
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	28 1b       	sub	r18, r24
     eec:	31 09       	sbc	r19, r1
	
	OLED_bufferGoto(3,0);
	OLED_printString("JOY DOWN");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     eee:	c9 01       	movw	r24, r18
     ef0:	99 23       	and	r25, r25
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calDown) {calDown = temp;}
	}
	
	meanVert = (calUp - calDown)/2;
     ef2:	0c f4       	brge	.+2      	; 0xef6 <JOY_calibrate+0x1ac>
     ef4:	01 96       	adiw	r24, 0x01	; 1
     ef6:	95 95       	asr	r25
     ef8:	87 95       	ror	r24
     efa:	80 93 0b 01 	sts	0x010B, r24
     efe:	20 91 0f 01 	lds	r18, 0x010F
     f02:	80 91 0e 01 	lds	r24, 0x010E
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	28 1b       	sub	r18, r24
     f0a:	31 09       	sbc	r19, r1
     f0c:	c9 01       	movw	r24, r18
     f0e:	99 23       	and	r25, r25
	meanHor = (calR - calL)/2;
     f10:	0c f4       	brge	.+2      	; 0xf14 <JOY_calibrate+0x1ca>
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	95 95       	asr	r25
     f16:	87 95       	ror	r24
     f18:	80 93 0a 01 	sts	0x010A, r24
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	84 e0       	ldi	r24, 0x04	; 4
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	76 d4       	rcall	.+2284   	; 0x1812 <OLED_bufferGoto>
     f26:	8f ed       	ldi	r24, 0xDF	; 223
     f28:	91 e0       	ldi	r25, 0x01	; 1
     f2a:	d2 d4       	rcall	.+2468   	; 0x18d0 <OLED_printString>
     f2c:	2f ef       	ldi	r18, 0xFF	; 255
	
	OLED_bufferGoto(4,0);
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	9e e0       	ldi	r25, 0x0E	; 14
     f32:	21 50       	subi	r18, 0x01	; 1
     f34:	80 40       	sbci	r24, 0x00	; 0
     f36:	90 40       	sbci	r25, 0x00	; 0
     f38:	e1 f7       	brne	.-8      	; 0xf32 <JOY_calibrate+0x1e8>
	OLED_printString("CALIB DONE");
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <JOY_calibrate+0x1f2>
     f3c:	00 00       	nop
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	08 95       	ret

00000f44 <JOY_requestCurrentPosition>:
     f44:	88 37       	cpi	r24, 0x78	; 120
     f46:	41 f4       	brne	.+16     	; 0xf58 <JOY_requestCurrentPosition+0x14>
     f48:	60 91 06 01 	lds	r22, 0x0106
     f4c:	70 91 07 01 	lds	r23, 0x0107
     f50:	82 e0       	ldi	r24, 0x02	; 2
     f52:	0c 94 41 13 	jmp	0x2682	; 0x2682 <ADC_request>
	_delay_ms(1000);
}
     f56:	08 95       	ret
     f58:	89 37       	cpi	r24, 0x79	; 121
	if(axis == 'x')
	{
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
     f5a:	39 f4       	brne	.+14     	; 0xf6a <JOY_requestCurrentPosition+0x26>
	{
		ADC_request(Y_channel, adc_ext_ram);
     f5c:	60 91 06 01 	lds	r22, 0x0106
     f60:	70 91 07 01 	lds	r23, 0x0107
     f64:	81 e0       	ldi	r24, 0x01	; 1
     f66:	0c 94 41 13 	jmp	0x2682	; 0x2682 <ADC_request>
     f6a:	08 95       	ret

00000f6c <JOY_updatePosition>:
// 2.) Calculate relative value X_per for position (-100% .. 100%) and write
// them to the current position.
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
     f6c:	88 37       	cpi	r24, 0x78	; 120
     f6e:	09 f5       	brne	.+66     	; 0xfb2 <JOY_updatePosition+0x46>
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     f70:	80 91 06 01 	lds	r24, 0x0106
     f74:	90 91 07 01 	lds	r25, 0x0107
     f78:	0e 94 69 13 	call	0x26d2	; 0x26d2 <ADC_read>
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	90 93 ef 02 	sts	0x02EF, r25
     f82:	80 93 ee 02 	sts	0x02EE, r24
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     f86:	20 91 0a 01 	lds	r18, 0x010A
     f8a:	60 91 0a 01 	lds	r22, 0x010A
     f8e:	ac 01       	movw	r20, r24
     f90:	42 1b       	sub	r20, r18
     f92:	51 09       	sbc	r21, r1
     f94:	9a 01       	movw	r18, r20
     f96:	44 e6       	ldi	r20, 0x64	; 100
     f98:	42 9f       	mul	r20, r18
     f9a:	c0 01       	movw	r24, r0
     f9c:	43 9f       	mul	r20, r19
     f9e:	90 0d       	add	r25, r0
     fa0:	11 24       	eor	r1, r1
     fa2:	70 e0       	ldi	r23, 0x00	; 0
     fa4:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__divmodhi4>
     fa8:	70 93 f3 02 	sts	0x02F3, r23
     fac:	60 93 f2 02 	sts	0x02F2, r22
     fb0:	08 95       	ret
	}

	else if(axis == 'y')
     fb2:	89 37       	cpi	r24, 0x79	; 121
     fb4:	01 f5       	brne	.+64     	; 0xff6 <JOY_updatePosition+0x8a>
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     fb6:	80 91 06 01 	lds	r24, 0x0106
     fba:	90 91 07 01 	lds	r25, 0x0107
     fbe:	0e 94 69 13 	call	0x26d2	; 0x26d2 <ADC_read>
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	90 93 f1 02 	sts	0x02F1, r25
     fc8:	80 93 f0 02 	sts	0x02F0, r24
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     fcc:	20 91 0b 01 	lds	r18, 0x010B
     fd0:	60 91 0b 01 	lds	r22, 0x010B
     fd4:	ac 01       	movw	r20, r24
     fd6:	42 1b       	sub	r20, r18
     fd8:	51 09       	sbc	r21, r1
     fda:	9a 01       	movw	r18, r20
     fdc:	44 e6       	ldi	r20, 0x64	; 100
     fde:	42 9f       	mul	r20, r18
     fe0:	c0 01       	movw	r24, r0
     fe2:	43 9f       	mul	r20, r19
     fe4:	90 0d       	add	r25, r0
     fe6:	11 24       	eor	r1, r1
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	0e 94 6c 13 	call	0x26d8	; 0x26d8 <__divmodhi4>
     fee:	70 93 f5 02 	sts	0x02F5, r23
     ff2:	60 93 f4 02 	sts	0x02F4, r22
     ff6:	08 95       	ret

00000ff8 <JOY_calculateDirection>:
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     ff8:	80 91 f2 02 	lds	r24, 0x02F2
     ffc:	90 91 f3 02 	lds	r25, 0x02F3
    1000:	8b 35       	cpi	r24, 0x5B	; 91
    1002:	91 05       	cpc	r25, r1
    1004:	24 f0       	brlt	.+8      	; 0x100e <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
    1006:	83 e0       	ldi	r24, 0x03	; 3
    1008:	80 93 ed 02 	sts	0x02ED, r24
    100c:	08 95       	ret
	else if(currentPosition.X_per < -90) {
    100e:	86 3a       	cpi	r24, 0xA6	; 166
    1010:	9f 4f       	sbci	r25, 0xFF	; 255
    1012:	24 f4       	brge	.+8      	; 0x101c <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
    1014:	84 e0       	ldi	r24, 0x04	; 4
    1016:	80 93 ed 02 	sts	0x02ED, r24
    101a:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
    101c:	80 91 f4 02 	lds	r24, 0x02F4
    1020:	90 91 f5 02 	lds	r25, 0x02F5
    1024:	8b 35       	cpi	r24, 0x5B	; 91
    1026:	91 05       	cpc	r25, r1
    1028:	24 f0       	brlt	.+8      	; 0x1032 <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	80 93 ed 02 	sts	0x02ED, r24
    1030:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
    1032:	86 3a       	cpi	r24, 0xA6	; 166
    1034:	9f 4f       	sbci	r25, 0xFF	; 255
    1036:	24 f4       	brge	.+8      	; 0x1040 <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
    1038:	82 e0       	ldi	r24, 0x02	; 2
    103a:	80 93 ed 02 	sts	0x02ED, r24
    103e:	08 95       	ret
	else{currentDirection = CENTRE;}
    1040:	10 92 ed 02 	sts	0x02ED, r1
    1044:	08 95       	ret

00001046 <JOY_getPosition>:

//------------------------------------------------------------------------------
// This function returns the current position of the Joystick.
// It is a struct with the four parameters X_abs, Y_abs, X_per and Y_per
JOY_position_t JOY_getPosition()
{
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	28 97       	sbiw	r28, 0x08	; 8
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	f8 94       	cli
    1054:	de bf       	out	0x3e, r29	; 62
    1056:	0f be       	out	0x3f, r0	; 63
    1058:	cd bf       	out	0x3d, r28	; 61
	JOY_requestCurrentPosition('x');
    105a:	88 e7       	ldi	r24, 0x78	; 120
    105c:	73 df       	rcall	.-282    	; 0xf44 <JOY_requestCurrentPosition>
    105e:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1060:	8a 95       	dec	r24
    1062:	f1 f7       	brne	.-4      	; 0x1060 <JOY_getPosition+0x1a>
    1064:	00 00       	nop
    1066:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
    1068:	81 df       	rcall	.-254    	; 0xf6c <JOY_updatePosition>
    106a:	89 e7       	ldi	r24, 0x79	; 121
    106c:	6b df       	rcall	.-298    	; 0xf44 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
    106e:	82 e6       	ldi	r24, 0x62	; 98
    1070:	8a 95       	dec	r24
    1072:	f1 f7       	brne	.-4      	; 0x1070 <JOY_getPosition+0x2a>
    1074:	00 00       	nop
    1076:	89 e7       	ldi	r24, 0x79	; 121
    1078:	79 df       	rcall	.-270    	; 0xf6c <JOY_updatePosition>
    107a:	88 e0       	ldi	r24, 0x08	; 8
	_delay_us(delayConversion);
	JOY_updatePosition('y');
    107c:	ee ee       	ldi	r30, 0xEE	; 238
    107e:	f2 e0       	ldi	r31, 0x02	; 2
    1080:	de 01       	movw	r26, r28
	return currentPosition;
    1082:	11 96       	adiw	r26, 0x01	; 1
    1084:	01 90       	ld	r0, Z+
    1086:	0d 92       	st	X+, r0
    1088:	8a 95       	dec	r24
    108a:	e1 f7       	brne	.-8      	; 0x1084 <JOY_getPosition+0x3e>
    108c:	29 81       	ldd	r18, Y+1	; 0x01
    108e:	3a 81       	ldd	r19, Y+2	; 0x02
    1090:	4b 81       	ldd	r20, Y+3	; 0x03
    1092:	5c 81       	ldd	r21, Y+4	; 0x04
    1094:	6d 81       	ldd	r22, Y+5	; 0x05
    1096:	7e 81       	ldd	r23, Y+6	; 0x06
    1098:	8f 81       	ldd	r24, Y+7	; 0x07
    109a:	98 85       	ldd	r25, Y+8	; 0x08
    109c:	28 96       	adiw	r28, 0x08	; 8
    109e:	0f b6       	in	r0, 0x3f	; 63
}
    10a0:	f8 94       	cli
    10a2:	de bf       	out	0x3e, r29	; 62
    10a4:	0f be       	out	0x3f, r0	; 63
    10a6:	cd bf       	out	0x3d, r28	; 61
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	08 95       	ret

000010ae <JOY_getDirection>:
    10ae:	88 e7       	ldi	r24, 0x78	; 120
    10b0:	49 df       	rcall	.-366    	; 0xf44 <JOY_requestCurrentPosition>
    10b2:	82 e6       	ldi	r24, 0x62	; 98
    10b4:	8a 95       	dec	r24
    10b6:	f1 f7       	brne	.-4      	; 0x10b4 <JOY_getDirection+0x6>
    10b8:	00 00       	nop
    10ba:	88 e7       	ldi	r24, 0x78	; 120
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
	_delay_us(delayConversion);
	JOY_updatePosition('x');
    10bc:	57 df       	rcall	.-338    	; 0xf6c <JOY_updatePosition>
    10be:	89 e7       	ldi	r24, 0x79	; 121
    10c0:	41 df       	rcall	.-382    	; 0xf44 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
    10c2:	82 e6       	ldi	r24, 0x62	; 98
    10c4:	8a 95       	dec	r24
    10c6:	f1 f7       	brne	.-4      	; 0x10c4 <JOY_getDirection+0x16>
    10c8:	00 00       	nop
    10ca:	89 e7       	ldi	r24, 0x79	; 121
    10cc:	4f df       	rcall	.-354    	; 0xf6c <JOY_updatePosition>
    10ce:	94 df       	rcall	.-216    	; 0xff8 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
    10d0:	80 91 ed 02 	lds	r24, 0x02ED
    10d4:	08 95       	ret

000010d6 <MCP2515_reset>:
	}
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
    10d6:	cf 93       	push	r28
    10d8:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
    10da:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <SPI_activateSlave>
	SPI_send(MCP_RESET);
    10de:	80 ec       	ldi	r24, 0xC0	; 192
    10e0:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <SPI_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    10e4:	8c ec       	ldi	r24, 0xCC	; 204
    10e6:	94 e0       	ldi	r25, 0x04	; 4
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	f1 f7       	brne	.-4      	; 0x10e8 <MCP2515_reset+0x12>
    10ec:	00 c0       	rjmp	.+0      	; 0x10ee <MCP2515_reset+0x18>
    10ee:	00 00       	nop
	_delay_ms(1);
	SPI_deactivateSlave(slave);
    10f0:	8c 2f       	mov	r24, r28
    10f2:	0e 94 e7 10 	call	0x21ce	; 0x21ce <SPI_deactivateSlave>
    10f6:	8f ef       	ldi	r24, 0xFF	; 255
    10f8:	9f e2       	ldi	r25, 0x2F	; 47
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	f1 f7       	brne	.-4      	; 0x10fa <MCP2515_reset+0x24>
    10fe:	00 c0       	rjmp	.+0      	; 0x1100 <MCP2515_reset+0x2a>
    1100:	00 00       	nop
	_delay_ms(10);
}
    1102:	cf 91       	pop	r28
    1104:	08 95       	ret

00001106 <MCP2515_read>:

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
    1106:	cf 93       	push	r28
    1108:	df 93       	push	r29
    110a:	c8 2f       	mov	r28, r24
    110c:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
    110e:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <SPI_activateSlave>
	SPI_send(MCP_READ);
    1112:	83 e0       	ldi	r24, 0x03	; 3
    1114:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <SPI_send>
    1118:	8c ec       	ldi	r24, 0xCC	; 204
    111a:	94 e0       	ldi	r25, 0x04	; 4
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	f1 f7       	brne	.-4      	; 0x111c <MCP2515_read+0x16>
    1120:	00 c0       	rjmp	.+0      	; 0x1122 <MCP2515_read+0x1c>
    1122:	00 00       	nop
	_delay_ms(1);
	SPI_send(address);
    1124:	8d 2f       	mov	r24, r29
    1126:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <SPI_send>
	
	uint8_t result;
	result = SPI_receive();
    112a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <SPI_receive>
    112e:	d8 2f       	mov	r29, r24
	
	SPI_deactivateSlave(slave);
    1130:	8c 2f       	mov	r24, r28
    1132:	0e 94 e7 10 	call	0x21ce	; 0x21ce <SPI_deactivateSlave>
	return result;
}
    1136:	8d 2f       	mov	r24, r29
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	08 95       	ret

0000113e <MCP2515_init>:
#include <avr/io.h>
#include "MCP2515Lib.h"

uint8_t MCP2515_init()
{
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	ca df       	rcall	.-108    	; 0x10d6 <MCP2515_reset>
    1142:	6e e0       	ldi	r22, 0x0E	; 14
	// Self-test
	uint8_t value;
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	df df       	rcall	.-66     	; 0x1106 <MCP2515_read>
    1148:	98 2f       	mov	r25, r24
    114a:	90 7e       	andi	r25, 0xE0	; 224
	if((value & MODE_MASK) != MODE_CONFIG) 
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 38       	cpi	r25, 0x80	; 128
    1150:	09 f4       	brne	.+2      	; 0x1154 <MCP2515_init+0x16>
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	08 95       	ret

00001156 <MCP2515_write>:
    1156:	1f 93       	push	r17
	{
		return 1;
	}
	return 0;
}
    1158:	cf 93       	push	r28
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_write(SPI_SLAVES slave, uint8_t address, uint8_t data)
{
    115a:	df 93       	push	r29
    115c:	c8 2f       	mov	r28, r24
    115e:	16 2f       	mov	r17, r22
    1160:	d4 2f       	mov	r29, r20
	SPI_activateSlave(slave);
    1162:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <SPI_activateSlave>
	SPI_send(MCP_WRITE);
    1166:	82 e0       	ldi	r24, 0x02	; 2
    1168:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <SPI_send>
	SPI_send(address);
    116c:	81 2f       	mov	r24, r17
    116e:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <SPI_send>
	SPI_send(data);
    1172:	8d 2f       	mov	r24, r29
    1174:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <SPI_send>
	SPI_deactivateSlave(slave);
    1178:	8c 2f       	mov	r24, r28
    117a:	0e 94 e7 10 	call	0x21ce	; 0x21ce <SPI_deactivateSlave>
}
    117e:	df 91       	pop	r29
    1180:	cf 91       	pop	r28
    1182:	1f 91       	pop	r17
    1184:	08 95       	ret

00001186 <MCP2515_bitModify>:
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_bitModify(SPI_SLAVES slave, uint8_t register2change, uint8_t mask, uint8_t newValue)
{
    1186:	0f 93       	push	r16
    1188:	1f 93       	push	r17
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	c8 2f       	mov	r28, r24
    1190:	06 2f       	mov	r16, r22
    1192:	14 2f       	mov	r17, r20
    1194:	d2 2f       	mov	r29, r18
	SPI_activateSlave(slave);
    1196:	0e 94 e3 10 	call	0x21c6	; 0x21c6 <SPI_activateSlave>
	
	SPI_send(MCP_BITMOD);
    119a:	85 e0       	ldi	r24, 0x05	; 5
    119c:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <SPI_send>
	SPI_send(register2change);
    11a0:	80 2f       	mov	r24, r16
    11a2:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <SPI_send>
	SPI_send(mask);
    11a6:	81 2f       	mov	r24, r17
    11a8:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <SPI_send>
	SPI_send(newValue);
    11ac:	8d 2f       	mov	r24, r29
    11ae:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <SPI_send>
	
	SPI_deactivateSlave(slave);
    11b2:	8c 2f       	mov	r24, r28
    11b4:	0e 94 e7 10 	call	0x21ce	; 0x21ce <SPI_deactivateSlave>
}
    11b8:	df 91       	pop	r29
    11ba:	cf 91       	pop	r28
    11bc:	1f 91       	pop	r17
    11be:	0f 91       	pop	r16
    11c0:	08 95       	ret

000011c2 <startGame>:
static OP_STATE* actualState;
static INPUT_MODE* actualInputMode;
//******************************************************************************************

void startGame()
{
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
	*actualState = GAME;
    11c6:	e0 91 f8 02 	lds	r30, 0x02F8
    11ca:	f0 91 f9 02 	lds	r31, 0x02F9
    11ce:	10 82       	st	Z, r1
	OLED_clear();
    11d0:	c9 d2       	rcall	.+1426   	; 0x1764 <OLED_clear>
    11d2:	6c e2       	ldi	r22, 0x2C	; 44
	OLED_bufferGoto(0,44);
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	1b d3       	rcall	.+1590   	; 0x1812 <OLED_bufferGoto>
    11dc:	8a ee       	ldi	r24, 0xEA	; 234
    11de:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("START");
    11e0:	77 d3       	rcall	.+1774   	; 0x18d0 <OLED_printString>
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	83 e0       	ldi	r24, 0x03	; 3
	
 	OLED_bufferGoto(3,0);
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	13 d3       	rcall	.+1574   	; 0x1812 <OLED_bufferGoto>
    11ec:	c0 e1       	ldi	r28, 0x10	; 16
    11ee:	d0 e0       	ldi	r29, 0x00	; 0
    11f0:	81 e9       	ldi	r24, 0x91	; 145
    11f2:	91 e0       	ldi	r25, 0x01	; 1
    11f4:	6d d3       	rcall	.+1754   	; 0x18d0 <OLED_printString>
    11f6:	80 e0       	ldi	r24, 0x00	; 0
 	
 	for(int i = 16; i > 0; i--)
 	{
	 	OLED_printString("*");
    11f8:	90 ef       	ldi	r25, 0xF0	; 240
    11fa:	01 97       	sbiw	r24, 0x01	; 1
    11fc:	f1 f7       	brne	.-4      	; 0x11fa <startGame+0x38>
    11fe:	21 97       	sbiw	r28, 0x01	; 1
    1200:	20 97       	sbiw	r28, 0x00	; 0
    1202:	b1 f7       	brne	.-20     	; 0x11f0 <startGame+0x2e>
    1204:	9f ef       	ldi	r25, 0xFF	; 255
    1206:	2f e7       	ldi	r18, 0x7F	; 127
    1208:	87 e0       	ldi	r24, 0x07	; 7
	OLED_bufferGoto(0,44);
	OLED_printString("START");
	
 	OLED_bufferGoto(3,0);
 	
 	for(int i = 16; i > 0; i--)
    120a:	91 50       	subi	r25, 0x01	; 1
    120c:	20 40       	sbci	r18, 0x00	; 0
    120e:	80 40       	sbci	r24, 0x00	; 0
    1210:	e1 f7       	brne	.-8      	; 0x120a <startGame+0x48>
    1212:	00 c0       	rjmp	.+0      	; 0x1214 <startGame+0x52>
    1214:	00 00       	nop
    1216:	6c e1       	ldi	r22, 0x1C	; 28
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	86 e0       	ldi	r24, 0x06	; 6
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	f9 d2       	rcall	.+1522   	; 0x1812 <OLED_bufferGoto>
	 	OLED_printString("*");
	 	_delay_ms(50);
 	}

	_delay_ms(500);
	OLED_bufferGoto(6,28);
    1220:	80 ef       	ldi	r24, 0xF0	; 240
    1222:	91 e0       	ldi	r25, 0x01	; 1
    1224:	55 d3       	rcall	.+1706   	; 0x18d0 <OLED_printString>
    1226:	9f ef       	ldi	r25, 0xFF	; 255
    1228:	2f ef       	ldi	r18, 0xFF	; 255
    122a:	8d e1       	ldi	r24, 0x1D	; 29
	OLED_printString("GOOD LUCK");
    122c:	91 50       	subi	r25, 0x01	; 1
    122e:	20 40       	sbci	r18, 0x00	; 0
    1230:	80 40       	sbci	r24, 0x00	; 0
    1232:	e1 f7       	brne	.-8      	; 0x122c <startGame+0x6a>
    1234:	00 c0       	rjmp	.+0      	; 0x1236 <startGame+0x74>
    1236:	00 00       	nop
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	08 95       	ret

0000123e <MENU_addMenuItem>:
    123e:	cf 92       	push	r12
    1240:	df 92       	push	r13
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
	_delay_ms(2000);
}
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
	modeMenu->children[2] = currItem;
	modeMenu->children[2]->functionPtr = &MENU_updateState;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
    124c:	df 93       	push	r29
    124e:	8c 01       	movw	r16, r24
    1250:	7b 01       	movw	r14, r22
    1252:	6a 01       	movw	r12, r20
    1254:	e9 01       	movw	r28, r18
	if(currItem != NULL)
    1256:	80 91 fd 02 	lds	r24, 0x02FD
    125a:	90 91 fe 02 	lds	r25, 0x02FE
    125e:	89 2b       	or	r24, r25
    1260:	21 f0       	breq	.+8      	; 0x126a <MENU_addMenuItem+0x2c>
	{
		printf("Creating next item...\n");
    1262:	8a ef       	ldi	r24, 0xFA	; 250
    1264:	91 e0       	ldi	r25, 0x01	; 1
    1266:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <puts>
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
    126a:	8c e0       	ldi	r24, 0x0C	; 12
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	0e 94 93 13 	call	0x2726	; 0x2726 <malloc>
    1272:	fc 01       	movw	r30, r24
    1274:	90 93 fe 02 	sts	0x02FE, r25
    1278:	80 93 fd 02 	sts	0x02FD, r24
	currItem->parentMenu = parentMenu;
    127c:	f3 82       	std	Z+3, r15	; 0x03
    127e:	e2 82       	std	Z+2, r14	; 0x02
	currItem->name = name;
    1280:	11 83       	std	Z+1, r17	; 0x01
    1282:	00 83       	st	Z, r16
	
	if(hasChildMenu)
    1284:	cd 2b       	or	r28, r29
    1286:	39 f0       	breq	.+14     	; 0x1296 <MENU_addMenuItem+0x58>
	{
		currItem->childMenu = childMenu;
    1288:	d5 82       	std	Z+5, r13	; 0x05
    128a:	c4 82       	std	Z+4, r12	; 0x04
		currItem->hasChildMenu = 1;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	97 83       	std	Z+7, r25	; 0x07
    1292:	86 83       	std	Z+6, r24	; 0x06
    1294:	04 c0       	rjmp	.+8      	; 0x129e <MENU_addMenuItem+0x60>
	}
	else
	{
		currItem->childMenu = NULL;
    1296:	15 82       	std	Z+5, r1	; 0x05
    1298:	14 82       	std	Z+4, r1	; 0x04
		currItem->hasChildMenu = 0;
    129a:	17 82       	std	Z+7, r1	; 0x07
    129c:	16 82       	std	Z+6, r1	; 0x06
	}
}
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	ef 90       	pop	r14
    12aa:	df 90       	pop	r13
    12ac:	cf 90       	pop	r12
    12ae:	08 95       	ret

000012b0 <MENU_buildMenus>:
	OLED_printString("GOOD LUCK");
	_delay_ms(2000);
}

void MENU_buildMenus()
{
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
    12b4:	86 e1       	ldi	r24, 0x16	; 22
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	0e 94 93 13 	call	0x2726	; 0x2726 <malloc>
    12bc:	ec 01       	movw	r28, r24
    12be:	90 93 04 03 	sts	0x0304, r25
    12c2:	80 93 03 03 	sts	0x0303, r24
	mainMenu->menuName = "MainMenu";
    12c6:	80 e1       	ldi	r24, 0x10	; 16
    12c8:	92 e0       	ldi	r25, 0x02	; 2
    12ca:	99 83       	std	Y+1, r25	; 0x01
    12cc:	88 83       	st	Y, r24
	mainMenu->parentMenu = NULL;
    12ce:	1d 8a       	std	Y+21, r1	; 0x15
    12d0:	1c 8a       	std	Y+20, r1	; 0x14
	mainMenu->noChilds = 4;
    12d2:	84 e0       	ldi	r24, 0x04	; 4
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	9b 83       	std	Y+3, r25	; 0x03
    12d8:	8a 83       	std	Y+2, r24	; 0x02
	
	//create DifficultyMenu
	modeMenu = malloc(sizeof(menuNode_t));
    12da:	86 e1       	ldi	r24, 0x16	; 22
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	0e 94 93 13 	call	0x2726	; 0x2726 <malloc>
    12e2:	fc 01       	movw	r30, r24
    12e4:	90 93 02 03 	sts	0x0302, r25
    12e8:	80 93 01 03 	sts	0x0301, r24
	modeMenu->menuName = "ModeMenu";
    12ec:	89 e1       	ldi	r24, 0x19	; 25
    12ee:	92 e0       	ldi	r25, 0x02	; 2
    12f0:	91 83       	std	Z+1, r25	; 0x01
    12f2:	80 83       	st	Z, r24
	modeMenu->parentMenu = mainMenu;
    12f4:	d5 8b       	std	Z+21, r29	; 0x15
    12f6:	c4 8b       	std	Z+20, r28	; 0x14
	modeMenu->noChilds = 3;
    12f8:	83 e0       	ldi	r24, 0x03	; 3
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	93 83       	std	Z+3, r25	; 0x03
    12fe:	82 83       	std	Z+2, r24	; 0x02
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	40 e0       	ldi	r20, 0x00	; 0
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	be 01       	movw	r22, r28
    130a:	82 e2       	ldi	r24, 0x22	; 34
    130c:	92 e0       	ldi	r25, 0x02	; 2
    130e:	97 df       	rcall	.-210    	; 0x123e <MENU_addMenuItem>
    1310:	60 91 03 03 	lds	r22, 0x0303
	mainMenu->children[0] = currItem;
    1314:	70 91 04 03 	lds	r23, 0x0304
    1318:	e0 91 fd 02 	lds	r30, 0x02FD
    131c:	f0 91 fe 02 	lds	r31, 0x02FE
    1320:	db 01       	movw	r26, r22
    1322:	15 96       	adiw	r26, 0x05	; 5
    1324:	fc 93       	st	X, r31
    1326:	ee 93       	st	-X, r30
    1328:	14 97       	sbiw	r26, 0x04	; 4
    132a:	81 ee       	ldi	r24, 0xE1	; 225
	mainMenu->children[0]->functionPtr = &startGame;
    132c:	98 e0       	ldi	r25, 0x08	; 8
    132e:	93 87       	std	Z+11, r25	; 0x0b
    1330:	82 87       	std	Z+10, r24	; 0x0a
    1332:	40 91 01 03 	lds	r20, 0x0301
	
	MENU_addMenuItem("Mode", mainMenu, modeMenu, 1);
    1336:	50 91 02 03 	lds	r21, 0x0302
    133a:	21 e0       	ldi	r18, 0x01	; 1
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	8b e2       	ldi	r24, 0x2B	; 43
    1340:	92 e0       	ldi	r25, 0x02	; 2
    1342:	7d df       	rcall	.-262    	; 0x123e <MENU_addMenuItem>
    1344:	60 91 03 03 	lds	r22, 0x0303
	mainMenu->children[1] = currItem;
    1348:	70 91 04 03 	lds	r23, 0x0304
    134c:	80 91 fd 02 	lds	r24, 0x02FD
    1350:	90 91 fe 02 	lds	r25, 0x02FE
    1354:	fb 01       	movw	r30, r22
    1356:	97 83       	std	Z+7, r25	; 0x07
    1358:	86 83       	std	Z+6, r24	; 0x06
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
    135e:	40 e0       	ldi	r20, 0x00	; 0
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	80 e3       	ldi	r24, 0x30	; 48
    1364:	92 e0       	ldi	r25, 0x02	; 2
    1366:	6b df       	rcall	.-298    	; 0x123e <MENU_addMenuItem>
    1368:	60 91 03 03 	lds	r22, 0x0303
    136c:	70 91 04 03 	lds	r23, 0x0304
	mainMenu->children[2] = currItem;
    1370:	e0 91 fd 02 	lds	r30, 0x02FD
    1374:	f0 91 fe 02 	lds	r31, 0x02FE
    1378:	db 01       	movw	r26, r22
    137a:	19 96       	adiw	r26, 0x09	; 9
    137c:	fc 93       	st	X, r31
    137e:	ee 93       	st	-X, r30
    1380:	18 97       	sbiw	r26, 0x08	; 8
    1382:	85 ea       	ldi	r24, 0xA5	; 165
    1384:	96 e0       	ldi	r25, 0x06	; 6
    1386:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[2]->functionPtr = &JOY_calibrate; //assign function to this item
    1388:	82 87       	std	Z+10, r24	; 0x0a
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
    1390:	50 e0       	ldi	r21, 0x00	; 0
    1392:	8a e3       	ldi	r24, 0x3A	; 58
    1394:	92 e0       	ldi	r25, 0x02	; 2
    1396:	53 df       	rcall	.-346    	; 0x123e <MENU_addMenuItem>
    1398:	e0 91 fd 02 	lds	r30, 0x02FD
    139c:	f0 91 fe 02 	lds	r31, 0x02FE
	mainMenu->children[3] = currItem;
    13a0:	a0 91 03 03 	lds	r26, 0x0303
    13a4:	b0 91 04 03 	lds	r27, 0x0304
    13a8:	1b 96       	adiw	r26, 0x0b	; 11
    13aa:	fc 93       	st	X, r31
    13ac:	ee 93       	st	-X, r30
    13ae:	1a 97       	sbiw	r26, 0x0a	; 10
    13b0:	8f e3       	ldi	r24, 0x3F	; 63
    13b2:	9b e0       	ldi	r25, 0x0B	; 11
    13b4:	93 87       	std	Z+11, r25	; 0x0b
    13b6:	82 87       	std	Z+10, r24	; 0x0a
	mainMenu->children[3]->functionPtr = &MENU_printInfo;
    13b8:	10 92 fe 02 	sts	0x02FE, r1
    13bc:	10 92 fd 02 	sts	0x02FD, r1
	
	currItem = NULL;
    13c0:	60 91 01 03 	lds	r22, 0x0301
    13c4:	70 91 02 03 	lds	r23, 0x0302
	
	MENU_addMenuItem("Slider", modeMenu, NULL, 0);
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	40 e0       	ldi	r20, 0x00	; 0
    13ce:	50 e0       	ldi	r21, 0x00	; 0
    13d0:	8f e3       	ldi	r24, 0x3F	; 63
    13d2:	92 e0       	ldi	r25, 0x02	; 2
    13d4:	34 df       	rcall	.-408    	; 0x123e <MENU_addMenuItem>
    13d6:	60 91 01 03 	lds	r22, 0x0301
    13da:	70 91 02 03 	lds	r23, 0x0302
    13de:	e0 91 fd 02 	lds	r30, 0x02FD
	modeMenu->children[0] = currItem;
    13e2:	f0 91 fe 02 	lds	r31, 0x02FE
    13e6:	db 01       	movw	r26, r22
    13e8:	15 96       	adiw	r26, 0x05	; 5
    13ea:	fc 93       	st	X, r31
    13ec:	ee 93       	st	-X, r30
    13ee:	14 97       	sbiw	r26, 0x04	; 4
    13f0:	cb e6       	ldi	r28, 0x6B	; 107
    13f2:	db e0       	ldi	r29, 0x0B	; 11
    13f4:	d3 87       	std	Z+11, r29	; 0x0b
    13f6:	c2 87       	std	Z+10, r28	; 0x0a
    13f8:	20 e0       	ldi	r18, 0x00	; 0
	modeMenu->children[0]->functionPtr = &MENU_updateState;
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	40 e0       	ldi	r20, 0x00	; 0
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	86 e4       	ldi	r24, 0x46	; 70
	
	MENU_addMenuItem("Joystick", modeMenu, NULL, 0);
    1402:	92 e0       	ldi	r25, 0x02	; 2
    1404:	1c df       	rcall	.-456    	; 0x123e <MENU_addMenuItem>
    1406:	60 91 01 03 	lds	r22, 0x0301
    140a:	70 91 02 03 	lds	r23, 0x0302
    140e:	e0 91 fd 02 	lds	r30, 0x02FD
	modeMenu->children[1] = currItem;
    1412:	f0 91 fe 02 	lds	r31, 0x02FE
    1416:	db 01       	movw	r26, r22
    1418:	17 96       	adiw	r26, 0x07	; 7
    141a:	fc 93       	st	X, r31
    141c:	ee 93       	st	-X, r30
    141e:	16 97       	sbiw	r26, 0x06	; 6
    1420:	d3 87       	std	Z+11, r29	; 0x0b
    1422:	c2 87       	std	Z+10, r28	; 0x0a
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e0       	ldi	r20, 0x00	; 0
    142a:	50 e0       	ldi	r21, 0x00	; 0
	modeMenu->children[1]->functionPtr = &MENU_updateState;
    142c:	8f e4       	ldi	r24, 0x4F	; 79
    142e:	92 e0       	ldi	r25, 0x02	; 2
	
	MENU_addMenuItem("PC", modeMenu, NULL, 0);
    1430:	06 df       	rcall	.-500    	; 0x123e <MENU_addMenuItem>
    1432:	e0 91 fd 02 	lds	r30, 0x02FD
    1436:	f0 91 fe 02 	lds	r31, 0x02FE
    143a:	a0 91 01 03 	lds	r26, 0x0301
    143e:	b0 91 02 03 	lds	r27, 0x0302
	modeMenu->children[2] = currItem;
    1442:	19 96       	adiw	r26, 0x09	; 9
    1444:	fc 93       	st	X, r31
    1446:	ee 93       	st	-X, r30
    1448:	18 97       	sbiw	r26, 0x08	; 8
    144a:	d3 87       	std	Z+11, r29	; 0x0b
    144c:	c2 87       	std	Z+10, r28	; 0x0a
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	08 95       	ret

00001454 <MENU_printMenuItem>:
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
	modeMenu->children[2]->functionPtr = &MENU_updateState;
    1458:	ec 01       	movw	r28, r24
    145a:	cb 01       	movw	r24, r22
}
    145c:	20 97       	sbiw	r28, 0x00	; 0
    145e:	39 f0       	breq	.+14     	; 0x146e <MENU_printMenuItem+0x1a>
    1460:	6a e0       	ldi	r22, 0x0A	; 10

void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_bufferGoto(lineNumber, menuFrameOffset);
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	d6 d1       	rcall	.+940    	; 0x1812 <OLED_bufferGoto>
    1466:	88 81       	ld	r24, Y
		OLED_printString(item->name);
    1468:	99 81       	ldd	r25, Y+1	; 0x01
    146a:	32 d2       	rcall	.+1124   	; 0x18d0 <OLED_printString>
    146c:	08 c0       	rjmp	.+16     	; 0x147e <MENU_printMenuItem+0x2a>
    146e:	82 e5       	ldi	r24, 0x52	; 82
    1470:	92 e0       	ldi	r25, 0x02	; 2
	}
	else
	{
		printf("NULL pointer...");
    1472:	9f 93       	push	r25
    1474:	8f 93       	push	r24
    1476:	0e 94 04 15 	call	0x2a08	; 0x2a08 <printf>
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
	}
}
    1482:	08 95       	ret

00001484 <MENU_printMenu>:
    1484:	cf 92       	push	r12
    1486:	df 92       	push	r13

void MENU_printMenu(menuNode_t* menu, int noElements)
{
    1488:	ef 92       	push	r14
    148a:	ff 92       	push	r15
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	6c 01       	movw	r12, r24
    1496:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
    1498:	65 d1       	rcall	.+714    	; 0x1764 <OLED_clear>
    149a:	f8 d3       	rcall	.+2032   	; 0x1c8c <OLED_resetArrow>
	//print arrow
	OLED_resetArrow();
    149c:	1e 14       	cp	r1, r14
    149e:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
    14a0:	7c f4       	brge	.+30     	; 0x14c0 <MENU_printMenu+0x3c>
    14a2:	86 01       	movw	r16, r12
    14a4:	0c 5f       	subi	r16, 0xFC	; 252
    14a6:	1f 4f       	sbci	r17, 0xFF	; 255
    14a8:	c0 e0       	ldi	r28, 0x00	; 0
    14aa:	d0 e0       	ldi	r29, 0x00	; 0
    14ac:	be 01       	movw	r22, r28
    14ae:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
    14b0:	81 91       	ld	r24, Z+
    14b2:	91 91       	ld	r25, Z+
    14b4:	8f 01       	movw	r16, r30
    14b6:	ce df       	rcall	.-100    	; 0x1454 <MENU_printMenuItem>
    14b8:	21 96       	adiw	r28, 0x01	; 1
    14ba:	ce 15       	cp	r28, r14
    14bc:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_resetArrow();
	
	for(int i = 0; i < noElements; i++)
    14be:	b1 f7       	brne	.-20     	; 0x14ac <MENU_printMenu+0x28>
    14c0:	d0 92 00 03 	sts	0x0300, r13
    14c4:	c0 92 ff 02 	sts	0x02FF, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
    14c8:	10 92 fb 02 	sts	0x02FB, r1
    14cc:	10 92 fa 02 	sts	0x02FA, r1
	
	currentPosition = 0;
    14d0:	f6 01       	movw	r30, r12
    14d2:	84 81       	ldd	r24, Z+4	; 0x04
    14d4:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
    14d6:	90 93 fe 02 	sts	0x02FE, r25
    14da:	80 93 fd 02 	sts	0x02FD, r24
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	1f 91       	pop	r17
}
    14e4:	0f 91       	pop	r16
    14e6:	ff 90       	pop	r15
    14e8:	ef 90       	pop	r14
    14ea:	df 90       	pop	r13
    14ec:	cf 90       	pop	r12
    14ee:	08 95       	ret

000014f0 <MENU_moveUp>:
    14f0:	20 91 fa 02 	lds	r18, 0x02FA
    14f4:	30 91 fb 02 	lds	r19, 0x02FB
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
    14f8:	12 16       	cp	r1, r18
    14fa:	13 06       	cpc	r1, r19
    14fc:	bc f4       	brge	.+46     	; 0x152c <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
    14fe:	c9 01       	movw	r24, r18
    1500:	01 97       	sbiw	r24, 0x01	; 1
    1502:	90 93 fb 02 	sts	0x02FB, r25
    1506:	80 93 fa 02 	sts	0x02FA, r24
		currItem = currentMenu->children[currentPosition];
    150a:	e0 91 ff 02 	lds	r30, 0x02FF
    150e:	f0 91 00 03 	lds	r31, 0x0300
    1512:	2f 5f       	subi	r18, 0xFF	; 255
    1514:	3f 4f       	sbci	r19, 0xFF	; 255
    1516:	22 0f       	add	r18, r18
    1518:	33 1f       	adc	r19, r19
    151a:	e2 0f       	add	r30, r18
    151c:	f3 1f       	adc	r31, r19
    151e:	20 81       	ld	r18, Z
    1520:	31 81       	ldd	r19, Z+1	; 0x01
    1522:	30 93 fe 02 	sts	0x02FE, r19
    1526:	20 93 fd 02 	sts	0x02FD, r18
		OLED_moveArrow(currentPosition);
    152a:	5a c2       	rjmp	.+1204   	; 0x19e0 <OLED_moveArrow>
    152c:	08 95       	ret

0000152e <MENU_moveDown>:
    152e:	e0 91 ff 02 	lds	r30, 0x02FF
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
    1532:	f0 91 00 03 	lds	r31, 0x0300
    1536:	20 91 fa 02 	lds	r18, 0x02FA
    153a:	30 91 fb 02 	lds	r19, 0x02FB
    153e:	82 81       	ldd	r24, Z+2	; 0x02
    1540:	93 81       	ldd	r25, Z+3	; 0x03
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	28 17       	cp	r18, r24
    1546:	39 07       	cpc	r19, r25
    1548:	a4 f4       	brge	.+40     	; 0x1572 <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
    154a:	c9 01       	movw	r24, r18
    154c:	01 96       	adiw	r24, 0x01	; 1
    154e:	90 93 fb 02 	sts	0x02FB, r25
    1552:	80 93 fa 02 	sts	0x02FA, r24
		currItem = currentMenu->children[currentPosition];
    1556:	2d 5f       	subi	r18, 0xFD	; 253
    1558:	3f 4f       	sbci	r19, 0xFF	; 255
    155a:	22 0f       	add	r18, r18
    155c:	33 1f       	adc	r19, r19
    155e:	e2 0f       	add	r30, r18
    1560:	f3 1f       	adc	r31, r19
    1562:	20 81       	ld	r18, Z
    1564:	31 81       	ldd	r19, Z+1	; 0x01
    1566:	30 93 fe 02 	sts	0x02FE, r19
    156a:	20 93 fd 02 	sts	0x02FD, r18
		OLED_moveArrow(currentPosition);
    156e:	38 c2       	rjmp	.+1136   	; 0x19e0 <OLED_moveArrow>
    1570:	08 95       	ret
    1572:	10 92 fb 02 	sts	0x02FB, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
    1576:	10 92 fa 02 	sts	0x02FA, r1
    157a:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
    157c:	95 81       	ldd	r25, Z+5	; 0x05
    157e:	90 93 fe 02 	sts	0x02FE, r25
    1582:	80 93 fd 02 	sts	0x02FD, r24
    1586:	82 d3       	rcall	.+1796   	; 0x1c8c <OLED_resetArrow>
		OLED_resetArrow();
    1588:	2f ef       	ldi	r18, 0xFF	; 255
    158a:	8f ef       	ldi	r24, 0xFF	; 255
    158c:	92 e0       	ldi	r25, 0x02	; 2
    158e:	21 50       	subi	r18, 0x01	; 1
    1590:	80 40       	sbci	r24, 0x00	; 0
    1592:	90 40       	sbci	r25, 0x00	; 0
    1594:	e1 f7       	brne	.-8      	; 0x158e <MENU_moveDown+0x60>
    1596:	00 c0       	rjmp	.+0      	; 0x1598 <MENU_moveDown+0x6a>
    1598:	00 c0       	rjmp	.+0      	; 0x159a <MENU_moveDown+0x6c>
    159a:	08 95       	ret

0000159c <MENU_moveLeft>:
    159c:	e0 91 ff 02 	lds	r30, 0x02FF
	_delay_ms(200);
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
    15a0:	f0 91 00 03 	lds	r31, 0x0300
    15a4:	84 89       	ldd	r24, Z+20	; 0x14
    15a6:	95 89       	ldd	r25, Z+21	; 0x15
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	21 f0       	breq	.+8      	; 0x15b4 <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
    15ac:	fc 01       	movw	r30, r24
    15ae:	62 81       	ldd	r22, Z+2	; 0x02
    15b0:	73 81       	ldd	r23, Z+3	; 0x03
    15b2:	68 cf       	rjmp	.-304    	; 0x1484 <MENU_printMenu>
    15b4:	08 95       	ret

000015b6 <MENU_reactivate>:
    15b6:	80 91 ff 02 	lds	r24, 0x02FF
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
    15ba:	90 91 00 03 	lds	r25, 0x0300
    15be:	fc 01       	movw	r30, r24
    15c0:	62 81       	ldd	r22, Z+2	; 0x02
    15c2:	73 81       	ldd	r23, Z+3	; 0x03
    15c4:	5f df       	rcall	.-322    	; 0x1484 <MENU_printMenu>
    15c6:	21 c0       	rjmp	.+66     	; 0x160a <MENU_waitForInput>
	MENU_waitForInput();
    15c8:	08 95       	ret

000015ca <MENU_moveRight>:
    15ca:	e0 91 fd 02 	lds	r30, 0x02FD
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
    15ce:	f0 91 fe 02 	lds	r31, 0x02FE
    15d2:	86 81       	ldd	r24, Z+6	; 0x06
    15d4:	97 81       	ldd	r25, Z+7	; 0x07
    15d6:	89 2b       	or	r24, r25
    15d8:	39 f0       	breq	.+14     	; 0x15e8 <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
    15da:	84 81       	ldd	r24, Z+4	; 0x04
    15dc:	95 81       	ldd	r25, Z+5	; 0x05
    15de:	fc 01       	movw	r30, r24
    15e0:	62 81       	ldd	r22, Z+2	; 0x02
    15e2:	73 81       	ldd	r23, Z+3	; 0x03
    15e4:	4f df       	rcall	.-354    	; 0x1484 <MENU_printMenu>
    15e6:	07 c0       	rjmp	.+14     	; 0x15f6 <MENU_moveRight+0x2c>
    15e8:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
    15ea:	f3 85       	ldd	r31, Z+11	; 0x0b
    15ec:	e0 2d       	mov	r30, r0
    15ee:	30 97       	sbiw	r30, 0x00	; 0
    15f0:	11 f0       	breq	.+4      	; 0x15f6 <MENU_moveRight+0x2c>
    15f2:	09 95       	icall
	{
		currItem->functionPtr();
    15f4:	e0 df       	rcall	.-64     	; 0x15b6 <MENU_reactivate>
		MENU_reactivate();
    15f6:	ff ef       	ldi	r31, 0xFF	; 255
    15f8:	2f ef       	ldi	r18, 0xFF	; 255
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	f1 50       	subi	r31, 0x01	; 1
    15fe:	20 40       	sbci	r18, 0x00	; 0
    1600:	80 40       	sbci	r24, 0x00	; 0
    1602:	e1 f7       	brne	.-8      	; 0x15fc <MENU_moveRight+0x32>
    1604:	00 c0       	rjmp	.+0      	; 0x1606 <MENU_moveRight+0x3c>
    1606:	00 c0       	rjmp	.+0      	; 0x1608 <MENU_moveRight+0x3e>
    1608:	08 95       	ret

0000160a <MENU_waitForInput>:
    160a:	80 91 fa 02 	lds	r24, 0x02FA
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
    160e:	90 91 fb 02 	lds	r25, 0x02FB
    1612:	e6 d1       	rcall	.+972    	; 0x19e0 <OLED_moveArrow>
    1614:	12 c0       	rjmp	.+36     	; 0x163a <MENU_waitForInput+0x30>
	JOY_direction_t currDir;
	
	while(menuActiveFlag && *actualState == MENU)
    1616:	4b dd       	rcall	.-1386   	; 0x10ae <JOY_getDirection>
	{
		currDir = JOY_getDirection();
    1618:	82 30       	cpi	r24, 0x02	; 2
    161a:	71 f0       	breq	.+28     	; 0x1638 <MENU_waitForInput+0x2e>
		switch(currDir){
    161c:	18 f4       	brcc	.+6      	; 0x1624 <MENU_waitForInput+0x1a>
    161e:	81 30       	cpi	r24, 0x01	; 1
    1620:	49 f0       	breq	.+18     	; 0x1634 <MENU_waitForInput+0x2a>
    1622:	0b c0       	rjmp	.+22     	; 0x163a <MENU_waitForInput+0x30>
    1624:	83 30       	cpi	r24, 0x03	; 3
    1626:	21 f0       	breq	.+8      	; 0x1630 <MENU_waitForInput+0x26>
    1628:	84 30       	cpi	r24, 0x04	; 4
    162a:	39 f4       	brne	.+14     	; 0x163a <MENU_waitForInput+0x30>
    162c:	b7 df       	rcall	.-146    	; 0x159c <MENU_moveLeft>
    162e:	05 c0       	rjmp	.+10     	; 0x163a <MENU_waitForInput+0x30>
			case LEFT:
			MENU_moveLeft();
    1630:	cc df       	rcall	.-104    	; 0x15ca <MENU_moveRight>
    1632:	03 c0       	rjmp	.+6      	; 0x163a <MENU_waitForInput+0x30>
			break;
    1634:	5d df       	rcall	.-326    	; 0x14f0 <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
    1636:	01 c0       	rjmp	.+2      	; 0x163a <MENU_waitForInput+0x30>
    1638:	7a df       	rcall	.-268    	; 0x152e <MENU_moveDown>
			break;
    163a:	80 91 fc 02 	lds	r24, 0x02FC
			
			case UP:
			MENU_moveUp();
    163e:	88 23       	and	r24, r24
			break;
    1640:	39 f0       	breq	.+14     	; 0x1650 <MENU_waitForInput+0x46>
			
			case DOWN:
			MENU_moveDown();
    1642:	e0 91 f8 02 	lds	r30, 0x02F8
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag && *actualState == MENU)
    1646:	f0 91 f9 02 	lds	r31, 0x02F9
    164a:	80 81       	ld	r24, Z
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	19 f3       	breq	.-58     	; 0x1616 <MENU_waitForInput+0xc>
    1650:	08 95       	ret

00001652 <MENU_activate>:
    1652:	90 93 f9 02 	sts	0x02F9, r25
    1656:	80 93 f8 02 	sts	0x02F8, r24
    165a:	70 93 f7 02 	sts	0x02F7, r23
}

void MENU_activate(OP_STATE* state, INPUT_MODE* inputMode)
{
	actualState = state;
	actualInputMode = inputMode;
    165e:	60 93 f6 02 	sts	0x02F6, r22
	menuActiveFlag = 1;
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	80 93 fc 02 	sts	0x02FC, r24
	MENU_buildMenus();
    1668:	23 de       	rcall	.-954    	; 0x12b0 <MENU_buildMenus>
    166a:	80 91 03 03 	lds	r24, 0x0303
	MENU_printMenu(mainMenu, mainMenu->noChilds);
    166e:	90 91 04 03 	lds	r25, 0x0304
    1672:	fc 01       	movw	r30, r24
    1674:	62 81       	ldd	r22, Z+2	; 0x02
    1676:	73 81       	ldd	r23, Z+3	; 0x03
    1678:	05 df       	rcall	.-502    	; 0x1484 <MENU_printMenu>
    167a:	c7 cf       	rjmp	.-114    	; 0x160a <MENU_waitForInput>
    167c:	08 95       	ret

0000167e <MENU_printInfo>:
	MENU_waitForInput();
    167e:	72 d0       	rcall	.+228    	; 0x1764 <OLED_clear>
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	70 e0       	ldi	r23, 0x00	; 0
}

void MENU_printInfo()
{
	OLED_clear();
	OLED_bufferGoto(0,0);
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	c4 d0       	rcall	.+392    	; 0x1812 <OLED_bufferGoto>
    168a:	82 e6       	ldi	r24, 0x62	; 98
    168c:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("GROUP 46");
    168e:	20 d1       	rcall	.+576    	; 0x18d0 <OLED_printString>
    1690:	60 e0       	ldi	r22, 0x00	; 0
    1692:	70 e0       	ldi	r23, 0x00	; 0
    1694:	82 e0       	ldi	r24, 0x02	; 2
	OLED_bufferGoto(2,0);
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	bc d0       	rcall	.+376    	; 0x1812 <OLED_bufferGoto>
    169a:	8b e6       	ldi	r24, 0x6B	; 107
    169c:	92 e0       	ldi	r25, 0x02	; 2
    169e:	18 d1       	rcall	.+560    	; 0x18d0 <OLED_printString>
    16a0:	60 e0       	ldi	r22, 0x00	; 0
	OLED_printString("O.Kasperek");
    16a2:	70 e0       	ldi	r23, 0x00	; 0
    16a4:	83 e0       	ldi	r24, 0x03	; 3
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	b4 d0       	rcall	.+360    	; 0x1812 <OLED_bufferGoto>
	OLED_bufferGoto(3,0);
    16aa:	86 e7       	ldi	r24, 0x76	; 118
    16ac:	92 e0       	ldi	r25, 0x02	; 2
    16ae:	10 d1       	rcall	.+544    	; 0x18d0 <OLED_printString>
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	84 e0       	ldi	r24, 0x04	; 4
	OLED_printString("L.Hagele");
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	ac d0       	rcall	.+344    	; 0x1812 <OLED_bufferGoto>
    16ba:	8f e7       	ldi	r24, 0x7F	; 127
    16bc:	92 e0       	ldi	r25, 0x02	; 2
	OLED_bufferGoto(4,0);
    16be:	08 d1       	rcall	.+528    	; 0x18d0 <OLED_printString>
    16c0:	2f ef       	ldi	r18, 0xFF	; 255
    16c2:	8f ef       	ldi	r24, 0xFF	; 255
    16c4:	9c e2       	ldi	r25, 0x2C	; 44
    16c6:	21 50       	subi	r18, 0x01	; 1
    16c8:	80 40       	sbci	r24, 0x00	; 0
	OLED_printString("J.Haberny");
    16ca:	90 40       	sbci	r25, 0x00	; 0
    16cc:	e1 f7       	brne	.-8      	; 0x16c6 <MENU_printInfo+0x48>
    16ce:	00 c0       	rjmp	.+0      	; 0x16d0 <MENU_printInfo+0x52>
    16d0:	00 c0       	rjmp	.+0      	; 0x16d2 <MENU_printInfo+0x54>
    16d2:	71 cf       	rjmp	.-286    	; 0x15b6 <MENU_reactivate>
    16d4:	08 95       	ret

000016d6 <MENU_updateState>:
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	c0 91 fa 02 	lds	r28, 0x02FA
    16de:	d0 91 fb 02 	lds	r29, 0x02FB
    16e2:	40 d0       	rcall	.+128    	; 0x1764 <OLED_clear>
	
	_delay_ms(3000);
	MENU_reactivate();
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	70 e0       	ldi	r23, 0x00	; 0
    16e8:	80 e0       	ldi	r24, 0x00	; 0

void MENU_updateState()
{
	uint8_t newState = currentPosition;
	OLED_clear();
	OLED_bufferGoto(0,0);
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	92 d0       	rcall	.+292    	; 0x1812 <OLED_bufferGoto>
    16ee:	89 e8       	ldi	r24, 0x89	; 137
    16f0:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("INPUT:");
    16f2:	ee d0       	rcall	.+476    	; 0x18d0 <OLED_printString>
    16f4:	60 e0       	ldi	r22, 0x00	; 0
    16f6:	70 e0       	ldi	r23, 0x00	; 0
    16f8:	81 e0       	ldi	r24, 0x01	; 1
	OLED_bufferGoto(1,0);
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	8a d0       	rcall	.+276    	; 0x1812 <OLED_bufferGoto>
    16fe:	ce 01       	movw	r24, r28
    1700:	99 27       	eor	r25, r25
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	91 05       	cpc	r25, r1
	switch (newState)
    1706:	71 f0       	breq	.+28     	; 0x1724 <MENU_updateState+0x4e>
    1708:	82 30       	cpi	r24, 0x02	; 2
    170a:	91 05       	cpc	r25, r1
    170c:	a9 f0       	breq	.+42     	; 0x1738 <MENU_updateState+0x62>
    170e:	89 2b       	or	r24, r25
    1710:	e1 f4       	brne	.+56     	; 0x174a <MENU_updateState+0x74>
    1712:	e0 91 f6 02 	lds	r30, 0x02F6
    1716:	f0 91 f7 02 	lds	r31, 0x02F7
	{
		case 0:
			*actualInputMode = SLIDER;
    171a:	10 82       	st	Z, r1
    171c:	80 e9       	ldi	r24, 0x90	; 144
    171e:	92 e0       	ldi	r25, 0x02	; 2
    1720:	d7 d0       	rcall	.+430    	; 0x18d0 <OLED_printString>
    1722:	13 c0       	rjmp	.+38     	; 0x174a <MENU_updateState+0x74>
			OLED_printString("SLIDER");
    1724:	e0 91 f6 02 	lds	r30, 0x02F6
    1728:	f0 91 f7 02 	lds	r31, 0x02F7
			break;
    172c:	81 e0       	ldi	r24, 0x01	; 1
		
		case 1:
			*actualInputMode = JOYSTICK;
    172e:	80 83       	st	Z, r24
    1730:	87 e9       	ldi	r24, 0x97	; 151
    1732:	92 e0       	ldi	r25, 0x02	; 2
    1734:	cd d0       	rcall	.+410    	; 0x18d0 <OLED_printString>
    1736:	09 c0       	rjmp	.+18     	; 0x174a <MENU_updateState+0x74>
    1738:	e0 91 f6 02 	lds	r30, 0x02F6
			OLED_printString("JOYSTICK");
    173c:	f0 91 f7 02 	lds	r31, 0x02F7
    1740:	82 e0       	ldi	r24, 0x02	; 2
			break;
    1742:	80 83       	st	Z, r24
		
		case 2:
			*actualInputMode = PC;
    1744:	8f e4       	ldi	r24, 0x4F	; 79
    1746:	92 e0       	ldi	r25, 0x02	; 2
    1748:	c3 d0       	rcall	.+390    	; 0x18d0 <OLED_printString>
    174a:	2f ef       	ldi	r18, 0xFF	; 255
    174c:	8f ef       	ldi	r24, 0xFF	; 255
    174e:	9e e0       	ldi	r25, 0x0E	; 14
			OLED_printString("PC");
    1750:	21 50       	subi	r18, 0x01	; 1
    1752:	80 40       	sbci	r24, 0x00	; 0
    1754:	90 40       	sbci	r25, 0x00	; 0
    1756:	e1 f7       	brne	.-8      	; 0x1750 <MENU_updateState+0x7a>
    1758:	00 c0       	rjmp	.+0      	; 0x175a <MENU_updateState+0x84>
    175a:	00 00       	nop
    175c:	2c df       	rcall	.-424    	; 0x15b6 <MENU_reactivate>
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	08 95       	ret

00001764 <OLED_clear>:
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	// clear OLED buffer
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    1764:	80 91 12 01 	lds	r24, 0x0112
    1768:	90 91 13 01 	lds	r25, 0x0113
    176c:	89 2b       	or	r24, r25
    176e:	89 f0       	breq	.+34     	; 0x1792 <OLED_clear+0x2e>
    1770:	80 e0       	ldi	r24, 0x00	; 0
    1772:	90 e0       	ldi	r25, 0x00	; 0
	{
		oled_buffer[i] = 0x00;
    1774:	e0 91 14 01 	lds	r30, 0x0114
    1778:	f0 91 15 01 	lds	r31, 0x0115
    177c:	e8 0f       	add	r30, r24
    177e:	f9 1f       	adc	r31, r25
    1780:	10 82       	st	Z, r1
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	// clear OLED buffer
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    1782:	01 96       	adiw	r24, 0x01	; 1
    1784:	20 91 12 01 	lds	r18, 0x0112
    1788:	30 91 13 01 	lds	r19, 0x0113
    178c:	82 17       	cp	r24, r18
    178e:	93 07       	cpc	r25, r19
    1790:	88 f3       	brcs	.-30     	; 0x1774 <OLED_clear+0x10>
    1792:	08 95       	ret

00001794 <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
    1794:	26 2f       	mov	r18, r22
    1796:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
    1798:	75 95       	asr	r23
    179a:	67 95       	ror	r22
    179c:	75 95       	asr	r23
    179e:	67 95       	ror	r22
    17a0:	75 95       	asr	r23
    17a2:	67 95       	ror	r22
    17a4:	75 95       	asr	r23
    17a6:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
    17a8:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
    17aa:	80 55       	subi	r24, 0x50	; 80
    17ac:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
    17ae:	e0 91 18 01 	lds	r30, 0x0118
    17b2:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    17b6:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
    17b8:	e0 91 18 01 	lds	r30, 0x0118
    17bc:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    17c0:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
    17c2:	e0 91 18 01 	lds	r30, 0x0118
    17c6:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    17ca:	60 83       	st	Z, r22
    17cc:	08 95       	ret

000017ce <OLED_updateScreen>:
	// set horizontal addressing mode
// 	OLED_writeByteToOLED(oled_cmd, 0x20); // set memory addressing mode
// 	OLED_writeByteToOLED(oled_cmd, 0x00); // set horizontal addressing mode ~ 0d
// 	
	// write OLED buffer to OLED Memory
	OLED_goto(0,0); // todo: start writing in top left corner (maybe not further needed)
    17ce:	60 e0       	ldi	r22, 0x00	; 0
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	80 e0       	ldi	r24, 0x00	; 0
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	de df       	rcall	.-68     	; 0x1794 <OLED_goto>
    17d8:	80 91 12 01 	lds	r24, 0x0112
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    17dc:	90 91 13 01 	lds	r25, 0x0113
    17e0:	89 2b       	or	r24, r25
    17e2:	b1 f0       	breq	.+44     	; 0x1810 <OLED_updateScreen+0x42>
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	e0 91 14 01 	lds	r30, 0x0114
	{
		OLED_writeByteToOLED(oled_data, oled_buffer[i]);
    17ec:	f0 91 15 01 	lds	r31, 0x0115
    17f0:	e8 0f       	add	r30, r24
    17f2:	f9 1f       	adc	r31, r25
    17f4:	20 81       	ld	r18, Z
    17f6:	e0 91 16 01 	lds	r30, 0x0116
    17fa:	f0 91 17 01 	lds	r31, 0x0117
    17fe:	20 83       	st	Z, r18
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1800:	01 96       	adiw	r24, 0x01	; 1
// 	OLED_writeByteToOLED(oled_cmd, 0x20); // set memory addressing mode
// 	OLED_writeByteToOLED(oled_cmd, 0x00); // set horizontal addressing mode ~ 0d
// 	
	// write OLED buffer to OLED Memory
	OLED_goto(0,0); // todo: start writing in top left corner (maybe not further needed)
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    1802:	20 91 12 01 	lds	r18, 0x0112
    1806:	30 91 13 01 	lds	r19, 0x0113
    180a:	82 17       	cp	r24, r18
    180c:	93 07       	cpc	r25, r19
    180e:	60 f3       	brcs	.-40     	; 0x17e8 <OLED_updateScreen+0x1a>
    1810:	08 95       	ret

00001812 <OLED_bufferGoto>:
    1812:	96 95       	lsr	r25
}

void OLED_bufferGoto(int row, int column)
{
	// change pointer in OLED SRAM buffer
	oled_buffer_position = oled_buffer + (row * 0x80) + column;
    1814:	98 2f       	mov	r25, r24
    1816:	88 27       	eor	r24, r24
    1818:	97 95       	ror	r25
    181a:	87 95       	ror	r24
    181c:	68 0f       	add	r22, r24
    181e:	79 1f       	adc	r23, r25
    1820:	80 91 14 01 	lds	r24, 0x0114
    1824:	90 91 15 01 	lds	r25, 0x0115
    1828:	68 0f       	add	r22, r24
    182a:	79 1f       	adc	r23, r25
    182c:	70 93 11 01 	sts	0x0111, r23
    1830:	60 93 10 01 	sts	0x0110, r22
    1834:	08 95       	ret

00001836 <OLED_writePixelToOLED>:


//------------------------------------------------------------------------------
//
void OLED_writePixelToOLED(uint8_t u, uint8_t v)
{
    1836:	cf 93       	push	r28
    1838:	c6 2f       	mov	r28, r22
	// determine relevant row
	uint8_t row = v/8;
	// buffer old column
	OLED_bufferGoto(row, u);
    183a:	68 2f       	mov	r22, r24
    183c:	70 e0       	ldi	r23, 0x00	; 0
//------------------------------------------------------------------------------
//
void OLED_writePixelToOLED(uint8_t u, uint8_t v)
{
	// determine relevant row
	uint8_t row = v/8;
    183e:	8c 2f       	mov	r24, r28
    1840:	86 95       	lsr	r24
    1842:	86 95       	lsr	r24
    1844:	86 95       	lsr	r24
	// buffer old column
	OLED_bufferGoto(row, u);
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	e4 df       	rcall	.-56     	; 0x1812 <OLED_bufferGoto>
    184a:	80 91 10 01 	lds	r24, 0x0110
	uint8_t buffer_column = readFromAddress(oled_buffer_position);
    184e:	90 91 11 01 	lds	r25, 0x0111
    1852:	a9 d8       	rcall	.-3758   	; 0x9a6 <readFromAddress>
    1854:	c7 70       	andi	r28, 0x07	; 7
    1856:	21 e0       	ldi	r18, 0x01	; 1
	// create new column
	buffer_column |= (1<<(v%8));
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	b9 01       	movw	r22, r18
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <OLED_writePixelToOLED+0x2c>
    185e:	66 0f       	add	r22, r22
    1860:	77 1f       	adc	r23, r23
    1862:	ca 95       	dec	r28
    1864:	e2 f7       	brpl	.-8      	; 0x185e <OLED_writePixelToOLED+0x28>
    1866:	86 2b       	or	r24, r22
    1868:	e0 91 10 01 	lds	r30, 0x0110
	OLED_writeByteToOLED(oled_buffer_position, buffer_column);
    186c:	f0 91 11 01 	lds	r31, 0x0111
    1870:	80 83       	st	Z, r24
    1872:	cf 91       	pop	r28
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1874:	08 95       	ret

00001876 <OLED_printCharacter>:
	OLED_bufferGoto(row, u);
	uint8_t buffer_column = readFromAddress(oled_buffer_position);
	// create new column
	buffer_column |= (1<<(v%8));
	OLED_writeByteToOLED(oled_buffer_position, buffer_column);
}
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
// SPACE (' '). As SPACE corresponds to position 32 in the ASCII table, this 
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
	character = character-32; // map character to font table
    187e:	80 52       	subi	r24, 0x20	; 32
    1880:	08 2f       	mov	r16, r24
    1882:	10 e0       	ldi	r17, 0x00	; 0
    1884:	00 0f       	add	r16, r16
    1886:	11 1f       	adc	r17, r17
    1888:	00 0f       	add	r16, r16
    188a:	11 1f       	adc	r17, r17
    188c:	00 0f       	add	r16, r16
    188e:	11 1f       	adc	r17, r17
    1890:	c0 e0       	ldi	r28, 0x00	; 0
    1892:	d0 e0       	ldi	r29, 0x00	; 0
    1894:	02 57       	subi	r16, 0x72	; 114
    1896:	1f 4f       	sbci	r17, 0xFF	; 255
    1898:	f8 01       	movw	r30, r16
    189a:	ec 0f       	add	r30, r28
    189c:	fd 1f       	adc	r31, r29
	
	// print 8 columns into OLED Buffer in SRAM
	for(uint8_t i = 0; i < 8; i++)
	{
		saveToAddress(oled_buffer_position, pgm_read_byte(&font8[character][i]));
    189e:	64 91       	lpm	r22, Z
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	80 91 10 01 	lds	r24, 0x0110
    18a6:	90 91 11 01 	lds	r25, 0x0111
    18aa:	80 d8       	rcall	.-3840   	; 0x9ac <saveToAddress>
    18ac:	80 91 10 01 	lds	r24, 0x0110
		oled_buffer_position++;
    18b0:	90 91 11 01 	lds	r25, 0x0111
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	90 93 11 01 	sts	0x0111, r25
    18ba:	80 93 10 01 	sts	0x0110, r24
    18be:	21 96       	adiw	r28, 0x01	; 1
    18c0:	c8 30       	cpi	r28, 0x08	; 8
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED Buffer in SRAM
	for(uint8_t i = 0; i < 8; i++)
    18c2:	d1 05       	cpc	r29, r1
    18c4:	49 f7       	brne	.-46     	; 0x1898 <OLED_printCharacter+0x22>
    18c6:	df 91       	pop	r29
	{
		saveToAddress(oled_buffer_position, pgm_read_byte(&font8[character][i]));
		oled_buffer_position++;
	}
}
    18c8:	cf 91       	pop	r28
    18ca:	1f 91       	pop	r17
    18cc:	0f 91       	pop	r16
    18ce:	08 95       	ret

000018d0 <OLED_printString>:
    18d0:	1f 93       	push	r17

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
    18d8:	10 e0       	ldi	r17, 0x00	; 0
    18da:	06 c0       	rjmp	.+12     	; 0x18e8 <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
    18dc:	fe 01       	movw	r30, r28
    18de:	e8 0f       	add	r30, r24
    18e0:	f9 1f       	adc	r31, r25
    18e2:	80 81       	ld	r24, Z
    18e4:	c8 df       	rcall	.-112    	; 0x1876 <OLED_printCharacter>
    18e6:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
    18e8:	81 2f       	mov	r24, r17
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	fe 01       	movw	r30, r28
    18ee:	01 90       	ld	r0, Z+
    18f0:	00 20       	and	r0, r0
    18f2:	e9 f7       	brne	.-6      	; 0x18ee <OLED_printString+0x1e>
    18f4:	31 97       	sbiw	r30, 0x01	; 1
    18f6:	ec 1b       	sub	r30, r28
    18f8:	fd 0b       	sbc	r31, r29
    18fa:	8e 17       	cp	r24, r30
    18fc:	9f 07       	cpc	r25, r31
    18fe:	70 f3       	brcs	.-36     	; 0x18dc <OLED_printString+0xc>
    1900:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
    1902:	cf 91       	pop	r28
    1904:	1f 91       	pop	r17
    1906:	08 95       	ret

00001908 <OLED_printArrow>:
    1908:	68 e1       	ldi	r22, 0x18	; 24
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	// write arrow to oled sram buffer
	saveToAddress(oled_buffer_position, 0b00011000);
    190a:	70 e0       	ldi	r23, 0x00	; 0
    190c:	80 91 10 01 	lds	r24, 0x0110
    1910:	90 91 11 01 	lds	r25, 0x0111
    1914:	4b d8       	rcall	.-3946   	; 0x9ac <saveToAddress>
    1916:	80 91 10 01 	lds	r24, 0x0110
	oled_buffer_position++;
    191a:	90 91 11 01 	lds	r25, 0x0111
    191e:	01 96       	adiw	r24, 0x01	; 1
    1920:	90 93 11 01 	sts	0x0111, r25
    1924:	80 93 10 01 	sts	0x0110, r24
    1928:	68 e1       	ldi	r22, 0x18	; 24
	saveToAddress(oled_buffer_position, 0b00011000);
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	3f d8       	rcall	.-3970   	; 0x9ac <saveToAddress>
    192e:	80 91 10 01 	lds	r24, 0x0110
	oled_buffer_position++;
    1932:	90 91 11 01 	lds	r25, 0x0111
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	90 93 11 01 	sts	0x0111, r25
    193c:	80 93 10 01 	sts	0x0110, r24
    1940:	6e e7       	ldi	r22, 0x7E	; 126
    1942:	70 e0       	ldi	r23, 0x00	; 0
	saveToAddress(oled_buffer_position, 0b01111110);
    1944:	33 d8       	rcall	.-3994   	; 0x9ac <saveToAddress>
    1946:	80 91 10 01 	lds	r24, 0x0110
    194a:	90 91 11 01 	lds	r25, 0x0111
	oled_buffer_position++;
    194e:	01 96       	adiw	r24, 0x01	; 1
    1950:	90 93 11 01 	sts	0x0111, r25
    1954:	80 93 10 01 	sts	0x0110, r24
    1958:	6c e3       	ldi	r22, 0x3C	; 60
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	27 d8       	rcall	.-4018   	; 0x9ac <saveToAddress>
	saveToAddress(oled_buffer_position, 0b00111100);
    195e:	80 91 10 01 	lds	r24, 0x0110
    1962:	90 91 11 01 	lds	r25, 0x0111
	oled_buffer_position++;
    1966:	01 96       	adiw	r24, 0x01	; 1
    1968:	90 93 11 01 	sts	0x0111, r25
    196c:	80 93 10 01 	sts	0x0110, r24
    1970:	68 e1       	ldi	r22, 0x18	; 24
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	1b d8       	rcall	.-4042   	; 0x9ac <saveToAddress>
    1976:	80 91 10 01 	lds	r24, 0x0110
	saveToAddress(oled_buffer_position, 0b00011000);
    197a:	90 91 11 01 	lds	r25, 0x0111
    197e:	01 96       	adiw	r24, 0x01	; 1
	oled_buffer_position++;
    1980:	90 93 11 01 	sts	0x0111, r25
    1984:	80 93 10 01 	sts	0x0110, r24
    1988:	08 95       	ret

0000198a <OLED_clearArrow>:
    198a:	0f 93       	push	r16
    198c:	1f 93       	push	r17
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	c1 e0       	ldi	r28, 0x01	; 1
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    1994:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_bufferGoto(count_row,0); // move to first column in row
    199a:	05 e0       	ldi	r16, 0x05	; 5
    199c:	60 e0       	ldi	r22, 0x00	; 0
    199e:	70 e0       	ldi	r23, 0x00	; 0
    19a0:	38 df       	rcall	.-400    	; 0x1812 <OLED_bufferGoto>
    19a2:	10 2f       	mov	r17, r16
    19a4:	60 e0       	ldi	r22, 0x00	; 0

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < ARROW_WIDTH; count_column++)
		{
			saveToAddress(oled_buffer_position, 0x00);
    19a6:	70 e0       	ldi	r23, 0x00	; 0
    19a8:	80 91 10 01 	lds	r24, 0x0110
    19ac:	90 91 11 01 	lds	r25, 0x0111
    19b0:	0e 94 d6 04 	call	0x9ac	; 0x9ac <saveToAddress>
    19b4:	80 91 10 01 	lds	r24, 0x0110
			oled_buffer_position++;
    19b8:	90 91 11 01 	lds	r25, 0x0111
    19bc:	01 96       	adiw	r24, 0x01	; 1
    19be:	90 93 11 01 	sts	0x0111, r25
    19c2:	80 93 10 01 	sts	0x0110, r24
    19c6:	11 50       	subi	r17, 0x01	; 1
    19c8:	69 f7       	brne	.-38     	; 0x19a4 <OLED_clearArrow+0x1a>
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_bufferGoto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < ARROW_WIDTH; count_column++)
    19ca:	8c 2f       	mov	r24, r28
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
    19cc:	9d 2f       	mov	r25, r29
    19ce:	21 96       	adiw	r28, 0x01	; 1
    19d0:	c9 30       	cpi	r28, 0x09	; 9
    19d2:	d1 05       	cpc	r29, r1
    19d4:	19 f7       	brne	.-58     	; 0x199c <OLED_clearArrow+0x12>
    19d6:	df 91       	pop	r29
		{
			saveToAddress(oled_buffer_position, 0x00);
			oled_buffer_position++;
		}
	}
}
    19d8:	cf 91       	pop	r28
    19da:	1f 91       	pop	r17
    19dc:	0f 91       	pop	r16
    19de:	08 95       	ret

000019e0 <OLED_moveArrow>:
    19e0:	2f 92       	push	r2

//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.
void OLED_moveArrow(int joy_counter)
{
    19e2:	3f 92       	push	r3
    19e4:	4f 92       	push	r4
    19e6:	5f 92       	push	r5
    19e8:	6f 92       	push	r6
    19ea:	7f 92       	push	r7
    19ec:	8f 92       	push	r8
    19ee:	9f 92       	push	r9
    19f0:	af 92       	push	r10
    19f2:	bf 92       	push	r11
    19f4:	cf 92       	push	r12
    19f6:	df 92       	push	r13
    19f8:	ef 92       	push	r14
    19fa:	ff 92       	push	r15
    19fc:	0f 93       	push	r16
    19fe:	1f 93       	push	r17
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
    1a08:	2a 97       	sbiw	r28, 0x0a	; 10
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	8c 01       	movw	r16, r24
	// reset animation tick
	animation_tick = 0;
    1a16:	10 92 06 03 	sts	0x0306, r1
    1a1a:	10 92 05 03 	sts	0x0305, r1
	
	if(joy_counter == arrow_position)
    1a1e:	80 91 07 03 	lds	r24, 0x0307
    1a22:	90 91 08 03 	lds	r25, 0x0308
    1a26:	08 17       	cp	r16, r24
    1a28:	19 07       	cpc	r17, r25
    1a2a:	39 f4       	brne	.+14     	; 0x1a3a <OLED_moveArrow+0x5a>
	{
		OLED_clearArrow(); // clear the arrow space
    1a2c:	ae df       	rcall	.-164    	; 0x198a <OLED_clearArrow>
    1a2e:	60 e0       	ldi	r22, 0x00	; 0
		OLED_bufferGoto(joy_counter, 0);
    1a30:	70 e0       	ldi	r23, 0x00	; 0
    1a32:	c8 01       	movw	r24, r16
    1a34:	ee de       	rcall	.-548    	; 0x1812 <OLED_bufferGoto>
    1a36:	68 df       	rcall	.-304    	; 0x1908 <OLED_printArrow>
    1a38:	10 c1       	rjmp	.+544    	; 0x1c5a <OLED_moveArrow+0x27a>
		OLED_printArrow(); // print arrow
    1a3a:	80 17       	cp	r24, r16
    1a3c:	91 07       	cpc	r25, r17
    1a3e:	0c f0       	brlt	.+2      	; 0x1a42 <OLED_moveArrow+0x62>
	}
	else if(joy_counter > arrow_position)
    1a40:	84 c0       	rjmp	.+264    	; 0x1b4a <OLED_moveArrow+0x16a>
    1a42:	85 e0       	ldi	r24, 0x05	; 5
    1a44:	fe 01       	movw	r30, r28
    1a46:	36 96       	adiw	r30, 0x06	; 6
	{		
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
    1a48:	df 01       	movw	r26, r30
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	1d 92       	st	X+, r1
    1a4e:	2a 95       	dec	r18
    1a50:	e9 f7       	brne	.-6      	; 0x1a4c <OLED_moveArrow+0x6c>
    1a52:	35 97       	sbiw	r30, 0x05	; 5
    1a54:	df 01       	movw	r26, r30
    1a56:	1d 92       	st	X+, r1
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
    1a58:	8a 95       	dec	r24
    1a5a:	e9 f7       	brne	.-6      	; 0x1a56 <OLED_moveArrow+0x76>
    1a5c:	68 94       	set
    1a5e:	55 24       	eor	r5, r5
    1a60:	53 f8       	bld	r5, 3
    1a62:	41 2c       	mov	r4, r1
    1a64:	31 2c       	mov	r3, r1
    1a66:	64 2c       	mov	r6, r4
			
		for(uint8_t step = 0; step < 8; step++)
		{
			for(uint8_t i = 0; i < height; i++)
    1a68:	73 2c       	mov	r7, r3
    1a6a:	5f c0       	rjmp	.+190    	; 0x1b2a <OLED_moveArrow+0x14a>

//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.
void OLED_moveArrow(int joy_counter)
{
    1a6c:	b8 01       	movw	r22, r16
    1a6e:	88 2d       	mov	r24, r8
    1a70:	99 2d       	mov	r25, r9
		{
			for(uint8_t i = 0; i < height; i++)
			{
				for(uint8_t j = 0; j < ARROW_WIDTH; j++)
				{
					OLED_bufferGoto(i, j);
    1a72:	cf de       	rcall	.-610    	; 0x1812 <OLED_bufferGoto>
    1a74:	80 91 10 01 	lds	r24, 0x0110
    1a78:	90 91 11 01 	lds	r25, 0x0111
					buffer_current[j] = readFromAddress(oled_buffer_position); // save state of current row
    1a7c:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <readFromAddress>
    1a80:	f7 01       	movw	r30, r14
    1a82:	81 93       	st	Z+, r24
    1a84:	7f 01       	movw	r14, r30
    1a86:	0f 5f       	subi	r16, 0xFF	; 255
    1a88:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8a:	05 30       	cpi	r16, 0x05	; 5
    1a8c:	11 05       	cpc	r17, r1
    1a8e:	71 f7       	brne	.-36     	; 0x1a6c <OLED_moveArrow+0x8c>
    1a90:	9e 01       	movw	r18, r28
			
		for(uint8_t step = 0; step < 8; step++)
		{
			for(uint8_t i = 0; i < height; i++)
			{
				for(uint8_t j = 0; j < ARROW_WIDTH; j++)
    1a92:	2a 5f       	subi	r18, 0xFA	; 250
    1a94:	3f 4f       	sbci	r19, 0xFF	; 255
    1a96:	79 01       	movw	r14, r18
    1a98:	ce 01       	movw	r24, r28
    1a9a:	01 96       	adiw	r24, 0x01	; 1
    1a9c:	5c 01       	movw	r10, r24
    1a9e:	06 2d       	mov	r16, r6
    1aa0:	17 2d       	mov	r17, r7
    1aa2:	b8 01       	movw	r22, r16
    1aa4:	88 2d       	mov	r24, r8
    1aa6:	99 2d       	mov	r25, r9
    1aa8:	b4 de       	rcall	.-664    	; 0x1812 <OLED_bufferGoto>
					buffer_current[j] = readFromAddress(oled_buffer_position); // save state of current row
				}
			
				for(uint8_t k = 0; k < ARROW_WIDTH; k++)
				{				
					OLED_bufferGoto(i, k);
    1aaa:	d5 01       	movw	r26, r10
    1aac:	2d 90       	ld	r2, X+
    1aae:	5d 01       	movw	r10, r26
    1ab0:	f7 01       	movw	r30, r14
    1ab2:	80 81       	ld	r24, Z
					saveToAddress(oled_buffer_position, buffer_current[k]<<1 | buffer_dummy[k]>>7); // move current row 1 down + combine with lowest from above
    1ab4:	88 1f       	adc	r24, r24
    1ab6:	88 27       	eor	r24, r24
    1ab8:	88 1f       	adc	r24, r24
    1aba:	62 2d       	mov	r22, r2
    1abc:	70 e0       	ldi	r23, 0x00	; 0
    1abe:	66 0f       	add	r22, r22
    1ac0:	77 1f       	adc	r23, r23
    1ac2:	68 2b       	or	r22, r24
    1ac4:	80 91 10 01 	lds	r24, 0x0110
    1ac8:	90 91 11 01 	lds	r25, 0x0111
    1acc:	0e 94 d6 04 	call	0x9ac	; 0x9ac <saveToAddress>
    1ad0:	d7 01       	movw	r26, r14
    1ad2:	2d 92       	st	X+, r2
    1ad4:	7d 01       	movw	r14, r26
    1ad6:	0f 5f       	subi	r16, 0xFF	; 255
    1ad8:	1f 4f       	sbci	r17, 0xFF	; 255
					buffer_dummy[k] = buffer_current[k]; // current row is reference for next row
    1ada:	05 30       	cpi	r16, 0x05	; 5
    1adc:	11 05       	cpc	r17, r1
    1ade:	09 f7       	brne	.-62     	; 0x1aa2 <OLED_moveArrow+0xc2>
    1ae0:	8c 2c       	mov	r8, r12
    1ae2:	9d 2c       	mov	r9, r13
				{
					OLED_bufferGoto(i, j);
					buffer_current[j] = readFromAddress(oled_buffer_position); // save state of current row
				}
			
				for(uint8_t k = 0; k < ARROW_WIDTH; k++)
    1ae4:	bf ef       	ldi	r27, 0xFF	; 255
    1ae6:	cb 1a       	sub	r12, r27
    1ae8:	db 0a       	sbc	r13, r27
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
			
		for(uint8_t step = 0; step < 8; step++)
		{
			for(uint8_t i = 0; i < height; i++)
    1aea:	e9 e0       	ldi	r30, 0x09	; 9
    1aec:	ce 16       	cp	r12, r30
    1aee:	d1 04       	cpc	r13, r1
    1af0:	39 f0       	breq	.+14     	; 0x1b00 <OLED_moveArrow+0x120>
    1af2:	9e 01       	movw	r18, r28
    1af4:	2f 5f       	subi	r18, 0xFF	; 255
    1af6:	3f 4f       	sbci	r19, 0xFF	; 255
    1af8:	79 01       	movw	r14, r18
    1afa:	06 2d       	mov	r16, r6

//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.
void OLED_moveArrow(int joy_counter)
{
    1afc:	17 2d       	mov	r17, r7
    1afe:	b6 cf       	rjmp	.-148    	; 0x1a6c <OLED_moveArrow+0x8c>
    1b00:	80 91 05 03 	lds	r24, 0x0305
    1b04:	90 91 06 03 	lds	r25, 0x0306
    1b08:	01 97       	sbiw	r24, 0x01	; 1
					saveToAddress(oled_buffer_position, buffer_current[k]<<1 | buffer_dummy[k]>>7); // move current row 1 down + combine with lowest from above
					buffer_dummy[k] = buffer_current[k]; // current row is reference for next row
				}
			}
			
			while(animation_tick != 1){_delay_us(1);};
    1b0a:	49 f0       	breq	.+18     	; 0x1b1e <OLED_moveArrow+0x13e>
    1b0c:	00 c0       	rjmp	.+0      	; 0x1b0e <OLED_moveArrow+0x12e>
    1b0e:	00 c0       	rjmp	.+0      	; 0x1b10 <OLED_moveArrow+0x130>
    1b10:	00 00       	nop
    1b12:	80 91 05 03 	lds	r24, 0x0305
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b16:	90 91 06 03 	lds	r25, 0x0306
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	b9 f7       	brne	.-18     	; 0x1b0c <OLED_moveArrow+0x12c>
    1b1e:	40 92 05 03 	sts	0x0305, r4
    1b22:	30 92 06 03 	sts	0x0306, r3
    1b26:	5a 94       	dec	r5
			animation_tick = 0;
    1b28:	31 f0       	breq	.+12     	; 0x1b36 <OLED_moveArrow+0x156>
    1b2a:	cc 24       	eor	r12, r12
    1b2c:	c3 94       	inc	r12
    1b2e:	d1 2c       	mov	r13, r1
    1b30:	84 2c       	mov	r8, r4
	else if(joy_counter > arrow_position)
	{		
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
			
		for(uint8_t step = 0; step < 8; step++)
    1b32:	93 2c       	mov	r9, r3
		{
			for(uint8_t i = 0; i < height; i++)
			{
				for(uint8_t j = 0; j < ARROW_WIDTH; j++)
    1b34:	de cf       	rjmp	.-68     	; 0x1af2 <OLED_moveArrow+0x112>
    1b36:	80 91 07 03 	lds	r24, 0x0307
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
			
		for(uint8_t step = 0; step < 8; step++)
		{
			for(uint8_t i = 0; i < height; i++)
    1b3a:	90 91 08 03 	lds	r25, 0x0308
    1b3e:	01 96       	adiw	r24, 0x01	; 1
			}
			
			while(animation_tick != 1){_delay_us(1);};
			animation_tick = 0;
		}
		arrow_position++;
    1b40:	90 93 08 03 	sts	0x0308, r25
    1b44:	80 93 07 03 	sts	0x0307, r24
    1b48:	88 c0       	rjmp	.+272    	; 0x1c5a <OLED_moveArrow+0x27a>
    1b4a:	85 e0       	ldi	r24, 0x05	; 5
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	36 96       	adiw	r30, 0x06	; 6
    1b50:	df 01       	movw	r26, r30
    1b52:	28 2f       	mov	r18, r24
	}
	else
	{
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
    1b54:	1d 92       	st	X+, r1
    1b56:	2a 95       	dec	r18
    1b58:	e9 f7       	brne	.-6      	; 0x1b54 <OLED_moveArrow+0x174>
    1b5a:	35 97       	sbiw	r30, 0x05	; 5
    1b5c:	df 01       	movw	r26, r30
    1b5e:	1d 92       	st	X+, r1
    1b60:	8a 95       	dec	r24
    1b62:	e9 f7       	brne	.-6      	; 0x1b5e <OLED_moveArrow+0x17e>
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
    1b64:	68 94       	set
    1b66:	33 24       	eor	r3, r3
    1b68:	33 f8       	bld	r3, 3
    1b6a:	0f 2e       	mov	r0, r31
    1b6c:	f7 e0       	ldi	r31, 0x07	; 7
    1b6e:	6f 2e       	mov	r6, r31
    1b70:	71 2c       	mov	r7, r1
    1b72:	f0 2d       	mov	r31, r0
		{
			for(uint8_t i = 0; i < height; i++)
			{
				for(uint8_t j = 0; j < ARROW_WIDTH; j++)
				{
					OLED_bufferGoto(height-1-i, j);
    1b74:	51 2c       	mov	r5, r1
    1b76:	41 2c       	mov	r4, r1
    1b78:	61 c0       	rjmp	.+194    	; 0x1c3c <OLED_moveArrow+0x25c>
    1b7a:	9e 2c       	mov	r9, r14
    1b7c:	8f 2c       	mov	r8, r15
		OLED_printArrow(); // print arrow
	}
	else if(joy_counter > arrow_position)
	{		
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
    1b7e:	b8 01       	movw	r22, r16
    1b80:	c7 01       	movw	r24, r14
    1b82:	47 de       	rcall	.-882    	; 0x1812 <OLED_bufferGoto>
		{
			for(uint8_t i = 0; i < height; i++)
			{
				for(uint8_t j = 0; j < ARROW_WIDTH; j++)
				{
					OLED_bufferGoto(height-1-i, j);
    1b84:	80 91 10 01 	lds	r24, 0x0110
    1b88:	90 91 11 01 	lds	r25, 0x0111
    1b8c:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <readFromAddress>
					buffer_current[j] = readFromAddress(oled_buffer_position); // save state of current row
    1b90:	f5 01       	movw	r30, r10
    1b92:	81 93       	st	Z+, r24
    1b94:	5f 01       	movw	r10, r30
    1b96:	0f 5f       	subi	r16, 0xFF	; 255
    1b98:	1f 4f       	sbci	r17, 0xFF	; 255
    1b9a:	05 30       	cpi	r16, 0x05	; 5
    1b9c:	11 05       	cpc	r17, r1
    1b9e:	69 f7       	brne	.-38     	; 0x1b7a <OLED_moveArrow+0x19a>
    1ba0:	9e 01       	movw	r18, r28
    1ba2:	2a 5f       	subi	r18, 0xFA	; 250
    1ba4:	3f 4f       	sbci	r19, 0xFF	; 255
		
		for(uint8_t step = 0; step < 8; step++)
		{
			for(uint8_t i = 0; i < height; i++)
			{
				for(uint8_t j = 0; j < ARROW_WIDTH; j++)
    1ba6:	79 01       	movw	r14, r18
    1ba8:	ce 01       	movw	r24, r28
    1baa:	01 96       	adiw	r24, 0x01	; 1
    1bac:	5c 01       	movw	r10, r24
    1bae:	05 2d       	mov	r16, r5
    1bb0:	14 2d       	mov	r17, r4
    1bb2:	b8 01       	movw	r22, r16
    1bb4:	89 2d       	mov	r24, r9
    1bb6:	98 2d       	mov	r25, r8
    1bb8:	2c de       	rcall	.-936    	; 0x1812 <OLED_bufferGoto>
    1bba:	d5 01       	movw	r26, r10
    1bbc:	2d 90       	ld	r2, X+
					buffer_current[j] = readFromAddress(oled_buffer_position); // save state of current row
				}
				
				for(uint8_t k = 0; k < ARROW_WIDTH; k++)
				{
					OLED_bufferGoto(height-1-i, k);
    1bbe:	5d 01       	movw	r10, r26
    1bc0:	f7 01       	movw	r30, r14
    1bc2:	60 81       	ld	r22, Z
    1bc4:	f0 e8       	ldi	r31, 0x80	; 128
    1bc6:	6f 9f       	mul	r22, r31
					saveToAddress(oled_buffer_position, buffer_current[k]>>1 | buffer_dummy[k]<<7); // move current row 1 up + combine with highest from below
    1bc8:	b0 01       	movw	r22, r0
    1bca:	11 24       	eor	r1, r1
    1bcc:	82 2d       	mov	r24, r2
    1bce:	86 95       	lsr	r24
    1bd0:	68 2b       	or	r22, r24
    1bd2:	80 91 10 01 	lds	r24, 0x0110
    1bd6:	90 91 11 01 	lds	r25, 0x0111
    1bda:	0e 94 d6 04 	call	0x9ac	; 0x9ac <saveToAddress>
    1bde:	d7 01       	movw	r26, r14
    1be0:	2d 92       	st	X+, r2
    1be2:	7d 01       	movw	r14, r26
    1be4:	0f 5f       	subi	r16, 0xFF	; 255
    1be6:	1f 4f       	sbci	r17, 0xFF	; 255
    1be8:	05 30       	cpi	r16, 0x05	; 5
    1bea:	11 05       	cpc	r17, r1
					buffer_dummy[k] = buffer_current[k]; // current row is reference for next row
    1bec:	11 f7       	brne	.-60     	; 0x1bb2 <OLED_moveArrow+0x1d2>
    1bee:	c6 01       	movw	r24, r12
    1bf0:	bf ef       	ldi	r27, 0xFF	; 255
    1bf2:	cb 1a       	sub	r12, r27
    1bf4:	db 0a       	sbc	r13, r27
				{
					OLED_bufferGoto(height-1-i, j);
					buffer_current[j] = readFromAddress(oled_buffer_position); // save state of current row
				}
				
				for(uint8_t k = 0; k < ARROW_WIDTH; k++)
    1bf6:	e9 e0       	ldi	r30, 0x09	; 9
    1bf8:	ce 16       	cp	r12, r30
    1bfa:	d1 04       	cpc	r13, r1
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
		
		for(uint8_t step = 0; step < 8; step++)
		{
			for(uint8_t i = 0; i < height; i++)
    1bfc:	51 f0       	breq	.+20     	; 0x1c12 <OLED_moveArrow+0x232>
    1bfe:	9e 01       	movw	r18, r28
    1c00:	2f 5f       	subi	r18, 0xFF	; 255
    1c02:	3f 4f       	sbci	r19, 0xFF	; 255
    1c04:	59 01       	movw	r10, r18
    1c06:	05 2d       	mov	r16, r5
    1c08:	14 2d       	mov	r17, r4
    1c0a:	73 01       	movw	r14, r6
		OLED_printArrow(); // print arrow
	}
	else if(joy_counter > arrow_position)
	{		
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
    1c0c:	e8 1a       	sub	r14, r24
    1c0e:	f9 0a       	sbc	r15, r25
    1c10:	b4 cf       	rjmp	.-152    	; 0x1b7a <OLED_moveArrow+0x19a>
    1c12:	80 91 05 03 	lds	r24, 0x0305
    1c16:	90 91 06 03 	lds	r25, 0x0306
		{
			for(uint8_t i = 0; i < height; i++)
			{
				for(uint8_t j = 0; j < ARROW_WIDTH; j++)
				{
					OLED_bufferGoto(height-1-i, j);
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	49 f0       	breq	.+18     	; 0x1c30 <OLED_moveArrow+0x250>
    1c1e:	00 c0       	rjmp	.+0      	; 0x1c20 <OLED_moveArrow+0x240>
					saveToAddress(oled_buffer_position, buffer_current[k]>>1 | buffer_dummy[k]<<7); // move current row 1 up + combine with highest from below
					buffer_dummy[k] = buffer_current[k]; // current row is reference for next row
				}
			}
			
			while(animation_tick != 1){_delay_us(1);};
    1c20:	00 c0       	rjmp	.+0      	; 0x1c22 <OLED_moveArrow+0x242>
    1c22:	00 00       	nop
    1c24:	80 91 05 03 	lds	r24, 0x0305
    1c28:	90 91 06 03 	lds	r25, 0x0306
    1c2c:	01 97       	sbiw	r24, 0x01	; 1
    1c2e:	b9 f7       	brne	.-18     	; 0x1c1e <OLED_moveArrow+0x23e>
    1c30:	10 92 05 03 	sts	0x0305, r1
    1c34:	10 92 06 03 	sts	0x0306, r1
    1c38:	3a 94       	dec	r3
    1c3a:	31 f0       	breq	.+12     	; 0x1c48 <OLED_moveArrow+0x268>
    1c3c:	cc 24       	eor	r12, r12
			animation_tick = 0;
    1c3e:	c3 94       	inc	r12
    1c40:	d1 2c       	mov	r13, r1
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	db cf       	rjmp	.-74     	; 0x1bfe <OLED_moveArrow+0x21e>
	else
	{
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
		
		for(uint8_t step = 0; step < 8; step++)
    1c48:	80 91 07 03 	lds	r24, 0x0307
		{
			for(uint8_t i = 0; i < height; i++)
			{
				for(uint8_t j = 0; j < ARROW_WIDTH; j++)
    1c4c:	90 91 08 03 	lds	r25, 0x0308
		uint8_t buffer_dummy[ARROW_WIDTH] = {0x00};
		uint8_t buffer_current[ARROW_WIDTH] = {0x00};
		
		for(uint8_t step = 0; step < 8; step++)
		{
			for(uint8_t i = 0; i < height; i++)
    1c50:	01 97       	sbiw	r24, 0x01	; 1
    1c52:	90 93 08 03 	sts	0x0308, r25
			}
			
			while(animation_tick != 1){_delay_us(1);};
			animation_tick = 0;
		}
		arrow_position--;
    1c56:	80 93 07 03 	sts	0x0307, r24
    1c5a:	2a 96       	adiw	r28, 0x0a	; 10
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	cd bf       	out	0x3d, r28	; 61
    1c66:	df 91       	pop	r29
	}
	
}
    1c68:	cf 91       	pop	r28
    1c6a:	1f 91       	pop	r17
    1c6c:	0f 91       	pop	r16
    1c6e:	ff 90       	pop	r15
    1c70:	ef 90       	pop	r14
    1c72:	df 90       	pop	r13
    1c74:	cf 90       	pop	r12
    1c76:	bf 90       	pop	r11
    1c78:	af 90       	pop	r10
    1c7a:	9f 90       	pop	r9
    1c7c:	8f 90       	pop	r8
    1c7e:	7f 90       	pop	r7
    1c80:	6f 90       	pop	r6
    1c82:	5f 90       	pop	r5
    1c84:	4f 90       	pop	r4
    1c86:	3f 90       	pop	r3
    1c88:	2f 90       	pop	r2
    1c8a:	08 95       	ret

00001c8c <OLED_resetArrow>:
    1c8c:	7e de       	rcall	.-772    	; 0x198a <OLED_clearArrow>
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
    1c90:	70 e0       	ldi	r23, 0x00	; 0
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	bd dd       	rcall	.-1158   	; 0x1812 <OLED_bufferGoto>
    1c98:	37 de       	rcall	.-914    	; 0x1908 <OLED_printArrow>
//------------------------------------------------------------------------------
//
void OLED_resetArrow()
{
	OLED_clearArrow();
	OLED_bufferGoto(0,0);
    1c9a:	10 92 08 03 	sts	0x0308, r1
	OLED_printArrow();
    1c9e:	10 92 07 03 	sts	0x0307, r1
	arrow_position = 0;
    1ca2:	08 95       	ret

00001ca4 <OLED_setAnimationTick>:
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	90 93 06 03 	sts	0x0306, r25

//------------------------------------------------------------------------------
//
void OLED_setAnimationTick()
{
		animation_tick = 1;
    1cac:	80 93 05 03 	sts	0x0305, r24
    1cb0:	08 95       	ret

00001cb2 <OLED_line>:


//------------------------------------------------------------------------------
//
void OLED_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
    1cb2:	7f 92       	push	r7
    1cb4:	8f 92       	push	r8
    1cb6:	9f 92       	push	r9
    1cb8:	af 92       	push	r10
    1cba:	bf 92       	push	r11
    1cbc:	cf 92       	push	r12
    1cbe:	df 92       	push	r13
    1cc0:	ef 92       	push	r14
    1cc2:	ff 92       	push	r15
    1cc4:	0f 93       	push	r16
    1cc6:	1f 93       	push	r17
    1cc8:	cf 93       	push	r28
    1cca:	df 93       	push	r29
    1ccc:	d8 2f       	mov	r29, r24
    1cce:	16 2f       	mov	r17, r22
    1cd0:	04 2f       	mov	r16, r20
    1cd2:	72 2e       	mov	r7, r18
	if(x0 == x1)
    1cd4:	84 13       	cpse	r24, r20
    1cd6:	0a c0       	rjmp	.+20     	; 0x1cec <OLED_line+0x3a>
	{
		for(uint8_t v = y0; v <= y1; v++)
    1cd8:	26 17       	cp	r18, r22
    1cda:	08 f4       	brcc	.+2      	; 0x1cde <OLED_line+0x2c>
    1cdc:	9e c0       	rjmp	.+316    	; 0x1e1a <OLED_line+0x168>
		{
			OLED_writePixelToOLED(x0, v);
    1cde:	61 2f       	mov	r22, r17
    1ce0:	8d 2f       	mov	r24, r29
    1ce2:	a9 dd       	rcall	.-1198   	; 0x1836 <OLED_writePixelToOLED>
    1ce4:	1f 5f       	subi	r17, 0xFF	; 255
//
void OLED_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
	if(x0 == x1)
	{
		for(uint8_t v = y0; v <= y1; v++)
    1ce6:	71 16       	cp	r7, r17
    1ce8:	d0 f7       	brcc	.-12     	; 0x1cde <OLED_line+0x2c>
    1cea:	97 c0       	rjmp	.+302    	; 0x1e1a <OLED_line+0x168>
    1cec:	62 17       	cp	r22, r18
			OLED_writePixelToOLED(x0, v);
		}
	}
	else
	{	
		if(y0 < y1)
    1cee:	08 f0       	brcs	.+2      	; 0x1cf2 <OLED_line+0x40>
    1cf0:	4b c0       	rjmp	.+150    	; 0x1d88 <OLED_line+0xd6>
    1cf2:	6e 30       	cpi	r22, 0x0E	; 14
		{
 			float m = 0.5;
			float c;
 			
			if(y0 == 14)
    1cf4:	59 f0       	breq	.+22     	; 0x1d0c <OLED_line+0x5a>
    1cf6:	67 32       	cpi	r22, 0x27	; 39
			{
				c = -7.5;
			}
			else if(y0 == 39)
    1cf8:	91 f4       	brne	.+36     	; 0x1d1e <OLED_line+0x6c>
    1cfa:	0f 2e       	mov	r0, r31
			{
				c = 17.5;
    1cfc:	c1 2c       	mov	r12, r1
    1cfe:	d1 2c       	mov	r13, r1
    1d00:	fc e8       	ldi	r31, 0x8C	; 140
    1d02:	ef 2e       	mov	r14, r31
    1d04:	f1 e4       	ldi	r31, 0x41	; 65
    1d06:	ff 2e       	mov	r15, r31
    1d08:	f0 2d       	mov	r31, r0
    1d0a:	11 c0       	rjmp	.+34     	; 0x1d2e <OLED_line+0x7c>
    1d0c:	0f 2e       	mov	r0, r31
 			float m = 0.5;
			float c;
 			
			if(y0 == 14)
			{
				c = -7.5;
    1d0e:	c1 2c       	mov	r12, r1
    1d10:	d1 2c       	mov	r13, r1
    1d12:	f0 ef       	ldi	r31, 0xF0	; 240
    1d14:	ef 2e       	mov	r14, r31
    1d16:	f0 ec       	ldi	r31, 0xC0	; 192
    1d18:	ff 2e       	mov	r15, r31
    1d1a:	f0 2d       	mov	r31, r0
    1d1c:	08 c0       	rjmp	.+16     	; 0x1d2e <OLED_line+0x7c>
    1d1e:	0f 2e       	mov	r0, r31
			{
				c = 17.5;
			}
			else
			{
				c = -27.5;
    1d20:	c1 2c       	mov	r12, r1
    1d22:	d1 2c       	mov	r13, r1
    1d24:	fc ed       	ldi	r31, 0xDC	; 220
    1d26:	ef 2e       	mov	r14, r31
    1d28:	f1 ec       	ldi	r31, 0xC1	; 193
    1d2a:	ff 2e       	mov	r15, r31
    1d2c:	f0 2d       	mov	r31, r0
    1d2e:	0d 17       	cp	r16, r29
			}
						
			for(uint8_t u = x0; u <= x1; u++)
    1d30:	08 f4       	brcc	.+2      	; 0x1d34 <OLED_line+0x82>
    1d32:	73 c0       	rjmp	.+230    	; 0x1e1a <OLED_line+0x168>
    1d34:	1b c0       	rjmp	.+54     	; 0x1d6c <OLED_line+0xba>
    1d36:	6c 2f       	mov	r22, r28
			{
				for(uint8_t v = y0; v <= y1; v++)
				{
					if((v-u*m-c) == 0)
    1d38:	70 e0       	ldi	r23, 0x00	; 0
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0b d3       	rcall	.+1558   	; 0x2356 <__floatsisf>
    1d40:	a5 01       	movw	r20, r10
    1d42:	94 01       	movw	r18, r8
    1d44:	69 d2       	rcall	.+1234   	; 0x2218 <__subsf3>
    1d46:	a7 01       	movw	r20, r14
    1d48:	96 01       	movw	r18, r12
    1d4a:	66 d2       	rcall	.+1228   	; 0x2218 <__subsf3>
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	a9 01       	movw	r20, r18
    1d52:	c7 d2       	rcall	.+1422   	; 0x22e2 <__cmpsf2>
    1d54:	81 11       	cpse	r24, r1
    1d56:	03 c0       	rjmp	.+6      	; 0x1d5e <OLED_line+0xac>
    1d58:	6c 2f       	mov	r22, r28
    1d5a:	8d 2f       	mov	r24, r29
    1d5c:	6c dd       	rcall	.-1320   	; 0x1836 <OLED_writePixelToOLED>
    1d5e:	cf 5f       	subi	r28, 0xFF	; 255
    1d60:	7c 16       	cp	r7, r28
					{
						OLED_writePixelToOLED(u, v);
    1d62:	48 f7       	brcc	.-46     	; 0x1d36 <OLED_line+0x84>
    1d64:	df 5f       	subi	r29, 0xFF	; 255
    1d66:	0d 17       	cp	r16, r29
    1d68:	08 f4       	brcc	.+2      	; 0x1d6c <OLED_line+0xba>
				c = -27.5;
			}
						
			for(uint8_t u = x0; u <= x1; u++)
			{
				for(uint8_t v = y0; v <= y1; v++)
    1d6a:	57 c0       	rjmp	.+174    	; 0x1e1a <OLED_line+0x168>
    1d6c:	6d 2f       	mov	r22, r29
    1d6e:	70 e0       	ldi	r23, 0x00	; 0
			else
			{
				c = -27.5;
			}
						
			for(uint8_t u = x0; u <= x1; u++)
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	f0 d2       	rcall	.+1504   	; 0x2356 <__floatsisf>
    1d76:	20 e0       	ldi	r18, 0x00	; 0
			{
				for(uint8_t v = y0; v <= y1; v++)
				{
					if((v-u*m-c) == 0)
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e0       	ldi	r20, 0x00	; 0
    1d7c:	5f e3       	ldi	r21, 0x3F	; 63
    1d7e:	d4 d3       	rcall	.+1960   	; 0x2528 <__mulsf3>
    1d80:	4b 01       	movw	r8, r22
    1d82:	5c 01       	movw	r10, r24
    1d84:	c1 2f       	mov	r28, r17
    1d86:	d7 cf       	rjmp	.-82     	; 0x1d36 <OLED_line+0x84>
    1d88:	6e 30       	cpi	r22, 0x0E	; 14
    1d8a:	59 f0       	breq	.+22     	; 0x1da2 <OLED_line+0xf0>
    1d8c:	68 31       	cpi	r22, 0x18	; 24
    1d8e:	91 f4       	brne	.+36     	; 0x1db4 <OLED_line+0x102>
    1d90:	0f 2e       	mov	r0, r31
    1d92:	81 2c       	mov	r8, r1
    1d94:	91 2c       	mov	r9, r1
    1d96:	fe e5       	ldi	r31, 0x5E	; 94
		else
		{
			float m = -0.5;
			float c;
			
			if(y0 == 14)
    1d98:	af 2e       	mov	r10, r31
    1d9a:	f2 e4       	ldi	r31, 0x42	; 66
			{
				c = 35.5;
			}
			else if(y0 == 24)
    1d9c:	bf 2e       	mov	r11, r31
    1d9e:	f0 2d       	mov	r31, r0
			{
				c = 55.5;
    1da0:	11 c0       	rjmp	.+34     	; 0x1dc4 <OLED_line+0x112>
    1da2:	0f 2e       	mov	r0, r31
    1da4:	81 2c       	mov	r8, r1
    1da6:	91 2c       	mov	r9, r1
    1da8:	fe e0       	ldi	r31, 0x0E	; 14
    1daa:	af 2e       	mov	r10, r31
    1dac:	f2 e4       	ldi	r31, 0x42	; 66
    1dae:	bf 2e       	mov	r11, r31
    1db0:	f0 2d       	mov	r31, r0
			float m = -0.5;
			float c;
			
			if(y0 == 14)
			{
				c = 35.5;
    1db2:	08 c0       	rjmp	.+16     	; 0x1dc4 <OLED_line+0x112>
    1db4:	0f 2e       	mov	r0, r31
    1db6:	81 2c       	mov	r8, r1
    1db8:	91 2c       	mov	r9, r1
    1dba:	f1 ea       	ldi	r31, 0xA1	; 161
    1dbc:	af 2e       	mov	r10, r31
    1dbe:	f2 e4       	ldi	r31, 0x42	; 66
    1dc0:	bf 2e       	mov	r11, r31
    1dc2:	f0 2d       	mov	r31, r0
			{
				c = 55.5;
			}
			else
			{
				c = 80.5;
    1dc4:	0d 17       	cp	r16, r29
    1dc6:	48 f1       	brcs	.+82     	; 0x1e1a <OLED_line+0x168>
    1dc8:	1a c0       	rjmp	.+52     	; 0x1dfe <OLED_line+0x14c>
    1dca:	6c 2f       	mov	r22, r28
    1dcc:	70 e0       	ldi	r23, 0x00	; 0
    1dce:	80 e0       	ldi	r24, 0x00	; 0
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	c1 d2       	rcall	.+1410   	; 0x2356 <__floatsisf>
			}
						
			for(uint8_t u = x0; u <= x1; u++)
    1dd4:	a7 01       	movw	r20, r14
    1dd6:	96 01       	movw	r18, r12
    1dd8:	1f d2       	rcall	.+1086   	; 0x2218 <__subsf3>
			{
				for(uint8_t v = y1; v <= y0; v++)
				{
					if((v-u*m-c) == 0)
    1dda:	a5 01       	movw	r20, r10
    1ddc:	94 01       	movw	r18, r8
    1dde:	1c d2       	rcall	.+1080   	; 0x2218 <__subsf3>
    1de0:	20 e0       	ldi	r18, 0x00	; 0
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	a9 01       	movw	r20, r18
    1de6:	7d d2       	rcall	.+1274   	; 0x22e2 <__cmpsf2>
    1de8:	81 11       	cpse	r24, r1
    1dea:	03 c0       	rjmp	.+6      	; 0x1df2 <OLED_line+0x140>
    1dec:	6c 2f       	mov	r22, r28
    1dee:	8d 2f       	mov	r24, r29
    1df0:	22 dd       	rcall	.-1468   	; 0x1836 <OLED_writePixelToOLED>
    1df2:	cf 5f       	subi	r28, 0xFF	; 255
    1df4:	1c 17       	cp	r17, r28
    1df6:	48 f7       	brcc	.-46     	; 0x1dca <OLED_line+0x118>
    1df8:	df 5f       	subi	r29, 0xFF	; 255
    1dfa:	0d 17       	cp	r16, r29
    1dfc:	70 f0       	brcs	.+28     	; 0x1e1a <OLED_line+0x168>
    1dfe:	6d 2f       	mov	r22, r29
    1e00:	70 e0       	ldi	r23, 0x00	; 0
    1e02:	80 e0       	ldi	r24, 0x00	; 0
					{
						OLED_writePixelToOLED(u, v);
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	a7 d2       	rcall	.+1358   	; 0x2356 <__floatsisf>
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
				c = 80.5;
			}
						
			for(uint8_t u = x0; u <= x1; u++)
			{
				for(uint8_t v = y1; v <= y0; v++)
    1e0c:	40 e0       	ldi	r20, 0x00	; 0
    1e0e:	5f eb       	ldi	r21, 0xBF	; 191
    1e10:	8b d3       	rcall	.+1814   	; 0x2528 <__mulsf3>
			else
			{
				c = 80.5;
			}
						
			for(uint8_t u = x0; u <= x1; u++)
    1e12:	6b 01       	movw	r12, r22
    1e14:	7c 01       	movw	r14, r24
    1e16:	c7 2d       	mov	r28, r7
			{
				for(uint8_t v = y1; v <= y0; v++)
				{
					if((v-u*m-c) == 0)
    1e18:	d8 cf       	rjmp	.-80     	; 0x1dca <OLED_line+0x118>
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	1f 91       	pop	r17
    1e20:	0f 91       	pop	r16
    1e22:	ff 90       	pop	r15
    1e24:	ef 90       	pop	r14
    1e26:	df 90       	pop	r13
    1e28:	cf 90       	pop	r12
    1e2a:	bf 90       	pop	r11
    1e2c:	af 90       	pop	r10
    1e2e:	9f 90       	pop	r9
    1e30:	8f 90       	pop	r8
    1e32:	7f 90       	pop	r7
    1e34:	08 95       	ret

00001e36 <OLED_circle>:
    1e36:	2f 92       	push	r2
					}
				}
			}
		}
	}
}
    1e38:	3f 92       	push	r3
    1e3a:	4f 92       	push	r4
    1e3c:	5f 92       	push	r5
    1e3e:	6f 92       	push	r6
    1e40:	7f 92       	push	r7
    1e42:	8f 92       	push	r8
    1e44:	9f 92       	push	r9
    1e46:	af 92       	push	r10
    1e48:	bf 92       	push	r11
    1e4a:	cf 92       	push	r12
    1e4c:	df 92       	push	r13
    1e4e:	ef 92       	push	r14
    1e50:	ff 92       	push	r15
    1e52:	0f 93       	push	r16


//------------------------------------------------------------------------------
//
void OLED_circle(uint8_t x0, uint8_t y0, uint8_t r)
{
    1e54:	1f 93       	push	r17
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	00 d0       	rcall	.+0      	; 0x1e5c <OLED_circle+0x26>
    1e5c:	1f 92       	push	r1
    1e5e:	cd b7       	in	r28, 0x3d	; 61
    1e60:	de b7       	in	r29, 0x3e	; 62
    1e62:	08 2f       	mov	r16, r24
    1e64:	36 2e       	mov	r3, r22
    1e66:	44 2e       	mov	r4, r20
	OLED_writePixelToOLED(x0, y0);
    1e68:	e6 dc       	rcall	.-1588   	; 0x1836 <OLED_writePixelToOLED>
    1e6a:	23 2c       	mov	r2, r3
	for(float theta = 0; theta < 2*M_PI/4; theta += step)
	{
		u = x0 + (int)(r*cos(theta));
		v = y0 + (int)(r*sin(theta));
		OLED_writePixelToOLED(u, v);
		OLED_writePixelToOLED(u, 2*y0-v);
    1e6c:	22 0c       	add	r2, r2
    1e6e:	80 2f       	mov	r24, r16
 		OLED_writePixelToOLED(2*x0-u, v);
    1e70:	88 0f       	add	r24, r24
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	e8 e0       	ldi	r30, 0x08	; 8
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	fb 83       	std	Y+3, r31	; 0x03
    1e7a:	ea 83       	std	Y+2, r30	; 0x02
    1e7c:	c1 2c       	mov	r12, r1
	OLED_writePixelToOLED(x0, y0);
	
	float step = 2*M_PI_4/7;
	uint8_t u, v;
	
	for(float theta = 0; theta < 2*M_PI/4; theta += step)
    1e7e:	d1 2c       	mov	r13, r1
    1e80:	76 01       	movw	r14, r12
    1e82:	51 2c       	mov	r5, r1
	{
		u = x0 + (int)(r*cos(theta));
    1e84:	61 2c       	mov	r6, r1
    1e86:	71 2c       	mov	r7, r1
    1e88:	c3 01       	movw	r24, r6
    1e8a:	b2 01       	movw	r22, r4
    1e8c:	64 d2       	rcall	.+1224   	; 0x2356 <__floatsisf>
    1e8e:	4b 01       	movw	r8, r22
    1e90:	5c 01       	movw	r10, r24
    1e92:	c7 01       	movw	r24, r14
    1e94:	b6 01       	movw	r22, r12
    1e96:	29 d2       	rcall	.+1106   	; 0x22ea <cos>
    1e98:	9b 01       	movw	r18, r22
    1e9a:	ac 01       	movw	r20, r24
    1e9c:	c5 01       	movw	r24, r10
    1e9e:	b4 01       	movw	r22, r8
    1ea0:	43 d3       	rcall	.+1670   	; 0x2528 <__mulsf3>
    1ea2:	26 d2       	rcall	.+1100   	; 0x22f0 <__fixsfsi>
    1ea4:	10 2f       	mov	r17, r16
    1ea6:	16 0f       	add	r17, r22
    1ea8:	c7 01       	movw	r24, r14
    1eaa:	b6 01       	movw	r22, r12
    1eac:	a0 d3       	rcall	.+1856   	; 0x25ee <sin>
    1eae:	9b 01       	movw	r18, r22
    1eb0:	ac 01       	movw	r20, r24
		v = y0 + (int)(r*sin(theta));
    1eb2:	c5 01       	movw	r24, r10
    1eb4:	b4 01       	movw	r22, r8
    1eb6:	38 d3       	rcall	.+1648   	; 0x2528 <__mulsf3>
    1eb8:	1b d2       	rcall	.+1078   	; 0x22f0 <__fixsfsi>
    1eba:	b3 2c       	mov	r11, r3
    1ebc:	b6 0e       	add	r11, r22
    1ebe:	6b 2d       	mov	r22, r11
    1ec0:	81 2f       	mov	r24, r17
    1ec2:	b9 dc       	rcall	.-1678   	; 0x1836 <OLED_writePixelToOLED>
    1ec4:	a2 2c       	mov	r10, r2
    1ec6:	ab 18       	sub	r10, r11
    1ec8:	6a 2d       	mov	r22, r10
    1eca:	81 2f       	mov	r24, r17
    1ecc:	b4 dc       	rcall	.-1688   	; 0x1836 <OLED_writePixelToOLED>
		OLED_writePixelToOLED(u, v);
    1ece:	f9 81       	ldd	r31, Y+1	; 0x01
    1ed0:	f1 1b       	sub	r31, r17
    1ed2:	1f 2f       	mov	r17, r31
    1ed4:	6b 2d       	mov	r22, r11
		OLED_writePixelToOLED(u, 2*y0-v);
    1ed6:	8f 2f       	mov	r24, r31
    1ed8:	ae dc       	rcall	.-1700   	; 0x1836 <OLED_writePixelToOLED>
    1eda:	6a 2d       	mov	r22, r10
    1edc:	81 2f       	mov	r24, r17
    1ede:	ab dc       	rcall	.-1706   	; 0x1836 <OLED_writePixelToOLED>
    1ee0:	2a ef       	ldi	r18, 0xFA	; 250
 		OLED_writePixelToOLED(2*x0-u, v);
    1ee2:	38 ec       	ldi	r19, 0xC8	; 200
    1ee4:	45 e6       	ldi	r20, 0x65	; 101
    1ee6:	5e e3       	ldi	r21, 0x3E	; 62
    1ee8:	c7 01       	movw	r24, r14
    1eea:	b6 01       	movw	r22, r12
    1eec:	96 d1       	rcall	.+812    	; 0x221a <__addsf3>
    1eee:	6b 01       	movw	r12, r22
 		OLED_writePixelToOLED(2*x0-u, 2*y0-v);
    1ef0:	7c 01       	movw	r14, r24
    1ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
	OLED_writePixelToOLED(x0, y0);
	
	float step = 2*M_PI_4/7;
	uint8_t u, v;
	
	for(float theta = 0; theta < 2*M_PI/4; theta += step)
    1ef8:	9b 83       	std	Y+3, r25	; 0x03
    1efa:	8a 83       	std	Y+2, r24	; 0x02
    1efc:	89 2b       	or	r24, r25
    1efe:	09 f0       	breq	.+2      	; 0x1f02 <OLED_circle+0xcc>
    1f00:	c3 cf       	rjmp	.-122    	; 0x1e88 <OLED_circle+0x52>
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	1f 91       	pop	r17
    1f0e:	0f 91       	pop	r16
    1f10:	ff 90       	pop	r15
    1f12:	ef 90       	pop	r14
    1f14:	df 90       	pop	r13
    1f16:	cf 90       	pop	r12
    1f18:	bf 90       	pop	r11
    1f1a:	af 90       	pop	r10
// 		OLED_writePixelToOLED(u, v);
// 		OLED_writePixelToOLED(u, v);
// 		OLED_writePixelToOLED(u, v);
// 		OLED_writePixelToOLED(u, v);
	}
}
    1f1c:	9f 90       	pop	r9
    1f1e:	8f 90       	pop	r8
    1f20:	7f 90       	pop	r7
    1f22:	6f 90       	pop	r6
    1f24:	5f 90       	pop	r5
    1f26:	4f 90       	pop	r4
    1f28:	3f 90       	pop	r3
    1f2a:	2f 90       	pop	r2
    1f2c:	08 95       	ret

00001f2e <OLED_logo>:
    1f2e:	27 e2       	ldi	r18, 0x27	; 39
    1f30:	4b e2       	ldi	r20, 0x2B	; 43
    1f32:	6e e0       	ldi	r22, 0x0E	; 14
    1f34:	8b e2       	ldi	r24, 0x2B	; 43
    1f36:	bd de       	rcall	.-646    	; 0x1cb2 <OLED_line>
    1f38:	27 e2       	ldi	r18, 0x27	; 39
    1f3a:	43 e5       	ldi	r20, 0x53	; 83
    1f3c:	6e e0       	ldi	r22, 0x0E	; 14
    1f3e:	83 e5       	ldi	r24, 0x53	; 83
    1f40:	b8 de       	rcall	.-656    	; 0x1cb2 <OLED_line>
    1f42:	21 e3       	ldi	r18, 0x31	; 49
    1f44:	4f e3       	ldi	r20, 0x3F	; 63
    1f46:	68 e1       	ldi	r22, 0x18	; 24
{
	// draw cube top
	// vertical lines
	OLED_line(43, 14, 43, 39);
	OLED_line(83, 14, 83, 39);
	OLED_line(63, 24, 63, 49);
    1f48:	8f e3       	ldi	r24, 0x3F	; 63
    1f4a:	b3 de       	rcall	.-666    	; 0x1cb2 <OLED_line>
    1f4c:	24 e0       	ldi	r18, 0x04	; 4
    1f4e:	4f e3       	ldi	r20, 0x3F	; 63
    1f50:	6e e0       	ldi	r22, 0x0E	; 14
	// diagonal lines
	// left half
 	OLED_line(43, 14, 63, 4);
    1f52:	8b e2       	ldi	r24, 0x2B	; 43
    1f54:	ae de       	rcall	.-676    	; 0x1cb2 <OLED_line>
    1f56:	28 e1       	ldi	r18, 0x18	; 24
    1f58:	4f e3       	ldi	r20, 0x3F	; 63
    1f5a:	6e e0       	ldi	r22, 0x0E	; 14
    1f5c:	8b e2       	ldi	r24, 0x2B	; 43
 	OLED_line(43, 14, 63, 24);
    1f5e:	a9 de       	rcall	.-686    	; 0x1cb2 <OLED_line>
    1f60:	21 e3       	ldi	r18, 0x31	; 49
    1f62:	4f e3       	ldi	r20, 0x3F	; 63
    1f64:	67 e2       	ldi	r22, 0x27	; 39
    1f66:	8b e2       	ldi	r24, 0x2B	; 43
    1f68:	a4 de       	rcall	.-696    	; 0x1cb2 <OLED_line>
	OLED_line(43, 39, 63, 49);
    1f6a:	2e e0       	ldi	r18, 0x0E	; 14
    1f6c:	43 e5       	ldi	r20, 0x53	; 83
    1f6e:	64 e0       	ldi	r22, 0x04	; 4
    1f70:	8f e3       	ldi	r24, 0x3F	; 63
    1f72:	9f de       	rcall	.-706    	; 0x1cb2 <OLED_line>
    1f74:	2e e0       	ldi	r18, 0x0E	; 14
	// right half
	OLED_line(63, 4, 83, 14);
    1f76:	43 e5       	ldi	r20, 0x53	; 83
    1f78:	64 e0       	ldi	r22, 0x04	; 4
    1f7a:	8f e3       	ldi	r24, 0x3F	; 63
    1f7c:	9a de       	rcall	.-716    	; 0x1cb2 <OLED_line>
    1f7e:	2e e0       	ldi	r18, 0x0E	; 14
    1f80:	43 e5       	ldi	r20, 0x53	; 83
	OLED_line(63, 4, 83, 14);
    1f82:	68 e1       	ldi	r22, 0x18	; 24
    1f84:	8f e3       	ldi	r24, 0x3F	; 63
    1f86:	95 de       	rcall	.-726    	; 0x1cb2 <OLED_line>
    1f88:	27 e2       	ldi	r18, 0x27	; 39
    1f8a:	43 e5       	ldi	r20, 0x53	; 83
    1f8c:	61 e3       	ldi	r22, 0x31	; 49
	OLED_line(63, 24, 83, 14);
    1f8e:	8f e3       	ldi	r24, 0x3F	; 63
    1f90:	90 de       	rcall	.-736    	; 0x1cb2 <OLED_line>
    1f92:	6b e3       	ldi	r22, 0x3B	; 59
    1f94:	70 e0       	ldi	r23, 0x00	; 0
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
	OLED_line(63, 49, 83, 39);
    1f9a:	3b dc       	rcall	.-1930   	; 0x1812 <OLED_bufferGoto>
    1f9c:	87 e4       	ldi	r24, 0x47	; 71
    1f9e:	6b dc       	rcall	.-1834   	; 0x1876 <OLED_printCharacter>
    1fa0:	61 e3       	ldi	r22, 0x31	; 49
    1fa2:	70 e0       	ldi	r23, 0x00	; 0
    1fa4:	84 e0       	ldi	r24, 0x04	; 4
	
	// letters
	OLED_bufferGoto(1, 59);
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	34 dc       	rcall	.-1944   	; 0x1812 <OLED_bufferGoto>
    1faa:	84 e3       	ldi	r24, 0x34	; 52
    1fac:	64 dc       	rcall	.-1848   	; 0x1876 <OLED_printCharacter>
    1fae:	65 e4       	ldi	r22, 0x45	; 69
    1fb0:	70 e0       	ldi	r23, 0x00	; 0
	OLED_printCharacter('G');
    1fb2:	84 e0       	ldi	r24, 0x04	; 4
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	2d dc       	rcall	.-1958   	; 0x1812 <OLED_bufferGoto>
	OLED_bufferGoto(4, 49);
    1fb8:	86 e3       	ldi	r24, 0x36	; 54
    1fba:	5d dc       	rcall	.-1862   	; 0x1876 <OLED_printCharacter>
    1fbc:	4a e0       	ldi	r20, 0x0A	; 10
    1fbe:	6f e1       	ldi	r22, 0x1F	; 31
    1fc0:	8f e3       	ldi	r24, 0x3F	; 63
    1fc2:	39 cf       	rjmp	.-398    	; 0x1e36 <OLED_circle>
	OLED_printCharacter('4');
    1fc4:	08 95       	ret

00001fc6 <OLED_splashScreen>:
    1fc6:	80 ea       	ldi	r24, 0xA0	; 160
    1fc8:	92 e0       	ldi	r25, 0x02	; 2
	OLED_bufferGoto(4, 69);
    1fca:	34 d5       	rcall	.+2664   	; 0x2a34 <puts>
    1fcc:	b0 df       	rcall	.-160    	; 0x1f2e <OLED_logo>
    1fce:	6c e0       	ldi	r22, 0x0C	; 12
    1fd0:	70 e0       	ldi	r23, 0x00	; 0
    1fd2:	87 e0       	ldi	r24, 0x07	; 7
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
	OLED_printCharacter('6');
    1fd6:	1d dc       	rcall	.-1990   	; 0x1812 <OLED_bufferGoto>
    1fd8:	85 eb       	ldi	r24, 0xB5	; 181
    1fda:	92 e0       	ldi	r25, 0x02	; 2
	
	// draw circle
	OLED_circle(63, 31, 10);
    1fdc:	79 cc       	rjmp	.-1806   	; 0x18d0 <OLED_printString>
    1fde:	08 95       	ret

00001fe0 <OLED_init>:
    1fe0:	cf 93       	push	r28
    1fe2:	e0 91 18 01 	lds	r30, 0x0118
    1fe6:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1fea:	8e ea       	ldi	r24, 0xAE	; 174
    1fec:	80 83       	st	Z, r24
// Default initialization routine of the OLED display.

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
    1fee:	e0 91 18 01 	lds	r30, 0x0118
    1ff2:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1ff6:	81 ea       	ldi	r24, 0xA1	; 161
    1ff8:	80 83       	st	Z, r24

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
    1ffa:	e0 91 18 01 	lds	r30, 0x0118
    1ffe:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    2002:	8a ed       	ldi	r24, 0xDA	; 218
    2004:	80 83       	st	Z, r24
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
    2006:	e0 91 18 01 	lds	r30, 0x0118
    200a:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    200e:	82 e1       	ldi	r24, 0x12	; 18
    2010:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    2012:	e0 91 18 01 	lds	r30, 0x0118
    2016:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    201a:	88 ec       	ldi	r24, 0xC8	; 200
    201c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    201e:	e0 91 18 01 	lds	r30, 0x0118
    2022:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    2026:	88 ea       	ldi	r24, 0xA8	; 168
    2028:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    202a:	e0 91 18 01 	lds	r30, 0x0118
    202e:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    2032:	8f e3       	ldi	r24, 0x3F	; 63
    2034:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    2036:	e0 91 18 01 	lds	r30, 0x0118
    203a:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    203e:	85 ed       	ldi	r24, 0xD5	; 213
    2040:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
    2042:	e0 91 18 01 	lds	r30, 0x0118
    2046:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    204a:	80 e8       	ldi	r24, 0x80	; 128
    204c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    204e:	e0 91 18 01 	lds	r30, 0x0118
    2052:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    2056:	81 e8       	ldi	r24, 0x81	; 129
    2058:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    205a:	e0 91 18 01 	lds	r30, 0x0118
    205e:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    2062:	c0 e5       	ldi	r28, 0x50	; 80
    2064:	c0 83       	st	Z, r28
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    2066:	e0 91 18 01 	lds	r30, 0x0118
    206a:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    206e:	89 ed       	ldi	r24, 0xD9	; 217
    2070:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
    2072:	e0 91 18 01 	lds	r30, 0x0118
    2076:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    207a:	81 e2       	ldi	r24, 0x21	; 33
    207c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    207e:	e0 91 18 01 	lds	r30, 0x0118
    2082:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    2086:	80 e2       	ldi	r24, 0x20	; 32
    2088:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
    208a:	e0 91 18 01 	lds	r30, 0x0118
    208e:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    2092:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    2094:	e0 91 18 01 	lds	r30, 0x0118
    2098:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    209c:	8b ed       	ldi	r24, 0xDB	; 219
    209e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    20a0:	e0 91 18 01 	lds	r30, 0x0118
    20a4:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    20a8:	80 e3       	ldi	r24, 0x30	; 48
    20aa:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    20ac:	e0 91 18 01 	lds	r30, 0x0118
    20b0:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    20b4:	8d ea       	ldi	r24, 0xAD	; 173
    20b6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    20b8:	e0 91 18 01 	lds	r30, 0x0118
    20bc:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    20c0:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x00); // Page addressing mode (02)
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    20c2:	e0 91 18 01 	lds	r30, 0x0118
    20c6:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    20ca:	84 ea       	ldi	r24, 0xA4	; 164
    20cc:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    20ce:	e0 91 18 01 	lds	r30, 0x0118
    20d2:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    20d6:	86 ea       	ldi	r24, 0xA6	; 166
    20d8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    20da:	e0 91 18 01 	lds	r30, 0x0118
    20de:	f0 91 19 01 	lds	r31, 0x0119
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    20e2:	8f ea       	ldi	r24, 0xAF	; 175
    20e4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    20e6:	3e db       	rcall	.-2436   	; 0x1764 <OLED_clear>
    20e8:	6e df       	rcall	.-292    	; 0x1fc6 <OLED_splashScreen>
	OLED_splashScreen();
    20ea:	83 b7       	in	r24, 0x33	; 51
    20ec:	8d 60       	ori	r24, 0x0D	; 13
	//OLED_flyingArrows();
	
	// setup 8-bit counter0 without PWM
	// setting Mode of Operation to CTC and Prescaler to div/1024
	TCCR0 |= (1<<WGM01) | (1<<CS02) | (1<<CS00);
    20ee:	83 bf       	out	0x33, r24	; 51
    20f0:	89 b7       	in	r24, 0x39	; 57
    20f2:	81 60       	ori	r24, 0x01	; 1
	// Output Compare Interrupt Enable
	TIMSK |= (1<<OCIE0);
    20f4:	89 bf       	out	0x39, r24	; 57
    20f6:	c1 bf       	out	0x31, r28	; 49
    20f8:	cf 91       	pop	r28
	// 17ms Counter cycle (4800Hz -> 80 cycles)
	OCR0 = 80;
    20fa:	08 95       	ret

000020fc <SLI_init>:
uint8_t SLI_startup = 1; 

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    20fc:	10 92 25 03 	sts	0x0325, r1
	currentSliPosition.L_abs = 0;
    2100:	10 92 26 03 	sts	0x0326, r1
	currentSliPosition.R_per = 0;
    2104:	10 92 27 03 	sts	0x0327, r1
	currentSliPosition.L_per = 0;
    2108:	10 92 28 03 	sts	0x0328, r1
    210c:	08 95       	ret

0000210e <SLI_requestCurrentPosition>:

//------------------------------------------------------------------------------
// This function requests an AD conversion for the specified slider.
void SLI_requestCurrentPosition(uint8_t side)
{
	if(side == 'l')
    210e:	8c 36       	cpi	r24, 0x6C	; 108
    2110:	39 f4       	brne	.+14     	; 0x2120 <SLI_requestCurrentPosition+0x12>
	{
		ADC_request(L_channel, adc_ext_ram);
    2112:	60 91 06 01 	lds	r22, 0x0106
    2116:	70 91 07 01 	lds	r23, 0x0107
    211a:	83 e0       	ldi	r24, 0x03	; 3
    211c:	b2 c2       	rjmp	.+1380   	; 0x2682 <ADC_request>
    211e:	08 95       	ret
    2120:	82 37       	cpi	r24, 0x72	; 114
	}

	else if(side == 'r')
    2122:	31 f4       	brne	.+12     	; 0x2130 <SLI_requestCurrentPosition+0x22>
    2124:	60 91 06 01 	lds	r22, 0x0106
	{
		ADC_request(R_channel, adc_ext_ram);
    2128:	70 91 07 01 	lds	r23, 0x0107
    212c:	84 e0       	ldi	r24, 0x04	; 4
    212e:	a9 c2       	rjmp	.+1362   	; 0x2682 <ADC_request>
    2130:	08 95       	ret

00002132 <SLI_updatePosition>:
    2132:	8c 36       	cpi	r24, 0x6C	; 108
    2134:	71 f4       	brne	.+28     	; 0x2152 <SLI_updatePosition+0x20>
// received.
void SLI_updatePosition(uint8_t side)
{
	if(side == 'l')
	{
		currentSliPosition.L_abs = ADC_read(adc_ext_ram);
    2136:	80 91 06 01 	lds	r24, 0x0106
    213a:	90 91 07 01 	lds	r25, 0x0107
    213e:	c9 d2       	rcall	.+1426   	; 0x26d2 <ADC_read>
    2140:	80 93 26 03 	sts	0x0326, r24
    2144:	24 e6       	ldi	r18, 0x64	; 100
		currentSliPosition.L_per = currentSliPosition.L_abs * 100 / 256;
    2146:	82 9f       	mul	r24, r18
    2148:	c0 01       	movw	r24, r0
    214a:	11 24       	eor	r1, r1
    214c:	90 93 28 03 	sts	0x0328, r25
    2150:	08 95       	ret
    2152:	82 37       	cpi	r24, 0x72	; 114
	}

	else if(side == 'r')
    2154:	69 f4       	brne	.+26     	; 0x2170 <SLI_updatePosition+0x3e>
    2156:	80 91 06 01 	lds	r24, 0x0106
	{
		currentSliPosition.R_abs = ADC_read(adc_ext_ram);
    215a:	90 91 07 01 	lds	r25, 0x0107
    215e:	b9 d2       	rcall	.+1394   	; 0x26d2 <ADC_read>
    2160:	80 93 25 03 	sts	0x0325, r24
    2164:	24 e6       	ldi	r18, 0x64	; 100
    2166:	82 9f       	mul	r24, r18
		currentSliPosition.R_per = currentSliPosition.R_abs * 100 / 256;
    2168:	c0 01       	movw	r24, r0
    216a:	11 24       	eor	r1, r1
    216c:	90 93 27 03 	sts	0x0327, r25
    2170:	08 95       	ret

00002172 <SLI_getPosition>:
    2172:	82 e7       	ldi	r24, 0x72	; 114
    2174:	cc df       	rcall	.-104    	; 0x210e <SLI_requestCurrentPosition>
}

//
SLI_position_t SLI_getPosition()
{
	SLI_requestCurrentPosition('r');
    2176:	82 e6       	ldi	r24, 0x62	; 98
    2178:	8a 95       	dec	r24
    217a:	f1 f7       	brne	.-4      	; 0x2178 <SLI_getPosition+0x6>
    217c:	00 00       	nop
    217e:	82 e7       	ldi	r24, 0x72	; 114
	_delay_us(60);
	SLI_updatePosition('r');
    2180:	d8 df       	rcall	.-80     	; 0x2132 <SLI_updatePosition>
    2182:	60 91 25 03 	lds	r22, 0x0325
	
	return currentSliPosition;
    2186:	70 91 26 03 	lds	r23, 0x0326
    218a:	80 91 27 03 	lds	r24, 0x0327
    218e:	90 91 28 03 	lds	r25, 0x0328
    2192:	08 95       	ret

00002194 <SPI_init>:

void SPI_init()
{
	//init external interrupt INT2 on falling edge
	#if defined(__AVR_ATmega162__)
		set_bit(GICR, INT2);
    2194:	8b b7       	in	r24, 0x3b	; 59
    2196:	80 62       	ori	r24, 0x20	; 32
    2198:	8b bf       	out	0x3b, r24	; 59
		clear_bit(EMCUCR, ISC2);
    219a:	86 b7       	in	r24, 0x36	; 54
    219c:	8e 7f       	andi	r24, 0xFE	; 254
    219e:	86 bf       	out	0x36, r24	; 54
		
		// Set _SS, MOSI and SCK output, all others input
		DDR_SPI |= (1<<SS_CAN_CONTROLLER_PIN_MODE) | (1<<MOSI_PIN) | (1<<SCK_PIN);
    21a0:	87 b3       	in	r24, 0x17	; 23
    21a2:	80 6b       	ori	r24, 0xB0	; 176
    21a4:	87 bb       	out	0x17, r24	; 23
		// Set _SS, PB7 (real SS), MOSI and SCK output, all others input
		DDR_SPI |= (1<<DDB0) | (1<<SS_CAN_CONTROLLER_PIN_MODE) | (1<<MOSI_PIN) | (1<<SCK_PIN);
	#endif
	
	// Enable SPI, Master, set clock rate fck/4
	SPCR = (1<<SPE) | (1<<MSTR);
    21a6:	80 e5       	ldi	r24, 0x50	; 80
    21a8:	8d b9       	out	0x0d, r24	; 13
	
	// clock rate fck/2
	SPSR = (1<<SPI2X);
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	8e b9       	out	0x0e, r24	; 14

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORT_SPI, SS_CAN_CONTROLLER_PIN);
    21ae:	c4 9a       	sbi	0x18, 4	; 24
    21b0:	08 95       	ret

000021b2 <SPI_send>:
}

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    21b2:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    21b4:	77 9b       	sbis	0x0e, 7	; 14
    21b6:	fe cf       	rjmp	.-4      	; 0x21b4 <SPI_send+0x2>
}
    21b8:	08 95       	ret

000021ba <SPI_receive>:

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    21ba:	8f ef       	ldi	r24, 0xFF	; 255
    21bc:	fa df       	rcall	.-12     	; 0x21b2 <SPI_send>
    21be:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    21c0:	fe cf       	rjmp	.-4      	; 0x21be <SPI_receive+0x4>
    21c2:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    21c4:	08 95       	ret

000021c6 <SPI_activateSlave>:

	return data;
}
    21c6:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    21c8:	01 c0       	rjmp	.+2      	; 0x21cc <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    21ca:	c4 98       	cbi	0x18, 4	; 24
    21cc:	08 95       	ret

000021ce <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    21ce:	81 11       	cpse	r24, r1
    21d0:	01 c0       	rjmp	.+2      	; 0x21d4 <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    21d2:	c4 9a       	sbi	0x18, 4	; 24
    21d4:	08 95       	ret

000021d6 <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    21d6:	5d 9b       	sbis	0x0b, 5	; 11
    21d8:	fe cf       	rjmp	.-4      	; 0x21d6 <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    21da:	8c b9       	out	0x0c, r24	; 12
    21dc:	08 95       	ret

000021de <uartReceive>:
//UART_Message_t uartReceive()
uint8_t uartReceive()
{

	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    21de:	5f 9b       	sbis	0x0b, 7	; 11
    21e0:	fe cf       	rjmp	.-4      	; 0x21de <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    21e2:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
    21e4:	08 95       	ret

000021e6 <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    21e6:	ef 92       	push	r14
    21e8:	ff 92       	push	r15
    21ea:	0f 93       	push	r16
    21ec:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    21ee:	bb 27       	eor	r27, r27
    21f0:	a1 2f       	mov	r26, r17
    21f2:	90 2f       	mov	r25, r16
    21f4:	8f 2d       	mov	r24, r15
    21f6:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    21f8:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    21fa:	88 e1       	ldi	r24, 0x18	; 24
    21fc:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    21fe:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	#if defined(__AVR_ATmega162__)
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    2200:	8e e8       	ldi	r24, 0x8E	; 142
    2202:	80 bd       	out	0x20, r24	; 32
	
	#if defined(__AVR_ATmega2560__)
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	#endif
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    2204:	6f ee       	ldi	r22, 0xEF	; 239
    2206:	70 e1       	ldi	r23, 0x10	; 16
    2208:	8b ee       	ldi	r24, 0xEB	; 235
    220a:	90 e1       	ldi	r25, 0x10	; 16
    220c:	b3 d3       	rcall	.+1894   	; 0x2974 <fdevopen>
    220e:	1f 91       	pop	r17
    2210:	0f 91       	pop	r16
    2212:	ff 90       	pop	r15
    2214:	ef 90       	pop	r14
    2216:	08 95       	ret

00002218 <__subsf3>:
    2218:	50 58       	subi	r21, 0x80	; 128

0000221a <__addsf3>:
    221a:	bb 27       	eor	r27, r27
    221c:	aa 27       	eor	r26, r26
    221e:	0e d0       	rcall	.+28     	; 0x223c <__addsf3x>
    2220:	38 c1       	rjmp	.+624    	; 0x2492 <__fp_round>
    2222:	01 d1       	rcall	.+514    	; 0x2426 <__fp_pscA>
    2224:	30 f0       	brcs	.+12     	; 0x2232 <__addsf3+0x18>
    2226:	06 d1       	rcall	.+524    	; 0x2434 <__fp_pscB>
    2228:	20 f0       	brcs	.+8      	; 0x2232 <__addsf3+0x18>
    222a:	31 f4       	brne	.+12     	; 0x2238 <__addsf3+0x1e>
    222c:	9f 3f       	cpi	r25, 0xFF	; 255
    222e:	11 f4       	brne	.+4      	; 0x2234 <__addsf3+0x1a>
    2230:	1e f4       	brtc	.+6      	; 0x2238 <__addsf3+0x1e>
    2232:	f6 c0       	rjmp	.+492    	; 0x2420 <__fp_nan>
    2234:	0e f4       	brtc	.+2      	; 0x2238 <__addsf3+0x1e>
    2236:	e0 95       	com	r30
    2238:	e7 fb       	bst	r30, 7
    223a:	ec c0       	rjmp	.+472    	; 0x2414 <__fp_inf>

0000223c <__addsf3x>:
    223c:	e9 2f       	mov	r30, r25
    223e:	4b d1       	rcall	.+662    	; 0x24d6 <__fp_split3>
    2240:	80 f3       	brcs	.-32     	; 0x2222 <__addsf3+0x8>
    2242:	ba 17       	cp	r27, r26
    2244:	62 07       	cpc	r22, r18
    2246:	73 07       	cpc	r23, r19
    2248:	84 07       	cpc	r24, r20
    224a:	95 07       	cpc	r25, r21
    224c:	18 f0       	brcs	.+6      	; 0x2254 <__addsf3x+0x18>
    224e:	71 f4       	brne	.+28     	; 0x226c <__addsf3x+0x30>
    2250:	9e f5       	brtc	.+102    	; 0x22b8 <__addsf3x+0x7c>
    2252:	63 c1       	rjmp	.+710    	; 0x251a <__fp_zero>
    2254:	0e f4       	brtc	.+2      	; 0x2258 <__addsf3x+0x1c>
    2256:	e0 95       	com	r30
    2258:	0b 2e       	mov	r0, r27
    225a:	ba 2f       	mov	r27, r26
    225c:	a0 2d       	mov	r26, r0
    225e:	0b 01       	movw	r0, r22
    2260:	b9 01       	movw	r22, r18
    2262:	90 01       	movw	r18, r0
    2264:	0c 01       	movw	r0, r24
    2266:	ca 01       	movw	r24, r20
    2268:	a0 01       	movw	r20, r0
    226a:	11 24       	eor	r1, r1
    226c:	ff 27       	eor	r31, r31
    226e:	59 1b       	sub	r21, r25
    2270:	99 f0       	breq	.+38     	; 0x2298 <__addsf3x+0x5c>
    2272:	59 3f       	cpi	r21, 0xF9	; 249
    2274:	50 f4       	brcc	.+20     	; 0x228a <__addsf3x+0x4e>
    2276:	50 3e       	cpi	r21, 0xE0	; 224
    2278:	68 f1       	brcs	.+90     	; 0x22d4 <__addsf3x+0x98>
    227a:	1a 16       	cp	r1, r26
    227c:	f0 40       	sbci	r31, 0x00	; 0
    227e:	a2 2f       	mov	r26, r18
    2280:	23 2f       	mov	r18, r19
    2282:	34 2f       	mov	r19, r20
    2284:	44 27       	eor	r20, r20
    2286:	58 5f       	subi	r21, 0xF8	; 248
    2288:	f3 cf       	rjmp	.-26     	; 0x2270 <__addsf3x+0x34>
    228a:	46 95       	lsr	r20
    228c:	37 95       	ror	r19
    228e:	27 95       	ror	r18
    2290:	a7 95       	ror	r26
    2292:	f0 40       	sbci	r31, 0x00	; 0
    2294:	53 95       	inc	r21
    2296:	c9 f7       	brne	.-14     	; 0x228a <__addsf3x+0x4e>
    2298:	7e f4       	brtc	.+30     	; 0x22b8 <__addsf3x+0x7c>
    229a:	1f 16       	cp	r1, r31
    229c:	ba 0b       	sbc	r27, r26
    229e:	62 0b       	sbc	r22, r18
    22a0:	73 0b       	sbc	r23, r19
    22a2:	84 0b       	sbc	r24, r20
    22a4:	ba f0       	brmi	.+46     	; 0x22d4 <__addsf3x+0x98>
    22a6:	91 50       	subi	r25, 0x01	; 1
    22a8:	a1 f0       	breq	.+40     	; 0x22d2 <__addsf3x+0x96>
    22aa:	ff 0f       	add	r31, r31
    22ac:	bb 1f       	adc	r27, r27
    22ae:	66 1f       	adc	r22, r22
    22b0:	77 1f       	adc	r23, r23
    22b2:	88 1f       	adc	r24, r24
    22b4:	c2 f7       	brpl	.-16     	; 0x22a6 <__addsf3x+0x6a>
    22b6:	0e c0       	rjmp	.+28     	; 0x22d4 <__addsf3x+0x98>
    22b8:	ba 0f       	add	r27, r26
    22ba:	62 1f       	adc	r22, r18
    22bc:	73 1f       	adc	r23, r19
    22be:	84 1f       	adc	r24, r20
    22c0:	48 f4       	brcc	.+18     	; 0x22d4 <__addsf3x+0x98>
    22c2:	87 95       	ror	r24
    22c4:	77 95       	ror	r23
    22c6:	67 95       	ror	r22
    22c8:	b7 95       	ror	r27
    22ca:	f7 95       	ror	r31
    22cc:	9e 3f       	cpi	r25, 0xFE	; 254
    22ce:	08 f0       	brcs	.+2      	; 0x22d2 <__addsf3x+0x96>
    22d0:	b3 cf       	rjmp	.-154    	; 0x2238 <__addsf3+0x1e>
    22d2:	93 95       	inc	r25
    22d4:	88 0f       	add	r24, r24
    22d6:	08 f0       	brcs	.+2      	; 0x22da <__addsf3x+0x9e>
    22d8:	99 27       	eor	r25, r25
    22da:	ee 0f       	add	r30, r30
    22dc:	97 95       	ror	r25
    22de:	87 95       	ror	r24
    22e0:	08 95       	ret

000022e2 <__cmpsf2>:
    22e2:	74 d0       	rcall	.+232    	; 0x23cc <__fp_cmp>
    22e4:	08 f4       	brcc	.+2      	; 0x22e8 <__cmpsf2+0x6>
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	08 95       	ret

000022ea <cos>:
    22ea:	ac d0       	rcall	.+344    	; 0x2444 <__fp_rempio2>
    22ec:	e3 95       	inc	r30
    22ee:	e2 c0       	rjmp	.+452    	; 0x24b4 <__fp_sinus>

000022f0 <__fixsfsi>:
    22f0:	04 d0       	rcall	.+8      	; 0x22fa <__fixunssfsi>
    22f2:	68 94       	set
    22f4:	b1 11       	cpse	r27, r1
    22f6:	12 c1       	rjmp	.+548    	; 0x251c <__fp_szero>
    22f8:	08 95       	ret

000022fa <__fixunssfsi>:
    22fa:	f5 d0       	rcall	.+490    	; 0x24e6 <__fp_splitA>
    22fc:	88 f0       	brcs	.+34     	; 0x2320 <__fixunssfsi+0x26>
    22fe:	9f 57       	subi	r25, 0x7F	; 127
    2300:	90 f0       	brcs	.+36     	; 0x2326 <__fixunssfsi+0x2c>
    2302:	b9 2f       	mov	r27, r25
    2304:	99 27       	eor	r25, r25
    2306:	b7 51       	subi	r27, 0x17	; 23
    2308:	a0 f0       	brcs	.+40     	; 0x2332 <__fixunssfsi+0x38>
    230a:	d1 f0       	breq	.+52     	; 0x2340 <__fixunssfsi+0x46>
    230c:	66 0f       	add	r22, r22
    230e:	77 1f       	adc	r23, r23
    2310:	88 1f       	adc	r24, r24
    2312:	99 1f       	adc	r25, r25
    2314:	1a f0       	brmi	.+6      	; 0x231c <__fixunssfsi+0x22>
    2316:	ba 95       	dec	r27
    2318:	c9 f7       	brne	.-14     	; 0x230c <__fixunssfsi+0x12>
    231a:	12 c0       	rjmp	.+36     	; 0x2340 <__fixunssfsi+0x46>
    231c:	b1 30       	cpi	r27, 0x01	; 1
    231e:	81 f0       	breq	.+32     	; 0x2340 <__fixunssfsi+0x46>
    2320:	fc d0       	rcall	.+504    	; 0x251a <__fp_zero>
    2322:	b1 e0       	ldi	r27, 0x01	; 1
    2324:	08 95       	ret
    2326:	f9 c0       	rjmp	.+498    	; 0x251a <__fp_zero>
    2328:	67 2f       	mov	r22, r23
    232a:	78 2f       	mov	r23, r24
    232c:	88 27       	eor	r24, r24
    232e:	b8 5f       	subi	r27, 0xF8	; 248
    2330:	39 f0       	breq	.+14     	; 0x2340 <__fixunssfsi+0x46>
    2332:	b9 3f       	cpi	r27, 0xF9	; 249
    2334:	cc f3       	brlt	.-14     	; 0x2328 <__fixunssfsi+0x2e>
    2336:	86 95       	lsr	r24
    2338:	77 95       	ror	r23
    233a:	67 95       	ror	r22
    233c:	b3 95       	inc	r27
    233e:	d9 f7       	brne	.-10     	; 0x2336 <__fixunssfsi+0x3c>
    2340:	3e f4       	brtc	.+14     	; 0x2350 <__fixunssfsi+0x56>
    2342:	90 95       	com	r25
    2344:	80 95       	com	r24
    2346:	70 95       	com	r23
    2348:	61 95       	neg	r22
    234a:	7f 4f       	sbci	r23, 0xFF	; 255
    234c:	8f 4f       	sbci	r24, 0xFF	; 255
    234e:	9f 4f       	sbci	r25, 0xFF	; 255
    2350:	08 95       	ret

00002352 <__floatunsisf>:
    2352:	e8 94       	clt
    2354:	09 c0       	rjmp	.+18     	; 0x2368 <__floatsisf+0x12>

00002356 <__floatsisf>:
    2356:	97 fb       	bst	r25, 7
    2358:	3e f4       	brtc	.+14     	; 0x2368 <__floatsisf+0x12>
    235a:	90 95       	com	r25
    235c:	80 95       	com	r24
    235e:	70 95       	com	r23
    2360:	61 95       	neg	r22
    2362:	7f 4f       	sbci	r23, 0xFF	; 255
    2364:	8f 4f       	sbci	r24, 0xFF	; 255
    2366:	9f 4f       	sbci	r25, 0xFF	; 255
    2368:	99 23       	and	r25, r25
    236a:	a9 f0       	breq	.+42     	; 0x2396 <__floatsisf+0x40>
    236c:	f9 2f       	mov	r31, r25
    236e:	96 e9       	ldi	r25, 0x96	; 150
    2370:	bb 27       	eor	r27, r27
    2372:	93 95       	inc	r25
    2374:	f6 95       	lsr	r31
    2376:	87 95       	ror	r24
    2378:	77 95       	ror	r23
    237a:	67 95       	ror	r22
    237c:	b7 95       	ror	r27
    237e:	f1 11       	cpse	r31, r1
    2380:	f8 cf       	rjmp	.-16     	; 0x2372 <__floatsisf+0x1c>
    2382:	fa f4       	brpl	.+62     	; 0x23c2 <__floatsisf+0x6c>
    2384:	bb 0f       	add	r27, r27
    2386:	11 f4       	brne	.+4      	; 0x238c <__floatsisf+0x36>
    2388:	60 ff       	sbrs	r22, 0
    238a:	1b c0       	rjmp	.+54     	; 0x23c2 <__floatsisf+0x6c>
    238c:	6f 5f       	subi	r22, 0xFF	; 255
    238e:	7f 4f       	sbci	r23, 0xFF	; 255
    2390:	8f 4f       	sbci	r24, 0xFF	; 255
    2392:	9f 4f       	sbci	r25, 0xFF	; 255
    2394:	16 c0       	rjmp	.+44     	; 0x23c2 <__floatsisf+0x6c>
    2396:	88 23       	and	r24, r24
    2398:	11 f0       	breq	.+4      	; 0x239e <__floatsisf+0x48>
    239a:	96 e9       	ldi	r25, 0x96	; 150
    239c:	11 c0       	rjmp	.+34     	; 0x23c0 <__floatsisf+0x6a>
    239e:	77 23       	and	r23, r23
    23a0:	21 f0       	breq	.+8      	; 0x23aa <__floatsisf+0x54>
    23a2:	9e e8       	ldi	r25, 0x8E	; 142
    23a4:	87 2f       	mov	r24, r23
    23a6:	76 2f       	mov	r23, r22
    23a8:	05 c0       	rjmp	.+10     	; 0x23b4 <__floatsisf+0x5e>
    23aa:	66 23       	and	r22, r22
    23ac:	71 f0       	breq	.+28     	; 0x23ca <__floatsisf+0x74>
    23ae:	96 e8       	ldi	r25, 0x86	; 134
    23b0:	86 2f       	mov	r24, r22
    23b2:	70 e0       	ldi	r23, 0x00	; 0
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	2a f0       	brmi	.+10     	; 0x23c2 <__floatsisf+0x6c>
    23b8:	9a 95       	dec	r25
    23ba:	66 0f       	add	r22, r22
    23bc:	77 1f       	adc	r23, r23
    23be:	88 1f       	adc	r24, r24
    23c0:	da f7       	brpl	.-10     	; 0x23b8 <__floatsisf+0x62>
    23c2:	88 0f       	add	r24, r24
    23c4:	96 95       	lsr	r25
    23c6:	87 95       	ror	r24
    23c8:	97 f9       	bld	r25, 7
    23ca:	08 95       	ret

000023cc <__fp_cmp>:
    23cc:	99 0f       	add	r25, r25
    23ce:	00 08       	sbc	r0, r0
    23d0:	55 0f       	add	r21, r21
    23d2:	aa 0b       	sbc	r26, r26
    23d4:	e0 e8       	ldi	r30, 0x80	; 128
    23d6:	fe ef       	ldi	r31, 0xFE	; 254
    23d8:	16 16       	cp	r1, r22
    23da:	17 06       	cpc	r1, r23
    23dc:	e8 07       	cpc	r30, r24
    23de:	f9 07       	cpc	r31, r25
    23e0:	c0 f0       	brcs	.+48     	; 0x2412 <__fp_cmp+0x46>
    23e2:	12 16       	cp	r1, r18
    23e4:	13 06       	cpc	r1, r19
    23e6:	e4 07       	cpc	r30, r20
    23e8:	f5 07       	cpc	r31, r21
    23ea:	98 f0       	brcs	.+38     	; 0x2412 <__fp_cmp+0x46>
    23ec:	62 1b       	sub	r22, r18
    23ee:	73 0b       	sbc	r23, r19
    23f0:	84 0b       	sbc	r24, r20
    23f2:	95 0b       	sbc	r25, r21
    23f4:	39 f4       	brne	.+14     	; 0x2404 <__fp_cmp+0x38>
    23f6:	0a 26       	eor	r0, r26
    23f8:	61 f0       	breq	.+24     	; 0x2412 <__fp_cmp+0x46>
    23fa:	23 2b       	or	r18, r19
    23fc:	24 2b       	or	r18, r20
    23fe:	25 2b       	or	r18, r21
    2400:	21 f4       	brne	.+8      	; 0x240a <__fp_cmp+0x3e>
    2402:	08 95       	ret
    2404:	0a 26       	eor	r0, r26
    2406:	09 f4       	brne	.+2      	; 0x240a <__fp_cmp+0x3e>
    2408:	a1 40       	sbci	r26, 0x01	; 1
    240a:	a6 95       	lsr	r26
    240c:	8f ef       	ldi	r24, 0xFF	; 255
    240e:	81 1d       	adc	r24, r1
    2410:	81 1d       	adc	r24, r1
    2412:	08 95       	ret

00002414 <__fp_inf>:
    2414:	97 f9       	bld	r25, 7
    2416:	9f 67       	ori	r25, 0x7F	; 127
    2418:	80 e8       	ldi	r24, 0x80	; 128
    241a:	70 e0       	ldi	r23, 0x00	; 0
    241c:	60 e0       	ldi	r22, 0x00	; 0
    241e:	08 95       	ret

00002420 <__fp_nan>:
    2420:	9f ef       	ldi	r25, 0xFF	; 255
    2422:	80 ec       	ldi	r24, 0xC0	; 192
    2424:	08 95       	ret

00002426 <__fp_pscA>:
    2426:	00 24       	eor	r0, r0
    2428:	0a 94       	dec	r0
    242a:	16 16       	cp	r1, r22
    242c:	17 06       	cpc	r1, r23
    242e:	18 06       	cpc	r1, r24
    2430:	09 06       	cpc	r0, r25
    2432:	08 95       	ret

00002434 <__fp_pscB>:
    2434:	00 24       	eor	r0, r0
    2436:	0a 94       	dec	r0
    2438:	12 16       	cp	r1, r18
    243a:	13 06       	cpc	r1, r19
    243c:	14 06       	cpc	r1, r20
    243e:	05 06       	cpc	r0, r21
    2440:	08 95       	ret
    2442:	ee cf       	rjmp	.-36     	; 0x2420 <__fp_nan>

00002444 <__fp_rempio2>:
    2444:	50 d0       	rcall	.+160    	; 0x24e6 <__fp_splitA>
    2446:	e8 f3       	brcs	.-6      	; 0x2442 <__fp_pscB+0xe>
    2448:	e8 94       	clt
    244a:	e0 e0       	ldi	r30, 0x00	; 0
    244c:	bb 27       	eor	r27, r27
    244e:	9f 57       	subi	r25, 0x7F	; 127
    2450:	f0 f0       	brcs	.+60     	; 0x248e <__fp_rempio2+0x4a>
    2452:	2a ed       	ldi	r18, 0xDA	; 218
    2454:	3f e0       	ldi	r19, 0x0F	; 15
    2456:	49 ec       	ldi	r20, 0xC9	; 201
    2458:	06 c0       	rjmp	.+12     	; 0x2466 <__fp_rempio2+0x22>
    245a:	ee 0f       	add	r30, r30
    245c:	bb 0f       	add	r27, r27
    245e:	66 1f       	adc	r22, r22
    2460:	77 1f       	adc	r23, r23
    2462:	88 1f       	adc	r24, r24
    2464:	28 f0       	brcs	.+10     	; 0x2470 <__fp_rempio2+0x2c>
    2466:	b2 3a       	cpi	r27, 0xA2	; 162
    2468:	62 07       	cpc	r22, r18
    246a:	73 07       	cpc	r23, r19
    246c:	84 07       	cpc	r24, r20
    246e:	28 f0       	brcs	.+10     	; 0x247a <__fp_rempio2+0x36>
    2470:	b2 5a       	subi	r27, 0xA2	; 162
    2472:	62 0b       	sbc	r22, r18
    2474:	73 0b       	sbc	r23, r19
    2476:	84 0b       	sbc	r24, r20
    2478:	e3 95       	inc	r30
    247a:	9a 95       	dec	r25
    247c:	72 f7       	brpl	.-36     	; 0x245a <__fp_rempio2+0x16>
    247e:	80 38       	cpi	r24, 0x80	; 128
    2480:	30 f4       	brcc	.+12     	; 0x248e <__fp_rempio2+0x4a>
    2482:	9a 95       	dec	r25
    2484:	bb 0f       	add	r27, r27
    2486:	66 1f       	adc	r22, r22
    2488:	77 1f       	adc	r23, r23
    248a:	88 1f       	adc	r24, r24
    248c:	d2 f7       	brpl	.-12     	; 0x2482 <__fp_rempio2+0x3e>
    248e:	90 48       	sbci	r25, 0x80	; 128
    2490:	b6 c0       	rjmp	.+364    	; 0x25fe <__fp_mpack_finite>

00002492 <__fp_round>:
    2492:	09 2e       	mov	r0, r25
    2494:	03 94       	inc	r0
    2496:	00 0c       	add	r0, r0
    2498:	11 f4       	brne	.+4      	; 0x249e <__fp_round+0xc>
    249a:	88 23       	and	r24, r24
    249c:	52 f0       	brmi	.+20     	; 0x24b2 <__fp_round+0x20>
    249e:	bb 0f       	add	r27, r27
    24a0:	40 f4       	brcc	.+16     	; 0x24b2 <__fp_round+0x20>
    24a2:	bf 2b       	or	r27, r31
    24a4:	11 f4       	brne	.+4      	; 0x24aa <__fp_round+0x18>
    24a6:	60 ff       	sbrs	r22, 0
    24a8:	04 c0       	rjmp	.+8      	; 0x24b2 <__fp_round+0x20>
    24aa:	6f 5f       	subi	r22, 0xFF	; 255
    24ac:	7f 4f       	sbci	r23, 0xFF	; 255
    24ae:	8f 4f       	sbci	r24, 0xFF	; 255
    24b0:	9f 4f       	sbci	r25, 0xFF	; 255
    24b2:	08 95       	ret

000024b4 <__fp_sinus>:
    24b4:	ef 93       	push	r30
    24b6:	e0 ff       	sbrs	r30, 0
    24b8:	06 c0       	rjmp	.+12     	; 0x24c6 <__fp_sinus+0x12>
    24ba:	a2 ea       	ldi	r26, 0xA2	; 162
    24bc:	2a ed       	ldi	r18, 0xDA	; 218
    24be:	3f e0       	ldi	r19, 0x0F	; 15
    24c0:	49 ec       	ldi	r20, 0xC9	; 201
    24c2:	5f eb       	ldi	r21, 0xBF	; 191
    24c4:	bb de       	rcall	.-650    	; 0x223c <__addsf3x>
    24c6:	e5 df       	rcall	.-54     	; 0x2492 <__fp_round>
    24c8:	0f 90       	pop	r0
    24ca:	03 94       	inc	r0
    24cc:	01 fc       	sbrc	r0, 1
    24ce:	90 58       	subi	r25, 0x80	; 128
    24d0:	e0 e7       	ldi	r30, 0x70	; 112
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	a0 c0       	rjmp	.+320    	; 0x2616 <__fp_powsodd>

000024d6 <__fp_split3>:
    24d6:	57 fd       	sbrc	r21, 7
    24d8:	90 58       	subi	r25, 0x80	; 128
    24da:	44 0f       	add	r20, r20
    24dc:	55 1f       	adc	r21, r21
    24de:	59 f0       	breq	.+22     	; 0x24f6 <__fp_splitA+0x10>
    24e0:	5f 3f       	cpi	r21, 0xFF	; 255
    24e2:	71 f0       	breq	.+28     	; 0x2500 <__fp_splitA+0x1a>
    24e4:	47 95       	ror	r20

000024e6 <__fp_splitA>:
    24e6:	88 0f       	add	r24, r24
    24e8:	97 fb       	bst	r25, 7
    24ea:	99 1f       	adc	r25, r25
    24ec:	61 f0       	breq	.+24     	; 0x2506 <__fp_splitA+0x20>
    24ee:	9f 3f       	cpi	r25, 0xFF	; 255
    24f0:	79 f0       	breq	.+30     	; 0x2510 <__fp_splitA+0x2a>
    24f2:	87 95       	ror	r24
    24f4:	08 95       	ret
    24f6:	12 16       	cp	r1, r18
    24f8:	13 06       	cpc	r1, r19
    24fa:	14 06       	cpc	r1, r20
    24fc:	55 1f       	adc	r21, r21
    24fe:	f2 cf       	rjmp	.-28     	; 0x24e4 <__fp_split3+0xe>
    2500:	46 95       	lsr	r20
    2502:	f1 df       	rcall	.-30     	; 0x24e6 <__fp_splitA>
    2504:	08 c0       	rjmp	.+16     	; 0x2516 <__fp_splitA+0x30>
    2506:	16 16       	cp	r1, r22
    2508:	17 06       	cpc	r1, r23
    250a:	18 06       	cpc	r1, r24
    250c:	99 1f       	adc	r25, r25
    250e:	f1 cf       	rjmp	.-30     	; 0x24f2 <__fp_splitA+0xc>
    2510:	86 95       	lsr	r24
    2512:	71 05       	cpc	r23, r1
    2514:	61 05       	cpc	r22, r1
    2516:	08 94       	sec
    2518:	08 95       	ret

0000251a <__fp_zero>:
    251a:	e8 94       	clt

0000251c <__fp_szero>:
    251c:	bb 27       	eor	r27, r27
    251e:	66 27       	eor	r22, r22
    2520:	77 27       	eor	r23, r23
    2522:	cb 01       	movw	r24, r22
    2524:	97 f9       	bld	r25, 7
    2526:	08 95       	ret

00002528 <__mulsf3>:
    2528:	0b d0       	rcall	.+22     	; 0x2540 <__mulsf3x>
    252a:	b3 cf       	rjmp	.-154    	; 0x2492 <__fp_round>
    252c:	7c df       	rcall	.-264    	; 0x2426 <__fp_pscA>
    252e:	28 f0       	brcs	.+10     	; 0x253a <__mulsf3+0x12>
    2530:	81 df       	rcall	.-254    	; 0x2434 <__fp_pscB>
    2532:	18 f0       	brcs	.+6      	; 0x253a <__mulsf3+0x12>
    2534:	95 23       	and	r25, r21
    2536:	09 f0       	breq	.+2      	; 0x253a <__mulsf3+0x12>
    2538:	6d cf       	rjmp	.-294    	; 0x2414 <__fp_inf>
    253a:	72 cf       	rjmp	.-284    	; 0x2420 <__fp_nan>
    253c:	11 24       	eor	r1, r1
    253e:	ee cf       	rjmp	.-36     	; 0x251c <__fp_szero>

00002540 <__mulsf3x>:
    2540:	ca df       	rcall	.-108    	; 0x24d6 <__fp_split3>
    2542:	a0 f3       	brcs	.-24     	; 0x252c <__mulsf3+0x4>

00002544 <__mulsf3_pse>:
    2544:	95 9f       	mul	r25, r21
    2546:	d1 f3       	breq	.-12     	; 0x253c <__mulsf3+0x14>
    2548:	95 0f       	add	r25, r21
    254a:	50 e0       	ldi	r21, 0x00	; 0
    254c:	55 1f       	adc	r21, r21
    254e:	62 9f       	mul	r22, r18
    2550:	f0 01       	movw	r30, r0
    2552:	72 9f       	mul	r23, r18
    2554:	bb 27       	eor	r27, r27
    2556:	f0 0d       	add	r31, r0
    2558:	b1 1d       	adc	r27, r1
    255a:	63 9f       	mul	r22, r19
    255c:	aa 27       	eor	r26, r26
    255e:	f0 0d       	add	r31, r0
    2560:	b1 1d       	adc	r27, r1
    2562:	aa 1f       	adc	r26, r26
    2564:	64 9f       	mul	r22, r20
    2566:	66 27       	eor	r22, r22
    2568:	b0 0d       	add	r27, r0
    256a:	a1 1d       	adc	r26, r1
    256c:	66 1f       	adc	r22, r22
    256e:	82 9f       	mul	r24, r18
    2570:	22 27       	eor	r18, r18
    2572:	b0 0d       	add	r27, r0
    2574:	a1 1d       	adc	r26, r1
    2576:	62 1f       	adc	r22, r18
    2578:	73 9f       	mul	r23, r19
    257a:	b0 0d       	add	r27, r0
    257c:	a1 1d       	adc	r26, r1
    257e:	62 1f       	adc	r22, r18
    2580:	83 9f       	mul	r24, r19
    2582:	a0 0d       	add	r26, r0
    2584:	61 1d       	adc	r22, r1
    2586:	22 1f       	adc	r18, r18
    2588:	74 9f       	mul	r23, r20
    258a:	33 27       	eor	r19, r19
    258c:	a0 0d       	add	r26, r0
    258e:	61 1d       	adc	r22, r1
    2590:	23 1f       	adc	r18, r19
    2592:	84 9f       	mul	r24, r20
    2594:	60 0d       	add	r22, r0
    2596:	21 1d       	adc	r18, r1
    2598:	82 2f       	mov	r24, r18
    259a:	76 2f       	mov	r23, r22
    259c:	6a 2f       	mov	r22, r26
    259e:	11 24       	eor	r1, r1
    25a0:	9f 57       	subi	r25, 0x7F	; 127
    25a2:	50 40       	sbci	r21, 0x00	; 0
    25a4:	8a f0       	brmi	.+34     	; 0x25c8 <__mulsf3_pse+0x84>
    25a6:	e1 f0       	breq	.+56     	; 0x25e0 <__mulsf3_pse+0x9c>
    25a8:	88 23       	and	r24, r24
    25aa:	4a f0       	brmi	.+18     	; 0x25be <__mulsf3_pse+0x7a>
    25ac:	ee 0f       	add	r30, r30
    25ae:	ff 1f       	adc	r31, r31
    25b0:	bb 1f       	adc	r27, r27
    25b2:	66 1f       	adc	r22, r22
    25b4:	77 1f       	adc	r23, r23
    25b6:	88 1f       	adc	r24, r24
    25b8:	91 50       	subi	r25, 0x01	; 1
    25ba:	50 40       	sbci	r21, 0x00	; 0
    25bc:	a9 f7       	brne	.-22     	; 0x25a8 <__mulsf3_pse+0x64>
    25be:	9e 3f       	cpi	r25, 0xFE	; 254
    25c0:	51 05       	cpc	r21, r1
    25c2:	70 f0       	brcs	.+28     	; 0x25e0 <__mulsf3_pse+0x9c>
    25c4:	27 cf       	rjmp	.-434    	; 0x2414 <__fp_inf>
    25c6:	aa cf       	rjmp	.-172    	; 0x251c <__fp_szero>
    25c8:	5f 3f       	cpi	r21, 0xFF	; 255
    25ca:	ec f3       	brlt	.-6      	; 0x25c6 <__mulsf3_pse+0x82>
    25cc:	98 3e       	cpi	r25, 0xE8	; 232
    25ce:	dc f3       	brlt	.-10     	; 0x25c6 <__mulsf3_pse+0x82>
    25d0:	86 95       	lsr	r24
    25d2:	77 95       	ror	r23
    25d4:	67 95       	ror	r22
    25d6:	b7 95       	ror	r27
    25d8:	f7 95       	ror	r31
    25da:	e7 95       	ror	r30
    25dc:	9f 5f       	subi	r25, 0xFF	; 255
    25de:	c1 f7       	brne	.-16     	; 0x25d0 <__mulsf3_pse+0x8c>
    25e0:	fe 2b       	or	r31, r30
    25e2:	88 0f       	add	r24, r24
    25e4:	91 1d       	adc	r25, r1
    25e6:	96 95       	lsr	r25
    25e8:	87 95       	ror	r24
    25ea:	97 f9       	bld	r25, 7
    25ec:	08 95       	ret

000025ee <sin>:
    25ee:	9f 93       	push	r25
    25f0:	29 df       	rcall	.-430    	; 0x2444 <__fp_rempio2>
    25f2:	0f 90       	pop	r0
    25f4:	07 fc       	sbrc	r0, 7
    25f6:	ee 5f       	subi	r30, 0xFE	; 254
    25f8:	5d cf       	rjmp	.-326    	; 0x24b4 <__fp_sinus>

000025fa <__fp_mpack>:
    25fa:	9f 3f       	cpi	r25, 0xFF	; 255
    25fc:	31 f0       	breq	.+12     	; 0x260a <__fp_mpack_finite+0xc>

000025fe <__fp_mpack_finite>:
    25fe:	91 50       	subi	r25, 0x01	; 1
    2600:	20 f4       	brcc	.+8      	; 0x260a <__fp_mpack_finite+0xc>
    2602:	87 95       	ror	r24
    2604:	77 95       	ror	r23
    2606:	67 95       	ror	r22
    2608:	b7 95       	ror	r27
    260a:	88 0f       	add	r24, r24
    260c:	91 1d       	adc	r25, r1
    260e:	96 95       	lsr	r25
    2610:	87 95       	ror	r24
    2612:	97 f9       	bld	r25, 7
    2614:	08 95       	ret

00002616 <__fp_powsodd>:
    2616:	9f 93       	push	r25
    2618:	8f 93       	push	r24
    261a:	7f 93       	push	r23
    261c:	6f 93       	push	r22
    261e:	ff 93       	push	r31
    2620:	ef 93       	push	r30
    2622:	9b 01       	movw	r18, r22
    2624:	ac 01       	movw	r20, r24
    2626:	80 df       	rcall	.-256    	; 0x2528 <__mulsf3>
    2628:	ef 91       	pop	r30
    262a:	ff 91       	pop	r31
    262c:	05 d0       	rcall	.+10     	; 0x2638 <__fp_powser>
    262e:	2f 91       	pop	r18
    2630:	3f 91       	pop	r19
    2632:	4f 91       	pop	r20
    2634:	5f 91       	pop	r21
    2636:	78 cf       	rjmp	.-272    	; 0x2528 <__mulsf3>

00002638 <__fp_powser>:
    2638:	df 93       	push	r29
    263a:	cf 93       	push	r28
    263c:	1f 93       	push	r17
    263e:	0f 93       	push	r16
    2640:	ff 92       	push	r15
    2642:	ef 92       	push	r14
    2644:	df 92       	push	r13
    2646:	7b 01       	movw	r14, r22
    2648:	8c 01       	movw	r16, r24
    264a:	68 94       	set
    264c:	05 c0       	rjmp	.+10     	; 0x2658 <__fp_powser+0x20>
    264e:	da 2e       	mov	r13, r26
    2650:	ef 01       	movw	r28, r30
    2652:	76 df       	rcall	.-276    	; 0x2540 <__mulsf3x>
    2654:	fe 01       	movw	r30, r28
    2656:	e8 94       	clt
    2658:	a5 91       	lpm	r26, Z+
    265a:	25 91       	lpm	r18, Z+
    265c:	35 91       	lpm	r19, Z+
    265e:	45 91       	lpm	r20, Z+
    2660:	55 91       	lpm	r21, Z+
    2662:	ae f3       	brts	.-22     	; 0x264e <__fp_powser+0x16>
    2664:	ef 01       	movw	r28, r30
    2666:	ea dd       	rcall	.-1068   	; 0x223c <__addsf3x>
    2668:	fe 01       	movw	r30, r28
    266a:	97 01       	movw	r18, r14
    266c:	a8 01       	movw	r20, r16
    266e:	da 94       	dec	r13
    2670:	79 f7       	brne	.-34     	; 0x2650 <__fp_powser+0x18>
    2672:	df 90       	pop	r13
    2674:	ef 90       	pop	r14
    2676:	ff 90       	pop	r15
    2678:	0f 91       	pop	r16
    267a:	1f 91       	pop	r17
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    2682:	9b 01       	movw	r18, r22
	
	switch(channel){
    2684:	82 30       	cpi	r24, 0x02	; 2
    2686:	71 f0       	breq	.+28     	; 0x26a4 <ADC_request+0x22>
    2688:	18 f4       	brcc	.+6      	; 0x2690 <ADC_request+0xe>
    268a:	81 30       	cpi	r24, 0x01	; 1
    268c:	31 f0       	breq	.+12     	; 0x269a <ADC_request+0x18>
    268e:	19 c0       	rjmp	.+50     	; 0x26c2 <ADC_request+0x40>
    2690:	83 30       	cpi	r24, 0x03	; 3
    2692:	69 f0       	breq	.+26     	; 0x26ae <ADC_request+0x2c>
    2694:	84 30       	cpi	r24, 0x04	; 4
    2696:	81 f0       	breq	.+32     	; 0x26b8 <ADC_request+0x36>
    2698:	14 c0       	rjmp	.+40     	; 0x26c2 <ADC_request+0x40>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    269a:	64 e0       	ldi	r22, 0x04	; 4
    269c:	c9 01       	movw	r24, r18
    269e:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <saveToAddress>
			break;
    26a2:	08 95       	ret
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    26a4:	65 e0       	ldi	r22, 0x05	; 5
    26a6:	c9 01       	movw	r24, r18
    26a8:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <saveToAddress>
			break;
    26ac:	08 95       	ret
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    26ae:	66 e0       	ldi	r22, 0x06	; 6
    26b0:	c9 01       	movw	r24, r18
    26b2:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <saveToAddress>
			break;
    26b6:	08 95       	ret
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    26b8:	67 e0       	ldi	r22, 0x07	; 7
    26ba:	c9 01       	movw	r24, r18
    26bc:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <saveToAddress>
			break;
    26c0:	08 95       	ret
			
		default:
			printf("Problems with ADC...");
    26c2:	83 ec       	ldi	r24, 0xC3	; 195
    26c4:	92 e0       	ldi	r25, 0x02	; 2
    26c6:	9f 93       	push	r25
    26c8:	8f 93       	push	r24
    26ca:	9e d1       	rcall	.+828    	; 0x2a08 <printf>
    26cc:	0f 90       	pop	r0
			break;
    26ce:	0f 90       	pop	r0
    26d0:	08 95       	ret

000026d2 <ADC_read>:
    26d2:	0c 94 d3 04 	jmp	0x9a6	; 0x9a6 <readFromAddress>
}

uint8_t ADC_read(volatile char *ADC_ADDRESS)
{
	return (uint8_t)readFromAddress(ADC_ADDRESS);
}
    26d6:	08 95       	ret

000026d8 <__divmodhi4>:
    26d8:	97 fb       	bst	r25, 7
    26da:	07 2e       	mov	r0, r23
    26dc:	16 f4       	brtc	.+4      	; 0x26e2 <__divmodhi4+0xa>
    26de:	00 94       	com	r0
    26e0:	06 d0       	rcall	.+12     	; 0x26ee <__divmodhi4_neg1>
    26e2:	77 fd       	sbrc	r23, 7
    26e4:	08 d0       	rcall	.+16     	; 0x26f6 <__divmodhi4_neg2>
    26e6:	0b d0       	rcall	.+22     	; 0x26fe <__udivmodhi4>
    26e8:	07 fc       	sbrc	r0, 7
    26ea:	05 d0       	rcall	.+10     	; 0x26f6 <__divmodhi4_neg2>
    26ec:	3e f4       	brtc	.+14     	; 0x26fc <__divmodhi4_exit>

000026ee <__divmodhi4_neg1>:
    26ee:	90 95       	com	r25
    26f0:	81 95       	neg	r24
    26f2:	9f 4f       	sbci	r25, 0xFF	; 255
    26f4:	08 95       	ret

000026f6 <__divmodhi4_neg2>:
    26f6:	70 95       	com	r23
    26f8:	61 95       	neg	r22
    26fa:	7f 4f       	sbci	r23, 0xFF	; 255

000026fc <__divmodhi4_exit>:
    26fc:	08 95       	ret

000026fe <__udivmodhi4>:
    26fe:	aa 1b       	sub	r26, r26
    2700:	bb 1b       	sub	r27, r27
    2702:	51 e1       	ldi	r21, 0x11	; 17
    2704:	07 c0       	rjmp	.+14     	; 0x2714 <__udivmodhi4_ep>

00002706 <__udivmodhi4_loop>:
    2706:	aa 1f       	adc	r26, r26
    2708:	bb 1f       	adc	r27, r27
    270a:	a6 17       	cp	r26, r22
    270c:	b7 07       	cpc	r27, r23
    270e:	10 f0       	brcs	.+4      	; 0x2714 <__udivmodhi4_ep>
    2710:	a6 1b       	sub	r26, r22
    2712:	b7 0b       	sbc	r27, r23

00002714 <__udivmodhi4_ep>:
    2714:	88 1f       	adc	r24, r24
    2716:	99 1f       	adc	r25, r25
    2718:	5a 95       	dec	r21
    271a:	a9 f7       	brne	.-22     	; 0x2706 <__udivmodhi4_loop>
    271c:	80 95       	com	r24
    271e:	90 95       	com	r25
    2720:	bc 01       	movw	r22, r24
    2722:	cd 01       	movw	r24, r26
    2724:	08 95       	ret

00002726 <malloc>:
    2726:	cf 93       	push	r28
    2728:	df 93       	push	r29
    272a:	82 30       	cpi	r24, 0x02	; 2
    272c:	91 05       	cpc	r25, r1
    272e:	10 f4       	brcc	.+4      	; 0x2734 <malloc+0xe>
    2730:	82 e0       	ldi	r24, 0x02	; 2
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	e0 91 2b 03 	lds	r30, 0x032B
    2738:	f0 91 2c 03 	lds	r31, 0x032C
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	a0 e0       	ldi	r26, 0x00	; 0
    2742:	b0 e0       	ldi	r27, 0x00	; 0
    2744:	30 97       	sbiw	r30, 0x00	; 0
    2746:	39 f1       	breq	.+78     	; 0x2796 <malloc+0x70>
    2748:	40 81       	ld	r20, Z
    274a:	51 81       	ldd	r21, Z+1	; 0x01
    274c:	48 17       	cp	r20, r24
    274e:	59 07       	cpc	r21, r25
    2750:	b8 f0       	brcs	.+46     	; 0x2780 <malloc+0x5a>
    2752:	48 17       	cp	r20, r24
    2754:	59 07       	cpc	r21, r25
    2756:	71 f4       	brne	.+28     	; 0x2774 <malloc+0x4e>
    2758:	82 81       	ldd	r24, Z+2	; 0x02
    275a:	93 81       	ldd	r25, Z+3	; 0x03
    275c:	10 97       	sbiw	r26, 0x00	; 0
    275e:	29 f0       	breq	.+10     	; 0x276a <malloc+0x44>
    2760:	13 96       	adiw	r26, 0x03	; 3
    2762:	9c 93       	st	X, r25
    2764:	8e 93       	st	-X, r24
    2766:	12 97       	sbiw	r26, 0x02	; 2
    2768:	2c c0       	rjmp	.+88     	; 0x27c2 <malloc+0x9c>
    276a:	90 93 2c 03 	sts	0x032C, r25
    276e:	80 93 2b 03 	sts	0x032B, r24
    2772:	27 c0       	rjmp	.+78     	; 0x27c2 <malloc+0x9c>
    2774:	21 15       	cp	r18, r1
    2776:	31 05       	cpc	r19, r1
    2778:	31 f0       	breq	.+12     	; 0x2786 <malloc+0x60>
    277a:	42 17       	cp	r20, r18
    277c:	53 07       	cpc	r21, r19
    277e:	18 f0       	brcs	.+6      	; 0x2786 <malloc+0x60>
    2780:	a9 01       	movw	r20, r18
    2782:	db 01       	movw	r26, r22
    2784:	01 c0       	rjmp	.+2      	; 0x2788 <malloc+0x62>
    2786:	ef 01       	movw	r28, r30
    2788:	9a 01       	movw	r18, r20
    278a:	bd 01       	movw	r22, r26
    278c:	df 01       	movw	r26, r30
    278e:	02 80       	ldd	r0, Z+2	; 0x02
    2790:	f3 81       	ldd	r31, Z+3	; 0x03
    2792:	e0 2d       	mov	r30, r0
    2794:	d7 cf       	rjmp	.-82     	; 0x2744 <malloc+0x1e>
    2796:	21 15       	cp	r18, r1
    2798:	31 05       	cpc	r19, r1
    279a:	f9 f0       	breq	.+62     	; 0x27da <malloc+0xb4>
    279c:	28 1b       	sub	r18, r24
    279e:	39 0b       	sbc	r19, r25
    27a0:	24 30       	cpi	r18, 0x04	; 4
    27a2:	31 05       	cpc	r19, r1
    27a4:	80 f4       	brcc	.+32     	; 0x27c6 <malloc+0xa0>
    27a6:	8a 81       	ldd	r24, Y+2	; 0x02
    27a8:	9b 81       	ldd	r25, Y+3	; 0x03
    27aa:	61 15       	cp	r22, r1
    27ac:	71 05       	cpc	r23, r1
    27ae:	21 f0       	breq	.+8      	; 0x27b8 <malloc+0x92>
    27b0:	fb 01       	movw	r30, r22
    27b2:	93 83       	std	Z+3, r25	; 0x03
    27b4:	82 83       	std	Z+2, r24	; 0x02
    27b6:	04 c0       	rjmp	.+8      	; 0x27c0 <malloc+0x9a>
    27b8:	90 93 2c 03 	sts	0x032C, r25
    27bc:	80 93 2b 03 	sts	0x032B, r24
    27c0:	fe 01       	movw	r30, r28
    27c2:	32 96       	adiw	r30, 0x02	; 2
    27c4:	44 c0       	rjmp	.+136    	; 0x284e <malloc+0x128>
    27c6:	fe 01       	movw	r30, r28
    27c8:	e2 0f       	add	r30, r18
    27ca:	f3 1f       	adc	r31, r19
    27cc:	81 93       	st	Z+, r24
    27ce:	91 93       	st	Z+, r25
    27d0:	22 50       	subi	r18, 0x02	; 2
    27d2:	31 09       	sbc	r19, r1
    27d4:	39 83       	std	Y+1, r19	; 0x01
    27d6:	28 83       	st	Y, r18
    27d8:	3a c0       	rjmp	.+116    	; 0x284e <malloc+0x128>
    27da:	20 91 29 03 	lds	r18, 0x0329
    27de:	30 91 2a 03 	lds	r19, 0x032A
    27e2:	23 2b       	or	r18, r19
    27e4:	41 f4       	brne	.+16     	; 0x27f6 <malloc+0xd0>
    27e6:	20 91 02 01 	lds	r18, 0x0102
    27ea:	30 91 03 01 	lds	r19, 0x0103
    27ee:	30 93 2a 03 	sts	0x032A, r19
    27f2:	20 93 29 03 	sts	0x0329, r18
    27f6:	20 91 00 01 	lds	r18, 0x0100
    27fa:	30 91 01 01 	lds	r19, 0x0101
    27fe:	21 15       	cp	r18, r1
    2800:	31 05       	cpc	r19, r1
    2802:	41 f4       	brne	.+16     	; 0x2814 <malloc+0xee>
    2804:	2d b7       	in	r18, 0x3d	; 61
    2806:	3e b7       	in	r19, 0x3e	; 62
    2808:	40 91 04 01 	lds	r20, 0x0104
    280c:	50 91 05 01 	lds	r21, 0x0105
    2810:	24 1b       	sub	r18, r20
    2812:	35 0b       	sbc	r19, r21
    2814:	e0 91 29 03 	lds	r30, 0x0329
    2818:	f0 91 2a 03 	lds	r31, 0x032A
    281c:	e2 17       	cp	r30, r18
    281e:	f3 07       	cpc	r31, r19
    2820:	a0 f4       	brcc	.+40     	; 0x284a <malloc+0x124>
    2822:	2e 1b       	sub	r18, r30
    2824:	3f 0b       	sbc	r19, r31
    2826:	28 17       	cp	r18, r24
    2828:	39 07       	cpc	r19, r25
    282a:	78 f0       	brcs	.+30     	; 0x284a <malloc+0x124>
    282c:	ac 01       	movw	r20, r24
    282e:	4e 5f       	subi	r20, 0xFE	; 254
    2830:	5f 4f       	sbci	r21, 0xFF	; 255
    2832:	24 17       	cp	r18, r20
    2834:	35 07       	cpc	r19, r21
    2836:	48 f0       	brcs	.+18     	; 0x284a <malloc+0x124>
    2838:	4e 0f       	add	r20, r30
    283a:	5f 1f       	adc	r21, r31
    283c:	50 93 2a 03 	sts	0x032A, r21
    2840:	40 93 29 03 	sts	0x0329, r20
    2844:	81 93       	st	Z+, r24
    2846:	91 93       	st	Z+, r25
    2848:	02 c0       	rjmp	.+4      	; 0x284e <malloc+0x128>
    284a:	e0 e0       	ldi	r30, 0x00	; 0
    284c:	f0 e0       	ldi	r31, 0x00	; 0
    284e:	cf 01       	movw	r24, r30
    2850:	df 91       	pop	r29
    2852:	cf 91       	pop	r28
    2854:	08 95       	ret

00002856 <free>:
    2856:	cf 93       	push	r28
    2858:	df 93       	push	r29
    285a:	00 97       	sbiw	r24, 0x00	; 0
    285c:	09 f4       	brne	.+2      	; 0x2860 <free+0xa>
    285e:	87 c0       	rjmp	.+270    	; 0x296e <free+0x118>
    2860:	fc 01       	movw	r30, r24
    2862:	32 97       	sbiw	r30, 0x02	; 2
    2864:	13 82       	std	Z+3, r1	; 0x03
    2866:	12 82       	std	Z+2, r1	; 0x02
    2868:	c0 91 2b 03 	lds	r28, 0x032B
    286c:	d0 91 2c 03 	lds	r29, 0x032C
    2870:	20 97       	sbiw	r28, 0x00	; 0
    2872:	81 f4       	brne	.+32     	; 0x2894 <free+0x3e>
    2874:	20 81       	ld	r18, Z
    2876:	31 81       	ldd	r19, Z+1	; 0x01
    2878:	28 0f       	add	r18, r24
    287a:	39 1f       	adc	r19, r25
    287c:	80 91 29 03 	lds	r24, 0x0329
    2880:	90 91 2a 03 	lds	r25, 0x032A
    2884:	82 17       	cp	r24, r18
    2886:	93 07       	cpc	r25, r19
    2888:	79 f5       	brne	.+94     	; 0x28e8 <free+0x92>
    288a:	f0 93 2a 03 	sts	0x032A, r31
    288e:	e0 93 29 03 	sts	0x0329, r30
    2892:	6d c0       	rjmp	.+218    	; 0x296e <free+0x118>
    2894:	de 01       	movw	r26, r28
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	ae 17       	cp	r26, r30
    289c:	bf 07       	cpc	r27, r31
    289e:	50 f4       	brcc	.+20     	; 0x28b4 <free+0x5e>
    28a0:	12 96       	adiw	r26, 0x02	; 2
    28a2:	4d 91       	ld	r20, X+
    28a4:	5c 91       	ld	r21, X
    28a6:	13 97       	sbiw	r26, 0x03	; 3
    28a8:	9d 01       	movw	r18, r26
    28aa:	41 15       	cp	r20, r1
    28ac:	51 05       	cpc	r21, r1
    28ae:	09 f1       	breq	.+66     	; 0x28f2 <free+0x9c>
    28b0:	da 01       	movw	r26, r20
    28b2:	f3 cf       	rjmp	.-26     	; 0x289a <free+0x44>
    28b4:	b3 83       	std	Z+3, r27	; 0x03
    28b6:	a2 83       	std	Z+2, r26	; 0x02
    28b8:	40 81       	ld	r20, Z
    28ba:	51 81       	ldd	r21, Z+1	; 0x01
    28bc:	84 0f       	add	r24, r20
    28be:	95 1f       	adc	r25, r21
    28c0:	8a 17       	cp	r24, r26
    28c2:	9b 07       	cpc	r25, r27
    28c4:	71 f4       	brne	.+28     	; 0x28e2 <free+0x8c>
    28c6:	8d 91       	ld	r24, X+
    28c8:	9c 91       	ld	r25, X
    28ca:	11 97       	sbiw	r26, 0x01	; 1
    28cc:	84 0f       	add	r24, r20
    28ce:	95 1f       	adc	r25, r21
    28d0:	02 96       	adiw	r24, 0x02	; 2
    28d2:	91 83       	std	Z+1, r25	; 0x01
    28d4:	80 83       	st	Z, r24
    28d6:	12 96       	adiw	r26, 0x02	; 2
    28d8:	8d 91       	ld	r24, X+
    28da:	9c 91       	ld	r25, X
    28dc:	13 97       	sbiw	r26, 0x03	; 3
    28de:	93 83       	std	Z+3, r25	; 0x03
    28e0:	82 83       	std	Z+2, r24	; 0x02
    28e2:	21 15       	cp	r18, r1
    28e4:	31 05       	cpc	r19, r1
    28e6:	29 f4       	brne	.+10     	; 0x28f2 <free+0x9c>
    28e8:	f0 93 2c 03 	sts	0x032C, r31
    28ec:	e0 93 2b 03 	sts	0x032B, r30
    28f0:	3e c0       	rjmp	.+124    	; 0x296e <free+0x118>
    28f2:	d9 01       	movw	r26, r18
    28f4:	13 96       	adiw	r26, 0x03	; 3
    28f6:	fc 93       	st	X, r31
    28f8:	ee 93       	st	-X, r30
    28fa:	12 97       	sbiw	r26, 0x02	; 2
    28fc:	4d 91       	ld	r20, X+
    28fe:	5d 91       	ld	r21, X+
    2900:	a4 0f       	add	r26, r20
    2902:	b5 1f       	adc	r27, r21
    2904:	ea 17       	cp	r30, r26
    2906:	fb 07       	cpc	r31, r27
    2908:	79 f4       	brne	.+30     	; 0x2928 <free+0xd2>
    290a:	80 81       	ld	r24, Z
    290c:	91 81       	ldd	r25, Z+1	; 0x01
    290e:	84 0f       	add	r24, r20
    2910:	95 1f       	adc	r25, r21
    2912:	02 96       	adiw	r24, 0x02	; 2
    2914:	d9 01       	movw	r26, r18
    2916:	11 96       	adiw	r26, 0x01	; 1
    2918:	9c 93       	st	X, r25
    291a:	8e 93       	st	-X, r24
    291c:	82 81       	ldd	r24, Z+2	; 0x02
    291e:	93 81       	ldd	r25, Z+3	; 0x03
    2920:	13 96       	adiw	r26, 0x03	; 3
    2922:	9c 93       	st	X, r25
    2924:	8e 93       	st	-X, r24
    2926:	12 97       	sbiw	r26, 0x02	; 2
    2928:	e0 e0       	ldi	r30, 0x00	; 0
    292a:	f0 e0       	ldi	r31, 0x00	; 0
    292c:	8a 81       	ldd	r24, Y+2	; 0x02
    292e:	9b 81       	ldd	r25, Y+3	; 0x03
    2930:	00 97       	sbiw	r24, 0x00	; 0
    2932:	19 f0       	breq	.+6      	; 0x293a <free+0xe4>
    2934:	fe 01       	movw	r30, r28
    2936:	ec 01       	movw	r28, r24
    2938:	f9 cf       	rjmp	.-14     	; 0x292c <free+0xd6>
    293a:	ce 01       	movw	r24, r28
    293c:	02 96       	adiw	r24, 0x02	; 2
    293e:	28 81       	ld	r18, Y
    2940:	39 81       	ldd	r19, Y+1	; 0x01
    2942:	82 0f       	add	r24, r18
    2944:	93 1f       	adc	r25, r19
    2946:	20 91 29 03 	lds	r18, 0x0329
    294a:	30 91 2a 03 	lds	r19, 0x032A
    294e:	28 17       	cp	r18, r24
    2950:	39 07       	cpc	r19, r25
    2952:	69 f4       	brne	.+26     	; 0x296e <free+0x118>
    2954:	30 97       	sbiw	r30, 0x00	; 0
    2956:	29 f4       	brne	.+10     	; 0x2962 <free+0x10c>
    2958:	10 92 2c 03 	sts	0x032C, r1
    295c:	10 92 2b 03 	sts	0x032B, r1
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <free+0x110>
    2962:	13 82       	std	Z+3, r1	; 0x03
    2964:	12 82       	std	Z+2, r1	; 0x02
    2966:	d0 93 2a 03 	sts	0x032A, r29
    296a:	c0 93 29 03 	sts	0x0329, r28
    296e:	df 91       	pop	r29
    2970:	cf 91       	pop	r28
    2972:	08 95       	ret

00002974 <fdevopen>:
    2974:	0f 93       	push	r16
    2976:	1f 93       	push	r17
    2978:	cf 93       	push	r28
    297a:	df 93       	push	r29
    297c:	ec 01       	movw	r28, r24
    297e:	8b 01       	movw	r16, r22
    2980:	00 97       	sbiw	r24, 0x00	; 0
    2982:	31 f4       	brne	.+12     	; 0x2990 <fdevopen+0x1c>
    2984:	61 15       	cp	r22, r1
    2986:	71 05       	cpc	r23, r1
    2988:	19 f4       	brne	.+6      	; 0x2990 <fdevopen+0x1c>
    298a:	80 e0       	ldi	r24, 0x00	; 0
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	37 c0       	rjmp	.+110    	; 0x29fe <fdevopen+0x8a>
    2990:	6e e0       	ldi	r22, 0x0E	; 14
    2992:	70 e0       	ldi	r23, 0x00	; 0
    2994:	81 e0       	ldi	r24, 0x01	; 1
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	5c d2       	rcall	.+1208   	; 0x2e52 <calloc>
    299a:	fc 01       	movw	r30, r24
    299c:	00 97       	sbiw	r24, 0x00	; 0
    299e:	a9 f3       	breq	.-22     	; 0x298a <fdevopen+0x16>
    29a0:	80 e8       	ldi	r24, 0x80	; 128
    29a2:	83 83       	std	Z+3, r24	; 0x03
    29a4:	01 15       	cp	r16, r1
    29a6:	11 05       	cpc	r17, r1
    29a8:	71 f0       	breq	.+28     	; 0x29c6 <fdevopen+0x52>
    29aa:	13 87       	std	Z+11, r17	; 0x0b
    29ac:	02 87       	std	Z+10, r16	; 0x0a
    29ae:	81 e8       	ldi	r24, 0x81	; 129
    29b0:	83 83       	std	Z+3, r24	; 0x03
    29b2:	80 91 2d 03 	lds	r24, 0x032D
    29b6:	90 91 2e 03 	lds	r25, 0x032E
    29ba:	89 2b       	or	r24, r25
    29bc:	21 f4       	brne	.+8      	; 0x29c6 <fdevopen+0x52>
    29be:	f0 93 2e 03 	sts	0x032E, r31
    29c2:	e0 93 2d 03 	sts	0x032D, r30
    29c6:	20 97       	sbiw	r28, 0x00	; 0
    29c8:	c9 f0       	breq	.+50     	; 0x29fc <fdevopen+0x88>
    29ca:	d1 87       	std	Z+9, r29	; 0x09
    29cc:	c0 87       	std	Z+8, r28	; 0x08
    29ce:	83 81       	ldd	r24, Z+3	; 0x03
    29d0:	82 60       	ori	r24, 0x02	; 2
    29d2:	83 83       	std	Z+3, r24	; 0x03
    29d4:	80 91 2f 03 	lds	r24, 0x032F
    29d8:	90 91 30 03 	lds	r25, 0x0330
    29dc:	89 2b       	or	r24, r25
    29de:	71 f4       	brne	.+28     	; 0x29fc <fdevopen+0x88>
    29e0:	f0 93 30 03 	sts	0x0330, r31
    29e4:	e0 93 2f 03 	sts	0x032F, r30
    29e8:	80 91 31 03 	lds	r24, 0x0331
    29ec:	90 91 32 03 	lds	r25, 0x0332
    29f0:	89 2b       	or	r24, r25
    29f2:	21 f4       	brne	.+8      	; 0x29fc <fdevopen+0x88>
    29f4:	f0 93 32 03 	sts	0x0332, r31
    29f8:	e0 93 31 03 	sts	0x0331, r30
    29fc:	cf 01       	movw	r24, r30
    29fe:	df 91       	pop	r29
    2a00:	cf 91       	pop	r28
    2a02:	1f 91       	pop	r17
    2a04:	0f 91       	pop	r16
    2a06:	08 95       	ret

00002a08 <printf>:
    2a08:	a0 e0       	ldi	r26, 0x00	; 0
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	e9 e0       	ldi	r30, 0x09	; 9
    2a0e:	f5 e1       	ldi	r31, 0x15	; 21
    2a10:	f7 c2       	rjmp	.+1518   	; 0x3000 <__prologue_saves__+0x20>
    2a12:	fe 01       	movw	r30, r28
    2a14:	35 96       	adiw	r30, 0x05	; 5
    2a16:	61 91       	ld	r22, Z+
    2a18:	71 91       	ld	r23, Z+
    2a1a:	af 01       	movw	r20, r30
    2a1c:	80 91 2f 03 	lds	r24, 0x032F
    2a20:	90 91 30 03 	lds	r25, 0x0330
    2a24:	53 d0       	rcall	.+166    	; 0x2acc <vfprintf>
    2a26:	e2 e0       	ldi	r30, 0x02	; 2
    2a28:	07 c3       	rjmp	.+1550   	; 0x3038 <__epilogue_restores__+0x20>

00002a2a <putchar>:
    2a2a:	60 91 2f 03 	lds	r22, 0x032F
    2a2e:	70 91 30 03 	lds	r23, 0x0330
    2a32:	46 c2       	rjmp	.+1164   	; 0x2ec0 <fputc>

00002a34 <puts>:
    2a34:	0f 93       	push	r16
    2a36:	1f 93       	push	r17
    2a38:	cf 93       	push	r28
    2a3a:	df 93       	push	r29
    2a3c:	e0 91 2f 03 	lds	r30, 0x032F
    2a40:	f0 91 30 03 	lds	r31, 0x0330
    2a44:	23 81       	ldd	r18, Z+3	; 0x03
    2a46:	21 ff       	sbrs	r18, 1
    2a48:	1b c0       	rjmp	.+54     	; 0x2a80 <puts+0x4c>
    2a4a:	ec 01       	movw	r28, r24
    2a4c:	00 e0       	ldi	r16, 0x00	; 0
    2a4e:	10 e0       	ldi	r17, 0x00	; 0
    2a50:	89 91       	ld	r24, Y+
    2a52:	60 91 2f 03 	lds	r22, 0x032F
    2a56:	70 91 30 03 	lds	r23, 0x0330
    2a5a:	db 01       	movw	r26, r22
    2a5c:	18 96       	adiw	r26, 0x08	; 8
    2a5e:	ed 91       	ld	r30, X+
    2a60:	fc 91       	ld	r31, X
    2a62:	19 97       	sbiw	r26, 0x09	; 9
    2a64:	88 23       	and	r24, r24
    2a66:	31 f0       	breq	.+12     	; 0x2a74 <puts+0x40>
    2a68:	09 95       	icall
    2a6a:	89 2b       	or	r24, r25
    2a6c:	89 f3       	breq	.-30     	; 0x2a50 <puts+0x1c>
    2a6e:	0f ef       	ldi	r16, 0xFF	; 255
    2a70:	1f ef       	ldi	r17, 0xFF	; 255
    2a72:	ee cf       	rjmp	.-36     	; 0x2a50 <puts+0x1c>
    2a74:	8a e0       	ldi	r24, 0x0A	; 10
    2a76:	09 95       	icall
    2a78:	89 2b       	or	r24, r25
    2a7a:	11 f4       	brne	.+4      	; 0x2a80 <puts+0x4c>
    2a7c:	c8 01       	movw	r24, r16
    2a7e:	02 c0       	rjmp	.+4      	; 0x2a84 <puts+0x50>
    2a80:	8f ef       	ldi	r24, 0xFF	; 255
    2a82:	9f ef       	ldi	r25, 0xFF	; 255
    2a84:	df 91       	pop	r29
    2a86:	cf 91       	pop	r28
    2a88:	1f 91       	pop	r17
    2a8a:	0f 91       	pop	r16
    2a8c:	08 95       	ret

00002a8e <sprintf>:
    2a8e:	ae e0       	ldi	r26, 0x0E	; 14
    2a90:	b0 e0       	ldi	r27, 0x00	; 0
    2a92:	ec e4       	ldi	r30, 0x4C	; 76
    2a94:	f5 e1       	ldi	r31, 0x15	; 21
    2a96:	b2 c2       	rjmp	.+1380   	; 0x2ffc <__prologue_saves__+0x1c>
    2a98:	0d 89       	ldd	r16, Y+21	; 0x15
    2a9a:	1e 89       	ldd	r17, Y+22	; 0x16
    2a9c:	86 e0       	ldi	r24, 0x06	; 6
    2a9e:	8c 83       	std	Y+4, r24	; 0x04
    2aa0:	1a 83       	std	Y+2, r17	; 0x02
    2aa2:	09 83       	std	Y+1, r16	; 0x01
    2aa4:	8f ef       	ldi	r24, 0xFF	; 255
    2aa6:	9f e7       	ldi	r25, 0x7F	; 127
    2aa8:	9e 83       	std	Y+6, r25	; 0x06
    2aaa:	8d 83       	std	Y+5, r24	; 0x05
    2aac:	ae 01       	movw	r20, r28
    2aae:	47 5e       	subi	r20, 0xE7	; 231
    2ab0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ab2:	6f 89       	ldd	r22, Y+23	; 0x17
    2ab4:	78 8d       	ldd	r23, Y+24	; 0x18
    2ab6:	ce 01       	movw	r24, r28
    2ab8:	01 96       	adiw	r24, 0x01	; 1
    2aba:	08 d0       	rcall	.+16     	; 0x2acc <vfprintf>
    2abc:	ef 81       	ldd	r30, Y+7	; 0x07
    2abe:	f8 85       	ldd	r31, Y+8	; 0x08
    2ac0:	e0 0f       	add	r30, r16
    2ac2:	f1 1f       	adc	r31, r17
    2ac4:	10 82       	st	Z, r1
    2ac6:	2e 96       	adiw	r28, 0x0e	; 14
    2ac8:	e4 e0       	ldi	r30, 0x04	; 4
    2aca:	b4 c2       	rjmp	.+1384   	; 0x3034 <__epilogue_restores__+0x1c>

00002acc <vfprintf>:
    2acc:	ac e0       	ldi	r26, 0x0C	; 12
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	eb e6       	ldi	r30, 0x6B	; 107
    2ad2:	f5 e1       	ldi	r31, 0x15	; 21
    2ad4:	85 c2       	rjmp	.+1290   	; 0x2fe0 <__prologue_saves__>
    2ad6:	7c 01       	movw	r14, r24
    2ad8:	6b 01       	movw	r12, r22
    2ada:	8a 01       	movw	r16, r20
    2adc:	fc 01       	movw	r30, r24
    2ade:	17 82       	std	Z+7, r1	; 0x07
    2ae0:	16 82       	std	Z+6, r1	; 0x06
    2ae2:	83 81       	ldd	r24, Z+3	; 0x03
    2ae4:	81 ff       	sbrs	r24, 1
    2ae6:	b0 c1       	rjmp	.+864    	; 0x2e48 <vfprintf+0x37c>
    2ae8:	ce 01       	movw	r24, r28
    2aea:	01 96       	adiw	r24, 0x01	; 1
    2aec:	4c 01       	movw	r8, r24
    2aee:	f7 01       	movw	r30, r14
    2af0:	93 81       	ldd	r25, Z+3	; 0x03
    2af2:	f6 01       	movw	r30, r12
    2af4:	93 fd       	sbrc	r25, 3
    2af6:	85 91       	lpm	r24, Z+
    2af8:	93 ff       	sbrs	r25, 3
    2afa:	81 91       	ld	r24, Z+
    2afc:	6f 01       	movw	r12, r30
    2afe:	88 23       	and	r24, r24
    2b00:	09 f4       	brne	.+2      	; 0x2b04 <vfprintf+0x38>
    2b02:	9e c1       	rjmp	.+828    	; 0x2e40 <vfprintf+0x374>
    2b04:	85 32       	cpi	r24, 0x25	; 37
    2b06:	39 f4       	brne	.+14     	; 0x2b16 <vfprintf+0x4a>
    2b08:	93 fd       	sbrc	r25, 3
    2b0a:	85 91       	lpm	r24, Z+
    2b0c:	93 ff       	sbrs	r25, 3
    2b0e:	81 91       	ld	r24, Z+
    2b10:	6f 01       	movw	r12, r30
    2b12:	85 32       	cpi	r24, 0x25	; 37
    2b14:	21 f4       	brne	.+8      	; 0x2b1e <vfprintf+0x52>
    2b16:	b7 01       	movw	r22, r14
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	d2 d1       	rcall	.+932    	; 0x2ec0 <fputc>
    2b1c:	e8 cf       	rjmp	.-48     	; 0x2aee <vfprintf+0x22>
    2b1e:	51 2c       	mov	r5, r1
    2b20:	31 2c       	mov	r3, r1
    2b22:	20 e0       	ldi	r18, 0x00	; 0
    2b24:	20 32       	cpi	r18, 0x20	; 32
    2b26:	a0 f4       	brcc	.+40     	; 0x2b50 <vfprintf+0x84>
    2b28:	8b 32       	cpi	r24, 0x2B	; 43
    2b2a:	69 f0       	breq	.+26     	; 0x2b46 <vfprintf+0x7a>
    2b2c:	30 f4       	brcc	.+12     	; 0x2b3a <vfprintf+0x6e>
    2b2e:	80 32       	cpi	r24, 0x20	; 32
    2b30:	59 f0       	breq	.+22     	; 0x2b48 <vfprintf+0x7c>
    2b32:	83 32       	cpi	r24, 0x23	; 35
    2b34:	69 f4       	brne	.+26     	; 0x2b50 <vfprintf+0x84>
    2b36:	20 61       	ori	r18, 0x10	; 16
    2b38:	2c c0       	rjmp	.+88     	; 0x2b92 <vfprintf+0xc6>
    2b3a:	8d 32       	cpi	r24, 0x2D	; 45
    2b3c:	39 f0       	breq	.+14     	; 0x2b4c <vfprintf+0x80>
    2b3e:	80 33       	cpi	r24, 0x30	; 48
    2b40:	39 f4       	brne	.+14     	; 0x2b50 <vfprintf+0x84>
    2b42:	21 60       	ori	r18, 0x01	; 1
    2b44:	26 c0       	rjmp	.+76     	; 0x2b92 <vfprintf+0xc6>
    2b46:	22 60       	ori	r18, 0x02	; 2
    2b48:	24 60       	ori	r18, 0x04	; 4
    2b4a:	23 c0       	rjmp	.+70     	; 0x2b92 <vfprintf+0xc6>
    2b4c:	28 60       	ori	r18, 0x08	; 8
    2b4e:	21 c0       	rjmp	.+66     	; 0x2b92 <vfprintf+0xc6>
    2b50:	27 fd       	sbrc	r18, 7
    2b52:	27 c0       	rjmp	.+78     	; 0x2ba2 <vfprintf+0xd6>
    2b54:	30 ed       	ldi	r19, 0xD0	; 208
    2b56:	38 0f       	add	r19, r24
    2b58:	3a 30       	cpi	r19, 0x0A	; 10
    2b5a:	78 f4       	brcc	.+30     	; 0x2b7a <vfprintf+0xae>
    2b5c:	26 ff       	sbrs	r18, 6
    2b5e:	06 c0       	rjmp	.+12     	; 0x2b6c <vfprintf+0xa0>
    2b60:	fa e0       	ldi	r31, 0x0A	; 10
    2b62:	5f 9e       	mul	r5, r31
    2b64:	30 0d       	add	r19, r0
    2b66:	11 24       	eor	r1, r1
    2b68:	53 2e       	mov	r5, r19
    2b6a:	13 c0       	rjmp	.+38     	; 0x2b92 <vfprintf+0xc6>
    2b6c:	8a e0       	ldi	r24, 0x0A	; 10
    2b6e:	38 9e       	mul	r3, r24
    2b70:	30 0d       	add	r19, r0
    2b72:	11 24       	eor	r1, r1
    2b74:	33 2e       	mov	r3, r19
    2b76:	20 62       	ori	r18, 0x20	; 32
    2b78:	0c c0       	rjmp	.+24     	; 0x2b92 <vfprintf+0xc6>
    2b7a:	8e 32       	cpi	r24, 0x2E	; 46
    2b7c:	21 f4       	brne	.+8      	; 0x2b86 <vfprintf+0xba>
    2b7e:	26 fd       	sbrc	r18, 6
    2b80:	5f c1       	rjmp	.+702    	; 0x2e40 <vfprintf+0x374>
    2b82:	20 64       	ori	r18, 0x40	; 64
    2b84:	06 c0       	rjmp	.+12     	; 0x2b92 <vfprintf+0xc6>
    2b86:	8c 36       	cpi	r24, 0x6C	; 108
    2b88:	11 f4       	brne	.+4      	; 0x2b8e <vfprintf+0xc2>
    2b8a:	20 68       	ori	r18, 0x80	; 128
    2b8c:	02 c0       	rjmp	.+4      	; 0x2b92 <vfprintf+0xc6>
    2b8e:	88 36       	cpi	r24, 0x68	; 104
    2b90:	41 f4       	brne	.+16     	; 0x2ba2 <vfprintf+0xd6>
    2b92:	f6 01       	movw	r30, r12
    2b94:	93 fd       	sbrc	r25, 3
    2b96:	85 91       	lpm	r24, Z+
    2b98:	93 ff       	sbrs	r25, 3
    2b9a:	81 91       	ld	r24, Z+
    2b9c:	6f 01       	movw	r12, r30
    2b9e:	81 11       	cpse	r24, r1
    2ba0:	c1 cf       	rjmp	.-126    	; 0x2b24 <vfprintf+0x58>
    2ba2:	98 2f       	mov	r25, r24
    2ba4:	9f 7d       	andi	r25, 0xDF	; 223
    2ba6:	95 54       	subi	r25, 0x45	; 69
    2ba8:	93 30       	cpi	r25, 0x03	; 3
    2baa:	28 f4       	brcc	.+10     	; 0x2bb6 <vfprintf+0xea>
    2bac:	0c 5f       	subi	r16, 0xFC	; 252
    2bae:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb0:	ff e3       	ldi	r31, 0x3F	; 63
    2bb2:	f9 83       	std	Y+1, r31	; 0x01
    2bb4:	0d c0       	rjmp	.+26     	; 0x2bd0 <vfprintf+0x104>
    2bb6:	83 36       	cpi	r24, 0x63	; 99
    2bb8:	31 f0       	breq	.+12     	; 0x2bc6 <vfprintf+0xfa>
    2bba:	83 37       	cpi	r24, 0x73	; 115
    2bbc:	71 f0       	breq	.+28     	; 0x2bda <vfprintf+0x10e>
    2bbe:	83 35       	cpi	r24, 0x53	; 83
    2bc0:	09 f0       	breq	.+2      	; 0x2bc4 <vfprintf+0xf8>
    2bc2:	57 c0       	rjmp	.+174    	; 0x2c72 <vfprintf+0x1a6>
    2bc4:	21 c0       	rjmp	.+66     	; 0x2c08 <vfprintf+0x13c>
    2bc6:	f8 01       	movw	r30, r16
    2bc8:	80 81       	ld	r24, Z
    2bca:	89 83       	std	Y+1, r24	; 0x01
    2bcc:	0e 5f       	subi	r16, 0xFE	; 254
    2bce:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd0:	44 24       	eor	r4, r4
    2bd2:	43 94       	inc	r4
    2bd4:	51 2c       	mov	r5, r1
    2bd6:	54 01       	movw	r10, r8
    2bd8:	14 c0       	rjmp	.+40     	; 0x2c02 <vfprintf+0x136>
    2bda:	38 01       	movw	r6, r16
    2bdc:	f2 e0       	ldi	r31, 0x02	; 2
    2bde:	6f 0e       	add	r6, r31
    2be0:	71 1c       	adc	r7, r1
    2be2:	f8 01       	movw	r30, r16
    2be4:	a0 80       	ld	r10, Z
    2be6:	b1 80       	ldd	r11, Z+1	; 0x01
    2be8:	26 ff       	sbrs	r18, 6
    2bea:	03 c0       	rjmp	.+6      	; 0x2bf2 <vfprintf+0x126>
    2bec:	65 2d       	mov	r22, r5
    2bee:	70 e0       	ldi	r23, 0x00	; 0
    2bf0:	02 c0       	rjmp	.+4      	; 0x2bf6 <vfprintf+0x12a>
    2bf2:	6f ef       	ldi	r22, 0xFF	; 255
    2bf4:	7f ef       	ldi	r23, 0xFF	; 255
    2bf6:	c5 01       	movw	r24, r10
    2bf8:	2c 87       	std	Y+12, r18	; 0x0c
    2bfa:	57 d1       	rcall	.+686    	; 0x2eaa <strnlen>
    2bfc:	2c 01       	movw	r4, r24
    2bfe:	83 01       	movw	r16, r6
    2c00:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c02:	2f 77       	andi	r18, 0x7F	; 127
    2c04:	22 2e       	mov	r2, r18
    2c06:	16 c0       	rjmp	.+44     	; 0x2c34 <vfprintf+0x168>
    2c08:	38 01       	movw	r6, r16
    2c0a:	f2 e0       	ldi	r31, 0x02	; 2
    2c0c:	6f 0e       	add	r6, r31
    2c0e:	71 1c       	adc	r7, r1
    2c10:	f8 01       	movw	r30, r16
    2c12:	a0 80       	ld	r10, Z
    2c14:	b1 80       	ldd	r11, Z+1	; 0x01
    2c16:	26 ff       	sbrs	r18, 6
    2c18:	03 c0       	rjmp	.+6      	; 0x2c20 <vfprintf+0x154>
    2c1a:	65 2d       	mov	r22, r5
    2c1c:	70 e0       	ldi	r23, 0x00	; 0
    2c1e:	02 c0       	rjmp	.+4      	; 0x2c24 <vfprintf+0x158>
    2c20:	6f ef       	ldi	r22, 0xFF	; 255
    2c22:	7f ef       	ldi	r23, 0xFF	; 255
    2c24:	c5 01       	movw	r24, r10
    2c26:	2c 87       	std	Y+12, r18	; 0x0c
    2c28:	2e d1       	rcall	.+604    	; 0x2e86 <strnlen_P>
    2c2a:	2c 01       	movw	r4, r24
    2c2c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c2e:	20 68       	ori	r18, 0x80	; 128
    2c30:	22 2e       	mov	r2, r18
    2c32:	83 01       	movw	r16, r6
    2c34:	23 fc       	sbrc	r2, 3
    2c36:	19 c0       	rjmp	.+50     	; 0x2c6a <vfprintf+0x19e>
    2c38:	83 2d       	mov	r24, r3
    2c3a:	90 e0       	ldi	r25, 0x00	; 0
    2c3c:	48 16       	cp	r4, r24
    2c3e:	59 06       	cpc	r5, r25
    2c40:	a0 f4       	brcc	.+40     	; 0x2c6a <vfprintf+0x19e>
    2c42:	b7 01       	movw	r22, r14
    2c44:	80 e2       	ldi	r24, 0x20	; 32
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	3b d1       	rcall	.+630    	; 0x2ec0 <fputc>
    2c4a:	3a 94       	dec	r3
    2c4c:	f5 cf       	rjmp	.-22     	; 0x2c38 <vfprintf+0x16c>
    2c4e:	f5 01       	movw	r30, r10
    2c50:	27 fc       	sbrc	r2, 7
    2c52:	85 91       	lpm	r24, Z+
    2c54:	27 fe       	sbrs	r2, 7
    2c56:	81 91       	ld	r24, Z+
    2c58:	5f 01       	movw	r10, r30
    2c5a:	b7 01       	movw	r22, r14
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	30 d1       	rcall	.+608    	; 0x2ec0 <fputc>
    2c60:	31 10       	cpse	r3, r1
    2c62:	3a 94       	dec	r3
    2c64:	f1 e0       	ldi	r31, 0x01	; 1
    2c66:	4f 1a       	sub	r4, r31
    2c68:	51 08       	sbc	r5, r1
    2c6a:	41 14       	cp	r4, r1
    2c6c:	51 04       	cpc	r5, r1
    2c6e:	79 f7       	brne	.-34     	; 0x2c4e <vfprintf+0x182>
    2c70:	de c0       	rjmp	.+444    	; 0x2e2e <vfprintf+0x362>
    2c72:	84 36       	cpi	r24, 0x64	; 100
    2c74:	11 f0       	breq	.+4      	; 0x2c7a <vfprintf+0x1ae>
    2c76:	89 36       	cpi	r24, 0x69	; 105
    2c78:	31 f5       	brne	.+76     	; 0x2cc6 <vfprintf+0x1fa>
    2c7a:	f8 01       	movw	r30, r16
    2c7c:	27 ff       	sbrs	r18, 7
    2c7e:	07 c0       	rjmp	.+14     	; 0x2c8e <vfprintf+0x1c2>
    2c80:	60 81       	ld	r22, Z
    2c82:	71 81       	ldd	r23, Z+1	; 0x01
    2c84:	82 81       	ldd	r24, Z+2	; 0x02
    2c86:	93 81       	ldd	r25, Z+3	; 0x03
    2c88:	0c 5f       	subi	r16, 0xFC	; 252
    2c8a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c8c:	08 c0       	rjmp	.+16     	; 0x2c9e <vfprintf+0x1d2>
    2c8e:	60 81       	ld	r22, Z
    2c90:	71 81       	ldd	r23, Z+1	; 0x01
    2c92:	88 27       	eor	r24, r24
    2c94:	77 fd       	sbrc	r23, 7
    2c96:	80 95       	com	r24
    2c98:	98 2f       	mov	r25, r24
    2c9a:	0e 5f       	subi	r16, 0xFE	; 254
    2c9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9e:	2f 76       	andi	r18, 0x6F	; 111
    2ca0:	b2 2e       	mov	r11, r18
    2ca2:	97 ff       	sbrs	r25, 7
    2ca4:	09 c0       	rjmp	.+18     	; 0x2cb8 <vfprintf+0x1ec>
    2ca6:	90 95       	com	r25
    2ca8:	80 95       	com	r24
    2caa:	70 95       	com	r23
    2cac:	61 95       	neg	r22
    2cae:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb0:	8f 4f       	sbci	r24, 0xFF	; 255
    2cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb4:	20 68       	ori	r18, 0x80	; 128
    2cb6:	b2 2e       	mov	r11, r18
    2cb8:	2a e0       	ldi	r18, 0x0A	; 10
    2cba:	30 e0       	ldi	r19, 0x00	; 0
    2cbc:	a4 01       	movw	r20, r8
    2cbe:	32 d1       	rcall	.+612    	; 0x2f24 <__ultoa_invert>
    2cc0:	a8 2e       	mov	r10, r24
    2cc2:	a8 18       	sub	r10, r8
    2cc4:	43 c0       	rjmp	.+134    	; 0x2d4c <vfprintf+0x280>
    2cc6:	85 37       	cpi	r24, 0x75	; 117
    2cc8:	29 f4       	brne	.+10     	; 0x2cd4 <vfprintf+0x208>
    2cca:	2f 7e       	andi	r18, 0xEF	; 239
    2ccc:	b2 2e       	mov	r11, r18
    2cce:	2a e0       	ldi	r18, 0x0A	; 10
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	25 c0       	rjmp	.+74     	; 0x2d1e <vfprintf+0x252>
    2cd4:	f2 2f       	mov	r31, r18
    2cd6:	f9 7f       	andi	r31, 0xF9	; 249
    2cd8:	bf 2e       	mov	r11, r31
    2cda:	8f 36       	cpi	r24, 0x6F	; 111
    2cdc:	c1 f0       	breq	.+48     	; 0x2d0e <vfprintf+0x242>
    2cde:	18 f4       	brcc	.+6      	; 0x2ce6 <vfprintf+0x21a>
    2ce0:	88 35       	cpi	r24, 0x58	; 88
    2ce2:	79 f0       	breq	.+30     	; 0x2d02 <vfprintf+0x236>
    2ce4:	ad c0       	rjmp	.+346    	; 0x2e40 <vfprintf+0x374>
    2ce6:	80 37       	cpi	r24, 0x70	; 112
    2ce8:	19 f0       	breq	.+6      	; 0x2cf0 <vfprintf+0x224>
    2cea:	88 37       	cpi	r24, 0x78	; 120
    2cec:	21 f0       	breq	.+8      	; 0x2cf6 <vfprintf+0x22a>
    2cee:	a8 c0       	rjmp	.+336    	; 0x2e40 <vfprintf+0x374>
    2cf0:	2f 2f       	mov	r18, r31
    2cf2:	20 61       	ori	r18, 0x10	; 16
    2cf4:	b2 2e       	mov	r11, r18
    2cf6:	b4 fe       	sbrs	r11, 4
    2cf8:	0d c0       	rjmp	.+26     	; 0x2d14 <vfprintf+0x248>
    2cfa:	8b 2d       	mov	r24, r11
    2cfc:	84 60       	ori	r24, 0x04	; 4
    2cfe:	b8 2e       	mov	r11, r24
    2d00:	09 c0       	rjmp	.+18     	; 0x2d14 <vfprintf+0x248>
    2d02:	24 ff       	sbrs	r18, 4
    2d04:	0a c0       	rjmp	.+20     	; 0x2d1a <vfprintf+0x24e>
    2d06:	9f 2f       	mov	r25, r31
    2d08:	96 60       	ori	r25, 0x06	; 6
    2d0a:	b9 2e       	mov	r11, r25
    2d0c:	06 c0       	rjmp	.+12     	; 0x2d1a <vfprintf+0x24e>
    2d0e:	28 e0       	ldi	r18, 0x08	; 8
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	05 c0       	rjmp	.+10     	; 0x2d1e <vfprintf+0x252>
    2d14:	20 e1       	ldi	r18, 0x10	; 16
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	02 c0       	rjmp	.+4      	; 0x2d1e <vfprintf+0x252>
    2d1a:	20 e1       	ldi	r18, 0x10	; 16
    2d1c:	32 e0       	ldi	r19, 0x02	; 2
    2d1e:	f8 01       	movw	r30, r16
    2d20:	b7 fe       	sbrs	r11, 7
    2d22:	07 c0       	rjmp	.+14     	; 0x2d32 <vfprintf+0x266>
    2d24:	60 81       	ld	r22, Z
    2d26:	71 81       	ldd	r23, Z+1	; 0x01
    2d28:	82 81       	ldd	r24, Z+2	; 0x02
    2d2a:	93 81       	ldd	r25, Z+3	; 0x03
    2d2c:	0c 5f       	subi	r16, 0xFC	; 252
    2d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d30:	06 c0       	rjmp	.+12     	; 0x2d3e <vfprintf+0x272>
    2d32:	60 81       	ld	r22, Z
    2d34:	71 81       	ldd	r23, Z+1	; 0x01
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	0e 5f       	subi	r16, 0xFE	; 254
    2d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d3e:	a4 01       	movw	r20, r8
    2d40:	f1 d0       	rcall	.+482    	; 0x2f24 <__ultoa_invert>
    2d42:	a8 2e       	mov	r10, r24
    2d44:	a8 18       	sub	r10, r8
    2d46:	fb 2d       	mov	r31, r11
    2d48:	ff 77       	andi	r31, 0x7F	; 127
    2d4a:	bf 2e       	mov	r11, r31
    2d4c:	b6 fe       	sbrs	r11, 6
    2d4e:	0b c0       	rjmp	.+22     	; 0x2d66 <vfprintf+0x29a>
    2d50:	2b 2d       	mov	r18, r11
    2d52:	2e 7f       	andi	r18, 0xFE	; 254
    2d54:	a5 14       	cp	r10, r5
    2d56:	50 f4       	brcc	.+20     	; 0x2d6c <vfprintf+0x2a0>
    2d58:	b4 fe       	sbrs	r11, 4
    2d5a:	0a c0       	rjmp	.+20     	; 0x2d70 <vfprintf+0x2a4>
    2d5c:	b2 fc       	sbrc	r11, 2
    2d5e:	08 c0       	rjmp	.+16     	; 0x2d70 <vfprintf+0x2a4>
    2d60:	2b 2d       	mov	r18, r11
    2d62:	2e 7e       	andi	r18, 0xEE	; 238
    2d64:	05 c0       	rjmp	.+10     	; 0x2d70 <vfprintf+0x2a4>
    2d66:	7a 2c       	mov	r7, r10
    2d68:	2b 2d       	mov	r18, r11
    2d6a:	03 c0       	rjmp	.+6      	; 0x2d72 <vfprintf+0x2a6>
    2d6c:	7a 2c       	mov	r7, r10
    2d6e:	01 c0       	rjmp	.+2      	; 0x2d72 <vfprintf+0x2a6>
    2d70:	75 2c       	mov	r7, r5
    2d72:	24 ff       	sbrs	r18, 4
    2d74:	0d c0       	rjmp	.+26     	; 0x2d90 <vfprintf+0x2c4>
    2d76:	fe 01       	movw	r30, r28
    2d78:	ea 0d       	add	r30, r10
    2d7a:	f1 1d       	adc	r31, r1
    2d7c:	80 81       	ld	r24, Z
    2d7e:	80 33       	cpi	r24, 0x30	; 48
    2d80:	11 f4       	brne	.+4      	; 0x2d86 <vfprintf+0x2ba>
    2d82:	29 7e       	andi	r18, 0xE9	; 233
    2d84:	09 c0       	rjmp	.+18     	; 0x2d98 <vfprintf+0x2cc>
    2d86:	22 ff       	sbrs	r18, 2
    2d88:	06 c0       	rjmp	.+12     	; 0x2d96 <vfprintf+0x2ca>
    2d8a:	73 94       	inc	r7
    2d8c:	73 94       	inc	r7
    2d8e:	04 c0       	rjmp	.+8      	; 0x2d98 <vfprintf+0x2cc>
    2d90:	82 2f       	mov	r24, r18
    2d92:	86 78       	andi	r24, 0x86	; 134
    2d94:	09 f0       	breq	.+2      	; 0x2d98 <vfprintf+0x2cc>
    2d96:	73 94       	inc	r7
    2d98:	23 fd       	sbrc	r18, 3
    2d9a:	12 c0       	rjmp	.+36     	; 0x2dc0 <vfprintf+0x2f4>
    2d9c:	20 ff       	sbrs	r18, 0
    2d9e:	06 c0       	rjmp	.+12     	; 0x2dac <vfprintf+0x2e0>
    2da0:	5a 2c       	mov	r5, r10
    2da2:	73 14       	cp	r7, r3
    2da4:	18 f4       	brcc	.+6      	; 0x2dac <vfprintf+0x2e0>
    2da6:	53 0c       	add	r5, r3
    2da8:	57 18       	sub	r5, r7
    2daa:	73 2c       	mov	r7, r3
    2dac:	73 14       	cp	r7, r3
    2dae:	60 f4       	brcc	.+24     	; 0x2dc8 <vfprintf+0x2fc>
    2db0:	b7 01       	movw	r22, r14
    2db2:	80 e2       	ldi	r24, 0x20	; 32
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	2c 87       	std	Y+12, r18	; 0x0c
    2db8:	83 d0       	rcall	.+262    	; 0x2ec0 <fputc>
    2dba:	73 94       	inc	r7
    2dbc:	2c 85       	ldd	r18, Y+12	; 0x0c
    2dbe:	f6 cf       	rjmp	.-20     	; 0x2dac <vfprintf+0x2e0>
    2dc0:	73 14       	cp	r7, r3
    2dc2:	10 f4       	brcc	.+4      	; 0x2dc8 <vfprintf+0x2fc>
    2dc4:	37 18       	sub	r3, r7
    2dc6:	01 c0       	rjmp	.+2      	; 0x2dca <vfprintf+0x2fe>
    2dc8:	31 2c       	mov	r3, r1
    2dca:	24 ff       	sbrs	r18, 4
    2dcc:	11 c0       	rjmp	.+34     	; 0x2df0 <vfprintf+0x324>
    2dce:	b7 01       	movw	r22, r14
    2dd0:	80 e3       	ldi	r24, 0x30	; 48
    2dd2:	90 e0       	ldi	r25, 0x00	; 0
    2dd4:	2c 87       	std	Y+12, r18	; 0x0c
    2dd6:	74 d0       	rcall	.+232    	; 0x2ec0 <fputc>
    2dd8:	2c 85       	ldd	r18, Y+12	; 0x0c
    2dda:	22 ff       	sbrs	r18, 2
    2ddc:	16 c0       	rjmp	.+44     	; 0x2e0a <vfprintf+0x33e>
    2dde:	21 ff       	sbrs	r18, 1
    2de0:	03 c0       	rjmp	.+6      	; 0x2de8 <vfprintf+0x31c>
    2de2:	88 e5       	ldi	r24, 0x58	; 88
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	02 c0       	rjmp	.+4      	; 0x2dec <vfprintf+0x320>
    2de8:	88 e7       	ldi	r24, 0x78	; 120
    2dea:	90 e0       	ldi	r25, 0x00	; 0
    2dec:	b7 01       	movw	r22, r14
    2dee:	0c c0       	rjmp	.+24     	; 0x2e08 <vfprintf+0x33c>
    2df0:	82 2f       	mov	r24, r18
    2df2:	86 78       	andi	r24, 0x86	; 134
    2df4:	51 f0       	breq	.+20     	; 0x2e0a <vfprintf+0x33e>
    2df6:	21 fd       	sbrc	r18, 1
    2df8:	02 c0       	rjmp	.+4      	; 0x2dfe <vfprintf+0x332>
    2dfa:	80 e2       	ldi	r24, 0x20	; 32
    2dfc:	01 c0       	rjmp	.+2      	; 0x2e00 <vfprintf+0x334>
    2dfe:	8b e2       	ldi	r24, 0x2B	; 43
    2e00:	27 fd       	sbrc	r18, 7
    2e02:	8d e2       	ldi	r24, 0x2D	; 45
    2e04:	b7 01       	movw	r22, r14
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	5b d0       	rcall	.+182    	; 0x2ec0 <fputc>
    2e0a:	a5 14       	cp	r10, r5
    2e0c:	30 f4       	brcc	.+12     	; 0x2e1a <vfprintf+0x34e>
    2e0e:	b7 01       	movw	r22, r14
    2e10:	80 e3       	ldi	r24, 0x30	; 48
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	55 d0       	rcall	.+170    	; 0x2ec0 <fputc>
    2e16:	5a 94       	dec	r5
    2e18:	f8 cf       	rjmp	.-16     	; 0x2e0a <vfprintf+0x33e>
    2e1a:	aa 94       	dec	r10
    2e1c:	f4 01       	movw	r30, r8
    2e1e:	ea 0d       	add	r30, r10
    2e20:	f1 1d       	adc	r31, r1
    2e22:	80 81       	ld	r24, Z
    2e24:	b7 01       	movw	r22, r14
    2e26:	90 e0       	ldi	r25, 0x00	; 0
    2e28:	4b d0       	rcall	.+150    	; 0x2ec0 <fputc>
    2e2a:	a1 10       	cpse	r10, r1
    2e2c:	f6 cf       	rjmp	.-20     	; 0x2e1a <vfprintf+0x34e>
    2e2e:	33 20       	and	r3, r3
    2e30:	09 f4       	brne	.+2      	; 0x2e34 <vfprintf+0x368>
    2e32:	5d ce       	rjmp	.-838    	; 0x2aee <vfprintf+0x22>
    2e34:	b7 01       	movw	r22, r14
    2e36:	80 e2       	ldi	r24, 0x20	; 32
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	42 d0       	rcall	.+132    	; 0x2ec0 <fputc>
    2e3c:	3a 94       	dec	r3
    2e3e:	f7 cf       	rjmp	.-18     	; 0x2e2e <vfprintf+0x362>
    2e40:	f7 01       	movw	r30, r14
    2e42:	86 81       	ldd	r24, Z+6	; 0x06
    2e44:	97 81       	ldd	r25, Z+7	; 0x07
    2e46:	02 c0       	rjmp	.+4      	; 0x2e4c <vfprintf+0x380>
    2e48:	8f ef       	ldi	r24, 0xFF	; 255
    2e4a:	9f ef       	ldi	r25, 0xFF	; 255
    2e4c:	2c 96       	adiw	r28, 0x0c	; 12
    2e4e:	e2 e1       	ldi	r30, 0x12	; 18
    2e50:	e3 c0       	rjmp	.+454    	; 0x3018 <__epilogue_restores__>

00002e52 <calloc>:
    2e52:	0f 93       	push	r16
    2e54:	1f 93       	push	r17
    2e56:	cf 93       	push	r28
    2e58:	df 93       	push	r29
    2e5a:	86 9f       	mul	r24, r22
    2e5c:	80 01       	movw	r16, r0
    2e5e:	87 9f       	mul	r24, r23
    2e60:	10 0d       	add	r17, r0
    2e62:	96 9f       	mul	r25, r22
    2e64:	10 0d       	add	r17, r0
    2e66:	11 24       	eor	r1, r1
    2e68:	c8 01       	movw	r24, r16
    2e6a:	5d dc       	rcall	.-1862   	; 0x2726 <malloc>
    2e6c:	ec 01       	movw	r28, r24
    2e6e:	00 97       	sbiw	r24, 0x00	; 0
    2e70:	21 f0       	breq	.+8      	; 0x2e7a <calloc+0x28>
    2e72:	a8 01       	movw	r20, r16
    2e74:	60 e0       	ldi	r22, 0x00	; 0
    2e76:	70 e0       	ldi	r23, 0x00	; 0
    2e78:	11 d0       	rcall	.+34     	; 0x2e9c <memset>
    2e7a:	ce 01       	movw	r24, r28
    2e7c:	df 91       	pop	r29
    2e7e:	cf 91       	pop	r28
    2e80:	1f 91       	pop	r17
    2e82:	0f 91       	pop	r16
    2e84:	08 95       	ret

00002e86 <strnlen_P>:
    2e86:	fc 01       	movw	r30, r24
    2e88:	05 90       	lpm	r0, Z+
    2e8a:	61 50       	subi	r22, 0x01	; 1
    2e8c:	70 40       	sbci	r23, 0x00	; 0
    2e8e:	01 10       	cpse	r0, r1
    2e90:	d8 f7       	brcc	.-10     	; 0x2e88 <strnlen_P+0x2>
    2e92:	80 95       	com	r24
    2e94:	90 95       	com	r25
    2e96:	8e 0f       	add	r24, r30
    2e98:	9f 1f       	adc	r25, r31
    2e9a:	08 95       	ret

00002e9c <memset>:
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	01 c0       	rjmp	.+2      	; 0x2ea2 <memset+0x6>
    2ea0:	6d 93       	st	X+, r22
    2ea2:	41 50       	subi	r20, 0x01	; 1
    2ea4:	50 40       	sbci	r21, 0x00	; 0
    2ea6:	e0 f7       	brcc	.-8      	; 0x2ea0 <memset+0x4>
    2ea8:	08 95       	ret

00002eaa <strnlen>:
    2eaa:	fc 01       	movw	r30, r24
    2eac:	61 50       	subi	r22, 0x01	; 1
    2eae:	70 40       	sbci	r23, 0x00	; 0
    2eb0:	01 90       	ld	r0, Z+
    2eb2:	01 10       	cpse	r0, r1
    2eb4:	d8 f7       	brcc	.-10     	; 0x2eac <strnlen+0x2>
    2eb6:	80 95       	com	r24
    2eb8:	90 95       	com	r25
    2eba:	8e 0f       	add	r24, r30
    2ebc:	9f 1f       	adc	r25, r31
    2ebe:	08 95       	ret

00002ec0 <fputc>:
    2ec0:	0f 93       	push	r16
    2ec2:	1f 93       	push	r17
    2ec4:	cf 93       	push	r28
    2ec6:	df 93       	push	r29
    2ec8:	18 2f       	mov	r17, r24
    2eca:	09 2f       	mov	r16, r25
    2ecc:	eb 01       	movw	r28, r22
    2ece:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed0:	81 fd       	sbrc	r24, 1
    2ed2:	03 c0       	rjmp	.+6      	; 0x2eda <fputc+0x1a>
    2ed4:	8f ef       	ldi	r24, 0xFF	; 255
    2ed6:	9f ef       	ldi	r25, 0xFF	; 255
    2ed8:	20 c0       	rjmp	.+64     	; 0x2f1a <fputc+0x5a>
    2eda:	82 ff       	sbrs	r24, 2
    2edc:	10 c0       	rjmp	.+32     	; 0x2efe <fputc+0x3e>
    2ede:	4e 81       	ldd	r20, Y+6	; 0x06
    2ee0:	5f 81       	ldd	r21, Y+7	; 0x07
    2ee2:	2c 81       	ldd	r18, Y+4	; 0x04
    2ee4:	3d 81       	ldd	r19, Y+5	; 0x05
    2ee6:	42 17       	cp	r20, r18
    2ee8:	53 07       	cpc	r21, r19
    2eea:	7c f4       	brge	.+30     	; 0x2f0a <fputc+0x4a>
    2eec:	e8 81       	ld	r30, Y
    2eee:	f9 81       	ldd	r31, Y+1	; 0x01
    2ef0:	9f 01       	movw	r18, r30
    2ef2:	2f 5f       	subi	r18, 0xFF	; 255
    2ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef6:	39 83       	std	Y+1, r19	; 0x01
    2ef8:	28 83       	st	Y, r18
    2efa:	10 83       	st	Z, r17
    2efc:	06 c0       	rjmp	.+12     	; 0x2f0a <fputc+0x4a>
    2efe:	e8 85       	ldd	r30, Y+8	; 0x08
    2f00:	f9 85       	ldd	r31, Y+9	; 0x09
    2f02:	81 2f       	mov	r24, r17
    2f04:	09 95       	icall
    2f06:	89 2b       	or	r24, r25
    2f08:	29 f7       	brne	.-54     	; 0x2ed4 <fputc+0x14>
    2f0a:	2e 81       	ldd	r18, Y+6	; 0x06
    2f0c:	3f 81       	ldd	r19, Y+7	; 0x07
    2f0e:	2f 5f       	subi	r18, 0xFF	; 255
    2f10:	3f 4f       	sbci	r19, 0xFF	; 255
    2f12:	3f 83       	std	Y+7, r19	; 0x07
    2f14:	2e 83       	std	Y+6, r18	; 0x06
    2f16:	81 2f       	mov	r24, r17
    2f18:	90 2f       	mov	r25, r16
    2f1a:	df 91       	pop	r29
    2f1c:	cf 91       	pop	r28
    2f1e:	1f 91       	pop	r17
    2f20:	0f 91       	pop	r16
    2f22:	08 95       	ret

00002f24 <__ultoa_invert>:
    2f24:	fa 01       	movw	r30, r20
    2f26:	aa 27       	eor	r26, r26
    2f28:	28 30       	cpi	r18, 0x08	; 8
    2f2a:	51 f1       	breq	.+84     	; 0x2f80 <__ultoa_invert+0x5c>
    2f2c:	20 31       	cpi	r18, 0x10	; 16
    2f2e:	81 f1       	breq	.+96     	; 0x2f90 <__ultoa_invert+0x6c>
    2f30:	e8 94       	clt
    2f32:	6f 93       	push	r22
    2f34:	6e 7f       	andi	r22, 0xFE	; 254
    2f36:	6e 5f       	subi	r22, 0xFE	; 254
    2f38:	7f 4f       	sbci	r23, 0xFF	; 255
    2f3a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f3e:	af 4f       	sbci	r26, 0xFF	; 255
    2f40:	b1 e0       	ldi	r27, 0x01	; 1
    2f42:	3e d0       	rcall	.+124    	; 0x2fc0 <__ultoa_invert+0x9c>
    2f44:	b4 e0       	ldi	r27, 0x04	; 4
    2f46:	3c d0       	rcall	.+120    	; 0x2fc0 <__ultoa_invert+0x9c>
    2f48:	67 0f       	add	r22, r23
    2f4a:	78 1f       	adc	r23, r24
    2f4c:	89 1f       	adc	r24, r25
    2f4e:	9a 1f       	adc	r25, r26
    2f50:	a1 1d       	adc	r26, r1
    2f52:	68 0f       	add	r22, r24
    2f54:	79 1f       	adc	r23, r25
    2f56:	8a 1f       	adc	r24, r26
    2f58:	91 1d       	adc	r25, r1
    2f5a:	a1 1d       	adc	r26, r1
    2f5c:	6a 0f       	add	r22, r26
    2f5e:	71 1d       	adc	r23, r1
    2f60:	81 1d       	adc	r24, r1
    2f62:	91 1d       	adc	r25, r1
    2f64:	a1 1d       	adc	r26, r1
    2f66:	20 d0       	rcall	.+64     	; 0x2fa8 <__ultoa_invert+0x84>
    2f68:	09 f4       	brne	.+2      	; 0x2f6c <__ultoa_invert+0x48>
    2f6a:	68 94       	set
    2f6c:	3f 91       	pop	r19
    2f6e:	2a e0       	ldi	r18, 0x0A	; 10
    2f70:	26 9f       	mul	r18, r22
    2f72:	11 24       	eor	r1, r1
    2f74:	30 19       	sub	r19, r0
    2f76:	30 5d       	subi	r19, 0xD0	; 208
    2f78:	31 93       	st	Z+, r19
    2f7a:	de f6       	brtc	.-74     	; 0x2f32 <__ultoa_invert+0xe>
    2f7c:	cf 01       	movw	r24, r30
    2f7e:	08 95       	ret
    2f80:	46 2f       	mov	r20, r22
    2f82:	47 70       	andi	r20, 0x07	; 7
    2f84:	40 5d       	subi	r20, 0xD0	; 208
    2f86:	41 93       	st	Z+, r20
    2f88:	b3 e0       	ldi	r27, 0x03	; 3
    2f8a:	0f d0       	rcall	.+30     	; 0x2faa <__ultoa_invert+0x86>
    2f8c:	c9 f7       	brne	.-14     	; 0x2f80 <__ultoa_invert+0x5c>
    2f8e:	f6 cf       	rjmp	.-20     	; 0x2f7c <__ultoa_invert+0x58>
    2f90:	46 2f       	mov	r20, r22
    2f92:	4f 70       	andi	r20, 0x0F	; 15
    2f94:	40 5d       	subi	r20, 0xD0	; 208
    2f96:	4a 33       	cpi	r20, 0x3A	; 58
    2f98:	18 f0       	brcs	.+6      	; 0x2fa0 <__ultoa_invert+0x7c>
    2f9a:	49 5d       	subi	r20, 0xD9	; 217
    2f9c:	31 fd       	sbrc	r19, 1
    2f9e:	40 52       	subi	r20, 0x20	; 32
    2fa0:	41 93       	st	Z+, r20
    2fa2:	02 d0       	rcall	.+4      	; 0x2fa8 <__ultoa_invert+0x84>
    2fa4:	a9 f7       	brne	.-22     	; 0x2f90 <__ultoa_invert+0x6c>
    2fa6:	ea cf       	rjmp	.-44     	; 0x2f7c <__ultoa_invert+0x58>
    2fa8:	b4 e0       	ldi	r27, 0x04	; 4
    2faa:	a6 95       	lsr	r26
    2fac:	97 95       	ror	r25
    2fae:	87 95       	ror	r24
    2fb0:	77 95       	ror	r23
    2fb2:	67 95       	ror	r22
    2fb4:	ba 95       	dec	r27
    2fb6:	c9 f7       	brne	.-14     	; 0x2faa <__ultoa_invert+0x86>
    2fb8:	00 97       	sbiw	r24, 0x00	; 0
    2fba:	61 05       	cpc	r22, r1
    2fbc:	71 05       	cpc	r23, r1
    2fbe:	08 95       	ret
    2fc0:	9b 01       	movw	r18, r22
    2fc2:	ac 01       	movw	r20, r24
    2fc4:	0a 2e       	mov	r0, r26
    2fc6:	06 94       	lsr	r0
    2fc8:	57 95       	ror	r21
    2fca:	47 95       	ror	r20
    2fcc:	37 95       	ror	r19
    2fce:	27 95       	ror	r18
    2fd0:	ba 95       	dec	r27
    2fd2:	c9 f7       	brne	.-14     	; 0x2fc6 <__ultoa_invert+0xa2>
    2fd4:	62 0f       	add	r22, r18
    2fd6:	73 1f       	adc	r23, r19
    2fd8:	84 1f       	adc	r24, r20
    2fda:	95 1f       	adc	r25, r21
    2fdc:	a0 1d       	adc	r26, r0
    2fde:	08 95       	ret

00002fe0 <__prologue_saves__>:
    2fe0:	2f 92       	push	r2
    2fe2:	3f 92       	push	r3
    2fe4:	4f 92       	push	r4
    2fe6:	5f 92       	push	r5
    2fe8:	6f 92       	push	r6
    2fea:	7f 92       	push	r7
    2fec:	8f 92       	push	r8
    2fee:	9f 92       	push	r9
    2ff0:	af 92       	push	r10
    2ff2:	bf 92       	push	r11
    2ff4:	cf 92       	push	r12
    2ff6:	df 92       	push	r13
    2ff8:	ef 92       	push	r14
    2ffa:	ff 92       	push	r15
    2ffc:	0f 93       	push	r16
    2ffe:	1f 93       	push	r17
    3000:	cf 93       	push	r28
    3002:	df 93       	push	r29
    3004:	cd b7       	in	r28, 0x3d	; 61
    3006:	de b7       	in	r29, 0x3e	; 62
    3008:	ca 1b       	sub	r28, r26
    300a:	db 0b       	sbc	r29, r27
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	f8 94       	cli
    3010:	de bf       	out	0x3e, r29	; 62
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	cd bf       	out	0x3d, r28	; 61
    3016:	09 94       	ijmp

00003018 <__epilogue_restores__>:
    3018:	2a 88       	ldd	r2, Y+18	; 0x12
    301a:	39 88       	ldd	r3, Y+17	; 0x11
    301c:	48 88       	ldd	r4, Y+16	; 0x10
    301e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3020:	6e 84       	ldd	r6, Y+14	; 0x0e
    3022:	7d 84       	ldd	r7, Y+13	; 0x0d
    3024:	8c 84       	ldd	r8, Y+12	; 0x0c
    3026:	9b 84       	ldd	r9, Y+11	; 0x0b
    3028:	aa 84       	ldd	r10, Y+10	; 0x0a
    302a:	b9 84       	ldd	r11, Y+9	; 0x09
    302c:	c8 84       	ldd	r12, Y+8	; 0x08
    302e:	df 80       	ldd	r13, Y+7	; 0x07
    3030:	ee 80       	ldd	r14, Y+6	; 0x06
    3032:	fd 80       	ldd	r15, Y+5	; 0x05
    3034:	0c 81       	ldd	r16, Y+4	; 0x04
    3036:	1b 81       	ldd	r17, Y+3	; 0x03
    3038:	aa 81       	ldd	r26, Y+2	; 0x02
    303a:	b9 81       	ldd	r27, Y+1	; 0x01
    303c:	ce 0f       	add	r28, r30
    303e:	d1 1d       	adc	r29, r1
    3040:	0f b6       	in	r0, 0x3f	; 63
    3042:	f8 94       	cli
    3044:	de bf       	out	0x3e, r29	; 62
    3046:	0f be       	out	0x3f, r0	; 63
    3048:	cd bf       	out	0x3d, r28	; 61
    304a:	ed 01       	movw	r28, r26
    304c:	08 95       	ret

0000304e <_exit>:
    304e:	f8 94       	cli

00003050 <__stop_program>:
    3050:	ff cf       	rjmp	.-2      	; 0x3050 <__stop_program>
