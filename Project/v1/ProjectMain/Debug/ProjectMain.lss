
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000192  00800100  0000175a  000017ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000175a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  00800292  00800292  00001980  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000230  00000000  00000000  000019dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002380  00000000  00000000  00001c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d26  00000000  00000000  00003f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001008  00000000  00000000  00004cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000568  00000000  00000000  00005cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b36  00000000  00000000  00006224  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014a7  00000000  00000000  00006d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  00008201  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	c9 c1       	rjmp	.+914    	; 0x3a0 <__bad_interrupt>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <OLED_init+0x80>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ea e5       	ldi	r30, 0x5A	; 90
     37c:	f7 e1       	ldi	r31, 0x17	; 23
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a2 39       	cpi	r26, 0x92	; 146
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	a2 e9       	ldi	r26, 0x92	; 146
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a4 3b       	cpi	r26, 0xB4	; 180
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	33 d0       	rcall	.+102    	; 0x402 <main>
     39c:	0c 94 ab 0b 	jmp	0x1756	; 0x1756 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 9c 02 	sts	0x029C, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 94 02 	sts	0x0294, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 93 02 	sts	0x0293, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 92 02 	sts	0x0292, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <main>:
//#define ADDRESS 0x1400

int main(void)
{	
	// todo: write init() that calls all other init functions
	uartInit(BAUDRATE, FOSC, UBRR);
     402:	1f e1       	ldi	r17, 0x1F	; 31
     404:	e1 2e       	mov	r14, r17
     406:	f1 2c       	mov	r15, r1
     408:	00 e0       	ldi	r16, 0x00	; 0
     40a:	10 e0       	ldi	r17, 0x00	; 0
     40c:	20 e0       	ldi	r18, 0x00	; 0
     40e:	30 e0       	ldi	r19, 0x00	; 0
     410:	4b e4       	ldi	r20, 0x4B	; 75
     412:	50 e0       	ldi	r21, 0x00	; 0
     414:	60 e8       	ldi	r22, 0x80	; 128
     416:	75 e2       	ldi	r23, 0x25	; 37
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	c6 d4       	rcall	.+2444   	; 0xdaa <uartInit>
	enableXMEM(1);
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	29 d0       	rcall	.+82     	; 0x474 <enableXMEM>
	SLI_init();
     422:	b2 d4       	rcall	.+2404   	; 0xd88 <SLI_init>
	JOY_init();
     424:	39 d0       	rcall	.+114    	; 0x498 <JOY_init>
	
	//init external interrupt INT0 on falling edge
	set_bit(GICR, INT0);
     426:	8b b7       	in	r24, 0x3b	; 59
     428:	80 64       	ori	r24, 0x40	; 64
     42a:	8b bf       	out	0x3b, r24	; 59
	set_bit(MCUCR, ISC01);
     42c:	85 b7       	in	r24, 0x35	; 53
     42e:	82 60       	ori	r24, 0x02	; 2
     430:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     432:	85 b7       	in	r24, 0x35	; 53
     434:	8e 7f       	andi	r24, 0xFE	; 254
     436:	85 bf       	out	0x35, r24	; 53
	
	//Pull-up on PD3
	clear_bit(DDRD, PD3);
     438:	8b 98       	cbi	0x11, 3	; 17
	set_bit(PORTD, PD3);
     43a:	93 9a       	sbi	0x12, 3	; 18
	
	//init external interrupt INT1 on falling edge
	set_bit(GICR, INT1);
     43c:	8b b7       	in	r24, 0x3b	; 59
     43e:	80 68       	ori	r24, 0x80	; 128
     440:	8b bf       	out	0x3b, r24	; 59
	set_bit(MCUCR, ISC11);
     442:	85 b7       	in	r24, 0x35	; 53
     444:	88 60       	ori	r24, 0x08	; 8
     446:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC10);
     448:	85 b7       	in	r24, 0x35	; 53
     44a:	8b 7f       	andi	r24, 0xFB	; 251
     44c:	85 bf       	out	0x35, r24	; 53
	////init external interrupt INT2 on falling edge
	//set_bit(GICR, INT2);
	//clear_bit(EMCUCR, ISC2);
	
	//PE2
	clear_bit(DDRE, PE2);
     44e:	32 98       	cbi	0x06, 2	; 6
	clear_bit(PORTE, PE2);
     450:	3a 98       	cbi	0x07, 2	; 7
	
	//PB0
	clear_bit(DDRB, PB0);
     452:	b8 98       	cbi	0x17, 0	; 23
	clear_bit(PORTB, PB0);
     454:	c0 98       	cbi	0x18, 0	; 24
	

	
	sei();
     456:	78 94       	sei

	//SRAM_test();
	JOY_requestCurrentPosition('x');
     458:	88 e7       	ldi	r24, 0x78	; 120
     45a:	1d d1       	rcall	.+570    	; 0x696 <JOY_requestCurrentPosition>
	OLED_init();
     45c:	32 d3       	rcall	.+1636   	; 0xac2 <OLED_init>
	OLED_clear();
     45e:	d2 d3       	rcall	.+1956   	; 0xc04 <OLED_clear>
	//MENU_init();
	MENU_activate();
     460:	1d d3       	rcall	.+1594   	; 0xa9c <MENU_activate>
	

    while(1)
    {	
		// statusMultifunctionBoard();
		JOY_getDirection();
     462:	94 d1       	rcall	.+808    	; 0x78c <JOY_getDirection>

		// todo: remove! will be included in the menu driver later
		if(JOYcalibFlag)
     464:	80 91 92 02 	lds	r24, 0x0292
     468:	88 23       	and	r24, r24
     46a:	d9 f3       	breq	.-10     	; 0x462 <main+0x60>
		{
			//run joystick calibration
			JOY_calibrate();
     46c:	28 d0       	rcall	.+80     	; 0x4be <JOY_calibrate>
			JOYcalibFlag = 0;
     46e:	10 92 92 02 	sts	0x0292, r1
     472:	f7 cf       	rjmp	.-18     	; 0x462 <main+0x60>

00000474 <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     474:	95 b7       	in	r25, 0x35	; 53
     476:	90 68       	ori	r25, 0x80	; 128
     478:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     47a:	96 b7       	in	r25, 0x36	; 54
     47c:	98 60       	ori	r25, 0x08	; 8
     47e:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     480:	88 23       	and	r24, r24
     482:	19 f0       	breq	.+6      	; 0x48a <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     484:	80 b7       	in	r24, 0x30	; 48
     486:	80 62       	ori	r24, 0x20	; 32
     488:	80 bf       	out	0x30, r24	; 48
     48a:	08 95       	ret

0000048c <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     48c:	fc 01       	movw	r30, r24
     48e:	80 81       	ld	r24, Z
	return val;
}
     490:	08 95       	ret

00000492 <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     492:	fc 01       	movw	r30, r24
     494:	60 83       	st	Z, r22
     496:	08 95       	ret

00000498 <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     498:	10 92 9f 02 	sts	0x029F, r1
     49c:	10 92 9e 02 	sts	0x029E, r1
	currentPosition.Y_abs = 0;
     4a0:	10 92 a1 02 	sts	0x02A1, r1
     4a4:	10 92 a0 02 	sts	0x02A0, r1
	currentPosition.X_per = 0;
     4a8:	10 92 a3 02 	sts	0x02A3, r1
     4ac:	10 92 a2 02 	sts	0x02A2, r1
	currentPosition.Y_per = 0;
     4b0:	10 92 a5 02 	sts	0x02A5, r1
     4b4:	10 92 a4 02 	sts	0x02A4, r1
	currentDirection = CENTRE;
     4b8:	10 92 9d 02 	sts	0x029D, r1
     4bc:	08 95       	ret

000004be <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
	uint8_t temp = 0;
	
	printf("Move JOY to the right\n");
     4c2:	86 e2       	ldi	r24, 0x26	; 38
     4c4:	91 e0       	ldi	r25, 0x01	; 1
     4c6:	59 d6       	rcall	.+3250   	; 0x117a <puts>
     4c8:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4ca:	4f ef       	ldi	r20, 0xFF	; 255
     4cc:	52 e0       	ldi	r21, 0x02	; 2
     4ce:	21 50       	subi	r18, 0x01	; 1
     4d0:	40 40       	sbci	r20, 0x00	; 0
     4d2:	50 40       	sbci	r21, 0x00	; 0
     4d4:	e1 f7       	brne	.-8      	; 0x4ce <JOY_calibrate+0x10>
     4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <JOY_calibrate+0x1a>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <JOY_calibrate+0x1c>
     4da:	c4 e1       	ldi	r28, 0x14	; 20
     4dc:	d0 e0       	ldi	r29, 0x00	; 0
     4de:	60 91 06 01 	lds	r22, 0x0106
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     4e2:	70 91 07 01 	lds	r23, 0x0107
     4e6:	81 e0       	ldi	r24, 0x01	; 1
     4e8:	79 d4       	rcall	.+2290   	; 0xddc <ADC_request>
     4ea:	80 e0       	ldi	r24, 0x00	; 0
     4ec:	90 ef       	ldi	r25, 0xF0	; 240
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	f1 f7       	brne	.-4      	; 0x4ee <JOY_calibrate+0x30>
     4f2:	80 91 06 01 	lds	r24, 0x0106
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     4f6:	90 91 07 01 	lds	r25, 0x0107
     4fa:	94 d4       	rcall	.+2344   	; 0xe24 <ADC_read>
     4fc:	90 91 0d 01 	lds	r25, 0x010D
     500:	98 17       	cp	r25, r24
		
		if(temp > calR) {calR = temp;}
     502:	10 f4       	brcc	.+4      	; 0x508 <__stack+0x9>
     504:	80 93 0d 01 	sts	0x010D, r24
     508:	21 97       	sbiw	r28, 0x01	; 1
     50a:	20 97       	sbiw	r28, 0x00	; 0
     50c:	41 f7       	brne	.-48     	; 0x4de <JOY_calibrate+0x20>
     50e:	8c e3       	ldi	r24, 0x3C	; 60
	uint8_t temp = 0;
	
	printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	33 d6       	rcall	.+3174   	; 0x117a <puts>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	printf("Move JOY to the left\n");
     514:	9f ef       	ldi	r25, 0xFF	; 255
     516:	2f ef       	ldi	r18, 0xFF	; 255
     518:	42 e0       	ldi	r20, 0x02	; 2
     51a:	91 50       	subi	r25, 0x01	; 1
     51c:	20 40       	sbci	r18, 0x00	; 0
     51e:	40 40       	sbci	r20, 0x00	; 0
     520:	e1 f7       	brne	.-8      	; 0x51a <__stack+0x1b>
     522:	00 c0       	rjmp	.+0      	; 0x524 <__stack+0x25>
     524:	00 c0       	rjmp	.+0      	; 0x526 <__stack+0x27>
     526:	c4 e1       	ldi	r28, 0x14	; 20
     528:	d0 e0       	ldi	r29, 0x00	; 0
     52a:	60 91 06 01 	lds	r22, 0x0106
     52e:	70 91 07 01 	lds	r23, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	53 d4       	rcall	.+2214   	; 0xddc <ADC_request>
     536:	80 e0       	ldi	r24, 0x00	; 0
     538:	90 ef       	ldi	r25, 0xF0	; 240
     53a:	01 97       	sbiw	r24, 0x01	; 1
     53c:	f1 f7       	brne	.-4      	; 0x53a <__stack+0x3b>
     53e:	80 91 06 01 	lds	r24, 0x0106
     542:	90 91 07 01 	lds	r25, 0x0107
     546:	6e d4       	rcall	.+2268   	; 0xe24 <ADC_read>
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     548:	90 91 0c 01 	lds	r25, 0x010C
     54c:	89 17       	cp	r24, r25
     54e:	10 f4       	brcc	.+4      	; 0x554 <__stack+0x55>
     550:	80 93 0c 01 	sts	0x010C, r24
		
		if(temp < calL) {calL = temp;}
     554:	21 97       	sbiw	r28, 0x01	; 1
     556:	20 97       	sbiw	r28, 0x00	; 0
     558:	41 f7       	brne	.-48     	; 0x52a <__stack+0x2b>
     55a:	81 e5       	ldi	r24, 0x51	; 81
     55c:	91 e0       	ldi	r25, 0x01	; 1
     55e:	0d d6       	rcall	.+3098   	; 0x117a <puts>
     560:	9f ef       	ldi	r25, 0xFF	; 255
	}
	
	printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     562:	2f ef       	ldi	r18, 0xFF	; 255
     564:	42 e0       	ldi	r20, 0x02	; 2
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	printf("Move JOY up\n");
     566:	91 50       	subi	r25, 0x01	; 1
     568:	20 40       	sbci	r18, 0x00	; 0
     56a:	40 40       	sbci	r20, 0x00	; 0
     56c:	e1 f7       	brne	.-8      	; 0x566 <__stack+0x67>
     56e:	00 c0       	rjmp	.+0      	; 0x570 <__stack+0x71>
     570:	00 c0       	rjmp	.+0      	; 0x572 <__stack+0x73>
     572:	c4 e1       	ldi	r28, 0x14	; 20
     574:	d0 e0       	ldi	r29, 0x00	; 0
     576:	60 91 06 01 	lds	r22, 0x0106
     57a:	70 91 07 01 	lds	r23, 0x0107
     57e:	82 e0       	ldi	r24, 0x02	; 2
     580:	2d d4       	rcall	.+2138   	; 0xddc <ADC_request>
     582:	80 e0       	ldi	r24, 0x00	; 0
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     584:	90 ef       	ldi	r25, 0xF0	; 240
     586:	01 97       	sbiw	r24, 0x01	; 1
     588:	f1 f7       	brne	.-4      	; 0x586 <__stack+0x87>
     58a:	80 91 06 01 	lds	r24, 0x0106
     58e:	90 91 07 01 	lds	r25, 0x0107
     592:	48 d4       	rcall	.+2192   	; 0xe24 <ADC_read>
     594:	90 91 0b 01 	lds	r25, 0x010B
     598:	98 17       	cp	r25, r24
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     59a:	10 f4       	brcc	.+4      	; 0x5a0 <__stack+0xa1>
     59c:	80 93 0b 01 	sts	0x010B, r24
     5a0:	21 97       	sbiw	r28, 0x01	; 1
     5a2:	20 97       	sbiw	r28, 0x00	; 0
     5a4:	41 f7       	brne	.-48     	; 0x576 <__stack+0x77>
		
		if(temp > calUp) {calUp = temp;}
     5a6:	8d e5       	ldi	r24, 0x5D	; 93
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	e7 d5       	rcall	.+3022   	; 0x117a <puts>
     5ac:	9f ef       	ldi	r25, 0xFF	; 255
     5ae:	2f ef       	ldi	r18, 0xFF	; 255
     5b0:	42 e0       	ldi	r20, 0x02	; 2
     5b2:	91 50       	subi	r25, 0x01	; 1
	}
	
	printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     5b4:	20 40       	sbci	r18, 0x00	; 0
     5b6:	40 40       	sbci	r20, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	printf("Move JOY down\n");
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <__stack+0xb3>
     5ba:	00 c0       	rjmp	.+0      	; 0x5bc <__stack+0xbd>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <__stack+0xbf>
     5be:	c4 e1       	ldi	r28, 0x14	; 20
     5c0:	d0 e0       	ldi	r29, 0x00	; 0
     5c2:	60 91 06 01 	lds	r22, 0x0106
     5c6:	70 91 07 01 	lds	r23, 0x0107
     5ca:	82 e0       	ldi	r24, 0x02	; 2
     5cc:	07 d4       	rcall	.+2062   	; 0xddc <ADC_request>
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 ef       	ldi	r25, 0xF0	; 240
     5d2:	01 97       	sbiw	r24, 0x01	; 1
     5d4:	f1 f7       	brne	.-4      	; 0x5d2 <__stack+0xd3>
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     5d6:	80 91 06 01 	lds	r24, 0x0106
     5da:	90 91 07 01 	lds	r25, 0x0107
     5de:	22 d4       	rcall	.+2116   	; 0xe24 <ADC_read>
     5e0:	90 91 0a 01 	lds	r25, 0x010A
     5e4:	89 17       	cp	r24, r25
     5e6:	10 f4       	brcc	.+4      	; 0x5ec <__stack+0xed>
     5e8:	80 93 0a 01 	sts	0x010A, r24
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     5ec:	21 97       	sbiw	r28, 0x01	; 1
     5ee:	20 97       	sbiw	r28, 0x00	; 0
     5f0:	41 f7       	brne	.-48     	; 0x5c2 <__stack+0xc3>
     5f2:	30 91 0a 01 	lds	r19, 0x010A
     5f6:	20 91 0b 01 	lds	r18, 0x010B
		
		if(temp < calDown) {calDown = temp;}
     5fa:	90 91 0c 01 	lds	r25, 0x010C
     5fe:	80 91 0d 01 	lds	r24, 0x010D
     602:	1f 92       	push	r1
     604:	3f 93       	push	r19
	}
	
	printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     606:	1f 92       	push	r1
     608:	2f 93       	push	r18
		
		if(temp < calDown) {calDown = temp;}
	}
	
	
	printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
     60a:	1f 92       	push	r1
     60c:	9f 93       	push	r25
     60e:	1f 92       	push	r1
     610:	8f 93       	push	r24
     612:	8b e6       	ldi	r24, 0x6B	; 107
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	9f 93       	push	r25
     618:	8f 93       	push	r24
     61a:	9e d5       	rcall	.+2876   	; 0x1158 <printf>
     61c:	20 91 0b 01 	lds	r18, 0x010B
     620:	80 91 0a 01 	lds	r24, 0x010A
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	28 1b       	sub	r18, r24
     628:	31 09       	sbc	r19, r1
     62a:	c9 01       	movw	r24, r18
     62c:	4d b7       	in	r20, 0x3d	; 61
     62e:	5e b7       	in	r21, 0x3e	; 62
     630:	46 5f       	subi	r20, 0xF6	; 246
     632:	5f 4f       	sbci	r21, 0xFF	; 255
     634:	0f b6       	in	r0, 0x3f	; 63
	
	meanVert = (calUp - calDown)/2;
     636:	f8 94       	cli
     638:	5e bf       	out	0x3e, r21	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	4d bf       	out	0x3d, r20	; 61
     63e:	99 23       	and	r25, r25
     640:	0c f4       	brge	.+2      	; 0x644 <__stack+0x145>
     642:	01 96       	adiw	r24, 0x01	; 1
     644:	95 95       	asr	r25
     646:	87 95       	ror	r24
     648:	80 93 09 01 	sts	0x0109, r24
     64c:	20 91 0d 01 	lds	r18, 0x010D
     650:	80 91 0c 01 	lds	r24, 0x010C
     654:	30 e0       	ldi	r19, 0x00	; 0
     656:	28 1b       	sub	r18, r24
     658:	31 09       	sbc	r19, r1
     65a:	c9 01       	movw	r24, r18
     65c:	99 23       	and	r25, r25
     65e:	0c f4       	brge	.+2      	; 0x662 <__stack+0x163>
     660:	01 96       	adiw	r24, 0x01	; 1
     662:	95 95       	asr	r25
     664:	87 95       	ror	r24
	meanHor = (calR - calL)/2;
     666:	80 93 08 01 	sts	0x0108, r24
     66a:	90 91 08 01 	lds	r25, 0x0108
     66e:	80 91 09 01 	lds	r24, 0x0109
     672:	1f 92       	push	r1
     674:	9f 93       	push	r25
     676:	1f 92       	push	r1
     678:	8f 93       	push	r24
     67a:	85 e9       	ldi	r24, 0x95	; 149
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	9f 93       	push	r25
     680:	8f 93       	push	r24
     682:	6a d5       	rcall	.+2772   	; 0x1158 <printf>
	
	printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	df 91       	pop	r29
     692:	cf 91       	pop	r28
     694:	08 95       	ret

00000696 <JOY_requestCurrentPosition>:
     696:	88 37       	cpi	r24, 0x78	; 120
     698:	39 f4       	brne	.+14     	; 0x6a8 <JOY_requestCurrentPosition+0x12>
     69a:	60 91 06 01 	lds	r22, 0x0106
     69e:	70 91 07 01 	lds	r23, 0x0107
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	9b c3       	rjmp	.+1846   	; 0xddc <ADC_request>
     6a6:	08 95       	ret
     6a8:	89 37       	cpi	r24, 0x79	; 121
     6aa:	31 f4       	brne	.+12     	; 0x6b8 <JOY_requestCurrentPosition+0x22>
}
     6ac:	60 91 06 01 	lds	r22, 0x0106
     6b0:	70 91 07 01 	lds	r23, 0x0107
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
	{
		ADC_request(Y_channel, adc_ext_ram);
     6b4:	82 e0       	ldi	r24, 0x02	; 2
     6b6:	92 c3       	rjmp	.+1828   	; 0xddc <ADC_request>
     6b8:	08 95       	ret

000006ba <JOY_updatePosition>:
     6ba:	88 37       	cpi	r24, 0x78	; 120
     6bc:	f9 f4       	brne	.+62     	; 0x6fc <JOY_updatePosition+0x42>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     6be:	80 91 06 01 	lds	r24, 0x0106
     6c2:	90 91 07 01 	lds	r25, 0x0107
     6c6:	ae d3       	rcall	.+1884   	; 0xe24 <ADC_read>
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	90 93 9f 02 	sts	0x029F, r25
     6ce:	80 93 9e 02 	sts	0x029E, r24
     6d2:	20 91 08 01 	lds	r18, 0x0108
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     6d6:	60 91 08 01 	lds	r22, 0x0108
     6da:	ac 01       	movw	r20, r24
     6dc:	42 1b       	sub	r20, r18
     6de:	51 09       	sbc	r21, r1
     6e0:	9a 01       	movw	r18, r20
     6e2:	44 e6       	ldi	r20, 0x64	; 100
     6e4:	42 9f       	mul	r20, r18
     6e6:	c0 01       	movw	r24, r0
     6e8:	43 9f       	mul	r20, r19
     6ea:	90 0d       	add	r25, r0
     6ec:	11 24       	eor	r1, r1
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	9b d3       	rcall	.+1846   	; 0xe28 <__divmodhi4>
     6f2:	70 93 a3 02 	sts	0x02A3, r23
     6f6:	60 93 a2 02 	sts	0x02A2, r22
     6fa:	08 95       	ret
     6fc:	89 37       	cpi	r24, 0x79	; 121
     6fe:	f1 f4       	brne	.+60     	; 0x73c <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     700:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     704:	90 91 07 01 	lds	r25, 0x0107
     708:	8d d3       	rcall	.+1818   	; 0xe24 <ADC_read>
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	90 93 a1 02 	sts	0x02A1, r25
     710:	80 93 a0 02 	sts	0x02A0, r24
     714:	20 91 09 01 	lds	r18, 0x0109
     718:	60 91 09 01 	lds	r22, 0x0109
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     71c:	ac 01       	movw	r20, r24
     71e:	42 1b       	sub	r20, r18
     720:	51 09       	sbc	r21, r1
     722:	9a 01       	movw	r18, r20
     724:	44 e6       	ldi	r20, 0x64	; 100
     726:	42 9f       	mul	r20, r18
     728:	c0 01       	movw	r24, r0
     72a:	43 9f       	mul	r20, r19
     72c:	90 0d       	add	r25, r0
     72e:	11 24       	eor	r1, r1
     730:	70 e0       	ldi	r23, 0x00	; 0
     732:	7a d3       	rcall	.+1780   	; 0xe28 <__divmodhi4>
     734:	70 93 a5 02 	sts	0x02A5, r23
     738:	60 93 a4 02 	sts	0x02A4, r22
     73c:	08 95       	ret

0000073e <JOY_calculateDirection>:
     73e:	80 91 a2 02 	lds	r24, 0x02A2
     742:	90 91 a3 02 	lds	r25, 0x02A3
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     746:	8b 35       	cpi	r24, 0x5B	; 91
     748:	91 05       	cpc	r25, r1
     74a:	24 f0       	brlt	.+8      	; 0x754 <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     74c:	83 e0       	ldi	r24, 0x03	; 3
     74e:	80 93 9d 02 	sts	0x029D, r24
     752:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     754:	86 3a       	cpi	r24, 0xA6	; 166
     756:	9f 4f       	sbci	r25, 0xFF	; 255
     758:	24 f4       	brge	.+8      	; 0x762 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     75a:	84 e0       	ldi	r24, 0x04	; 4
     75c:	80 93 9d 02 	sts	0x029D, r24
     760:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     762:	80 91 a4 02 	lds	r24, 0x02A4
     766:	90 91 a5 02 	lds	r25, 0x02A5
     76a:	8b 35       	cpi	r24, 0x5B	; 91
     76c:	91 05       	cpc	r25, r1
     76e:	24 f0       	brlt	.+8      	; 0x778 <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     770:	81 e0       	ldi	r24, 0x01	; 1
     772:	80 93 9d 02 	sts	0x029D, r24
     776:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     778:	86 3a       	cpi	r24, 0xA6	; 166
     77a:	9f 4f       	sbci	r25, 0xFF	; 255
     77c:	24 f4       	brge	.+8      	; 0x786 <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     77e:	82 e0       	ldi	r24, 0x02	; 2
     780:	80 93 9d 02 	sts	0x029D, r24
     784:	08 95       	ret
	else{currentDirection = CENTRE;}
     786:	10 92 9d 02 	sts	0x029D, r1
     78a:	08 95       	ret

0000078c <JOY_getDirection>:

//------------------------------------------------------------------------------
//
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
     78c:	88 e7       	ldi	r24, 0x78	; 120
     78e:	83 df       	rcall	.-250    	; 0x696 <JOY_requestCurrentPosition>
     790:	88 e7       	ldi	r24, 0x78	; 120
	JOY_updatePosition('x');
     792:	93 df       	rcall	.-218    	; 0x6ba <JOY_updatePosition>
     794:	89 e7       	ldi	r24, 0x79	; 121
     796:	7f df       	rcall	.-258    	; 0x696 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     798:	89 e7       	ldi	r24, 0x79	; 121
     79a:	8f df       	rcall	.-226    	; 0x6ba <JOY_updatePosition>
     79c:	d0 df       	rcall	.-96     	; 0x73e <JOY_calculateDirection>
	JOY_updatePosition('y');
     79e:	80 91 9d 02 	lds	r24, 0x029D
     7a2:	08 95       	ret

000007a4 <MENU_addMenuItem>:
		printf("Index %d, currItem: %d, Menu: %d\n",i, &currItem, &menu);
	}
}

void MENU_addMenuItem(char* name, menuItemNode_t *parent, menuItemNode_t* currentMenu)
{
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	00 d0       	rcall	.+0      	; 0x7b2 <MENU_addMenuItem+0xe>
     7b2:	00 d0       	rcall	.+0      	; 0x7b4 <MENU_addMenuItem+0x10>
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
     7b8:	7c 01       	movw	r14, r24
     7ba:	7a 83       	std	Y+2, r23	; 0x02
     7bc:	69 83       	std	Y+1, r22	; 0x01
     7be:	5c 83       	std	Y+4, r21	; 0x04
     7c0:	4b 83       	std	Y+3, r20	; 0x03
	printf("parent: %d, currentMenu: %d\n", &parent, &currentMenu);
     7c2:	9e 01       	movw	r18, r28
     7c4:	2d 5f       	subi	r18, 0xFD	; 253
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
     7c8:	3f 93       	push	r19
     7ca:	2f 93       	push	r18
     7cc:	22 50       	subi	r18, 0x02	; 2
     7ce:	31 09       	sbc	r19, r1
     7d0:	3f 93       	push	r19
     7d2:	2f 93       	push	r18
     7d4:	20 ec       	ldi	r18, 0xC0	; 192
     7d6:	31 e0       	ldi	r19, 0x01	; 1
     7d8:	3f 93       	push	r19
     7da:	2f 93       	push	r18
     7dc:	bd d4       	rcall	.+2426   	; 0x1158 <printf>
     7de:	0f 90       	pop	r0
	if(mainMenu == NULL) //create first item for this menu
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	0f 90       	pop	r0
     7ea:	80 91 9a 02 	lds	r24, 0x029A
     7ee:	90 91 9b 02 	lds	r25, 0x029B
     7f2:	89 2b       	or	r24, r25
     7f4:	89 f4       	brne	.+34     	; 0x818 <MENU_addMenuItem+0x74>
     7f6:	86 e0       	ldi	r24, 0x06	; 6
	{
		currentMenu = malloc(sizeof(menuItemNode_t));
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	3d d3       	rcall	.+1658   	; 0xe76 <malloc>
     7fc:	fc 01       	movw	r30, r24
     7fe:	9c 83       	std	Y+4, r25	; 0x04
     800:	8b 83       	std	Y+3, r24	; 0x03
     802:	f1 82       	std	Z+1, r15	; 0x01
     804:	e0 82       	st	Z, r14
		currentMenu->text = name;
     806:	13 82       	std	Z+3, r1	; 0x03
     808:	12 82       	std	Z+2, r1	; 0x02
		currentMenu->next = NULL;
     80a:	95 83       	std	Z+5, r25	; 0x05
     80c:	84 83       	std	Z+4, r24	; 0x04
		currentMenu->parentMenu = currentMenu;
     80e:	90 93 99 02 	sts	0x0299, r25
		currItem = currentMenu;
     812:	80 93 98 02 	sts	0x0298, r24
     816:	23 c0       	rjmp	.+70     	; 0x85e <MENU_addMenuItem+0xba>
     818:	09 81       	ldd	r16, Y+1	; 0x01
     81a:	1a 81       	ldd	r17, Y+2	; 0x02
	}
	else //next element
	{
		parent->next = malloc(sizeof(menuItemNode_t));
     81c:	86 e0       	ldi	r24, 0x06	; 6
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	2a d3       	rcall	.+1620   	; 0xe76 <malloc>
     822:	d8 01       	movw	r26, r16
     824:	13 96       	adiw	r26, 0x03	; 3
     826:	9c 93       	st	X, r25
     828:	8e 93       	st	-X, r24
     82a:	12 97       	sbiw	r26, 0x02	; 2
     82c:	fc 01       	movw	r30, r24
     82e:	f1 82       	std	Z+1, r15	; 0x01
     830:	e0 82       	st	Z, r14
		parent->next->text = name;
     832:	12 96       	adiw	r26, 0x02	; 2
     834:	ed 91       	ld	r30, X+
     836:	fc 91       	ld	r31, X
		parent->next->next = NULL;
     838:	13 97       	sbiw	r26, 0x03	; 3
     83a:	13 82       	std	Z+3, r1	; 0x03
     83c:	12 82       	std	Z+2, r1	; 0x02
     83e:	12 96       	adiw	r26, 0x02	; 2
     840:	ed 91       	ld	r30, X+
     842:	fc 91       	ld	r31, X
		parent->next->parentMenu = currentMenu;
     844:	13 97       	sbiw	r26, 0x03	; 3
     846:	8b 81       	ldd	r24, Y+3	; 0x03
     848:	9c 81       	ldd	r25, Y+4	; 0x04
     84a:	95 83       	std	Z+5, r25	; 0x05
     84c:	84 83       	std	Z+4, r24	; 0x04
     84e:	12 96       	adiw	r26, 0x02	; 2
     850:	8d 91       	ld	r24, X+
     852:	9c 91       	ld	r25, X
		currItem = parent->next; //now current item (last item) points at the just created item
     854:	13 97       	sbiw	r26, 0x03	; 3
     856:	90 93 99 02 	sts	0x0299, r25
     85a:	80 93 98 02 	sts	0x0298, r24
     85e:	ce 01       	movw	r24, r28
     860:	03 96       	adiw	r24, 0x03	; 3
     862:	9f 93       	push	r25
	}
	printf("After parent: %d, currentMenu: %d\n", &parent, &currentMenu);
     864:	8f 93       	push	r24
     866:	02 97       	sbiw	r24, 0x02	; 2
     868:	9f 93       	push	r25
     86a:	8f 93       	push	r24
     86c:	8a eb       	ldi	r24, 0xBA	; 186
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	9f 93       	push	r25
     872:	8f 93       	push	r24
     874:	71 d4       	rcall	.+2274   	; 0x1158 <printf>
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
}
     88a:	df 91       	pop	r29
     88c:	cf 91       	pop	r28
     88e:	1f 91       	pop	r17
     890:	0f 91       	pop	r16
     892:	ff 90       	pop	r15
     894:	ef 90       	pop	r14
     896:	08 95       	ret

00000898 <MENU_init>:
     898:	6f 92       	push	r6
     89a:	7f 92       	push	r7
     89c:	8f 92       	push	r8
     89e:	9f 92       	push	r9
//******************************************************************************************
char *mainMenuItems[] = {"New Game", "Difficulty", "Highscores", "Joy Calib", "Debugging", "Info"};
char *difficultyMenuItems[] = {"easy", "medium", "hard"};

void MENU_init(menuItemNode_t* menu, char *menuItems[], size_t size)
{
     8a0:	af 92       	push	r10
     8a2:	bf 92       	push	r11
     8a4:	cf 92       	push	r12
     8a6:	df 92       	push	r13
     8a8:	ef 92       	push	r14
     8aa:	ff 92       	push	r15
     8ac:	0f 93       	push	r16
     8ae:	1f 93       	push	r17
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	00 d0       	rcall	.+0      	; 0x8b6 <MENU_init+0x1e>
     8b6:	cd b7       	in	r28, 0x3d	; 61
     8b8:	de b7       	in	r29, 0x3e	; 62
     8ba:	9a 83       	std	Y+2, r25	; 0x02
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	4a 01       	movw	r8, r20
	//create main menu
	for(size_t i = 0; i < size; i++)
     8c0:	41 15       	cp	r20, r1
     8c2:	51 05       	cpc	r21, r1
     8c4:	89 f1       	breq	.+98     	; 0x928 <MENU_init+0x90>
     8c6:	e6 2e       	mov	r14, r22
     8c8:	f7 2e       	mov	r15, r23
     8ca:	00 e0       	ldi	r16, 0x00	; 0
     8cc:	10 e0       	ldi	r17, 0x00	; 0
	{
		MENU_addMenuItem(menuItems[i], currItem, menu);
		printf("Index %d, currItem: %d, Menu: %d\n",i, &currItem, &menu);
     8ce:	ce 01       	movw	r24, r28
     8d0:	01 96       	adiw	r24, 0x01	; 1
     8d2:	5c 01       	movw	r10, r24
     8d4:	0f 2e       	mov	r0, r31
     8d6:	f8 e9       	ldi	r31, 0x98	; 152
     8d8:	cf 2e       	mov	r12, r31
     8da:	f2 e0       	ldi	r31, 0x02	; 2
     8dc:	df 2e       	mov	r13, r31
     8de:	f0 2d       	mov	r31, r0
     8e0:	0f 2e       	mov	r0, r31
     8e2:	fd ed       	ldi	r31, 0xDD	; 221
     8e4:	6f 2e       	mov	r6, r31
     8e6:	f1 e0       	ldi	r31, 0x01	; 1
     8e8:	7f 2e       	mov	r7, r31
     8ea:	f0 2d       	mov	r31, r0
void MENU_init(menuItemNode_t* menu, char *menuItems[], size_t size)
{
	//create main menu
	for(size_t i = 0; i < size; i++)
	{
		MENU_addMenuItem(menuItems[i], currItem, menu);
     8ec:	49 81       	ldd	r20, Y+1	; 0x01
     8ee:	5a 81       	ldd	r21, Y+2	; 0x02
     8f0:	60 91 98 02 	lds	r22, 0x0298
     8f4:	70 91 99 02 	lds	r23, 0x0299
     8f8:	f7 01       	movw	r30, r14
     8fa:	81 91       	ld	r24, Z+
     8fc:	91 91       	ld	r25, Z+
     8fe:	7f 01       	movw	r14, r30
     900:	51 df       	rcall	.-350    	; 0x7a4 <MENU_addMenuItem>
     902:	bf 92       	push	r11
		printf("Index %d, currItem: %d, Menu: %d\n",i, &currItem, &menu);
     904:	af 92       	push	r10
     906:	df 92       	push	r13
     908:	cf 92       	push	r12
     90a:	1f 93       	push	r17
     90c:	0f 93       	push	r16
     90e:	7f 92       	push	r7
     910:	6f 92       	push	r6
     912:	22 d4       	rcall	.+2116   	; 0x1158 <printf>
     914:	0f 5f       	subi	r16, 0xFF	; 255
     916:	1f 4f       	sbci	r17, 0xFF	; 255
char *difficultyMenuItems[] = {"easy", "medium", "hard"};

void MENU_init(menuItemNode_t* menu, char *menuItems[], size_t size)
{
	//create main menu
	for(size_t i = 0; i < size; i++)
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	f8 94       	cli
     91c:	de bf       	out	0x3e, r29	; 62
     91e:	0f be       	out	0x3f, r0	; 63
     920:	cd bf       	out	0x3d, r28	; 61
     922:	08 15       	cp	r16, r8
     924:	19 05       	cpc	r17, r9
     926:	11 f7       	brne	.-60     	; 0x8ec <MENU_init+0x54>
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
	{
		MENU_addMenuItem(menuItems[i], currItem, menu);
		printf("Index %d, currItem: %d, Menu: %d\n",i, &currItem, &menu);
	}
}
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	1f 91       	pop	r17
     932:	0f 91       	pop	r16
     934:	ff 90       	pop	r15
     936:	ef 90       	pop	r14
     938:	df 90       	pop	r13
     93a:	cf 90       	pop	r12
     93c:	bf 90       	pop	r11
     93e:	af 90       	pop	r10
     940:	9f 90       	pop	r9
     942:	8f 90       	pop	r8
     944:	7f 90       	pop	r7
     946:	6f 90       	pop	r6
     948:	08 95       	ret

0000094a <MENU_printMenuItem>:
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
	}
	printf("After parent: %d, currentMenu: %d\n", &parent, &currentMenu);
}

void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
     94e:	ec 01       	movw	r28, r24
     950:	cb 01       	movw	r24, r22
	if(item != NULL)
     952:	20 97       	sbiw	r28, 0x00	; 0
     954:	49 f0       	breq	.+18     	; 0x968 <MENU_printMenuItem+0x1e>
	{
		OLED_goto(lineNumber, menuFrameOffset);
     956:	60 91 1a 01 	lds	r22, 0x011A
     95a:	70 91 1b 01 	lds	r23, 0x011B
     95e:	35 d1       	rcall	.+618    	; 0xbca <OLED_goto>
     960:	88 81       	ld	r24, Y
		OLED_print_string(item->text);
     962:	99 81       	ldd	r25, Y+1	; 0x01
     964:	f5 d1       	rcall	.+1002   	; 0xd50 <OLED_print_string>
     966:	07 c0       	rjmp	.+14     	; 0x976 <MENU_printMenuItem+0x2c>
     968:	8f ef       	ldi	r24, 0xFF	; 255
     96a:	91 e0       	ldi	r25, 0x01	; 1
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
     96c:	9f 93       	push	r25
     96e:	8f 93       	push	r24
     970:	f3 d3       	rcall	.+2022   	; 0x1158 <printf>
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <MENU_printMenu>:
	}
}
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28

void MENU_printMenu(menuItemNode_t* firstItem)
{
     982:	df 93       	push	r29
     984:	ec 01       	movw	r28, r24
	menuItemNode_t *item2print;
	item2print = firstItem;
	int lineNumber = 0;
	while(item2print != NULL)
     986:	00 97       	sbiw	r24, 0x00	; 0
     988:	61 f0       	breq	.+24     	; 0x9a2 <MENU_printMenu+0x26>

void MENU_printMenu(menuItemNode_t* firstItem)
{
	menuItemNode_t *item2print;
	item2print = firstItem;
	int lineNumber = 0;
     98a:	00 e0       	ldi	r16, 0x00	; 0
     98c:	10 e0       	ldi	r17, 0x00	; 0
	while(item2print != NULL)
	{
		MENU_printMenuItem(item2print, lineNumber);
     98e:	b8 01       	movw	r22, r16
     990:	ce 01       	movw	r24, r28
     992:	db df       	rcall	.-74     	; 0x94a <MENU_printMenuItem>
     994:	0a 80       	ldd	r0, Y+2	; 0x02
		item2print = item2print->next;
     996:	db 81       	ldd	r29, Y+3	; 0x03
     998:	c0 2d       	mov	r28, r0
     99a:	0f 5f       	subi	r16, 0xFF	; 255
		lineNumber++;
     99c:	1f 4f       	sbci	r17, 0xFF	; 255
     99e:	20 97       	sbiw	r28, 0x00	; 0
void MENU_printMenu(menuItemNode_t* firstItem)
{
	menuItemNode_t *item2print;
	item2print = firstItem;
	int lineNumber = 0;
	while(item2print != NULL)
     9a0:	b1 f7       	brne	.-20     	; 0x98e <MENU_printMenu+0x12>
     9a2:	df 91       	pop	r29
	{
		MENU_printMenuItem(item2print, lineNumber);
		item2print = item2print->next;
		lineNumber++;
	}
}
     9a4:	cf 91       	pop	r28
     9a6:	1f 91       	pop	r17
     9a8:	0f 91       	pop	r16
     9aa:	08 95       	ret

000009ac <MENU_moveUp>:
     9ac:	80 91 95 02 	lds	r24, 0x0295
	}
}

void MENU_moveUp()
{
	if(currentPosition >0)
     9b0:	90 91 96 02 	lds	r25, 0x0296
     9b4:	18 16       	cp	r1, r24
     9b6:	19 06       	cpc	r1, r25
     9b8:	ac f4       	brge	.+42     	; 0x9e4 <MENU_moveUp+0x38>
	{
		currentPosition = currentPosition - 1;
     9ba:	01 97       	sbiw	r24, 0x01	; 1
     9bc:	90 93 96 02 	sts	0x0296, r25
     9c0:	80 93 95 02 	sts	0x0295, r24
		printf("Curr Pos Up: %d\n", currentPosition);
     9c4:	9f 93       	push	r25
     9c6:	8f 93       	push	r24
     9c8:	8f e0       	ldi	r24, 0x0F	; 15
     9ca:	92 e0       	ldi	r25, 0x02	; 2
     9cc:	9f 93       	push	r25
     9ce:	8f 93       	push	r24
     9d0:	c3 d3       	rcall	.+1926   	; 0x1158 <printf>
     9d2:	80 91 95 02 	lds	r24, 0x0295
		OLED_move_arrow(currentPosition);
     9d6:	90 91 96 02 	lds	r25, 0x0296
     9da:	93 d1       	rcall	.+806    	; 0xd02 <OLED_move_arrow>
     9dc:	0f 90       	pop	r0
     9de:	0f 90       	pop	r0
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	08 95       	ret

000009e6 <MENU_moveDown>:
     9e6:	80 91 95 02 	lds	r24, 0x0295
	}
}

void MENU_moveDown()
{
	if(currentPosition < MAX_MENU_SIZE -1)
     9ea:	90 91 96 02 	lds	r25, 0x0296
     9ee:	87 30       	cpi	r24, 0x07	; 7
     9f0:	91 05       	cpc	r25, r1
     9f2:	ac f4       	brge	.+42     	; 0xa1e <MENU_moveDown+0x38>
	{
		currentPosition = currentPosition + 1;
     9f4:	01 96       	adiw	r24, 0x01	; 1
     9f6:	90 93 96 02 	sts	0x0296, r25
     9fa:	80 93 95 02 	sts	0x0295, r24
		printf("Curr Pos Down: %d\n", currentPosition);
     9fe:	9f 93       	push	r25
     a00:	8f 93       	push	r24
     a02:	80 e2       	ldi	r24, 0x20	; 32
     a04:	92 e0       	ldi	r25, 0x02	; 2
     a06:	9f 93       	push	r25
     a08:	8f 93       	push	r24
     a0a:	a6 d3       	rcall	.+1868   	; 0x1158 <printf>
     a0c:	80 91 95 02 	lds	r24, 0x0295
		OLED_move_arrow(currentPosition);
     a10:	90 91 96 02 	lds	r25, 0x0296
     a14:	76 d1       	rcall	.+748    	; 0xd02 <OLED_move_arrow>
     a16:	0f 90       	pop	r0
     a18:	0f 90       	pop	r0
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
     a1e:	08 95       	ret

00000a20 <MENU_moveRight>:
     a20:	80 91 9a 02 	lds	r24, 0x029A
}

void MENU_moveRight()
{
	//MENU_init(mainMenu, mainMenuItems);
	MENU_printMenu(mainMenu);
     a24:	90 91 9b 02 	lds	r25, 0x029B
     a28:	a9 cf       	rjmp	.-174    	; 0x97c <MENU_printMenu>
     a2a:	08 95       	ret

00000a2c <MENU_moveLeft>:
     a2c:	10 92 96 02 	sts	0x0296, r1
}

void MENU_moveLeft()
{
	currentPosition = 0;
     a30:	10 92 95 02 	sts	0x0295, r1
	//MENU_init(mainMenu, mainMenuItems);
	MENU_printMenu(currItem->parentMenu);
     a34:	e0 91 98 02 	lds	r30, 0x0298
     a38:	f0 91 99 02 	lds	r31, 0x0299
     a3c:	84 81       	ldd	r24, Z+4	; 0x04
     a3e:	95 81       	ldd	r25, Z+5	; 0x05
     a40:	9d cf       	rjmp	.-198    	; 0x97c <MENU_printMenu>
     a42:	08 95       	ret

00000a44 <MENU_waitForInput>:
     a44:	80 91 95 02 	lds	r24, 0x0295
	}
}

void MENU_waitForInput()
{
	OLED_move_arrow(currentPosition);
     a48:	90 91 96 02 	lds	r25, 0x0296
     a4c:	5a d1       	rcall	.+692    	; 0xd02 <OLED_move_arrow>
     a4e:	80 91 97 02 	lds	r24, 0x0297
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
     a52:	88 23       	and	r24, r24
     a54:	11 f1       	breq	.+68     	; 0xa9a <MENU_waitForInput+0x56>
     a56:	9a de       	rcall	.-716    	; 0x78c <JOY_getDirection>
	{
		currDir = JOY_getDirection();
     a58:	99 27       	eor	r25, r25
     a5a:	82 30       	cpi	r24, 0x02	; 2
		switch(currDir){
     a5c:	91 05       	cpc	r25, r1
     a5e:	79 f0       	breq	.+30     	; 0xa7e <MENU_waitForInput+0x3a>
     a60:	1c f4       	brge	.+6      	; 0xa68 <MENU_waitForInput+0x24>
     a62:	01 97       	sbiw	r24, 0x01	; 1
     a64:	51 f0       	breq	.+20     	; 0xa7a <MENU_waitForInput+0x36>
     a66:	0c c0       	rjmp	.+24     	; 0xa80 <MENU_waitForInput+0x3c>
     a68:	83 30       	cpi	r24, 0x03	; 3
     a6a:	91 05       	cpc	r25, r1
     a6c:	21 f0       	breq	.+8      	; 0xa76 <MENU_waitForInput+0x32>
     a6e:	04 97       	sbiw	r24, 0x04	; 4
     a70:	39 f4       	brne	.+14     	; 0xa80 <MENU_waitForInput+0x3c>
     a72:	dc df       	rcall	.-72     	; 0xa2c <MENU_moveLeft>
     a74:	05 c0       	rjmp	.+10     	; 0xa80 <MENU_waitForInput+0x3c>
			case LEFT:
			MENU_moveLeft();
     a76:	d4 df       	rcall	.-88     	; 0xa20 <MENU_moveRight>
     a78:	03 c0       	rjmp	.+6      	; 0xa80 <MENU_waitForInput+0x3c>
			break;
     a7a:	98 df       	rcall	.-208    	; 0x9ac <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
     a7c:	01 c0       	rjmp	.+2      	; 0xa80 <MENU_waitForInput+0x3c>
     a7e:	b3 df       	rcall	.-154    	; 0x9e6 <MENU_moveDown>
			break;
     a80:	2f e7       	ldi	r18, 0x7F	; 127
			
			case UP:
			MENU_moveUp();
     a82:	89 ea       	ldi	r24, 0xA9	; 169
     a84:	93 e0       	ldi	r25, 0x03	; 3
			break;
     a86:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
     a88:	80 40       	sbci	r24, 0x00	; 0
     a8a:	90 40       	sbci	r25, 0x00	; 0
     a8c:	e1 f7       	brne	.-8      	; 0xa86 <MENU_waitForInput+0x42>
     a8e:	00 c0       	rjmp	.+0      	; 0xa90 <MENU_waitForInput+0x4c>
     a90:	00 00       	nop
     a92:	80 91 97 02 	lds	r24, 0x0297
     a96:	81 11       	cpse	r24, r1
     a98:	de cf       	rjmp	.-68     	; 0xa56 <MENU_waitForInput+0x12>
     a9a:	08 95       	ret

00000a9c <MENU_activate>:
     a9c:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_move_arrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
     a9e:	80 93 97 02 	sts	0x0297, r24
     aa2:	46 e0       	ldi	r20, 0x06	; 6
     aa4:	50 e0       	ldi	r21, 0x00	; 0
     aa6:	6e e0       	ldi	r22, 0x0E	; 14

void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_init(mainMenu, mainMenuItems, sizeof(mainMenuItems)/sizeof(char*));
     aa8:	71 e0       	ldi	r23, 0x01	; 1
     aaa:	80 91 9a 02 	lds	r24, 0x029A
     aae:	90 91 9b 02 	lds	r25, 0x029B
     ab2:	f2 de       	rcall	.-540    	; 0x898 <MENU_init>
     ab4:	80 91 9a 02 	lds	r24, 0x029A
	MENU_printMenu(mainMenu);
     ab8:	90 91 9b 02 	lds	r25, 0x029B
     abc:	5f df       	rcall	.-322    	; 0x97c <MENU_printMenu>
     abe:	c2 cf       	rjmp	.-124    	; 0xa44 <MENU_waitForInput>
     ac0:	08 95       	ret

00000ac2 <OLED_init>:
int width = 128;		//screen width (128 columns)
int arrow_width = 5;	//depends on the arrow size

void OLED_init()
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
     ac2:	e0 91 24 01 	lds	r30, 0x0124
     ac6:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     aca:	8e ea       	ldi	r24, 0xAE	; 174
     acc:	80 83       	st	Z, r24
int arrow_width = 5;	//depends on the arrow size

void OLED_init()
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
     ace:	e0 91 24 01 	lds	r30, 0x0124
     ad2:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ad6:	81 ea       	ldi	r24, 0xA1	; 161
     ad8:	80 83       	st	Z, r24

void OLED_init()
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
     ada:	e0 91 24 01 	lds	r30, 0x0124
     ade:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ae2:	8a ed       	ldi	r24, 0xDA	; 218
     ae4:	80 83       	st	Z, r24
void OLED_init()
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
     ae6:	e0 91 24 01 	lds	r30, 0x0124
     aea:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     aee:	82 e1       	ldi	r24, 0x12	; 18
     af0:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
     af2:	e0 91 24 01 	lds	r30, 0x0124
     af6:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     afa:	88 ec       	ldi	r24, 0xC8	; 200
     afc:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
     afe:	e0 91 24 01 	lds	r30, 0x0124
     b02:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b06:	88 ea       	ldi	r24, 0xA8	; 168
     b08:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
     b0a:	e0 91 24 01 	lds	r30, 0x0124
     b0e:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b12:	8f e3       	ldi	r24, 0x3F	; 63
     b14:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
     b16:	e0 91 24 01 	lds	r30, 0x0124
     b1a:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b1e:	85 ed       	ldi	r24, 0xD5	; 213
     b20:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
     b22:	e0 91 24 01 	lds	r30, 0x0124
     b26:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b2a:	80 e8       	ldi	r24, 0x80	; 128
     b2c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
     b2e:	e0 91 24 01 	lds	r30, 0x0124
     b32:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b36:	81 e8       	ldi	r24, 0x81	; 129
     b38:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
     b3a:	e0 91 24 01 	lds	r30, 0x0124
     b3e:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b42:	80 e5       	ldi	r24, 0x50	; 80
     b44:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
     b46:	e0 91 24 01 	lds	r30, 0x0124
     b4a:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b4e:	89 ed       	ldi	r24, 0xD9	; 217
     b50:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
     b52:	e0 91 24 01 	lds	r30, 0x0124
     b56:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b5a:	81 e2       	ldi	r24, 0x21	; 33
     b5c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
     b5e:	e0 91 24 01 	lds	r30, 0x0124
     b62:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b66:	80 e2       	ldi	r24, 0x20	; 32
     b68:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
     b6a:	e0 91 24 01 	lds	r30, 0x0124
     b6e:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
     b76:	e0 91 24 01 	lds	r30, 0x0124
     b7a:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b7e:	8b ed       	ldi	r24, 0xDB	; 219
     b80:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
     b82:	e0 91 24 01 	lds	r30, 0x0124
     b86:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b8a:	80 e3       	ldi	r24, 0x30	; 48
     b8c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
     b8e:	e0 91 24 01 	lds	r30, 0x0124
     b92:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b96:	8d ea       	ldi	r24, 0xAD	; 173
     b98:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
     b9a:	e0 91 24 01 	lds	r30, 0x0124
     b9e:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ba2:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
     ba4:	e0 91 24 01 	lds	r30, 0x0124
     ba8:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     bac:	84 ea       	ldi	r24, 0xA4	; 164
     bae:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
     bb0:	e0 91 24 01 	lds	r30, 0x0124
     bb4:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     bb8:	86 ea       	ldi	r24, 0xA6	; 166
     bba:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
     bbc:	e0 91 24 01 	lds	r30, 0x0124
     bc0:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     bc4:	8f ea       	ldi	r24, 0xAF	; 175
     bc6:	80 83       	st	Z, r24
     bc8:	08 95       	ret

00000bca <OLED_goto>:
	// row:
	row = 0xb0 + row;

	// column:
	// lower nibble
	lnib = 0x0f & column;
     bca:	26 2f       	mov	r18, r22
     bcc:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib;

	// higher nibble
	hnib = column >> 4;
     bce:	75 95       	asr	r23
     bd0:	67 95       	ror	r22
     bd2:	75 95       	asr	r23
     bd4:	67 95       	ror	r22
     bd6:	75 95       	asr	r23
     bd8:	67 95       	ror	r22
     bda:	75 95       	asr	r23
     bdc:	67 95       	ror	r22
	hnib = 0x10 + hnib;
     bde:	60 5f       	subi	r22, 0xF0	; 240
	//column should be 16 - 127
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row:
	row = 0xb0 + row;
     be0:	80 55       	subi	r24, 0x50	; 80
     be2:	9f 4f       	sbci	r25, 0xFF	; 255
	hnib = 0x10 + hnib;

	//printf("row: %#x,\thnib: %#x,\tlnib: %#x \n", row, hnib, lnib);

	// get to page
	OLED_writeByteToOLED(oled_cmd, row);
     be4:	e0 91 24 01 	lds	r30, 0x0124
     be8:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     bec:	80 83       	st	Z, r24

	//printf("row: %#x,\thnib: %#x,\tlnib: %#x \n", row, hnib, lnib);

	// get to page
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
     bee:	e0 91 24 01 	lds	r30, 0x0124
     bf2:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     bf6:	20 83       	st	Z, r18
	//printf("row: %#x,\thnib: %#x,\tlnib: %#x \n", row, hnib, lnib);

	// get to page
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
     bf8:	e0 91 24 01 	lds	r30, 0x0124
     bfc:	f0 91 25 01 	lds	r31, 0x0125
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     c00:	60 83       	st	Z, r22
     c02:	08 95       	ret

00000c04 <OLED_clear>:
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
}

void OLED_clear()
{
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
	int count_row;
	int count_column;	

	for(count_row = 0; count_row < height; count_row++)
     c08:	80 91 20 01 	lds	r24, 0x0120
     c0c:	90 91 21 01 	lds	r25, 0x0121
     c10:	18 16       	cp	r1, r24
     c12:	19 06       	cpc	r1, r25
     c14:	2c f5       	brge	.+74     	; 0xc60 <OLED_clear+0x5c>
     c16:	c0 e0       	ldi	r28, 0x00	; 0
     c18:	d0 e0       	ldi	r29, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row,0);
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	ce 01       	movw	r24, r28
     c20:	d4 df       	rcall	.-88     	; 0xbca <OLED_goto>
     c22:	80 91 1e 01 	lds	r24, 0x011E

		for(count_column = 0; count_column < width; count_column++)
     c26:	90 91 1f 01 	lds	r25, 0x011F
     c2a:	18 16       	cp	r1, r24
     c2c:	19 06       	cpc	r1, r25
     c2e:	84 f4       	brge	.+32     	; 0xc50 <OLED_clear+0x4c>
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	e0 91 22 01 	lds	r30, 0x0122
		{
			OLED_writeByteToOLED(oled_data, 0x00);
     c38:	f0 91 23 01 	lds	r31, 0x0123
     c3c:	10 82       	st	Z, r1
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     c3e:	2f 5f       	subi	r18, 0xFF	; 255
	for(count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row,0);

		for(count_column = 0; count_column < width; count_column++)
     c40:	3f 4f       	sbci	r19, 0xFF	; 255
     c42:	40 91 1e 01 	lds	r20, 0x011E
     c46:	50 91 1f 01 	lds	r21, 0x011F
     c4a:	24 17       	cp	r18, r20
     c4c:	35 07       	cpc	r19, r21
     c4e:	94 f3       	brlt	.-28     	; 0xc34 <OLED_clear+0x30>
     c50:	21 96       	adiw	r28, 0x01	; 1
void OLED_clear()
{
	int count_row;
	int count_column;	

	for(count_row = 0; count_row < height; count_row++)
     c52:	80 91 20 01 	lds	r24, 0x0120
     c56:	90 91 21 01 	lds	r25, 0x0121
     c5a:	c8 17       	cp	r28, r24
     c5c:	d9 07       	cpc	r29, r25
     c5e:	ec f2       	brlt	.-70     	; 0xc1a <OLED_clear+0x16>
     c60:	df 91       	pop	r29
		for(count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
     c62:	cf 91       	pop	r28
     c64:	08 95       	ret

00000c66 <OLED_clear_arrow>:
     c66:	cf 93       	push	r28
	OLED_writeByteToOLED(oled_cmd, hnib);
	
}

void OLED_clear_arrow()
{
     c68:	df 93       	push	r29
	int count_row;
	int count_column;

	for(count_row = 0; count_row < height; count_row++)
     c6a:	80 91 20 01 	lds	r24, 0x0120
     c6e:	90 91 21 01 	lds	r25, 0x0121
     c72:	18 16       	cp	r1, r24
     c74:	19 06       	cpc	r1, r25
     c76:	2c f5       	brge	.+74     	; 0xcc2 <OLED_clear_arrow+0x5c>
     c78:	c0 e0       	ldi	r28, 0x00	; 0
     c7a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row,0);
     c7c:	60 e0       	ldi	r22, 0x00	; 0
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	ce 01       	movw	r24, r28
     c82:	a3 df       	rcall	.-186    	; 0xbca <OLED_goto>
     c84:	80 91 1c 01 	lds	r24, 0x011C

		for(count_column = 0; count_column < arrow_width; count_column++)
     c88:	90 91 1d 01 	lds	r25, 0x011D
     c8c:	18 16       	cp	r1, r24
     c8e:	19 06       	cpc	r1, r25
     c90:	84 f4       	brge	.+32     	; 0xcb2 <OLED_clear_arrow+0x4c>
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	e0 91 22 01 	lds	r30, 0x0122
		{
			OLED_writeByteToOLED(oled_data, 0x00);
     c9a:	f0 91 23 01 	lds	r31, 0x0123
     c9e:	10 82       	st	Z, r1
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ca0:	2f 5f       	subi	r18, 0xFF	; 255
	for(count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row,0);

		for(count_column = 0; count_column < arrow_width; count_column++)
     ca2:	3f 4f       	sbci	r19, 0xFF	; 255
     ca4:	40 91 1c 01 	lds	r20, 0x011C
     ca8:	50 91 1d 01 	lds	r21, 0x011D
     cac:	24 17       	cp	r18, r20
     cae:	35 07       	cpc	r19, r21
     cb0:	94 f3       	brlt	.-28     	; 0xc96 <OLED_clear_arrow+0x30>
     cb2:	21 96       	adiw	r28, 0x01	; 1
void OLED_clear_arrow()
{
	int count_row;
	int count_column;

	for(count_row = 0; count_row < height; count_row++)
     cb4:	80 91 20 01 	lds	r24, 0x0120
     cb8:	90 91 21 01 	lds	r25, 0x0121
     cbc:	c8 17       	cp	r28, r24
     cbe:	d9 07       	cpc	r29, r25
     cc0:	ec f2       	brlt	.-70     	; 0xc7c <OLED_clear_arrow+0x16>
     cc2:	df 91       	pop	r29
		for(count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
     cc4:	cf 91       	pop	r28
     cc6:	08 95       	ret

00000cc8 <OLED_print_arrow>:
     cc8:	e0 91 22 01 	lds	r30, 0x0122


void OLED_print_arrow()
{
	//change the arrow_width as changing the size here 
	OLED_writeByteToOLED(oled_data, 0b00011000);
     ccc:	f0 91 23 01 	lds	r31, 0x0123
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     cd0:	88 e1       	ldi	r24, 0x18	; 24
     cd2:	80 83       	st	Z, r24

void OLED_print_arrow()
{
	//change the arrow_width as changing the size here 
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
     cd4:	e0 91 22 01 	lds	r30, 0x0122
     cd8:	f0 91 23 01 	lds	r31, 0x0123
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     cdc:	80 83       	st	Z, r24
void OLED_print_arrow()
{
	//change the arrow_width as changing the size here 
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
     cde:	e0 91 22 01 	lds	r30, 0x0122
     ce2:	f0 91 23 01 	lds	r31, 0x0123
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ce6:	9e e7       	ldi	r25, 0x7E	; 126
     ce8:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here 
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
     cea:	e0 91 22 01 	lds	r30, 0x0122
     cee:	f0 91 23 01 	lds	r31, 0x0123
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     cf2:	9c e3       	ldi	r25, 0x3C	; 60
     cf4:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here 
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
     cf6:	e0 91 22 01 	lds	r30, 0x0122
     cfa:	f0 91 23 01 	lds	r31, 0x0123
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     cfe:	80 83       	st	Z, r24
     d00:	08 95       	ret

00000d02 <OLED_move_arrow>:
		}
	}
}

void OLED_move_arrow(int joy_counter)
{
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	ec 01       	movw	r28, r24
	OLED_clear_arrow();
     d08:	ae df       	rcall	.-164    	; 0xc66 <OLED_clear_arrow>
     d0a:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0);
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	ce 01       	movw	r24, r28
     d10:	5c df       	rcall	.-328    	; 0xbca <OLED_goto>
     d12:	da df       	rcall	.-76     	; 0xcc8 <OLED_print_arrow>
     d14:	df 91       	pop	r29
	OLED_print_arrow();
     d16:	cf 91       	pop	r28
     d18:	08 95       	ret

00000d1a <OLED_print_character>:
}
     d1a:	80 52       	subi	r24, 0x20	; 32
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
}

void OLED_print_character(uint8_t character)
{
	// subtract 32 from character ASCII-code to match SPACE to the first entry of the font array
	character = character-32;
     d20:	22 0f       	add	r18, r18
     d22:	33 1f       	adc	r19, r19
     d24:	22 0f       	add	r18, r18
     d26:	33 1f       	adc	r19, r19
     d28:	22 0f       	add	r18, r18
     d2a:	33 1f       	adc	r19, r19
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	20 59       	subi	r18, 0x90	; 144
     d32:	3f 4f       	sbci	r19, 0xFF	; 255
     d34:	f9 01       	movw	r30, r18
     d36:	e8 0f       	add	r30, r24
     d38:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
     d3a:	e4 91       	lpm	r30, Z
     d3c:	a0 91 22 01 	lds	r26, 0x0122
     d40:	b0 91 23 01 	lds	r27, 0x0123
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     d44:	ec 93       	st	X, r30
     d46:	01 96       	adiw	r24, 0x01	; 1
{
	// subtract 32 from character ASCII-code to match SPACE to the first entry of the font array
	character = character-32;
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
     d48:	88 30       	cpi	r24, 0x08	; 8
     d4a:	91 05       	cpc	r25, r1
     d4c:	99 f7       	brne	.-26     	; 0xd34 <OLED_print_character+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
     d4e:	08 95       	ret

00000d50 <OLED_print_string>:

void OLED_print_string(char* msg)
{
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
     d58:	10 e0       	ldi	r17, 0x00	; 0
     d5a:	06 c0       	rjmp	.+12     	; 0xd68 <OLED_print_string+0x18>
	{
		OLED_print_character(msg[i]);
     d5c:	fe 01       	movw	r30, r28
     d5e:	e8 0f       	add	r30, r24
     d60:	f9 1f       	adc	r31, r25
     d62:	80 81       	ld	r24, Z
     d64:	da df       	rcall	.-76     	; 0xd1a <OLED_print_character>
     d66:	1f 5f       	subi	r17, 0xFF	; 255
	}
}

void OLED_print_string(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
     d68:	81 2f       	mov	r24, r17
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	fe 01       	movw	r30, r28
     d6e:	01 90       	ld	r0, Z+
     d70:	00 20       	and	r0, r0
     d72:	e9 f7       	brne	.-6      	; 0xd6e <OLED_print_string+0x1e>
     d74:	31 97       	sbiw	r30, 0x01	; 1
     d76:	ec 1b       	sub	r30, r28
     d78:	fd 0b       	sbc	r31, r29
     d7a:	8e 17       	cp	r24, r30
     d7c:	9f 07       	cpc	r25, r31
     d7e:	70 f3       	brcs	.-36     	; 0xd5c <OLED_print_string+0xc>
     d80:	df 91       	pop	r29
	{
		OLED_print_character(msg[i]);
	}
}
     d82:	cf 91       	pop	r28
     d84:	1f 91       	pop	r17
     d86:	08 95       	ret

00000d88 <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
     d88:	10 92 a6 02 	sts	0x02A6, r1
	currentSliPosition.L_abs = 0;
     d8c:	10 92 a7 02 	sts	0x02A7, r1
	currentSliPosition.R_per = 0;
     d90:	10 92 a8 02 	sts	0x02A8, r1
	currentSliPosition.L_per = 0;
     d94:	10 92 a9 02 	sts	0x02A9, r1
     d98:	08 95       	ret

00000d9a <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     d9a:	5d 9b       	sbis	0x0b, 5	; 11
     d9c:	fe cf       	rjmp	.-4      	; 0xd9a <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
     d9e:	8c b9       	out	0x0c, r24	; 12
     da0:	08 95       	ret

00000da2 <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
     da2:	5f 9b       	sbis	0x0b, 7	; 11
     da4:	fe cf       	rjmp	.-4      	; 0xda2 <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
     da6:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
     da8:	08 95       	ret

00000daa <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
     daa:	ef 92       	push	r14
     dac:	ff 92       	push	r15
     dae:	0f 93       	push	r16
     db0:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
     db2:	bb 27       	eor	r27, r27
     db4:	a1 2f       	mov	r26, r17
     db6:	90 2f       	mov	r25, r16
     db8:	8f 2d       	mov	r24, r15
     dba:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
     dbc:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     dbe:	88 e1       	ldi	r24, 0x18	; 24
     dc0:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
     dc2:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     dc4:	8e e8       	ldi	r24, 0x8E	; 142
     dc6:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
     dc8:	61 ed       	ldi	r22, 0xD1	; 209
     dca:	76 e0       	ldi	r23, 0x06	; 6
     dcc:	8d ec       	ldi	r24, 0xCD	; 205
     dce:	96 e0       	ldi	r25, 0x06	; 6
     dd0:	79 d1       	rcall	.+754    	; 0x10c4 <fdevopen>
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	ff 90       	pop	r15
     dd8:	ef 90       	pop	r14
     dda:	08 95       	ret

00000ddc <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
     ddc:	9b 01       	movw	r18, r22
	
	switch(channel){
     dde:	82 30       	cpi	r24, 0x02	; 2
     de0:	69 f0       	breq	.+26     	; 0xdfc <ADC_request+0x20>
     de2:	18 f4       	brcc	.+6      	; 0xdea <ADC_request+0xe>
     de4:	81 30       	cpi	r24, 0x01	; 1
     de6:	31 f0       	breq	.+12     	; 0xdf4 <ADC_request+0x18>
     de8:	15 c0       	rjmp	.+42     	; 0xe14 <ADC_request+0x38>
     dea:	83 30       	cpi	r24, 0x03	; 3
     dec:	59 f0       	breq	.+22     	; 0xe04 <ADC_request+0x28>
     dee:	84 30       	cpi	r24, 0x04	; 4
     df0:	69 f0       	breq	.+26     	; 0xe0c <ADC_request+0x30>
     df2:	10 c0       	rjmp	.+32     	; 0xe14 <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
     df4:	64 e0       	ldi	r22, 0x04	; 4
     df6:	c9 01       	movw	r24, r18
     df8:	4c cb       	rjmp	.-2408   	; 0x492 <saveToAddress>
     dfa:	08 95       	ret
			break;
     dfc:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
     dfe:	c9 01       	movw	r24, r18
     e00:	48 cb       	rjmp	.-2416   	; 0x492 <saveToAddress>
     e02:	08 95       	ret
     e04:	66 e0       	ldi	r22, 0x06	; 6
			break;
     e06:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
     e08:	44 cb       	rjmp	.-2424   	; 0x492 <saveToAddress>
     e0a:	08 95       	ret
     e0c:	67 e0       	ldi	r22, 0x07	; 7
     e0e:	c9 01       	movw	r24, r18
			break;
     e10:	40 cb       	rjmp	.-2432   	; 0x492 <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
     e12:	08 95       	ret
     e14:	8c e7       	ldi	r24, 0x7C	; 124
     e16:	92 e0       	ldi	r25, 0x02	; 2
     e18:	9f 93       	push	r25
			break;
     e1a:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
     e1c:	9d d1       	rcall	.+826    	; 0x1158 <printf>
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	08 95       	ret

00000e24 <ADC_read>:
     e24:	33 cb       	rjmp	.-2458   	; 0x48c <readFromAddress>
     e26:	08 95       	ret

00000e28 <__divmodhi4>:
			break;
     e28:	97 fb       	bst	r25, 7
     e2a:	07 2e       	mov	r0, r23
     e2c:	16 f4       	brtc	.+4      	; 0xe32 <__divmodhi4+0xa>
     e2e:	00 94       	com	r0
     e30:	06 d0       	rcall	.+12     	; 0xe3e <__divmodhi4_neg1>
     e32:	77 fd       	sbrc	r23, 7
     e34:	08 d0       	rcall	.+16     	; 0xe46 <__divmodhi4_neg2>
     e36:	0b d0       	rcall	.+22     	; 0xe4e <__udivmodhi4>
     e38:	07 fc       	sbrc	r0, 7
     e3a:	05 d0       	rcall	.+10     	; 0xe46 <__divmodhi4_neg2>
     e3c:	3e f4       	brtc	.+14     	; 0xe4c <__divmodhi4_exit>

00000e3e <__divmodhi4_neg1>:
     e3e:	90 95       	com	r25
     e40:	81 95       	neg	r24
     e42:	9f 4f       	sbci	r25, 0xFF	; 255
     e44:	08 95       	ret

00000e46 <__divmodhi4_neg2>:
     e46:	70 95       	com	r23
     e48:	61 95       	neg	r22
     e4a:	7f 4f       	sbci	r23, 0xFF	; 255

00000e4c <__divmodhi4_exit>:
     e4c:	08 95       	ret

00000e4e <__udivmodhi4>:
     e4e:	aa 1b       	sub	r26, r26
     e50:	bb 1b       	sub	r27, r27
     e52:	51 e1       	ldi	r21, 0x11	; 17
     e54:	07 c0       	rjmp	.+14     	; 0xe64 <__udivmodhi4_ep>

00000e56 <__udivmodhi4_loop>:
     e56:	aa 1f       	adc	r26, r26
     e58:	bb 1f       	adc	r27, r27
     e5a:	a6 17       	cp	r26, r22
     e5c:	b7 07       	cpc	r27, r23
     e5e:	10 f0       	brcs	.+4      	; 0xe64 <__udivmodhi4_ep>
     e60:	a6 1b       	sub	r26, r22
     e62:	b7 0b       	sbc	r27, r23

00000e64 <__udivmodhi4_ep>:
     e64:	88 1f       	adc	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	5a 95       	dec	r21
     e6a:	a9 f7       	brne	.-22     	; 0xe56 <__udivmodhi4_loop>
     e6c:	80 95       	com	r24
     e6e:	90 95       	com	r25
     e70:	bc 01       	movw	r22, r24
     e72:	cd 01       	movw	r24, r26
     e74:	08 95       	ret

00000e76 <malloc>:
     e76:	cf 93       	push	r28
     e78:	df 93       	push	r29
     e7a:	82 30       	cpi	r24, 0x02	; 2
     e7c:	91 05       	cpc	r25, r1
     e7e:	10 f4       	brcc	.+4      	; 0xe84 <malloc+0xe>
     e80:	82 e0       	ldi	r24, 0x02	; 2
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	e0 91 ac 02 	lds	r30, 0x02AC
     e88:	f0 91 ad 02 	lds	r31, 0x02AD
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	a0 e0       	ldi	r26, 0x00	; 0
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	30 97       	sbiw	r30, 0x00	; 0
     e96:	39 f1       	breq	.+78     	; 0xee6 <malloc+0x70>
     e98:	40 81       	ld	r20, Z
     e9a:	51 81       	ldd	r21, Z+1	; 0x01
     e9c:	48 17       	cp	r20, r24
     e9e:	59 07       	cpc	r21, r25
     ea0:	b8 f0       	brcs	.+46     	; 0xed0 <malloc+0x5a>
     ea2:	48 17       	cp	r20, r24
     ea4:	59 07       	cpc	r21, r25
     ea6:	71 f4       	brne	.+28     	; 0xec4 <malloc+0x4e>
     ea8:	82 81       	ldd	r24, Z+2	; 0x02
     eaa:	93 81       	ldd	r25, Z+3	; 0x03
     eac:	10 97       	sbiw	r26, 0x00	; 0
     eae:	29 f0       	breq	.+10     	; 0xeba <malloc+0x44>
     eb0:	13 96       	adiw	r26, 0x03	; 3
     eb2:	9c 93       	st	X, r25
     eb4:	8e 93       	st	-X, r24
     eb6:	12 97       	sbiw	r26, 0x02	; 2
     eb8:	2c c0       	rjmp	.+88     	; 0xf12 <malloc+0x9c>
     eba:	90 93 ad 02 	sts	0x02AD, r25
     ebe:	80 93 ac 02 	sts	0x02AC, r24
     ec2:	27 c0       	rjmp	.+78     	; 0xf12 <malloc+0x9c>
     ec4:	21 15       	cp	r18, r1
     ec6:	31 05       	cpc	r19, r1
     ec8:	31 f0       	breq	.+12     	; 0xed6 <malloc+0x60>
     eca:	42 17       	cp	r20, r18
     ecc:	53 07       	cpc	r21, r19
     ece:	18 f0       	brcs	.+6      	; 0xed6 <malloc+0x60>
     ed0:	a9 01       	movw	r20, r18
     ed2:	db 01       	movw	r26, r22
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <malloc+0x62>
     ed6:	ef 01       	movw	r28, r30
     ed8:	9a 01       	movw	r18, r20
     eda:	bd 01       	movw	r22, r26
     edc:	df 01       	movw	r26, r30
     ede:	02 80       	ldd	r0, Z+2	; 0x02
     ee0:	f3 81       	ldd	r31, Z+3	; 0x03
     ee2:	e0 2d       	mov	r30, r0
     ee4:	d7 cf       	rjmp	.-82     	; 0xe94 <malloc+0x1e>
     ee6:	21 15       	cp	r18, r1
     ee8:	31 05       	cpc	r19, r1
     eea:	f9 f0       	breq	.+62     	; 0xf2a <malloc+0xb4>
     eec:	28 1b       	sub	r18, r24
     eee:	39 0b       	sbc	r19, r25
     ef0:	24 30       	cpi	r18, 0x04	; 4
     ef2:	31 05       	cpc	r19, r1
     ef4:	80 f4       	brcc	.+32     	; 0xf16 <malloc+0xa0>
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	9b 81       	ldd	r25, Y+3	; 0x03
     efa:	61 15       	cp	r22, r1
     efc:	71 05       	cpc	r23, r1
     efe:	21 f0       	breq	.+8      	; 0xf08 <malloc+0x92>
     f00:	fb 01       	movw	r30, r22
     f02:	93 83       	std	Z+3, r25	; 0x03
     f04:	82 83       	std	Z+2, r24	; 0x02
     f06:	04 c0       	rjmp	.+8      	; 0xf10 <malloc+0x9a>
     f08:	90 93 ad 02 	sts	0x02AD, r25
     f0c:	80 93 ac 02 	sts	0x02AC, r24
     f10:	fe 01       	movw	r30, r28
     f12:	32 96       	adiw	r30, 0x02	; 2
     f14:	44 c0       	rjmp	.+136    	; 0xf9e <malloc+0x128>
     f16:	fe 01       	movw	r30, r28
     f18:	e2 0f       	add	r30, r18
     f1a:	f3 1f       	adc	r31, r19
     f1c:	81 93       	st	Z+, r24
     f1e:	91 93       	st	Z+, r25
     f20:	22 50       	subi	r18, 0x02	; 2
     f22:	31 09       	sbc	r19, r1
     f24:	39 83       	std	Y+1, r19	; 0x01
     f26:	28 83       	st	Y, r18
     f28:	3a c0       	rjmp	.+116    	; 0xf9e <malloc+0x128>
     f2a:	20 91 aa 02 	lds	r18, 0x02AA
     f2e:	30 91 ab 02 	lds	r19, 0x02AB
     f32:	23 2b       	or	r18, r19
     f34:	41 f4       	brne	.+16     	; 0xf46 <malloc+0xd0>
     f36:	20 91 02 01 	lds	r18, 0x0102
     f3a:	30 91 03 01 	lds	r19, 0x0103
     f3e:	30 93 ab 02 	sts	0x02AB, r19
     f42:	20 93 aa 02 	sts	0x02AA, r18
     f46:	20 91 00 01 	lds	r18, 0x0100
     f4a:	30 91 01 01 	lds	r19, 0x0101
     f4e:	21 15       	cp	r18, r1
     f50:	31 05       	cpc	r19, r1
     f52:	41 f4       	brne	.+16     	; 0xf64 <malloc+0xee>
     f54:	2d b7       	in	r18, 0x3d	; 61
     f56:	3e b7       	in	r19, 0x3e	; 62
     f58:	40 91 04 01 	lds	r20, 0x0104
     f5c:	50 91 05 01 	lds	r21, 0x0105
     f60:	24 1b       	sub	r18, r20
     f62:	35 0b       	sbc	r19, r21
     f64:	e0 91 aa 02 	lds	r30, 0x02AA
     f68:	f0 91 ab 02 	lds	r31, 0x02AB
     f6c:	e2 17       	cp	r30, r18
     f6e:	f3 07       	cpc	r31, r19
     f70:	a0 f4       	brcc	.+40     	; 0xf9a <malloc+0x124>
     f72:	2e 1b       	sub	r18, r30
     f74:	3f 0b       	sbc	r19, r31
     f76:	28 17       	cp	r18, r24
     f78:	39 07       	cpc	r19, r25
     f7a:	78 f0       	brcs	.+30     	; 0xf9a <malloc+0x124>
     f7c:	ac 01       	movw	r20, r24
     f7e:	4e 5f       	subi	r20, 0xFE	; 254
     f80:	5f 4f       	sbci	r21, 0xFF	; 255
     f82:	24 17       	cp	r18, r20
     f84:	35 07       	cpc	r19, r21
     f86:	48 f0       	brcs	.+18     	; 0xf9a <malloc+0x124>
     f88:	4e 0f       	add	r20, r30
     f8a:	5f 1f       	adc	r21, r31
     f8c:	50 93 ab 02 	sts	0x02AB, r21
     f90:	40 93 aa 02 	sts	0x02AA, r20
     f94:	81 93       	st	Z+, r24
     f96:	91 93       	st	Z+, r25
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <malloc+0x128>
     f9a:	e0 e0       	ldi	r30, 0x00	; 0
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	cf 01       	movw	r24, r30
     fa0:	df 91       	pop	r29
     fa2:	cf 91       	pop	r28
     fa4:	08 95       	ret

00000fa6 <free>:
     fa6:	cf 93       	push	r28
     fa8:	df 93       	push	r29
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	09 f4       	brne	.+2      	; 0xfb0 <free+0xa>
     fae:	87 c0       	rjmp	.+270    	; 0x10be <free+0x118>
     fb0:	fc 01       	movw	r30, r24
     fb2:	32 97       	sbiw	r30, 0x02	; 2
     fb4:	13 82       	std	Z+3, r1	; 0x03
     fb6:	12 82       	std	Z+2, r1	; 0x02
     fb8:	c0 91 ac 02 	lds	r28, 0x02AC
     fbc:	d0 91 ad 02 	lds	r29, 0x02AD
     fc0:	20 97       	sbiw	r28, 0x00	; 0
     fc2:	81 f4       	brne	.+32     	; 0xfe4 <free+0x3e>
     fc4:	20 81       	ld	r18, Z
     fc6:	31 81       	ldd	r19, Z+1	; 0x01
     fc8:	28 0f       	add	r18, r24
     fca:	39 1f       	adc	r19, r25
     fcc:	80 91 aa 02 	lds	r24, 0x02AA
     fd0:	90 91 ab 02 	lds	r25, 0x02AB
     fd4:	82 17       	cp	r24, r18
     fd6:	93 07       	cpc	r25, r19
     fd8:	79 f5       	brne	.+94     	; 0x1038 <free+0x92>
     fda:	f0 93 ab 02 	sts	0x02AB, r31
     fde:	e0 93 aa 02 	sts	0x02AA, r30
     fe2:	6d c0       	rjmp	.+218    	; 0x10be <free+0x118>
     fe4:	de 01       	movw	r26, r28
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	ae 17       	cp	r26, r30
     fec:	bf 07       	cpc	r27, r31
     fee:	50 f4       	brcc	.+20     	; 0x1004 <free+0x5e>
     ff0:	12 96       	adiw	r26, 0x02	; 2
     ff2:	4d 91       	ld	r20, X+
     ff4:	5c 91       	ld	r21, X
     ff6:	13 97       	sbiw	r26, 0x03	; 3
     ff8:	9d 01       	movw	r18, r26
     ffa:	41 15       	cp	r20, r1
     ffc:	51 05       	cpc	r21, r1
     ffe:	09 f1       	breq	.+66     	; 0x1042 <free+0x9c>
    1000:	da 01       	movw	r26, r20
    1002:	f3 cf       	rjmp	.-26     	; 0xfea <free+0x44>
    1004:	b3 83       	std	Z+3, r27	; 0x03
    1006:	a2 83       	std	Z+2, r26	; 0x02
    1008:	40 81       	ld	r20, Z
    100a:	51 81       	ldd	r21, Z+1	; 0x01
    100c:	84 0f       	add	r24, r20
    100e:	95 1f       	adc	r25, r21
    1010:	8a 17       	cp	r24, r26
    1012:	9b 07       	cpc	r25, r27
    1014:	71 f4       	brne	.+28     	; 0x1032 <free+0x8c>
    1016:	8d 91       	ld	r24, X+
    1018:	9c 91       	ld	r25, X
    101a:	11 97       	sbiw	r26, 0x01	; 1
    101c:	84 0f       	add	r24, r20
    101e:	95 1f       	adc	r25, r21
    1020:	02 96       	adiw	r24, 0x02	; 2
    1022:	91 83       	std	Z+1, r25	; 0x01
    1024:	80 83       	st	Z, r24
    1026:	12 96       	adiw	r26, 0x02	; 2
    1028:	8d 91       	ld	r24, X+
    102a:	9c 91       	ld	r25, X
    102c:	13 97       	sbiw	r26, 0x03	; 3
    102e:	93 83       	std	Z+3, r25	; 0x03
    1030:	82 83       	std	Z+2, r24	; 0x02
    1032:	21 15       	cp	r18, r1
    1034:	31 05       	cpc	r19, r1
    1036:	29 f4       	brne	.+10     	; 0x1042 <free+0x9c>
    1038:	f0 93 ad 02 	sts	0x02AD, r31
    103c:	e0 93 ac 02 	sts	0x02AC, r30
    1040:	3e c0       	rjmp	.+124    	; 0x10be <free+0x118>
    1042:	d9 01       	movw	r26, r18
    1044:	13 96       	adiw	r26, 0x03	; 3
    1046:	fc 93       	st	X, r31
    1048:	ee 93       	st	-X, r30
    104a:	12 97       	sbiw	r26, 0x02	; 2
    104c:	4d 91       	ld	r20, X+
    104e:	5d 91       	ld	r21, X+
    1050:	a4 0f       	add	r26, r20
    1052:	b5 1f       	adc	r27, r21
    1054:	ea 17       	cp	r30, r26
    1056:	fb 07       	cpc	r31, r27
    1058:	79 f4       	brne	.+30     	; 0x1078 <free+0xd2>
    105a:	80 81       	ld	r24, Z
    105c:	91 81       	ldd	r25, Z+1	; 0x01
    105e:	84 0f       	add	r24, r20
    1060:	95 1f       	adc	r25, r21
    1062:	02 96       	adiw	r24, 0x02	; 2
    1064:	d9 01       	movw	r26, r18
    1066:	11 96       	adiw	r26, 0x01	; 1
    1068:	9c 93       	st	X, r25
    106a:	8e 93       	st	-X, r24
    106c:	82 81       	ldd	r24, Z+2	; 0x02
    106e:	93 81       	ldd	r25, Z+3	; 0x03
    1070:	13 96       	adiw	r26, 0x03	; 3
    1072:	9c 93       	st	X, r25
    1074:	8e 93       	st	-X, r24
    1076:	12 97       	sbiw	r26, 0x02	; 2
    1078:	e0 e0       	ldi	r30, 0x00	; 0
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	9b 81       	ldd	r25, Y+3	; 0x03
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	19 f0       	breq	.+6      	; 0x108a <free+0xe4>
    1084:	fe 01       	movw	r30, r28
    1086:	ec 01       	movw	r28, r24
    1088:	f9 cf       	rjmp	.-14     	; 0x107c <free+0xd6>
    108a:	ce 01       	movw	r24, r28
    108c:	02 96       	adiw	r24, 0x02	; 2
    108e:	28 81       	ld	r18, Y
    1090:	39 81       	ldd	r19, Y+1	; 0x01
    1092:	82 0f       	add	r24, r18
    1094:	93 1f       	adc	r25, r19
    1096:	20 91 aa 02 	lds	r18, 0x02AA
    109a:	30 91 ab 02 	lds	r19, 0x02AB
    109e:	28 17       	cp	r18, r24
    10a0:	39 07       	cpc	r19, r25
    10a2:	69 f4       	brne	.+26     	; 0x10be <free+0x118>
    10a4:	30 97       	sbiw	r30, 0x00	; 0
    10a6:	29 f4       	brne	.+10     	; 0x10b2 <free+0x10c>
    10a8:	10 92 ad 02 	sts	0x02AD, r1
    10ac:	10 92 ac 02 	sts	0x02AC, r1
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <free+0x110>
    10b2:	13 82       	std	Z+3, r1	; 0x03
    10b4:	12 82       	std	Z+2, r1	; 0x02
    10b6:	d0 93 ab 02 	sts	0x02AB, r29
    10ba:	c0 93 aa 02 	sts	0x02AA, r28
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	08 95       	ret

000010c4 <fdevopen>:
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	ec 01       	movw	r28, r24
    10ce:	8b 01       	movw	r16, r22
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	31 f4       	brne	.+12     	; 0x10e0 <fdevopen+0x1c>
    10d4:	61 15       	cp	r22, r1
    10d6:	71 05       	cpc	r23, r1
    10d8:	19 f4       	brne	.+6      	; 0x10e0 <fdevopen+0x1c>
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	37 c0       	rjmp	.+110    	; 0x114e <fdevopen+0x8a>
    10e0:	6e e0       	ldi	r22, 0x0E	; 14
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	81 e0       	ldi	r24, 0x01	; 1
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	38 d2       	rcall	.+1136   	; 0x155a <calloc>
    10ea:	fc 01       	movw	r30, r24
    10ec:	00 97       	sbiw	r24, 0x00	; 0
    10ee:	a9 f3       	breq	.-22     	; 0x10da <fdevopen+0x16>
    10f0:	80 e8       	ldi	r24, 0x80	; 128
    10f2:	83 83       	std	Z+3, r24	; 0x03
    10f4:	01 15       	cp	r16, r1
    10f6:	11 05       	cpc	r17, r1
    10f8:	71 f0       	breq	.+28     	; 0x1116 <fdevopen+0x52>
    10fa:	13 87       	std	Z+11, r17	; 0x0b
    10fc:	02 87       	std	Z+10, r16	; 0x0a
    10fe:	81 e8       	ldi	r24, 0x81	; 129
    1100:	83 83       	std	Z+3, r24	; 0x03
    1102:	80 91 ae 02 	lds	r24, 0x02AE
    1106:	90 91 af 02 	lds	r25, 0x02AF
    110a:	89 2b       	or	r24, r25
    110c:	21 f4       	brne	.+8      	; 0x1116 <fdevopen+0x52>
    110e:	f0 93 af 02 	sts	0x02AF, r31
    1112:	e0 93 ae 02 	sts	0x02AE, r30
    1116:	20 97       	sbiw	r28, 0x00	; 0
    1118:	c9 f0       	breq	.+50     	; 0x114c <fdevopen+0x88>
    111a:	d1 87       	std	Z+9, r29	; 0x09
    111c:	c0 87       	std	Z+8, r28	; 0x08
    111e:	83 81       	ldd	r24, Z+3	; 0x03
    1120:	82 60       	ori	r24, 0x02	; 2
    1122:	83 83       	std	Z+3, r24	; 0x03
    1124:	80 91 b0 02 	lds	r24, 0x02B0
    1128:	90 91 b1 02 	lds	r25, 0x02B1
    112c:	89 2b       	or	r24, r25
    112e:	71 f4       	brne	.+28     	; 0x114c <fdevopen+0x88>
    1130:	f0 93 b1 02 	sts	0x02B1, r31
    1134:	e0 93 b0 02 	sts	0x02B0, r30
    1138:	80 91 b2 02 	lds	r24, 0x02B2
    113c:	90 91 b3 02 	lds	r25, 0x02B3
    1140:	89 2b       	or	r24, r25
    1142:	21 f4       	brne	.+8      	; 0x114c <fdevopen+0x88>
    1144:	f0 93 b3 02 	sts	0x02B3, r31
    1148:	e0 93 b2 02 	sts	0x02B2, r30
    114c:	cf 01       	movw	r24, r30
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	1f 91       	pop	r17
    1154:	0f 91       	pop	r16
    1156:	08 95       	ret

00001158 <printf>:
    1158:	a0 e0       	ldi	r26, 0x00	; 0
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e1 eb       	ldi	r30, 0xB1	; 177
    115e:	f8 e0       	ldi	r31, 0x08	; 8
    1160:	d3 c2       	rjmp	.+1446   	; 0x1708 <__prologue_saves__+0x20>
    1162:	fe 01       	movw	r30, r28
    1164:	35 96       	adiw	r30, 0x05	; 5
    1166:	61 91       	ld	r22, Z+
    1168:	71 91       	ld	r23, Z+
    116a:	af 01       	movw	r20, r30
    116c:	80 91 b0 02 	lds	r24, 0x02B0
    1170:	90 91 b1 02 	lds	r25, 0x02B1
    1174:	2f d0       	rcall	.+94     	; 0x11d4 <vfprintf>
    1176:	e2 e0       	ldi	r30, 0x02	; 2
    1178:	e3 c2       	rjmp	.+1478   	; 0x1740 <__epilogue_restores__+0x20>

0000117a <puts>:
    117a:	0f 93       	push	r16
    117c:	1f 93       	push	r17
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	e0 91 b0 02 	lds	r30, 0x02B0
    1186:	f0 91 b1 02 	lds	r31, 0x02B1
    118a:	23 81       	ldd	r18, Z+3	; 0x03
    118c:	21 ff       	sbrs	r18, 1
    118e:	1b c0       	rjmp	.+54     	; 0x11c6 <puts+0x4c>
    1190:	ec 01       	movw	r28, r24
    1192:	00 e0       	ldi	r16, 0x00	; 0
    1194:	10 e0       	ldi	r17, 0x00	; 0
    1196:	89 91       	ld	r24, Y+
    1198:	60 91 b0 02 	lds	r22, 0x02B0
    119c:	70 91 b1 02 	lds	r23, 0x02B1
    11a0:	db 01       	movw	r26, r22
    11a2:	18 96       	adiw	r26, 0x08	; 8
    11a4:	ed 91       	ld	r30, X+
    11a6:	fc 91       	ld	r31, X
    11a8:	19 97       	sbiw	r26, 0x09	; 9
    11aa:	88 23       	and	r24, r24
    11ac:	31 f0       	breq	.+12     	; 0x11ba <puts+0x40>
    11ae:	09 95       	icall
    11b0:	89 2b       	or	r24, r25
    11b2:	89 f3       	breq	.-30     	; 0x1196 <puts+0x1c>
    11b4:	0f ef       	ldi	r16, 0xFF	; 255
    11b6:	1f ef       	ldi	r17, 0xFF	; 255
    11b8:	ee cf       	rjmp	.-36     	; 0x1196 <puts+0x1c>
    11ba:	8a e0       	ldi	r24, 0x0A	; 10
    11bc:	09 95       	icall
    11be:	89 2b       	or	r24, r25
    11c0:	11 f4       	brne	.+4      	; 0x11c6 <puts+0x4c>
    11c2:	c8 01       	movw	r24, r16
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <puts+0x50>
    11c6:	8f ef       	ldi	r24, 0xFF	; 255
    11c8:	9f ef       	ldi	r25, 0xFF	; 255
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	08 95       	ret

000011d4 <vfprintf>:
    11d4:	ac e0       	ldi	r26, 0x0C	; 12
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	ef ee       	ldi	r30, 0xEF	; 239
    11da:	f8 e0       	ldi	r31, 0x08	; 8
    11dc:	85 c2       	rjmp	.+1290   	; 0x16e8 <__prologue_saves__>
    11de:	7c 01       	movw	r14, r24
    11e0:	6b 01       	movw	r12, r22
    11e2:	8a 01       	movw	r16, r20
    11e4:	fc 01       	movw	r30, r24
    11e6:	17 82       	std	Z+7, r1	; 0x07
    11e8:	16 82       	std	Z+6, r1	; 0x06
    11ea:	83 81       	ldd	r24, Z+3	; 0x03
    11ec:	81 ff       	sbrs	r24, 1
    11ee:	b0 c1       	rjmp	.+864    	; 0x1550 <vfprintf+0x37c>
    11f0:	ce 01       	movw	r24, r28
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	4c 01       	movw	r8, r24
    11f6:	f7 01       	movw	r30, r14
    11f8:	93 81       	ldd	r25, Z+3	; 0x03
    11fa:	f6 01       	movw	r30, r12
    11fc:	93 fd       	sbrc	r25, 3
    11fe:	85 91       	lpm	r24, Z+
    1200:	93 ff       	sbrs	r25, 3
    1202:	81 91       	ld	r24, Z+
    1204:	6f 01       	movw	r12, r30
    1206:	88 23       	and	r24, r24
    1208:	09 f4       	brne	.+2      	; 0x120c <vfprintf+0x38>
    120a:	9e c1       	rjmp	.+828    	; 0x1548 <vfprintf+0x374>
    120c:	85 32       	cpi	r24, 0x25	; 37
    120e:	39 f4       	brne	.+14     	; 0x121e <vfprintf+0x4a>
    1210:	93 fd       	sbrc	r25, 3
    1212:	85 91       	lpm	r24, Z+
    1214:	93 ff       	sbrs	r25, 3
    1216:	81 91       	ld	r24, Z+
    1218:	6f 01       	movw	r12, r30
    121a:	85 32       	cpi	r24, 0x25	; 37
    121c:	21 f4       	brne	.+8      	; 0x1226 <vfprintf+0x52>
    121e:	b7 01       	movw	r22, r14
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	d2 d1       	rcall	.+932    	; 0x15c8 <fputc>
    1224:	e8 cf       	rjmp	.-48     	; 0x11f6 <vfprintf+0x22>
    1226:	51 2c       	mov	r5, r1
    1228:	31 2c       	mov	r3, r1
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	20 32       	cpi	r18, 0x20	; 32
    122e:	a0 f4       	brcc	.+40     	; 0x1258 <vfprintf+0x84>
    1230:	8b 32       	cpi	r24, 0x2B	; 43
    1232:	69 f0       	breq	.+26     	; 0x124e <vfprintf+0x7a>
    1234:	30 f4       	brcc	.+12     	; 0x1242 <vfprintf+0x6e>
    1236:	80 32       	cpi	r24, 0x20	; 32
    1238:	59 f0       	breq	.+22     	; 0x1250 <vfprintf+0x7c>
    123a:	83 32       	cpi	r24, 0x23	; 35
    123c:	69 f4       	brne	.+26     	; 0x1258 <vfprintf+0x84>
    123e:	20 61       	ori	r18, 0x10	; 16
    1240:	2c c0       	rjmp	.+88     	; 0x129a <vfprintf+0xc6>
    1242:	8d 32       	cpi	r24, 0x2D	; 45
    1244:	39 f0       	breq	.+14     	; 0x1254 <vfprintf+0x80>
    1246:	80 33       	cpi	r24, 0x30	; 48
    1248:	39 f4       	brne	.+14     	; 0x1258 <vfprintf+0x84>
    124a:	21 60       	ori	r18, 0x01	; 1
    124c:	26 c0       	rjmp	.+76     	; 0x129a <vfprintf+0xc6>
    124e:	22 60       	ori	r18, 0x02	; 2
    1250:	24 60       	ori	r18, 0x04	; 4
    1252:	23 c0       	rjmp	.+70     	; 0x129a <vfprintf+0xc6>
    1254:	28 60       	ori	r18, 0x08	; 8
    1256:	21 c0       	rjmp	.+66     	; 0x129a <vfprintf+0xc6>
    1258:	27 fd       	sbrc	r18, 7
    125a:	27 c0       	rjmp	.+78     	; 0x12aa <vfprintf+0xd6>
    125c:	30 ed       	ldi	r19, 0xD0	; 208
    125e:	38 0f       	add	r19, r24
    1260:	3a 30       	cpi	r19, 0x0A	; 10
    1262:	78 f4       	brcc	.+30     	; 0x1282 <vfprintf+0xae>
    1264:	26 ff       	sbrs	r18, 6
    1266:	06 c0       	rjmp	.+12     	; 0x1274 <vfprintf+0xa0>
    1268:	fa e0       	ldi	r31, 0x0A	; 10
    126a:	5f 9e       	mul	r5, r31
    126c:	30 0d       	add	r19, r0
    126e:	11 24       	eor	r1, r1
    1270:	53 2e       	mov	r5, r19
    1272:	13 c0       	rjmp	.+38     	; 0x129a <vfprintf+0xc6>
    1274:	8a e0       	ldi	r24, 0x0A	; 10
    1276:	38 9e       	mul	r3, r24
    1278:	30 0d       	add	r19, r0
    127a:	11 24       	eor	r1, r1
    127c:	33 2e       	mov	r3, r19
    127e:	20 62       	ori	r18, 0x20	; 32
    1280:	0c c0       	rjmp	.+24     	; 0x129a <vfprintf+0xc6>
    1282:	8e 32       	cpi	r24, 0x2E	; 46
    1284:	21 f4       	brne	.+8      	; 0x128e <vfprintf+0xba>
    1286:	26 fd       	sbrc	r18, 6
    1288:	5f c1       	rjmp	.+702    	; 0x1548 <vfprintf+0x374>
    128a:	20 64       	ori	r18, 0x40	; 64
    128c:	06 c0       	rjmp	.+12     	; 0x129a <vfprintf+0xc6>
    128e:	8c 36       	cpi	r24, 0x6C	; 108
    1290:	11 f4       	brne	.+4      	; 0x1296 <vfprintf+0xc2>
    1292:	20 68       	ori	r18, 0x80	; 128
    1294:	02 c0       	rjmp	.+4      	; 0x129a <vfprintf+0xc6>
    1296:	88 36       	cpi	r24, 0x68	; 104
    1298:	41 f4       	brne	.+16     	; 0x12aa <vfprintf+0xd6>
    129a:	f6 01       	movw	r30, r12
    129c:	93 fd       	sbrc	r25, 3
    129e:	85 91       	lpm	r24, Z+
    12a0:	93 ff       	sbrs	r25, 3
    12a2:	81 91       	ld	r24, Z+
    12a4:	6f 01       	movw	r12, r30
    12a6:	81 11       	cpse	r24, r1
    12a8:	c1 cf       	rjmp	.-126    	; 0x122c <vfprintf+0x58>
    12aa:	98 2f       	mov	r25, r24
    12ac:	9f 7d       	andi	r25, 0xDF	; 223
    12ae:	95 54       	subi	r25, 0x45	; 69
    12b0:	93 30       	cpi	r25, 0x03	; 3
    12b2:	28 f4       	brcc	.+10     	; 0x12be <vfprintf+0xea>
    12b4:	0c 5f       	subi	r16, 0xFC	; 252
    12b6:	1f 4f       	sbci	r17, 0xFF	; 255
    12b8:	ff e3       	ldi	r31, 0x3F	; 63
    12ba:	f9 83       	std	Y+1, r31	; 0x01
    12bc:	0d c0       	rjmp	.+26     	; 0x12d8 <vfprintf+0x104>
    12be:	83 36       	cpi	r24, 0x63	; 99
    12c0:	31 f0       	breq	.+12     	; 0x12ce <vfprintf+0xfa>
    12c2:	83 37       	cpi	r24, 0x73	; 115
    12c4:	71 f0       	breq	.+28     	; 0x12e2 <vfprintf+0x10e>
    12c6:	83 35       	cpi	r24, 0x53	; 83
    12c8:	09 f0       	breq	.+2      	; 0x12cc <vfprintf+0xf8>
    12ca:	57 c0       	rjmp	.+174    	; 0x137a <vfprintf+0x1a6>
    12cc:	21 c0       	rjmp	.+66     	; 0x1310 <vfprintf+0x13c>
    12ce:	f8 01       	movw	r30, r16
    12d0:	80 81       	ld	r24, Z
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	0e 5f       	subi	r16, 0xFE	; 254
    12d6:	1f 4f       	sbci	r17, 0xFF	; 255
    12d8:	44 24       	eor	r4, r4
    12da:	43 94       	inc	r4
    12dc:	51 2c       	mov	r5, r1
    12de:	54 01       	movw	r10, r8
    12e0:	14 c0       	rjmp	.+40     	; 0x130a <vfprintf+0x136>
    12e2:	38 01       	movw	r6, r16
    12e4:	f2 e0       	ldi	r31, 0x02	; 2
    12e6:	6f 0e       	add	r6, r31
    12e8:	71 1c       	adc	r7, r1
    12ea:	f8 01       	movw	r30, r16
    12ec:	a0 80       	ld	r10, Z
    12ee:	b1 80       	ldd	r11, Z+1	; 0x01
    12f0:	26 ff       	sbrs	r18, 6
    12f2:	03 c0       	rjmp	.+6      	; 0x12fa <vfprintf+0x126>
    12f4:	65 2d       	mov	r22, r5
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <vfprintf+0x12a>
    12fa:	6f ef       	ldi	r22, 0xFF	; 255
    12fc:	7f ef       	ldi	r23, 0xFF	; 255
    12fe:	c5 01       	movw	r24, r10
    1300:	2c 87       	std	Y+12, r18	; 0x0c
    1302:	57 d1       	rcall	.+686    	; 0x15b2 <strnlen>
    1304:	2c 01       	movw	r4, r24
    1306:	83 01       	movw	r16, r6
    1308:	2c 85       	ldd	r18, Y+12	; 0x0c
    130a:	2f 77       	andi	r18, 0x7F	; 127
    130c:	22 2e       	mov	r2, r18
    130e:	16 c0       	rjmp	.+44     	; 0x133c <vfprintf+0x168>
    1310:	38 01       	movw	r6, r16
    1312:	f2 e0       	ldi	r31, 0x02	; 2
    1314:	6f 0e       	add	r6, r31
    1316:	71 1c       	adc	r7, r1
    1318:	f8 01       	movw	r30, r16
    131a:	a0 80       	ld	r10, Z
    131c:	b1 80       	ldd	r11, Z+1	; 0x01
    131e:	26 ff       	sbrs	r18, 6
    1320:	03 c0       	rjmp	.+6      	; 0x1328 <vfprintf+0x154>
    1322:	65 2d       	mov	r22, r5
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	02 c0       	rjmp	.+4      	; 0x132c <vfprintf+0x158>
    1328:	6f ef       	ldi	r22, 0xFF	; 255
    132a:	7f ef       	ldi	r23, 0xFF	; 255
    132c:	c5 01       	movw	r24, r10
    132e:	2c 87       	std	Y+12, r18	; 0x0c
    1330:	2e d1       	rcall	.+604    	; 0x158e <strnlen_P>
    1332:	2c 01       	movw	r4, r24
    1334:	2c 85       	ldd	r18, Y+12	; 0x0c
    1336:	20 68       	ori	r18, 0x80	; 128
    1338:	22 2e       	mov	r2, r18
    133a:	83 01       	movw	r16, r6
    133c:	23 fc       	sbrc	r2, 3
    133e:	19 c0       	rjmp	.+50     	; 0x1372 <vfprintf+0x19e>
    1340:	83 2d       	mov	r24, r3
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	48 16       	cp	r4, r24
    1346:	59 06       	cpc	r5, r25
    1348:	a0 f4       	brcc	.+40     	; 0x1372 <vfprintf+0x19e>
    134a:	b7 01       	movw	r22, r14
    134c:	80 e2       	ldi	r24, 0x20	; 32
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	3b d1       	rcall	.+630    	; 0x15c8 <fputc>
    1352:	3a 94       	dec	r3
    1354:	f5 cf       	rjmp	.-22     	; 0x1340 <vfprintf+0x16c>
    1356:	f5 01       	movw	r30, r10
    1358:	27 fc       	sbrc	r2, 7
    135a:	85 91       	lpm	r24, Z+
    135c:	27 fe       	sbrs	r2, 7
    135e:	81 91       	ld	r24, Z+
    1360:	5f 01       	movw	r10, r30
    1362:	b7 01       	movw	r22, r14
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	30 d1       	rcall	.+608    	; 0x15c8 <fputc>
    1368:	31 10       	cpse	r3, r1
    136a:	3a 94       	dec	r3
    136c:	f1 e0       	ldi	r31, 0x01	; 1
    136e:	4f 1a       	sub	r4, r31
    1370:	51 08       	sbc	r5, r1
    1372:	41 14       	cp	r4, r1
    1374:	51 04       	cpc	r5, r1
    1376:	79 f7       	brne	.-34     	; 0x1356 <vfprintf+0x182>
    1378:	de c0       	rjmp	.+444    	; 0x1536 <vfprintf+0x362>
    137a:	84 36       	cpi	r24, 0x64	; 100
    137c:	11 f0       	breq	.+4      	; 0x1382 <vfprintf+0x1ae>
    137e:	89 36       	cpi	r24, 0x69	; 105
    1380:	31 f5       	brne	.+76     	; 0x13ce <vfprintf+0x1fa>
    1382:	f8 01       	movw	r30, r16
    1384:	27 ff       	sbrs	r18, 7
    1386:	07 c0       	rjmp	.+14     	; 0x1396 <vfprintf+0x1c2>
    1388:	60 81       	ld	r22, Z
    138a:	71 81       	ldd	r23, Z+1	; 0x01
    138c:	82 81       	ldd	r24, Z+2	; 0x02
    138e:	93 81       	ldd	r25, Z+3	; 0x03
    1390:	0c 5f       	subi	r16, 0xFC	; 252
    1392:	1f 4f       	sbci	r17, 0xFF	; 255
    1394:	08 c0       	rjmp	.+16     	; 0x13a6 <vfprintf+0x1d2>
    1396:	60 81       	ld	r22, Z
    1398:	71 81       	ldd	r23, Z+1	; 0x01
    139a:	88 27       	eor	r24, r24
    139c:	77 fd       	sbrc	r23, 7
    139e:	80 95       	com	r24
    13a0:	98 2f       	mov	r25, r24
    13a2:	0e 5f       	subi	r16, 0xFE	; 254
    13a4:	1f 4f       	sbci	r17, 0xFF	; 255
    13a6:	2f 76       	andi	r18, 0x6F	; 111
    13a8:	b2 2e       	mov	r11, r18
    13aa:	97 ff       	sbrs	r25, 7
    13ac:	09 c0       	rjmp	.+18     	; 0x13c0 <vfprintf+0x1ec>
    13ae:	90 95       	com	r25
    13b0:	80 95       	com	r24
    13b2:	70 95       	com	r23
    13b4:	61 95       	neg	r22
    13b6:	7f 4f       	sbci	r23, 0xFF	; 255
    13b8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ba:	9f 4f       	sbci	r25, 0xFF	; 255
    13bc:	20 68       	ori	r18, 0x80	; 128
    13be:	b2 2e       	mov	r11, r18
    13c0:	2a e0       	ldi	r18, 0x0A	; 10
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	a4 01       	movw	r20, r8
    13c6:	32 d1       	rcall	.+612    	; 0x162c <__ultoa_invert>
    13c8:	a8 2e       	mov	r10, r24
    13ca:	a8 18       	sub	r10, r8
    13cc:	43 c0       	rjmp	.+134    	; 0x1454 <vfprintf+0x280>
    13ce:	85 37       	cpi	r24, 0x75	; 117
    13d0:	29 f4       	brne	.+10     	; 0x13dc <vfprintf+0x208>
    13d2:	2f 7e       	andi	r18, 0xEF	; 239
    13d4:	b2 2e       	mov	r11, r18
    13d6:	2a e0       	ldi	r18, 0x0A	; 10
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	25 c0       	rjmp	.+74     	; 0x1426 <vfprintf+0x252>
    13dc:	f2 2f       	mov	r31, r18
    13de:	f9 7f       	andi	r31, 0xF9	; 249
    13e0:	bf 2e       	mov	r11, r31
    13e2:	8f 36       	cpi	r24, 0x6F	; 111
    13e4:	c1 f0       	breq	.+48     	; 0x1416 <vfprintf+0x242>
    13e6:	18 f4       	brcc	.+6      	; 0x13ee <vfprintf+0x21a>
    13e8:	88 35       	cpi	r24, 0x58	; 88
    13ea:	79 f0       	breq	.+30     	; 0x140a <vfprintf+0x236>
    13ec:	ad c0       	rjmp	.+346    	; 0x1548 <vfprintf+0x374>
    13ee:	80 37       	cpi	r24, 0x70	; 112
    13f0:	19 f0       	breq	.+6      	; 0x13f8 <vfprintf+0x224>
    13f2:	88 37       	cpi	r24, 0x78	; 120
    13f4:	21 f0       	breq	.+8      	; 0x13fe <vfprintf+0x22a>
    13f6:	a8 c0       	rjmp	.+336    	; 0x1548 <vfprintf+0x374>
    13f8:	2f 2f       	mov	r18, r31
    13fa:	20 61       	ori	r18, 0x10	; 16
    13fc:	b2 2e       	mov	r11, r18
    13fe:	b4 fe       	sbrs	r11, 4
    1400:	0d c0       	rjmp	.+26     	; 0x141c <vfprintf+0x248>
    1402:	8b 2d       	mov	r24, r11
    1404:	84 60       	ori	r24, 0x04	; 4
    1406:	b8 2e       	mov	r11, r24
    1408:	09 c0       	rjmp	.+18     	; 0x141c <vfprintf+0x248>
    140a:	24 ff       	sbrs	r18, 4
    140c:	0a c0       	rjmp	.+20     	; 0x1422 <vfprintf+0x24e>
    140e:	9f 2f       	mov	r25, r31
    1410:	96 60       	ori	r25, 0x06	; 6
    1412:	b9 2e       	mov	r11, r25
    1414:	06 c0       	rjmp	.+12     	; 0x1422 <vfprintf+0x24e>
    1416:	28 e0       	ldi	r18, 0x08	; 8
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	05 c0       	rjmp	.+10     	; 0x1426 <vfprintf+0x252>
    141c:	20 e1       	ldi	r18, 0x10	; 16
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <vfprintf+0x252>
    1422:	20 e1       	ldi	r18, 0x10	; 16
    1424:	32 e0       	ldi	r19, 0x02	; 2
    1426:	f8 01       	movw	r30, r16
    1428:	b7 fe       	sbrs	r11, 7
    142a:	07 c0       	rjmp	.+14     	; 0x143a <vfprintf+0x266>
    142c:	60 81       	ld	r22, Z
    142e:	71 81       	ldd	r23, Z+1	; 0x01
    1430:	82 81       	ldd	r24, Z+2	; 0x02
    1432:	93 81       	ldd	r25, Z+3	; 0x03
    1434:	0c 5f       	subi	r16, 0xFC	; 252
    1436:	1f 4f       	sbci	r17, 0xFF	; 255
    1438:	06 c0       	rjmp	.+12     	; 0x1446 <vfprintf+0x272>
    143a:	60 81       	ld	r22, Z
    143c:	71 81       	ldd	r23, Z+1	; 0x01
    143e:	80 e0       	ldi	r24, 0x00	; 0
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	0e 5f       	subi	r16, 0xFE	; 254
    1444:	1f 4f       	sbci	r17, 0xFF	; 255
    1446:	a4 01       	movw	r20, r8
    1448:	f1 d0       	rcall	.+482    	; 0x162c <__ultoa_invert>
    144a:	a8 2e       	mov	r10, r24
    144c:	a8 18       	sub	r10, r8
    144e:	fb 2d       	mov	r31, r11
    1450:	ff 77       	andi	r31, 0x7F	; 127
    1452:	bf 2e       	mov	r11, r31
    1454:	b6 fe       	sbrs	r11, 6
    1456:	0b c0       	rjmp	.+22     	; 0x146e <vfprintf+0x29a>
    1458:	2b 2d       	mov	r18, r11
    145a:	2e 7f       	andi	r18, 0xFE	; 254
    145c:	a5 14       	cp	r10, r5
    145e:	50 f4       	brcc	.+20     	; 0x1474 <vfprintf+0x2a0>
    1460:	b4 fe       	sbrs	r11, 4
    1462:	0a c0       	rjmp	.+20     	; 0x1478 <vfprintf+0x2a4>
    1464:	b2 fc       	sbrc	r11, 2
    1466:	08 c0       	rjmp	.+16     	; 0x1478 <vfprintf+0x2a4>
    1468:	2b 2d       	mov	r18, r11
    146a:	2e 7e       	andi	r18, 0xEE	; 238
    146c:	05 c0       	rjmp	.+10     	; 0x1478 <vfprintf+0x2a4>
    146e:	7a 2c       	mov	r7, r10
    1470:	2b 2d       	mov	r18, r11
    1472:	03 c0       	rjmp	.+6      	; 0x147a <vfprintf+0x2a6>
    1474:	7a 2c       	mov	r7, r10
    1476:	01 c0       	rjmp	.+2      	; 0x147a <vfprintf+0x2a6>
    1478:	75 2c       	mov	r7, r5
    147a:	24 ff       	sbrs	r18, 4
    147c:	0d c0       	rjmp	.+26     	; 0x1498 <vfprintf+0x2c4>
    147e:	fe 01       	movw	r30, r28
    1480:	ea 0d       	add	r30, r10
    1482:	f1 1d       	adc	r31, r1
    1484:	80 81       	ld	r24, Z
    1486:	80 33       	cpi	r24, 0x30	; 48
    1488:	11 f4       	brne	.+4      	; 0x148e <vfprintf+0x2ba>
    148a:	29 7e       	andi	r18, 0xE9	; 233
    148c:	09 c0       	rjmp	.+18     	; 0x14a0 <vfprintf+0x2cc>
    148e:	22 ff       	sbrs	r18, 2
    1490:	06 c0       	rjmp	.+12     	; 0x149e <vfprintf+0x2ca>
    1492:	73 94       	inc	r7
    1494:	73 94       	inc	r7
    1496:	04 c0       	rjmp	.+8      	; 0x14a0 <vfprintf+0x2cc>
    1498:	82 2f       	mov	r24, r18
    149a:	86 78       	andi	r24, 0x86	; 134
    149c:	09 f0       	breq	.+2      	; 0x14a0 <vfprintf+0x2cc>
    149e:	73 94       	inc	r7
    14a0:	23 fd       	sbrc	r18, 3
    14a2:	12 c0       	rjmp	.+36     	; 0x14c8 <vfprintf+0x2f4>
    14a4:	20 ff       	sbrs	r18, 0
    14a6:	06 c0       	rjmp	.+12     	; 0x14b4 <vfprintf+0x2e0>
    14a8:	5a 2c       	mov	r5, r10
    14aa:	73 14       	cp	r7, r3
    14ac:	18 f4       	brcc	.+6      	; 0x14b4 <vfprintf+0x2e0>
    14ae:	53 0c       	add	r5, r3
    14b0:	57 18       	sub	r5, r7
    14b2:	73 2c       	mov	r7, r3
    14b4:	73 14       	cp	r7, r3
    14b6:	60 f4       	brcc	.+24     	; 0x14d0 <vfprintf+0x2fc>
    14b8:	b7 01       	movw	r22, r14
    14ba:	80 e2       	ldi	r24, 0x20	; 32
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	2c 87       	std	Y+12, r18	; 0x0c
    14c0:	83 d0       	rcall	.+262    	; 0x15c8 <fputc>
    14c2:	73 94       	inc	r7
    14c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    14c6:	f6 cf       	rjmp	.-20     	; 0x14b4 <vfprintf+0x2e0>
    14c8:	73 14       	cp	r7, r3
    14ca:	10 f4       	brcc	.+4      	; 0x14d0 <vfprintf+0x2fc>
    14cc:	37 18       	sub	r3, r7
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <vfprintf+0x2fe>
    14d0:	31 2c       	mov	r3, r1
    14d2:	24 ff       	sbrs	r18, 4
    14d4:	11 c0       	rjmp	.+34     	; 0x14f8 <vfprintf+0x324>
    14d6:	b7 01       	movw	r22, r14
    14d8:	80 e3       	ldi	r24, 0x30	; 48
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	2c 87       	std	Y+12, r18	; 0x0c
    14de:	74 d0       	rcall	.+232    	; 0x15c8 <fputc>
    14e0:	2c 85       	ldd	r18, Y+12	; 0x0c
    14e2:	22 ff       	sbrs	r18, 2
    14e4:	16 c0       	rjmp	.+44     	; 0x1512 <vfprintf+0x33e>
    14e6:	21 ff       	sbrs	r18, 1
    14e8:	03 c0       	rjmp	.+6      	; 0x14f0 <vfprintf+0x31c>
    14ea:	88 e5       	ldi	r24, 0x58	; 88
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <vfprintf+0x320>
    14f0:	88 e7       	ldi	r24, 0x78	; 120
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	b7 01       	movw	r22, r14
    14f6:	0c c0       	rjmp	.+24     	; 0x1510 <vfprintf+0x33c>
    14f8:	82 2f       	mov	r24, r18
    14fa:	86 78       	andi	r24, 0x86	; 134
    14fc:	51 f0       	breq	.+20     	; 0x1512 <vfprintf+0x33e>
    14fe:	21 fd       	sbrc	r18, 1
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <vfprintf+0x332>
    1502:	80 e2       	ldi	r24, 0x20	; 32
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <vfprintf+0x334>
    1506:	8b e2       	ldi	r24, 0x2B	; 43
    1508:	27 fd       	sbrc	r18, 7
    150a:	8d e2       	ldi	r24, 0x2D	; 45
    150c:	b7 01       	movw	r22, r14
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	5b d0       	rcall	.+182    	; 0x15c8 <fputc>
    1512:	a5 14       	cp	r10, r5
    1514:	30 f4       	brcc	.+12     	; 0x1522 <vfprintf+0x34e>
    1516:	b7 01       	movw	r22, r14
    1518:	80 e3       	ldi	r24, 0x30	; 48
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	55 d0       	rcall	.+170    	; 0x15c8 <fputc>
    151e:	5a 94       	dec	r5
    1520:	f8 cf       	rjmp	.-16     	; 0x1512 <vfprintf+0x33e>
    1522:	aa 94       	dec	r10
    1524:	f4 01       	movw	r30, r8
    1526:	ea 0d       	add	r30, r10
    1528:	f1 1d       	adc	r31, r1
    152a:	80 81       	ld	r24, Z
    152c:	b7 01       	movw	r22, r14
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	4b d0       	rcall	.+150    	; 0x15c8 <fputc>
    1532:	a1 10       	cpse	r10, r1
    1534:	f6 cf       	rjmp	.-20     	; 0x1522 <vfprintf+0x34e>
    1536:	33 20       	and	r3, r3
    1538:	09 f4       	brne	.+2      	; 0x153c <vfprintf+0x368>
    153a:	5d ce       	rjmp	.-838    	; 0x11f6 <vfprintf+0x22>
    153c:	b7 01       	movw	r22, r14
    153e:	80 e2       	ldi	r24, 0x20	; 32
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	42 d0       	rcall	.+132    	; 0x15c8 <fputc>
    1544:	3a 94       	dec	r3
    1546:	f7 cf       	rjmp	.-18     	; 0x1536 <vfprintf+0x362>
    1548:	f7 01       	movw	r30, r14
    154a:	86 81       	ldd	r24, Z+6	; 0x06
    154c:	97 81       	ldd	r25, Z+7	; 0x07
    154e:	02 c0       	rjmp	.+4      	; 0x1554 <vfprintf+0x380>
    1550:	8f ef       	ldi	r24, 0xFF	; 255
    1552:	9f ef       	ldi	r25, 0xFF	; 255
    1554:	2c 96       	adiw	r28, 0x0c	; 12
    1556:	e2 e1       	ldi	r30, 0x12	; 18
    1558:	e3 c0       	rjmp	.+454    	; 0x1720 <__epilogue_restores__>

0000155a <calloc>:
    155a:	0f 93       	push	r16
    155c:	1f 93       	push	r17
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	86 9f       	mul	r24, r22
    1564:	80 01       	movw	r16, r0
    1566:	87 9f       	mul	r24, r23
    1568:	10 0d       	add	r17, r0
    156a:	96 9f       	mul	r25, r22
    156c:	10 0d       	add	r17, r0
    156e:	11 24       	eor	r1, r1
    1570:	c8 01       	movw	r24, r16
    1572:	81 dc       	rcall	.-1790   	; 0xe76 <malloc>
    1574:	ec 01       	movw	r28, r24
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	21 f0       	breq	.+8      	; 0x1582 <calloc+0x28>
    157a:	a8 01       	movw	r20, r16
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	11 d0       	rcall	.+34     	; 0x15a4 <memset>
    1582:	ce 01       	movw	r24, r28
    1584:	df 91       	pop	r29
    1586:	cf 91       	pop	r28
    1588:	1f 91       	pop	r17
    158a:	0f 91       	pop	r16
    158c:	08 95       	ret

0000158e <strnlen_P>:
    158e:	fc 01       	movw	r30, r24
    1590:	05 90       	lpm	r0, Z+
    1592:	61 50       	subi	r22, 0x01	; 1
    1594:	70 40       	sbci	r23, 0x00	; 0
    1596:	01 10       	cpse	r0, r1
    1598:	d8 f7       	brcc	.-10     	; 0x1590 <strnlen_P+0x2>
    159a:	80 95       	com	r24
    159c:	90 95       	com	r25
    159e:	8e 0f       	add	r24, r30
    15a0:	9f 1f       	adc	r25, r31
    15a2:	08 95       	ret

000015a4 <memset>:
    15a4:	dc 01       	movw	r26, r24
    15a6:	01 c0       	rjmp	.+2      	; 0x15aa <memset+0x6>
    15a8:	6d 93       	st	X+, r22
    15aa:	41 50       	subi	r20, 0x01	; 1
    15ac:	50 40       	sbci	r21, 0x00	; 0
    15ae:	e0 f7       	brcc	.-8      	; 0x15a8 <memset+0x4>
    15b0:	08 95       	ret

000015b2 <strnlen>:
    15b2:	fc 01       	movw	r30, r24
    15b4:	61 50       	subi	r22, 0x01	; 1
    15b6:	70 40       	sbci	r23, 0x00	; 0
    15b8:	01 90       	ld	r0, Z+
    15ba:	01 10       	cpse	r0, r1
    15bc:	d8 f7       	brcc	.-10     	; 0x15b4 <strnlen+0x2>
    15be:	80 95       	com	r24
    15c0:	90 95       	com	r25
    15c2:	8e 0f       	add	r24, r30
    15c4:	9f 1f       	adc	r25, r31
    15c6:	08 95       	ret

000015c8 <fputc>:
    15c8:	0f 93       	push	r16
    15ca:	1f 93       	push	r17
    15cc:	cf 93       	push	r28
    15ce:	df 93       	push	r29
    15d0:	18 2f       	mov	r17, r24
    15d2:	09 2f       	mov	r16, r25
    15d4:	eb 01       	movw	r28, r22
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	81 fd       	sbrc	r24, 1
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <fputc+0x1a>
    15dc:	8f ef       	ldi	r24, 0xFF	; 255
    15de:	9f ef       	ldi	r25, 0xFF	; 255
    15e0:	20 c0       	rjmp	.+64     	; 0x1622 <fputc+0x5a>
    15e2:	82 ff       	sbrs	r24, 2
    15e4:	10 c0       	rjmp	.+32     	; 0x1606 <fputc+0x3e>
    15e6:	4e 81       	ldd	r20, Y+6	; 0x06
    15e8:	5f 81       	ldd	r21, Y+7	; 0x07
    15ea:	2c 81       	ldd	r18, Y+4	; 0x04
    15ec:	3d 81       	ldd	r19, Y+5	; 0x05
    15ee:	42 17       	cp	r20, r18
    15f0:	53 07       	cpc	r21, r19
    15f2:	7c f4       	brge	.+30     	; 0x1612 <fputc+0x4a>
    15f4:	e8 81       	ld	r30, Y
    15f6:	f9 81       	ldd	r31, Y+1	; 0x01
    15f8:	9f 01       	movw	r18, r30
    15fa:	2f 5f       	subi	r18, 0xFF	; 255
    15fc:	3f 4f       	sbci	r19, 0xFF	; 255
    15fe:	39 83       	std	Y+1, r19	; 0x01
    1600:	28 83       	st	Y, r18
    1602:	10 83       	st	Z, r17
    1604:	06 c0       	rjmp	.+12     	; 0x1612 <fputc+0x4a>
    1606:	e8 85       	ldd	r30, Y+8	; 0x08
    1608:	f9 85       	ldd	r31, Y+9	; 0x09
    160a:	81 2f       	mov	r24, r17
    160c:	09 95       	icall
    160e:	89 2b       	or	r24, r25
    1610:	29 f7       	brne	.-54     	; 0x15dc <fputc+0x14>
    1612:	2e 81       	ldd	r18, Y+6	; 0x06
    1614:	3f 81       	ldd	r19, Y+7	; 0x07
    1616:	2f 5f       	subi	r18, 0xFF	; 255
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	3f 83       	std	Y+7, r19	; 0x07
    161c:	2e 83       	std	Y+6, r18	; 0x06
    161e:	81 2f       	mov	r24, r17
    1620:	90 2f       	mov	r25, r16
    1622:	df 91       	pop	r29
    1624:	cf 91       	pop	r28
    1626:	1f 91       	pop	r17
    1628:	0f 91       	pop	r16
    162a:	08 95       	ret

0000162c <__ultoa_invert>:
    162c:	fa 01       	movw	r30, r20
    162e:	aa 27       	eor	r26, r26
    1630:	28 30       	cpi	r18, 0x08	; 8
    1632:	51 f1       	breq	.+84     	; 0x1688 <__ultoa_invert+0x5c>
    1634:	20 31       	cpi	r18, 0x10	; 16
    1636:	81 f1       	breq	.+96     	; 0x1698 <__ultoa_invert+0x6c>
    1638:	e8 94       	clt
    163a:	6f 93       	push	r22
    163c:	6e 7f       	andi	r22, 0xFE	; 254
    163e:	6e 5f       	subi	r22, 0xFE	; 254
    1640:	7f 4f       	sbci	r23, 0xFF	; 255
    1642:	8f 4f       	sbci	r24, 0xFF	; 255
    1644:	9f 4f       	sbci	r25, 0xFF	; 255
    1646:	af 4f       	sbci	r26, 0xFF	; 255
    1648:	b1 e0       	ldi	r27, 0x01	; 1
    164a:	3e d0       	rcall	.+124    	; 0x16c8 <__ultoa_invert+0x9c>
    164c:	b4 e0       	ldi	r27, 0x04	; 4
    164e:	3c d0       	rcall	.+120    	; 0x16c8 <__ultoa_invert+0x9c>
    1650:	67 0f       	add	r22, r23
    1652:	78 1f       	adc	r23, r24
    1654:	89 1f       	adc	r24, r25
    1656:	9a 1f       	adc	r25, r26
    1658:	a1 1d       	adc	r26, r1
    165a:	68 0f       	add	r22, r24
    165c:	79 1f       	adc	r23, r25
    165e:	8a 1f       	adc	r24, r26
    1660:	91 1d       	adc	r25, r1
    1662:	a1 1d       	adc	r26, r1
    1664:	6a 0f       	add	r22, r26
    1666:	71 1d       	adc	r23, r1
    1668:	81 1d       	adc	r24, r1
    166a:	91 1d       	adc	r25, r1
    166c:	a1 1d       	adc	r26, r1
    166e:	20 d0       	rcall	.+64     	; 0x16b0 <__ultoa_invert+0x84>
    1670:	09 f4       	brne	.+2      	; 0x1674 <__ultoa_invert+0x48>
    1672:	68 94       	set
    1674:	3f 91       	pop	r19
    1676:	2a e0       	ldi	r18, 0x0A	; 10
    1678:	26 9f       	mul	r18, r22
    167a:	11 24       	eor	r1, r1
    167c:	30 19       	sub	r19, r0
    167e:	30 5d       	subi	r19, 0xD0	; 208
    1680:	31 93       	st	Z+, r19
    1682:	de f6       	brtc	.-74     	; 0x163a <__ultoa_invert+0xe>
    1684:	cf 01       	movw	r24, r30
    1686:	08 95       	ret
    1688:	46 2f       	mov	r20, r22
    168a:	47 70       	andi	r20, 0x07	; 7
    168c:	40 5d       	subi	r20, 0xD0	; 208
    168e:	41 93       	st	Z+, r20
    1690:	b3 e0       	ldi	r27, 0x03	; 3
    1692:	0f d0       	rcall	.+30     	; 0x16b2 <__ultoa_invert+0x86>
    1694:	c9 f7       	brne	.-14     	; 0x1688 <__ultoa_invert+0x5c>
    1696:	f6 cf       	rjmp	.-20     	; 0x1684 <__ultoa_invert+0x58>
    1698:	46 2f       	mov	r20, r22
    169a:	4f 70       	andi	r20, 0x0F	; 15
    169c:	40 5d       	subi	r20, 0xD0	; 208
    169e:	4a 33       	cpi	r20, 0x3A	; 58
    16a0:	18 f0       	brcs	.+6      	; 0x16a8 <__ultoa_invert+0x7c>
    16a2:	49 5d       	subi	r20, 0xD9	; 217
    16a4:	31 fd       	sbrc	r19, 1
    16a6:	40 52       	subi	r20, 0x20	; 32
    16a8:	41 93       	st	Z+, r20
    16aa:	02 d0       	rcall	.+4      	; 0x16b0 <__ultoa_invert+0x84>
    16ac:	a9 f7       	brne	.-22     	; 0x1698 <__ultoa_invert+0x6c>
    16ae:	ea cf       	rjmp	.-44     	; 0x1684 <__ultoa_invert+0x58>
    16b0:	b4 e0       	ldi	r27, 0x04	; 4
    16b2:	a6 95       	lsr	r26
    16b4:	97 95       	ror	r25
    16b6:	87 95       	ror	r24
    16b8:	77 95       	ror	r23
    16ba:	67 95       	ror	r22
    16bc:	ba 95       	dec	r27
    16be:	c9 f7       	brne	.-14     	; 0x16b2 <__ultoa_invert+0x86>
    16c0:	00 97       	sbiw	r24, 0x00	; 0
    16c2:	61 05       	cpc	r22, r1
    16c4:	71 05       	cpc	r23, r1
    16c6:	08 95       	ret
    16c8:	9b 01       	movw	r18, r22
    16ca:	ac 01       	movw	r20, r24
    16cc:	0a 2e       	mov	r0, r26
    16ce:	06 94       	lsr	r0
    16d0:	57 95       	ror	r21
    16d2:	47 95       	ror	r20
    16d4:	37 95       	ror	r19
    16d6:	27 95       	ror	r18
    16d8:	ba 95       	dec	r27
    16da:	c9 f7       	brne	.-14     	; 0x16ce <__ultoa_invert+0xa2>
    16dc:	62 0f       	add	r22, r18
    16de:	73 1f       	adc	r23, r19
    16e0:	84 1f       	adc	r24, r20
    16e2:	95 1f       	adc	r25, r21
    16e4:	a0 1d       	adc	r26, r0
    16e6:	08 95       	ret

000016e8 <__prologue_saves__>:
    16e8:	2f 92       	push	r2
    16ea:	3f 92       	push	r3
    16ec:	4f 92       	push	r4
    16ee:	5f 92       	push	r5
    16f0:	6f 92       	push	r6
    16f2:	7f 92       	push	r7
    16f4:	8f 92       	push	r8
    16f6:	9f 92       	push	r9
    16f8:	af 92       	push	r10
    16fa:	bf 92       	push	r11
    16fc:	cf 92       	push	r12
    16fe:	df 92       	push	r13
    1700:	ef 92       	push	r14
    1702:	ff 92       	push	r15
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	cf 93       	push	r28
    170a:	df 93       	push	r29
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
    1710:	ca 1b       	sub	r28, r26
    1712:	db 0b       	sbc	r29, r27
    1714:	0f b6       	in	r0, 0x3f	; 63
    1716:	f8 94       	cli
    1718:	de bf       	out	0x3e, r29	; 62
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	cd bf       	out	0x3d, r28	; 61
    171e:	09 94       	ijmp

00001720 <__epilogue_restores__>:
    1720:	2a 88       	ldd	r2, Y+18	; 0x12
    1722:	39 88       	ldd	r3, Y+17	; 0x11
    1724:	48 88       	ldd	r4, Y+16	; 0x10
    1726:	5f 84       	ldd	r5, Y+15	; 0x0f
    1728:	6e 84       	ldd	r6, Y+14	; 0x0e
    172a:	7d 84       	ldd	r7, Y+13	; 0x0d
    172c:	8c 84       	ldd	r8, Y+12	; 0x0c
    172e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1730:	aa 84       	ldd	r10, Y+10	; 0x0a
    1732:	b9 84       	ldd	r11, Y+9	; 0x09
    1734:	c8 84       	ldd	r12, Y+8	; 0x08
    1736:	df 80       	ldd	r13, Y+7	; 0x07
    1738:	ee 80       	ldd	r14, Y+6	; 0x06
    173a:	fd 80       	ldd	r15, Y+5	; 0x05
    173c:	0c 81       	ldd	r16, Y+4	; 0x04
    173e:	1b 81       	ldd	r17, Y+3	; 0x03
    1740:	aa 81       	ldd	r26, Y+2	; 0x02
    1742:	b9 81       	ldd	r27, Y+1	; 0x01
    1744:	ce 0f       	add	r28, r30
    1746:	d1 1d       	adc	r29, r1
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61
    1752:	ed 01       	movw	r28, r26
    1754:	08 95       	ret

00001756 <_exit>:
    1756:	f8 94       	cli

00001758 <__stop_program>:
    1758:	ff cf       	rjmp	.-2      	; 0x1758 <__stop_program>
