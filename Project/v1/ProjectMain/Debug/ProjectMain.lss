
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000202  00800100  000016d2  00001766  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000019  00800302  00800302  00001968  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001968  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000228  00000000  00000000  000019c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000022cd  00000000  00000000  00001bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d52  00000000  00000000  00003eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fdf  00000000  00000000  00004c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000520  00000000  00000000  00005bec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ae1  00000000  00000000  0000610c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000013cc  00000000  00000000  00006bed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001a8  00000000  00000000  00007fb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	c9 c1       	rjmp	.+914    	; 0x3a0 <__bad_interrupt>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <OLED_init+0x104>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e2 ed       	ldi	r30, 0xD2	; 210
     37c:	f6 e1       	ldi	r31, 0x16	; 22
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a2 30       	cpi	r26, 0x02	; 2
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a2 e0       	ldi	r26, 0x02	; 2
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ab 31       	cpi	r26, 0x1B	; 27
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	a2 d0       	rcall	.+324    	; 0x4e0 <main>
     39c:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
			retrieval_errors++;
		}
	}
	
	printf("SRAM test completed with\n %4d errors in write phase and\n%4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 0b 03 	sts	0x030B, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 04 03 	sts	0x0304, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 03 03 	sts	0x0303, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 02 03 	sts	0x0302, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <statusMultifunctionBoard>:

// print status variables of Multifunction Board
void statusMultifunctionBoard(){
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
     412:	28 97       	sbiw	r28, 0x08	; 8
     414:	0f b6       	in	r0, 0x3f	; 63
     416:	f8 94       	cli
     418:	de bf       	out	0x3e, r29	; 62
     41a:	0f be       	out	0x3f, r0	; 63
     41c:	cd bf       	out	0x3d, r28	; 61
	JOY_position_t currentJoyPosition;
	currentJoyPosition = JOY_getPosition();
     41e:	5c d2       	rcall	.+1208   	; 0x8d8 <JOY_getPosition>
     420:	29 83       	std	Y+1, r18	; 0x01
     422:	3a 83       	std	Y+2, r19	; 0x02
     424:	4b 83       	std	Y+3, r20	; 0x03
     426:	5c 83       	std	Y+4, r21	; 0x04
     428:	6d 83       	std	Y+5, r22	; 0x05
     42a:	7e 83       	std	Y+6, r23	; 0x06
     42c:	8f 83       	std	Y+7, r24	; 0x07
     42e:	98 87       	std	Y+8, r25	; 0x08

	JOY_direction_t currentJoyDirection;
	currentJoyDirection = JOY_getDirection();
     430:	77 d2       	rcall	.+1262   	; 0x920 <JOY_getDirection>
     432:	7c 01       	movw	r14, r24

	SLI_position_t currentSliPosition;
	currentSliPosition = SLI_getPosition();
     434:	65 d4       	rcall	.+2250   	; 0xd00 <SLI_getPosition>
	uint8_t rightButton = 0;

	char directions[] = {'C', 'U', 'D', 'R', 'L'};
	char* dir;
	
	if((PINB & (1<<PB0)))
     436:	b0 99       	sbic	0x16, 0	; 22
     438:	06 c0       	rjmp	.+12     	; 0x446 <statusMultifunctionBoard+0x44>
		{
			//printf("Left button clicked ");
			leftButton = 1;
		}
		else if((PINE & (1<<PE2)))
     43a:	55 b1       	in	r21, 0x05	; 5
     43c:	52 fb       	bst	r21, 2
     43e:	55 27       	eor	r21, r21
     440:	50 f9       	bld	r21, 0
	currentJoyDirection = JOY_getDirection();

	SLI_position_t currentSliPosition;
	currentSliPosition = SLI_getPosition();
	
	uint8_t leftButton = 0;
     442:	40 e0       	ldi	r20, 0x00	; 0
     444:	02 c0       	rjmp	.+4      	; 0x44a <statusMultifunctionBoard+0x48>
	uint8_t rightButton = 0;
     446:	50 e0       	ldi	r21, 0x00	; 0
	char* dir;
	
	if((PINB & (1<<PB0)))
		{
			//printf("Left button clicked ");
			leftButton = 1;
     448:	41 e0       	ldi	r20, 0x01	; 1
		{
			//printf("Right button clicked ");
			rightButton = 1;
		}
		
	switch(currentJoyDirection)
     44a:	97 01       	movw	r18, r14
     44c:	33 27       	eor	r19, r19
     44e:	22 30       	cpi	r18, 0x02	; 2
     450:	31 05       	cpc	r19, r1
     452:	91 f0       	breq	.+36     	; 0x478 <statusMultifunctionBoard+0x76>
     454:	3c f4       	brge	.+14     	; 0x464 <statusMultifunctionBoard+0x62>
     456:	21 15       	cp	r18, r1
     458:	31 05       	cpc	r19, r1
     45a:	b9 f0       	breq	.+46     	; 0x48a <statusMultifunctionBoard+0x88>
     45c:	21 30       	cpi	r18, 0x01	; 1
     45e:	31 05       	cpc	r19, r1
     460:	41 f0       	breq	.+16     	; 0x472 <statusMultifunctionBoard+0x70>
     462:	15 c0       	rjmp	.+42     	; 0x48e <statusMultifunctionBoard+0x8c>
     464:	23 30       	cpi	r18, 0x03	; 3
     466:	31 05       	cpc	r19, r1
     468:	51 f0       	breq	.+20     	; 0x47e <statusMultifunctionBoard+0x7c>
     46a:	24 30       	cpi	r18, 0x04	; 4
     46c:	31 05       	cpc	r19, r1
     46e:	51 f0       	breq	.+20     	; 0x484 <statusMultifunctionBoard+0x82>
     470:	0e c0       	rjmp	.+28     	; 0x48e <statusMultifunctionBoard+0x8c>

		dir = "CENTER";
		break;

		case 1:
		dir = "UP";
     472:	0a e9       	ldi	r16, 0x9A	; 154
     474:	11 e0       	ldi	r17, 0x01	; 1
		break;
     476:	0b c0       	rjmp	.+22     	; 0x48e <statusMultifunctionBoard+0x8c>

		case 2:
		dir = "DOWN";
     478:	0d e9       	ldi	r16, 0x9D	; 157
     47a:	11 e0       	ldi	r17, 0x01	; 1
		break;
     47c:	08 c0       	rjmp	.+16     	; 0x48e <statusMultifunctionBoard+0x8c>

		case 3:
		dir = "RIGHT";
     47e:	02 ea       	ldi	r16, 0xA2	; 162
     480:	11 e0       	ldi	r17, 0x01	; 1
		break;
     482:	05 c0       	rjmp	.+10     	; 0x48e <statusMultifunctionBoard+0x8c>

		case 4:
		dir = "LEFT";
     484:	08 ea       	ldi	r16, 0xA8	; 168
     486:	11 e0       	ldi	r17, 0x01	; 1
		break;
     488:	02 c0       	rjmp	.+4      	; 0x48e <statusMultifunctionBoard+0x8c>
		
	switch(currentJoyDirection)
	{
		case 0:

		dir = "CENTER";
     48a:	03 e9       	ldi	r16, 0x93	; 147
     48c:	11 e0       	ldi	r17, 0x01	; 1
		case 4:
		dir = "LEFT";
		break;
	}

	printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
     48e:	1f 92       	push	r1
     490:	5f 93       	push	r21
     492:	1f 92       	push	r1
     494:	4f 93       	push	r20
     496:	1f 92       	push	r1
     498:	8f 93       	push	r24
     49a:	1f 92       	push	r1
     49c:	9f 93       	push	r25
     49e:	88 85       	ldd	r24, Y+8	; 0x08
     4a0:	8f 93       	push	r24
     4a2:	8f 81       	ldd	r24, Y+7	; 0x07
     4a4:	8f 93       	push	r24
     4a6:	8e 81       	ldd	r24, Y+6	; 0x06
     4a8:	8f 93       	push	r24
     4aa:	8d 81       	ldd	r24, Y+5	; 0x05
     4ac:	8f 93       	push	r24
     4ae:	1f 93       	push	r17
     4b0:	0f 93       	push	r16
     4b2:	8d ea       	ldi	r24, 0xAD	; 173
     4b4:	91 e0       	ldi	r25, 0x01	; 1
     4b6:	9f 93       	push	r25
     4b8:	8f 93       	push	r24
     4ba:	0a d6       	rcall	.+3092   	; 0x10d0 <printf>
     4bc:	0f b6       	in	r0, 0x3f	; 63
     4be:	f8 94       	cli
     4c0:	de bf       	out	0x3e, r29	; 62
     4c2:	0f be       	out	0x3f, r0	; 63
     4c4:	cd bf       	out	0x3d, r28	; 61
}
     4c6:	28 96       	adiw	r28, 0x08	; 8
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	cd bf       	out	0x3d, r28	; 61
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	1f 91       	pop	r17
     4d8:	0f 91       	pop	r16
     4da:	ff 90       	pop	r15
     4dc:	ef 90       	pop	r14
     4de:	08 95       	ret

000004e0 <main>:
//#define ADDRESS 0x1400

int main(void)
{	
	// todo: write init() that calls all other init functions
	uartInit(BAUDRATE, FOSC, UBRR);
     4e0:	1f e1       	ldi	r17, 0x1F	; 31
     4e2:	e1 2e       	mov	r14, r17
     4e4:	f1 2c       	mov	r15, r1
     4e6:	00 e0       	ldi	r16, 0x00	; 0
     4e8:	10 e0       	ldi	r17, 0x00	; 0
     4ea:	20 e0       	ldi	r18, 0x00	; 0
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	4b e4       	ldi	r20, 0x4B	; 75
     4f0:	50 e0       	ldi	r21, 0x00	; 0
     4f2:	60 e8       	ldi	r22, 0x80	; 128
     4f4:	75 e2       	ldi	r23, 0x25	; 37
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	13 d4       	rcall	.+2086   	; 0xd22 <uartInit>
	enableXMEM(1);
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	5f d0       	rcall	.+190    	; 0x5be <enableXMEM>
	SLI_init();
     500:	c4 d3       	rcall	.+1928   	; 0xc8a <SLI_init>
	JOY_init();
     502:	6f d0       	rcall	.+222    	; 0x5e2 <JOY_init>
	
	//init external interrupt INT0 on falling edge
	set_bit(GICR, INT0);
     504:	8b b7       	in	r24, 0x3b	; 59
     506:	80 64       	ori	r24, 0x40	; 64
     508:	8b bf       	out	0x3b, r24	; 59
	set_bit(MCUCR, ISC01);
     50a:	85 b7       	in	r24, 0x35	; 53
     50c:	82 60       	ori	r24, 0x02	; 2
     50e:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC00);
     510:	85 b7       	in	r24, 0x35	; 53
     512:	8e 7f       	andi	r24, 0xFE	; 254
     514:	85 bf       	out	0x35, r24	; 53
	
	//Pull-up on PD3
	clear_bit(DDRD, PD3);
     516:	8b 98       	cbi	0x11, 3	; 17
	set_bit(PORTD, PD3);
     518:	93 9a       	sbi	0x12, 3	; 18
	
	//init external interrupt INT1 on falling edge
	set_bit(GICR, INT1);
     51a:	8b b7       	in	r24, 0x3b	; 59
     51c:	80 68       	ori	r24, 0x80	; 128
     51e:	8b bf       	out	0x3b, r24	; 59
	set_bit(MCUCR, ISC11);
     520:	85 b7       	in	r24, 0x35	; 53
     522:	88 60       	ori	r24, 0x08	; 8
     524:	85 bf       	out	0x35, r24	; 53
	clear_bit(MCUCR, ISC10);
     526:	85 b7       	in	r24, 0x35	; 53
     528:	8b 7f       	andi	r24, 0xFB	; 251
     52a:	85 bf       	out	0x35, r24	; 53
	////init external interrupt INT2 on falling edge
	//set_bit(GICR, INT2);
	//clear_bit(EMCUCR, ISC2);
	
	//PE2
	clear_bit(DDRE, PE2);
     52c:	32 98       	cbi	0x06, 2	; 6
	clear_bit(PORTE, PE2);
     52e:	3a 98       	cbi	0x07, 2	; 7
	
	//PB0
	clear_bit(DDRB, PB0);
     530:	b8 98       	cbi	0x17, 0	; 23
	clear_bit(PORTB, PB0);
     532:	c0 98       	cbi	0x18, 0	; 24
	

	
	sei();
     534:	78 94       	sei

	//SRAM_test();
	JOY_requestCurrentPosition('x');
     536:	88 e7       	ldi	r24, 0x78	; 120
     538:	53 d1       	rcall	.+678    	; 0x7e0 <JOY_requestCurrentPosition>
	OLED_init();
     53a:	81 d2       	rcall	.+1282   	; 0xa3e <OLED_init>
	OLED_clear();
     53c:	3e d3       	rcall	.+1660   	; 0xbba <OLED_clear>
	MENU_init();
     53e:	5f d2       	rcall	.+1214   	; 0x9fe <MENU_init>
				break;
				
				case 4:	//slider_right
					SLI_updatePosition('r');
					JOY_requestCurrentPosition('x');
					currentChannel = 1;
     540:	c1 e0       	ldi	r28, 0x01	; 1
	//OLED_print_string("Set difficulty");
	

    while(1)
    {	
		statusMultifunctionBoard();
     542:	5f df       	rcall	.-322    	; 0x402 <statusMultifunctionBoard>

		// todo: remove! will be included in the menu driver later
		if(JOYcalibFlag)
     544:	80 91 02 03 	lds	r24, 0x0302
     548:	88 23       	and	r24, r24
     54a:	19 f0       	breq	.+6      	; 0x552 <__stack+0x53>
		{
			//run joystick calibration
			JOY_calibrate();
     54c:	5d d0       	rcall	.+186    	; 0x608 <JOY_calibrate>
			JOYcalibFlag = 0;
     54e:	10 92 02 03 	sts	0x0302, r1
		}

		// todo: add ADconversion complete handling function to shrink the main method
		if(ADCconversionCompletedFlag)
     552:	80 91 03 03 	lds	r24, 0x0303
     556:	88 23       	and	r24, r24
     558:	a1 f3       	breq	.-24     	; 0x542 <__stack+0x43>
		{
			switch(currentChannel){
     55a:	80 91 08 01 	lds	r24, 0x0108
     55e:	82 30       	cpi	r24, 0x02	; 2
     560:	99 f0       	breq	.+38     	; 0x588 <__stack+0x89>
     562:	18 f4       	brcc	.+6      	; 0x56a <__stack+0x6b>
     564:	81 30       	cpi	r24, 0x01	; 1
     566:	31 f0       	breq	.+12     	; 0x574 <__stack+0x75>
     568:	ec cf       	rjmp	.-40     	; 0x542 <__stack+0x43>
     56a:	83 30       	cpi	r24, 0x03	; 3
     56c:	b9 f0       	breq	.+46     	; 0x59c <__stack+0x9d>
     56e:	84 30       	cpi	r24, 0x04	; 4
     570:	f9 f0       	breq	.+62     	; 0x5b0 <__stack+0xb1>
     572:	e7 cf       	rjmp	.-50     	; 0x542 <__stack+0x43>
				case 1:	//X axis
					JOY_updatePosition('x');
     574:	88 e7       	ldi	r24, 0x78	; 120
     576:	6d d1       	rcall	.+730    	; 0x852 <JOY_updatePosition>
					JOY_requestCurrentPosition('y');
     578:	89 e7       	ldi	r24, 0x79	; 121
     57a:	32 d1       	rcall	.+612    	; 0x7e0 <JOY_requestCurrentPosition>
					currentChannel++;
     57c:	80 91 08 01 	lds	r24, 0x0108
     580:	8f 5f       	subi	r24, 0xFF	; 255
     582:	80 93 08 01 	sts	0x0108, r24
				break;	
     586:	dd cf       	rjmp	.-70     	; 0x542 <__stack+0x43>
				
				case 2:	//Y_axis
					JOY_updatePosition('y');
     588:	89 e7       	ldi	r24, 0x79	; 121
     58a:	63 d1       	rcall	.+710    	; 0x852 <JOY_updatePosition>
					SLI_requestCurrentPosition('l');
     58c:	8c e6       	ldi	r24, 0x6C	; 108
     58e:	86 d3       	rcall	.+1804   	; 0xc9c <SLI_requestCurrentPosition>
					currentChannel++;
     590:	80 91 08 01 	lds	r24, 0x0108
     594:	8f 5f       	subi	r24, 0xFF	; 255
     596:	80 93 08 01 	sts	0x0108, r24
				break;
     59a:	d3 cf       	rjmp	.-90     	; 0x542 <__stack+0x43>
				
				case 3: //slider_left
					SLI_updatePosition('l');
     59c:	8c e6       	ldi	r24, 0x6C	; 108
     59e:	90 d3       	rcall	.+1824   	; 0xcc0 <SLI_updatePosition>
					SLI_requestCurrentPosition('r');
     5a0:	82 e7       	ldi	r24, 0x72	; 114
     5a2:	7c d3       	rcall	.+1784   	; 0xc9c <SLI_requestCurrentPosition>
					currentChannel++;
     5a4:	80 91 08 01 	lds	r24, 0x0108
     5a8:	8f 5f       	subi	r24, 0xFF	; 255
     5aa:	80 93 08 01 	sts	0x0108, r24
				break;
     5ae:	c9 cf       	rjmp	.-110    	; 0x542 <__stack+0x43>
				
				case 4:	//slider_right
					SLI_updatePosition('r');
     5b0:	82 e7       	ldi	r24, 0x72	; 114
     5b2:	86 d3       	rcall	.+1804   	; 0xcc0 <SLI_updatePosition>
					JOY_requestCurrentPosition('x');
     5b4:	88 e7       	ldi	r24, 0x78	; 120
     5b6:	14 d1       	rcall	.+552    	; 0x7e0 <JOY_requestCurrentPosition>
					currentChannel = 1;
     5b8:	c0 93 08 01 	sts	0x0108, r28
				break;
     5bc:	c2 cf       	rjmp	.-124    	; 0x542 <__stack+0x43>

000005be <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     5be:	95 b7       	in	r25, 0x35	; 53
     5c0:	90 68       	ori	r25, 0x80	; 128
     5c2:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     5c4:	96 b7       	in	r25, 0x36	; 54
     5c6:	98 60       	ori	r25, 0x08	; 8
     5c8:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     5ca:	88 23       	and	r24, r24
     5cc:	19 f0       	breq	.+6      	; 0x5d4 <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     5ce:	80 b7       	in	r24, 0x30	; 48
     5d0:	80 62       	ori	r24, 0x20	; 32
     5d2:	80 bf       	out	0x30, r24	; 48
     5d4:	08 95       	ret

000005d6 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     5d6:	fc 01       	movw	r30, r24
     5d8:	80 81       	ld	r24, Z
	return val;
}
     5da:	08 95       	ret

000005dc <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     5dc:	fc 01       	movw	r30, r24
     5de:	60 83       	st	Z, r22
     5e0:	08 95       	ret

000005e2 <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     5e2:	10 92 06 03 	sts	0x0306, r1
     5e6:	10 92 05 03 	sts	0x0305, r1
	currentPosition.Y_abs = 0;
     5ea:	10 92 08 03 	sts	0x0308, r1
     5ee:	10 92 07 03 	sts	0x0307, r1
	currentPosition.X_per = 0;
     5f2:	10 92 0a 03 	sts	0x030A, r1
     5f6:	10 92 09 03 	sts	0x0309, r1
	currentPosition.Y_per = 0;
     5fa:	10 92 0c 03 	sts	0x030C, r1
     5fe:	10 92 0b 03 	sts	0x030B, r1
	currentDirection = CENTRE;
     602:	10 92 0c 03 	sts	0x030C, r1
     606:	08 95       	ret

00000608 <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
	uint8_t temp = 0;
	
	printf("Move JOY to the right\n");
     60c:	80 ef       	ldi	r24, 0xF0	; 240
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	70 d5       	rcall	.+2784   	; 0x10f2 <puts>
     612:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     614:	4f ef       	ldi	r20, 0xFF	; 255
     616:	52 e0       	ldi	r21, 0x02	; 2
     618:	21 50       	subi	r18, 0x01	; 1
     61a:	40 40       	sbci	r20, 0x00	; 0
     61c:	50 40       	sbci	r21, 0x00	; 0
     61e:	e1 f7       	brne	.-8      	; 0x618 <JOY_calibrate+0x10>
     620:	00 c0       	rjmp	.+0      	; 0x622 <JOY_calibrate+0x1a>
     622:	00 c0       	rjmp	.+0      	; 0x624 <JOY_calibrate+0x1c>
     624:	c4 e1       	ldi	r28, 0x14	; 20
     626:	d0 e0       	ldi	r29, 0x00	; 0
     628:	60 91 06 01 	lds	r22, 0x0106
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     62c:	70 91 07 01 	lds	r23, 0x0107
     630:	82 e0       	ldi	r24, 0x02	; 2
     632:	90 d3       	rcall	.+1824   	; 0xd54 <ADC_request>
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	90 ef       	ldi	r25, 0xF0	; 240
     638:	01 97       	sbiw	r24, 0x01	; 1
     63a:	f1 f7       	brne	.-4      	; 0x638 <JOY_calibrate+0x30>
     63c:	80 91 06 01 	lds	r24, 0x0106
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     640:	90 91 07 01 	lds	r25, 0x0107
     644:	ab d3       	rcall	.+1878   	; 0xd9c <ADC_read>
     646:	90 91 0e 01 	lds	r25, 0x010E
     64a:	98 17       	cp	r25, r24
		
		if(temp > calR) {calR = temp;}
     64c:	10 f4       	brcc	.+4      	; 0x652 <JOY_calibrate+0x4a>
     64e:	80 93 0e 01 	sts	0x010E, r24
     652:	21 97       	sbiw	r28, 0x01	; 1
     654:	20 97       	sbiw	r28, 0x00	; 0
     656:	41 f7       	brne	.-48     	; 0x628 <JOY_calibrate+0x20>
     658:	86 e0       	ldi	r24, 0x06	; 6
	uint8_t temp = 0;
	
	printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     65a:	92 e0       	ldi	r25, 0x02	; 2
     65c:	4a d5       	rcall	.+2708   	; 0x10f2 <puts>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	printf("Move JOY to the left\n");
     65e:	9f ef       	ldi	r25, 0xFF	; 255
     660:	2f ef       	ldi	r18, 0xFF	; 255
     662:	42 e0       	ldi	r20, 0x02	; 2
     664:	91 50       	subi	r25, 0x01	; 1
     666:	20 40       	sbci	r18, 0x00	; 0
     668:	40 40       	sbci	r20, 0x00	; 0
     66a:	e1 f7       	brne	.-8      	; 0x664 <JOY_calibrate+0x5c>
     66c:	00 c0       	rjmp	.+0      	; 0x66e <JOY_calibrate+0x66>
     66e:	00 c0       	rjmp	.+0      	; 0x670 <JOY_calibrate+0x68>
     670:	c4 e1       	ldi	r28, 0x14	; 20
     672:	d0 e0       	ldi	r29, 0x00	; 0
     674:	60 91 06 01 	lds	r22, 0x0106
     678:	70 91 07 01 	lds	r23, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     67c:	82 e0       	ldi	r24, 0x02	; 2
     67e:	6a d3       	rcall	.+1748   	; 0xd54 <ADC_request>
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	90 ef       	ldi	r25, 0xF0	; 240
     684:	01 97       	sbiw	r24, 0x01	; 1
     686:	f1 f7       	brne	.-4      	; 0x684 <JOY_calibrate+0x7c>
     688:	80 91 06 01 	lds	r24, 0x0106
     68c:	90 91 07 01 	lds	r25, 0x0107
     690:	85 d3       	rcall	.+1802   	; 0xd9c <ADC_read>
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     692:	90 91 0d 01 	lds	r25, 0x010D
     696:	89 17       	cp	r24, r25
     698:	10 f4       	brcc	.+4      	; 0x69e <JOY_calibrate+0x96>
     69a:	80 93 0d 01 	sts	0x010D, r24
		
		if(temp < calL) {calL = temp;}
     69e:	21 97       	sbiw	r28, 0x01	; 1
     6a0:	20 97       	sbiw	r28, 0x00	; 0
     6a2:	41 f7       	brne	.-48     	; 0x674 <JOY_calibrate+0x6c>
     6a4:	8b e1       	ldi	r24, 0x1B	; 27
     6a6:	92 e0       	ldi	r25, 0x02	; 2
     6a8:	24 d5       	rcall	.+2632   	; 0x10f2 <puts>
     6aa:	9f ef       	ldi	r25, 0xFF	; 255
	}
	
	printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     6ac:	2f ef       	ldi	r18, 0xFF	; 255
     6ae:	42 e0       	ldi	r20, 0x02	; 2
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	printf("Move JOY up\n");
     6b0:	91 50       	subi	r25, 0x01	; 1
     6b2:	20 40       	sbci	r18, 0x00	; 0
     6b4:	40 40       	sbci	r20, 0x00	; 0
     6b6:	e1 f7       	brne	.-8      	; 0x6b0 <JOY_calibrate+0xa8>
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <JOY_calibrate+0xb2>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <JOY_calibrate+0xb4>
     6bc:	c4 e1       	ldi	r28, 0x14	; 20
     6be:	d0 e0       	ldi	r29, 0x00	; 0
     6c0:	60 91 06 01 	lds	r22, 0x0106
     6c4:	70 91 07 01 	lds	r23, 0x0107
     6c8:	81 e0       	ldi	r24, 0x01	; 1
     6ca:	44 d3       	rcall	.+1672   	; 0xd54 <ADC_request>
     6cc:	80 e0       	ldi	r24, 0x00	; 0
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     6ce:	90 ef       	ldi	r25, 0xF0	; 240
     6d0:	01 97       	sbiw	r24, 0x01	; 1
     6d2:	f1 f7       	brne	.-4      	; 0x6d0 <JOY_calibrate+0xc8>
     6d4:	80 91 06 01 	lds	r24, 0x0106
     6d8:	90 91 07 01 	lds	r25, 0x0107
     6dc:	5f d3       	rcall	.+1726   	; 0xd9c <ADC_read>
     6de:	90 91 0c 01 	lds	r25, 0x010C
     6e2:	98 17       	cp	r25, r24
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     6e4:	10 f4       	brcc	.+4      	; 0x6ea <JOY_calibrate+0xe2>
     6e6:	80 93 0c 01 	sts	0x010C, r24
     6ea:	21 97       	sbiw	r28, 0x01	; 1
     6ec:	20 97       	sbiw	r28, 0x00	; 0
     6ee:	41 f7       	brne	.-48     	; 0x6c0 <JOY_calibrate+0xb8>
		
		if(temp > calUp) {calUp = temp;}
     6f0:	87 e2       	ldi	r24, 0x27	; 39
     6f2:	92 e0       	ldi	r25, 0x02	; 2
     6f4:	fe d4       	rcall	.+2556   	; 0x10f2 <puts>
     6f6:	9f ef       	ldi	r25, 0xFF	; 255
     6f8:	2f ef       	ldi	r18, 0xFF	; 255
     6fa:	42 e0       	ldi	r20, 0x02	; 2
     6fc:	91 50       	subi	r25, 0x01	; 1
	}
	
	printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     6fe:	20 40       	sbci	r18, 0x00	; 0
     700:	40 40       	sbci	r20, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	printf("Move JOY down\n");
     702:	e1 f7       	brne	.-8      	; 0x6fc <JOY_calibrate+0xf4>
     704:	00 c0       	rjmp	.+0      	; 0x706 <JOY_calibrate+0xfe>
     706:	00 c0       	rjmp	.+0      	; 0x708 <JOY_calibrate+0x100>
     708:	c4 e1       	ldi	r28, 0x14	; 20
     70a:	d0 e0       	ldi	r29, 0x00	; 0
     70c:	60 91 06 01 	lds	r22, 0x0106
     710:	70 91 07 01 	lds	r23, 0x0107
     714:	81 e0       	ldi	r24, 0x01	; 1
     716:	1e d3       	rcall	.+1596   	; 0xd54 <ADC_request>
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	90 ef       	ldi	r25, 0xF0	; 240
     71c:	01 97       	sbiw	r24, 0x01	; 1
     71e:	f1 f7       	brne	.-4      	; 0x71c <JOY_calibrate+0x114>
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     720:	80 91 06 01 	lds	r24, 0x0106
     724:	90 91 07 01 	lds	r25, 0x0107
     728:	39 d3       	rcall	.+1650   	; 0xd9c <ADC_read>
     72a:	90 91 0b 01 	lds	r25, 0x010B
     72e:	89 17       	cp	r24, r25
     730:	10 f4       	brcc	.+4      	; 0x736 <JOY_calibrate+0x12e>
     732:	80 93 0b 01 	sts	0x010B, r24
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     736:	21 97       	sbiw	r28, 0x01	; 1
     738:	20 97       	sbiw	r28, 0x00	; 0
     73a:	41 f7       	brne	.-48     	; 0x70c <JOY_calibrate+0x104>
     73c:	30 91 0b 01 	lds	r19, 0x010B
     740:	20 91 0c 01 	lds	r18, 0x010C
		
		if(temp < calDown) {calDown = temp;}
     744:	90 91 0d 01 	lds	r25, 0x010D
     748:	80 91 0e 01 	lds	r24, 0x010E
     74c:	1f 92       	push	r1
     74e:	3f 93       	push	r19
	}
	
	printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     750:	1f 92       	push	r1
     752:	2f 93       	push	r18
		
		if(temp < calDown) {calDown = temp;}
	}
	
	
	printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
     754:	1f 92       	push	r1
     756:	9f 93       	push	r25
     758:	1f 92       	push	r1
     75a:	8f 93       	push	r24
     75c:	85 e3       	ldi	r24, 0x35	; 53
     75e:	92 e0       	ldi	r25, 0x02	; 2
     760:	9f 93       	push	r25
     762:	8f 93       	push	r24
     764:	b5 d4       	rcall	.+2410   	; 0x10d0 <printf>
     766:	20 91 0c 01 	lds	r18, 0x010C
     76a:	80 91 0b 01 	lds	r24, 0x010B
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	28 1b       	sub	r18, r24
     772:	31 09       	sbc	r19, r1
     774:	c9 01       	movw	r24, r18
     776:	4d b7       	in	r20, 0x3d	; 61
     778:	5e b7       	in	r21, 0x3e	; 62
     77a:	46 5f       	subi	r20, 0xF6	; 246
     77c:	5f 4f       	sbci	r21, 0xFF	; 255
     77e:	0f b6       	in	r0, 0x3f	; 63
	
	meanVert = (calUp - calDown)/2;
     780:	f8 94       	cli
     782:	5e bf       	out	0x3e, r21	; 62
     784:	0f be       	out	0x3f, r0	; 63
     786:	4d bf       	out	0x3d, r20	; 61
     788:	99 23       	and	r25, r25
     78a:	0c f4       	brge	.+2      	; 0x78e <JOY_calibrate+0x186>
     78c:	01 96       	adiw	r24, 0x01	; 1
     78e:	95 95       	asr	r25
     790:	87 95       	ror	r24
     792:	80 93 0a 01 	sts	0x010A, r24
     796:	20 91 0e 01 	lds	r18, 0x010E
     79a:	80 91 0d 01 	lds	r24, 0x010D
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	28 1b       	sub	r18, r24
     7a2:	31 09       	sbc	r19, r1
     7a4:	c9 01       	movw	r24, r18
     7a6:	99 23       	and	r25, r25
     7a8:	0c f4       	brge	.+2      	; 0x7ac <JOY_calibrate+0x1a4>
     7aa:	01 96       	adiw	r24, 0x01	; 1
     7ac:	95 95       	asr	r25
     7ae:	87 95       	ror	r24
	meanHor = (calR - calL)/2;
     7b0:	80 93 09 01 	sts	0x0109, r24
     7b4:	90 91 09 01 	lds	r25, 0x0109
     7b8:	80 91 0a 01 	lds	r24, 0x010A
     7bc:	1f 92       	push	r1
     7be:	9f 93       	push	r25
     7c0:	1f 92       	push	r1
     7c2:	8f 93       	push	r24
     7c4:	8f e5       	ldi	r24, 0x5F	; 95
     7c6:	92 e0       	ldi	r25, 0x02	; 2
     7c8:	9f 93       	push	r25
     7ca:	8f 93       	push	r24
     7cc:	81 d4       	rcall	.+2306   	; 0x10d0 <printf>
	
	printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
     7d2:	0f 90       	pop	r0
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	0f 90       	pop	r0
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <JOY_requestCurrentPosition>:
     7e0:	88 37       	cpi	r24, 0x78	; 120
     7e2:	39 f4       	brne	.+14     	; 0x7f2 <JOY_requestCurrentPosition+0x12>
     7e4:	60 91 06 01 	lds	r22, 0x0106
     7e8:	70 91 07 01 	lds	r23, 0x0107
     7ec:	82 e0       	ldi	r24, 0x02	; 2
     7ee:	b2 c2       	rjmp	.+1380   	; 0xd54 <ADC_request>
     7f0:	08 95       	ret
     7f2:	89 37       	cpi	r24, 0x79	; 121
     7f4:	31 f4       	brne	.+12     	; 0x802 <JOY_requestCurrentPosition+0x22>
}
     7f6:	60 91 06 01 	lds	r22, 0x0106
     7fa:	70 91 07 01 	lds	r23, 0x0107
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
	{
		ADC_request(Y_channel, adc_ext_ram);
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	a9 c2       	rjmp	.+1362   	; 0xd54 <ADC_request>
     802:	08 95       	ret

00000804 <JOY_calculateDirection>:
     804:	80 91 09 03 	lds	r24, 0x0309
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 50) {
     808:	90 91 0a 03 	lds	r25, 0x030A
     80c:	83 33       	cpi	r24, 0x33	; 51
     80e:	91 05       	cpc	r25, r1
     810:	24 f0       	brlt	.+8      	; 0x81a <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     812:	83 e0       	ldi	r24, 0x03	; 3
     814:	80 93 0c 03 	sts	0x030C, r24
     818:	08 95       	ret
	else if(currentPosition.X_per < -50) {
     81a:	8e 3c       	cpi	r24, 0xCE	; 206
     81c:	9f 4f       	sbci	r25, 0xFF	; 255
     81e:	24 f4       	brge	.+8      	; 0x828 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     820:	84 e0       	ldi	r24, 0x04	; 4
     822:	80 93 0c 03 	sts	0x030C, r24
     826:	08 95       	ret
	else if(currentPosition.Y_per > 50) {
     828:	80 91 0b 03 	lds	r24, 0x030B
     82c:	90 91 0c 03 	lds	r25, 0x030C
     830:	83 33       	cpi	r24, 0x33	; 51
     832:	91 05       	cpc	r25, r1
     834:	24 f0       	brlt	.+8      	; 0x83e <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	80 93 0c 03 	sts	0x030C, r24
     83c:	08 95       	ret
	else if(currentPosition.Y_per < -50) {
     83e:	8e 3c       	cpi	r24, 0xCE	; 206
     840:	9f 4f       	sbci	r25, 0xFF	; 255
     842:	24 f4       	brge	.+8      	; 0x84c <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	80 93 0c 03 	sts	0x030C, r24
     84a:	08 95       	ret
	else{currentDirection = CENTRE;}
     84c:	10 92 0c 03 	sts	0x030C, r1
     850:	08 95       	ret

00000852 <JOY_updatePosition>:
// 2.) Calculate relative value X_per for position (-100% .. 100%) and write
// them to the current position.
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
     852:	88 37       	cpi	r24, 0x78	; 120
     854:	f9 f4       	brne	.+62     	; 0x894 <JOY_updatePosition+0x42>
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     856:	80 91 06 01 	lds	r24, 0x0106
     85a:	90 91 07 01 	lds	r25, 0x0107
     85e:	9e d2       	rcall	.+1340   	; 0xd9c <ADC_read>
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	90 93 06 03 	sts	0x0306, r25
     866:	80 93 05 03 	sts	0x0305, r24
     86a:	20 91 09 01 	lds	r18, 0x0109
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     86e:	60 91 09 01 	lds	r22, 0x0109
     872:	ac 01       	movw	r20, r24
     874:	42 1b       	sub	r20, r18
     876:	51 09       	sbc	r21, r1
     878:	9a 01       	movw	r18, r20
     87a:	44 e6       	ldi	r20, 0x64	; 100
     87c:	42 9f       	mul	r20, r18
     87e:	c0 01       	movw	r24, r0
     880:	43 9f       	mul	r20, r19
     882:	90 0d       	add	r25, r0
     884:	11 24       	eor	r1, r1
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	8b d2       	rcall	.+1302   	; 0xda0 <__divmodhi4>
     88a:	70 93 0a 03 	sts	0x030A, r23
     88e:	60 93 09 03 	sts	0x0309, r22
     892:	20 c0       	rjmp	.+64     	; 0x8d4 <JOY_updatePosition+0x82>
     894:	89 37       	cpi	r24, 0x79	; 121
     896:	f1 f4       	brne	.+60     	; 0x8d4 <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     898:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     89c:	90 91 07 01 	lds	r25, 0x0107
     8a0:	7d d2       	rcall	.+1274   	; 0xd9c <ADC_read>
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	90 93 08 03 	sts	0x0308, r25
     8a8:	80 93 07 03 	sts	0x0307, r24
     8ac:	20 91 0a 01 	lds	r18, 0x010A
     8b0:	60 91 0a 01 	lds	r22, 0x010A
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     8b4:	ac 01       	movw	r20, r24
     8b6:	42 1b       	sub	r20, r18
     8b8:	51 09       	sbc	r21, r1
     8ba:	9a 01       	movw	r18, r20
     8bc:	44 e6       	ldi	r20, 0x64	; 100
     8be:	42 9f       	mul	r20, r18
     8c0:	c0 01       	movw	r24, r0
     8c2:	43 9f       	mul	r20, r19
     8c4:	90 0d       	add	r25, r0
     8c6:	11 24       	eor	r1, r1
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	6a d2       	rcall	.+1236   	; 0xda0 <__divmodhi4>
     8cc:	70 93 0c 03 	sts	0x030C, r23
     8d0:	60 93 0b 03 	sts	0x030B, r22
     8d4:	97 cf       	rjmp	.-210    	; 0x804 <JOY_calculateDirection>
     8d6:	08 95       	ret

000008d8 <JOY_getPosition>:
     8d8:	cf 93       	push	r28
     8da:	df 93       	push	r29
	}
	
	JOY_calculateDirection();
     8dc:	cd b7       	in	r28, 0x3d	; 61
     8de:	de b7       	in	r29, 0x3e	; 62
     8e0:	28 97       	sbiw	r28, 0x08	; 8
}

//------------------------------------------------------------------------------
//
JOY_position_t JOY_getPosition()
{
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	de bf       	out	0x3e, r29	; 62
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	cd bf       	out	0x3d, r28	; 61
	return currentPosition;
     8ec:	88 e0       	ldi	r24, 0x08	; 8
     8ee:	e5 e0       	ldi	r30, 0x05	; 5
     8f0:	f3 e0       	ldi	r31, 0x03	; 3
     8f2:	de 01       	movw	r26, r28
     8f4:	11 96       	adiw	r26, 0x01	; 1
     8f6:	01 90       	ld	r0, Z+
     8f8:	0d 92       	st	X+, r0
     8fa:	8a 95       	dec	r24
     8fc:	e1 f7       	brne	.-8      	; 0x8f6 <JOY_getPosition+0x1e>
     8fe:	29 81       	ldd	r18, Y+1	; 0x01
     900:	3a 81       	ldd	r19, Y+2	; 0x02
     902:	4b 81       	ldd	r20, Y+3	; 0x03
     904:	5c 81       	ldd	r21, Y+4	; 0x04
     906:	6d 81       	ldd	r22, Y+5	; 0x05
     908:	7e 81       	ldd	r23, Y+6	; 0x06
}
     90a:	8f 81       	ldd	r24, Y+7	; 0x07
     90c:	98 85       	ldd	r25, Y+8	; 0x08
     90e:	28 96       	adiw	r28, 0x08	; 8
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	f8 94       	cli
     914:	de bf       	out	0x3e, r29	; 62
     916:	0f be       	out	0x3f, r0	; 63
     918:	cd bf       	out	0x3d, r28	; 61
     91a:	df 91       	pop	r29
     91c:	cf 91       	pop	r28
     91e:	08 95       	ret

00000920 <JOY_getDirection>:
//------------------------------------------------------------------------------
//
JOY_direction_t JOY_getDirection()
{
	return currentDirection;
}
     920:	80 91 0c 03 	lds	r24, 0x030C
     924:	08 95       	ret

00000926 <MENU_addMenuItem>:
	MENU_printMenu(mainMenu);
	
}

void MENU_addMenuItem(char* name, menuItemNode_t *parent, menuItemNode_t* currentMenu)
{
     926:	ef 92       	push	r14
     928:	ff 92       	push	r15
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	8c 01       	movw	r16, r24
     934:	7b 01       	movw	r14, r22
	if(mainMenu == NULL) //create first item for this menu
     936:	c0 91 09 03 	lds	r28, 0x0309
     93a:	d0 91 0a 03 	lds	r29, 0x030A
     93e:	20 97       	sbiw	r28, 0x00	; 0
     940:	99 f4       	brne	.+38     	; 0x968 <MENU_addMenuItem+0x42>
	{
		mainMenu = malloc(sizeof(menuItemNode_t));
     942:	86 e0       	ldi	r24, 0x06	; 6
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	53 d2       	rcall	.+1190   	; 0xdee <malloc>
     948:	fc 01       	movw	r30, r24
     94a:	90 93 0a 03 	sts	0x030A, r25
     94e:	80 93 09 03 	sts	0x0309, r24
     952:	11 83       	std	Z+1, r17	; 0x01
		mainMenu->text = name;
     954:	00 83       	st	Z, r16
     956:	13 82       	std	Z+3, r1	; 0x03
		mainMenu->next = NULL;
     958:	12 82       	std	Z+2, r1	; 0x02
     95a:	95 83       	std	Z+5, r25	; 0x05
		mainMenu->parentMenu = mainMenu;
     95c:	84 83       	std	Z+4, r24	; 0x04
     95e:	90 93 08 03 	sts	0x0308, r25
		currItem = mainMenu;
     962:	80 93 07 03 	sts	0x0307, r24
     966:	13 c0       	rjmp	.+38     	; 0x98e <MENU_addMenuItem+0x68>
     968:	86 e0       	ldi	r24, 0x06	; 6
	}
	else //next element
	{
		parent->next = malloc(sizeof(menuItemNode_t));
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	40 d2       	rcall	.+1152   	; 0xdee <malloc>
     96e:	fc 01       	movw	r30, r24
     970:	d7 01       	movw	r26, r14
     972:	13 96       	adiw	r26, 0x03	; 3
     974:	9c 93       	st	X, r25
     976:	8e 93       	st	-X, r24
     978:	12 97       	sbiw	r26, 0x02	; 2
     97a:	11 83       	std	Z+1, r17	; 0x01
     97c:	00 83       	st	Z, r16
		parent->next->text = name;
     97e:	13 82       	std	Z+3, r1	; 0x03
     980:	12 82       	std	Z+2, r1	; 0x02
		parent->next->next = NULL;
     982:	d5 83       	std	Z+5, r29	; 0x05
     984:	c4 83       	std	Z+4, r28	; 0x04
		parent->next->parentMenu = mainMenu;
     986:	90 93 08 03 	sts	0x0308, r25
		currItem = parent->next; //now current item (last item) points at the just created item
     98a:	80 93 07 03 	sts	0x0307, r24
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
	}
	
}
     992:	1f 91       	pop	r17
     994:	0f 91       	pop	r16
     996:	ff 90       	pop	r15
     998:	ef 90       	pop	r14
     99a:	08 95       	ret

0000099c <MENU_printMenuItem>:
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29

void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
     9a0:	ec 01       	movw	r28, r24
     9a2:	cb 01       	movw	r24, r22
	if(item != NULL)
     9a4:	20 97       	sbiw	r28, 0x00	; 0
     9a6:	49 f0       	breq	.+18     	; 0x9ba <MENU_printMenuItem+0x1e>
	{
		OLED_goto(lineNumber, menuFrameOffset);
     9a8:	60 91 1b 01 	lds	r22, 0x011B
     9ac:	70 91 1c 01 	lds	r23, 0x011C
     9b0:	ca d0       	rcall	.+404    	; 0xb46 <OLED_goto>
     9b2:	88 81       	ld	r24, Y
		OLED_print_string(item->text);
     9b4:	99 81       	ldd	r25, Y+1	; 0x01
     9b6:	4d d1       	rcall	.+666    	; 0xc52 <OLED_print_string>
     9b8:	07 c0       	rjmp	.+14     	; 0x9c8 <MENU_printMenuItem+0x2c>
     9ba:	84 e8       	ldi	r24, 0x84	; 132
     9bc:	92 e0       	ldi	r25, 0x02	; 2
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
     9be:	9f 93       	push	r25
     9c0:	8f 93       	push	r24
     9c2:	86 d3       	rcall	.+1804   	; 0x10d0 <printf>
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	08 95       	ret

000009ce <MENU_printMenu>:
	}
}
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	cf 93       	push	r28

void MENU_printMenu(menuItemNode_t* firstItem)
{
     9d4:	df 93       	push	r29
     9d6:	ec 01       	movw	r28, r24
	menuItemNode_t *item2print;
	item2print = firstItem;
	int lineNumber = 0;
	while(item2print != NULL)
     9d8:	00 97       	sbiw	r24, 0x00	; 0
     9da:	61 f0       	breq	.+24     	; 0x9f4 <MENU_printMenu+0x26>

void MENU_printMenu(menuItemNode_t* firstItem)
{
	menuItemNode_t *item2print;
	item2print = firstItem;
	int lineNumber = 0;
     9dc:	00 e0       	ldi	r16, 0x00	; 0
     9de:	10 e0       	ldi	r17, 0x00	; 0
	while(item2print != NULL)
	{
		MENU_printMenuItem(item2print, lineNumber);
     9e0:	b8 01       	movw	r22, r16
     9e2:	ce 01       	movw	r24, r28
     9e4:	db df       	rcall	.-74     	; 0x99c <MENU_printMenuItem>
     9e6:	0a 80       	ldd	r0, Y+2	; 0x02
		item2print = item2print->next;
     9e8:	db 81       	ldd	r29, Y+3	; 0x03
     9ea:	c0 2d       	mov	r28, r0
     9ec:	0f 5f       	subi	r16, 0xFF	; 255
		lineNumber++;
     9ee:	1f 4f       	sbci	r17, 0xFF	; 255
     9f0:	20 97       	sbiw	r28, 0x00	; 0
void MENU_printMenu(menuItemNode_t* firstItem)
{
	menuItemNode_t *item2print;
	item2print = firstItem;
	int lineNumber = 0;
	while(item2print != NULL)
     9f2:	b1 f7       	brne	.-20     	; 0x9e0 <MENU_printMenu+0x12>
     9f4:	df 91       	pop	r29
	{
		MENU_printMenuItem(item2print, lineNumber);
		item2print = item2print->next;
		lineNumber++;
	}
}
     9f6:	cf 91       	pop	r28
     9f8:	1f 91       	pop	r17
     9fa:	0f 91       	pop	r16
     9fc:	08 95       	ret

000009fe <MENU_init>:
     9fe:	0f 93       	push	r16
//******************************************************************************************
char *mainMenuItems[] = {"New Game", "Highscores", "Joy Calib", "Debugging", "Info", ":)"};
// char *difficultyMenuItems[] = {"easy", "medium", "hard"};

void MENU_init()
{
     a00:	1f 93       	push	r17
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	cf e0       	ldi	r28, 0x0F	; 15
     a08:	d1 e0       	ldi	r29, 0x01	; 1
     a0a:	0b e1       	ldi	r16, 0x1B	; 27
     a0c:	11 e0       	ldi	r17, 0x01	; 1
	//create main menu
	for(int i = 0; i < sizeof(mainMenuItems)/sizeof(char*); i++)
	{
		MENU_addMenuItem(mainMenuItems[i], currItem, mainMenu);
     a0e:	40 91 09 03 	lds	r20, 0x0309
     a12:	50 91 0a 03 	lds	r21, 0x030A
     a16:	60 91 07 03 	lds	r22, 0x0307
     a1a:	70 91 08 03 	lds	r23, 0x0308
     a1e:	89 91       	ld	r24, Y+
     a20:	99 91       	ld	r25, Y+
     a22:	81 df       	rcall	.-254    	; 0x926 <MENU_addMenuItem>
     a24:	c0 17       	cp	r28, r16
// char *difficultyMenuItems[] = {"easy", "medium", "hard"};

void MENU_init()
{
	//create main menu
	for(int i = 0; i < sizeof(mainMenuItems)/sizeof(char*); i++)
     a26:	d1 07       	cpc	r29, r17
     a28:	91 f7       	brne	.-28     	; 0xa0e <MENU_init+0x10>
     a2a:	80 91 09 03 	lds	r24, 0x0309
	{
		MENU_addMenuItem(mainMenuItems[i], currItem, mainMenu);
	}
	
	MENU_printMenu(mainMenu);
     a2e:	90 91 0a 03 	lds	r25, 0x030A
     a32:	cd df       	rcall	.-102    	; 0x9ce <MENU_printMenu>
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
	
}
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	08 95       	ret

00000a3e <OLED_init>:
int width = 128;		//screen width (128 columns)
int arrow_width = 5;	//depends on the arrow size

void OLED_init()
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
     a3e:	e0 91 23 01 	lds	r30, 0x0123
     a42:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a46:	8e ea       	ldi	r24, 0xAE	; 174
     a48:	80 83       	st	Z, r24
int arrow_width = 5;	//depends on the arrow size

void OLED_init()
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
     a4a:	e0 91 23 01 	lds	r30, 0x0123
     a4e:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a52:	81 ea       	ldi	r24, 0xA1	; 161
     a54:	80 83       	st	Z, r24

void OLED_init()
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
     a56:	e0 91 23 01 	lds	r30, 0x0123
     a5a:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a5e:	8a ed       	ldi	r24, 0xDA	; 218
     a60:	80 83       	st	Z, r24
void OLED_init()
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
     a62:	e0 91 23 01 	lds	r30, 0x0123
     a66:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a6a:	82 e1       	ldi	r24, 0x12	; 18
     a6c:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
     a6e:	e0 91 23 01 	lds	r30, 0x0123
     a72:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a76:	88 ec       	ldi	r24, 0xC8	; 200
     a78:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
     a7a:	e0 91 23 01 	lds	r30, 0x0123
     a7e:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a82:	88 ea       	ldi	r24, 0xA8	; 168
     a84:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
     a86:	e0 91 23 01 	lds	r30, 0x0123
     a8a:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a8e:	8f e3       	ldi	r24, 0x3F	; 63
     a90:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
     a92:	e0 91 23 01 	lds	r30, 0x0123
     a96:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     a9a:	85 ed       	ldi	r24, 0xD5	; 213
     a9c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
     a9e:	e0 91 23 01 	lds	r30, 0x0123
     aa2:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     aa6:	80 e8       	ldi	r24, 0x80	; 128
     aa8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
     aaa:	e0 91 23 01 	lds	r30, 0x0123
     aae:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ab2:	81 e8       	ldi	r24, 0x81	; 129
     ab4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
     ab6:	e0 91 23 01 	lds	r30, 0x0123
     aba:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     abe:	80 e5       	ldi	r24, 0x50	; 80
     ac0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
     ac2:	e0 91 23 01 	lds	r30, 0x0123
     ac6:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     aca:	89 ed       	ldi	r24, 0xD9	; 217
     acc:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
     ace:	e0 91 23 01 	lds	r30, 0x0123
     ad2:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ad6:	81 e2       	ldi	r24, 0x21	; 33
     ad8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
     ada:	e0 91 23 01 	lds	r30, 0x0123
     ade:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ae2:	80 e2       	ldi	r24, 0x20	; 32
     ae4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
     ae6:	e0 91 23 01 	lds	r30, 0x0123
     aea:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     aee:	82 e0       	ldi	r24, 0x02	; 2
     af0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50);
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
     af2:	e0 91 23 01 	lds	r30, 0x0123
     af6:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     afa:	8b ed       	ldi	r24, 0xDB	; 219
     afc:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
     afe:	e0 91 23 01 	lds	r30, 0x0123
     b02:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b06:	80 e3       	ldi	r24, 0x30	; 48
     b08:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
     b0a:	e0 91 23 01 	lds	r30, 0x0123
     b0e:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b12:	8d ea       	ldi	r24, 0xAD	; 173
     b14:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
     b16:	e0 91 23 01 	lds	r30, 0x0123
     b1a:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b1e:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
     b20:	e0 91 23 01 	lds	r30, 0x0123
     b24:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b28:	84 ea       	ldi	r24, 0xA4	; 164
     b2a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
     b2c:	e0 91 23 01 	lds	r30, 0x0123
     b30:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b34:	86 ea       	ldi	r24, 0xA6	; 166
     b36:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
     b38:	e0 91 23 01 	lds	r30, 0x0123
     b3c:	f0 91 24 01 	lds	r31, 0x0124
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b40:	8f ea       	ldi	r24, 0xAF	; 175
     b42:	80 83       	st	Z, r24
     b44:	08 95       	ret

00000b46 <OLED_goto>:
}

void OLED_goto(int row, int column)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
	//column should be 16 - 127
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row:
	row = 0xb0 + row;
     b4e:	ec 01       	movw	r28, r24
     b50:	c0 55       	subi	r28, 0x50	; 80
     b52:	df 4f       	sbci	r29, 0xFF	; 255

	// column:
	// lower nibble
	lnib = 0x0f & column;
     b54:	06 2f       	mov	r16, r22
     b56:	0f 70       	andi	r16, 0x0F	; 15
	lnib = 0x00 + lnib;

	// higher nibble
	hnib = column >> 4;
     b58:	75 95       	asr	r23
     b5a:	67 95       	ror	r22
     b5c:	75 95       	asr	r23
     b5e:	67 95       	ror	r22
     b60:	75 95       	asr	r23
     b62:	67 95       	ror	r22
     b64:	75 95       	asr	r23
     b66:	67 95       	ror	r22
	hnib = 0x10 + hnib;
     b68:	10 e1       	ldi	r17, 0x10	; 16
     b6a:	16 0f       	add	r17, r22

	printf("row: %#x,\thnib: %#x,\tlnib: %#x \n", row, hnib, lnib);
     b6c:	1f 92       	push	r1
     b6e:	0f 93       	push	r16
     b70:	1f 92       	push	r1
     b72:	1f 93       	push	r17
     b74:	df 93       	push	r29
     b76:	cf 93       	push	r28
     b78:	8b ec       	ldi	r24, 0xCB	; 203
     b7a:	92 e0       	ldi	r25, 0x02	; 2
     b7c:	9f 93       	push	r25
     b7e:	8f 93       	push	r24
     b80:	a7 d2       	rcall	.+1358   	; 0x10d0 <printf>
     b82:	e0 91 23 01 	lds	r30, 0x0123

	// get to page
	OLED_writeByteToOLED(oled_cmd, row);
     b86:	f0 91 24 01 	lds	r31, 0x0124
     b8a:	c0 83       	st	Z, r28
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b8c:	e0 91 23 01 	lds	r30, 0x0123

	printf("row: %#x,\thnib: %#x,\tlnib: %#x \n", row, hnib, lnib);

	// get to page
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
     b90:	f0 91 24 01 	lds	r31, 0x0124
     b94:	00 83       	st	Z, r16
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     b96:	e0 91 23 01 	lds	r30, 0x0123
	printf("row: %#x,\thnib: %#x,\tlnib: %#x \n", row, hnib, lnib);

	// get to page
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
     b9a:	f0 91 24 01 	lds	r31, 0x0124
     b9e:	10 83       	st	Z, r17
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ba0:	8d b7       	in	r24, 0x3d	; 61
     ba2:	9e b7       	in	r25, 0x3e	; 62
     ba4:	08 96       	adiw	r24, 0x08	; 8
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	9e bf       	out	0x3e, r25	; 62
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	8d bf       	out	0x3d, r24	; 61
     bb0:	df 91       	pop	r29
	// get to page
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
	
}
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	08 95       	ret

00000bba <OLED_clear>:
     bba:	cf 93       	push	r28
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
}

void OLED_clear()
{
     bbc:	df 93       	push	r29
	int count_row;
	int count_column;	

	for(count_row = 0; count_row < height; count_row++)
     bbe:	80 91 1f 01 	lds	r24, 0x011F
     bc2:	90 91 20 01 	lds	r25, 0x0120
     bc6:	18 16       	cp	r1, r24
     bc8:	19 06       	cpc	r1, r25
     bca:	2c f5       	brge	.+74     	; 0xc16 <OLED_clear+0x5c>
     bcc:	c0 e0       	ldi	r28, 0x00	; 0
     bce:	d0 e0       	ldi	r29, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row,0);
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	ce 01       	movw	r24, r28
     bd6:	b7 df       	rcall	.-146    	; 0xb46 <OLED_goto>
     bd8:	80 91 1d 01 	lds	r24, 0x011D

		for(count_column = 0; count_column < width; count_column++)
     bdc:	90 91 1e 01 	lds	r25, 0x011E
     be0:	18 16       	cp	r1, r24
     be2:	19 06       	cpc	r1, r25
     be4:	84 f4       	brge	.+32     	; 0xc06 <OLED_clear+0x4c>
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	e0 91 21 01 	lds	r30, 0x0121
		{
			OLED_writeByteToOLED(oled_data, 0x00);
     bee:	f0 91 22 01 	lds	r31, 0x0122
     bf2:	10 82       	st	Z, r1
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     bf4:	2f 5f       	subi	r18, 0xFF	; 255
	for(count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row,0);

		for(count_column = 0; count_column < width; count_column++)
     bf6:	3f 4f       	sbci	r19, 0xFF	; 255
     bf8:	40 91 1d 01 	lds	r20, 0x011D
     bfc:	50 91 1e 01 	lds	r21, 0x011E
     c00:	24 17       	cp	r18, r20
     c02:	35 07       	cpc	r19, r21
     c04:	94 f3       	brlt	.-28     	; 0xbea <OLED_clear+0x30>
     c06:	21 96       	adiw	r28, 0x01	; 1
void OLED_clear()
{
	int count_row;
	int count_column;	

	for(count_row = 0; count_row < height; count_row++)
     c08:	80 91 1f 01 	lds	r24, 0x011F
     c0c:	90 91 20 01 	lds	r25, 0x0120
     c10:	c8 17       	cp	r28, r24
     c12:	d9 07       	cpc	r29, r25
     c14:	ec f2       	brlt	.-70     	; 0xbd0 <OLED_clear+0x16>
     c16:	df 91       	pop	r29
		for(count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
     c18:	cf 91       	pop	r28
     c1a:	08 95       	ret

00000c1c <OLED_print_character>:
     c1c:	80 52       	subi	r24, 0x20	; 32
}

void OLED_print_character(uint8_t character)
{
	// subtract 32 from character ASCII-code to match SPACE to the first entry of the font array
	character = character-32;
     c1e:	28 2f       	mov	r18, r24
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	22 0f       	add	r18, r18
     c24:	33 1f       	adc	r19, r19
     c26:	22 0f       	add	r18, r18
     c28:	33 1f       	adc	r19, r19
     c2a:	22 0f       	add	r18, r18
     c2c:	33 1f       	adc	r19, r19
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	20 59       	subi	r18, 0x90	; 144
     c34:	3f 4f       	sbci	r19, 0xFF	; 255
     c36:	f9 01       	movw	r30, r18
     c38:	e8 0f       	add	r30, r24
     c3a:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
     c3c:	e4 91       	lpm	r30, Z
     c3e:	a0 91 21 01 	lds	r26, 0x0121
     c42:	b0 91 22 01 	lds	r27, 0x0122
	}
}

void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     c46:	ec 93       	st	X, r30
     c48:	01 96       	adiw	r24, 0x01	; 1
{
	// subtract 32 from character ASCII-code to match SPACE to the first entry of the font array
	character = character-32;
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
     c4a:	88 30       	cpi	r24, 0x08	; 8
     c4c:	91 05       	cpc	r25, r1
     c4e:	99 f7       	brne	.-26     	; 0xc36 <OLED_print_character+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
     c50:	08 95       	ret

00000c52 <OLED_print_string>:

void OLED_print_string(char* msg)
{
     c52:	1f 93       	push	r17
     c54:	cf 93       	push	r28
     c56:	df 93       	push	r29
     c58:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
     c5a:	10 e0       	ldi	r17, 0x00	; 0
     c5c:	06 c0       	rjmp	.+12     	; 0xc6a <OLED_print_string+0x18>
	{
		OLED_print_character(msg[i]);
     c5e:	fe 01       	movw	r30, r28
     c60:	e8 0f       	add	r30, r24
     c62:	f9 1f       	adc	r31, r25
     c64:	80 81       	ld	r24, Z
     c66:	da df       	rcall	.-76     	; 0xc1c <OLED_print_character>
     c68:	1f 5f       	subi	r17, 0xFF	; 255
	}
}

void OLED_print_string(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
     c6a:	81 2f       	mov	r24, r17
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	fe 01       	movw	r30, r28
     c70:	01 90       	ld	r0, Z+
     c72:	00 20       	and	r0, r0
     c74:	e9 f7       	brne	.-6      	; 0xc70 <OLED_print_string+0x1e>
     c76:	31 97       	sbiw	r30, 0x01	; 1
     c78:	ec 1b       	sub	r30, r28
     c7a:	fd 0b       	sbc	r31, r29
     c7c:	8e 17       	cp	r24, r30
     c7e:	9f 07       	cpc	r25, r31
     c80:	70 f3       	brcs	.-36     	; 0xc5e <OLED_print_string+0xc>
     c82:	df 91       	pop	r29
	{
		OLED_print_character(msg[i]);
	}
}
     c84:	cf 91       	pop	r28
     c86:	1f 91       	pop	r17
     c88:	08 95       	ret

00000c8a <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
     c8a:	10 92 0d 03 	sts	0x030D, r1
	currentSliPosition.L_abs = 0;
     c8e:	10 92 0e 03 	sts	0x030E, r1
	currentSliPosition.R_per = 0;
     c92:	10 92 0f 03 	sts	0x030F, r1
	currentSliPosition.L_per = 0;
     c96:	10 92 10 03 	sts	0x0310, r1
     c9a:	08 95       	ret

00000c9c <SLI_requestCurrentPosition>:

//------------------------------------------------------------------------------
// This function requests an AD conversion for the specified slider.
void SLI_requestCurrentPosition(uint8_t side)
{
	if(side == 'l')
     c9c:	8c 36       	cpi	r24, 0x6C	; 108
     c9e:	39 f4       	brne	.+14     	; 0xcae <SLI_requestCurrentPosition+0x12>
	{
		ADC_request(L_channel, adc_ext_ram);
     ca0:	60 91 06 01 	lds	r22, 0x0106
     ca4:	70 91 07 01 	lds	r23, 0x0107
     ca8:	83 e0       	ldi	r24, 0x03	; 3
     caa:	54 c0       	rjmp	.+168    	; 0xd54 <ADC_request>
     cac:	08 95       	ret
     cae:	82 37       	cpi	r24, 0x72	; 114
	}

	else if(side == 'r')
     cb0:	31 f4       	brne	.+12     	; 0xcbe <SLI_requestCurrentPosition+0x22>
     cb2:	60 91 06 01 	lds	r22, 0x0106
	{
		ADC_request(R_channel, adc_ext_ram);
     cb6:	70 91 07 01 	lds	r23, 0x0107
     cba:	84 e0       	ldi	r24, 0x04	; 4
     cbc:	4b c0       	rjmp	.+150    	; 0xd54 <ADC_request>
     cbe:	08 95       	ret

00000cc0 <SLI_updatePosition>:
     cc0:	8c 36       	cpi	r24, 0x6C	; 108
     cc2:	71 f4       	brne	.+28     	; 0xce0 <SLI_updatePosition+0x20>
// received.
void SLI_updatePosition(uint8_t side)
{
	if(side == 'l')
	{
		currentSliPosition.L_abs = ADC_read(adc_ext_ram);
     cc4:	80 91 06 01 	lds	r24, 0x0106
     cc8:	90 91 07 01 	lds	r25, 0x0107
     ccc:	67 d0       	rcall	.+206    	; 0xd9c <ADC_read>
     cce:	80 93 0e 03 	sts	0x030E, r24
     cd2:	24 e6       	ldi	r18, 0x64	; 100
		currentSliPosition.L_per = currentSliPosition.L_abs * 100 / 256;
     cd4:	82 9f       	mul	r24, r18
     cd6:	c0 01       	movw	r24, r0
     cd8:	11 24       	eor	r1, r1
     cda:	90 93 10 03 	sts	0x0310, r25
     cde:	08 95       	ret
     ce0:	82 37       	cpi	r24, 0x72	; 114
		//printf("CurrSliPos_L: %d, CurrSliPos_R: %d\n", currentSliPosition.L_per, currentSliPosition.R_per);
	}

	else if(side == 'r')
     ce2:	69 f4       	brne	.+26     	; 0xcfe <SLI_updatePosition+0x3e>
     ce4:	80 91 06 01 	lds	r24, 0x0106
	{
		currentSliPosition.R_abs = ADC_read(adc_ext_ram);
     ce8:	90 91 07 01 	lds	r25, 0x0107
     cec:	57 d0       	rcall	.+174    	; 0xd9c <ADC_read>
     cee:	80 93 0d 03 	sts	0x030D, r24
     cf2:	24 e6       	ldi	r18, 0x64	; 100
     cf4:	82 9f       	mul	r24, r18
		currentSliPosition.R_per = currentSliPosition.R_abs * 100 / 256;
     cf6:	c0 01       	movw	r24, r0
     cf8:	11 24       	eor	r1, r1
     cfa:	90 93 0f 03 	sts	0x030F, r25
     cfe:	08 95       	ret

00000d00 <SLI_getPosition>:
     d00:	60 91 0d 03 	lds	r22, 0x030D
}

//
SLI_position_t SLI_getPosition()
{
	return currentSliPosition;
     d04:	70 91 0e 03 	lds	r23, 0x030E
     d08:	80 91 0f 03 	lds	r24, 0x030F
     d0c:	90 91 10 03 	lds	r25, 0x0310
     d10:	08 95       	ret

00000d12 <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
     d12:	5d 9b       	sbis	0x0b, 5	; 11
     d14:	fe cf       	rjmp	.-4      	; 0xd12 <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
     d16:	8c b9       	out	0x0c, r24	; 12
     d18:	08 95       	ret

00000d1a <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
     d1a:	5f 9b       	sbis	0x0b, 7	; 11
     d1c:	fe cf       	rjmp	.-4      	; 0xd1a <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
     d1e:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
     d20:	08 95       	ret

00000d22 <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
     d22:	ef 92       	push	r14
     d24:	ff 92       	push	r15
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
     d2a:	bb 27       	eor	r27, r27
     d2c:	a1 2f       	mov	r26, r17
     d2e:	90 2f       	mov	r25, r16
     d30:	8f 2d       	mov	r24, r15
     d32:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
     d34:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     d36:	88 e1       	ldi	r24, 0x18	; 24
     d38:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
     d3a:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
     d3c:	8e e8       	ldi	r24, 0x8E	; 142
     d3e:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
     d40:	6d e8       	ldi	r22, 0x8D	; 141
     d42:	76 e0       	ldi	r23, 0x06	; 6
     d44:	89 e8       	ldi	r24, 0x89	; 137
     d46:	96 e0       	ldi	r25, 0x06	; 6
     d48:	79 d1       	rcall	.+754    	; 0x103c <fdevopen>
     d4a:	1f 91       	pop	r17
     d4c:	0f 91       	pop	r16
     d4e:	ff 90       	pop	r15
     d50:	ef 90       	pop	r14
     d52:	08 95       	ret

00000d54 <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
     d54:	9b 01       	movw	r18, r22
	
	switch(channel){
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	69 f0       	breq	.+26     	; 0xd74 <ADC_request+0x20>
     d5a:	18 f4       	brcc	.+6      	; 0xd62 <ADC_request+0xe>
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	31 f0       	breq	.+12     	; 0xd6c <ADC_request+0x18>
     d60:	15 c0       	rjmp	.+42     	; 0xd8c <ADC_request+0x38>
     d62:	83 30       	cpi	r24, 0x03	; 3
     d64:	59 f0       	breq	.+22     	; 0xd7c <ADC_request+0x28>
     d66:	84 30       	cpi	r24, 0x04	; 4
     d68:	69 f0       	breq	.+26     	; 0xd84 <ADC_request+0x30>
     d6a:	10 c0       	rjmp	.+32     	; 0xd8c <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
     d6c:	64 e0       	ldi	r22, 0x04	; 4
     d6e:	c9 01       	movw	r24, r18
     d70:	35 cc       	rjmp	.-1942   	; 0x5dc <saveToAddress>
     d72:	08 95       	ret
			break;
     d74:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
     d76:	c9 01       	movw	r24, r18
     d78:	31 cc       	rjmp	.-1950   	; 0x5dc <saveToAddress>
     d7a:	08 95       	ret
     d7c:	66 e0       	ldi	r22, 0x06	; 6
			break;
     d7e:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
     d80:	2d cc       	rjmp	.-1958   	; 0x5dc <saveToAddress>
     d82:	08 95       	ret
     d84:	67 e0       	ldi	r22, 0x07	; 7
     d86:	c9 01       	movw	r24, r18
			break;
     d88:	29 cc       	rjmp	.-1966   	; 0x5dc <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
     d8a:	08 95       	ret
     d8c:	8c ee       	ldi	r24, 0xEC	; 236
     d8e:	92 e0       	ldi	r25, 0x02	; 2
     d90:	9f 93       	push	r25
			break;
     d92:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
     d94:	9d d1       	rcall	.+826    	; 0x10d0 <printf>
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	08 95       	ret

00000d9c <ADC_read>:
     d9c:	1c cc       	rjmp	.-1992   	; 0x5d6 <readFromAddress>
     d9e:	08 95       	ret

00000da0 <__divmodhi4>:
			break;
     da0:	97 fb       	bst	r25, 7
     da2:	07 2e       	mov	r0, r23
     da4:	16 f4       	brtc	.+4      	; 0xdaa <__divmodhi4+0xa>
     da6:	00 94       	com	r0
     da8:	06 d0       	rcall	.+12     	; 0xdb6 <__divmodhi4_neg1>
     daa:	77 fd       	sbrc	r23, 7
     dac:	08 d0       	rcall	.+16     	; 0xdbe <__divmodhi4_neg2>
     dae:	0b d0       	rcall	.+22     	; 0xdc6 <__udivmodhi4>
     db0:	07 fc       	sbrc	r0, 7
     db2:	05 d0       	rcall	.+10     	; 0xdbe <__divmodhi4_neg2>
     db4:	3e f4       	brtc	.+14     	; 0xdc4 <__divmodhi4_exit>

00000db6 <__divmodhi4_neg1>:
     db6:	90 95       	com	r25
     db8:	81 95       	neg	r24
     dba:	9f 4f       	sbci	r25, 0xFF	; 255
     dbc:	08 95       	ret

00000dbe <__divmodhi4_neg2>:
     dbe:	70 95       	com	r23
     dc0:	61 95       	neg	r22
     dc2:	7f 4f       	sbci	r23, 0xFF	; 255

00000dc4 <__divmodhi4_exit>:
     dc4:	08 95       	ret

00000dc6 <__udivmodhi4>:
     dc6:	aa 1b       	sub	r26, r26
     dc8:	bb 1b       	sub	r27, r27
     dca:	51 e1       	ldi	r21, 0x11	; 17
     dcc:	07 c0       	rjmp	.+14     	; 0xddc <__udivmodhi4_ep>

00000dce <__udivmodhi4_loop>:
     dce:	aa 1f       	adc	r26, r26
     dd0:	bb 1f       	adc	r27, r27
     dd2:	a6 17       	cp	r26, r22
     dd4:	b7 07       	cpc	r27, r23
     dd6:	10 f0       	brcs	.+4      	; 0xddc <__udivmodhi4_ep>
     dd8:	a6 1b       	sub	r26, r22
     dda:	b7 0b       	sbc	r27, r23

00000ddc <__udivmodhi4_ep>:
     ddc:	88 1f       	adc	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	5a 95       	dec	r21
     de2:	a9 f7       	brne	.-22     	; 0xdce <__udivmodhi4_loop>
     de4:	80 95       	com	r24
     de6:	90 95       	com	r25
     de8:	bc 01       	movw	r22, r24
     dea:	cd 01       	movw	r24, r26
     dec:	08 95       	ret

00000dee <malloc>:
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	82 30       	cpi	r24, 0x02	; 2
     df4:	91 05       	cpc	r25, r1
     df6:	10 f4       	brcc	.+4      	; 0xdfc <malloc+0xe>
     df8:	82 e0       	ldi	r24, 0x02	; 2
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	e0 91 13 03 	lds	r30, 0x0313
     e00:	f0 91 14 03 	lds	r31, 0x0314
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	a0 e0       	ldi	r26, 0x00	; 0
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	30 97       	sbiw	r30, 0x00	; 0
     e0e:	39 f1       	breq	.+78     	; 0xe5e <malloc+0x70>
     e10:	40 81       	ld	r20, Z
     e12:	51 81       	ldd	r21, Z+1	; 0x01
     e14:	48 17       	cp	r20, r24
     e16:	59 07       	cpc	r21, r25
     e18:	b8 f0       	brcs	.+46     	; 0xe48 <malloc+0x5a>
     e1a:	48 17       	cp	r20, r24
     e1c:	59 07       	cpc	r21, r25
     e1e:	71 f4       	brne	.+28     	; 0xe3c <malloc+0x4e>
     e20:	82 81       	ldd	r24, Z+2	; 0x02
     e22:	93 81       	ldd	r25, Z+3	; 0x03
     e24:	10 97       	sbiw	r26, 0x00	; 0
     e26:	29 f0       	breq	.+10     	; 0xe32 <malloc+0x44>
     e28:	13 96       	adiw	r26, 0x03	; 3
     e2a:	9c 93       	st	X, r25
     e2c:	8e 93       	st	-X, r24
     e2e:	12 97       	sbiw	r26, 0x02	; 2
     e30:	2c c0       	rjmp	.+88     	; 0xe8a <malloc+0x9c>
     e32:	90 93 14 03 	sts	0x0314, r25
     e36:	80 93 13 03 	sts	0x0313, r24
     e3a:	27 c0       	rjmp	.+78     	; 0xe8a <malloc+0x9c>
     e3c:	21 15       	cp	r18, r1
     e3e:	31 05       	cpc	r19, r1
     e40:	31 f0       	breq	.+12     	; 0xe4e <malloc+0x60>
     e42:	42 17       	cp	r20, r18
     e44:	53 07       	cpc	r21, r19
     e46:	18 f0       	brcs	.+6      	; 0xe4e <malloc+0x60>
     e48:	a9 01       	movw	r20, r18
     e4a:	db 01       	movw	r26, r22
     e4c:	01 c0       	rjmp	.+2      	; 0xe50 <malloc+0x62>
     e4e:	ef 01       	movw	r28, r30
     e50:	9a 01       	movw	r18, r20
     e52:	bd 01       	movw	r22, r26
     e54:	df 01       	movw	r26, r30
     e56:	02 80       	ldd	r0, Z+2	; 0x02
     e58:	f3 81       	ldd	r31, Z+3	; 0x03
     e5a:	e0 2d       	mov	r30, r0
     e5c:	d7 cf       	rjmp	.-82     	; 0xe0c <malloc+0x1e>
     e5e:	21 15       	cp	r18, r1
     e60:	31 05       	cpc	r19, r1
     e62:	f9 f0       	breq	.+62     	; 0xea2 <malloc+0xb4>
     e64:	28 1b       	sub	r18, r24
     e66:	39 0b       	sbc	r19, r25
     e68:	24 30       	cpi	r18, 0x04	; 4
     e6a:	31 05       	cpc	r19, r1
     e6c:	80 f4       	brcc	.+32     	; 0xe8e <malloc+0xa0>
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	9b 81       	ldd	r25, Y+3	; 0x03
     e72:	61 15       	cp	r22, r1
     e74:	71 05       	cpc	r23, r1
     e76:	21 f0       	breq	.+8      	; 0xe80 <malloc+0x92>
     e78:	fb 01       	movw	r30, r22
     e7a:	93 83       	std	Z+3, r25	; 0x03
     e7c:	82 83       	std	Z+2, r24	; 0x02
     e7e:	04 c0       	rjmp	.+8      	; 0xe88 <malloc+0x9a>
     e80:	90 93 14 03 	sts	0x0314, r25
     e84:	80 93 13 03 	sts	0x0313, r24
     e88:	fe 01       	movw	r30, r28
     e8a:	32 96       	adiw	r30, 0x02	; 2
     e8c:	44 c0       	rjmp	.+136    	; 0xf16 <malloc+0x128>
     e8e:	fe 01       	movw	r30, r28
     e90:	e2 0f       	add	r30, r18
     e92:	f3 1f       	adc	r31, r19
     e94:	81 93       	st	Z+, r24
     e96:	91 93       	st	Z+, r25
     e98:	22 50       	subi	r18, 0x02	; 2
     e9a:	31 09       	sbc	r19, r1
     e9c:	39 83       	std	Y+1, r19	; 0x01
     e9e:	28 83       	st	Y, r18
     ea0:	3a c0       	rjmp	.+116    	; 0xf16 <malloc+0x128>
     ea2:	20 91 11 03 	lds	r18, 0x0311
     ea6:	30 91 12 03 	lds	r19, 0x0312
     eaa:	23 2b       	or	r18, r19
     eac:	41 f4       	brne	.+16     	; 0xebe <malloc+0xd0>
     eae:	20 91 02 01 	lds	r18, 0x0102
     eb2:	30 91 03 01 	lds	r19, 0x0103
     eb6:	30 93 12 03 	sts	0x0312, r19
     eba:	20 93 11 03 	sts	0x0311, r18
     ebe:	20 91 00 01 	lds	r18, 0x0100
     ec2:	30 91 01 01 	lds	r19, 0x0101
     ec6:	21 15       	cp	r18, r1
     ec8:	31 05       	cpc	r19, r1
     eca:	41 f4       	brne	.+16     	; 0xedc <malloc+0xee>
     ecc:	2d b7       	in	r18, 0x3d	; 61
     ece:	3e b7       	in	r19, 0x3e	; 62
     ed0:	40 91 04 01 	lds	r20, 0x0104
     ed4:	50 91 05 01 	lds	r21, 0x0105
     ed8:	24 1b       	sub	r18, r20
     eda:	35 0b       	sbc	r19, r21
     edc:	e0 91 11 03 	lds	r30, 0x0311
     ee0:	f0 91 12 03 	lds	r31, 0x0312
     ee4:	e2 17       	cp	r30, r18
     ee6:	f3 07       	cpc	r31, r19
     ee8:	a0 f4       	brcc	.+40     	; 0xf12 <malloc+0x124>
     eea:	2e 1b       	sub	r18, r30
     eec:	3f 0b       	sbc	r19, r31
     eee:	28 17       	cp	r18, r24
     ef0:	39 07       	cpc	r19, r25
     ef2:	78 f0       	brcs	.+30     	; 0xf12 <malloc+0x124>
     ef4:	ac 01       	movw	r20, r24
     ef6:	4e 5f       	subi	r20, 0xFE	; 254
     ef8:	5f 4f       	sbci	r21, 0xFF	; 255
     efa:	24 17       	cp	r18, r20
     efc:	35 07       	cpc	r19, r21
     efe:	48 f0       	brcs	.+18     	; 0xf12 <malloc+0x124>
     f00:	4e 0f       	add	r20, r30
     f02:	5f 1f       	adc	r21, r31
     f04:	50 93 12 03 	sts	0x0312, r21
     f08:	40 93 11 03 	sts	0x0311, r20
     f0c:	81 93       	st	Z+, r24
     f0e:	91 93       	st	Z+, r25
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <malloc+0x128>
     f12:	e0 e0       	ldi	r30, 0x00	; 0
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	cf 01       	movw	r24, r30
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	08 95       	ret

00000f1e <free>:
     f1e:	cf 93       	push	r28
     f20:	df 93       	push	r29
     f22:	00 97       	sbiw	r24, 0x00	; 0
     f24:	09 f4       	brne	.+2      	; 0xf28 <free+0xa>
     f26:	87 c0       	rjmp	.+270    	; 0x1036 <free+0x118>
     f28:	fc 01       	movw	r30, r24
     f2a:	32 97       	sbiw	r30, 0x02	; 2
     f2c:	13 82       	std	Z+3, r1	; 0x03
     f2e:	12 82       	std	Z+2, r1	; 0x02
     f30:	c0 91 13 03 	lds	r28, 0x0313
     f34:	d0 91 14 03 	lds	r29, 0x0314
     f38:	20 97       	sbiw	r28, 0x00	; 0
     f3a:	81 f4       	brne	.+32     	; 0xf5c <free+0x3e>
     f3c:	20 81       	ld	r18, Z
     f3e:	31 81       	ldd	r19, Z+1	; 0x01
     f40:	28 0f       	add	r18, r24
     f42:	39 1f       	adc	r19, r25
     f44:	80 91 11 03 	lds	r24, 0x0311
     f48:	90 91 12 03 	lds	r25, 0x0312
     f4c:	82 17       	cp	r24, r18
     f4e:	93 07       	cpc	r25, r19
     f50:	79 f5       	brne	.+94     	; 0xfb0 <free+0x92>
     f52:	f0 93 12 03 	sts	0x0312, r31
     f56:	e0 93 11 03 	sts	0x0311, r30
     f5a:	6d c0       	rjmp	.+218    	; 0x1036 <free+0x118>
     f5c:	de 01       	movw	r26, r28
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	ae 17       	cp	r26, r30
     f64:	bf 07       	cpc	r27, r31
     f66:	50 f4       	brcc	.+20     	; 0xf7c <free+0x5e>
     f68:	12 96       	adiw	r26, 0x02	; 2
     f6a:	4d 91       	ld	r20, X+
     f6c:	5c 91       	ld	r21, X
     f6e:	13 97       	sbiw	r26, 0x03	; 3
     f70:	9d 01       	movw	r18, r26
     f72:	41 15       	cp	r20, r1
     f74:	51 05       	cpc	r21, r1
     f76:	09 f1       	breq	.+66     	; 0xfba <free+0x9c>
     f78:	da 01       	movw	r26, r20
     f7a:	f3 cf       	rjmp	.-26     	; 0xf62 <free+0x44>
     f7c:	b3 83       	std	Z+3, r27	; 0x03
     f7e:	a2 83       	std	Z+2, r26	; 0x02
     f80:	40 81       	ld	r20, Z
     f82:	51 81       	ldd	r21, Z+1	; 0x01
     f84:	84 0f       	add	r24, r20
     f86:	95 1f       	adc	r25, r21
     f88:	8a 17       	cp	r24, r26
     f8a:	9b 07       	cpc	r25, r27
     f8c:	71 f4       	brne	.+28     	; 0xfaa <free+0x8c>
     f8e:	8d 91       	ld	r24, X+
     f90:	9c 91       	ld	r25, X
     f92:	11 97       	sbiw	r26, 0x01	; 1
     f94:	84 0f       	add	r24, r20
     f96:	95 1f       	adc	r25, r21
     f98:	02 96       	adiw	r24, 0x02	; 2
     f9a:	91 83       	std	Z+1, r25	; 0x01
     f9c:	80 83       	st	Z, r24
     f9e:	12 96       	adiw	r26, 0x02	; 2
     fa0:	8d 91       	ld	r24, X+
     fa2:	9c 91       	ld	r25, X
     fa4:	13 97       	sbiw	r26, 0x03	; 3
     fa6:	93 83       	std	Z+3, r25	; 0x03
     fa8:	82 83       	std	Z+2, r24	; 0x02
     faa:	21 15       	cp	r18, r1
     fac:	31 05       	cpc	r19, r1
     fae:	29 f4       	brne	.+10     	; 0xfba <free+0x9c>
     fb0:	f0 93 14 03 	sts	0x0314, r31
     fb4:	e0 93 13 03 	sts	0x0313, r30
     fb8:	3e c0       	rjmp	.+124    	; 0x1036 <free+0x118>
     fba:	d9 01       	movw	r26, r18
     fbc:	13 96       	adiw	r26, 0x03	; 3
     fbe:	fc 93       	st	X, r31
     fc0:	ee 93       	st	-X, r30
     fc2:	12 97       	sbiw	r26, 0x02	; 2
     fc4:	4d 91       	ld	r20, X+
     fc6:	5d 91       	ld	r21, X+
     fc8:	a4 0f       	add	r26, r20
     fca:	b5 1f       	adc	r27, r21
     fcc:	ea 17       	cp	r30, r26
     fce:	fb 07       	cpc	r31, r27
     fd0:	79 f4       	brne	.+30     	; 0xff0 <free+0xd2>
     fd2:	80 81       	ld	r24, Z
     fd4:	91 81       	ldd	r25, Z+1	; 0x01
     fd6:	84 0f       	add	r24, r20
     fd8:	95 1f       	adc	r25, r21
     fda:	02 96       	adiw	r24, 0x02	; 2
     fdc:	d9 01       	movw	r26, r18
     fde:	11 96       	adiw	r26, 0x01	; 1
     fe0:	9c 93       	st	X, r25
     fe2:	8e 93       	st	-X, r24
     fe4:	82 81       	ldd	r24, Z+2	; 0x02
     fe6:	93 81       	ldd	r25, Z+3	; 0x03
     fe8:	13 96       	adiw	r26, 0x03	; 3
     fea:	9c 93       	st	X, r25
     fec:	8e 93       	st	-X, r24
     fee:	12 97       	sbiw	r26, 0x02	; 2
     ff0:	e0 e0       	ldi	r30, 0x00	; 0
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	9b 81       	ldd	r25, Y+3	; 0x03
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	19 f0       	breq	.+6      	; 0x1002 <free+0xe4>
     ffc:	fe 01       	movw	r30, r28
     ffe:	ec 01       	movw	r28, r24
    1000:	f9 cf       	rjmp	.-14     	; 0xff4 <free+0xd6>
    1002:	ce 01       	movw	r24, r28
    1004:	02 96       	adiw	r24, 0x02	; 2
    1006:	28 81       	ld	r18, Y
    1008:	39 81       	ldd	r19, Y+1	; 0x01
    100a:	82 0f       	add	r24, r18
    100c:	93 1f       	adc	r25, r19
    100e:	20 91 11 03 	lds	r18, 0x0311
    1012:	30 91 12 03 	lds	r19, 0x0312
    1016:	28 17       	cp	r18, r24
    1018:	39 07       	cpc	r19, r25
    101a:	69 f4       	brne	.+26     	; 0x1036 <free+0x118>
    101c:	30 97       	sbiw	r30, 0x00	; 0
    101e:	29 f4       	brne	.+10     	; 0x102a <free+0x10c>
    1020:	10 92 14 03 	sts	0x0314, r1
    1024:	10 92 13 03 	sts	0x0313, r1
    1028:	02 c0       	rjmp	.+4      	; 0x102e <free+0x110>
    102a:	13 82       	std	Z+3, r1	; 0x03
    102c:	12 82       	std	Z+2, r1	; 0x02
    102e:	d0 93 12 03 	sts	0x0312, r29
    1032:	c0 93 11 03 	sts	0x0311, r28
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	08 95       	ret

0000103c <fdevopen>:
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	ec 01       	movw	r28, r24
    1046:	8b 01       	movw	r16, r22
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	31 f4       	brne	.+12     	; 0x1058 <fdevopen+0x1c>
    104c:	61 15       	cp	r22, r1
    104e:	71 05       	cpc	r23, r1
    1050:	19 f4       	brne	.+6      	; 0x1058 <fdevopen+0x1c>
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	37 c0       	rjmp	.+110    	; 0x10c6 <fdevopen+0x8a>
    1058:	6e e0       	ldi	r22, 0x0E	; 14
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	38 d2       	rcall	.+1136   	; 0x14d2 <calloc>
    1062:	fc 01       	movw	r30, r24
    1064:	00 97       	sbiw	r24, 0x00	; 0
    1066:	a9 f3       	breq	.-22     	; 0x1052 <fdevopen+0x16>
    1068:	80 e8       	ldi	r24, 0x80	; 128
    106a:	83 83       	std	Z+3, r24	; 0x03
    106c:	01 15       	cp	r16, r1
    106e:	11 05       	cpc	r17, r1
    1070:	71 f0       	breq	.+28     	; 0x108e <fdevopen+0x52>
    1072:	13 87       	std	Z+11, r17	; 0x0b
    1074:	02 87       	std	Z+10, r16	; 0x0a
    1076:	81 e8       	ldi	r24, 0x81	; 129
    1078:	83 83       	std	Z+3, r24	; 0x03
    107a:	80 91 15 03 	lds	r24, 0x0315
    107e:	90 91 16 03 	lds	r25, 0x0316
    1082:	89 2b       	or	r24, r25
    1084:	21 f4       	brne	.+8      	; 0x108e <fdevopen+0x52>
    1086:	f0 93 16 03 	sts	0x0316, r31
    108a:	e0 93 15 03 	sts	0x0315, r30
    108e:	20 97       	sbiw	r28, 0x00	; 0
    1090:	c9 f0       	breq	.+50     	; 0x10c4 <fdevopen+0x88>
    1092:	d1 87       	std	Z+9, r29	; 0x09
    1094:	c0 87       	std	Z+8, r28	; 0x08
    1096:	83 81       	ldd	r24, Z+3	; 0x03
    1098:	82 60       	ori	r24, 0x02	; 2
    109a:	83 83       	std	Z+3, r24	; 0x03
    109c:	80 91 17 03 	lds	r24, 0x0317
    10a0:	90 91 18 03 	lds	r25, 0x0318
    10a4:	89 2b       	or	r24, r25
    10a6:	71 f4       	brne	.+28     	; 0x10c4 <fdevopen+0x88>
    10a8:	f0 93 18 03 	sts	0x0318, r31
    10ac:	e0 93 17 03 	sts	0x0317, r30
    10b0:	80 91 19 03 	lds	r24, 0x0319
    10b4:	90 91 1a 03 	lds	r25, 0x031A
    10b8:	89 2b       	or	r24, r25
    10ba:	21 f4       	brne	.+8      	; 0x10c4 <fdevopen+0x88>
    10bc:	f0 93 1a 03 	sts	0x031A, r31
    10c0:	e0 93 19 03 	sts	0x0319, r30
    10c4:	cf 01       	movw	r24, r30
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	08 95       	ret

000010d0 <printf>:
    10d0:	a0 e0       	ldi	r26, 0x00	; 0
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	ed e6       	ldi	r30, 0x6D	; 109
    10d6:	f8 e0       	ldi	r31, 0x08	; 8
    10d8:	d3 c2       	rjmp	.+1446   	; 0x1680 <__prologue_saves__+0x20>
    10da:	fe 01       	movw	r30, r28
    10dc:	35 96       	adiw	r30, 0x05	; 5
    10de:	61 91       	ld	r22, Z+
    10e0:	71 91       	ld	r23, Z+
    10e2:	af 01       	movw	r20, r30
    10e4:	80 91 17 03 	lds	r24, 0x0317
    10e8:	90 91 18 03 	lds	r25, 0x0318
    10ec:	2f d0       	rcall	.+94     	; 0x114c <vfprintf>
    10ee:	e2 e0       	ldi	r30, 0x02	; 2
    10f0:	e3 c2       	rjmp	.+1478   	; 0x16b8 <__epilogue_restores__+0x20>

000010f2 <puts>:
    10f2:	0f 93       	push	r16
    10f4:	1f 93       	push	r17
    10f6:	cf 93       	push	r28
    10f8:	df 93       	push	r29
    10fa:	e0 91 17 03 	lds	r30, 0x0317
    10fe:	f0 91 18 03 	lds	r31, 0x0318
    1102:	23 81       	ldd	r18, Z+3	; 0x03
    1104:	21 ff       	sbrs	r18, 1
    1106:	1b c0       	rjmp	.+54     	; 0x113e <puts+0x4c>
    1108:	ec 01       	movw	r28, r24
    110a:	00 e0       	ldi	r16, 0x00	; 0
    110c:	10 e0       	ldi	r17, 0x00	; 0
    110e:	89 91       	ld	r24, Y+
    1110:	60 91 17 03 	lds	r22, 0x0317
    1114:	70 91 18 03 	lds	r23, 0x0318
    1118:	db 01       	movw	r26, r22
    111a:	18 96       	adiw	r26, 0x08	; 8
    111c:	ed 91       	ld	r30, X+
    111e:	fc 91       	ld	r31, X
    1120:	19 97       	sbiw	r26, 0x09	; 9
    1122:	88 23       	and	r24, r24
    1124:	31 f0       	breq	.+12     	; 0x1132 <puts+0x40>
    1126:	09 95       	icall
    1128:	89 2b       	or	r24, r25
    112a:	89 f3       	breq	.-30     	; 0x110e <puts+0x1c>
    112c:	0f ef       	ldi	r16, 0xFF	; 255
    112e:	1f ef       	ldi	r17, 0xFF	; 255
    1130:	ee cf       	rjmp	.-36     	; 0x110e <puts+0x1c>
    1132:	8a e0       	ldi	r24, 0x0A	; 10
    1134:	09 95       	icall
    1136:	89 2b       	or	r24, r25
    1138:	11 f4       	brne	.+4      	; 0x113e <puts+0x4c>
    113a:	c8 01       	movw	r24, r16
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <puts+0x50>
    113e:	8f ef       	ldi	r24, 0xFF	; 255
    1140:	9f ef       	ldi	r25, 0xFF	; 255
    1142:	df 91       	pop	r29
    1144:	cf 91       	pop	r28
    1146:	1f 91       	pop	r17
    1148:	0f 91       	pop	r16
    114a:	08 95       	ret

0000114c <vfprintf>:
    114c:	ac e0       	ldi	r26, 0x0C	; 12
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	eb ea       	ldi	r30, 0xAB	; 171
    1152:	f8 e0       	ldi	r31, 0x08	; 8
    1154:	85 c2       	rjmp	.+1290   	; 0x1660 <__prologue_saves__>
    1156:	7c 01       	movw	r14, r24
    1158:	6b 01       	movw	r12, r22
    115a:	8a 01       	movw	r16, r20
    115c:	fc 01       	movw	r30, r24
    115e:	17 82       	std	Z+7, r1	; 0x07
    1160:	16 82       	std	Z+6, r1	; 0x06
    1162:	83 81       	ldd	r24, Z+3	; 0x03
    1164:	81 ff       	sbrs	r24, 1
    1166:	b0 c1       	rjmp	.+864    	; 0x14c8 <vfprintf+0x37c>
    1168:	ce 01       	movw	r24, r28
    116a:	01 96       	adiw	r24, 0x01	; 1
    116c:	4c 01       	movw	r8, r24
    116e:	f7 01       	movw	r30, r14
    1170:	93 81       	ldd	r25, Z+3	; 0x03
    1172:	f6 01       	movw	r30, r12
    1174:	93 fd       	sbrc	r25, 3
    1176:	85 91       	lpm	r24, Z+
    1178:	93 ff       	sbrs	r25, 3
    117a:	81 91       	ld	r24, Z+
    117c:	6f 01       	movw	r12, r30
    117e:	88 23       	and	r24, r24
    1180:	09 f4       	brne	.+2      	; 0x1184 <vfprintf+0x38>
    1182:	9e c1       	rjmp	.+828    	; 0x14c0 <vfprintf+0x374>
    1184:	85 32       	cpi	r24, 0x25	; 37
    1186:	39 f4       	brne	.+14     	; 0x1196 <vfprintf+0x4a>
    1188:	93 fd       	sbrc	r25, 3
    118a:	85 91       	lpm	r24, Z+
    118c:	93 ff       	sbrs	r25, 3
    118e:	81 91       	ld	r24, Z+
    1190:	6f 01       	movw	r12, r30
    1192:	85 32       	cpi	r24, 0x25	; 37
    1194:	21 f4       	brne	.+8      	; 0x119e <vfprintf+0x52>
    1196:	b7 01       	movw	r22, r14
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	d2 d1       	rcall	.+932    	; 0x1540 <fputc>
    119c:	e8 cf       	rjmp	.-48     	; 0x116e <vfprintf+0x22>
    119e:	51 2c       	mov	r5, r1
    11a0:	31 2c       	mov	r3, r1
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	20 32       	cpi	r18, 0x20	; 32
    11a6:	a0 f4       	brcc	.+40     	; 0x11d0 <vfprintf+0x84>
    11a8:	8b 32       	cpi	r24, 0x2B	; 43
    11aa:	69 f0       	breq	.+26     	; 0x11c6 <vfprintf+0x7a>
    11ac:	30 f4       	brcc	.+12     	; 0x11ba <vfprintf+0x6e>
    11ae:	80 32       	cpi	r24, 0x20	; 32
    11b0:	59 f0       	breq	.+22     	; 0x11c8 <vfprintf+0x7c>
    11b2:	83 32       	cpi	r24, 0x23	; 35
    11b4:	69 f4       	brne	.+26     	; 0x11d0 <vfprintf+0x84>
    11b6:	20 61       	ori	r18, 0x10	; 16
    11b8:	2c c0       	rjmp	.+88     	; 0x1212 <vfprintf+0xc6>
    11ba:	8d 32       	cpi	r24, 0x2D	; 45
    11bc:	39 f0       	breq	.+14     	; 0x11cc <vfprintf+0x80>
    11be:	80 33       	cpi	r24, 0x30	; 48
    11c0:	39 f4       	brne	.+14     	; 0x11d0 <vfprintf+0x84>
    11c2:	21 60       	ori	r18, 0x01	; 1
    11c4:	26 c0       	rjmp	.+76     	; 0x1212 <vfprintf+0xc6>
    11c6:	22 60       	ori	r18, 0x02	; 2
    11c8:	24 60       	ori	r18, 0x04	; 4
    11ca:	23 c0       	rjmp	.+70     	; 0x1212 <vfprintf+0xc6>
    11cc:	28 60       	ori	r18, 0x08	; 8
    11ce:	21 c0       	rjmp	.+66     	; 0x1212 <vfprintf+0xc6>
    11d0:	27 fd       	sbrc	r18, 7
    11d2:	27 c0       	rjmp	.+78     	; 0x1222 <vfprintf+0xd6>
    11d4:	30 ed       	ldi	r19, 0xD0	; 208
    11d6:	38 0f       	add	r19, r24
    11d8:	3a 30       	cpi	r19, 0x0A	; 10
    11da:	78 f4       	brcc	.+30     	; 0x11fa <vfprintf+0xae>
    11dc:	26 ff       	sbrs	r18, 6
    11de:	06 c0       	rjmp	.+12     	; 0x11ec <vfprintf+0xa0>
    11e0:	fa e0       	ldi	r31, 0x0A	; 10
    11e2:	5f 9e       	mul	r5, r31
    11e4:	30 0d       	add	r19, r0
    11e6:	11 24       	eor	r1, r1
    11e8:	53 2e       	mov	r5, r19
    11ea:	13 c0       	rjmp	.+38     	; 0x1212 <vfprintf+0xc6>
    11ec:	8a e0       	ldi	r24, 0x0A	; 10
    11ee:	38 9e       	mul	r3, r24
    11f0:	30 0d       	add	r19, r0
    11f2:	11 24       	eor	r1, r1
    11f4:	33 2e       	mov	r3, r19
    11f6:	20 62       	ori	r18, 0x20	; 32
    11f8:	0c c0       	rjmp	.+24     	; 0x1212 <vfprintf+0xc6>
    11fa:	8e 32       	cpi	r24, 0x2E	; 46
    11fc:	21 f4       	brne	.+8      	; 0x1206 <vfprintf+0xba>
    11fe:	26 fd       	sbrc	r18, 6
    1200:	5f c1       	rjmp	.+702    	; 0x14c0 <vfprintf+0x374>
    1202:	20 64       	ori	r18, 0x40	; 64
    1204:	06 c0       	rjmp	.+12     	; 0x1212 <vfprintf+0xc6>
    1206:	8c 36       	cpi	r24, 0x6C	; 108
    1208:	11 f4       	brne	.+4      	; 0x120e <vfprintf+0xc2>
    120a:	20 68       	ori	r18, 0x80	; 128
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <vfprintf+0xc6>
    120e:	88 36       	cpi	r24, 0x68	; 104
    1210:	41 f4       	brne	.+16     	; 0x1222 <vfprintf+0xd6>
    1212:	f6 01       	movw	r30, r12
    1214:	93 fd       	sbrc	r25, 3
    1216:	85 91       	lpm	r24, Z+
    1218:	93 ff       	sbrs	r25, 3
    121a:	81 91       	ld	r24, Z+
    121c:	6f 01       	movw	r12, r30
    121e:	81 11       	cpse	r24, r1
    1220:	c1 cf       	rjmp	.-126    	; 0x11a4 <vfprintf+0x58>
    1222:	98 2f       	mov	r25, r24
    1224:	9f 7d       	andi	r25, 0xDF	; 223
    1226:	95 54       	subi	r25, 0x45	; 69
    1228:	93 30       	cpi	r25, 0x03	; 3
    122a:	28 f4       	brcc	.+10     	; 0x1236 <vfprintf+0xea>
    122c:	0c 5f       	subi	r16, 0xFC	; 252
    122e:	1f 4f       	sbci	r17, 0xFF	; 255
    1230:	ff e3       	ldi	r31, 0x3F	; 63
    1232:	f9 83       	std	Y+1, r31	; 0x01
    1234:	0d c0       	rjmp	.+26     	; 0x1250 <vfprintf+0x104>
    1236:	83 36       	cpi	r24, 0x63	; 99
    1238:	31 f0       	breq	.+12     	; 0x1246 <vfprintf+0xfa>
    123a:	83 37       	cpi	r24, 0x73	; 115
    123c:	71 f0       	breq	.+28     	; 0x125a <vfprintf+0x10e>
    123e:	83 35       	cpi	r24, 0x53	; 83
    1240:	09 f0       	breq	.+2      	; 0x1244 <vfprintf+0xf8>
    1242:	57 c0       	rjmp	.+174    	; 0x12f2 <vfprintf+0x1a6>
    1244:	21 c0       	rjmp	.+66     	; 0x1288 <vfprintf+0x13c>
    1246:	f8 01       	movw	r30, r16
    1248:	80 81       	ld	r24, Z
    124a:	89 83       	std	Y+1, r24	; 0x01
    124c:	0e 5f       	subi	r16, 0xFE	; 254
    124e:	1f 4f       	sbci	r17, 0xFF	; 255
    1250:	44 24       	eor	r4, r4
    1252:	43 94       	inc	r4
    1254:	51 2c       	mov	r5, r1
    1256:	54 01       	movw	r10, r8
    1258:	14 c0       	rjmp	.+40     	; 0x1282 <vfprintf+0x136>
    125a:	38 01       	movw	r6, r16
    125c:	f2 e0       	ldi	r31, 0x02	; 2
    125e:	6f 0e       	add	r6, r31
    1260:	71 1c       	adc	r7, r1
    1262:	f8 01       	movw	r30, r16
    1264:	a0 80       	ld	r10, Z
    1266:	b1 80       	ldd	r11, Z+1	; 0x01
    1268:	26 ff       	sbrs	r18, 6
    126a:	03 c0       	rjmp	.+6      	; 0x1272 <vfprintf+0x126>
    126c:	65 2d       	mov	r22, r5
    126e:	70 e0       	ldi	r23, 0x00	; 0
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <vfprintf+0x12a>
    1272:	6f ef       	ldi	r22, 0xFF	; 255
    1274:	7f ef       	ldi	r23, 0xFF	; 255
    1276:	c5 01       	movw	r24, r10
    1278:	2c 87       	std	Y+12, r18	; 0x0c
    127a:	57 d1       	rcall	.+686    	; 0x152a <strnlen>
    127c:	2c 01       	movw	r4, r24
    127e:	83 01       	movw	r16, r6
    1280:	2c 85       	ldd	r18, Y+12	; 0x0c
    1282:	2f 77       	andi	r18, 0x7F	; 127
    1284:	22 2e       	mov	r2, r18
    1286:	16 c0       	rjmp	.+44     	; 0x12b4 <vfprintf+0x168>
    1288:	38 01       	movw	r6, r16
    128a:	f2 e0       	ldi	r31, 0x02	; 2
    128c:	6f 0e       	add	r6, r31
    128e:	71 1c       	adc	r7, r1
    1290:	f8 01       	movw	r30, r16
    1292:	a0 80       	ld	r10, Z
    1294:	b1 80       	ldd	r11, Z+1	; 0x01
    1296:	26 ff       	sbrs	r18, 6
    1298:	03 c0       	rjmp	.+6      	; 0x12a0 <vfprintf+0x154>
    129a:	65 2d       	mov	r22, r5
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <vfprintf+0x158>
    12a0:	6f ef       	ldi	r22, 0xFF	; 255
    12a2:	7f ef       	ldi	r23, 0xFF	; 255
    12a4:	c5 01       	movw	r24, r10
    12a6:	2c 87       	std	Y+12, r18	; 0x0c
    12a8:	2e d1       	rcall	.+604    	; 0x1506 <strnlen_P>
    12aa:	2c 01       	movw	r4, r24
    12ac:	2c 85       	ldd	r18, Y+12	; 0x0c
    12ae:	20 68       	ori	r18, 0x80	; 128
    12b0:	22 2e       	mov	r2, r18
    12b2:	83 01       	movw	r16, r6
    12b4:	23 fc       	sbrc	r2, 3
    12b6:	19 c0       	rjmp	.+50     	; 0x12ea <vfprintf+0x19e>
    12b8:	83 2d       	mov	r24, r3
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	48 16       	cp	r4, r24
    12be:	59 06       	cpc	r5, r25
    12c0:	a0 f4       	brcc	.+40     	; 0x12ea <vfprintf+0x19e>
    12c2:	b7 01       	movw	r22, r14
    12c4:	80 e2       	ldi	r24, 0x20	; 32
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	3b d1       	rcall	.+630    	; 0x1540 <fputc>
    12ca:	3a 94       	dec	r3
    12cc:	f5 cf       	rjmp	.-22     	; 0x12b8 <vfprintf+0x16c>
    12ce:	f5 01       	movw	r30, r10
    12d0:	27 fc       	sbrc	r2, 7
    12d2:	85 91       	lpm	r24, Z+
    12d4:	27 fe       	sbrs	r2, 7
    12d6:	81 91       	ld	r24, Z+
    12d8:	5f 01       	movw	r10, r30
    12da:	b7 01       	movw	r22, r14
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	30 d1       	rcall	.+608    	; 0x1540 <fputc>
    12e0:	31 10       	cpse	r3, r1
    12e2:	3a 94       	dec	r3
    12e4:	f1 e0       	ldi	r31, 0x01	; 1
    12e6:	4f 1a       	sub	r4, r31
    12e8:	51 08       	sbc	r5, r1
    12ea:	41 14       	cp	r4, r1
    12ec:	51 04       	cpc	r5, r1
    12ee:	79 f7       	brne	.-34     	; 0x12ce <vfprintf+0x182>
    12f0:	de c0       	rjmp	.+444    	; 0x14ae <vfprintf+0x362>
    12f2:	84 36       	cpi	r24, 0x64	; 100
    12f4:	11 f0       	breq	.+4      	; 0x12fa <vfprintf+0x1ae>
    12f6:	89 36       	cpi	r24, 0x69	; 105
    12f8:	31 f5       	brne	.+76     	; 0x1346 <vfprintf+0x1fa>
    12fa:	f8 01       	movw	r30, r16
    12fc:	27 ff       	sbrs	r18, 7
    12fe:	07 c0       	rjmp	.+14     	; 0x130e <vfprintf+0x1c2>
    1300:	60 81       	ld	r22, Z
    1302:	71 81       	ldd	r23, Z+1	; 0x01
    1304:	82 81       	ldd	r24, Z+2	; 0x02
    1306:	93 81       	ldd	r25, Z+3	; 0x03
    1308:	0c 5f       	subi	r16, 0xFC	; 252
    130a:	1f 4f       	sbci	r17, 0xFF	; 255
    130c:	08 c0       	rjmp	.+16     	; 0x131e <vfprintf+0x1d2>
    130e:	60 81       	ld	r22, Z
    1310:	71 81       	ldd	r23, Z+1	; 0x01
    1312:	88 27       	eor	r24, r24
    1314:	77 fd       	sbrc	r23, 7
    1316:	80 95       	com	r24
    1318:	98 2f       	mov	r25, r24
    131a:	0e 5f       	subi	r16, 0xFE	; 254
    131c:	1f 4f       	sbci	r17, 0xFF	; 255
    131e:	2f 76       	andi	r18, 0x6F	; 111
    1320:	b2 2e       	mov	r11, r18
    1322:	97 ff       	sbrs	r25, 7
    1324:	09 c0       	rjmp	.+18     	; 0x1338 <vfprintf+0x1ec>
    1326:	90 95       	com	r25
    1328:	80 95       	com	r24
    132a:	70 95       	com	r23
    132c:	61 95       	neg	r22
    132e:	7f 4f       	sbci	r23, 0xFF	; 255
    1330:	8f 4f       	sbci	r24, 0xFF	; 255
    1332:	9f 4f       	sbci	r25, 0xFF	; 255
    1334:	20 68       	ori	r18, 0x80	; 128
    1336:	b2 2e       	mov	r11, r18
    1338:	2a e0       	ldi	r18, 0x0A	; 10
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	a4 01       	movw	r20, r8
    133e:	32 d1       	rcall	.+612    	; 0x15a4 <__ultoa_invert>
    1340:	a8 2e       	mov	r10, r24
    1342:	a8 18       	sub	r10, r8
    1344:	43 c0       	rjmp	.+134    	; 0x13cc <vfprintf+0x280>
    1346:	85 37       	cpi	r24, 0x75	; 117
    1348:	29 f4       	brne	.+10     	; 0x1354 <vfprintf+0x208>
    134a:	2f 7e       	andi	r18, 0xEF	; 239
    134c:	b2 2e       	mov	r11, r18
    134e:	2a e0       	ldi	r18, 0x0A	; 10
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	25 c0       	rjmp	.+74     	; 0x139e <vfprintf+0x252>
    1354:	f2 2f       	mov	r31, r18
    1356:	f9 7f       	andi	r31, 0xF9	; 249
    1358:	bf 2e       	mov	r11, r31
    135a:	8f 36       	cpi	r24, 0x6F	; 111
    135c:	c1 f0       	breq	.+48     	; 0x138e <vfprintf+0x242>
    135e:	18 f4       	brcc	.+6      	; 0x1366 <vfprintf+0x21a>
    1360:	88 35       	cpi	r24, 0x58	; 88
    1362:	79 f0       	breq	.+30     	; 0x1382 <vfprintf+0x236>
    1364:	ad c0       	rjmp	.+346    	; 0x14c0 <vfprintf+0x374>
    1366:	80 37       	cpi	r24, 0x70	; 112
    1368:	19 f0       	breq	.+6      	; 0x1370 <vfprintf+0x224>
    136a:	88 37       	cpi	r24, 0x78	; 120
    136c:	21 f0       	breq	.+8      	; 0x1376 <vfprintf+0x22a>
    136e:	a8 c0       	rjmp	.+336    	; 0x14c0 <vfprintf+0x374>
    1370:	2f 2f       	mov	r18, r31
    1372:	20 61       	ori	r18, 0x10	; 16
    1374:	b2 2e       	mov	r11, r18
    1376:	b4 fe       	sbrs	r11, 4
    1378:	0d c0       	rjmp	.+26     	; 0x1394 <vfprintf+0x248>
    137a:	8b 2d       	mov	r24, r11
    137c:	84 60       	ori	r24, 0x04	; 4
    137e:	b8 2e       	mov	r11, r24
    1380:	09 c0       	rjmp	.+18     	; 0x1394 <vfprintf+0x248>
    1382:	24 ff       	sbrs	r18, 4
    1384:	0a c0       	rjmp	.+20     	; 0x139a <vfprintf+0x24e>
    1386:	9f 2f       	mov	r25, r31
    1388:	96 60       	ori	r25, 0x06	; 6
    138a:	b9 2e       	mov	r11, r25
    138c:	06 c0       	rjmp	.+12     	; 0x139a <vfprintf+0x24e>
    138e:	28 e0       	ldi	r18, 0x08	; 8
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	05 c0       	rjmp	.+10     	; 0x139e <vfprintf+0x252>
    1394:	20 e1       	ldi	r18, 0x10	; 16
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	02 c0       	rjmp	.+4      	; 0x139e <vfprintf+0x252>
    139a:	20 e1       	ldi	r18, 0x10	; 16
    139c:	32 e0       	ldi	r19, 0x02	; 2
    139e:	f8 01       	movw	r30, r16
    13a0:	b7 fe       	sbrs	r11, 7
    13a2:	07 c0       	rjmp	.+14     	; 0x13b2 <vfprintf+0x266>
    13a4:	60 81       	ld	r22, Z
    13a6:	71 81       	ldd	r23, Z+1	; 0x01
    13a8:	82 81       	ldd	r24, Z+2	; 0x02
    13aa:	93 81       	ldd	r25, Z+3	; 0x03
    13ac:	0c 5f       	subi	r16, 0xFC	; 252
    13ae:	1f 4f       	sbci	r17, 0xFF	; 255
    13b0:	06 c0       	rjmp	.+12     	; 0x13be <vfprintf+0x272>
    13b2:	60 81       	ld	r22, Z
    13b4:	71 81       	ldd	r23, Z+1	; 0x01
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 5f       	subi	r16, 0xFE	; 254
    13bc:	1f 4f       	sbci	r17, 0xFF	; 255
    13be:	a4 01       	movw	r20, r8
    13c0:	f1 d0       	rcall	.+482    	; 0x15a4 <__ultoa_invert>
    13c2:	a8 2e       	mov	r10, r24
    13c4:	a8 18       	sub	r10, r8
    13c6:	fb 2d       	mov	r31, r11
    13c8:	ff 77       	andi	r31, 0x7F	; 127
    13ca:	bf 2e       	mov	r11, r31
    13cc:	b6 fe       	sbrs	r11, 6
    13ce:	0b c0       	rjmp	.+22     	; 0x13e6 <vfprintf+0x29a>
    13d0:	2b 2d       	mov	r18, r11
    13d2:	2e 7f       	andi	r18, 0xFE	; 254
    13d4:	a5 14       	cp	r10, r5
    13d6:	50 f4       	brcc	.+20     	; 0x13ec <vfprintf+0x2a0>
    13d8:	b4 fe       	sbrs	r11, 4
    13da:	0a c0       	rjmp	.+20     	; 0x13f0 <vfprintf+0x2a4>
    13dc:	b2 fc       	sbrc	r11, 2
    13de:	08 c0       	rjmp	.+16     	; 0x13f0 <vfprintf+0x2a4>
    13e0:	2b 2d       	mov	r18, r11
    13e2:	2e 7e       	andi	r18, 0xEE	; 238
    13e4:	05 c0       	rjmp	.+10     	; 0x13f0 <vfprintf+0x2a4>
    13e6:	7a 2c       	mov	r7, r10
    13e8:	2b 2d       	mov	r18, r11
    13ea:	03 c0       	rjmp	.+6      	; 0x13f2 <vfprintf+0x2a6>
    13ec:	7a 2c       	mov	r7, r10
    13ee:	01 c0       	rjmp	.+2      	; 0x13f2 <vfprintf+0x2a6>
    13f0:	75 2c       	mov	r7, r5
    13f2:	24 ff       	sbrs	r18, 4
    13f4:	0d c0       	rjmp	.+26     	; 0x1410 <vfprintf+0x2c4>
    13f6:	fe 01       	movw	r30, r28
    13f8:	ea 0d       	add	r30, r10
    13fa:	f1 1d       	adc	r31, r1
    13fc:	80 81       	ld	r24, Z
    13fe:	80 33       	cpi	r24, 0x30	; 48
    1400:	11 f4       	brne	.+4      	; 0x1406 <vfprintf+0x2ba>
    1402:	29 7e       	andi	r18, 0xE9	; 233
    1404:	09 c0       	rjmp	.+18     	; 0x1418 <vfprintf+0x2cc>
    1406:	22 ff       	sbrs	r18, 2
    1408:	06 c0       	rjmp	.+12     	; 0x1416 <vfprintf+0x2ca>
    140a:	73 94       	inc	r7
    140c:	73 94       	inc	r7
    140e:	04 c0       	rjmp	.+8      	; 0x1418 <vfprintf+0x2cc>
    1410:	82 2f       	mov	r24, r18
    1412:	86 78       	andi	r24, 0x86	; 134
    1414:	09 f0       	breq	.+2      	; 0x1418 <vfprintf+0x2cc>
    1416:	73 94       	inc	r7
    1418:	23 fd       	sbrc	r18, 3
    141a:	12 c0       	rjmp	.+36     	; 0x1440 <vfprintf+0x2f4>
    141c:	20 ff       	sbrs	r18, 0
    141e:	06 c0       	rjmp	.+12     	; 0x142c <vfprintf+0x2e0>
    1420:	5a 2c       	mov	r5, r10
    1422:	73 14       	cp	r7, r3
    1424:	18 f4       	brcc	.+6      	; 0x142c <vfprintf+0x2e0>
    1426:	53 0c       	add	r5, r3
    1428:	57 18       	sub	r5, r7
    142a:	73 2c       	mov	r7, r3
    142c:	73 14       	cp	r7, r3
    142e:	60 f4       	brcc	.+24     	; 0x1448 <vfprintf+0x2fc>
    1430:	b7 01       	movw	r22, r14
    1432:	80 e2       	ldi	r24, 0x20	; 32
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	2c 87       	std	Y+12, r18	; 0x0c
    1438:	83 d0       	rcall	.+262    	; 0x1540 <fputc>
    143a:	73 94       	inc	r7
    143c:	2c 85       	ldd	r18, Y+12	; 0x0c
    143e:	f6 cf       	rjmp	.-20     	; 0x142c <vfprintf+0x2e0>
    1440:	73 14       	cp	r7, r3
    1442:	10 f4       	brcc	.+4      	; 0x1448 <vfprintf+0x2fc>
    1444:	37 18       	sub	r3, r7
    1446:	01 c0       	rjmp	.+2      	; 0x144a <vfprintf+0x2fe>
    1448:	31 2c       	mov	r3, r1
    144a:	24 ff       	sbrs	r18, 4
    144c:	11 c0       	rjmp	.+34     	; 0x1470 <vfprintf+0x324>
    144e:	b7 01       	movw	r22, r14
    1450:	80 e3       	ldi	r24, 0x30	; 48
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	2c 87       	std	Y+12, r18	; 0x0c
    1456:	74 d0       	rcall	.+232    	; 0x1540 <fputc>
    1458:	2c 85       	ldd	r18, Y+12	; 0x0c
    145a:	22 ff       	sbrs	r18, 2
    145c:	16 c0       	rjmp	.+44     	; 0x148a <vfprintf+0x33e>
    145e:	21 ff       	sbrs	r18, 1
    1460:	03 c0       	rjmp	.+6      	; 0x1468 <vfprintf+0x31c>
    1462:	88 e5       	ldi	r24, 0x58	; 88
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 c0       	rjmp	.+4      	; 0x146c <vfprintf+0x320>
    1468:	88 e7       	ldi	r24, 0x78	; 120
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	b7 01       	movw	r22, r14
    146e:	0c c0       	rjmp	.+24     	; 0x1488 <vfprintf+0x33c>
    1470:	82 2f       	mov	r24, r18
    1472:	86 78       	andi	r24, 0x86	; 134
    1474:	51 f0       	breq	.+20     	; 0x148a <vfprintf+0x33e>
    1476:	21 fd       	sbrc	r18, 1
    1478:	02 c0       	rjmp	.+4      	; 0x147e <vfprintf+0x332>
    147a:	80 e2       	ldi	r24, 0x20	; 32
    147c:	01 c0       	rjmp	.+2      	; 0x1480 <vfprintf+0x334>
    147e:	8b e2       	ldi	r24, 0x2B	; 43
    1480:	27 fd       	sbrc	r18, 7
    1482:	8d e2       	ldi	r24, 0x2D	; 45
    1484:	b7 01       	movw	r22, r14
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	5b d0       	rcall	.+182    	; 0x1540 <fputc>
    148a:	a5 14       	cp	r10, r5
    148c:	30 f4       	brcc	.+12     	; 0x149a <vfprintf+0x34e>
    148e:	b7 01       	movw	r22, r14
    1490:	80 e3       	ldi	r24, 0x30	; 48
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	55 d0       	rcall	.+170    	; 0x1540 <fputc>
    1496:	5a 94       	dec	r5
    1498:	f8 cf       	rjmp	.-16     	; 0x148a <vfprintf+0x33e>
    149a:	aa 94       	dec	r10
    149c:	f4 01       	movw	r30, r8
    149e:	ea 0d       	add	r30, r10
    14a0:	f1 1d       	adc	r31, r1
    14a2:	80 81       	ld	r24, Z
    14a4:	b7 01       	movw	r22, r14
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	4b d0       	rcall	.+150    	; 0x1540 <fputc>
    14aa:	a1 10       	cpse	r10, r1
    14ac:	f6 cf       	rjmp	.-20     	; 0x149a <vfprintf+0x34e>
    14ae:	33 20       	and	r3, r3
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <vfprintf+0x368>
    14b2:	5d ce       	rjmp	.-838    	; 0x116e <vfprintf+0x22>
    14b4:	b7 01       	movw	r22, r14
    14b6:	80 e2       	ldi	r24, 0x20	; 32
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	42 d0       	rcall	.+132    	; 0x1540 <fputc>
    14bc:	3a 94       	dec	r3
    14be:	f7 cf       	rjmp	.-18     	; 0x14ae <vfprintf+0x362>
    14c0:	f7 01       	movw	r30, r14
    14c2:	86 81       	ldd	r24, Z+6	; 0x06
    14c4:	97 81       	ldd	r25, Z+7	; 0x07
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <vfprintf+0x380>
    14c8:	8f ef       	ldi	r24, 0xFF	; 255
    14ca:	9f ef       	ldi	r25, 0xFF	; 255
    14cc:	2c 96       	adiw	r28, 0x0c	; 12
    14ce:	e2 e1       	ldi	r30, 0x12	; 18
    14d0:	e3 c0       	rjmp	.+454    	; 0x1698 <__epilogue_restores__>

000014d2 <calloc>:
    14d2:	0f 93       	push	r16
    14d4:	1f 93       	push	r17
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	86 9f       	mul	r24, r22
    14dc:	80 01       	movw	r16, r0
    14de:	87 9f       	mul	r24, r23
    14e0:	10 0d       	add	r17, r0
    14e2:	96 9f       	mul	r25, r22
    14e4:	10 0d       	add	r17, r0
    14e6:	11 24       	eor	r1, r1
    14e8:	c8 01       	movw	r24, r16
    14ea:	81 dc       	rcall	.-1790   	; 0xdee <malloc>
    14ec:	ec 01       	movw	r28, r24
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	21 f0       	breq	.+8      	; 0x14fa <calloc+0x28>
    14f2:	a8 01       	movw	r20, r16
    14f4:	60 e0       	ldi	r22, 0x00	; 0
    14f6:	70 e0       	ldi	r23, 0x00	; 0
    14f8:	11 d0       	rcall	.+34     	; 0x151c <memset>
    14fa:	ce 01       	movw	r24, r28
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	08 95       	ret

00001506 <strnlen_P>:
    1506:	fc 01       	movw	r30, r24
    1508:	05 90       	lpm	r0, Z+
    150a:	61 50       	subi	r22, 0x01	; 1
    150c:	70 40       	sbci	r23, 0x00	; 0
    150e:	01 10       	cpse	r0, r1
    1510:	d8 f7       	brcc	.-10     	; 0x1508 <strnlen_P+0x2>
    1512:	80 95       	com	r24
    1514:	90 95       	com	r25
    1516:	8e 0f       	add	r24, r30
    1518:	9f 1f       	adc	r25, r31
    151a:	08 95       	ret

0000151c <memset>:
    151c:	dc 01       	movw	r26, r24
    151e:	01 c0       	rjmp	.+2      	; 0x1522 <memset+0x6>
    1520:	6d 93       	st	X+, r22
    1522:	41 50       	subi	r20, 0x01	; 1
    1524:	50 40       	sbci	r21, 0x00	; 0
    1526:	e0 f7       	brcc	.-8      	; 0x1520 <memset+0x4>
    1528:	08 95       	ret

0000152a <strnlen>:
    152a:	fc 01       	movw	r30, r24
    152c:	61 50       	subi	r22, 0x01	; 1
    152e:	70 40       	sbci	r23, 0x00	; 0
    1530:	01 90       	ld	r0, Z+
    1532:	01 10       	cpse	r0, r1
    1534:	d8 f7       	brcc	.-10     	; 0x152c <strnlen+0x2>
    1536:	80 95       	com	r24
    1538:	90 95       	com	r25
    153a:	8e 0f       	add	r24, r30
    153c:	9f 1f       	adc	r25, r31
    153e:	08 95       	ret

00001540 <fputc>:
    1540:	0f 93       	push	r16
    1542:	1f 93       	push	r17
    1544:	cf 93       	push	r28
    1546:	df 93       	push	r29
    1548:	18 2f       	mov	r17, r24
    154a:	09 2f       	mov	r16, r25
    154c:	eb 01       	movw	r28, r22
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	81 fd       	sbrc	r24, 1
    1552:	03 c0       	rjmp	.+6      	; 0x155a <fputc+0x1a>
    1554:	8f ef       	ldi	r24, 0xFF	; 255
    1556:	9f ef       	ldi	r25, 0xFF	; 255
    1558:	20 c0       	rjmp	.+64     	; 0x159a <fputc+0x5a>
    155a:	82 ff       	sbrs	r24, 2
    155c:	10 c0       	rjmp	.+32     	; 0x157e <fputc+0x3e>
    155e:	4e 81       	ldd	r20, Y+6	; 0x06
    1560:	5f 81       	ldd	r21, Y+7	; 0x07
    1562:	2c 81       	ldd	r18, Y+4	; 0x04
    1564:	3d 81       	ldd	r19, Y+5	; 0x05
    1566:	42 17       	cp	r20, r18
    1568:	53 07       	cpc	r21, r19
    156a:	7c f4       	brge	.+30     	; 0x158a <fputc+0x4a>
    156c:	e8 81       	ld	r30, Y
    156e:	f9 81       	ldd	r31, Y+1	; 0x01
    1570:	9f 01       	movw	r18, r30
    1572:	2f 5f       	subi	r18, 0xFF	; 255
    1574:	3f 4f       	sbci	r19, 0xFF	; 255
    1576:	39 83       	std	Y+1, r19	; 0x01
    1578:	28 83       	st	Y, r18
    157a:	10 83       	st	Z, r17
    157c:	06 c0       	rjmp	.+12     	; 0x158a <fputc+0x4a>
    157e:	e8 85       	ldd	r30, Y+8	; 0x08
    1580:	f9 85       	ldd	r31, Y+9	; 0x09
    1582:	81 2f       	mov	r24, r17
    1584:	09 95       	icall
    1586:	89 2b       	or	r24, r25
    1588:	29 f7       	brne	.-54     	; 0x1554 <fputc+0x14>
    158a:	2e 81       	ldd	r18, Y+6	; 0x06
    158c:	3f 81       	ldd	r19, Y+7	; 0x07
    158e:	2f 5f       	subi	r18, 0xFF	; 255
    1590:	3f 4f       	sbci	r19, 0xFF	; 255
    1592:	3f 83       	std	Y+7, r19	; 0x07
    1594:	2e 83       	std	Y+6, r18	; 0x06
    1596:	81 2f       	mov	r24, r17
    1598:	90 2f       	mov	r25, r16
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	1f 91       	pop	r17
    15a0:	0f 91       	pop	r16
    15a2:	08 95       	ret

000015a4 <__ultoa_invert>:
    15a4:	fa 01       	movw	r30, r20
    15a6:	aa 27       	eor	r26, r26
    15a8:	28 30       	cpi	r18, 0x08	; 8
    15aa:	51 f1       	breq	.+84     	; 0x1600 <__ultoa_invert+0x5c>
    15ac:	20 31       	cpi	r18, 0x10	; 16
    15ae:	81 f1       	breq	.+96     	; 0x1610 <__ultoa_invert+0x6c>
    15b0:	e8 94       	clt
    15b2:	6f 93       	push	r22
    15b4:	6e 7f       	andi	r22, 0xFE	; 254
    15b6:	6e 5f       	subi	r22, 0xFE	; 254
    15b8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ba:	8f 4f       	sbci	r24, 0xFF	; 255
    15bc:	9f 4f       	sbci	r25, 0xFF	; 255
    15be:	af 4f       	sbci	r26, 0xFF	; 255
    15c0:	b1 e0       	ldi	r27, 0x01	; 1
    15c2:	3e d0       	rcall	.+124    	; 0x1640 <__ultoa_invert+0x9c>
    15c4:	b4 e0       	ldi	r27, 0x04	; 4
    15c6:	3c d0       	rcall	.+120    	; 0x1640 <__ultoa_invert+0x9c>
    15c8:	67 0f       	add	r22, r23
    15ca:	78 1f       	adc	r23, r24
    15cc:	89 1f       	adc	r24, r25
    15ce:	9a 1f       	adc	r25, r26
    15d0:	a1 1d       	adc	r26, r1
    15d2:	68 0f       	add	r22, r24
    15d4:	79 1f       	adc	r23, r25
    15d6:	8a 1f       	adc	r24, r26
    15d8:	91 1d       	adc	r25, r1
    15da:	a1 1d       	adc	r26, r1
    15dc:	6a 0f       	add	r22, r26
    15de:	71 1d       	adc	r23, r1
    15e0:	81 1d       	adc	r24, r1
    15e2:	91 1d       	adc	r25, r1
    15e4:	a1 1d       	adc	r26, r1
    15e6:	20 d0       	rcall	.+64     	; 0x1628 <__ultoa_invert+0x84>
    15e8:	09 f4       	brne	.+2      	; 0x15ec <__ultoa_invert+0x48>
    15ea:	68 94       	set
    15ec:	3f 91       	pop	r19
    15ee:	2a e0       	ldi	r18, 0x0A	; 10
    15f0:	26 9f       	mul	r18, r22
    15f2:	11 24       	eor	r1, r1
    15f4:	30 19       	sub	r19, r0
    15f6:	30 5d       	subi	r19, 0xD0	; 208
    15f8:	31 93       	st	Z+, r19
    15fa:	de f6       	brtc	.-74     	; 0x15b2 <__ultoa_invert+0xe>
    15fc:	cf 01       	movw	r24, r30
    15fe:	08 95       	ret
    1600:	46 2f       	mov	r20, r22
    1602:	47 70       	andi	r20, 0x07	; 7
    1604:	40 5d       	subi	r20, 0xD0	; 208
    1606:	41 93       	st	Z+, r20
    1608:	b3 e0       	ldi	r27, 0x03	; 3
    160a:	0f d0       	rcall	.+30     	; 0x162a <__ultoa_invert+0x86>
    160c:	c9 f7       	brne	.-14     	; 0x1600 <__ultoa_invert+0x5c>
    160e:	f6 cf       	rjmp	.-20     	; 0x15fc <__ultoa_invert+0x58>
    1610:	46 2f       	mov	r20, r22
    1612:	4f 70       	andi	r20, 0x0F	; 15
    1614:	40 5d       	subi	r20, 0xD0	; 208
    1616:	4a 33       	cpi	r20, 0x3A	; 58
    1618:	18 f0       	brcs	.+6      	; 0x1620 <__ultoa_invert+0x7c>
    161a:	49 5d       	subi	r20, 0xD9	; 217
    161c:	31 fd       	sbrc	r19, 1
    161e:	40 52       	subi	r20, 0x20	; 32
    1620:	41 93       	st	Z+, r20
    1622:	02 d0       	rcall	.+4      	; 0x1628 <__ultoa_invert+0x84>
    1624:	a9 f7       	brne	.-22     	; 0x1610 <__ultoa_invert+0x6c>
    1626:	ea cf       	rjmp	.-44     	; 0x15fc <__ultoa_invert+0x58>
    1628:	b4 e0       	ldi	r27, 0x04	; 4
    162a:	a6 95       	lsr	r26
    162c:	97 95       	ror	r25
    162e:	87 95       	ror	r24
    1630:	77 95       	ror	r23
    1632:	67 95       	ror	r22
    1634:	ba 95       	dec	r27
    1636:	c9 f7       	brne	.-14     	; 0x162a <__ultoa_invert+0x86>
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	61 05       	cpc	r22, r1
    163c:	71 05       	cpc	r23, r1
    163e:	08 95       	ret
    1640:	9b 01       	movw	r18, r22
    1642:	ac 01       	movw	r20, r24
    1644:	0a 2e       	mov	r0, r26
    1646:	06 94       	lsr	r0
    1648:	57 95       	ror	r21
    164a:	47 95       	ror	r20
    164c:	37 95       	ror	r19
    164e:	27 95       	ror	r18
    1650:	ba 95       	dec	r27
    1652:	c9 f7       	brne	.-14     	; 0x1646 <__ultoa_invert+0xa2>
    1654:	62 0f       	add	r22, r18
    1656:	73 1f       	adc	r23, r19
    1658:	84 1f       	adc	r24, r20
    165a:	95 1f       	adc	r25, r21
    165c:	a0 1d       	adc	r26, r0
    165e:	08 95       	ret

00001660 <__prologue_saves__>:
    1660:	2f 92       	push	r2
    1662:	3f 92       	push	r3
    1664:	4f 92       	push	r4
    1666:	5f 92       	push	r5
    1668:	6f 92       	push	r6
    166a:	7f 92       	push	r7
    166c:	8f 92       	push	r8
    166e:	9f 92       	push	r9
    1670:	af 92       	push	r10
    1672:	bf 92       	push	r11
    1674:	cf 92       	push	r12
    1676:	df 92       	push	r13
    1678:	ef 92       	push	r14
    167a:	ff 92       	push	r15
    167c:	0f 93       	push	r16
    167e:	1f 93       	push	r17
    1680:	cf 93       	push	r28
    1682:	df 93       	push	r29
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	ca 1b       	sub	r28, r26
    168a:	db 0b       	sbc	r29, r27
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	09 94       	ijmp

00001698 <__epilogue_restores__>:
    1698:	2a 88       	ldd	r2, Y+18	; 0x12
    169a:	39 88       	ldd	r3, Y+17	; 0x11
    169c:	48 88       	ldd	r4, Y+16	; 0x10
    169e:	5f 84       	ldd	r5, Y+15	; 0x0f
    16a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    16a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    16a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    16a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    16a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    16aa:	b9 84       	ldd	r11, Y+9	; 0x09
    16ac:	c8 84       	ldd	r12, Y+8	; 0x08
    16ae:	df 80       	ldd	r13, Y+7	; 0x07
    16b0:	ee 80       	ldd	r14, Y+6	; 0x06
    16b2:	fd 80       	ldd	r15, Y+5	; 0x05
    16b4:	0c 81       	ldd	r16, Y+4	; 0x04
    16b6:	1b 81       	ldd	r17, Y+3	; 0x03
    16b8:	aa 81       	ldd	r26, Y+2	; 0x02
    16ba:	b9 81       	ldd	r27, Y+1	; 0x01
    16bc:	ce 0f       	add	r28, r30
    16be:	d1 1d       	adc	r29, r1
    16c0:	0f b6       	in	r0, 0x3f	; 63
    16c2:	f8 94       	cli
    16c4:	de bf       	out	0x3e, r29	; 62
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	cd bf       	out	0x3d, r28	; 61
    16ca:	ed 01       	movw	r28, r26
    16cc:	08 95       	ret

000016ce <_exit>:
    16ce:	f8 94       	cli

000016d0 <__stop_program>:
    16d0:	ff cf       	rjmp	.-2      	; 0x16d0 <__stop_program>
