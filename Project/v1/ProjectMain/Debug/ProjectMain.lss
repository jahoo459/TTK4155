
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002aa  00800100  00001ae0  00001b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ae0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  008003aa  008003aa  00001e1e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e1e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002b0  00000000  00000000  00001e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000030b8  00000000  00000000  0000212a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ef1  00000000  00000000  000051e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001407  00000000  00000000  000060d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000674  00000000  00000000  000074dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000cad  00000000  00000000  00007b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015af  00000000  00000000  000087fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000250  00000000  00000000  00009dac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	fa c1       	rjmp	.+1012   	; 0x402 <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <MENU_buildMenus+0x160>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	13 e0       	ldi	r17, 0x03	; 3
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e0 ee       	ldi	r30, 0xE0	; 224
     37c:	fa e1       	ldi	r31, 0x1A	; 26
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 3a       	cpi	r26, 0xAA	; 170
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	aa ea       	ldi	r26, 0xAA	; 170
     38e:	b3 e0       	ldi	r27, 0x03	; 3
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a3 3d       	cpi	r26, 0xD3	; 211
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	7e d0       	rcall	.+252    	; 0x498 <main>
     39c:	0c 94 6e 0d 	jmp	0x1adc	; 0x1adc <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 c3 03 	sts	0x03C3, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 ae 03 	sts	0x03AE, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 ad 03 	sts	0x03AD, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 ab 03 	sts	0x03AB, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_3>:
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	8f 93       	push	r24
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 aa 03 	sts	0x03AA, r24
     414:	8f 91       	pop	r24
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <init>:
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	1f e1       	ldi	r17, 0x1F	; 31
     42a:	e1 2e       	mov	r14, r17
     42c:	f1 2c       	mov	r15, r1
     42e:	00 e0       	ldi	r16, 0x00	; 0
     430:	10 e0       	ldi	r17, 0x00	; 0
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	4b e4       	ldi	r20, 0x4B	; 75
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e8       	ldi	r22, 0x80	; 128
     43c:	75 e2       	ldi	r23, 0x25	; 37
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	76 d6       	rcall	.+3308   	; 0x1130 <uartInit>
     444:	81 e0       	ldi	r24, 0x01	; 1
     446:	7b d0       	rcall	.+246    	; 0x53e <enableXMEM>
     448:	4d d6       	rcall	.+3226   	; 0x10e4 <SLI_init>
     44a:	8b d0       	rcall	.+278    	; 0x562 <JOY_init>
     44c:	c5 d5       	rcall	.+2954   	; 0xfd8 <OLED_init>
     44e:	53 d6       	rcall	.+3238   	; 0x10f6 <SPI_init>
     450:	8b b7       	in	r24, 0x3b	; 59
     452:	80 64       	ori	r24, 0x40	; 64
     454:	8b bf       	out	0x3b, r24	; 59
     456:	85 b7       	in	r24, 0x35	; 53
     458:	82 60       	ori	r24, 0x02	; 2
     45a:	85 bf       	out	0x35, r24	; 53
     45c:	85 b7       	in	r24, 0x35	; 53
     45e:	8e 7f       	andi	r24, 0xFE	; 254
     460:	85 bf       	out	0x35, r24	; 53
     462:	8b 98       	cbi	0x11, 3	; 17
     464:	93 9a       	sbi	0x12, 3	; 18
     466:	8b b7       	in	r24, 0x3b	; 59
     468:	80 68       	ori	r24, 0x80	; 128
     46a:	8b bf       	out	0x3b, r24	; 59
     46c:	85 b7       	in	r24, 0x35	; 53
     46e:	88 60       	ori	r24, 0x08	; 8
     470:	85 bf       	out	0x35, r24	; 53
     472:	85 b7       	in	r24, 0x35	; 53
     474:	8b 7f       	andi	r24, 0xFB	; 251
     476:	85 bf       	out	0x35, r24	; 53
     478:	32 98       	cbi	0x06, 2	; 6
     47a:	3a 98       	cbi	0x07, 2	; 7
     47c:	b8 98       	cbi	0x17, 0	; 23
     47e:	c0 98       	cbi	0x18, 0	; 24
     480:	86 b7       	in	r24, 0x36	; 54
     482:	8e 7f       	andi	r24, 0xFE	; 254
     484:	86 bf       	out	0x36, r24	; 54
     486:	8b b7       	in	r24, 0x3b	; 59
     488:	81 60       	ori	r24, 0x01	; 1
     48a:	8b bf       	out	0x3b, r24	; 59
     48c:	78 94       	sei
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	ff 90       	pop	r15
     494:	ef 90       	pop	r14
     496:	08 95       	ret

00000498 <main>:
=======================MAIN FUNCTION=========================
*/

int main(void)
{	
	init();
     498:	c3 df       	rcall	.-122    	; 0x420 <init>
	
	//MCP2515_init();
	
	printf("manual mcp init...\n");
     49a:	8f e9       	ldi	r24, 0x9F	; 159
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	0e 94 80 0a 	call	0x1500	; 0x1500 <puts>
	SPI_activateSlave(SS_CAN_CONTROLLER);
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	35 d6       	rcall	.+3178   	; 0x1110 <SPI_activateSlave>
	SPI_deactivateSlave(SS_CAN_CONTROLLER);
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	37 d6       	rcall	.+3182   	; 0x1118 <SPI_deactivateSlave>
	// reset mcp
	SPI_activateSlave(SS_CAN_CONTROLLER);
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	31 d6       	rcall	.+3170   	; 0x1110 <SPI_activateSlave>
	SPI_send(MCP_RESET);
     4ae:	80 ec       	ldi	r24, 0xC0	; 192
     4b0:	2b d6       	rcall	.+3158   	; 0x1108 <SPI_send>
	SPI_deactivateSlave(SS_CAN_CONTROLLER);
     4b2:	80 e0       	ldi	r24, 0x00	; 0
     4b4:	31 d6       	rcall	.+3170   	; 0x1118 <SPI_deactivateSlave>
	
	// read canstat
	SPI_activateSlave(SS_CAN_CONTROLLER);
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	2b d6       	rcall	.+3158   	; 0x1110 <SPI_activateSlave>
	SPI_send(MCP_READ);
     4ba:	83 e0       	ldi	r24, 0x03	; 3
     4bc:	25 d6       	rcall	.+3146   	; 0x1108 <SPI_send>
	SPI_send(MCP_CANSTAT);
     4be:	8e e0       	ldi	r24, 0x0E	; 14
     4c0:	23 d6       	rcall	.+3142   	; 0x1108 <SPI_send>
	SPI_deactivateSlave(SS_CAN_CONTROLLER);
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	29 d6       	rcall	.+3154   	; 0x1118 <SPI_deactivateSlave>
	
	// push out value (does this have to be in previous block?)
	SPI_activateSlave(SS_CAN_CONTROLLER);
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	23 d6       	rcall	.+3142   	; 0x1110 <SPI_activateSlave>
	SPI_send(0xa0);
     4ca:	80 ea       	ldi	r24, 0xA0	; 160
     4cc:	1d d6       	rcall	.+3130   	; 0x1108 <SPI_send>
	SPI_deactivateSlave(SS_CAN_CONTROLLER);
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	23 d6       	rcall	.+3142   	; 0x1118 <SPI_deactivateSlave>
	
	// receive value
	uint8_t value = SPDR;
     4d2:	cf b1       	in	r28, 0x0f	; 15
	printf("Value: %d (%#x)\n", value, value);
     4d4:	1f 92       	push	r1
     4d6:	cf 93       	push	r28
     4d8:	1f 92       	push	r1
     4da:	cf 93       	push	r28
     4dc:	84 ee       	ldi	r24, 0xE4	; 228
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	9f 93       	push	r25
     4e2:	8f 93       	push	r24
     4e4:	fc d7       	rcall	.+4088   	; 0x14de <printf>
	if((value & MODE_MASK) != MODE_CONFIG)
     4e6:	8c 2f       	mov	r24, r28
     4e8:	80 7e       	andi	r24, 0xE0	; 224
     4ea:	0f 90       	pop	r0
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	0f 90       	pop	r0
     4f4:	0f 90       	pop	r0
     4f6:	80 38       	cpi	r24, 0x80	; 128
     4f8:	81 f0       	breq	.+32     	; 0x51a <__stack+0x1b>
	{
		printf("MCP2515 is NOT in configuration mode after reset! Value: %d (%#x)\n", value, value);
     4fa:	1f 92       	push	r1
     4fc:	cf 93       	push	r28
     4fe:	1f 92       	push	r1
     500:	cf 93       	push	r28
     502:	82 eb       	ldi	r24, 0xB2	; 178
     504:	91 e0       	ldi	r25, 0x01	; 1
     506:	9f 93       	push	r25
     508:	8f 93       	push	r24
     50a:	e9 d7       	rcall	.+4050   	; 0x14de <printf>
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0f 90       	pop	r0
     518:	03 c0       	rjmp	.+6      	; 0x520 <__stack+0x21>
	}
	else
	{
		printf("finished MCP2515_init\n");
     51a:	85 ef       	ldi	r24, 0xF5	; 245
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	f0 d7       	rcall	.+4064   	; 0x1500 <puts>
	}
		
    while(1)
    {	
		// statusMultifunctionBoard();
		JOY_getDirection();
     520:	e0 d1       	rcall	.+960    	; 0x8e2 <JOY_getDirection>

		// todo: remove! will be included in the menu driver later
		if(JOYcalibFlag)
     522:	80 91 ac 03 	lds	r24, 0x03AC
     526:	88 23       	and	r24, r24
     528:	19 f0       	breq	.+6      	; 0x530 <__stack+0x31>
		{
			//run joystick calibration
			JOY_calibrate();
     52a:	2e d0       	rcall	.+92     	; 0x588 <JOY_calibrate>
			JOYcalibFlag = 0;
     52c:	10 92 ac 03 	sts	0x03AC, r1
		}	
		
		if(activateMenuFlag)
     530:	80 91 ab 03 	lds	r24, 0x03AB
     534:	81 11       	cpse	r24, r1
		{
			MENU_activate();
     536:	1e d4       	rcall	.+2108   	; 0xd74 <MENU_activate>
		}
		
		if(SPI_ReceivedByte)
     538:	80 91 c4 03 	lds	r24, 0x03C4
		{
			//TODO: check which slave caused the interrupt. SS_CAN_CONTROLLER assumed now
// 			SPI_ReceivedByte = SPI_receive(SS_CAN_CONTROLLER);	
// 			printf("SPI received byte: %d\n", SPI_ReceivedByte);
		}
    }
     53c:	f1 cf       	rjmp	.-30     	; 0x520 <__stack+0x21>

0000053e <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     53e:	95 b7       	in	r25, 0x35	; 53
     540:	90 68       	ori	r25, 0x80	; 128
     542:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     544:	96 b7       	in	r25, 0x36	; 54
     546:	98 60       	ori	r25, 0x08	; 8
     548:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     54a:	88 23       	and	r24, r24
     54c:	19 f0       	breq	.+6      	; 0x554 <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     54e:	80 b7       	in	r24, 0x30	; 48
     550:	80 62       	ori	r24, 0x20	; 32
     552:	80 bf       	out	0x30, r24	; 48
     554:	08 95       	ret

00000556 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     556:	fc 01       	movw	r30, r24
     558:	80 81       	ld	r24, Z
	return val;
}
     55a:	08 95       	ret

0000055c <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     55c:	fc 01       	movw	r30, r24
     55e:	60 83       	st	Z, r22
     560:	08 95       	ret

00000562 <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     562:	10 92 b1 03 	sts	0x03B1, r1
     566:	10 92 b0 03 	sts	0x03B0, r1
	currentPosition.Y_abs = 0;
     56a:	10 92 b3 03 	sts	0x03B3, r1
     56e:	10 92 b2 03 	sts	0x03B2, r1
	currentPosition.X_per = 0;
     572:	10 92 b5 03 	sts	0x03B5, r1
     576:	10 92 b4 03 	sts	0x03B4, r1
	currentPosition.Y_per = 0;
     57a:	10 92 b7 03 	sts	0x03B7, r1
     57e:	10 92 b6 03 	sts	0x03B6, r1
	currentDirection = CENTRE;
     582:	10 92 af 03 	sts	0x03AF, r1
     586:	08 95       	ret

00000588 <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     588:	cf 93       	push	r28
     58a:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     58c:	1e d4       	rcall	.+2108   	; 0xdca <OLED_clear>
     58e:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	fc d3       	rcall	.+2040   	; 0xd90 <OLED_goto>
     598:	8b e0       	ldi	r24, 0x0B	; 11
     59a:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("JOY RIGHT");
     59c:	4f d4       	rcall	.+2206   	; 0xe3c <OLED_printString>
     59e:	85 e1       	ldi	r24, 0x15	; 21
     5a0:	92 e0       	ldi	r25, 0x02	; 2
     5a2:	ae d7       	rcall	.+3932   	; 0x1500 <puts>
	printf("Move JOY to the right\n");
     5a4:	2f ef       	ldi	r18, 0xFF	; 255
     5a6:	4f ef       	ldi	r20, 0xFF	; 255
     5a8:	52 e0       	ldi	r21, 0x02	; 2
     5aa:	21 50       	subi	r18, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ac:	40 40       	sbci	r20, 0x00	; 0
     5ae:	50 40       	sbci	r21, 0x00	; 0
     5b0:	e1 f7       	brne	.-8      	; 0x5aa <JOY_calibrate+0x22>
     5b2:	00 c0       	rjmp	.+0      	; 0x5b4 <JOY_calibrate+0x2c>
     5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <JOY_calibrate+0x2e>
     5b6:	c4 e1       	ldi	r28, 0x14	; 20
     5b8:	d0 e0       	ldi	r29, 0x00	; 0
     5ba:	60 91 06 01 	lds	r22, 0x0106
     5be:	70 91 07 01 	lds	r23, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     5c2:	82 e0       	ldi	r24, 0x02	; 2
     5c4:	ce d5       	rcall	.+2972   	; 0x1162 <ADC_request>
     5c6:	8f ef       	ldi	r24, 0xFF	; 255
     5c8:	9f e1       	ldi	r25, 0x1F	; 31
     5ca:	21 e0       	ldi	r18, 0x01	; 1
     5cc:	81 50       	subi	r24, 0x01	; 1
     5ce:	90 40       	sbci	r25, 0x00	; 0
     5d0:	20 40       	sbci	r18, 0x00	; 0
     5d2:	e1 f7       	brne	.-8      	; 0x5cc <JOY_calibrate+0x44>
     5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <JOY_calibrate+0x4e>
     5d6:	00 00       	nop
     5d8:	80 91 06 01 	lds	r24, 0x0106
     5dc:	90 91 07 01 	lds	r25, 0x0107
     5e0:	e4 d5       	rcall	.+3016   	; 0x11aa <ADC_read>
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     5e2:	90 91 0d 01 	lds	r25, 0x010D
     5e6:	98 17       	cp	r25, r24
     5e8:	10 f4       	brcc	.+4      	; 0x5ee <JOY_calibrate+0x66>
     5ea:	80 93 0d 01 	sts	0x010D, r24
		
		if(temp > calR) {calR = temp;}
     5ee:	21 97       	sbiw	r28, 0x01	; 1
     5f0:	20 97       	sbiw	r28, 0x00	; 0
     5f2:	19 f7       	brne	.-58     	; 0x5ba <JOY_calibrate+0x32>
     5f4:	60 e0       	ldi	r22, 0x00	; 0
     5f6:	70 e0       	ldi	r23, 0x00	; 0
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	90 e0       	ldi	r25, 0x00	; 0
	OLED_goto(0,0);
	OLED_printString("JOY RIGHT");
	printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     5fc:	c9 d3       	rcall	.+1938   	; 0xd90 <OLED_goto>
     5fe:	8b e2       	ldi	r24, 0x2B	; 43
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_goto(1,0);
     600:	92 e0       	ldi	r25, 0x02	; 2
     602:	1c d4       	rcall	.+2104   	; 0xe3c <OLED_printString>
     604:	84 e3       	ldi	r24, 0x34	; 52
     606:	92 e0       	ldi	r25, 0x02	; 2
     608:	7b d7       	rcall	.+3830   	; 0x1500 <puts>
     60a:	4f ef       	ldi	r20, 0xFF	; 255
	OLED_printString("JOY LEFT");
     60c:	5f ef       	ldi	r21, 0xFF	; 255
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	41 50       	subi	r20, 0x01	; 1
     612:	50 40       	sbci	r21, 0x00	; 0
	printf("Move JOY to the left\n");
     614:	80 40       	sbci	r24, 0x00	; 0
     616:	e1 f7       	brne	.-8      	; 0x610 <JOY_calibrate+0x88>
     618:	00 c0       	rjmp	.+0      	; 0x61a <JOY_calibrate+0x92>
     61a:	00 c0       	rjmp	.+0      	; 0x61c <JOY_calibrate+0x94>
     61c:	c4 e1       	ldi	r28, 0x14	; 20
     61e:	d0 e0       	ldi	r29, 0x00	; 0
     620:	60 91 06 01 	lds	r22, 0x0106
     624:	70 91 07 01 	lds	r23, 0x0107
     628:	82 e0       	ldi	r24, 0x02	; 2
     62a:	9b d5       	rcall	.+2870   	; 0x1162 <ADC_request>
     62c:	9f ef       	ldi	r25, 0xFF	; 255
     62e:	2f e1       	ldi	r18, 0x1F	; 31
     630:	41 e0       	ldi	r20, 0x01	; 1
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     632:	91 50       	subi	r25, 0x01	; 1
     634:	20 40       	sbci	r18, 0x00	; 0
     636:	40 40       	sbci	r20, 0x00	; 0
     638:	e1 f7       	brne	.-8      	; 0x632 <JOY_calibrate+0xaa>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <JOY_calibrate+0xb4>
     63c:	00 00       	nop
     63e:	80 91 06 01 	lds	r24, 0x0106
     642:	90 91 07 01 	lds	r25, 0x0107
     646:	b1 d5       	rcall	.+2914   	; 0x11aa <ADC_read>
     648:	90 91 0c 01 	lds	r25, 0x010C
     64c:	89 17       	cp	r24, r25
     64e:	10 f4       	brcc	.+4      	; 0x654 <JOY_calibrate+0xcc>
     650:	80 93 0c 01 	sts	0x010C, r24
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     654:	21 97       	sbiw	r28, 0x01	; 1
     656:	20 97       	sbiw	r28, 0x00	; 0
     658:	19 f7       	brne	.-58     	; 0x620 <JOY_calibrate+0x98>
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	70 e0       	ldi	r23, 0x00	; 0
		
		if(temp < calL) {calL = temp;}
     65e:	82 e0       	ldi	r24, 0x02	; 2
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	96 d3       	rcall	.+1836   	; 0xd90 <OLED_goto>
     664:	89 e4       	ldi	r24, 0x49	; 73
     666:	92 e0       	ldi	r25, 0x02	; 2
     668:	e9 d3       	rcall	.+2002   	; 0xe3c <OLED_printString>
     66a:	80 e5       	ldi	r24, 0x50	; 80
	OLED_goto(1,0);
	OLED_printString("JOY LEFT");
	printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     66c:	92 e0       	ldi	r25, 0x02	; 2
     66e:	48 d7       	rcall	.+3728   	; 0x1500 <puts>
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_goto(2,0);
     670:	5f ef       	ldi	r21, 0xFF	; 255
     672:	8f ef       	ldi	r24, 0xFF	; 255
     674:	92 e0       	ldi	r25, 0x02	; 2
     676:	51 50       	subi	r21, 0x01	; 1
     678:	80 40       	sbci	r24, 0x00	; 0
     67a:	90 40       	sbci	r25, 0x00	; 0
	OLED_printString("JOY UP");
     67c:	e1 f7       	brne	.-8      	; 0x676 <JOY_calibrate+0xee>
     67e:	00 c0       	rjmp	.+0      	; 0x680 <JOY_calibrate+0xf8>
     680:	00 c0       	rjmp	.+0      	; 0x682 <JOY_calibrate+0xfa>
     682:	c4 e1       	ldi	r28, 0x14	; 20
	printf("Move JOY up\n");
     684:	d0 e0       	ldi	r29, 0x00	; 0
     686:	60 91 06 01 	lds	r22, 0x0106
     68a:	70 91 07 01 	lds	r23, 0x0107
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	68 d5       	rcall	.+2768   	; 0x1162 <ADC_request>
     692:	2f ef       	ldi	r18, 0xFF	; 255
     694:	4f e1       	ldi	r20, 0x1F	; 31
     696:	51 e0       	ldi	r21, 0x01	; 1
     698:	21 50       	subi	r18, 0x01	; 1
     69a:	40 40       	sbci	r20, 0x00	; 0
     69c:	50 40       	sbci	r21, 0x00	; 0
     69e:	e1 f7       	brne	.-8      	; 0x698 <JOY_calibrate+0x110>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <JOY_calibrate+0x11a>
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     6a2:	00 00       	nop
     6a4:	80 91 06 01 	lds	r24, 0x0106
     6a8:	90 91 07 01 	lds	r25, 0x0107
     6ac:	7e d5       	rcall	.+2812   	; 0x11aa <ADC_read>
     6ae:	90 91 0b 01 	lds	r25, 0x010B
     6b2:	98 17       	cp	r25, r24
     6b4:	10 f4       	brcc	.+4      	; 0x6ba <JOY_calibrate+0x132>
     6b6:	80 93 0b 01 	sts	0x010B, r24
     6ba:	21 97       	sbiw	r28, 0x01	; 1
     6bc:	20 97       	sbiw	r28, 0x00	; 0
     6be:	19 f7       	brne	.-58     	; 0x686 <JOY_calibrate+0xfe>
     6c0:	60 e0       	ldi	r22, 0x00	; 0
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	83 e0       	ldi	r24, 0x03	; 3
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	63 d3       	rcall	.+1734   	; 0xd90 <OLED_goto>
     6ca:	8c e5       	ldi	r24, 0x5C	; 92
     6cc:	92 e0       	ldi	r25, 0x02	; 2
		
		if(temp > calUp) {calUp = temp;}
     6ce:	b6 d3       	rcall	.+1900   	; 0xe3c <OLED_printString>
     6d0:	85 e6       	ldi	r24, 0x65	; 101
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	15 d7       	rcall	.+3626   	; 0x1500 <puts>
     6d6:	8f ef       	ldi	r24, 0xFF	; 255
     6d8:	9f ef       	ldi	r25, 0xFF	; 255
     6da:	22 e0       	ldi	r18, 0x02	; 2
	OLED_goto(2,0);
	OLED_printString("JOY UP");
	printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     6dc:	81 50       	subi	r24, 0x01	; 1
     6de:	90 40       	sbci	r25, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_goto(3,0);
     6e0:	20 40       	sbci	r18, 0x00	; 0
     6e2:	e1 f7       	brne	.-8      	; 0x6dc <JOY_calibrate+0x154>
     6e4:	00 c0       	rjmp	.+0      	; 0x6e6 <JOY_calibrate+0x15e>
     6e6:	00 c0       	rjmp	.+0      	; 0x6e8 <JOY_calibrate+0x160>
     6e8:	c4 e1       	ldi	r28, 0x14	; 20
     6ea:	d0 e0       	ldi	r29, 0x00	; 0
	OLED_printString("JOY DOWN");
     6ec:	60 91 06 01 	lds	r22, 0x0106
     6f0:	70 91 07 01 	lds	r23, 0x0107
	printf("Move JOY down\n");
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	35 d5       	rcall	.+2666   	; 0x1162 <ADC_request>
     6f8:	4f ef       	ldi	r20, 0xFF	; 255
     6fa:	5f e1       	ldi	r21, 0x1F	; 31
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	41 50       	subi	r20, 0x01	; 1
     700:	50 40       	sbci	r21, 0x00	; 0
     702:	80 40       	sbci	r24, 0x00	; 0
     704:	e1 f7       	brne	.-8      	; 0x6fe <JOY_calibrate+0x176>
     706:	00 c0       	rjmp	.+0      	; 0x708 <JOY_calibrate+0x180>
     708:	00 00       	nop
     70a:	80 91 06 01 	lds	r24, 0x0106
     70e:	90 91 07 01 	lds	r25, 0x0107
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     712:	4b d5       	rcall	.+2710   	; 0x11aa <ADC_read>
     714:	90 91 0a 01 	lds	r25, 0x010A
     718:	89 17       	cp	r24, r25
     71a:	10 f4       	brcc	.+4      	; 0x720 <JOY_calibrate+0x198>
     71c:	80 93 0a 01 	sts	0x010A, r24
     720:	21 97       	sbiw	r28, 0x01	; 1
     722:	20 97       	sbiw	r28, 0x00	; 0
     724:	19 f7       	brne	.-58     	; 0x6ec <JOY_calibrate+0x164>
     726:	30 91 0a 01 	lds	r19, 0x010A
     72a:	20 91 0b 01 	lds	r18, 0x010B
     72e:	90 91 0c 01 	lds	r25, 0x010C
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     732:	80 91 0d 01 	lds	r24, 0x010D
     736:	1f 92       	push	r1
     738:	3f 93       	push	r19
     73a:	1f 92       	push	r1
     73c:	2f 93       	push	r18
		
		if(temp < calDown) {calDown = temp;}
     73e:	1f 92       	push	r1
     740:	9f 93       	push	r25
     742:	1f 92       	push	r1
     744:	8f 93       	push	r24
     746:	83 e7       	ldi	r24, 0x73	; 115
     748:	92 e0       	ldi	r25, 0x02	; 2
     74a:	9f 93       	push	r25
	OLED_goto(3,0);
	OLED_printString("JOY DOWN");
	printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     74c:	8f 93       	push	r24
     74e:	c7 d6       	rcall	.+3470   	; 0x14de <printf>
		
		if(temp < calDown) {calDown = temp;}
	}
	
	
	printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
     750:	20 91 0b 01 	lds	r18, 0x010B
     754:	80 91 0a 01 	lds	r24, 0x010A
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	28 1b       	sub	r18, r24
     75c:	31 09       	sbc	r19, r1
     75e:	c9 01       	movw	r24, r18
     760:	4d b7       	in	r20, 0x3d	; 61
     762:	5e b7       	in	r21, 0x3e	; 62
     764:	46 5f       	subi	r20, 0xF6	; 246
     766:	5f 4f       	sbci	r21, 0xFF	; 255
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	f8 94       	cli
     76c:	5e bf       	out	0x3e, r21	; 62
     76e:	0f be       	out	0x3f, r0	; 63
     770:	4d bf       	out	0x3d, r20	; 61
     772:	99 23       	and	r25, r25
     774:	0c f4       	brge	.+2      	; 0x778 <JOY_calibrate+0x1f0>
     776:	01 96       	adiw	r24, 0x01	; 1
     778:	95 95       	asr	r25
     77a:	87 95       	ror	r24
	
	meanVert = (calUp - calDown)/2;
     77c:	80 93 09 01 	sts	0x0109, r24
     780:	20 91 0d 01 	lds	r18, 0x010D
     784:	80 91 0c 01 	lds	r24, 0x010C
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	28 1b       	sub	r18, r24
     78c:	31 09       	sbc	r19, r1
     78e:	c9 01       	movw	r24, r18
     790:	99 23       	and	r25, r25
     792:	0c f4       	brge	.+2      	; 0x796 <JOY_calibrate+0x20e>
     794:	01 96       	adiw	r24, 0x01	; 1
     796:	95 95       	asr	r25
     798:	87 95       	ror	r24
     79a:	80 93 08 01 	sts	0x0108, r24
     79e:	60 e0       	ldi	r22, 0x00	; 0
     7a0:	70 e0       	ldi	r23, 0x00	; 0
     7a2:	84 e0       	ldi	r24, 0x04	; 4
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	f4 d2       	rcall	.+1512   	; 0xd90 <OLED_goto>
     7a8:	8d e9       	ldi	r24, 0x9D	; 157
     7aa:	92 e0       	ldi	r25, 0x02	; 2
	meanHor = (calR - calL)/2;
     7ac:	47 d3       	rcall	.+1678   	; 0xe3c <OLED_printString>
     7ae:	90 91 08 01 	lds	r25, 0x0108
     7b2:	80 91 09 01 	lds	r24, 0x0109
     7b6:	1f 92       	push	r1
     7b8:	9f 93       	push	r25
     7ba:	1f 92       	push	r1
     7bc:	8f 93       	push	r24
     7be:	88 ea       	ldi	r24, 0xA8	; 168
     7c0:	92 e0       	ldi	r25, 0x02	; 2
     7c2:	9f 93       	push	r25
     7c4:	8f 93       	push	r24
     7c6:	8b d6       	rcall	.+3350   	; 0x14de <printf>
     7c8:	5f ef       	ldi	r21, 0xFF	; 255
	
	OLED_goto(4,0);
     7ca:	8f ef       	ldi	r24, 0xFF	; 255
     7cc:	9e e0       	ldi	r25, 0x0E	; 14
     7ce:	51 50       	subi	r21, 0x01	; 1
     7d0:	80 40       	sbci	r24, 0x00	; 0
     7d2:	90 40       	sbci	r25, 0x00	; 0
     7d4:	e1 f7       	brne	.-8      	; 0x7ce <JOY_calibrate+0x246>
	OLED_printString("CALIB DONE");
     7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <JOY_calibrate+0x250>
     7d8:	00 00       	nop
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
	printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <JOY_requestCurrentPosition>:
     7ec:	88 37       	cpi	r24, 0x78	; 120
     7ee:	39 f4       	brne	.+14     	; 0x7fe <JOY_requestCurrentPosition+0x12>
     7f0:	60 91 06 01 	lds	r22, 0x0106
     7f4:	70 91 07 01 	lds	r23, 0x0107
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	b3 c4       	rjmp	.+2406   	; 0x1162 <ADC_request>
     7fc:	08 95       	ret
     7fe:	89 37       	cpi	r24, 0x79	; 121
     800:	31 f4       	brne	.+12     	; 0x80e <JOY_requestCurrentPosition+0x22>
     802:	60 91 06 01 	lds	r22, 0x0106
     806:	70 91 07 01 	lds	r23, 0x0107
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	aa c4       	rjmp	.+2388   	; 0x1162 <ADC_request>
     80e:	08 95       	ret

00000810 <JOY_updatePosition>:
     810:	88 37       	cpi	r24, 0x78	; 120
     812:	f9 f4       	brne	.+62     	; 0x852 <JOY_updatePosition+0x42>
     814:	80 91 06 01 	lds	r24, 0x0106
	_delay_ms(1000);
}
     818:	90 91 07 01 	lds	r25, 0x0107
     81c:	c6 d4       	rcall	.+2444   	; 0x11aa <ADC_read>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	90 93 b1 03 	sts	0x03B1, r25
     824:	80 93 b0 03 	sts	0x03B0, r24
     828:	20 91 08 01 	lds	r18, 0x0108
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     82c:	60 91 08 01 	lds	r22, 0x0108
     830:	ac 01       	movw	r20, r24
     832:	42 1b       	sub	r20, r18
     834:	51 09       	sbc	r21, r1
     836:	9a 01       	movw	r18, r20
     838:	44 e6       	ldi	r20, 0x64	; 100
     83a:	42 9f       	mul	r20, r18
     83c:	c0 01       	movw	r24, r0
     83e:	43 9f       	mul	r20, r19
     840:	90 0d       	add	r25, r0
     842:	11 24       	eor	r1, r1
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	b3 d4       	rcall	.+2406   	; 0x11ae <__divmodhi4>
     848:	70 93 b5 03 	sts	0x03B5, r23
     84c:	60 93 b4 03 	sts	0x03B4, r22
     850:	08 95       	ret
     852:	89 37       	cpi	r24, 0x79	; 121
     854:	f1 f4       	brne	.+60     	; 0x892 <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     856:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     85a:	90 91 07 01 	lds	r25, 0x0107
     85e:	a5 d4       	rcall	.+2378   	; 0x11aa <ADC_read>
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	90 93 b3 03 	sts	0x03B3, r25
     866:	80 93 b2 03 	sts	0x03B2, r24
     86a:	20 91 09 01 	lds	r18, 0x0109
     86e:	60 91 09 01 	lds	r22, 0x0109
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     872:	ac 01       	movw	r20, r24
     874:	42 1b       	sub	r20, r18
     876:	51 09       	sbc	r21, r1
     878:	9a 01       	movw	r18, r20
     87a:	44 e6       	ldi	r20, 0x64	; 100
     87c:	42 9f       	mul	r20, r18
     87e:	c0 01       	movw	r24, r0
     880:	43 9f       	mul	r20, r19
     882:	90 0d       	add	r25, r0
     884:	11 24       	eor	r1, r1
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	92 d4       	rcall	.+2340   	; 0x11ae <__divmodhi4>
     88a:	70 93 b7 03 	sts	0x03B7, r23
     88e:	60 93 b6 03 	sts	0x03B6, r22
     892:	08 95       	ret

00000894 <JOY_calculateDirection>:
     894:	80 91 b4 03 	lds	r24, 0x03B4
     898:	90 91 b5 03 	lds	r25, 0x03B5
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     89c:	8b 35       	cpi	r24, 0x5B	; 91
     89e:	91 05       	cpc	r25, r1
     8a0:	24 f0       	brlt	.+8      	; 0x8aa <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     8a2:	83 e0       	ldi	r24, 0x03	; 3
     8a4:	80 93 af 03 	sts	0x03AF, r24
     8a8:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     8aa:	86 3a       	cpi	r24, 0xA6	; 166
     8ac:	9f 4f       	sbci	r25, 0xFF	; 255
     8ae:	24 f4       	brge	.+8      	; 0x8b8 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     8b0:	84 e0       	ldi	r24, 0x04	; 4
     8b2:	80 93 af 03 	sts	0x03AF, r24
     8b6:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     8b8:	80 91 b6 03 	lds	r24, 0x03B6
     8bc:	90 91 b7 03 	lds	r25, 0x03B7
     8c0:	8b 35       	cpi	r24, 0x5B	; 91
     8c2:	91 05       	cpc	r25, r1
     8c4:	24 f0       	brlt	.+8      	; 0x8ce <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	80 93 af 03 	sts	0x03AF, r24
     8cc:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     8ce:	86 3a       	cpi	r24, 0xA6	; 166
     8d0:	9f 4f       	sbci	r25, 0xFF	; 255
     8d2:	24 f4       	brge	.+8      	; 0x8dc <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     8d4:	82 e0       	ldi	r24, 0x02	; 2
     8d6:	80 93 af 03 	sts	0x03AF, r24
     8da:	08 95       	ret
	else{currentDirection = CENTRE;}
     8dc:	10 92 af 03 	sts	0x03AF, r1
     8e0:	08 95       	ret

000008e2 <JOY_getDirection>:
// Before the value is returned, the values of position in x and y direction are 
// requested from the ADC and written to the currentPosition and 
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
     8e2:	88 e7       	ldi	r24, 0x78	; 120
     8e4:	83 df       	rcall	.-250    	; 0x7ec <JOY_requestCurrentPosition>
     8e6:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8e8:	8a 95       	dec	r24
     8ea:	f1 f7       	brne	.-4      	; 0x8e8 <JOY_getDirection+0x6>
     8ec:	00 00       	nop
     8ee:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     8f0:	8f df       	rcall	.-226    	; 0x810 <JOY_updatePosition>
     8f2:	89 e7       	ldi	r24, 0x79	; 121
     8f4:	7b df       	rcall	.-266    	; 0x7ec <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     8f6:	82 e6       	ldi	r24, 0x62	; 98
     8f8:	8a 95       	dec	r24
     8fa:	f1 f7       	brne	.-4      	; 0x8f8 <JOY_getDirection+0x16>
     8fc:	00 00       	nop
     8fe:	89 e7       	ldi	r24, 0x79	; 121
     900:	87 df       	rcall	.-242    	; 0x810 <JOY_updatePosition>
     902:	c8 df       	rcall	.-112    	; 0x894 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     904:	80 91 af 03 	lds	r24, 0x03AF
     908:	08 95       	ret

0000090a <startGame>:

int menuFrameOffset = 10; //Columns from left frame border
//******************************************************************************************

void startGame()
{
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
	OLED_clear();
     90e:	5d d2       	rcall	.+1210   	; 0xdca <OLED_clear>
     910:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	3b d2       	rcall	.+1142   	; 0xd90 <OLED_goto>
     91a:	8d ec       	ldi	r24, 0xCD	; 205
     91c:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("START");
     91e:	8e d2       	rcall	.+1308   	; 0xe3c <OLED_printString>
     920:	60 e0       	ldi	r22, 0x00	; 0
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_goto(3,0);
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	33 d2       	rcall	.+1126   	; 0xd90 <OLED_goto>
     92a:	ce e0       	ldi	r28, 0x0E	; 14
     92c:	d0 e0       	ldi	r29, 0x00	; 0
     92e:	83 ed       	ldi	r24, 0xD3	; 211
     930:	92 e0       	ldi	r25, 0x02	; 2
     932:	84 d2       	rcall	.+1288   	; 0xe3c <OLED_printString>
     934:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     936:	8f e7       	ldi	r24, 0x7F	; 127
     938:	97 e0       	ldi	r25, 0x07	; 7
     93a:	21 50       	subi	r18, 0x01	; 1
     93c:	80 40       	sbci	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     93e:	90 40       	sbci	r25, 0x00	; 0
     940:	e1 f7       	brne	.-8      	; 0x93a <startGame+0x30>
     942:	00 c0       	rjmp	.+0      	; 0x944 <startGame+0x3a>
     944:	00 00       	nop
     946:	21 97       	sbiw	r28, 0x01	; 1
     948:	20 97       	sbiw	r28, 0x00	; 0
     94a:	89 f7       	brne	.-30     	; 0x92e <startGame+0x24>
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	70 e0       	ldi	r23, 0x00	; 0
     950:	85 e0       	ldi	r24, 0x05	; 5
	OLED_goto(0,0);
	OLED_printString("START");
	
	OLED_goto(3,0);
	
	for(int i = 14; i > 0; i--)
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	1d d2       	rcall	.+1082   	; 0xd90 <OLED_goto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_goto(5,0);
     956:	85 ed       	ldi	r24, 0xD5	; 213
     958:	92 e0       	ldi	r25, 0x02	; 2
     95a:	70 d2       	rcall	.+1248   	; 0xe3c <OLED_printString>
     95c:	2f ef       	ldi	r18, 0xFF	; 255
     95e:	8f ef       	ldi	r24, 0xFF	; 255
     960:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     962:	21 50       	subi	r18, 0x01	; 1
     964:	80 40       	sbci	r24, 0x00	; 0
     966:	90 40       	sbci	r25, 0x00	; 0
     968:	e1 f7       	brne	.-8      	; 0x962 <startGame+0x58>
     96a:	00 c0       	rjmp	.+0      	; 0x96c <startGame+0x62>
     96c:	00 c0       	rjmp	.+0      	; 0x96e <startGame+0x64>
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	08 95       	ret

00000974 <MENU_addMenuItem>:
     974:	cf 92       	push	r12
     976:	df 92       	push	r13
     978:	ef 92       	push	r14
     97a:	ff 92       	push	r15
	_delay_ms(3000);
}
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     982:	df 93       	push	r29
     984:	8c 01       	movw	r16, r24
     986:	7b 01       	movw	r14, r22
     988:	6a 01       	movw	r12, r20
     98a:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     98c:	80 91 bb 03 	lds	r24, 0x03BB
     990:	90 91 bc 03 	lds	r25, 0x03BC
     994:	89 2b       	or	r24, r25
     996:	19 f0       	breq	.+6      	; 0x99e <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     998:	8e ed       	ldi	r24, 0xDE	; 222
     99a:	92 e0       	ldi	r25, 0x02	; 2
     99c:	b1 d5       	rcall	.+2914   	; 0x1500 <puts>
     99e:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	2c d4       	rcall	.+2136   	; 0x11fc <malloc>
     9a4:	fc 01       	movw	r30, r24
     9a6:	90 93 bc 03 	sts	0x03BC, r25
     9aa:	80 93 bb 03 	sts	0x03BB, r24
     9ae:	f3 82       	std	Z+3, r15	; 0x03
     9b0:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     9b2:	11 83       	std	Z+1, r17	; 0x01
     9b4:	00 83       	st	Z, r16
	currItem->name = name;
     9b6:	cd 2b       	or	r28, r29
     9b8:	39 f0       	breq	.+14     	; 0x9c8 <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     9ba:	d5 82       	std	Z+5, r13	; 0x05
     9bc:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     9c2:	97 83       	std	Z+7, r25	; 0x07
     9c4:	86 83       	std	Z+6, r24	; 0x06
     9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <MENU_addMenuItem+0x5c>
     9c8:	15 82       	std	Z+5, r1	; 0x05
     9ca:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     9cc:	17 82       	std	Z+7, r1	; 0x07
     9ce:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     9d0:	df 91       	pop	r29
     9d2:	cf 91       	pop	r28
	}
}
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	df 90       	pop	r13
     9de:	cf 90       	pop	r12
     9e0:	08 95       	ret

000009e2 <MENU_buildMenus>:
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     9e6:	86 e1       	ldi	r24, 0x16	; 22
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	08 d4       	rcall	.+2064   	; 0x11fc <malloc>
     9ec:	ec 01       	movw	r28, r24
     9ee:	90 93 c2 03 	sts	0x03C2, r25
     9f2:	80 93 c1 03 	sts	0x03C1, r24
     9f6:	84 ef       	ldi	r24, 0xF4	; 244
	mainMenu->menuName = "MainMenu";
     9f8:	92 e0       	ldi	r25, 0x02	; 2
     9fa:	99 83       	std	Y+1, r25	; 0x01
     9fc:	88 83       	st	Y, r24
     9fe:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     a00:	1c 8a       	std	Y+20, r1	; 0x14
     a02:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	9b 83       	std	Y+3, r25	; 0x03
     a08:	8a 83       	std	Y+2, r24	; 0x02
     a0a:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	f6 d3       	rcall	.+2028   	; 0x11fc <malloc>
     a10:	fc 01       	movw	r30, r24
     a12:	90 93 c0 03 	sts	0x03C0, r25
     a16:	80 93 bf 03 	sts	0x03BF, r24
     a1a:	8d ef       	ldi	r24, 0xFD	; 253
     a1c:	92 e0       	ldi	r25, 0x02	; 2
	difficultyMenu->menuName = "DifficultyMenu";
     a1e:	91 83       	std	Z+1, r25	; 0x01
     a20:	80 83       	st	Z, r24
     a22:	d5 8b       	std	Z+21, r29	; 0x15
     a24:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     a26:	83 e0       	ldi	r24, 0x03	; 3
     a28:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     a2a:	93 83       	std	Z+3, r25	; 0x03
     a2c:	82 83       	std	Z+2, r24	; 0x02
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     a32:	40 e0       	ldi	r20, 0x00	; 0
     a34:	50 e0       	ldi	r21, 0x00	; 0
     a36:	be 01       	movw	r22, r28
     a38:	8c e0       	ldi	r24, 0x0C	; 12
     a3a:	93 e0       	ldi	r25, 0x03	; 3
     a3c:	9b df       	rcall	.-202    	; 0x974 <MENU_addMenuItem>
     a3e:	60 91 c1 03 	lds	r22, 0x03C1
     a42:	70 91 c2 03 	lds	r23, 0x03C2
	mainMenu->children[0] = currItem;
     a46:	e0 91 bb 03 	lds	r30, 0x03BB
     a4a:	f0 91 bc 03 	lds	r31, 0x03BC
     a4e:	db 01       	movw	r26, r22
     a50:	15 96       	adiw	r26, 0x05	; 5
     a52:	fc 93       	st	X, r31
     a54:	ee 93       	st	-X, r30
     a56:	14 97       	sbiw	r26, 0x04	; 4
     a58:	85 e8       	ldi	r24, 0x85	; 133
     a5a:	94 e0       	ldi	r25, 0x04	; 4
     a5c:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
     a5e:	82 87       	std	Z+10, r24	; 0x0a
     a60:	40 91 bf 03 	lds	r20, 0x03BF
     a64:	50 91 c0 03 	lds	r21, 0x03C0
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     a68:	21 e0       	ldi	r18, 0x01	; 1
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	85 e1       	ldi	r24, 0x15	; 21
     a6e:	93 e0       	ldi	r25, 0x03	; 3
     a70:	81 df       	rcall	.-254    	; 0x974 <MENU_addMenuItem>
     a72:	60 91 c1 03 	lds	r22, 0x03C1
     a76:	70 91 c2 03 	lds	r23, 0x03C2
	mainMenu->children[1] = currItem;
     a7a:	80 91 bb 03 	lds	r24, 0x03BB
     a7e:	90 91 bc 03 	lds	r25, 0x03BC
     a82:	fb 01       	movw	r30, r22
     a84:	97 83       	std	Z+7, r25	; 0x07
     a86:	86 83       	std	Z+6, r24	; 0x06
     a88:	20 e0       	ldi	r18, 0x00	; 0
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	40 e0       	ldi	r20, 0x00	; 0
     a8e:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     a90:	80 e2       	ldi	r24, 0x20	; 32
     a92:	93 e0       	ldi	r25, 0x03	; 3
     a94:	6f df       	rcall	.-290    	; 0x974 <MENU_addMenuItem>
     a96:	60 91 c1 03 	lds	r22, 0x03C1
     a9a:	70 91 c2 03 	lds	r23, 0x03C2
     a9e:	80 91 bb 03 	lds	r24, 0x03BB
	mainMenu->children[2] = currItem;
     aa2:	90 91 bc 03 	lds	r25, 0x03BC
     aa6:	db 01       	movw	r26, r22
     aa8:	19 96       	adiw	r26, 0x09	; 9
     aaa:	9c 93       	st	X, r25
     aac:	8e 93       	st	-X, r24
     aae:	18 97       	sbiw	r26, 0x08	; 8
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	40 e0       	ldi	r20, 0x00	; 0
     ab6:	50 e0       	ldi	r21, 0x00	; 0
     ab8:	8b e2       	ldi	r24, 0x2B	; 43
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
     aba:	93 e0       	ldi	r25, 0x03	; 3
     abc:	5b df       	rcall	.-330    	; 0x974 <MENU_addMenuItem>
     abe:	60 91 c1 03 	lds	r22, 0x03C1
     ac2:	70 91 c2 03 	lds	r23, 0x03C2
     ac6:	e0 91 bb 03 	lds	r30, 0x03BB
	mainMenu->children[3] = currItem;
     aca:	f0 91 bc 03 	lds	r31, 0x03BC
     ace:	db 01       	movw	r26, r22
     ad0:	1b 96       	adiw	r26, 0x0b	; 11
     ad2:	fc 93       	st	X, r31
     ad4:	ee 93       	st	-X, r30
     ad6:	1a 97       	sbiw	r26, 0x0a	; 10
     ad8:	84 ec       	ldi	r24, 0xC4	; 196
     ada:	92 e0       	ldi	r25, 0x02	; 2
     adc:	93 87       	std	Z+11, r25	; 0x0b
     ade:	82 87       	std	Z+10, r24	; 0x0a
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	85 e3       	ldi	r24, 0x35	; 53
     aea:	93 e0       	ldi	r25, 0x03	; 3
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
     aec:	43 df       	rcall	.-378    	; 0x974 <MENU_addMenuItem>
     aee:	e0 91 c1 03 	lds	r30, 0x03C1
     af2:	f0 91 c2 03 	lds	r31, 0x03C2
     af6:	80 91 bb 03 	lds	r24, 0x03BB
     afa:	90 91 bc 03 	lds	r25, 0x03BC
	mainMenu->children[4] = currItem;
     afe:	95 87       	std	Z+13, r25	; 0x0d
     b00:	84 87       	std	Z+12, r24	; 0x0c
     b02:	10 92 bc 03 	sts	0x03BC, r1
     b06:	10 92 bb 03 	sts	0x03BB, r1
     b0a:	60 91 bf 03 	lds	r22, 0x03BF
     b0e:	70 91 c0 03 	lds	r23, 0x03C0
	
	currItem = NULL;
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e0       	ldi	r19, 0x00	; 0
     b16:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
     b18:	50 e0       	ldi	r21, 0x00	; 0
     b1a:	8a e3       	ldi	r24, 0x3A	; 58
     b1c:	93 e0       	ldi	r25, 0x03	; 3
     b1e:	2a df       	rcall	.-428    	; 0x974 <MENU_addMenuItem>
     b20:	60 91 bf 03 	lds	r22, 0x03BF
     b24:	70 91 c0 03 	lds	r23, 0x03C0
     b28:	80 91 bb 03 	lds	r24, 0x03BB
     b2c:	90 91 bc 03 	lds	r25, 0x03BC
	difficultyMenu->children[0] = currItem;
     b30:	fb 01       	movw	r30, r22
     b32:	95 83       	std	Z+5, r25	; 0x05
     b34:	84 83       	std	Z+4, r24	; 0x04
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	40 e0       	ldi	r20, 0x00	; 0
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	8f e3       	ldi	r24, 0x3F	; 63
     b40:	93 e0       	ldi	r25, 0x03	; 3
     b42:	18 df       	rcall	.-464    	; 0x974 <MENU_addMenuItem>
     b44:	60 91 bf 03 	lds	r22, 0x03BF
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
     b48:	70 91 c0 03 	lds	r23, 0x03C0
     b4c:	80 91 bb 03 	lds	r24, 0x03BB
     b50:	90 91 bc 03 	lds	r25, 0x03BC
     b54:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
     b56:	17 96       	adiw	r26, 0x07	; 7
     b58:	9c 93       	st	X, r25
     b5a:	8e 93       	st	-X, r24
     b5c:	16 97       	sbiw	r26, 0x06	; 6
     b5e:	20 e0       	ldi	r18, 0x00	; 0
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	40 e0       	ldi	r20, 0x00	; 0
     b64:	50 e0       	ldi	r21, 0x00	; 0
     b66:	86 e4       	ldi	r24, 0x46	; 70
     b68:	93 e0       	ldi	r25, 0x03	; 3
     b6a:	04 df       	rcall	.-504    	; 0x974 <MENU_addMenuItem>
     b6c:	e0 91 bf 03 	lds	r30, 0x03BF
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
     b70:	f0 91 c0 03 	lds	r31, 0x03C0
     b74:	80 91 bb 03 	lds	r24, 0x03BB
     b78:	90 91 bc 03 	lds	r25, 0x03BC
     b7c:	91 87       	std	Z+9, r25	; 0x09
     b7e:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	08 95       	ret

00000b86 <MENU_printMenuItem>:
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	ec 01       	movw	r28, r24
     b8c:	cb 01       	movw	r24, r22
     b8e:	20 97       	sbiw	r28, 0x00	; 0
     b90:	49 f0       	breq	.+18     	; 0xba4 <MENU_printMenuItem+0x1e>
     b92:	60 91 0e 01 	lds	r22, 0x010E
}
     b96:	70 91 0f 01 	lds	r23, 0x010F

void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
     b9a:	fa d0       	rcall	.+500    	; 0xd90 <OLED_goto>
     b9c:	88 81       	ld	r24, Y
		OLED_printString(item->name);
     b9e:	99 81       	ldd	r25, Y+1	; 0x01
     ba0:	4d d1       	rcall	.+666    	; 0xe3c <OLED_printString>
     ba2:	07 c0       	rjmp	.+14     	; 0xbb2 <MENU_printMenuItem+0x2c>
     ba4:	8b e4       	ldi	r24, 0x4B	; 75
     ba6:	93 e0       	ldi	r25, 0x03	; 3
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
     ba8:	9f 93       	push	r25
     baa:	8f 93       	push	r24
     bac:	98 d4       	rcall	.+2352   	; 0x14de <printf>
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	08 95       	ret

00000bb8 <MENU_printMenu>:
	}
}
     bb8:	cf 92       	push	r12
     bba:	df 92       	push	r13
     bbc:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
     bbe:	ff 92       	push	r15
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
     bc8:	6c 01       	movw	r12, r24
     bca:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
     bcc:	fe d0       	rcall	.+508    	; 0xdca <OLED_clear>
     bce:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	8b d1       	rcall	.+790    	; 0xeea <OLED_moveArrow>
     bd4:	1e 14       	cp	r1, r14
     bd6:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
     bd8:	7c f4       	brge	.+30     	; 0xbf8 <MENU_printMenu+0x40>
     bda:	86 01       	movw	r16, r12
     bdc:	0c 5f       	subi	r16, 0xFC	; 252
     bde:	1f 4f       	sbci	r17, 0xFF	; 255
     be0:	c0 e0       	ldi	r28, 0x00	; 0
     be2:	d0 e0       	ldi	r29, 0x00	; 0
     be4:	be 01       	movw	r22, r28
     be6:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
     be8:	81 91       	ld	r24, Z+
     bea:	91 91       	ld	r25, Z+
     bec:	8f 01       	movw	r16, r30
     bee:	cb df       	rcall	.-106    	; 0xb86 <MENU_printMenuItem>
     bf0:	21 96       	adiw	r28, 0x01	; 1
     bf2:	ce 15       	cp	r28, r14
     bf4:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
     bf6:	b1 f7       	brne	.-20     	; 0xbe4 <MENU_printMenu+0x2c>
     bf8:	d0 92 be 03 	sts	0x03BE, r13
     bfc:	c0 92 bd 03 	sts	0x03BD, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
     c00:	10 92 b9 03 	sts	0x03B9, r1
     c04:	10 92 b8 03 	sts	0x03B8, r1
	
	currentPosition = 0;
     c08:	f6 01       	movw	r30, r12
     c0a:	84 81       	ldd	r24, Z+4	; 0x04
     c0c:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
     c0e:	90 93 bc 03 	sts	0x03BC, r25
     c12:	80 93 bb 03 	sts	0x03BB, r24
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	1f 91       	pop	r17
}
     c1c:	0f 91       	pop	r16
     c1e:	ff 90       	pop	r15
     c20:	ef 90       	pop	r14
     c22:	df 90       	pop	r13
     c24:	cf 90       	pop	r12
     c26:	08 95       	ret

00000c28 <MENU_moveUp>:
     c28:	20 91 b8 03 	lds	r18, 0x03B8
     c2c:	30 91 b9 03 	lds	r19, 0x03B9
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
     c30:	12 16       	cp	r1, r18
     c32:	13 06       	cpc	r1, r19
     c34:	bc f4       	brge	.+46     	; 0xc64 <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
     c36:	c9 01       	movw	r24, r18
     c38:	01 97       	sbiw	r24, 0x01	; 1
     c3a:	90 93 b9 03 	sts	0x03B9, r25
     c3e:	80 93 b8 03 	sts	0x03B8, r24
		currItem = currentMenu->children[currentPosition];
     c42:	e0 91 bd 03 	lds	r30, 0x03BD
     c46:	f0 91 be 03 	lds	r31, 0x03BE
     c4a:	2f 5f       	subi	r18, 0xFF	; 255
     c4c:	3f 4f       	sbci	r19, 0xFF	; 255
     c4e:	22 0f       	add	r18, r18
     c50:	33 1f       	adc	r19, r19
     c52:	e2 0f       	add	r30, r18
     c54:	f3 1f       	adc	r31, r19
     c56:	20 81       	ld	r18, Z
     c58:	31 81       	ldd	r19, Z+1	; 0x01
     c5a:	30 93 bc 03 	sts	0x03BC, r19
     c5e:	20 93 bb 03 	sts	0x03BB, r18
		OLED_moveArrow(currentPosition);
     c62:	43 c1       	rjmp	.+646    	; 0xeea <OLED_moveArrow>
     c64:	08 95       	ret

00000c66 <MENU_moveDown>:
     c66:	e0 91 bd 03 	lds	r30, 0x03BD
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
     c6a:	f0 91 be 03 	lds	r31, 0x03BE
     c6e:	20 91 b8 03 	lds	r18, 0x03B8
     c72:	30 91 b9 03 	lds	r19, 0x03B9
     c76:	82 81       	ldd	r24, Z+2	; 0x02
     c78:	93 81       	ldd	r25, Z+3	; 0x03
     c7a:	01 97       	sbiw	r24, 0x01	; 1
     c7c:	28 17       	cp	r18, r24
     c7e:	39 07       	cpc	r19, r25
     c80:	a4 f4       	brge	.+40     	; 0xcaa <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
     c82:	c9 01       	movw	r24, r18
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	90 93 b9 03 	sts	0x03B9, r25
     c8a:	80 93 b8 03 	sts	0x03B8, r24
		currItem = currentMenu->children[currentPosition];
     c8e:	2d 5f       	subi	r18, 0xFD	; 253
     c90:	3f 4f       	sbci	r19, 0xFF	; 255
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	e2 0f       	add	r30, r18
     c98:	f3 1f       	adc	r31, r19
     c9a:	20 81       	ld	r18, Z
     c9c:	31 81       	ldd	r19, Z+1	; 0x01
     c9e:	30 93 bc 03 	sts	0x03BC, r19
     ca2:	20 93 bb 03 	sts	0x03BB, r18
		OLED_moveArrow(currentPosition);
     ca6:	21 c1       	rjmp	.+578    	; 0xeea <OLED_moveArrow>
     ca8:	08 95       	ret
     caa:	10 92 b9 03 	sts	0x03B9, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
     cae:	10 92 b8 03 	sts	0x03B8, r1
     cb2:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
     cb4:	95 81       	ldd	r25, Z+5	; 0x05
     cb6:	90 93 bc 03 	sts	0x03BC, r25
     cba:	80 93 bb 03 	sts	0x03BB, r24
     cbe:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	13 c1       	rjmp	.+550    	; 0xeea <OLED_moveArrow>
     cc4:	08 95       	ret

00000cc6 <MENU_moveLeft>:
     cc6:	e0 91 bd 03 	lds	r30, 0x03BD
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
     cca:	f0 91 be 03 	lds	r31, 0x03BE
     cce:	84 89       	ldd	r24, Z+20	; 0x14
     cd0:	95 89       	ldd	r25, Z+21	; 0x15
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	21 f0       	breq	.+8      	; 0xcde <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
     cd6:	fc 01       	movw	r30, r24
     cd8:	62 81       	ldd	r22, Z+2	; 0x02
     cda:	73 81       	ldd	r23, Z+3	; 0x03
     cdc:	6d cf       	rjmp	.-294    	; 0xbb8 <MENU_printMenu>
     cde:	08 95       	ret

00000ce0 <MENU_reactivate>:
     ce0:	80 91 bd 03 	lds	r24, 0x03BD
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
     ce4:	90 91 be 03 	lds	r25, 0x03BE
     ce8:	fc 01       	movw	r30, r24
     cea:	62 81       	ldd	r22, Z+2	; 0x02
     cec:	73 81       	ldd	r23, Z+3	; 0x03
     cee:	64 df       	rcall	.-312    	; 0xbb8 <MENU_printMenu>
     cf0:	18 c0       	rjmp	.+48     	; 0xd22 <MENU_waitForInput>
	MENU_waitForInput();
     cf2:	08 95       	ret

00000cf4 <MENU_moveRight>:
     cf4:	e0 91 bb 03 	lds	r30, 0x03BB
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
     cf8:	f0 91 bc 03 	lds	r31, 0x03BC
     cfc:	86 81       	ldd	r24, Z+6	; 0x06
     cfe:	97 81       	ldd	r25, Z+7	; 0x07
     d00:	89 2b       	or	r24, r25
     d02:	39 f0       	breq	.+14     	; 0xd12 <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
     d04:	84 81       	ldd	r24, Z+4	; 0x04
     d06:	95 81       	ldd	r25, Z+5	; 0x05
     d08:	fc 01       	movw	r30, r24
     d0a:	62 81       	ldd	r22, Z+2	; 0x02
     d0c:	73 81       	ldd	r23, Z+3	; 0x03
     d0e:	54 cf       	rjmp	.-344    	; 0xbb8 <MENU_printMenu>
     d10:	08 95       	ret
     d12:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
     d14:	f3 85       	ldd	r31, Z+11	; 0x0b
     d16:	e0 2d       	mov	r30, r0
     d18:	30 97       	sbiw	r30, 0x00	; 0
     d1a:	11 f0       	breq	.+4      	; 0xd20 <MENU_moveRight+0x2c>
     d1c:	09 95       	icall
	{
		currItem->functionPtr();
     d1e:	e0 cf       	rjmp	.-64     	; 0xce0 <MENU_reactivate>
		MENU_reactivate();
     d20:	08 95       	ret

00000d22 <MENU_waitForInput>:
     d22:	80 91 b8 03 	lds	r24, 0x03B8
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
     d26:	90 91 b9 03 	lds	r25, 0x03B9
     d2a:	df d0       	rcall	.+446    	; 0xeea <OLED_moveArrow>
     d2c:	80 91 ba 03 	lds	r24, 0x03BA
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
     d30:	88 23       	and	r24, r24
     d32:	f9 f0       	breq	.+62     	; 0xd72 <MENU_waitForInput+0x50>
     d34:	d6 dd       	rcall	.-1108   	; 0x8e2 <JOY_getDirection>
	{
		currDir = JOY_getDirection();
     d36:	82 30       	cpi	r24, 0x02	; 2
     d38:	71 f0       	breq	.+28     	; 0xd56 <MENU_waitForInput+0x34>
		switch(currDir){
     d3a:	18 f4       	brcc	.+6      	; 0xd42 <MENU_waitForInput+0x20>
     d3c:	81 30       	cpi	r24, 0x01	; 1
     d3e:	49 f0       	breq	.+18     	; 0xd52 <MENU_waitForInput+0x30>
     d40:	0b c0       	rjmp	.+22     	; 0xd58 <MENU_waitForInput+0x36>
     d42:	83 30       	cpi	r24, 0x03	; 3
     d44:	21 f0       	breq	.+8      	; 0xd4e <MENU_waitForInput+0x2c>
     d46:	84 30       	cpi	r24, 0x04	; 4
     d48:	39 f4       	brne	.+14     	; 0xd58 <MENU_waitForInput+0x36>
     d4a:	bd df       	rcall	.-134    	; 0xcc6 <MENU_moveLeft>
     d4c:	05 c0       	rjmp	.+10     	; 0xd58 <MENU_waitForInput+0x36>
			case LEFT:
			MENU_moveLeft();
     d4e:	d2 df       	rcall	.-92     	; 0xcf4 <MENU_moveRight>
     d50:	03 c0       	rjmp	.+6      	; 0xd58 <MENU_waitForInput+0x36>
			break;
     d52:	6a df       	rcall	.-300    	; 0xc28 <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
     d54:	01 c0       	rjmp	.+2      	; 0xd58 <MENU_waitForInput+0x36>
     d56:	87 df       	rcall	.-242    	; 0xc66 <MENU_moveDown>
			break;
     d58:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
     d5a:	8f e7       	ldi	r24, 0x7F	; 127
     d5c:	94 e0       	ldi	r25, 0x04	; 4
			break;
     d5e:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
     d60:	80 40       	sbci	r24, 0x00	; 0
     d62:	90 40       	sbci	r25, 0x00	; 0
     d64:	e1 f7       	brne	.-8      	; 0xd5e <MENU_waitForInput+0x3c>
     d66:	00 c0       	rjmp	.+0      	; 0xd68 <MENU_waitForInput+0x46>
     d68:	00 00       	nop
     d6a:	80 91 ba 03 	lds	r24, 0x03BA
     d6e:	81 11       	cpse	r24, r1
     d70:	e1 cf       	rjmp	.-62     	; 0xd34 <MENU_waitForInput+0x12>
     d72:	08 95       	ret

00000d74 <MENU_activate>:
     d74:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
     d76:	80 93 ba 03 	sts	0x03BA, r24
     d7a:	33 de       	rcall	.-922    	; 0x9e2 <MENU_buildMenus>
     d7c:	80 91 c1 03 	lds	r24, 0x03C1
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
     d80:	90 91 c2 03 	lds	r25, 0x03C2
     d84:	fc 01       	movw	r30, r24
     d86:	62 81       	ldd	r22, Z+2	; 0x02
     d88:	73 81       	ldd	r23, Z+3	; 0x03
     d8a:	16 df       	rcall	.-468    	; 0xbb8 <MENU_printMenu>
     d8c:	ca cf       	rjmp	.-108    	; 0xd22 <MENU_waitForInput>
     d8e:	08 95       	ret

00000d90 <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
     d90:	26 2f       	mov	r18, r22
     d92:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
     d94:	75 95       	asr	r23
     d96:	67 95       	ror	r22
     d98:	75 95       	asr	r23
     d9a:	67 95       	ror	r22
     d9c:	75 95       	asr	r23
     d9e:	67 95       	ror	r22
     da0:	75 95       	asr	r23
     da2:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
     da4:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
     da6:	80 55       	subi	r24, 0x50	; 80
     da8:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
     daa:	e0 91 12 01 	lds	r30, 0x0112
     dae:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     db2:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
     db4:	e0 91 12 01 	lds	r30, 0x0112
     db8:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     dbc:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
     dbe:	e0 91 12 01 	lds	r30, 0x0112
     dc2:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     dc6:	60 83       	st	Z, r22
     dc8:	08 95       	ret

00000dca <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	c1 e0       	ldi	r28, 0x01	; 1
     dd2:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
     dd8:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	d8 df       	rcall	.-80     	; 0xd90 <OLED_goto>
     de0:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
     de2:	e0 91 10 01 	lds	r30, 0x0110
		{
			OLED_writeByteToOLED(oled_data, 0x00);
     de6:	f0 91 11 01 	lds	r31, 0x0111
     dea:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     dec:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
     dee:	80 38       	cpi	r24, 0x80	; 128
     df0:	c1 f7       	brne	.-16     	; 0xde2 <OLED_clear+0x18>
     df2:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
     df4:	9d 2f       	mov	r25, r29
     df6:	21 96       	adiw	r28, 0x01	; 1
     df8:	c9 30       	cpi	r28, 0x09	; 9
     dfa:	d1 05       	cpc	r29, r1
     dfc:	71 f7       	brne	.-36     	; 0xdda <OLED_clear+0x10>
     dfe:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
     e00:	cf 91       	pop	r28
     e02:	1f 91       	pop	r17
     e04:	08 95       	ret

00000e06 <OLED_printCharacter>:
     e06:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	22 0f       	add	r18, r18
     e0e:	33 1f       	adc	r19, r19
     e10:	22 0f       	add	r18, r18
     e12:	33 1f       	adc	r19, r19
     e14:	22 0f       	add	r18, r18
     e16:	33 1f       	adc	r19, r19
     e18:	80 e0       	ldi	r24, 0x00	; 0
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	20 59       	subi	r18, 0x90	; 144
     e1e:	3f 4f       	sbci	r19, 0xFF	; 255
     e20:	f9 01       	movw	r30, r18
     e22:	e8 0f       	add	r30, r24
     e24:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
     e26:	e4 91       	lpm	r30, Z
     e28:	a0 91 10 01 	lds	r26, 0x0110
     e2c:	b0 91 11 01 	lds	r27, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e30:	ec 93       	st	X, r30
     e32:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
     e34:	88 30       	cpi	r24, 0x08	; 8
     e36:	91 05       	cpc	r25, r1
     e38:	99 f7       	brne	.-26     	; 0xe20 <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
     e3a:	08 95       	ret

00000e3c <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
     e3c:	1f 93       	push	r17
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
     e42:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
     e44:	10 e0       	ldi	r17, 0x00	; 0
     e46:	06 c0       	rjmp	.+12     	; 0xe54 <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
     e48:	fe 01       	movw	r30, r28
     e4a:	e8 0f       	add	r30, r24
     e4c:	f9 1f       	adc	r31, r25
     e4e:	80 81       	ld	r24, Z
     e50:	da df       	rcall	.-76     	; 0xe06 <OLED_printCharacter>
     e52:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
     e54:	81 2f       	mov	r24, r17
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	fe 01       	movw	r30, r28
     e5a:	01 90       	ld	r0, Z+
     e5c:	00 20       	and	r0, r0
     e5e:	e9 f7       	brne	.-6      	; 0xe5a <OLED_printString+0x1e>
     e60:	31 97       	sbiw	r30, 0x01	; 1
     e62:	ec 1b       	sub	r30, r28
     e64:	fd 0b       	sbc	r31, r29
     e66:	8e 17       	cp	r24, r30
     e68:	9f 07       	cpc	r25, r31
     e6a:	70 f3       	brcs	.-36     	; 0xe48 <OLED_printString+0xc>
     e6c:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
     e6e:	cf 91       	pop	r28
     e70:	1f 91       	pop	r17
     e72:	08 95       	ret

00000e74 <OLED_printArrow>:
     e74:	e0 91 10 01 	lds	r30, 0x0110
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
     e78:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e7c:	88 e1       	ldi	r24, 0x18	; 24
     e7e:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
     e80:	e0 91 10 01 	lds	r30, 0x0110
     e84:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e88:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
     e8a:	e0 91 10 01 	lds	r30, 0x0110
     e8e:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e92:	9e e7       	ldi	r25, 0x7E	; 126
     e94:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
     e96:	e0 91 10 01 	lds	r30, 0x0110
     e9a:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     e9e:	9c e3       	ldi	r25, 0x3C	; 60
     ea0:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
     ea2:	e0 91 10 01 	lds	r30, 0x0110
     ea6:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     eaa:	80 83       	st	Z, r24
     eac:	08 95       	ret

00000eae <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	c1 e0       	ldi	r28, 0x01	; 1
     eb6:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
     ebc:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	66 df       	rcall	.-308    	; 0xd90 <OLED_goto>
     ec4:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
     ec6:	e0 91 10 01 	lds	r30, 0x0110
		{
			OLED_writeByteToOLED(oled_data, 0x00);
     eca:	f0 91 11 01 	lds	r31, 0x0111
     ece:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ed0:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
     ed2:	85 30       	cpi	r24, 0x05	; 5
     ed4:	c1 f7       	brne	.-16     	; 0xec6 <OLED_clearArrow+0x18>
     ed6:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
     ed8:	9d 2f       	mov	r25, r29
     eda:	21 96       	adiw	r28, 0x01	; 1
     edc:	c9 30       	cpi	r28, 0x09	; 9
     ede:	d1 05       	cpc	r29, r1
     ee0:	71 f7       	brne	.-36     	; 0xebe <OLED_clearArrow+0x10>
     ee2:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <OLED_moveArrow>:
     eea:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
     eec:	df 93       	push	r29
     eee:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
     ef0:	de df       	rcall	.-68     	; 0xeae <OLED_clearArrow>
     ef2:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	ce 01       	movw	r24, r28
     ef8:	4b df       	rcall	.-362    	; 0xd90 <OLED_goto>
     efa:	bc df       	rcall	.-136    	; 0xe74 <OLED_printArrow>
     efc:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
     efe:	cf 91       	pop	r28
     f00:	08 95       	ret

00000f02 <OLED_setContrast>:
}
     f02:	e0 91 12 01 	lds	r30, 0x0112
     f06:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f0a:	91 e8       	ldi	r25, 0x81	; 129
     f0c:	90 83       	st	Z, r25
void OLED_setContrast(uint8_t contrast)
{
	// activate contrast contol
	OLED_writeByteToOLED(oled_cmd, 0x81);
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
     f0e:	e0 91 12 01 	lds	r30, 0x0112
     f12:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     f16:	80 83       	st	Z, r24
     f18:	08 95       	ret

00000f1a <OLED_fadeIn>:
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
}

void OLED_fadeIn(void)
{
     f1a:	cf 93       	push	r28
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
     f1c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		OLED_setContrast(i);
     f1e:	8c 2f       	mov	r24, r28
     f20:	f0 df       	rcall	.-32     	; 0xf02 <OLED_setContrast>
     f22:	83 e3       	ldi	r24, 0x33	; 51
     f24:	93 e1       	ldi	r25, 0x13	; 19
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	f1 f7       	brne	.-4      	; 0xf26 <OLED_fadeIn+0xc>
     f2a:	cf 5f       	subi	r28, 0xFF	; 255
}

void OLED_fadeIn(void)
{
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
     f2c:	cf 3f       	cpi	r28, 0xFF	; 255
     f2e:	b9 f7       	brne	.-18     	; 0xf1e <OLED_fadeIn+0x4>
     f30:	cf 91       	pop	r28
	{
		OLED_setContrast(i);
		_delay_ms(4);
	}
}
     f32:	08 95       	ret

00000f34 <OLED_splashScreen>:
     f34:	2f ef       	ldi	r18, 0xFF	; 255
     f36:	8f ef       	ldi	r24, 0xFF	; 255
     f38:	92 e0       	ldi	r25, 0x02	; 2
     f3a:	21 50       	subi	r18, 0x01	; 1
     f3c:	80 40       	sbci	r24, 0x00	; 0
     f3e:	90 40       	sbci	r25, 0x00	; 0
     f40:	e1 f7       	brne	.-8      	; 0xf3a <OLED_splashScreen+0x6>
     f42:	00 c0       	rjmp	.+0      	; 0xf44 <OLED_splashScreen+0x10>
     f44:	00 c0       	rjmp	.+0      	; 0xf46 <OLED_splashScreen+0x12>
}

void OLED_splashScreen(void)
{
	_delay_ms(200);
	OLED_setContrast(0);
     f46:	80 e0       	ldi	r24, 0x00	; 0
     f48:	dc df       	rcall	.-72     	; 0xf02 <OLED_setContrast>
     f4a:	64 e0       	ldi	r22, 0x04	; 4
	OLED_goto(2,4);
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	82 e0       	ldi	r24, 0x02	; 2
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	1e df       	rcall	.-452    	; 0xd90 <OLED_goto>
     f54:	8b e5       	ldi	r24, 0x5B	; 91
     f56:	93 e0       	ldi	r25, 0x03	; 3
	OLED_printString("Group 46 Soft");
     f58:	71 df       	rcall	.-286    	; 0xe3c <OLED_printString>
     f5a:	df df       	rcall	.-66     	; 0xf1a <OLED_fadeIn>
     f5c:	2f ef       	ldi	r18, 0xFF	; 255
     f5e:	8f e7       	ldi	r24, 0x7F	; 127
	OLED_fadeIn();
     f60:	97 e0       	ldi	r25, 0x07	; 7
     f62:	21 50       	subi	r18, 0x01	; 1
     f64:	80 40       	sbci	r24, 0x00	; 0
     f66:	90 40       	sbci	r25, 0x00	; 0
     f68:	e1 f7       	brne	.-8      	; 0xf62 <OLED_splashScreen+0x2e>
     f6a:	00 c0       	rjmp	.+0      	; 0xf6c <OLED_splashScreen+0x38>
     f6c:	00 00       	nop
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	c8 df       	rcall	.-112    	; 0xf02 <OLED_setContrast>
     f72:	6c e1       	ldi	r22, 0x1C	; 28
     f74:	70 e0       	ldi	r23, 0x00	; 0
	_delay_ms(500);
	OLED_setContrast(0);
     f76:	84 e0       	ldi	r24, 0x04	; 4
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0a df       	rcall	.-492    	; 0xd90 <OLED_goto>
	OLED_goto(4,28);
     f7c:	89 e6       	ldi	r24, 0x69	; 105
     f7e:	93 e0       	ldi	r25, 0x03	; 3
     f80:	5d df       	rcall	.-326    	; 0xe3c <OLED_printString>
     f82:	68 e1       	ldi	r22, 0x18	; 24
     f84:	70 e0       	ldi	r23, 0x00	; 0
     f86:	85 e0       	ldi	r24, 0x05	; 5
	OLED_printString("proudly");
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 df       	rcall	.-508    	; 0xd90 <OLED_goto>
     f8c:	81 e7       	ldi	r24, 0x71	; 113
     f8e:	93 e0       	ldi	r25, 0x03	; 3
	OLED_goto(5,24);	
     f90:	55 df       	rcall	.-342    	; 0xe3c <OLED_printString>
     f92:	c3 df       	rcall	.-122    	; 0xf1a <OLED_fadeIn>
     f94:	2f ef       	ldi	r18, 0xFF	; 255
     f96:	8f e7       	ldi	r24, 0x7F	; 127
     f98:	97 e0       	ldi	r25, 0x07	; 7
     f9a:	21 50       	subi	r18, 0x01	; 1
	OLED_printString("presents");
     f9c:	80 40       	sbci	r24, 0x00	; 0
     f9e:	90 40       	sbci	r25, 0x00	; 0
     fa0:	e1 f7       	brne	.-8      	; 0xf9a <OLED_splashScreen+0x66>
     fa2:	00 c0       	rjmp	.+0      	; 0xfa4 <OLED_splashScreen+0x70>
	OLED_fadeIn();
     fa4:	00 00       	nop
     fa6:	11 df       	rcall	.-478    	; 0xdca <OLED_clear>
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	ab df       	rcall	.-170    	; 0xf02 <OLED_setContrast>
     fac:	6c e1       	ldi	r22, 0x1C	; 28
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	83 e0       	ldi	r24, 0x03	; 3
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	ed de       	rcall	.-550    	; 0xd90 <OLED_goto>
     fb6:	8a e7       	ldi	r24, 0x7A	; 122
     fb8:	93 e0       	ldi	r25, 0x03	; 3
	_delay_ms(500);
	
	OLED_clear();
     fba:	40 df       	rcall	.-384    	; 0xe3c <OLED_printString>
     fbc:	ae df       	rcall	.-164    	; 0xf1a <OLED_fadeIn>
	OLED_setContrast(0);
     fbe:	2f ef       	ldi	r18, 0xFF	; 255
     fc0:	8f ef       	ldi	r24, 0xFF	; 255
     fc2:	9e e0       	ldi	r25, 0x0E	; 14
	OLED_goto(3, 28);
     fc4:	21 50       	subi	r18, 0x01	; 1
     fc6:	80 40       	sbci	r24, 0x00	; 0
     fc8:	90 40       	sbci	r25, 0x00	; 0
     fca:	e1 f7       	brne	.-8      	; 0xfc4 <OLED_splashScreen+0x90>
     fcc:	00 c0       	rjmp	.+0      	; 0xfce <OLED_splashScreen+0x9a>
     fce:	00 00       	nop
	OLED_printString("FIFA 18");
     fd0:	fc de       	rcall	.-520    	; 0xdca <OLED_clear>
     fd2:	80 e5       	ldi	r24, 0x50	; 80
     fd4:	96 cf       	rjmp	.-212    	; 0xf02 <OLED_setContrast>
     fd6:	08 95       	ret

00000fd8 <OLED_init>:
	OLED_fadeIn();
     fd8:	e0 91 12 01 	lds	r30, 0x0112
     fdc:	f0 91 13 01 	lds	r31, 0x0113
     fe0:	8e ea       	ldi	r24, 0xAE	; 174
     fe2:	80 83       	st	Z, r24
     fe4:	e0 91 12 01 	lds	r30, 0x0112
     fe8:	f0 91 13 01 	lds	r31, 0x0113
     fec:	81 ea       	ldi	r24, 0xA1	; 161
	_delay_ms(1000);
	
	// clean up
	OLED_clear(); // wipe screen
     fee:	80 83       	st	Z, r24
     ff0:	e0 91 12 01 	lds	r30, 0x0112
	OLED_setContrast(0x50); // back to standard contrast
     ff4:	f0 91 13 01 	lds	r31, 0x0113
     ff8:	8a ed       	ldi	r24, 0xDA	; 218
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
     ffa:	80 83       	st	Z, r24
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
     ffc:	e0 91 12 01 	lds	r30, 0x0112
    1000:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1004:	82 e1       	ldi	r24, 0x12	; 18
    1006:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    1008:	e0 91 12 01 	lds	r30, 0x0112
    100c:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1010:	88 ec       	ldi	r24, 0xC8	; 200
    1012:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    1014:	e0 91 12 01 	lds	r30, 0x0112
    1018:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    101c:	88 ea       	ldi	r24, 0xA8	; 168
    101e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    1020:	e0 91 12 01 	lds	r30, 0x0112
    1024:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1028:	8f e3       	ldi	r24, 0x3F	; 63
    102a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    102c:	e0 91 12 01 	lds	r30, 0x0112
    1030:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1034:	85 ed       	ldi	r24, 0xD5	; 213
    1036:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
    1038:	e0 91 12 01 	lds	r30, 0x0112
    103c:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1040:	80 e8       	ldi	r24, 0x80	; 128
    1042:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    1044:	e0 91 12 01 	lds	r30, 0x0112
    1048:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    104c:	81 e8       	ldi	r24, 0x81	; 129
    104e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    1050:	e0 91 12 01 	lds	r30, 0x0112
    1054:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1058:	80 e5       	ldi	r24, 0x50	; 80
    105a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    105c:	e0 91 12 01 	lds	r30, 0x0112
    1060:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1064:	89 ed       	ldi	r24, 0xD9	; 217
    1066:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
    1068:	e0 91 12 01 	lds	r30, 0x0112
    106c:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1070:	81 e2       	ldi	r24, 0x21	; 33
    1072:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80);
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    1074:	e0 91 12 01 	lds	r30, 0x0112
    1078:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    107c:	80 e2       	ldi	r24, 0x20	; 32
    107e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    1080:	e0 91 12 01 	lds	r30, 0x0112
    1084:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1088:	82 e0       	ldi	r24, 0x02	; 2
    108a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    108c:	e0 91 12 01 	lds	r30, 0x0112
    1090:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1094:	8b ed       	ldi	r24, 0xDB	; 219
    1096:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    1098:	e0 91 12 01 	lds	r30, 0x0112
    109c:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10a0:	80 e3       	ldi	r24, 0x30	; 48
    10a2:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    10a4:	e0 91 12 01 	lds	r30, 0x0112
    10a8:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10ac:	8d ea       	ldi	r24, 0xAD	; 173
    10ae:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    10b0:	e0 91 12 01 	lds	r30, 0x0112
    10b4:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10b8:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    10ba:	e0 91 12 01 	lds	r30, 0x0112
    10be:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10c2:	84 ea       	ldi	r24, 0xA4	; 164
    10c4:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    10c6:	e0 91 12 01 	lds	r30, 0x0112
    10ca:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10ce:	86 ea       	ldi	r24, 0xA6	; 166
    10d0:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    10d2:	e0 91 12 01 	lds	r30, 0x0112
    10d6:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    10da:	8f ea       	ldi	r24, 0xAF	; 175
    10dc:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    10de:	75 de       	rcall	.-790    	; 0xdca <OLED_clear>
    10e0:	29 cf       	rjmp	.-430    	; 0xf34 <OLED_splashScreen>
	OLED_splashScreen();
    10e2:	08 95       	ret

000010e4 <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    10e4:	10 92 c5 03 	sts	0x03C5, r1
	currentSliPosition.L_abs = 0;
    10e8:	10 92 c6 03 	sts	0x03C6, r1
	currentSliPosition.R_per = 0;
    10ec:	10 92 c7 03 	sts	0x03C7, r1
	currentSliPosition.L_per = 0;
    10f0:	10 92 c8 03 	sts	0x03C8, r1
    10f4:	08 95       	ret

000010f6 <SPI_init>:
#define UNSELECT_CAN_CONTROLLER_SLAVE set_bit(PORTB, SS_CAN_CONTROLLER_PIN)


void SPI_init()
{
	printf("\n\nInitializing SPI\n");
    10f6:	82 e8       	ldi	r24, 0x82	; 130
    10f8:	93 e0       	ldi	r25, 0x03	; 3
    10fa:	02 d2       	rcall	.+1028   	; 0x1500 <puts>
    10fc:	80 eb       	ldi	r24, 0xB0	; 176
	// Set _SS, MOSI and SCK output, all others input
	//DDRB = (1<<SS_CAN_CONTROLLER_PIN) | (1<<DDB5) | (1<<DDB7);
	DDRB = (1<<DDB4) | (1<<DDB5) | (1<<DDB7);
    10fe:	87 bb       	out	0x17, r24	; 23
    1100:	80 e5       	ldi	r24, 0x50	; 80
	
 	//Enable SPI, Master, set clock rate fck/16
 	//SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
	
	// Enable SPI, Master, set clock rate fck/4
	SPCR = (1<<SPE) | (1<<MSTR);
    1102:	8d b9       	out	0x0d, r24	; 13
    1104:	c4 9a       	sbi	0x18, 4	; 24
	
	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORTB, SS_CAN_CONTROLLER_PIN);
    1106:	08 95       	ret

00001108 <SPI_send>:
    1108:	8f b9       	out	0x0f, r24	; 15
	// Start transmission
	SPDR = cData;
	//printf("Sendind %d\n", cData);
	
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    110a:	77 9b       	sbis	0x0e, 7	; 14
    110c:	fe cf       	rjmp	.-4      	; 0x110a <SPI_send+0x2>
}
    110e:	08 95       	ret

00001110 <SPI_activateSlave>:
	return data;
}

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    1110:	81 11       	cpse	r24, r1
    1112:	01 c0       	rjmp	.+2      	; 0x1116 <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    1114:	c4 98       	cbi	0x18, 4	; 24
    1116:	08 95       	ret

00001118 <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    1118:	81 11       	cpse	r24, r1
    111a:	01 c0       	rjmp	.+2      	; 0x111e <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    111c:	c4 9a       	sbi	0x18, 4	; 24
    111e:	08 95       	ret

00001120 <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1120:	5d 9b       	sbis	0x0b, 5	; 11
    1122:	fe cf       	rjmp	.-4      	; 0x1120 <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    1124:	8c b9       	out	0x0c, r24	; 12
    1126:	08 95       	ret

00001128 <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    1128:	5f 9b       	sbis	0x0b, 7	; 11
    112a:	fe cf       	rjmp	.-4      	; 0x1128 <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    112c:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
    112e:	08 95       	ret

00001130 <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    1130:	ef 92       	push	r14
    1132:	ff 92       	push	r15
    1134:	0f 93       	push	r16
    1136:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    1138:	bb 27       	eor	r27, r27
    113a:	a1 2f       	mov	r26, r17
    113c:	90 2f       	mov	r25, r16
    113e:	8f 2d       	mov	r24, r15
    1140:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    1142:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1144:	88 e1       	ldi	r24, 0x18	; 24
    1146:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    1148:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    114a:	8e e8       	ldi	r24, 0x8E	; 142
    114c:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    114e:	64 e9       	ldi	r22, 0x94	; 148
    1150:	78 e0       	ldi	r23, 0x08	; 8
    1152:	80 e9       	ldi	r24, 0x90	; 144
    1154:	98 e0       	ldi	r25, 0x08	; 8
    1156:	79 d1       	rcall	.+754    	; 0x144a <fdevopen>
    1158:	1f 91       	pop	r17
    115a:	0f 91       	pop	r16
    115c:	ff 90       	pop	r15
    115e:	ef 90       	pop	r14
    1160:	08 95       	ret

00001162 <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    1162:	9b 01       	movw	r18, r22
	
	switch(channel){
    1164:	82 30       	cpi	r24, 0x02	; 2
    1166:	69 f0       	breq	.+26     	; 0x1182 <ADC_request+0x20>
    1168:	18 f4       	brcc	.+6      	; 0x1170 <ADC_request+0xe>
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	31 f0       	breq	.+12     	; 0x117a <ADC_request+0x18>
    116e:	15 c0       	rjmp	.+42     	; 0x119a <ADC_request+0x38>
    1170:	83 30       	cpi	r24, 0x03	; 3
    1172:	59 f0       	breq	.+22     	; 0x118a <ADC_request+0x28>
    1174:	84 30       	cpi	r24, 0x04	; 4
    1176:	69 f0       	breq	.+26     	; 0x1192 <ADC_request+0x30>
    1178:	10 c0       	rjmp	.+32     	; 0x119a <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    117a:	64 e0       	ldi	r22, 0x04	; 4
    117c:	c9 01       	movw	r24, r18
    117e:	ee c9       	rjmp	.-3108   	; 0x55c <saveToAddress>
    1180:	08 95       	ret
			break;
    1182:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    1184:	c9 01       	movw	r24, r18
    1186:	ea c9       	rjmp	.-3116   	; 0x55c <saveToAddress>
    1188:	08 95       	ret
    118a:	66 e0       	ldi	r22, 0x06	; 6
			break;
    118c:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    118e:	e6 c9       	rjmp	.-3124   	; 0x55c <saveToAddress>
    1190:	08 95       	ret
    1192:	67 e0       	ldi	r22, 0x07	; 7
    1194:	c9 01       	movw	r24, r18
			break;
    1196:	e2 c9       	rjmp	.-3132   	; 0x55c <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    1198:	08 95       	ret
    119a:	85 e9       	ldi	r24, 0x95	; 149
    119c:	93 e0       	ldi	r25, 0x03	; 3
    119e:	9f 93       	push	r25
			break;
    11a0:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    11a2:	9d d1       	rcall	.+826    	; 0x14de <printf>
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	08 95       	ret

000011aa <ADC_read>:
    11aa:	d5 c9       	rjmp	.-3158   	; 0x556 <readFromAddress>
    11ac:	08 95       	ret

000011ae <__divmodhi4>:
			break;
    11ae:	97 fb       	bst	r25, 7
    11b0:	07 2e       	mov	r0, r23
    11b2:	16 f4       	brtc	.+4      	; 0x11b8 <__divmodhi4+0xa>
    11b4:	00 94       	com	r0
    11b6:	06 d0       	rcall	.+12     	; 0x11c4 <__divmodhi4_neg1>
    11b8:	77 fd       	sbrc	r23, 7
    11ba:	08 d0       	rcall	.+16     	; 0x11cc <__divmodhi4_neg2>
    11bc:	0b d0       	rcall	.+22     	; 0x11d4 <__udivmodhi4>
    11be:	07 fc       	sbrc	r0, 7
    11c0:	05 d0       	rcall	.+10     	; 0x11cc <__divmodhi4_neg2>
    11c2:	3e f4       	brtc	.+14     	; 0x11d2 <__divmodhi4_exit>

000011c4 <__divmodhi4_neg1>:
    11c4:	90 95       	com	r25
    11c6:	81 95       	neg	r24
    11c8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ca:	08 95       	ret

000011cc <__divmodhi4_neg2>:
    11cc:	70 95       	com	r23
    11ce:	61 95       	neg	r22
    11d0:	7f 4f       	sbci	r23, 0xFF	; 255

000011d2 <__divmodhi4_exit>:
    11d2:	08 95       	ret

000011d4 <__udivmodhi4>:
    11d4:	aa 1b       	sub	r26, r26
    11d6:	bb 1b       	sub	r27, r27
    11d8:	51 e1       	ldi	r21, 0x11	; 17
    11da:	07 c0       	rjmp	.+14     	; 0x11ea <__udivmodhi4_ep>

000011dc <__udivmodhi4_loop>:
    11dc:	aa 1f       	adc	r26, r26
    11de:	bb 1f       	adc	r27, r27
    11e0:	a6 17       	cp	r26, r22
    11e2:	b7 07       	cpc	r27, r23
    11e4:	10 f0       	brcs	.+4      	; 0x11ea <__udivmodhi4_ep>
    11e6:	a6 1b       	sub	r26, r22
    11e8:	b7 0b       	sbc	r27, r23

000011ea <__udivmodhi4_ep>:
    11ea:	88 1f       	adc	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	5a 95       	dec	r21
    11f0:	a9 f7       	brne	.-22     	; 0x11dc <__udivmodhi4_loop>
    11f2:	80 95       	com	r24
    11f4:	90 95       	com	r25
    11f6:	bc 01       	movw	r22, r24
    11f8:	cd 01       	movw	r24, r26
    11fa:	08 95       	ret

000011fc <malloc>:
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	82 30       	cpi	r24, 0x02	; 2
    1202:	91 05       	cpc	r25, r1
    1204:	10 f4       	brcc	.+4      	; 0x120a <malloc+0xe>
    1206:	82 e0       	ldi	r24, 0x02	; 2
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	e0 91 cb 03 	lds	r30, 0x03CB
    120e:	f0 91 cc 03 	lds	r31, 0x03CC
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	a0 e0       	ldi	r26, 0x00	; 0
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	30 97       	sbiw	r30, 0x00	; 0
    121c:	39 f1       	breq	.+78     	; 0x126c <malloc+0x70>
    121e:	40 81       	ld	r20, Z
    1220:	51 81       	ldd	r21, Z+1	; 0x01
    1222:	48 17       	cp	r20, r24
    1224:	59 07       	cpc	r21, r25
    1226:	b8 f0       	brcs	.+46     	; 0x1256 <malloc+0x5a>
    1228:	48 17       	cp	r20, r24
    122a:	59 07       	cpc	r21, r25
    122c:	71 f4       	brne	.+28     	; 0x124a <malloc+0x4e>
    122e:	82 81       	ldd	r24, Z+2	; 0x02
    1230:	93 81       	ldd	r25, Z+3	; 0x03
    1232:	10 97       	sbiw	r26, 0x00	; 0
    1234:	29 f0       	breq	.+10     	; 0x1240 <malloc+0x44>
    1236:	13 96       	adiw	r26, 0x03	; 3
    1238:	9c 93       	st	X, r25
    123a:	8e 93       	st	-X, r24
    123c:	12 97       	sbiw	r26, 0x02	; 2
    123e:	2c c0       	rjmp	.+88     	; 0x1298 <malloc+0x9c>
    1240:	90 93 cc 03 	sts	0x03CC, r25
    1244:	80 93 cb 03 	sts	0x03CB, r24
    1248:	27 c0       	rjmp	.+78     	; 0x1298 <malloc+0x9c>
    124a:	21 15       	cp	r18, r1
    124c:	31 05       	cpc	r19, r1
    124e:	31 f0       	breq	.+12     	; 0x125c <malloc+0x60>
    1250:	42 17       	cp	r20, r18
    1252:	53 07       	cpc	r21, r19
    1254:	18 f0       	brcs	.+6      	; 0x125c <malloc+0x60>
    1256:	a9 01       	movw	r20, r18
    1258:	db 01       	movw	r26, r22
    125a:	01 c0       	rjmp	.+2      	; 0x125e <malloc+0x62>
    125c:	ef 01       	movw	r28, r30
    125e:	9a 01       	movw	r18, r20
    1260:	bd 01       	movw	r22, r26
    1262:	df 01       	movw	r26, r30
    1264:	02 80       	ldd	r0, Z+2	; 0x02
    1266:	f3 81       	ldd	r31, Z+3	; 0x03
    1268:	e0 2d       	mov	r30, r0
    126a:	d7 cf       	rjmp	.-82     	; 0x121a <malloc+0x1e>
    126c:	21 15       	cp	r18, r1
    126e:	31 05       	cpc	r19, r1
    1270:	f9 f0       	breq	.+62     	; 0x12b0 <malloc+0xb4>
    1272:	28 1b       	sub	r18, r24
    1274:	39 0b       	sbc	r19, r25
    1276:	24 30       	cpi	r18, 0x04	; 4
    1278:	31 05       	cpc	r19, r1
    127a:	80 f4       	brcc	.+32     	; 0x129c <malloc+0xa0>
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	9b 81       	ldd	r25, Y+3	; 0x03
    1280:	61 15       	cp	r22, r1
    1282:	71 05       	cpc	r23, r1
    1284:	21 f0       	breq	.+8      	; 0x128e <malloc+0x92>
    1286:	fb 01       	movw	r30, r22
    1288:	93 83       	std	Z+3, r25	; 0x03
    128a:	82 83       	std	Z+2, r24	; 0x02
    128c:	04 c0       	rjmp	.+8      	; 0x1296 <malloc+0x9a>
    128e:	90 93 cc 03 	sts	0x03CC, r25
    1292:	80 93 cb 03 	sts	0x03CB, r24
    1296:	fe 01       	movw	r30, r28
    1298:	32 96       	adiw	r30, 0x02	; 2
    129a:	44 c0       	rjmp	.+136    	; 0x1324 <malloc+0x128>
    129c:	fe 01       	movw	r30, r28
    129e:	e2 0f       	add	r30, r18
    12a0:	f3 1f       	adc	r31, r19
    12a2:	81 93       	st	Z+, r24
    12a4:	91 93       	st	Z+, r25
    12a6:	22 50       	subi	r18, 0x02	; 2
    12a8:	31 09       	sbc	r19, r1
    12aa:	39 83       	std	Y+1, r19	; 0x01
    12ac:	28 83       	st	Y, r18
    12ae:	3a c0       	rjmp	.+116    	; 0x1324 <malloc+0x128>
    12b0:	20 91 c9 03 	lds	r18, 0x03C9
    12b4:	30 91 ca 03 	lds	r19, 0x03CA
    12b8:	23 2b       	or	r18, r19
    12ba:	41 f4       	brne	.+16     	; 0x12cc <malloc+0xd0>
    12bc:	20 91 02 01 	lds	r18, 0x0102
    12c0:	30 91 03 01 	lds	r19, 0x0103
    12c4:	30 93 ca 03 	sts	0x03CA, r19
    12c8:	20 93 c9 03 	sts	0x03C9, r18
    12cc:	20 91 00 01 	lds	r18, 0x0100
    12d0:	30 91 01 01 	lds	r19, 0x0101
    12d4:	21 15       	cp	r18, r1
    12d6:	31 05       	cpc	r19, r1
    12d8:	41 f4       	brne	.+16     	; 0x12ea <malloc+0xee>
    12da:	2d b7       	in	r18, 0x3d	; 61
    12dc:	3e b7       	in	r19, 0x3e	; 62
    12de:	40 91 04 01 	lds	r20, 0x0104
    12e2:	50 91 05 01 	lds	r21, 0x0105
    12e6:	24 1b       	sub	r18, r20
    12e8:	35 0b       	sbc	r19, r21
    12ea:	e0 91 c9 03 	lds	r30, 0x03C9
    12ee:	f0 91 ca 03 	lds	r31, 0x03CA
    12f2:	e2 17       	cp	r30, r18
    12f4:	f3 07       	cpc	r31, r19
    12f6:	a0 f4       	brcc	.+40     	; 0x1320 <malloc+0x124>
    12f8:	2e 1b       	sub	r18, r30
    12fa:	3f 0b       	sbc	r19, r31
    12fc:	28 17       	cp	r18, r24
    12fe:	39 07       	cpc	r19, r25
    1300:	78 f0       	brcs	.+30     	; 0x1320 <malloc+0x124>
    1302:	ac 01       	movw	r20, r24
    1304:	4e 5f       	subi	r20, 0xFE	; 254
    1306:	5f 4f       	sbci	r21, 0xFF	; 255
    1308:	24 17       	cp	r18, r20
    130a:	35 07       	cpc	r19, r21
    130c:	48 f0       	brcs	.+18     	; 0x1320 <malloc+0x124>
    130e:	4e 0f       	add	r20, r30
    1310:	5f 1f       	adc	r21, r31
    1312:	50 93 ca 03 	sts	0x03CA, r21
    1316:	40 93 c9 03 	sts	0x03C9, r20
    131a:	81 93       	st	Z+, r24
    131c:	91 93       	st	Z+, r25
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <malloc+0x128>
    1320:	e0 e0       	ldi	r30, 0x00	; 0
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	cf 01       	movw	r24, r30
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	08 95       	ret

0000132c <free>:
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	09 f4       	brne	.+2      	; 0x1336 <free+0xa>
    1334:	87 c0       	rjmp	.+270    	; 0x1444 <free+0x118>
    1336:	fc 01       	movw	r30, r24
    1338:	32 97       	sbiw	r30, 0x02	; 2
    133a:	13 82       	std	Z+3, r1	; 0x03
    133c:	12 82       	std	Z+2, r1	; 0x02
    133e:	c0 91 cb 03 	lds	r28, 0x03CB
    1342:	d0 91 cc 03 	lds	r29, 0x03CC
    1346:	20 97       	sbiw	r28, 0x00	; 0
    1348:	81 f4       	brne	.+32     	; 0x136a <free+0x3e>
    134a:	20 81       	ld	r18, Z
    134c:	31 81       	ldd	r19, Z+1	; 0x01
    134e:	28 0f       	add	r18, r24
    1350:	39 1f       	adc	r19, r25
    1352:	80 91 c9 03 	lds	r24, 0x03C9
    1356:	90 91 ca 03 	lds	r25, 0x03CA
    135a:	82 17       	cp	r24, r18
    135c:	93 07       	cpc	r25, r19
    135e:	79 f5       	brne	.+94     	; 0x13be <free+0x92>
    1360:	f0 93 ca 03 	sts	0x03CA, r31
    1364:	e0 93 c9 03 	sts	0x03C9, r30
    1368:	6d c0       	rjmp	.+218    	; 0x1444 <free+0x118>
    136a:	de 01       	movw	r26, r28
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	ae 17       	cp	r26, r30
    1372:	bf 07       	cpc	r27, r31
    1374:	50 f4       	brcc	.+20     	; 0x138a <free+0x5e>
    1376:	12 96       	adiw	r26, 0x02	; 2
    1378:	4d 91       	ld	r20, X+
    137a:	5c 91       	ld	r21, X
    137c:	13 97       	sbiw	r26, 0x03	; 3
    137e:	9d 01       	movw	r18, r26
    1380:	41 15       	cp	r20, r1
    1382:	51 05       	cpc	r21, r1
    1384:	09 f1       	breq	.+66     	; 0x13c8 <free+0x9c>
    1386:	da 01       	movw	r26, r20
    1388:	f3 cf       	rjmp	.-26     	; 0x1370 <free+0x44>
    138a:	b3 83       	std	Z+3, r27	; 0x03
    138c:	a2 83       	std	Z+2, r26	; 0x02
    138e:	40 81       	ld	r20, Z
    1390:	51 81       	ldd	r21, Z+1	; 0x01
    1392:	84 0f       	add	r24, r20
    1394:	95 1f       	adc	r25, r21
    1396:	8a 17       	cp	r24, r26
    1398:	9b 07       	cpc	r25, r27
    139a:	71 f4       	brne	.+28     	; 0x13b8 <free+0x8c>
    139c:	8d 91       	ld	r24, X+
    139e:	9c 91       	ld	r25, X
    13a0:	11 97       	sbiw	r26, 0x01	; 1
    13a2:	84 0f       	add	r24, r20
    13a4:	95 1f       	adc	r25, r21
    13a6:	02 96       	adiw	r24, 0x02	; 2
    13a8:	91 83       	std	Z+1, r25	; 0x01
    13aa:	80 83       	st	Z, r24
    13ac:	12 96       	adiw	r26, 0x02	; 2
    13ae:	8d 91       	ld	r24, X+
    13b0:	9c 91       	ld	r25, X
    13b2:	13 97       	sbiw	r26, 0x03	; 3
    13b4:	93 83       	std	Z+3, r25	; 0x03
    13b6:	82 83       	std	Z+2, r24	; 0x02
    13b8:	21 15       	cp	r18, r1
    13ba:	31 05       	cpc	r19, r1
    13bc:	29 f4       	brne	.+10     	; 0x13c8 <free+0x9c>
    13be:	f0 93 cc 03 	sts	0x03CC, r31
    13c2:	e0 93 cb 03 	sts	0x03CB, r30
    13c6:	3e c0       	rjmp	.+124    	; 0x1444 <free+0x118>
    13c8:	d9 01       	movw	r26, r18
    13ca:	13 96       	adiw	r26, 0x03	; 3
    13cc:	fc 93       	st	X, r31
    13ce:	ee 93       	st	-X, r30
    13d0:	12 97       	sbiw	r26, 0x02	; 2
    13d2:	4d 91       	ld	r20, X+
    13d4:	5d 91       	ld	r21, X+
    13d6:	a4 0f       	add	r26, r20
    13d8:	b5 1f       	adc	r27, r21
    13da:	ea 17       	cp	r30, r26
    13dc:	fb 07       	cpc	r31, r27
    13de:	79 f4       	brne	.+30     	; 0x13fe <free+0xd2>
    13e0:	80 81       	ld	r24, Z
    13e2:	91 81       	ldd	r25, Z+1	; 0x01
    13e4:	84 0f       	add	r24, r20
    13e6:	95 1f       	adc	r25, r21
    13e8:	02 96       	adiw	r24, 0x02	; 2
    13ea:	d9 01       	movw	r26, r18
    13ec:	11 96       	adiw	r26, 0x01	; 1
    13ee:	9c 93       	st	X, r25
    13f0:	8e 93       	st	-X, r24
    13f2:	82 81       	ldd	r24, Z+2	; 0x02
    13f4:	93 81       	ldd	r25, Z+3	; 0x03
    13f6:	13 96       	adiw	r26, 0x03	; 3
    13f8:	9c 93       	st	X, r25
    13fa:	8e 93       	st	-X, r24
    13fc:	12 97       	sbiw	r26, 0x02	; 2
    13fe:	e0 e0       	ldi	r30, 0x00	; 0
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	9b 81       	ldd	r25, Y+3	; 0x03
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	19 f0       	breq	.+6      	; 0x1410 <free+0xe4>
    140a:	fe 01       	movw	r30, r28
    140c:	ec 01       	movw	r28, r24
    140e:	f9 cf       	rjmp	.-14     	; 0x1402 <free+0xd6>
    1410:	ce 01       	movw	r24, r28
    1412:	02 96       	adiw	r24, 0x02	; 2
    1414:	28 81       	ld	r18, Y
    1416:	39 81       	ldd	r19, Y+1	; 0x01
    1418:	82 0f       	add	r24, r18
    141a:	93 1f       	adc	r25, r19
    141c:	20 91 c9 03 	lds	r18, 0x03C9
    1420:	30 91 ca 03 	lds	r19, 0x03CA
    1424:	28 17       	cp	r18, r24
    1426:	39 07       	cpc	r19, r25
    1428:	69 f4       	brne	.+26     	; 0x1444 <free+0x118>
    142a:	30 97       	sbiw	r30, 0x00	; 0
    142c:	29 f4       	brne	.+10     	; 0x1438 <free+0x10c>
    142e:	10 92 cc 03 	sts	0x03CC, r1
    1432:	10 92 cb 03 	sts	0x03CB, r1
    1436:	02 c0       	rjmp	.+4      	; 0x143c <free+0x110>
    1438:	13 82       	std	Z+3, r1	; 0x03
    143a:	12 82       	std	Z+2, r1	; 0x02
    143c:	d0 93 ca 03 	sts	0x03CA, r29
    1440:	c0 93 c9 03 	sts	0x03C9, r28
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	08 95       	ret

0000144a <fdevopen>:
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	ec 01       	movw	r28, r24
    1454:	8b 01       	movw	r16, r22
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	31 f4       	brne	.+12     	; 0x1466 <fdevopen+0x1c>
    145a:	61 15       	cp	r22, r1
    145c:	71 05       	cpc	r23, r1
    145e:	19 f4       	brne	.+6      	; 0x1466 <fdevopen+0x1c>
    1460:	80 e0       	ldi	r24, 0x00	; 0
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	37 c0       	rjmp	.+110    	; 0x14d4 <fdevopen+0x8a>
    1466:	6e e0       	ldi	r22, 0x0E	; 14
    1468:	70 e0       	ldi	r23, 0x00	; 0
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	38 d2       	rcall	.+1136   	; 0x18e0 <calloc>
    1470:	fc 01       	movw	r30, r24
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	a9 f3       	breq	.-22     	; 0x1460 <fdevopen+0x16>
    1476:	80 e8       	ldi	r24, 0x80	; 128
    1478:	83 83       	std	Z+3, r24	; 0x03
    147a:	01 15       	cp	r16, r1
    147c:	11 05       	cpc	r17, r1
    147e:	71 f0       	breq	.+28     	; 0x149c <fdevopen+0x52>
    1480:	13 87       	std	Z+11, r17	; 0x0b
    1482:	02 87       	std	Z+10, r16	; 0x0a
    1484:	81 e8       	ldi	r24, 0x81	; 129
    1486:	83 83       	std	Z+3, r24	; 0x03
    1488:	80 91 cd 03 	lds	r24, 0x03CD
    148c:	90 91 ce 03 	lds	r25, 0x03CE
    1490:	89 2b       	or	r24, r25
    1492:	21 f4       	brne	.+8      	; 0x149c <fdevopen+0x52>
    1494:	f0 93 ce 03 	sts	0x03CE, r31
    1498:	e0 93 cd 03 	sts	0x03CD, r30
    149c:	20 97       	sbiw	r28, 0x00	; 0
    149e:	c9 f0       	breq	.+50     	; 0x14d2 <fdevopen+0x88>
    14a0:	d1 87       	std	Z+9, r29	; 0x09
    14a2:	c0 87       	std	Z+8, r28	; 0x08
    14a4:	83 81       	ldd	r24, Z+3	; 0x03
    14a6:	82 60       	ori	r24, 0x02	; 2
    14a8:	83 83       	std	Z+3, r24	; 0x03
    14aa:	80 91 cf 03 	lds	r24, 0x03CF
    14ae:	90 91 d0 03 	lds	r25, 0x03D0
    14b2:	89 2b       	or	r24, r25
    14b4:	71 f4       	brne	.+28     	; 0x14d2 <fdevopen+0x88>
    14b6:	f0 93 d0 03 	sts	0x03D0, r31
    14ba:	e0 93 cf 03 	sts	0x03CF, r30
    14be:	80 91 d1 03 	lds	r24, 0x03D1
    14c2:	90 91 d2 03 	lds	r25, 0x03D2
    14c6:	89 2b       	or	r24, r25
    14c8:	21 f4       	brne	.+8      	; 0x14d2 <fdevopen+0x88>
    14ca:	f0 93 d2 03 	sts	0x03D2, r31
    14ce:	e0 93 d1 03 	sts	0x03D1, r30
    14d2:	cf 01       	movw	r24, r30
    14d4:	df 91       	pop	r29
    14d6:	cf 91       	pop	r28
    14d8:	1f 91       	pop	r17
    14da:	0f 91       	pop	r16
    14dc:	08 95       	ret

000014de <printf>:
    14de:	a0 e0       	ldi	r26, 0x00	; 0
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	e4 e7       	ldi	r30, 0x74	; 116
    14e4:	fa e0       	ldi	r31, 0x0A	; 10
    14e6:	d3 c2       	rjmp	.+1446   	; 0x1a8e <__prologue_saves__+0x20>
    14e8:	fe 01       	movw	r30, r28
    14ea:	35 96       	adiw	r30, 0x05	; 5
    14ec:	61 91       	ld	r22, Z+
    14ee:	71 91       	ld	r23, Z+
    14f0:	af 01       	movw	r20, r30
    14f2:	80 91 cf 03 	lds	r24, 0x03CF
    14f6:	90 91 d0 03 	lds	r25, 0x03D0
    14fa:	2f d0       	rcall	.+94     	; 0x155a <vfprintf>
    14fc:	e2 e0       	ldi	r30, 0x02	; 2
    14fe:	e3 c2       	rjmp	.+1478   	; 0x1ac6 <__epilogue_restores__+0x20>

00001500 <puts>:
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	cf 93       	push	r28
    1506:	df 93       	push	r29
    1508:	e0 91 cf 03 	lds	r30, 0x03CF
    150c:	f0 91 d0 03 	lds	r31, 0x03D0
    1510:	23 81       	ldd	r18, Z+3	; 0x03
    1512:	21 ff       	sbrs	r18, 1
    1514:	1b c0       	rjmp	.+54     	; 0x154c <puts+0x4c>
    1516:	ec 01       	movw	r28, r24
    1518:	00 e0       	ldi	r16, 0x00	; 0
    151a:	10 e0       	ldi	r17, 0x00	; 0
    151c:	89 91       	ld	r24, Y+
    151e:	60 91 cf 03 	lds	r22, 0x03CF
    1522:	70 91 d0 03 	lds	r23, 0x03D0
    1526:	db 01       	movw	r26, r22
    1528:	18 96       	adiw	r26, 0x08	; 8
    152a:	ed 91       	ld	r30, X+
    152c:	fc 91       	ld	r31, X
    152e:	19 97       	sbiw	r26, 0x09	; 9
    1530:	88 23       	and	r24, r24
    1532:	31 f0       	breq	.+12     	; 0x1540 <puts+0x40>
    1534:	09 95       	icall
    1536:	89 2b       	or	r24, r25
    1538:	89 f3       	breq	.-30     	; 0x151c <puts+0x1c>
    153a:	0f ef       	ldi	r16, 0xFF	; 255
    153c:	1f ef       	ldi	r17, 0xFF	; 255
    153e:	ee cf       	rjmp	.-36     	; 0x151c <puts+0x1c>
    1540:	8a e0       	ldi	r24, 0x0A	; 10
    1542:	09 95       	icall
    1544:	89 2b       	or	r24, r25
    1546:	11 f4       	brne	.+4      	; 0x154c <puts+0x4c>
    1548:	c8 01       	movw	r24, r16
    154a:	02 c0       	rjmp	.+4      	; 0x1550 <puts+0x50>
    154c:	8f ef       	ldi	r24, 0xFF	; 255
    154e:	9f ef       	ldi	r25, 0xFF	; 255
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	08 95       	ret

0000155a <vfprintf>:
    155a:	ac e0       	ldi	r26, 0x0C	; 12
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	e2 eb       	ldi	r30, 0xB2	; 178
    1560:	fa e0       	ldi	r31, 0x0A	; 10
    1562:	85 c2       	rjmp	.+1290   	; 0x1a6e <__prologue_saves__>
    1564:	7c 01       	movw	r14, r24
    1566:	6b 01       	movw	r12, r22
    1568:	8a 01       	movw	r16, r20
    156a:	fc 01       	movw	r30, r24
    156c:	17 82       	std	Z+7, r1	; 0x07
    156e:	16 82       	std	Z+6, r1	; 0x06
    1570:	83 81       	ldd	r24, Z+3	; 0x03
    1572:	81 ff       	sbrs	r24, 1
    1574:	b0 c1       	rjmp	.+864    	; 0x18d6 <vfprintf+0x37c>
    1576:	ce 01       	movw	r24, r28
    1578:	01 96       	adiw	r24, 0x01	; 1
    157a:	4c 01       	movw	r8, r24
    157c:	f7 01       	movw	r30, r14
    157e:	93 81       	ldd	r25, Z+3	; 0x03
    1580:	f6 01       	movw	r30, r12
    1582:	93 fd       	sbrc	r25, 3
    1584:	85 91       	lpm	r24, Z+
    1586:	93 ff       	sbrs	r25, 3
    1588:	81 91       	ld	r24, Z+
    158a:	6f 01       	movw	r12, r30
    158c:	88 23       	and	r24, r24
    158e:	09 f4       	brne	.+2      	; 0x1592 <vfprintf+0x38>
    1590:	9e c1       	rjmp	.+828    	; 0x18ce <vfprintf+0x374>
    1592:	85 32       	cpi	r24, 0x25	; 37
    1594:	39 f4       	brne	.+14     	; 0x15a4 <vfprintf+0x4a>
    1596:	93 fd       	sbrc	r25, 3
    1598:	85 91       	lpm	r24, Z+
    159a:	93 ff       	sbrs	r25, 3
    159c:	81 91       	ld	r24, Z+
    159e:	6f 01       	movw	r12, r30
    15a0:	85 32       	cpi	r24, 0x25	; 37
    15a2:	21 f4       	brne	.+8      	; 0x15ac <vfprintf+0x52>
    15a4:	b7 01       	movw	r22, r14
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	d2 d1       	rcall	.+932    	; 0x194e <fputc>
    15aa:	e8 cf       	rjmp	.-48     	; 0x157c <vfprintf+0x22>
    15ac:	51 2c       	mov	r5, r1
    15ae:	31 2c       	mov	r3, r1
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	20 32       	cpi	r18, 0x20	; 32
    15b4:	a0 f4       	brcc	.+40     	; 0x15de <vfprintf+0x84>
    15b6:	8b 32       	cpi	r24, 0x2B	; 43
    15b8:	69 f0       	breq	.+26     	; 0x15d4 <vfprintf+0x7a>
    15ba:	30 f4       	brcc	.+12     	; 0x15c8 <vfprintf+0x6e>
    15bc:	80 32       	cpi	r24, 0x20	; 32
    15be:	59 f0       	breq	.+22     	; 0x15d6 <vfprintf+0x7c>
    15c0:	83 32       	cpi	r24, 0x23	; 35
    15c2:	69 f4       	brne	.+26     	; 0x15de <vfprintf+0x84>
    15c4:	20 61       	ori	r18, 0x10	; 16
    15c6:	2c c0       	rjmp	.+88     	; 0x1620 <vfprintf+0xc6>
    15c8:	8d 32       	cpi	r24, 0x2D	; 45
    15ca:	39 f0       	breq	.+14     	; 0x15da <vfprintf+0x80>
    15cc:	80 33       	cpi	r24, 0x30	; 48
    15ce:	39 f4       	brne	.+14     	; 0x15de <vfprintf+0x84>
    15d0:	21 60       	ori	r18, 0x01	; 1
    15d2:	26 c0       	rjmp	.+76     	; 0x1620 <vfprintf+0xc6>
    15d4:	22 60       	ori	r18, 0x02	; 2
    15d6:	24 60       	ori	r18, 0x04	; 4
    15d8:	23 c0       	rjmp	.+70     	; 0x1620 <vfprintf+0xc6>
    15da:	28 60       	ori	r18, 0x08	; 8
    15dc:	21 c0       	rjmp	.+66     	; 0x1620 <vfprintf+0xc6>
    15de:	27 fd       	sbrc	r18, 7
    15e0:	27 c0       	rjmp	.+78     	; 0x1630 <vfprintf+0xd6>
    15e2:	30 ed       	ldi	r19, 0xD0	; 208
    15e4:	38 0f       	add	r19, r24
    15e6:	3a 30       	cpi	r19, 0x0A	; 10
    15e8:	78 f4       	brcc	.+30     	; 0x1608 <vfprintf+0xae>
    15ea:	26 ff       	sbrs	r18, 6
    15ec:	06 c0       	rjmp	.+12     	; 0x15fa <vfprintf+0xa0>
    15ee:	fa e0       	ldi	r31, 0x0A	; 10
    15f0:	5f 9e       	mul	r5, r31
    15f2:	30 0d       	add	r19, r0
    15f4:	11 24       	eor	r1, r1
    15f6:	53 2e       	mov	r5, r19
    15f8:	13 c0       	rjmp	.+38     	; 0x1620 <vfprintf+0xc6>
    15fa:	8a e0       	ldi	r24, 0x0A	; 10
    15fc:	38 9e       	mul	r3, r24
    15fe:	30 0d       	add	r19, r0
    1600:	11 24       	eor	r1, r1
    1602:	33 2e       	mov	r3, r19
    1604:	20 62       	ori	r18, 0x20	; 32
    1606:	0c c0       	rjmp	.+24     	; 0x1620 <vfprintf+0xc6>
    1608:	8e 32       	cpi	r24, 0x2E	; 46
    160a:	21 f4       	brne	.+8      	; 0x1614 <vfprintf+0xba>
    160c:	26 fd       	sbrc	r18, 6
    160e:	5f c1       	rjmp	.+702    	; 0x18ce <vfprintf+0x374>
    1610:	20 64       	ori	r18, 0x40	; 64
    1612:	06 c0       	rjmp	.+12     	; 0x1620 <vfprintf+0xc6>
    1614:	8c 36       	cpi	r24, 0x6C	; 108
    1616:	11 f4       	brne	.+4      	; 0x161c <vfprintf+0xc2>
    1618:	20 68       	ori	r18, 0x80	; 128
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <vfprintf+0xc6>
    161c:	88 36       	cpi	r24, 0x68	; 104
    161e:	41 f4       	brne	.+16     	; 0x1630 <vfprintf+0xd6>
    1620:	f6 01       	movw	r30, r12
    1622:	93 fd       	sbrc	r25, 3
    1624:	85 91       	lpm	r24, Z+
    1626:	93 ff       	sbrs	r25, 3
    1628:	81 91       	ld	r24, Z+
    162a:	6f 01       	movw	r12, r30
    162c:	81 11       	cpse	r24, r1
    162e:	c1 cf       	rjmp	.-126    	; 0x15b2 <vfprintf+0x58>
    1630:	98 2f       	mov	r25, r24
    1632:	9f 7d       	andi	r25, 0xDF	; 223
    1634:	95 54       	subi	r25, 0x45	; 69
    1636:	93 30       	cpi	r25, 0x03	; 3
    1638:	28 f4       	brcc	.+10     	; 0x1644 <vfprintf+0xea>
    163a:	0c 5f       	subi	r16, 0xFC	; 252
    163c:	1f 4f       	sbci	r17, 0xFF	; 255
    163e:	ff e3       	ldi	r31, 0x3F	; 63
    1640:	f9 83       	std	Y+1, r31	; 0x01
    1642:	0d c0       	rjmp	.+26     	; 0x165e <vfprintf+0x104>
    1644:	83 36       	cpi	r24, 0x63	; 99
    1646:	31 f0       	breq	.+12     	; 0x1654 <vfprintf+0xfa>
    1648:	83 37       	cpi	r24, 0x73	; 115
    164a:	71 f0       	breq	.+28     	; 0x1668 <vfprintf+0x10e>
    164c:	83 35       	cpi	r24, 0x53	; 83
    164e:	09 f0       	breq	.+2      	; 0x1652 <vfprintf+0xf8>
    1650:	57 c0       	rjmp	.+174    	; 0x1700 <vfprintf+0x1a6>
    1652:	21 c0       	rjmp	.+66     	; 0x1696 <vfprintf+0x13c>
    1654:	f8 01       	movw	r30, r16
    1656:	80 81       	ld	r24, Z
    1658:	89 83       	std	Y+1, r24	; 0x01
    165a:	0e 5f       	subi	r16, 0xFE	; 254
    165c:	1f 4f       	sbci	r17, 0xFF	; 255
    165e:	44 24       	eor	r4, r4
    1660:	43 94       	inc	r4
    1662:	51 2c       	mov	r5, r1
    1664:	54 01       	movw	r10, r8
    1666:	14 c0       	rjmp	.+40     	; 0x1690 <vfprintf+0x136>
    1668:	38 01       	movw	r6, r16
    166a:	f2 e0       	ldi	r31, 0x02	; 2
    166c:	6f 0e       	add	r6, r31
    166e:	71 1c       	adc	r7, r1
    1670:	f8 01       	movw	r30, r16
    1672:	a0 80       	ld	r10, Z
    1674:	b1 80       	ldd	r11, Z+1	; 0x01
    1676:	26 ff       	sbrs	r18, 6
    1678:	03 c0       	rjmp	.+6      	; 0x1680 <vfprintf+0x126>
    167a:	65 2d       	mov	r22, r5
    167c:	70 e0       	ldi	r23, 0x00	; 0
    167e:	02 c0       	rjmp	.+4      	; 0x1684 <vfprintf+0x12a>
    1680:	6f ef       	ldi	r22, 0xFF	; 255
    1682:	7f ef       	ldi	r23, 0xFF	; 255
    1684:	c5 01       	movw	r24, r10
    1686:	2c 87       	std	Y+12, r18	; 0x0c
    1688:	57 d1       	rcall	.+686    	; 0x1938 <strnlen>
    168a:	2c 01       	movw	r4, r24
    168c:	83 01       	movw	r16, r6
    168e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1690:	2f 77       	andi	r18, 0x7F	; 127
    1692:	22 2e       	mov	r2, r18
    1694:	16 c0       	rjmp	.+44     	; 0x16c2 <vfprintf+0x168>
    1696:	38 01       	movw	r6, r16
    1698:	f2 e0       	ldi	r31, 0x02	; 2
    169a:	6f 0e       	add	r6, r31
    169c:	71 1c       	adc	r7, r1
    169e:	f8 01       	movw	r30, r16
    16a0:	a0 80       	ld	r10, Z
    16a2:	b1 80       	ldd	r11, Z+1	; 0x01
    16a4:	26 ff       	sbrs	r18, 6
    16a6:	03 c0       	rjmp	.+6      	; 0x16ae <vfprintf+0x154>
    16a8:	65 2d       	mov	r22, r5
    16aa:	70 e0       	ldi	r23, 0x00	; 0
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <vfprintf+0x158>
    16ae:	6f ef       	ldi	r22, 0xFF	; 255
    16b0:	7f ef       	ldi	r23, 0xFF	; 255
    16b2:	c5 01       	movw	r24, r10
    16b4:	2c 87       	std	Y+12, r18	; 0x0c
    16b6:	2e d1       	rcall	.+604    	; 0x1914 <strnlen_P>
    16b8:	2c 01       	movw	r4, r24
    16ba:	2c 85       	ldd	r18, Y+12	; 0x0c
    16bc:	20 68       	ori	r18, 0x80	; 128
    16be:	22 2e       	mov	r2, r18
    16c0:	83 01       	movw	r16, r6
    16c2:	23 fc       	sbrc	r2, 3
    16c4:	19 c0       	rjmp	.+50     	; 0x16f8 <vfprintf+0x19e>
    16c6:	83 2d       	mov	r24, r3
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	48 16       	cp	r4, r24
    16cc:	59 06       	cpc	r5, r25
    16ce:	a0 f4       	brcc	.+40     	; 0x16f8 <vfprintf+0x19e>
    16d0:	b7 01       	movw	r22, r14
    16d2:	80 e2       	ldi	r24, 0x20	; 32
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	3b d1       	rcall	.+630    	; 0x194e <fputc>
    16d8:	3a 94       	dec	r3
    16da:	f5 cf       	rjmp	.-22     	; 0x16c6 <vfprintf+0x16c>
    16dc:	f5 01       	movw	r30, r10
    16de:	27 fc       	sbrc	r2, 7
    16e0:	85 91       	lpm	r24, Z+
    16e2:	27 fe       	sbrs	r2, 7
    16e4:	81 91       	ld	r24, Z+
    16e6:	5f 01       	movw	r10, r30
    16e8:	b7 01       	movw	r22, r14
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	30 d1       	rcall	.+608    	; 0x194e <fputc>
    16ee:	31 10       	cpse	r3, r1
    16f0:	3a 94       	dec	r3
    16f2:	f1 e0       	ldi	r31, 0x01	; 1
    16f4:	4f 1a       	sub	r4, r31
    16f6:	51 08       	sbc	r5, r1
    16f8:	41 14       	cp	r4, r1
    16fa:	51 04       	cpc	r5, r1
    16fc:	79 f7       	brne	.-34     	; 0x16dc <vfprintf+0x182>
    16fe:	de c0       	rjmp	.+444    	; 0x18bc <vfprintf+0x362>
    1700:	84 36       	cpi	r24, 0x64	; 100
    1702:	11 f0       	breq	.+4      	; 0x1708 <vfprintf+0x1ae>
    1704:	89 36       	cpi	r24, 0x69	; 105
    1706:	31 f5       	brne	.+76     	; 0x1754 <vfprintf+0x1fa>
    1708:	f8 01       	movw	r30, r16
    170a:	27 ff       	sbrs	r18, 7
    170c:	07 c0       	rjmp	.+14     	; 0x171c <vfprintf+0x1c2>
    170e:	60 81       	ld	r22, Z
    1710:	71 81       	ldd	r23, Z+1	; 0x01
    1712:	82 81       	ldd	r24, Z+2	; 0x02
    1714:	93 81       	ldd	r25, Z+3	; 0x03
    1716:	0c 5f       	subi	r16, 0xFC	; 252
    1718:	1f 4f       	sbci	r17, 0xFF	; 255
    171a:	08 c0       	rjmp	.+16     	; 0x172c <vfprintf+0x1d2>
    171c:	60 81       	ld	r22, Z
    171e:	71 81       	ldd	r23, Z+1	; 0x01
    1720:	88 27       	eor	r24, r24
    1722:	77 fd       	sbrc	r23, 7
    1724:	80 95       	com	r24
    1726:	98 2f       	mov	r25, r24
    1728:	0e 5f       	subi	r16, 0xFE	; 254
    172a:	1f 4f       	sbci	r17, 0xFF	; 255
    172c:	2f 76       	andi	r18, 0x6F	; 111
    172e:	b2 2e       	mov	r11, r18
    1730:	97 ff       	sbrs	r25, 7
    1732:	09 c0       	rjmp	.+18     	; 0x1746 <vfprintf+0x1ec>
    1734:	90 95       	com	r25
    1736:	80 95       	com	r24
    1738:	70 95       	com	r23
    173a:	61 95       	neg	r22
    173c:	7f 4f       	sbci	r23, 0xFF	; 255
    173e:	8f 4f       	sbci	r24, 0xFF	; 255
    1740:	9f 4f       	sbci	r25, 0xFF	; 255
    1742:	20 68       	ori	r18, 0x80	; 128
    1744:	b2 2e       	mov	r11, r18
    1746:	2a e0       	ldi	r18, 0x0A	; 10
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	a4 01       	movw	r20, r8
    174c:	32 d1       	rcall	.+612    	; 0x19b2 <__ultoa_invert>
    174e:	a8 2e       	mov	r10, r24
    1750:	a8 18       	sub	r10, r8
    1752:	43 c0       	rjmp	.+134    	; 0x17da <vfprintf+0x280>
    1754:	85 37       	cpi	r24, 0x75	; 117
    1756:	29 f4       	brne	.+10     	; 0x1762 <vfprintf+0x208>
    1758:	2f 7e       	andi	r18, 0xEF	; 239
    175a:	b2 2e       	mov	r11, r18
    175c:	2a e0       	ldi	r18, 0x0A	; 10
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	25 c0       	rjmp	.+74     	; 0x17ac <vfprintf+0x252>
    1762:	f2 2f       	mov	r31, r18
    1764:	f9 7f       	andi	r31, 0xF9	; 249
    1766:	bf 2e       	mov	r11, r31
    1768:	8f 36       	cpi	r24, 0x6F	; 111
    176a:	c1 f0       	breq	.+48     	; 0x179c <vfprintf+0x242>
    176c:	18 f4       	brcc	.+6      	; 0x1774 <vfprintf+0x21a>
    176e:	88 35       	cpi	r24, 0x58	; 88
    1770:	79 f0       	breq	.+30     	; 0x1790 <vfprintf+0x236>
    1772:	ad c0       	rjmp	.+346    	; 0x18ce <vfprintf+0x374>
    1774:	80 37       	cpi	r24, 0x70	; 112
    1776:	19 f0       	breq	.+6      	; 0x177e <vfprintf+0x224>
    1778:	88 37       	cpi	r24, 0x78	; 120
    177a:	21 f0       	breq	.+8      	; 0x1784 <vfprintf+0x22a>
    177c:	a8 c0       	rjmp	.+336    	; 0x18ce <vfprintf+0x374>
    177e:	2f 2f       	mov	r18, r31
    1780:	20 61       	ori	r18, 0x10	; 16
    1782:	b2 2e       	mov	r11, r18
    1784:	b4 fe       	sbrs	r11, 4
    1786:	0d c0       	rjmp	.+26     	; 0x17a2 <vfprintf+0x248>
    1788:	8b 2d       	mov	r24, r11
    178a:	84 60       	ori	r24, 0x04	; 4
    178c:	b8 2e       	mov	r11, r24
    178e:	09 c0       	rjmp	.+18     	; 0x17a2 <vfprintf+0x248>
    1790:	24 ff       	sbrs	r18, 4
    1792:	0a c0       	rjmp	.+20     	; 0x17a8 <vfprintf+0x24e>
    1794:	9f 2f       	mov	r25, r31
    1796:	96 60       	ori	r25, 0x06	; 6
    1798:	b9 2e       	mov	r11, r25
    179a:	06 c0       	rjmp	.+12     	; 0x17a8 <vfprintf+0x24e>
    179c:	28 e0       	ldi	r18, 0x08	; 8
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	05 c0       	rjmp	.+10     	; 0x17ac <vfprintf+0x252>
    17a2:	20 e1       	ldi	r18, 0x10	; 16
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <vfprintf+0x252>
    17a8:	20 e1       	ldi	r18, 0x10	; 16
    17aa:	32 e0       	ldi	r19, 0x02	; 2
    17ac:	f8 01       	movw	r30, r16
    17ae:	b7 fe       	sbrs	r11, 7
    17b0:	07 c0       	rjmp	.+14     	; 0x17c0 <vfprintf+0x266>
    17b2:	60 81       	ld	r22, Z
    17b4:	71 81       	ldd	r23, Z+1	; 0x01
    17b6:	82 81       	ldd	r24, Z+2	; 0x02
    17b8:	93 81       	ldd	r25, Z+3	; 0x03
    17ba:	0c 5f       	subi	r16, 0xFC	; 252
    17bc:	1f 4f       	sbci	r17, 0xFF	; 255
    17be:	06 c0       	rjmp	.+12     	; 0x17cc <vfprintf+0x272>
    17c0:	60 81       	ld	r22, Z
    17c2:	71 81       	ldd	r23, Z+1	; 0x01
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	0e 5f       	subi	r16, 0xFE	; 254
    17ca:	1f 4f       	sbci	r17, 0xFF	; 255
    17cc:	a4 01       	movw	r20, r8
    17ce:	f1 d0       	rcall	.+482    	; 0x19b2 <__ultoa_invert>
    17d0:	a8 2e       	mov	r10, r24
    17d2:	a8 18       	sub	r10, r8
    17d4:	fb 2d       	mov	r31, r11
    17d6:	ff 77       	andi	r31, 0x7F	; 127
    17d8:	bf 2e       	mov	r11, r31
    17da:	b6 fe       	sbrs	r11, 6
    17dc:	0b c0       	rjmp	.+22     	; 0x17f4 <vfprintf+0x29a>
    17de:	2b 2d       	mov	r18, r11
    17e0:	2e 7f       	andi	r18, 0xFE	; 254
    17e2:	a5 14       	cp	r10, r5
    17e4:	50 f4       	brcc	.+20     	; 0x17fa <vfprintf+0x2a0>
    17e6:	b4 fe       	sbrs	r11, 4
    17e8:	0a c0       	rjmp	.+20     	; 0x17fe <vfprintf+0x2a4>
    17ea:	b2 fc       	sbrc	r11, 2
    17ec:	08 c0       	rjmp	.+16     	; 0x17fe <vfprintf+0x2a4>
    17ee:	2b 2d       	mov	r18, r11
    17f0:	2e 7e       	andi	r18, 0xEE	; 238
    17f2:	05 c0       	rjmp	.+10     	; 0x17fe <vfprintf+0x2a4>
    17f4:	7a 2c       	mov	r7, r10
    17f6:	2b 2d       	mov	r18, r11
    17f8:	03 c0       	rjmp	.+6      	; 0x1800 <vfprintf+0x2a6>
    17fa:	7a 2c       	mov	r7, r10
    17fc:	01 c0       	rjmp	.+2      	; 0x1800 <vfprintf+0x2a6>
    17fe:	75 2c       	mov	r7, r5
    1800:	24 ff       	sbrs	r18, 4
    1802:	0d c0       	rjmp	.+26     	; 0x181e <vfprintf+0x2c4>
    1804:	fe 01       	movw	r30, r28
    1806:	ea 0d       	add	r30, r10
    1808:	f1 1d       	adc	r31, r1
    180a:	80 81       	ld	r24, Z
    180c:	80 33       	cpi	r24, 0x30	; 48
    180e:	11 f4       	brne	.+4      	; 0x1814 <vfprintf+0x2ba>
    1810:	29 7e       	andi	r18, 0xE9	; 233
    1812:	09 c0       	rjmp	.+18     	; 0x1826 <vfprintf+0x2cc>
    1814:	22 ff       	sbrs	r18, 2
    1816:	06 c0       	rjmp	.+12     	; 0x1824 <vfprintf+0x2ca>
    1818:	73 94       	inc	r7
    181a:	73 94       	inc	r7
    181c:	04 c0       	rjmp	.+8      	; 0x1826 <vfprintf+0x2cc>
    181e:	82 2f       	mov	r24, r18
    1820:	86 78       	andi	r24, 0x86	; 134
    1822:	09 f0       	breq	.+2      	; 0x1826 <vfprintf+0x2cc>
    1824:	73 94       	inc	r7
    1826:	23 fd       	sbrc	r18, 3
    1828:	12 c0       	rjmp	.+36     	; 0x184e <vfprintf+0x2f4>
    182a:	20 ff       	sbrs	r18, 0
    182c:	06 c0       	rjmp	.+12     	; 0x183a <vfprintf+0x2e0>
    182e:	5a 2c       	mov	r5, r10
    1830:	73 14       	cp	r7, r3
    1832:	18 f4       	brcc	.+6      	; 0x183a <vfprintf+0x2e0>
    1834:	53 0c       	add	r5, r3
    1836:	57 18       	sub	r5, r7
    1838:	73 2c       	mov	r7, r3
    183a:	73 14       	cp	r7, r3
    183c:	60 f4       	brcc	.+24     	; 0x1856 <vfprintf+0x2fc>
    183e:	b7 01       	movw	r22, r14
    1840:	80 e2       	ldi	r24, 0x20	; 32
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	2c 87       	std	Y+12, r18	; 0x0c
    1846:	83 d0       	rcall	.+262    	; 0x194e <fputc>
    1848:	73 94       	inc	r7
    184a:	2c 85       	ldd	r18, Y+12	; 0x0c
    184c:	f6 cf       	rjmp	.-20     	; 0x183a <vfprintf+0x2e0>
    184e:	73 14       	cp	r7, r3
    1850:	10 f4       	brcc	.+4      	; 0x1856 <vfprintf+0x2fc>
    1852:	37 18       	sub	r3, r7
    1854:	01 c0       	rjmp	.+2      	; 0x1858 <vfprintf+0x2fe>
    1856:	31 2c       	mov	r3, r1
    1858:	24 ff       	sbrs	r18, 4
    185a:	11 c0       	rjmp	.+34     	; 0x187e <vfprintf+0x324>
    185c:	b7 01       	movw	r22, r14
    185e:	80 e3       	ldi	r24, 0x30	; 48
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	2c 87       	std	Y+12, r18	; 0x0c
    1864:	74 d0       	rcall	.+232    	; 0x194e <fputc>
    1866:	2c 85       	ldd	r18, Y+12	; 0x0c
    1868:	22 ff       	sbrs	r18, 2
    186a:	16 c0       	rjmp	.+44     	; 0x1898 <vfprintf+0x33e>
    186c:	21 ff       	sbrs	r18, 1
    186e:	03 c0       	rjmp	.+6      	; 0x1876 <vfprintf+0x31c>
    1870:	88 e5       	ldi	r24, 0x58	; 88
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	02 c0       	rjmp	.+4      	; 0x187a <vfprintf+0x320>
    1876:	88 e7       	ldi	r24, 0x78	; 120
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	b7 01       	movw	r22, r14
    187c:	0c c0       	rjmp	.+24     	; 0x1896 <vfprintf+0x33c>
    187e:	82 2f       	mov	r24, r18
    1880:	86 78       	andi	r24, 0x86	; 134
    1882:	51 f0       	breq	.+20     	; 0x1898 <vfprintf+0x33e>
    1884:	21 fd       	sbrc	r18, 1
    1886:	02 c0       	rjmp	.+4      	; 0x188c <vfprintf+0x332>
    1888:	80 e2       	ldi	r24, 0x20	; 32
    188a:	01 c0       	rjmp	.+2      	; 0x188e <vfprintf+0x334>
    188c:	8b e2       	ldi	r24, 0x2B	; 43
    188e:	27 fd       	sbrc	r18, 7
    1890:	8d e2       	ldi	r24, 0x2D	; 45
    1892:	b7 01       	movw	r22, r14
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	5b d0       	rcall	.+182    	; 0x194e <fputc>
    1898:	a5 14       	cp	r10, r5
    189a:	30 f4       	brcc	.+12     	; 0x18a8 <vfprintf+0x34e>
    189c:	b7 01       	movw	r22, r14
    189e:	80 e3       	ldi	r24, 0x30	; 48
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	55 d0       	rcall	.+170    	; 0x194e <fputc>
    18a4:	5a 94       	dec	r5
    18a6:	f8 cf       	rjmp	.-16     	; 0x1898 <vfprintf+0x33e>
    18a8:	aa 94       	dec	r10
    18aa:	f4 01       	movw	r30, r8
    18ac:	ea 0d       	add	r30, r10
    18ae:	f1 1d       	adc	r31, r1
    18b0:	80 81       	ld	r24, Z
    18b2:	b7 01       	movw	r22, r14
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	4b d0       	rcall	.+150    	; 0x194e <fputc>
    18b8:	a1 10       	cpse	r10, r1
    18ba:	f6 cf       	rjmp	.-20     	; 0x18a8 <vfprintf+0x34e>
    18bc:	33 20       	and	r3, r3
    18be:	09 f4       	brne	.+2      	; 0x18c2 <vfprintf+0x368>
    18c0:	5d ce       	rjmp	.-838    	; 0x157c <vfprintf+0x22>
    18c2:	b7 01       	movw	r22, r14
    18c4:	80 e2       	ldi	r24, 0x20	; 32
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	42 d0       	rcall	.+132    	; 0x194e <fputc>
    18ca:	3a 94       	dec	r3
    18cc:	f7 cf       	rjmp	.-18     	; 0x18bc <vfprintf+0x362>
    18ce:	f7 01       	movw	r30, r14
    18d0:	86 81       	ldd	r24, Z+6	; 0x06
    18d2:	97 81       	ldd	r25, Z+7	; 0x07
    18d4:	02 c0       	rjmp	.+4      	; 0x18da <vfprintf+0x380>
    18d6:	8f ef       	ldi	r24, 0xFF	; 255
    18d8:	9f ef       	ldi	r25, 0xFF	; 255
    18da:	2c 96       	adiw	r28, 0x0c	; 12
    18dc:	e2 e1       	ldi	r30, 0x12	; 18
    18de:	e3 c0       	rjmp	.+454    	; 0x1aa6 <__epilogue_restores__>

000018e0 <calloc>:
    18e0:	0f 93       	push	r16
    18e2:	1f 93       	push	r17
    18e4:	cf 93       	push	r28
    18e6:	df 93       	push	r29
    18e8:	86 9f       	mul	r24, r22
    18ea:	80 01       	movw	r16, r0
    18ec:	87 9f       	mul	r24, r23
    18ee:	10 0d       	add	r17, r0
    18f0:	96 9f       	mul	r25, r22
    18f2:	10 0d       	add	r17, r0
    18f4:	11 24       	eor	r1, r1
    18f6:	c8 01       	movw	r24, r16
    18f8:	81 dc       	rcall	.-1790   	; 0x11fc <malloc>
    18fa:	ec 01       	movw	r28, r24
    18fc:	00 97       	sbiw	r24, 0x00	; 0
    18fe:	21 f0       	breq	.+8      	; 0x1908 <calloc+0x28>
    1900:	a8 01       	movw	r20, r16
    1902:	60 e0       	ldi	r22, 0x00	; 0
    1904:	70 e0       	ldi	r23, 0x00	; 0
    1906:	11 d0       	rcall	.+34     	; 0x192a <memset>
    1908:	ce 01       	movw	r24, r28
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	1f 91       	pop	r17
    1910:	0f 91       	pop	r16
    1912:	08 95       	ret

00001914 <strnlen_P>:
    1914:	fc 01       	movw	r30, r24
    1916:	05 90       	lpm	r0, Z+
    1918:	61 50       	subi	r22, 0x01	; 1
    191a:	70 40       	sbci	r23, 0x00	; 0
    191c:	01 10       	cpse	r0, r1
    191e:	d8 f7       	brcc	.-10     	; 0x1916 <strnlen_P+0x2>
    1920:	80 95       	com	r24
    1922:	90 95       	com	r25
    1924:	8e 0f       	add	r24, r30
    1926:	9f 1f       	adc	r25, r31
    1928:	08 95       	ret

0000192a <memset>:
    192a:	dc 01       	movw	r26, r24
    192c:	01 c0       	rjmp	.+2      	; 0x1930 <memset+0x6>
    192e:	6d 93       	st	X+, r22
    1930:	41 50       	subi	r20, 0x01	; 1
    1932:	50 40       	sbci	r21, 0x00	; 0
    1934:	e0 f7       	brcc	.-8      	; 0x192e <memset+0x4>
    1936:	08 95       	ret

00001938 <strnlen>:
    1938:	fc 01       	movw	r30, r24
    193a:	61 50       	subi	r22, 0x01	; 1
    193c:	70 40       	sbci	r23, 0x00	; 0
    193e:	01 90       	ld	r0, Z+
    1940:	01 10       	cpse	r0, r1
    1942:	d8 f7       	brcc	.-10     	; 0x193a <strnlen+0x2>
    1944:	80 95       	com	r24
    1946:	90 95       	com	r25
    1948:	8e 0f       	add	r24, r30
    194a:	9f 1f       	adc	r25, r31
    194c:	08 95       	ret

0000194e <fputc>:
    194e:	0f 93       	push	r16
    1950:	1f 93       	push	r17
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	18 2f       	mov	r17, r24
    1958:	09 2f       	mov	r16, r25
    195a:	eb 01       	movw	r28, r22
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	81 fd       	sbrc	r24, 1
    1960:	03 c0       	rjmp	.+6      	; 0x1968 <fputc+0x1a>
    1962:	8f ef       	ldi	r24, 0xFF	; 255
    1964:	9f ef       	ldi	r25, 0xFF	; 255
    1966:	20 c0       	rjmp	.+64     	; 0x19a8 <fputc+0x5a>
    1968:	82 ff       	sbrs	r24, 2
    196a:	10 c0       	rjmp	.+32     	; 0x198c <fputc+0x3e>
    196c:	4e 81       	ldd	r20, Y+6	; 0x06
    196e:	5f 81       	ldd	r21, Y+7	; 0x07
    1970:	2c 81       	ldd	r18, Y+4	; 0x04
    1972:	3d 81       	ldd	r19, Y+5	; 0x05
    1974:	42 17       	cp	r20, r18
    1976:	53 07       	cpc	r21, r19
    1978:	7c f4       	brge	.+30     	; 0x1998 <fputc+0x4a>
    197a:	e8 81       	ld	r30, Y
    197c:	f9 81       	ldd	r31, Y+1	; 0x01
    197e:	9f 01       	movw	r18, r30
    1980:	2f 5f       	subi	r18, 0xFF	; 255
    1982:	3f 4f       	sbci	r19, 0xFF	; 255
    1984:	39 83       	std	Y+1, r19	; 0x01
    1986:	28 83       	st	Y, r18
    1988:	10 83       	st	Z, r17
    198a:	06 c0       	rjmp	.+12     	; 0x1998 <fputc+0x4a>
    198c:	e8 85       	ldd	r30, Y+8	; 0x08
    198e:	f9 85       	ldd	r31, Y+9	; 0x09
    1990:	81 2f       	mov	r24, r17
    1992:	09 95       	icall
    1994:	89 2b       	or	r24, r25
    1996:	29 f7       	brne	.-54     	; 0x1962 <fputc+0x14>
    1998:	2e 81       	ldd	r18, Y+6	; 0x06
    199a:	3f 81       	ldd	r19, Y+7	; 0x07
    199c:	2f 5f       	subi	r18, 0xFF	; 255
    199e:	3f 4f       	sbci	r19, 0xFF	; 255
    19a0:	3f 83       	std	Y+7, r19	; 0x07
    19a2:	2e 83       	std	Y+6, r18	; 0x06
    19a4:	81 2f       	mov	r24, r17
    19a6:	90 2f       	mov	r25, r16
    19a8:	df 91       	pop	r29
    19aa:	cf 91       	pop	r28
    19ac:	1f 91       	pop	r17
    19ae:	0f 91       	pop	r16
    19b0:	08 95       	ret

000019b2 <__ultoa_invert>:
    19b2:	fa 01       	movw	r30, r20
    19b4:	aa 27       	eor	r26, r26
    19b6:	28 30       	cpi	r18, 0x08	; 8
    19b8:	51 f1       	breq	.+84     	; 0x1a0e <__ultoa_invert+0x5c>
    19ba:	20 31       	cpi	r18, 0x10	; 16
    19bc:	81 f1       	breq	.+96     	; 0x1a1e <__ultoa_invert+0x6c>
    19be:	e8 94       	clt
    19c0:	6f 93       	push	r22
    19c2:	6e 7f       	andi	r22, 0xFE	; 254
    19c4:	6e 5f       	subi	r22, 0xFE	; 254
    19c6:	7f 4f       	sbci	r23, 0xFF	; 255
    19c8:	8f 4f       	sbci	r24, 0xFF	; 255
    19ca:	9f 4f       	sbci	r25, 0xFF	; 255
    19cc:	af 4f       	sbci	r26, 0xFF	; 255
    19ce:	b1 e0       	ldi	r27, 0x01	; 1
    19d0:	3e d0       	rcall	.+124    	; 0x1a4e <__ultoa_invert+0x9c>
    19d2:	b4 e0       	ldi	r27, 0x04	; 4
    19d4:	3c d0       	rcall	.+120    	; 0x1a4e <__ultoa_invert+0x9c>
    19d6:	67 0f       	add	r22, r23
    19d8:	78 1f       	adc	r23, r24
    19da:	89 1f       	adc	r24, r25
    19dc:	9a 1f       	adc	r25, r26
    19de:	a1 1d       	adc	r26, r1
    19e0:	68 0f       	add	r22, r24
    19e2:	79 1f       	adc	r23, r25
    19e4:	8a 1f       	adc	r24, r26
    19e6:	91 1d       	adc	r25, r1
    19e8:	a1 1d       	adc	r26, r1
    19ea:	6a 0f       	add	r22, r26
    19ec:	71 1d       	adc	r23, r1
    19ee:	81 1d       	adc	r24, r1
    19f0:	91 1d       	adc	r25, r1
    19f2:	a1 1d       	adc	r26, r1
    19f4:	20 d0       	rcall	.+64     	; 0x1a36 <__ultoa_invert+0x84>
    19f6:	09 f4       	brne	.+2      	; 0x19fa <__ultoa_invert+0x48>
    19f8:	68 94       	set
    19fa:	3f 91       	pop	r19
    19fc:	2a e0       	ldi	r18, 0x0A	; 10
    19fe:	26 9f       	mul	r18, r22
    1a00:	11 24       	eor	r1, r1
    1a02:	30 19       	sub	r19, r0
    1a04:	30 5d       	subi	r19, 0xD0	; 208
    1a06:	31 93       	st	Z+, r19
    1a08:	de f6       	brtc	.-74     	; 0x19c0 <__ultoa_invert+0xe>
    1a0a:	cf 01       	movw	r24, r30
    1a0c:	08 95       	ret
    1a0e:	46 2f       	mov	r20, r22
    1a10:	47 70       	andi	r20, 0x07	; 7
    1a12:	40 5d       	subi	r20, 0xD0	; 208
    1a14:	41 93       	st	Z+, r20
    1a16:	b3 e0       	ldi	r27, 0x03	; 3
    1a18:	0f d0       	rcall	.+30     	; 0x1a38 <__ultoa_invert+0x86>
    1a1a:	c9 f7       	brne	.-14     	; 0x1a0e <__ultoa_invert+0x5c>
    1a1c:	f6 cf       	rjmp	.-20     	; 0x1a0a <__ultoa_invert+0x58>
    1a1e:	46 2f       	mov	r20, r22
    1a20:	4f 70       	andi	r20, 0x0F	; 15
    1a22:	40 5d       	subi	r20, 0xD0	; 208
    1a24:	4a 33       	cpi	r20, 0x3A	; 58
    1a26:	18 f0       	brcs	.+6      	; 0x1a2e <__ultoa_invert+0x7c>
    1a28:	49 5d       	subi	r20, 0xD9	; 217
    1a2a:	31 fd       	sbrc	r19, 1
    1a2c:	40 52       	subi	r20, 0x20	; 32
    1a2e:	41 93       	st	Z+, r20
    1a30:	02 d0       	rcall	.+4      	; 0x1a36 <__ultoa_invert+0x84>
    1a32:	a9 f7       	brne	.-22     	; 0x1a1e <__ultoa_invert+0x6c>
    1a34:	ea cf       	rjmp	.-44     	; 0x1a0a <__ultoa_invert+0x58>
    1a36:	b4 e0       	ldi	r27, 0x04	; 4
    1a38:	a6 95       	lsr	r26
    1a3a:	97 95       	ror	r25
    1a3c:	87 95       	ror	r24
    1a3e:	77 95       	ror	r23
    1a40:	67 95       	ror	r22
    1a42:	ba 95       	dec	r27
    1a44:	c9 f7       	brne	.-14     	; 0x1a38 <__ultoa_invert+0x86>
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	61 05       	cpc	r22, r1
    1a4a:	71 05       	cpc	r23, r1
    1a4c:	08 95       	ret
    1a4e:	9b 01       	movw	r18, r22
    1a50:	ac 01       	movw	r20, r24
    1a52:	0a 2e       	mov	r0, r26
    1a54:	06 94       	lsr	r0
    1a56:	57 95       	ror	r21
    1a58:	47 95       	ror	r20
    1a5a:	37 95       	ror	r19
    1a5c:	27 95       	ror	r18
    1a5e:	ba 95       	dec	r27
    1a60:	c9 f7       	brne	.-14     	; 0x1a54 <__ultoa_invert+0xa2>
    1a62:	62 0f       	add	r22, r18
    1a64:	73 1f       	adc	r23, r19
    1a66:	84 1f       	adc	r24, r20
    1a68:	95 1f       	adc	r25, r21
    1a6a:	a0 1d       	adc	r26, r0
    1a6c:	08 95       	ret

00001a6e <__prologue_saves__>:
    1a6e:	2f 92       	push	r2
    1a70:	3f 92       	push	r3
    1a72:	4f 92       	push	r4
    1a74:	5f 92       	push	r5
    1a76:	6f 92       	push	r6
    1a78:	7f 92       	push	r7
    1a7a:	8f 92       	push	r8
    1a7c:	9f 92       	push	r9
    1a7e:	af 92       	push	r10
    1a80:	bf 92       	push	r11
    1a82:	cf 92       	push	r12
    1a84:	df 92       	push	r13
    1a86:	ef 92       	push	r14
    1a88:	ff 92       	push	r15
    1a8a:	0f 93       	push	r16
    1a8c:	1f 93       	push	r17
    1a8e:	cf 93       	push	r28
    1a90:	df 93       	push	r29
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	ca 1b       	sub	r28, r26
    1a98:	db 0b       	sbc	r29, r27
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	de bf       	out	0x3e, r29	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	cd bf       	out	0x3d, r28	; 61
    1aa4:	09 94       	ijmp

00001aa6 <__epilogue_restores__>:
    1aa6:	2a 88       	ldd	r2, Y+18	; 0x12
    1aa8:	39 88       	ldd	r3, Y+17	; 0x11
    1aaa:	48 88       	ldd	r4, Y+16	; 0x10
    1aac:	5f 84       	ldd	r5, Y+15	; 0x0f
    1aae:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ab0:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ab2:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ab4:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ab6:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ab8:	b9 84       	ldd	r11, Y+9	; 0x09
    1aba:	c8 84       	ldd	r12, Y+8	; 0x08
    1abc:	df 80       	ldd	r13, Y+7	; 0x07
    1abe:	ee 80       	ldd	r14, Y+6	; 0x06
    1ac0:	fd 80       	ldd	r15, Y+5	; 0x05
    1ac2:	0c 81       	ldd	r16, Y+4	; 0x04
    1ac4:	1b 81       	ldd	r17, Y+3	; 0x03
    1ac6:	aa 81       	ldd	r26, Y+2	; 0x02
    1ac8:	b9 81       	ldd	r27, Y+1	; 0x01
    1aca:	ce 0f       	add	r28, r30
    1acc:	d1 1d       	adc	r29, r1
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	ed 01       	movw	r28, r26
    1ada:	08 95       	ret

00001adc <_exit>:
    1adc:	f8 94       	cli

00001ade <__stop_program>:
    1ade:	ff cf       	rjmp	.-2      	; 0x1ade <__stop_program>
