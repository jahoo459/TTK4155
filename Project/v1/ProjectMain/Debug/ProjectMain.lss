
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d2  00800100  00001fe8  0000207c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fe8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  008002d2  008002d2  0000224e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000224e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000310  00000000  00000000  000022aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003f6a  00000000  00000000  000025ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001218  00000000  00000000  00006524  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000017e8  00000000  00000000  0000773c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000744  00000000  00000000  00008f24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e77  00000000  00000000  00009668  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001f8b  00000000  00000000  0000a4df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000410  00000000  00000000  0000c46a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	fa c1       	rjmp	.+1012   	; 0x402 <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <JOY_updatePosition+0x1e>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e8 ee       	ldi	r30, 0xE8	; 232
     37c:	ff e1       	ldi	r31, 0x1F	; 31
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a2 3d       	cpi	r26, 0xD2	; 210
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a2 ed       	ldi	r26, 0xD2	; 210
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	a2 30       	cpi	r26, 0x02	; 2
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	82 d0       	rcall	.+260    	; 0x4a0 <main>
     39c:	0c 94 f2 0f 	jmp	0x1fe4	; 0x1fe4 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	//printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 f2 02 	sts	0x02F2, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 dd 02 	sts	0x02DD, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 dc 02 	sts	0x02DC, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 db 02 	sts	0x02DB, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_3>:
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	8f 93       	push	r24
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 da 02 	sts	0x02DA, r24
     414:	8f 91       	pop	r24
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <init>:
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	1f e1       	ldi	r17, 0x1F	; 31
     42a:	e1 2e       	mov	r14, r17
     42c:	f1 2c       	mov	r15, r1
     42e:	00 e0       	ldi	r16, 0x00	; 0
     430:	10 e0       	ldi	r17, 0x00	; 0
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	4b e4       	ldi	r20, 0x4B	; 75
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e8       	ldi	r22, 0x80	; 128
     43c:	75 e2       	ldi	r23, 0x25	; 37
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 17 0b 	call	0x162e	; 0x162e <uartInit>
     446:	82 e4       	ldi	r24, 0x42	; 66
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <puts>
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	3d d2       	rcall	.+1146   	; 0x8cc <enableXMEM>
     452:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <SLI_init>
     456:	4c d2       	rcall	.+1176   	; 0x8f0 <JOY_init>
     458:	0e 94 5f 0a 	call	0x14be	; 0x14be <OLED_init>
     45c:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <SPI_init>
     460:	3e d4       	rcall	.+2172   	; 0xcde <MCP2515_init>
     462:	91 d0       	rcall	.+290    	; 0x586 <CAN_init>
     464:	8b b7       	in	r24, 0x3b	; 59
     466:	80 64       	ori	r24, 0x40	; 64
     468:	8b bf       	out	0x3b, r24	; 59
     46a:	85 b7       	in	r24, 0x35	; 53
     46c:	82 60       	ori	r24, 0x02	; 2
     46e:	85 bf       	out	0x35, r24	; 53
     470:	85 b7       	in	r24, 0x35	; 53
     472:	8e 7f       	andi	r24, 0xFE	; 254
     474:	85 bf       	out	0x35, r24	; 53
     476:	8b 98       	cbi	0x11, 3	; 17
     478:	93 9a       	sbi	0x12, 3	; 18
     47a:	8b b7       	in	r24, 0x3b	; 59
     47c:	80 68       	ori	r24, 0x80	; 128
     47e:	8b bf       	out	0x3b, r24	; 59
     480:	85 b7       	in	r24, 0x35	; 53
     482:	88 60       	ori	r24, 0x08	; 8
     484:	85 bf       	out	0x35, r24	; 53
     486:	85 b7       	in	r24, 0x35	; 53
     488:	8b 7f       	andi	r24, 0xFB	; 251
     48a:	85 bf       	out	0x35, r24	; 53
     48c:	32 98       	cbi	0x06, 2	; 6
     48e:	3a 98       	cbi	0x07, 2	; 7
     490:	b8 98       	cbi	0x17, 0	; 23
     492:	c0 98       	cbi	0x18, 0	; 24
     494:	78 94       	sei
     496:	1f 91       	pop	r17
     498:	0f 91       	pop	r16
     49a:	ff 90       	pop	r15
     49c:	ef 90       	pop	r14
     49e:	08 95       	ret

000004a0 <main>:
/*
=======================MAIN FUNCTION=========================
*/

int main(void)
{
     4a0:	cf 93       	push	r28
     4a2:	df 93       	push	r29
     4a4:	cd b7       	in	r28, 0x3d	; 61
     4a6:	de b7       	in	r29, 0x3e	; 62
     4a8:	a1 97       	sbiw	r28, 0x21	; 33
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	f8 94       	cli
     4ae:	de bf       	out	0x3e, r29	; 62
     4b0:	0f be       	out	0x3f, r0	; 63
     4b2:	cd bf       	out	0x3d, r28	; 61
	
	init();
     4b4:	b5 df       	rcall	.-150    	; 0x420 <init>

	OLED_goto(0,0);
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	87 d6       	rcall	.+3342   	; 0x11ce <OLED_goto>
	OLED_printString("I'm alive");
     4c0:	8b e7       	ldi	r24, 0x7B	; 123
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	da d6       	rcall	.+3508   	; 0x127a <OLED_printString>
	
	for(uint8_t i = 10; i < 64; i+=8)
     4c6:	1a e0       	ldi	r17, 0x0A	; 10
	{
		OLED_line(0,i,127,i,1);
     4c8:	01 e0       	ldi	r16, 0x01	; 1
     4ca:	21 2f       	mov	r18, r17
     4cc:	4f e7       	ldi	r20, 0x7F	; 127
     4ce:	61 2f       	mov	r22, r17
     4d0:	80 e0       	ldi	r24, 0x00	; 0
     4d2:	4f d7       	rcall	.+3742   	; 0x1372 <OLED_line>
	init();

	OLED_goto(0,0);
	OLED_printString("I'm alive");
	
	for(uint8_t i = 10; i < 64; i+=8)
     4d4:	18 5f       	subi	r17, 0xF8	; 248
     4d6:	12 34       	cpi	r17, 0x42	; 66
     4d8:	b9 f7       	brne	.-18     	; 0x4c8 <main+0x28>
     4da:	10 e0       	ldi	r17, 0x00	; 0
		OLED_line(0,i,127,i,1);
	}
	
	for(uint8_t i = 0; i<128; i+=8)
	{
		if(i<=73)
     4dc:	1a 34       	cpi	r17, 0x4A	; 74
     4de:	38 f4       	brcc	.+14     	; 0x4ee <main+0x4e>
		{
			OLED_line(i,1,i,7,1);
     4e0:	01 e0       	ldi	r16, 0x01	; 1
     4e2:	27 e0       	ldi	r18, 0x07	; 7
     4e4:	41 2f       	mov	r20, r17
     4e6:	61 e0       	ldi	r22, 0x01	; 1
     4e8:	81 2f       	mov	r24, r17
     4ea:	43 d7       	rcall	.+3718   	; 0x1372 <OLED_line>
     4ec:	06 c0       	rjmp	.+12     	; 0x4fa <main+0x5a>
		}
		else
		{
			OLED_line(i,0,i,7,1);
     4ee:	01 e0       	ldi	r16, 0x01	; 1
     4f0:	27 e0       	ldi	r18, 0x07	; 7
     4f2:	41 2f       	mov	r20, r17
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	81 2f       	mov	r24, r17
     4f8:	3c d7       	rcall	.+3704   	; 0x1372 <OLED_line>
	for(uint8_t i = 10; i < 64; i+=8)
	{
		OLED_line(0,i,127,i,1);
	}
	
	for(uint8_t i = 0; i<128; i+=8)
     4fa:	18 5f       	subi	r17, 0xF8	; 248
     4fc:	10 38       	cpi	r17, 0x80	; 128
     4fe:	71 f7       	brne	.-36     	; 0x4dc <main+0x3c>
	
	
	
    while(1)
    {
		currPos = JOY_getPosition();
     500:	02 ed       	ldi	r16, 0xD2	; 210
     502:	12 e0       	ldi	r17, 0x02	; 2
		
		message2send.id = 23;
     504:	0f 2e       	mov	r0, r31
     506:	f7 e1       	ldi	r31, 0x17	; 23
     508:	ef 2e       	mov	r14, r31
     50a:	f1 2c       	mov	r15, r1
     50c:	f0 2d       	mov	r31, r0
		message2send.length = 1;
     50e:	dd 24       	eor	r13, r13
     510:	d3 94       	inc	r13
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     512:	0f 2e       	mov	r0, r31
     514:	fb e0       	ldi	r31, 0x0B	; 11
     516:	cf 2e       	mov	r12, r31
     518:	f0 2d       	mov	r31, r0
	
	
	
    while(1)
    {
		currPos = JOY_getPosition();
     51a:	6d d3       	rcall	.+1754   	; 0xbf6 <JOY_getPosition>
     51c:	f8 01       	movw	r30, r16
     51e:	20 83       	st	Z, r18
     520:	31 83       	std	Z+1, r19	; 0x01
     522:	42 83       	std	Z+2, r20	; 0x02
     524:	53 83       	std	Z+3, r21	; 0x03
     526:	64 83       	std	Z+4, r22	; 0x04
     528:	75 83       	std	Z+5, r23	; 0x05
     52a:	86 83       	std	Z+6, r24	; 0x06
     52c:	97 83       	std	Z+7, r25	; 0x07
		
		message2send.id = 23;
     52e:	fa 82       	std	Y+2, r15	; 0x02
     530:	e9 82       	std	Y+1, r14	; 0x01
		message2send.length = 1;
     532:	db 82       	std	Y+3, r13	; 0x03
		message2send.data[0] = currPos.X_abs;
     534:	2c 83       	std	Y+4, r18	; 0x04
		
		CAN_sendMessage(&message2send, 0);
     536:	60 e0       	ldi	r22, 0x00	; 0
     538:	ce 01       	movw	r24, r28
     53a:	01 96       	adiw	r24, 0x01	; 1
     53c:	3b d0       	rcall	.+118    	; 0x5b4 <CAN_sendMessage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	90 ef       	ldi	r25, 0xF0	; 240
     542:	01 97       	sbiw	r24, 0x01	; 1
     544:	f1 f7       	brne	.-4      	; 0x542 <__stack+0x43>
		_delay_ms(50);

		if(activateMenuFlag)
     546:	80 91 db 02 	lds	r24, 0x02DB
     54a:	81 11       	cpse	r24, r1
		{
			MENU_activate();
     54c:	32 d6       	rcall	.+3172   	; 0x11b2 <MENU_activate>
		}

		if(SPIreceivedFlag)
     54e:	80 91 da 02 	lds	r24, 0x02DA
     552:	88 23       	and	r24, r24
     554:	11 f3       	breq	.-60     	; 0x51a <__stack+0x1b>
		{
			
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
     556:	6c e2       	ldi	r22, 0x2C	; 44
     558:	80 e0       	ldi	r24, 0x00	; 0
     55a:	aa d3       	rcall	.+1876   	; 0xcb0 <MCP2515_read>
     55c:	83 70       	andi	r24, 0x03	; 3
     55e:	e9 f2       	breq	.-70     	; 0x51a <__stack+0x1b>
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     560:	68 2f       	mov	r22, r24
     562:	ce 01       	movw	r24, r28
     564:	47 96       	adiw	r24, 0x17	; 23
     566:	8f d0       	rcall	.+286    	; 0x686 <CAN_receiveMessage>
     568:	fe 01       	movw	r30, r28
     56a:	77 96       	adiw	r30, 0x17	; 23
     56c:	de 01       	movw	r26, r28
     56e:	1c 96       	adiw	r26, 0x0c	; 12
     570:	8c 2d       	mov	r24, r12
     572:	01 90       	ld	r0, Z+
     574:	0d 92       	st	X+, r0
     576:	8a 95       	dec	r24
     578:	e1 f7       	brne	.-8      	; 0x572 <__stack+0x73>

				CAN_printMessage(&receivedMessage);
     57a:	ce 01       	movw	r24, r28
     57c:	0c 96       	adiw	r24, 0x0c	; 12
     57e:	4c d1       	rcall	.+664    	; 0x818 <CAN_printMessage>
			
				SPIreceivedFlag = 0;
     580:	10 92 da 02 	sts	0x02DA, r1
     584:	ca cf       	rjmp	.-108    	; 0x51a <__stack+0x1b>

00000586 <CAN_init>:
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
     58e:	43 e0       	ldi	r20, 0x03	; 3
     590:	6b e2       	ldi	r22, 0x2B	; 43
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	af d3       	rcall	.+1886   	; 0xcf6 <MCP2515_write>
     598:	40 e6       	ldi	r20, 0x60	; 96
     59a:	60 e6       	ldi	r22, 0x60	; 96
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	aa d3       	rcall	.+1876   	; 0xcf6 <MCP2515_write>
     5a2:	20 e0       	ldi	r18, 0x00	; 0
     5a4:	40 e8       	ldi	r20, 0x80	; 128
     5a6:	6f e0       	ldi	r22, 0x0F	; 15
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	b7 d3       	rcall	.+1902   	; 0xd1c <MCP2515_bitModify>
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <CAN_sendMessage>:
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	27 97       	sbiw	r28, 0x07	; 7
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
     5c8:	9e 83       	std	Y+6, r25	; 0x06
     5ca:	8d 83       	std	Y+5, r24	; 0x05
     5cc:	6f 83       	std	Y+7, r22	; 0x07
     5ce:	8f 81       	ldd	r24, Y+7	; 0x07
     5d0:	88 2f       	mov	r24, r24
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	00 97       	sbiw	r24, 0x00	; 0
     5d6:	09 f0       	breq	.+2      	; 0x5da <CAN_sendMessage+0x26>
     5d8:	4d c0       	rjmp	.+154    	; 0x674 <CAN_sendMessage+0xc0>
     5da:	8d 81       	ldd	r24, Y+5	; 0x05
     5dc:	9e 81       	ldd	r25, Y+6	; 0x06
     5de:	fc 01       	movw	r30, r24
     5e0:	80 81       	ld	r24, Z
     5e2:	91 81       	ldd	r25, Z+1	; 0x01
     5e4:	9c 83       	std	Y+4, r25	; 0x04
     5e6:	8b 83       	std	Y+3, r24	; 0x03
     5e8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ea:	82 95       	swap	r24
     5ec:	88 0f       	add	r24, r24
     5ee:	80 7e       	andi	r24, 0xE0	; 224
     5f0:	48 2f       	mov	r20, r24
     5f2:	62 e3       	ldi	r22, 0x32	; 50
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	7e d3       	rcall	.+1788   	; 0xcf6 <MCP2515_write>
     5fa:	8b 81       	ldd	r24, Y+3	; 0x03
     5fc:	9c 81       	ldd	r25, Y+4	; 0x04
     5fe:	96 95       	lsr	r25
     600:	87 95       	ror	r24
     602:	96 95       	lsr	r25
     604:	87 95       	ror	r24
     606:	96 95       	lsr	r25
     608:	87 95       	ror	r24
     60a:	48 2f       	mov	r20, r24
     60c:	61 e3       	ldi	r22, 0x31	; 49
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	71 d3       	rcall	.+1762   	; 0xcf6 <MCP2515_write>
     614:	8d 81       	ldd	r24, Y+5	; 0x05
     616:	9e 81       	ldd	r25, Y+6	; 0x06
     618:	fc 01       	movw	r30, r24
     61a:	82 81       	ldd	r24, Z+2	; 0x02
     61c:	48 2f       	mov	r20, r24
     61e:	65 e3       	ldi	r22, 0x35	; 53
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	68 d3       	rcall	.+1744   	; 0xcf6 <MCP2515_write>
     626:	86 e3       	ldi	r24, 0x36	; 54
     628:	89 83       	std	Y+1, r24	; 0x01
     62a:	1a 82       	std	Y+2, r1	; 0x02
     62c:	15 c0       	rjmp	.+42     	; 0x658 <CAN_sendMessage+0xa4>
     62e:	8a 81       	ldd	r24, Y+2	; 0x02
     630:	88 2f       	mov	r24, r24
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	2d 81       	ldd	r18, Y+5	; 0x05
     636:	3e 81       	ldd	r19, Y+6	; 0x06
     638:	82 0f       	add	r24, r18
     63a:	93 1f       	adc	r25, r19
     63c:	03 96       	adiw	r24, 0x03	; 3
     63e:	fc 01       	movw	r30, r24
     640:	80 81       	ld	r24, Z
     642:	48 2f       	mov	r20, r24
     644:	69 81       	ldd	r22, Y+1	; 0x01
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	55 d3       	rcall	.+1706   	; 0xcf6 <MCP2515_write>
     64c:	89 81       	ldd	r24, Y+1	; 0x01
     64e:	8f 5f       	subi	r24, 0xFF	; 255
     650:	89 83       	std	Y+1, r24	; 0x01
     652:	8a 81       	ldd	r24, Y+2	; 0x02
     654:	8f 5f       	subi	r24, 0xFF	; 255
     656:	8a 83       	std	Y+2, r24	; 0x02
     658:	8d 81       	ldd	r24, Y+5	; 0x05
     65a:	9e 81       	ldd	r25, Y+6	; 0x06
     65c:	fc 01       	movw	r30, r24
     65e:	92 81       	ldd	r25, Z+2	; 0x02
     660:	8a 81       	ldd	r24, Y+2	; 0x02
     662:	89 17       	cp	r24, r25
     664:	20 f3       	brcs	.-56     	; 0x62e <CAN_sendMessage+0x7a>
     666:	2f ef       	ldi	r18, 0xFF	; 255
     668:	48 e0       	ldi	r20, 0x08	; 8
     66a:	60 e3       	ldi	r22, 0x30	; 48
     66c:	80 e0       	ldi	r24, 0x00	; 0
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	55 d3       	rcall	.+1706   	; 0xd1c <MCP2515_bitModify>
     672:	00 00       	nop
     674:	27 96       	adiw	r28, 0x07	; 7
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	f8 94       	cli
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	cd bf       	out	0x3d, r28	; 61
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <CAN_receiveMessage>:
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	cd b7       	in	r28, 0x3d	; 61
     690:	de b7       	in	r29, 0x3e	; 62
     692:	61 97       	sbiw	r28, 0x11	; 17
     694:	0f b6       	in	r0, 0x3f	; 63
     696:	f8 94       	cli
     698:	de bf       	out	0x3e, r29	; 62
     69a:	0f be       	out	0x3f, r0	; 63
     69c:	cd bf       	out	0x3d, r28	; 61
     69e:	98 8b       	std	Y+16, r25	; 0x10
     6a0:	8f 87       	std	Y+15, r24	; 0x0f
     6a2:	69 8b       	std	Y+17, r22	; 0x11
     6a4:	89 89       	ldd	r24, Y+17	; 0x11
     6a6:	88 2f       	mov	r24, r24
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	82 30       	cpi	r24, 0x02	; 2
     6ac:	91 05       	cpc	r25, r1
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <CAN_receiveMessage+0x2c>
     6b0:	57 c0       	rjmp	.+174    	; 0x760 <CAN_receiveMessage+0xda>
     6b2:	83 30       	cpi	r24, 0x03	; 3
     6b4:	91 05       	cpc	r25, r1
     6b6:	21 f0       	breq	.+8      	; 0x6c0 <CAN_receiveMessage+0x3a>
     6b8:	81 30       	cpi	r24, 0x01	; 1
     6ba:	91 05       	cpc	r25, r1
     6bc:	09 f0       	breq	.+2      	; 0x6c0 <CAN_receiveMessage+0x3a>
     6be:	9f c0       	rjmp	.+318    	; 0x7fe <CAN_receiveMessage+0x178>
     6c0:	61 e6       	ldi	r22, 0x61	; 97
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	f4 d2       	rcall	.+1512   	; 0xcb0 <MCP2515_read>
     6c8:	88 2f       	mov	r24, r24
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	9d 83       	std	Y+5, r25	; 0x05
     6ce:	8c 83       	std	Y+4, r24	; 0x04
     6d0:	8c 81       	ldd	r24, Y+4	; 0x04
     6d2:	9d 81       	ldd	r25, Y+5	; 0x05
     6d4:	8c 01       	movw	r16, r24
     6d6:	00 0f       	add	r16, r16
     6d8:	11 1f       	adc	r17, r17
     6da:	00 0f       	add	r16, r16
     6dc:	11 1f       	adc	r17, r17
     6de:	00 0f       	add	r16, r16
     6e0:	11 1f       	adc	r17, r17
     6e2:	62 e6       	ldi	r22, 0x62	; 98
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	e3 d2       	rcall	.+1478   	; 0xcb0 <MCP2515_read>
     6ea:	82 95       	swap	r24
     6ec:	86 95       	lsr	r24
     6ee:	87 70       	andi	r24, 0x07	; 7
     6f0:	88 2f       	mov	r24, r24
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	80 2b       	or	r24, r16
     6f6:	91 2b       	or	r25, r17
     6f8:	9d 83       	std	Y+5, r25	; 0x05
     6fa:	8c 83       	std	Y+4, r24	; 0x04
     6fc:	65 e6       	ldi	r22, 0x65	; 101
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	d6 d2       	rcall	.+1452   	; 0xcb0 <MCP2515_read>
     704:	8e 83       	std	Y+6, r24	; 0x06
     706:	86 e6       	ldi	r24, 0x66	; 102
     708:	89 83       	std	Y+1, r24	; 0x01
     70a:	1a 82       	std	Y+2, r1	; 0x02
     70c:	14 c0       	rjmp	.+40     	; 0x736 <CAN_receiveMessage+0xb0>
     70e:	8a 81       	ldd	r24, Y+2	; 0x02
     710:	08 2f       	mov	r16, r24
     712:	10 e0       	ldi	r17, 0x00	; 0
     714:	69 81       	ldd	r22, Y+1	; 0x01
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	ca d2       	rcall	.+1428   	; 0xcb0 <MCP2515_read>
     71c:	28 2f       	mov	r18, r24
     71e:	ce 01       	movw	r24, r28
     720:	07 96       	adiw	r24, 0x07	; 7
     722:	80 0f       	add	r24, r16
     724:	91 1f       	adc	r25, r17
     726:	fc 01       	movw	r30, r24
     728:	20 83       	st	Z, r18
     72a:	89 81       	ldd	r24, Y+1	; 0x01
     72c:	8f 5f       	subi	r24, 0xFF	; 255
     72e:	89 83       	std	Y+1, r24	; 0x01
     730:	8a 81       	ldd	r24, Y+2	; 0x02
     732:	8f 5f       	subi	r24, 0xFF	; 255
     734:	8a 83       	std	Y+2, r24	; 0x02
     736:	9e 81       	ldd	r25, Y+6	; 0x06
     738:	8a 81       	ldd	r24, Y+2	; 0x02
     73a:	89 17       	cp	r24, r25
     73c:	40 f3       	brcs	.-48     	; 0x70e <CAN_receiveMessage+0x88>
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	41 e0       	ldi	r20, 0x01	; 1
     742:	6c e2       	ldi	r22, 0x2C	; 44
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	e9 d2       	rcall	.+1490   	; 0xd1c <MCP2515_bitModify>
     74a:	8f 85       	ldd	r24, Y+15	; 0x0f
     74c:	98 89       	ldd	r25, Y+16	; 0x10
     74e:	2b e0       	ldi	r18, 0x0B	; 11
     750:	fe 01       	movw	r30, r28
     752:	34 96       	adiw	r30, 0x04	; 4
     754:	dc 01       	movw	r26, r24
     756:	01 90       	ld	r0, Z+
     758:	0d 92       	st	X+, r0
     75a:	2a 95       	dec	r18
     75c:	e1 f7       	brne	.-8      	; 0x756 <CAN_receiveMessage+0xd0>
     75e:	4f c0       	rjmp	.+158    	; 0x7fe <CAN_receiveMessage+0x178>
     760:	61 e7       	ldi	r22, 0x71	; 113
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	a4 d2       	rcall	.+1352   	; 0xcb0 <MCP2515_read>
     768:	88 2f       	mov	r24, r24
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	9d 83       	std	Y+5, r25	; 0x05
     76e:	8c 83       	std	Y+4, r24	; 0x04
     770:	8c 81       	ldd	r24, Y+4	; 0x04
     772:	9d 81       	ldd	r25, Y+5	; 0x05
     774:	8c 01       	movw	r16, r24
     776:	00 0f       	add	r16, r16
     778:	11 1f       	adc	r17, r17
     77a:	00 0f       	add	r16, r16
     77c:	11 1f       	adc	r17, r17
     77e:	00 0f       	add	r16, r16
     780:	11 1f       	adc	r17, r17
     782:	62 e7       	ldi	r22, 0x72	; 114
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	93 d2       	rcall	.+1318   	; 0xcb0 <MCP2515_read>
     78a:	82 95       	swap	r24
     78c:	86 95       	lsr	r24
     78e:	87 70       	andi	r24, 0x07	; 7
     790:	88 2f       	mov	r24, r24
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	80 2b       	or	r24, r16
     796:	91 2b       	or	r25, r17
     798:	9d 83       	std	Y+5, r25	; 0x05
     79a:	8c 83       	std	Y+4, r24	; 0x04
     79c:	65 e7       	ldi	r22, 0x75	; 117
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	86 d2       	rcall	.+1292   	; 0xcb0 <MCP2515_read>
     7a4:	8e 83       	std	Y+6, r24	; 0x06
     7a6:	86 e7       	ldi	r24, 0x76	; 118
     7a8:	89 83       	std	Y+1, r24	; 0x01
     7aa:	1b 82       	std	Y+3, r1	; 0x03
     7ac:	14 c0       	rjmp	.+40     	; 0x7d6 <CAN_receiveMessage+0x150>
     7ae:	8b 81       	ldd	r24, Y+3	; 0x03
     7b0:	08 2f       	mov	r16, r24
     7b2:	10 e0       	ldi	r17, 0x00	; 0
     7b4:	69 81       	ldd	r22, Y+1	; 0x01
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	7a d2       	rcall	.+1268   	; 0xcb0 <MCP2515_read>
     7bc:	28 2f       	mov	r18, r24
     7be:	ce 01       	movw	r24, r28
     7c0:	07 96       	adiw	r24, 0x07	; 7
     7c2:	80 0f       	add	r24, r16
     7c4:	91 1f       	adc	r25, r17
     7c6:	fc 01       	movw	r30, r24
     7c8:	20 83       	st	Z, r18
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	8f 5f       	subi	r24, 0xFF	; 255
     7ce:	89 83       	std	Y+1, r24	; 0x01
     7d0:	8b 81       	ldd	r24, Y+3	; 0x03
     7d2:	8f 5f       	subi	r24, 0xFF	; 255
     7d4:	8b 83       	std	Y+3, r24	; 0x03
     7d6:	9e 81       	ldd	r25, Y+6	; 0x06
     7d8:	8b 81       	ldd	r24, Y+3	; 0x03
     7da:	89 17       	cp	r24, r25
     7dc:	40 f3       	brcs	.-48     	; 0x7ae <CAN_receiveMessage+0x128>
     7de:	20 e0       	ldi	r18, 0x00	; 0
     7e0:	42 e0       	ldi	r20, 0x02	; 2
     7e2:	6c e2       	ldi	r22, 0x2C	; 44
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	99 d2       	rcall	.+1330   	; 0xd1c <MCP2515_bitModify>
     7ea:	8f 85       	ldd	r24, Y+15	; 0x0f
     7ec:	98 89       	ldd	r25, Y+16	; 0x10
     7ee:	2b e0       	ldi	r18, 0x0B	; 11
     7f0:	fe 01       	movw	r30, r28
     7f2:	34 96       	adiw	r30, 0x04	; 4
     7f4:	dc 01       	movw	r26, r24
     7f6:	01 90       	ld	r0, Z+
     7f8:	0d 92       	st	X+, r0
     7fa:	2a 95       	dec	r18
     7fc:	e1 f7       	brne	.-8      	; 0x7f6 <CAN_receiveMessage+0x170>
     7fe:	8f 85       	ldd	r24, Y+15	; 0x0f
     800:	98 89       	ldd	r25, Y+16	; 0x10
     802:	61 96       	adiw	r28, 0x11	; 17
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	de bf       	out	0x3e, r29	; 62
     80a:	0f be       	out	0x3f, r0	; 63
     80c:	cd bf       	out	0x3d, r28	; 61
     80e:	df 91       	pop	r29
     810:	cf 91       	pop	r28
     812:	1f 91       	pop	r17
     814:	0f 91       	pop	r16
     816:	08 95       	ret

00000818 <CAN_printMessage>:
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
     81c:	00 d0       	rcall	.+0      	; 0x81e <CAN_printMessage+0x6>
     81e:	1f 92       	push	r1
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62
     824:	9b 83       	std	Y+3, r25	; 0x03
     826:	8a 83       	std	Y+2, r24	; 0x02
     828:	8a 81       	ldd	r24, Y+2	; 0x02
     82a:	9b 81       	ldd	r25, Y+3	; 0x03
     82c:	fc 01       	movw	r30, r24
     82e:	82 81       	ldd	r24, Z+2	; 0x02
     830:	28 2f       	mov	r18, r24
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	8a 81       	ldd	r24, Y+2	; 0x02
     836:	9b 81       	ldd	r25, Y+3	; 0x03
     838:	fc 01       	movw	r30, r24
     83a:	80 81       	ld	r24, Z
     83c:	91 81       	ldd	r25, Z+1	; 0x01
     83e:	43 2f       	mov	r20, r19
     840:	4f 93       	push	r20
     842:	2f 93       	push	r18
     844:	29 2f       	mov	r18, r25
     846:	2f 93       	push	r18
     848:	8f 93       	push	r24
     84a:	82 e1       	ldi	r24, 0x12	; 18
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	89 2f       	mov	r24, r25
     850:	8f 93       	push	r24
     852:	82 e1       	ldi	r24, 0x12	; 18
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	8f 93       	push	r24
     858:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <printf>
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	0f 90       	pop	r0
     866:	0f 90       	pop	r0
     868:	19 82       	std	Y+1, r1	; 0x01
     86a:	1f c0       	rjmp	.+62     	; 0x8aa <CAN_printMessage+0x92>
     86c:	89 81       	ldd	r24, Y+1	; 0x01
     86e:	88 2f       	mov	r24, r24
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	2a 81       	ldd	r18, Y+2	; 0x02
     874:	3b 81       	ldd	r19, Y+3	; 0x03
     876:	82 0f       	add	r24, r18
     878:	93 1f       	adc	r25, r19
     87a:	03 96       	adiw	r24, 0x03	; 3
     87c:	fc 01       	movw	r30, r24
     87e:	80 81       	ld	r24, Z
     880:	88 2f       	mov	r24, r24
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	29 2f       	mov	r18, r25
     886:	2f 93       	push	r18
     888:	8f 93       	push	r24
     88a:	8e e3       	ldi	r24, 0x3E	; 62
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	89 2f       	mov	r24, r25
     890:	8f 93       	push	r24
     892:	8e e3       	ldi	r24, 0x3E	; 62
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	8f 93       	push	r24
     898:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <printf>
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	8f 5f       	subi	r24, 0xFF	; 255
     8a8:	89 83       	std	Y+1, r24	; 0x01
     8aa:	8a 81       	ldd	r24, Y+2	; 0x02
     8ac:	9b 81       	ldd	r25, Y+3	; 0x03
     8ae:	fc 01       	movw	r30, r24
     8b0:	92 81       	ldd	r25, Z+2	; 0x02
     8b2:	89 81       	ldd	r24, Y+1	; 0x01
     8b4:	89 17       	cp	r24, r25
     8b6:	d0 f2       	brcs	.-76     	; 0x86c <CAN_printMessage+0x54>
     8b8:	8a e0       	ldi	r24, 0x0A	; 10
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <putchar>
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	df 91       	pop	r29
     8c8:	cf 91       	pop	r28
     8ca:	08 95       	ret

000008cc <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     8cc:	95 b7       	in	r25, 0x35	; 53
     8ce:	90 68       	ori	r25, 0x80	; 128
     8d0:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     8d2:	96 b7       	in	r25, 0x36	; 54
     8d4:	98 60       	ori	r25, 0x08	; 8
     8d6:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     8d8:	88 23       	and	r24, r24
     8da:	19 f0       	breq	.+6      	; 0x8e2 <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     8dc:	80 b7       	in	r24, 0x30	; 48
     8de:	80 62       	ori	r24, 0x20	; 32
     8e0:	80 bf       	out	0x30, r24	; 48
     8e2:	08 95       	ret

000008e4 <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     8e4:	fc 01       	movw	r30, r24
     8e6:	80 81       	ld	r24, Z
	return val;
}
     8e8:	08 95       	ret

000008ea <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     8ea:	fc 01       	movw	r30, r24
     8ec:	60 83       	st	Z, r22
     8ee:	08 95       	ret

000008f0 <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     8f0:	10 92 e0 02 	sts	0x02E0, r1
     8f4:	10 92 df 02 	sts	0x02DF, r1
	currentPosition.Y_abs = 0;
     8f8:	10 92 e2 02 	sts	0x02E2, r1
     8fc:	10 92 e1 02 	sts	0x02E1, r1
	currentPosition.X_per = 0;
     900:	10 92 e4 02 	sts	0x02E4, r1
     904:	10 92 e3 02 	sts	0x02E3, r1
	currentPosition.Y_per = 0;
     908:	10 92 e6 02 	sts	0x02E6, r1
     90c:	10 92 e5 02 	sts	0x02E5, r1
	currentDirection = CENTRE;
     910:	10 92 de 02 	sts	0x02DE, r1
     914:	08 95       	ret

00000916 <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     916:	cf 93       	push	r28
     918:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     91a:	76 d4       	rcall	.+2284   	; 0x1208 <OLED_clear>
     91c:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	80 e0       	ldi	r24, 0x00	; 0
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	54 d4       	rcall	.+2216   	; 0x11ce <OLED_goto>
     926:	85 e8       	ldi	r24, 0x85	; 133
     928:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     92a:	a7 d4       	rcall	.+2382   	; 0x127a <OLED_printString>
     92c:	2f ef       	ldi	r18, 0xFF	; 255
     92e:	8f ef       	ldi	r24, 0xFF	; 255
     930:	92 e0       	ldi	r25, 0x02	; 2
     932:	21 50       	subi	r18, 0x01	; 1
     934:	80 40       	sbci	r24, 0x00	; 0
     936:	90 40       	sbci	r25, 0x00	; 0
     938:	e1 f7       	brne	.-8      	; 0x932 <JOY_calibrate+0x1c>
     93a:	00 c0       	rjmp	.+0      	; 0x93c <JOY_calibrate+0x26>
     93c:	00 c0       	rjmp	.+0      	; 0x93e <JOY_calibrate+0x28>
     93e:	c4 e1       	ldi	r28, 0x14	; 20
     940:	d0 e0       	ldi	r29, 0x00	; 0
     942:	60 91 06 01 	lds	r22, 0x0106
     946:	70 91 07 01 	lds	r23, 0x0107
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     94a:	82 e0       	ldi	r24, 0x02	; 2
     94c:	89 d6       	rcall	.+3346   	; 0x1660 <ADC_request>
     94e:	2f ef       	ldi	r18, 0xFF	; 255
     950:	8f e1       	ldi	r24, 0x1F	; 31
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	21 50       	subi	r18, 0x01	; 1
     956:	80 40       	sbci	r24, 0x00	; 0
     958:	90 40       	sbci	r25, 0x00	; 0
     95a:	e1 f7       	brne	.-8      	; 0x954 <JOY_calibrate+0x3e>
     95c:	00 c0       	rjmp	.+0      	; 0x95e <JOY_calibrate+0x48>
     95e:	00 00       	nop
     960:	80 91 06 01 	lds	r24, 0x0106
     964:	90 91 07 01 	lds	r25, 0x0107
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     968:	9f d6       	rcall	.+3390   	; 0x16a8 <ADC_read>
     96a:	90 91 0d 01 	lds	r25, 0x010D
     96e:	98 17       	cp	r25, r24
     970:	10 f4       	brcc	.+4      	; 0x976 <JOY_calibrate+0x60>
     972:	80 93 0d 01 	sts	0x010D, r24
		
		if(temp > calR) {calR = temp;}
     976:	21 97       	sbiw	r28, 0x01	; 1
     978:	20 97       	sbiw	r28, 0x00	; 0
     97a:	19 f7       	brne	.-58     	; 0x942 <JOY_calibrate+0x2c>
     97c:	60 e0       	ldi	r22, 0x00	; 0
     97e:	70 e0       	ldi	r23, 0x00	; 0
     980:	81 e0       	ldi	r24, 0x01	; 1
	OLED_goto(0,0);
	OLED_printString("JOY RIGHT");
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	24 d4       	rcall	.+2120   	; 0x11ce <OLED_goto>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_goto(1,0);
     986:	8f e8       	ldi	r24, 0x8F	; 143
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	77 d4       	rcall	.+2286   	; 0x127a <OLED_printString>
     98c:	2f ef       	ldi	r18, 0xFF	; 255
     98e:	8f ef       	ldi	r24, 0xFF	; 255
     990:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("JOY LEFT");
     992:	21 50       	subi	r18, 0x01	; 1
     994:	80 40       	sbci	r24, 0x00	; 0
     996:	90 40       	sbci	r25, 0x00	; 0
     998:	e1 f7       	brne	.-8      	; 0x992 <JOY_calibrate+0x7c>
     99a:	00 c0       	rjmp	.+0      	; 0x99c <JOY_calibrate+0x86>
     99c:	00 c0       	rjmp	.+0      	; 0x99e <JOY_calibrate+0x88>
     99e:	c4 e1       	ldi	r28, 0x14	; 20
     9a0:	d0 e0       	ldi	r29, 0x00	; 0
     9a2:	60 91 06 01 	lds	r22, 0x0106
     9a6:	70 91 07 01 	lds	r23, 0x0107
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	59 d6       	rcall	.+3250   	; 0x1660 <ADC_request>
     9ae:	2f ef       	ldi	r18, 0xFF	; 255
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     9b0:	8f e1       	ldi	r24, 0x1F	; 31
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	21 50       	subi	r18, 0x01	; 1
     9b6:	80 40       	sbci	r24, 0x00	; 0
     9b8:	90 40       	sbci	r25, 0x00	; 0
     9ba:	e1 f7       	brne	.-8      	; 0x9b4 <JOY_calibrate+0x9e>
     9bc:	00 c0       	rjmp	.+0      	; 0x9be <JOY_calibrate+0xa8>
     9be:	00 00       	nop
     9c0:	80 91 06 01 	lds	r24, 0x0106
     9c4:	90 91 07 01 	lds	r25, 0x0107
     9c8:	6f d6       	rcall	.+3294   	; 0x16a8 <ADC_read>
     9ca:	90 91 0c 01 	lds	r25, 0x010C
     9ce:	89 17       	cp	r24, r25
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     9d0:	10 f4       	brcc	.+4      	; 0x9d6 <JOY_calibrate+0xc0>
     9d2:	80 93 0c 01 	sts	0x010C, r24
     9d6:	21 97       	sbiw	r28, 0x01	; 1
     9d8:	20 97       	sbiw	r28, 0x00	; 0
     9da:	19 f7       	brne	.-58     	; 0x9a2 <JOY_calibrate+0x8c>
		
		if(temp < calL) {calL = temp;}
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	82 e0       	ldi	r24, 0x02	; 2
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	f4 d3       	rcall	.+2024   	; 0x11ce <OLED_goto>
     9e6:	88 e9       	ldi	r24, 0x98	; 152
     9e8:	91 e0       	ldi	r25, 0x01	; 1
	OLED_goto(1,0);
	OLED_printString("JOY LEFT");
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     9ea:	47 d4       	rcall	.+2190   	; 0x127a <OLED_printString>
     9ec:	2f ef       	ldi	r18, 0xFF	; 255
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_goto(2,0);
     9ee:	8f ef       	ldi	r24, 0xFF	; 255
     9f0:	92 e0       	ldi	r25, 0x02	; 2
     9f2:	21 50       	subi	r18, 0x01	; 1
     9f4:	80 40       	sbci	r24, 0x00	; 0
     9f6:	90 40       	sbci	r25, 0x00	; 0
     9f8:	e1 f7       	brne	.-8      	; 0x9f2 <JOY_calibrate+0xdc>
	OLED_printString("JOY UP");
     9fa:	00 c0       	rjmp	.+0      	; 0x9fc <JOY_calibrate+0xe6>
     9fc:	00 c0       	rjmp	.+0      	; 0x9fe <JOY_calibrate+0xe8>
     9fe:	c4 e1       	ldi	r28, 0x14	; 20
     a00:	d0 e0       	ldi	r29, 0x00	; 0
     a02:	60 91 06 01 	lds	r22, 0x0106
     a06:	70 91 07 01 	lds	r23, 0x0107
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	29 d6       	rcall	.+3154   	; 0x1660 <ADC_request>
     a0e:	2f ef       	ldi	r18, 0xFF	; 255
     a10:	8f e1       	ldi	r24, 0x1F	; 31
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	21 50       	subi	r18, 0x01	; 1
     a16:	80 40       	sbci	r24, 0x00	; 0
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     a18:	90 40       	sbci	r25, 0x00	; 0
     a1a:	e1 f7       	brne	.-8      	; 0xa14 <JOY_calibrate+0xfe>
     a1c:	00 c0       	rjmp	.+0      	; 0xa1e <JOY_calibrate+0x108>
     a1e:	00 00       	nop
     a20:	80 91 06 01 	lds	r24, 0x0106
     a24:	90 91 07 01 	lds	r25, 0x0107
     a28:	3f d6       	rcall	.+3198   	; 0x16a8 <ADC_read>
     a2a:	90 91 0b 01 	lds	r25, 0x010B
     a2e:	98 17       	cp	r25, r24
     a30:	10 f4       	brcc	.+4      	; 0xa36 <JOY_calibrate+0x120>
     a32:	80 93 0b 01 	sts	0x010B, r24
     a36:	21 97       	sbiw	r28, 0x01	; 1
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     a38:	20 97       	sbiw	r28, 0x00	; 0
     a3a:	19 f7       	brne	.-58     	; 0xa02 <JOY_calibrate+0xec>
     a3c:	60 e0       	ldi	r22, 0x00	; 0
     a3e:	70 e0       	ldi	r23, 0x00	; 0
     a40:	83 e0       	ldi	r24, 0x03	; 3
     a42:	90 e0       	ldi	r25, 0x00	; 0
		
		if(temp > calUp) {calUp = temp;}
     a44:	c4 d3       	rcall	.+1928   	; 0x11ce <OLED_goto>
     a46:	8f e9       	ldi	r24, 0x9F	; 159
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	17 d4       	rcall	.+2094   	; 0x127a <OLED_printString>
     a4c:	2f ef       	ldi	r18, 0xFF	; 255
     a4e:	8f ef       	ldi	r24, 0xFF	; 255
     a50:	92 e0       	ldi	r25, 0x02	; 2
	OLED_goto(2,0);
	OLED_printString("JOY UP");
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     a52:	21 50       	subi	r18, 0x01	; 1
     a54:	80 40       	sbci	r24, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_goto(3,0);
     a56:	90 40       	sbci	r25, 0x00	; 0
     a58:	e1 f7       	brne	.-8      	; 0xa52 <JOY_calibrate+0x13c>
     a5a:	00 c0       	rjmp	.+0      	; 0xa5c <JOY_calibrate+0x146>
     a5c:	00 c0       	rjmp	.+0      	; 0xa5e <JOY_calibrate+0x148>
     a5e:	c4 e1       	ldi	r28, 0x14	; 20
     a60:	d0 e0       	ldi	r29, 0x00	; 0
	OLED_printString("JOY DOWN");
     a62:	60 91 06 01 	lds	r22, 0x0106
     a66:	70 91 07 01 	lds	r23, 0x0107
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	f9 d5       	rcall	.+3058   	; 0x1660 <ADC_request>
     a6e:	2f ef       	ldi	r18, 0xFF	; 255
     a70:	8f e1       	ldi	r24, 0x1F	; 31
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	21 50       	subi	r18, 0x01	; 1
     a76:	80 40       	sbci	r24, 0x00	; 0
     a78:	90 40       	sbci	r25, 0x00	; 0
     a7a:	e1 f7       	brne	.-8      	; 0xa74 <JOY_calibrate+0x15e>
     a7c:	00 c0       	rjmp	.+0      	; 0xa7e <JOY_calibrate+0x168>
     a7e:	00 00       	nop
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     a80:	80 91 06 01 	lds	r24, 0x0106
     a84:	90 91 07 01 	lds	r25, 0x0107
     a88:	0f d6       	rcall	.+3102   	; 0x16a8 <ADC_read>
     a8a:	90 91 0a 01 	lds	r25, 0x010A
     a8e:	89 17       	cp	r24, r25
     a90:	10 f4       	brcc	.+4      	; 0xa96 <JOY_calibrate+0x180>
     a92:	80 93 0a 01 	sts	0x010A, r24
     a96:	21 97       	sbiw	r28, 0x01	; 1
     a98:	20 97       	sbiw	r28, 0x00	; 0
     a9a:	19 f7       	brne	.-58     	; 0xa62 <JOY_calibrate+0x14c>
     a9c:	20 91 0b 01 	lds	r18, 0x010B
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     aa0:	80 91 0a 01 	lds	r24, 0x010A
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	28 1b       	sub	r18, r24
     aa8:	31 09       	sbc	r19, r1
     aaa:	c9 01       	movw	r24, r18
		
		if(temp < calDown) {calDown = temp;}
     aac:	99 23       	and	r25, r25
     aae:	0c f4       	brge	.+2      	; 0xab2 <JOY_calibrate+0x19c>
     ab0:	01 96       	adiw	r24, 0x01	; 1
     ab2:	95 95       	asr	r25
     ab4:	87 95       	ror	r24
     ab6:	80 93 09 01 	sts	0x0109, r24
	OLED_goto(3,0);
	OLED_printString("JOY DOWN");
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     aba:	20 91 0d 01 	lds	r18, 0x010D
	}
	
	
	//printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
	
	meanVert = (calUp - calDown)/2;
     abe:	80 91 0c 01 	lds	r24, 0x010C
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	28 1b       	sub	r18, r24
     ac6:	31 09       	sbc	r19, r1
     ac8:	c9 01       	movw	r24, r18
     aca:	99 23       	and	r25, r25
     acc:	0c f4       	brge	.+2      	; 0xad0 <JOY_calibrate+0x1ba>
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	95 95       	asr	r25
     ad2:	87 95       	ror	r24
     ad4:	80 93 08 01 	sts	0x0108, r24
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	70 e0       	ldi	r23, 0x00	; 0
	meanHor = (calR - calL)/2;
     adc:	84 e0       	ldi	r24, 0x04	; 4
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	76 d3       	rcall	.+1772   	; 0x11ce <OLED_goto>
     ae2:	88 ea       	ldi	r24, 0xA8	; 168
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	c9 d3       	rcall	.+1938   	; 0x127a <OLED_printString>
     ae8:	2f ef       	ldi	r18, 0xFF	; 255
     aea:	8f ef       	ldi	r24, 0xFF	; 255
     aec:	9e e0       	ldi	r25, 0x0E	; 14
     aee:	21 50       	subi	r18, 0x01	; 1
     af0:	80 40       	sbci	r24, 0x00	; 0
     af2:	90 40       	sbci	r25, 0x00	; 0
     af4:	e1 f7       	brne	.-8      	; 0xaee <JOY_calibrate+0x1d8>
     af6:	00 c0       	rjmp	.+0      	; 0xaf8 <JOY_calibrate+0x1e2>
     af8:	00 00       	nop
	
	OLED_goto(4,0);
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	08 95       	ret

00000b00 <JOY_requestCurrentPosition>:
     b00:	88 37       	cpi	r24, 0x78	; 120
     b02:	39 f4       	brne	.+14     	; 0xb12 <JOY_requestCurrentPosition+0x12>
     b04:	60 91 06 01 	lds	r22, 0x0106
	OLED_printString("CALIB DONE");
     b08:	70 91 07 01 	lds	r23, 0x0107
     b0c:	82 e0       	ldi	r24, 0x02	; 2
     b0e:	a8 c5       	rjmp	.+2896   	; 0x1660 <ADC_request>
     b10:	08 95       	ret
     b12:	89 37       	cpi	r24, 0x79	; 121
     b14:	31 f4       	brne	.+12     	; 0xb22 <JOY_requestCurrentPosition+0x22>
     b16:	60 91 06 01 	lds	r22, 0x0106
     b1a:	70 91 07 01 	lds	r23, 0x0107
     b1e:	81 e0       	ldi	r24, 0x01	; 1
	//printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
	_delay_ms(1000);
}
     b20:	9f c5       	rjmp	.+2878   	; 0x1660 <ADC_request>
     b22:	08 95       	ret

00000b24 <JOY_updatePosition>:
     b24:	88 37       	cpi	r24, 0x78	; 120
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
	{
		ADC_request(Y_channel, adc_ext_ram);
     b26:	f9 f4       	brne	.+62     	; 0xb66 <JOY_updatePosition+0x42>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     b28:	80 91 06 01 	lds	r24, 0x0106
     b2c:	90 91 07 01 	lds	r25, 0x0107
     b30:	bb d5       	rcall	.+2934   	; 0x16a8 <ADC_read>
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	90 93 e0 02 	sts	0x02E0, r25
     b38:	80 93 df 02 	sts	0x02DF, r24
     b3c:	20 91 08 01 	lds	r18, 0x0108
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     b40:	60 91 08 01 	lds	r22, 0x0108
     b44:	ac 01       	movw	r20, r24
     b46:	42 1b       	sub	r20, r18
     b48:	51 09       	sbc	r21, r1
     b4a:	9a 01       	movw	r18, r20
     b4c:	44 e6       	ldi	r20, 0x64	; 100
     b4e:	42 9f       	mul	r20, r18
     b50:	c0 01       	movw	r24, r0
     b52:	43 9f       	mul	r20, r19
     b54:	90 0d       	add	r25, r0
     b56:	11 24       	eor	r1, r1
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	a8 d5       	rcall	.+2896   	; 0x16ac <__divmodhi4>
     b5c:	70 93 e4 02 	sts	0x02E4, r23
     b60:	60 93 e3 02 	sts	0x02E3, r22
     b64:	08 95       	ret
     b66:	89 37       	cpi	r24, 0x79	; 121
     b68:	f1 f4       	brne	.+60     	; 0xba6 <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     b6a:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     b6e:	90 91 07 01 	lds	r25, 0x0107
     b72:	9a d5       	rcall	.+2868   	; 0x16a8 <ADC_read>
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	90 93 e2 02 	sts	0x02E2, r25
     b7a:	80 93 e1 02 	sts	0x02E1, r24
     b7e:	20 91 09 01 	lds	r18, 0x0109
     b82:	60 91 09 01 	lds	r22, 0x0109
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     b86:	ac 01       	movw	r20, r24
     b88:	42 1b       	sub	r20, r18
     b8a:	51 09       	sbc	r21, r1
     b8c:	9a 01       	movw	r18, r20
     b8e:	44 e6       	ldi	r20, 0x64	; 100
     b90:	42 9f       	mul	r20, r18
     b92:	c0 01       	movw	r24, r0
     b94:	43 9f       	mul	r20, r19
     b96:	90 0d       	add	r25, r0
     b98:	11 24       	eor	r1, r1
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	87 d5       	rcall	.+2830   	; 0x16ac <__divmodhi4>
     b9e:	70 93 e6 02 	sts	0x02E6, r23
     ba2:	60 93 e5 02 	sts	0x02E5, r22
     ba6:	08 95       	ret

00000ba8 <JOY_calculateDirection>:
     ba8:	80 91 e3 02 	lds	r24, 0x02E3
     bac:	90 91 e4 02 	lds	r25, 0x02E4
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     bb0:	8b 35       	cpi	r24, 0x5B	; 91
     bb2:	91 05       	cpc	r25, r1
     bb4:	24 f0       	brlt	.+8      	; 0xbbe <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     bb6:	83 e0       	ldi	r24, 0x03	; 3
     bb8:	80 93 de 02 	sts	0x02DE, r24
     bbc:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     bbe:	86 3a       	cpi	r24, 0xA6	; 166
     bc0:	9f 4f       	sbci	r25, 0xFF	; 255
     bc2:	24 f4       	brge	.+8      	; 0xbcc <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     bc4:	84 e0       	ldi	r24, 0x04	; 4
     bc6:	80 93 de 02 	sts	0x02DE, r24
     bca:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     bcc:	80 91 e5 02 	lds	r24, 0x02E5
     bd0:	90 91 e6 02 	lds	r25, 0x02E6
     bd4:	8b 35       	cpi	r24, 0x5B	; 91
     bd6:	91 05       	cpc	r25, r1
     bd8:	24 f0       	brlt	.+8      	; 0xbe2 <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	80 93 de 02 	sts	0x02DE, r24
     be0:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     be2:	86 3a       	cpi	r24, 0xA6	; 166
     be4:	9f 4f       	sbci	r25, 0xFF	; 255
     be6:	24 f4       	brge	.+8      	; 0xbf0 <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     be8:	82 e0       	ldi	r24, 0x02	; 2
     bea:	80 93 de 02 	sts	0x02DE, r24
     bee:	08 95       	ret
	else{currentDirection = CENTRE;}
     bf0:	10 92 de 02 	sts	0x02DE, r1
     bf4:	08 95       	ret

00000bf6 <JOY_getPosition>:

//------------------------------------------------------------------------------
// This function returns the current position of the Joystick.
// It is a struct with the four parameters X_abs, Y_abs, X_per and Y_per
JOY_position_t JOY_getPosition()
{
     bf6:	cf 93       	push	r28
     bf8:	df 93       	push	r29
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	28 97       	sbiw	r28, 0x08	; 8
     c00:	0f b6       	in	r0, 0x3f	; 63
     c02:	f8 94       	cli
     c04:	de bf       	out	0x3e, r29	; 62
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	cd bf       	out	0x3d, r28	; 61
	JOY_requestCurrentPosition('x');
     c0a:	88 e7       	ldi	r24, 0x78	; 120
     c0c:	79 df       	rcall	.-270    	; 0xb00 <JOY_requestCurrentPosition>
     c0e:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c10:	8a 95       	dec	r24
     c12:	f1 f7       	brne	.-4      	; 0xc10 <JOY_getPosition+0x1a>
     c14:	00 00       	nop
     c16:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     c18:	85 df       	rcall	.-246    	; 0xb24 <JOY_updatePosition>
     c1a:	89 e7       	ldi	r24, 0x79	; 121
     c1c:	71 df       	rcall	.-286    	; 0xb00 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     c1e:	82 e6       	ldi	r24, 0x62	; 98
     c20:	8a 95       	dec	r24
     c22:	f1 f7       	brne	.-4      	; 0xc20 <JOY_getPosition+0x2a>
     c24:	00 00       	nop
     c26:	89 e7       	ldi	r24, 0x79	; 121
     c28:	7d df       	rcall	.-262    	; 0xb24 <JOY_updatePosition>
     c2a:	88 e0       	ldi	r24, 0x08	; 8
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     c2c:	ef ed       	ldi	r30, 0xDF	; 223
     c2e:	f2 e0       	ldi	r31, 0x02	; 2
     c30:	de 01       	movw	r26, r28
	return currentPosition;
     c32:	11 96       	adiw	r26, 0x01	; 1
     c34:	01 90       	ld	r0, Z+
     c36:	0d 92       	st	X+, r0
     c38:	8a 95       	dec	r24
     c3a:	e1 f7       	brne	.-8      	; 0xc34 <JOY_getPosition+0x3e>
     c3c:	29 81       	ldd	r18, Y+1	; 0x01
     c3e:	3a 81       	ldd	r19, Y+2	; 0x02
     c40:	4b 81       	ldd	r20, Y+3	; 0x03
     c42:	5c 81       	ldd	r21, Y+4	; 0x04
     c44:	6d 81       	ldd	r22, Y+5	; 0x05
     c46:	7e 81       	ldd	r23, Y+6	; 0x06
     c48:	8f 81       	ldd	r24, Y+7	; 0x07
     c4a:	98 85       	ldd	r25, Y+8	; 0x08
     c4c:	28 96       	adiw	r28, 0x08	; 8
     c4e:	0f b6       	in	r0, 0x3f	; 63
}
     c50:	f8 94       	cli
     c52:	de bf       	out	0x3e, r29	; 62
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	cd bf       	out	0x3d, r28	; 61
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	08 95       	ret

00000c5e <JOY_getDirection>:
     c5e:	88 e7       	ldi	r24, 0x78	; 120
     c60:	4f df       	rcall	.-354    	; 0xb00 <JOY_requestCurrentPosition>
     c62:	82 e6       	ldi	r24, 0x62	; 98
     c64:	8a 95       	dec	r24
     c66:	f1 f7       	brne	.-4      	; 0xc64 <JOY_getDirection+0x6>
     c68:	00 00       	nop
     c6a:	88 e7       	ldi	r24, 0x78	; 120
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     c6c:	5b df       	rcall	.-330    	; 0xb24 <JOY_updatePosition>
     c6e:	89 e7       	ldi	r24, 0x79	; 121
     c70:	47 df       	rcall	.-370    	; 0xb00 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     c72:	82 e6       	ldi	r24, 0x62	; 98
     c74:	8a 95       	dec	r24
     c76:	f1 f7       	brne	.-4      	; 0xc74 <JOY_getDirection+0x16>
     c78:	00 00       	nop
     c7a:	89 e7       	ldi	r24, 0x79	; 121
     c7c:	53 df       	rcall	.-346    	; 0xb24 <JOY_updatePosition>
     c7e:	94 df       	rcall	.-216    	; 0xba8 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     c80:	80 91 de 02 	lds	r24, 0x02DE
     c84:	08 95       	ret

00000c86 <MCP2515_reset>:
	//printf("finished MCP2515_init\n");
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
     c86:	cf 93       	push	r28
     c88:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
     c8a:	c1 d4       	rcall	.+2434   	; 0x160e <SPI_activateSlave>
     c8c:	80 ec       	ldi	r24, 0xC0	; 192
	SPI_send(MCP_RESET);
     c8e:	b5 d4       	rcall	.+2410   	; 0x15fa <SPI_send>
     c90:	8c ec       	ldi	r24, 0xCC	; 204
     c92:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <MCP2515_reset+0xe>
     c98:	00 c0       	rjmp	.+0      	; 0xc9a <MCP2515_reset+0x14>
     c9a:	00 00       	nop
     c9c:	8c 2f       	mov	r24, r28
     c9e:	bb d4       	rcall	.+2422   	; 0x1616 <SPI_deactivateSlave>
	_delay_ms(1);
	SPI_deactivateSlave(slave);
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	9f e2       	ldi	r25, 0x2F	; 47
     ca4:	01 97       	sbiw	r24, 0x01	; 1
     ca6:	f1 f7       	brne	.-4      	; 0xca4 <MCP2515_reset+0x1e>
     ca8:	00 c0       	rjmp	.+0      	; 0xcaa <MCP2515_reset+0x24>
     caa:	00 00       	nop
     cac:	cf 91       	pop	r28
     cae:	08 95       	ret

00000cb0 <MCP2515_read>:
     cb0:	cf 93       	push	r28
	_delay_ms(10);
}
     cb2:	df 93       	push	r29
     cb4:	c8 2f       	mov	r28, r24

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
     cb6:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
     cb8:	aa d4       	rcall	.+2388   	; 0x160e <SPI_activateSlave>
     cba:	83 e0       	ldi	r24, 0x03	; 3
	SPI_send(MCP_READ);
     cbc:	9e d4       	rcall	.+2364   	; 0x15fa <SPI_send>
     cbe:	8c ec       	ldi	r24, 0xCC	; 204
     cc0:	94 e0       	ldi	r25, 0x04	; 4
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	f1 f7       	brne	.-4      	; 0xcc2 <MCP2515_read+0x12>
     cc6:	00 c0       	rjmp	.+0      	; 0xcc8 <MCP2515_read+0x18>
     cc8:	00 00       	nop
     cca:	8d 2f       	mov	r24, r29
     ccc:	96 d4       	rcall	.+2348   	; 0x15fa <SPI_send>
	_delay_ms(1);
	SPI_send(address);
     cce:	99 d4       	rcall	.+2354   	; 0x1602 <SPI_receive>
     cd0:	d8 2f       	mov	r29, r24
     cd2:	8c 2f       	mov	r24, r28
	
	uint8_t result;
	result = SPI_receive();
     cd4:	a0 d4       	rcall	.+2368   	; 0x1616 <SPI_deactivateSlave>
     cd6:	8d 2f       	mov	r24, r29
     cd8:	df 91       	pop	r29
	
	SPI_deactivateSlave(slave);
     cda:	cf 91       	pop	r28
     cdc:	08 95       	ret

00000cde <MCP2515_init>:
     cde:	80 e0       	ldi	r24, 0x00	; 0
	return result;
}
     ce0:	d2 df       	rcall	.-92     	; 0xc86 <MCP2515_reset>
     ce2:	6e e0       	ldi	r22, 0x0E	; 14
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	e4 df       	rcall	.-56     	; 0xcb0 <MCP2515_read>
uint8_t MCP2515_init()
{
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
	// Self-test
	uint8_t value;
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
     ce8:	98 2f       	mov	r25, r24
     cea:	90 7e       	andi	r25, 0xE0	; 224
	//printf("CANSTAT: %#x\n", value);
	if((value & MODE_MASK) != MODE_CONFIG) 
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	90 38       	cpi	r25, 0x80	; 128
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <MCP2515_init+0x16>
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	08 95       	ret

00000cf6 <MCP2515_write>:
     cf6:	1f 93       	push	r17
		return 1;
	}
	//
	//printf("finished MCP2515_init\n");
	return 0;
}
     cf8:	cf 93       	push	r28
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_write(SPI_SLAVES slave, uint8_t address, uint8_t data)
{
     cfa:	df 93       	push	r29
     cfc:	c8 2f       	mov	r28, r24
     cfe:	16 2f       	mov	r17, r22
     d00:	d4 2f       	mov	r29, r20
	SPI_activateSlave(slave);
     d02:	85 d4       	rcall	.+2314   	; 0x160e <SPI_activateSlave>
     d04:	82 e0       	ldi	r24, 0x02	; 2
	SPI_send(MCP_WRITE);
     d06:	79 d4       	rcall	.+2290   	; 0x15fa <SPI_send>
     d08:	81 2f       	mov	r24, r17
     d0a:	77 d4       	rcall	.+2286   	; 0x15fa <SPI_send>
	SPI_send(address);
     d0c:	8d 2f       	mov	r24, r29
     d0e:	75 d4       	rcall	.+2282   	; 0x15fa <SPI_send>
     d10:	8c 2f       	mov	r24, r28
	SPI_send(data);
     d12:	81 d4       	rcall	.+2306   	; 0x1616 <SPI_deactivateSlave>
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
	SPI_deactivateSlave(slave);
     d18:	1f 91       	pop	r17
     d1a:	08 95       	ret

00000d1c <MCP2515_bitModify>:
     d1c:	0f 93       	push	r16
}
     d1e:	1f 93       	push	r17
     d20:	cf 93       	push	r28
     d22:	df 93       	push	r29
     d24:	c8 2f       	mov	r28, r24
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_bitModify(SPI_SLAVES slave, uint8_t register2change, uint8_t mask, uint8_t newValue)
{
     d26:	06 2f       	mov	r16, r22
     d28:	14 2f       	mov	r17, r20
     d2a:	d2 2f       	mov	r29, r18
	SPI_activateSlave(slave);
     d2c:	70 d4       	rcall	.+2272   	; 0x160e <SPI_activateSlave>
     d2e:	85 e0       	ldi	r24, 0x05	; 5
	
	SPI_send(MCP_BITMOD);
     d30:	64 d4       	rcall	.+2248   	; 0x15fa <SPI_send>
     d32:	80 2f       	mov	r24, r16
     d34:	62 d4       	rcall	.+2244   	; 0x15fa <SPI_send>
	SPI_send(register2change);
     d36:	81 2f       	mov	r24, r17
     d38:	60 d4       	rcall	.+2240   	; 0x15fa <SPI_send>
     d3a:	8d 2f       	mov	r24, r29
	SPI_send(mask);
     d3c:	5e d4       	rcall	.+2236   	; 0x15fa <SPI_send>
     d3e:	8c 2f       	mov	r24, r28
     d40:	6a d4       	rcall	.+2260   	; 0x1616 <SPI_deactivateSlave>
	SPI_send(newValue);
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
	
	SPI_deactivateSlave(slave);
     d48:	0f 91       	pop	r16
     d4a:	08 95       	ret

00000d4c <startGame>:

static int menuFrameOffset = 10; //Columns from left frame border
//******************************************************************************************

void startGame()
{
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
	OLED_clear();
     d50:	5b d2       	rcall	.+1206   	; 0x1208 <OLED_clear>
     d52:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     d54:	70 e0       	ldi	r23, 0x00	; 0
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	39 d2       	rcall	.+1138   	; 0x11ce <OLED_goto>
     d5c:	83 eb       	ldi	r24, 0xB3	; 179
     d5e:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("START");
     d60:	8c d2       	rcall	.+1304   	; 0x127a <OLED_printString>
     d62:	60 e0       	ldi	r22, 0x00	; 0
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_goto(3,0);
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	31 d2       	rcall	.+1122   	; 0x11ce <OLED_goto>
     d6c:	ce e0       	ldi	r28, 0x0E	; 14
     d6e:	d0 e0       	ldi	r29, 0x00	; 0
     d70:	89 eb       	ldi	r24, 0xB9	; 185
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	82 d2       	rcall	.+1284   	; 0x127a <OLED_printString>
     d76:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     d78:	8f e7       	ldi	r24, 0x7F	; 127
     d7a:	97 e0       	ldi	r25, 0x07	; 7
     d7c:	21 50       	subi	r18, 0x01	; 1
     d7e:	80 40       	sbci	r24, 0x00	; 0
     d80:	90 40       	sbci	r25, 0x00	; 0
     d82:	e1 f7       	brne	.-8      	; 0xd7c <startGame+0x30>
     d84:	00 c0       	rjmp	.+0      	; 0xd86 <startGame+0x3a>
     d86:	00 00       	nop
     d88:	21 97       	sbiw	r28, 0x01	; 1
     d8a:	20 97       	sbiw	r28, 0x00	; 0
     d8c:	89 f7       	brne	.-30     	; 0xd70 <startGame+0x24>
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	70 e0       	ldi	r23, 0x00	; 0
     d92:	85 e0       	ldi	r24, 0x05	; 5
	OLED_goto(0,0);
	OLED_printString("START");
	
	OLED_goto(3,0);
	
	for(int i = 14; i > 0; i--)
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	1b d2       	rcall	.+1078   	; 0x11ce <OLED_goto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_goto(5,0);
     d98:	8b eb       	ldi	r24, 0xBB	; 187
     d9a:	91 e0       	ldi	r25, 0x01	; 1
     d9c:	6e d2       	rcall	.+1244   	; 0x127a <OLED_printString>
     d9e:	2f ef       	ldi	r18, 0xFF	; 255
     da0:	8f ef       	ldi	r24, 0xFF	; 255
     da2:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     da4:	21 50       	subi	r18, 0x01	; 1
     da6:	80 40       	sbci	r24, 0x00	; 0
     da8:	90 40       	sbci	r25, 0x00	; 0
     daa:	e1 f7       	brne	.-8      	; 0xda4 <startGame+0x58>
     dac:	00 c0       	rjmp	.+0      	; 0xdae <startGame+0x62>
     dae:	00 c0       	rjmp	.+0      	; 0xdb0 <startGame+0x64>
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	08 95       	ret

00000db6 <MENU_addMenuItem>:
     db6:	cf 92       	push	r12
     db8:	df 92       	push	r13
     dba:	ef 92       	push	r14
     dbc:	ff 92       	push	r15
	_delay_ms(3000);
}
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     dc4:	df 93       	push	r29
     dc6:	8c 01       	movw	r16, r24
     dc8:	7b 01       	movw	r14, r22
     dca:	6a 01       	movw	r12, r20
     dcc:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     dce:	80 91 ea 02 	lds	r24, 0x02EA
     dd2:	90 91 eb 02 	lds	r25, 0x02EB
     dd6:	89 2b       	or	r24, r25
     dd8:	19 f0       	breq	.+6      	; 0xde0 <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     dda:	84 ec       	ldi	r24, 0xC4	; 196
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	14 d6       	rcall	.+3112   	; 0x1a08 <puts>
     de0:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	8a d4       	rcall	.+2324   	; 0x16fa <malloc>
     de6:	fc 01       	movw	r30, r24
     de8:	90 93 eb 02 	sts	0x02EB, r25
     dec:	80 93 ea 02 	sts	0x02EA, r24
     df0:	f3 82       	std	Z+3, r15	; 0x03
     df2:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     df4:	11 83       	std	Z+1, r17	; 0x01
     df6:	00 83       	st	Z, r16
	currItem->name = name;
     df8:	cd 2b       	or	r28, r29
     dfa:	39 f0       	breq	.+14     	; 0xe0a <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     dfc:	d5 82       	std	Z+5, r13	; 0x05
     dfe:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     e04:	97 83       	std	Z+7, r25	; 0x07
     e06:	86 83       	std	Z+6, r24	; 0x06
     e08:	04 c0       	rjmp	.+8      	; 0xe12 <MENU_addMenuItem+0x5c>
     e0a:	15 82       	std	Z+5, r1	; 0x05
     e0c:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     e0e:	17 82       	std	Z+7, r1	; 0x07
     e10:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
	}
}
     e16:	1f 91       	pop	r17
     e18:	0f 91       	pop	r16
     e1a:	ff 90       	pop	r15
     e1c:	ef 90       	pop	r14
     e1e:	df 90       	pop	r13
     e20:	cf 90       	pop	r12
     e22:	08 95       	ret

00000e24 <MENU_buildMenus>:
     e24:	cf 93       	push	r28
     e26:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     e28:	86 e1       	ldi	r24, 0x16	; 22
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	66 d4       	rcall	.+2252   	; 0x16fa <malloc>
     e2e:	ec 01       	movw	r28, r24
     e30:	90 93 f1 02 	sts	0x02F1, r25
     e34:	80 93 f0 02 	sts	0x02F0, r24
     e38:	8a ed       	ldi	r24, 0xDA	; 218
	mainMenu->menuName = "MainMenu";
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	99 83       	std	Y+1, r25	; 0x01
     e3e:	88 83       	st	Y, r24
     e40:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     e42:	1c 8a       	std	Y+20, r1	; 0x14
     e44:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	9b 83       	std	Y+3, r25	; 0x03
     e4a:	8a 83       	std	Y+2, r24	; 0x02
     e4c:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	54 d4       	rcall	.+2216   	; 0x16fa <malloc>
     e52:	fc 01       	movw	r30, r24
     e54:	90 93 ef 02 	sts	0x02EF, r25
     e58:	80 93 ee 02 	sts	0x02EE, r24
     e5c:	83 ee       	ldi	r24, 0xE3	; 227
     e5e:	91 e0       	ldi	r25, 0x01	; 1
	difficultyMenu->menuName = "DifficultyMenu";
     e60:	91 83       	std	Z+1, r25	; 0x01
     e62:	80 83       	st	Z, r24
     e64:	d5 8b       	std	Z+21, r29	; 0x15
     e66:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     e68:	83 e0       	ldi	r24, 0x03	; 3
     e6a:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     e6c:	93 83       	std	Z+3, r25	; 0x03
     e6e:	82 83       	std	Z+2, r24	; 0x02
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	be 01       	movw	r22, r28
     e7a:	82 ef       	ldi	r24, 0xF2	; 242
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	9b df       	rcall	.-202    	; 0xdb6 <MENU_addMenuItem>
     e80:	60 91 f0 02 	lds	r22, 0x02F0
     e84:	70 91 f1 02 	lds	r23, 0x02F1
	mainMenu->children[0] = currItem;
     e88:	e0 91 ea 02 	lds	r30, 0x02EA
     e8c:	f0 91 eb 02 	lds	r31, 0x02EB
     e90:	db 01       	movw	r26, r22
     e92:	15 96       	adiw	r26, 0x05	; 5
     e94:	fc 93       	st	X, r31
     e96:	ee 93       	st	-X, r30
     e98:	14 97       	sbiw	r26, 0x04	; 4
     e9a:	86 ea       	ldi	r24, 0xA6	; 166
     e9c:	96 e0       	ldi	r25, 0x06	; 6
     e9e:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
     ea0:	82 87       	std	Z+10, r24	; 0x0a
     ea2:	40 91 ee 02 	lds	r20, 0x02EE
     ea6:	50 91 ef 02 	lds	r21, 0x02EF
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     eaa:	21 e0       	ldi	r18, 0x01	; 1
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	8b ef       	ldi	r24, 0xFB	; 251
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	81 df       	rcall	.-254    	; 0xdb6 <MENU_addMenuItem>
     eb4:	60 91 f0 02 	lds	r22, 0x02F0
     eb8:	70 91 f1 02 	lds	r23, 0x02F1
	mainMenu->children[1] = currItem;
     ebc:	80 91 ea 02 	lds	r24, 0x02EA
     ec0:	90 91 eb 02 	lds	r25, 0x02EB
     ec4:	fb 01       	movw	r30, r22
     ec6:	97 83       	std	Z+7, r25	; 0x07
     ec8:	86 83       	std	Z+6, r24	; 0x06
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	40 e0       	ldi	r20, 0x00	; 0
     ed0:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     ed2:	86 e0       	ldi	r24, 0x06	; 6
     ed4:	92 e0       	ldi	r25, 0x02	; 2
     ed6:	6f df       	rcall	.-290    	; 0xdb6 <MENU_addMenuItem>
     ed8:	60 91 f0 02 	lds	r22, 0x02F0
     edc:	70 91 f1 02 	lds	r23, 0x02F1
     ee0:	80 91 ea 02 	lds	r24, 0x02EA
	mainMenu->children[2] = currItem;
     ee4:	90 91 eb 02 	lds	r25, 0x02EB
     ee8:	db 01       	movw	r26, r22
     eea:	19 96       	adiw	r26, 0x09	; 9
     eec:	9c 93       	st	X, r25
     eee:	8e 93       	st	-X, r24
     ef0:	18 97       	sbiw	r26, 0x08	; 8
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e0       	ldi	r20, 0x00	; 0
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	81 e1       	ldi	r24, 0x11	; 17
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
     efc:	92 e0       	ldi	r25, 0x02	; 2
     efe:	5b df       	rcall	.-330    	; 0xdb6 <MENU_addMenuItem>
     f00:	60 91 f0 02 	lds	r22, 0x02F0
     f04:	70 91 f1 02 	lds	r23, 0x02F1
     f08:	e0 91 ea 02 	lds	r30, 0x02EA
	mainMenu->children[3] = currItem;
     f0c:	f0 91 eb 02 	lds	r31, 0x02EB
     f10:	db 01       	movw	r26, r22
     f12:	1b 96       	adiw	r26, 0x0b	; 11
     f14:	fc 93       	st	X, r31
     f16:	ee 93       	st	-X, r30
     f18:	1a 97       	sbiw	r26, 0x0a	; 10
     f1a:	8b e8       	ldi	r24, 0x8B	; 139
     f1c:	94 e0       	ldi	r25, 0x04	; 4
     f1e:	93 87       	std	Z+11, r25	; 0x0b
     f20:	82 87       	std	Z+10, r24	; 0x0a
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
     f26:	40 e0       	ldi	r20, 0x00	; 0
     f28:	50 e0       	ldi	r21, 0x00	; 0
     f2a:	8b e1       	ldi	r24, 0x1B	; 27
     f2c:	92 e0       	ldi	r25, 0x02	; 2
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
     f2e:	43 df       	rcall	.-378    	; 0xdb6 <MENU_addMenuItem>
     f30:	e0 91 f0 02 	lds	r30, 0x02F0
     f34:	f0 91 f1 02 	lds	r31, 0x02F1
     f38:	80 91 ea 02 	lds	r24, 0x02EA
     f3c:	90 91 eb 02 	lds	r25, 0x02EB
	mainMenu->children[4] = currItem;
     f40:	95 87       	std	Z+13, r25	; 0x0d
     f42:	84 87       	std	Z+12, r24	; 0x0c
     f44:	10 92 eb 02 	sts	0x02EB, r1
     f48:	10 92 ea 02 	sts	0x02EA, r1
     f4c:	60 91 ee 02 	lds	r22, 0x02EE
     f50:	70 91 ef 02 	lds	r23, 0x02EF
	
	currItem = NULL;
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
     f5a:	50 e0       	ldi	r21, 0x00	; 0
     f5c:	80 e2       	ldi	r24, 0x20	; 32
     f5e:	92 e0       	ldi	r25, 0x02	; 2
     f60:	2a df       	rcall	.-428    	; 0xdb6 <MENU_addMenuItem>
     f62:	60 91 ee 02 	lds	r22, 0x02EE
     f66:	70 91 ef 02 	lds	r23, 0x02EF
     f6a:	80 91 ea 02 	lds	r24, 0x02EA
     f6e:	90 91 eb 02 	lds	r25, 0x02EB
	difficultyMenu->children[0] = currItem;
     f72:	fb 01       	movw	r30, r22
     f74:	95 83       	std	Z+5, r25	; 0x05
     f76:	84 83       	std	Z+4, r24	; 0x04
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	85 e2       	ldi	r24, 0x25	; 37
     f82:	92 e0       	ldi	r25, 0x02	; 2
     f84:	18 df       	rcall	.-464    	; 0xdb6 <MENU_addMenuItem>
     f86:	60 91 ee 02 	lds	r22, 0x02EE
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
     f8a:	70 91 ef 02 	lds	r23, 0x02EF
     f8e:	80 91 ea 02 	lds	r24, 0x02EA
     f92:	90 91 eb 02 	lds	r25, 0x02EB
     f96:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
     f98:	17 96       	adiw	r26, 0x07	; 7
     f9a:	9c 93       	st	X, r25
     f9c:	8e 93       	st	-X, r24
     f9e:	16 97       	sbiw	r26, 0x06	; 6
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	50 e0       	ldi	r21, 0x00	; 0
     fa8:	8c e2       	ldi	r24, 0x2C	; 44
     faa:	92 e0       	ldi	r25, 0x02	; 2
     fac:	04 df       	rcall	.-504    	; 0xdb6 <MENU_addMenuItem>
     fae:	e0 91 ee 02 	lds	r30, 0x02EE
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
     fb2:	f0 91 ef 02 	lds	r31, 0x02EF
     fb6:	80 91 ea 02 	lds	r24, 0x02EA
     fba:	90 91 eb 02 	lds	r25, 0x02EB
     fbe:	91 87       	std	Z+9, r25	; 0x09
     fc0:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
     fc2:	df 91       	pop	r29
     fc4:	cf 91       	pop	r28
     fc6:	08 95       	ret

00000fc8 <MENU_printMenuItem>:
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	ec 01       	movw	r28, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	20 97       	sbiw	r28, 0x00	; 0
     fd2:	39 f0       	breq	.+14     	; 0xfe2 <MENU_printMenuItem+0x1a>
     fd4:	6a e0       	ldi	r22, 0x0A	; 10
}
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	fa d0       	rcall	.+500    	; 0x11ce <OLED_goto>
     fda:	88 81       	ld	r24, Y
void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
		OLED_printString(item->name);
     fdc:	99 81       	ldd	r25, Y+1	; 0x01
     fde:	4d d1       	rcall	.+666    	; 0x127a <OLED_printString>
     fe0:	07 c0       	rjmp	.+14     	; 0xff0 <MENU_printMenuItem+0x28>
     fe2:	81 e3       	ldi	r24, 0x31	; 49
     fe4:	92 e0       	ldi	r25, 0x02	; 2
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
     fe6:	9f 93       	push	r25
     fe8:	8f 93       	push	r24
     fea:	f8 d4       	rcall	.+2544   	; 0x19dc <printf>
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	08 95       	ret

00000ff6 <MENU_printMenu>:
	}
}
     ff6:	cf 92       	push	r12
     ff8:	df 92       	push	r13
     ffa:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	cf 93       	push	r28
    1004:	df 93       	push	r29
    1006:	6c 01       	movw	r12, r24
    1008:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
    100a:	fe d0       	rcall	.+508    	; 0x1208 <OLED_clear>
    100c:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	8b d1       	rcall	.+790    	; 0x1328 <OLED_moveArrow>
    1012:	1e 14       	cp	r1, r14
    1014:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
    1016:	7c f4       	brge	.+30     	; 0x1036 <MENU_printMenu+0x40>
    1018:	86 01       	movw	r16, r12
    101a:	0c 5f       	subi	r16, 0xFC	; 252
    101c:	1f 4f       	sbci	r17, 0xFF	; 255
    101e:	c0 e0       	ldi	r28, 0x00	; 0
    1020:	d0 e0       	ldi	r29, 0x00	; 0
    1022:	be 01       	movw	r22, r28
    1024:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
    1026:	81 91       	ld	r24, Z+
    1028:	91 91       	ld	r25, Z+
    102a:	8f 01       	movw	r16, r30
    102c:	cd df       	rcall	.-102    	; 0xfc8 <MENU_printMenuItem>
    102e:	21 96       	adiw	r28, 0x01	; 1
    1030:	ce 15       	cp	r28, r14
    1032:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
    1034:	b1 f7       	brne	.-20     	; 0x1022 <MENU_printMenu+0x2c>
    1036:	d0 92 ed 02 	sts	0x02ED, r13
    103a:	c0 92 ec 02 	sts	0x02EC, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
    103e:	10 92 e8 02 	sts	0x02E8, r1
    1042:	10 92 e7 02 	sts	0x02E7, r1
	
	currentPosition = 0;
    1046:	f6 01       	movw	r30, r12
    1048:	84 81       	ldd	r24, Z+4	; 0x04
    104a:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
    104c:	90 93 eb 02 	sts	0x02EB, r25
    1050:	80 93 ea 02 	sts	0x02EA, r24
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	1f 91       	pop	r17
}
    105a:	0f 91       	pop	r16
    105c:	ff 90       	pop	r15
    105e:	ef 90       	pop	r14
    1060:	df 90       	pop	r13
    1062:	cf 90       	pop	r12
    1064:	08 95       	ret

00001066 <MENU_moveUp>:
    1066:	20 91 e7 02 	lds	r18, 0x02E7
    106a:	30 91 e8 02 	lds	r19, 0x02E8
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
    106e:	12 16       	cp	r1, r18
    1070:	13 06       	cpc	r1, r19
    1072:	bc f4       	brge	.+46     	; 0x10a2 <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
    1074:	c9 01       	movw	r24, r18
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	90 93 e8 02 	sts	0x02E8, r25
    107c:	80 93 e7 02 	sts	0x02E7, r24
		currItem = currentMenu->children[currentPosition];
    1080:	e0 91 ec 02 	lds	r30, 0x02EC
    1084:	f0 91 ed 02 	lds	r31, 0x02ED
    1088:	2f 5f       	subi	r18, 0xFF	; 255
    108a:	3f 4f       	sbci	r19, 0xFF	; 255
    108c:	22 0f       	add	r18, r18
    108e:	33 1f       	adc	r19, r19
    1090:	e2 0f       	add	r30, r18
    1092:	f3 1f       	adc	r31, r19
    1094:	20 81       	ld	r18, Z
    1096:	31 81       	ldd	r19, Z+1	; 0x01
    1098:	30 93 eb 02 	sts	0x02EB, r19
    109c:	20 93 ea 02 	sts	0x02EA, r18
		OLED_moveArrow(currentPosition);
    10a0:	43 c1       	rjmp	.+646    	; 0x1328 <OLED_moveArrow>
    10a2:	08 95       	ret

000010a4 <MENU_moveDown>:
    10a4:	e0 91 ec 02 	lds	r30, 0x02EC
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
    10a8:	f0 91 ed 02 	lds	r31, 0x02ED
    10ac:	20 91 e7 02 	lds	r18, 0x02E7
    10b0:	30 91 e8 02 	lds	r19, 0x02E8
    10b4:	82 81       	ldd	r24, Z+2	; 0x02
    10b6:	93 81       	ldd	r25, Z+3	; 0x03
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	28 17       	cp	r18, r24
    10bc:	39 07       	cpc	r19, r25
    10be:	a4 f4       	brge	.+40     	; 0x10e8 <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
    10c0:	c9 01       	movw	r24, r18
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	90 93 e8 02 	sts	0x02E8, r25
    10c8:	80 93 e7 02 	sts	0x02E7, r24
		currItem = currentMenu->children[currentPosition];
    10cc:	2d 5f       	subi	r18, 0xFD	; 253
    10ce:	3f 4f       	sbci	r19, 0xFF	; 255
    10d0:	22 0f       	add	r18, r18
    10d2:	33 1f       	adc	r19, r19
    10d4:	e2 0f       	add	r30, r18
    10d6:	f3 1f       	adc	r31, r19
    10d8:	20 81       	ld	r18, Z
    10da:	31 81       	ldd	r19, Z+1	; 0x01
    10dc:	30 93 eb 02 	sts	0x02EB, r19
    10e0:	20 93 ea 02 	sts	0x02EA, r18
		OLED_moveArrow(currentPosition);
    10e4:	21 c1       	rjmp	.+578    	; 0x1328 <OLED_moveArrow>
    10e6:	08 95       	ret
    10e8:	10 92 e8 02 	sts	0x02E8, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
    10ec:	10 92 e7 02 	sts	0x02E7, r1
    10f0:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
    10f2:	95 81       	ldd	r25, Z+5	; 0x05
    10f4:	90 93 eb 02 	sts	0x02EB, r25
    10f8:	80 93 ea 02 	sts	0x02EA, r24
    10fc:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	13 c1       	rjmp	.+550    	; 0x1328 <OLED_moveArrow>
    1102:	08 95       	ret

00001104 <MENU_moveLeft>:
    1104:	e0 91 ec 02 	lds	r30, 0x02EC
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
    1108:	f0 91 ed 02 	lds	r31, 0x02ED
    110c:	84 89       	ldd	r24, Z+20	; 0x14
    110e:	95 89       	ldd	r25, Z+21	; 0x15
    1110:	00 97       	sbiw	r24, 0x00	; 0
    1112:	21 f0       	breq	.+8      	; 0x111c <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
    1114:	fc 01       	movw	r30, r24
    1116:	62 81       	ldd	r22, Z+2	; 0x02
    1118:	73 81       	ldd	r23, Z+3	; 0x03
    111a:	6d cf       	rjmp	.-294    	; 0xff6 <MENU_printMenu>
    111c:	08 95       	ret

0000111e <MENU_reactivate>:
    111e:	80 91 ec 02 	lds	r24, 0x02EC
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
    1122:	90 91 ed 02 	lds	r25, 0x02ED
    1126:	fc 01       	movw	r30, r24
    1128:	62 81       	ldd	r22, Z+2	; 0x02
    112a:	73 81       	ldd	r23, Z+3	; 0x03
    112c:	64 df       	rcall	.-312    	; 0xff6 <MENU_printMenu>
    112e:	18 c0       	rjmp	.+48     	; 0x1160 <MENU_waitForInput>
	MENU_waitForInput();
    1130:	08 95       	ret

00001132 <MENU_moveRight>:
    1132:	e0 91 ea 02 	lds	r30, 0x02EA
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
    1136:	f0 91 eb 02 	lds	r31, 0x02EB
    113a:	86 81       	ldd	r24, Z+6	; 0x06
    113c:	97 81       	ldd	r25, Z+7	; 0x07
    113e:	89 2b       	or	r24, r25
    1140:	39 f0       	breq	.+14     	; 0x1150 <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
    1142:	84 81       	ldd	r24, Z+4	; 0x04
    1144:	95 81       	ldd	r25, Z+5	; 0x05
    1146:	fc 01       	movw	r30, r24
    1148:	62 81       	ldd	r22, Z+2	; 0x02
    114a:	73 81       	ldd	r23, Z+3	; 0x03
    114c:	54 cf       	rjmp	.-344    	; 0xff6 <MENU_printMenu>
    114e:	08 95       	ret
    1150:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
    1152:	f3 85       	ldd	r31, Z+11	; 0x0b
    1154:	e0 2d       	mov	r30, r0
    1156:	30 97       	sbiw	r30, 0x00	; 0
    1158:	11 f0       	breq	.+4      	; 0x115e <MENU_moveRight+0x2c>
    115a:	09 95       	icall
	{
		currItem->functionPtr();
    115c:	e0 cf       	rjmp	.-64     	; 0x111e <MENU_reactivate>
		MENU_reactivate();
    115e:	08 95       	ret

00001160 <MENU_waitForInput>:
    1160:	80 91 e7 02 	lds	r24, 0x02E7
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
    1164:	90 91 e8 02 	lds	r25, 0x02E8
    1168:	df d0       	rcall	.+446    	; 0x1328 <OLED_moveArrow>
    116a:	80 91 e9 02 	lds	r24, 0x02E9
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    116e:	88 23       	and	r24, r24
    1170:	f9 f0       	breq	.+62     	; 0x11b0 <MENU_waitForInput+0x50>
    1172:	75 dd       	rcall	.-1302   	; 0xc5e <JOY_getDirection>
	{
		currDir = JOY_getDirection();
    1174:	82 30       	cpi	r24, 0x02	; 2
    1176:	71 f0       	breq	.+28     	; 0x1194 <MENU_waitForInput+0x34>
		switch(currDir){
    1178:	18 f4       	brcc	.+6      	; 0x1180 <MENU_waitForInput+0x20>
    117a:	81 30       	cpi	r24, 0x01	; 1
    117c:	49 f0       	breq	.+18     	; 0x1190 <MENU_waitForInput+0x30>
    117e:	0b c0       	rjmp	.+22     	; 0x1196 <MENU_waitForInput+0x36>
    1180:	83 30       	cpi	r24, 0x03	; 3
    1182:	21 f0       	breq	.+8      	; 0x118c <MENU_waitForInput+0x2c>
    1184:	84 30       	cpi	r24, 0x04	; 4
    1186:	39 f4       	brne	.+14     	; 0x1196 <MENU_waitForInput+0x36>
    1188:	bd df       	rcall	.-134    	; 0x1104 <MENU_moveLeft>
    118a:	05 c0       	rjmp	.+10     	; 0x1196 <MENU_waitForInput+0x36>
			case LEFT:
			MENU_moveLeft();
    118c:	d2 df       	rcall	.-92     	; 0x1132 <MENU_moveRight>
    118e:	03 c0       	rjmp	.+6      	; 0x1196 <MENU_waitForInput+0x36>
			break;
    1190:	6a df       	rcall	.-300    	; 0x1066 <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
    1192:	01 c0       	rjmp	.+2      	; 0x1196 <MENU_waitForInput+0x36>
    1194:	87 df       	rcall	.-242    	; 0x10a4 <MENU_moveDown>
			break;
    1196:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
    1198:	8f e7       	ldi	r24, 0x7F	; 127
    119a:	94 e0       	ldi	r25, 0x04	; 4
			break;
    119c:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
    119e:	80 40       	sbci	r24, 0x00	; 0
    11a0:	90 40       	sbci	r25, 0x00	; 0
    11a2:	e1 f7       	brne	.-8      	; 0x119c <MENU_waitForInput+0x3c>
    11a4:	00 c0       	rjmp	.+0      	; 0x11a6 <MENU_waitForInput+0x46>
    11a6:	00 00       	nop
    11a8:	80 91 e9 02 	lds	r24, 0x02E9
    11ac:	81 11       	cpse	r24, r1
    11ae:	e1 cf       	rjmp	.-62     	; 0x1172 <MENU_waitForInput+0x12>
    11b0:	08 95       	ret

000011b2 <MENU_activate>:
    11b2:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    11b4:	80 93 e9 02 	sts	0x02E9, r24
    11b8:	35 de       	rcall	.-918    	; 0xe24 <MENU_buildMenus>
    11ba:	80 91 f0 02 	lds	r24, 0x02F0
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
    11be:	90 91 f1 02 	lds	r25, 0x02F1
    11c2:	fc 01       	movw	r30, r24
    11c4:	62 81       	ldd	r22, Z+2	; 0x02
    11c6:	73 81       	ldd	r23, Z+3	; 0x03
    11c8:	16 df       	rcall	.-468    	; 0xff6 <MENU_printMenu>
    11ca:	ca cf       	rjmp	.-108    	; 0x1160 <MENU_waitForInput>
    11cc:	08 95       	ret

000011ce <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
    11ce:	26 2f       	mov	r18, r22
    11d0:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
    11d2:	75 95       	asr	r23
    11d4:	67 95       	ror	r22
    11d6:	75 95       	asr	r23
    11d8:	67 95       	ror	r22
    11da:	75 95       	asr	r23
    11dc:	67 95       	ror	r22
    11de:	75 95       	asr	r23
    11e0:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
    11e2:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
    11e4:	80 55       	subi	r24, 0x50	; 80
    11e6:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
    11e8:	e0 91 10 01 	lds	r30, 0x0110
    11ec:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    11f0:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
    11f2:	e0 91 10 01 	lds	r30, 0x0110
    11f6:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    11fa:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
    11fc:	e0 91 10 01 	lds	r30, 0x0110
    1200:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1204:	60 83       	st	Z, r22
    1206:	08 95       	ret

00001208 <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
    1208:	1f 93       	push	r17
    120a:	cf 93       	push	r28
    120c:	df 93       	push	r29
    120e:	c1 e0       	ldi	r28, 0x01	; 1
    1210:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1216:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
    1218:	60 e0       	ldi	r22, 0x00	; 0
    121a:	70 e0       	ldi	r23, 0x00	; 0
    121c:	d8 df       	rcall	.-80     	; 0x11ce <OLED_goto>
    121e:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1220:	e0 91 0e 01 	lds	r30, 0x010E
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    1224:	f0 91 0f 01 	lds	r31, 0x010F
    1228:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    122a:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    122c:	80 38       	cpi	r24, 0x80	; 128
    122e:	c1 f7       	brne	.-16     	; 0x1220 <OLED_clear+0x18>
    1230:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1232:	9d 2f       	mov	r25, r29
    1234:	21 96       	adiw	r28, 0x01	; 1
    1236:	c9 30       	cpi	r28, 0x09	; 9
    1238:	d1 05       	cpc	r29, r1
    123a:	71 f7       	brne	.-36     	; 0x1218 <OLED_clear+0x10>
    123c:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    123e:	cf 91       	pop	r28
    1240:	1f 91       	pop	r17
    1242:	08 95       	ret

00001244 <OLED_printCharacter>:
    1244:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	22 0f       	add	r18, r18
    124c:	33 1f       	adc	r19, r19
    124e:	22 0f       	add	r18, r18
    1250:	33 1f       	adc	r19, r19
    1252:	22 0f       	add	r18, r18
    1254:	33 1f       	adc	r19, r19
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	20 59       	subi	r18, 0x90	; 144
    125c:	3f 4f       	sbci	r19, 0xFF	; 255
    125e:	f9 01       	movw	r30, r18
    1260:	e8 0f       	add	r30, r24
    1262:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
    1264:	e4 91       	lpm	r30, Z
    1266:	a0 91 0e 01 	lds	r26, 0x010E
    126a:	b0 91 0f 01 	lds	r27, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    126e:	ec 93       	st	X, r30
    1270:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
    1272:	88 30       	cpi	r24, 0x08	; 8
    1274:	91 05       	cpc	r25, r1
    1276:	99 f7       	brne	.-26     	; 0x125e <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
    1278:	08 95       	ret

0000127a <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
    127a:	1f 93       	push	r17
    127c:	cf 93       	push	r28
    127e:	df 93       	push	r29
    1280:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
    1282:	10 e0       	ldi	r17, 0x00	; 0
    1284:	06 c0       	rjmp	.+12     	; 0x1292 <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
    1286:	fe 01       	movw	r30, r28
    1288:	e8 0f       	add	r30, r24
    128a:	f9 1f       	adc	r31, r25
    128c:	80 81       	ld	r24, Z
    128e:	da df       	rcall	.-76     	; 0x1244 <OLED_printCharacter>
    1290:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
    1292:	81 2f       	mov	r24, r17
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	fe 01       	movw	r30, r28
    1298:	01 90       	ld	r0, Z+
    129a:	00 20       	and	r0, r0
    129c:	e9 f7       	brne	.-6      	; 0x1298 <OLED_printString+0x1e>
    129e:	31 97       	sbiw	r30, 0x01	; 1
    12a0:	ec 1b       	sub	r30, r28
    12a2:	fd 0b       	sbc	r31, r29
    12a4:	8e 17       	cp	r24, r30
    12a6:	9f 07       	cpc	r25, r31
    12a8:	70 f3       	brcs	.-36     	; 0x1286 <OLED_printString+0xc>
    12aa:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	08 95       	ret

000012b2 <OLED_printArrow>:
    12b2:	e0 91 0e 01 	lds	r30, 0x010E
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
    12b6:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12ba:	88 e1       	ldi	r24, 0x18	; 24
    12bc:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    12be:	e0 91 0e 01 	lds	r30, 0x010E
    12c2:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12c6:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
    12c8:	e0 91 0e 01 	lds	r30, 0x010E
    12cc:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12d0:	9e e7       	ldi	r25, 0x7E	; 126
    12d2:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
    12d4:	e0 91 0e 01 	lds	r30, 0x010E
    12d8:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12dc:	9c e3       	ldi	r25, 0x3C	; 60
    12de:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    12e0:	e0 91 0e 01 	lds	r30, 0x010E
    12e4:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12e8:	80 83       	st	Z, r24
    12ea:	08 95       	ret

000012ec <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    12ec:	1f 93       	push	r17
    12ee:	cf 93       	push	r28
    12f0:	df 93       	push	r29
    12f2:	c1 e0       	ldi	r28, 0x01	; 1
    12f4:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    12fa:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	66 df       	rcall	.-308    	; 0x11ce <OLED_goto>
    1302:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1304:	e0 91 0e 01 	lds	r30, 0x010E
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    1308:	f0 91 0f 01 	lds	r31, 0x010F
    130c:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    130e:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1310:	85 30       	cpi	r24, 0x05	; 5
    1312:	c1 f7       	brne	.-16     	; 0x1304 <OLED_clearArrow+0x18>
    1314:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1316:	9d 2f       	mov	r25, r29
    1318:	21 96       	adiw	r28, 0x01	; 1
    131a:	c9 30       	cpi	r28, 0x09	; 9
    131c:	d1 05       	cpc	r29, r1
    131e:	71 f7       	brne	.-36     	; 0x12fc <OLED_clearArrow+0x10>
    1320:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    1322:	cf 91       	pop	r28
    1324:	1f 91       	pop	r17
    1326:	08 95       	ret

00001328 <OLED_moveArrow>:
    1328:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    132a:	df 93       	push	r29
    132c:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
    132e:	de df       	rcall	.-68     	; 0x12ec <OLED_clearArrow>
    1330:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	ce 01       	movw	r24, r28
    1336:	4b df       	rcall	.-362    	; 0x11ce <OLED_goto>
    1338:	bc df       	rcall	.-136    	; 0x12b2 <OLED_printArrow>
    133a:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
    133c:	cf 91       	pop	r28
    133e:	08 95       	ret

00001340 <OLED_setContrast>:
}
    1340:	e0 91 10 01 	lds	r30, 0x0110
    1344:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1348:	91 e8       	ldi	r25, 0x81	; 129
    134a:	90 83       	st	Z, r25
void OLED_setContrast(uint8_t contrast)
{
	// activate contrast contol
	OLED_writeByteToOLED(oled_cmd, 0x81);
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
    134c:	e0 91 10 01 	lds	r30, 0x0110
    1350:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1354:	80 83       	st	Z, r24
    1356:	08 95       	ret

00001358 <OLED_fadeIn>:
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
}

void OLED_fadeIn(void)
{
    1358:	cf 93       	push	r28
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    135a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		OLED_setContrast(i);
    135c:	8c 2f       	mov	r24, r28
    135e:	f0 df       	rcall	.-32     	; 0x1340 <OLED_setContrast>
    1360:	83 e3       	ldi	r24, 0x33	; 51
    1362:	93 e1       	ldi	r25, 0x13	; 19
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	f1 f7       	brne	.-4      	; 0x1364 <OLED_fadeIn+0xc>
    1368:	cf 5f       	subi	r28, 0xFF	; 255
}

void OLED_fadeIn(void)
{
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    136a:	cf 3f       	cpi	r28, 0xFF	; 255
    136c:	b9 f7       	brne	.-18     	; 0x135c <OLED_fadeIn+0x4>
    136e:	cf 91       	pop	r28
	{
		OLED_setContrast(i);
		_delay_ms(4);
	}
}
    1370:	08 95       	ret

00001372 <OLED_line>:
    1372:	ff 92       	push	r15
		_delay_ms(4);
	}
}

void OLED_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t thickness)
{
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	08 2f       	mov	r16, r24
    137e:	c4 2f       	mov	r28, r20
	uint8_t lineSegment = 0;
	if(y0 == y1)
    1380:	62 13       	cpse	r22, r18
    1382:	19 c0       	rjmp	.+50     	; 0x13b6 <OLED_line+0x44>
	{
		lineSegment = (1<<y0/8);
    1384:	86 2f       	mov	r24, r22
    1386:	86 95       	lsr	r24
    1388:	86 95       	lsr	r24
    138a:	86 95       	lsr	r24
    138c:	d1 e0       	ldi	r29, 0x01	; 1
    138e:	08 2e       	mov	r0, r24
    1390:	01 c0       	rjmp	.+2      	; 0x1394 <OLED_line+0x22>
    1392:	dd 0f       	add	r29, r29
    1394:	0a 94       	dec	r0
    1396:	ea f7       	brpl	.-6      	; 0x1392 <OLED_line+0x20>
		OLED_goto(y0/8,x0);
    1398:	60 2f       	mov	r22, r16
    139a:	70 e0       	ldi	r23, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	17 df       	rcall	.-466    	; 0x11ce <OLED_goto>
    13a0:	c0 17       	cp	r28, r16
		for(uint8_t i = x0; i <= x1; i++)
    13a2:	48 f0       	brcs	.+18     	; 0x13b6 <OLED_line+0x44>
    13a4:	90 2f       	mov	r25, r16
    13a6:	e0 91 0e 01 	lds	r30, 0x010E
		{
			OLED_writeByteToOLED(oled_data, lineSegment);
    13aa:	f0 91 0f 01 	lds	r31, 0x010F
    13ae:	d0 83       	st	Z, r29
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13b0:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t lineSegment = 0;
	if(y0 == y1)
	{
		lineSegment = (1<<y0/8);
		OLED_goto(y0/8,x0);
		for(uint8_t i = x0; i <= x1; i++)
    13b2:	c9 17       	cp	r28, r25
    13b4:	c0 f7       	brcc	.-16     	; 0x13a6 <OLED_line+0x34>
    13b6:	0c 13       	cpse	r16, r28
		}
	}
	
	// page addressing is wrong - should use all possible lines
	// memory buffer should be used!
	if(x0 == x1)
    13b8:	11 c0       	rjmp	.+34     	; 0x13dc <OLED_line+0x6a>
    13ba:	c0 e0       	ldi	r28, 0x00	; 0
    13bc:	d0 e0       	ldi	r29, 0x00	; 0
    13be:	10 e0       	ldi	r17, 0x00	; 0
	{
		lineSegment = 0xff;
		
		for(uint8_t i = 0; i<8; i++)
		{
			OLED_goto(i,x0);
    13c0:	ff 24       	eor	r15, r15
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13c2:	fa 94       	dec	r15
    13c4:	b8 01       	movw	r22, r16
	{
		lineSegment = 0xff;
		
		for(uint8_t i = 0; i<8; i++)
		{
			OLED_goto(i,x0);
    13c6:	ce 01       	movw	r24, r28
    13c8:	02 df       	rcall	.-508    	; 0x11ce <OLED_goto>
    13ca:	e0 91 0e 01 	lds	r30, 0x010E
			OLED_writeByteToOLED(oled_data, lineSegment);
    13ce:	f0 91 0f 01 	lds	r31, 0x010F
    13d2:	f0 82       	st	Z, r15
    13d4:	21 96       	adiw	r28, 0x01	; 1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13d6:	c8 30       	cpi	r28, 0x08	; 8
    13d8:	d1 05       	cpc	r29, r1
	// memory buffer should be used!
	if(x0 == x1)
	{
		lineSegment = 0xff;
		
		for(uint8_t i = 0; i<8; i++)
    13da:	a1 f7       	brne	.-24     	; 0x13c4 <OLED_line+0x52>
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
		{
			OLED_goto(i,x0);
			OLED_writeByteToOLED(oled_data, lineSegment);
		}
	}
}
    13e0:	1f 91       	pop	r17
    13e2:	0f 91       	pop	r16
    13e4:	ff 90       	pop	r15
    13e6:	08 95       	ret

000013e8 <OLED_splashScreen>:
    13e8:	81 e4       	ldi	r24, 0x41	; 65
    13ea:	92 e0       	ldi	r25, 0x02	; 2

void OLED_splashScreen(void)
{
	printf("run splash screen...\n");
    13ec:	0d d3       	rcall	.+1562   	; 0x1a08 <puts>
    13ee:	80 e0       	ldi	r24, 0x00	; 0
	
	OLED_setContrast(0);
    13f0:	a7 df       	rcall	.-178    	; 0x1340 <OLED_setContrast>
    13f2:	2f ef       	ldi	r18, 0xFF	; 255
    13f4:	8f e7       	ldi	r24, 0x7F	; 127
    13f6:	97 e0       	ldi	r25, 0x07	; 7
    13f8:	21 50       	subi	r18, 0x01	; 1
    13fa:	80 40       	sbci	r24, 0x00	; 0
    13fc:	90 40       	sbci	r25, 0x00	; 0
    13fe:	e1 f7       	brne	.-8      	; 0x13f8 <OLED_splashScreen+0x10>
    1400:	00 c0       	rjmp	.+0      	; 0x1402 <OLED_splashScreen+0x1a>
    1402:	00 00       	nop
    1404:	64 e0       	ldi	r22, 0x04	; 4
    1406:	70 e0       	ldi	r23, 0x00	; 0
	
	_delay_ms(500);
	OLED_goto(2,4);
    1408:	82 e0       	ldi	r24, 0x02	; 2
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	e0 de       	rcall	.-576    	; 0x11ce <OLED_goto>
    140e:	86 e5       	ldi	r24, 0x56	; 86
    1410:	92 e0       	ldi	r25, 0x02	; 2
    1412:	33 df       	rcall	.-410    	; 0x127a <OLED_printString>
	OLED_printString("Group 46 Soft");
    1414:	a1 df       	rcall	.-190    	; 0x1358 <OLED_fadeIn>
    1416:	2f ef       	ldi	r18, 0xFF	; 255
    1418:	8f e7       	ldi	r24, 0x7F	; 127
    141a:	97 e0       	ldi	r25, 0x07	; 7
	OLED_fadeIn();
    141c:	21 50       	subi	r18, 0x01	; 1
    141e:	80 40       	sbci	r24, 0x00	; 0
    1420:	90 40       	sbci	r25, 0x00	; 0
    1422:	e1 f7       	brne	.-8      	; 0x141c <OLED_splashScreen+0x34>
    1424:	00 c0       	rjmp	.+0      	; 0x1426 <OLED_splashScreen+0x3e>
    1426:	00 00       	nop
    1428:	ef de       	rcall	.-546    	; 0x1208 <OLED_clear>
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	89 df       	rcall	.-238    	; 0x1340 <OLED_setContrast>
    142e:	2f ef       	ldi	r18, 0xFF	; 255
    1430:	8f ef       	ldi	r24, 0xFF	; 255
	_delay_ms(500);
	
 	OLED_clear();
    1432:	92 e0       	ldi	r25, 0x02	; 2
    1434:	21 50       	subi	r18, 0x01	; 1
 	OLED_setContrast(0);
    1436:	80 40       	sbci	r24, 0x00	; 0
    1438:	90 40       	sbci	r25, 0x00	; 0
    143a:	e1 f7       	brne	.-8      	; 0x1434 <OLED_splashScreen+0x4c>
    143c:	00 c0       	rjmp	.+0      	; 0x143e <OLED_splashScreen+0x56>
    143e:	00 c0       	rjmp	.+0      	; 0x1440 <OLED_splashScreen+0x58>
    1440:	6c e1       	ldi	r22, 0x1C	; 28
    1442:	70 e0       	ldi	r23, 0x00	; 0
    1444:	83 e0       	ldi	r24, 0x03	; 3
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	c2 de       	rcall	.-636    	; 0x11ce <OLED_goto>
    144a:	84 e6       	ldi	r24, 0x64	; 100
    144c:	92 e0       	ldi	r25, 0x02	; 2
 	
 	_delay_ms(200);
 	OLED_goto(3,28);
    144e:	15 df       	rcall	.-470    	; 0x127a <OLED_printString>
    1450:	68 e1       	ldi	r22, 0x18	; 24
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	84 e0       	ldi	r24, 0x04	; 4
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	ba de       	rcall	.-652    	; 0x11ce <OLED_goto>
 	OLED_printString("proudly");
    145a:	8c e6       	ldi	r24, 0x6C	; 108
    145c:	92 e0       	ldi	r25, 0x02	; 2
    145e:	0d df       	rcall	.-486    	; 0x127a <OLED_printString>
    1460:	7b df       	rcall	.-266    	; 0x1358 <OLED_fadeIn>
 	OLED_goto(4,24);	
    1462:	2f ef       	ldi	r18, 0xFF	; 255
    1464:	8f e7       	ldi	r24, 0x7F	; 127
    1466:	97 e0       	ldi	r25, 0x07	; 7
    1468:	21 50       	subi	r18, 0x01	; 1
    146a:	80 40       	sbci	r24, 0x00	; 0
    146c:	90 40       	sbci	r25, 0x00	; 0
 	OLED_printString("presents");
    146e:	e1 f7       	brne	.-8      	; 0x1468 <OLED_splashScreen+0x80>
    1470:	00 c0       	rjmp	.+0      	; 0x1472 <OLED_splashScreen+0x8a>
    1472:	00 00       	nop
    1474:	c9 de       	rcall	.-622    	; 0x1208 <OLED_clear>
 	OLED_fadeIn();
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	63 df       	rcall	.-314    	; 0x1340 <OLED_setContrast>
    147a:	2f ef       	ldi	r18, 0xFF	; 255
    147c:	8f ef       	ldi	r24, 0xFF	; 255
    147e:	92 e0       	ldi	r25, 0x02	; 2
    1480:	21 50       	subi	r18, 0x01	; 1
    1482:	80 40       	sbci	r24, 0x00	; 0
    1484:	90 40       	sbci	r25, 0x00	; 0
    1486:	e1 f7       	brne	.-8      	; 0x1480 <OLED_splashScreen+0x98>
    1488:	00 c0       	rjmp	.+0      	; 0x148a <OLED_splashScreen+0xa2>
    148a:	00 c0       	rjmp	.+0      	; 0x148c <OLED_splashScreen+0xa4>
 	_delay_ms(500);
 	
 	OLED_clear();
    148c:	6c e1       	ldi	r22, 0x1C	; 28
    148e:	70 e0       	ldi	r23, 0x00	; 0
 	OLED_setContrast(0);
    1490:	83 e0       	ldi	r24, 0x03	; 3
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	9c de       	rcall	.-712    	; 0x11ce <OLED_goto>
    1496:	85 e7       	ldi	r24, 0x75	; 117
    1498:	92 e0       	ldi	r25, 0x02	; 2
    149a:	ef de       	rcall	.-546    	; 0x127a <OLED_printString>
    149c:	5d df       	rcall	.-326    	; 0x1358 <OLED_fadeIn>
    149e:	2f ef       	ldi	r18, 0xFF	; 255
    14a0:	8f ef       	ldi	r24, 0xFF	; 255
    14a2:	9e e0       	ldi	r25, 0x0E	; 14
    14a4:	21 50       	subi	r18, 0x01	; 1
    14a6:	80 40       	sbci	r24, 0x00	; 0
 	
 	_delay_ms(200);
 	OLED_goto(3, 28);
    14a8:	90 40       	sbci	r25, 0x00	; 0
    14aa:	e1 f7       	brne	.-8      	; 0x14a4 <OLED_splashScreen+0xbc>
    14ac:	00 c0       	rjmp	.+0      	; 0x14ae <OLED_splashScreen+0xc6>
    14ae:	00 00       	nop
    14b0:	ab de       	rcall	.-682    	; 0x1208 <OLED_clear>
    14b2:	80 e5       	ldi	r24, 0x50	; 80
 	OLED_printString("FIFA 18");
    14b4:	45 df       	rcall	.-374    	; 0x1340 <OLED_setContrast>
    14b6:	8d e7       	ldi	r24, 0x7D	; 125
    14b8:	92 e0       	ldi	r25, 0x02	; 2
    14ba:	a6 c2       	rjmp	.+1356   	; 0x1a08 <puts>
 	OLED_fadeIn();
    14bc:	08 95       	ret

000014be <OLED_init>:
    14be:	e0 91 10 01 	lds	r30, 0x0110
    14c2:	f0 91 11 01 	lds	r31, 0x0111
    14c6:	8e ea       	ldi	r24, 0xAE	; 174
    14c8:	80 83       	st	Z, r24
    14ca:	e0 91 10 01 	lds	r30, 0x0110
    14ce:	f0 91 11 01 	lds	r31, 0x0111
 	_delay_ms(1000);
	
	// clean up
	OLED_clear();
    14d2:	81 ea       	ldi	r24, 0xA1	; 161
    14d4:	80 83       	st	Z, r24
	OLED_setContrast(0x50); // back to standard contrast
    14d6:	e0 91 10 01 	lds	r30, 0x0110
    14da:	f0 91 11 01 	lds	r31, 0x0111
	
	printf("splash screen done...\n");
    14de:	8a ed       	ldi	r24, 0xDA	; 218
    14e0:	80 83       	st	Z, r24
    14e2:	e0 91 10 01 	lds	r30, 0x0110
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
    14e6:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14ea:	82 e1       	ldi	r24, 0x12	; 18
    14ec:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    14ee:	e0 91 10 01 	lds	r30, 0x0110
    14f2:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    14f6:	88 ec       	ldi	r24, 0xC8	; 200
    14f8:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    14fa:	e0 91 10 01 	lds	r30, 0x0110
    14fe:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1502:	88 ea       	ldi	r24, 0xA8	; 168
    1504:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    1506:	e0 91 10 01 	lds	r30, 0x0110
    150a:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    150e:	8f e3       	ldi	r24, 0x3F	; 63
    1510:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    1512:	e0 91 10 01 	lds	r30, 0x0110
    1516:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    151a:	85 ed       	ldi	r24, 0xD5	; 213
    151c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
    151e:	e0 91 10 01 	lds	r30, 0x0110
    1522:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1526:	80 e8       	ldi	r24, 0x80	; 128
    1528:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    152a:	e0 91 10 01 	lds	r30, 0x0110
    152e:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1532:	81 e8       	ldi	r24, 0x81	; 129
    1534:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    1536:	e0 91 10 01 	lds	r30, 0x0110
    153a:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    153e:	80 e5       	ldi	r24, 0x50	; 80
    1540:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    1542:	e0 91 10 01 	lds	r30, 0x0110
    1546:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    154a:	89 ed       	ldi	r24, 0xD9	; 217
    154c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
    154e:	e0 91 10 01 	lds	r30, 0x0110
    1552:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1556:	81 e2       	ldi	r24, 0x21	; 33
    1558:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    155a:	e0 91 10 01 	lds	r30, 0x0110
    155e:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1562:	80 e2       	ldi	r24, 0x20	; 32
    1564:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    1566:	e0 91 10 01 	lds	r30, 0x0110
    156a:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    156e:	82 e0       	ldi	r24, 0x02	; 2
    1570:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    1572:	e0 91 10 01 	lds	r30, 0x0110
    1576:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    157a:	8b ed       	ldi	r24, 0xDB	; 219
    157c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    157e:	e0 91 10 01 	lds	r30, 0x0110
    1582:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1586:	80 e3       	ldi	r24, 0x30	; 48
    1588:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    158a:	e0 91 10 01 	lds	r30, 0x0110
    158e:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1592:	8d ea       	ldi	r24, 0xAD	; 173
    1594:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    1596:	e0 91 10 01 	lds	r30, 0x0110
    159a:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    159e:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    15a0:	e0 91 10 01 	lds	r30, 0x0110
    15a4:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15a8:	84 ea       	ldi	r24, 0xA4	; 164
    15aa:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    15ac:	e0 91 10 01 	lds	r30, 0x0110
    15b0:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15b4:	86 ea       	ldi	r24, 0xA6	; 166
    15b6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    15b8:	e0 91 10 01 	lds	r30, 0x0110
    15bc:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15c0:	8f ea       	ldi	r24, 0xAF	; 175
    15c2:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    15c4:	21 de       	rcall	.-958    	; 0x1208 <OLED_clear>
    15c6:	10 cf       	rjmp	.-480    	; 0x13e8 <OLED_splashScreen>
	OLED_splashScreen();
    15c8:	08 95       	ret

000015ca <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    15ca:	10 92 f4 02 	sts	0x02F4, r1
	currentSliPosition.L_abs = 0;
    15ce:	10 92 f5 02 	sts	0x02F5, r1
	currentSliPosition.R_per = 0;
    15d2:	10 92 f6 02 	sts	0x02F6, r1
	currentSliPosition.L_per = 0;
    15d6:	10 92 f7 02 	sts	0x02F7, r1
    15da:	08 95       	ret

000015dc <SPI_init>:

void SPI_init()
{
	//init external interrupt INT2 on falling edge
	#if defined(__AVR_ATmega162__)
		set_bit(GICR, INT2);
    15dc:	8b b7       	in	r24, 0x3b	; 59
    15de:	80 62       	ori	r24, 0x20	; 32
    15e0:	8b bf       	out	0x3b, r24	; 59
		clear_bit(EMCUCR, ISC2);
    15e2:	86 b7       	in	r24, 0x36	; 54
    15e4:	8e 7f       	andi	r24, 0xFE	; 254
    15e6:	86 bf       	out	0x36, r24	; 54
		
		// Set _SS, MOSI and SCK output, all others input
		DDR_SPI |= (1<<SS_CAN_CONTROLLER_PIN_MODE) | (1<<MOSI_PIN) | (1<<SCK_PIN);
    15e8:	87 b3       	in	r24, 0x17	; 23
    15ea:	80 6b       	ori	r24, 0xB0	; 176
    15ec:	87 bb       	out	0x17, r24	; 23
	#endif
	
	

	// Enable SPI, Master, set clock rate fck/4
	SPCR = (1<<SPE) | (1<<MSTR);
    15ee:	80 e5       	ldi	r24, 0x50	; 80
    15f0:	8d b9       	out	0x0d, r24	; 13
	
	// clock rate fck/2
	SPSR = (1<<SPI2X);
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	8e b9       	out	0x0e, r24	; 14

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORT_SPI, SS_CAN_CONTROLLER_PIN);
    15f6:	c4 9a       	sbi	0x18, 4	; 24
    15f8:	08 95       	ret

000015fa <SPI_send>:
}

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    15fa:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    15fc:	77 9b       	sbis	0x0e, 7	; 14
    15fe:	fe cf       	rjmp	.-4      	; 0x15fc <SPI_send+0x2>
}
    1600:	08 95       	ret

00001602 <SPI_receive>:

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    1602:	8f ef       	ldi	r24, 0xFF	; 255
    1604:	fa df       	rcall	.-12     	; 0x15fa <SPI_send>
    1606:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    1608:	fe cf       	rjmp	.-4      	; 0x1606 <SPI_receive+0x4>
    160a:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    160c:	08 95       	ret

0000160e <SPI_activateSlave>:

	return data;
}
    160e:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    1610:	01 c0       	rjmp	.+2      	; 0x1614 <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    1612:	c4 98       	cbi	0x18, 4	; 24
    1614:	08 95       	ret

00001616 <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    1616:	81 11       	cpse	r24, r1
    1618:	01 c0       	rjmp	.+2      	; 0x161c <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    161a:	c4 9a       	sbi	0x18, 4	; 24
    161c:	08 95       	ret

0000161e <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    161e:	5d 9b       	sbis	0x0b, 5	; 11
    1620:	fe cf       	rjmp	.-4      	; 0x161e <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    1622:	8c b9       	out	0x0c, r24	; 12
    1624:	08 95       	ret

00001626 <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    1626:	5f 9b       	sbis	0x0b, 7	; 11
    1628:	fe cf       	rjmp	.-4      	; 0x1626 <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    162a:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
    162c:	08 95       	ret

0000162e <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    162e:	ef 92       	push	r14
    1630:	ff 92       	push	r15
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    1636:	bb 27       	eor	r27, r27
    1638:	a1 2f       	mov	r26, r17
    163a:	90 2f       	mov	r25, r16
    163c:	8f 2d       	mov	r24, r15
    163e:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    1640:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1642:	88 e1       	ldi	r24, 0x18	; 24
    1644:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    1646:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	#if defined(__AVR_ATmega162__)
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    1648:	8e e8       	ldi	r24, 0x8E	; 142
    164a:	80 bd       	out	0x20, r24	; 32
	
	#if defined(__AVR_ATmega2560__)
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	#endif
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    164c:	63 e1       	ldi	r22, 0x13	; 19
    164e:	7b e0       	ldi	r23, 0x0B	; 11
    1650:	8f e0       	ldi	r24, 0x0F	; 15
    1652:	9b e0       	ldi	r25, 0x0B	; 11
    1654:	79 d1       	rcall	.+754    	; 0x1948 <fdevopen>
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	ff 90       	pop	r15
    165c:	ef 90       	pop	r14
    165e:	08 95       	ret

00001660 <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    1660:	9b 01       	movw	r18, r22
	
	switch(channel){
    1662:	82 30       	cpi	r24, 0x02	; 2
    1664:	69 f0       	breq	.+26     	; 0x1680 <ADC_request+0x20>
    1666:	18 f4       	brcc	.+6      	; 0x166e <ADC_request+0xe>
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	31 f0       	breq	.+12     	; 0x1678 <ADC_request+0x18>
    166c:	15 c0       	rjmp	.+42     	; 0x1698 <ADC_request+0x38>
    166e:	83 30       	cpi	r24, 0x03	; 3
    1670:	59 f0       	breq	.+22     	; 0x1688 <ADC_request+0x28>
    1672:	84 30       	cpi	r24, 0x04	; 4
    1674:	69 f0       	breq	.+26     	; 0x1690 <ADC_request+0x30>
    1676:	10 c0       	rjmp	.+32     	; 0x1698 <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    1678:	64 e0       	ldi	r22, 0x04	; 4
    167a:	c9 01       	movw	r24, r18
    167c:	36 c9       	rjmp	.-3476   	; 0x8ea <saveToAddress>
    167e:	08 95       	ret
			break;
    1680:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    1682:	c9 01       	movw	r24, r18
    1684:	32 c9       	rjmp	.-3484   	; 0x8ea <saveToAddress>
    1686:	08 95       	ret
    1688:	66 e0       	ldi	r22, 0x06	; 6
			break;
    168a:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    168c:	2e c9       	rjmp	.-3492   	; 0x8ea <saveToAddress>
    168e:	08 95       	ret
    1690:	67 e0       	ldi	r22, 0x07	; 7
    1692:	c9 01       	movw	r24, r18
			break;
    1694:	2a c9       	rjmp	.-3500   	; 0x8ea <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    1696:	08 95       	ret
    1698:	8c eb       	ldi	r24, 0xBC	; 188
    169a:	92 e0       	ldi	r25, 0x02	; 2
    169c:	9f 93       	push	r25
			break;
    169e:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    16a0:	9d d1       	rcall	.+826    	; 0x19dc <printf>
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	08 95       	ret

000016a8 <ADC_read>:
    16a8:	1d c9       	rjmp	.-3526   	; 0x8e4 <readFromAddress>
    16aa:	08 95       	ret

000016ac <__divmodhi4>:
			break;
    16ac:	97 fb       	bst	r25, 7
    16ae:	07 2e       	mov	r0, r23
    16b0:	16 f4       	brtc	.+4      	; 0x16b6 <__divmodhi4+0xa>
    16b2:	00 94       	com	r0
    16b4:	06 d0       	rcall	.+12     	; 0x16c2 <__divmodhi4_neg1>
    16b6:	77 fd       	sbrc	r23, 7
    16b8:	08 d0       	rcall	.+16     	; 0x16ca <__divmodhi4_neg2>
    16ba:	0b d0       	rcall	.+22     	; 0x16d2 <__udivmodhi4>
    16bc:	07 fc       	sbrc	r0, 7
    16be:	05 d0       	rcall	.+10     	; 0x16ca <__divmodhi4_neg2>
    16c0:	3e f4       	brtc	.+14     	; 0x16d0 <__divmodhi4_exit>

000016c2 <__divmodhi4_neg1>:
    16c2:	90 95       	com	r25
    16c4:	81 95       	neg	r24
    16c6:	9f 4f       	sbci	r25, 0xFF	; 255
    16c8:	08 95       	ret

000016ca <__divmodhi4_neg2>:
    16ca:	70 95       	com	r23
    16cc:	61 95       	neg	r22
    16ce:	7f 4f       	sbci	r23, 0xFF	; 255

000016d0 <__divmodhi4_exit>:
    16d0:	08 95       	ret

000016d2 <__udivmodhi4>:
    16d2:	aa 1b       	sub	r26, r26
    16d4:	bb 1b       	sub	r27, r27
    16d6:	51 e1       	ldi	r21, 0x11	; 17
    16d8:	07 c0       	rjmp	.+14     	; 0x16e8 <__udivmodhi4_ep>

000016da <__udivmodhi4_loop>:
    16da:	aa 1f       	adc	r26, r26
    16dc:	bb 1f       	adc	r27, r27
    16de:	a6 17       	cp	r26, r22
    16e0:	b7 07       	cpc	r27, r23
    16e2:	10 f0       	brcs	.+4      	; 0x16e8 <__udivmodhi4_ep>
    16e4:	a6 1b       	sub	r26, r22
    16e6:	b7 0b       	sbc	r27, r23

000016e8 <__udivmodhi4_ep>:
    16e8:	88 1f       	adc	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	5a 95       	dec	r21
    16ee:	a9 f7       	brne	.-22     	; 0x16da <__udivmodhi4_loop>
    16f0:	80 95       	com	r24
    16f2:	90 95       	com	r25
    16f4:	bc 01       	movw	r22, r24
    16f6:	cd 01       	movw	r24, r26
    16f8:	08 95       	ret

000016fa <malloc>:
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
    16fe:	82 30       	cpi	r24, 0x02	; 2
    1700:	91 05       	cpc	r25, r1
    1702:	10 f4       	brcc	.+4      	; 0x1708 <malloc+0xe>
    1704:	82 e0       	ldi	r24, 0x02	; 2
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	e0 91 fa 02 	lds	r30, 0x02FA
    170c:	f0 91 fb 02 	lds	r31, 0x02FB
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	a0 e0       	ldi	r26, 0x00	; 0
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	30 97       	sbiw	r30, 0x00	; 0
    171a:	39 f1       	breq	.+78     	; 0x176a <malloc+0x70>
    171c:	40 81       	ld	r20, Z
    171e:	51 81       	ldd	r21, Z+1	; 0x01
    1720:	48 17       	cp	r20, r24
    1722:	59 07       	cpc	r21, r25
    1724:	b8 f0       	brcs	.+46     	; 0x1754 <malloc+0x5a>
    1726:	48 17       	cp	r20, r24
    1728:	59 07       	cpc	r21, r25
    172a:	71 f4       	brne	.+28     	; 0x1748 <malloc+0x4e>
    172c:	82 81       	ldd	r24, Z+2	; 0x02
    172e:	93 81       	ldd	r25, Z+3	; 0x03
    1730:	10 97       	sbiw	r26, 0x00	; 0
    1732:	29 f0       	breq	.+10     	; 0x173e <malloc+0x44>
    1734:	13 96       	adiw	r26, 0x03	; 3
    1736:	9c 93       	st	X, r25
    1738:	8e 93       	st	-X, r24
    173a:	12 97       	sbiw	r26, 0x02	; 2
    173c:	2c c0       	rjmp	.+88     	; 0x1796 <malloc+0x9c>
    173e:	90 93 fb 02 	sts	0x02FB, r25
    1742:	80 93 fa 02 	sts	0x02FA, r24
    1746:	27 c0       	rjmp	.+78     	; 0x1796 <malloc+0x9c>
    1748:	21 15       	cp	r18, r1
    174a:	31 05       	cpc	r19, r1
    174c:	31 f0       	breq	.+12     	; 0x175a <malloc+0x60>
    174e:	42 17       	cp	r20, r18
    1750:	53 07       	cpc	r21, r19
    1752:	18 f0       	brcs	.+6      	; 0x175a <malloc+0x60>
    1754:	a9 01       	movw	r20, r18
    1756:	db 01       	movw	r26, r22
    1758:	01 c0       	rjmp	.+2      	; 0x175c <malloc+0x62>
    175a:	ef 01       	movw	r28, r30
    175c:	9a 01       	movw	r18, r20
    175e:	bd 01       	movw	r22, r26
    1760:	df 01       	movw	r26, r30
    1762:	02 80       	ldd	r0, Z+2	; 0x02
    1764:	f3 81       	ldd	r31, Z+3	; 0x03
    1766:	e0 2d       	mov	r30, r0
    1768:	d7 cf       	rjmp	.-82     	; 0x1718 <malloc+0x1e>
    176a:	21 15       	cp	r18, r1
    176c:	31 05       	cpc	r19, r1
    176e:	f9 f0       	breq	.+62     	; 0x17ae <malloc+0xb4>
    1770:	28 1b       	sub	r18, r24
    1772:	39 0b       	sbc	r19, r25
    1774:	24 30       	cpi	r18, 0x04	; 4
    1776:	31 05       	cpc	r19, r1
    1778:	80 f4       	brcc	.+32     	; 0x179a <malloc+0xa0>
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	9b 81       	ldd	r25, Y+3	; 0x03
    177e:	61 15       	cp	r22, r1
    1780:	71 05       	cpc	r23, r1
    1782:	21 f0       	breq	.+8      	; 0x178c <malloc+0x92>
    1784:	fb 01       	movw	r30, r22
    1786:	93 83       	std	Z+3, r25	; 0x03
    1788:	82 83       	std	Z+2, r24	; 0x02
    178a:	04 c0       	rjmp	.+8      	; 0x1794 <malloc+0x9a>
    178c:	90 93 fb 02 	sts	0x02FB, r25
    1790:	80 93 fa 02 	sts	0x02FA, r24
    1794:	fe 01       	movw	r30, r28
    1796:	32 96       	adiw	r30, 0x02	; 2
    1798:	44 c0       	rjmp	.+136    	; 0x1822 <malloc+0x128>
    179a:	fe 01       	movw	r30, r28
    179c:	e2 0f       	add	r30, r18
    179e:	f3 1f       	adc	r31, r19
    17a0:	81 93       	st	Z+, r24
    17a2:	91 93       	st	Z+, r25
    17a4:	22 50       	subi	r18, 0x02	; 2
    17a6:	31 09       	sbc	r19, r1
    17a8:	39 83       	std	Y+1, r19	; 0x01
    17aa:	28 83       	st	Y, r18
    17ac:	3a c0       	rjmp	.+116    	; 0x1822 <malloc+0x128>
    17ae:	20 91 f8 02 	lds	r18, 0x02F8
    17b2:	30 91 f9 02 	lds	r19, 0x02F9
    17b6:	23 2b       	or	r18, r19
    17b8:	41 f4       	brne	.+16     	; 0x17ca <malloc+0xd0>
    17ba:	20 91 02 01 	lds	r18, 0x0102
    17be:	30 91 03 01 	lds	r19, 0x0103
    17c2:	30 93 f9 02 	sts	0x02F9, r19
    17c6:	20 93 f8 02 	sts	0x02F8, r18
    17ca:	20 91 00 01 	lds	r18, 0x0100
    17ce:	30 91 01 01 	lds	r19, 0x0101
    17d2:	21 15       	cp	r18, r1
    17d4:	31 05       	cpc	r19, r1
    17d6:	41 f4       	brne	.+16     	; 0x17e8 <malloc+0xee>
    17d8:	2d b7       	in	r18, 0x3d	; 61
    17da:	3e b7       	in	r19, 0x3e	; 62
    17dc:	40 91 04 01 	lds	r20, 0x0104
    17e0:	50 91 05 01 	lds	r21, 0x0105
    17e4:	24 1b       	sub	r18, r20
    17e6:	35 0b       	sbc	r19, r21
    17e8:	e0 91 f8 02 	lds	r30, 0x02F8
    17ec:	f0 91 f9 02 	lds	r31, 0x02F9
    17f0:	e2 17       	cp	r30, r18
    17f2:	f3 07       	cpc	r31, r19
    17f4:	a0 f4       	brcc	.+40     	; 0x181e <malloc+0x124>
    17f6:	2e 1b       	sub	r18, r30
    17f8:	3f 0b       	sbc	r19, r31
    17fa:	28 17       	cp	r18, r24
    17fc:	39 07       	cpc	r19, r25
    17fe:	78 f0       	brcs	.+30     	; 0x181e <malloc+0x124>
    1800:	ac 01       	movw	r20, r24
    1802:	4e 5f       	subi	r20, 0xFE	; 254
    1804:	5f 4f       	sbci	r21, 0xFF	; 255
    1806:	24 17       	cp	r18, r20
    1808:	35 07       	cpc	r19, r21
    180a:	48 f0       	brcs	.+18     	; 0x181e <malloc+0x124>
    180c:	4e 0f       	add	r20, r30
    180e:	5f 1f       	adc	r21, r31
    1810:	50 93 f9 02 	sts	0x02F9, r21
    1814:	40 93 f8 02 	sts	0x02F8, r20
    1818:	81 93       	st	Z+, r24
    181a:	91 93       	st	Z+, r25
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <malloc+0x128>
    181e:	e0 e0       	ldi	r30, 0x00	; 0
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	cf 01       	movw	r24, r30
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	08 95       	ret

0000182a <free>:
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	09 f4       	brne	.+2      	; 0x1834 <free+0xa>
    1832:	87 c0       	rjmp	.+270    	; 0x1942 <free+0x118>
    1834:	fc 01       	movw	r30, r24
    1836:	32 97       	sbiw	r30, 0x02	; 2
    1838:	13 82       	std	Z+3, r1	; 0x03
    183a:	12 82       	std	Z+2, r1	; 0x02
    183c:	c0 91 fa 02 	lds	r28, 0x02FA
    1840:	d0 91 fb 02 	lds	r29, 0x02FB
    1844:	20 97       	sbiw	r28, 0x00	; 0
    1846:	81 f4       	brne	.+32     	; 0x1868 <free+0x3e>
    1848:	20 81       	ld	r18, Z
    184a:	31 81       	ldd	r19, Z+1	; 0x01
    184c:	28 0f       	add	r18, r24
    184e:	39 1f       	adc	r19, r25
    1850:	80 91 f8 02 	lds	r24, 0x02F8
    1854:	90 91 f9 02 	lds	r25, 0x02F9
    1858:	82 17       	cp	r24, r18
    185a:	93 07       	cpc	r25, r19
    185c:	79 f5       	brne	.+94     	; 0x18bc <free+0x92>
    185e:	f0 93 f9 02 	sts	0x02F9, r31
    1862:	e0 93 f8 02 	sts	0x02F8, r30
    1866:	6d c0       	rjmp	.+218    	; 0x1942 <free+0x118>
    1868:	de 01       	movw	r26, r28
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	ae 17       	cp	r26, r30
    1870:	bf 07       	cpc	r27, r31
    1872:	50 f4       	brcc	.+20     	; 0x1888 <free+0x5e>
    1874:	12 96       	adiw	r26, 0x02	; 2
    1876:	4d 91       	ld	r20, X+
    1878:	5c 91       	ld	r21, X
    187a:	13 97       	sbiw	r26, 0x03	; 3
    187c:	9d 01       	movw	r18, r26
    187e:	41 15       	cp	r20, r1
    1880:	51 05       	cpc	r21, r1
    1882:	09 f1       	breq	.+66     	; 0x18c6 <free+0x9c>
    1884:	da 01       	movw	r26, r20
    1886:	f3 cf       	rjmp	.-26     	; 0x186e <free+0x44>
    1888:	b3 83       	std	Z+3, r27	; 0x03
    188a:	a2 83       	std	Z+2, r26	; 0x02
    188c:	40 81       	ld	r20, Z
    188e:	51 81       	ldd	r21, Z+1	; 0x01
    1890:	84 0f       	add	r24, r20
    1892:	95 1f       	adc	r25, r21
    1894:	8a 17       	cp	r24, r26
    1896:	9b 07       	cpc	r25, r27
    1898:	71 f4       	brne	.+28     	; 0x18b6 <free+0x8c>
    189a:	8d 91       	ld	r24, X+
    189c:	9c 91       	ld	r25, X
    189e:	11 97       	sbiw	r26, 0x01	; 1
    18a0:	84 0f       	add	r24, r20
    18a2:	95 1f       	adc	r25, r21
    18a4:	02 96       	adiw	r24, 0x02	; 2
    18a6:	91 83       	std	Z+1, r25	; 0x01
    18a8:	80 83       	st	Z, r24
    18aa:	12 96       	adiw	r26, 0x02	; 2
    18ac:	8d 91       	ld	r24, X+
    18ae:	9c 91       	ld	r25, X
    18b0:	13 97       	sbiw	r26, 0x03	; 3
    18b2:	93 83       	std	Z+3, r25	; 0x03
    18b4:	82 83       	std	Z+2, r24	; 0x02
    18b6:	21 15       	cp	r18, r1
    18b8:	31 05       	cpc	r19, r1
    18ba:	29 f4       	brne	.+10     	; 0x18c6 <free+0x9c>
    18bc:	f0 93 fb 02 	sts	0x02FB, r31
    18c0:	e0 93 fa 02 	sts	0x02FA, r30
    18c4:	3e c0       	rjmp	.+124    	; 0x1942 <free+0x118>
    18c6:	d9 01       	movw	r26, r18
    18c8:	13 96       	adiw	r26, 0x03	; 3
    18ca:	fc 93       	st	X, r31
    18cc:	ee 93       	st	-X, r30
    18ce:	12 97       	sbiw	r26, 0x02	; 2
    18d0:	4d 91       	ld	r20, X+
    18d2:	5d 91       	ld	r21, X+
    18d4:	a4 0f       	add	r26, r20
    18d6:	b5 1f       	adc	r27, r21
    18d8:	ea 17       	cp	r30, r26
    18da:	fb 07       	cpc	r31, r27
    18dc:	79 f4       	brne	.+30     	; 0x18fc <free+0xd2>
    18de:	80 81       	ld	r24, Z
    18e0:	91 81       	ldd	r25, Z+1	; 0x01
    18e2:	84 0f       	add	r24, r20
    18e4:	95 1f       	adc	r25, r21
    18e6:	02 96       	adiw	r24, 0x02	; 2
    18e8:	d9 01       	movw	r26, r18
    18ea:	11 96       	adiw	r26, 0x01	; 1
    18ec:	9c 93       	st	X, r25
    18ee:	8e 93       	st	-X, r24
    18f0:	82 81       	ldd	r24, Z+2	; 0x02
    18f2:	93 81       	ldd	r25, Z+3	; 0x03
    18f4:	13 96       	adiw	r26, 0x03	; 3
    18f6:	9c 93       	st	X, r25
    18f8:	8e 93       	st	-X, r24
    18fa:	12 97       	sbiw	r26, 0x02	; 2
    18fc:	e0 e0       	ldi	r30, 0x00	; 0
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	9b 81       	ldd	r25, Y+3	; 0x03
    1904:	00 97       	sbiw	r24, 0x00	; 0
    1906:	19 f0       	breq	.+6      	; 0x190e <free+0xe4>
    1908:	fe 01       	movw	r30, r28
    190a:	ec 01       	movw	r28, r24
    190c:	f9 cf       	rjmp	.-14     	; 0x1900 <free+0xd6>
    190e:	ce 01       	movw	r24, r28
    1910:	02 96       	adiw	r24, 0x02	; 2
    1912:	28 81       	ld	r18, Y
    1914:	39 81       	ldd	r19, Y+1	; 0x01
    1916:	82 0f       	add	r24, r18
    1918:	93 1f       	adc	r25, r19
    191a:	20 91 f8 02 	lds	r18, 0x02F8
    191e:	30 91 f9 02 	lds	r19, 0x02F9
    1922:	28 17       	cp	r18, r24
    1924:	39 07       	cpc	r19, r25
    1926:	69 f4       	brne	.+26     	; 0x1942 <free+0x118>
    1928:	30 97       	sbiw	r30, 0x00	; 0
    192a:	29 f4       	brne	.+10     	; 0x1936 <free+0x10c>
    192c:	10 92 fb 02 	sts	0x02FB, r1
    1930:	10 92 fa 02 	sts	0x02FA, r1
    1934:	02 c0       	rjmp	.+4      	; 0x193a <free+0x110>
    1936:	13 82       	std	Z+3, r1	; 0x03
    1938:	12 82       	std	Z+2, r1	; 0x02
    193a:	d0 93 f9 02 	sts	0x02F9, r29
    193e:	c0 93 f8 02 	sts	0x02F8, r28
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	08 95       	ret

00001948 <fdevopen>:
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	cf 93       	push	r28
    194e:	df 93       	push	r29
    1950:	ec 01       	movw	r28, r24
    1952:	8b 01       	movw	r16, r22
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	31 f4       	brne	.+12     	; 0x1964 <fdevopen+0x1c>
    1958:	61 15       	cp	r22, r1
    195a:	71 05       	cpc	r23, r1
    195c:	19 f4       	brne	.+6      	; 0x1964 <fdevopen+0x1c>
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	37 c0       	rjmp	.+110    	; 0x19d2 <fdevopen+0x8a>
    1964:	6e e0       	ldi	r22, 0x0E	; 14
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	3d d2       	rcall	.+1146   	; 0x1de8 <calloc>
    196e:	fc 01       	movw	r30, r24
    1970:	00 97       	sbiw	r24, 0x00	; 0
    1972:	a9 f3       	breq	.-22     	; 0x195e <fdevopen+0x16>
    1974:	80 e8       	ldi	r24, 0x80	; 128
    1976:	83 83       	std	Z+3, r24	; 0x03
    1978:	01 15       	cp	r16, r1
    197a:	11 05       	cpc	r17, r1
    197c:	71 f0       	breq	.+28     	; 0x199a <fdevopen+0x52>
    197e:	13 87       	std	Z+11, r17	; 0x0b
    1980:	02 87       	std	Z+10, r16	; 0x0a
    1982:	81 e8       	ldi	r24, 0x81	; 129
    1984:	83 83       	std	Z+3, r24	; 0x03
    1986:	80 91 fc 02 	lds	r24, 0x02FC
    198a:	90 91 fd 02 	lds	r25, 0x02FD
    198e:	89 2b       	or	r24, r25
    1990:	21 f4       	brne	.+8      	; 0x199a <fdevopen+0x52>
    1992:	f0 93 fd 02 	sts	0x02FD, r31
    1996:	e0 93 fc 02 	sts	0x02FC, r30
    199a:	20 97       	sbiw	r28, 0x00	; 0
    199c:	c9 f0       	breq	.+50     	; 0x19d0 <fdevopen+0x88>
    199e:	d1 87       	std	Z+9, r29	; 0x09
    19a0:	c0 87       	std	Z+8, r28	; 0x08
    19a2:	83 81       	ldd	r24, Z+3	; 0x03
    19a4:	82 60       	ori	r24, 0x02	; 2
    19a6:	83 83       	std	Z+3, r24	; 0x03
    19a8:	80 91 fe 02 	lds	r24, 0x02FE
    19ac:	90 91 ff 02 	lds	r25, 0x02FF
    19b0:	89 2b       	or	r24, r25
    19b2:	71 f4       	brne	.+28     	; 0x19d0 <fdevopen+0x88>
    19b4:	f0 93 ff 02 	sts	0x02FF, r31
    19b8:	e0 93 fe 02 	sts	0x02FE, r30
    19bc:	80 91 00 03 	lds	r24, 0x0300
    19c0:	90 91 01 03 	lds	r25, 0x0301
    19c4:	89 2b       	or	r24, r25
    19c6:	21 f4       	brne	.+8      	; 0x19d0 <fdevopen+0x88>
    19c8:	f0 93 01 03 	sts	0x0301, r31
    19cc:	e0 93 00 03 	sts	0x0300, r30
    19d0:	cf 01       	movw	r24, r30
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	1f 91       	pop	r17
    19d8:	0f 91       	pop	r16
    19da:	08 95       	ret

000019dc <printf>:
    19dc:	a0 e0       	ldi	r26, 0x00	; 0
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e3 ef       	ldi	r30, 0xF3	; 243
    19e2:	fc e0       	ldi	r31, 0x0C	; 12
    19e4:	d8 c2       	rjmp	.+1456   	; 0x1f96 <__prologue_saves__+0x20>
    19e6:	fe 01       	movw	r30, r28
    19e8:	35 96       	adiw	r30, 0x05	; 5
    19ea:	61 91       	ld	r22, Z+
    19ec:	71 91       	ld	r23, Z+
    19ee:	af 01       	movw	r20, r30
    19f0:	80 91 fe 02 	lds	r24, 0x02FE
    19f4:	90 91 ff 02 	lds	r25, 0x02FF
    19f8:	34 d0       	rcall	.+104    	; 0x1a62 <vfprintf>
    19fa:	e2 e0       	ldi	r30, 0x02	; 2
    19fc:	e8 c2       	rjmp	.+1488   	; 0x1fce <__epilogue_restores__+0x20>

000019fe <putchar>:
    19fe:	60 91 fe 02 	lds	r22, 0x02FE
    1a02:	70 91 ff 02 	lds	r23, 0x02FF
    1a06:	27 c2       	rjmp	.+1102   	; 0x1e56 <fputc>

00001a08 <puts>:
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	e0 91 fe 02 	lds	r30, 0x02FE
    1a14:	f0 91 ff 02 	lds	r31, 0x02FF
    1a18:	23 81       	ldd	r18, Z+3	; 0x03
    1a1a:	21 ff       	sbrs	r18, 1
    1a1c:	1b c0       	rjmp	.+54     	; 0x1a54 <puts+0x4c>
    1a1e:	ec 01       	movw	r28, r24
    1a20:	00 e0       	ldi	r16, 0x00	; 0
    1a22:	10 e0       	ldi	r17, 0x00	; 0
    1a24:	89 91       	ld	r24, Y+
    1a26:	60 91 fe 02 	lds	r22, 0x02FE
    1a2a:	70 91 ff 02 	lds	r23, 0x02FF
    1a2e:	db 01       	movw	r26, r22
    1a30:	18 96       	adiw	r26, 0x08	; 8
    1a32:	ed 91       	ld	r30, X+
    1a34:	fc 91       	ld	r31, X
    1a36:	19 97       	sbiw	r26, 0x09	; 9
    1a38:	88 23       	and	r24, r24
    1a3a:	31 f0       	breq	.+12     	; 0x1a48 <puts+0x40>
    1a3c:	09 95       	icall
    1a3e:	89 2b       	or	r24, r25
    1a40:	89 f3       	breq	.-30     	; 0x1a24 <puts+0x1c>
    1a42:	0f ef       	ldi	r16, 0xFF	; 255
    1a44:	1f ef       	ldi	r17, 0xFF	; 255
    1a46:	ee cf       	rjmp	.-36     	; 0x1a24 <puts+0x1c>
    1a48:	8a e0       	ldi	r24, 0x0A	; 10
    1a4a:	09 95       	icall
    1a4c:	89 2b       	or	r24, r25
    1a4e:	11 f4       	brne	.+4      	; 0x1a54 <puts+0x4c>
    1a50:	c8 01       	movw	r24, r16
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <puts+0x50>
    1a54:	8f ef       	ldi	r24, 0xFF	; 255
    1a56:	9f ef       	ldi	r25, 0xFF	; 255
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	1f 91       	pop	r17
    1a5e:	0f 91       	pop	r16
    1a60:	08 95       	ret

00001a62 <vfprintf>:
    1a62:	ac e0       	ldi	r26, 0x0C	; 12
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e6 e3       	ldi	r30, 0x36	; 54
    1a68:	fd e0       	ldi	r31, 0x0D	; 13
    1a6a:	85 c2       	rjmp	.+1290   	; 0x1f76 <__prologue_saves__>
    1a6c:	7c 01       	movw	r14, r24
    1a6e:	6b 01       	movw	r12, r22
    1a70:	8a 01       	movw	r16, r20
    1a72:	fc 01       	movw	r30, r24
    1a74:	17 82       	std	Z+7, r1	; 0x07
    1a76:	16 82       	std	Z+6, r1	; 0x06
    1a78:	83 81       	ldd	r24, Z+3	; 0x03
    1a7a:	81 ff       	sbrs	r24, 1
    1a7c:	b0 c1       	rjmp	.+864    	; 0x1dde <vfprintf+0x37c>
    1a7e:	ce 01       	movw	r24, r28
    1a80:	01 96       	adiw	r24, 0x01	; 1
    1a82:	4c 01       	movw	r8, r24
    1a84:	f7 01       	movw	r30, r14
    1a86:	93 81       	ldd	r25, Z+3	; 0x03
    1a88:	f6 01       	movw	r30, r12
    1a8a:	93 fd       	sbrc	r25, 3
    1a8c:	85 91       	lpm	r24, Z+
    1a8e:	93 ff       	sbrs	r25, 3
    1a90:	81 91       	ld	r24, Z+
    1a92:	6f 01       	movw	r12, r30
    1a94:	88 23       	and	r24, r24
    1a96:	09 f4       	brne	.+2      	; 0x1a9a <vfprintf+0x38>
    1a98:	9e c1       	rjmp	.+828    	; 0x1dd6 <vfprintf+0x374>
    1a9a:	85 32       	cpi	r24, 0x25	; 37
    1a9c:	39 f4       	brne	.+14     	; 0x1aac <vfprintf+0x4a>
    1a9e:	93 fd       	sbrc	r25, 3
    1aa0:	85 91       	lpm	r24, Z+
    1aa2:	93 ff       	sbrs	r25, 3
    1aa4:	81 91       	ld	r24, Z+
    1aa6:	6f 01       	movw	r12, r30
    1aa8:	85 32       	cpi	r24, 0x25	; 37
    1aaa:	21 f4       	brne	.+8      	; 0x1ab4 <vfprintf+0x52>
    1aac:	b7 01       	movw	r22, r14
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	d2 d1       	rcall	.+932    	; 0x1e56 <fputc>
    1ab2:	e8 cf       	rjmp	.-48     	; 0x1a84 <vfprintf+0x22>
    1ab4:	51 2c       	mov	r5, r1
    1ab6:	31 2c       	mov	r3, r1
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	20 32       	cpi	r18, 0x20	; 32
    1abc:	a0 f4       	brcc	.+40     	; 0x1ae6 <vfprintf+0x84>
    1abe:	8b 32       	cpi	r24, 0x2B	; 43
    1ac0:	69 f0       	breq	.+26     	; 0x1adc <vfprintf+0x7a>
    1ac2:	30 f4       	brcc	.+12     	; 0x1ad0 <vfprintf+0x6e>
    1ac4:	80 32       	cpi	r24, 0x20	; 32
    1ac6:	59 f0       	breq	.+22     	; 0x1ade <vfprintf+0x7c>
    1ac8:	83 32       	cpi	r24, 0x23	; 35
    1aca:	69 f4       	brne	.+26     	; 0x1ae6 <vfprintf+0x84>
    1acc:	20 61       	ori	r18, 0x10	; 16
    1ace:	2c c0       	rjmp	.+88     	; 0x1b28 <vfprintf+0xc6>
    1ad0:	8d 32       	cpi	r24, 0x2D	; 45
    1ad2:	39 f0       	breq	.+14     	; 0x1ae2 <vfprintf+0x80>
    1ad4:	80 33       	cpi	r24, 0x30	; 48
    1ad6:	39 f4       	brne	.+14     	; 0x1ae6 <vfprintf+0x84>
    1ad8:	21 60       	ori	r18, 0x01	; 1
    1ada:	26 c0       	rjmp	.+76     	; 0x1b28 <vfprintf+0xc6>
    1adc:	22 60       	ori	r18, 0x02	; 2
    1ade:	24 60       	ori	r18, 0x04	; 4
    1ae0:	23 c0       	rjmp	.+70     	; 0x1b28 <vfprintf+0xc6>
    1ae2:	28 60       	ori	r18, 0x08	; 8
    1ae4:	21 c0       	rjmp	.+66     	; 0x1b28 <vfprintf+0xc6>
    1ae6:	27 fd       	sbrc	r18, 7
    1ae8:	27 c0       	rjmp	.+78     	; 0x1b38 <vfprintf+0xd6>
    1aea:	30 ed       	ldi	r19, 0xD0	; 208
    1aec:	38 0f       	add	r19, r24
    1aee:	3a 30       	cpi	r19, 0x0A	; 10
    1af0:	78 f4       	brcc	.+30     	; 0x1b10 <vfprintf+0xae>
    1af2:	26 ff       	sbrs	r18, 6
    1af4:	06 c0       	rjmp	.+12     	; 0x1b02 <vfprintf+0xa0>
    1af6:	fa e0       	ldi	r31, 0x0A	; 10
    1af8:	5f 9e       	mul	r5, r31
    1afa:	30 0d       	add	r19, r0
    1afc:	11 24       	eor	r1, r1
    1afe:	53 2e       	mov	r5, r19
    1b00:	13 c0       	rjmp	.+38     	; 0x1b28 <vfprintf+0xc6>
    1b02:	8a e0       	ldi	r24, 0x0A	; 10
    1b04:	38 9e       	mul	r3, r24
    1b06:	30 0d       	add	r19, r0
    1b08:	11 24       	eor	r1, r1
    1b0a:	33 2e       	mov	r3, r19
    1b0c:	20 62       	ori	r18, 0x20	; 32
    1b0e:	0c c0       	rjmp	.+24     	; 0x1b28 <vfprintf+0xc6>
    1b10:	8e 32       	cpi	r24, 0x2E	; 46
    1b12:	21 f4       	brne	.+8      	; 0x1b1c <vfprintf+0xba>
    1b14:	26 fd       	sbrc	r18, 6
    1b16:	5f c1       	rjmp	.+702    	; 0x1dd6 <vfprintf+0x374>
    1b18:	20 64       	ori	r18, 0x40	; 64
    1b1a:	06 c0       	rjmp	.+12     	; 0x1b28 <vfprintf+0xc6>
    1b1c:	8c 36       	cpi	r24, 0x6C	; 108
    1b1e:	11 f4       	brne	.+4      	; 0x1b24 <vfprintf+0xc2>
    1b20:	20 68       	ori	r18, 0x80	; 128
    1b22:	02 c0       	rjmp	.+4      	; 0x1b28 <vfprintf+0xc6>
    1b24:	88 36       	cpi	r24, 0x68	; 104
    1b26:	41 f4       	brne	.+16     	; 0x1b38 <vfprintf+0xd6>
    1b28:	f6 01       	movw	r30, r12
    1b2a:	93 fd       	sbrc	r25, 3
    1b2c:	85 91       	lpm	r24, Z+
    1b2e:	93 ff       	sbrs	r25, 3
    1b30:	81 91       	ld	r24, Z+
    1b32:	6f 01       	movw	r12, r30
    1b34:	81 11       	cpse	r24, r1
    1b36:	c1 cf       	rjmp	.-126    	; 0x1aba <vfprintf+0x58>
    1b38:	98 2f       	mov	r25, r24
    1b3a:	9f 7d       	andi	r25, 0xDF	; 223
    1b3c:	95 54       	subi	r25, 0x45	; 69
    1b3e:	93 30       	cpi	r25, 0x03	; 3
    1b40:	28 f4       	brcc	.+10     	; 0x1b4c <vfprintf+0xea>
    1b42:	0c 5f       	subi	r16, 0xFC	; 252
    1b44:	1f 4f       	sbci	r17, 0xFF	; 255
    1b46:	ff e3       	ldi	r31, 0x3F	; 63
    1b48:	f9 83       	std	Y+1, r31	; 0x01
    1b4a:	0d c0       	rjmp	.+26     	; 0x1b66 <vfprintf+0x104>
    1b4c:	83 36       	cpi	r24, 0x63	; 99
    1b4e:	31 f0       	breq	.+12     	; 0x1b5c <vfprintf+0xfa>
    1b50:	83 37       	cpi	r24, 0x73	; 115
    1b52:	71 f0       	breq	.+28     	; 0x1b70 <vfprintf+0x10e>
    1b54:	83 35       	cpi	r24, 0x53	; 83
    1b56:	09 f0       	breq	.+2      	; 0x1b5a <vfprintf+0xf8>
    1b58:	57 c0       	rjmp	.+174    	; 0x1c08 <vfprintf+0x1a6>
    1b5a:	21 c0       	rjmp	.+66     	; 0x1b9e <vfprintf+0x13c>
    1b5c:	f8 01       	movw	r30, r16
    1b5e:	80 81       	ld	r24, Z
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	0e 5f       	subi	r16, 0xFE	; 254
    1b64:	1f 4f       	sbci	r17, 0xFF	; 255
    1b66:	44 24       	eor	r4, r4
    1b68:	43 94       	inc	r4
    1b6a:	51 2c       	mov	r5, r1
    1b6c:	54 01       	movw	r10, r8
    1b6e:	14 c0       	rjmp	.+40     	; 0x1b98 <vfprintf+0x136>
    1b70:	38 01       	movw	r6, r16
    1b72:	f2 e0       	ldi	r31, 0x02	; 2
    1b74:	6f 0e       	add	r6, r31
    1b76:	71 1c       	adc	r7, r1
    1b78:	f8 01       	movw	r30, r16
    1b7a:	a0 80       	ld	r10, Z
    1b7c:	b1 80       	ldd	r11, Z+1	; 0x01
    1b7e:	26 ff       	sbrs	r18, 6
    1b80:	03 c0       	rjmp	.+6      	; 0x1b88 <vfprintf+0x126>
    1b82:	65 2d       	mov	r22, r5
    1b84:	70 e0       	ldi	r23, 0x00	; 0
    1b86:	02 c0       	rjmp	.+4      	; 0x1b8c <vfprintf+0x12a>
    1b88:	6f ef       	ldi	r22, 0xFF	; 255
    1b8a:	7f ef       	ldi	r23, 0xFF	; 255
    1b8c:	c5 01       	movw	r24, r10
    1b8e:	2c 87       	std	Y+12, r18	; 0x0c
    1b90:	57 d1       	rcall	.+686    	; 0x1e40 <strnlen>
    1b92:	2c 01       	movw	r4, r24
    1b94:	83 01       	movw	r16, r6
    1b96:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b98:	2f 77       	andi	r18, 0x7F	; 127
    1b9a:	22 2e       	mov	r2, r18
    1b9c:	16 c0       	rjmp	.+44     	; 0x1bca <vfprintf+0x168>
    1b9e:	38 01       	movw	r6, r16
    1ba0:	f2 e0       	ldi	r31, 0x02	; 2
    1ba2:	6f 0e       	add	r6, r31
    1ba4:	71 1c       	adc	r7, r1
    1ba6:	f8 01       	movw	r30, r16
    1ba8:	a0 80       	ld	r10, Z
    1baa:	b1 80       	ldd	r11, Z+1	; 0x01
    1bac:	26 ff       	sbrs	r18, 6
    1bae:	03 c0       	rjmp	.+6      	; 0x1bb6 <vfprintf+0x154>
    1bb0:	65 2d       	mov	r22, r5
    1bb2:	70 e0       	ldi	r23, 0x00	; 0
    1bb4:	02 c0       	rjmp	.+4      	; 0x1bba <vfprintf+0x158>
    1bb6:	6f ef       	ldi	r22, 0xFF	; 255
    1bb8:	7f ef       	ldi	r23, 0xFF	; 255
    1bba:	c5 01       	movw	r24, r10
    1bbc:	2c 87       	std	Y+12, r18	; 0x0c
    1bbe:	2e d1       	rcall	.+604    	; 0x1e1c <strnlen_P>
    1bc0:	2c 01       	movw	r4, r24
    1bc2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1bc4:	20 68       	ori	r18, 0x80	; 128
    1bc6:	22 2e       	mov	r2, r18
    1bc8:	83 01       	movw	r16, r6
    1bca:	23 fc       	sbrc	r2, 3
    1bcc:	19 c0       	rjmp	.+50     	; 0x1c00 <vfprintf+0x19e>
    1bce:	83 2d       	mov	r24, r3
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	48 16       	cp	r4, r24
    1bd4:	59 06       	cpc	r5, r25
    1bd6:	a0 f4       	brcc	.+40     	; 0x1c00 <vfprintf+0x19e>
    1bd8:	b7 01       	movw	r22, r14
    1bda:	80 e2       	ldi	r24, 0x20	; 32
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	3b d1       	rcall	.+630    	; 0x1e56 <fputc>
    1be0:	3a 94       	dec	r3
    1be2:	f5 cf       	rjmp	.-22     	; 0x1bce <vfprintf+0x16c>
    1be4:	f5 01       	movw	r30, r10
    1be6:	27 fc       	sbrc	r2, 7
    1be8:	85 91       	lpm	r24, Z+
    1bea:	27 fe       	sbrs	r2, 7
    1bec:	81 91       	ld	r24, Z+
    1bee:	5f 01       	movw	r10, r30
    1bf0:	b7 01       	movw	r22, r14
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	30 d1       	rcall	.+608    	; 0x1e56 <fputc>
    1bf6:	31 10       	cpse	r3, r1
    1bf8:	3a 94       	dec	r3
    1bfa:	f1 e0       	ldi	r31, 0x01	; 1
    1bfc:	4f 1a       	sub	r4, r31
    1bfe:	51 08       	sbc	r5, r1
    1c00:	41 14       	cp	r4, r1
    1c02:	51 04       	cpc	r5, r1
    1c04:	79 f7       	brne	.-34     	; 0x1be4 <vfprintf+0x182>
    1c06:	de c0       	rjmp	.+444    	; 0x1dc4 <vfprintf+0x362>
    1c08:	84 36       	cpi	r24, 0x64	; 100
    1c0a:	11 f0       	breq	.+4      	; 0x1c10 <vfprintf+0x1ae>
    1c0c:	89 36       	cpi	r24, 0x69	; 105
    1c0e:	31 f5       	brne	.+76     	; 0x1c5c <vfprintf+0x1fa>
    1c10:	f8 01       	movw	r30, r16
    1c12:	27 ff       	sbrs	r18, 7
    1c14:	07 c0       	rjmp	.+14     	; 0x1c24 <vfprintf+0x1c2>
    1c16:	60 81       	ld	r22, Z
    1c18:	71 81       	ldd	r23, Z+1	; 0x01
    1c1a:	82 81       	ldd	r24, Z+2	; 0x02
    1c1c:	93 81       	ldd	r25, Z+3	; 0x03
    1c1e:	0c 5f       	subi	r16, 0xFC	; 252
    1c20:	1f 4f       	sbci	r17, 0xFF	; 255
    1c22:	08 c0       	rjmp	.+16     	; 0x1c34 <vfprintf+0x1d2>
    1c24:	60 81       	ld	r22, Z
    1c26:	71 81       	ldd	r23, Z+1	; 0x01
    1c28:	88 27       	eor	r24, r24
    1c2a:	77 fd       	sbrc	r23, 7
    1c2c:	80 95       	com	r24
    1c2e:	98 2f       	mov	r25, r24
    1c30:	0e 5f       	subi	r16, 0xFE	; 254
    1c32:	1f 4f       	sbci	r17, 0xFF	; 255
    1c34:	2f 76       	andi	r18, 0x6F	; 111
    1c36:	b2 2e       	mov	r11, r18
    1c38:	97 ff       	sbrs	r25, 7
    1c3a:	09 c0       	rjmp	.+18     	; 0x1c4e <vfprintf+0x1ec>
    1c3c:	90 95       	com	r25
    1c3e:	80 95       	com	r24
    1c40:	70 95       	com	r23
    1c42:	61 95       	neg	r22
    1c44:	7f 4f       	sbci	r23, 0xFF	; 255
    1c46:	8f 4f       	sbci	r24, 0xFF	; 255
    1c48:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4a:	20 68       	ori	r18, 0x80	; 128
    1c4c:	b2 2e       	mov	r11, r18
    1c4e:	2a e0       	ldi	r18, 0x0A	; 10
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	a4 01       	movw	r20, r8
    1c54:	32 d1       	rcall	.+612    	; 0x1eba <__ultoa_invert>
    1c56:	a8 2e       	mov	r10, r24
    1c58:	a8 18       	sub	r10, r8
    1c5a:	43 c0       	rjmp	.+134    	; 0x1ce2 <vfprintf+0x280>
    1c5c:	85 37       	cpi	r24, 0x75	; 117
    1c5e:	29 f4       	brne	.+10     	; 0x1c6a <vfprintf+0x208>
    1c60:	2f 7e       	andi	r18, 0xEF	; 239
    1c62:	b2 2e       	mov	r11, r18
    1c64:	2a e0       	ldi	r18, 0x0A	; 10
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	25 c0       	rjmp	.+74     	; 0x1cb4 <vfprintf+0x252>
    1c6a:	f2 2f       	mov	r31, r18
    1c6c:	f9 7f       	andi	r31, 0xF9	; 249
    1c6e:	bf 2e       	mov	r11, r31
    1c70:	8f 36       	cpi	r24, 0x6F	; 111
    1c72:	c1 f0       	breq	.+48     	; 0x1ca4 <vfprintf+0x242>
    1c74:	18 f4       	brcc	.+6      	; 0x1c7c <vfprintf+0x21a>
    1c76:	88 35       	cpi	r24, 0x58	; 88
    1c78:	79 f0       	breq	.+30     	; 0x1c98 <vfprintf+0x236>
    1c7a:	ad c0       	rjmp	.+346    	; 0x1dd6 <vfprintf+0x374>
    1c7c:	80 37       	cpi	r24, 0x70	; 112
    1c7e:	19 f0       	breq	.+6      	; 0x1c86 <vfprintf+0x224>
    1c80:	88 37       	cpi	r24, 0x78	; 120
    1c82:	21 f0       	breq	.+8      	; 0x1c8c <vfprintf+0x22a>
    1c84:	a8 c0       	rjmp	.+336    	; 0x1dd6 <vfprintf+0x374>
    1c86:	2f 2f       	mov	r18, r31
    1c88:	20 61       	ori	r18, 0x10	; 16
    1c8a:	b2 2e       	mov	r11, r18
    1c8c:	b4 fe       	sbrs	r11, 4
    1c8e:	0d c0       	rjmp	.+26     	; 0x1caa <vfprintf+0x248>
    1c90:	8b 2d       	mov	r24, r11
    1c92:	84 60       	ori	r24, 0x04	; 4
    1c94:	b8 2e       	mov	r11, r24
    1c96:	09 c0       	rjmp	.+18     	; 0x1caa <vfprintf+0x248>
    1c98:	24 ff       	sbrs	r18, 4
    1c9a:	0a c0       	rjmp	.+20     	; 0x1cb0 <vfprintf+0x24e>
    1c9c:	9f 2f       	mov	r25, r31
    1c9e:	96 60       	ori	r25, 0x06	; 6
    1ca0:	b9 2e       	mov	r11, r25
    1ca2:	06 c0       	rjmp	.+12     	; 0x1cb0 <vfprintf+0x24e>
    1ca4:	28 e0       	ldi	r18, 0x08	; 8
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	05 c0       	rjmp	.+10     	; 0x1cb4 <vfprintf+0x252>
    1caa:	20 e1       	ldi	r18, 0x10	; 16
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <vfprintf+0x252>
    1cb0:	20 e1       	ldi	r18, 0x10	; 16
    1cb2:	32 e0       	ldi	r19, 0x02	; 2
    1cb4:	f8 01       	movw	r30, r16
    1cb6:	b7 fe       	sbrs	r11, 7
    1cb8:	07 c0       	rjmp	.+14     	; 0x1cc8 <vfprintf+0x266>
    1cba:	60 81       	ld	r22, Z
    1cbc:	71 81       	ldd	r23, Z+1	; 0x01
    1cbe:	82 81       	ldd	r24, Z+2	; 0x02
    1cc0:	93 81       	ldd	r25, Z+3	; 0x03
    1cc2:	0c 5f       	subi	r16, 0xFC	; 252
    1cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc6:	06 c0       	rjmp	.+12     	; 0x1cd4 <vfprintf+0x272>
    1cc8:	60 81       	ld	r22, Z
    1cca:	71 81       	ldd	r23, Z+1	; 0x01
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	0e 5f       	subi	r16, 0xFE	; 254
    1cd2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd4:	a4 01       	movw	r20, r8
    1cd6:	f1 d0       	rcall	.+482    	; 0x1eba <__ultoa_invert>
    1cd8:	a8 2e       	mov	r10, r24
    1cda:	a8 18       	sub	r10, r8
    1cdc:	fb 2d       	mov	r31, r11
    1cde:	ff 77       	andi	r31, 0x7F	; 127
    1ce0:	bf 2e       	mov	r11, r31
    1ce2:	b6 fe       	sbrs	r11, 6
    1ce4:	0b c0       	rjmp	.+22     	; 0x1cfc <vfprintf+0x29a>
    1ce6:	2b 2d       	mov	r18, r11
    1ce8:	2e 7f       	andi	r18, 0xFE	; 254
    1cea:	a5 14       	cp	r10, r5
    1cec:	50 f4       	brcc	.+20     	; 0x1d02 <vfprintf+0x2a0>
    1cee:	b4 fe       	sbrs	r11, 4
    1cf0:	0a c0       	rjmp	.+20     	; 0x1d06 <vfprintf+0x2a4>
    1cf2:	b2 fc       	sbrc	r11, 2
    1cf4:	08 c0       	rjmp	.+16     	; 0x1d06 <vfprintf+0x2a4>
    1cf6:	2b 2d       	mov	r18, r11
    1cf8:	2e 7e       	andi	r18, 0xEE	; 238
    1cfa:	05 c0       	rjmp	.+10     	; 0x1d06 <vfprintf+0x2a4>
    1cfc:	7a 2c       	mov	r7, r10
    1cfe:	2b 2d       	mov	r18, r11
    1d00:	03 c0       	rjmp	.+6      	; 0x1d08 <vfprintf+0x2a6>
    1d02:	7a 2c       	mov	r7, r10
    1d04:	01 c0       	rjmp	.+2      	; 0x1d08 <vfprintf+0x2a6>
    1d06:	75 2c       	mov	r7, r5
    1d08:	24 ff       	sbrs	r18, 4
    1d0a:	0d c0       	rjmp	.+26     	; 0x1d26 <vfprintf+0x2c4>
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	ea 0d       	add	r30, r10
    1d10:	f1 1d       	adc	r31, r1
    1d12:	80 81       	ld	r24, Z
    1d14:	80 33       	cpi	r24, 0x30	; 48
    1d16:	11 f4       	brne	.+4      	; 0x1d1c <vfprintf+0x2ba>
    1d18:	29 7e       	andi	r18, 0xE9	; 233
    1d1a:	09 c0       	rjmp	.+18     	; 0x1d2e <vfprintf+0x2cc>
    1d1c:	22 ff       	sbrs	r18, 2
    1d1e:	06 c0       	rjmp	.+12     	; 0x1d2c <vfprintf+0x2ca>
    1d20:	73 94       	inc	r7
    1d22:	73 94       	inc	r7
    1d24:	04 c0       	rjmp	.+8      	; 0x1d2e <vfprintf+0x2cc>
    1d26:	82 2f       	mov	r24, r18
    1d28:	86 78       	andi	r24, 0x86	; 134
    1d2a:	09 f0       	breq	.+2      	; 0x1d2e <vfprintf+0x2cc>
    1d2c:	73 94       	inc	r7
    1d2e:	23 fd       	sbrc	r18, 3
    1d30:	12 c0       	rjmp	.+36     	; 0x1d56 <vfprintf+0x2f4>
    1d32:	20 ff       	sbrs	r18, 0
    1d34:	06 c0       	rjmp	.+12     	; 0x1d42 <vfprintf+0x2e0>
    1d36:	5a 2c       	mov	r5, r10
    1d38:	73 14       	cp	r7, r3
    1d3a:	18 f4       	brcc	.+6      	; 0x1d42 <vfprintf+0x2e0>
    1d3c:	53 0c       	add	r5, r3
    1d3e:	57 18       	sub	r5, r7
    1d40:	73 2c       	mov	r7, r3
    1d42:	73 14       	cp	r7, r3
    1d44:	60 f4       	brcc	.+24     	; 0x1d5e <vfprintf+0x2fc>
    1d46:	b7 01       	movw	r22, r14
    1d48:	80 e2       	ldi	r24, 0x20	; 32
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	2c 87       	std	Y+12, r18	; 0x0c
    1d4e:	83 d0       	rcall	.+262    	; 0x1e56 <fputc>
    1d50:	73 94       	inc	r7
    1d52:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d54:	f6 cf       	rjmp	.-20     	; 0x1d42 <vfprintf+0x2e0>
    1d56:	73 14       	cp	r7, r3
    1d58:	10 f4       	brcc	.+4      	; 0x1d5e <vfprintf+0x2fc>
    1d5a:	37 18       	sub	r3, r7
    1d5c:	01 c0       	rjmp	.+2      	; 0x1d60 <vfprintf+0x2fe>
    1d5e:	31 2c       	mov	r3, r1
    1d60:	24 ff       	sbrs	r18, 4
    1d62:	11 c0       	rjmp	.+34     	; 0x1d86 <vfprintf+0x324>
    1d64:	b7 01       	movw	r22, r14
    1d66:	80 e3       	ldi	r24, 0x30	; 48
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	2c 87       	std	Y+12, r18	; 0x0c
    1d6c:	74 d0       	rcall	.+232    	; 0x1e56 <fputc>
    1d6e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d70:	22 ff       	sbrs	r18, 2
    1d72:	16 c0       	rjmp	.+44     	; 0x1da0 <vfprintf+0x33e>
    1d74:	21 ff       	sbrs	r18, 1
    1d76:	03 c0       	rjmp	.+6      	; 0x1d7e <vfprintf+0x31c>
    1d78:	88 e5       	ldi	r24, 0x58	; 88
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <vfprintf+0x320>
    1d7e:	88 e7       	ldi	r24, 0x78	; 120
    1d80:	90 e0       	ldi	r25, 0x00	; 0
    1d82:	b7 01       	movw	r22, r14
    1d84:	0c c0       	rjmp	.+24     	; 0x1d9e <vfprintf+0x33c>
    1d86:	82 2f       	mov	r24, r18
    1d88:	86 78       	andi	r24, 0x86	; 134
    1d8a:	51 f0       	breq	.+20     	; 0x1da0 <vfprintf+0x33e>
    1d8c:	21 fd       	sbrc	r18, 1
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <vfprintf+0x332>
    1d90:	80 e2       	ldi	r24, 0x20	; 32
    1d92:	01 c0       	rjmp	.+2      	; 0x1d96 <vfprintf+0x334>
    1d94:	8b e2       	ldi	r24, 0x2B	; 43
    1d96:	27 fd       	sbrc	r18, 7
    1d98:	8d e2       	ldi	r24, 0x2D	; 45
    1d9a:	b7 01       	movw	r22, r14
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	5b d0       	rcall	.+182    	; 0x1e56 <fputc>
    1da0:	a5 14       	cp	r10, r5
    1da2:	30 f4       	brcc	.+12     	; 0x1db0 <vfprintf+0x34e>
    1da4:	b7 01       	movw	r22, r14
    1da6:	80 e3       	ldi	r24, 0x30	; 48
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	55 d0       	rcall	.+170    	; 0x1e56 <fputc>
    1dac:	5a 94       	dec	r5
    1dae:	f8 cf       	rjmp	.-16     	; 0x1da0 <vfprintf+0x33e>
    1db0:	aa 94       	dec	r10
    1db2:	f4 01       	movw	r30, r8
    1db4:	ea 0d       	add	r30, r10
    1db6:	f1 1d       	adc	r31, r1
    1db8:	80 81       	ld	r24, Z
    1dba:	b7 01       	movw	r22, r14
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	4b d0       	rcall	.+150    	; 0x1e56 <fputc>
    1dc0:	a1 10       	cpse	r10, r1
    1dc2:	f6 cf       	rjmp	.-20     	; 0x1db0 <vfprintf+0x34e>
    1dc4:	33 20       	and	r3, r3
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <vfprintf+0x368>
    1dc8:	5d ce       	rjmp	.-838    	; 0x1a84 <vfprintf+0x22>
    1dca:	b7 01       	movw	r22, r14
    1dcc:	80 e2       	ldi	r24, 0x20	; 32
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	42 d0       	rcall	.+132    	; 0x1e56 <fputc>
    1dd2:	3a 94       	dec	r3
    1dd4:	f7 cf       	rjmp	.-18     	; 0x1dc4 <vfprintf+0x362>
    1dd6:	f7 01       	movw	r30, r14
    1dd8:	86 81       	ldd	r24, Z+6	; 0x06
    1dda:	97 81       	ldd	r25, Z+7	; 0x07
    1ddc:	02 c0       	rjmp	.+4      	; 0x1de2 <vfprintf+0x380>
    1dde:	8f ef       	ldi	r24, 0xFF	; 255
    1de0:	9f ef       	ldi	r25, 0xFF	; 255
    1de2:	2c 96       	adiw	r28, 0x0c	; 12
    1de4:	e2 e1       	ldi	r30, 0x12	; 18
    1de6:	e3 c0       	rjmp	.+454    	; 0x1fae <__epilogue_restores__>

00001de8 <calloc>:
    1de8:	0f 93       	push	r16
    1dea:	1f 93       	push	r17
    1dec:	cf 93       	push	r28
    1dee:	df 93       	push	r29
    1df0:	86 9f       	mul	r24, r22
    1df2:	80 01       	movw	r16, r0
    1df4:	87 9f       	mul	r24, r23
    1df6:	10 0d       	add	r17, r0
    1df8:	96 9f       	mul	r25, r22
    1dfa:	10 0d       	add	r17, r0
    1dfc:	11 24       	eor	r1, r1
    1dfe:	c8 01       	movw	r24, r16
    1e00:	7c dc       	rcall	.-1800   	; 0x16fa <malloc>
    1e02:	ec 01       	movw	r28, r24
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	21 f0       	breq	.+8      	; 0x1e10 <calloc+0x28>
    1e08:	a8 01       	movw	r20, r16
    1e0a:	60 e0       	ldi	r22, 0x00	; 0
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	11 d0       	rcall	.+34     	; 0x1e32 <memset>
    1e10:	ce 01       	movw	r24, r28
    1e12:	df 91       	pop	r29
    1e14:	cf 91       	pop	r28
    1e16:	1f 91       	pop	r17
    1e18:	0f 91       	pop	r16
    1e1a:	08 95       	ret

00001e1c <strnlen_P>:
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	05 90       	lpm	r0, Z+
    1e20:	61 50       	subi	r22, 0x01	; 1
    1e22:	70 40       	sbci	r23, 0x00	; 0
    1e24:	01 10       	cpse	r0, r1
    1e26:	d8 f7       	brcc	.-10     	; 0x1e1e <strnlen_P+0x2>
    1e28:	80 95       	com	r24
    1e2a:	90 95       	com	r25
    1e2c:	8e 0f       	add	r24, r30
    1e2e:	9f 1f       	adc	r25, r31
    1e30:	08 95       	ret

00001e32 <memset>:
    1e32:	dc 01       	movw	r26, r24
    1e34:	01 c0       	rjmp	.+2      	; 0x1e38 <memset+0x6>
    1e36:	6d 93       	st	X+, r22
    1e38:	41 50       	subi	r20, 0x01	; 1
    1e3a:	50 40       	sbci	r21, 0x00	; 0
    1e3c:	e0 f7       	brcc	.-8      	; 0x1e36 <memset+0x4>
    1e3e:	08 95       	ret

00001e40 <strnlen>:
    1e40:	fc 01       	movw	r30, r24
    1e42:	61 50       	subi	r22, 0x01	; 1
    1e44:	70 40       	sbci	r23, 0x00	; 0
    1e46:	01 90       	ld	r0, Z+
    1e48:	01 10       	cpse	r0, r1
    1e4a:	d8 f7       	brcc	.-10     	; 0x1e42 <strnlen+0x2>
    1e4c:	80 95       	com	r24
    1e4e:	90 95       	com	r25
    1e50:	8e 0f       	add	r24, r30
    1e52:	9f 1f       	adc	r25, r31
    1e54:	08 95       	ret

00001e56 <fputc>:
    1e56:	0f 93       	push	r16
    1e58:	1f 93       	push	r17
    1e5a:	cf 93       	push	r28
    1e5c:	df 93       	push	r29
    1e5e:	18 2f       	mov	r17, r24
    1e60:	09 2f       	mov	r16, r25
    1e62:	eb 01       	movw	r28, r22
    1e64:	8b 81       	ldd	r24, Y+3	; 0x03
    1e66:	81 fd       	sbrc	r24, 1
    1e68:	03 c0       	rjmp	.+6      	; 0x1e70 <fputc+0x1a>
    1e6a:	8f ef       	ldi	r24, 0xFF	; 255
    1e6c:	9f ef       	ldi	r25, 0xFF	; 255
    1e6e:	20 c0       	rjmp	.+64     	; 0x1eb0 <fputc+0x5a>
    1e70:	82 ff       	sbrs	r24, 2
    1e72:	10 c0       	rjmp	.+32     	; 0x1e94 <fputc+0x3e>
    1e74:	4e 81       	ldd	r20, Y+6	; 0x06
    1e76:	5f 81       	ldd	r21, Y+7	; 0x07
    1e78:	2c 81       	ldd	r18, Y+4	; 0x04
    1e7a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e7c:	42 17       	cp	r20, r18
    1e7e:	53 07       	cpc	r21, r19
    1e80:	7c f4       	brge	.+30     	; 0x1ea0 <fputc+0x4a>
    1e82:	e8 81       	ld	r30, Y
    1e84:	f9 81       	ldd	r31, Y+1	; 0x01
    1e86:	9f 01       	movw	r18, r30
    1e88:	2f 5f       	subi	r18, 0xFF	; 255
    1e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8c:	39 83       	std	Y+1, r19	; 0x01
    1e8e:	28 83       	st	Y, r18
    1e90:	10 83       	st	Z, r17
    1e92:	06 c0       	rjmp	.+12     	; 0x1ea0 <fputc+0x4a>
    1e94:	e8 85       	ldd	r30, Y+8	; 0x08
    1e96:	f9 85       	ldd	r31, Y+9	; 0x09
    1e98:	81 2f       	mov	r24, r17
    1e9a:	09 95       	icall
    1e9c:	89 2b       	or	r24, r25
    1e9e:	29 f7       	brne	.-54     	; 0x1e6a <fputc+0x14>
    1ea0:	2e 81       	ldd	r18, Y+6	; 0x06
    1ea2:	3f 81       	ldd	r19, Y+7	; 0x07
    1ea4:	2f 5f       	subi	r18, 0xFF	; 255
    1ea6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea8:	3f 83       	std	Y+7, r19	; 0x07
    1eaa:	2e 83       	std	Y+6, r18	; 0x06
    1eac:	81 2f       	mov	r24, r17
    1eae:	90 2f       	mov	r25, r16
    1eb0:	df 91       	pop	r29
    1eb2:	cf 91       	pop	r28
    1eb4:	1f 91       	pop	r17
    1eb6:	0f 91       	pop	r16
    1eb8:	08 95       	ret

00001eba <__ultoa_invert>:
    1eba:	fa 01       	movw	r30, r20
    1ebc:	aa 27       	eor	r26, r26
    1ebe:	28 30       	cpi	r18, 0x08	; 8
    1ec0:	51 f1       	breq	.+84     	; 0x1f16 <__ultoa_invert+0x5c>
    1ec2:	20 31       	cpi	r18, 0x10	; 16
    1ec4:	81 f1       	breq	.+96     	; 0x1f26 <__ultoa_invert+0x6c>
    1ec6:	e8 94       	clt
    1ec8:	6f 93       	push	r22
    1eca:	6e 7f       	andi	r22, 0xFE	; 254
    1ecc:	6e 5f       	subi	r22, 0xFE	; 254
    1ece:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ed4:	af 4f       	sbci	r26, 0xFF	; 255
    1ed6:	b1 e0       	ldi	r27, 0x01	; 1
    1ed8:	3e d0       	rcall	.+124    	; 0x1f56 <__ultoa_invert+0x9c>
    1eda:	b4 e0       	ldi	r27, 0x04	; 4
    1edc:	3c d0       	rcall	.+120    	; 0x1f56 <__ultoa_invert+0x9c>
    1ede:	67 0f       	add	r22, r23
    1ee0:	78 1f       	adc	r23, r24
    1ee2:	89 1f       	adc	r24, r25
    1ee4:	9a 1f       	adc	r25, r26
    1ee6:	a1 1d       	adc	r26, r1
    1ee8:	68 0f       	add	r22, r24
    1eea:	79 1f       	adc	r23, r25
    1eec:	8a 1f       	adc	r24, r26
    1eee:	91 1d       	adc	r25, r1
    1ef0:	a1 1d       	adc	r26, r1
    1ef2:	6a 0f       	add	r22, r26
    1ef4:	71 1d       	adc	r23, r1
    1ef6:	81 1d       	adc	r24, r1
    1ef8:	91 1d       	adc	r25, r1
    1efa:	a1 1d       	adc	r26, r1
    1efc:	20 d0       	rcall	.+64     	; 0x1f3e <__ultoa_invert+0x84>
    1efe:	09 f4       	brne	.+2      	; 0x1f02 <__ultoa_invert+0x48>
    1f00:	68 94       	set
    1f02:	3f 91       	pop	r19
    1f04:	2a e0       	ldi	r18, 0x0A	; 10
    1f06:	26 9f       	mul	r18, r22
    1f08:	11 24       	eor	r1, r1
    1f0a:	30 19       	sub	r19, r0
    1f0c:	30 5d       	subi	r19, 0xD0	; 208
    1f0e:	31 93       	st	Z+, r19
    1f10:	de f6       	brtc	.-74     	; 0x1ec8 <__ultoa_invert+0xe>
    1f12:	cf 01       	movw	r24, r30
    1f14:	08 95       	ret
    1f16:	46 2f       	mov	r20, r22
    1f18:	47 70       	andi	r20, 0x07	; 7
    1f1a:	40 5d       	subi	r20, 0xD0	; 208
    1f1c:	41 93       	st	Z+, r20
    1f1e:	b3 e0       	ldi	r27, 0x03	; 3
    1f20:	0f d0       	rcall	.+30     	; 0x1f40 <__ultoa_invert+0x86>
    1f22:	c9 f7       	brne	.-14     	; 0x1f16 <__ultoa_invert+0x5c>
    1f24:	f6 cf       	rjmp	.-20     	; 0x1f12 <__ultoa_invert+0x58>
    1f26:	46 2f       	mov	r20, r22
    1f28:	4f 70       	andi	r20, 0x0F	; 15
    1f2a:	40 5d       	subi	r20, 0xD0	; 208
    1f2c:	4a 33       	cpi	r20, 0x3A	; 58
    1f2e:	18 f0       	brcs	.+6      	; 0x1f36 <__ultoa_invert+0x7c>
    1f30:	49 5d       	subi	r20, 0xD9	; 217
    1f32:	31 fd       	sbrc	r19, 1
    1f34:	40 52       	subi	r20, 0x20	; 32
    1f36:	41 93       	st	Z+, r20
    1f38:	02 d0       	rcall	.+4      	; 0x1f3e <__ultoa_invert+0x84>
    1f3a:	a9 f7       	brne	.-22     	; 0x1f26 <__ultoa_invert+0x6c>
    1f3c:	ea cf       	rjmp	.-44     	; 0x1f12 <__ultoa_invert+0x58>
    1f3e:	b4 e0       	ldi	r27, 0x04	; 4
    1f40:	a6 95       	lsr	r26
    1f42:	97 95       	ror	r25
    1f44:	87 95       	ror	r24
    1f46:	77 95       	ror	r23
    1f48:	67 95       	ror	r22
    1f4a:	ba 95       	dec	r27
    1f4c:	c9 f7       	brne	.-14     	; 0x1f40 <__ultoa_invert+0x86>
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	61 05       	cpc	r22, r1
    1f52:	71 05       	cpc	r23, r1
    1f54:	08 95       	ret
    1f56:	9b 01       	movw	r18, r22
    1f58:	ac 01       	movw	r20, r24
    1f5a:	0a 2e       	mov	r0, r26
    1f5c:	06 94       	lsr	r0
    1f5e:	57 95       	ror	r21
    1f60:	47 95       	ror	r20
    1f62:	37 95       	ror	r19
    1f64:	27 95       	ror	r18
    1f66:	ba 95       	dec	r27
    1f68:	c9 f7       	brne	.-14     	; 0x1f5c <__ultoa_invert+0xa2>
    1f6a:	62 0f       	add	r22, r18
    1f6c:	73 1f       	adc	r23, r19
    1f6e:	84 1f       	adc	r24, r20
    1f70:	95 1f       	adc	r25, r21
    1f72:	a0 1d       	adc	r26, r0
    1f74:	08 95       	ret

00001f76 <__prologue_saves__>:
    1f76:	2f 92       	push	r2
    1f78:	3f 92       	push	r3
    1f7a:	4f 92       	push	r4
    1f7c:	5f 92       	push	r5
    1f7e:	6f 92       	push	r6
    1f80:	7f 92       	push	r7
    1f82:	8f 92       	push	r8
    1f84:	9f 92       	push	r9
    1f86:	af 92       	push	r10
    1f88:	bf 92       	push	r11
    1f8a:	cf 92       	push	r12
    1f8c:	df 92       	push	r13
    1f8e:	ef 92       	push	r14
    1f90:	ff 92       	push	r15
    1f92:	0f 93       	push	r16
    1f94:	1f 93       	push	r17
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	ca 1b       	sub	r28, r26
    1fa0:	db 0b       	sbc	r29, r27
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	09 94       	ijmp

00001fae <__epilogue_restores__>:
    1fae:	2a 88       	ldd	r2, Y+18	; 0x12
    1fb0:	39 88       	ldd	r3, Y+17	; 0x11
    1fb2:	48 88       	ldd	r4, Y+16	; 0x10
    1fb4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1fb6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1fb8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1fba:	8c 84       	ldd	r8, Y+12	; 0x0c
    1fbc:	9b 84       	ldd	r9, Y+11	; 0x0b
    1fbe:	aa 84       	ldd	r10, Y+10	; 0x0a
    1fc0:	b9 84       	ldd	r11, Y+9	; 0x09
    1fc2:	c8 84       	ldd	r12, Y+8	; 0x08
    1fc4:	df 80       	ldd	r13, Y+7	; 0x07
    1fc6:	ee 80       	ldd	r14, Y+6	; 0x06
    1fc8:	fd 80       	ldd	r15, Y+5	; 0x05
    1fca:	0c 81       	ldd	r16, Y+4	; 0x04
    1fcc:	1b 81       	ldd	r17, Y+3	; 0x03
    1fce:	aa 81       	ldd	r26, Y+2	; 0x02
    1fd0:	b9 81       	ldd	r27, Y+1	; 0x01
    1fd2:	ce 0f       	add	r28, r30
    1fd4:	d1 1d       	adc	r29, r1
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	de bf       	out	0x3e, r29	; 62
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	cd bf       	out	0x3d, r28	; 61
    1fe0:	ed 01       	movw	r28, r26
    1fe2:	08 95       	ret

00001fe4 <_exit>:
    1fe4:	f8 94       	cli

00001fe6 <__stop_program>:
    1fe6:	ff cf       	rjmp	.-2      	; 0x1fe6 <__stop_program>
