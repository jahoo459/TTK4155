
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001d6  00800100  0000213e  000021d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000213e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000035  008002d6  008002d6  000023a8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000023a8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000310  00000000  00000000  00002404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000415c  00000000  00000000  00002714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001280  00000000  00000000  00006870  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001910  00000000  00000000  00007af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000077c  00000000  00000000  00009400  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000f0a  00000000  00000000  00009b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ffb  00000000  00000000  0000aa86  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000410  00000000  00000000  0000ca81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	1c c2       	rjmp	.+1080   	; 0x43e <__vector_1>
       6:	00 00       	nop
       8:	29 c2       	rjmp	.+1106   	; 0x45c <__vector_2>
       a:	00 00       	nop
       c:	36 c2       	rjmp	.+1132   	; 0x47a <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <JOY_calibrate+0x124>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	ee e3       	ldi	r30, 0x3E	; 62
     37c:	f1 e2       	ldi	r31, 0x21	; 33
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	a6 3d       	cpi	r26, 0xD6	; 214
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	23 e0       	ldi	r18, 0x03	; 3
     38c:	a6 ed       	ldi	r26, 0xD6	; 214
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	ab 30       	cpi	r26, 0x0B	; 11
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	be d0       	rcall	.+380    	; 0x518 <main>
     39c:	0c 94 9d 10 	jmp	0x213a	; 0x213a <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	//printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	2f 93       	push	r18
     3ae:	3f 93       	push	r19
     3b0:	4f 93       	push	r20
     3b2:	5f 93       	push	r21
     3b4:	6f 93       	push	r22
     3b6:	7f 93       	push	r23
     3b8:	8f 93       	push	r24
     3ba:	9f 93       	push	r25
     3bc:	af 93       	push	r26
     3be:	bf 93       	push	r27
     3c0:	ef 93       	push	r30
     3c2:	ff 93       	push	r31
     3c4:	0e 94 9f 0b 	call	0x173e	; 0x173e <uartReceive>
     3c8:	80 93 fc 02 	sts	0x02FC, r24
     3cc:	90 91 e1 02 	lds	r25, 0x02E1
     3d0:	99 23       	and	r25, r25
     3d2:	d1 f0       	breq	.+52     	; 0x408 <__vector_19+0x66>
     3d4:	90 91 e0 02 	lds	r25, 0x02E0
     3d8:	91 30       	cpi	r25, 0x01	; 1
     3da:	39 f0       	breq	.+14     	; 0x3ea <__vector_19+0x48>
     3dc:	18 f0       	brcs	.+6      	; 0x3e4 <__vector_19+0x42>
     3de:	92 30       	cpi	r25, 0x02	; 2
     3e0:	39 f0       	breq	.+14     	; 0x3f0 <__vector_19+0x4e>
     3e2:	0d c0       	rjmp	.+26     	; 0x3fe <__vector_19+0x5c>
     3e4:	80 93 f9 02 	sts	0x02F9, r24
     3e8:	0a c0       	rjmp	.+20     	; 0x3fe <__vector_19+0x5c>
     3ea:	80 93 fa 02 	sts	0x02FA, r24
     3ee:	07 c0       	rjmp	.+14     	; 0x3fe <__vector_19+0x5c>
     3f0:	80 93 fb 02 	sts	0x02FB, r24
     3f4:	10 92 e1 02 	sts	0x02E1, r1
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	90 93 d9 02 	sts	0x02D9, r25
     3fe:	90 91 e0 02 	lds	r25, 0x02E0
     402:	9f 5f       	subi	r25, 0xFF	; 255
     404:	90 93 e0 02 	sts	0x02E0, r25
     408:	8f 3f       	cpi	r24, 0xFF	; 255
     40a:	29 f4       	brne	.+10     	; 0x416 <__vector_19+0x74>
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	80 93 e1 02 	sts	0x02E1, r24
     412:	10 92 e0 02 	sts	0x02E0, r1
     416:	81 e0       	ldi	r24, 0x01	; 1
     418:	80 93 e2 02 	sts	0x02E2, r24
     41c:	ff 91       	pop	r31
     41e:	ef 91       	pop	r30
     420:	bf 91       	pop	r27
     422:	af 91       	pop	r26
     424:	9f 91       	pop	r25
     426:	8f 91       	pop	r24
     428:	7f 91       	pop	r23
     42a:	6f 91       	pop	r22
     42c:	5f 91       	pop	r21
     42e:	4f 91       	pop	r20
     430:	3f 91       	pop	r19
     432:	2f 91       	pop	r18
     434:	0f 90       	pop	r0
     436:	0f be       	out	0x3f, r0	; 63
     438:	0f 90       	pop	r0
     43a:	1f 90       	pop	r1
     43c:	18 95       	reti

0000043e <__vector_1>:
     43e:	1f 92       	push	r1
     440:	0f 92       	push	r0
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	0f 92       	push	r0
     446:	11 24       	eor	r1, r1
     448:	8f 93       	push	r24
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	80 93 df 02 	sts	0x02DF, r24
     450:	8f 91       	pop	r24
     452:	0f 90       	pop	r0
     454:	0f be       	out	0x3f, r0	; 63
     456:	0f 90       	pop	r0
     458:	1f 90       	pop	r1
     45a:	18 95       	reti

0000045c <__vector_2>:
     45c:	1f 92       	push	r1
     45e:	0f 92       	push	r0
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	0f 92       	push	r0
     464:	11 24       	eor	r1, r1
     466:	8f 93       	push	r24
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	80 93 de 02 	sts	0x02DE, r24
     46e:	8f 91       	pop	r24
     470:	0f 90       	pop	r0
     472:	0f be       	out	0x3f, r0	; 63
     474:	0f 90       	pop	r0
     476:	1f 90       	pop	r1
     478:	18 95       	reti

0000047a <__vector_3>:
     47a:	1f 92       	push	r1
     47c:	0f 92       	push	r0
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	0f 92       	push	r0
     482:	11 24       	eor	r1, r1
     484:	8f 93       	push	r24
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	80 93 dd 02 	sts	0x02DD, r24
     48c:	8f 91       	pop	r24
     48e:	0f 90       	pop	r0
     490:	0f be       	out	0x3f, r0	; 63
     492:	0f 90       	pop	r0
     494:	1f 90       	pop	r1
     496:	18 95       	reti

00000498 <init>:
     498:	ef 92       	push	r14
     49a:	ff 92       	push	r15
     49c:	0f 93       	push	r16
     49e:	1f 93       	push	r17
     4a0:	1f e1       	ldi	r17, 0x1F	; 31
     4a2:	e1 2e       	mov	r14, r17
     4a4:	f1 2c       	mov	r15, r1
     4a6:	00 e0       	ldi	r16, 0x00	; 0
     4a8:	10 e0       	ldi	r17, 0x00	; 0
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	4b e4       	ldi	r20, 0x4B	; 75
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	60 e8       	ldi	r22, 0x80	; 128
     4b4:	75 e2       	ldi	r23, 0x25	; 37
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 a3 0b 	call	0x1746	; 0x1746 <uartInit>
     4be:	82 e4       	ldi	r24, 0x42	; 66
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <puts>
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	85 d2       	rcall	.+1290   	; 0x9d4 <enableXMEM>
     4ca:	0e 94 2e 0b 	call	0x165c	; 0x165c <SLI_init>
     4ce:	94 d2       	rcall	.+1320   	; 0x9f8 <JOY_init>
     4d0:	0e 94 a8 0a 	call	0x1550	; 0x1550 <OLED_init>
     4d4:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <SPI_init>
     4d8:	86 d4       	rcall	.+2316   	; 0xde6 <MCP2515_init>
     4da:	d9 d0       	rcall	.+434    	; 0x68e <CAN_init>
     4dc:	8b b7       	in	r24, 0x3b	; 59
     4de:	80 64       	ori	r24, 0x40	; 64
     4e0:	8b bf       	out	0x3b, r24	; 59
     4e2:	85 b7       	in	r24, 0x35	; 53
     4e4:	82 60       	ori	r24, 0x02	; 2
     4e6:	85 bf       	out	0x35, r24	; 53
     4e8:	85 b7       	in	r24, 0x35	; 53
     4ea:	8e 7f       	andi	r24, 0xFE	; 254
     4ec:	85 bf       	out	0x35, r24	; 53
     4ee:	8b 98       	cbi	0x11, 3	; 17
     4f0:	93 9a       	sbi	0x12, 3	; 18
     4f2:	8b b7       	in	r24, 0x3b	; 59
     4f4:	80 68       	ori	r24, 0x80	; 128
     4f6:	8b bf       	out	0x3b, r24	; 59
     4f8:	85 b7       	in	r24, 0x35	; 53
     4fa:	88 60       	ori	r24, 0x08	; 8
     4fc:	85 bf       	out	0x35, r24	; 53
     4fe:	85 b7       	in	r24, 0x35	; 53
     500:	8b 7f       	andi	r24, 0xFB	; 251
     502:	85 bf       	out	0x35, r24	; 53
     504:	32 98       	cbi	0x06, 2	; 6
     506:	3a 98       	cbi	0x07, 2	; 7
     508:	b8 98       	cbi	0x17, 0	; 23
     50a:	c0 98       	cbi	0x18, 0	; 24
     50c:	78 94       	sei
     50e:	1f 91       	pop	r17
     510:	0f 91       	pop	r16
     512:	ff 90       	pop	r15
     514:	ef 90       	pop	r14
     516:	08 95       	ret

00000518 <main>:
/*
=======================MAIN FUNCTION=========================
*/

int main(void)
{
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
     520:	a9 97       	sbiw	r28, 0x29	; 41
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
	
	init();
     52c:	b5 df       	rcall	.-150    	; 0x498 <init>
	static uint8_t SliPos;
	static uint8_t ButtonRight;
	
	//activateMenuFlag = 1; // display the main menu
		
	OLED_goto(5,0);
     52e:	60 e0       	ldi	r22, 0x00	; 0
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	85 e0       	ldi	r24, 0x05	; 5
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	cf d6       	rcall	.+3486   	; 0x12d6 <OLED_goto>
	OLED_printString("I am alive!");
     538:	8b e7       	ldi	r24, 0x7B	; 123
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	22 d7       	rcall	.+3652   	; 0x1382 <OLED_printString>

	uartMsg = 0;
     53e:	10 92 fc 02 	sts	0x02FC, r1
	uartMouseSteeringMessage.Motor = 0;
     542:	10 92 f9 02 	sts	0x02F9, r1
	uartMouseSteeringMessage.Servo = 0;
     546:	10 92 fa 02 	sts	0x02FA, r1
	uartMouseSteeringMessage.Button = 0;
     54a:	10 92 fb 02 	sts	0x02FB, r1
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     54e:	0f 2e       	mov	r0, r31
     550:	fb e0       	ldi	r31, 0x0B	; 11
     552:	9f 2e       	mov	r9, r31
     554:	f0 2d       	mov	r31, r0

		JoyPos = JOY_getPosition().X_abs;
		SliPos = SLI_getPosition().R_per;
		if((PINE & (1<<PE2)))
		{
			ButtonRight = 1;
     556:	aa 24       	eor	r10, r10
     558:	a3 94       	inc	r10
		{
			ButtonRight = 0;
		}
		//printf("%d\n", SliPos);
		
		message2send.id = 23;
     55a:	07 e1       	ldi	r16, 0x17	; 23
     55c:	10 e0       	ldi	r17, 0x00	; 0
		message2send.length = 3;
     55e:	0f 2e       	mov	r0, r31
     560:	f3 e0       	ldi	r31, 0x03	; 3
     562:	bf 2e       	mov	r11, r31
     564:	f0 2d       	mov	r31, r0
	uartMouseSteeringMessage.Button = 0;
	
    while(1)
    {

		JoyPos = JOY_getPosition().X_abs;
     566:	cb d3       	rcall	.+1942   	; 0xcfe <JOY_getPosition>
     568:	29 83       	std	Y+1, r18	; 0x01
     56a:	3a 83       	std	Y+2, r19	; 0x02
     56c:	4b 83       	std	Y+3, r20	; 0x03
     56e:	5c 83       	std	Y+4, r21	; 0x04
     570:	6d 83       	std	Y+5, r22	; 0x05
     572:	7e 83       	std	Y+6, r23	; 0x06
     574:	8f 83       	std	Y+7, r24	; 0x07
     576:	98 87       	std	Y+8, r25	; 0x08
     578:	20 93 d8 02 	sts	0x02D8, r18
		SliPos = SLI_getPosition().R_per;
     57c:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <SLI_getPosition>
     580:	80 93 d7 02 	sts	0x02D7, r24
		if((PINE & (1<<PE2)))
     584:	2a 9b       	sbis	0x05, 2	; 5
     586:	03 c0       	rjmp	.+6      	; 0x58e <main+0x76>
		{
			ButtonRight = 1;
     588:	a0 92 d6 02 	sts	0x02D6, r10
     58c:	02 c0       	rjmp	.+4      	; 0x592 <main+0x7a>
		}
		else
		{
			ButtonRight = 0;
     58e:	10 92 d6 02 	sts	0x02D6, r1
		}
		//printf("%d\n", SliPos);
		
		message2send.id = 23;
     592:	1a 87       	std	Y+10, r17	; 0x0a
     594:	09 87       	std	Y+9, r16	; 0x09
		message2send.length = 3;
     596:	bb 86       	std	Y+11, r11	; 0x0b
		message2send.data[0] = JoyPos;
     598:	90 91 d8 02 	lds	r25, 0x02D8
     59c:	9c 87       	std	Y+12, r25	; 0x0c
		message2send.data[1] = SliPos;
     59e:	8d 87       	std	Y+13, r24	; 0x0d
		message2send.data[2] = ButtonRight;
     5a0:	80 91 d6 02 	lds	r24, 0x02D6
     5a4:	8e 87       	std	Y+14, r24	; 0x0e
		
		CAN_sendMessage(&message2send, 0);
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	ce 01       	movw	r24, r28
     5aa:	09 96       	adiw	r24, 0x09	; 9
     5ac:	87 d0       	rcall	.+270    	; 0x6bc <CAN_sendMessage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ae:	80 e0       	ldi	r24, 0x00	; 0
     5b0:	90 ef       	ldi	r25, 0xF0	; 240
     5b2:	01 97       	sbiw	r24, 0x01	; 1
     5b4:	f1 f7       	brne	.-4      	; 0x5b2 <main+0x9a>
		_delay_ms(50);

		if(activateMenuFlag)
     5b6:	80 91 de 02 	lds	r24, 0x02DE
     5ba:	81 11       	cpse	r24, r1
		{
			MENU_activate();
     5bc:	7e d6       	rcall	.+3324   	; 0x12ba <MENU_activate>
		}

		if(SPIreceivedFlag)
     5be:	80 91 dd 02 	lds	r24, 0x02DD
     5c2:	88 23       	and	r24, r24
     5c4:	b9 f0       	breq	.+46     	; 0x5f4 <main+0xdc>
		{
			
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
     5c6:	6c e2       	ldi	r22, 0x2C	; 44
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	f6 d3       	rcall	.+2028   	; 0xdb8 <MCP2515_read>
     5cc:	83 70       	andi	r24, 0x03	; 3
     5ce:	91 f0       	breq	.+36     	; 0x5f4 <main+0xdc>
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     5d0:	68 2f       	mov	r22, r24
     5d2:	ce 01       	movw	r24, r28
     5d4:	4f 96       	adiw	r24, 0x1f	; 31
     5d6:	db d0       	rcall	.+438    	; 0x78e <CAN_receiveMessage>
     5d8:	fe 01       	movw	r30, r28
     5da:	7f 96       	adiw	r30, 0x1f	; 31
     5dc:	de 01       	movw	r26, r28
     5de:	54 96       	adiw	r26, 0x14	; 20
     5e0:	89 2d       	mov	r24, r9
     5e2:	01 90       	ld	r0, Z+
     5e4:	0d 92       	st	X+, r0
     5e6:	8a 95       	dec	r24
     5e8:	e1 f7       	brne	.-8      	; 0x5e2 <main+0xca>

				CAN_printMessage(&receivedMessage);
     5ea:	ce 01       	movw	r24, r28
     5ec:	44 96       	adiw	r24, 0x14	; 20
     5ee:	98 d1       	rcall	.+816    	; 0x920 <CAN_printMessage>
			
				SPIreceivedFlag = 0;
     5f0:	10 92 dd 02 	sts	0x02DD, r1
			
			}
		}
		
		if(updateCmdDispFlag)
     5f4:	80 91 d9 02 	lds	r24, 0x02D9
     5f8:	88 23       	and	r24, r24
     5fa:	09 f4       	brne	.+2      	; 0x5fe <main+0xe6>
     5fc:	b4 cf       	rjmp	.-152    	; 0x566 <main+0x4e>
		{
			OLED_clear();
     5fe:	88 d6       	rcall	.+3344   	; 0x1310 <OLED_clear>
			sprintf(str, "%d", uartMouseSteeringMessage.Motor);
     600:	80 91 f9 02 	lds	r24, 0x02F9
     604:	1f 92       	push	r1
     606:	8f 93       	push	r24
     608:	0f 2e       	mov	r0, r31
     60a:	f7 e8       	ldi	r31, 0x87	; 135
     60c:	cf 2e       	mov	r12, r31
     60e:	f1 e0       	ldi	r31, 0x01	; 1
     610:	df 2e       	mov	r13, r31
     612:	f0 2d       	mov	r31, r0
     614:	df 92       	push	r13
     616:	cf 92       	push	r12
     618:	0f 2e       	mov	r0, r31
     61a:	fa ed       	ldi	r31, 0xDA	; 218
     61c:	ef 2e       	mov	r14, r31
     61e:	f2 e0       	ldi	r31, 0x02	; 2
     620:	ff 2e       	mov	r15, r31
     622:	f0 2d       	mov	r31, r0
     624:	ff 92       	push	r15
     626:	ef 92       	push	r14
     628:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <sprintf>
			OLED_goto(0,0);
     62c:	60 e0       	ldi	r22, 0x00	; 0
     62e:	70 e0       	ldi	r23, 0x00	; 0
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	50 d6       	rcall	.+3232   	; 0x12d6 <OLED_goto>
			OLED_printString(str);
     636:	c7 01       	movw	r24, r14
     638:	a4 d6       	rcall	.+3400   	; 0x1382 <OLED_printString>
			
			sprintf(str, "%d", uartMouseSteeringMessage.Servo);
     63a:	80 91 fa 02 	lds	r24, 0x02FA
     63e:	1f 92       	push	r1
     640:	8f 93       	push	r24
     642:	df 92       	push	r13
     644:	cf 92       	push	r12
     646:	ff 92       	push	r15
     648:	ef 92       	push	r14
     64a:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <sprintf>
			OLED_goto(1,0);
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	70 e0       	ldi	r23, 0x00	; 0
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	3f d6       	rcall	.+3198   	; 0x12d6 <OLED_goto>
			OLED_printString(str);
     658:	c7 01       	movw	r24, r14
     65a:	93 d6       	rcall	.+3366   	; 0x1382 <OLED_printString>
			
			sprintf(str, "%d", uartMouseSteeringMessage.Button);
     65c:	80 91 fb 02 	lds	r24, 0x02FB
     660:	1f 92       	push	r1
     662:	8f 93       	push	r24
     664:	df 92       	push	r13
     666:	cf 92       	push	r12
     668:	ff 92       	push	r15
     66a:	ef 92       	push	r14
     66c:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <sprintf>
			OLED_goto(2,0);
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	82 e0       	ldi	r24, 0x02	; 2
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	2e d6       	rcall	.+3164   	; 0x12d6 <OLED_goto>
			OLED_printString(str);
     67a:	c7 01       	movw	r24, r14
     67c:	82 d6       	rcall	.+3332   	; 0x1382 <OLED_printString>
				
			updateCmdDispFlag = 0;
     67e:	10 92 d9 02 	sts	0x02D9, r1
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	6c cf       	rjmp	.-296    	; 0x566 <main+0x4e>

0000068e <CAN_init>:
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	43 e0       	ldi	r20, 0x03	; 3
     698:	6b e2       	ldi	r22, 0x2B	; 43
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	af d3       	rcall	.+1886   	; 0xdfe <MCP2515_write>
     6a0:	40 e6       	ldi	r20, 0x60	; 96
     6a2:	60 e6       	ldi	r22, 0x60	; 96
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	aa d3       	rcall	.+1876   	; 0xdfe <MCP2515_write>
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	40 e8       	ldi	r20, 0x80	; 128
     6ae:	6f e0       	ldi	r22, 0x0F	; 15
     6b0:	80 e0       	ldi	r24, 0x00	; 0
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	b7 d3       	rcall	.+1902   	; 0xe24 <MCP2515_bitModify>
     6b6:	df 91       	pop	r29
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret

000006bc <CAN_sendMessage>:
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	cd b7       	in	r28, 0x3d	; 61
     6c2:	de b7       	in	r29, 0x3e	; 62
     6c4:	27 97       	sbiw	r28, 0x07	; 7
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	9e 83       	std	Y+6, r25	; 0x06
     6d2:	8d 83       	std	Y+5, r24	; 0x05
     6d4:	6f 83       	std	Y+7, r22	; 0x07
     6d6:	8f 81       	ldd	r24, Y+7	; 0x07
     6d8:	88 2f       	mov	r24, r24
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	00 97       	sbiw	r24, 0x00	; 0
     6de:	09 f0       	breq	.+2      	; 0x6e2 <CAN_sendMessage+0x26>
     6e0:	4d c0       	rjmp	.+154    	; 0x77c <CAN_sendMessage+0xc0>
     6e2:	8d 81       	ldd	r24, Y+5	; 0x05
     6e4:	9e 81       	ldd	r25, Y+6	; 0x06
     6e6:	fc 01       	movw	r30, r24
     6e8:	80 81       	ld	r24, Z
     6ea:	91 81       	ldd	r25, Z+1	; 0x01
     6ec:	9c 83       	std	Y+4, r25	; 0x04
     6ee:	8b 83       	std	Y+3, r24	; 0x03
     6f0:	8b 81       	ldd	r24, Y+3	; 0x03
     6f2:	82 95       	swap	r24
     6f4:	88 0f       	add	r24, r24
     6f6:	80 7e       	andi	r24, 0xE0	; 224
     6f8:	48 2f       	mov	r20, r24
     6fa:	62 e3       	ldi	r22, 0x32	; 50
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	7e d3       	rcall	.+1788   	; 0xdfe <MCP2515_write>
     702:	8b 81       	ldd	r24, Y+3	; 0x03
     704:	9c 81       	ldd	r25, Y+4	; 0x04
     706:	96 95       	lsr	r25
     708:	87 95       	ror	r24
     70a:	96 95       	lsr	r25
     70c:	87 95       	ror	r24
     70e:	96 95       	lsr	r25
     710:	87 95       	ror	r24
     712:	48 2f       	mov	r20, r24
     714:	61 e3       	ldi	r22, 0x31	; 49
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	71 d3       	rcall	.+1762   	; 0xdfe <MCP2515_write>
     71c:	8d 81       	ldd	r24, Y+5	; 0x05
     71e:	9e 81       	ldd	r25, Y+6	; 0x06
     720:	fc 01       	movw	r30, r24
     722:	82 81       	ldd	r24, Z+2	; 0x02
     724:	48 2f       	mov	r20, r24
     726:	65 e3       	ldi	r22, 0x35	; 53
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	68 d3       	rcall	.+1744   	; 0xdfe <MCP2515_write>
     72e:	86 e3       	ldi	r24, 0x36	; 54
     730:	89 83       	std	Y+1, r24	; 0x01
     732:	1a 82       	std	Y+2, r1	; 0x02
     734:	15 c0       	rjmp	.+42     	; 0x760 <CAN_sendMessage+0xa4>
     736:	8a 81       	ldd	r24, Y+2	; 0x02
     738:	88 2f       	mov	r24, r24
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	2d 81       	ldd	r18, Y+5	; 0x05
     73e:	3e 81       	ldd	r19, Y+6	; 0x06
     740:	82 0f       	add	r24, r18
     742:	93 1f       	adc	r25, r19
     744:	03 96       	adiw	r24, 0x03	; 3
     746:	fc 01       	movw	r30, r24
     748:	80 81       	ld	r24, Z
     74a:	48 2f       	mov	r20, r24
     74c:	69 81       	ldd	r22, Y+1	; 0x01
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	55 d3       	rcall	.+1706   	; 0xdfe <MCP2515_write>
     754:	89 81       	ldd	r24, Y+1	; 0x01
     756:	8f 5f       	subi	r24, 0xFF	; 255
     758:	89 83       	std	Y+1, r24	; 0x01
     75a:	8a 81       	ldd	r24, Y+2	; 0x02
     75c:	8f 5f       	subi	r24, 0xFF	; 255
     75e:	8a 83       	std	Y+2, r24	; 0x02
     760:	8d 81       	ldd	r24, Y+5	; 0x05
     762:	9e 81       	ldd	r25, Y+6	; 0x06
     764:	fc 01       	movw	r30, r24
     766:	92 81       	ldd	r25, Z+2	; 0x02
     768:	8a 81       	ldd	r24, Y+2	; 0x02
     76a:	89 17       	cp	r24, r25
     76c:	20 f3       	brcs	.-56     	; 0x736 <CAN_sendMessage+0x7a>
     76e:	2f ef       	ldi	r18, 0xFF	; 255
     770:	48 e0       	ldi	r20, 0x08	; 8
     772:	60 e3       	ldi	r22, 0x30	; 48
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	55 d3       	rcall	.+1706   	; 0xe24 <MCP2515_bitModify>
     77a:	00 00       	nop
     77c:	27 96       	adiw	r28, 0x07	; 7
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	de bf       	out	0x3e, r29	; 62
     784:	0f be       	out	0x3f, r0	; 63
     786:	cd bf       	out	0x3d, r28	; 61
     788:	df 91       	pop	r29
     78a:	cf 91       	pop	r28
     78c:	08 95       	ret

0000078e <CAN_receiveMessage>:
     78e:	0f 93       	push	r16
     790:	1f 93       	push	r17
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	cd b7       	in	r28, 0x3d	; 61
     798:	de b7       	in	r29, 0x3e	; 62
     79a:	61 97       	sbiw	r28, 0x11	; 17
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	cd bf       	out	0x3d, r28	; 61
     7a6:	98 8b       	std	Y+16, r25	; 0x10
     7a8:	8f 87       	std	Y+15, r24	; 0x0f
     7aa:	69 8b       	std	Y+17, r22	; 0x11
     7ac:	89 89       	ldd	r24, Y+17	; 0x11
     7ae:	88 2f       	mov	r24, r24
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	82 30       	cpi	r24, 0x02	; 2
     7b4:	91 05       	cpc	r25, r1
     7b6:	09 f4       	brne	.+2      	; 0x7ba <CAN_receiveMessage+0x2c>
     7b8:	57 c0       	rjmp	.+174    	; 0x868 <CAN_receiveMessage+0xda>
     7ba:	83 30       	cpi	r24, 0x03	; 3
     7bc:	91 05       	cpc	r25, r1
     7be:	21 f0       	breq	.+8      	; 0x7c8 <CAN_receiveMessage+0x3a>
     7c0:	81 30       	cpi	r24, 0x01	; 1
     7c2:	91 05       	cpc	r25, r1
     7c4:	09 f0       	breq	.+2      	; 0x7c8 <CAN_receiveMessage+0x3a>
     7c6:	9f c0       	rjmp	.+318    	; 0x906 <CAN_receiveMessage+0x178>
     7c8:	61 e6       	ldi	r22, 0x61	; 97
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	f4 d2       	rcall	.+1512   	; 0xdb8 <MCP2515_read>
     7d0:	88 2f       	mov	r24, r24
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	9d 83       	std	Y+5, r25	; 0x05
     7d6:	8c 83       	std	Y+4, r24	; 0x04
     7d8:	8c 81       	ldd	r24, Y+4	; 0x04
     7da:	9d 81       	ldd	r25, Y+5	; 0x05
     7dc:	8c 01       	movw	r16, r24
     7de:	00 0f       	add	r16, r16
     7e0:	11 1f       	adc	r17, r17
     7e2:	00 0f       	add	r16, r16
     7e4:	11 1f       	adc	r17, r17
     7e6:	00 0f       	add	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	62 e6       	ldi	r22, 0x62	; 98
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	e3 d2       	rcall	.+1478   	; 0xdb8 <MCP2515_read>
     7f2:	82 95       	swap	r24
     7f4:	86 95       	lsr	r24
     7f6:	87 70       	andi	r24, 0x07	; 7
     7f8:	88 2f       	mov	r24, r24
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	80 2b       	or	r24, r16
     7fe:	91 2b       	or	r25, r17
     800:	9d 83       	std	Y+5, r25	; 0x05
     802:	8c 83       	std	Y+4, r24	; 0x04
     804:	65 e6       	ldi	r22, 0x65	; 101
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	d6 d2       	rcall	.+1452   	; 0xdb8 <MCP2515_read>
     80c:	8e 83       	std	Y+6, r24	; 0x06
     80e:	86 e6       	ldi	r24, 0x66	; 102
     810:	89 83       	std	Y+1, r24	; 0x01
     812:	1a 82       	std	Y+2, r1	; 0x02
     814:	14 c0       	rjmp	.+40     	; 0x83e <CAN_receiveMessage+0xb0>
     816:	8a 81       	ldd	r24, Y+2	; 0x02
     818:	08 2f       	mov	r16, r24
     81a:	10 e0       	ldi	r17, 0x00	; 0
     81c:	69 81       	ldd	r22, Y+1	; 0x01
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	ca d2       	rcall	.+1428   	; 0xdb8 <MCP2515_read>
     824:	28 2f       	mov	r18, r24
     826:	ce 01       	movw	r24, r28
     828:	07 96       	adiw	r24, 0x07	; 7
     82a:	80 0f       	add	r24, r16
     82c:	91 1f       	adc	r25, r17
     82e:	fc 01       	movw	r30, r24
     830:	20 83       	st	Z, r18
     832:	89 81       	ldd	r24, Y+1	; 0x01
     834:	8f 5f       	subi	r24, 0xFF	; 255
     836:	89 83       	std	Y+1, r24	; 0x01
     838:	8a 81       	ldd	r24, Y+2	; 0x02
     83a:	8f 5f       	subi	r24, 0xFF	; 255
     83c:	8a 83       	std	Y+2, r24	; 0x02
     83e:	9e 81       	ldd	r25, Y+6	; 0x06
     840:	8a 81       	ldd	r24, Y+2	; 0x02
     842:	89 17       	cp	r24, r25
     844:	40 f3       	brcs	.-48     	; 0x816 <CAN_receiveMessage+0x88>
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	41 e0       	ldi	r20, 0x01	; 1
     84a:	6c e2       	ldi	r22, 0x2C	; 44
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	e9 d2       	rcall	.+1490   	; 0xe24 <MCP2515_bitModify>
     852:	8f 85       	ldd	r24, Y+15	; 0x0f
     854:	98 89       	ldd	r25, Y+16	; 0x10
     856:	2b e0       	ldi	r18, 0x0B	; 11
     858:	fe 01       	movw	r30, r28
     85a:	34 96       	adiw	r30, 0x04	; 4
     85c:	dc 01       	movw	r26, r24
     85e:	01 90       	ld	r0, Z+
     860:	0d 92       	st	X+, r0
     862:	2a 95       	dec	r18
     864:	e1 f7       	brne	.-8      	; 0x85e <CAN_receiveMessage+0xd0>
     866:	4f c0       	rjmp	.+158    	; 0x906 <CAN_receiveMessage+0x178>
     868:	61 e7       	ldi	r22, 0x71	; 113
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	a4 d2       	rcall	.+1352   	; 0xdb8 <MCP2515_read>
     870:	88 2f       	mov	r24, r24
     872:	90 e0       	ldi	r25, 0x00	; 0
     874:	9d 83       	std	Y+5, r25	; 0x05
     876:	8c 83       	std	Y+4, r24	; 0x04
     878:	8c 81       	ldd	r24, Y+4	; 0x04
     87a:	9d 81       	ldd	r25, Y+5	; 0x05
     87c:	8c 01       	movw	r16, r24
     87e:	00 0f       	add	r16, r16
     880:	11 1f       	adc	r17, r17
     882:	00 0f       	add	r16, r16
     884:	11 1f       	adc	r17, r17
     886:	00 0f       	add	r16, r16
     888:	11 1f       	adc	r17, r17
     88a:	62 e7       	ldi	r22, 0x72	; 114
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	93 d2       	rcall	.+1318   	; 0xdb8 <MCP2515_read>
     892:	82 95       	swap	r24
     894:	86 95       	lsr	r24
     896:	87 70       	andi	r24, 0x07	; 7
     898:	88 2f       	mov	r24, r24
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	80 2b       	or	r24, r16
     89e:	91 2b       	or	r25, r17
     8a0:	9d 83       	std	Y+5, r25	; 0x05
     8a2:	8c 83       	std	Y+4, r24	; 0x04
     8a4:	65 e7       	ldi	r22, 0x75	; 117
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	86 d2       	rcall	.+1292   	; 0xdb8 <MCP2515_read>
     8ac:	8e 83       	std	Y+6, r24	; 0x06
     8ae:	86 e7       	ldi	r24, 0x76	; 118
     8b0:	89 83       	std	Y+1, r24	; 0x01
     8b2:	1b 82       	std	Y+3, r1	; 0x03
     8b4:	14 c0       	rjmp	.+40     	; 0x8de <CAN_receiveMessage+0x150>
     8b6:	8b 81       	ldd	r24, Y+3	; 0x03
     8b8:	08 2f       	mov	r16, r24
     8ba:	10 e0       	ldi	r17, 0x00	; 0
     8bc:	69 81       	ldd	r22, Y+1	; 0x01
     8be:	80 e0       	ldi	r24, 0x00	; 0
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	7a d2       	rcall	.+1268   	; 0xdb8 <MCP2515_read>
     8c4:	28 2f       	mov	r18, r24
     8c6:	ce 01       	movw	r24, r28
     8c8:	07 96       	adiw	r24, 0x07	; 7
     8ca:	80 0f       	add	r24, r16
     8cc:	91 1f       	adc	r25, r17
     8ce:	fc 01       	movw	r30, r24
     8d0:	20 83       	st	Z, r18
     8d2:	89 81       	ldd	r24, Y+1	; 0x01
     8d4:	8f 5f       	subi	r24, 0xFF	; 255
     8d6:	89 83       	std	Y+1, r24	; 0x01
     8d8:	8b 81       	ldd	r24, Y+3	; 0x03
     8da:	8f 5f       	subi	r24, 0xFF	; 255
     8dc:	8b 83       	std	Y+3, r24	; 0x03
     8de:	9e 81       	ldd	r25, Y+6	; 0x06
     8e0:	8b 81       	ldd	r24, Y+3	; 0x03
     8e2:	89 17       	cp	r24, r25
     8e4:	40 f3       	brcs	.-48     	; 0x8b6 <CAN_receiveMessage+0x128>
     8e6:	20 e0       	ldi	r18, 0x00	; 0
     8e8:	42 e0       	ldi	r20, 0x02	; 2
     8ea:	6c e2       	ldi	r22, 0x2C	; 44
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	99 d2       	rcall	.+1330   	; 0xe24 <MCP2515_bitModify>
     8f2:	8f 85       	ldd	r24, Y+15	; 0x0f
     8f4:	98 89       	ldd	r25, Y+16	; 0x10
     8f6:	2b e0       	ldi	r18, 0x0B	; 11
     8f8:	fe 01       	movw	r30, r28
     8fa:	34 96       	adiw	r30, 0x04	; 4
     8fc:	dc 01       	movw	r26, r24
     8fe:	01 90       	ld	r0, Z+
     900:	0d 92       	st	X+, r0
     902:	2a 95       	dec	r18
     904:	e1 f7       	brne	.-8      	; 0x8fe <CAN_receiveMessage+0x170>
     906:	8f 85       	ldd	r24, Y+15	; 0x0f
     908:	98 89       	ldd	r25, Y+16	; 0x10
     90a:	61 96       	adiw	r28, 0x11	; 17
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	f8 94       	cli
     910:	de bf       	out	0x3e, r29	; 62
     912:	0f be       	out	0x3f, r0	; 63
     914:	cd bf       	out	0x3d, r28	; 61
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	08 95       	ret

00000920 <CAN_printMessage>:
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	00 d0       	rcall	.+0      	; 0x926 <CAN_printMessage+0x6>
     926:	1f 92       	push	r1
     928:	cd b7       	in	r28, 0x3d	; 61
     92a:	de b7       	in	r29, 0x3e	; 62
     92c:	9b 83       	std	Y+3, r25	; 0x03
     92e:	8a 83       	std	Y+2, r24	; 0x02
     930:	8a 81       	ldd	r24, Y+2	; 0x02
     932:	9b 81       	ldd	r25, Y+3	; 0x03
     934:	fc 01       	movw	r30, r24
     936:	82 81       	ldd	r24, Z+2	; 0x02
     938:	28 2f       	mov	r18, r24
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	8a 81       	ldd	r24, Y+2	; 0x02
     93e:	9b 81       	ldd	r25, Y+3	; 0x03
     940:	fc 01       	movw	r30, r24
     942:	80 81       	ld	r24, Z
     944:	91 81       	ldd	r25, Z+1	; 0x01
     946:	43 2f       	mov	r20, r19
     948:	4f 93       	push	r20
     94a:	2f 93       	push	r18
     94c:	29 2f       	mov	r18, r25
     94e:	2f 93       	push	r18
     950:	8f 93       	push	r24
     952:	82 e1       	ldi	r24, 0x12	; 18
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	89 2f       	mov	r24, r25
     958:	8f 93       	push	r24
     95a:	82 e1       	ldi	r24, 0x12	; 18
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	8f 93       	push	r24
     960:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <printf>
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
     968:	0f 90       	pop	r0
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
     96e:	0f 90       	pop	r0
     970:	19 82       	std	Y+1, r1	; 0x01
     972:	1f c0       	rjmp	.+62     	; 0x9b2 <CAN_printMessage+0x92>
     974:	89 81       	ldd	r24, Y+1	; 0x01
     976:	88 2f       	mov	r24, r24
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	2a 81       	ldd	r18, Y+2	; 0x02
     97c:	3b 81       	ldd	r19, Y+3	; 0x03
     97e:	82 0f       	add	r24, r18
     980:	93 1f       	adc	r25, r19
     982:	03 96       	adiw	r24, 0x03	; 3
     984:	fc 01       	movw	r30, r24
     986:	80 81       	ld	r24, Z
     988:	88 2f       	mov	r24, r24
     98a:	90 e0       	ldi	r25, 0x00	; 0
     98c:	29 2f       	mov	r18, r25
     98e:	2f 93       	push	r18
     990:	8f 93       	push	r24
     992:	8e e3       	ldi	r24, 0x3E	; 62
     994:	91 e0       	ldi	r25, 0x01	; 1
     996:	89 2f       	mov	r24, r25
     998:	8f 93       	push	r24
     99a:	8e e3       	ldi	r24, 0x3E	; 62
     99c:	91 e0       	ldi	r25, 0x01	; 1
     99e:	8f 93       	push	r24
     9a0:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <printf>
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	89 81       	ldd	r24, Y+1	; 0x01
     9ae:	8f 5f       	subi	r24, 0xFF	; 255
     9b0:	89 83       	std	Y+1, r24	; 0x01
     9b2:	8a 81       	ldd	r24, Y+2	; 0x02
     9b4:	9b 81       	ldd	r25, Y+3	; 0x03
     9b6:	fc 01       	movw	r30, r24
     9b8:	92 81       	ldd	r25, Z+2	; 0x02
     9ba:	89 81       	ldd	r24, Y+1	; 0x01
     9bc:	89 17       	cp	r24, r25
     9be:	d0 f2       	brcs	.-76     	; 0x974 <CAN_printMessage+0x54>
     9c0:	8a e0       	ldi	r24, 0x0A	; 10
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <putchar>
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	08 95       	ret

000009d4 <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     9d4:	95 b7       	in	r25, 0x35	; 53
     9d6:	90 68       	ori	r25, 0x80	; 128
     9d8:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     9da:	96 b7       	in	r25, 0x36	; 54
     9dc:	98 60       	ori	r25, 0x08	; 8
     9de:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     9e0:	88 23       	and	r24, r24
     9e2:	19 f0       	breq	.+6      	; 0x9ea <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     9e4:	80 b7       	in	r24, 0x30	; 48
     9e6:	80 62       	ori	r24, 0x20	; 32
     9e8:	80 bf       	out	0x30, r24	; 48
     9ea:	08 95       	ret

000009ec <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     9ec:	fc 01       	movw	r30, r24
     9ee:	80 81       	ld	r24, Z
	return val;
}
     9f0:	08 95       	ret

000009f2 <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     9f2:	fc 01       	movw	r30, r24
     9f4:	60 83       	st	Z, r22
     9f6:	08 95       	ret

000009f8 <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     9f8:	10 92 e5 02 	sts	0x02E5, r1
     9fc:	10 92 e4 02 	sts	0x02E4, r1
	currentPosition.Y_abs = 0;
     a00:	10 92 e7 02 	sts	0x02E7, r1
     a04:	10 92 e6 02 	sts	0x02E6, r1
	currentPosition.X_per = 0;
     a08:	10 92 e9 02 	sts	0x02E9, r1
     a0c:	10 92 e8 02 	sts	0x02E8, r1
	currentPosition.Y_per = 0;
     a10:	10 92 eb 02 	sts	0x02EB, r1
     a14:	10 92 ea 02 	sts	0x02EA, r1
	currentDirection = CENTRE;
     a18:	10 92 e3 02 	sts	0x02E3, r1
     a1c:	08 95       	ret

00000a1e <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     a22:	76 d4       	rcall	.+2284   	; 0x1310 <OLED_clear>
     a24:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	80 e0       	ldi	r24, 0x00	; 0
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	54 d4       	rcall	.+2216   	; 0x12d6 <OLED_goto>
     a2e:	8a e8       	ldi	r24, 0x8A	; 138
     a30:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     a32:	a7 d4       	rcall	.+2382   	; 0x1382 <OLED_printString>
     a34:	2f ef       	ldi	r18, 0xFF	; 255
     a36:	8f ef       	ldi	r24, 0xFF	; 255
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	21 50       	subi	r18, 0x01	; 1
     a3c:	80 40       	sbci	r24, 0x00	; 0
     a3e:	90 40       	sbci	r25, 0x00	; 0
     a40:	e1 f7       	brne	.-8      	; 0xa3a <JOY_calibrate+0x1c>
     a42:	00 c0       	rjmp	.+0      	; 0xa44 <JOY_calibrate+0x26>
     a44:	00 c0       	rjmp	.+0      	; 0xa46 <JOY_calibrate+0x28>
     a46:	c4 e1       	ldi	r28, 0x14	; 20
     a48:	d0 e0       	ldi	r29, 0x00	; 0
     a4a:	60 91 06 01 	lds	r22, 0x0106
     a4e:	70 91 07 01 	lds	r23, 0x0107
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     a52:	82 e0       	ldi	r24, 0x02	; 2
     a54:	91 d6       	rcall	.+3362   	; 0x1778 <ADC_request>
     a56:	2f ef       	ldi	r18, 0xFF	; 255
     a58:	8f e1       	ldi	r24, 0x1F	; 31
     a5a:	91 e0       	ldi	r25, 0x01	; 1
     a5c:	21 50       	subi	r18, 0x01	; 1
     a5e:	80 40       	sbci	r24, 0x00	; 0
     a60:	90 40       	sbci	r25, 0x00	; 0
     a62:	e1 f7       	brne	.-8      	; 0xa5c <JOY_calibrate+0x3e>
     a64:	00 c0       	rjmp	.+0      	; 0xa66 <JOY_calibrate+0x48>
     a66:	00 00       	nop
     a68:	80 91 06 01 	lds	r24, 0x0106
     a6c:	90 91 07 01 	lds	r25, 0x0107
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     a70:	a7 d6       	rcall	.+3406   	; 0x17c0 <ADC_read>
     a72:	90 91 0d 01 	lds	r25, 0x010D
     a76:	98 17       	cp	r25, r24
     a78:	10 f4       	brcc	.+4      	; 0xa7e <JOY_calibrate+0x60>
     a7a:	80 93 0d 01 	sts	0x010D, r24
		
		if(temp > calR) {calR = temp;}
     a7e:	21 97       	sbiw	r28, 0x01	; 1
     a80:	20 97       	sbiw	r28, 0x00	; 0
     a82:	19 f7       	brne	.-58     	; 0xa4a <JOY_calibrate+0x2c>
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	81 e0       	ldi	r24, 0x01	; 1
	OLED_goto(0,0);
	OLED_printString("JOY RIGHT");
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	24 d4       	rcall	.+2120   	; 0x12d6 <OLED_goto>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_goto(1,0);
     a8e:	84 e9       	ldi	r24, 0x94	; 148
     a90:	91 e0       	ldi	r25, 0x01	; 1
     a92:	77 d4       	rcall	.+2286   	; 0x1382 <OLED_printString>
     a94:	2f ef       	ldi	r18, 0xFF	; 255
     a96:	8f ef       	ldi	r24, 0xFF	; 255
     a98:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("JOY LEFT");
     a9a:	21 50       	subi	r18, 0x01	; 1
     a9c:	80 40       	sbci	r24, 0x00	; 0
     a9e:	90 40       	sbci	r25, 0x00	; 0
     aa0:	e1 f7       	brne	.-8      	; 0xa9a <JOY_calibrate+0x7c>
     aa2:	00 c0       	rjmp	.+0      	; 0xaa4 <JOY_calibrate+0x86>
     aa4:	00 c0       	rjmp	.+0      	; 0xaa6 <JOY_calibrate+0x88>
     aa6:	c4 e1       	ldi	r28, 0x14	; 20
     aa8:	d0 e0       	ldi	r29, 0x00	; 0
     aaa:	60 91 06 01 	lds	r22, 0x0106
     aae:	70 91 07 01 	lds	r23, 0x0107
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	61 d6       	rcall	.+3266   	; 0x1778 <ADC_request>
     ab6:	2f ef       	ldi	r18, 0xFF	; 255
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     ab8:	8f e1       	ldi	r24, 0x1F	; 31
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	21 50       	subi	r18, 0x01	; 1
     abe:	80 40       	sbci	r24, 0x00	; 0
     ac0:	90 40       	sbci	r25, 0x00	; 0
     ac2:	e1 f7       	brne	.-8      	; 0xabc <JOY_calibrate+0x9e>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <JOY_calibrate+0xa8>
     ac6:	00 00       	nop
     ac8:	80 91 06 01 	lds	r24, 0x0106
     acc:	90 91 07 01 	lds	r25, 0x0107
     ad0:	77 d6       	rcall	.+3310   	; 0x17c0 <ADC_read>
     ad2:	90 91 0c 01 	lds	r25, 0x010C
     ad6:	89 17       	cp	r24, r25
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     ad8:	10 f4       	brcc	.+4      	; 0xade <JOY_calibrate+0xc0>
     ada:	80 93 0c 01 	sts	0x010C, r24
     ade:	21 97       	sbiw	r28, 0x01	; 1
     ae0:	20 97       	sbiw	r28, 0x00	; 0
     ae2:	19 f7       	brne	.-58     	; 0xaaa <JOY_calibrate+0x8c>
		
		if(temp < calL) {calL = temp;}
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	70 e0       	ldi	r23, 0x00	; 0
     ae8:	82 e0       	ldi	r24, 0x02	; 2
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	f4 d3       	rcall	.+2024   	; 0x12d6 <OLED_goto>
     aee:	8d e9       	ldi	r24, 0x9D	; 157
     af0:	91 e0       	ldi	r25, 0x01	; 1
	OLED_goto(1,0);
	OLED_printString("JOY LEFT");
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     af2:	47 d4       	rcall	.+2190   	; 0x1382 <OLED_printString>
     af4:	2f ef       	ldi	r18, 0xFF	; 255
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_goto(2,0);
     af6:	8f ef       	ldi	r24, 0xFF	; 255
     af8:	92 e0       	ldi	r25, 0x02	; 2
     afa:	21 50       	subi	r18, 0x01	; 1
     afc:	80 40       	sbci	r24, 0x00	; 0
     afe:	90 40       	sbci	r25, 0x00	; 0
     b00:	e1 f7       	brne	.-8      	; 0xafa <JOY_calibrate+0xdc>
	OLED_printString("JOY UP");
     b02:	00 c0       	rjmp	.+0      	; 0xb04 <JOY_calibrate+0xe6>
     b04:	00 c0       	rjmp	.+0      	; 0xb06 <JOY_calibrate+0xe8>
     b06:	c4 e1       	ldi	r28, 0x14	; 20
     b08:	d0 e0       	ldi	r29, 0x00	; 0
     b0a:	60 91 06 01 	lds	r22, 0x0106
     b0e:	70 91 07 01 	lds	r23, 0x0107
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	31 d6       	rcall	.+3170   	; 0x1778 <ADC_request>
     b16:	2f ef       	ldi	r18, 0xFF	; 255
     b18:	8f e1       	ldi	r24, 0x1F	; 31
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	21 50       	subi	r18, 0x01	; 1
     b1e:	80 40       	sbci	r24, 0x00	; 0
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     b20:	90 40       	sbci	r25, 0x00	; 0
     b22:	e1 f7       	brne	.-8      	; 0xb1c <JOY_calibrate+0xfe>
     b24:	00 c0       	rjmp	.+0      	; 0xb26 <JOY_calibrate+0x108>
     b26:	00 00       	nop
     b28:	80 91 06 01 	lds	r24, 0x0106
     b2c:	90 91 07 01 	lds	r25, 0x0107
     b30:	47 d6       	rcall	.+3214   	; 0x17c0 <ADC_read>
     b32:	90 91 0b 01 	lds	r25, 0x010B
     b36:	98 17       	cp	r25, r24
     b38:	10 f4       	brcc	.+4      	; 0xb3e <JOY_calibrate+0x120>
     b3a:	80 93 0b 01 	sts	0x010B, r24
     b3e:	21 97       	sbiw	r28, 0x01	; 1
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     b40:	20 97       	sbiw	r28, 0x00	; 0
     b42:	19 f7       	brne	.-58     	; 0xb0a <JOY_calibrate+0xec>
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	83 e0       	ldi	r24, 0x03	; 3
     b4a:	90 e0       	ldi	r25, 0x00	; 0
		
		if(temp > calUp) {calUp = temp;}
     b4c:	c4 d3       	rcall	.+1928   	; 0x12d6 <OLED_goto>
     b4e:	84 ea       	ldi	r24, 0xA4	; 164
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	17 d4       	rcall	.+2094   	; 0x1382 <OLED_printString>
     b54:	2f ef       	ldi	r18, 0xFF	; 255
     b56:	8f ef       	ldi	r24, 0xFF	; 255
     b58:	92 e0       	ldi	r25, 0x02	; 2
	OLED_goto(2,0);
	OLED_printString("JOY UP");
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     b5a:	21 50       	subi	r18, 0x01	; 1
     b5c:	80 40       	sbci	r24, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_goto(3,0);
     b5e:	90 40       	sbci	r25, 0x00	; 0
     b60:	e1 f7       	brne	.-8      	; 0xb5a <JOY_calibrate+0x13c>
     b62:	00 c0       	rjmp	.+0      	; 0xb64 <JOY_calibrate+0x146>
     b64:	00 c0       	rjmp	.+0      	; 0xb66 <JOY_calibrate+0x148>
     b66:	c4 e1       	ldi	r28, 0x14	; 20
     b68:	d0 e0       	ldi	r29, 0x00	; 0
	OLED_printString("JOY DOWN");
     b6a:	60 91 06 01 	lds	r22, 0x0106
     b6e:	70 91 07 01 	lds	r23, 0x0107
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	01 d6       	rcall	.+3074   	; 0x1778 <ADC_request>
     b76:	2f ef       	ldi	r18, 0xFF	; 255
     b78:	8f e1       	ldi	r24, 0x1F	; 31
     b7a:	91 e0       	ldi	r25, 0x01	; 1
     b7c:	21 50       	subi	r18, 0x01	; 1
     b7e:	80 40       	sbci	r24, 0x00	; 0
     b80:	90 40       	sbci	r25, 0x00	; 0
     b82:	e1 f7       	brne	.-8      	; 0xb7c <JOY_calibrate+0x15e>
     b84:	00 c0       	rjmp	.+0      	; 0xb86 <JOY_calibrate+0x168>
     b86:	00 00       	nop
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     b88:	80 91 06 01 	lds	r24, 0x0106
     b8c:	90 91 07 01 	lds	r25, 0x0107
     b90:	17 d6       	rcall	.+3118   	; 0x17c0 <ADC_read>
     b92:	90 91 0a 01 	lds	r25, 0x010A
     b96:	89 17       	cp	r24, r25
     b98:	10 f4       	brcc	.+4      	; 0xb9e <JOY_calibrate+0x180>
     b9a:	80 93 0a 01 	sts	0x010A, r24
     b9e:	21 97       	sbiw	r28, 0x01	; 1
     ba0:	20 97       	sbiw	r28, 0x00	; 0
     ba2:	19 f7       	brne	.-58     	; 0xb6a <JOY_calibrate+0x14c>
     ba4:	20 91 0b 01 	lds	r18, 0x010B
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     ba8:	80 91 0a 01 	lds	r24, 0x010A
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	28 1b       	sub	r18, r24
     bb0:	31 09       	sbc	r19, r1
     bb2:	c9 01       	movw	r24, r18
		
		if(temp < calDown) {calDown = temp;}
     bb4:	99 23       	and	r25, r25
     bb6:	0c f4       	brge	.+2      	; 0xbba <JOY_calibrate+0x19c>
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	95 95       	asr	r25
     bbc:	87 95       	ror	r24
     bbe:	80 93 09 01 	sts	0x0109, r24
	OLED_goto(3,0);
	OLED_printString("JOY DOWN");
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     bc2:	20 91 0d 01 	lds	r18, 0x010D
	}
	
	
	//printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
	
	meanVert = (calUp - calDown)/2;
     bc6:	80 91 0c 01 	lds	r24, 0x010C
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	31 09       	sbc	r19, r1
     bd0:	c9 01       	movw	r24, r18
     bd2:	99 23       	and	r25, r25
     bd4:	0c f4       	brge	.+2      	; 0xbd8 <JOY_calibrate+0x1ba>
     bd6:	01 96       	adiw	r24, 0x01	; 1
     bd8:	95 95       	asr	r25
     bda:	87 95       	ror	r24
     bdc:	80 93 08 01 	sts	0x0108, r24
     be0:	60 e0       	ldi	r22, 0x00	; 0
     be2:	70 e0       	ldi	r23, 0x00	; 0
	meanHor = (calR - calL)/2;
     be4:	84 e0       	ldi	r24, 0x04	; 4
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	76 d3       	rcall	.+1772   	; 0x12d6 <OLED_goto>
     bea:	8d ea       	ldi	r24, 0xAD	; 173
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	c9 d3       	rcall	.+1938   	; 0x1382 <OLED_printString>
     bf0:	2f ef       	ldi	r18, 0xFF	; 255
     bf2:	8f ef       	ldi	r24, 0xFF	; 255
     bf4:	9e e0       	ldi	r25, 0x0E	; 14
     bf6:	21 50       	subi	r18, 0x01	; 1
     bf8:	80 40       	sbci	r24, 0x00	; 0
     bfa:	90 40       	sbci	r25, 0x00	; 0
     bfc:	e1 f7       	brne	.-8      	; 0xbf6 <JOY_calibrate+0x1d8>
     bfe:	00 c0       	rjmp	.+0      	; 0xc00 <JOY_calibrate+0x1e2>
     c00:	00 00       	nop
	
	OLED_goto(4,0);
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	08 95       	ret

00000c08 <JOY_requestCurrentPosition>:
     c08:	88 37       	cpi	r24, 0x78	; 120
     c0a:	39 f4       	brne	.+14     	; 0xc1a <JOY_requestCurrentPosition+0x12>
     c0c:	60 91 06 01 	lds	r22, 0x0106
	OLED_printString("CALIB DONE");
     c10:	70 91 07 01 	lds	r23, 0x0107
     c14:	82 e0       	ldi	r24, 0x02	; 2
     c16:	b0 c5       	rjmp	.+2912   	; 0x1778 <ADC_request>
     c18:	08 95       	ret
     c1a:	89 37       	cpi	r24, 0x79	; 121
     c1c:	31 f4       	brne	.+12     	; 0xc2a <JOY_requestCurrentPosition+0x22>
     c1e:	60 91 06 01 	lds	r22, 0x0106
     c22:	70 91 07 01 	lds	r23, 0x0107
     c26:	81 e0       	ldi	r24, 0x01	; 1
	//printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
	_delay_ms(1000);
}
     c28:	a7 c5       	rjmp	.+2894   	; 0x1778 <ADC_request>
     c2a:	08 95       	ret

00000c2c <JOY_updatePosition>:
     c2c:	88 37       	cpi	r24, 0x78	; 120
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
	{
		ADC_request(Y_channel, adc_ext_ram);
     c2e:	f9 f4       	brne	.+62     	; 0xc6e <JOY_updatePosition+0x42>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     c30:	80 91 06 01 	lds	r24, 0x0106
     c34:	90 91 07 01 	lds	r25, 0x0107
     c38:	c3 d5       	rcall	.+2950   	; 0x17c0 <ADC_read>
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	90 93 e5 02 	sts	0x02E5, r25
     c40:	80 93 e4 02 	sts	0x02E4, r24
     c44:	20 91 08 01 	lds	r18, 0x0108
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     c48:	60 91 08 01 	lds	r22, 0x0108
     c4c:	ac 01       	movw	r20, r24
     c4e:	42 1b       	sub	r20, r18
     c50:	51 09       	sbc	r21, r1
     c52:	9a 01       	movw	r18, r20
     c54:	44 e6       	ldi	r20, 0x64	; 100
     c56:	42 9f       	mul	r20, r18
     c58:	c0 01       	movw	r24, r0
     c5a:	43 9f       	mul	r20, r19
     c5c:	90 0d       	add	r25, r0
     c5e:	11 24       	eor	r1, r1
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	b0 d5       	rcall	.+2912   	; 0x17c4 <__divmodhi4>
     c64:	70 93 e9 02 	sts	0x02E9, r23
     c68:	60 93 e8 02 	sts	0x02E8, r22
     c6c:	08 95       	ret
     c6e:	89 37       	cpi	r24, 0x79	; 121
     c70:	f1 f4       	brne	.+60     	; 0xcae <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     c72:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     c76:	90 91 07 01 	lds	r25, 0x0107
     c7a:	a2 d5       	rcall	.+2884   	; 0x17c0 <ADC_read>
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	90 93 e7 02 	sts	0x02E7, r25
     c82:	80 93 e6 02 	sts	0x02E6, r24
     c86:	20 91 09 01 	lds	r18, 0x0109
     c8a:	60 91 09 01 	lds	r22, 0x0109
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     c8e:	ac 01       	movw	r20, r24
     c90:	42 1b       	sub	r20, r18
     c92:	51 09       	sbc	r21, r1
     c94:	9a 01       	movw	r18, r20
     c96:	44 e6       	ldi	r20, 0x64	; 100
     c98:	42 9f       	mul	r20, r18
     c9a:	c0 01       	movw	r24, r0
     c9c:	43 9f       	mul	r20, r19
     c9e:	90 0d       	add	r25, r0
     ca0:	11 24       	eor	r1, r1
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	8f d5       	rcall	.+2846   	; 0x17c4 <__divmodhi4>
     ca6:	70 93 eb 02 	sts	0x02EB, r23
     caa:	60 93 ea 02 	sts	0x02EA, r22
     cae:	08 95       	ret

00000cb0 <JOY_calculateDirection>:
     cb0:	80 91 e8 02 	lds	r24, 0x02E8
     cb4:	90 91 e9 02 	lds	r25, 0x02E9
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     cb8:	8b 35       	cpi	r24, 0x5B	; 91
     cba:	91 05       	cpc	r25, r1
     cbc:	24 f0       	brlt	.+8      	; 0xcc6 <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	80 93 e3 02 	sts	0x02E3, r24
     cc4:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     cc6:	86 3a       	cpi	r24, 0xA6	; 166
     cc8:	9f 4f       	sbci	r25, 0xFF	; 255
     cca:	24 f4       	brge	.+8      	; 0xcd4 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     ccc:	84 e0       	ldi	r24, 0x04	; 4
     cce:	80 93 e3 02 	sts	0x02E3, r24
     cd2:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     cd4:	80 91 ea 02 	lds	r24, 0x02EA
     cd8:	90 91 eb 02 	lds	r25, 0x02EB
     cdc:	8b 35       	cpi	r24, 0x5B	; 91
     cde:	91 05       	cpc	r25, r1
     ce0:	24 f0       	brlt	.+8      	; 0xcea <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	80 93 e3 02 	sts	0x02E3, r24
     ce8:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     cea:	86 3a       	cpi	r24, 0xA6	; 166
     cec:	9f 4f       	sbci	r25, 0xFF	; 255
     cee:	24 f4       	brge	.+8      	; 0xcf8 <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     cf0:	82 e0       	ldi	r24, 0x02	; 2
     cf2:	80 93 e3 02 	sts	0x02E3, r24
     cf6:	08 95       	ret
	else{currentDirection = CENTRE;}
     cf8:	10 92 e3 02 	sts	0x02E3, r1
     cfc:	08 95       	ret

00000cfe <JOY_getPosition>:

//------------------------------------------------------------------------------
// This function returns the current position of the Joystick.
// It is a struct with the four parameters X_abs, Y_abs, X_per and Y_per
JOY_position_t JOY_getPosition()
{
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	28 97       	sbiw	r28, 0x08	; 8
     d08:	0f b6       	in	r0, 0x3f	; 63
     d0a:	f8 94       	cli
     d0c:	de bf       	out	0x3e, r29	; 62
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	cd bf       	out	0x3d, r28	; 61
	JOY_requestCurrentPosition('x');
     d12:	88 e7       	ldi	r24, 0x78	; 120
     d14:	79 df       	rcall	.-270    	; 0xc08 <JOY_requestCurrentPosition>
     d16:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d18:	8a 95       	dec	r24
     d1a:	f1 f7       	brne	.-4      	; 0xd18 <JOY_getPosition+0x1a>
     d1c:	00 00       	nop
     d1e:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     d20:	85 df       	rcall	.-246    	; 0xc2c <JOY_updatePosition>
     d22:	89 e7       	ldi	r24, 0x79	; 121
     d24:	71 df       	rcall	.-286    	; 0xc08 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     d26:	82 e6       	ldi	r24, 0x62	; 98
     d28:	8a 95       	dec	r24
     d2a:	f1 f7       	brne	.-4      	; 0xd28 <JOY_getPosition+0x2a>
     d2c:	00 00       	nop
     d2e:	89 e7       	ldi	r24, 0x79	; 121
     d30:	7d df       	rcall	.-262    	; 0xc2c <JOY_updatePosition>
     d32:	88 e0       	ldi	r24, 0x08	; 8
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     d34:	e4 ee       	ldi	r30, 0xE4	; 228
     d36:	f2 e0       	ldi	r31, 0x02	; 2
     d38:	de 01       	movw	r26, r28
	return currentPosition;
     d3a:	11 96       	adiw	r26, 0x01	; 1
     d3c:	01 90       	ld	r0, Z+
     d3e:	0d 92       	st	X+, r0
     d40:	8a 95       	dec	r24
     d42:	e1 f7       	brne	.-8      	; 0xd3c <JOY_getPosition+0x3e>
     d44:	29 81       	ldd	r18, Y+1	; 0x01
     d46:	3a 81       	ldd	r19, Y+2	; 0x02
     d48:	4b 81       	ldd	r20, Y+3	; 0x03
     d4a:	5c 81       	ldd	r21, Y+4	; 0x04
     d4c:	6d 81       	ldd	r22, Y+5	; 0x05
     d4e:	7e 81       	ldd	r23, Y+6	; 0x06
     d50:	8f 81       	ldd	r24, Y+7	; 0x07
     d52:	98 85       	ldd	r25, Y+8	; 0x08
     d54:	28 96       	adiw	r28, 0x08	; 8
     d56:	0f b6       	in	r0, 0x3f	; 63
}
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	08 95       	ret

00000d66 <JOY_getDirection>:
     d66:	88 e7       	ldi	r24, 0x78	; 120
     d68:	4f df       	rcall	.-354    	; 0xc08 <JOY_requestCurrentPosition>
     d6a:	82 e6       	ldi	r24, 0x62	; 98
     d6c:	8a 95       	dec	r24
     d6e:	f1 f7       	brne	.-4      	; 0xd6c <JOY_getDirection+0x6>
     d70:	00 00       	nop
     d72:	88 e7       	ldi	r24, 0x78	; 120
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     d74:	5b df       	rcall	.-330    	; 0xc2c <JOY_updatePosition>
     d76:	89 e7       	ldi	r24, 0x79	; 121
     d78:	47 df       	rcall	.-370    	; 0xc08 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     d7a:	82 e6       	ldi	r24, 0x62	; 98
     d7c:	8a 95       	dec	r24
     d7e:	f1 f7       	brne	.-4      	; 0xd7c <JOY_getDirection+0x16>
     d80:	00 00       	nop
     d82:	89 e7       	ldi	r24, 0x79	; 121
     d84:	53 df       	rcall	.-346    	; 0xc2c <JOY_updatePosition>
     d86:	94 df       	rcall	.-216    	; 0xcb0 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     d88:	80 91 e3 02 	lds	r24, 0x02E3
     d8c:	08 95       	ret

00000d8e <MCP2515_reset>:
	//printf("finished MCP2515_init\n");
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
     d8e:	cf 93       	push	r28
     d90:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
     d92:	c9 d4       	rcall	.+2450   	; 0x1726 <SPI_activateSlave>
     d94:	80 ec       	ldi	r24, 0xC0	; 192
	SPI_send(MCP_RESET);
     d96:	bd d4       	rcall	.+2426   	; 0x1712 <SPI_send>
     d98:	8c ec       	ldi	r24, 0xCC	; 204
     d9a:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d9c:	01 97       	sbiw	r24, 0x01	; 1
     d9e:	f1 f7       	brne	.-4      	; 0xd9c <MCP2515_reset+0xe>
     da0:	00 c0       	rjmp	.+0      	; 0xda2 <MCP2515_reset+0x14>
     da2:	00 00       	nop
     da4:	8c 2f       	mov	r24, r28
     da6:	c3 d4       	rcall	.+2438   	; 0x172e <SPI_deactivateSlave>
	_delay_ms(1);
	SPI_deactivateSlave(slave);
     da8:	8f ef       	ldi	r24, 0xFF	; 255
     daa:	9f e2       	ldi	r25, 0x2F	; 47
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <MCP2515_reset+0x1e>
     db0:	00 c0       	rjmp	.+0      	; 0xdb2 <MCP2515_reset+0x24>
     db2:	00 00       	nop
     db4:	cf 91       	pop	r28
     db6:	08 95       	ret

00000db8 <MCP2515_read>:
     db8:	cf 93       	push	r28
	_delay_ms(10);
}
     dba:	df 93       	push	r29
     dbc:	c8 2f       	mov	r28, r24

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
     dbe:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
     dc0:	b2 d4       	rcall	.+2404   	; 0x1726 <SPI_activateSlave>
     dc2:	83 e0       	ldi	r24, 0x03	; 3
	SPI_send(MCP_READ);
     dc4:	a6 d4       	rcall	.+2380   	; 0x1712 <SPI_send>
     dc6:	8c ec       	ldi	r24, 0xCC	; 204
     dc8:	94 e0       	ldi	r25, 0x04	; 4
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	f1 f7       	brne	.-4      	; 0xdca <MCP2515_read+0x12>
     dce:	00 c0       	rjmp	.+0      	; 0xdd0 <MCP2515_read+0x18>
     dd0:	00 00       	nop
     dd2:	8d 2f       	mov	r24, r29
     dd4:	9e d4       	rcall	.+2364   	; 0x1712 <SPI_send>
	_delay_ms(1);
	SPI_send(address);
     dd6:	a1 d4       	rcall	.+2370   	; 0x171a <SPI_receive>
     dd8:	d8 2f       	mov	r29, r24
     dda:	8c 2f       	mov	r24, r28
	
	uint8_t result;
	result = SPI_receive();
     ddc:	a8 d4       	rcall	.+2384   	; 0x172e <SPI_deactivateSlave>
     dde:	8d 2f       	mov	r24, r29
     de0:	df 91       	pop	r29
	
	SPI_deactivateSlave(slave);
     de2:	cf 91       	pop	r28
     de4:	08 95       	ret

00000de6 <MCP2515_init>:
     de6:	80 e0       	ldi	r24, 0x00	; 0
	return result;
}
     de8:	d2 df       	rcall	.-92     	; 0xd8e <MCP2515_reset>
     dea:	6e e0       	ldi	r22, 0x0E	; 14
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	e4 df       	rcall	.-56     	; 0xdb8 <MCP2515_read>
uint8_t MCP2515_init()
{
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
	// Self-test
	uint8_t value;
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
     df0:	98 2f       	mov	r25, r24
     df2:	90 7e       	andi	r25, 0xE0	; 224
	//printf("CANSTAT: %#x\n", value);
	if((value & MODE_MASK) != MODE_CONFIG) 
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 38       	cpi	r25, 0x80	; 128
     df8:	09 f4       	brne	.+2      	; 0xdfc <MCP2515_init+0x16>
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	08 95       	ret

00000dfe <MCP2515_write>:
     dfe:	1f 93       	push	r17
		return 1;
	}
	//
	//printf("finished MCP2515_init\n");
	return 0;
}
     e00:	cf 93       	push	r28
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_write(SPI_SLAVES slave, uint8_t address, uint8_t data)
{
     e02:	df 93       	push	r29
     e04:	c8 2f       	mov	r28, r24
     e06:	16 2f       	mov	r17, r22
     e08:	d4 2f       	mov	r29, r20
	SPI_activateSlave(slave);
     e0a:	8d d4       	rcall	.+2330   	; 0x1726 <SPI_activateSlave>
     e0c:	82 e0       	ldi	r24, 0x02	; 2
	SPI_send(MCP_WRITE);
     e0e:	81 d4       	rcall	.+2306   	; 0x1712 <SPI_send>
     e10:	81 2f       	mov	r24, r17
     e12:	7f d4       	rcall	.+2302   	; 0x1712 <SPI_send>
	SPI_send(address);
     e14:	8d 2f       	mov	r24, r29
     e16:	7d d4       	rcall	.+2298   	; 0x1712 <SPI_send>
     e18:	8c 2f       	mov	r24, r28
	SPI_send(data);
     e1a:	89 d4       	rcall	.+2322   	; 0x172e <SPI_deactivateSlave>
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
	SPI_deactivateSlave(slave);
     e20:	1f 91       	pop	r17
     e22:	08 95       	ret

00000e24 <MCP2515_bitModify>:
     e24:	0f 93       	push	r16
}
     e26:	1f 93       	push	r17
     e28:	cf 93       	push	r28
     e2a:	df 93       	push	r29
     e2c:	c8 2f       	mov	r28, r24
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_bitModify(SPI_SLAVES slave, uint8_t register2change, uint8_t mask, uint8_t newValue)
{
     e2e:	06 2f       	mov	r16, r22
     e30:	14 2f       	mov	r17, r20
     e32:	d2 2f       	mov	r29, r18
	SPI_activateSlave(slave);
     e34:	78 d4       	rcall	.+2288   	; 0x1726 <SPI_activateSlave>
     e36:	85 e0       	ldi	r24, 0x05	; 5
	
	SPI_send(MCP_BITMOD);
     e38:	6c d4       	rcall	.+2264   	; 0x1712 <SPI_send>
     e3a:	80 2f       	mov	r24, r16
     e3c:	6a d4       	rcall	.+2260   	; 0x1712 <SPI_send>
	SPI_send(register2change);
     e3e:	81 2f       	mov	r24, r17
     e40:	68 d4       	rcall	.+2256   	; 0x1712 <SPI_send>
     e42:	8d 2f       	mov	r24, r29
	SPI_send(mask);
     e44:	66 d4       	rcall	.+2252   	; 0x1712 <SPI_send>
     e46:	8c 2f       	mov	r24, r28
     e48:	72 d4       	rcall	.+2276   	; 0x172e <SPI_deactivateSlave>
	SPI_send(newValue);
     e4a:	df 91       	pop	r29
     e4c:	cf 91       	pop	r28
     e4e:	1f 91       	pop	r17
	
	SPI_deactivateSlave(slave);
     e50:	0f 91       	pop	r16
     e52:	08 95       	ret

00000e54 <startGame>:

static int menuFrameOffset = 10; //Columns from left frame border
//******************************************************************************************

void startGame()
{
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
	OLED_clear();
     e58:	5b d2       	rcall	.+1206   	; 0x1310 <OLED_clear>
     e5a:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	39 d2       	rcall	.+1138   	; 0x12d6 <OLED_goto>
     e64:	88 eb       	ldi	r24, 0xB8	; 184
     e66:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("START");
     e68:	8c d2       	rcall	.+1304   	; 0x1382 <OLED_printString>
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_goto(3,0);
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	31 d2       	rcall	.+1122   	; 0x12d6 <OLED_goto>
     e74:	ce e0       	ldi	r28, 0x0E	; 14
     e76:	d0 e0       	ldi	r29, 0x00	; 0
     e78:	8e eb       	ldi	r24, 0xBE	; 190
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	82 d2       	rcall	.+1284   	; 0x1382 <OLED_printString>
     e7e:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     e80:	8f e7       	ldi	r24, 0x7F	; 127
     e82:	97 e0       	ldi	r25, 0x07	; 7
     e84:	21 50       	subi	r18, 0x01	; 1
     e86:	80 40       	sbci	r24, 0x00	; 0
     e88:	90 40       	sbci	r25, 0x00	; 0
     e8a:	e1 f7       	brne	.-8      	; 0xe84 <startGame+0x30>
     e8c:	00 c0       	rjmp	.+0      	; 0xe8e <startGame+0x3a>
     e8e:	00 00       	nop
     e90:	21 97       	sbiw	r28, 0x01	; 1
     e92:	20 97       	sbiw	r28, 0x00	; 0
     e94:	89 f7       	brne	.-30     	; 0xe78 <startGame+0x24>
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	85 e0       	ldi	r24, 0x05	; 5
	OLED_goto(0,0);
	OLED_printString("START");
	
	OLED_goto(3,0);
	
	for(int i = 14; i > 0; i--)
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	1b d2       	rcall	.+1078   	; 0x12d6 <OLED_goto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_goto(5,0);
     ea0:	80 ec       	ldi	r24, 0xC0	; 192
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	6e d2       	rcall	.+1244   	; 0x1382 <OLED_printString>
     ea6:	2f ef       	ldi	r18, 0xFF	; 255
     ea8:	8f ef       	ldi	r24, 0xFF	; 255
     eaa:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     eac:	21 50       	subi	r18, 0x01	; 1
     eae:	80 40       	sbci	r24, 0x00	; 0
     eb0:	90 40       	sbci	r25, 0x00	; 0
     eb2:	e1 f7       	brne	.-8      	; 0xeac <startGame+0x58>
     eb4:	00 c0       	rjmp	.+0      	; 0xeb6 <startGame+0x62>
     eb6:	00 c0       	rjmp	.+0      	; 0xeb8 <startGame+0x64>
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	08 95       	ret

00000ebe <MENU_addMenuItem>:
     ebe:	cf 92       	push	r12
     ec0:	df 92       	push	r13
     ec2:	ef 92       	push	r14
     ec4:	ff 92       	push	r15
	_delay_ms(3000);
}
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     ecc:	df 93       	push	r29
     ece:	8c 01       	movw	r16, r24
     ed0:	7b 01       	movw	r14, r22
     ed2:	6a 01       	movw	r12, r20
     ed4:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     ed6:	80 91 ef 02 	lds	r24, 0x02EF
     eda:	90 91 f0 02 	lds	r25, 0x02F0
     ede:	89 2b       	or	r24, r25
     ee0:	19 f0       	breq	.+6      	; 0xee8 <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     ee2:	89 ec       	ldi	r24, 0xC9	; 201
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	1c d6       	rcall	.+3128   	; 0x1b20 <puts>
     ee8:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	92 d4       	rcall	.+2340   	; 0x1812 <malloc>
     eee:	fc 01       	movw	r30, r24
     ef0:	90 93 f0 02 	sts	0x02F0, r25
     ef4:	80 93 ef 02 	sts	0x02EF, r24
     ef8:	f3 82       	std	Z+3, r15	; 0x03
     efa:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     efc:	11 83       	std	Z+1, r17	; 0x01
     efe:	00 83       	st	Z, r16
	currItem->name = name;
     f00:	cd 2b       	or	r28, r29
     f02:	39 f0       	breq	.+14     	; 0xf12 <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     f04:	d5 82       	std	Z+5, r13	; 0x05
     f06:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     f0c:	97 83       	std	Z+7, r25	; 0x07
     f0e:	86 83       	std	Z+6, r24	; 0x06
     f10:	04 c0       	rjmp	.+8      	; 0xf1a <MENU_addMenuItem+0x5c>
     f12:	15 82       	std	Z+5, r1	; 0x05
     f14:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     f16:	17 82       	std	Z+7, r1	; 0x07
     f18:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     f1a:	df 91       	pop	r29
     f1c:	cf 91       	pop	r28
	}
}
     f1e:	1f 91       	pop	r17
     f20:	0f 91       	pop	r16
     f22:	ff 90       	pop	r15
     f24:	ef 90       	pop	r14
     f26:	df 90       	pop	r13
     f28:	cf 90       	pop	r12
     f2a:	08 95       	ret

00000f2c <MENU_buildMenus>:
     f2c:	cf 93       	push	r28
     f2e:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     f30:	86 e1       	ldi	r24, 0x16	; 22
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	6e d4       	rcall	.+2268   	; 0x1812 <malloc>
     f36:	ec 01       	movw	r28, r24
     f38:	90 93 f6 02 	sts	0x02F6, r25
     f3c:	80 93 f5 02 	sts	0x02F5, r24
     f40:	8f ed       	ldi	r24, 0xDF	; 223
	mainMenu->menuName = "MainMenu";
     f42:	91 e0       	ldi	r25, 0x01	; 1
     f44:	99 83       	std	Y+1, r25	; 0x01
     f46:	88 83       	st	Y, r24
     f48:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     f4a:	1c 8a       	std	Y+20, r1	; 0x14
     f4c:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	9b 83       	std	Y+3, r25	; 0x03
     f52:	8a 83       	std	Y+2, r24	; 0x02
     f54:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	5c d4       	rcall	.+2232   	; 0x1812 <malloc>
     f5a:	fc 01       	movw	r30, r24
     f5c:	90 93 f4 02 	sts	0x02F4, r25
     f60:	80 93 f3 02 	sts	0x02F3, r24
     f64:	88 ee       	ldi	r24, 0xE8	; 232
     f66:	91 e0       	ldi	r25, 0x01	; 1
	difficultyMenu->menuName = "DifficultyMenu";
     f68:	91 83       	std	Z+1, r25	; 0x01
     f6a:	80 83       	st	Z, r24
     f6c:	d5 8b       	std	Z+21, r29	; 0x15
     f6e:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     f70:	83 e0       	ldi	r24, 0x03	; 3
     f72:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     f74:	93 83       	std	Z+3, r25	; 0x03
     f76:	82 83       	std	Z+2, r24	; 0x02
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	be 01       	movw	r22, r28
     f82:	87 ef       	ldi	r24, 0xF7	; 247
     f84:	91 e0       	ldi	r25, 0x01	; 1
     f86:	9b df       	rcall	.-202    	; 0xebe <MENU_addMenuItem>
     f88:	60 91 f5 02 	lds	r22, 0x02F5
     f8c:	70 91 f6 02 	lds	r23, 0x02F6
	mainMenu->children[0] = currItem;
     f90:	e0 91 ef 02 	lds	r30, 0x02EF
     f94:	f0 91 f0 02 	lds	r31, 0x02F0
     f98:	db 01       	movw	r26, r22
     f9a:	15 96       	adiw	r26, 0x05	; 5
     f9c:	fc 93       	st	X, r31
     f9e:	ee 93       	st	-X, r30
     fa0:	14 97       	sbiw	r26, 0x04	; 4
     fa2:	8a e2       	ldi	r24, 0x2A	; 42
     fa4:	97 e0       	ldi	r25, 0x07	; 7
     fa6:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
     fa8:	82 87       	std	Z+10, r24	; 0x0a
     faa:	40 91 f3 02 	lds	r20, 0x02F3
     fae:	50 91 f4 02 	lds	r21, 0x02F4
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     fb2:	21 e0       	ldi	r18, 0x01	; 1
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	92 e0       	ldi	r25, 0x02	; 2
     fba:	81 df       	rcall	.-254    	; 0xebe <MENU_addMenuItem>
     fbc:	60 91 f5 02 	lds	r22, 0x02F5
     fc0:	70 91 f6 02 	lds	r23, 0x02F6
	mainMenu->children[1] = currItem;
     fc4:	80 91 ef 02 	lds	r24, 0x02EF
     fc8:	90 91 f0 02 	lds	r25, 0x02F0
     fcc:	fb 01       	movw	r30, r22
     fce:	97 83       	std	Z+7, r25	; 0x07
     fd0:	86 83       	std	Z+6, r24	; 0x06
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	40 e0       	ldi	r20, 0x00	; 0
     fd8:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     fda:	8b e0       	ldi	r24, 0x0B	; 11
     fdc:	92 e0       	ldi	r25, 0x02	; 2
     fde:	6f df       	rcall	.-290    	; 0xebe <MENU_addMenuItem>
     fe0:	60 91 f5 02 	lds	r22, 0x02F5
     fe4:	70 91 f6 02 	lds	r23, 0x02F6
     fe8:	80 91 ef 02 	lds	r24, 0x02EF
	mainMenu->children[2] = currItem;
     fec:	90 91 f0 02 	lds	r25, 0x02F0
     ff0:	db 01       	movw	r26, r22
     ff2:	19 96       	adiw	r26, 0x09	; 9
     ff4:	9c 93       	st	X, r25
     ff6:	8e 93       	st	-X, r24
     ff8:	18 97       	sbiw	r26, 0x08	; 8
     ffa:	20 e0       	ldi	r18, 0x00	; 0
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	40 e0       	ldi	r20, 0x00	; 0
    1000:	50 e0       	ldi	r21, 0x00	; 0
    1002:	86 e1       	ldi	r24, 0x16	; 22
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
    1004:	92 e0       	ldi	r25, 0x02	; 2
    1006:	5b df       	rcall	.-330    	; 0xebe <MENU_addMenuItem>
    1008:	60 91 f5 02 	lds	r22, 0x02F5
    100c:	70 91 f6 02 	lds	r23, 0x02F6
    1010:	e0 91 ef 02 	lds	r30, 0x02EF
	mainMenu->children[3] = currItem;
    1014:	f0 91 f0 02 	lds	r31, 0x02F0
    1018:	db 01       	movw	r26, r22
    101a:	1b 96       	adiw	r26, 0x0b	; 11
    101c:	fc 93       	st	X, r31
    101e:	ee 93       	st	-X, r30
    1020:	1a 97       	sbiw	r26, 0x0a	; 10
    1022:	8f e0       	ldi	r24, 0x0F	; 15
    1024:	95 e0       	ldi	r25, 0x05	; 5
    1026:	93 87       	std	Z+11, r25	; 0x0b
    1028:	82 87       	std	Z+10, r24	; 0x0a
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
    102e:	40 e0       	ldi	r20, 0x00	; 0
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	80 e2       	ldi	r24, 0x20	; 32
    1034:	92 e0       	ldi	r25, 0x02	; 2
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
    1036:	43 df       	rcall	.-378    	; 0xebe <MENU_addMenuItem>
    1038:	e0 91 f5 02 	lds	r30, 0x02F5
    103c:	f0 91 f6 02 	lds	r31, 0x02F6
    1040:	80 91 ef 02 	lds	r24, 0x02EF
    1044:	90 91 f0 02 	lds	r25, 0x02F0
	mainMenu->children[4] = currItem;
    1048:	95 87       	std	Z+13, r25	; 0x0d
    104a:	84 87       	std	Z+12, r24	; 0x0c
    104c:	10 92 f0 02 	sts	0x02F0, r1
    1050:	10 92 ef 02 	sts	0x02EF, r1
    1054:	60 91 f3 02 	lds	r22, 0x02F3
    1058:	70 91 f4 02 	lds	r23, 0x02F4
	
	currItem = NULL;
    105c:	20 e0       	ldi	r18, 0x00	; 0
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
    1062:	50 e0       	ldi	r21, 0x00	; 0
    1064:	85 e2       	ldi	r24, 0x25	; 37
    1066:	92 e0       	ldi	r25, 0x02	; 2
    1068:	2a df       	rcall	.-428    	; 0xebe <MENU_addMenuItem>
    106a:	60 91 f3 02 	lds	r22, 0x02F3
    106e:	70 91 f4 02 	lds	r23, 0x02F4
    1072:	80 91 ef 02 	lds	r24, 0x02EF
    1076:	90 91 f0 02 	lds	r25, 0x02F0
	difficultyMenu->children[0] = currItem;
    107a:	fb 01       	movw	r30, r22
    107c:	95 83       	std	Z+5, r25	; 0x05
    107e:	84 83       	std	Z+4, r24	; 0x04
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	40 e0       	ldi	r20, 0x00	; 0
    1086:	50 e0       	ldi	r21, 0x00	; 0
    1088:	8a e2       	ldi	r24, 0x2A	; 42
    108a:	92 e0       	ldi	r25, 0x02	; 2
    108c:	18 df       	rcall	.-464    	; 0xebe <MENU_addMenuItem>
    108e:	60 91 f3 02 	lds	r22, 0x02F3
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
    1092:	70 91 f4 02 	lds	r23, 0x02F4
    1096:	80 91 ef 02 	lds	r24, 0x02EF
    109a:	90 91 f0 02 	lds	r25, 0x02F0
    109e:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
    10a0:	17 96       	adiw	r26, 0x07	; 7
    10a2:	9c 93       	st	X, r25
    10a4:	8e 93       	st	-X, r24
    10a6:	16 97       	sbiw	r26, 0x06	; 6
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	40 e0       	ldi	r20, 0x00	; 0
    10ae:	50 e0       	ldi	r21, 0x00	; 0
    10b0:	81 e3       	ldi	r24, 0x31	; 49
    10b2:	92 e0       	ldi	r25, 0x02	; 2
    10b4:	04 df       	rcall	.-504    	; 0xebe <MENU_addMenuItem>
    10b6:	e0 91 f3 02 	lds	r30, 0x02F3
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
    10ba:	f0 91 f4 02 	lds	r31, 0x02F4
    10be:	80 91 ef 02 	lds	r24, 0x02EF
    10c2:	90 91 f0 02 	lds	r25, 0x02F0
    10c6:	91 87       	std	Z+9, r25	; 0x09
    10c8:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	08 95       	ret

000010d0 <MENU_printMenuItem>:
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	ec 01       	movw	r28, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	20 97       	sbiw	r28, 0x00	; 0
    10da:	39 f0       	breq	.+14     	; 0x10ea <MENU_printMenuItem+0x1a>
    10dc:	6a e0       	ldi	r22, 0x0A	; 10
}
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	fa d0       	rcall	.+500    	; 0x12d6 <OLED_goto>
    10e2:	88 81       	ld	r24, Y
void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
		OLED_printString(item->name);
    10e4:	99 81       	ldd	r25, Y+1	; 0x01
    10e6:	4d d1       	rcall	.+666    	; 0x1382 <OLED_printString>
    10e8:	07 c0       	rjmp	.+14     	; 0x10f8 <MENU_printMenuItem+0x28>
    10ea:	86 e3       	ldi	r24, 0x36	; 54
    10ec:	92 e0       	ldi	r25, 0x02	; 2
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
    10ee:	9f 93       	push	r25
    10f0:	8f 93       	push	r24
    10f2:	00 d5       	rcall	.+2560   	; 0x1af4 <printf>
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	08 95       	ret

000010fe <MENU_printMenu>:
	}
}
    10fe:	cf 92       	push	r12
    1100:	df 92       	push	r13
    1102:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
    1104:	ff 92       	push	r15
    1106:	0f 93       	push	r16
    1108:	1f 93       	push	r17
    110a:	cf 93       	push	r28
    110c:	df 93       	push	r29
    110e:	6c 01       	movw	r12, r24
    1110:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
    1112:	fe d0       	rcall	.+508    	; 0x1310 <OLED_clear>
    1114:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	8b d1       	rcall	.+790    	; 0x1430 <OLED_moveArrow>
    111a:	1e 14       	cp	r1, r14
    111c:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
    111e:	7c f4       	brge	.+30     	; 0x113e <MENU_printMenu+0x40>
    1120:	86 01       	movw	r16, r12
    1122:	0c 5f       	subi	r16, 0xFC	; 252
    1124:	1f 4f       	sbci	r17, 0xFF	; 255
    1126:	c0 e0       	ldi	r28, 0x00	; 0
    1128:	d0 e0       	ldi	r29, 0x00	; 0
    112a:	be 01       	movw	r22, r28
    112c:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
    112e:	81 91       	ld	r24, Z+
    1130:	91 91       	ld	r25, Z+
    1132:	8f 01       	movw	r16, r30
    1134:	cd df       	rcall	.-102    	; 0x10d0 <MENU_printMenuItem>
    1136:	21 96       	adiw	r28, 0x01	; 1
    1138:	ce 15       	cp	r28, r14
    113a:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
    113c:	b1 f7       	brne	.-20     	; 0x112a <MENU_printMenu+0x2c>
    113e:	d0 92 f2 02 	sts	0x02F2, r13
    1142:	c0 92 f1 02 	sts	0x02F1, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
    1146:	10 92 ed 02 	sts	0x02ED, r1
    114a:	10 92 ec 02 	sts	0x02EC, r1
	
	currentPosition = 0;
    114e:	f6 01       	movw	r30, r12
    1150:	84 81       	ldd	r24, Z+4	; 0x04
    1152:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
    1154:	90 93 f0 02 	sts	0x02F0, r25
    1158:	80 93 ef 02 	sts	0x02EF, r24
    115c:	df 91       	pop	r29
    115e:	cf 91       	pop	r28
    1160:	1f 91       	pop	r17
}
    1162:	0f 91       	pop	r16
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	df 90       	pop	r13
    116a:	cf 90       	pop	r12
    116c:	08 95       	ret

0000116e <MENU_moveUp>:
    116e:	20 91 ec 02 	lds	r18, 0x02EC
    1172:	30 91 ed 02 	lds	r19, 0x02ED
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
    1176:	12 16       	cp	r1, r18
    1178:	13 06       	cpc	r1, r19
    117a:	bc f4       	brge	.+46     	; 0x11aa <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
    117c:	c9 01       	movw	r24, r18
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	90 93 ed 02 	sts	0x02ED, r25
    1184:	80 93 ec 02 	sts	0x02EC, r24
		currItem = currentMenu->children[currentPosition];
    1188:	e0 91 f1 02 	lds	r30, 0x02F1
    118c:	f0 91 f2 02 	lds	r31, 0x02F2
    1190:	2f 5f       	subi	r18, 0xFF	; 255
    1192:	3f 4f       	sbci	r19, 0xFF	; 255
    1194:	22 0f       	add	r18, r18
    1196:	33 1f       	adc	r19, r19
    1198:	e2 0f       	add	r30, r18
    119a:	f3 1f       	adc	r31, r19
    119c:	20 81       	ld	r18, Z
    119e:	31 81       	ldd	r19, Z+1	; 0x01
    11a0:	30 93 f0 02 	sts	0x02F0, r19
    11a4:	20 93 ef 02 	sts	0x02EF, r18
		OLED_moveArrow(currentPosition);
    11a8:	43 c1       	rjmp	.+646    	; 0x1430 <OLED_moveArrow>
    11aa:	08 95       	ret

000011ac <MENU_moveDown>:
    11ac:	e0 91 f1 02 	lds	r30, 0x02F1
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
    11b0:	f0 91 f2 02 	lds	r31, 0x02F2
    11b4:	20 91 ec 02 	lds	r18, 0x02EC
    11b8:	30 91 ed 02 	lds	r19, 0x02ED
    11bc:	82 81       	ldd	r24, Z+2	; 0x02
    11be:	93 81       	ldd	r25, Z+3	; 0x03
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	28 17       	cp	r18, r24
    11c4:	39 07       	cpc	r19, r25
    11c6:	a4 f4       	brge	.+40     	; 0x11f0 <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
    11c8:	c9 01       	movw	r24, r18
    11ca:	01 96       	adiw	r24, 0x01	; 1
    11cc:	90 93 ed 02 	sts	0x02ED, r25
    11d0:	80 93 ec 02 	sts	0x02EC, r24
		currItem = currentMenu->children[currentPosition];
    11d4:	2d 5f       	subi	r18, 0xFD	; 253
    11d6:	3f 4f       	sbci	r19, 0xFF	; 255
    11d8:	22 0f       	add	r18, r18
    11da:	33 1f       	adc	r19, r19
    11dc:	e2 0f       	add	r30, r18
    11de:	f3 1f       	adc	r31, r19
    11e0:	20 81       	ld	r18, Z
    11e2:	31 81       	ldd	r19, Z+1	; 0x01
    11e4:	30 93 f0 02 	sts	0x02F0, r19
    11e8:	20 93 ef 02 	sts	0x02EF, r18
		OLED_moveArrow(currentPosition);
    11ec:	21 c1       	rjmp	.+578    	; 0x1430 <OLED_moveArrow>
    11ee:	08 95       	ret
    11f0:	10 92 ed 02 	sts	0x02ED, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
    11f4:	10 92 ec 02 	sts	0x02EC, r1
    11f8:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
    11fa:	95 81       	ldd	r25, Z+5	; 0x05
    11fc:	90 93 f0 02 	sts	0x02F0, r25
    1200:	80 93 ef 02 	sts	0x02EF, r24
    1204:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	13 c1       	rjmp	.+550    	; 0x1430 <OLED_moveArrow>
    120a:	08 95       	ret

0000120c <MENU_moveLeft>:
    120c:	e0 91 f1 02 	lds	r30, 0x02F1
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
    1210:	f0 91 f2 02 	lds	r31, 0x02F2
    1214:	84 89       	ldd	r24, Z+20	; 0x14
    1216:	95 89       	ldd	r25, Z+21	; 0x15
    1218:	00 97       	sbiw	r24, 0x00	; 0
    121a:	21 f0       	breq	.+8      	; 0x1224 <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
    121c:	fc 01       	movw	r30, r24
    121e:	62 81       	ldd	r22, Z+2	; 0x02
    1220:	73 81       	ldd	r23, Z+3	; 0x03
    1222:	6d cf       	rjmp	.-294    	; 0x10fe <MENU_printMenu>
    1224:	08 95       	ret

00001226 <MENU_reactivate>:
    1226:	80 91 f1 02 	lds	r24, 0x02F1
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
    122a:	90 91 f2 02 	lds	r25, 0x02F2
    122e:	fc 01       	movw	r30, r24
    1230:	62 81       	ldd	r22, Z+2	; 0x02
    1232:	73 81       	ldd	r23, Z+3	; 0x03
    1234:	64 df       	rcall	.-312    	; 0x10fe <MENU_printMenu>
    1236:	18 c0       	rjmp	.+48     	; 0x1268 <MENU_waitForInput>
	MENU_waitForInput();
    1238:	08 95       	ret

0000123a <MENU_moveRight>:
    123a:	e0 91 ef 02 	lds	r30, 0x02EF
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
    123e:	f0 91 f0 02 	lds	r31, 0x02F0
    1242:	86 81       	ldd	r24, Z+6	; 0x06
    1244:	97 81       	ldd	r25, Z+7	; 0x07
    1246:	89 2b       	or	r24, r25
    1248:	39 f0       	breq	.+14     	; 0x1258 <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
    124a:	84 81       	ldd	r24, Z+4	; 0x04
    124c:	95 81       	ldd	r25, Z+5	; 0x05
    124e:	fc 01       	movw	r30, r24
    1250:	62 81       	ldd	r22, Z+2	; 0x02
    1252:	73 81       	ldd	r23, Z+3	; 0x03
    1254:	54 cf       	rjmp	.-344    	; 0x10fe <MENU_printMenu>
    1256:	08 95       	ret
    1258:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
    125a:	f3 85       	ldd	r31, Z+11	; 0x0b
    125c:	e0 2d       	mov	r30, r0
    125e:	30 97       	sbiw	r30, 0x00	; 0
    1260:	11 f0       	breq	.+4      	; 0x1266 <MENU_moveRight+0x2c>
    1262:	09 95       	icall
	{
		currItem->functionPtr();
    1264:	e0 cf       	rjmp	.-64     	; 0x1226 <MENU_reactivate>
		MENU_reactivate();
    1266:	08 95       	ret

00001268 <MENU_waitForInput>:
    1268:	80 91 ec 02 	lds	r24, 0x02EC
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
    126c:	90 91 ed 02 	lds	r25, 0x02ED
    1270:	df d0       	rcall	.+446    	; 0x1430 <OLED_moveArrow>
    1272:	80 91 ee 02 	lds	r24, 0x02EE
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    1276:	88 23       	and	r24, r24
    1278:	f9 f0       	breq	.+62     	; 0x12b8 <MENU_waitForInput+0x50>
    127a:	75 dd       	rcall	.-1302   	; 0xd66 <JOY_getDirection>
	{
		currDir = JOY_getDirection();
    127c:	82 30       	cpi	r24, 0x02	; 2
    127e:	71 f0       	breq	.+28     	; 0x129c <MENU_waitForInput+0x34>
		switch(currDir){
    1280:	18 f4       	brcc	.+6      	; 0x1288 <MENU_waitForInput+0x20>
    1282:	81 30       	cpi	r24, 0x01	; 1
    1284:	49 f0       	breq	.+18     	; 0x1298 <MENU_waitForInput+0x30>
    1286:	0b c0       	rjmp	.+22     	; 0x129e <MENU_waitForInput+0x36>
    1288:	83 30       	cpi	r24, 0x03	; 3
    128a:	21 f0       	breq	.+8      	; 0x1294 <MENU_waitForInput+0x2c>
    128c:	84 30       	cpi	r24, 0x04	; 4
    128e:	39 f4       	brne	.+14     	; 0x129e <MENU_waitForInput+0x36>
    1290:	bd df       	rcall	.-134    	; 0x120c <MENU_moveLeft>
    1292:	05 c0       	rjmp	.+10     	; 0x129e <MENU_waitForInput+0x36>
			case LEFT:
			MENU_moveLeft();
    1294:	d2 df       	rcall	.-92     	; 0x123a <MENU_moveRight>
    1296:	03 c0       	rjmp	.+6      	; 0x129e <MENU_waitForInput+0x36>
			break;
    1298:	6a df       	rcall	.-300    	; 0x116e <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
    129a:	01 c0       	rjmp	.+2      	; 0x129e <MENU_waitForInput+0x36>
    129c:	87 df       	rcall	.-242    	; 0x11ac <MENU_moveDown>
			break;
    129e:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
    12a0:	8f e7       	ldi	r24, 0x7F	; 127
    12a2:	94 e0       	ldi	r25, 0x04	; 4
			break;
    12a4:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
    12a6:	80 40       	sbci	r24, 0x00	; 0
    12a8:	90 40       	sbci	r25, 0x00	; 0
    12aa:	e1 f7       	brne	.-8      	; 0x12a4 <MENU_waitForInput+0x3c>
    12ac:	00 c0       	rjmp	.+0      	; 0x12ae <MENU_waitForInput+0x46>
    12ae:	00 00       	nop
    12b0:	80 91 ee 02 	lds	r24, 0x02EE
    12b4:	81 11       	cpse	r24, r1
    12b6:	e1 cf       	rjmp	.-62     	; 0x127a <MENU_waitForInput+0x12>
    12b8:	08 95       	ret

000012ba <MENU_activate>:
    12ba:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    12bc:	80 93 ee 02 	sts	0x02EE, r24
    12c0:	35 de       	rcall	.-918    	; 0xf2c <MENU_buildMenus>
    12c2:	80 91 f5 02 	lds	r24, 0x02F5
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
    12c6:	90 91 f6 02 	lds	r25, 0x02F6
    12ca:	fc 01       	movw	r30, r24
    12cc:	62 81       	ldd	r22, Z+2	; 0x02
    12ce:	73 81       	ldd	r23, Z+3	; 0x03
    12d0:	16 df       	rcall	.-468    	; 0x10fe <MENU_printMenu>
    12d2:	ca cf       	rjmp	.-108    	; 0x1268 <MENU_waitForInput>
    12d4:	08 95       	ret

000012d6 <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
    12d6:	26 2f       	mov	r18, r22
    12d8:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
    12da:	75 95       	asr	r23
    12dc:	67 95       	ror	r22
    12de:	75 95       	asr	r23
    12e0:	67 95       	ror	r22
    12e2:	75 95       	asr	r23
    12e4:	67 95       	ror	r22
    12e6:	75 95       	asr	r23
    12e8:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
    12ea:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
    12ec:	80 55       	subi	r24, 0x50	; 80
    12ee:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
    12f0:	e0 91 10 01 	lds	r30, 0x0110
    12f4:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12f8:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
    12fa:	e0 91 10 01 	lds	r30, 0x0110
    12fe:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1302:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
    1304:	e0 91 10 01 	lds	r30, 0x0110
    1308:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    130c:	60 83       	st	Z, r22
    130e:	08 95       	ret

00001310 <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
    1310:	1f 93       	push	r17
    1312:	cf 93       	push	r28
    1314:	df 93       	push	r29
    1316:	c1 e0       	ldi	r28, 0x01	; 1
    1318:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t count_row = 0; count_row < height; count_row++)
    131a:	80 e0       	ldi	r24, 0x00	; 0
    131c:	90 e0       	ldi	r25, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    131e:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	d8 df       	rcall	.-80     	; 0x12d6 <OLED_goto>
    1326:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1328:	e0 91 0e 01 	lds	r30, 0x010E
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    132c:	f0 91 0f 01 	lds	r31, 0x010F
    1330:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1332:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1334:	80 38       	cpi	r24, 0x80	; 128
    1336:	c1 f7       	brne	.-16     	; 0x1328 <OLED_clear+0x18>
    1338:	8c 2f       	mov	r24, r28
//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	for(uint8_t count_row = 0; count_row < height; count_row++)
    133a:	9d 2f       	mov	r25, r29
    133c:	21 96       	adiw	r28, 0x01	; 1
    133e:	c9 30       	cpi	r28, 0x09	; 9
    1340:	d1 05       	cpc	r29, r1
    1342:	71 f7       	brne	.-36     	; 0x1320 <OLED_clear+0x10>
    1344:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	08 95       	ret

0000134c <OLED_printCharacter>:
    134c:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	22 0f       	add	r18, r18
    1354:	33 1f       	adc	r19, r19
    1356:	22 0f       	add	r18, r18
    1358:	33 1f       	adc	r19, r19
    135a:	22 0f       	add	r18, r18
    135c:	33 1f       	adc	r19, r19
    135e:	80 e0       	ldi	r24, 0x00	; 0
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	20 59       	subi	r18, 0x90	; 144
    1364:	3f 4f       	sbci	r19, 0xFF	; 255
    1366:	f9 01       	movw	r30, r18
    1368:	e8 0f       	add	r30, r24
    136a:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
    136c:	e4 91       	lpm	r30, Z
    136e:	a0 91 0e 01 	lds	r26, 0x010E
    1372:	b0 91 0f 01 	lds	r27, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1376:	ec 93       	st	X, r30
    1378:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
    137a:	88 30       	cpi	r24, 0x08	; 8
    137c:	91 05       	cpc	r25, r1
    137e:	99 f7       	brne	.-26     	; 0x1366 <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
    1380:	08 95       	ret

00001382 <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
    1382:	1f 93       	push	r17
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
    138a:	10 e0       	ldi	r17, 0x00	; 0
    138c:	06 c0       	rjmp	.+12     	; 0x139a <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
    138e:	fe 01       	movw	r30, r28
    1390:	e8 0f       	add	r30, r24
    1392:	f9 1f       	adc	r31, r25
    1394:	80 81       	ld	r24, Z
    1396:	da df       	rcall	.-76     	; 0x134c <OLED_printCharacter>
    1398:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
    139a:	81 2f       	mov	r24, r17
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	fe 01       	movw	r30, r28
    13a0:	01 90       	ld	r0, Z+
    13a2:	00 20       	and	r0, r0
    13a4:	e9 f7       	brne	.-6      	; 0x13a0 <OLED_printString+0x1e>
    13a6:	31 97       	sbiw	r30, 0x01	; 1
    13a8:	ec 1b       	sub	r30, r28
    13aa:	fd 0b       	sbc	r31, r29
    13ac:	8e 17       	cp	r24, r30
    13ae:	9f 07       	cpc	r25, r31
    13b0:	70 f3       	brcs	.-36     	; 0x138e <OLED_printString+0xc>
    13b2:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
    13b4:	cf 91       	pop	r28
    13b6:	1f 91       	pop	r17
    13b8:	08 95       	ret

000013ba <OLED_printArrow>:
    13ba:	e0 91 0e 01 	lds	r30, 0x010E
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
    13be:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13c2:	88 e1       	ldi	r24, 0x18	; 24
    13c4:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    13c6:	e0 91 0e 01 	lds	r30, 0x010E
    13ca:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13ce:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
    13d0:	e0 91 0e 01 	lds	r30, 0x010E
    13d4:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13d8:	9e e7       	ldi	r25, 0x7E	; 126
    13da:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
    13dc:	e0 91 0e 01 	lds	r30, 0x010E
    13e0:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13e4:	9c e3       	ldi	r25, 0x3C	; 60
    13e6:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    13e8:	e0 91 0e 01 	lds	r30, 0x010E
    13ec:	f0 91 0f 01 	lds	r31, 0x010F
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13f0:	80 83       	st	Z, r24
    13f2:	08 95       	ret

000013f4 <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	c1 e0       	ldi	r28, 0x01	; 1
    13fc:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1402:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	66 df       	rcall	.-308    	; 0x12d6 <OLED_goto>
    140a:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    140c:	e0 91 0e 01 	lds	r30, 0x010E
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    1410:	f0 91 0f 01 	lds	r31, 0x010F
    1414:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1416:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1418:	85 30       	cpi	r24, 0x05	; 5
    141a:	c1 f7       	brne	.-16     	; 0x140c <OLED_clearArrow+0x18>
    141c:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    141e:	9d 2f       	mov	r25, r29
    1420:	21 96       	adiw	r28, 0x01	; 1
    1422:	c9 30       	cpi	r28, 0x09	; 9
    1424:	d1 05       	cpc	r29, r1
    1426:	71 f7       	brne	.-36     	; 0x1404 <OLED_clearArrow+0x10>
    1428:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	08 95       	ret

00001430 <OLED_moveArrow>:
    1430:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    1432:	df 93       	push	r29
    1434:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
    1436:	de df       	rcall	.-68     	; 0x13f4 <OLED_clearArrow>
    1438:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	ce 01       	movw	r24, r28
    143e:	4b df       	rcall	.-362    	; 0x12d6 <OLED_goto>
    1440:	bc df       	rcall	.-136    	; 0x13ba <OLED_printArrow>
    1442:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
    1444:	cf 91       	pop	r28
    1446:	08 95       	ret

00001448 <OLED_setContrast>:
}
    1448:	e0 91 10 01 	lds	r30, 0x0110
    144c:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1450:	91 e8       	ldi	r25, 0x81	; 129
    1452:	90 83       	st	Z, r25
void OLED_setContrast(uint8_t contrast)
{
	// activate contrast contol
	OLED_writeByteToOLED(oled_cmd, 0x81);
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
    1454:	e0 91 10 01 	lds	r30, 0x0110
    1458:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    145c:	80 83       	st	Z, r24
    145e:	08 95       	ret

00001460 <OLED_fadeIn>:
	// set contrast to provided value
	OLED_writeByteToOLED(oled_cmd, contrast);
}

void OLED_fadeIn(void)
{
    1460:	cf 93       	push	r28
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    1462:	c0 e0       	ldi	r28, 0x00	; 0
	{
		OLED_setContrast(i);
    1464:	8c 2f       	mov	r24, r28
    1466:	f0 df       	rcall	.-32     	; 0x1448 <OLED_setContrast>
    1468:	83 e3       	ldi	r24, 0x33	; 51
    146a:	93 e1       	ldi	r25, 0x13	; 19
    146c:	01 97       	sbiw	r24, 0x01	; 1
    146e:	f1 f7       	brne	.-4      	; 0x146c <OLED_fadeIn+0xc>
    1470:	cf 5f       	subi	r28, 0xFF	; 255
}

void OLED_fadeIn(void)
{
	// gradually increase contrast
	for(uint8_t i = 0; i < 255; i++)
    1472:	cf 3f       	cpi	r28, 0xFF	; 255
    1474:	b9 f7       	brne	.-18     	; 0x1464 <OLED_fadeIn+0x4>
    1476:	cf 91       	pop	r28
	{
		OLED_setContrast(i);
		_delay_ms(4);
	}
}
    1478:	08 95       	ret

0000147a <OLED_splashScreen>:
    147a:	86 e4       	ldi	r24, 0x46	; 70
	}
}

void OLED_splashScreen(void)
{
	printf("run splash screen...\n");
    147c:	92 e0       	ldi	r25, 0x02	; 2
    147e:	50 d3       	rcall	.+1696   	; 0x1b20 <puts>
    1480:	80 e0       	ldi	r24, 0x00	; 0
	
	OLED_setContrast(0);
    1482:	e2 df       	rcall	.-60     	; 0x1448 <OLED_setContrast>
    1484:	2f ef       	ldi	r18, 0xFF	; 255
    1486:	8f e7       	ldi	r24, 0x7F	; 127
    1488:	97 e0       	ldi	r25, 0x07	; 7
    148a:	21 50       	subi	r18, 0x01	; 1
    148c:	80 40       	sbci	r24, 0x00	; 0
    148e:	90 40       	sbci	r25, 0x00	; 0
    1490:	e1 f7       	brne	.-8      	; 0x148a <OLED_splashScreen+0x10>
    1492:	00 c0       	rjmp	.+0      	; 0x1494 <OLED_splashScreen+0x1a>
    1494:	00 00       	nop
    1496:	64 e0       	ldi	r22, 0x04	; 4
    1498:	70 e0       	ldi	r23, 0x00	; 0
	
	_delay_ms(500);
	OLED_goto(2,4);
    149a:	82 e0       	ldi	r24, 0x02	; 2
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	1b df       	rcall	.-458    	; 0x12d6 <OLED_goto>
    14a0:	8b e5       	ldi	r24, 0x5B	; 91
    14a2:	92 e0       	ldi	r25, 0x02	; 2
    14a4:	6e df       	rcall	.-292    	; 0x1382 <OLED_printString>
	OLED_printString("Group 46 Soft");
    14a6:	dc df       	rcall	.-72     	; 0x1460 <OLED_fadeIn>
    14a8:	2f ef       	ldi	r18, 0xFF	; 255
    14aa:	8f e7       	ldi	r24, 0x7F	; 127
    14ac:	97 e0       	ldi	r25, 0x07	; 7
	OLED_fadeIn();
    14ae:	21 50       	subi	r18, 0x01	; 1
    14b0:	80 40       	sbci	r24, 0x00	; 0
    14b2:	90 40       	sbci	r25, 0x00	; 0
    14b4:	e1 f7       	brne	.-8      	; 0x14ae <OLED_splashScreen+0x34>
    14b6:	00 c0       	rjmp	.+0      	; 0x14b8 <OLED_splashScreen+0x3e>
    14b8:	00 00       	nop
    14ba:	2a df       	rcall	.-428    	; 0x1310 <OLED_clear>
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	c4 df       	rcall	.-120    	; 0x1448 <OLED_setContrast>
    14c0:	2f ef       	ldi	r18, 0xFF	; 255
    14c2:	8f ef       	ldi	r24, 0xFF	; 255
	_delay_ms(500);
	
 	OLED_clear();
    14c4:	92 e0       	ldi	r25, 0x02	; 2
    14c6:	21 50       	subi	r18, 0x01	; 1
 	OLED_setContrast(0);
    14c8:	80 40       	sbci	r24, 0x00	; 0
    14ca:	90 40       	sbci	r25, 0x00	; 0
    14cc:	e1 f7       	brne	.-8      	; 0x14c6 <OLED_splashScreen+0x4c>
    14ce:	00 c0       	rjmp	.+0      	; 0x14d0 <OLED_splashScreen+0x56>
    14d0:	00 c0       	rjmp	.+0      	; 0x14d2 <OLED_splashScreen+0x58>
    14d2:	6c e1       	ldi	r22, 0x1C	; 28
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	83 e0       	ldi	r24, 0x03	; 3
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	fd de       	rcall	.-518    	; 0x12d6 <OLED_goto>
    14dc:	89 e6       	ldi	r24, 0x69	; 105
    14de:	92 e0       	ldi	r25, 0x02	; 2
 	
 	_delay_ms(200);
 	OLED_goto(3,28);
    14e0:	50 df       	rcall	.-352    	; 0x1382 <OLED_printString>
    14e2:	68 e1       	ldi	r22, 0x18	; 24
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	84 e0       	ldi	r24, 0x04	; 4
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	f5 de       	rcall	.-534    	; 0x12d6 <OLED_goto>
 	OLED_printString("proudly");
    14ec:	81 e7       	ldi	r24, 0x71	; 113
    14ee:	92 e0       	ldi	r25, 0x02	; 2
    14f0:	48 df       	rcall	.-368    	; 0x1382 <OLED_printString>
    14f2:	b6 df       	rcall	.-148    	; 0x1460 <OLED_fadeIn>
 	OLED_goto(4,24);	
    14f4:	2f ef       	ldi	r18, 0xFF	; 255
    14f6:	8f e7       	ldi	r24, 0x7F	; 127
    14f8:	97 e0       	ldi	r25, 0x07	; 7
    14fa:	21 50       	subi	r18, 0x01	; 1
    14fc:	80 40       	sbci	r24, 0x00	; 0
    14fe:	90 40       	sbci	r25, 0x00	; 0
 	OLED_printString("presents");
    1500:	e1 f7       	brne	.-8      	; 0x14fa <OLED_splashScreen+0x80>
    1502:	00 c0       	rjmp	.+0      	; 0x1504 <OLED_splashScreen+0x8a>
    1504:	00 00       	nop
    1506:	04 df       	rcall	.-504    	; 0x1310 <OLED_clear>
 	OLED_fadeIn();
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	9e df       	rcall	.-196    	; 0x1448 <OLED_setContrast>
    150c:	2f ef       	ldi	r18, 0xFF	; 255
    150e:	8f ef       	ldi	r24, 0xFF	; 255
    1510:	92 e0       	ldi	r25, 0x02	; 2
    1512:	21 50       	subi	r18, 0x01	; 1
    1514:	80 40       	sbci	r24, 0x00	; 0
    1516:	90 40       	sbci	r25, 0x00	; 0
    1518:	e1 f7       	brne	.-8      	; 0x1512 <OLED_splashScreen+0x98>
    151a:	00 c0       	rjmp	.+0      	; 0x151c <OLED_splashScreen+0xa2>
    151c:	00 c0       	rjmp	.+0      	; 0x151e <OLED_splashScreen+0xa4>
 	_delay_ms(500);
 	
 	OLED_clear();
    151e:	6c e1       	ldi	r22, 0x1C	; 28
    1520:	70 e0       	ldi	r23, 0x00	; 0
 	OLED_setContrast(0);
    1522:	83 e0       	ldi	r24, 0x03	; 3
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	d7 de       	rcall	.-594    	; 0x12d6 <OLED_goto>
    1528:	8a e7       	ldi	r24, 0x7A	; 122
    152a:	92 e0       	ldi	r25, 0x02	; 2
    152c:	2a df       	rcall	.-428    	; 0x1382 <OLED_printString>
    152e:	98 df       	rcall	.-208    	; 0x1460 <OLED_fadeIn>
    1530:	2f ef       	ldi	r18, 0xFF	; 255
    1532:	8f ef       	ldi	r24, 0xFF	; 255
    1534:	9e e0       	ldi	r25, 0x0E	; 14
    1536:	21 50       	subi	r18, 0x01	; 1
    1538:	80 40       	sbci	r24, 0x00	; 0
 	
 	_delay_ms(200);
 	OLED_goto(3, 28);
    153a:	90 40       	sbci	r25, 0x00	; 0
    153c:	e1 f7       	brne	.-8      	; 0x1536 <OLED_splashScreen+0xbc>
    153e:	00 c0       	rjmp	.+0      	; 0x1540 <OLED_splashScreen+0xc6>
    1540:	00 00       	nop
    1542:	e6 de       	rcall	.-564    	; 0x1310 <OLED_clear>
    1544:	80 e5       	ldi	r24, 0x50	; 80
 	OLED_printString("FIFA 18");
    1546:	80 df       	rcall	.-256    	; 0x1448 <OLED_setContrast>
    1548:	82 e8       	ldi	r24, 0x82	; 130
    154a:	92 e0       	ldi	r25, 0x02	; 2
    154c:	e9 c2       	rjmp	.+1490   	; 0x1b20 <puts>
 	OLED_fadeIn();
    154e:	08 95       	ret

00001550 <OLED_init>:
    1550:	e0 91 10 01 	lds	r30, 0x0110
    1554:	f0 91 11 01 	lds	r31, 0x0111
    1558:	8e ea       	ldi	r24, 0xAE	; 174
    155a:	80 83       	st	Z, r24
    155c:	e0 91 10 01 	lds	r30, 0x0110
    1560:	f0 91 11 01 	lds	r31, 0x0111
 	_delay_ms(1000);
	
	// clean up
	OLED_clear();
    1564:	81 ea       	ldi	r24, 0xA1	; 161
    1566:	80 83       	st	Z, r24
	OLED_setContrast(0x50); // back to standard contrast
    1568:	e0 91 10 01 	lds	r30, 0x0110
    156c:	f0 91 11 01 	lds	r31, 0x0111
	
	printf("splash screen done...\n");
    1570:	8a ed       	ldi	r24, 0xDA	; 218
    1572:	80 83       	st	Z, r24
    1574:	e0 91 10 01 	lds	r30, 0x0110
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
    1578:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    157c:	82 e1       	ldi	r24, 0x12	; 18
    157e:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    1580:	e0 91 10 01 	lds	r30, 0x0110
    1584:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1588:	88 ec       	ldi	r24, 0xC8	; 200
    158a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    158c:	e0 91 10 01 	lds	r30, 0x0110
    1590:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1594:	88 ea       	ldi	r24, 0xA8	; 168
    1596:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    1598:	e0 91 10 01 	lds	r30, 0x0110
    159c:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15a0:	8f e3       	ldi	r24, 0x3F	; 63
    15a2:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    15a4:	e0 91 10 01 	lds	r30, 0x0110
    15a8:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15ac:	85 ed       	ldi	r24, 0xD5	; 213
    15ae:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
    15b0:	e0 91 10 01 	lds	r30, 0x0110
    15b4:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15b8:	80 e8       	ldi	r24, 0x80	; 128
    15ba:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    15bc:	e0 91 10 01 	lds	r30, 0x0110
    15c0:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15c4:	81 e8       	ldi	r24, 0x81	; 129
    15c6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    15c8:	e0 91 10 01 	lds	r30, 0x0110
    15cc:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15d0:	80 e5       	ldi	r24, 0x50	; 80
    15d2:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    15d4:	e0 91 10 01 	lds	r30, 0x0110
    15d8:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15dc:	89 ed       	ldi	r24, 0xD9	; 217
    15de:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
    15e0:	e0 91 10 01 	lds	r30, 0x0110
    15e4:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15e8:	81 e2       	ldi	r24, 0x21	; 33
    15ea:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    15ec:	e0 91 10 01 	lds	r30, 0x0110
    15f0:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    15f4:	80 e2       	ldi	r24, 0x20	; 32
    15f6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    15f8:	e0 91 10 01 	lds	r30, 0x0110
    15fc:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1600:	82 e0       	ldi	r24, 0x02	; 2
    1602:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    1604:	e0 91 10 01 	lds	r30, 0x0110
    1608:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    160c:	8b ed       	ldi	r24, 0xDB	; 219
    160e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    1610:	e0 91 10 01 	lds	r30, 0x0110
    1614:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1618:	80 e3       	ldi	r24, 0x30	; 48
    161a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21);
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    161c:	e0 91 10 01 	lds	r30, 0x0110
    1620:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1624:	8d ea       	ldi	r24, 0xAD	; 173
    1626:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    1628:	e0 91 10 01 	lds	r30, 0x0110
    162c:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1630:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    1632:	e0 91 10 01 	lds	r30, 0x0110
    1636:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    163a:	84 ea       	ldi	r24, 0xA4	; 164
    163c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    163e:	e0 91 10 01 	lds	r30, 0x0110
    1642:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1646:	86 ea       	ldi	r24, 0xA6	; 166
    1648:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    164a:	e0 91 10 01 	lds	r30, 0x0110
    164e:	f0 91 11 01 	lds	r31, 0x0111
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1652:	8f ea       	ldi	r24, 0xAF	; 175
    1654:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    1656:	5c de       	rcall	.-840    	; 0x1310 <OLED_clear>
    1658:	10 cf       	rjmp	.-480    	; 0x147a <OLED_splashScreen>
	OLED_splashScreen();
    165a:	08 95       	ret

0000165c <SLI_init>:
uint8_t SLI_startup = 1; 

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    165c:	10 92 fd 02 	sts	0x02FD, r1
	currentSliPosition.L_abs = 0;
    1660:	10 92 fe 02 	sts	0x02FE, r1
	currentSliPosition.R_per = 0;
    1664:	10 92 ff 02 	sts	0x02FF, r1
	currentSliPosition.L_per = 0;
    1668:	10 92 00 03 	sts	0x0300, r1
    166c:	08 95       	ret

0000166e <SLI_requestCurrentPosition>:

//------------------------------------------------------------------------------
// This function requests an AD conversion for the specified slider.
void SLI_requestCurrentPosition(uint8_t side)
{
	if(side == 'l')
    166e:	8c 36       	cpi	r24, 0x6C	; 108
    1670:	39 f4       	brne	.+14     	; 0x1680 <SLI_requestCurrentPosition+0x12>
	{
		ADC_request(L_channel, adc_ext_ram);
    1672:	60 91 06 01 	lds	r22, 0x0106
    1676:	70 91 07 01 	lds	r23, 0x0107
    167a:	83 e0       	ldi	r24, 0x03	; 3
    167c:	7d c0       	rjmp	.+250    	; 0x1778 <ADC_request>
    167e:	08 95       	ret
    1680:	82 37       	cpi	r24, 0x72	; 114
	}

	else if(side == 'r')
    1682:	31 f4       	brne	.+12     	; 0x1690 <SLI_requestCurrentPosition+0x22>
    1684:	60 91 06 01 	lds	r22, 0x0106
	{
		ADC_request(R_channel, adc_ext_ram);
    1688:	70 91 07 01 	lds	r23, 0x0107
    168c:	84 e0       	ldi	r24, 0x04	; 4
    168e:	74 c0       	rjmp	.+232    	; 0x1778 <ADC_request>
    1690:	08 95       	ret

00001692 <SLI_updatePosition>:
    1692:	8c 36       	cpi	r24, 0x6C	; 108
    1694:	71 f4       	brne	.+28     	; 0x16b2 <SLI_updatePosition+0x20>
// received.
void SLI_updatePosition(uint8_t side)
{
	if(side == 'l')
	{
		currentSliPosition.L_abs = ADC_read(adc_ext_ram);
    1696:	80 91 06 01 	lds	r24, 0x0106
    169a:	90 91 07 01 	lds	r25, 0x0107
    169e:	90 d0       	rcall	.+288    	; 0x17c0 <ADC_read>
    16a0:	80 93 fe 02 	sts	0x02FE, r24
    16a4:	24 e6       	ldi	r18, 0x64	; 100
		currentSliPosition.L_per = currentSliPosition.L_abs * 100 / 256;
    16a6:	82 9f       	mul	r24, r18
    16a8:	c0 01       	movw	r24, r0
    16aa:	11 24       	eor	r1, r1
    16ac:	90 93 00 03 	sts	0x0300, r25
    16b0:	08 95       	ret
    16b2:	82 37       	cpi	r24, 0x72	; 114
		//printf("CurrSliPos_L: %d, CurrSliPos_R: %d\n", currentSliPosition.L_per, currentSliPosition.R_per);
	}

	else if(side == 'r')
    16b4:	69 f4       	brne	.+26     	; 0x16d0 <SLI_updatePosition+0x3e>
    16b6:	80 91 06 01 	lds	r24, 0x0106
	{
		currentSliPosition.R_abs = ADC_read(adc_ext_ram);
    16ba:	90 91 07 01 	lds	r25, 0x0107
    16be:	80 d0       	rcall	.+256    	; 0x17c0 <ADC_read>
    16c0:	80 93 fd 02 	sts	0x02FD, r24
    16c4:	24 e6       	ldi	r18, 0x64	; 100
    16c6:	82 9f       	mul	r24, r18
		currentSliPosition.R_per = currentSliPosition.R_abs * 100 / 256;
    16c8:	c0 01       	movw	r24, r0
    16ca:	11 24       	eor	r1, r1
    16cc:	90 93 ff 02 	sts	0x02FF, r25
    16d0:	08 95       	ret

000016d2 <SLI_getPosition>:
    16d2:	82 e7       	ldi	r24, 0x72	; 114
    16d4:	cc df       	rcall	.-104    	; 0x166e <SLI_requestCurrentPosition>
}

//
SLI_position_t SLI_getPosition()
{
	SLI_requestCurrentPosition('r');
    16d6:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16d8:	8a 95       	dec	r24
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <SLI_getPosition+0x6>
    16dc:	00 00       	nop
    16de:	82 e7       	ldi	r24, 0x72	; 114
	_delay_us(60);
	SLI_updatePosition('r');
    16e0:	d8 df       	rcall	.-80     	; 0x1692 <SLI_updatePosition>
    16e2:	60 91 fd 02 	lds	r22, 0x02FD
	
	return currentSliPosition;
    16e6:	70 91 fe 02 	lds	r23, 0x02FE
    16ea:	80 91 ff 02 	lds	r24, 0x02FF
    16ee:	90 91 00 03 	lds	r25, 0x0300
    16f2:	08 95       	ret

000016f4 <SPI_init>:

void SPI_init()
{
	//init external interrupt INT2 on falling edge
	#if defined(__AVR_ATmega162__)
		set_bit(GICR, INT2);
    16f4:	8b b7       	in	r24, 0x3b	; 59
    16f6:	80 62       	ori	r24, 0x20	; 32
    16f8:	8b bf       	out	0x3b, r24	; 59
		clear_bit(EMCUCR, ISC2);
    16fa:	86 b7       	in	r24, 0x36	; 54
    16fc:	8e 7f       	andi	r24, 0xFE	; 254
    16fe:	86 bf       	out	0x36, r24	; 54
		
		// Set _SS, MOSI and SCK output, all others input
		DDR_SPI |= (1<<SS_CAN_CONTROLLER_PIN_MODE) | (1<<MOSI_PIN) | (1<<SCK_PIN);
    1700:	87 b3       	in	r24, 0x17	; 23
    1702:	80 6b       	ori	r24, 0xB0	; 176
    1704:	87 bb       	out	0x17, r24	; 23
	#endif
	
	

	// Enable SPI, Master, set clock rate fck/4
	SPCR = (1<<SPE) | (1<<MSTR);
    1706:	80 e5       	ldi	r24, 0x50	; 80
    1708:	8d b9       	out	0x0d, r24	; 13
	
	// clock rate fck/2
	SPSR = (1<<SPI2X);
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	8e b9       	out	0x0e, r24	; 14

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORT_SPI, SS_CAN_CONTROLLER_PIN);
    170e:	c4 9a       	sbi	0x18, 4	; 24
    1710:	08 95       	ret

00001712 <SPI_send>:
}

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    1712:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    1714:	77 9b       	sbis	0x0e, 7	; 14
    1716:	fe cf       	rjmp	.-4      	; 0x1714 <SPI_send+0x2>
}
    1718:	08 95       	ret

0000171a <SPI_receive>:

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    171a:	8f ef       	ldi	r24, 0xFF	; 255
    171c:	fa df       	rcall	.-12     	; 0x1712 <SPI_send>
    171e:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    1720:	fe cf       	rjmp	.-4      	; 0x171e <SPI_receive+0x4>
    1722:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    1724:	08 95       	ret

00001726 <SPI_activateSlave>:

	return data;
}
    1726:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    1728:	01 c0       	rjmp	.+2      	; 0x172c <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    172a:	c4 98       	cbi	0x18, 4	; 24
    172c:	08 95       	ret

0000172e <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    172e:	81 11       	cpse	r24, r1
    1730:	01 c0       	rjmp	.+2      	; 0x1734 <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    1732:	c4 9a       	sbi	0x18, 4	; 24
    1734:	08 95       	ret

00001736 <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    1736:	5d 9b       	sbis	0x0b, 5	; 11
    1738:	fe cf       	rjmp	.-4      	; 0x1736 <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    173a:	8c b9       	out	0x0c, r24	; 12
    173c:	08 95       	ret

0000173e <uartReceive>:
//UART_Message_t uartReceive()
uint8_t uartReceive()
{

	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    173e:	5f 9b       	sbis	0x0b, 7	; 11
    1740:	fe cf       	rjmp	.-4      	; 0x173e <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    1742:	8c b1       	in	r24, 0x0c	; 12
		////return message;
	//}
	
	return receivedByte;

}
    1744:	08 95       	ret

00001746 <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    1746:	ef 92       	push	r14
    1748:	ff 92       	push	r15
    174a:	0f 93       	push	r16
    174c:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    174e:	bb 27       	eor	r27, r27
    1750:	a1 2f       	mov	r26, r17
    1752:	90 2f       	mov	r25, r16
    1754:	8f 2d       	mov	r24, r15
    1756:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    1758:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    175a:	88 e1       	ldi	r24, 0x18	; 24
    175c:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    175e:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	#if defined(__AVR_ATmega162__)
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    1760:	8e e8       	ldi	r24, 0x8E	; 142
    1762:	80 bd       	out	0x20, r24	; 32
	
	#if defined(__AVR_ATmega2560__)
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	#endif
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    1764:	6f e9       	ldi	r22, 0x9F	; 159
    1766:	7b e0       	ldi	r23, 0x0B	; 11
    1768:	8b e9       	ldi	r24, 0x9B	; 155
    176a:	9b e0       	ldi	r25, 0x0B	; 11
    176c:	79 d1       	rcall	.+754    	; 0x1a60 <fdevopen>
    176e:	1f 91       	pop	r17
    1770:	0f 91       	pop	r16
    1772:	ff 90       	pop	r15
    1774:	ef 90       	pop	r14
    1776:	08 95       	ret

00001778 <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    1778:	9b 01       	movw	r18, r22
	
	switch(channel){
    177a:	82 30       	cpi	r24, 0x02	; 2
    177c:	69 f0       	breq	.+26     	; 0x1798 <ADC_request+0x20>
    177e:	18 f4       	brcc	.+6      	; 0x1786 <ADC_request+0xe>
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	31 f0       	breq	.+12     	; 0x1790 <ADC_request+0x18>
    1784:	15 c0       	rjmp	.+42     	; 0x17b0 <ADC_request+0x38>
    1786:	83 30       	cpi	r24, 0x03	; 3
    1788:	59 f0       	breq	.+22     	; 0x17a0 <ADC_request+0x28>
    178a:	84 30       	cpi	r24, 0x04	; 4
    178c:	69 f0       	breq	.+26     	; 0x17a8 <ADC_request+0x30>
    178e:	10 c0       	rjmp	.+32     	; 0x17b0 <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    1790:	64 e0       	ldi	r22, 0x04	; 4
    1792:	c9 01       	movw	r24, r18
    1794:	2e c9       	rjmp	.-3492   	; 0x9f2 <saveToAddress>
    1796:	08 95       	ret
			break;
    1798:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    179a:	c9 01       	movw	r24, r18
    179c:	2a c9       	rjmp	.-3500   	; 0x9f2 <saveToAddress>
    179e:	08 95       	ret
    17a0:	66 e0       	ldi	r22, 0x06	; 6
			break;
    17a2:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    17a4:	26 c9       	rjmp	.-3508   	; 0x9f2 <saveToAddress>
    17a6:	08 95       	ret
    17a8:	67 e0       	ldi	r22, 0x07	; 7
    17aa:	c9 01       	movw	r24, r18
			break;
    17ac:	22 c9       	rjmp	.-3516   	; 0x9f2 <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    17ae:	08 95       	ret
    17b0:	81 ec       	ldi	r24, 0xC1	; 193
    17b2:	92 e0       	ldi	r25, 0x02	; 2
    17b4:	9f 93       	push	r25
			break;
    17b6:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    17b8:	9d d1       	rcall	.+826    	; 0x1af4 <printf>
    17ba:	0f 90       	pop	r0
    17bc:	0f 90       	pop	r0
    17be:	08 95       	ret

000017c0 <ADC_read>:
    17c0:	15 c9       	rjmp	.-3542   	; 0x9ec <readFromAddress>
    17c2:	08 95       	ret

000017c4 <__divmodhi4>:
			break;
    17c4:	97 fb       	bst	r25, 7
    17c6:	07 2e       	mov	r0, r23
    17c8:	16 f4       	brtc	.+4      	; 0x17ce <__divmodhi4+0xa>
    17ca:	00 94       	com	r0
    17cc:	06 d0       	rcall	.+12     	; 0x17da <__divmodhi4_neg1>
    17ce:	77 fd       	sbrc	r23, 7
    17d0:	08 d0       	rcall	.+16     	; 0x17e2 <__divmodhi4_neg2>
    17d2:	0b d0       	rcall	.+22     	; 0x17ea <__udivmodhi4>
    17d4:	07 fc       	sbrc	r0, 7
    17d6:	05 d0       	rcall	.+10     	; 0x17e2 <__divmodhi4_neg2>
    17d8:	3e f4       	brtc	.+14     	; 0x17e8 <__divmodhi4_exit>

000017da <__divmodhi4_neg1>:
    17da:	90 95       	com	r25
    17dc:	81 95       	neg	r24
    17de:	9f 4f       	sbci	r25, 0xFF	; 255
    17e0:	08 95       	ret

000017e2 <__divmodhi4_neg2>:
    17e2:	70 95       	com	r23
    17e4:	61 95       	neg	r22
    17e6:	7f 4f       	sbci	r23, 0xFF	; 255

000017e8 <__divmodhi4_exit>:
    17e8:	08 95       	ret

000017ea <__udivmodhi4>:
    17ea:	aa 1b       	sub	r26, r26
    17ec:	bb 1b       	sub	r27, r27
    17ee:	51 e1       	ldi	r21, 0x11	; 17
    17f0:	07 c0       	rjmp	.+14     	; 0x1800 <__udivmodhi4_ep>

000017f2 <__udivmodhi4_loop>:
    17f2:	aa 1f       	adc	r26, r26
    17f4:	bb 1f       	adc	r27, r27
    17f6:	a6 17       	cp	r26, r22
    17f8:	b7 07       	cpc	r27, r23
    17fa:	10 f0       	brcs	.+4      	; 0x1800 <__udivmodhi4_ep>
    17fc:	a6 1b       	sub	r26, r22
    17fe:	b7 0b       	sbc	r27, r23

00001800 <__udivmodhi4_ep>:
    1800:	88 1f       	adc	r24, r24
    1802:	99 1f       	adc	r25, r25
    1804:	5a 95       	dec	r21
    1806:	a9 f7       	brne	.-22     	; 0x17f2 <__udivmodhi4_loop>
    1808:	80 95       	com	r24
    180a:	90 95       	com	r25
    180c:	bc 01       	movw	r22, r24
    180e:	cd 01       	movw	r24, r26
    1810:	08 95       	ret

00001812 <malloc>:
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	82 30       	cpi	r24, 0x02	; 2
    1818:	91 05       	cpc	r25, r1
    181a:	10 f4       	brcc	.+4      	; 0x1820 <malloc+0xe>
    181c:	82 e0       	ldi	r24, 0x02	; 2
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	e0 91 03 03 	lds	r30, 0x0303
    1824:	f0 91 04 03 	lds	r31, 0x0304
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	a0 e0       	ldi	r26, 0x00	; 0
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	30 97       	sbiw	r30, 0x00	; 0
    1832:	39 f1       	breq	.+78     	; 0x1882 <malloc+0x70>
    1834:	40 81       	ld	r20, Z
    1836:	51 81       	ldd	r21, Z+1	; 0x01
    1838:	48 17       	cp	r20, r24
    183a:	59 07       	cpc	r21, r25
    183c:	b8 f0       	brcs	.+46     	; 0x186c <malloc+0x5a>
    183e:	48 17       	cp	r20, r24
    1840:	59 07       	cpc	r21, r25
    1842:	71 f4       	brne	.+28     	; 0x1860 <malloc+0x4e>
    1844:	82 81       	ldd	r24, Z+2	; 0x02
    1846:	93 81       	ldd	r25, Z+3	; 0x03
    1848:	10 97       	sbiw	r26, 0x00	; 0
    184a:	29 f0       	breq	.+10     	; 0x1856 <malloc+0x44>
    184c:	13 96       	adiw	r26, 0x03	; 3
    184e:	9c 93       	st	X, r25
    1850:	8e 93       	st	-X, r24
    1852:	12 97       	sbiw	r26, 0x02	; 2
    1854:	2c c0       	rjmp	.+88     	; 0x18ae <malloc+0x9c>
    1856:	90 93 04 03 	sts	0x0304, r25
    185a:	80 93 03 03 	sts	0x0303, r24
    185e:	27 c0       	rjmp	.+78     	; 0x18ae <malloc+0x9c>
    1860:	21 15       	cp	r18, r1
    1862:	31 05       	cpc	r19, r1
    1864:	31 f0       	breq	.+12     	; 0x1872 <malloc+0x60>
    1866:	42 17       	cp	r20, r18
    1868:	53 07       	cpc	r21, r19
    186a:	18 f0       	brcs	.+6      	; 0x1872 <malloc+0x60>
    186c:	a9 01       	movw	r20, r18
    186e:	db 01       	movw	r26, r22
    1870:	01 c0       	rjmp	.+2      	; 0x1874 <malloc+0x62>
    1872:	ef 01       	movw	r28, r30
    1874:	9a 01       	movw	r18, r20
    1876:	bd 01       	movw	r22, r26
    1878:	df 01       	movw	r26, r30
    187a:	02 80       	ldd	r0, Z+2	; 0x02
    187c:	f3 81       	ldd	r31, Z+3	; 0x03
    187e:	e0 2d       	mov	r30, r0
    1880:	d7 cf       	rjmp	.-82     	; 0x1830 <malloc+0x1e>
    1882:	21 15       	cp	r18, r1
    1884:	31 05       	cpc	r19, r1
    1886:	f9 f0       	breq	.+62     	; 0x18c6 <malloc+0xb4>
    1888:	28 1b       	sub	r18, r24
    188a:	39 0b       	sbc	r19, r25
    188c:	24 30       	cpi	r18, 0x04	; 4
    188e:	31 05       	cpc	r19, r1
    1890:	80 f4       	brcc	.+32     	; 0x18b2 <malloc+0xa0>
    1892:	8a 81       	ldd	r24, Y+2	; 0x02
    1894:	9b 81       	ldd	r25, Y+3	; 0x03
    1896:	61 15       	cp	r22, r1
    1898:	71 05       	cpc	r23, r1
    189a:	21 f0       	breq	.+8      	; 0x18a4 <malloc+0x92>
    189c:	fb 01       	movw	r30, r22
    189e:	93 83       	std	Z+3, r25	; 0x03
    18a0:	82 83       	std	Z+2, r24	; 0x02
    18a2:	04 c0       	rjmp	.+8      	; 0x18ac <malloc+0x9a>
    18a4:	90 93 04 03 	sts	0x0304, r25
    18a8:	80 93 03 03 	sts	0x0303, r24
    18ac:	fe 01       	movw	r30, r28
    18ae:	32 96       	adiw	r30, 0x02	; 2
    18b0:	44 c0       	rjmp	.+136    	; 0x193a <malloc+0x128>
    18b2:	fe 01       	movw	r30, r28
    18b4:	e2 0f       	add	r30, r18
    18b6:	f3 1f       	adc	r31, r19
    18b8:	81 93       	st	Z+, r24
    18ba:	91 93       	st	Z+, r25
    18bc:	22 50       	subi	r18, 0x02	; 2
    18be:	31 09       	sbc	r19, r1
    18c0:	39 83       	std	Y+1, r19	; 0x01
    18c2:	28 83       	st	Y, r18
    18c4:	3a c0       	rjmp	.+116    	; 0x193a <malloc+0x128>
    18c6:	20 91 01 03 	lds	r18, 0x0301
    18ca:	30 91 02 03 	lds	r19, 0x0302
    18ce:	23 2b       	or	r18, r19
    18d0:	41 f4       	brne	.+16     	; 0x18e2 <malloc+0xd0>
    18d2:	20 91 02 01 	lds	r18, 0x0102
    18d6:	30 91 03 01 	lds	r19, 0x0103
    18da:	30 93 02 03 	sts	0x0302, r19
    18de:	20 93 01 03 	sts	0x0301, r18
    18e2:	20 91 00 01 	lds	r18, 0x0100
    18e6:	30 91 01 01 	lds	r19, 0x0101
    18ea:	21 15       	cp	r18, r1
    18ec:	31 05       	cpc	r19, r1
    18ee:	41 f4       	brne	.+16     	; 0x1900 <malloc+0xee>
    18f0:	2d b7       	in	r18, 0x3d	; 61
    18f2:	3e b7       	in	r19, 0x3e	; 62
    18f4:	40 91 04 01 	lds	r20, 0x0104
    18f8:	50 91 05 01 	lds	r21, 0x0105
    18fc:	24 1b       	sub	r18, r20
    18fe:	35 0b       	sbc	r19, r21
    1900:	e0 91 01 03 	lds	r30, 0x0301
    1904:	f0 91 02 03 	lds	r31, 0x0302
    1908:	e2 17       	cp	r30, r18
    190a:	f3 07       	cpc	r31, r19
    190c:	a0 f4       	brcc	.+40     	; 0x1936 <malloc+0x124>
    190e:	2e 1b       	sub	r18, r30
    1910:	3f 0b       	sbc	r19, r31
    1912:	28 17       	cp	r18, r24
    1914:	39 07       	cpc	r19, r25
    1916:	78 f0       	brcs	.+30     	; 0x1936 <malloc+0x124>
    1918:	ac 01       	movw	r20, r24
    191a:	4e 5f       	subi	r20, 0xFE	; 254
    191c:	5f 4f       	sbci	r21, 0xFF	; 255
    191e:	24 17       	cp	r18, r20
    1920:	35 07       	cpc	r19, r21
    1922:	48 f0       	brcs	.+18     	; 0x1936 <malloc+0x124>
    1924:	4e 0f       	add	r20, r30
    1926:	5f 1f       	adc	r21, r31
    1928:	50 93 02 03 	sts	0x0302, r21
    192c:	40 93 01 03 	sts	0x0301, r20
    1930:	81 93       	st	Z+, r24
    1932:	91 93       	st	Z+, r25
    1934:	02 c0       	rjmp	.+4      	; 0x193a <malloc+0x128>
    1936:	e0 e0       	ldi	r30, 0x00	; 0
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	cf 01       	movw	r24, r30
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	08 95       	ret

00001942 <free>:
    1942:	cf 93       	push	r28
    1944:	df 93       	push	r29
    1946:	00 97       	sbiw	r24, 0x00	; 0
    1948:	09 f4       	brne	.+2      	; 0x194c <free+0xa>
    194a:	87 c0       	rjmp	.+270    	; 0x1a5a <free+0x118>
    194c:	fc 01       	movw	r30, r24
    194e:	32 97       	sbiw	r30, 0x02	; 2
    1950:	13 82       	std	Z+3, r1	; 0x03
    1952:	12 82       	std	Z+2, r1	; 0x02
    1954:	c0 91 03 03 	lds	r28, 0x0303
    1958:	d0 91 04 03 	lds	r29, 0x0304
    195c:	20 97       	sbiw	r28, 0x00	; 0
    195e:	81 f4       	brne	.+32     	; 0x1980 <free+0x3e>
    1960:	20 81       	ld	r18, Z
    1962:	31 81       	ldd	r19, Z+1	; 0x01
    1964:	28 0f       	add	r18, r24
    1966:	39 1f       	adc	r19, r25
    1968:	80 91 01 03 	lds	r24, 0x0301
    196c:	90 91 02 03 	lds	r25, 0x0302
    1970:	82 17       	cp	r24, r18
    1972:	93 07       	cpc	r25, r19
    1974:	79 f5       	brne	.+94     	; 0x19d4 <free+0x92>
    1976:	f0 93 02 03 	sts	0x0302, r31
    197a:	e0 93 01 03 	sts	0x0301, r30
    197e:	6d c0       	rjmp	.+218    	; 0x1a5a <free+0x118>
    1980:	de 01       	movw	r26, r28
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	ae 17       	cp	r26, r30
    1988:	bf 07       	cpc	r27, r31
    198a:	50 f4       	brcc	.+20     	; 0x19a0 <free+0x5e>
    198c:	12 96       	adiw	r26, 0x02	; 2
    198e:	4d 91       	ld	r20, X+
    1990:	5c 91       	ld	r21, X
    1992:	13 97       	sbiw	r26, 0x03	; 3
    1994:	9d 01       	movw	r18, r26
    1996:	41 15       	cp	r20, r1
    1998:	51 05       	cpc	r21, r1
    199a:	09 f1       	breq	.+66     	; 0x19de <free+0x9c>
    199c:	da 01       	movw	r26, r20
    199e:	f3 cf       	rjmp	.-26     	; 0x1986 <free+0x44>
    19a0:	b3 83       	std	Z+3, r27	; 0x03
    19a2:	a2 83       	std	Z+2, r26	; 0x02
    19a4:	40 81       	ld	r20, Z
    19a6:	51 81       	ldd	r21, Z+1	; 0x01
    19a8:	84 0f       	add	r24, r20
    19aa:	95 1f       	adc	r25, r21
    19ac:	8a 17       	cp	r24, r26
    19ae:	9b 07       	cpc	r25, r27
    19b0:	71 f4       	brne	.+28     	; 0x19ce <free+0x8c>
    19b2:	8d 91       	ld	r24, X+
    19b4:	9c 91       	ld	r25, X
    19b6:	11 97       	sbiw	r26, 0x01	; 1
    19b8:	84 0f       	add	r24, r20
    19ba:	95 1f       	adc	r25, r21
    19bc:	02 96       	adiw	r24, 0x02	; 2
    19be:	91 83       	std	Z+1, r25	; 0x01
    19c0:	80 83       	st	Z, r24
    19c2:	12 96       	adiw	r26, 0x02	; 2
    19c4:	8d 91       	ld	r24, X+
    19c6:	9c 91       	ld	r25, X
    19c8:	13 97       	sbiw	r26, 0x03	; 3
    19ca:	93 83       	std	Z+3, r25	; 0x03
    19cc:	82 83       	std	Z+2, r24	; 0x02
    19ce:	21 15       	cp	r18, r1
    19d0:	31 05       	cpc	r19, r1
    19d2:	29 f4       	brne	.+10     	; 0x19de <free+0x9c>
    19d4:	f0 93 04 03 	sts	0x0304, r31
    19d8:	e0 93 03 03 	sts	0x0303, r30
    19dc:	3e c0       	rjmp	.+124    	; 0x1a5a <free+0x118>
    19de:	d9 01       	movw	r26, r18
    19e0:	13 96       	adiw	r26, 0x03	; 3
    19e2:	fc 93       	st	X, r31
    19e4:	ee 93       	st	-X, r30
    19e6:	12 97       	sbiw	r26, 0x02	; 2
    19e8:	4d 91       	ld	r20, X+
    19ea:	5d 91       	ld	r21, X+
    19ec:	a4 0f       	add	r26, r20
    19ee:	b5 1f       	adc	r27, r21
    19f0:	ea 17       	cp	r30, r26
    19f2:	fb 07       	cpc	r31, r27
    19f4:	79 f4       	brne	.+30     	; 0x1a14 <free+0xd2>
    19f6:	80 81       	ld	r24, Z
    19f8:	91 81       	ldd	r25, Z+1	; 0x01
    19fa:	84 0f       	add	r24, r20
    19fc:	95 1f       	adc	r25, r21
    19fe:	02 96       	adiw	r24, 0x02	; 2
    1a00:	d9 01       	movw	r26, r18
    1a02:	11 96       	adiw	r26, 0x01	; 1
    1a04:	9c 93       	st	X, r25
    1a06:	8e 93       	st	-X, r24
    1a08:	82 81       	ldd	r24, Z+2	; 0x02
    1a0a:	93 81       	ldd	r25, Z+3	; 0x03
    1a0c:	13 96       	adiw	r26, 0x03	; 3
    1a0e:	9c 93       	st	X, r25
    1a10:	8e 93       	st	-X, r24
    1a12:	12 97       	sbiw	r26, 0x02	; 2
    1a14:	e0 e0       	ldi	r30, 0x00	; 0
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	19 f0       	breq	.+6      	; 0x1a26 <free+0xe4>
    1a20:	fe 01       	movw	r30, r28
    1a22:	ec 01       	movw	r28, r24
    1a24:	f9 cf       	rjmp	.-14     	; 0x1a18 <free+0xd6>
    1a26:	ce 01       	movw	r24, r28
    1a28:	02 96       	adiw	r24, 0x02	; 2
    1a2a:	28 81       	ld	r18, Y
    1a2c:	39 81       	ldd	r19, Y+1	; 0x01
    1a2e:	82 0f       	add	r24, r18
    1a30:	93 1f       	adc	r25, r19
    1a32:	20 91 01 03 	lds	r18, 0x0301
    1a36:	30 91 02 03 	lds	r19, 0x0302
    1a3a:	28 17       	cp	r18, r24
    1a3c:	39 07       	cpc	r19, r25
    1a3e:	69 f4       	brne	.+26     	; 0x1a5a <free+0x118>
    1a40:	30 97       	sbiw	r30, 0x00	; 0
    1a42:	29 f4       	brne	.+10     	; 0x1a4e <free+0x10c>
    1a44:	10 92 04 03 	sts	0x0304, r1
    1a48:	10 92 03 03 	sts	0x0303, r1
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <free+0x110>
    1a4e:	13 82       	std	Z+3, r1	; 0x03
    1a50:	12 82       	std	Z+2, r1	; 0x02
    1a52:	d0 93 02 03 	sts	0x0302, r29
    1a56:	c0 93 01 03 	sts	0x0301, r28
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
    1a5e:	08 95       	ret

00001a60 <fdevopen>:
    1a60:	0f 93       	push	r16
    1a62:	1f 93       	push	r17
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
    1a68:	ec 01       	movw	r28, r24
    1a6a:	8b 01       	movw	r16, r22
    1a6c:	00 97       	sbiw	r24, 0x00	; 0
    1a6e:	31 f4       	brne	.+12     	; 0x1a7c <fdevopen+0x1c>
    1a70:	61 15       	cp	r22, r1
    1a72:	71 05       	cpc	r23, r1
    1a74:	19 f4       	brne	.+6      	; 0x1a7c <fdevopen+0x1c>
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	37 c0       	rjmp	.+110    	; 0x1aea <fdevopen+0x8a>
    1a7c:	6e e0       	ldi	r22, 0x0E	; 14
    1a7e:	70 e0       	ldi	r23, 0x00	; 0
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	5c d2       	rcall	.+1208   	; 0x1f3e <calloc>
    1a86:	fc 01       	movw	r30, r24
    1a88:	00 97       	sbiw	r24, 0x00	; 0
    1a8a:	a9 f3       	breq	.-22     	; 0x1a76 <fdevopen+0x16>
    1a8c:	80 e8       	ldi	r24, 0x80	; 128
    1a8e:	83 83       	std	Z+3, r24	; 0x03
    1a90:	01 15       	cp	r16, r1
    1a92:	11 05       	cpc	r17, r1
    1a94:	71 f0       	breq	.+28     	; 0x1ab2 <fdevopen+0x52>
    1a96:	13 87       	std	Z+11, r17	; 0x0b
    1a98:	02 87       	std	Z+10, r16	; 0x0a
    1a9a:	81 e8       	ldi	r24, 0x81	; 129
    1a9c:	83 83       	std	Z+3, r24	; 0x03
    1a9e:	80 91 05 03 	lds	r24, 0x0305
    1aa2:	90 91 06 03 	lds	r25, 0x0306
    1aa6:	89 2b       	or	r24, r25
    1aa8:	21 f4       	brne	.+8      	; 0x1ab2 <fdevopen+0x52>
    1aaa:	f0 93 06 03 	sts	0x0306, r31
    1aae:	e0 93 05 03 	sts	0x0305, r30
    1ab2:	20 97       	sbiw	r28, 0x00	; 0
    1ab4:	c9 f0       	breq	.+50     	; 0x1ae8 <fdevopen+0x88>
    1ab6:	d1 87       	std	Z+9, r29	; 0x09
    1ab8:	c0 87       	std	Z+8, r28	; 0x08
    1aba:	83 81       	ldd	r24, Z+3	; 0x03
    1abc:	82 60       	ori	r24, 0x02	; 2
    1abe:	83 83       	std	Z+3, r24	; 0x03
    1ac0:	80 91 07 03 	lds	r24, 0x0307
    1ac4:	90 91 08 03 	lds	r25, 0x0308
    1ac8:	89 2b       	or	r24, r25
    1aca:	71 f4       	brne	.+28     	; 0x1ae8 <fdevopen+0x88>
    1acc:	f0 93 08 03 	sts	0x0308, r31
    1ad0:	e0 93 07 03 	sts	0x0307, r30
    1ad4:	80 91 09 03 	lds	r24, 0x0309
    1ad8:	90 91 0a 03 	lds	r25, 0x030A
    1adc:	89 2b       	or	r24, r25
    1ade:	21 f4       	brne	.+8      	; 0x1ae8 <fdevopen+0x88>
    1ae0:	f0 93 0a 03 	sts	0x030A, r31
    1ae4:	e0 93 09 03 	sts	0x0309, r30
    1ae8:	cf 01       	movw	r24, r30
    1aea:	df 91       	pop	r29
    1aec:	cf 91       	pop	r28
    1aee:	1f 91       	pop	r17
    1af0:	0f 91       	pop	r16
    1af2:	08 95       	ret

00001af4 <printf>:
    1af4:	a0 e0       	ldi	r26, 0x00	; 0
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	ef e7       	ldi	r30, 0x7F	; 127
    1afa:	fd e0       	ldi	r31, 0x0D	; 13
    1afc:	f7 c2       	rjmp	.+1518   	; 0x20ec <__prologue_saves__+0x20>
    1afe:	fe 01       	movw	r30, r28
    1b00:	35 96       	adiw	r30, 0x05	; 5
    1b02:	61 91       	ld	r22, Z+
    1b04:	71 91       	ld	r23, Z+
    1b06:	af 01       	movw	r20, r30
    1b08:	80 91 07 03 	lds	r24, 0x0307
    1b0c:	90 91 08 03 	lds	r25, 0x0308
    1b10:	53 d0       	rcall	.+166    	; 0x1bb8 <vfprintf>
    1b12:	e2 e0       	ldi	r30, 0x02	; 2
    1b14:	07 c3       	rjmp	.+1550   	; 0x2124 <__epilogue_restores__+0x20>

00001b16 <putchar>:
    1b16:	60 91 07 03 	lds	r22, 0x0307
    1b1a:	70 91 08 03 	lds	r23, 0x0308
    1b1e:	46 c2       	rjmp	.+1164   	; 0x1fac <fputc>

00001b20 <puts>:
    1b20:	0f 93       	push	r16
    1b22:	1f 93       	push	r17
    1b24:	cf 93       	push	r28
    1b26:	df 93       	push	r29
    1b28:	e0 91 07 03 	lds	r30, 0x0307
    1b2c:	f0 91 08 03 	lds	r31, 0x0308
    1b30:	23 81       	ldd	r18, Z+3	; 0x03
    1b32:	21 ff       	sbrs	r18, 1
    1b34:	1b c0       	rjmp	.+54     	; 0x1b6c <puts+0x4c>
    1b36:	ec 01       	movw	r28, r24
    1b38:	00 e0       	ldi	r16, 0x00	; 0
    1b3a:	10 e0       	ldi	r17, 0x00	; 0
    1b3c:	89 91       	ld	r24, Y+
    1b3e:	60 91 07 03 	lds	r22, 0x0307
    1b42:	70 91 08 03 	lds	r23, 0x0308
    1b46:	db 01       	movw	r26, r22
    1b48:	18 96       	adiw	r26, 0x08	; 8
    1b4a:	ed 91       	ld	r30, X+
    1b4c:	fc 91       	ld	r31, X
    1b4e:	19 97       	sbiw	r26, 0x09	; 9
    1b50:	88 23       	and	r24, r24
    1b52:	31 f0       	breq	.+12     	; 0x1b60 <puts+0x40>
    1b54:	09 95       	icall
    1b56:	89 2b       	or	r24, r25
    1b58:	89 f3       	breq	.-30     	; 0x1b3c <puts+0x1c>
    1b5a:	0f ef       	ldi	r16, 0xFF	; 255
    1b5c:	1f ef       	ldi	r17, 0xFF	; 255
    1b5e:	ee cf       	rjmp	.-36     	; 0x1b3c <puts+0x1c>
    1b60:	8a e0       	ldi	r24, 0x0A	; 10
    1b62:	09 95       	icall
    1b64:	89 2b       	or	r24, r25
    1b66:	11 f4       	brne	.+4      	; 0x1b6c <puts+0x4c>
    1b68:	c8 01       	movw	r24, r16
    1b6a:	02 c0       	rjmp	.+4      	; 0x1b70 <puts+0x50>
    1b6c:	8f ef       	ldi	r24, 0xFF	; 255
    1b6e:	9f ef       	ldi	r25, 0xFF	; 255
    1b70:	df 91       	pop	r29
    1b72:	cf 91       	pop	r28
    1b74:	1f 91       	pop	r17
    1b76:	0f 91       	pop	r16
    1b78:	08 95       	ret

00001b7a <sprintf>:
    1b7a:	ae e0       	ldi	r26, 0x0E	; 14
    1b7c:	b0 e0       	ldi	r27, 0x00	; 0
    1b7e:	e2 ec       	ldi	r30, 0xC2	; 194
    1b80:	fd e0       	ldi	r31, 0x0D	; 13
    1b82:	b2 c2       	rjmp	.+1380   	; 0x20e8 <__prologue_saves__+0x1c>
    1b84:	0d 89       	ldd	r16, Y+21	; 0x15
    1b86:	1e 89       	ldd	r17, Y+22	; 0x16
    1b88:	86 e0       	ldi	r24, 0x06	; 6
    1b8a:	8c 83       	std	Y+4, r24	; 0x04
    1b8c:	1a 83       	std	Y+2, r17	; 0x02
    1b8e:	09 83       	std	Y+1, r16	; 0x01
    1b90:	8f ef       	ldi	r24, 0xFF	; 255
    1b92:	9f e7       	ldi	r25, 0x7F	; 127
    1b94:	9e 83       	std	Y+6, r25	; 0x06
    1b96:	8d 83       	std	Y+5, r24	; 0x05
    1b98:	ae 01       	movw	r20, r28
    1b9a:	47 5e       	subi	r20, 0xE7	; 231
    1b9c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b9e:	6f 89       	ldd	r22, Y+23	; 0x17
    1ba0:	78 8d       	ldd	r23, Y+24	; 0x18
    1ba2:	ce 01       	movw	r24, r28
    1ba4:	01 96       	adiw	r24, 0x01	; 1
    1ba6:	08 d0       	rcall	.+16     	; 0x1bb8 <vfprintf>
    1ba8:	ef 81       	ldd	r30, Y+7	; 0x07
    1baa:	f8 85       	ldd	r31, Y+8	; 0x08
    1bac:	e0 0f       	add	r30, r16
    1bae:	f1 1f       	adc	r31, r17
    1bb0:	10 82       	st	Z, r1
    1bb2:	2e 96       	adiw	r28, 0x0e	; 14
    1bb4:	e4 e0       	ldi	r30, 0x04	; 4
    1bb6:	b4 c2       	rjmp	.+1384   	; 0x2120 <__epilogue_restores__+0x1c>

00001bb8 <vfprintf>:
    1bb8:	ac e0       	ldi	r26, 0x0C	; 12
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e1 ee       	ldi	r30, 0xE1	; 225
    1bbe:	fd e0       	ldi	r31, 0x0D	; 13
    1bc0:	85 c2       	rjmp	.+1290   	; 0x20cc <__prologue_saves__>
    1bc2:	7c 01       	movw	r14, r24
    1bc4:	6b 01       	movw	r12, r22
    1bc6:	8a 01       	movw	r16, r20
    1bc8:	fc 01       	movw	r30, r24
    1bca:	17 82       	std	Z+7, r1	; 0x07
    1bcc:	16 82       	std	Z+6, r1	; 0x06
    1bce:	83 81       	ldd	r24, Z+3	; 0x03
    1bd0:	81 ff       	sbrs	r24, 1
    1bd2:	b0 c1       	rjmp	.+864    	; 0x1f34 <vfprintf+0x37c>
    1bd4:	ce 01       	movw	r24, r28
    1bd6:	01 96       	adiw	r24, 0x01	; 1
    1bd8:	4c 01       	movw	r8, r24
    1bda:	f7 01       	movw	r30, r14
    1bdc:	93 81       	ldd	r25, Z+3	; 0x03
    1bde:	f6 01       	movw	r30, r12
    1be0:	93 fd       	sbrc	r25, 3
    1be2:	85 91       	lpm	r24, Z+
    1be4:	93 ff       	sbrs	r25, 3
    1be6:	81 91       	ld	r24, Z+
    1be8:	6f 01       	movw	r12, r30
    1bea:	88 23       	and	r24, r24
    1bec:	09 f4       	brne	.+2      	; 0x1bf0 <vfprintf+0x38>
    1bee:	9e c1       	rjmp	.+828    	; 0x1f2c <vfprintf+0x374>
    1bf0:	85 32       	cpi	r24, 0x25	; 37
    1bf2:	39 f4       	brne	.+14     	; 0x1c02 <vfprintf+0x4a>
    1bf4:	93 fd       	sbrc	r25, 3
    1bf6:	85 91       	lpm	r24, Z+
    1bf8:	93 ff       	sbrs	r25, 3
    1bfa:	81 91       	ld	r24, Z+
    1bfc:	6f 01       	movw	r12, r30
    1bfe:	85 32       	cpi	r24, 0x25	; 37
    1c00:	21 f4       	brne	.+8      	; 0x1c0a <vfprintf+0x52>
    1c02:	b7 01       	movw	r22, r14
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	d2 d1       	rcall	.+932    	; 0x1fac <fputc>
    1c08:	e8 cf       	rjmp	.-48     	; 0x1bda <vfprintf+0x22>
    1c0a:	51 2c       	mov	r5, r1
    1c0c:	31 2c       	mov	r3, r1
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	20 32       	cpi	r18, 0x20	; 32
    1c12:	a0 f4       	brcc	.+40     	; 0x1c3c <vfprintf+0x84>
    1c14:	8b 32       	cpi	r24, 0x2B	; 43
    1c16:	69 f0       	breq	.+26     	; 0x1c32 <vfprintf+0x7a>
    1c18:	30 f4       	brcc	.+12     	; 0x1c26 <vfprintf+0x6e>
    1c1a:	80 32       	cpi	r24, 0x20	; 32
    1c1c:	59 f0       	breq	.+22     	; 0x1c34 <vfprintf+0x7c>
    1c1e:	83 32       	cpi	r24, 0x23	; 35
    1c20:	69 f4       	brne	.+26     	; 0x1c3c <vfprintf+0x84>
    1c22:	20 61       	ori	r18, 0x10	; 16
    1c24:	2c c0       	rjmp	.+88     	; 0x1c7e <vfprintf+0xc6>
    1c26:	8d 32       	cpi	r24, 0x2D	; 45
    1c28:	39 f0       	breq	.+14     	; 0x1c38 <vfprintf+0x80>
    1c2a:	80 33       	cpi	r24, 0x30	; 48
    1c2c:	39 f4       	brne	.+14     	; 0x1c3c <vfprintf+0x84>
    1c2e:	21 60       	ori	r18, 0x01	; 1
    1c30:	26 c0       	rjmp	.+76     	; 0x1c7e <vfprintf+0xc6>
    1c32:	22 60       	ori	r18, 0x02	; 2
    1c34:	24 60       	ori	r18, 0x04	; 4
    1c36:	23 c0       	rjmp	.+70     	; 0x1c7e <vfprintf+0xc6>
    1c38:	28 60       	ori	r18, 0x08	; 8
    1c3a:	21 c0       	rjmp	.+66     	; 0x1c7e <vfprintf+0xc6>
    1c3c:	27 fd       	sbrc	r18, 7
    1c3e:	27 c0       	rjmp	.+78     	; 0x1c8e <vfprintf+0xd6>
    1c40:	30 ed       	ldi	r19, 0xD0	; 208
    1c42:	38 0f       	add	r19, r24
    1c44:	3a 30       	cpi	r19, 0x0A	; 10
    1c46:	78 f4       	brcc	.+30     	; 0x1c66 <vfprintf+0xae>
    1c48:	26 ff       	sbrs	r18, 6
    1c4a:	06 c0       	rjmp	.+12     	; 0x1c58 <vfprintf+0xa0>
    1c4c:	fa e0       	ldi	r31, 0x0A	; 10
    1c4e:	5f 9e       	mul	r5, r31
    1c50:	30 0d       	add	r19, r0
    1c52:	11 24       	eor	r1, r1
    1c54:	53 2e       	mov	r5, r19
    1c56:	13 c0       	rjmp	.+38     	; 0x1c7e <vfprintf+0xc6>
    1c58:	8a e0       	ldi	r24, 0x0A	; 10
    1c5a:	38 9e       	mul	r3, r24
    1c5c:	30 0d       	add	r19, r0
    1c5e:	11 24       	eor	r1, r1
    1c60:	33 2e       	mov	r3, r19
    1c62:	20 62       	ori	r18, 0x20	; 32
    1c64:	0c c0       	rjmp	.+24     	; 0x1c7e <vfprintf+0xc6>
    1c66:	8e 32       	cpi	r24, 0x2E	; 46
    1c68:	21 f4       	brne	.+8      	; 0x1c72 <vfprintf+0xba>
    1c6a:	26 fd       	sbrc	r18, 6
    1c6c:	5f c1       	rjmp	.+702    	; 0x1f2c <vfprintf+0x374>
    1c6e:	20 64       	ori	r18, 0x40	; 64
    1c70:	06 c0       	rjmp	.+12     	; 0x1c7e <vfprintf+0xc6>
    1c72:	8c 36       	cpi	r24, 0x6C	; 108
    1c74:	11 f4       	brne	.+4      	; 0x1c7a <vfprintf+0xc2>
    1c76:	20 68       	ori	r18, 0x80	; 128
    1c78:	02 c0       	rjmp	.+4      	; 0x1c7e <vfprintf+0xc6>
    1c7a:	88 36       	cpi	r24, 0x68	; 104
    1c7c:	41 f4       	brne	.+16     	; 0x1c8e <vfprintf+0xd6>
    1c7e:	f6 01       	movw	r30, r12
    1c80:	93 fd       	sbrc	r25, 3
    1c82:	85 91       	lpm	r24, Z+
    1c84:	93 ff       	sbrs	r25, 3
    1c86:	81 91       	ld	r24, Z+
    1c88:	6f 01       	movw	r12, r30
    1c8a:	81 11       	cpse	r24, r1
    1c8c:	c1 cf       	rjmp	.-126    	; 0x1c10 <vfprintf+0x58>
    1c8e:	98 2f       	mov	r25, r24
    1c90:	9f 7d       	andi	r25, 0xDF	; 223
    1c92:	95 54       	subi	r25, 0x45	; 69
    1c94:	93 30       	cpi	r25, 0x03	; 3
    1c96:	28 f4       	brcc	.+10     	; 0x1ca2 <vfprintf+0xea>
    1c98:	0c 5f       	subi	r16, 0xFC	; 252
    1c9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c9c:	ff e3       	ldi	r31, 0x3F	; 63
    1c9e:	f9 83       	std	Y+1, r31	; 0x01
    1ca0:	0d c0       	rjmp	.+26     	; 0x1cbc <vfprintf+0x104>
    1ca2:	83 36       	cpi	r24, 0x63	; 99
    1ca4:	31 f0       	breq	.+12     	; 0x1cb2 <vfprintf+0xfa>
    1ca6:	83 37       	cpi	r24, 0x73	; 115
    1ca8:	71 f0       	breq	.+28     	; 0x1cc6 <vfprintf+0x10e>
    1caa:	83 35       	cpi	r24, 0x53	; 83
    1cac:	09 f0       	breq	.+2      	; 0x1cb0 <vfprintf+0xf8>
    1cae:	57 c0       	rjmp	.+174    	; 0x1d5e <vfprintf+0x1a6>
    1cb0:	21 c0       	rjmp	.+66     	; 0x1cf4 <vfprintf+0x13c>
    1cb2:	f8 01       	movw	r30, r16
    1cb4:	80 81       	ld	r24, Z
    1cb6:	89 83       	std	Y+1, r24	; 0x01
    1cb8:	0e 5f       	subi	r16, 0xFE	; 254
    1cba:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbc:	44 24       	eor	r4, r4
    1cbe:	43 94       	inc	r4
    1cc0:	51 2c       	mov	r5, r1
    1cc2:	54 01       	movw	r10, r8
    1cc4:	14 c0       	rjmp	.+40     	; 0x1cee <vfprintf+0x136>
    1cc6:	38 01       	movw	r6, r16
    1cc8:	f2 e0       	ldi	r31, 0x02	; 2
    1cca:	6f 0e       	add	r6, r31
    1ccc:	71 1c       	adc	r7, r1
    1cce:	f8 01       	movw	r30, r16
    1cd0:	a0 80       	ld	r10, Z
    1cd2:	b1 80       	ldd	r11, Z+1	; 0x01
    1cd4:	26 ff       	sbrs	r18, 6
    1cd6:	03 c0       	rjmp	.+6      	; 0x1cde <vfprintf+0x126>
    1cd8:	65 2d       	mov	r22, r5
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	02 c0       	rjmp	.+4      	; 0x1ce2 <vfprintf+0x12a>
    1cde:	6f ef       	ldi	r22, 0xFF	; 255
    1ce0:	7f ef       	ldi	r23, 0xFF	; 255
    1ce2:	c5 01       	movw	r24, r10
    1ce4:	2c 87       	std	Y+12, r18	; 0x0c
    1ce6:	57 d1       	rcall	.+686    	; 0x1f96 <strnlen>
    1ce8:	2c 01       	movw	r4, r24
    1cea:	83 01       	movw	r16, r6
    1cec:	2c 85       	ldd	r18, Y+12	; 0x0c
    1cee:	2f 77       	andi	r18, 0x7F	; 127
    1cf0:	22 2e       	mov	r2, r18
    1cf2:	16 c0       	rjmp	.+44     	; 0x1d20 <vfprintf+0x168>
    1cf4:	38 01       	movw	r6, r16
    1cf6:	f2 e0       	ldi	r31, 0x02	; 2
    1cf8:	6f 0e       	add	r6, r31
    1cfa:	71 1c       	adc	r7, r1
    1cfc:	f8 01       	movw	r30, r16
    1cfe:	a0 80       	ld	r10, Z
    1d00:	b1 80       	ldd	r11, Z+1	; 0x01
    1d02:	26 ff       	sbrs	r18, 6
    1d04:	03 c0       	rjmp	.+6      	; 0x1d0c <vfprintf+0x154>
    1d06:	65 2d       	mov	r22, r5
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	02 c0       	rjmp	.+4      	; 0x1d10 <vfprintf+0x158>
    1d0c:	6f ef       	ldi	r22, 0xFF	; 255
    1d0e:	7f ef       	ldi	r23, 0xFF	; 255
    1d10:	c5 01       	movw	r24, r10
    1d12:	2c 87       	std	Y+12, r18	; 0x0c
    1d14:	2e d1       	rcall	.+604    	; 0x1f72 <strnlen_P>
    1d16:	2c 01       	movw	r4, r24
    1d18:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d1a:	20 68       	ori	r18, 0x80	; 128
    1d1c:	22 2e       	mov	r2, r18
    1d1e:	83 01       	movw	r16, r6
    1d20:	23 fc       	sbrc	r2, 3
    1d22:	19 c0       	rjmp	.+50     	; 0x1d56 <vfprintf+0x19e>
    1d24:	83 2d       	mov	r24, r3
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	48 16       	cp	r4, r24
    1d2a:	59 06       	cpc	r5, r25
    1d2c:	a0 f4       	brcc	.+40     	; 0x1d56 <vfprintf+0x19e>
    1d2e:	b7 01       	movw	r22, r14
    1d30:	80 e2       	ldi	r24, 0x20	; 32
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	3b d1       	rcall	.+630    	; 0x1fac <fputc>
    1d36:	3a 94       	dec	r3
    1d38:	f5 cf       	rjmp	.-22     	; 0x1d24 <vfprintf+0x16c>
    1d3a:	f5 01       	movw	r30, r10
    1d3c:	27 fc       	sbrc	r2, 7
    1d3e:	85 91       	lpm	r24, Z+
    1d40:	27 fe       	sbrs	r2, 7
    1d42:	81 91       	ld	r24, Z+
    1d44:	5f 01       	movw	r10, r30
    1d46:	b7 01       	movw	r22, r14
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	30 d1       	rcall	.+608    	; 0x1fac <fputc>
    1d4c:	31 10       	cpse	r3, r1
    1d4e:	3a 94       	dec	r3
    1d50:	f1 e0       	ldi	r31, 0x01	; 1
    1d52:	4f 1a       	sub	r4, r31
    1d54:	51 08       	sbc	r5, r1
    1d56:	41 14       	cp	r4, r1
    1d58:	51 04       	cpc	r5, r1
    1d5a:	79 f7       	brne	.-34     	; 0x1d3a <vfprintf+0x182>
    1d5c:	de c0       	rjmp	.+444    	; 0x1f1a <vfprintf+0x362>
    1d5e:	84 36       	cpi	r24, 0x64	; 100
    1d60:	11 f0       	breq	.+4      	; 0x1d66 <vfprintf+0x1ae>
    1d62:	89 36       	cpi	r24, 0x69	; 105
    1d64:	31 f5       	brne	.+76     	; 0x1db2 <vfprintf+0x1fa>
    1d66:	f8 01       	movw	r30, r16
    1d68:	27 ff       	sbrs	r18, 7
    1d6a:	07 c0       	rjmp	.+14     	; 0x1d7a <vfprintf+0x1c2>
    1d6c:	60 81       	ld	r22, Z
    1d6e:	71 81       	ldd	r23, Z+1	; 0x01
    1d70:	82 81       	ldd	r24, Z+2	; 0x02
    1d72:	93 81       	ldd	r25, Z+3	; 0x03
    1d74:	0c 5f       	subi	r16, 0xFC	; 252
    1d76:	1f 4f       	sbci	r17, 0xFF	; 255
    1d78:	08 c0       	rjmp	.+16     	; 0x1d8a <vfprintf+0x1d2>
    1d7a:	60 81       	ld	r22, Z
    1d7c:	71 81       	ldd	r23, Z+1	; 0x01
    1d7e:	88 27       	eor	r24, r24
    1d80:	77 fd       	sbrc	r23, 7
    1d82:	80 95       	com	r24
    1d84:	98 2f       	mov	r25, r24
    1d86:	0e 5f       	subi	r16, 0xFE	; 254
    1d88:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8a:	2f 76       	andi	r18, 0x6F	; 111
    1d8c:	b2 2e       	mov	r11, r18
    1d8e:	97 ff       	sbrs	r25, 7
    1d90:	09 c0       	rjmp	.+18     	; 0x1da4 <vfprintf+0x1ec>
    1d92:	90 95       	com	r25
    1d94:	80 95       	com	r24
    1d96:	70 95       	com	r23
    1d98:	61 95       	neg	r22
    1d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1da0:	20 68       	ori	r18, 0x80	; 128
    1da2:	b2 2e       	mov	r11, r18
    1da4:	2a e0       	ldi	r18, 0x0A	; 10
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	a4 01       	movw	r20, r8
    1daa:	32 d1       	rcall	.+612    	; 0x2010 <__ultoa_invert>
    1dac:	a8 2e       	mov	r10, r24
    1dae:	a8 18       	sub	r10, r8
    1db0:	43 c0       	rjmp	.+134    	; 0x1e38 <vfprintf+0x280>
    1db2:	85 37       	cpi	r24, 0x75	; 117
    1db4:	29 f4       	brne	.+10     	; 0x1dc0 <vfprintf+0x208>
    1db6:	2f 7e       	andi	r18, 0xEF	; 239
    1db8:	b2 2e       	mov	r11, r18
    1dba:	2a e0       	ldi	r18, 0x0A	; 10
    1dbc:	30 e0       	ldi	r19, 0x00	; 0
    1dbe:	25 c0       	rjmp	.+74     	; 0x1e0a <vfprintf+0x252>
    1dc0:	f2 2f       	mov	r31, r18
    1dc2:	f9 7f       	andi	r31, 0xF9	; 249
    1dc4:	bf 2e       	mov	r11, r31
    1dc6:	8f 36       	cpi	r24, 0x6F	; 111
    1dc8:	c1 f0       	breq	.+48     	; 0x1dfa <vfprintf+0x242>
    1dca:	18 f4       	brcc	.+6      	; 0x1dd2 <vfprintf+0x21a>
    1dcc:	88 35       	cpi	r24, 0x58	; 88
    1dce:	79 f0       	breq	.+30     	; 0x1dee <vfprintf+0x236>
    1dd0:	ad c0       	rjmp	.+346    	; 0x1f2c <vfprintf+0x374>
    1dd2:	80 37       	cpi	r24, 0x70	; 112
    1dd4:	19 f0       	breq	.+6      	; 0x1ddc <vfprintf+0x224>
    1dd6:	88 37       	cpi	r24, 0x78	; 120
    1dd8:	21 f0       	breq	.+8      	; 0x1de2 <vfprintf+0x22a>
    1dda:	a8 c0       	rjmp	.+336    	; 0x1f2c <vfprintf+0x374>
    1ddc:	2f 2f       	mov	r18, r31
    1dde:	20 61       	ori	r18, 0x10	; 16
    1de0:	b2 2e       	mov	r11, r18
    1de2:	b4 fe       	sbrs	r11, 4
    1de4:	0d c0       	rjmp	.+26     	; 0x1e00 <vfprintf+0x248>
    1de6:	8b 2d       	mov	r24, r11
    1de8:	84 60       	ori	r24, 0x04	; 4
    1dea:	b8 2e       	mov	r11, r24
    1dec:	09 c0       	rjmp	.+18     	; 0x1e00 <vfprintf+0x248>
    1dee:	24 ff       	sbrs	r18, 4
    1df0:	0a c0       	rjmp	.+20     	; 0x1e06 <vfprintf+0x24e>
    1df2:	9f 2f       	mov	r25, r31
    1df4:	96 60       	ori	r25, 0x06	; 6
    1df6:	b9 2e       	mov	r11, r25
    1df8:	06 c0       	rjmp	.+12     	; 0x1e06 <vfprintf+0x24e>
    1dfa:	28 e0       	ldi	r18, 0x08	; 8
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	05 c0       	rjmp	.+10     	; 0x1e0a <vfprintf+0x252>
    1e00:	20 e1       	ldi	r18, 0x10	; 16
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	02 c0       	rjmp	.+4      	; 0x1e0a <vfprintf+0x252>
    1e06:	20 e1       	ldi	r18, 0x10	; 16
    1e08:	32 e0       	ldi	r19, 0x02	; 2
    1e0a:	f8 01       	movw	r30, r16
    1e0c:	b7 fe       	sbrs	r11, 7
    1e0e:	07 c0       	rjmp	.+14     	; 0x1e1e <vfprintf+0x266>
    1e10:	60 81       	ld	r22, Z
    1e12:	71 81       	ldd	r23, Z+1	; 0x01
    1e14:	82 81       	ldd	r24, Z+2	; 0x02
    1e16:	93 81       	ldd	r25, Z+3	; 0x03
    1e18:	0c 5f       	subi	r16, 0xFC	; 252
    1e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e1c:	06 c0       	rjmp	.+12     	; 0x1e2a <vfprintf+0x272>
    1e1e:	60 81       	ld	r22, Z
    1e20:	71 81       	ldd	r23, Z+1	; 0x01
    1e22:	80 e0       	ldi	r24, 0x00	; 0
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	0e 5f       	subi	r16, 0xFE	; 254
    1e28:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2a:	a4 01       	movw	r20, r8
    1e2c:	f1 d0       	rcall	.+482    	; 0x2010 <__ultoa_invert>
    1e2e:	a8 2e       	mov	r10, r24
    1e30:	a8 18       	sub	r10, r8
    1e32:	fb 2d       	mov	r31, r11
    1e34:	ff 77       	andi	r31, 0x7F	; 127
    1e36:	bf 2e       	mov	r11, r31
    1e38:	b6 fe       	sbrs	r11, 6
    1e3a:	0b c0       	rjmp	.+22     	; 0x1e52 <vfprintf+0x29a>
    1e3c:	2b 2d       	mov	r18, r11
    1e3e:	2e 7f       	andi	r18, 0xFE	; 254
    1e40:	a5 14       	cp	r10, r5
    1e42:	50 f4       	brcc	.+20     	; 0x1e58 <vfprintf+0x2a0>
    1e44:	b4 fe       	sbrs	r11, 4
    1e46:	0a c0       	rjmp	.+20     	; 0x1e5c <vfprintf+0x2a4>
    1e48:	b2 fc       	sbrc	r11, 2
    1e4a:	08 c0       	rjmp	.+16     	; 0x1e5c <vfprintf+0x2a4>
    1e4c:	2b 2d       	mov	r18, r11
    1e4e:	2e 7e       	andi	r18, 0xEE	; 238
    1e50:	05 c0       	rjmp	.+10     	; 0x1e5c <vfprintf+0x2a4>
    1e52:	7a 2c       	mov	r7, r10
    1e54:	2b 2d       	mov	r18, r11
    1e56:	03 c0       	rjmp	.+6      	; 0x1e5e <vfprintf+0x2a6>
    1e58:	7a 2c       	mov	r7, r10
    1e5a:	01 c0       	rjmp	.+2      	; 0x1e5e <vfprintf+0x2a6>
    1e5c:	75 2c       	mov	r7, r5
    1e5e:	24 ff       	sbrs	r18, 4
    1e60:	0d c0       	rjmp	.+26     	; 0x1e7c <vfprintf+0x2c4>
    1e62:	fe 01       	movw	r30, r28
    1e64:	ea 0d       	add	r30, r10
    1e66:	f1 1d       	adc	r31, r1
    1e68:	80 81       	ld	r24, Z
    1e6a:	80 33       	cpi	r24, 0x30	; 48
    1e6c:	11 f4       	brne	.+4      	; 0x1e72 <vfprintf+0x2ba>
    1e6e:	29 7e       	andi	r18, 0xE9	; 233
    1e70:	09 c0       	rjmp	.+18     	; 0x1e84 <vfprintf+0x2cc>
    1e72:	22 ff       	sbrs	r18, 2
    1e74:	06 c0       	rjmp	.+12     	; 0x1e82 <vfprintf+0x2ca>
    1e76:	73 94       	inc	r7
    1e78:	73 94       	inc	r7
    1e7a:	04 c0       	rjmp	.+8      	; 0x1e84 <vfprintf+0x2cc>
    1e7c:	82 2f       	mov	r24, r18
    1e7e:	86 78       	andi	r24, 0x86	; 134
    1e80:	09 f0       	breq	.+2      	; 0x1e84 <vfprintf+0x2cc>
    1e82:	73 94       	inc	r7
    1e84:	23 fd       	sbrc	r18, 3
    1e86:	12 c0       	rjmp	.+36     	; 0x1eac <vfprintf+0x2f4>
    1e88:	20 ff       	sbrs	r18, 0
    1e8a:	06 c0       	rjmp	.+12     	; 0x1e98 <vfprintf+0x2e0>
    1e8c:	5a 2c       	mov	r5, r10
    1e8e:	73 14       	cp	r7, r3
    1e90:	18 f4       	brcc	.+6      	; 0x1e98 <vfprintf+0x2e0>
    1e92:	53 0c       	add	r5, r3
    1e94:	57 18       	sub	r5, r7
    1e96:	73 2c       	mov	r7, r3
    1e98:	73 14       	cp	r7, r3
    1e9a:	60 f4       	brcc	.+24     	; 0x1eb4 <vfprintf+0x2fc>
    1e9c:	b7 01       	movw	r22, r14
    1e9e:	80 e2       	ldi	r24, 0x20	; 32
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	2c 87       	std	Y+12, r18	; 0x0c
    1ea4:	83 d0       	rcall	.+262    	; 0x1fac <fputc>
    1ea6:	73 94       	inc	r7
    1ea8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1eaa:	f6 cf       	rjmp	.-20     	; 0x1e98 <vfprintf+0x2e0>
    1eac:	73 14       	cp	r7, r3
    1eae:	10 f4       	brcc	.+4      	; 0x1eb4 <vfprintf+0x2fc>
    1eb0:	37 18       	sub	r3, r7
    1eb2:	01 c0       	rjmp	.+2      	; 0x1eb6 <vfprintf+0x2fe>
    1eb4:	31 2c       	mov	r3, r1
    1eb6:	24 ff       	sbrs	r18, 4
    1eb8:	11 c0       	rjmp	.+34     	; 0x1edc <vfprintf+0x324>
    1eba:	b7 01       	movw	r22, r14
    1ebc:	80 e3       	ldi	r24, 0x30	; 48
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	2c 87       	std	Y+12, r18	; 0x0c
    1ec2:	74 d0       	rcall	.+232    	; 0x1fac <fputc>
    1ec4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ec6:	22 ff       	sbrs	r18, 2
    1ec8:	16 c0       	rjmp	.+44     	; 0x1ef6 <vfprintf+0x33e>
    1eca:	21 ff       	sbrs	r18, 1
    1ecc:	03 c0       	rjmp	.+6      	; 0x1ed4 <vfprintf+0x31c>
    1ece:	88 e5       	ldi	r24, 0x58	; 88
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <vfprintf+0x320>
    1ed4:	88 e7       	ldi	r24, 0x78	; 120
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	b7 01       	movw	r22, r14
    1eda:	0c c0       	rjmp	.+24     	; 0x1ef4 <vfprintf+0x33c>
    1edc:	82 2f       	mov	r24, r18
    1ede:	86 78       	andi	r24, 0x86	; 134
    1ee0:	51 f0       	breq	.+20     	; 0x1ef6 <vfprintf+0x33e>
    1ee2:	21 fd       	sbrc	r18, 1
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <vfprintf+0x332>
    1ee6:	80 e2       	ldi	r24, 0x20	; 32
    1ee8:	01 c0       	rjmp	.+2      	; 0x1eec <vfprintf+0x334>
    1eea:	8b e2       	ldi	r24, 0x2B	; 43
    1eec:	27 fd       	sbrc	r18, 7
    1eee:	8d e2       	ldi	r24, 0x2D	; 45
    1ef0:	b7 01       	movw	r22, r14
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	5b d0       	rcall	.+182    	; 0x1fac <fputc>
    1ef6:	a5 14       	cp	r10, r5
    1ef8:	30 f4       	brcc	.+12     	; 0x1f06 <vfprintf+0x34e>
    1efa:	b7 01       	movw	r22, r14
    1efc:	80 e3       	ldi	r24, 0x30	; 48
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	55 d0       	rcall	.+170    	; 0x1fac <fputc>
    1f02:	5a 94       	dec	r5
    1f04:	f8 cf       	rjmp	.-16     	; 0x1ef6 <vfprintf+0x33e>
    1f06:	aa 94       	dec	r10
    1f08:	f4 01       	movw	r30, r8
    1f0a:	ea 0d       	add	r30, r10
    1f0c:	f1 1d       	adc	r31, r1
    1f0e:	80 81       	ld	r24, Z
    1f10:	b7 01       	movw	r22, r14
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	4b d0       	rcall	.+150    	; 0x1fac <fputc>
    1f16:	a1 10       	cpse	r10, r1
    1f18:	f6 cf       	rjmp	.-20     	; 0x1f06 <vfprintf+0x34e>
    1f1a:	33 20       	and	r3, r3
    1f1c:	09 f4       	brne	.+2      	; 0x1f20 <vfprintf+0x368>
    1f1e:	5d ce       	rjmp	.-838    	; 0x1bda <vfprintf+0x22>
    1f20:	b7 01       	movw	r22, r14
    1f22:	80 e2       	ldi	r24, 0x20	; 32
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	42 d0       	rcall	.+132    	; 0x1fac <fputc>
    1f28:	3a 94       	dec	r3
    1f2a:	f7 cf       	rjmp	.-18     	; 0x1f1a <vfprintf+0x362>
    1f2c:	f7 01       	movw	r30, r14
    1f2e:	86 81       	ldd	r24, Z+6	; 0x06
    1f30:	97 81       	ldd	r25, Z+7	; 0x07
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <vfprintf+0x380>
    1f34:	8f ef       	ldi	r24, 0xFF	; 255
    1f36:	9f ef       	ldi	r25, 0xFF	; 255
    1f38:	2c 96       	adiw	r28, 0x0c	; 12
    1f3a:	e2 e1       	ldi	r30, 0x12	; 18
    1f3c:	e3 c0       	rjmp	.+454    	; 0x2104 <__epilogue_restores__>

00001f3e <calloc>:
    1f3e:	0f 93       	push	r16
    1f40:	1f 93       	push	r17
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
    1f46:	86 9f       	mul	r24, r22
    1f48:	80 01       	movw	r16, r0
    1f4a:	87 9f       	mul	r24, r23
    1f4c:	10 0d       	add	r17, r0
    1f4e:	96 9f       	mul	r25, r22
    1f50:	10 0d       	add	r17, r0
    1f52:	11 24       	eor	r1, r1
    1f54:	c8 01       	movw	r24, r16
    1f56:	5d dc       	rcall	.-1862   	; 0x1812 <malloc>
    1f58:	ec 01       	movw	r28, r24
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	21 f0       	breq	.+8      	; 0x1f66 <calloc+0x28>
    1f5e:	a8 01       	movw	r20, r16
    1f60:	60 e0       	ldi	r22, 0x00	; 0
    1f62:	70 e0       	ldi	r23, 0x00	; 0
    1f64:	11 d0       	rcall	.+34     	; 0x1f88 <memset>
    1f66:	ce 01       	movw	r24, r28
    1f68:	df 91       	pop	r29
    1f6a:	cf 91       	pop	r28
    1f6c:	1f 91       	pop	r17
    1f6e:	0f 91       	pop	r16
    1f70:	08 95       	ret

00001f72 <strnlen_P>:
    1f72:	fc 01       	movw	r30, r24
    1f74:	05 90       	lpm	r0, Z+
    1f76:	61 50       	subi	r22, 0x01	; 1
    1f78:	70 40       	sbci	r23, 0x00	; 0
    1f7a:	01 10       	cpse	r0, r1
    1f7c:	d8 f7       	brcc	.-10     	; 0x1f74 <strnlen_P+0x2>
    1f7e:	80 95       	com	r24
    1f80:	90 95       	com	r25
    1f82:	8e 0f       	add	r24, r30
    1f84:	9f 1f       	adc	r25, r31
    1f86:	08 95       	ret

00001f88 <memset>:
    1f88:	dc 01       	movw	r26, r24
    1f8a:	01 c0       	rjmp	.+2      	; 0x1f8e <memset+0x6>
    1f8c:	6d 93       	st	X+, r22
    1f8e:	41 50       	subi	r20, 0x01	; 1
    1f90:	50 40       	sbci	r21, 0x00	; 0
    1f92:	e0 f7       	brcc	.-8      	; 0x1f8c <memset+0x4>
    1f94:	08 95       	ret

00001f96 <strnlen>:
    1f96:	fc 01       	movw	r30, r24
    1f98:	61 50       	subi	r22, 0x01	; 1
    1f9a:	70 40       	sbci	r23, 0x00	; 0
    1f9c:	01 90       	ld	r0, Z+
    1f9e:	01 10       	cpse	r0, r1
    1fa0:	d8 f7       	brcc	.-10     	; 0x1f98 <strnlen+0x2>
    1fa2:	80 95       	com	r24
    1fa4:	90 95       	com	r25
    1fa6:	8e 0f       	add	r24, r30
    1fa8:	9f 1f       	adc	r25, r31
    1faa:	08 95       	ret

00001fac <fputc>:
    1fac:	0f 93       	push	r16
    1fae:	1f 93       	push	r17
    1fb0:	cf 93       	push	r28
    1fb2:	df 93       	push	r29
    1fb4:	18 2f       	mov	r17, r24
    1fb6:	09 2f       	mov	r16, r25
    1fb8:	eb 01       	movw	r28, r22
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	81 fd       	sbrc	r24, 1
    1fbe:	03 c0       	rjmp	.+6      	; 0x1fc6 <fputc+0x1a>
    1fc0:	8f ef       	ldi	r24, 0xFF	; 255
    1fc2:	9f ef       	ldi	r25, 0xFF	; 255
    1fc4:	20 c0       	rjmp	.+64     	; 0x2006 <fputc+0x5a>
    1fc6:	82 ff       	sbrs	r24, 2
    1fc8:	10 c0       	rjmp	.+32     	; 0x1fea <fputc+0x3e>
    1fca:	4e 81       	ldd	r20, Y+6	; 0x06
    1fcc:	5f 81       	ldd	r21, Y+7	; 0x07
    1fce:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd0:	3d 81       	ldd	r19, Y+5	; 0x05
    1fd2:	42 17       	cp	r20, r18
    1fd4:	53 07       	cpc	r21, r19
    1fd6:	7c f4       	brge	.+30     	; 0x1ff6 <fputc+0x4a>
    1fd8:	e8 81       	ld	r30, Y
    1fda:	f9 81       	ldd	r31, Y+1	; 0x01
    1fdc:	9f 01       	movw	r18, r30
    1fde:	2f 5f       	subi	r18, 0xFF	; 255
    1fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe2:	39 83       	std	Y+1, r19	; 0x01
    1fe4:	28 83       	st	Y, r18
    1fe6:	10 83       	st	Z, r17
    1fe8:	06 c0       	rjmp	.+12     	; 0x1ff6 <fputc+0x4a>
    1fea:	e8 85       	ldd	r30, Y+8	; 0x08
    1fec:	f9 85       	ldd	r31, Y+9	; 0x09
    1fee:	81 2f       	mov	r24, r17
    1ff0:	09 95       	icall
    1ff2:	89 2b       	or	r24, r25
    1ff4:	29 f7       	brne	.-54     	; 0x1fc0 <fputc+0x14>
    1ff6:	2e 81       	ldd	r18, Y+6	; 0x06
    1ff8:	3f 81       	ldd	r19, Y+7	; 0x07
    1ffa:	2f 5f       	subi	r18, 0xFF	; 255
    1ffc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ffe:	3f 83       	std	Y+7, r19	; 0x07
    2000:	2e 83       	std	Y+6, r18	; 0x06
    2002:	81 2f       	mov	r24, r17
    2004:	90 2f       	mov	r25, r16
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	1f 91       	pop	r17
    200c:	0f 91       	pop	r16
    200e:	08 95       	ret

00002010 <__ultoa_invert>:
    2010:	fa 01       	movw	r30, r20
    2012:	aa 27       	eor	r26, r26
    2014:	28 30       	cpi	r18, 0x08	; 8
    2016:	51 f1       	breq	.+84     	; 0x206c <__ultoa_invert+0x5c>
    2018:	20 31       	cpi	r18, 0x10	; 16
    201a:	81 f1       	breq	.+96     	; 0x207c <__ultoa_invert+0x6c>
    201c:	e8 94       	clt
    201e:	6f 93       	push	r22
    2020:	6e 7f       	andi	r22, 0xFE	; 254
    2022:	6e 5f       	subi	r22, 0xFE	; 254
    2024:	7f 4f       	sbci	r23, 0xFF	; 255
    2026:	8f 4f       	sbci	r24, 0xFF	; 255
    2028:	9f 4f       	sbci	r25, 0xFF	; 255
    202a:	af 4f       	sbci	r26, 0xFF	; 255
    202c:	b1 e0       	ldi	r27, 0x01	; 1
    202e:	3e d0       	rcall	.+124    	; 0x20ac <__ultoa_invert+0x9c>
    2030:	b4 e0       	ldi	r27, 0x04	; 4
    2032:	3c d0       	rcall	.+120    	; 0x20ac <__ultoa_invert+0x9c>
    2034:	67 0f       	add	r22, r23
    2036:	78 1f       	adc	r23, r24
    2038:	89 1f       	adc	r24, r25
    203a:	9a 1f       	adc	r25, r26
    203c:	a1 1d       	adc	r26, r1
    203e:	68 0f       	add	r22, r24
    2040:	79 1f       	adc	r23, r25
    2042:	8a 1f       	adc	r24, r26
    2044:	91 1d       	adc	r25, r1
    2046:	a1 1d       	adc	r26, r1
    2048:	6a 0f       	add	r22, r26
    204a:	71 1d       	adc	r23, r1
    204c:	81 1d       	adc	r24, r1
    204e:	91 1d       	adc	r25, r1
    2050:	a1 1d       	adc	r26, r1
    2052:	20 d0       	rcall	.+64     	; 0x2094 <__ultoa_invert+0x84>
    2054:	09 f4       	brne	.+2      	; 0x2058 <__ultoa_invert+0x48>
    2056:	68 94       	set
    2058:	3f 91       	pop	r19
    205a:	2a e0       	ldi	r18, 0x0A	; 10
    205c:	26 9f       	mul	r18, r22
    205e:	11 24       	eor	r1, r1
    2060:	30 19       	sub	r19, r0
    2062:	30 5d       	subi	r19, 0xD0	; 208
    2064:	31 93       	st	Z+, r19
    2066:	de f6       	brtc	.-74     	; 0x201e <__ultoa_invert+0xe>
    2068:	cf 01       	movw	r24, r30
    206a:	08 95       	ret
    206c:	46 2f       	mov	r20, r22
    206e:	47 70       	andi	r20, 0x07	; 7
    2070:	40 5d       	subi	r20, 0xD0	; 208
    2072:	41 93       	st	Z+, r20
    2074:	b3 e0       	ldi	r27, 0x03	; 3
    2076:	0f d0       	rcall	.+30     	; 0x2096 <__ultoa_invert+0x86>
    2078:	c9 f7       	brne	.-14     	; 0x206c <__ultoa_invert+0x5c>
    207a:	f6 cf       	rjmp	.-20     	; 0x2068 <__ultoa_invert+0x58>
    207c:	46 2f       	mov	r20, r22
    207e:	4f 70       	andi	r20, 0x0F	; 15
    2080:	40 5d       	subi	r20, 0xD0	; 208
    2082:	4a 33       	cpi	r20, 0x3A	; 58
    2084:	18 f0       	brcs	.+6      	; 0x208c <__ultoa_invert+0x7c>
    2086:	49 5d       	subi	r20, 0xD9	; 217
    2088:	31 fd       	sbrc	r19, 1
    208a:	40 52       	subi	r20, 0x20	; 32
    208c:	41 93       	st	Z+, r20
    208e:	02 d0       	rcall	.+4      	; 0x2094 <__ultoa_invert+0x84>
    2090:	a9 f7       	brne	.-22     	; 0x207c <__ultoa_invert+0x6c>
    2092:	ea cf       	rjmp	.-44     	; 0x2068 <__ultoa_invert+0x58>
    2094:	b4 e0       	ldi	r27, 0x04	; 4
    2096:	a6 95       	lsr	r26
    2098:	97 95       	ror	r25
    209a:	87 95       	ror	r24
    209c:	77 95       	ror	r23
    209e:	67 95       	ror	r22
    20a0:	ba 95       	dec	r27
    20a2:	c9 f7       	brne	.-14     	; 0x2096 <__ultoa_invert+0x86>
    20a4:	00 97       	sbiw	r24, 0x00	; 0
    20a6:	61 05       	cpc	r22, r1
    20a8:	71 05       	cpc	r23, r1
    20aa:	08 95       	ret
    20ac:	9b 01       	movw	r18, r22
    20ae:	ac 01       	movw	r20, r24
    20b0:	0a 2e       	mov	r0, r26
    20b2:	06 94       	lsr	r0
    20b4:	57 95       	ror	r21
    20b6:	47 95       	ror	r20
    20b8:	37 95       	ror	r19
    20ba:	27 95       	ror	r18
    20bc:	ba 95       	dec	r27
    20be:	c9 f7       	brne	.-14     	; 0x20b2 <__ultoa_invert+0xa2>
    20c0:	62 0f       	add	r22, r18
    20c2:	73 1f       	adc	r23, r19
    20c4:	84 1f       	adc	r24, r20
    20c6:	95 1f       	adc	r25, r21
    20c8:	a0 1d       	adc	r26, r0
    20ca:	08 95       	ret

000020cc <__prologue_saves__>:
    20cc:	2f 92       	push	r2
    20ce:	3f 92       	push	r3
    20d0:	4f 92       	push	r4
    20d2:	5f 92       	push	r5
    20d4:	6f 92       	push	r6
    20d6:	7f 92       	push	r7
    20d8:	8f 92       	push	r8
    20da:	9f 92       	push	r9
    20dc:	af 92       	push	r10
    20de:	bf 92       	push	r11
    20e0:	cf 92       	push	r12
    20e2:	df 92       	push	r13
    20e4:	ef 92       	push	r14
    20e6:	ff 92       	push	r15
    20e8:	0f 93       	push	r16
    20ea:	1f 93       	push	r17
    20ec:	cf 93       	push	r28
    20ee:	df 93       	push	r29
    20f0:	cd b7       	in	r28, 0x3d	; 61
    20f2:	de b7       	in	r29, 0x3e	; 62
    20f4:	ca 1b       	sub	r28, r26
    20f6:	db 0b       	sbc	r29, r27
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	09 94       	ijmp

00002104 <__epilogue_restores__>:
    2104:	2a 88       	ldd	r2, Y+18	; 0x12
    2106:	39 88       	ldd	r3, Y+17	; 0x11
    2108:	48 88       	ldd	r4, Y+16	; 0x10
    210a:	5f 84       	ldd	r5, Y+15	; 0x0f
    210c:	6e 84       	ldd	r6, Y+14	; 0x0e
    210e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2110:	8c 84       	ldd	r8, Y+12	; 0x0c
    2112:	9b 84       	ldd	r9, Y+11	; 0x0b
    2114:	aa 84       	ldd	r10, Y+10	; 0x0a
    2116:	b9 84       	ldd	r11, Y+9	; 0x09
    2118:	c8 84       	ldd	r12, Y+8	; 0x08
    211a:	df 80       	ldd	r13, Y+7	; 0x07
    211c:	ee 80       	ldd	r14, Y+6	; 0x06
    211e:	fd 80       	ldd	r15, Y+5	; 0x05
    2120:	0c 81       	ldd	r16, Y+4	; 0x04
    2122:	1b 81       	ldd	r17, Y+3	; 0x03
    2124:	aa 81       	ldd	r26, Y+2	; 0x02
    2126:	b9 81       	ldd	r27, Y+1	; 0x01
    2128:	ce 0f       	add	r28, r30
    212a:	d1 1d       	adc	r29, r1
    212c:	0f b6       	in	r0, 0x3f	; 63
    212e:	f8 94       	cli
    2130:	de bf       	out	0x3e, r29	; 62
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	cd bf       	out	0x3d, r28	; 61
    2136:	ed 01       	movw	r28, r26
    2138:	08 95       	ret

0000213a <_exit>:
    213a:	f8 94       	cli

0000213c <__stop_program>:
    213c:	ff cf       	rjmp	.-2      	; 0x213c <__stop_program>
