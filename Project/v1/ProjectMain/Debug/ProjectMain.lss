
ProjectMain.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000015a  00800100  00001ee6  00001f7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ee6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  0080025a  0080025a  000020d4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000020d4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000318  00000000  00000000  00002130  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004055  00000000  00000000  00002448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000121f  00000000  00000000  0000649d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001835  00000000  00000000  000076bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000754  00000000  00000000  00008ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ea6  00000000  00000000  00009648  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002088  00000000  00000000  0000a4ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000448  00000000  00000000  0000c576  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b3 c1       	rjmp	.+870    	; 0x368 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c1       	rjmp	.+960    	; 0x3c6 <__vector_1>
       6:	00 00       	nop
       8:	ed c1       	rjmp	.+986    	; 0x3e4 <__vector_2>
       a:	00 00       	nop
       c:	fa c1       	rjmp	.+1012   	; 0x402 <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__bad_interrupt>
      12:	00 00       	nop
      14:	c5 c1       	rjmp	.+906    	; 0x3a0 <__bad_interrupt>
      16:	00 00       	nop
      18:	c3 c1       	rjmp	.+902    	; 0x3a0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c1 c1       	rjmp	.+898    	; 0x3a0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	bf c1       	rjmp	.+894    	; 0x3a0 <__bad_interrupt>
      22:	00 00       	nop
      24:	bd c1       	rjmp	.+890    	; 0x3a0 <__bad_interrupt>
      26:	00 00       	nop
      28:	bb c1       	rjmp	.+886    	; 0x3a0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	b9 c1       	rjmp	.+882    	; 0x3a0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b7 c1       	rjmp	.+878    	; 0x3a0 <__bad_interrupt>
      32:	00 00       	nop
      34:	b5 c1       	rjmp	.+874    	; 0x3a0 <__bad_interrupt>
      36:	00 00       	nop
      38:	b3 c1       	rjmp	.+870    	; 0x3a0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b1 c1       	rjmp	.+866    	; 0x3a0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	af c1       	rjmp	.+862    	; 0x3a0 <__bad_interrupt>
      42:	00 00       	nop
      44:	ad c1       	rjmp	.+858    	; 0x3a0 <__bad_interrupt>
      46:	00 00       	nop
      48:	ab c1       	rjmp	.+854    	; 0x3a0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	aa c1       	rjmp	.+852    	; 0x3a2 <__vector_19>
      4e:	00 00       	nop
      50:	a7 c1       	rjmp	.+846    	; 0x3a0 <__bad_interrupt>
      52:	00 00       	nop
      54:	a5 c1       	rjmp	.+842    	; 0x3a0 <__bad_interrupt>
      56:	00 00       	nop
      58:	a3 c1       	rjmp	.+838    	; 0x3a0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a1 c1       	rjmp	.+834    	; 0x3a0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	9f c1       	rjmp	.+830    	; 0x3a0 <__bad_interrupt>
      62:	00 00       	nop
      64:	9d c1       	rjmp	.+826    	; 0x3a0 <__bad_interrupt>
      66:	00 00       	nop
      68:	9b c1       	rjmp	.+822    	; 0x3a0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	99 c1       	rjmp	.+818    	; 0x3a0 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
	...
      78:	00 06       	cpc	r0, r16
      7a:	5f 5f       	subi	r21, 0xFF	; 255
      7c:	06 00       	.word	0x0006	; ????
      7e:	00 00       	nop
      80:	00 07       	cpc	r16, r16
      82:	07 00       	.word	0x0007	; ????
      84:	07 07       	cpc	r16, r23
      86:	00 00       	nop
      88:	14 7f       	andi	r17, 0xF4	; 244
      8a:	7f 14       	cp	r7, r15
      8c:	7f 7f       	andi	r23, 0xFF	; 255
      8e:	14 00       	.word	0x0014	; ????
      90:	24 2e       	mov	r2, r20
      92:	6b 6b       	ori	r22, 0xBB	; 187
      94:	3a 12       	cpse	r3, r26
      96:	00 00       	nop
      98:	46 66       	ori	r20, 0x66	; 102
      9a:	30 18       	sub	r3, r0
      9c:	0c 66       	ori	r16, 0x6C	; 108
      9e:	62 00       	.word	0x0062	; ????
      a0:	30 7a       	andi	r19, 0xA0	; 160
      a2:	4f 5d       	subi	r20, 0xDF	; 223
      a4:	37 7a       	andi	r19, 0xA7	; 167
      a6:	48 00       	.word	0x0048	; ????
      a8:	04 07       	cpc	r16, r20
      aa:	03 00       	.word	0x0003	; ????
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	00 1c       	adc	r0, r0
      b2:	3e 63       	ori	r19, 0x3E	; 62
      b4:	41 00       	.word	0x0041	; ????
      b6:	00 00       	nop
      b8:	00 41       	sbci	r16, 0x10	; 16
      ba:	63 3e       	cpi	r22, 0xE3	; 227
      bc:	1c 00       	.word	0x001c	; ????
      be:	00 00       	nop
      c0:	08 2a       	or	r0, r24
      c2:	3e 1c       	adc	r3, r14
      c4:	1c 3e       	cpi	r17, 0xEC	; 236
      c6:	2a 08       	sbc	r2, r10
      c8:	08 08       	sbc	r0, r8
      ca:	3e 3e       	cpi	r19, 0xEE	; 238
      cc:	08 08       	sbc	r0, r8
      ce:	00 00       	nop
      d0:	00 a0       	ldd	r0, Z+32	; 0x20
      d2:	e0 60       	ori	r30, 0x00	; 0
      d4:	00 00       	nop
      d6:	00 00       	nop
      d8:	08 08       	sbc	r0, r8
      da:	08 08       	sbc	r0, r8
      dc:	08 08       	sbc	r0, r8
      de:	00 00       	nop
      e0:	00 00       	nop
      e2:	60 60       	ori	r22, 0x00	; 0
      e4:	00 00       	nop
      e6:	00 00       	nop
      e8:	60 30       	cpi	r22, 0x00	; 0
      ea:	18 0c       	add	r1, r8
      ec:	06 03       	mulsu	r16, r22
      ee:	01 00       	.word	0x0001	; ????
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	59 4d       	sbci	r21, 0xD9	; 217
      f4:	7f 3e       	cpi	r23, 0xEF	; 239
      f6:	00 00       	nop
      f8:	42 42       	sbci	r20, 0x22	; 34
      fa:	7f 7f       	andi	r23, 0xFF	; 255
      fc:	40 40       	sbci	r20, 0x00	; 0
      fe:	00 00       	nop
     100:	62 73       	andi	r22, 0x32	; 50
     102:	59 49       	sbci	r21, 0x99	; 153
     104:	6f 66       	ori	r22, 0x6F	; 111
     106:	00 00       	nop
     108:	22 63       	ori	r18, 0x32	; 50
     10a:	49 49       	sbci	r20, 0x99	; 153
     10c:	7f 36       	cpi	r23, 0x6F	; 111
     10e:	00 00       	nop
     110:	18 1c       	adc	r1, r8
     112:	16 13       	cpse	r17, r22
     114:	7f 7f       	andi	r23, 0xFF	; 255
     116:	10 00       	.word	0x0010	; ????
     118:	27 67       	ori	r18, 0x77	; 119
     11a:	45 45       	sbci	r20, 0x55	; 85
     11c:	7d 39       	cpi	r23, 0x9D	; 157
     11e:	00 00       	nop
     120:	3c 7e       	andi	r19, 0xEC	; 236
     122:	4b 49       	sbci	r20, 0x9B	; 155
     124:	79 30       	cpi	r23, 0x09	; 9
     126:	00 00       	nop
     128:	03 63       	ori	r16, 0x33	; 51
     12a:	71 19       	sub	r23, r1
     12c:	0f 07       	cpc	r16, r31
     12e:	00 00       	nop
     130:	36 7f       	andi	r19, 0xF6	; 246
     132:	49 49       	sbci	r20, 0x99	; 153
     134:	7f 36       	cpi	r23, 0x6F	; 111
     136:	00 00       	nop
     138:	06 4f       	sbci	r16, 0xF6	; 246
     13a:	49 69       	ori	r20, 0x99	; 153
     13c:	3f 1e       	adc	r3, r31
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	6c 6c       	ori	r22, 0xCC	; 204
     144:	00 00       	nop
     146:	00 00       	nop
     148:	00 a0       	ldd	r0, Z+32	; 0x20
     14a:	ec 6c       	ori	r30, 0xCC	; 204
     14c:	00 00       	nop
     14e:	00 00       	nop
     150:	08 1c       	adc	r0, r8
     152:	36 63       	ori	r19, 0x36	; 54
     154:	41 00       	.word	0x0041	; ????
     156:	00 00       	nop
     158:	14 14       	cp	r1, r4
     15a:	14 14       	cp	r1, r4
     15c:	14 14       	cp	r1, r4
     15e:	00 00       	nop
     160:	00 41       	sbci	r16, 0x10	; 16
     162:	63 36       	cpi	r22, 0x63	; 99
     164:	1c 08       	sbc	r1, r12
     166:	00 00       	nop
     168:	02 03       	mulsu	r16, r18
     16a:	51 59       	subi	r21, 0x91	; 145
     16c:	0f 06       	cpc	r0, r31
     16e:	00 00       	nop
     170:	3e 7f       	andi	r19, 0xFE	; 254
     172:	41 5d       	subi	r20, 0xD1	; 209
     174:	5d 1f       	adc	r21, r29
     176:	1e 00       	.word	0x001e	; ????
     178:	7c 7e       	andi	r23, 0xEC	; 236
     17a:	13 13       	cpse	r17, r19
     17c:	7e 7c       	andi	r23, 0xCE	; 206
     17e:	00 00       	nop
     180:	41 7f       	andi	r20, 0xF1	; 241
     182:	7f 49       	sbci	r23, 0x9F	; 159
     184:	49 7f       	andi	r20, 0xF9	; 249
     186:	36 00       	.word	0x0036	; ????
     188:	1c 3e       	cpi	r17, 0xEC	; 236
     18a:	63 41       	sbci	r22, 0x13	; 19
     18c:	41 63       	ori	r20, 0x31	; 49
     18e:	22 00       	.word	0x0022	; ????
     190:	41 7f       	andi	r20, 0xF1	; 241
     192:	7f 41       	sbci	r23, 0x1F	; 31
     194:	63 7f       	andi	r22, 0xF3	; 243
     196:	1c 00       	.word	0x001c	; ????
     198:	41 7f       	andi	r20, 0xF1	; 241
     19a:	7f 49       	sbci	r23, 0x9F	; 159
     19c:	5d 41       	sbci	r21, 0x1D	; 29
     19e:	63 00       	.word	0x0063	; ????
     1a0:	41 7f       	andi	r20, 0xF1	; 241
     1a2:	7f 49       	sbci	r23, 0x9F	; 159
     1a4:	1d 01       	movw	r2, r26
     1a6:	03 00       	.word	0x0003	; ????
     1a8:	1c 3e       	cpi	r17, 0xEC	; 236
     1aa:	63 41       	sbci	r22, 0x13	; 19
     1ac:	51 73       	andi	r21, 0x31	; 49
     1ae:	72 00       	.word	0x0072	; ????
     1b0:	7f 7f       	andi	r23, 0xFF	; 255
     1b2:	08 08       	sbc	r0, r8
     1b4:	7f 7f       	andi	r23, 0xFF	; 255
     1b6:	00 00       	nop
     1b8:	00 41       	sbci	r16, 0x10	; 16
     1ba:	7f 7f       	andi	r23, 0xFF	; 255
     1bc:	41 00       	.word	0x0041	; ????
     1be:	00 00       	nop
     1c0:	30 70       	andi	r19, 0x00	; 0
     1c2:	40 41       	sbci	r20, 0x10	; 16
     1c4:	7f 3f       	cpi	r23, 0xFF	; 255
     1c6:	01 00       	.word	0x0001	; ????
     1c8:	41 7f       	andi	r20, 0xF1	; 241
     1ca:	7f 08       	sbc	r7, r15
     1cc:	1c 77       	andi	r17, 0x7C	; 124
     1ce:	63 00       	.word	0x0063	; ????
     1d0:	41 7f       	andi	r20, 0xF1	; 241
     1d2:	7f 41       	sbci	r23, 0x1F	; 31
     1d4:	40 60       	ori	r20, 0x00	; 0
     1d6:	70 00       	.word	0x0070	; ????
     1d8:	7f 7f       	andi	r23, 0xFF	; 255
     1da:	06 0c       	add	r0, r6
     1dc:	06 7f       	andi	r16, 0xF6	; 246
     1de:	7f 00       	.word	0x007f	; ????
     1e0:	7f 7f       	andi	r23, 0xFF	; 255
     1e2:	06 0c       	add	r0, r6
     1e4:	18 7f       	andi	r17, 0xF8	; 248
     1e6:	7f 00       	.word	0x007f	; ????
     1e8:	1c 3e       	cpi	r17, 0xEC	; 236
     1ea:	63 41       	sbci	r22, 0x13	; 19
     1ec:	63 3e       	cpi	r22, 0xE3	; 227
     1ee:	1c 00       	.word	0x001c	; ????
     1f0:	41 7f       	andi	r20, 0xF1	; 241
     1f2:	7f 49       	sbci	r23, 0x9F	; 159
     1f4:	09 0f       	add	r16, r25
     1f6:	06 00       	.word	0x0006	; ????
     1f8:	1e 3f       	cpi	r17, 0xFE	; 254
     1fa:	21 71       	andi	r18, 0x11	; 17
     1fc:	7f 5e       	subi	r23, 0xEF	; 239
     1fe:	00 00       	nop
     200:	41 7f       	andi	r20, 0xF1	; 241
     202:	7f 19       	sub	r23, r15
     204:	39 6f       	ori	r19, 0xF9	; 249
     206:	46 00       	.word	0x0046	; ????
     208:	26 67       	ori	r18, 0x76	; 118
     20a:	4d 59       	subi	r20, 0x9D	; 157
     20c:	7b 32       	cpi	r23, 0x2B	; 43
     20e:	00 00       	nop
     210:	03 41       	sbci	r16, 0x13	; 19
     212:	7f 7f       	andi	r23, 0xFF	; 255
     214:	41 03       	mulsu	r20, r17
     216:	00 00       	nop
     218:	7f 7f       	andi	r23, 0xFF	; 255
     21a:	40 40       	sbci	r20, 0x00	; 0
     21c:	7f 7f       	andi	r23, 0xFF	; 255
     21e:	00 00       	nop
     220:	1f 3f       	cpi	r17, 0xFF	; 255
     222:	60 60       	ori	r22, 0x00	; 0
     224:	3f 1f       	adc	r19, r31
     226:	00 00       	nop
     228:	7f 7f       	andi	r23, 0xFF	; 255
     22a:	30 18       	sub	r3, r0
     22c:	30 7f       	andi	r19, 0xF0	; 240
     22e:	7f 00       	.word	0x007f	; ????
     230:	63 77       	andi	r22, 0x73	; 115
     232:	1c 08       	sbc	r1, r12
     234:	1c 77       	andi	r17, 0x7C	; 124
     236:	63 00       	.word	0x0063	; ????
     238:	07 4f       	sbci	r16, 0xF7	; 247
     23a:	78 78       	andi	r23, 0x88	; 136
     23c:	4f 07       	cpc	r20, r31
     23e:	00 00       	nop
     240:	67 73       	andi	r22, 0x37	; 55
     242:	59 4d       	sbci	r21, 0xD9	; 217
     244:	47 63       	ori	r20, 0x37	; 55
     246:	71 00       	.word	0x0071	; ????
     248:	00 7f       	andi	r16, 0xF0	; 240
     24a:	7f 41       	sbci	r23, 0x1F	; 31
     24c:	41 00       	.word	0x0041	; ????
     24e:	00 00       	nop
     250:	01 03       	mulsu	r16, r17
     252:	06 0c       	add	r0, r6
     254:	18 30       	cpi	r17, 0x08	; 8
     256:	60 00       	.word	0x0060	; ????
     258:	00 41       	sbci	r16, 0x10	; 16
     25a:	41 7f       	andi	r20, 0xF1	; 241
     25c:	7f 00       	.word	0x007f	; ????
     25e:	00 00       	nop
     260:	08 0c       	add	r0, r8
     262:	06 03       	mulsu	r16, r22
     264:	06 0c       	add	r0, r6
     266:	08 00       	.word	0x0008	; ????
     268:	80 80       	ld	r8, Z
     26a:	80 80       	ld	r8, Z
     26c:	80 80       	ld	r8, Z
     26e:	80 80       	ld	r8, Z
     270:	00 00       	nop
     272:	03 07       	cpc	r16, r19
     274:	04 00       	.word	0x0004	; ????
     276:	00 00       	nop
     278:	20 74       	andi	r18, 0x40	; 64
     27a:	54 54       	subi	r21, 0x44	; 68
     27c:	3c 78       	andi	r19, 0x8C	; 140
     27e:	40 00       	.word	0x0040	; ????
     280:	41 3f       	cpi	r20, 0xF1	; 241
     282:	7f 44       	sbci	r23, 0x4F	; 79
     284:	44 7c       	andi	r20, 0xC4	; 196
     286:	38 00       	.word	0x0038	; ????
     288:	38 7c       	andi	r19, 0xC8	; 200
     28a:	44 44       	sbci	r20, 0x44	; 68
     28c:	6c 28       	or	r6, r12
     28e:	00 00       	nop
     290:	30 78       	andi	r19, 0x80	; 128
     292:	48 49       	sbci	r20, 0x98	; 152
     294:	3f 7f       	andi	r19, 0xFF	; 255
     296:	40 00       	.word	0x0040	; ????
     298:	38 7c       	andi	r19, 0xC8	; 200
     29a:	54 54       	subi	r21, 0x44	; 68
     29c:	5c 18       	sub	r5, r12
     29e:	00 00       	nop
     2a0:	48 7e       	andi	r20, 0xE8	; 232
     2a2:	7f 49       	sbci	r23, 0x9F	; 159
     2a4:	03 02       	muls	r16, r19
     2a6:	00 00       	nop
     2a8:	98 bc       	out	0x28, r9	; 40
     2aa:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2ac:	f8 7c       	andi	r31, 0xC8	; 200
     2ae:	04 00       	.word	0x0004	; ????
     2b0:	41 7f       	andi	r20, 0xF1	; 241
     2b2:	7f 08       	sbc	r7, r15
     2b4:	04 7c       	andi	r16, 0xC4	; 196
     2b6:	78 00       	.word	0x0078	; ????
     2b8:	00 44       	sbci	r16, 0x40	; 64
     2ba:	7d 7d       	andi	r23, 0xDD	; 221
     2bc:	40 00       	.word	0x0040	; ????
     2be:	00 00       	nop
     2c0:	40 c4       	rjmp	.+2176   	; 0xb42 <JOY_updatePosition+0x46>
     2c2:	84 fd       	sbrc	r24, 4
     2c4:	7d 00       	.word	0x007d	; ????
     2c6:	00 00       	nop
     2c8:	41 7f       	andi	r20, 0xF1	; 241
     2ca:	7f 10       	cpse	r7, r15
     2cc:	38 6c       	ori	r19, 0xC8	; 200
     2ce:	44 00       	.word	0x0044	; ????
     2d0:	00 41       	sbci	r16, 0x10	; 16
     2d2:	7f 7f       	andi	r23, 0xFF	; 255
     2d4:	40 00       	.word	0x0040	; ????
     2d6:	00 00       	nop
     2d8:	7c 7c       	andi	r23, 0xCC	; 204
     2da:	0c 18       	sub	r0, r12
     2dc:	0c 7c       	andi	r16, 0xCC	; 204
     2de:	78 00       	.word	0x0078	; ????
     2e0:	7c 7c       	andi	r23, 0xCC	; 204
     2e2:	04 04       	cpc	r0, r4
     2e4:	7c 78       	andi	r23, 0x8C	; 140
     2e6:	00 00       	nop
     2e8:	38 7c       	andi	r19, 0xC8	; 200
     2ea:	44 44       	sbci	r20, 0x44	; 68
     2ec:	7c 38       	cpi	r23, 0x8C	; 140
     2ee:	00 00       	nop
     2f0:	84 fc       	sbrc	r8, 4
     2f2:	f8 a4       	ldd	r15, Y+40	; 0x28
     2f4:	24 3c       	cpi	r18, 0xC4	; 196
     2f6:	18 00       	.word	0x0018	; ????
     2f8:	18 3c       	cpi	r17, 0xC8	; 200
     2fa:	24 a4       	ldd	r2, Z+44	; 0x2c
     2fc:	f8 fc       	.word	0xfcf8	; ????
     2fe:	84 00       	.word	0x0084	; ????
     300:	44 7c       	andi	r20, 0xC4	; 196
     302:	78 44       	sbci	r23, 0x48	; 72
     304:	1c 18       	sub	r1, r12
     306:	00 00       	nop
     308:	48 5c       	subi	r20, 0xC8	; 200
     30a:	54 54       	subi	r21, 0x44	; 68
     30c:	74 24       	eor	r7, r4
     30e:	00 00       	nop
     310:	00 04       	cpc	r0, r0
     312:	3e 7f       	andi	r19, 0xFE	; 254
     314:	44 24       	eor	r4, r4
     316:	00 00       	nop
     318:	3c 7c       	andi	r19, 0xCC	; 204
     31a:	40 40       	sbci	r20, 0x00	; 0
     31c:	3c 7c       	andi	r19, 0xCC	; 204
     31e:	40 00       	.word	0x0040	; ????
     320:	1c 3c       	cpi	r17, 0xCC	; 204
     322:	60 60       	ori	r22, 0x00	; 0
     324:	3c 1c       	adc	r3, r12
     326:	00 00       	nop
     328:	3c 7c       	andi	r19, 0xCC	; 204
     32a:	60 30       	cpi	r22, 0x00	; 0
     32c:	60 7c       	andi	r22, 0xC0	; 192
     32e:	3c 00       	.word	0x003c	; ????
     330:	44 6c       	ori	r20, 0xC4	; 196
     332:	38 10       	cpse	r3, r8
     334:	38 6c       	ori	r19, 0xC8	; 200
     336:	44 00       	.word	0x0044	; ????
     338:	9c bc       	out	0x2c, r9	; 44
     33a:	a0 a0       	ldd	r10, Z+32	; 0x20
     33c:	fc 7c       	andi	r31, 0xCC	; 204
     33e:	00 00       	nop
     340:	4c 64       	ori	r20, 0x4C	; 76
     342:	74 5c       	subi	r23, 0xC4	; 196
     344:	4c 64       	ori	r20, 0x4C	; 76
     346:	00 00       	nop
     348:	08 08       	sbc	r0, r8
     34a:	3e 77       	andi	r19, 0x7E	; 126
     34c:	41 41       	sbci	r20, 0x11	; 17
     34e:	00 00       	nop
     350:	00 00       	nop
     352:	00 77       	andi	r16, 0x70	; 112
     354:	77 00       	.word	0x0077	; ????
     356:	00 00       	nop
     358:	41 41       	sbci	r20, 0x11	; 17
     35a:	77 3e       	cpi	r23, 0xE7	; 231
     35c:	08 08       	sbc	r0, r8
     35e:	00 00       	nop
     360:	02 03       	mulsu	r16, r18
     362:	01 03       	mulsu	r16, r17
     364:	02 03       	mulsu	r16, r18
     366:	01 00       	.word	0x0001	; ????

00000368 <__ctors_end>:
     368:	11 24       	eor	r1, r1
     36a:	1f be       	out	0x3f, r1	; 63
     36c:	cf ef       	ldi	r28, 0xFF	; 255
     36e:	d4 e0       	ldi	r29, 0x04	; 4
     370:	de bf       	out	0x3e, r29	; 62
     372:	cd bf       	out	0x3d, r28	; 61

00000374 <__do_copy_data>:
     374:	12 e0       	ldi	r17, 0x02	; 2
     376:	a0 e0       	ldi	r26, 0x00	; 0
     378:	b1 e0       	ldi	r27, 0x01	; 1
     37a:	e6 ee       	ldi	r30, 0xE6	; 230
     37c:	fe e1       	ldi	r31, 0x1E	; 30
     37e:	02 c0       	rjmp	.+4      	; 0x384 <__do_copy_data+0x10>
     380:	05 90       	lpm	r0, Z+
     382:	0d 92       	st	X+, r0
     384:	aa 35       	cpi	r26, 0x5A	; 90
     386:	b1 07       	cpc	r27, r17
     388:	d9 f7       	brne	.-10     	; 0x380 <__do_copy_data+0xc>

0000038a <__do_clear_bss>:
     38a:	22 e0       	ldi	r18, 0x02	; 2
     38c:	aa e5       	ldi	r26, 0x5A	; 90
     38e:	b2 e0       	ldi	r27, 0x02	; 2
     390:	01 c0       	rjmp	.+2      	; 0x394 <.do_clear_bss_start>

00000392 <.do_clear_bss_loop>:
     392:	1d 92       	st	X+, r1

00000394 <.do_clear_bss_start>:
     394:	aa 38       	cpi	r26, 0x8A	; 138
     396:	b2 07       	cpc	r27, r18
     398:	e1 f7       	brne	.-8      	; 0x392 <.do_clear_bss_loop>
     39a:	81 d0       	rcall	.+258    	; 0x49e <main>
     39c:	0c 94 71 0f 	jmp	0x1ee2	; 0x1ee2 <_exit>

000003a0 <__bad_interrupt>:
     3a0:	2f ce       	rjmp	.-930    	; 0x0 <__vectors>

000003a2 <__vector_19>:
		break;
	}

	//printf("JOY: %s, X:%d, Y: %d \t\t SLI_l:%d, SLI_r:%d \t l_Btn: %d, r_Btn: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per, currentSliPosition.L_per, currentSliPosition.R_per, leftButton, rightButton);
	//printf("JOY: %s, X:%d, Y: %d\n", dir, currentJoyPosition.X_per, currentJoyPosition.Y_per);
}
     3a2:	1f 92       	push	r1
     3a4:	0f 92       	push	r0
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	0f 92       	push	r0
     3aa:	11 24       	eor	r1, r1
     3ac:	8f 93       	push	r24
     3ae:	8c b1       	in	r24, 0x0c	; 12
     3b0:	80 93 7a 02 	sts	0x027A, r24
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	80 93 65 02 	sts	0x0265, r24
     3ba:	8f 91       	pop	r24
     3bc:	0f 90       	pop	r0
     3be:	0f be       	out	0x3f, r0	; 63
     3c0:	0f 90       	pop	r0
     3c2:	1f 90       	pop	r1
     3c4:	18 95       	reti

000003c6 <__vector_1>:
     3c6:	1f 92       	push	r1
     3c8:	0f 92       	push	r0
     3ca:	0f b6       	in	r0, 0x3f	; 63
     3cc:	0f 92       	push	r0
     3ce:	11 24       	eor	r1, r1
     3d0:	8f 93       	push	r24
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	80 93 64 02 	sts	0x0264, r24
     3d8:	8f 91       	pop	r24
     3da:	0f 90       	pop	r0
     3dc:	0f be       	out	0x3f, r0	; 63
     3de:	0f 90       	pop	r0
     3e0:	1f 90       	pop	r1
     3e2:	18 95       	reti

000003e4 <__vector_2>:
     3e4:	1f 92       	push	r1
     3e6:	0f 92       	push	r0
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	0f 92       	push	r0
     3ec:	11 24       	eor	r1, r1
     3ee:	8f 93       	push	r24
     3f0:	81 e0       	ldi	r24, 0x01	; 1
     3f2:	80 93 63 02 	sts	0x0263, r24
     3f6:	8f 91       	pop	r24
     3f8:	0f 90       	pop	r0
     3fa:	0f be       	out	0x3f, r0	; 63
     3fc:	0f 90       	pop	r0
     3fe:	1f 90       	pop	r1
     400:	18 95       	reti

00000402 <__vector_3>:
     402:	1f 92       	push	r1
     404:	0f 92       	push	r0
     406:	0f b6       	in	r0, 0x3f	; 63
     408:	0f 92       	push	r0
     40a:	11 24       	eor	r1, r1
     40c:	8f 93       	push	r24
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	80 93 62 02 	sts	0x0262, r24
     414:	8f 91       	pop	r24
     416:	0f 90       	pop	r0
     418:	0f be       	out	0x3f, r0	; 63
     41a:	0f 90       	pop	r0
     41c:	1f 90       	pop	r1
     41e:	18 95       	reti

00000420 <init>:
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	1f e1       	ldi	r17, 0x1F	; 31
     42a:	e1 2e       	mov	r14, r17
     42c:	f1 2c       	mov	r15, r1
     42e:	00 e0       	ldi	r16, 0x00	; 0
     430:	10 e0       	ldi	r17, 0x00	; 0
     432:	20 e0       	ldi	r18, 0x00	; 0
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	4b e4       	ldi	r20, 0x4B	; 75
     438:	50 e0       	ldi	r21, 0x00	; 0
     43a:	60 e8       	ldi	r22, 0x80	; 128
     43c:	75 e2       	ldi	r23, 0x25	; 37
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	0e 94 96 0a 	call	0x152c	; 0x152c <uartInit>
     446:	86 e4       	ldi	r24, 0x46	; 70
     448:	91 e0       	ldi	r25, 0x01	; 1
     44a:	0e 94 83 0c 	call	0x1906	; 0x1906 <puts>
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	29 d2       	rcall	.+1106   	; 0x8a4 <enableXMEM>
     452:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <SLI_init>
     456:	38 d2       	rcall	.+1136   	; 0x8c8 <JOY_init>
     458:	fb d6       	rcall	.+3574   	; 0x1250 <OLED_init>
     45a:	0e 94 6d 0a 	call	0x14da	; 0x14da <SPI_init>
     45e:	2b d4       	rcall	.+2134   	; 0xcb6 <MCP2515_init>
     460:	7e d0       	rcall	.+252    	; 0x55e <CAN_init>
     462:	8b b7       	in	r24, 0x3b	; 59
     464:	80 64       	ori	r24, 0x40	; 64
     466:	8b bf       	out	0x3b, r24	; 59
     468:	85 b7       	in	r24, 0x35	; 53
     46a:	82 60       	ori	r24, 0x02	; 2
     46c:	85 bf       	out	0x35, r24	; 53
     46e:	85 b7       	in	r24, 0x35	; 53
     470:	8e 7f       	andi	r24, 0xFE	; 254
     472:	85 bf       	out	0x35, r24	; 53
     474:	8b 98       	cbi	0x11, 3	; 17
     476:	93 9a       	sbi	0x12, 3	; 18
     478:	8b b7       	in	r24, 0x3b	; 59
     47a:	80 68       	ori	r24, 0x80	; 128
     47c:	8b bf       	out	0x3b, r24	; 59
     47e:	85 b7       	in	r24, 0x35	; 53
     480:	88 60       	ori	r24, 0x08	; 8
     482:	85 bf       	out	0x35, r24	; 53
     484:	85 b7       	in	r24, 0x35	; 53
     486:	8b 7f       	andi	r24, 0xFB	; 251
     488:	85 bf       	out	0x35, r24	; 53
     48a:	32 98       	cbi	0x06, 2	; 6
     48c:	3a 98       	cbi	0x07, 2	; 7
     48e:	b8 98       	cbi	0x17, 0	; 23
     490:	c0 98       	cbi	0x18, 0	; 24
     492:	78 94       	sei
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	ff 90       	pop	r15
     49a:	ef 90       	pop	r14
     49c:	08 95       	ret

0000049e <main>:
/*
=======================MAIN FUNCTION=========================
*/

int main(void)
{
     49e:	cf 93       	push	r28
     4a0:	df 93       	push	r29
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	a1 97       	sbiw	r28, 0x21	; 33
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
	
	init();
     4b2:	b6 df       	rcall	.-148    	; 0x420 <init>
		
	OLED_updateScreen();
     4b4:	52 d7       	rcall	.+3748   	; 0x135a <OLED_updateScreen>
	saveToAddress(0x1fff, 0xff);
     4b6:	6f ef       	ldi	r22, 0xFF	; 255
     4b8:	8f ef       	ldi	r24, 0xFF	; 255
     4ba:	9f e1       	ldi	r25, 0x1F	; 31
     4bc:	02 d2       	rcall	.+1028   	; 0x8c2 <saveToAddress>
	saveToAddress(0x1fc0, 0x99);
     4be:	69 e9       	ldi	r22, 0x99	; 153
     4c0:	80 ec       	ldi	r24, 0xC0	; 192
     4c2:	9f e1       	ldi	r25, 0x1F	; 31
     4c4:	fe d1       	rcall	.+1020   	; 0x8c2 <saveToAddress>
	OLED_updateScreen();
     4c6:	49 d7       	rcall	.+3730   	; 0x135a <OLED_updateScreen>

	OLED_goto(0,0);
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	6a d6       	rcall	.+3284   	; 0x11a6 <OLED_goto>
	OLED_printString("I'm alive");
     4d2:	8f e7       	ldi	r24, 0x7F	; 127
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	95 d7       	rcall	.+3882   	; 0x1402 <OLED_printString>
	
	
	
    while(1)
    {
		currPos = JOY_getPosition();
     4d8:	0a e5       	ldi	r16, 0x5A	; 90
     4da:	12 e0       	ldi	r17, 0x02	; 2
		
		message2send.id = 23;
     4dc:	0f 2e       	mov	r0, r31
     4de:	f7 e1       	ldi	r31, 0x17	; 23
     4e0:	ef 2e       	mov	r14, r31
     4e2:	f1 2c       	mov	r15, r1
     4e4:	f0 2d       	mov	r31, r0
		message2send.length = 1;
     4e6:	dd 24       	eor	r13, r13
     4e8:	d3 94       	inc	r13
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     4ea:	0f 2e       	mov	r0, r31
     4ec:	fb e0       	ldi	r31, 0x0B	; 11
     4ee:	cf 2e       	mov	r12, r31
     4f0:	f0 2d       	mov	r31, r0
	
	
	
    while(1)
    {
		currPos = JOY_getPosition();
     4f2:	6d d3       	rcall	.+1754   	; 0xbce <JOY_getPosition>
     4f4:	f8 01       	movw	r30, r16
     4f6:	20 83       	st	Z, r18
     4f8:	31 83       	std	Z+1, r19	; 0x01
     4fa:	42 83       	std	Z+2, r20	; 0x02
     4fc:	53 83       	std	Z+3, r21	; 0x03
     4fe:	64 83       	std	Z+4, r22	; 0x04
     500:	75 83       	std	Z+5, r23	; 0x05
     502:	86 83       	std	Z+6, r24	; 0x06
     504:	97 83       	std	Z+7, r25	; 0x07
		
		message2send.id = 23;
     506:	fa 82       	std	Y+2, r15	; 0x02
     508:	e9 82       	std	Y+1, r14	; 0x01
		message2send.length = 1;
     50a:	db 82       	std	Y+3, r13	; 0x03
		message2send.data[0] = currPos.X_abs;
     50c:	2c 83       	std	Y+4, r18	; 0x04
		
		CAN_sendMessage(&message2send, 0);
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	ce 01       	movw	r24, r28
     512:	01 96       	adiw	r24, 0x01	; 1
     514:	3b d0       	rcall	.+118    	; 0x58c <CAN_sendMessage>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 ef       	ldi	r25, 0xF0	; 240
     51a:	01 97       	sbiw	r24, 0x01	; 1
     51c:	f1 f7       	brne	.-4      	; 0x51a <__stack+0x1b>
		_delay_ms(50);

		if(activateMenuFlag)
     51e:	80 91 63 02 	lds	r24, 0x0263
     522:	81 11       	cpse	r24, r1
		{
			MENU_activate();
     524:	32 d6       	rcall	.+3172   	; 0x118a <MENU_activate>
		}

		if(SPIreceivedFlag)
     526:	80 91 62 02 	lds	r24, 0x0262
     52a:	88 23       	and	r24, r24
     52c:	11 f3       	breq	.-60     	; 0x4f2 <main+0x54>
		{
			
			uint8_t receiveBufferStatus;
			// check for message reception
			if(receiveBufferStatus = 0x03 & MCP2515_read(SS_CAN_CONTROLLER, MCP_CANINTF))
     52e:	6c e2       	ldi	r22, 0x2C	; 44
     530:	80 e0       	ldi	r24, 0x00	; 0
     532:	aa d3       	rcall	.+1876   	; 0xc88 <MCP2515_read>
     534:	83 70       	andi	r24, 0x03	; 3
     536:	e9 f2       	breq	.-70     	; 0x4f2 <main+0x54>
			{
				struct can_message receivedMessage;
				receivedMessage = CAN_receiveMessage(receiveBufferStatus);
     538:	68 2f       	mov	r22, r24
     53a:	ce 01       	movw	r24, r28
     53c:	47 96       	adiw	r24, 0x17	; 23
     53e:	8f d0       	rcall	.+286    	; 0x65e <CAN_receiveMessage>
     540:	fe 01       	movw	r30, r28
     542:	77 96       	adiw	r30, 0x17	; 23
     544:	de 01       	movw	r26, r28
     546:	1c 96       	adiw	r26, 0x0c	; 12
     548:	8c 2d       	mov	r24, r12
     54a:	01 90       	ld	r0, Z+
     54c:	0d 92       	st	X+, r0
     54e:	8a 95       	dec	r24
     550:	e1 f7       	brne	.-8      	; 0x54a <__stack+0x4b>

				CAN_printMessage(&receivedMessage);
     552:	ce 01       	movw	r24, r28
     554:	0c 96       	adiw	r24, 0x0c	; 12
     556:	4c d1       	rcall	.+664    	; 0x7f0 <CAN_printMessage>
			
				SPIreceivedFlag = 0;
     558:	10 92 62 02 	sts	0x0262, r1
     55c:	ca cf       	rjmp	.-108    	; 0x4f2 <main+0x54>

0000055e <CAN_init>:
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
     566:	43 e0       	ldi	r20, 0x03	; 3
     568:	6b e2       	ldi	r22, 0x2B	; 43
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	af d3       	rcall	.+1886   	; 0xcce <MCP2515_write>
     570:	40 e6       	ldi	r20, 0x60	; 96
     572:	60 e6       	ldi	r22, 0x60	; 96
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	aa d3       	rcall	.+1876   	; 0xcce <MCP2515_write>
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	40 e8       	ldi	r20, 0x80	; 128
     57e:	6f e0       	ldi	r22, 0x0F	; 15
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	b7 d3       	rcall	.+1902   	; 0xcf4 <MCP2515_bitModify>
     586:	df 91       	pop	r29
     588:	cf 91       	pop	r28
     58a:	08 95       	ret

0000058c <CAN_sendMessage>:
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
     594:	27 97       	sbiw	r28, 0x07	; 7
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
     5a0:	9e 83       	std	Y+6, r25	; 0x06
     5a2:	8d 83       	std	Y+5, r24	; 0x05
     5a4:	6f 83       	std	Y+7, r22	; 0x07
     5a6:	8f 81       	ldd	r24, Y+7	; 0x07
     5a8:	88 2f       	mov	r24, r24
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	00 97       	sbiw	r24, 0x00	; 0
     5ae:	09 f0       	breq	.+2      	; 0x5b2 <CAN_sendMessage+0x26>
     5b0:	4d c0       	rjmp	.+154    	; 0x64c <CAN_sendMessage+0xc0>
     5b2:	8d 81       	ldd	r24, Y+5	; 0x05
     5b4:	9e 81       	ldd	r25, Y+6	; 0x06
     5b6:	fc 01       	movw	r30, r24
     5b8:	80 81       	ld	r24, Z
     5ba:	91 81       	ldd	r25, Z+1	; 0x01
     5bc:	9c 83       	std	Y+4, r25	; 0x04
     5be:	8b 83       	std	Y+3, r24	; 0x03
     5c0:	8b 81       	ldd	r24, Y+3	; 0x03
     5c2:	82 95       	swap	r24
     5c4:	88 0f       	add	r24, r24
     5c6:	80 7e       	andi	r24, 0xE0	; 224
     5c8:	48 2f       	mov	r20, r24
     5ca:	62 e3       	ldi	r22, 0x32	; 50
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	7e d3       	rcall	.+1788   	; 0xcce <MCP2515_write>
     5d2:	8b 81       	ldd	r24, Y+3	; 0x03
     5d4:	9c 81       	ldd	r25, Y+4	; 0x04
     5d6:	96 95       	lsr	r25
     5d8:	87 95       	ror	r24
     5da:	96 95       	lsr	r25
     5dc:	87 95       	ror	r24
     5de:	96 95       	lsr	r25
     5e0:	87 95       	ror	r24
     5e2:	48 2f       	mov	r20, r24
     5e4:	61 e3       	ldi	r22, 0x31	; 49
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	71 d3       	rcall	.+1762   	; 0xcce <MCP2515_write>
     5ec:	8d 81       	ldd	r24, Y+5	; 0x05
     5ee:	9e 81       	ldd	r25, Y+6	; 0x06
     5f0:	fc 01       	movw	r30, r24
     5f2:	82 81       	ldd	r24, Z+2	; 0x02
     5f4:	48 2f       	mov	r20, r24
     5f6:	65 e3       	ldi	r22, 0x35	; 53
     5f8:	80 e0       	ldi	r24, 0x00	; 0
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	68 d3       	rcall	.+1744   	; 0xcce <MCP2515_write>
     5fe:	86 e3       	ldi	r24, 0x36	; 54
     600:	89 83       	std	Y+1, r24	; 0x01
     602:	1a 82       	std	Y+2, r1	; 0x02
     604:	15 c0       	rjmp	.+42     	; 0x630 <CAN_sendMessage+0xa4>
     606:	8a 81       	ldd	r24, Y+2	; 0x02
     608:	88 2f       	mov	r24, r24
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	2d 81       	ldd	r18, Y+5	; 0x05
     60e:	3e 81       	ldd	r19, Y+6	; 0x06
     610:	82 0f       	add	r24, r18
     612:	93 1f       	adc	r25, r19
     614:	03 96       	adiw	r24, 0x03	; 3
     616:	fc 01       	movw	r30, r24
     618:	80 81       	ld	r24, Z
     61a:	48 2f       	mov	r20, r24
     61c:	69 81       	ldd	r22, Y+1	; 0x01
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	55 d3       	rcall	.+1706   	; 0xcce <MCP2515_write>
     624:	89 81       	ldd	r24, Y+1	; 0x01
     626:	8f 5f       	subi	r24, 0xFF	; 255
     628:	89 83       	std	Y+1, r24	; 0x01
     62a:	8a 81       	ldd	r24, Y+2	; 0x02
     62c:	8f 5f       	subi	r24, 0xFF	; 255
     62e:	8a 83       	std	Y+2, r24	; 0x02
     630:	8d 81       	ldd	r24, Y+5	; 0x05
     632:	9e 81       	ldd	r25, Y+6	; 0x06
     634:	fc 01       	movw	r30, r24
     636:	92 81       	ldd	r25, Z+2	; 0x02
     638:	8a 81       	ldd	r24, Y+2	; 0x02
     63a:	89 17       	cp	r24, r25
     63c:	20 f3       	brcs	.-56     	; 0x606 <CAN_sendMessage+0x7a>
     63e:	2f ef       	ldi	r18, 0xFF	; 255
     640:	48 e0       	ldi	r20, 0x08	; 8
     642:	60 e3       	ldi	r22, 0x30	; 48
     644:	80 e0       	ldi	r24, 0x00	; 0
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	55 d3       	rcall	.+1706   	; 0xcf4 <MCP2515_bitModify>
     64a:	00 00       	nop
     64c:	27 96       	adiw	r28, 0x07	; 7
     64e:	0f b6       	in	r0, 0x3f	; 63
     650:	f8 94       	cli
     652:	de bf       	out	0x3e, r29	; 62
     654:	0f be       	out	0x3f, r0	; 63
     656:	cd bf       	out	0x3d, r28	; 61
     658:	df 91       	pop	r29
     65a:	cf 91       	pop	r28
     65c:	08 95       	ret

0000065e <CAN_receiveMessage>:
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	cd b7       	in	r28, 0x3d	; 61
     668:	de b7       	in	r29, 0x3e	; 62
     66a:	61 97       	sbiw	r28, 0x11	; 17
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	f8 94       	cli
     670:	de bf       	out	0x3e, r29	; 62
     672:	0f be       	out	0x3f, r0	; 63
     674:	cd bf       	out	0x3d, r28	; 61
     676:	98 8b       	std	Y+16, r25	; 0x10
     678:	8f 87       	std	Y+15, r24	; 0x0f
     67a:	69 8b       	std	Y+17, r22	; 0x11
     67c:	89 89       	ldd	r24, Y+17	; 0x11
     67e:	88 2f       	mov	r24, r24
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	82 30       	cpi	r24, 0x02	; 2
     684:	91 05       	cpc	r25, r1
     686:	09 f4       	brne	.+2      	; 0x68a <CAN_receiveMessage+0x2c>
     688:	57 c0       	rjmp	.+174    	; 0x738 <CAN_receiveMessage+0xda>
     68a:	83 30       	cpi	r24, 0x03	; 3
     68c:	91 05       	cpc	r25, r1
     68e:	21 f0       	breq	.+8      	; 0x698 <CAN_receiveMessage+0x3a>
     690:	81 30       	cpi	r24, 0x01	; 1
     692:	91 05       	cpc	r25, r1
     694:	09 f0       	breq	.+2      	; 0x698 <CAN_receiveMessage+0x3a>
     696:	9f c0       	rjmp	.+318    	; 0x7d6 <CAN_receiveMessage+0x178>
     698:	61 e6       	ldi	r22, 0x61	; 97
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	f4 d2       	rcall	.+1512   	; 0xc88 <MCP2515_read>
     6a0:	88 2f       	mov	r24, r24
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	9d 83       	std	Y+5, r25	; 0x05
     6a6:	8c 83       	std	Y+4, r24	; 0x04
     6a8:	8c 81       	ldd	r24, Y+4	; 0x04
     6aa:	9d 81       	ldd	r25, Y+5	; 0x05
     6ac:	8c 01       	movw	r16, r24
     6ae:	00 0f       	add	r16, r16
     6b0:	11 1f       	adc	r17, r17
     6b2:	00 0f       	add	r16, r16
     6b4:	11 1f       	adc	r17, r17
     6b6:	00 0f       	add	r16, r16
     6b8:	11 1f       	adc	r17, r17
     6ba:	62 e6       	ldi	r22, 0x62	; 98
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	e3 d2       	rcall	.+1478   	; 0xc88 <MCP2515_read>
     6c2:	82 95       	swap	r24
     6c4:	86 95       	lsr	r24
     6c6:	87 70       	andi	r24, 0x07	; 7
     6c8:	88 2f       	mov	r24, r24
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	80 2b       	or	r24, r16
     6ce:	91 2b       	or	r25, r17
     6d0:	9d 83       	std	Y+5, r25	; 0x05
     6d2:	8c 83       	std	Y+4, r24	; 0x04
     6d4:	65 e6       	ldi	r22, 0x65	; 101
     6d6:	80 e0       	ldi	r24, 0x00	; 0
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	d6 d2       	rcall	.+1452   	; 0xc88 <MCP2515_read>
     6dc:	8e 83       	std	Y+6, r24	; 0x06
     6de:	86 e6       	ldi	r24, 0x66	; 102
     6e0:	89 83       	std	Y+1, r24	; 0x01
     6e2:	1a 82       	std	Y+2, r1	; 0x02
     6e4:	14 c0       	rjmp	.+40     	; 0x70e <CAN_receiveMessage+0xb0>
     6e6:	8a 81       	ldd	r24, Y+2	; 0x02
     6e8:	08 2f       	mov	r16, r24
     6ea:	10 e0       	ldi	r17, 0x00	; 0
     6ec:	69 81       	ldd	r22, Y+1	; 0x01
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	ca d2       	rcall	.+1428   	; 0xc88 <MCP2515_read>
     6f4:	28 2f       	mov	r18, r24
     6f6:	ce 01       	movw	r24, r28
     6f8:	07 96       	adiw	r24, 0x07	; 7
     6fa:	80 0f       	add	r24, r16
     6fc:	91 1f       	adc	r25, r17
     6fe:	fc 01       	movw	r30, r24
     700:	20 83       	st	Z, r18
     702:	89 81       	ldd	r24, Y+1	; 0x01
     704:	8f 5f       	subi	r24, 0xFF	; 255
     706:	89 83       	std	Y+1, r24	; 0x01
     708:	8a 81       	ldd	r24, Y+2	; 0x02
     70a:	8f 5f       	subi	r24, 0xFF	; 255
     70c:	8a 83       	std	Y+2, r24	; 0x02
     70e:	9e 81       	ldd	r25, Y+6	; 0x06
     710:	8a 81       	ldd	r24, Y+2	; 0x02
     712:	89 17       	cp	r24, r25
     714:	40 f3       	brcs	.-48     	; 0x6e6 <CAN_receiveMessage+0x88>
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	41 e0       	ldi	r20, 0x01	; 1
     71a:	6c e2       	ldi	r22, 0x2C	; 44
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	e9 d2       	rcall	.+1490   	; 0xcf4 <MCP2515_bitModify>
     722:	8f 85       	ldd	r24, Y+15	; 0x0f
     724:	98 89       	ldd	r25, Y+16	; 0x10
     726:	2b e0       	ldi	r18, 0x0B	; 11
     728:	fe 01       	movw	r30, r28
     72a:	34 96       	adiw	r30, 0x04	; 4
     72c:	dc 01       	movw	r26, r24
     72e:	01 90       	ld	r0, Z+
     730:	0d 92       	st	X+, r0
     732:	2a 95       	dec	r18
     734:	e1 f7       	brne	.-8      	; 0x72e <CAN_receiveMessage+0xd0>
     736:	4f c0       	rjmp	.+158    	; 0x7d6 <CAN_receiveMessage+0x178>
     738:	61 e7       	ldi	r22, 0x71	; 113
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	a4 d2       	rcall	.+1352   	; 0xc88 <MCP2515_read>
     740:	88 2f       	mov	r24, r24
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	9d 83       	std	Y+5, r25	; 0x05
     746:	8c 83       	std	Y+4, r24	; 0x04
     748:	8c 81       	ldd	r24, Y+4	; 0x04
     74a:	9d 81       	ldd	r25, Y+5	; 0x05
     74c:	8c 01       	movw	r16, r24
     74e:	00 0f       	add	r16, r16
     750:	11 1f       	adc	r17, r17
     752:	00 0f       	add	r16, r16
     754:	11 1f       	adc	r17, r17
     756:	00 0f       	add	r16, r16
     758:	11 1f       	adc	r17, r17
     75a:	62 e7       	ldi	r22, 0x72	; 114
     75c:	80 e0       	ldi	r24, 0x00	; 0
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	93 d2       	rcall	.+1318   	; 0xc88 <MCP2515_read>
     762:	82 95       	swap	r24
     764:	86 95       	lsr	r24
     766:	87 70       	andi	r24, 0x07	; 7
     768:	88 2f       	mov	r24, r24
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	80 2b       	or	r24, r16
     76e:	91 2b       	or	r25, r17
     770:	9d 83       	std	Y+5, r25	; 0x05
     772:	8c 83       	std	Y+4, r24	; 0x04
     774:	65 e7       	ldi	r22, 0x75	; 117
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	86 d2       	rcall	.+1292   	; 0xc88 <MCP2515_read>
     77c:	8e 83       	std	Y+6, r24	; 0x06
     77e:	86 e7       	ldi	r24, 0x76	; 118
     780:	89 83       	std	Y+1, r24	; 0x01
     782:	1b 82       	std	Y+3, r1	; 0x03
     784:	14 c0       	rjmp	.+40     	; 0x7ae <CAN_receiveMessage+0x150>
     786:	8b 81       	ldd	r24, Y+3	; 0x03
     788:	08 2f       	mov	r16, r24
     78a:	10 e0       	ldi	r17, 0x00	; 0
     78c:	69 81       	ldd	r22, Y+1	; 0x01
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	7a d2       	rcall	.+1268   	; 0xc88 <MCP2515_read>
     794:	28 2f       	mov	r18, r24
     796:	ce 01       	movw	r24, r28
     798:	07 96       	adiw	r24, 0x07	; 7
     79a:	80 0f       	add	r24, r16
     79c:	91 1f       	adc	r25, r17
     79e:	fc 01       	movw	r30, r24
     7a0:	20 83       	st	Z, r18
     7a2:	89 81       	ldd	r24, Y+1	; 0x01
     7a4:	8f 5f       	subi	r24, 0xFF	; 255
     7a6:	89 83       	std	Y+1, r24	; 0x01
     7a8:	8b 81       	ldd	r24, Y+3	; 0x03
     7aa:	8f 5f       	subi	r24, 0xFF	; 255
     7ac:	8b 83       	std	Y+3, r24	; 0x03
     7ae:	9e 81       	ldd	r25, Y+6	; 0x06
     7b0:	8b 81       	ldd	r24, Y+3	; 0x03
     7b2:	89 17       	cp	r24, r25
     7b4:	40 f3       	brcs	.-48     	; 0x786 <CAN_receiveMessage+0x128>
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	42 e0       	ldi	r20, 0x02	; 2
     7ba:	6c e2       	ldi	r22, 0x2C	; 44
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	99 d2       	rcall	.+1330   	; 0xcf4 <MCP2515_bitModify>
     7c2:	8f 85       	ldd	r24, Y+15	; 0x0f
     7c4:	98 89       	ldd	r25, Y+16	; 0x10
     7c6:	2b e0       	ldi	r18, 0x0B	; 11
     7c8:	fe 01       	movw	r30, r28
     7ca:	34 96       	adiw	r30, 0x04	; 4
     7cc:	dc 01       	movw	r26, r24
     7ce:	01 90       	ld	r0, Z+
     7d0:	0d 92       	st	X+, r0
     7d2:	2a 95       	dec	r18
     7d4:	e1 f7       	brne	.-8      	; 0x7ce <CAN_receiveMessage+0x170>
     7d6:	8f 85       	ldd	r24, Y+15	; 0x0f
     7d8:	98 89       	ldd	r25, Y+16	; 0x10
     7da:	61 96       	adiw	r28, 0x11	; 17
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
     7e0:	de bf       	out	0x3e, r29	; 62
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	cd bf       	out	0x3d, r28	; 61
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	08 95       	ret

000007f0 <CAN_printMessage>:
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	00 d0       	rcall	.+0      	; 0x7f6 <CAN_printMessage+0x6>
     7f6:	1f 92       	push	r1
     7f8:	cd b7       	in	r28, 0x3d	; 61
     7fa:	de b7       	in	r29, 0x3e	; 62
     7fc:	9b 83       	std	Y+3, r25	; 0x03
     7fe:	8a 83       	std	Y+2, r24	; 0x02
     800:	8a 81       	ldd	r24, Y+2	; 0x02
     802:	9b 81       	ldd	r25, Y+3	; 0x03
     804:	fc 01       	movw	r30, r24
     806:	82 81       	ldd	r24, Z+2	; 0x02
     808:	28 2f       	mov	r18, r24
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	8a 81       	ldd	r24, Y+2	; 0x02
     80e:	9b 81       	ldd	r25, Y+3	; 0x03
     810:	fc 01       	movw	r30, r24
     812:	80 81       	ld	r24, Z
     814:	91 81       	ldd	r25, Z+1	; 0x01
     816:	43 2f       	mov	r20, r19
     818:	4f 93       	push	r20
     81a:	2f 93       	push	r18
     81c:	29 2f       	mov	r18, r25
     81e:	2f 93       	push	r18
     820:	8f 93       	push	r24
     822:	86 e1       	ldi	r24, 0x16	; 22
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	89 2f       	mov	r24, r25
     828:	8f 93       	push	r24
     82a:	86 e1       	ldi	r24, 0x16	; 22
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	8f 93       	push	r24
     830:	0e 94 6d 0c 	call	0x18da	; 0x18da <printf>
     834:	0f 90       	pop	r0
     836:	0f 90       	pop	r0
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	0f 90       	pop	r0
     840:	19 82       	std	Y+1, r1	; 0x01
     842:	1f c0       	rjmp	.+62     	; 0x882 <CAN_printMessage+0x92>
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	88 2f       	mov	r24, r24
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	2a 81       	ldd	r18, Y+2	; 0x02
     84c:	3b 81       	ldd	r19, Y+3	; 0x03
     84e:	82 0f       	add	r24, r18
     850:	93 1f       	adc	r25, r19
     852:	03 96       	adiw	r24, 0x03	; 3
     854:	fc 01       	movw	r30, r24
     856:	80 81       	ld	r24, Z
     858:	88 2f       	mov	r24, r24
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	29 2f       	mov	r18, r25
     85e:	2f 93       	push	r18
     860:	8f 93       	push	r24
     862:	82 e4       	ldi	r24, 0x42	; 66
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	89 2f       	mov	r24, r25
     868:	8f 93       	push	r24
     86a:	82 e4       	ldi	r24, 0x42	; 66
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	8f 93       	push	r24
     870:	0e 94 6d 0c 	call	0x18da	; 0x18da <printf>
     874:	0f 90       	pop	r0
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	89 81       	ldd	r24, Y+1	; 0x01
     87e:	8f 5f       	subi	r24, 0xFF	; 255
     880:	89 83       	std	Y+1, r24	; 0x01
     882:	8a 81       	ldd	r24, Y+2	; 0x02
     884:	9b 81       	ldd	r25, Y+3	; 0x03
     886:	fc 01       	movw	r30, r24
     888:	92 81       	ldd	r25, Z+2	; 0x02
     88a:	89 81       	ldd	r24, Y+1	; 0x01
     88c:	89 17       	cp	r24, r25
     88e:	d0 f2       	brcs	.-76     	; 0x844 <CAN_printMessage+0x54>
     890:	8a e0       	ldi	r24, 0x0A	; 10
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <putchar>
     898:	0f 90       	pop	r0
     89a:	0f 90       	pop	r0
     89c:	0f 90       	pop	r0
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <enableXMEM>:


void enableXMEM(char releaseJtagPins)
{
	//enable XMEM
	set_bit(MCUCR, SRE);
     8a4:	95 b7       	in	r25, 0x35	; 53
     8a6:	90 68       	ori	r25, 0x80	; 128
     8a8:	95 bf       	out	0x35, r25	; 53
	
	//set waiting to one cycle
	set_bit(EMCUCR, SRW01);
     8aa:	96 b7       	in	r25, 0x36	; 54
     8ac:	98 60       	ori	r25, 0x08	; 8
     8ae:	96 bf       	out	0x36, r25	; 54
	
	if(releaseJtagPins != 0)
     8b0:	88 23       	and	r24, r24
     8b2:	19 f0       	breq	.+6      	; 0x8ba <enableXMEM+0x16>
	{
		//disable 4 bits in port D from XMEM - needed for JTAG interface To release ports PC7 - PC4 -> XMM2 - 1, XMM1 - 0, XMM0 - 0
		set_bit(SFIOR, XMM2);
     8b4:	80 b7       	in	r24, 0x30	; 48
     8b6:	80 62       	ori	r24, 0x20	; 32
     8b8:	80 bf       	out	0x30, r24	; 48
     8ba:	08 95       	ret

000008bc <readFromAddress>:
	}
}

uint8_t readFromAddress(volatile char* ptr)
{
	uint8_t val = *ptr;
     8bc:	fc 01       	movw	r30, r24
     8be:	80 81       	ld	r24, Z
	return val;
}
     8c0:	08 95       	ret

000008c2 <saveToAddress>:

void saveToAddress(volatile char* ptr, uint8_t data)
{
	*ptr = data;
     8c2:	fc 01       	movw	r30, r24
     8c4:	60 83       	st	Z, r22
     8c6:	08 95       	ret

000008c8 <JOY_init>:

//------------------------------------------------------------------------------
// set initial values for Position and Direction
void JOY_init()
{
	currentPosition.X_abs = 0;
     8c8:	10 92 68 02 	sts	0x0268, r1
     8cc:	10 92 67 02 	sts	0x0267, r1
	currentPosition.Y_abs = 0;
     8d0:	10 92 6a 02 	sts	0x026A, r1
     8d4:	10 92 69 02 	sts	0x0269, r1
	currentPosition.X_per = 0;
     8d8:	10 92 6c 02 	sts	0x026C, r1
     8dc:	10 92 6b 02 	sts	0x026B, r1
	currentPosition.Y_per = 0;
     8e0:	10 92 6e 02 	sts	0x026E, r1
     8e4:	10 92 6d 02 	sts	0x026D, r1
	currentDirection = CENTRE;
     8e8:	10 92 66 02 	sts	0x0266, r1
     8ec:	08 95       	ret

000008ee <JOY_calibrate>:

//------------------------------------------------------------------------------
// This function tracks the maximum and minimum value on joystick x and y axis.
// After a predefined period of time the mean value for both axes is calculated.
void JOY_calibrate()
{
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
	uint8_t temp = 0;
	
	OLED_clear();
     8f2:	76 d4       	rcall	.+2284   	; 0x11e0 <OLED_clear>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	54 d4       	rcall	.+2216   	; 0x11a6 <OLED_goto>
     8fe:	89 e8       	ldi	r24, 0x89	; 137
     900:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("JOY RIGHT");
     902:	7f d5       	rcall	.+2814   	; 0x1402 <OLED_printString>
     904:	2f ef       	ldi	r18, 0xFF	; 255
     906:	8f ef       	ldi	r24, 0xFF	; 255
     908:	92 e0       	ldi	r25, 0x02	; 2
     90a:	21 50       	subi	r18, 0x01	; 1
     90c:	80 40       	sbci	r24, 0x00	; 0
     90e:	90 40       	sbci	r25, 0x00	; 0
     910:	e1 f7       	brne	.-8      	; 0x90a <JOY_calibrate+0x1c>
     912:	00 c0       	rjmp	.+0      	; 0x914 <JOY_calibrate+0x26>
     914:	00 c0       	rjmp	.+0      	; 0x916 <JOY_calibrate+0x28>
     916:	c4 e1       	ldi	r28, 0x14	; 20
     918:	d0 e0       	ldi	r29, 0x00	; 0
     91a:	60 91 06 01 	lds	r22, 0x0106
     91e:	70 91 07 01 	lds	r23, 0x0107
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     922:	82 e0       	ldi	r24, 0x02	; 2
     924:	1c d6       	rcall	.+3128   	; 0x155e <ADC_request>
     926:	2f ef       	ldi	r18, 0xFF	; 255
     928:	8f e1       	ldi	r24, 0x1F	; 31
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	21 50       	subi	r18, 0x01	; 1
     92e:	80 40       	sbci	r24, 0x00	; 0
     930:	90 40       	sbci	r25, 0x00	; 0
     932:	e1 f7       	brne	.-8      	; 0x92c <JOY_calibrate+0x3e>
     934:	00 c0       	rjmp	.+0      	; 0x936 <JOY_calibrate+0x48>
     936:	00 00       	nop
     938:	80 91 06 01 	lds	r24, 0x0106
     93c:	90 91 07 01 	lds	r25, 0x0107
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     940:	32 d6       	rcall	.+3172   	; 0x15a6 <ADC_read>
     942:	90 91 0d 01 	lds	r25, 0x010D
     946:	98 17       	cp	r25, r24
     948:	10 f4       	brcc	.+4      	; 0x94e <JOY_calibrate+0x60>
     94a:	80 93 0d 01 	sts	0x010D, r24
		
		if(temp > calR) {calR = temp;}
     94e:	21 97       	sbiw	r28, 0x01	; 1
     950:	20 97       	sbiw	r28, 0x00	; 0
     952:	19 f7       	brne	.-58     	; 0x91a <JOY_calibrate+0x2c>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	81 e0       	ldi	r24, 0x01	; 1
	OLED_goto(0,0);
	OLED_printString("JOY RIGHT");
	//printf("Move JOY to the right\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	24 d4       	rcall	.+2120   	; 0x11a6 <OLED_goto>
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calR) {calR = temp;}
	}
	
	OLED_goto(1,0);
     95e:	83 e9       	ldi	r24, 0x93	; 147
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	4f d5       	rcall	.+2718   	; 0x1402 <OLED_printString>
     964:	2f ef       	ldi	r18, 0xFF	; 255
     966:	8f ef       	ldi	r24, 0xFF	; 255
     968:	92 e0       	ldi	r25, 0x02	; 2
	OLED_printString("JOY LEFT");
     96a:	21 50       	subi	r18, 0x01	; 1
     96c:	80 40       	sbci	r24, 0x00	; 0
     96e:	90 40       	sbci	r25, 0x00	; 0
     970:	e1 f7       	brne	.-8      	; 0x96a <JOY_calibrate+0x7c>
     972:	00 c0       	rjmp	.+0      	; 0x974 <JOY_calibrate+0x86>
     974:	00 c0       	rjmp	.+0      	; 0x976 <JOY_calibrate+0x88>
     976:	c4 e1       	ldi	r28, 0x14	; 20
     978:	d0 e0       	ldi	r29, 0x00	; 0
     97a:	60 91 06 01 	lds	r22, 0x0106
     97e:	70 91 07 01 	lds	r23, 0x0107
     982:	82 e0       	ldi	r24, 0x02	; 2
     984:	ec d5       	rcall	.+3032   	; 0x155e <ADC_request>
     986:	2f ef       	ldi	r18, 0xFF	; 255
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(X_channel, adc_ext_ram);
     988:	8f e1       	ldi	r24, 0x1F	; 31
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	21 50       	subi	r18, 0x01	; 1
     98e:	80 40       	sbci	r24, 0x00	; 0
     990:	90 40       	sbci	r25, 0x00	; 0
     992:	e1 f7       	brne	.-8      	; 0x98c <JOY_calibrate+0x9e>
     994:	00 c0       	rjmp	.+0      	; 0x996 <JOY_calibrate+0xa8>
     996:	00 00       	nop
     998:	80 91 06 01 	lds	r24, 0x0106
     99c:	90 91 07 01 	lds	r25, 0x0107
     9a0:	02 d6       	rcall	.+3076   	; 0x15a6 <ADC_read>
     9a2:	90 91 0c 01 	lds	r25, 0x010C
     9a6:	89 17       	cp	r24, r25
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     9a8:	10 f4       	brcc	.+4      	; 0x9ae <JOY_calibrate+0xc0>
     9aa:	80 93 0c 01 	sts	0x010C, r24
     9ae:	21 97       	sbiw	r28, 0x01	; 1
     9b0:	20 97       	sbiw	r28, 0x00	; 0
     9b2:	19 f7       	brne	.-58     	; 0x97a <JOY_calibrate+0x8c>
		
		if(temp < calL) {calL = temp;}
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	70 e0       	ldi	r23, 0x00	; 0
     9b8:	82 e0       	ldi	r24, 0x02	; 2
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	f4 d3       	rcall	.+2024   	; 0x11a6 <OLED_goto>
     9be:	8c e9       	ldi	r24, 0x9C	; 156
     9c0:	91 e0       	ldi	r25, 0x01	; 1
	OLED_goto(1,0);
	OLED_printString("JOY LEFT");
	//printf("Move JOY to the left\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     9c2:	1f d5       	rcall	.+2622   	; 0x1402 <OLED_printString>
     9c4:	2f ef       	ldi	r18, 0xFF	; 255
		temp = ADC_read(adc_ext_ram);
		
		if(temp < calL) {calL = temp;}
	}
	
	OLED_goto(2,0);
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	92 e0       	ldi	r25, 0x02	; 2
     9ca:	21 50       	subi	r18, 0x01	; 1
     9cc:	80 40       	sbci	r24, 0x00	; 0
     9ce:	90 40       	sbci	r25, 0x00	; 0
     9d0:	e1 f7       	brne	.-8      	; 0x9ca <JOY_calibrate+0xdc>
	OLED_printString("JOY UP");
     9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <JOY_calibrate+0xe6>
     9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <JOY_calibrate+0xe8>
     9d6:	c4 e1       	ldi	r28, 0x14	; 20
     9d8:	d0 e0       	ldi	r29, 0x00	; 0
     9da:	60 91 06 01 	lds	r22, 0x0106
     9de:	70 91 07 01 	lds	r23, 0x0107
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	bc d5       	rcall	.+2936   	; 0x155e <ADC_request>
     9e6:	2f ef       	ldi	r18, 0xFF	; 255
     9e8:	8f e1       	ldi	r24, 0x1F	; 31
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	21 50       	subi	r18, 0x01	; 1
     9ee:	80 40       	sbci	r24, 0x00	; 0
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     9f0:	90 40       	sbci	r25, 0x00	; 0
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <JOY_calibrate+0xfe>
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <JOY_calibrate+0x108>
     9f6:	00 00       	nop
     9f8:	80 91 06 01 	lds	r24, 0x0106
     9fc:	90 91 07 01 	lds	r25, 0x0107
     a00:	d2 d5       	rcall	.+2980   	; 0x15a6 <ADC_read>
     a02:	90 91 0b 01 	lds	r25, 0x010B
     a06:	98 17       	cp	r25, r24
     a08:	10 f4       	brcc	.+4      	; 0xa0e <JOY_calibrate+0x120>
     a0a:	80 93 0b 01 	sts	0x010B, r24
     a0e:	21 97       	sbiw	r28, 0x01	; 1
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     a10:	20 97       	sbiw	r28, 0x00	; 0
     a12:	19 f7       	brne	.-58     	; 0x9da <JOY_calibrate+0xec>
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	90 e0       	ldi	r25, 0x00	; 0
		
		if(temp > calUp) {calUp = temp;}
     a1c:	c4 d3       	rcall	.+1928   	; 0x11a6 <OLED_goto>
     a1e:	83 ea       	ldi	r24, 0xA3	; 163
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	ef d4       	rcall	.+2526   	; 0x1402 <OLED_printString>
     a24:	2f ef       	ldi	r18, 0xFF	; 255
     a26:	8f ef       	ldi	r24, 0xFF	; 255
     a28:	92 e0       	ldi	r25, 0x02	; 2
	OLED_goto(2,0);
	OLED_printString("JOY UP");
	//printf("Move JOY up\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     a2a:	21 50       	subi	r18, 0x01	; 1
     a2c:	80 40       	sbci	r24, 0x00	; 0
		temp = ADC_read(adc_ext_ram);
		
		if(temp > calUp) {calUp = temp;}
	}
	
	OLED_goto(3,0);
     a2e:	90 40       	sbci	r25, 0x00	; 0
     a30:	e1 f7       	brne	.-8      	; 0xa2a <JOY_calibrate+0x13c>
     a32:	00 c0       	rjmp	.+0      	; 0xa34 <JOY_calibrate+0x146>
     a34:	00 c0       	rjmp	.+0      	; 0xa36 <JOY_calibrate+0x148>
     a36:	c4 e1       	ldi	r28, 0x14	; 20
     a38:	d0 e0       	ldi	r29, 0x00	; 0
	OLED_printString("JOY DOWN");
     a3a:	60 91 06 01 	lds	r22, 0x0106
     a3e:	70 91 07 01 	lds	r23, 0x0107
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	8c d5       	rcall	.+2840   	; 0x155e <ADC_request>
     a46:	2f ef       	ldi	r18, 0xFF	; 255
     a48:	8f e1       	ldi	r24, 0x1F	; 31
     a4a:	91 e0       	ldi	r25, 0x01	; 1
     a4c:	21 50       	subi	r18, 0x01	; 1
     a4e:	80 40       	sbci	r24, 0x00	; 0
     a50:	90 40       	sbci	r25, 0x00	; 0
     a52:	e1 f7       	brne	.-8      	; 0xa4c <JOY_calibrate+0x15e>
     a54:	00 c0       	rjmp	.+0      	; 0xa56 <JOY_calibrate+0x168>
     a56:	00 00       	nop
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
	{
		ADC_request(Y_channel, adc_ext_ram);
     a58:	80 91 06 01 	lds	r24, 0x0106
     a5c:	90 91 07 01 	lds	r25, 0x0107
     a60:	a2 d5       	rcall	.+2884   	; 0x15a6 <ADC_read>
     a62:	90 91 0a 01 	lds	r25, 0x010A
     a66:	89 17       	cp	r24, r25
     a68:	10 f4       	brcc	.+4      	; 0xa6e <JOY_calibrate+0x180>
     a6a:	80 93 0a 01 	sts	0x010A, r24
     a6e:	21 97       	sbiw	r28, 0x01	; 1
     a70:	20 97       	sbiw	r28, 0x00	; 0
     a72:	19 f7       	brne	.-58     	; 0xa3a <JOY_calibrate+0x14c>
     a74:	20 91 0b 01 	lds	r18, 0x010B
		_delay_ms(delay2);
		temp = ADC_read(adc_ext_ram);
     a78:	80 91 0a 01 	lds	r24, 0x010A
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	28 1b       	sub	r18, r24
     a80:	31 09       	sbc	r19, r1
     a82:	c9 01       	movw	r24, r18
		
		if(temp < calDown) {calDown = temp;}
     a84:	99 23       	and	r25, r25
     a86:	0c f4       	brge	.+2      	; 0xa8a <JOY_calibrate+0x19c>
     a88:	01 96       	adiw	r24, 0x01	; 1
     a8a:	95 95       	asr	r25
     a8c:	87 95       	ror	r24
     a8e:	80 93 09 01 	sts	0x0109, r24
	OLED_goto(3,0);
	OLED_printString("JOY DOWN");
	//printf("Move JOY down\n");
	_delay_ms(delay1);
	
	for(int i = 0; i < 20; i++)
     a92:	20 91 0d 01 	lds	r18, 0x010D
	}
	
	
	//printf("calR: %d, calL: %d, calUp:%d, calDown:%d\n", calR, calL, calUp, calDown);
	
	meanVert = (calUp - calDown)/2;
     a96:	80 91 0c 01 	lds	r24, 0x010C
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	28 1b       	sub	r18, r24
     a9e:	31 09       	sbc	r19, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	99 23       	and	r25, r25
     aa4:	0c f4       	brge	.+2      	; 0xaa8 <JOY_calibrate+0x1ba>
     aa6:	01 96       	adiw	r24, 0x01	; 1
     aa8:	95 95       	asr	r25
     aaa:	87 95       	ror	r24
     aac:	80 93 08 01 	sts	0x0108, r24
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	70 e0       	ldi	r23, 0x00	; 0
	meanHor = (calR - calL)/2;
     ab4:	84 e0       	ldi	r24, 0x04	; 4
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	76 d3       	rcall	.+1772   	; 0x11a6 <OLED_goto>
     aba:	8c ea       	ldi	r24, 0xAC	; 172
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	a1 d4       	rcall	.+2370   	; 0x1402 <OLED_printString>
     ac0:	2f ef       	ldi	r18, 0xFF	; 255
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	9e e0       	ldi	r25, 0x0E	; 14
     ac6:	21 50       	subi	r18, 0x01	; 1
     ac8:	80 40       	sbci	r24, 0x00	; 0
     aca:	90 40       	sbci	r25, 0x00	; 0
     acc:	e1 f7       	brne	.-8      	; 0xac6 <JOY_calibrate+0x1d8>
     ace:	00 c0       	rjmp	.+0      	; 0xad0 <JOY_calibrate+0x1e2>
     ad0:	00 00       	nop
	
	OLED_goto(4,0);
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	08 95       	ret

00000ad8 <JOY_requestCurrentPosition>:
     ad8:	88 37       	cpi	r24, 0x78	; 120
     ada:	39 f4       	brne	.+14     	; 0xaea <JOY_requestCurrentPosition+0x12>
     adc:	60 91 06 01 	lds	r22, 0x0106
	OLED_printString("CALIB DONE");
     ae0:	70 91 07 01 	lds	r23, 0x0107
     ae4:	82 e0       	ldi	r24, 0x02	; 2
     ae6:	3b c5       	rjmp	.+2678   	; 0x155e <ADC_request>
     ae8:	08 95       	ret
     aea:	89 37       	cpi	r24, 0x79	; 121
     aec:	31 f4       	brne	.+12     	; 0xafa <JOY_requestCurrentPosition+0x22>
     aee:	60 91 06 01 	lds	r22, 0x0106
     af2:	70 91 07 01 	lds	r23, 0x0107
     af6:	81 e0       	ldi	r24, 0x01	; 1
	//printf("Calibration done.. new VM: %d HM:%d\n", meanVert, meanHor);
	_delay_ms(1000);
}
     af8:	32 c5       	rjmp	.+2660   	; 0x155e <ADC_request>
     afa:	08 95       	ret

00000afc <JOY_updatePosition>:
     afc:	88 37       	cpi	r24, 0x78	; 120
		ADC_request(X_channel, adc_ext_ram);
	}
	
	else if(axis == 'y')
	{
		ADC_request(Y_channel, adc_ext_ram);
     afe:	f9 f4       	brne	.+62     	; 0xb3e <JOY_updatePosition+0x42>
// 3.) Call method to calculate current direction.
void JOY_updatePosition(char axis)
{
	if(axis == 'x')
	{
		currentPosition.X_abs = ADC_read(adc_ext_ram);
     b00:	80 91 06 01 	lds	r24, 0x0106
     b04:	90 91 07 01 	lds	r25, 0x0107
     b08:	4e d5       	rcall	.+2716   	; 0x15a6 <ADC_read>
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	90 93 68 02 	sts	0x0268, r25
     b10:	80 93 67 02 	sts	0x0267, r24
     b14:	20 91 08 01 	lds	r18, 0x0108
		currentPosition.X_per = ((int)currentPosition.X_abs -  (int)meanHor)*100 / (int) meanHor;
     b18:	60 91 08 01 	lds	r22, 0x0108
     b1c:	ac 01       	movw	r20, r24
     b1e:	42 1b       	sub	r20, r18
     b20:	51 09       	sbc	r21, r1
     b22:	9a 01       	movw	r18, r20
     b24:	44 e6       	ldi	r20, 0x64	; 100
     b26:	42 9f       	mul	r20, r18
     b28:	c0 01       	movw	r24, r0
     b2a:	43 9f       	mul	r20, r19
     b2c:	90 0d       	add	r25, r0
     b2e:	11 24       	eor	r1, r1
     b30:	70 e0       	ldi	r23, 0x00	; 0
     b32:	3b d5       	rcall	.+2678   	; 0x15aa <__divmodhi4>
     b34:	70 93 6c 02 	sts	0x026C, r23
     b38:	60 93 6b 02 	sts	0x026B, r22
     b3c:	08 95       	ret
     b3e:	89 37       	cpi	r24, 0x79	; 121
     b40:	f1 f4       	brne	.+60     	; 0xb7e <JOY_updatePosition+0x82>
	}

	else if(axis == 'y')
     b42:	80 91 06 01 	lds	r24, 0x0106
	{
		currentPosition.Y_abs = ADC_read(adc_ext_ram);
     b46:	90 91 07 01 	lds	r25, 0x0107
     b4a:	2d d5       	rcall	.+2650   	; 0x15a6 <ADC_read>
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	90 93 6a 02 	sts	0x026A, r25
     b52:	80 93 69 02 	sts	0x0269, r24
     b56:	20 91 09 01 	lds	r18, 0x0109
     b5a:	60 91 09 01 	lds	r22, 0x0109
		currentPosition.Y_per = ((int)currentPosition.Y_abs -  (int)meanVert)*100 / (int) meanVert;
     b5e:	ac 01       	movw	r20, r24
     b60:	42 1b       	sub	r20, r18
     b62:	51 09       	sbc	r21, r1
     b64:	9a 01       	movw	r18, r20
     b66:	44 e6       	ldi	r20, 0x64	; 100
     b68:	42 9f       	mul	r20, r18
     b6a:	c0 01       	movw	r24, r0
     b6c:	43 9f       	mul	r20, r19
     b6e:	90 0d       	add	r25, r0
     b70:	11 24       	eor	r1, r1
     b72:	70 e0       	ldi	r23, 0x00	; 0
     b74:	1a d5       	rcall	.+2612   	; 0x15aa <__divmodhi4>
     b76:	70 93 6e 02 	sts	0x026E, r23
     b7a:	60 93 6d 02 	sts	0x026D, r22
     b7e:	08 95       	ret

00000b80 <JOY_calculateDirection>:
     b80:	80 91 6b 02 	lds	r24, 0x026B
     b84:	90 91 6c 02 	lds	r25, 0x026C
//------------------------------------------------------------------------------
// Calculate the current direction based on the relative value X_per.
// A direction is valid after the threshold of 50% was passed.
void JOY_calculateDirection()
{
	if(currentPosition.X_per > 90) {
     b88:	8b 35       	cpi	r24, 0x5B	; 91
     b8a:	91 05       	cpc	r25, r1
     b8c:	24 f0       	brlt	.+8      	; 0xb96 <JOY_calculateDirection+0x16>
	currentDirection = RIGHT;}
     b8e:	83 e0       	ldi	r24, 0x03	; 3
     b90:	80 93 66 02 	sts	0x0266, r24
     b94:	08 95       	ret
	else if(currentPosition.X_per < -90) {
     b96:	86 3a       	cpi	r24, 0xA6	; 166
     b98:	9f 4f       	sbci	r25, 0xFF	; 255
     b9a:	24 f4       	brge	.+8      	; 0xba4 <JOY_calculateDirection+0x24>
	currentDirection = LEFT;}
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	80 93 66 02 	sts	0x0266, r24
     ba2:	08 95       	ret
	else if(currentPosition.Y_per > 90) {
     ba4:	80 91 6d 02 	lds	r24, 0x026D
     ba8:	90 91 6e 02 	lds	r25, 0x026E
     bac:	8b 35       	cpi	r24, 0x5B	; 91
     bae:	91 05       	cpc	r25, r1
     bb0:	24 f0       	brlt	.+8      	; 0xbba <JOY_calculateDirection+0x3a>
	currentDirection = UP;}
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	80 93 66 02 	sts	0x0266, r24
     bb8:	08 95       	ret
	else if(currentPosition.Y_per < -90) {
     bba:	86 3a       	cpi	r24, 0xA6	; 166
     bbc:	9f 4f       	sbci	r25, 0xFF	; 255
     bbe:	24 f4       	brge	.+8      	; 0xbc8 <JOY_calculateDirection+0x48>
	currentDirection = DOWN;}
     bc0:	82 e0       	ldi	r24, 0x02	; 2
     bc2:	80 93 66 02 	sts	0x0266, r24
     bc6:	08 95       	ret
	else{currentDirection = CENTRE;}
     bc8:	10 92 66 02 	sts	0x0266, r1
     bcc:	08 95       	ret

00000bce <JOY_getPosition>:

//------------------------------------------------------------------------------
// This function returns the current position of the Joystick.
// It is a struct with the four parameters X_abs, Y_abs, X_per and Y_per
JOY_position_t JOY_getPosition()
{
     bce:	cf 93       	push	r28
     bd0:	df 93       	push	r29
     bd2:	cd b7       	in	r28, 0x3d	; 61
     bd4:	de b7       	in	r29, 0x3e	; 62
     bd6:	28 97       	sbiw	r28, 0x08	; 8
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	cd bf       	out	0x3d, r28	; 61
	JOY_requestCurrentPosition('x');
     be2:	88 e7       	ldi	r24, 0x78	; 120
     be4:	79 df       	rcall	.-270    	; 0xad8 <JOY_requestCurrentPosition>
     be6:	82 e6       	ldi	r24, 0x62	; 98
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     be8:	8a 95       	dec	r24
     bea:	f1 f7       	brne	.-4      	; 0xbe8 <JOY_getPosition+0x1a>
     bec:	00 00       	nop
     bee:	88 e7       	ldi	r24, 0x78	; 120
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     bf0:	85 df       	rcall	.-246    	; 0xafc <JOY_updatePosition>
     bf2:	89 e7       	ldi	r24, 0x79	; 121
     bf4:	71 df       	rcall	.-286    	; 0xad8 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     bf6:	82 e6       	ldi	r24, 0x62	; 98
     bf8:	8a 95       	dec	r24
     bfa:	f1 f7       	brne	.-4      	; 0xbf8 <JOY_getPosition+0x2a>
     bfc:	00 00       	nop
     bfe:	89 e7       	ldi	r24, 0x79	; 121
     c00:	7d df       	rcall	.-262    	; 0xafc <JOY_updatePosition>
     c02:	88 e0       	ldi	r24, 0x08	; 8
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     c04:	e7 e6       	ldi	r30, 0x67	; 103
     c06:	f2 e0       	ldi	r31, 0x02	; 2
     c08:	de 01       	movw	r26, r28
	return currentPosition;
     c0a:	11 96       	adiw	r26, 0x01	; 1
     c0c:	01 90       	ld	r0, Z+
     c0e:	0d 92       	st	X+, r0
     c10:	8a 95       	dec	r24
     c12:	e1 f7       	brne	.-8      	; 0xc0c <JOY_getPosition+0x3e>
     c14:	29 81       	ldd	r18, Y+1	; 0x01
     c16:	3a 81       	ldd	r19, Y+2	; 0x02
     c18:	4b 81       	ldd	r20, Y+3	; 0x03
     c1a:	5c 81       	ldd	r21, Y+4	; 0x04
     c1c:	6d 81       	ldd	r22, Y+5	; 0x05
     c1e:	7e 81       	ldd	r23, Y+6	; 0x06
     c20:	8f 81       	ldd	r24, Y+7	; 0x07
     c22:	98 85       	ldd	r25, Y+8	; 0x08
     c24:	28 96       	adiw	r28, 0x08	; 8
     c26:	0f b6       	in	r0, 0x3f	; 63
}
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	df 91       	pop	r29
     c32:	cf 91       	pop	r28
     c34:	08 95       	ret

00000c36 <JOY_getDirection>:
     c36:	88 e7       	ldi	r24, 0x78	; 120
     c38:	4f df       	rcall	.-354    	; 0xad8 <JOY_requestCurrentPosition>
     c3a:	82 e6       	ldi	r24, 0x62	; 98
     c3c:	8a 95       	dec	r24
     c3e:	f1 f7       	brne	.-4      	; 0xc3c <JOY_getDirection+0x6>
     c40:	00 00       	nop
     c42:	88 e7       	ldi	r24, 0x78	; 120
// currentDirection variables.
JOY_direction_t JOY_getDirection()
{
	JOY_requestCurrentPosition('x');
	_delay_us(delayConversion);
	JOY_updatePosition('x');
     c44:	5b df       	rcall	.-330    	; 0xafc <JOY_updatePosition>
     c46:	89 e7       	ldi	r24, 0x79	; 121
     c48:	47 df       	rcall	.-370    	; 0xad8 <JOY_requestCurrentPosition>
	JOY_requestCurrentPosition('y');
     c4a:	82 e6       	ldi	r24, 0x62	; 98
     c4c:	8a 95       	dec	r24
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <JOY_getDirection+0x16>
     c50:	00 00       	nop
     c52:	89 e7       	ldi	r24, 0x79	; 121
     c54:	53 df       	rcall	.-346    	; 0xafc <JOY_updatePosition>
     c56:	94 df       	rcall	.-216    	; 0xb80 <JOY_calculateDirection>
	_delay_us(delayConversion);
	JOY_updatePosition('y');
     c58:	80 91 66 02 	lds	r24, 0x0266
     c5c:	08 95       	ret

00000c5e <MCP2515_reset>:
	//printf("finished MCP2515_init\n");
	return 0;
}

 void MCP2515_reset(SPI_SLAVES slave)
{
     c5e:	cf 93       	push	r28
     c60:	c8 2f       	mov	r28, r24
	SPI_activateSlave(slave);
     c62:	54 d4       	rcall	.+2216   	; 0x150c <SPI_activateSlave>
     c64:	80 ec       	ldi	r24, 0xC0	; 192
	SPI_send(MCP_RESET);
     c66:	48 d4       	rcall	.+2192   	; 0x14f8 <SPI_send>
     c68:	8c ec       	ldi	r24, 0xCC	; 204
     c6a:	94 e0       	ldi	r25, 0x04	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	f1 f7       	brne	.-4      	; 0xc6c <MCP2515_reset+0xe>
     c70:	00 c0       	rjmp	.+0      	; 0xc72 <MCP2515_reset+0x14>
     c72:	00 00       	nop
     c74:	8c 2f       	mov	r24, r28
     c76:	4e d4       	rcall	.+2204   	; 0x1514 <SPI_deactivateSlave>
	_delay_ms(1);
	SPI_deactivateSlave(slave);
     c78:	8f ef       	ldi	r24, 0xFF	; 255
     c7a:	9f e2       	ldi	r25, 0x2F	; 47
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	f1 f7       	brne	.-4      	; 0xc7c <MCP2515_reset+0x1e>
     c80:	00 c0       	rjmp	.+0      	; 0xc82 <MCP2515_reset+0x24>
     c82:	00 00       	nop
     c84:	cf 91       	pop	r28
     c86:	08 95       	ret

00000c88 <MCP2515_read>:
     c88:	cf 93       	push	r28
	_delay_ms(10);
}
     c8a:	df 93       	push	r29
     c8c:	c8 2f       	mov	r28, r24

uint8_t MCP2515_read(SPI_SLAVES slave, uint8_t address)
{
     c8e:	d6 2f       	mov	r29, r22
	SPI_activateSlave(slave);
     c90:	3d d4       	rcall	.+2170   	; 0x150c <SPI_activateSlave>
     c92:	83 e0       	ldi	r24, 0x03	; 3
	SPI_send(MCP_READ);
     c94:	31 d4       	rcall	.+2146   	; 0x14f8 <SPI_send>
     c96:	8c ec       	ldi	r24, 0xCC	; 204
     c98:	94 e0       	ldi	r25, 0x04	; 4
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	f1 f7       	brne	.-4      	; 0xc9a <MCP2515_read+0x12>
     c9e:	00 c0       	rjmp	.+0      	; 0xca0 <MCP2515_read+0x18>
     ca0:	00 00       	nop
     ca2:	8d 2f       	mov	r24, r29
     ca4:	29 d4       	rcall	.+2130   	; 0x14f8 <SPI_send>
	_delay_ms(1);
	SPI_send(address);
     ca6:	2c d4       	rcall	.+2136   	; 0x1500 <SPI_receive>
     ca8:	d8 2f       	mov	r29, r24
     caa:	8c 2f       	mov	r24, r28
	
	uint8_t result;
	result = SPI_receive();
     cac:	33 d4       	rcall	.+2150   	; 0x1514 <SPI_deactivateSlave>
     cae:	8d 2f       	mov	r24, r29
     cb0:	df 91       	pop	r29
	
	SPI_deactivateSlave(slave);
     cb2:	cf 91       	pop	r28
     cb4:	08 95       	ret

00000cb6 <MCP2515_init>:
     cb6:	80 e0       	ldi	r24, 0x00	; 0
	return result;
}
     cb8:	d2 df       	rcall	.-92     	; 0xc5e <MCP2515_reset>
     cba:	6e e0       	ldi	r22, 0x0E	; 14
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	e4 df       	rcall	.-56     	; 0xc88 <MCP2515_read>
uint8_t MCP2515_init()
{
	MCP2515_reset(SS_CAN_CONTROLLER); // Send reset-command
	// Self-test
	uint8_t value;
	value = MCP2515_read(SS_CAN_CONTROLLER, MCP_CANSTAT);
     cc0:	98 2f       	mov	r25, r24
     cc2:	90 7e       	andi	r25, 0xE0	; 224
	//printf("CANSTAT: %#x\n", value);
	if((value & MODE_MASK) != MODE_CONFIG) 
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	90 38       	cpi	r25, 0x80	; 128
     cc8:	09 f4       	brne	.+2      	; 0xccc <MCP2515_init+0x16>
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	08 95       	ret

00000cce <MCP2515_write>:
     cce:	1f 93       	push	r17
		return 1;
	}
	//
	//printf("finished MCP2515_init\n");
	return 0;
}
     cd0:	cf 93       	push	r28
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_write(SPI_SLAVES slave, uint8_t address, uint8_t data)
{
     cd2:	df 93       	push	r29
     cd4:	c8 2f       	mov	r28, r24
     cd6:	16 2f       	mov	r17, r22
     cd8:	d4 2f       	mov	r29, r20
	SPI_activateSlave(slave);
     cda:	18 d4       	rcall	.+2096   	; 0x150c <SPI_activateSlave>
     cdc:	82 e0       	ldi	r24, 0x02	; 2
	SPI_send(MCP_WRITE);
     cde:	0c d4       	rcall	.+2072   	; 0x14f8 <SPI_send>
     ce0:	81 2f       	mov	r24, r17
     ce2:	0a d4       	rcall	.+2068   	; 0x14f8 <SPI_send>
	SPI_send(address);
     ce4:	8d 2f       	mov	r24, r29
     ce6:	08 d4       	rcall	.+2064   	; 0x14f8 <SPI_send>
     ce8:	8c 2f       	mov	r24, r28
	SPI_send(data);
     cea:	14 d4       	rcall	.+2088   	; 0x1514 <SPI_deactivateSlave>
     cec:	df 91       	pop	r29
     cee:	cf 91       	pop	r28
	SPI_deactivateSlave(slave);
     cf0:	1f 91       	pop	r17
     cf2:	08 95       	ret

00000cf4 <MCP2515_bitModify>:
     cf4:	0f 93       	push	r16
}
     cf6:	1f 93       	push	r17
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	c8 2f       	mov	r28, r24
	SPI_deactivateSlave(slave);
	return result;
}

void MCP2515_bitModify(SPI_SLAVES slave, uint8_t register2change, uint8_t mask, uint8_t newValue)
{
     cfe:	06 2f       	mov	r16, r22
     d00:	14 2f       	mov	r17, r20
     d02:	d2 2f       	mov	r29, r18
	SPI_activateSlave(slave);
     d04:	03 d4       	rcall	.+2054   	; 0x150c <SPI_activateSlave>
     d06:	85 e0       	ldi	r24, 0x05	; 5
	
	SPI_send(MCP_BITMOD);
     d08:	f7 d3       	rcall	.+2030   	; 0x14f8 <SPI_send>
     d0a:	80 2f       	mov	r24, r16
     d0c:	f5 d3       	rcall	.+2026   	; 0x14f8 <SPI_send>
	SPI_send(register2change);
     d0e:	81 2f       	mov	r24, r17
     d10:	f3 d3       	rcall	.+2022   	; 0x14f8 <SPI_send>
     d12:	8d 2f       	mov	r24, r29
	SPI_send(mask);
     d14:	f1 d3       	rcall	.+2018   	; 0x14f8 <SPI_send>
     d16:	8c 2f       	mov	r24, r28
     d18:	fd d3       	rcall	.+2042   	; 0x1514 <SPI_deactivateSlave>
	SPI_send(newValue);
     d1a:	df 91       	pop	r29
     d1c:	cf 91       	pop	r28
     d1e:	1f 91       	pop	r17
	
	SPI_deactivateSlave(slave);
     d20:	0f 91       	pop	r16
     d22:	08 95       	ret

00000d24 <startGame>:

static int menuFrameOffset = 10; //Columns from left frame border
//******************************************************************************************

void startGame()
{
     d24:	cf 93       	push	r28
     d26:	df 93       	push	r29
	OLED_clear();
     d28:	5b d2       	rcall	.+1206   	; 0x11e0 <OLED_clear>
     d2a:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(0,0);
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	39 d2       	rcall	.+1138   	; 0x11a6 <OLED_goto>
     d34:	87 eb       	ldi	r24, 0xB7	; 183
     d36:	91 e0       	ldi	r25, 0x01	; 1
	OLED_printString("START");
     d38:	64 d3       	rcall	.+1736   	; 0x1402 <OLED_printString>
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	83 e0       	ldi	r24, 0x03	; 3
	
	OLED_goto(3,0);
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	31 d2       	rcall	.+1122   	; 0x11a6 <OLED_goto>
     d44:	ce e0       	ldi	r28, 0x0E	; 14
     d46:	d0 e0       	ldi	r29, 0x00	; 0
     d48:	8d eb       	ldi	r24, 0xBD	; 189
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	5a d3       	rcall	.+1716   	; 0x1402 <OLED_printString>
     d4e:	2f ef       	ldi	r18, 0xFF	; 255
	
	for(int i = 14; i > 0; i--)
	{
		OLED_printString("*");
     d50:	8f e7       	ldi	r24, 0x7F	; 127
     d52:	97 e0       	ldi	r25, 0x07	; 7
     d54:	21 50       	subi	r18, 0x01	; 1
     d56:	80 40       	sbci	r24, 0x00	; 0
     d58:	90 40       	sbci	r25, 0x00	; 0
     d5a:	e1 f7       	brne	.-8      	; 0xd54 <startGame+0x30>
     d5c:	00 c0       	rjmp	.+0      	; 0xd5e <startGame+0x3a>
     d5e:	00 00       	nop
     d60:	21 97       	sbiw	r28, 0x01	; 1
     d62:	20 97       	sbiw	r28, 0x00	; 0
     d64:	89 f7       	brne	.-30     	; 0xd48 <startGame+0x24>
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	70 e0       	ldi	r23, 0x00	; 0
     d6a:	85 e0       	ldi	r24, 0x05	; 5
	OLED_goto(0,0);
	OLED_printString("START");
	
	OLED_goto(3,0);
	
	for(int i = 14; i > 0; i--)
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	1b d2       	rcall	.+1078   	; 0x11a6 <OLED_goto>
	{
		OLED_printString("*");
		_delay_ms(500);
	}
	
	OLED_goto(5,0);
     d70:	8f eb       	ldi	r24, 0xBF	; 191
     d72:	91 e0       	ldi	r25, 0x01	; 1
     d74:	46 d3       	rcall	.+1676   	; 0x1402 <OLED_printString>
     d76:	2f ef       	ldi	r18, 0xFF	; 255
     d78:	8f ef       	ldi	r24, 0xFF	; 255
     d7a:	9c e2       	ldi	r25, 0x2C	; 44
	OLED_printString("YUPII :)");
     d7c:	21 50       	subi	r18, 0x01	; 1
     d7e:	80 40       	sbci	r24, 0x00	; 0
     d80:	90 40       	sbci	r25, 0x00	; 0
     d82:	e1 f7       	brne	.-8      	; 0xd7c <startGame+0x58>
     d84:	00 c0       	rjmp	.+0      	; 0xd86 <startGame+0x62>
     d86:	00 c0       	rjmp	.+0      	; 0xd88 <startGame+0x64>
     d88:	df 91       	pop	r29
     d8a:	cf 91       	pop	r28
     d8c:	08 95       	ret

00000d8e <MENU_addMenuItem>:
     d8e:	cf 92       	push	r12
     d90:	df 92       	push	r13
     d92:	ef 92       	push	r14
     d94:	ff 92       	push	r15
	_delay_ms(3000);
}
     d96:	0f 93       	push	r16
     d98:	1f 93       	push	r17
     d9a:	cf 93       	push	r28
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
	difficultyMenu->children[2] = currItem;
}

void MENU_addMenuItem(char* name, menuNode_t* parentMenu, menuNode_t* childMenu, int hasChildMenu)
{
     d9c:	df 93       	push	r29
     d9e:	8c 01       	movw	r16, r24
     da0:	7b 01       	movw	r14, r22
     da2:	6a 01       	movw	r12, r20
     da4:	e9 01       	movw	r28, r18
	if(currItem != NULL)
     da6:	80 91 72 02 	lds	r24, 0x0272
     daa:	90 91 73 02 	lds	r25, 0x0273
     dae:	89 2b       	or	r24, r25
     db0:	19 f0       	breq	.+6      	; 0xdb8 <MENU_addMenuItem+0x2a>
	{
		printf("Creating next item...\n");
     db2:	88 ec       	ldi	r24, 0xC8	; 200
     db4:	91 e0       	ldi	r25, 0x01	; 1
     db6:	a7 d5       	rcall	.+2894   	; 0x1906 <puts>
     db8:	8c e0       	ldi	r24, 0x0C	; 12
		currItem = currItem->next;
	}

	currItem = malloc(sizeof(menuItemNode_t)); //first element in this menu
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	1d d4       	rcall	.+2106   	; 0x15f8 <malloc>
     dbe:	fc 01       	movw	r30, r24
     dc0:	90 93 73 02 	sts	0x0273, r25
     dc4:	80 93 72 02 	sts	0x0272, r24
     dc8:	f3 82       	std	Z+3, r15	; 0x03
     dca:	e2 82       	std	Z+2, r14	; 0x02
	currItem->parentMenu = parentMenu;
     dcc:	11 83       	std	Z+1, r17	; 0x01
     dce:	00 83       	st	Z, r16
	currItem->name = name;
     dd0:	cd 2b       	or	r28, r29
     dd2:	39 f0       	breq	.+14     	; 0xde2 <MENU_addMenuItem+0x54>
	
	if(hasChildMenu)
     dd4:	d5 82       	std	Z+5, r13	; 0x05
     dd6:	c4 82       	std	Z+4, r12	; 0x04
	{
		currItem->childMenu = childMenu;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
		currItem->hasChildMenu = 1;
     ddc:	97 83       	std	Z+7, r25	; 0x07
     dde:	86 83       	std	Z+6, r24	; 0x06
     de0:	04 c0       	rjmp	.+8      	; 0xdea <MENU_addMenuItem+0x5c>
     de2:	15 82       	std	Z+5, r1	; 0x05
     de4:	14 82       	std	Z+4, r1	; 0x04
	}
	else
	{
		currItem->childMenu = NULL;
     de6:	17 82       	std	Z+7, r1	; 0x07
     de8:	16 82       	std	Z+6, r1	; 0x06
		currItem->hasChildMenu = 0;
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
	}
}
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	ff 90       	pop	r15
     df4:	ef 90       	pop	r14
     df6:	df 90       	pop	r13
     df8:	cf 90       	pop	r12
     dfa:	08 95       	ret

00000dfc <MENU_buildMenus>:
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
}

void MENU_buildMenus()
{
	//create main menu
	mainMenu = malloc(sizeof(menuNode_t));
     e00:	86 e1       	ldi	r24, 0x16	; 22
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	f9 d3       	rcall	.+2034   	; 0x15f8 <malloc>
     e06:	ec 01       	movw	r28, r24
     e08:	90 93 79 02 	sts	0x0279, r25
     e0c:	80 93 78 02 	sts	0x0278, r24
     e10:	8e ed       	ldi	r24, 0xDE	; 222
	mainMenu->menuName = "MainMenu";
     e12:	91 e0       	ldi	r25, 0x01	; 1
     e14:	99 83       	std	Y+1, r25	; 0x01
     e16:	88 83       	st	Y, r24
     e18:	1d 8a       	std	Y+21, r1	; 0x15
	mainMenu->parentMenu = NULL;
     e1a:	1c 8a       	std	Y+20, r1	; 0x14
     e1c:	85 e0       	ldi	r24, 0x05	; 5
	mainMenu->noChilds = 5;
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	9b 83       	std	Y+3, r25	; 0x03
     e22:	8a 83       	std	Y+2, r24	; 0x02
     e24:	86 e1       	ldi	r24, 0x16	; 22
	
	//create DifficultyMenu
	difficultyMenu = malloc(sizeof(menuNode_t));
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	e7 d3       	rcall	.+1998   	; 0x15f8 <malloc>
     e2a:	fc 01       	movw	r30, r24
     e2c:	90 93 77 02 	sts	0x0277, r25
     e30:	80 93 76 02 	sts	0x0276, r24
     e34:	87 ee       	ldi	r24, 0xE7	; 231
     e36:	91 e0       	ldi	r25, 0x01	; 1
	difficultyMenu->menuName = "DifficultyMenu";
     e38:	91 83       	std	Z+1, r25	; 0x01
     e3a:	80 83       	st	Z, r24
     e3c:	d5 8b       	std	Z+21, r29	; 0x15
     e3e:	c4 8b       	std	Z+20, r28	; 0x14
	difficultyMenu->parentMenu = mainMenu;
     e40:	83 e0       	ldi	r24, 0x03	; 3
     e42:	90 e0       	ldi	r25, 0x00	; 0
	difficultyMenu->noChilds = 3;
     e44:	93 83       	std	Z+3, r25	; 0x03
     e46:	82 83       	std	Z+2, r24	; 0x02
     e48:	20 e0       	ldi	r18, 0x00	; 0
     e4a:	30 e0       	ldi	r19, 0x00	; 0
	
	//create menu items for created menus
	MENU_addMenuItem("New Game", mainMenu, NULL, 0);
     e4c:	40 e0       	ldi	r20, 0x00	; 0
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	be 01       	movw	r22, r28
     e52:	86 ef       	ldi	r24, 0xF6	; 246
     e54:	91 e0       	ldi	r25, 0x01	; 1
     e56:	9b df       	rcall	.-202    	; 0xd8e <MENU_addMenuItem>
     e58:	60 91 78 02 	lds	r22, 0x0278
     e5c:	70 91 79 02 	lds	r23, 0x0279
	mainMenu->children[0] = currItem;
     e60:	e0 91 72 02 	lds	r30, 0x0272
     e64:	f0 91 73 02 	lds	r31, 0x0273
     e68:	db 01       	movw	r26, r22
     e6a:	15 96       	adiw	r26, 0x05	; 5
     e6c:	fc 93       	st	X, r31
     e6e:	ee 93       	st	-X, r30
     e70:	14 97       	sbiw	r26, 0x04	; 4
     e72:	82 e9       	ldi	r24, 0x92	; 146
     e74:	96 e0       	ldi	r25, 0x06	; 6
     e76:	93 87       	std	Z+11, r25	; 0x0b
	mainMenu->children[0]->functionPtr = &startGame;
     e78:	82 87       	std	Z+10, r24	; 0x0a
     e7a:	40 91 76 02 	lds	r20, 0x0276
     e7e:	50 91 77 02 	lds	r21, 0x0277
	
	MENU_addMenuItem("Difficulty", mainMenu, difficultyMenu, 1);
     e82:	21 e0       	ldi	r18, 0x01	; 1
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	8f ef       	ldi	r24, 0xFF	; 255
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	81 df       	rcall	.-254    	; 0xd8e <MENU_addMenuItem>
     e8c:	60 91 78 02 	lds	r22, 0x0278
     e90:	70 91 79 02 	lds	r23, 0x0279
	mainMenu->children[1] = currItem;
     e94:	80 91 72 02 	lds	r24, 0x0272
     e98:	90 91 73 02 	lds	r25, 0x0273
     e9c:	fb 01       	movw	r30, r22
     e9e:	97 83       	std	Z+7, r25	; 0x07
     ea0:	86 83       	std	Z+6, r24	; 0x06
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	50 e0       	ldi	r21, 0x00	; 0
	
	MENU_addMenuItem("Highscores", mainMenu, NULL, 0);
     eaa:	8a e0       	ldi	r24, 0x0A	; 10
     eac:	92 e0       	ldi	r25, 0x02	; 2
     eae:	6f df       	rcall	.-290    	; 0xd8e <MENU_addMenuItem>
     eb0:	60 91 78 02 	lds	r22, 0x0278
     eb4:	70 91 79 02 	lds	r23, 0x0279
     eb8:	80 91 72 02 	lds	r24, 0x0272
	mainMenu->children[2] = currItem;
     ebc:	90 91 73 02 	lds	r25, 0x0273
     ec0:	db 01       	movw	r26, r22
     ec2:	19 96       	adiw	r26, 0x09	; 9
     ec4:	9c 93       	st	X, r25
     ec6:	8e 93       	st	-X, r24
     ec8:	18 97       	sbiw	r26, 0x08	; 8
     eca:	20 e0       	ldi	r18, 0x00	; 0
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	40 e0       	ldi	r20, 0x00	; 0
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	85 e1       	ldi	r24, 0x15	; 21
	
	MENU_addMenuItem("Joy Calib", mainMenu, NULL, 0);
     ed4:	92 e0       	ldi	r25, 0x02	; 2
     ed6:	5b df       	rcall	.-330    	; 0xd8e <MENU_addMenuItem>
     ed8:	60 91 78 02 	lds	r22, 0x0278
     edc:	70 91 79 02 	lds	r23, 0x0279
     ee0:	e0 91 72 02 	lds	r30, 0x0272
	mainMenu->children[3] = currItem;
     ee4:	f0 91 73 02 	lds	r31, 0x0273
     ee8:	db 01       	movw	r26, r22
     eea:	1b 96       	adiw	r26, 0x0b	; 11
     eec:	fc 93       	st	X, r31
     eee:	ee 93       	st	-X, r30
     ef0:	1a 97       	sbiw	r26, 0x0a	; 10
     ef2:	87 e7       	ldi	r24, 0x77	; 119
     ef4:	94 e0       	ldi	r25, 0x04	; 4
     ef6:	93 87       	std	Z+11, r25	; 0x0b
     ef8:	82 87       	std	Z+10, r24	; 0x0a
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
	mainMenu->children[3]->functionPtr = &JOY_calibrate; //assign function to this item
     efe:	40 e0       	ldi	r20, 0x00	; 0
     f00:	50 e0       	ldi	r21, 0x00	; 0
     f02:	8f e1       	ldi	r24, 0x1F	; 31
     f04:	92 e0       	ldi	r25, 0x02	; 2
	
	MENU_addMenuItem("Info", mainMenu, NULL, 0);
     f06:	43 df       	rcall	.-378    	; 0xd8e <MENU_addMenuItem>
     f08:	e0 91 78 02 	lds	r30, 0x0278
     f0c:	f0 91 79 02 	lds	r31, 0x0279
     f10:	80 91 72 02 	lds	r24, 0x0272
     f14:	90 91 73 02 	lds	r25, 0x0273
	mainMenu->children[4] = currItem;
     f18:	95 87       	std	Z+13, r25	; 0x0d
     f1a:	84 87       	std	Z+12, r24	; 0x0c
     f1c:	10 92 73 02 	sts	0x0273, r1
     f20:	10 92 72 02 	sts	0x0272, r1
     f24:	60 91 76 02 	lds	r22, 0x0276
     f28:	70 91 77 02 	lds	r23, 0x0277
	
	currItem = NULL;
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e0       	ldi	r20, 0x00	; 0
	
	MENU_addMenuItem("easy", difficultyMenu, NULL, 0);
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	84 e2       	ldi	r24, 0x24	; 36
     f36:	92 e0       	ldi	r25, 0x02	; 2
     f38:	2a df       	rcall	.-428    	; 0xd8e <MENU_addMenuItem>
     f3a:	60 91 76 02 	lds	r22, 0x0276
     f3e:	70 91 77 02 	lds	r23, 0x0277
     f42:	80 91 72 02 	lds	r24, 0x0272
     f46:	90 91 73 02 	lds	r25, 0x0273
	difficultyMenu->children[0] = currItem;
     f4a:	fb 01       	movw	r30, r22
     f4c:	95 83       	std	Z+5, r25	; 0x05
     f4e:	84 83       	std	Z+4, r24	; 0x04
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e0       	ldi	r20, 0x00	; 0
     f56:	50 e0       	ldi	r21, 0x00	; 0
     f58:	89 e2       	ldi	r24, 0x29	; 41
     f5a:	92 e0       	ldi	r25, 0x02	; 2
     f5c:	18 df       	rcall	.-464    	; 0xd8e <MENU_addMenuItem>
     f5e:	60 91 76 02 	lds	r22, 0x0276
	
	MENU_addMenuItem("medium", difficultyMenu, NULL, 0);
     f62:	70 91 77 02 	lds	r23, 0x0277
     f66:	80 91 72 02 	lds	r24, 0x0272
     f6a:	90 91 73 02 	lds	r25, 0x0273
     f6e:	db 01       	movw	r26, r22
	difficultyMenu->children[1] = currItem;
     f70:	17 96       	adiw	r26, 0x07	; 7
     f72:	9c 93       	st	X, r25
     f74:	8e 93       	st	-X, r24
     f76:	16 97       	sbiw	r26, 0x06	; 6
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	50 e0       	ldi	r21, 0x00	; 0
     f80:	80 e3       	ldi	r24, 0x30	; 48
     f82:	92 e0       	ldi	r25, 0x02	; 2
     f84:	04 df       	rcall	.-504    	; 0xd8e <MENU_addMenuItem>
     f86:	e0 91 76 02 	lds	r30, 0x0276
	
	MENU_addMenuItem("hard", difficultyMenu, NULL, 0);
     f8a:	f0 91 77 02 	lds	r31, 0x0277
     f8e:	80 91 72 02 	lds	r24, 0x0272
     f92:	90 91 73 02 	lds	r25, 0x0273
     f96:	91 87       	std	Z+9, r25	; 0x09
     f98:	80 87       	std	Z+8, r24	; 0x08
	difficultyMenu->children[2] = currItem;
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	08 95       	ret

00000fa0 <MENU_printMenuItem>:
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	ec 01       	movw	r28, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	20 97       	sbiw	r28, 0x00	; 0
     faa:	39 f0       	breq	.+14     	; 0xfba <MENU_printMenuItem+0x1a>
     fac:	6a e0       	ldi	r22, 0x0A	; 10
}
     fae:	70 e0       	ldi	r23, 0x00	; 0
     fb0:	fa d0       	rcall	.+500    	; 0x11a6 <OLED_goto>
     fb2:	88 81       	ld	r24, Y
void MENU_printMenuItem(menuItemNode_t* item, int lineNumber)
{
	if(item != NULL)
	{
		OLED_goto(lineNumber, menuFrameOffset);
		OLED_printString(item->name);
     fb4:	99 81       	ldd	r25, Y+1	; 0x01
     fb6:	25 d2       	rcall	.+1098   	; 0x1402 <OLED_printString>
     fb8:	07 c0       	rjmp	.+14     	; 0xfc8 <MENU_printMenuItem+0x28>
     fba:	85 e3       	ldi	r24, 0x35	; 53
     fbc:	92 e0       	ldi	r25, 0x02	; 2
		//printf("%s\n", item->text);
	}
	else
	{
		printf("NULL pointer...");
     fbe:	9f 93       	push	r25
     fc0:	8f 93       	push	r24
     fc2:	8b d4       	rcall	.+2326   	; 0x18da <printf>
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	08 95       	ret

00000fce <MENU_printMenu>:
	}
}
     fce:	cf 92       	push	r12
     fd0:	df 92       	push	r13
     fd2:	ef 92       	push	r14

void MENU_printMenu(menuNode_t* menu, int noElements)
{
     fd4:	ff 92       	push	r15
     fd6:	0f 93       	push	r16
     fd8:	1f 93       	push	r17
     fda:	cf 93       	push	r28
     fdc:	df 93       	push	r29
     fde:	6c 01       	movw	r12, r24
     fe0:	7b 01       	movw	r14, r22
	//clear the OLED display
	OLED_clear();
     fe2:	fe d0       	rcall	.+508    	; 0x11e0 <OLED_clear>
     fe4:	80 e0       	ldi	r24, 0x00	; 0
	//print arrow
	OLED_moveArrow(0);
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	63 d2       	rcall	.+1222   	; 0x14b0 <OLED_moveArrow>
     fea:	1e 14       	cp	r1, r14
     fec:	1f 04       	cpc	r1, r15
	
	for(int i = 0; i < noElements; i++)
     fee:	7c f4       	brge	.+30     	; 0x100e <MENU_printMenu+0x40>
     ff0:	86 01       	movw	r16, r12
     ff2:	0c 5f       	subi	r16, 0xFC	; 252
     ff4:	1f 4f       	sbci	r17, 0xFF	; 255
     ff6:	c0 e0       	ldi	r28, 0x00	; 0
     ff8:	d0 e0       	ldi	r29, 0x00	; 0
     ffa:	be 01       	movw	r22, r28
     ffc:	f8 01       	movw	r30, r16
	{
		MENU_printMenuItem(menu->children[i], i);
     ffe:	81 91       	ld	r24, Z+
    1000:	91 91       	ld	r25, Z+
    1002:	8f 01       	movw	r16, r30
    1004:	cd df       	rcall	.-102    	; 0xfa0 <MENU_printMenuItem>
    1006:	21 96       	adiw	r28, 0x01	; 1
    1008:	ce 15       	cp	r28, r14
    100a:	df 05       	cpc	r29, r15
	//clear the OLED display
	OLED_clear();
	//print arrow
	OLED_moveArrow(0);
	
	for(int i = 0; i < noElements; i++)
    100c:	b1 f7       	brne	.-20     	; 0xffa <MENU_printMenu+0x2c>
    100e:	d0 92 75 02 	sts	0x0275, r13
    1012:	c0 92 74 02 	sts	0x0274, r12
	{
		MENU_printMenuItem(menu->children[i], i);
	}
	
	//currentMenu points to currently printed menu
	currentMenu = menu;
    1016:	10 92 70 02 	sts	0x0270, r1
    101a:	10 92 6f 02 	sts	0x026F, r1
	
	currentPosition = 0;
    101e:	f6 01       	movw	r30, r12
    1020:	84 81       	ldd	r24, Z+4	; 0x04
    1022:	95 81       	ldd	r25, Z+5	; 0x05
	currItem = currentMenu->children[currentPosition];
    1024:	90 93 73 02 	sts	0x0273, r25
    1028:	80 93 72 02 	sts	0x0272, r24
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	1f 91       	pop	r17
}
    1032:	0f 91       	pop	r16
    1034:	ff 90       	pop	r15
    1036:	ef 90       	pop	r14
    1038:	df 90       	pop	r13
    103a:	cf 90       	pop	r12
    103c:	08 95       	ret

0000103e <MENU_moveUp>:
    103e:	20 91 6f 02 	lds	r18, 0x026F
    1042:	30 91 70 02 	lds	r19, 0x0270
	}
}

void MENU_moveUp()
{
	if(currentPosition > 0)
    1046:	12 16       	cp	r1, r18
    1048:	13 06       	cpc	r1, r19
    104a:	bc f4       	brge	.+46     	; 0x107a <MENU_moveUp+0x3c>
	{
		currentPosition = currentPosition - 1;
    104c:	c9 01       	movw	r24, r18
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	90 93 70 02 	sts	0x0270, r25
    1054:	80 93 6f 02 	sts	0x026F, r24
		currItem = currentMenu->children[currentPosition];
    1058:	e0 91 74 02 	lds	r30, 0x0274
    105c:	f0 91 75 02 	lds	r31, 0x0275
    1060:	2f 5f       	subi	r18, 0xFF	; 255
    1062:	3f 4f       	sbci	r19, 0xFF	; 255
    1064:	22 0f       	add	r18, r18
    1066:	33 1f       	adc	r19, r19
    1068:	e2 0f       	add	r30, r18
    106a:	f3 1f       	adc	r31, r19
    106c:	20 81       	ld	r18, Z
    106e:	31 81       	ldd	r19, Z+1	; 0x01
    1070:	30 93 73 02 	sts	0x0273, r19
    1074:	20 93 72 02 	sts	0x0272, r18
		OLED_moveArrow(currentPosition);
    1078:	1b c2       	rjmp	.+1078   	; 0x14b0 <OLED_moveArrow>
    107a:	08 95       	ret

0000107c <MENU_moveDown>:
    107c:	e0 91 74 02 	lds	r30, 0x0274
	}
}

void MENU_moveDown()
{
	if(currentPosition < currentMenu->noChilds -1)
    1080:	f0 91 75 02 	lds	r31, 0x0275
    1084:	20 91 6f 02 	lds	r18, 0x026F
    1088:	30 91 70 02 	lds	r19, 0x0270
    108c:	82 81       	ldd	r24, Z+2	; 0x02
    108e:	93 81       	ldd	r25, Z+3	; 0x03
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	28 17       	cp	r18, r24
    1094:	39 07       	cpc	r19, r25
    1096:	a4 f4       	brge	.+40     	; 0x10c0 <MENU_moveDown+0x44>
	{
		currentPosition = currentPosition + 1;
    1098:	c9 01       	movw	r24, r18
    109a:	01 96       	adiw	r24, 0x01	; 1
    109c:	90 93 70 02 	sts	0x0270, r25
    10a0:	80 93 6f 02 	sts	0x026F, r24
		currItem = currentMenu->children[currentPosition];
    10a4:	2d 5f       	subi	r18, 0xFD	; 253
    10a6:	3f 4f       	sbci	r19, 0xFF	; 255
    10a8:	22 0f       	add	r18, r18
    10aa:	33 1f       	adc	r19, r19
    10ac:	e2 0f       	add	r30, r18
    10ae:	f3 1f       	adc	r31, r19
    10b0:	20 81       	ld	r18, Z
    10b2:	31 81       	ldd	r19, Z+1	; 0x01
    10b4:	30 93 73 02 	sts	0x0273, r19
    10b8:	20 93 72 02 	sts	0x0272, r18
		OLED_moveArrow(currentPosition);
    10bc:	f9 c1       	rjmp	.+1010   	; 0x14b0 <OLED_moveArrow>
    10be:	08 95       	ret
    10c0:	10 92 70 02 	sts	0x0270, r1
	}
	else
	{
		//go back to first item
		currentPosition = 0;
    10c4:	10 92 6f 02 	sts	0x026F, r1
    10c8:	84 81       	ldd	r24, Z+4	; 0x04
		currItem = currentMenu->children[currentPosition];
    10ca:	95 81       	ldd	r25, Z+5	; 0x05
    10cc:	90 93 73 02 	sts	0x0273, r25
    10d0:	80 93 72 02 	sts	0x0272, r24
    10d4:	80 e0       	ldi	r24, 0x00	; 0
		OLED_moveArrow(currentPosition);
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	eb c1       	rjmp	.+982    	; 0x14b0 <OLED_moveArrow>
    10da:	08 95       	ret

000010dc <MENU_moveLeft>:
    10dc:	e0 91 74 02 	lds	r30, 0x0274
	}
}

void MENU_moveLeft()
{
	if(currentMenu->parentMenu != NULL)
    10e0:	f0 91 75 02 	lds	r31, 0x0275
    10e4:	84 89       	ldd	r24, Z+20	; 0x14
    10e6:	95 89       	ldd	r25, Z+21	; 0x15
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	21 f0       	breq	.+8      	; 0x10f4 <MENU_moveLeft+0x18>
	{
		MENU_printMenu(currentMenu->parentMenu, currentMenu->parentMenu->noChilds);
    10ec:	fc 01       	movw	r30, r24
    10ee:	62 81       	ldd	r22, Z+2	; 0x02
    10f0:	73 81       	ldd	r23, Z+3	; 0x03
    10f2:	6d cf       	rjmp	.-294    	; 0xfce <MENU_printMenu>
    10f4:	08 95       	ret

000010f6 <MENU_reactivate>:
    10f6:	80 91 74 02 	lds	r24, 0x0274
	MENU_waitForInput();
}

void MENU_reactivate()
{
	MENU_printMenu(currentMenu, currentMenu->noChilds);
    10fa:	90 91 75 02 	lds	r25, 0x0275
    10fe:	fc 01       	movw	r30, r24
    1100:	62 81       	ldd	r22, Z+2	; 0x02
    1102:	73 81       	ldd	r23, Z+3	; 0x03
    1104:	64 df       	rcall	.-312    	; 0xfce <MENU_printMenu>
    1106:	18 c0       	rjmp	.+48     	; 0x1138 <MENU_waitForInput>
	MENU_waitForInput();
    1108:	08 95       	ret

0000110a <MENU_moveRight>:
    110a:	e0 91 72 02 	lds	r30, 0x0272
	}
}

void MENU_moveRight()
{
	if(currItem->hasChildMenu)
    110e:	f0 91 73 02 	lds	r31, 0x0273
    1112:	86 81       	ldd	r24, Z+6	; 0x06
    1114:	97 81       	ldd	r25, Z+7	; 0x07
    1116:	89 2b       	or	r24, r25
    1118:	39 f0       	breq	.+14     	; 0x1128 <MENU_moveRight+0x1e>
	MENU_printMenu(currItem->childMenu, currItem->childMenu->noChilds);
    111a:	84 81       	ldd	r24, Z+4	; 0x04
    111c:	95 81       	ldd	r25, Z+5	; 0x05
    111e:	fc 01       	movw	r30, r24
    1120:	62 81       	ldd	r22, Z+2	; 0x02
    1122:	73 81       	ldd	r23, Z+3	; 0x03
    1124:	54 cf       	rjmp	.-344    	; 0xfce <MENU_printMenu>
    1126:	08 95       	ret
    1128:	02 84       	ldd	r0, Z+10	; 0x0a
	
	else if(currItem->functionPtr)
    112a:	f3 85       	ldd	r31, Z+11	; 0x0b
    112c:	e0 2d       	mov	r30, r0
    112e:	30 97       	sbiw	r30, 0x00	; 0
    1130:	11 f0       	breq	.+4      	; 0x1136 <MENU_moveRight+0x2c>
    1132:	09 95       	icall
	{
		currItem->functionPtr();
    1134:	e0 cf       	rjmp	.-64     	; 0x10f6 <MENU_reactivate>
		MENU_reactivate();
    1136:	08 95       	ret

00001138 <MENU_waitForInput>:
    1138:	80 91 6f 02 	lds	r24, 0x026F
	currItem = currentMenu->children[currentPosition];
}

void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
    113c:	90 91 70 02 	lds	r25, 0x0270
    1140:	b7 d1       	rcall	.+878    	; 0x14b0 <OLED_moveArrow>
    1142:	80 91 71 02 	lds	r24, 0x0271
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    1146:	88 23       	and	r24, r24
    1148:	f9 f0       	breq	.+62     	; 0x1188 <MENU_waitForInput+0x50>
    114a:	75 dd       	rcall	.-1302   	; 0xc36 <JOY_getDirection>
	{
		currDir = JOY_getDirection();
    114c:	82 30       	cpi	r24, 0x02	; 2
    114e:	71 f0       	breq	.+28     	; 0x116c <MENU_waitForInput+0x34>
		switch(currDir){
    1150:	18 f4       	brcc	.+6      	; 0x1158 <MENU_waitForInput+0x20>
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	49 f0       	breq	.+18     	; 0x1168 <MENU_waitForInput+0x30>
    1156:	0b c0       	rjmp	.+22     	; 0x116e <MENU_waitForInput+0x36>
    1158:	83 30       	cpi	r24, 0x03	; 3
    115a:	21 f0       	breq	.+8      	; 0x1164 <MENU_waitForInput+0x2c>
    115c:	84 30       	cpi	r24, 0x04	; 4
    115e:	39 f4       	brne	.+14     	; 0x116e <MENU_waitForInput+0x36>
    1160:	bd df       	rcall	.-134    	; 0x10dc <MENU_moveLeft>
    1162:	05 c0       	rjmp	.+10     	; 0x116e <MENU_waitForInput+0x36>
			case LEFT:
			MENU_moveLeft();
    1164:	d2 df       	rcall	.-92     	; 0x110a <MENU_moveRight>
    1166:	03 c0       	rjmp	.+6      	; 0x116e <MENU_waitForInput+0x36>
			break;
    1168:	6a df       	rcall	.-300    	; 0x103e <MENU_moveUp>
			
			case RIGHT:
			MENU_moveRight();
    116a:	01 c0       	rjmp	.+2      	; 0x116e <MENU_waitForInput+0x36>
    116c:	87 df       	rcall	.-242    	; 0x107c <MENU_moveDown>
			break;
    116e:	2f ef       	ldi	r18, 0xFF	; 255
			
			case UP:
			MENU_moveUp();
    1170:	8f e7       	ldi	r24, 0x7F	; 127
    1172:	94 e0       	ldi	r25, 0x04	; 4
			break;
    1174:	21 50       	subi	r18, 0x01	; 1
			
			case DOWN:
			MENU_moveDown();
    1176:	80 40       	sbci	r24, 0x00	; 0
    1178:	90 40       	sbci	r25, 0x00	; 0
    117a:	e1 f7       	brne	.-8      	; 0x1174 <MENU_waitForInput+0x3c>
    117c:	00 c0       	rjmp	.+0      	; 0x117e <MENU_waitForInput+0x46>
    117e:	00 00       	nop
    1180:	80 91 71 02 	lds	r24, 0x0271
    1184:	81 11       	cpse	r24, r1
    1186:	e1 cf       	rjmp	.-62     	; 0x114a <MENU_waitForInput+0x12>
    1188:	08 95       	ret

0000118a <MENU_activate>:
    118a:	81 e0       	ldi	r24, 0x01	; 1
void MENU_waitForInput()
{
	OLED_moveArrow(currentPosition);
	JOY_direction_t currDir;
	
	while(menuActiveFlag)
    118c:	80 93 71 02 	sts	0x0271, r24
    1190:	35 de       	rcall	.-918    	; 0xdfc <MENU_buildMenus>
    1192:	80 91 78 02 	lds	r24, 0x0278
void MENU_activate()
{
	menuActiveFlag = 1;
	//mainMenu = malloc(sizeof(menuItemNode_t));
	MENU_buildMenus();
	MENU_printMenu(mainMenu, mainMenu->noChilds);
    1196:	90 91 79 02 	lds	r25, 0x0279
    119a:	fc 01       	movw	r30, r24
    119c:	62 81       	ldd	r22, Z+2	; 0x02
    119e:	73 81       	ldd	r23, Z+3	; 0x03
    11a0:	16 df       	rcall	.-468    	; 0xfce <MENU_printMenu>
    11a2:	ca cf       	rjmp	.-108    	; 0x1138 <MENU_waitForInput>
    11a4:	08 95       	ret

000011a6 <OLED_goto>:

	// row address
	row = 0xb0 + row; // construction of the page start address

	// column address
	lnib = 0x0f & column; // mask lower nibble from column
    11a6:	26 2f       	mov	r18, r22
    11a8:	2f 70       	andi	r18, 0x0F	; 15
	lnib = 0x00 + lnib; // construction of lower column start address

	hnib = column >> 4; // right shift column to get higher nibble
    11aa:	75 95       	asr	r23
    11ac:	67 95       	ror	r22
    11ae:	75 95       	asr	r23
    11b0:	67 95       	ror	r22
    11b2:	75 95       	asr	r23
    11b4:	67 95       	ror	r22
    11b6:	75 95       	asr	r23
    11b8:	67 95       	ror	r22
	hnib = 0x10 + hnib; // construction of higher column start address
    11ba:	60 5f       	subi	r22, 0xF0	; 240
{
	uint8_t lnib = 0;
	uint8_t hnib = 0;

	// row address
	row = 0xb0 + row; // construction of the page start address
    11bc:	80 55       	subi	r24, 0x50	; 80
    11be:	9f 4f       	sbci	r25, 0xFF	; 255

	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
    11c0:	e0 91 14 01 	lds	r30, 0x0114
    11c4:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    11c8:	80 83       	st	Z, r24
	hnib = column >> 4; // right shift column to get higher nibble
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
    11ca:	e0 91 14 01 	lds	r30, 0x0114
    11ce:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    11d2:	20 83       	st	Z, r18
	hnib = 0x10 + hnib; // construction of higher column start address

	// get to desired page by taking out the orders
	OLED_writeByteToOLED(oled_cmd, row);
	OLED_writeByteToOLED(oled_cmd, lnib);
	OLED_writeByteToOLED(oled_cmd, hnib);
    11d4:	e0 91 14 01 	lds	r30, 0x0114
    11d8:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    11dc:	60 83       	st	Z, r22
    11de:	08 95       	ret

000011e0 <OLED_clear>:

//------------------------------------------------------------------------------
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
	// clear OLED buffer
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    11e6:	80 91 0e 01 	lds	r24, 0x010E
    11ea:	90 91 0f 01 	lds	r25, 0x010F
    11ee:	89 2b       	or	r24, r25
    11f0:	29 f1       	breq	.+74     	; 0x123c <OLED_clear+0x5c>
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
	{
		oled_buffer[i] = 0x00;
    11f6:	e0 91 10 01 	lds	r30, 0x0110
    11fa:	f0 91 11 01 	lds	r31, 0x0111
    11fe:	e8 0f       	add	r30, r24
    1200:	f9 1f       	adc	r31, r25
    1202:	10 82       	st	Z, r1
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	// clear OLED buffer
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    1204:	01 96       	adiw	r24, 0x01	; 1
    1206:	20 91 0e 01 	lds	r18, 0x010E
    120a:	30 91 0f 01 	lds	r19, 0x010F
    120e:	82 17       	cp	r24, r18
    1210:	93 07       	cpc	r25, r19
    1212:	88 f3       	brcs	.-30     	; 0x11f6 <OLED_clear+0x16>
    1214:	13 c0       	rjmp	.+38     	; 0x123c <OLED_clear+0x5c>
	
	// todo: remove later
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	c5 df       	rcall	.-118    	; 0x11a6 <OLED_goto>
    121c:	81 2f       	mov	r24, r17

		for(uint8_t count_column = 0; count_column < width; count_column++)
    121e:	e0 91 12 01 	lds	r30, 0x0112
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    1222:	f0 91 13 01 	lds	r31, 0x0113
    1226:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1228:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    122a:	80 38       	cpi	r24, 0x80	; 128
    122c:	c1 f7       	brne	.-16     	; 0x121e <OLED_clear+0x3e>
    122e:	8c 2f       	mov	r24, r28
	{
		oled_buffer[i] = 0x00;
	}
	
	// todo: remove later
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1230:	9d 2f       	mov	r25, r29
    1232:	21 96       	adiw	r28, 0x01	; 1
    1234:	c9 30       	cpi	r28, 0x09	; 9
    1236:	d1 05       	cpc	r29, r1
    1238:	71 f7       	brne	.-36     	; 0x1216 <OLED_clear+0x36>
    123a:	06 c0       	rjmp	.+12     	; 0x1248 <OLED_clear+0x68>
    123c:	c1 e0       	ldi	r28, 0x01	; 1
// This function clears the whole screen by setting the whole OLED RAM to zero.

void OLED_clear(void)
{
	// clear OLED buffer
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    123e:	d0 e0       	ldi	r29, 0x00	; 0
    1240:	80 e0       	ldi	r24, 0x00	; 0
	{
		oled_buffer[i] = 0x00;
	}
	
	// todo: remove later
	for(uint8_t count_row = 0; count_row < height; count_row++)
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	10 e0       	ldi	r17, 0x00	; 0
	{
		// move to first column in row
		OLED_goto(count_row, 0);

		for(uint8_t count_column = 0; count_column < width; count_column++)
    1246:	e7 cf       	rjmp	.-50     	; 0x1216 <OLED_clear+0x36>
    1248:	df 91       	pop	r29
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    124a:	cf 91       	pop	r28
    124c:	1f 91       	pop	r17
    124e:	08 95       	ret

00001250 <OLED_init>:
    1250:	e0 91 14 01 	lds	r30, 0x0114
//------------------------------------------------------------------------------
// Default initialization routine of the OLED display.

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
    1254:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1258:	8e ea       	ldi	r24, 0xAE	; 174
    125a:	80 83       	st	Z, r24
// Default initialization routine of the OLED display.

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
    125c:	e0 91 14 01 	lds	r30, 0x0114
    1260:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1264:	81 ea       	ldi	r24, 0xA1	; 161
    1266:	80 83       	st	Z, r24

void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
    1268:	e0 91 14 01 	lds	r30, 0x0114
    126c:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1270:	8a ed       	ldi	r24, 0xDA	; 218
    1272:	80 83       	st	Z, r24
void OLED_init(void)
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
    1274:	e0 91 14 01 	lds	r30, 0x0114
    1278:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    127c:	82 e1       	ldi	r24, 0x12	; 18
    127e:	80 83       	st	Z, r24
{
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
    1280:	e0 91 14 01 	lds	r30, 0x0114
    1284:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1288:	88 ec       	ldi	r24, 0xC8	; 200
    128a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xae); // Display off
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
    128c:	e0 91 14 01 	lds	r30, 0x0114
    1290:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1294:	88 ea       	ldi	r24, 0xA8	; 168
    1296:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa1); // Segment remap
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
    1298:	e0 91 14 01 	lds	r30, 0x0114
    129c:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12a0:	8f e3       	ldi	r24, 0x3F	; 63
    12a2:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xda); // Common pads hardware: alternative
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
    12a4:	e0 91 14 01 	lds	r30, 0x0114
    12a8:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12ac:	85 ed       	ldi	r24, 0xD5	; 213
    12ae:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x12);
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
    12b0:	e0 91 14 01 	lds	r30, 0x0114
    12b4:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12b8:	80 e8       	ldi	r24, 0x80	; 128
    12ba:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xc8); // Common output scan direction:com63~com0
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
    12bc:	e0 91 14 01 	lds	r30, 0x0114
    12c0:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12c4:	81 e8       	ldi	r24, 0x81	; 129
    12c6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xa8); // Multiplex ration mode:63
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
    12c8:	e0 91 14 01 	lds	r30, 0x0114
    12cc:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12d0:	80 e5       	ldi	r24, 0x50	; 80
    12d2:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x3f);
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
    12d4:	e0 91 14 01 	lds	r30, 0x0114
    12d8:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12dc:	89 ed       	ldi	r24, 0xD9	; 217
    12de:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd5); // Display divide ratio/osc. freq. mode
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
    12e0:	e0 91 14 01 	lds	r30, 0x0114
    12e4:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12e8:	81 e2       	ldi	r24, 0x21	; 33
    12ea:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x80); // default value is 0x80
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    12ec:	e0 91 14 01 	lds	r30, 0x0114
    12f0:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    12f4:	80 e2       	ldi	r24, 0x20	; 32
    12f6:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x81); // Contrast control
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    12f8:	e0 91 14 01 	lds	r30, 0x0114
    12fc:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1300:	82 e0       	ldi	r24, 0x02	; 2
    1302:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x50); // set contrast
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
    1304:	e0 91 14 01 	lds	r30, 0x0114
    1308:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    130c:	8b ed       	ldi	r24, 0xDB	; 219
    130e:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xd9); // Set pre-charge period
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
    1310:	e0 91 14 01 	lds	r30, 0x0114
    1314:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1318:	80 e3       	ldi	r24, 0x30	; 48
    131a:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x21); // command to set column address !! two cmd bytes missing !!
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
    131c:	e0 91 14 01 	lds	r30, 0x0114
    1320:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1324:	8d ea       	ldi	r24, 0xAD	; 173
    1326:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
    1328:	e0 91 14 01 	lds	r30, 0x0114
    132c:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1330:	10 82       	st	Z, r1
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
    1332:	e0 91 14 01 	lds	r30, 0x0114
    1336:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    133a:	84 ea       	ldi	r24, 0xA4	; 164
    133c:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0xdb); // VCOM deselect level mode
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
    133e:	e0 91 14 01 	lds	r30, 0x0114
    1342:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1346:	86 ea       	ldi	r24, 0xA6	; 166
    1348:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x30);
	OLED_writeByteToOLED(oled_cmd, 0xad); // Master configuration
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
    134a:	e0 91 14 01 	lds	r30, 0x0114
    134e:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1352:	8f ea       	ldi	r24, 0xAF	; 175
    1354:	80 83       	st	Z, r24
	OLED_writeByteToOLED(oled_cmd, 0x00);
	OLED_writeByteToOLED(oled_cmd, 0xa4); // Out follows RAM content
	OLED_writeByteToOLED(oled_cmd, 0xa6); // Set normal display
	OLED_writeByteToOLED(oled_cmd, 0xaf); // Display on
	
	OLED_clear(); // wipe the screen
    1356:	44 cf       	rjmp	.-376    	; 0x11e0 <OLED_clear>
    1358:	08 95       	ret

0000135a <OLED_updateScreen>:
    135a:	e0 91 14 01 	lds	r30, 0x0114
	// set column address
// 	OLED_writeByteToOLED(oled_cmd_ext_ram, 0x21); // command to set column address
// 	OLED_writeByteToOLED(oled_cmd_ext_ram, 0x00); // column start address ~ 0d
// 	OLED_writeByteToOLED(oled_cmd_ext_ram, 0x7f); // column end address ~ 127d
	// set horizontal addressing mode
	OLED_writeByteToOLED(oled_cmd, 0x20); // set memory addressing mode
    135e:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1362:	80 e2       	ldi	r24, 0x20	; 32
    1364:	80 83       	st	Z, r24
// 	OLED_writeByteToOLED(oled_cmd_ext_ram, 0x21); // command to set column address
// 	OLED_writeByteToOLED(oled_cmd_ext_ram, 0x00); // column start address ~ 0d
// 	OLED_writeByteToOLED(oled_cmd_ext_ram, 0x7f); // column end address ~ 127d
	// set horizontal addressing mode
	OLED_writeByteToOLED(oled_cmd, 0x20); // set memory addressing mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // set horizontal addressing mode ~ 0d
    1366:	e0 91 14 01 	lds	r30, 0x0114
    136a:	f0 91 15 01 	lds	r31, 0x0115
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    136e:	10 82       	st	Z, r1
	// set horizontal addressing mode
	OLED_writeByteToOLED(oled_cmd, 0x20); // set memory addressing mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // set horizontal addressing mode ~ 0d
	
	// write OLED buffer to OLED Memory
	OLED_goto(0,0); // todo: start writing in top left corner (maybe not further needed)
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	80 e0       	ldi	r24, 0x00	; 0
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	16 df       	rcall	.-468    	; 0x11a6 <OLED_goto>
    137a:	80 91 0e 01 	lds	r24, 0x010E
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    137e:	90 91 0f 01 	lds	r25, 0x010F
    1382:	89 2b       	or	r24, r25
    1384:	b1 f0       	breq	.+44     	; 0x13b2 <OLED_updateScreen+0x58>
    1386:	80 e0       	ldi	r24, 0x00	; 0
    1388:	90 e0       	ldi	r25, 0x00	; 0
    138a:	e0 91 10 01 	lds	r30, 0x0110
	{
		OLED_writeByteToOLED(oled_data, oled_buffer[i]);
    138e:	f0 91 11 01 	lds	r31, 0x0111
    1392:	e8 0f       	add	r30, r24
    1394:	f9 1f       	adc	r31, r25
    1396:	20 81       	ld	r18, Z
    1398:	e0 91 12 01 	lds	r30, 0x0112
    139c:	f0 91 13 01 	lds	r31, 0x0113
    13a0:	20 83       	st	Z, r18
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13a2:	01 96       	adiw	r24, 0x01	; 1
	OLED_writeByteToOLED(oled_cmd, 0x20); // set memory addressing mode
	OLED_writeByteToOLED(oled_cmd, 0x00); // set horizontal addressing mode ~ 0d
	
	// write OLED buffer to OLED Memory
	OLED_goto(0,0); // todo: start writing in top left corner (maybe not further needed)
	for(uint16_t i = 0; i < oled_buffer_size; i++)
    13a4:	20 91 0e 01 	lds	r18, 0x010E
    13a8:	30 91 0f 01 	lds	r19, 0x010F
    13ac:	82 17       	cp	r24, r18
    13ae:	93 07       	cpc	r25, r19
    13b0:	60 f3       	brcs	.-40     	; 0x138a <OLED_updateScreen+0x30>
    13b2:	e0 91 14 01 	lds	r30, 0x0114
		OLED_writeByteToOLED(oled_data, oled_buffer[i]);
	}
	
	// todo: remove later
	// go back to page adressing mode
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
    13b6:	f0 91 15 01 	lds	r31, 0x0115
    13ba:	80 e2       	ldi	r24, 0x20	; 32
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13bc:	80 83       	st	Z, r24
    13be:	e0 91 14 01 	lds	r30, 0x0114
	}
	
	// todo: remove later
	// go back to page adressing mode
	OLED_writeByteToOLED(oled_cmd, 0x20); // Set Memory Addressing Mode
	OLED_writeByteToOLED(oled_cmd, 0x02); // Page addressing mode
    13c2:	f0 91 15 01 	lds	r31, 0x0115
    13c6:	82 e0       	ldi	r24, 0x02	; 2
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13c8:	80 83       	st	Z, r24
    13ca:	08 95       	ret

000013cc <OLED_printCharacter>:
    13cc:	80 52       	subi	r24, 0x20	; 32
// number has to be subtracted in order to access the right position in the font
// table.

void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	22 0f       	add	r18, r18
    13d4:	33 1f       	adc	r19, r19
    13d6:	22 0f       	add	r18, r18
    13d8:	33 1f       	adc	r19, r19
    13da:	22 0f       	add	r18, r18
    13dc:	33 1f       	adc	r19, r19
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	20 59       	subi	r18, 0x90	; 144
    13e4:	3f 4f       	sbci	r19, 0xFF	; 255
    13e6:	f9 01       	movw	r30, r18
    13e8:	e8 0f       	add	r30, r24
    13ea:	f9 1f       	adc	r31, r25
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
    13ec:	e4 91       	lpm	r30, Z
    13ee:	a0 91 12 01 	lds	r26, 0x0112
    13f2:	b0 91 13 01 	lds	r27, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    13f6:	ec 93       	st	X, r30
    13f8:	01 96       	adiw	r24, 0x01	; 1
void OLED_printCharacter(uint8_t character)
{
	character = character-32; // map character to font table
	
	// print 8 columns into OLED RAM
	for(uint8_t i = 0; i < 8; i++)
    13fa:	88 30       	cpi	r24, 0x08	; 8
    13fc:	91 05       	cpc	r25, r1
    13fe:	99 f7       	brne	.-26     	; 0x13e6 <OLED_printCharacter+0x1a>
	{
		OLED_writeByteToOLED(oled_data, pgm_read_byte(&font8[character][i]));
	}
}
    1400:	08 95       	ret

00001402 <OLED_printString>:

//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
    1402:	1f 93       	push	r17
    1404:	cf 93       	push	r28
    1406:	df 93       	push	r29
    1408:	ec 01       	movw	r28, r24
	for(uint8_t i = 0; i < strlen(msg); i++)
    140a:	10 e0       	ldi	r17, 0x00	; 0
    140c:	06 c0       	rjmp	.+12     	; 0x141a <OLED_printString+0x18>
	{
		OLED_printCharacter(msg[i]);
    140e:	fe 01       	movw	r30, r28
    1410:	e8 0f       	add	r30, r24
    1412:	f9 1f       	adc	r31, r25
    1414:	80 81       	ld	r24, Z
    1416:	da df       	rcall	.-76     	; 0x13cc <OLED_printCharacter>
    1418:	1f 5f       	subi	r17, 0xFF	; 255
//------------------------------------------------------------------------------
// This function allows to print Strings to the OLED display

void OLED_printString(char* msg)
{
	for(uint8_t i = 0; i < strlen(msg); i++)
    141a:	81 2f       	mov	r24, r17
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	fe 01       	movw	r30, r28
    1420:	01 90       	ld	r0, Z+
    1422:	00 20       	and	r0, r0
    1424:	e9 f7       	brne	.-6      	; 0x1420 <OLED_printString+0x1e>
    1426:	31 97       	sbiw	r30, 0x01	; 1
    1428:	ec 1b       	sub	r30, r28
    142a:	fd 0b       	sbc	r31, r29
    142c:	8e 17       	cp	r24, r30
    142e:	9f 07       	cpc	r25, r31
    1430:	70 f3       	brcs	.-36     	; 0x140e <OLED_printString+0xc>
    1432:	df 91       	pop	r29
	{
		OLED_printCharacter(msg[i]);
	}
}
    1434:	cf 91       	pop	r28
    1436:	1f 91       	pop	r17
    1438:	08 95       	ret

0000143a <OLED_printArrow>:
    143a:	e0 91 12 01 	lds	r30, 0x0112
// This function prints an arrow to the OLED display

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
    143e:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1442:	88 e1       	ldi	r24, 0x18	; 24
    1444:	80 83       	st	Z, r24

void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    1446:	e0 91 12 01 	lds	r30, 0x0112
    144a:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    144e:	80 83       	st	Z, r24
void OLED_printArrow(void)
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
    1450:	e0 91 12 01 	lds	r30, 0x0112
    1454:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1458:	9e e7       	ldi	r25, 0x7E	; 126
    145a:	90 83       	st	Z, r25
{
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
    145c:	e0 91 12 01 	lds	r30, 0x0112
    1460:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1464:	9c e3       	ldi	r25, 0x3C	; 60
    1466:	90 83       	st	Z, r25
	//change the arrow_width as changing the size here
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b00011000);
	OLED_writeByteToOLED(oled_data, 0b01111110);
	OLED_writeByteToOLED(oled_data, 0b00111100);
	OLED_writeByteToOLED(oled_data, 0b00011000);
    1468:	e0 91 12 01 	lds	r30, 0x0112
    146c:	f0 91 13 01 	lds	r31, 0x0113
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1470:	80 83       	st	Z, r24
    1472:	08 95       	ret

00001474 <OLED_clearArrow>:
//------------------------------------------------------------------------------
// This function clears the first columns in the size of the arrow from the 
// OLED display

void OLED_clearArrow(void)
{
    1474:	1f 93       	push	r17
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
    147a:	c1 e0       	ldi	r28, 0x01	; 1
    147c:	d0 e0       	ldi	r29, 0x00	; 0
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	90 e0       	ldi	r25, 0x00	; 0
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1482:	10 e0       	ldi	r17, 0x00	; 0
void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row
    1484:	60 e0       	ldi	r22, 0x00	; 0
    1486:	70 e0       	ldi	r23, 0x00	; 0
    1488:	8e de       	rcall	.-740    	; 0x11a6 <OLED_goto>
    148a:	81 2f       	mov	r24, r17

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    148c:	e0 91 12 01 	lds	r30, 0x0112
		{
			OLED_writeByteToOLED(oled_data, 0x00);
    1490:	f0 91 13 01 	lds	r31, 0x0113
    1494:	10 82       	st	Z, r1
//------------------------------------------------------------------------------
// This Function writes the Byte _data to a specified (*_address) position in 
// the OLED RAM.
void OLED_writeByteToOLED(volatile uint8_t *address, uint8_t data)
{
	*address = data;
    1496:	8f 5f       	subi	r24, 0xFF	; 255
	for(uint8_t count_row = 0; count_row < height; count_row++)
	{
		OLED_goto(count_row,0); // move to first column in row

		// the inner loop iterates the columns of each row
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
    1498:	85 30       	cpi	r24, 0x05	; 5
    149a:	c1 f7       	brne	.-16     	; 0x148c <OLED_clearArrow+0x18>
    149c:	8c 2f       	mov	r24, r28
// OLED display

void OLED_clearArrow(void)
{
	// the outer loop iterates the display rows
	for(uint8_t count_row = 0; count_row < height; count_row++)
    149e:	9d 2f       	mov	r25, r29
    14a0:	21 96       	adiw	r28, 0x01	; 1
    14a2:	c9 30       	cpi	r28, 0x09	; 9
    14a4:	d1 05       	cpc	r29, r1
    14a6:	71 f7       	brne	.-36     	; 0x1484 <OLED_clearArrow+0x10>
    14a8:	df 91       	pop	r29
		for(uint8_t count_column = 0; count_column < arrow_width; count_column++)
		{
			OLED_writeByteToOLED(oled_data, 0x00);
		}
	}
}
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	08 95       	ret

000014b0 <OLED_moveArrow>:
    14b0:	cf 93       	push	r28
//------------------------------------------------------------------------------
// This function can be used to remove the arrow from its old row and move
// it to a new one.

void OLED_moveArrow(int joy_counter)
{
    14b2:	df 93       	push	r29
    14b4:	ec 01       	movw	r28, r24
	OLED_clearArrow(); // clear the arrow space
    14b6:	de df       	rcall	.-68     	; 0x1474 <OLED_clearArrow>
    14b8:	60 e0       	ldi	r22, 0x00	; 0
	OLED_goto(joy_counter,0); // move cursor to specified row
    14ba:	70 e0       	ldi	r23, 0x00	; 0
    14bc:	ce 01       	movw	r24, r28
    14be:	73 de       	rcall	.-794    	; 0x11a6 <OLED_goto>
    14c0:	bc df       	rcall	.-136    	; 0x143a <OLED_printArrow>
    14c2:	df 91       	pop	r29
	OLED_printArrow(); // print arrow
    14c4:	cf 91       	pop	r28
    14c6:	08 95       	ret

000014c8 <SLI_init>:
SLI_position_t currentSliPosition;

// set initial values for Position and Buttons
void SLI_init()
{
	currentSliPosition.R_abs = 0;
    14c8:	10 92 7c 02 	sts	0x027C, r1
	currentSliPosition.L_abs = 0;
    14cc:	10 92 7d 02 	sts	0x027D, r1
	currentSliPosition.R_per = 0;
    14d0:	10 92 7e 02 	sts	0x027E, r1
	currentSliPosition.L_per = 0;
    14d4:	10 92 7f 02 	sts	0x027F, r1
    14d8:	08 95       	ret

000014da <SPI_init>:

void SPI_init()
{
	//init external interrupt INT2 on falling edge
	#if defined(__AVR_ATmega162__)
		set_bit(GICR, INT2);
    14da:	8b b7       	in	r24, 0x3b	; 59
    14dc:	80 62       	ori	r24, 0x20	; 32
    14de:	8b bf       	out	0x3b, r24	; 59
		clear_bit(EMCUCR, ISC2);
    14e0:	86 b7       	in	r24, 0x36	; 54
    14e2:	8e 7f       	andi	r24, 0xFE	; 254
    14e4:	86 bf       	out	0x36, r24	; 54
		
		// Set _SS, MOSI and SCK output, all others input
		DDR_SPI |= (1<<SS_CAN_CONTROLLER_PIN_MODE) | (1<<MOSI_PIN) | (1<<SCK_PIN);
    14e6:	87 b3       	in	r24, 0x17	; 23
    14e8:	80 6b       	ori	r24, 0xB0	; 176
    14ea:	87 bb       	out	0x17, r24	; 23
	#endif
	
	

	// Enable SPI, Master, set clock rate fck/4
	SPCR = (1<<SPE) | (1<<MSTR);
    14ec:	80 e5       	ldi	r24, 0x50	; 80
    14ee:	8d b9       	out	0x0d, r24	; 13
	
	// clock rate fck/2
	SPSR = (1<<SPI2X);
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	8e b9       	out	0x0e, r24	; 14

	// set SS_CAN_CONTROLLER high for default (slave not selected)
	set_bit(PORT_SPI, SS_CAN_CONTROLLER_PIN);
    14f4:	c4 9a       	sbi	0x18, 4	; 24
    14f6:	08 95       	ret

000014f8 <SPI_send>:
}

void SPI_send(uint8_t cData)
{
	// Start transmission
	SPDR = cData;
    14f8:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    14fa:	77 9b       	sbis	0x0e, 7	; 14
    14fc:	fe cf       	rjmp	.-4      	; 0x14fa <SPI_send+0x2>
}
    14fe:	08 95       	ret

00001500 <SPI_receive>:

uint8_t SPI_receive()
{
	//To receive byte from the slave a dummy byte should be sent
	SPI_send((uint8_t)0xff);
    1500:	8f ef       	ldi	r24, 0xFF	; 255
    1502:	fa df       	rcall	.-12     	; 0x14f8 <SPI_send>
    1504:	77 9b       	sbis	0x0e, 7	; 14

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
    1506:	fe cf       	rjmp	.-4      	; 0x1504 <SPI_receive+0x4>
    1508:	8f b1       	in	r24, 0x0f	; 15

	//read the buffer
	uint8_t data = SPDR;
    150a:	08 95       	ret

0000150c <SPI_activateSlave>:

	return data;
}
    150c:	81 11       	cpse	r24, r1

void SPI_activateSlave(SPI_SLAVES slave)
{
	switch (slave)
    150e:	01 c0       	rjmp	.+2      	; 0x1512 <SPI_activateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		SELECT_CAN_CONTROLLER_SLAVE;
    1510:	c4 98       	cbi	0x18, 4	; 24
    1512:	08 95       	ret

00001514 <SPI_deactivateSlave>:
	}
}

void SPI_deactivateSlave(SPI_SLAVES slave)
{
	switch (slave)
    1514:	81 11       	cpse	r24, r1
    1516:	01 c0       	rjmp	.+2      	; 0x151a <SPI_deactivateSlave+0x6>
	{
		case SS_CAN_CONTROLLER:
		UNSELECT_CAN_CONTROLLER_SLAVE;
    1518:	c4 9a       	sbi	0x18, 4	; 24
    151a:	08 95       	ret

0000151c <uartSend>:
#include "UARTlib.h"

void uartSend(const char byte2Send)
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
    151c:	5d 9b       	sbis	0x0b, 5	; 11
    151e:	fe cf       	rjmp	.-4      	; 0x151c <uartSend>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
    1520:	8c b9       	out	0x0c, r24	; 12
    1522:	08 95       	ret

00001524 <uartReceive>:
}

uint8_t uartReceive()
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) );
    1524:	5f 9b       	sbis	0x0b, 7	; 11
    1526:	fe cf       	rjmp	.-4      	; 0x1524 <uartReceive>
	/* Get and return received data from buffer */
	uint8_t receivedByte = UDR0;
    1528:	8c b1       	in	r24, 0x0c	; 12
	
	return receivedByte;
}
    152a:	08 95       	ret

0000152c <uartInit>:

void uartInit(uint32_t baud, uint32_t fosc, uint32_t ubrr)
{	
    152c:	ef 92       	push	r14
    152e:	ff 92       	push	r15
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
	/*Set BAUD rate*/
	UBRR0H = (uint8_t) (ubrr>>8);
    1534:	bb 27       	eor	r27, r27
    1536:	a1 2f       	mov	r26, r17
    1538:	90 2f       	mov	r25, r16
    153a:	8f 2d       	mov	r24, r15
    153c:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (uint8_t) ubrr;
    153e:	e9 b8       	out	0x09, r14	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    1540:	88 e1       	ldi	r24, 0x18	; 24
    1542:	8a b9       	out	0x0a, r24	; 10
	
	//Enable UART0 interrupts
	set_bit(UCSR0B, RXCIE0);
    1544:	57 9a       	sbi	0x0a, 7	; 10
	
	/* Set frame format: 8data, 2stop bit */
	#if defined(__AVR_ATmega162__)
		UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
    1546:	8e e8       	ldi	r24, 0x8E	; 142
    1548:	80 bd       	out	0x20, r24	; 32
	
	#if defined(__AVR_ATmega2560__)
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	#endif
	
	fdevopen(uartSend, uartReceive); //if there are any problems with this try &uartSend &uartReceive
    154a:	62 e9       	ldi	r22, 0x92	; 146
    154c:	7a e0       	ldi	r23, 0x0A	; 10
    154e:	8e e8       	ldi	r24, 0x8E	; 142
    1550:	9a e0       	ldi	r25, 0x0A	; 10
    1552:	79 d1       	rcall	.+754    	; 0x1846 <fdevopen>
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	ff 90       	pop	r15
    155a:	ef 90       	pop	r14
    155c:	08 95       	ret

0000155e <ADC_request>:
void ADC_init()
{
	//TBD
}

void ADC_request(uint8_t channel, volatile char *ADC_ADDRESS){
    155e:	9b 01       	movw	r18, r22
	
	switch(channel){
    1560:	82 30       	cpi	r24, 0x02	; 2
    1562:	69 f0       	breq	.+26     	; 0x157e <ADC_request+0x20>
    1564:	18 f4       	brcc	.+6      	; 0x156c <ADC_request+0xe>
    1566:	81 30       	cpi	r24, 0x01	; 1
    1568:	31 f0       	breq	.+12     	; 0x1576 <ADC_request+0x18>
    156a:	15 c0       	rjmp	.+42     	; 0x1596 <ADC_request+0x38>
    156c:	83 30       	cpi	r24, 0x03	; 3
    156e:	59 f0       	breq	.+22     	; 0x1586 <ADC_request+0x28>
    1570:	84 30       	cpi	r24, 0x04	; 4
    1572:	69 f0       	breq	.+26     	; 0x158e <ADC_request+0x30>
    1574:	10 c0       	rjmp	.+32     	; 0x1596 <ADC_request+0x38>
		case 1:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch1);
    1576:	64 e0       	ldi	r22, 0x04	; 4
    1578:	c9 01       	movw	r24, r18
    157a:	a3 c9       	rjmp	.-3258   	; 0x8c2 <saveToAddress>
    157c:	08 95       	ret
			break;
    157e:	65 e0       	ldi	r22, 0x05	; 5
			
		case 2:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch2);
    1580:	c9 01       	movw	r24, r18
    1582:	9f c9       	rjmp	.-3266   	; 0x8c2 <saveToAddress>
    1584:	08 95       	ret
    1586:	66 e0       	ldi	r22, 0x06	; 6
			break;
    1588:	c9 01       	movw	r24, r18
			
		case 3:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch3);
    158a:	9b c9       	rjmp	.-3274   	; 0x8c2 <saveToAddress>
    158c:	08 95       	ret
    158e:	67 e0       	ldi	r22, 0x07	; 7
    1590:	c9 01       	movw	r24, r18
			break;
    1592:	97 c9       	rjmp	.-3282   	; 0x8c2 <saveToAddress>
			
		case 4:
			saveToAddress(ADC_ADDRESS, (uint8_t)ch4);
    1594:	08 95       	ret
    1596:	85 e4       	ldi	r24, 0x45	; 69
    1598:	92 e0       	ldi	r25, 0x02	; 2
    159a:	9f 93       	push	r25
			break;
    159c:	8f 93       	push	r24
			
		default:
			printf("Problems with ADC...");
    159e:	9d d1       	rcall	.+826    	; 0x18da <printf>
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	08 95       	ret

000015a6 <ADC_read>:
    15a6:	8a c9       	rjmp	.-3308   	; 0x8bc <readFromAddress>
    15a8:	08 95       	ret

000015aa <__divmodhi4>:
			break;
    15aa:	97 fb       	bst	r25, 7
    15ac:	07 2e       	mov	r0, r23
    15ae:	16 f4       	brtc	.+4      	; 0x15b4 <__divmodhi4+0xa>
    15b0:	00 94       	com	r0
    15b2:	06 d0       	rcall	.+12     	; 0x15c0 <__divmodhi4_neg1>
    15b4:	77 fd       	sbrc	r23, 7
    15b6:	08 d0       	rcall	.+16     	; 0x15c8 <__divmodhi4_neg2>
    15b8:	0b d0       	rcall	.+22     	; 0x15d0 <__udivmodhi4>
    15ba:	07 fc       	sbrc	r0, 7
    15bc:	05 d0       	rcall	.+10     	; 0x15c8 <__divmodhi4_neg2>
    15be:	3e f4       	brtc	.+14     	; 0x15ce <__divmodhi4_exit>

000015c0 <__divmodhi4_neg1>:
    15c0:	90 95       	com	r25
    15c2:	81 95       	neg	r24
    15c4:	9f 4f       	sbci	r25, 0xFF	; 255
    15c6:	08 95       	ret

000015c8 <__divmodhi4_neg2>:
    15c8:	70 95       	com	r23
    15ca:	61 95       	neg	r22
    15cc:	7f 4f       	sbci	r23, 0xFF	; 255

000015ce <__divmodhi4_exit>:
    15ce:	08 95       	ret

000015d0 <__udivmodhi4>:
    15d0:	aa 1b       	sub	r26, r26
    15d2:	bb 1b       	sub	r27, r27
    15d4:	51 e1       	ldi	r21, 0x11	; 17
    15d6:	07 c0       	rjmp	.+14     	; 0x15e6 <__udivmodhi4_ep>

000015d8 <__udivmodhi4_loop>:
    15d8:	aa 1f       	adc	r26, r26
    15da:	bb 1f       	adc	r27, r27
    15dc:	a6 17       	cp	r26, r22
    15de:	b7 07       	cpc	r27, r23
    15e0:	10 f0       	brcs	.+4      	; 0x15e6 <__udivmodhi4_ep>
    15e2:	a6 1b       	sub	r26, r22
    15e4:	b7 0b       	sbc	r27, r23

000015e6 <__udivmodhi4_ep>:
    15e6:	88 1f       	adc	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	5a 95       	dec	r21
    15ec:	a9 f7       	brne	.-22     	; 0x15d8 <__udivmodhi4_loop>
    15ee:	80 95       	com	r24
    15f0:	90 95       	com	r25
    15f2:	bc 01       	movw	r22, r24
    15f4:	cd 01       	movw	r24, r26
    15f6:	08 95       	ret

000015f8 <malloc>:
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	82 30       	cpi	r24, 0x02	; 2
    15fe:	91 05       	cpc	r25, r1
    1600:	10 f4       	brcc	.+4      	; 0x1606 <malloc+0xe>
    1602:	82 e0       	ldi	r24, 0x02	; 2
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	e0 91 82 02 	lds	r30, 0x0282
    160a:	f0 91 83 02 	lds	r31, 0x0283
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	30 97       	sbiw	r30, 0x00	; 0
    1618:	39 f1       	breq	.+78     	; 0x1668 <malloc+0x70>
    161a:	40 81       	ld	r20, Z
    161c:	51 81       	ldd	r21, Z+1	; 0x01
    161e:	48 17       	cp	r20, r24
    1620:	59 07       	cpc	r21, r25
    1622:	b8 f0       	brcs	.+46     	; 0x1652 <malloc+0x5a>
    1624:	48 17       	cp	r20, r24
    1626:	59 07       	cpc	r21, r25
    1628:	71 f4       	brne	.+28     	; 0x1646 <malloc+0x4e>
    162a:	82 81       	ldd	r24, Z+2	; 0x02
    162c:	93 81       	ldd	r25, Z+3	; 0x03
    162e:	10 97       	sbiw	r26, 0x00	; 0
    1630:	29 f0       	breq	.+10     	; 0x163c <malloc+0x44>
    1632:	13 96       	adiw	r26, 0x03	; 3
    1634:	9c 93       	st	X, r25
    1636:	8e 93       	st	-X, r24
    1638:	12 97       	sbiw	r26, 0x02	; 2
    163a:	2c c0       	rjmp	.+88     	; 0x1694 <malloc+0x9c>
    163c:	90 93 83 02 	sts	0x0283, r25
    1640:	80 93 82 02 	sts	0x0282, r24
    1644:	27 c0       	rjmp	.+78     	; 0x1694 <malloc+0x9c>
    1646:	21 15       	cp	r18, r1
    1648:	31 05       	cpc	r19, r1
    164a:	31 f0       	breq	.+12     	; 0x1658 <malloc+0x60>
    164c:	42 17       	cp	r20, r18
    164e:	53 07       	cpc	r21, r19
    1650:	18 f0       	brcs	.+6      	; 0x1658 <malloc+0x60>
    1652:	a9 01       	movw	r20, r18
    1654:	db 01       	movw	r26, r22
    1656:	01 c0       	rjmp	.+2      	; 0x165a <malloc+0x62>
    1658:	ef 01       	movw	r28, r30
    165a:	9a 01       	movw	r18, r20
    165c:	bd 01       	movw	r22, r26
    165e:	df 01       	movw	r26, r30
    1660:	02 80       	ldd	r0, Z+2	; 0x02
    1662:	f3 81       	ldd	r31, Z+3	; 0x03
    1664:	e0 2d       	mov	r30, r0
    1666:	d7 cf       	rjmp	.-82     	; 0x1616 <malloc+0x1e>
    1668:	21 15       	cp	r18, r1
    166a:	31 05       	cpc	r19, r1
    166c:	f9 f0       	breq	.+62     	; 0x16ac <malloc+0xb4>
    166e:	28 1b       	sub	r18, r24
    1670:	39 0b       	sbc	r19, r25
    1672:	24 30       	cpi	r18, 0x04	; 4
    1674:	31 05       	cpc	r19, r1
    1676:	80 f4       	brcc	.+32     	; 0x1698 <malloc+0xa0>
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	9b 81       	ldd	r25, Y+3	; 0x03
    167c:	61 15       	cp	r22, r1
    167e:	71 05       	cpc	r23, r1
    1680:	21 f0       	breq	.+8      	; 0x168a <malloc+0x92>
    1682:	fb 01       	movw	r30, r22
    1684:	93 83       	std	Z+3, r25	; 0x03
    1686:	82 83       	std	Z+2, r24	; 0x02
    1688:	04 c0       	rjmp	.+8      	; 0x1692 <malloc+0x9a>
    168a:	90 93 83 02 	sts	0x0283, r25
    168e:	80 93 82 02 	sts	0x0282, r24
    1692:	fe 01       	movw	r30, r28
    1694:	32 96       	adiw	r30, 0x02	; 2
    1696:	44 c0       	rjmp	.+136    	; 0x1720 <malloc+0x128>
    1698:	fe 01       	movw	r30, r28
    169a:	e2 0f       	add	r30, r18
    169c:	f3 1f       	adc	r31, r19
    169e:	81 93       	st	Z+, r24
    16a0:	91 93       	st	Z+, r25
    16a2:	22 50       	subi	r18, 0x02	; 2
    16a4:	31 09       	sbc	r19, r1
    16a6:	39 83       	std	Y+1, r19	; 0x01
    16a8:	28 83       	st	Y, r18
    16aa:	3a c0       	rjmp	.+116    	; 0x1720 <malloc+0x128>
    16ac:	20 91 80 02 	lds	r18, 0x0280
    16b0:	30 91 81 02 	lds	r19, 0x0281
    16b4:	23 2b       	or	r18, r19
    16b6:	41 f4       	brne	.+16     	; 0x16c8 <malloc+0xd0>
    16b8:	20 91 02 01 	lds	r18, 0x0102
    16bc:	30 91 03 01 	lds	r19, 0x0103
    16c0:	30 93 81 02 	sts	0x0281, r19
    16c4:	20 93 80 02 	sts	0x0280, r18
    16c8:	20 91 00 01 	lds	r18, 0x0100
    16cc:	30 91 01 01 	lds	r19, 0x0101
    16d0:	21 15       	cp	r18, r1
    16d2:	31 05       	cpc	r19, r1
    16d4:	41 f4       	brne	.+16     	; 0x16e6 <malloc+0xee>
    16d6:	2d b7       	in	r18, 0x3d	; 61
    16d8:	3e b7       	in	r19, 0x3e	; 62
    16da:	40 91 04 01 	lds	r20, 0x0104
    16de:	50 91 05 01 	lds	r21, 0x0105
    16e2:	24 1b       	sub	r18, r20
    16e4:	35 0b       	sbc	r19, r21
    16e6:	e0 91 80 02 	lds	r30, 0x0280
    16ea:	f0 91 81 02 	lds	r31, 0x0281
    16ee:	e2 17       	cp	r30, r18
    16f0:	f3 07       	cpc	r31, r19
    16f2:	a0 f4       	brcc	.+40     	; 0x171c <malloc+0x124>
    16f4:	2e 1b       	sub	r18, r30
    16f6:	3f 0b       	sbc	r19, r31
    16f8:	28 17       	cp	r18, r24
    16fa:	39 07       	cpc	r19, r25
    16fc:	78 f0       	brcs	.+30     	; 0x171c <malloc+0x124>
    16fe:	ac 01       	movw	r20, r24
    1700:	4e 5f       	subi	r20, 0xFE	; 254
    1702:	5f 4f       	sbci	r21, 0xFF	; 255
    1704:	24 17       	cp	r18, r20
    1706:	35 07       	cpc	r19, r21
    1708:	48 f0       	brcs	.+18     	; 0x171c <malloc+0x124>
    170a:	4e 0f       	add	r20, r30
    170c:	5f 1f       	adc	r21, r31
    170e:	50 93 81 02 	sts	0x0281, r21
    1712:	40 93 80 02 	sts	0x0280, r20
    1716:	81 93       	st	Z+, r24
    1718:	91 93       	st	Z+, r25
    171a:	02 c0       	rjmp	.+4      	; 0x1720 <malloc+0x128>
    171c:	e0 e0       	ldi	r30, 0x00	; 0
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	cf 01       	movw	r24, r30
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret

00001728 <free>:
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	09 f4       	brne	.+2      	; 0x1732 <free+0xa>
    1730:	87 c0       	rjmp	.+270    	; 0x1840 <free+0x118>
    1732:	fc 01       	movw	r30, r24
    1734:	32 97       	sbiw	r30, 0x02	; 2
    1736:	13 82       	std	Z+3, r1	; 0x03
    1738:	12 82       	std	Z+2, r1	; 0x02
    173a:	c0 91 82 02 	lds	r28, 0x0282
    173e:	d0 91 83 02 	lds	r29, 0x0283
    1742:	20 97       	sbiw	r28, 0x00	; 0
    1744:	81 f4       	brne	.+32     	; 0x1766 <free+0x3e>
    1746:	20 81       	ld	r18, Z
    1748:	31 81       	ldd	r19, Z+1	; 0x01
    174a:	28 0f       	add	r18, r24
    174c:	39 1f       	adc	r19, r25
    174e:	80 91 80 02 	lds	r24, 0x0280
    1752:	90 91 81 02 	lds	r25, 0x0281
    1756:	82 17       	cp	r24, r18
    1758:	93 07       	cpc	r25, r19
    175a:	79 f5       	brne	.+94     	; 0x17ba <free+0x92>
    175c:	f0 93 81 02 	sts	0x0281, r31
    1760:	e0 93 80 02 	sts	0x0280, r30
    1764:	6d c0       	rjmp	.+218    	; 0x1840 <free+0x118>
    1766:	de 01       	movw	r26, r28
    1768:	20 e0       	ldi	r18, 0x00	; 0
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	ae 17       	cp	r26, r30
    176e:	bf 07       	cpc	r27, r31
    1770:	50 f4       	brcc	.+20     	; 0x1786 <free+0x5e>
    1772:	12 96       	adiw	r26, 0x02	; 2
    1774:	4d 91       	ld	r20, X+
    1776:	5c 91       	ld	r21, X
    1778:	13 97       	sbiw	r26, 0x03	; 3
    177a:	9d 01       	movw	r18, r26
    177c:	41 15       	cp	r20, r1
    177e:	51 05       	cpc	r21, r1
    1780:	09 f1       	breq	.+66     	; 0x17c4 <free+0x9c>
    1782:	da 01       	movw	r26, r20
    1784:	f3 cf       	rjmp	.-26     	; 0x176c <free+0x44>
    1786:	b3 83       	std	Z+3, r27	; 0x03
    1788:	a2 83       	std	Z+2, r26	; 0x02
    178a:	40 81       	ld	r20, Z
    178c:	51 81       	ldd	r21, Z+1	; 0x01
    178e:	84 0f       	add	r24, r20
    1790:	95 1f       	adc	r25, r21
    1792:	8a 17       	cp	r24, r26
    1794:	9b 07       	cpc	r25, r27
    1796:	71 f4       	brne	.+28     	; 0x17b4 <free+0x8c>
    1798:	8d 91       	ld	r24, X+
    179a:	9c 91       	ld	r25, X
    179c:	11 97       	sbiw	r26, 0x01	; 1
    179e:	84 0f       	add	r24, r20
    17a0:	95 1f       	adc	r25, r21
    17a2:	02 96       	adiw	r24, 0x02	; 2
    17a4:	91 83       	std	Z+1, r25	; 0x01
    17a6:	80 83       	st	Z, r24
    17a8:	12 96       	adiw	r26, 0x02	; 2
    17aa:	8d 91       	ld	r24, X+
    17ac:	9c 91       	ld	r25, X
    17ae:	13 97       	sbiw	r26, 0x03	; 3
    17b0:	93 83       	std	Z+3, r25	; 0x03
    17b2:	82 83       	std	Z+2, r24	; 0x02
    17b4:	21 15       	cp	r18, r1
    17b6:	31 05       	cpc	r19, r1
    17b8:	29 f4       	brne	.+10     	; 0x17c4 <free+0x9c>
    17ba:	f0 93 83 02 	sts	0x0283, r31
    17be:	e0 93 82 02 	sts	0x0282, r30
    17c2:	3e c0       	rjmp	.+124    	; 0x1840 <free+0x118>
    17c4:	d9 01       	movw	r26, r18
    17c6:	13 96       	adiw	r26, 0x03	; 3
    17c8:	fc 93       	st	X, r31
    17ca:	ee 93       	st	-X, r30
    17cc:	12 97       	sbiw	r26, 0x02	; 2
    17ce:	4d 91       	ld	r20, X+
    17d0:	5d 91       	ld	r21, X+
    17d2:	a4 0f       	add	r26, r20
    17d4:	b5 1f       	adc	r27, r21
    17d6:	ea 17       	cp	r30, r26
    17d8:	fb 07       	cpc	r31, r27
    17da:	79 f4       	brne	.+30     	; 0x17fa <free+0xd2>
    17dc:	80 81       	ld	r24, Z
    17de:	91 81       	ldd	r25, Z+1	; 0x01
    17e0:	84 0f       	add	r24, r20
    17e2:	95 1f       	adc	r25, r21
    17e4:	02 96       	adiw	r24, 0x02	; 2
    17e6:	d9 01       	movw	r26, r18
    17e8:	11 96       	adiw	r26, 0x01	; 1
    17ea:	9c 93       	st	X, r25
    17ec:	8e 93       	st	-X, r24
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	13 96       	adiw	r26, 0x03	; 3
    17f4:	9c 93       	st	X, r25
    17f6:	8e 93       	st	-X, r24
    17f8:	12 97       	sbiw	r26, 0x02	; 2
    17fa:	e0 e0       	ldi	r30, 0x00	; 0
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1800:	9b 81       	ldd	r25, Y+3	; 0x03
    1802:	00 97       	sbiw	r24, 0x00	; 0
    1804:	19 f0       	breq	.+6      	; 0x180c <free+0xe4>
    1806:	fe 01       	movw	r30, r28
    1808:	ec 01       	movw	r28, r24
    180a:	f9 cf       	rjmp	.-14     	; 0x17fe <free+0xd6>
    180c:	ce 01       	movw	r24, r28
    180e:	02 96       	adiw	r24, 0x02	; 2
    1810:	28 81       	ld	r18, Y
    1812:	39 81       	ldd	r19, Y+1	; 0x01
    1814:	82 0f       	add	r24, r18
    1816:	93 1f       	adc	r25, r19
    1818:	20 91 80 02 	lds	r18, 0x0280
    181c:	30 91 81 02 	lds	r19, 0x0281
    1820:	28 17       	cp	r18, r24
    1822:	39 07       	cpc	r19, r25
    1824:	69 f4       	brne	.+26     	; 0x1840 <free+0x118>
    1826:	30 97       	sbiw	r30, 0x00	; 0
    1828:	29 f4       	brne	.+10     	; 0x1834 <free+0x10c>
    182a:	10 92 83 02 	sts	0x0283, r1
    182e:	10 92 82 02 	sts	0x0282, r1
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <free+0x110>
    1834:	13 82       	std	Z+3, r1	; 0x03
    1836:	12 82       	std	Z+2, r1	; 0x02
    1838:	d0 93 81 02 	sts	0x0281, r29
    183c:	c0 93 80 02 	sts	0x0280, r28
    1840:	df 91       	pop	r29
    1842:	cf 91       	pop	r28
    1844:	08 95       	ret

00001846 <fdevopen>:
    1846:	0f 93       	push	r16
    1848:	1f 93       	push	r17
    184a:	cf 93       	push	r28
    184c:	df 93       	push	r29
    184e:	ec 01       	movw	r28, r24
    1850:	8b 01       	movw	r16, r22
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	31 f4       	brne	.+12     	; 0x1862 <fdevopen+0x1c>
    1856:	61 15       	cp	r22, r1
    1858:	71 05       	cpc	r23, r1
    185a:	19 f4       	brne	.+6      	; 0x1862 <fdevopen+0x1c>
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	37 c0       	rjmp	.+110    	; 0x18d0 <fdevopen+0x8a>
    1862:	6e e0       	ldi	r22, 0x0E	; 14
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	3d d2       	rcall	.+1146   	; 0x1ce6 <calloc>
    186c:	fc 01       	movw	r30, r24
    186e:	00 97       	sbiw	r24, 0x00	; 0
    1870:	a9 f3       	breq	.-22     	; 0x185c <fdevopen+0x16>
    1872:	80 e8       	ldi	r24, 0x80	; 128
    1874:	83 83       	std	Z+3, r24	; 0x03
    1876:	01 15       	cp	r16, r1
    1878:	11 05       	cpc	r17, r1
    187a:	71 f0       	breq	.+28     	; 0x1898 <fdevopen+0x52>
    187c:	13 87       	std	Z+11, r17	; 0x0b
    187e:	02 87       	std	Z+10, r16	; 0x0a
    1880:	81 e8       	ldi	r24, 0x81	; 129
    1882:	83 83       	std	Z+3, r24	; 0x03
    1884:	80 91 84 02 	lds	r24, 0x0284
    1888:	90 91 85 02 	lds	r25, 0x0285
    188c:	89 2b       	or	r24, r25
    188e:	21 f4       	brne	.+8      	; 0x1898 <fdevopen+0x52>
    1890:	f0 93 85 02 	sts	0x0285, r31
    1894:	e0 93 84 02 	sts	0x0284, r30
    1898:	20 97       	sbiw	r28, 0x00	; 0
    189a:	c9 f0       	breq	.+50     	; 0x18ce <fdevopen+0x88>
    189c:	d1 87       	std	Z+9, r29	; 0x09
    189e:	c0 87       	std	Z+8, r28	; 0x08
    18a0:	83 81       	ldd	r24, Z+3	; 0x03
    18a2:	82 60       	ori	r24, 0x02	; 2
    18a4:	83 83       	std	Z+3, r24	; 0x03
    18a6:	80 91 86 02 	lds	r24, 0x0286
    18aa:	90 91 87 02 	lds	r25, 0x0287
    18ae:	89 2b       	or	r24, r25
    18b0:	71 f4       	brne	.+28     	; 0x18ce <fdevopen+0x88>
    18b2:	f0 93 87 02 	sts	0x0287, r31
    18b6:	e0 93 86 02 	sts	0x0286, r30
    18ba:	80 91 88 02 	lds	r24, 0x0288
    18be:	90 91 89 02 	lds	r25, 0x0289
    18c2:	89 2b       	or	r24, r25
    18c4:	21 f4       	brne	.+8      	; 0x18ce <fdevopen+0x88>
    18c6:	f0 93 89 02 	sts	0x0289, r31
    18ca:	e0 93 88 02 	sts	0x0288, r30
    18ce:	cf 01       	movw	r24, r30
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	1f 91       	pop	r17
    18d6:	0f 91       	pop	r16
    18d8:	08 95       	ret

000018da <printf>:
    18da:	a0 e0       	ldi	r26, 0x00	; 0
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e2 e7       	ldi	r30, 0x72	; 114
    18e0:	fc e0       	ldi	r31, 0x0C	; 12
    18e2:	d8 c2       	rjmp	.+1456   	; 0x1e94 <__prologue_saves__+0x20>
    18e4:	fe 01       	movw	r30, r28
    18e6:	35 96       	adiw	r30, 0x05	; 5
    18e8:	61 91       	ld	r22, Z+
    18ea:	71 91       	ld	r23, Z+
    18ec:	af 01       	movw	r20, r30
    18ee:	80 91 86 02 	lds	r24, 0x0286
    18f2:	90 91 87 02 	lds	r25, 0x0287
    18f6:	34 d0       	rcall	.+104    	; 0x1960 <vfprintf>
    18f8:	e2 e0       	ldi	r30, 0x02	; 2
    18fa:	e8 c2       	rjmp	.+1488   	; 0x1ecc <__epilogue_restores__+0x20>

000018fc <putchar>:
    18fc:	60 91 86 02 	lds	r22, 0x0286
    1900:	70 91 87 02 	lds	r23, 0x0287
    1904:	27 c2       	rjmp	.+1102   	; 0x1d54 <fputc>

00001906 <puts>:
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	e0 91 86 02 	lds	r30, 0x0286
    1912:	f0 91 87 02 	lds	r31, 0x0287
    1916:	23 81       	ldd	r18, Z+3	; 0x03
    1918:	21 ff       	sbrs	r18, 1
    191a:	1b c0       	rjmp	.+54     	; 0x1952 <puts+0x4c>
    191c:	ec 01       	movw	r28, r24
    191e:	00 e0       	ldi	r16, 0x00	; 0
    1920:	10 e0       	ldi	r17, 0x00	; 0
    1922:	89 91       	ld	r24, Y+
    1924:	60 91 86 02 	lds	r22, 0x0286
    1928:	70 91 87 02 	lds	r23, 0x0287
    192c:	db 01       	movw	r26, r22
    192e:	18 96       	adiw	r26, 0x08	; 8
    1930:	ed 91       	ld	r30, X+
    1932:	fc 91       	ld	r31, X
    1934:	19 97       	sbiw	r26, 0x09	; 9
    1936:	88 23       	and	r24, r24
    1938:	31 f0       	breq	.+12     	; 0x1946 <puts+0x40>
    193a:	09 95       	icall
    193c:	89 2b       	or	r24, r25
    193e:	89 f3       	breq	.-30     	; 0x1922 <puts+0x1c>
    1940:	0f ef       	ldi	r16, 0xFF	; 255
    1942:	1f ef       	ldi	r17, 0xFF	; 255
    1944:	ee cf       	rjmp	.-36     	; 0x1922 <puts+0x1c>
    1946:	8a e0       	ldi	r24, 0x0A	; 10
    1948:	09 95       	icall
    194a:	89 2b       	or	r24, r25
    194c:	11 f4       	brne	.+4      	; 0x1952 <puts+0x4c>
    194e:	c8 01       	movw	r24, r16
    1950:	02 c0       	rjmp	.+4      	; 0x1956 <puts+0x50>
    1952:	8f ef       	ldi	r24, 0xFF	; 255
    1954:	9f ef       	ldi	r25, 0xFF	; 255
    1956:	df 91       	pop	r29
    1958:	cf 91       	pop	r28
    195a:	1f 91       	pop	r17
    195c:	0f 91       	pop	r16
    195e:	08 95       	ret

00001960 <vfprintf>:
    1960:	ac e0       	ldi	r26, 0x0C	; 12
    1962:	b0 e0       	ldi	r27, 0x00	; 0
    1964:	e5 eb       	ldi	r30, 0xB5	; 181
    1966:	fc e0       	ldi	r31, 0x0C	; 12
    1968:	85 c2       	rjmp	.+1290   	; 0x1e74 <__prologue_saves__>
    196a:	7c 01       	movw	r14, r24
    196c:	6b 01       	movw	r12, r22
    196e:	8a 01       	movw	r16, r20
    1970:	fc 01       	movw	r30, r24
    1972:	17 82       	std	Z+7, r1	; 0x07
    1974:	16 82       	std	Z+6, r1	; 0x06
    1976:	83 81       	ldd	r24, Z+3	; 0x03
    1978:	81 ff       	sbrs	r24, 1
    197a:	b0 c1       	rjmp	.+864    	; 0x1cdc <vfprintf+0x37c>
    197c:	ce 01       	movw	r24, r28
    197e:	01 96       	adiw	r24, 0x01	; 1
    1980:	4c 01       	movw	r8, r24
    1982:	f7 01       	movw	r30, r14
    1984:	93 81       	ldd	r25, Z+3	; 0x03
    1986:	f6 01       	movw	r30, r12
    1988:	93 fd       	sbrc	r25, 3
    198a:	85 91       	lpm	r24, Z+
    198c:	93 ff       	sbrs	r25, 3
    198e:	81 91       	ld	r24, Z+
    1990:	6f 01       	movw	r12, r30
    1992:	88 23       	and	r24, r24
    1994:	09 f4       	brne	.+2      	; 0x1998 <vfprintf+0x38>
    1996:	9e c1       	rjmp	.+828    	; 0x1cd4 <vfprintf+0x374>
    1998:	85 32       	cpi	r24, 0x25	; 37
    199a:	39 f4       	brne	.+14     	; 0x19aa <vfprintf+0x4a>
    199c:	93 fd       	sbrc	r25, 3
    199e:	85 91       	lpm	r24, Z+
    19a0:	93 ff       	sbrs	r25, 3
    19a2:	81 91       	ld	r24, Z+
    19a4:	6f 01       	movw	r12, r30
    19a6:	85 32       	cpi	r24, 0x25	; 37
    19a8:	21 f4       	brne	.+8      	; 0x19b2 <vfprintf+0x52>
    19aa:	b7 01       	movw	r22, r14
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	d2 d1       	rcall	.+932    	; 0x1d54 <fputc>
    19b0:	e8 cf       	rjmp	.-48     	; 0x1982 <vfprintf+0x22>
    19b2:	51 2c       	mov	r5, r1
    19b4:	31 2c       	mov	r3, r1
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	20 32       	cpi	r18, 0x20	; 32
    19ba:	a0 f4       	brcc	.+40     	; 0x19e4 <vfprintf+0x84>
    19bc:	8b 32       	cpi	r24, 0x2B	; 43
    19be:	69 f0       	breq	.+26     	; 0x19da <vfprintf+0x7a>
    19c0:	30 f4       	brcc	.+12     	; 0x19ce <vfprintf+0x6e>
    19c2:	80 32       	cpi	r24, 0x20	; 32
    19c4:	59 f0       	breq	.+22     	; 0x19dc <vfprintf+0x7c>
    19c6:	83 32       	cpi	r24, 0x23	; 35
    19c8:	69 f4       	brne	.+26     	; 0x19e4 <vfprintf+0x84>
    19ca:	20 61       	ori	r18, 0x10	; 16
    19cc:	2c c0       	rjmp	.+88     	; 0x1a26 <vfprintf+0xc6>
    19ce:	8d 32       	cpi	r24, 0x2D	; 45
    19d0:	39 f0       	breq	.+14     	; 0x19e0 <vfprintf+0x80>
    19d2:	80 33       	cpi	r24, 0x30	; 48
    19d4:	39 f4       	brne	.+14     	; 0x19e4 <vfprintf+0x84>
    19d6:	21 60       	ori	r18, 0x01	; 1
    19d8:	26 c0       	rjmp	.+76     	; 0x1a26 <vfprintf+0xc6>
    19da:	22 60       	ori	r18, 0x02	; 2
    19dc:	24 60       	ori	r18, 0x04	; 4
    19de:	23 c0       	rjmp	.+70     	; 0x1a26 <vfprintf+0xc6>
    19e0:	28 60       	ori	r18, 0x08	; 8
    19e2:	21 c0       	rjmp	.+66     	; 0x1a26 <vfprintf+0xc6>
    19e4:	27 fd       	sbrc	r18, 7
    19e6:	27 c0       	rjmp	.+78     	; 0x1a36 <vfprintf+0xd6>
    19e8:	30 ed       	ldi	r19, 0xD0	; 208
    19ea:	38 0f       	add	r19, r24
    19ec:	3a 30       	cpi	r19, 0x0A	; 10
    19ee:	78 f4       	brcc	.+30     	; 0x1a0e <vfprintf+0xae>
    19f0:	26 ff       	sbrs	r18, 6
    19f2:	06 c0       	rjmp	.+12     	; 0x1a00 <vfprintf+0xa0>
    19f4:	fa e0       	ldi	r31, 0x0A	; 10
    19f6:	5f 9e       	mul	r5, r31
    19f8:	30 0d       	add	r19, r0
    19fa:	11 24       	eor	r1, r1
    19fc:	53 2e       	mov	r5, r19
    19fe:	13 c0       	rjmp	.+38     	; 0x1a26 <vfprintf+0xc6>
    1a00:	8a e0       	ldi	r24, 0x0A	; 10
    1a02:	38 9e       	mul	r3, r24
    1a04:	30 0d       	add	r19, r0
    1a06:	11 24       	eor	r1, r1
    1a08:	33 2e       	mov	r3, r19
    1a0a:	20 62       	ori	r18, 0x20	; 32
    1a0c:	0c c0       	rjmp	.+24     	; 0x1a26 <vfprintf+0xc6>
    1a0e:	8e 32       	cpi	r24, 0x2E	; 46
    1a10:	21 f4       	brne	.+8      	; 0x1a1a <vfprintf+0xba>
    1a12:	26 fd       	sbrc	r18, 6
    1a14:	5f c1       	rjmp	.+702    	; 0x1cd4 <vfprintf+0x374>
    1a16:	20 64       	ori	r18, 0x40	; 64
    1a18:	06 c0       	rjmp	.+12     	; 0x1a26 <vfprintf+0xc6>
    1a1a:	8c 36       	cpi	r24, 0x6C	; 108
    1a1c:	11 f4       	brne	.+4      	; 0x1a22 <vfprintf+0xc2>
    1a1e:	20 68       	ori	r18, 0x80	; 128
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <vfprintf+0xc6>
    1a22:	88 36       	cpi	r24, 0x68	; 104
    1a24:	41 f4       	brne	.+16     	; 0x1a36 <vfprintf+0xd6>
    1a26:	f6 01       	movw	r30, r12
    1a28:	93 fd       	sbrc	r25, 3
    1a2a:	85 91       	lpm	r24, Z+
    1a2c:	93 ff       	sbrs	r25, 3
    1a2e:	81 91       	ld	r24, Z+
    1a30:	6f 01       	movw	r12, r30
    1a32:	81 11       	cpse	r24, r1
    1a34:	c1 cf       	rjmp	.-126    	; 0x19b8 <vfprintf+0x58>
    1a36:	98 2f       	mov	r25, r24
    1a38:	9f 7d       	andi	r25, 0xDF	; 223
    1a3a:	95 54       	subi	r25, 0x45	; 69
    1a3c:	93 30       	cpi	r25, 0x03	; 3
    1a3e:	28 f4       	brcc	.+10     	; 0x1a4a <vfprintf+0xea>
    1a40:	0c 5f       	subi	r16, 0xFC	; 252
    1a42:	1f 4f       	sbci	r17, 0xFF	; 255
    1a44:	ff e3       	ldi	r31, 0x3F	; 63
    1a46:	f9 83       	std	Y+1, r31	; 0x01
    1a48:	0d c0       	rjmp	.+26     	; 0x1a64 <vfprintf+0x104>
    1a4a:	83 36       	cpi	r24, 0x63	; 99
    1a4c:	31 f0       	breq	.+12     	; 0x1a5a <vfprintf+0xfa>
    1a4e:	83 37       	cpi	r24, 0x73	; 115
    1a50:	71 f0       	breq	.+28     	; 0x1a6e <vfprintf+0x10e>
    1a52:	83 35       	cpi	r24, 0x53	; 83
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <vfprintf+0xf8>
    1a56:	57 c0       	rjmp	.+174    	; 0x1b06 <vfprintf+0x1a6>
    1a58:	21 c0       	rjmp	.+66     	; 0x1a9c <vfprintf+0x13c>
    1a5a:	f8 01       	movw	r30, r16
    1a5c:	80 81       	ld	r24, Z
    1a5e:	89 83       	std	Y+1, r24	; 0x01
    1a60:	0e 5f       	subi	r16, 0xFE	; 254
    1a62:	1f 4f       	sbci	r17, 0xFF	; 255
    1a64:	44 24       	eor	r4, r4
    1a66:	43 94       	inc	r4
    1a68:	51 2c       	mov	r5, r1
    1a6a:	54 01       	movw	r10, r8
    1a6c:	14 c0       	rjmp	.+40     	; 0x1a96 <vfprintf+0x136>
    1a6e:	38 01       	movw	r6, r16
    1a70:	f2 e0       	ldi	r31, 0x02	; 2
    1a72:	6f 0e       	add	r6, r31
    1a74:	71 1c       	adc	r7, r1
    1a76:	f8 01       	movw	r30, r16
    1a78:	a0 80       	ld	r10, Z
    1a7a:	b1 80       	ldd	r11, Z+1	; 0x01
    1a7c:	26 ff       	sbrs	r18, 6
    1a7e:	03 c0       	rjmp	.+6      	; 0x1a86 <vfprintf+0x126>
    1a80:	65 2d       	mov	r22, r5
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	02 c0       	rjmp	.+4      	; 0x1a8a <vfprintf+0x12a>
    1a86:	6f ef       	ldi	r22, 0xFF	; 255
    1a88:	7f ef       	ldi	r23, 0xFF	; 255
    1a8a:	c5 01       	movw	r24, r10
    1a8c:	2c 87       	std	Y+12, r18	; 0x0c
    1a8e:	57 d1       	rcall	.+686    	; 0x1d3e <strnlen>
    1a90:	2c 01       	movw	r4, r24
    1a92:	83 01       	movw	r16, r6
    1a94:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a96:	2f 77       	andi	r18, 0x7F	; 127
    1a98:	22 2e       	mov	r2, r18
    1a9a:	16 c0       	rjmp	.+44     	; 0x1ac8 <vfprintf+0x168>
    1a9c:	38 01       	movw	r6, r16
    1a9e:	f2 e0       	ldi	r31, 0x02	; 2
    1aa0:	6f 0e       	add	r6, r31
    1aa2:	71 1c       	adc	r7, r1
    1aa4:	f8 01       	movw	r30, r16
    1aa6:	a0 80       	ld	r10, Z
    1aa8:	b1 80       	ldd	r11, Z+1	; 0x01
    1aaa:	26 ff       	sbrs	r18, 6
    1aac:	03 c0       	rjmp	.+6      	; 0x1ab4 <vfprintf+0x154>
    1aae:	65 2d       	mov	r22, r5
    1ab0:	70 e0       	ldi	r23, 0x00	; 0
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <vfprintf+0x158>
    1ab4:	6f ef       	ldi	r22, 0xFF	; 255
    1ab6:	7f ef       	ldi	r23, 0xFF	; 255
    1ab8:	c5 01       	movw	r24, r10
    1aba:	2c 87       	std	Y+12, r18	; 0x0c
    1abc:	2e d1       	rcall	.+604    	; 0x1d1a <strnlen_P>
    1abe:	2c 01       	movw	r4, r24
    1ac0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ac2:	20 68       	ori	r18, 0x80	; 128
    1ac4:	22 2e       	mov	r2, r18
    1ac6:	83 01       	movw	r16, r6
    1ac8:	23 fc       	sbrc	r2, 3
    1aca:	19 c0       	rjmp	.+50     	; 0x1afe <vfprintf+0x19e>
    1acc:	83 2d       	mov	r24, r3
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	48 16       	cp	r4, r24
    1ad2:	59 06       	cpc	r5, r25
    1ad4:	a0 f4       	brcc	.+40     	; 0x1afe <vfprintf+0x19e>
    1ad6:	b7 01       	movw	r22, r14
    1ad8:	80 e2       	ldi	r24, 0x20	; 32
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	3b d1       	rcall	.+630    	; 0x1d54 <fputc>
    1ade:	3a 94       	dec	r3
    1ae0:	f5 cf       	rjmp	.-22     	; 0x1acc <vfprintf+0x16c>
    1ae2:	f5 01       	movw	r30, r10
    1ae4:	27 fc       	sbrc	r2, 7
    1ae6:	85 91       	lpm	r24, Z+
    1ae8:	27 fe       	sbrs	r2, 7
    1aea:	81 91       	ld	r24, Z+
    1aec:	5f 01       	movw	r10, r30
    1aee:	b7 01       	movw	r22, r14
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	30 d1       	rcall	.+608    	; 0x1d54 <fputc>
    1af4:	31 10       	cpse	r3, r1
    1af6:	3a 94       	dec	r3
    1af8:	f1 e0       	ldi	r31, 0x01	; 1
    1afa:	4f 1a       	sub	r4, r31
    1afc:	51 08       	sbc	r5, r1
    1afe:	41 14       	cp	r4, r1
    1b00:	51 04       	cpc	r5, r1
    1b02:	79 f7       	brne	.-34     	; 0x1ae2 <vfprintf+0x182>
    1b04:	de c0       	rjmp	.+444    	; 0x1cc2 <vfprintf+0x362>
    1b06:	84 36       	cpi	r24, 0x64	; 100
    1b08:	11 f0       	breq	.+4      	; 0x1b0e <vfprintf+0x1ae>
    1b0a:	89 36       	cpi	r24, 0x69	; 105
    1b0c:	31 f5       	brne	.+76     	; 0x1b5a <vfprintf+0x1fa>
    1b0e:	f8 01       	movw	r30, r16
    1b10:	27 ff       	sbrs	r18, 7
    1b12:	07 c0       	rjmp	.+14     	; 0x1b22 <vfprintf+0x1c2>
    1b14:	60 81       	ld	r22, Z
    1b16:	71 81       	ldd	r23, Z+1	; 0x01
    1b18:	82 81       	ldd	r24, Z+2	; 0x02
    1b1a:	93 81       	ldd	r25, Z+3	; 0x03
    1b1c:	0c 5f       	subi	r16, 0xFC	; 252
    1b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b20:	08 c0       	rjmp	.+16     	; 0x1b32 <vfprintf+0x1d2>
    1b22:	60 81       	ld	r22, Z
    1b24:	71 81       	ldd	r23, Z+1	; 0x01
    1b26:	88 27       	eor	r24, r24
    1b28:	77 fd       	sbrc	r23, 7
    1b2a:	80 95       	com	r24
    1b2c:	98 2f       	mov	r25, r24
    1b2e:	0e 5f       	subi	r16, 0xFE	; 254
    1b30:	1f 4f       	sbci	r17, 0xFF	; 255
    1b32:	2f 76       	andi	r18, 0x6F	; 111
    1b34:	b2 2e       	mov	r11, r18
    1b36:	97 ff       	sbrs	r25, 7
    1b38:	09 c0       	rjmp	.+18     	; 0x1b4c <vfprintf+0x1ec>
    1b3a:	90 95       	com	r25
    1b3c:	80 95       	com	r24
    1b3e:	70 95       	com	r23
    1b40:	61 95       	neg	r22
    1b42:	7f 4f       	sbci	r23, 0xFF	; 255
    1b44:	8f 4f       	sbci	r24, 0xFF	; 255
    1b46:	9f 4f       	sbci	r25, 0xFF	; 255
    1b48:	20 68       	ori	r18, 0x80	; 128
    1b4a:	b2 2e       	mov	r11, r18
    1b4c:	2a e0       	ldi	r18, 0x0A	; 10
    1b4e:	30 e0       	ldi	r19, 0x00	; 0
    1b50:	a4 01       	movw	r20, r8
    1b52:	32 d1       	rcall	.+612    	; 0x1db8 <__ultoa_invert>
    1b54:	a8 2e       	mov	r10, r24
    1b56:	a8 18       	sub	r10, r8
    1b58:	43 c0       	rjmp	.+134    	; 0x1be0 <vfprintf+0x280>
    1b5a:	85 37       	cpi	r24, 0x75	; 117
    1b5c:	29 f4       	brne	.+10     	; 0x1b68 <vfprintf+0x208>
    1b5e:	2f 7e       	andi	r18, 0xEF	; 239
    1b60:	b2 2e       	mov	r11, r18
    1b62:	2a e0       	ldi	r18, 0x0A	; 10
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	25 c0       	rjmp	.+74     	; 0x1bb2 <vfprintf+0x252>
    1b68:	f2 2f       	mov	r31, r18
    1b6a:	f9 7f       	andi	r31, 0xF9	; 249
    1b6c:	bf 2e       	mov	r11, r31
    1b6e:	8f 36       	cpi	r24, 0x6F	; 111
    1b70:	c1 f0       	breq	.+48     	; 0x1ba2 <vfprintf+0x242>
    1b72:	18 f4       	brcc	.+6      	; 0x1b7a <vfprintf+0x21a>
    1b74:	88 35       	cpi	r24, 0x58	; 88
    1b76:	79 f0       	breq	.+30     	; 0x1b96 <vfprintf+0x236>
    1b78:	ad c0       	rjmp	.+346    	; 0x1cd4 <vfprintf+0x374>
    1b7a:	80 37       	cpi	r24, 0x70	; 112
    1b7c:	19 f0       	breq	.+6      	; 0x1b84 <vfprintf+0x224>
    1b7e:	88 37       	cpi	r24, 0x78	; 120
    1b80:	21 f0       	breq	.+8      	; 0x1b8a <vfprintf+0x22a>
    1b82:	a8 c0       	rjmp	.+336    	; 0x1cd4 <vfprintf+0x374>
    1b84:	2f 2f       	mov	r18, r31
    1b86:	20 61       	ori	r18, 0x10	; 16
    1b88:	b2 2e       	mov	r11, r18
    1b8a:	b4 fe       	sbrs	r11, 4
    1b8c:	0d c0       	rjmp	.+26     	; 0x1ba8 <vfprintf+0x248>
    1b8e:	8b 2d       	mov	r24, r11
    1b90:	84 60       	ori	r24, 0x04	; 4
    1b92:	b8 2e       	mov	r11, r24
    1b94:	09 c0       	rjmp	.+18     	; 0x1ba8 <vfprintf+0x248>
    1b96:	24 ff       	sbrs	r18, 4
    1b98:	0a c0       	rjmp	.+20     	; 0x1bae <vfprintf+0x24e>
    1b9a:	9f 2f       	mov	r25, r31
    1b9c:	96 60       	ori	r25, 0x06	; 6
    1b9e:	b9 2e       	mov	r11, r25
    1ba0:	06 c0       	rjmp	.+12     	; 0x1bae <vfprintf+0x24e>
    1ba2:	28 e0       	ldi	r18, 0x08	; 8
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	05 c0       	rjmp	.+10     	; 0x1bb2 <vfprintf+0x252>
    1ba8:	20 e1       	ldi	r18, 0x10	; 16
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <vfprintf+0x252>
    1bae:	20 e1       	ldi	r18, 0x10	; 16
    1bb0:	32 e0       	ldi	r19, 0x02	; 2
    1bb2:	f8 01       	movw	r30, r16
    1bb4:	b7 fe       	sbrs	r11, 7
    1bb6:	07 c0       	rjmp	.+14     	; 0x1bc6 <vfprintf+0x266>
    1bb8:	60 81       	ld	r22, Z
    1bba:	71 81       	ldd	r23, Z+1	; 0x01
    1bbc:	82 81       	ldd	r24, Z+2	; 0x02
    1bbe:	93 81       	ldd	r25, Z+3	; 0x03
    1bc0:	0c 5f       	subi	r16, 0xFC	; 252
    1bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc4:	06 c0       	rjmp	.+12     	; 0x1bd2 <vfprintf+0x272>
    1bc6:	60 81       	ld	r22, Z
    1bc8:	71 81       	ldd	r23, Z+1	; 0x01
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	0e 5f       	subi	r16, 0xFE	; 254
    1bd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bd2:	a4 01       	movw	r20, r8
    1bd4:	f1 d0       	rcall	.+482    	; 0x1db8 <__ultoa_invert>
    1bd6:	a8 2e       	mov	r10, r24
    1bd8:	a8 18       	sub	r10, r8
    1bda:	fb 2d       	mov	r31, r11
    1bdc:	ff 77       	andi	r31, 0x7F	; 127
    1bde:	bf 2e       	mov	r11, r31
    1be0:	b6 fe       	sbrs	r11, 6
    1be2:	0b c0       	rjmp	.+22     	; 0x1bfa <vfprintf+0x29a>
    1be4:	2b 2d       	mov	r18, r11
    1be6:	2e 7f       	andi	r18, 0xFE	; 254
    1be8:	a5 14       	cp	r10, r5
    1bea:	50 f4       	brcc	.+20     	; 0x1c00 <vfprintf+0x2a0>
    1bec:	b4 fe       	sbrs	r11, 4
    1bee:	0a c0       	rjmp	.+20     	; 0x1c04 <vfprintf+0x2a4>
    1bf0:	b2 fc       	sbrc	r11, 2
    1bf2:	08 c0       	rjmp	.+16     	; 0x1c04 <vfprintf+0x2a4>
    1bf4:	2b 2d       	mov	r18, r11
    1bf6:	2e 7e       	andi	r18, 0xEE	; 238
    1bf8:	05 c0       	rjmp	.+10     	; 0x1c04 <vfprintf+0x2a4>
    1bfa:	7a 2c       	mov	r7, r10
    1bfc:	2b 2d       	mov	r18, r11
    1bfe:	03 c0       	rjmp	.+6      	; 0x1c06 <vfprintf+0x2a6>
    1c00:	7a 2c       	mov	r7, r10
    1c02:	01 c0       	rjmp	.+2      	; 0x1c06 <vfprintf+0x2a6>
    1c04:	75 2c       	mov	r7, r5
    1c06:	24 ff       	sbrs	r18, 4
    1c08:	0d c0       	rjmp	.+26     	; 0x1c24 <vfprintf+0x2c4>
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	ea 0d       	add	r30, r10
    1c0e:	f1 1d       	adc	r31, r1
    1c10:	80 81       	ld	r24, Z
    1c12:	80 33       	cpi	r24, 0x30	; 48
    1c14:	11 f4       	brne	.+4      	; 0x1c1a <vfprintf+0x2ba>
    1c16:	29 7e       	andi	r18, 0xE9	; 233
    1c18:	09 c0       	rjmp	.+18     	; 0x1c2c <vfprintf+0x2cc>
    1c1a:	22 ff       	sbrs	r18, 2
    1c1c:	06 c0       	rjmp	.+12     	; 0x1c2a <vfprintf+0x2ca>
    1c1e:	73 94       	inc	r7
    1c20:	73 94       	inc	r7
    1c22:	04 c0       	rjmp	.+8      	; 0x1c2c <vfprintf+0x2cc>
    1c24:	82 2f       	mov	r24, r18
    1c26:	86 78       	andi	r24, 0x86	; 134
    1c28:	09 f0       	breq	.+2      	; 0x1c2c <vfprintf+0x2cc>
    1c2a:	73 94       	inc	r7
    1c2c:	23 fd       	sbrc	r18, 3
    1c2e:	12 c0       	rjmp	.+36     	; 0x1c54 <vfprintf+0x2f4>
    1c30:	20 ff       	sbrs	r18, 0
    1c32:	06 c0       	rjmp	.+12     	; 0x1c40 <vfprintf+0x2e0>
    1c34:	5a 2c       	mov	r5, r10
    1c36:	73 14       	cp	r7, r3
    1c38:	18 f4       	brcc	.+6      	; 0x1c40 <vfprintf+0x2e0>
    1c3a:	53 0c       	add	r5, r3
    1c3c:	57 18       	sub	r5, r7
    1c3e:	73 2c       	mov	r7, r3
    1c40:	73 14       	cp	r7, r3
    1c42:	60 f4       	brcc	.+24     	; 0x1c5c <vfprintf+0x2fc>
    1c44:	b7 01       	movw	r22, r14
    1c46:	80 e2       	ldi	r24, 0x20	; 32
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	2c 87       	std	Y+12, r18	; 0x0c
    1c4c:	83 d0       	rcall	.+262    	; 0x1d54 <fputc>
    1c4e:	73 94       	inc	r7
    1c50:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c52:	f6 cf       	rjmp	.-20     	; 0x1c40 <vfprintf+0x2e0>
    1c54:	73 14       	cp	r7, r3
    1c56:	10 f4       	brcc	.+4      	; 0x1c5c <vfprintf+0x2fc>
    1c58:	37 18       	sub	r3, r7
    1c5a:	01 c0       	rjmp	.+2      	; 0x1c5e <vfprintf+0x2fe>
    1c5c:	31 2c       	mov	r3, r1
    1c5e:	24 ff       	sbrs	r18, 4
    1c60:	11 c0       	rjmp	.+34     	; 0x1c84 <vfprintf+0x324>
    1c62:	b7 01       	movw	r22, r14
    1c64:	80 e3       	ldi	r24, 0x30	; 48
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	2c 87       	std	Y+12, r18	; 0x0c
    1c6a:	74 d0       	rcall	.+232    	; 0x1d54 <fputc>
    1c6c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1c6e:	22 ff       	sbrs	r18, 2
    1c70:	16 c0       	rjmp	.+44     	; 0x1c9e <vfprintf+0x33e>
    1c72:	21 ff       	sbrs	r18, 1
    1c74:	03 c0       	rjmp	.+6      	; 0x1c7c <vfprintf+0x31c>
    1c76:	88 e5       	ldi	r24, 0x58	; 88
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <vfprintf+0x320>
    1c7c:	88 e7       	ldi	r24, 0x78	; 120
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	b7 01       	movw	r22, r14
    1c82:	0c c0       	rjmp	.+24     	; 0x1c9c <vfprintf+0x33c>
    1c84:	82 2f       	mov	r24, r18
    1c86:	86 78       	andi	r24, 0x86	; 134
    1c88:	51 f0       	breq	.+20     	; 0x1c9e <vfprintf+0x33e>
    1c8a:	21 fd       	sbrc	r18, 1
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <vfprintf+0x332>
    1c8e:	80 e2       	ldi	r24, 0x20	; 32
    1c90:	01 c0       	rjmp	.+2      	; 0x1c94 <vfprintf+0x334>
    1c92:	8b e2       	ldi	r24, 0x2B	; 43
    1c94:	27 fd       	sbrc	r18, 7
    1c96:	8d e2       	ldi	r24, 0x2D	; 45
    1c98:	b7 01       	movw	r22, r14
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	5b d0       	rcall	.+182    	; 0x1d54 <fputc>
    1c9e:	a5 14       	cp	r10, r5
    1ca0:	30 f4       	brcc	.+12     	; 0x1cae <vfprintf+0x34e>
    1ca2:	b7 01       	movw	r22, r14
    1ca4:	80 e3       	ldi	r24, 0x30	; 48
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	55 d0       	rcall	.+170    	; 0x1d54 <fputc>
    1caa:	5a 94       	dec	r5
    1cac:	f8 cf       	rjmp	.-16     	; 0x1c9e <vfprintf+0x33e>
    1cae:	aa 94       	dec	r10
    1cb0:	f4 01       	movw	r30, r8
    1cb2:	ea 0d       	add	r30, r10
    1cb4:	f1 1d       	adc	r31, r1
    1cb6:	80 81       	ld	r24, Z
    1cb8:	b7 01       	movw	r22, r14
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	4b d0       	rcall	.+150    	; 0x1d54 <fputc>
    1cbe:	a1 10       	cpse	r10, r1
    1cc0:	f6 cf       	rjmp	.-20     	; 0x1cae <vfprintf+0x34e>
    1cc2:	33 20       	and	r3, r3
    1cc4:	09 f4       	brne	.+2      	; 0x1cc8 <vfprintf+0x368>
    1cc6:	5d ce       	rjmp	.-838    	; 0x1982 <vfprintf+0x22>
    1cc8:	b7 01       	movw	r22, r14
    1cca:	80 e2       	ldi	r24, 0x20	; 32
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	42 d0       	rcall	.+132    	; 0x1d54 <fputc>
    1cd0:	3a 94       	dec	r3
    1cd2:	f7 cf       	rjmp	.-18     	; 0x1cc2 <vfprintf+0x362>
    1cd4:	f7 01       	movw	r30, r14
    1cd6:	86 81       	ldd	r24, Z+6	; 0x06
    1cd8:	97 81       	ldd	r25, Z+7	; 0x07
    1cda:	02 c0       	rjmp	.+4      	; 0x1ce0 <vfprintf+0x380>
    1cdc:	8f ef       	ldi	r24, 0xFF	; 255
    1cde:	9f ef       	ldi	r25, 0xFF	; 255
    1ce0:	2c 96       	adiw	r28, 0x0c	; 12
    1ce2:	e2 e1       	ldi	r30, 0x12	; 18
    1ce4:	e3 c0       	rjmp	.+454    	; 0x1eac <__epilogue_restores__>

00001ce6 <calloc>:
    1ce6:	0f 93       	push	r16
    1ce8:	1f 93       	push	r17
    1cea:	cf 93       	push	r28
    1cec:	df 93       	push	r29
    1cee:	86 9f       	mul	r24, r22
    1cf0:	80 01       	movw	r16, r0
    1cf2:	87 9f       	mul	r24, r23
    1cf4:	10 0d       	add	r17, r0
    1cf6:	96 9f       	mul	r25, r22
    1cf8:	10 0d       	add	r17, r0
    1cfa:	11 24       	eor	r1, r1
    1cfc:	c8 01       	movw	r24, r16
    1cfe:	7c dc       	rcall	.-1800   	; 0x15f8 <malloc>
    1d00:	ec 01       	movw	r28, r24
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	21 f0       	breq	.+8      	; 0x1d0e <calloc+0x28>
    1d06:	a8 01       	movw	r20, r16
    1d08:	60 e0       	ldi	r22, 0x00	; 0
    1d0a:	70 e0       	ldi	r23, 0x00	; 0
    1d0c:	11 d0       	rcall	.+34     	; 0x1d30 <memset>
    1d0e:	ce 01       	movw	r24, r28
    1d10:	df 91       	pop	r29
    1d12:	cf 91       	pop	r28
    1d14:	1f 91       	pop	r17
    1d16:	0f 91       	pop	r16
    1d18:	08 95       	ret

00001d1a <strnlen_P>:
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	05 90       	lpm	r0, Z+
    1d1e:	61 50       	subi	r22, 0x01	; 1
    1d20:	70 40       	sbci	r23, 0x00	; 0
    1d22:	01 10       	cpse	r0, r1
    1d24:	d8 f7       	brcc	.-10     	; 0x1d1c <strnlen_P+0x2>
    1d26:	80 95       	com	r24
    1d28:	90 95       	com	r25
    1d2a:	8e 0f       	add	r24, r30
    1d2c:	9f 1f       	adc	r25, r31
    1d2e:	08 95       	ret

00001d30 <memset>:
    1d30:	dc 01       	movw	r26, r24
    1d32:	01 c0       	rjmp	.+2      	; 0x1d36 <memset+0x6>
    1d34:	6d 93       	st	X+, r22
    1d36:	41 50       	subi	r20, 0x01	; 1
    1d38:	50 40       	sbci	r21, 0x00	; 0
    1d3a:	e0 f7       	brcc	.-8      	; 0x1d34 <memset+0x4>
    1d3c:	08 95       	ret

00001d3e <strnlen>:
    1d3e:	fc 01       	movw	r30, r24
    1d40:	61 50       	subi	r22, 0x01	; 1
    1d42:	70 40       	sbci	r23, 0x00	; 0
    1d44:	01 90       	ld	r0, Z+
    1d46:	01 10       	cpse	r0, r1
    1d48:	d8 f7       	brcc	.-10     	; 0x1d40 <strnlen+0x2>
    1d4a:	80 95       	com	r24
    1d4c:	90 95       	com	r25
    1d4e:	8e 0f       	add	r24, r30
    1d50:	9f 1f       	adc	r25, r31
    1d52:	08 95       	ret

00001d54 <fputc>:
    1d54:	0f 93       	push	r16
    1d56:	1f 93       	push	r17
    1d58:	cf 93       	push	r28
    1d5a:	df 93       	push	r29
    1d5c:	18 2f       	mov	r17, r24
    1d5e:	09 2f       	mov	r16, r25
    1d60:	eb 01       	movw	r28, r22
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	81 fd       	sbrc	r24, 1
    1d66:	03 c0       	rjmp	.+6      	; 0x1d6e <fputc+0x1a>
    1d68:	8f ef       	ldi	r24, 0xFF	; 255
    1d6a:	9f ef       	ldi	r25, 0xFF	; 255
    1d6c:	20 c0       	rjmp	.+64     	; 0x1dae <fputc+0x5a>
    1d6e:	82 ff       	sbrs	r24, 2
    1d70:	10 c0       	rjmp	.+32     	; 0x1d92 <fputc+0x3e>
    1d72:	4e 81       	ldd	r20, Y+6	; 0x06
    1d74:	5f 81       	ldd	r21, Y+7	; 0x07
    1d76:	2c 81       	ldd	r18, Y+4	; 0x04
    1d78:	3d 81       	ldd	r19, Y+5	; 0x05
    1d7a:	42 17       	cp	r20, r18
    1d7c:	53 07       	cpc	r21, r19
    1d7e:	7c f4       	brge	.+30     	; 0x1d9e <fputc+0x4a>
    1d80:	e8 81       	ld	r30, Y
    1d82:	f9 81       	ldd	r31, Y+1	; 0x01
    1d84:	9f 01       	movw	r18, r30
    1d86:	2f 5f       	subi	r18, 0xFF	; 255
    1d88:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8a:	39 83       	std	Y+1, r19	; 0x01
    1d8c:	28 83       	st	Y, r18
    1d8e:	10 83       	st	Z, r17
    1d90:	06 c0       	rjmp	.+12     	; 0x1d9e <fputc+0x4a>
    1d92:	e8 85       	ldd	r30, Y+8	; 0x08
    1d94:	f9 85       	ldd	r31, Y+9	; 0x09
    1d96:	81 2f       	mov	r24, r17
    1d98:	09 95       	icall
    1d9a:	89 2b       	or	r24, r25
    1d9c:	29 f7       	brne	.-54     	; 0x1d68 <fputc+0x14>
    1d9e:	2e 81       	ldd	r18, Y+6	; 0x06
    1da0:	3f 81       	ldd	r19, Y+7	; 0x07
    1da2:	2f 5f       	subi	r18, 0xFF	; 255
    1da4:	3f 4f       	sbci	r19, 0xFF	; 255
    1da6:	3f 83       	std	Y+7, r19	; 0x07
    1da8:	2e 83       	std	Y+6, r18	; 0x06
    1daa:	81 2f       	mov	r24, r17
    1dac:	90 2f       	mov	r25, r16
    1dae:	df 91       	pop	r29
    1db0:	cf 91       	pop	r28
    1db2:	1f 91       	pop	r17
    1db4:	0f 91       	pop	r16
    1db6:	08 95       	ret

00001db8 <__ultoa_invert>:
    1db8:	fa 01       	movw	r30, r20
    1dba:	aa 27       	eor	r26, r26
    1dbc:	28 30       	cpi	r18, 0x08	; 8
    1dbe:	51 f1       	breq	.+84     	; 0x1e14 <__ultoa_invert+0x5c>
    1dc0:	20 31       	cpi	r18, 0x10	; 16
    1dc2:	81 f1       	breq	.+96     	; 0x1e24 <__ultoa_invert+0x6c>
    1dc4:	e8 94       	clt
    1dc6:	6f 93       	push	r22
    1dc8:	6e 7f       	andi	r22, 0xFE	; 254
    1dca:	6e 5f       	subi	r22, 0xFE	; 254
    1dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dce:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd2:	af 4f       	sbci	r26, 0xFF	; 255
    1dd4:	b1 e0       	ldi	r27, 0x01	; 1
    1dd6:	3e d0       	rcall	.+124    	; 0x1e54 <__ultoa_invert+0x9c>
    1dd8:	b4 e0       	ldi	r27, 0x04	; 4
    1dda:	3c d0       	rcall	.+120    	; 0x1e54 <__ultoa_invert+0x9c>
    1ddc:	67 0f       	add	r22, r23
    1dde:	78 1f       	adc	r23, r24
    1de0:	89 1f       	adc	r24, r25
    1de2:	9a 1f       	adc	r25, r26
    1de4:	a1 1d       	adc	r26, r1
    1de6:	68 0f       	add	r22, r24
    1de8:	79 1f       	adc	r23, r25
    1dea:	8a 1f       	adc	r24, r26
    1dec:	91 1d       	adc	r25, r1
    1dee:	a1 1d       	adc	r26, r1
    1df0:	6a 0f       	add	r22, r26
    1df2:	71 1d       	adc	r23, r1
    1df4:	81 1d       	adc	r24, r1
    1df6:	91 1d       	adc	r25, r1
    1df8:	a1 1d       	adc	r26, r1
    1dfa:	20 d0       	rcall	.+64     	; 0x1e3c <__ultoa_invert+0x84>
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <__ultoa_invert+0x48>
    1dfe:	68 94       	set
    1e00:	3f 91       	pop	r19
    1e02:	2a e0       	ldi	r18, 0x0A	; 10
    1e04:	26 9f       	mul	r18, r22
    1e06:	11 24       	eor	r1, r1
    1e08:	30 19       	sub	r19, r0
    1e0a:	30 5d       	subi	r19, 0xD0	; 208
    1e0c:	31 93       	st	Z+, r19
    1e0e:	de f6       	brtc	.-74     	; 0x1dc6 <__ultoa_invert+0xe>
    1e10:	cf 01       	movw	r24, r30
    1e12:	08 95       	ret
    1e14:	46 2f       	mov	r20, r22
    1e16:	47 70       	andi	r20, 0x07	; 7
    1e18:	40 5d       	subi	r20, 0xD0	; 208
    1e1a:	41 93       	st	Z+, r20
    1e1c:	b3 e0       	ldi	r27, 0x03	; 3
    1e1e:	0f d0       	rcall	.+30     	; 0x1e3e <__ultoa_invert+0x86>
    1e20:	c9 f7       	brne	.-14     	; 0x1e14 <__ultoa_invert+0x5c>
    1e22:	f6 cf       	rjmp	.-20     	; 0x1e10 <__ultoa_invert+0x58>
    1e24:	46 2f       	mov	r20, r22
    1e26:	4f 70       	andi	r20, 0x0F	; 15
    1e28:	40 5d       	subi	r20, 0xD0	; 208
    1e2a:	4a 33       	cpi	r20, 0x3A	; 58
    1e2c:	18 f0       	brcs	.+6      	; 0x1e34 <__ultoa_invert+0x7c>
    1e2e:	49 5d       	subi	r20, 0xD9	; 217
    1e30:	31 fd       	sbrc	r19, 1
    1e32:	40 52       	subi	r20, 0x20	; 32
    1e34:	41 93       	st	Z+, r20
    1e36:	02 d0       	rcall	.+4      	; 0x1e3c <__ultoa_invert+0x84>
    1e38:	a9 f7       	brne	.-22     	; 0x1e24 <__ultoa_invert+0x6c>
    1e3a:	ea cf       	rjmp	.-44     	; 0x1e10 <__ultoa_invert+0x58>
    1e3c:	b4 e0       	ldi	r27, 0x04	; 4
    1e3e:	a6 95       	lsr	r26
    1e40:	97 95       	ror	r25
    1e42:	87 95       	ror	r24
    1e44:	77 95       	ror	r23
    1e46:	67 95       	ror	r22
    1e48:	ba 95       	dec	r27
    1e4a:	c9 f7       	brne	.-14     	; 0x1e3e <__ultoa_invert+0x86>
    1e4c:	00 97       	sbiw	r24, 0x00	; 0
    1e4e:	61 05       	cpc	r22, r1
    1e50:	71 05       	cpc	r23, r1
    1e52:	08 95       	ret
    1e54:	9b 01       	movw	r18, r22
    1e56:	ac 01       	movw	r20, r24
    1e58:	0a 2e       	mov	r0, r26
    1e5a:	06 94       	lsr	r0
    1e5c:	57 95       	ror	r21
    1e5e:	47 95       	ror	r20
    1e60:	37 95       	ror	r19
    1e62:	27 95       	ror	r18
    1e64:	ba 95       	dec	r27
    1e66:	c9 f7       	brne	.-14     	; 0x1e5a <__ultoa_invert+0xa2>
    1e68:	62 0f       	add	r22, r18
    1e6a:	73 1f       	adc	r23, r19
    1e6c:	84 1f       	adc	r24, r20
    1e6e:	95 1f       	adc	r25, r21
    1e70:	a0 1d       	adc	r26, r0
    1e72:	08 95       	ret

00001e74 <__prologue_saves__>:
    1e74:	2f 92       	push	r2
    1e76:	3f 92       	push	r3
    1e78:	4f 92       	push	r4
    1e7a:	5f 92       	push	r5
    1e7c:	6f 92       	push	r6
    1e7e:	7f 92       	push	r7
    1e80:	8f 92       	push	r8
    1e82:	9f 92       	push	r9
    1e84:	af 92       	push	r10
    1e86:	bf 92       	push	r11
    1e88:	cf 92       	push	r12
    1e8a:	df 92       	push	r13
    1e8c:	ef 92       	push	r14
    1e8e:	ff 92       	push	r15
    1e90:	0f 93       	push	r16
    1e92:	1f 93       	push	r17
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
    1e98:	cd b7       	in	r28, 0x3d	; 61
    1e9a:	de b7       	in	r29, 0x3e	; 62
    1e9c:	ca 1b       	sub	r28, r26
    1e9e:	db 0b       	sbc	r29, r27
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	de bf       	out	0x3e, r29	; 62
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	cd bf       	out	0x3d, r28	; 61
    1eaa:	09 94       	ijmp

00001eac <__epilogue_restores__>:
    1eac:	2a 88       	ldd	r2, Y+18	; 0x12
    1eae:	39 88       	ldd	r3, Y+17	; 0x11
    1eb0:	48 88       	ldd	r4, Y+16	; 0x10
    1eb2:	5f 84       	ldd	r5, Y+15	; 0x0f
    1eb4:	6e 84       	ldd	r6, Y+14	; 0x0e
    1eb6:	7d 84       	ldd	r7, Y+13	; 0x0d
    1eb8:	8c 84       	ldd	r8, Y+12	; 0x0c
    1eba:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ebc:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ebe:	b9 84       	ldd	r11, Y+9	; 0x09
    1ec0:	c8 84       	ldd	r12, Y+8	; 0x08
    1ec2:	df 80       	ldd	r13, Y+7	; 0x07
    1ec4:	ee 80       	ldd	r14, Y+6	; 0x06
    1ec6:	fd 80       	ldd	r15, Y+5	; 0x05
    1ec8:	0c 81       	ldd	r16, Y+4	; 0x04
    1eca:	1b 81       	ldd	r17, Y+3	; 0x03
    1ecc:	aa 81       	ldd	r26, Y+2	; 0x02
    1ece:	b9 81       	ldd	r27, Y+1	; 0x01
    1ed0:	ce 0f       	add	r28, r30
    1ed2:	d1 1d       	adc	r29, r1
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	ed 01       	movw	r28, r26
    1ee0:	08 95       	ret

00001ee2 <_exit>:
    1ee2:	f8 94       	cli

00001ee4 <__stop_program>:
    1ee4:	ff cf       	rjmp	.-2      	; 0x1ee4 <__stop_program>
