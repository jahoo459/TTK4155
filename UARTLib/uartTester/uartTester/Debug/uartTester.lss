
uartTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  000001e6  0000027a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080011e  0080011e  00000298  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002ac  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a3  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001af  00000000  00000000  00000767  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00000918  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000204  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000107  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000cdf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 78 00 	jmp	0xf0	; 0xf0 <__vector_19>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__vector_21>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 ee       	ldi	r30, 0xE6	; 230
  84:	f1 e0       	ldi	r31, 0x01	; 1
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ae 31       	cpi	r26, 0x1E	; 30
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	ae e1       	ldi	r26, 0x1E	; 30
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a2 32       	cpi	r26, 0x22	; 34
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 bb 00 	call	0x176	; 0x176 <main>
  a6:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <LEDon>:
#define LED1 PB0


void LEDon()
{
	set_bit(PORTB, PB0);
  ae:	c0 9a       	sbi	0x18, 0	; 24
  b0:	08 95       	ret

000000b2 <initUart>:
}

void initUart(unsigned int baud, unsigned int fosc)
{
  b2:	9c 01       	movw	r18, r24
	uint32_t ubrr = fosc/16/baud-1;
  b4:	cb 01       	movw	r24, r22
  b6:	92 95       	swap	r25
  b8:	82 95       	swap	r24
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	89 27       	eor	r24, r25
  be:	9f 70       	andi	r25, 0x0F	; 15
  c0:	89 27       	eor	r24, r25
  c2:	b9 01       	movw	r22, r18
  c4:	0e 94 dd 00 	call	0x1ba	; 0x1ba <__udivmodhi4>
  c8:	61 50       	subi	r22, 0x01	; 1
  ca:	71 09       	sbc	r23, r1
  cc:	cb 01       	movw	r24, r22
  ce:	a0 e0       	ldi	r26, 0x00	; 0
  d0:	b0 e0       	ldi	r27, 0x00	; 0
	
	/*Set BAUD rate*/
	UBRR0H = (unsigned char) (ubrr>>8);
  d2:	89 2f       	mov	r24, r25
  d4:	9a 2f       	mov	r25, r26
  d6:	ab 2f       	mov	r26, r27
  d8:	bb 27       	eor	r27, r27
  da:	80 bd       	out	0x20, r24	; 32
	UBRR0L = (unsigned char) ubrr;
  dc:	69 b9       	out	0x09, r22	; 9
	
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  de:	88 e1       	ldi	r24, 0x18	; 24
  e0:	8a b9       	out	0x0a, r24	; 10
	
	//LEDon();
	
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<URSEL0)|(1<<USBS0)|(3<<UCSZ00);
  e2:	8e e8       	ldi	r24, 0x8E	; 142
  e4:	80 bd       	out	0x20, r24	; 32
  e6:	08 95       	ret

000000e8 <sendData>:

void sendData(unsigned char byte2Send)
{
	
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) );
  e8:	5d 9b       	sbis	0x0b, 5	; 11
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <sendData>
	/* Put data into buffer, sends the data */
	UDR0 = byte2Send;
  ec:	8c b9       	out	0x0c, r24	; 12
  ee:	08 95       	ret

000000f0 <__vector_19>:
	
	return receivedByte;
}

ISR(USART0_RXC_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	8f 93       	push	r24
	//interrupt generated after receiving a byte
	receivedByte = UDR0;		//received byte
  fc:	8c b1       	in	r24, 0x0c	; 12
  fe:	80 93 1f 01 	sts	0x011F, r24
	receivedFlag = 1;		//set the flag to 1
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 1e 01 	sts	0x011E, r24
}
 108:	8f 91       	pop	r24
 10a:	0f 90       	pop	r0
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	0f 90       	pop	r0
 110:	1f 90       	pop	r1
 112:	18 95       	reti

00000114 <__vector_21>:


//--------------------------------------------------------------

ISR(USART0_UDRE_vect){
 114:	1f 92       	push	r1
 116:	0f 92       	push	r0
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	0f 92       	push	r0
 11c:	11 24       	eor	r1, r1
 11e:	2f 93       	push	r18
 120:	3f 93       	push	r19
 122:	8f 93       	push	r24
 124:	9f 93       	push	r25
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
	
	//interrupt generated when sending buffer is empty
	
	//check if the byte to send is 0 (last byte)
	if(buffer[bufferIndex]!= 0)
 12a:	e0 91 20 01 	lds	r30, 0x0120
 12e:	f0 91 21 01 	lds	r31, 0x0121
 132:	e0 50       	subi	r30, 0x00	; 0
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	80 81       	ld	r24, Z
 138:	88 23       	and	r24, r24
 13a:	89 f0       	breq	.+34     	; 0x15e <__vector_21+0x4a>
	{

		UDR0 = buffer[bufferIndex++];
 13c:	80 91 20 01 	lds	r24, 0x0120
 140:	90 91 21 01 	lds	r25, 0x0121
 144:	9c 01       	movw	r18, r24
 146:	2f 5f       	subi	r18, 0xFF	; 255
 148:	3f 4f       	sbci	r19, 0xFF	; 255
 14a:	30 93 21 01 	sts	0x0121, r19
 14e:	20 93 20 01 	sts	0x0120, r18
 152:	fc 01       	movw	r30, r24
 154:	e0 50       	subi	r30, 0x00	; 0
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	80 81       	ld	r24, Z
 15a:	8c b9       	out	0x0c, r24	; 12
 15c:	01 c0       	rjmp	.+2      	; 0x160 <__vector_21+0x4c>
	}
	
	else
	
	{
		UCSR0B &= ~(1<<UDRIE0); 
 15e:	55 98       	cbi	0x0a, 5	; 10
	}
}
 160:	ff 91       	pop	r31
 162:	ef 91       	pop	r30
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	3f 91       	pop	r19
 16a:	2f 91       	pop	r18
 16c:	0f 90       	pop	r0
 16e:	0f be       	out	0x3f, r0	; 63
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <main>:


int main(void)
{	
	
	sei();
 176:	78 94       	sei
	
	set_bit(DDRB, PB0);
 178:	b8 9a       	sbi	0x17, 0	; 23
	clear_bit(PORTB, PB0);
 17a:	c0 98       	cbi	0x18, 0	; 24
	
	initUart(BAUDRATE, FOSC);
 17c:	60 e0       	ldi	r22, 0x00	; 0
 17e:	70 e0       	ldi	r23, 0x00	; 0
 180:	80 e8       	ldi	r24, 0x80	; 128
 182:	95 e2       	ldi	r25, 0x25	; 37
 184:	0e 94 59 00 	call	0xb2	; 0xb2 <initUart>
	
    while(1)
    {
		sendData('a');
 188:	81 e6       	ldi	r24, 0x61	; 97
 18a:	0e 94 74 00 	call	0xe8	; 0xe8 <sendData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	8f e7       	ldi	r24, 0x7F	; 127
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x1e>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x28>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x2a>
		_delay_ms(100);
		if(receivedFlag){
 1a0:	80 91 1e 01 	lds	r24, 0x011E
 1a4:	88 23       	and	r24, r24
 1a6:	81 f3       	breq	.-32     	; 0x188 <main+0x12>
			receivedFlag = 0;
 1a8:	10 92 1e 01 	sts	0x011E, r1
			LEDon();
 1ac:	0e 94 57 00 	call	0xae	; 0xae <LEDon>
			sendData(receivedByte);
 1b0:	80 91 1f 01 	lds	r24, 0x011F
 1b4:	0e 94 74 00 	call	0xe8	; 0xe8 <sendData>
 1b8:	e7 cf       	rjmp	.-50     	; 0x188 <main+0x12>

000001ba <__udivmodhi4>:
 1ba:	aa 1b       	sub	r26, r26
 1bc:	bb 1b       	sub	r27, r27
 1be:	51 e1       	ldi	r21, 0x11	; 17
 1c0:	07 c0       	rjmp	.+14     	; 0x1d0 <__udivmodhi4_ep>

000001c2 <__udivmodhi4_loop>:
 1c2:	aa 1f       	adc	r26, r26
 1c4:	bb 1f       	adc	r27, r27
 1c6:	a6 17       	cp	r26, r22
 1c8:	b7 07       	cpc	r27, r23
 1ca:	10 f0       	brcs	.+4      	; 0x1d0 <__udivmodhi4_ep>
 1cc:	a6 1b       	sub	r26, r22
 1ce:	b7 0b       	sbc	r27, r23

000001d0 <__udivmodhi4_ep>:
 1d0:	88 1f       	adc	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	5a 95       	dec	r21
 1d6:	a9 f7       	brne	.-22     	; 0x1c2 <__udivmodhi4_loop>
 1d8:	80 95       	com	r24
 1da:	90 95       	com	r25
 1dc:	bc 01       	movw	r22, r24
 1de:	cd 01       	movw	r24, r26
 1e0:	08 95       	ret

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
